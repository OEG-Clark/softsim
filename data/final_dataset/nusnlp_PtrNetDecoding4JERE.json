{"home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.WordEmbeddings.__init__": [[494, 499], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "word_decoder.WordEmbeddings.embeddings.weight.data.copy_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embed_dim", ",", "pre_trained_embed_matrix", ",", "drop_out_rate", ")", ":", "\n", "        ", "super", "(", "WordEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embed_dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "embeddings", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "pre_trained_embed_matrix", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "drop_out_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.WordEmbeddings.forward": [[500, 504], ["word_decoder.WordEmbeddings.embeddings", "word_decoder.WordEmbeddings.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "words_seq", ")", ":", "\n", "        ", "word_embeds", "=", "self", ".", "embeddings", "(", "words_seq", ")", "\n", "word_embeds", "=", "self", ".", "dropout", "(", "word_embeds", ")", "\n", "return", "word_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.WordEmbeddings.weight": [[505, 507], ["None"], "methods", ["None"], ["", "def", "weight", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.CharEmbeddings.__init__": [[510, 514], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embed_dim", ",", "drop_out_rate", ")", ":", "\n", "        ", "super", "(", "CharEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embed_dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "drop_out_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.CharEmbeddings.forward": [[515, 519], ["word_decoder.CharEmbeddings.embeddings", "word_decoder.CharEmbeddings.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "words_seq", ")", ":", "\n", "        ", "char_embeds", "=", "self", ".", "embeddings", "(", "words_seq", ")", "\n", "char_embeds", "=", "self", ".", "dropout", "(", "char_embeds", ")", "\n", "return", "char_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.GCN.__init__": [[522, 530], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "word_decoder.GCN.gcn_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "self", ".", "drop_rate", "=", "drop_rate", "\n", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gcn_num_layers", "=", "num_layers", "\n", "self", ".", "gcn_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "gcn_num_layers", ")", ":", "\n", "            ", "self", ".", "gcn_layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ")", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "drop_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.GCN.forward": [[531, 541], ["range", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "word_decoder.GCN.dropout", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "gcn_input", ",", "adj", ")", ":", "\n", "        ", "denom", "=", "torch", ".", "sum", "(", "adj", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "+", "1", "\n", "for", "i", "in", "range", "(", "self", ".", "gcn_num_layers", ")", ":", "\n", "            ", "Ax", "=", "torch", ".", "bmm", "(", "adj", ",", "gcn_input", ")", "\n", "AxW", "=", "self", ".", "gcn_layers", "[", "i", "]", "(", "Ax", ")", "\n", "AxW", "=", "AxW", "+", "self", ".", "gcn_layers", "[", "i", "]", "(", "gcn_input", ")", "\n", "AxW", "/=", "denom", "\n", "gAxW", "=", "F", ".", "relu", "(", "AxW", ")", "\n", "gcn_input", "=", "self", ".", "dropout", "(", "gAxW", ")", "if", "i", "<", "self", ".", "gcn_num_layers", "-", "1", "else", "gAxW", "\n", "", "return", "gcn_input", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.Encoder.__init__": [[544, 565], ["torch.Module.__init__", "word_decoder.CharEmbeddings", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "len", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "word_decoder.GCN", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "word_decoder.GCN"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "layers", ",", "is_bidirectional", ",", "drop_out_rate", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "is_bidirectional", "=", "is_bidirectional", "\n", "self", ".", "drop_rate", "=", "drop_out_rate", "\n", "self", ".", "char_embeddings", "=", "CharEmbeddings", "(", "len", "(", "char_vocab", ")", ",", "char_embed_dim", ",", "drop_rate", ")", "\n", "if", "enc_type", "==", "'LSTM'", ":", "\n", "            ", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "layers", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "self", ".", "is_bidirectional", ")", "\n", "", "elif", "enc_type", "==", "'GCN'", ":", "\n", "            ", "self", ".", "reduce_dim", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "2", "*", "self", ".", "hidden_dim", ")", "\n", "self", ".", "gcn", "=", "GCN", "(", "gcn_num_layers", ",", "2", "*", "self", ".", "hidden_dim", ",", "2", "*", "self", ".", "hidden_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "layers", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "self", ".", "is_bidirectional", ")", "\n", "self", ".", "gcn", "=", "GCN", "(", "gcn_num_layers", ",", "2", "*", "self", ".", "hidden_dim", ",", "2", "*", "self", ".", "hidden_dim", ")", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "drop_rate", ")", "\n", "self", ".", "conv1d", "=", "nn", ".", "Conv1d", "(", "char_embed_dim", ",", "char_feature_size", ",", "conv_filter_size", ")", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool1d", "(", "max_word_len", "+", "conv_filter_size", "-", "1", ",", "max_word_len", "+", "conv_filter_size", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.Encoder.forward": [[566, 587], ["word_decoder.Encoder.char_embeddings", "char_embeds.permute.permute.permute", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "char_feature.permute.permute.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "word_decoder.Encoder.max_pool", "word_decoder.Encoder.lstm", "word_decoder.Encoder.dropout", "word_decoder.Encoder.conv1d", "word_decoder.Encoder.reduce_dim", "word_decoder.Encoder.gcn", "word_decoder.Encoder.dropout", "word_decoder.Encoder.lstm", "word_decoder.Encoder.dropout", "word_decoder.Encoder.gcn", "word_decoder.Encoder.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "words_input", ",", "char_seq", ",", "adj", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "char_embeds", "=", "self", ".", "char_embeddings", "(", "char_seq", ")", "\n", "char_embeds", "=", "char_embeds", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "char_feature", "=", "torch", ".", "tanh", "(", "self", ".", "max_pool", "(", "self", ".", "conv1d", "(", "char_embeds", ")", ")", ")", "\n", "char_feature", "=", "char_feature", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "words_input", "=", "torch", ".", "cat", "(", "(", "words_input", ",", "char_feature", ")", ",", "-", "1", ")", "\n", "if", "enc_type", "==", "'LSTM'", ":", "\n", "            ", "outputs", ",", "hc", "=", "self", ".", "lstm", "(", "words_input", ")", "\n", "outputs", "=", "self", ".", "dropout", "(", "outputs", ")", "\n", "", "elif", "enc_type", "==", "'GCN'", ":", "\n", "            ", "outputs", "=", "self", ".", "reduce_dim", "(", "words_input", ")", "\n", "outputs", "=", "self", ".", "gcn", "(", "outputs", ",", "adj", ")", "\n", "outputs", "=", "self", ".", "dropout", "(", "outputs", ")", "\n", "", "else", ":", "\n", "            ", "outputs", ",", "hc", "=", "self", ".", "lstm", "(", "words_input", ")", "\n", "outputs", "=", "self", ".", "dropout", "(", "outputs", ")", "\n", "outputs", "=", "self", ".", "gcn", "(", "outputs", ",", "adj", ")", "\n", "outputs", "=", "self", ".", "dropout", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.Attention.__init__": [[598, 604], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "linear_ctx", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "input_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "linear_query", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "input_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.Attention.forward": [[605, 614], ["word_decoder.Attention.linear_ctx", "word_decoder.Attention.linear_query", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "word_decoder.Attention.v().squeeze", "torch.softmax.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "word_decoder.Attention.v", "float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s_prev", ",", "enc_hs", ",", "src_mask", ")", ":", "\n", "        ", "uh", "=", "self", ".", "linear_ctx", "(", "enc_hs", ")", "\n", "wq", "=", "self", ".", "linear_query", "(", "s_prev", ")", "\n", "wquh", "=", "torch", ".", "tanh", "(", "wq", "+", "uh", ")", "\n", "attn_weights", "=", "self", ".", "v", "(", "wquh", ")", ".", "squeeze", "(", ")", "\n", "attn_weights", ".", "data", ".", "masked_fill_", "(", "src_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "attn_weights", "=", "F", ".", "softmax", "(", "attn_weights", ",", "dim", "=", "-", "1", ")", "\n", "ctx", "=", "torch", ".", "bmm", "(", "attn_weights", ".", "unsqueeze", "(", "1", ")", ",", "enc_hs", ")", ".", "squeeze", "(", ")", "\n", "return", "ctx", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.NGram_Attention.__init__": [[617, 626], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "word_decoder.NGram_Attention.V_layers.append", "word_decoder.NGram_Attention.W_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "N", ")", ":", "\n", "        ", "super", "(", "NGram_Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "layers", "=", "N", "\n", "self", ".", "V_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "W_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "self", ".", "V_layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", ")", "\n", "self", ".", "W_layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.NGram_Attention.forward": [[627, 643], ["torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.softmax.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "range", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "src_mask.unsqueeze().float", "n_mask.byte.byte.byte", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.softmax.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "float", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "s_prev.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "src_mask.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "float", "torch.softmax.unsqueeze", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "enc_hs.transpose", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d", "s_prev.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "s_prev", ",", "enc_hs", ",", "src_mask", ")", ":", "\n", "        ", "att", "=", "torch", ".", "bmm", "(", "s_prev", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "V_layers", "[", "0", "]", "(", "enc_hs", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "att", ".", "data", ".", "masked_fill_", "(", "src_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "att", "=", "F", ".", "softmax", "(", "att", ",", "dim", "=", "-", "1", ")", "\n", "ctx", "=", "self", ".", "W_layers", "[", "0", "]", "(", "torch", ".", "bmm", "(", "att", ".", "unsqueeze", "(", "1", ")", ",", "enc_hs", ")", ".", "squeeze", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "layers", ")", ":", "\n", "            ", "enc_hs_ngram", "=", "torch", ".", "nn", ".", "AvgPool1d", "(", "i", "+", "1", ",", "1", ")", "(", "enc_hs", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "n_mask", "=", "src_mask", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "n_mask", "=", "torch", ".", "nn", ".", "AvgPool1d", "(", "i", "+", "1", ",", "1", ")", "(", "n_mask", ")", ".", "squeeze", "(", ")", "\n", "n_mask", "[", "n_mask", ">", "0", "]", "=", "1", "\n", "n_mask", "=", "n_mask", ".", "byte", "(", ")", "\n", "n_att", "=", "torch", ".", "bmm", "(", "s_prev", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "V_layers", "[", "i", "]", "(", "enc_hs_ngram", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "n_att", ".", "data", ".", "masked_fill_", "(", "n_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "n_att", "=", "F", ".", "softmax", "(", "n_att", ",", "dim", "=", "-", "1", ")", "\n", "ctx", "+=", "self", ".", "W_layers", "[", "i", "]", "(", "torch", ".", "bmm", "(", "n_att", ".", "unsqueeze", "(", "1", ")", ",", "enc_hs_ngram", ")", ".", "squeeze", "(", ")", ")", "\n", "", "return", "ctx", ",", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.Decoder.__init__": [[646, 664], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "len", "word_decoder.Attention", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "word_decoder.NGram_Attention", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "layers", ",", "drop_out_rate", ",", "max_length", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "drop_rate", "=", "drop_out_rate", "\n", "self", ".", "max_length", "=", "max_length", "\n", "if", "att_type", "==", "'None'", ":", "\n", "            ", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "2", "*", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "layers", ")", "\n", "", "elif", "att_type", "==", "'Unigram'", ":", "\n", "            ", "self", ".", "attention", "=", "Attention", "(", "input_dim", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "2", "*", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "layers", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attention", "=", "NGram_Attention", "(", "input_dim", ",", "3", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "3", "*", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "layers", ")", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "drop_rate", ")", "\n", "self", ".", "ent_out", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "len", "(", "word_vocab", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.Decoder.forward": [[665, 688], ["y_prev.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "word_decoder.Decoder.lstm", "word_decoder.Decoder.dropout", "word_decoder.Decoder.ent_out", "enc_hs.size", "word_decoder.mean_over_time", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "s_prev.repeat.repeat.unsqueeze", "s_prev.repeat.repeat.repeat", "word_decoder.Decoder.attention", "last_index.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "word_decoder.Decoder.attention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "src_mask.size", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "torch.sum().long", "last_index.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze", "enc_hs.size", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "src_mask.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "last_index.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.mean_over_time"], ["", "def", "forward", "(", "self", ",", "y_prev", ",", "h_prev", ",", "enc_hs", ",", "src_word_embeds", ",", "src_mask", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "src_time_steps", "=", "enc_hs", ".", "size", "(", ")", "[", "1", "]", "\n", "if", "att_type", "==", "'None'", ":", "\n", "            ", "ctx", "=", "mean_over_time", "(", "enc_hs", ",", "src_mask", ")", "\n", "attn_weights", "=", "torch", ".", "zeros", "(", "src_mask", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "\n", "", "elif", "att_type", "==", "'Unigram'", ":", "\n", "            ", "s_prev", "=", "h_prev", "[", "0", "]", "\n", "s_prev", "=", "s_prev", ".", "unsqueeze", "(", "1", ")", "\n", "s_prev", "=", "s_prev", ".", "repeat", "(", "1", ",", "src_time_steps", ",", "1", ")", "\n", "ctx", ",", "attn_weights", "=", "self", ".", "attention", "(", "s_prev", ",", "enc_hs", ",", "src_mask", ")", "\n", "", "else", ":", "\n", "            ", "last_index", "=", "src_mask", ".", "size", "(", ")", "[", "1", "]", "-", "torch", ".", "sum", "(", "src_mask", ",", "dim", "=", "-", "1", ")", ".", "long", "(", ")", "-", "1", "\n", "last_index", "=", "last_index", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "enc_hs", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "enc_last", "=", "torch", ".", "gather", "(", "enc_hs", ",", "1", ",", "last_index", ")", ".", "squeeze", "(", ")", "\n", "ctx", ",", "attn_weights", "=", "self", ".", "attention", "(", "enc_last", ",", "src_word_embeds", ",", "src_mask", ")", "\n", "ctx", "=", "torch", ".", "cat", "(", "(", "enc_last", ",", "ctx", ")", ",", "-", "1", ")", "\n", "\n", "", "y_prev", "=", "y_prev", ".", "squeeze", "(", ")", "\n", "s_cur", "=", "torch", ".", "cat", "(", "(", "y_prev", ",", "ctx", ")", ",", "1", ")", "\n", "hidden", ",", "cell_state", "=", "self", ".", "lstm", "(", "s_cur", ",", "h_prev", ")", "\n", "hidden", "=", "self", ".", "dropout", "(", "hidden", ")", "\n", "output", "=", "self", ".", "ent_out", "(", "hidden", ")", "\n", "return", "output", ",", "(", "hidden", ",", "cell_state", ")", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.SeqToSeqModel.__init__": [[691, 696], ["torch.Module.__init__", "word_decoder.WordEmbeddings", "word_decoder.Encoder", "word_decoder.Decoder", "len", "int"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SeqToSeqModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "WordEmbeddings", "(", "len", "(", "word_vocab", ")", ",", "word_embed_dim", ",", "word_embed_matrix", ",", "drop_rate", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "enc_inp_size", ",", "int", "(", "enc_hidden_size", "/", "2", ")", ",", "layers", ",", "True", ",", "drop_rate", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "dec_inp_size", ",", "dec_hidden_size", ",", "layers", ",", "drop_rate", ",", "max_trg_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.SeqToSeqModel.forward": [[697, 759], ["word_decoder.SeqToSeqModel.word_embeddings", "word_decoder.SeqToSeqModel.word_embeddings", "word_decoder.SeqToSeqModel.encoder", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "h0.cuda.cuda.cuda", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "c0.cuda.cuda.cuda", "word_decoder.SeqToSeqModel.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "word_decoder.SeqToSeqModel.decoder", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "range", "word_decoder.SeqToSeqModel.decoder", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.cat.topk", "torch.cat.topk", "torch.cat.topk", "torch.cat.topk", "torch.cat.topk", "torch.cat.topk", "torch.cat.topk", "torch.cat.topk", "torch.cat.topk", "torch.cat.topk", "dec_attn.topk", "range", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "word_decoder.SeqToSeqModel.decoder", "torch.log_softmax.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.cat.data.masked_fill_", "torch.cat.data.masked_fill_", "torch.cat.data.masked_fill_", "torch.cat.data.masked_fill_", "torch.cat.data.masked_fill_", "word_decoder.SeqToSeqModel.word_embeddings", "word_decoder.SeqToSeqModel.decoder", "torch.log_softmax.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.topk", "torch.log_softmax.topk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cur_dec_attn.topk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "word_decoder.SeqToSeqModel.size", "len", "topi.squeeze().detach", "len", "torch.log_softmax.data.masked_fill_", "torch.log_softmax().unsqueeze", "torch.log_softmax().unsqueeze", "torch.log_softmax().unsqueeze", "torch.log_softmax().unsqueeze", "torch.log_softmax().unsqueeze", "float", "topi.squeeze", "float", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_words_seq", ",", "src_chars_seq", ",", "src_mask", ",", "trg_words_seq", ",", "trg_vocab_mask", ",", "adj", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "src_word_embeds", "=", "self", ".", "word_embeddings", "(", "src_words_seq", ")", "\n", "trg_word_embeds", "=", "self", ".", "word_embeddings", "(", "trg_words_seq", ")", "\n", "\n", "batch_len", "=", "src_word_embeds", ".", "size", "(", ")", "[", "0", "]", "\n", "if", "is_training", ":", "\n", "            ", "time_steps", "=", "trg_word_embeds", ".", "size", "(", ")", "[", "1", "]", "-", "1", "\n", "", "else", ":", "\n", "            ", "time_steps", "=", "max_trg_len", "\n", "\n", "", "encoder_output", "=", "self", ".", "encoder", "(", "src_word_embeds", ",", "src_chars_seq", ",", "adj", ",", "is_training", ")", "\n", "\n", "h0", "=", "autograd", ".", "Variable", "(", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "batch_len", ",", "word_embed_dim", ")", ")", ")", "\n", "h0", "=", "h0", ".", "cuda", "(", ")", "\n", "c0", "=", "autograd", ".", "Variable", "(", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "batch_len", ",", "word_embed_dim", ")", ")", ")", "\n", "c0", "=", "c0", ".", "cuda", "(", ")", "\n", "dec_hid", "=", "(", "h0", ",", "c0", ")", "\n", "\n", "if", "is_training", ":", "\n", "            ", "dec_inp", "=", "trg_word_embeds", "[", ":", ",", "0", ",", ":", "]", "\n", "dec_out", ",", "dec_hid", ",", "dec_attn", "=", "self", ".", "decoder", "(", "dec_inp", ",", "dec_hid", ",", "encoder_output", ",", "src_word_embeds", ",", "\n", "src_mask", ",", "is_training", ")", "\n", "dec_out", "=", "dec_out", ".", "view", "(", "-", "1", ",", "len", "(", "word_vocab", ")", ")", "\n", "dec_out", "=", "F", ".", "log_softmax", "(", "dec_out", ",", "dim", "=", "-", "1", ")", "\n", "dec_out", "=", "dec_out", ".", "unsqueeze", "(", "1", ")", "\n", "for", "t", "in", "range", "(", "1", ",", "time_steps", ")", ":", "\n", "                ", "dec_inp", "=", "trg_word_embeds", "[", ":", ",", "t", ",", ":", "]", "\n", "cur_dec_out", ",", "dec_hid", ",", "dec_attn", "=", "self", ".", "decoder", "(", "dec_inp", ",", "dec_hid", ",", "encoder_output", ",", "src_word_embeds", ",", "\n", "src_mask", ",", "is_training", ")", "\n", "cur_dec_out", "=", "cur_dec_out", ".", "view", "(", "-", "1", ",", "len", "(", "word_vocab", ")", ")", "\n", "dec_out", "=", "torch", ".", "cat", "(", "(", "dec_out", ",", "F", ".", "log_softmax", "(", "cur_dec_out", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "dec_inp", "=", "trg_word_embeds", "[", ":", ",", "0", ",", ":", "]", "\n", "dec_out", ",", "dec_hid", ",", "dec_attn", "=", "self", ".", "decoder", "(", "dec_inp", ",", "dec_hid", ",", "encoder_output", ",", "src_word_embeds", ",", "\n", "src_mask", ",", "is_training", ")", "\n", "dec_out", "=", "dec_out", ".", "view", "(", "-", "1", ",", "len", "(", "word_vocab", ")", ")", "\n", "if", "copy_on", ":", "\n", "                ", "dec_out", ".", "data", ".", "masked_fill_", "(", "trg_vocab_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "dec_out", "=", "F", ".", "log_softmax", "(", "dec_out", ",", "dim", "=", "-", "1", ")", "\n", "topv", ",", "topi", "=", "dec_out", ".", "topk", "(", "1", ")", "\n", "dec_out_v", ",", "dec_out_i", "=", "dec_out", ".", "topk", "(", "1", ")", "\n", "dec_attn_v", ",", "dec_attn_i", "=", "dec_attn", ".", "topk", "(", "1", ")", "\n", "\n", "for", "t", "in", "range", "(", "1", ",", "time_steps", ")", ":", "\n", "                ", "dec_inp", "=", "self", ".", "word_embeddings", "(", "topi", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ")", "\n", "cur_dec_out", ",", "dec_hid", ",", "cur_dec_attn", "=", "self", ".", "decoder", "(", "dec_inp", ",", "dec_hid", ",", "encoder_output", ",", "src_word_embeds", ",", "\n", "src_mask", ",", "is_training", ")", "\n", "cur_dec_out", "=", "cur_dec_out", ".", "view", "(", "-", "1", ",", "len", "(", "word_vocab", ")", ")", "\n", "if", "copy_on", ":", "\n", "                    ", "cur_dec_out", ".", "data", ".", "masked_fill_", "(", "trg_vocab_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "cur_dec_out", "=", "F", ".", "log_softmax", "(", "cur_dec_out", ",", "dim", "=", "-", "1", ")", "\n", "topv", ",", "topi", "=", "cur_dec_out", ".", "topk", "(", "1", ")", "\n", "cur_dec_out_v", ",", "cur_dec_out_i", "=", "cur_dec_out", ".", "topk", "(", "1", ")", "\n", "dec_out_i", "=", "torch", ".", "cat", "(", "(", "dec_out_i", ",", "cur_dec_out_i", ")", ",", "1", ")", "\n", "cur_dec_attn_v", ",", "cur_dec_attn_i", "=", "cur_dec_attn", ".", "topk", "(", "1", ")", "\n", "dec_attn_i", "=", "torch", ".", "cat", "(", "(", "dec_attn_i", ",", "cur_dec_attn_i", ")", ",", "1", ")", "\n", "\n", "", "", "if", "is_training", ":", "\n", "            ", "dec_out", "=", "dec_out", ".", "view", "(", "-", "1", ",", "len", "(", "word_vocab", ")", ")", "\n", "return", "dec_out", "\n", "", "else", ":", "\n", "            ", "return", "dec_out_i", ",", "dec_attn_i", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.custom_print": [[20, 28], ["range", "len", "print", "logger.write", "print", "logger.write", "len", "str", "str"], "function", ["None"], ["def", "custom_print", "(", "*", "msg", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "msg", ")", ")", ":", "\n", "        ", "if", "i", "==", "len", "(", "msg", ")", "-", "1", ":", "\n", "            ", "print", "(", "msg", "[", "i", "]", ")", "\n", "logger", ".", "write", "(", "str", "(", "msg", "[", "i", "]", ")", "+", "'\\n'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "msg", "[", "i", "]", ",", "' '", ",", "end", "=", "''", ")", "\n", "logger", ".", "write", "(", "str", "(", "msg", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.load_word_embedding": [[30, 75], ["word_decoder.custom_print", "collections.OrderedDict", "collections.OrderedDict", "list", "list.append", "list.append", "list.append", "list.append", "word_decoder.custom_print", "len", "numpy.zeros", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "open", "len", "numpy.array", "line.split", "list.append", "len", "list.append", "numpy.random.uniform", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print"], ["", "", "", "def", "load_word_embedding", "(", "embed_file", ",", "vocab", ")", ":", "\n", "    ", "custom_print", "(", "'vocab length:'", ",", "len", "(", "vocab", ")", ")", "\n", "embed_vocab", "=", "OrderedDict", "(", ")", "\n", "rev_embed_vocab", "=", "OrderedDict", "(", ")", "\n", "embed_matrix", "=", "list", "(", ")", "\n", "\n", "embed_vocab", "[", "'<PAD>'", "]", "=", "0", "\n", "rev_embed_vocab", "[", "0", "]", "=", "'<PAD>'", "\n", "embed_matrix", ".", "append", "(", "np", ".", "zeros", "(", "word_embed_dim", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "embed_vocab", "[", "'<UNK>'", "]", "=", "1", "\n", "rev_embed_vocab", "[", "1", "]", "=", "'<UNK>'", "\n", "embed_matrix", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "word_embed_dim", ")", ")", "\n", "\n", "embed_vocab", "[", "'<SOS>'", "]", "=", "2", "\n", "rev_embed_vocab", "[", "2", "]", "=", "'<SOS>'", "\n", "embed_matrix", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "word_embed_dim", ")", ")", "\n", "\n", "embed_vocab", "[", "'<EOS>'", "]", "=", "3", "\n", "rev_embed_vocab", "[", "3", "]", "=", "'<EOS>'", "\n", "embed_matrix", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "word_embed_dim", ")", ")", "\n", "\n", "word_idx", "=", "4", "\n", "with", "open", "(", "embed_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "parts", "=", "line", ".", "split", "(", ")", "\n", "if", "len", "(", "parts", ")", "<", "word_embed_dim", "+", "1", ":", "\n", "                ", "continue", "\n", "", "word", "=", "parts", "[", "0", "]", "\n", "if", "word", "in", "vocab", "and", "vocab", "[", "word", "]", ">=", "word_min_freq", ":", "\n", "                ", "vec", "=", "[", "np", ".", "float32", "(", "val", ")", "for", "val", "in", "parts", "[", "1", ":", "]", "]", "\n", "embed_matrix", ".", "append", "(", "vec", ")", "\n", "embed_vocab", "[", "word", "]", "=", "word_idx", "\n", "rev_embed_vocab", "[", "word_idx", "]", "=", "word", "\n", "word_idx", "+=", "1", "\n", "\n", "", "", "", "for", "word", "in", "vocab", ":", "\n", "        ", "if", "word", "not", "in", "embed_vocab", "and", "vocab", "[", "word", "]", ">=", "word_min_freq", ":", "\n", "            ", "embed_matrix", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "word_embed_dim", ")", ")", "\n", "embed_vocab", "[", "word", "]", "=", "word_idx", "\n", "rev_embed_vocab", "[", "word_idx", "]", "=", "word", "\n", "word_idx", "+=", "1", "\n", "\n", "", "", "custom_print", "(", "'embed dictionary length:'", ",", "len", "(", "embed_vocab", ")", ")", "\n", "return", "embed_vocab", ",", "rev_embed_vocab", ",", "np", ".", "array", "(", "embed_matrix", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.build_vocab": [[77, 108], ["collections.OrderedDict", "collections.OrderedDict", "word_decoder.load_word_embedding", "open", "pickle.dump", "open.close"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.load_word_embedding"], ["", "def", "build_vocab", "(", "data", ",", "rels", ",", "vocab_file", ",", "embed_file", ")", ":", "\n", "    ", "vocab", "=", "OrderedDict", "(", ")", "\n", "char_v", "=", "OrderedDict", "(", ")", "\n", "char_v", "[", "'<PAD>'", "]", "=", "0", "\n", "char_v", "[", "'<UNK>'", "]", "=", "1", "\n", "char_v", "[", "';'", "]", "=", "2", "\n", "char_v", "[", "'|'", "]", "=", "3", "\n", "char_idx", "=", "4", "\n", "for", "d", "in", "data", ":", "\n", "        ", "for", "word", "in", "d", ".", "SrcWords", ":", "\n", "            ", "if", "word", "not", "in", "vocab", ":", "\n", "                ", "vocab", "[", "word", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "vocab", "[", "word", "]", "+=", "1", "\n", "\n", "", "for", "c", "in", "word", ":", "\n", "                ", "if", "c", "not", "in", "char_v", ":", "\n", "                    ", "char_v", "[", "c", "]", "=", "char_idx", "\n", "char_idx", "+=", "1", "\n", "\n", "", "", "", "", "for", "rel", "in", "rels", ":", "\n", "        ", "vocab", "[", "rel", "]", "=", "word_min_freq", "\n", "\n", "", "vocab", "[", "';'", "]", "=", "word_min_freq", "\n", "vocab", "[", "'|'", "]", "=", "word_min_freq", "\n", "\n", "word_v", ",", "rev_word_v", ",", "embed_matrix", "=", "load_word_embedding", "(", "embed_file", ",", "vocab", ")", "\n", "output", "=", "open", "(", "vocab_file", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "word_v", ",", "char_v", "]", ",", "output", ")", "\n", "output", ".", "close", "(", ")", "\n", "return", "word_v", ",", "rev_word_v", ",", "char_v", ",", "embed_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.load_vocab": [[110, 114], ["open", "pickle.load"], "function", ["None"], ["", "def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "with", "open", "(", "vocab_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "word_v", ",", "char_v", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "word_v", ",", "char_v", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_adj_mat": [[116, 126], ["numpy.zeros", "range", "len", "range", "len", "len", "len", "math.pow"], "function", ["None"], ["", "def", "get_adj_mat", "(", "amat", ")", ":", "\n", "    ", "K", "=", "5", "\n", "adj_mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "amat", ")", ",", "len", "(", "amat", ")", ")", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "amat", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "amat", ")", ")", ":", "\n", "            ", "if", "0", "<=", "amat", "[", "i", "]", "[", "j", "]", "<=", "K", ":", "\n", "                ", "adj_mat", "[", "i", "]", "[", "j", "]", "=", "1.0", "/", "math", ".", "pow", "(", "2", ",", "amat", "[", "i", "]", "[", "j", "]", ")", "\n", "", "else", ":", "\n", "                ", "adj_mat", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "", "", "return", "adj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_data": [[128, 166], ["range", "print", "print", "len", "src_lines[].strip", "trg_lines[].strip", "src_lines[].strip.split", "list", "list.append", "trg_lines[].strip.split", "list.append", "json.loads", "word_decoder.get_adj_mat", "Sample", "samples.append", "trg_lines[].strip.strip().split", "random.shuffle", "len", "len", "len", "len", "len", "len", "len", "len", "trg_lines[].strip.strip", "trg_lines[].strip.split", "new_trg_line.split", "len", "len"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_adj_mat"], ["", "def", "get_data", "(", "src_lines", ",", "trg_lines", ",", "adj_lines", ",", "datatype", ")", ":", "\n", "    ", "samples", "=", "[", "]", "\n", "uid", "=", "1", "\n", "src_len", "=", "-", "1", "\n", "trg_len", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "src_lines", ")", ")", ":", "\n", "        ", "src_line", "=", "src_lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "trg_line", "=", "trg_lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "src_words", "=", "src_line", ".", "split", "(", ")", "\n", "\n", "if", "datatype", "==", "1", ":", "\n", "            ", "tuples", "=", "trg_line", ".", "strip", "(", ")", ".", "split", "(", "'|'", ")", "\n", "random", ".", "shuffle", "(", "tuples", ")", "\n", "new_trg_line", "=", "' | '", ".", "join", "(", "tuples", ")", "\n", "assert", "len", "(", "trg_line", ".", "split", "(", ")", ")", "==", "len", "(", "new_trg_line", ".", "split", "(", ")", ")", "\n", "trg_line", "=", "new_trg_line", "\n", "\n", "", "trg_words", "=", "list", "(", ")", "\n", "trg_words", ".", "append", "(", "'<SOS>'", ")", "\n", "trg_words", "+=", "trg_line", ".", "split", "(", ")", "\n", "trg_words", ".", "append", "(", "'<EOS>'", ")", "\n", "\n", "adj_data", "=", "json", ".", "loads", "(", "adj_lines", "[", "i", "]", ")", "\n", "adj_mat", "=", "get_adj_mat", "(", "adj_data", "[", "'adj_mat'", "]", ")", "\n", "\n", "if", "datatype", "==", "1", "and", "(", "len", "(", "src_words", ")", ">", "max_src_len", "or", "len", "(", "trg_words", ")", ">", "max_trg_len", "+", "1", ")", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "src_words", ")", ">", "src_len", ":", "\n", "            ", "src_len", "=", "len", "(", "src_words", ")", "\n", "", "if", "len", "(", "trg_words", ")", ">", "trg_len", ":", "\n", "            ", "trg_len", "=", "len", "(", "trg_words", ")", "\n", "", "sample", "=", "Sample", "(", "Id", "=", "uid", ",", "SrcLen", "=", "len", "(", "src_words", ")", ",", "SrcWords", "=", "src_words", ",", "TrgLen", "=", "len", "(", "trg_words", ")", ",", "\n", "TrgWords", "=", "trg_words", ",", "AdjMat", "=", "adj_mat", ")", "\n", "samples", ".", "append", "(", "sample", ")", "\n", "uid", "+=", "1", "\n", "", "print", "(", "src_len", ")", "\n", "print", "(", "trg_len", ")", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.read_data": [[168, 188], ["open", "open.readlines", "open.close", "open", "open.readlines", "open.close", "open", "open.readlines", "open.close", "word_decoder.get_data"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_data"], ["", "def", "read_data", "(", "src_file", ",", "trg_file", ",", "adj_file", ",", "datatype", ")", ":", "\n", "    ", "reader", "=", "open", "(", "src_file", ")", "\n", "src_lines", "=", "reader", ".", "readlines", "(", ")", "\n", "reader", ".", "close", "(", ")", "\n", "\n", "reader", "=", "open", "(", "trg_file", ")", "\n", "trg_lines", "=", "reader", ".", "readlines", "(", ")", "\n", "reader", ".", "close", "(", ")", "\n", "\n", "reader", "=", "open", "(", "adj_file", ")", "\n", "adj_lines", "=", "reader", ".", "readlines", "(", ")", "\n", "reader", ".", "close", "(", ")", "\n", "\n", "# tot_len = 100", "\n", "# src_lines = src_lines[0:min(tot_len, len(src_lines))]", "\n", "# trg_lines = trg_lines[0:min(tot_len, len(trg_lines))]", "\n", "# adj_lines = adj_lines[0:min(tot_len, len(adj_lines))]", "\n", "\n", "data", "=", "get_data", "(", "src_lines", ",", "trg_lines", ",", "adj_lines", ",", "datatype", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_relations": [[190, 198], ["open", "open.readlines", "open.close", "rels.append", "line.strip"], "function", ["None"], ["", "def", "get_relations", "(", "file_name", ")", ":", "\n", "    ", "rels", "=", "[", "]", "\n", "reader", "=", "open", "(", "file_name", ")", "\n", "lines", "=", "reader", ".", "readlines", "(", ")", "\n", "reader", ".", "close", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "rels", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "return", "rels", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_pred_words": [[200, 213], ["range", "pred_words.append", "pred_words.append", "pred_words.append"], "function", ["None"], ["", "def", "get_pred_words", "(", "preds", ",", "attns", ",", "src_words", ")", ":", "\n", "    ", "pred_words", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "max_trg_len", ")", ":", "\n", "        ", "word_idx", "=", "preds", "[", "i", "]", "\n", "if", "word_vocab", "[", "'<EOS>'", "]", "==", "word_idx", ":", "\n", "            ", "pred_words", ".", "append", "(", "'<EOS>'", ")", "\n", "break", "\n", "", "elif", "att_type", "!=", "'None'", "and", "copy_on", "and", "word_vocab", "[", "'<UNK>'", "]", "==", "word_idx", ":", "\n", "            ", "word_idx", "=", "attns", "[", "i", "]", "\n", "pred_words", ".", "append", "(", "src_words", "[", "word_idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "pred_words", ".", "append", "(", "rev_word_vocab", "[", "word_idx", "]", ")", "\n", "", "", "return", "pred_words", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_F1": [[215, 228], ["range", "len", "word_decoder.get_pred_words", "len", "len", "range", "min", "len", "len"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_pred_words"], ["", "def", "get_F1", "(", "data", ",", "preds", ",", "attns", ")", ":", "\n", "    ", "gt_pos", "=", "0", "\n", "pred_pos", "=", "0", "\n", "correct_pos", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "data", ")", ")", ":", "\n", "        ", "gt_words", "=", "data", "[", "i", "]", ".", "TrgWords", "[", "1", ":", "]", "\n", "pred_words", "=", "get_pred_words", "(", "preds", "[", "i", "]", ",", "attns", "[", "i", "]", ",", "data", "[", "i", "]", ".", "SrcWords", ")", "\n", "gt_pos", "+=", "len", "(", "gt_words", ")", "\n", "pred_pos", "+=", "len", "(", "pred_words", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "min", "(", "len", "(", "gt_words", ")", ",", "len", "(", "pred_words", ")", ")", ")", ":", "\n", "            ", "if", "gt_words", "[", "j", "]", "==", "pred_words", "[", "j", "]", ":", "\n", "                ", "correct_pos", "+=", "1", "\n", "", "", "", "return", "pred_pos", ",", "gt_pos", ",", "correct_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.is_full_match": [[230, 235], ["None"], "function", ["None"], ["", "def", "is_full_match", "(", "triplet", ",", "triplets", ")", ":", "\n", "    ", "for", "t", "in", "triplets", ":", "\n", "        ", "if", "t", "[", "0", "]", "==", "triplet", "[", "0", "]", "and", "t", "[", "1", "]", "==", "triplet", "[", "1", "]", "and", "t", "[", "2", "]", "==", "triplet", "[", "2", "]", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.is_head_match": [[237, 246], ["word_decoder.is_full_match", "t[].split", "triplet[].split", "t[].split", "triplet[].split", "t[].split", "triplet[].split"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.is_full_match"], ["", "def", "is_head_match", "(", "triplet", ",", "triplets", ",", "cur_mode", ")", ":", "\n", "    ", "if", "cur_mode", "==", "1", ":", "\n", "        ", "return", "is_full_match", "(", "triplet", ",", "triplets", ")", "\n", "", "for", "t", "in", "triplets", ":", "\n", "        ", "if", "t", "[", "0", "]", ".", "split", "(", ")", "[", "-", "1", "]", "==", "triplet", "[", "0", "]", ".", "split", "(", ")", "[", "-", "1", "]", "and", "t", "[", "1", "]", ".", "split", "(", ")", "[", "-", "1", "]", "==", "triplet", "[", "1", "]", ".", "split", "(", ")", "[", "-", "1", "]", "and", "t", "[", "2", "]", ".", "split", "(", ")", "[", "-", "1", "]", "==", "triplet", "[", "2", "]", ".", "split", "(", ")", "[", "-", "1", "]", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.cal_f1": [[248, 324], ["range", "float", "float", "round", "round", "round", "rels.append", "min", "ref_lines[].strip", "pred_lines[].strip", "pred_lines[].strip.split", "len", "line.strip", "len", "len", "ref_lines[].strip.split", "len", "t.split", "parts[].strip", "parts[].strip", "parts[].strip", "word_decoder.is_head_match", "t.split", "len", "word_decoder.is_full_match", "pred_triplets.append", "parts[].strip", "parts[].strip", "parts[].strip", "word_decoder.is_full_match", "ref_triplets.append", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.is_head_match", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.is_full_match", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.is_full_match"], ["", "def", "cal_f1", "(", "ref_lines", ",", "pred_lines", ",", "rel_lines", ",", "cur_mode", ")", ":", "\n", "    ", "rels", "=", "[", "]", "\n", "for", "line", "in", "rel_lines", ":", "\n", "        ", "rels", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "gt_pos", "=", "0", "\n", "pred_pos", "=", "0", "\n", "correct", "=", "0", "\n", "total_pred_triple", "=", "0", "\n", "total_gt_triple", "=", "0", "\n", "none_cnt", "=", "0", "\n", "same_cnt", "=", "0", "\n", "dup", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "min", "(", "len", "(", "ref_lines", ")", ",", "len", "(", "pred_lines", ")", ")", ")", ":", "\n", "        ", "ref_line", "=", "ref_lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "ref_triplets", "=", "[", "]", "\n", "if", "ref_line", "!=", "'NIL'", ":", "\n", "            ", "for", "t", "in", "ref_line", ".", "split", "(", "'|'", ")", ":", "\n", "                ", "parts", "=", "t", ".", "split", "(", "';'", ")", "\n", "triplet", "=", "(", "parts", "[", "0", "]", ".", "strip", "(", ")", ",", "parts", "[", "1", "]", ".", "strip", "(", ")", ",", "parts", "[", "2", "]", ".", "strip", "(", ")", ")", "\n", "total_gt_triple", "+=", "1", "\n", "if", "not", "is_full_match", "(", "triplet", ",", "ref_triplets", ")", ":", "\n", "                    ", "ref_triplets", ".", "append", "(", "triplet", ")", "\n", "", "", "gt_pos", "+=", "len", "(", "ref_triplets", ")", "\n", "\n", "", "pred_line", "=", "pred_lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "if", "pred_line", "==", "'NIL'", "or", "pred_line", "==", "''", ":", "\n", "            ", "continue", "\n", "", "pred_triplets", "=", "[", "]", "\n", "for", "t", "in", "pred_line", ".", "split", "(", "'|'", ")", ":", "\n", "            ", "parts", "=", "t", ".", "split", "(", "';'", ")", "\n", "if", "len", "(", "parts", ")", "!=", "3", ":", "\n", "                ", "continue", "\n", "", "em1", "=", "parts", "[", "0", "]", ".", "strip", "(", ")", "\n", "em2", "=", "parts", "[", "1", "]", ".", "strip", "(", ")", "\n", "rel", "=", "parts", "[", "2", "]", ".", "strip", "(", ")", "\n", "\n", "if", "len", "(", "em1", ")", "==", "0", "or", "len", "(", "em2", ")", "==", "0", "or", "len", "(", "rel", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "em1", "==", "em2", ":", "\n", "                ", "same_cnt", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "rel", "not", "in", "rels", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "rel", "==", "'None'", "or", "em1", "==", "'None'", "or", "em2", "==", "'None'", ":", "\n", "                ", "none_cnt", "+=", "1", "\n", "continue", "\n", "\n", "", "triplet", "=", "(", "em1", ",", "em2", ",", "rel", ")", "\n", "total_pred_triple", "+=", "1", "\n", "if", "not", "is_full_match", "(", "triplet", ",", "pred_triplets", ")", ":", "\n", "                ", "pred_triplets", ".", "append", "(", "triplet", ")", "\n", "", "else", ":", "\n", "                ", "dup", "+=", "1", "\n", "\n", "", "", "pred_pos", "+=", "len", "(", "pred_triplets", ")", "\n", "for", "gt_triplet", "in", "ref_triplets", ":", "\n", "            ", "if", "is_head_match", "(", "gt_triplet", ",", "pred_triplets", ",", "cur_mode", ")", ":", "\n", "                ", "correct", "+=", "1", "\n", "\n", "# print(pred_pos, '\\t', gt_pos, '\\t', correct, '\\t', total_pred_triple, '\\t', total_gt_triple, '\\t', none_cnt)", "\n", "", "", "", "p", "=", "float", "(", "correct", "/", "(", "pred_pos", "+", "1e-08", ")", ")", "\n", "r", "=", "float", "(", "correct", "/", "(", "gt_pos", "+", "1e-08", ")", ")", "\n", "f1", "=", "2", "*", "p", "*", "r", "/", "(", "p", "+", "r", "+", "1e-08", ")", "\n", "p", "=", "round", "(", "p", ",", "3", ")", "\n", "r", "=", "round", "(", "r", ",", "3", ")", "\n", "f1", "=", "round", "(", "f1", ",", "3", ")", "\n", "# res = [p, r, f1]", "\n", "# print(res)", "\n", "# print(r)", "\n", "# print(f1)", "\n", "# print(same_cnt)", "\n", "# print(dup)", "\n", "return", "p", ",", "r", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.write_test_res": [[326, 332], ["open", "range", "open.close", "len", "open.write", "word_decoder.get_pred_words"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_pred_words"], ["", "def", "write_test_res", "(", "data", ",", "preds", ",", "attns", ",", "outfile", ")", ":", "\n", "    ", "writer", "=", "open", "(", "outfile", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "data", ")", ")", ":", "\n", "        ", "pred_words", "=", "get_pred_words", "(", "preds", "[", "i", "]", ",", "attns", "[", "i", "]", ",", "data", "[", "i", "]", ".", "SrcWords", ")", "[", ":", "-", "1", "]", "\n", "writer", ".", "write", "(", "' '", ".", "join", "(", "pred_words", ")", "+", "'\\n'", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.shuffle_data": [[334, 345], ["word_decoder.custom_print", "data.sort", "int", "random.sample", "len", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print"], ["", "def", "shuffle_data", "(", "data", ")", ":", "\n", "    ", "custom_print", "(", "len", "(", "data", ")", ")", "\n", "data", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "SrcLen", ")", "\n", "num_batch", "=", "int", "(", "len", "(", "data", ")", "/", "batch_size", ")", "\n", "rand_idx", "=", "random", ".", "sample", "(", "range", "(", "num_batch", ")", ",", "num_batch", ")", "\n", "new_data", "=", "[", "]", "\n", "for", "idx", "in", "rand_idx", ":", "\n", "        ", "new_data", "+=", "data", "[", "batch_size", "*", "idx", ":", "batch_size", "*", "(", "idx", "+", "1", ")", "]", "\n", "", "if", "len", "(", "new_data", ")", "<", "len", "(", "data", ")", ":", "\n", "        ", "new_data", "+=", "data", "[", "num_batch", "*", "batch_size", ":", "]", "\n", "", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_max_len": [[347, 359], ["len", "range", "len", "range", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "get_max_len", "(", "sample_batch", ")", ":", "\n", "    ", "src_max_len", "=", "len", "(", "sample_batch", "[", "0", "]", ".", "SrcWords", ")", "\n", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "sample_batch", ")", ")", ":", "\n", "        ", "if", "len", "(", "sample_batch", "[", "idx", "]", ".", "SrcWords", ")", ">", "src_max_len", ":", "\n", "            ", "src_max_len", "=", "len", "(", "sample_batch", "[", "idx", "]", ".", "SrcWords", ")", "\n", "\n", "", "", "trg_max_len", "=", "len", "(", "sample_batch", "[", "0", "]", ".", "TrgWords", ")", "\n", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "sample_batch", ")", ")", ":", "\n", "        ", "if", "len", "(", "sample_batch", "[", "idx", "]", ".", "TrgWords", ")", ">", "trg_max_len", ":", "\n", "            ", "trg_max_len", "=", "len", "(", "sample_batch", "[", "idx", "]", ".", "TrgWords", ")", "\n", "\n", "", "", "return", "src_max_len", ",", "trg_max_len", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_words_index_seq": [[361, 372], ["list", "range", "len", "list.append", "list.append", "list.append"], "function", ["None"], ["", "def", "get_words_index_seq", "(", "words", ",", "max_len", ")", ":", "\n", "    ", "seq", "=", "list", "(", ")", "\n", "for", "word", "in", "words", ":", "\n", "        ", "if", "word", "in", "word_vocab", ":", "\n", "            ", "seq", ".", "append", "(", "word_vocab", "[", "word", "]", ")", "\n", "", "else", ":", "\n", "            ", "seq", ".", "append", "(", "word_vocab", "[", "'<UNK>'", "]", ")", "\n", "", "", "pad_len", "=", "max_len", "-", "len", "(", "words", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "        ", "seq", ".", "append", "(", "word_vocab", "[", "'<PAD>'", "]", ")", "\n", "", "return", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_target_words_index_seq": [[374, 385], ["list", "range", "len", "list.append", "list.append", "list.append"], "function", ["None"], ["", "def", "get_target_words_index_seq", "(", "words", ",", "max_len", ")", ":", "\n", "    ", "seq", "=", "list", "(", ")", "\n", "for", "word", "in", "words", ":", "\n", "        ", "if", "word", "in", "word_vocab", ":", "\n", "            ", "seq", ".", "append", "(", "word_vocab", "[", "word", "]", ")", "\n", "", "else", ":", "\n", "            ", "seq", ".", "append", "(", "word_vocab", "[", "'<UNK>'", "]", ")", "\n", "", "", "pad_len", "=", "max_len", "-", "len", "(", "words", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "        ", "seq", ".", "append", "(", "word_vocab", "[", "'<EOS>'", "]", ")", "\n", "", "return", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_padded_mask": [[387, 395], ["list", "range", "range", "list.append", "list.append"], "function", ["None"], ["", "def", "get_padded_mask", "(", "cur_len", ",", "max_len", ")", ":", "\n", "    ", "mask_seq", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "cur_len", ")", ":", "\n", "        ", "mask_seq", ".", "append", "(", "0", ")", "\n", "", "pad_len", "=", "max_len", "-", "cur_len", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "        ", "mask_seq", ".", "append", "(", "1", ")", "\n", "", "return", "mask_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_target_vocab_mask": [[397, 412], ["range", "len", "mask.append"], "function", ["None"], ["", "def", "get_target_vocab_mask", "(", "src_words", ")", ":", "\n", "    ", "mask", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "word_vocab", ")", ")", ":", "\n", "        ", "mask", ".", "append", "(", "1", ")", "\n", "", "for", "word", "in", "src_words", ":", "\n", "        ", "if", "word", "in", "word_vocab", ":", "\n", "            ", "mask", "[", "word_vocab", "[", "word", "]", "]", "=", "0", "\n", "", "", "for", "rel", "in", "relations", ":", "\n", "        ", "mask", "[", "word_vocab", "[", "rel", "]", "]", "=", "0", "\n", "\n", "", "mask", "[", "word_vocab", "[", "'<UNK>'", "]", "]", "=", "0", "\n", "mask", "[", "word_vocab", "[", "'<EOS>'", "]", "]", "=", "0", "\n", "mask", "[", "word_vocab", "[", "';'", "]", "]", "=", "0", "\n", "mask", "[", "word_vocab", "[", "'|'", "]", "]", "=", "0", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_rel_mask": [[414, 426], ["list", "range", "list.append", "len", "list.append"], "function", ["None"], ["", "def", "get_rel_mask", "(", "trg_words", ",", "max_len", ")", ":", "\n", "    ", "mask_seq", "=", "list", "(", ")", "\n", "for", "word", "in", "trg_words", ":", "\n", "        ", "mask_seq", ".", "append", "(", "0", ")", "\n", "# if word in relations:", "\n", "#     mask_seq.append(0)", "\n", "# else:", "\n", "#     mask_seq.append(1)", "\n", "", "pad_len", "=", "max_len", "-", "len", "(", "trg_words", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "        ", "mask_seq", ".", "append", "(", "1", ")", "\n", "", "return", "mask_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_char_seq": [[428, 449], ["list", "range", "range", "list.append", "range", "range", "len", "range", "len", "list.append", "list.append", "list.append", "min", "list.append", "list.append", "len"], "function", ["None"], ["", "def", "get_char_seq", "(", "words", ",", "max_len", ")", ":", "\n", "    ", "char_seq", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "conv_filter_size", "-", "1", ")", ":", "\n", "        ", "char_seq", ".", "append", "(", "char_vocab", "[", "'<PAD>'", "]", ")", "\n", "", "for", "word", "in", "words", ":", "\n", "        ", "for", "c", "in", "word", "[", "0", ":", "min", "(", "len", "(", "word", ")", ",", "max_word_len", ")", "]", ":", "\n", "            ", "if", "c", "in", "char_vocab", ":", "\n", "                ", "char_seq", ".", "append", "(", "char_vocab", "[", "c", "]", ")", "\n", "", "else", ":", "\n", "                ", "char_seq", ".", "append", "(", "char_vocab", "[", "'<UNK>'", "]", ")", "\n", "", "", "pad_len", "=", "max_word_len", "-", "len", "(", "word", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "            ", "char_seq", ".", "append", "(", "char_vocab", "[", "'<PAD>'", "]", ")", "\n", "", "for", "i", "in", "range", "(", "0", ",", "conv_filter_size", "-", "1", ")", ":", "\n", "            ", "char_seq", ".", "append", "(", "char_vocab", "[", "'<PAD>'", "]", ")", "\n", "\n", "", "", "pad_len", "=", "max_len", "-", "len", "(", "words", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "max_word_len", "+", "conv_filter_size", "-", "1", ")", ":", "\n", "            ", "char_seq", ".", "append", "(", "char_vocab", "[", "'<PAD>'", "]", ")", "\n", "", "", "return", "char_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_batch_data": [[451, 491], ["word_decoder.get_max_len", "list", "list", "list", "list", "list", "list", "list.append", "list.append", "list.append", "list.append", "numpy.zeros", "adj_lst.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "word_decoder.get_words_index_seq", "word_decoder.get_padded_mask", "word_decoder.get_char_seq", "word_decoder.get_target_vocab_mask", "word_decoder.get_words_index_seq", "list.append", "list.append", "list.append", "word_decoder.get_words_index_seq", "len", "len"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_max_len", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_words_index_seq", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_padded_mask", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_char_seq", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_target_vocab_mask", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_words_index_seq", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_words_index_seq"], ["", "def", "get_batch_data", "(", "cur_samples", ",", "is_training", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns the training samples and labels as numpy array\n    \"\"\"", "\n", "batch_src_max_len", ",", "batch_trg_max_len", "=", "get_max_len", "(", "cur_samples", ")", "\n", "src_words_list", "=", "list", "(", ")", "\n", "src_words_mask_list", "=", "list", "(", ")", "\n", "src_char_seq", "=", "list", "(", ")", "\n", "\n", "trg_words_list", "=", "list", "(", ")", "\n", "trg_vocab_mask", "=", "list", "(", ")", "\n", "adj_lst", "=", "[", "]", "\n", "\n", "target", "=", "list", "(", ")", "\n", "cnt", "=", "0", "\n", "for", "sample", "in", "cur_samples", ":", "\n", "        ", "src_words_list", ".", "append", "(", "get_words_index_seq", "(", "sample", ".", "SrcWords", ",", "batch_src_max_len", ")", ")", "\n", "src_words_mask_list", ".", "append", "(", "get_padded_mask", "(", "sample", ".", "SrcLen", ",", "batch_src_max_len", ")", ")", "\n", "src_char_seq", ".", "append", "(", "get_char_seq", "(", "sample", ".", "SrcWords", ",", "batch_src_max_len", ")", ")", "\n", "trg_vocab_mask", ".", "append", "(", "get_target_vocab_mask", "(", "sample", ".", "SrcWords", ")", ")", "\n", "\n", "cur_masked_adj", "=", "np", ".", "zeros", "(", "(", "batch_src_max_len", ",", "batch_src_max_len", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cur_masked_adj", "[", ":", "len", "(", "sample", ".", "SrcWords", ")", ",", ":", "len", "(", "sample", ".", "SrcWords", ")", "]", "=", "sample", ".", "AdjMat", "\n", "adj_lst", ".", "append", "(", "cur_masked_adj", ")", "\n", "\n", "if", "is_training", ":", "\n", "            ", "padded_trg_words", "=", "get_words_index_seq", "(", "sample", ".", "TrgWords", ",", "batch_trg_max_len", ")", "\n", "trg_words_list", ".", "append", "(", "padded_trg_words", ")", "\n", "target", ".", "append", "(", "padded_trg_words", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "trg_words_list", ".", "append", "(", "get_words_index_seq", "(", "[", "'<SOS>'", "]", ",", "1", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "return", "{", "'src_words'", ":", "np", ".", "array", "(", "src_words_list", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'src_chars'", ":", "np", ".", "array", "(", "src_char_seq", ")", ",", "\n", "'src_words_mask'", ":", "np", ".", "array", "(", "src_words_mask_list", ")", ",", "\n", "'adj'", ":", "np", ".", "array", "(", "adj_lst", ")", ",", "\n", "'trg_vocab_mask'", ":", "np", ".", "array", "(", "trg_vocab_mask", ")", ",", "\n", "'trg_words'", ":", "np", ".", "array", "(", "trg_words_list", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "'target'", ":", "np", ".", "array", "(", "target", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.mean_over_time": [[589, 595], ["torch.sum.data.masked_fill_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "mask.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.eq"], "function", ["None"], ["", "", "def", "mean_over_time", "(", "x", ",", "mask", ")", ":", "\n", "    ", "x", ".", "data", ".", "masked_fill_", "(", "mask", ".", "unsqueeze", "(", "2", ")", ".", "data", ",", "0", ")", "\n", "x", "=", "torch", ".", "sum", "(", "x", ",", "dim", "=", "1", ")", "\n", "time_steps", "=", "torch", ".", "sum", "(", "mask", ".", "eq", "(", "0", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "x", "/=", "time_steps", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.set_random_seeds": [[761, 767], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "", "", "def", "set_random_seeds", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "n_gpu", ">", "1", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.get_model": [[769, 772], ["word_decoder.SeqToSeqModel"], "function", ["None"], ["", "", "def", "get_model", "(", "model_id", ")", ":", "\n", "    ", "if", "model_id", "==", "1", ":", "\n", "        ", "return", "SeqToSeqModel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.predict": [[774, 828], ["math.ceil", "list", "list", "model.eval", "word_decoder.set_random_seeds", "datetime.datetime.now", "tqdm.tqdm", "datetime.datetime.now", "word_decoder.custom_print", "range", "min", "word_decoder.get_batch_data", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "list", "list", "model.zero_grad", "len", "len", "len", "len", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "src_words_seq.cuda.cuda", "src_words_mask.cuda.cuda", "trg_vocab_mask.cuda.cuda", "trg_words_seq.cuda.cuda", "adj.cuda.cuda", "src_chars_seq.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "outputs[].data.cpu().numpy", "outputs[].data.cpu().numpy", "model", "outputs[].data.cpu", "outputs[].data.cpu"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.set_random_seeds", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_batch_data"], ["", "", "def", "predict", "(", "samples", ",", "model", ",", "model_id", ")", ":", "\n", "    ", "pred_batch_size", "=", "batch_size", "\n", "batch_count", "=", "math", ".", "ceil", "(", "len", "(", "samples", ")", "/", "pred_batch_size", ")", "\n", "move_last_batch", "=", "False", "\n", "if", "len", "(", "samples", ")", "-", "batch_size", "*", "(", "batch_count", "-", "1", ")", "==", "1", ":", "\n", "        ", "move_last_batch", "=", "True", "\n", "batch_count", "-=", "1", "\n", "", "preds", "=", "list", "(", ")", "\n", "attns", "=", "list", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "set_random_seeds", "(", "random_seed", ")", "\n", "start_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "for", "batch_idx", "in", "tqdm", "(", "range", "(", "0", ",", "batch_count", ")", ")", ":", "\n", "        ", "batch_start", "=", "batch_idx", "*", "pred_batch_size", "\n", "batch_end", "=", "min", "(", "len", "(", "samples", ")", ",", "batch_start", "+", "pred_batch_size", ")", "\n", "if", "batch_idx", "==", "batch_count", "-", "1", "and", "move_last_batch", ":", "\n", "            ", "batch_end", "=", "len", "(", "samples", ")", "\n", "\n", "", "cur_batch", "=", "samples", "[", "batch_start", ":", "batch_end", "]", "\n", "cur_samples_input", "=", "get_batch_data", "(", "cur_batch", ",", "False", ")", "\n", "\n", "src_words_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'src_words'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "src_words_mask", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'src_words_mask'", "]", ".", "astype", "(", "'uint8'", ")", ")", "\n", "trg_vocab_mask", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'trg_vocab_mask'", "]", ".", "astype", "(", "'uint8'", ")", ")", "\n", "trg_words_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'trg_words'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "adj", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'adj'", "]", ".", "astype", "(", "'float32'", ")", ")", "\n", "src_chars_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'src_chars'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "src_words_seq", "=", "src_words_seq", ".", "cuda", "(", ")", "\n", "src_words_mask", "=", "src_words_mask", ".", "cuda", "(", ")", "\n", "trg_vocab_mask", "=", "trg_vocab_mask", ".", "cuda", "(", ")", "\n", "trg_words_seq", "=", "trg_words_seq", ".", "cuda", "(", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "src_chars_seq", "=", "src_chars_seq", ".", "cuda", "(", ")", "\n", "\n", "", "src_words_seq", "=", "autograd", ".", "Variable", "(", "src_words_seq", ")", "\n", "src_words_mask", "=", "autograd", ".", "Variable", "(", "src_words_mask", ")", "\n", "trg_vocab_mask", "=", "autograd", ".", "Variable", "(", "trg_vocab_mask", ")", "\n", "adj", "=", "autograd", ".", "Variable", "(", "adj", ")", "\n", "src_chars_seq", "=", "autograd", ".", "Variable", "(", "src_chars_seq", ")", "\n", "\n", "trg_words_seq", "=", "autograd", ".", "Variable", "(", "trg_words_seq", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "model_id", "==", "1", ":", "\n", "                ", "outputs", "=", "model", "(", "src_words_seq", ",", "src_chars_seq", ",", "src_words_mask", ",", "trg_words_seq", ",", "trg_vocab_mask", ",", "adj", ",", "\n", "False", ")", "\n", "\n", "", "", "preds", "+=", "list", "(", "outputs", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "attns", "+=", "list", "(", "outputs", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "", "end_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "custom_print", "(", "'Prediction time:'", ",", "end_time", "-", "start_time", ")", "\n", "return", "preds", ",", "attns", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.word_decoder.train_model": [[830, 946], ["len", "int", "word_decoder.custom_print", "word_decoder.get_model", "sum", "word_decoder.custom_print", "word_decoder.custom_print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.NLLLoss", "torch.Adam", "word_decoder.custom_print", "range", "word_decoder.custom_print", "word_decoder.custom_print", "word_decoder.custom_print", "math.ceil", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.train", "torch.nn.DataParallel.zero_grad", "word_decoder.custom_print", "word_decoder.set_random_seeds", "word_decoder.shuffle_data", "datetime.datetime.now", "tqdm.tqdm", "datetime.datetime.now", "word_decoder.custom_print", "word_decoder.custom_print", "word_decoder.custom_print", "word_decoder.set_random_seeds", "word_decoder.predict", "word_decoder.get_F1", "word_decoder.custom_print", "word_decoder.custom_print", "word_decoder.custom_print", "len", "p.numel", "range", "min", "word_decoder.get_batch_data", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "target.cuda.view().squeeze", "nn.NLLLoss.", "criterion.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "criterion.item", "float", "float", "word_decoder.custom_print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.nn.DataParallel.parameters", "len", "len", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "src_words_seq.cuda.cuda", "src_words_mask.cuda.cuda", "trg_vocab_mask.cuda.cuda", "trg_words_seq.cuda.cuda", "adj.cuda.cuda", "src_chars_seq.cuda.cuda", "target.cuda.cuda", "torch.nn.DataParallel.", "torch.nn.DataParallel.parameters", "optim.Adam.step", "torch.nn.DataParallel.zero_grad", "torch.nn.DataParallel.state_dict", "target.cuda.view"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_model", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.set_random_seeds", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.shuffle_data", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.set_random_seeds", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.predict", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_F1", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_batch_data", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print"], ["", "def", "train_model", "(", "model_id", ",", "train_samples", ",", "dev_samples", ",", "best_model_file", ")", ":", "\n", "    ", "train_size", "=", "len", "(", "train_samples", ")", "\n", "batch_count", "=", "int", "(", "math", ".", "ceil", "(", "train_size", "/", "batch_size", ")", ")", "\n", "move_last_batch", "=", "False", "\n", "if", "len", "(", "train_samples", ")", "-", "batch_size", "*", "(", "batch_count", "-", "1", ")", "==", "1", ":", "\n", "        ", "move_last_batch", "=", "True", "\n", "batch_count", "-=", "1", "\n", "", "custom_print", "(", "batch_count", ")", "\n", "model", "=", "get_model", "(", "model_id", ")", "\n", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "custom_print", "(", "'Parameters size:'", ",", "pytorch_total_params", ")", "\n", "\n", "custom_print", "(", "model", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "if", "n_gpu", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "NLLLoss", "(", "ignore_index", "=", "0", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "\n", "custom_print", "(", "optimizer", ")", "\n", "\n", "best_dev_acc", "=", "-", "1.0", "\n", "best_epoch_idx", "=", "-", "1", "\n", "best_epoch_seed", "=", "-", "1", "\n", "for", "epoch_idx", "in", "range", "(", "0", ",", "num_epoch", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "custom_print", "(", "'Epoch:'", ",", "epoch_idx", "+", "1", ")", "\n", "cur_seed", "=", "random_seed", "+", "epoch_idx", "+", "1", "\n", "set_random_seeds", "(", "cur_seed", ")", "\n", "cur_shuffled_train_data", "=", "shuffle_data", "(", "train_samples", ")", "\n", "start_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "train_loss_val", "=", "0.0", "\n", "\n", "for", "batch_idx", "in", "tqdm", "(", "range", "(", "0", ",", "batch_count", ")", ")", ":", "\n", "            ", "batch_start", "=", "batch_idx", "*", "batch_size", "\n", "batch_end", "=", "min", "(", "len", "(", "cur_shuffled_train_data", ")", ",", "batch_start", "+", "batch_size", ")", "\n", "if", "batch_idx", "==", "batch_count", "-", "1", "and", "move_last_batch", ":", "\n", "                ", "batch_end", "=", "len", "(", "cur_shuffled_train_data", ")", "\n", "\n", "", "cur_batch", "=", "cur_shuffled_train_data", "[", "batch_start", ":", "batch_end", "]", "\n", "cur_samples_input", "=", "get_batch_data", "(", "cur_batch", ",", "True", ")", "\n", "\n", "src_words_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'src_words'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "src_words_mask", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'src_words_mask'", "]", ".", "astype", "(", "'uint8'", ")", ")", "\n", "trg_vocab_mask", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'trg_vocab_mask'", "]", ".", "astype", "(", "'uint8'", ")", ")", "\n", "trg_words_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'trg_words'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "adj", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'adj'", "]", ".", "astype", "(", "'float32'", ")", ")", "\n", "src_chars_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'src_chars'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "\n", "target", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'target'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "src_words_seq", "=", "src_words_seq", ".", "cuda", "(", ")", "\n", "src_words_mask", "=", "src_words_mask", ".", "cuda", "(", ")", "\n", "trg_vocab_mask", "=", "trg_vocab_mask", ".", "cuda", "(", ")", "\n", "trg_words_seq", "=", "trg_words_seq", ".", "cuda", "(", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "src_chars_seq", "=", "src_chars_seq", ".", "cuda", "(", ")", "\n", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "", "src_words_seq", "=", "autograd", ".", "Variable", "(", "src_words_seq", ")", "\n", "src_words_mask", "=", "autograd", ".", "Variable", "(", "src_words_mask", ")", "\n", "trg_vocab_mask", "=", "autograd", ".", "Variable", "(", "trg_vocab_mask", ")", "\n", "trg_words_seq", "=", "autograd", ".", "Variable", "(", "trg_words_seq", ")", "\n", "adj", "=", "autograd", ".", "Variable", "(", "adj", ")", "\n", "src_chars_seq", "=", "autograd", ".", "Variable", "(", "src_chars_seq", ")", "\n", "\n", "target", "=", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "if", "model_id", "==", "1", ":", "\n", "                ", "outputs", "=", "model", "(", "src_words_seq", ",", "src_chars_seq", ",", "src_words_mask", ",", "trg_words_seq", ",", "trg_vocab_mask", ",", "adj", ",", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "10.0", ")", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "update_freq", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "\n", "", "train_loss_val", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "train_loss_val", "/=", "batch_count", "\n", "end_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "custom_print", "(", "'Training loss:'", ",", "train_loss_val", ")", "\n", "custom_print", "(", "'Training time:'", ",", "end_time", "-", "start_time", ")", "\n", "\n", "custom_print", "(", "'\\nDev Results\\n'", ")", "\n", "set_random_seeds", "(", "random_seed", ")", "\n", "dev_preds", ",", "dev_attns", "=", "predict", "(", "dev_samples", ",", "model", ",", "model_id", ")", "\n", "\n", "pred_pos", ",", "gt_pos", ",", "correct_pos", "=", "get_F1", "(", "dev_samples", ",", "dev_preds", ",", "dev_attns", ")", "\n", "custom_print", "(", "pred_pos", ",", "'\\t'", ",", "gt_pos", ",", "'\\t'", ",", "correct_pos", ")", "\n", "p", "=", "float", "(", "correct_pos", ")", "/", "(", "pred_pos", "+", "1e-8", ")", "\n", "r", "=", "float", "(", "correct_pos", ")", "/", "(", "gt_pos", "+", "1e-8", ")", "\n", "dev_acc", "=", "(", "2", "*", "p", "*", "r", ")", "/", "(", "p", "+", "r", "+", "1e-8", ")", "\n", "custom_print", "(", "'F1:'", ",", "dev_acc", ")", "\n", "\n", "if", "dev_acc", ">=", "best_dev_acc", ":", "\n", "            ", "best_epoch_idx", "=", "epoch_idx", "+", "1", "\n", "best_epoch_seed", "=", "cur_seed", "\n", "custom_print", "(", "'model saved......'", ")", "\n", "best_dev_acc", "=", "dev_acc", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "best_model_file", ")", "\n", "\n", "", "custom_print", "(", "'\\n\\n'", ")", "\n", "if", "epoch_idx", "+", "1", "-", "best_epoch_idx", ">=", "early_stop_cnt", ":", "\n", "            ", "break", "\n", "\n", "", "", "custom_print", "(", "'*******'", ")", "\n", "custom_print", "(", "'Best Epoch:'", ",", "best_epoch_idx", ")", "\n", "custom_print", "(", "'Best Epoch Seed:'", ",", "best_epoch_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.WordEmbeddings.__init__": [[513, 518], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "ptrnet_decoder.WordEmbeddings.embeddings.weight.data.copy_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embed_dim", ",", "pre_trained_embed_matrix", ",", "drop_out_rate", ")", ":", "\n", "        ", "super", "(", "WordEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embed_dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "embeddings", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "pre_trained_embed_matrix", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "drop_out_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.WordEmbeddings.forward": [[519, 523], ["ptrnet_decoder.WordEmbeddings.embeddings", "ptrnet_decoder.WordEmbeddings.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "words_seq", ")", ":", "\n", "        ", "word_embeds", "=", "self", ".", "embeddings", "(", "words_seq", ")", "\n", "word_embeds", "=", "self", ".", "dropout", "(", "word_embeds", ")", "\n", "return", "word_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.WordEmbeddings.weight": [[524, 526], ["None"], "methods", ["None"], ["", "def", "weight", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.CharEmbeddings.__init__": [[529, 533], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embed_dim", ",", "drop_out_rate", ")", ":", "\n", "        ", "super", "(", "CharEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embed_dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "drop_out_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.CharEmbeddings.forward": [[534, 538], ["ptrnet_decoder.CharEmbeddings.embeddings", "ptrnet_decoder.CharEmbeddings.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "words_seq", ")", ":", "\n", "        ", "char_embeds", "=", "self", ".", "embeddings", "(", "words_seq", ")", "\n", "char_embeds", "=", "self", ".", "dropout", "(", "char_embeds", ")", "\n", "return", "char_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Multi_Head_Self_Attention.__init__": [[541, 555], ["torch.Module.__init__", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "ptrnet_decoder.Multi_Head_Self_Attention.q_head.append", "ptrnet_decoder.Multi_Head_Self_Attention.k_head.append", "ptrnet_decoder.Multi_Head_Self_Attention.v_head.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "head_cnt", ",", "h_dim", ")", ":", "\n", "        ", "super", "(", "Multi_Head_Self_Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "m", "=", "head_cnt", "\n", "self", ".", "hidden_dim", "=", "int", "(", "h_dim", "/", "self", ".", "m", ")", "\n", "self", ".", "q_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "k_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "v_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "m", ")", ":", "\n", "            ", "self", ".", "q_head", ".", "append", "(", "nn", ".", "Linear", "(", "h_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "k_head", ".", "append", "(", "nn", ".", "Linear", "(", "h_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "v_head", ".", "append", "(", "nn", ".", "Linear", "(", "h_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "", "self", ".", "w", "=", "nn", ".", "Linear", "(", "h_dim", ",", "h_dim", ")", "\n", "self", ".", "w1", "=", "nn", ".", "Linear", "(", "h_dim", ",", "h_dim", ")", "\n", "self", ".", "w2", "=", "nn", ".", "Linear", "(", "h_dim", ",", "h_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Multi_Head_Self_Attention.forward": [[556, 572], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "math.sqrt", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "range", "ptrnet_decoder.Multi_Head_Self_Attention.w", "ptrnet_decoder.Multi_Head_Self_Attention.w2", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "math.sqrt", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "ptrnet_decoder.Multi_Head_Self_Attention.w1", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "Q", ",", "K", ",", "V", ")", ":", "\n", "        ", "att", "=", "torch", ".", "bmm", "(", "self", ".", "q_head", "[", "0", "]", "(", "Q", ")", ",", "self", ".", "k_head", "[", "0", "]", "(", "K", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "att", "/=", "math", ".", "sqrt", "(", "self", ".", "hidden_dim", ")", "\n", "att", "=", "F", ".", "softmax", "(", "att", ",", "dim", "=", "-", "1", ")", "\n", "sent", "=", "torch", ".", "bmm", "(", "att", ",", "self", ".", "v_head", "[", "0", "]", "(", "V", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "m", ")", ":", "\n", "            ", "att", "=", "torch", ".", "bmm", "(", "self", ".", "q_head", "[", "i", "]", "(", "Q", ")", ",", "self", ".", "k_head", "[", "i", "]", "(", "K", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "att", "/=", "math", ".", "sqrt", "(", "self", ".", "hidden_dim", ")", "\n", "att", "=", "F", ".", "softmax", "(", "att", ",", "dim", "=", "-", "1", ")", "\n", "cur_sent", "=", "torch", ".", "bmm", "(", "att", ",", "self", ".", "v_head", "[", "i", "]", "(", "V", ")", ")", "\n", "sent", "=", "torch", ".", "cat", "(", "(", "sent", ",", "cur_sent", ")", ",", "-", "1", ")", "\n", "", "sent", "=", "self", ".", "w", "(", "sent", ")", "\n", "sent", "=", "nn", ".", "LayerNorm", "(", "sent", ".", "size", "(", ")", "[", "1", ":", "]", ",", "elementwise_affine", "=", "False", ")", "(", "sent", "+", "Q", ")", "\n", "lin_sent", "=", "self", ".", "w2", "(", "nn", ".", "ReLU", "(", ")", "(", "self", ".", "w1", "(", "sent", ")", ")", ")", "\n", "sent", "=", "nn", ".", "LayerNorm", "(", "sent", ".", "size", "(", ")", "[", "1", ":", "]", ",", "elementwise_affine", "=", "False", ")", "(", "sent", "+", "lin_sent", ")", "\n", "return", "sent", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Multi_Head_Attentive_Sent.__init__": [[575, 587], ["torch.Module.__init__", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "ptrnet_decoder.Multi_Head_Attentive_Sent.q_head.append", "ptrnet_decoder.Multi_Head_Attentive_Sent.k_head.append", "ptrnet_decoder.Multi_Head_Attentive_Sent.v_head.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "head_cnt", ",", "h_dim", ")", ":", "\n", "        ", "super", "(", "Multi_Head_Attentive_Sent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "m", "=", "head_cnt", "\n", "self", ".", "hidden_dim", "=", "int", "(", "h_dim", "/", "self", ".", "m", ")", "\n", "self", ".", "q_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "k_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "v_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "m", ")", ":", "\n", "            ", "self", ".", "q_head", ".", "append", "(", "nn", ".", "Linear", "(", "h_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "k_head", ".", "append", "(", "nn", ".", "Linear", "(", "h_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "v_head", ".", "append", "(", "nn", ".", "Linear", "(", "h_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "", "self", ".", "w", "=", "nn", ".", "Linear", "(", "h_dim", ",", "h_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Multi_Head_Attentive_Sent.forward": [[588, 603], ["torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "math.sqrt", "torch.softmax.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "range", "ptrnet_decoder.Multi_Head_Attentive_Sent.w", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "math.sqrt", "torch.softmax.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_hs", ",", "arg", ",", "src_mask", ")", ":", "\n", "        ", "att", "=", "torch", ".", "bmm", "(", "self", ".", "q_head", "[", "0", "]", "(", "enc_hs", ")", ",", "self", ".", "k_head", "[", "0", "]", "(", "arg", ")", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "att", "/=", "math", ".", "sqrt", "(", "self", ".", "hidden_dim", ")", "\n", "att", ".", "data", ".", "masked_fill_", "(", "src_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "att", "=", "F", ".", "softmax", "(", "att", ",", "dim", "=", "-", "1", ")", "\n", "sent", "=", "torch", ".", "bmm", "(", "att", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "v_head", "[", "0", "]", "(", "enc_hs", ")", ")", ".", "squeeze", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "m", ")", ":", "\n", "            ", "att", "=", "torch", ".", "bmm", "(", "self", ".", "q_head", "[", "i", "]", "(", "enc_hs", ")", ",", "self", ".", "k_head", "[", "i", "]", "(", "arg", ")", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "att", "/=", "math", ".", "sqrt", "(", "self", ".", "hidden_dim", ")", "\n", "att", ".", "data", ".", "masked_fill_", "(", "src_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "att", "=", "F", ".", "softmax", "(", "att", ",", "dim", "=", "-", "1", ")", "\n", "cur_sent", "=", "torch", ".", "bmm", "(", "att", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "v_head", "[", "i", "]", "(", "enc_hs", ")", ")", ".", "squeeze", "(", ")", "\n", "sent", "=", "torch", ".", "cat", "(", "(", "sent", ",", "cur_sent", ")", ",", "-", "1", ")", "\n", "", "sent", "=", "self", ".", "w", "(", "sent", ")", "\n", "return", "sent", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Multi_Factor_Attention.__init__": [[616, 625], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ptrnet_decoder.Multi_Factor_Attention.layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "factor_cnt", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "self", ".", "drop_rate", "=", "drop_rate", "\n", "super", "(", "Multi_Factor_Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "m", "=", "factor_cnt", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "m", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ")", "\n", "", "self", ".", "w", "=", "nn", ".", "Linear", "(", "2", "*", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "drop_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Multi_Factor_Attention.forward": [[626, 639], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.cat.data.masked_fill_", "torch.cat.data.masked_fill_", "torch.cat.data.masked_fill_", "torch.cat.data.masked_fill_", "torch.cat.data.masked_fill_", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "range", "[].squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "ptrnet_decoder.Multi_Factor_Attention.w", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.softmax().unsqueeze.data.masked_fill_", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "float", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh.unsqueeze", "torch.tanh.unsqueeze", "torch.tanh.unsqueeze", "torch.tanh.unsqueeze", "torch.tanh.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "float", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh.unsqueeze", "torch.tanh.unsqueeze", "torch.tanh.unsqueeze", "torch.tanh.unsqueeze", "torch.tanh.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_hs", ",", "src_mask", ",", "arg1", ",", "arg2", ")", ":", "\n", "        ", "arg", "=", "torch", ".", "tanh", "(", "self", ".", "w", "(", "torch", ".", "cat", "(", "(", "arg1", ",", "arg2", ")", ",", "-", "1", ")", ")", ")", "\n", "att", "=", "torch", ".", "bmm", "(", "torch", ".", "tanh", "(", "self", ".", "layers", "[", "0", "]", "(", "enc_hs", ")", ")", ",", "arg", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "att", ".", "data", ".", "masked_fill_", "(", "src_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "att", "=", "F", ".", "softmax", "(", "att", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "m", ")", ":", "\n", "            ", "cur_att", "=", "torch", ".", "bmm", "(", "torch", ".", "tanh", "(", "self", ".", "layers", "[", "i", "]", "(", "enc_hs", ")", ")", ",", "arg", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "cur_att", ".", "data", ".", "masked_fill_", "(", "src_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "cur_att", "=", "F", ".", "softmax", "(", "cur_att", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "att", "=", "torch", ".", "cat", "(", "(", "att", ",", "cur_att", ")", ",", "1", ")", "\n", "", "att", "=", "torch", ".", "max", "(", "att", ",", "1", ")", "[", "0", "]", ".", "squeeze", "(", ")", "\n", "sent", "=", "torch", ".", "bmm", "(", "att", ".", "unsqueeze", "(", "1", ")", ",", "enc_hs", ")", ".", "squeeze", "(", ")", "\n", "return", "sent", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.GCN.__init__": [[642, 651], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "ptrnet_decoder.GCN.gcn_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "self", ".", "drop_rate", "=", "drop_rate", "\n", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gcn_num_layers", "=", "num_layers", "\n", "self", ".", "gcn_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "gcn_num_layers", ")", ":", "\n", "            ", "self", ".", "gcn_layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ")", "\n", "", "self", ".", "W", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "drop_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.GCN.forward": [[652, 667], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "range", "ptrnet_decoder.GCN.W", "gcn_input.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "denom.unsqueeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ptrnet_decoder.GCN.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "gcn_input", ",", "adj", ")", ":", "\n", "# denom = torch.sum(adj, 2).unsqueeze(2) + 1", "\n", "        ", "att_scores", "=", "torch", ".", "bmm", "(", "self", ".", "W", "(", "gcn_input", ")", ",", "gcn_input", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "exp_att_scores", "=", "torch", ".", "exp", "(", "att_scores", ")", "\n", "combined_att", "=", "adj", "*", "exp_att_scores", "\n", "denom", "=", "torch", ".", "sum", "(", "combined_att", ",", "dim", "=", "-", "1", ")", "+", "1", "\n", "norm_att", "=", "combined_att", "/", "denom", ".", "unsqueeze", "(", "2", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "gcn_num_layers", ")", ":", "\n", "            ", "Ax", "=", "torch", ".", "bmm", "(", "norm_att", ",", "gcn_input", ")", "\n", "AxW", "=", "self", ".", "gcn_layers", "[", "i", "]", "(", "Ax", ")", "\n", "AxW", "=", "AxW", "+", "self", ".", "gcn_layers", "[", "i", "]", "(", "gcn_input", ")", "\n", "# AxW /= denom", "\n", "gAxW", "=", "F", ".", "relu", "(", "AxW", ")", "\n", "gcn_input", "=", "self", ".", "dropout", "(", "gAxW", ")", "if", "i", "<", "self", ".", "gcn_num_layers", "-", "1", "else", "gAxW", "\n", "", "return", "gcn_input", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Attention.__init__": [[670, 676], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "linear_ctx", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "input_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "linear_query", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "input_dim", ",", "bias", "=", "True", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Attention.forward": [[677, 686], ["ptrnet_decoder.Attention.linear_ctx", "ptrnet_decoder.Attention.linear_query", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "ptrnet_decoder.Attention.v().squeeze", "torch.softmax.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "ptrnet_decoder.Attention.v", "float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s_prev", ",", "enc_hs", ",", "src_mask", ")", ":", "\n", "        ", "uh", "=", "self", ".", "linear_ctx", "(", "enc_hs", ")", "\n", "wq", "=", "self", ".", "linear_query", "(", "s_prev", ")", "\n", "wquh", "=", "torch", ".", "tanh", "(", "wq", "+", "uh", ")", "\n", "attn_weights", "=", "self", ".", "v", "(", "wquh", ")", ".", "squeeze", "(", ")", "\n", "attn_weights", ".", "data", ".", "masked_fill_", "(", "src_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "attn_weights", "=", "F", ".", "softmax", "(", "attn_weights", ",", "dim", "=", "-", "1", ")", "\n", "ctx", "=", "torch", ".", "bmm", "(", "attn_weights", ".", "unsqueeze", "(", "1", ")", ",", "enc_hs", ")", ".", "squeeze", "(", ")", "\n", "return", "ctx", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Encoder.__init__": [[689, 712], ["torch.Module.__init__", "ptrnet_decoder.WordEmbeddings", "ptrnet_decoder.CharEmbeddings", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "len", "len", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "ptrnet_decoder.GCN", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "ptrnet_decoder.GCN"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "layers", ",", "is_bidirectional", ",", "drop_out_rate", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "is_bidirectional", "=", "is_bidirectional", "\n", "self", ".", "drop_rate", "=", "drop_out_rate", "\n", "self", ".", "word_embeddings", "=", "WordEmbeddings", "(", "len", "(", "word_vocab", ")", ",", "word_embed_dim", ",", "word_embed_matrix", ",", "drop_rate", ")", "\n", "self", ".", "char_embeddings", "=", "CharEmbeddings", "(", "len", "(", "char_vocab", ")", ",", "char_embed_dim", ",", "drop_rate", ")", "\n", "# self.pos_embeddings = nn.Embedding(max_positional_idx, positional_embed_dim, padding_idx=0)", "\n", "if", "enc_type", "==", "'LSTM'", ":", "\n", "            ", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "layers", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "self", ".", "is_bidirectional", ")", "\n", "", "elif", "enc_type", "==", "'GCN'", ":", "\n", "            ", "self", ".", "reduce_dim", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "2", "*", "self", ".", "hidden_dim", ")", "\n", "self", ".", "gcn", "=", "GCN", "(", "gcn_num_layers", ",", "2", "*", "self", ".", "hidden_dim", ",", "2", "*", "self", ".", "hidden_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "layers", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "self", ".", "is_bidirectional", ")", "\n", "self", ".", "gcn", "=", "GCN", "(", "gcn_num_layers", ",", "2", "*", "self", ".", "hidden_dim", ",", "2", "*", "self", ".", "hidden_dim", ")", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "drop_rate", ")", "\n", "self", ".", "conv1d", "=", "nn", ".", "Conv1d", "(", "char_embed_dim", ",", "char_feature_size", ",", "conv_filter_size", ")", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool1d", "(", "max_word_len", "+", "conv_filter_size", "-", "1", ",", "max_word_len", "+", "conv_filter_size", "-", "1", ")", "\n", "# self.mhc = 3", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Encoder.forward": [[715, 739], ["ptrnet_decoder.Encoder.word_embeddings", "ptrnet_decoder.Encoder.char_embeddings", "char_embeds.permute.permute.permute", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "char_feature.permute.permute.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ptrnet_decoder.Encoder.dropout", "ptrnet_decoder.Encoder.max_pool", "ptrnet_decoder.Encoder.lstm", "ptrnet_decoder.Encoder.conv1d", "ptrnet_decoder.Encoder.reduce_dim", "ptrnet_decoder.Encoder.gcn", "ptrnet_decoder.Encoder.lstm", "ptrnet_decoder.Encoder.dropout", "ptrnet_decoder.Encoder.gcn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "words", ",", "chars", ",", "pos_seq", ",", "adj", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "src_word_embeds", "=", "self", ".", "word_embeddings", "(", "words", ")", "\n", "# pos_embeds = self.dropout(self.pos_embeddings(pos_seq))", "\n", "char_embeds", "=", "self", ".", "char_embeddings", "(", "chars", ")", "\n", "char_embeds", "=", "char_embeds", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "char_feature", "=", "torch", ".", "tanh", "(", "self", ".", "max_pool", "(", "self", ".", "conv1d", "(", "char_embeds", ")", ")", ")", "\n", "char_feature", "=", "char_feature", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "words_input", "=", "torch", ".", "cat", "(", "(", "src_word_embeds", ",", "char_feature", ")", ",", "-", "1", ")", "\n", "if", "enc_type", "==", "'LSTM'", ":", "\n", "            ", "outputs", ",", "hc", "=", "self", ".", "lstm", "(", "words_input", ")", "\n", "", "elif", "enc_type", "==", "'GCN'", ":", "\n", "            ", "outputs", "=", "self", ".", "reduce_dim", "(", "words_input", ")", "\n", "outputs", "=", "self", ".", "gcn", "(", "outputs", ",", "adj", ")", "\n", "", "else", ":", "\n", "            ", "outputs", ",", "hc", "=", "self", ".", "lstm", "(", "words_input", ")", "\n", "outputs", "=", "self", ".", "dropout", "(", "outputs", ")", "\n", "outputs", "=", "self", ".", "gcn", "(", "outputs", ",", "adj", ")", "\n", "\n", "# outputs += pos_embeds", "\n", "# outputs = self.mha(outputs, outputs, outputs)", "\n", "", "outputs", "=", "self", ".", "dropout", "(", "outputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Decoder.__init__": [[742, 775], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "ptrnet_decoder.Attention", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "len", "ptrnet_decoder.Attention", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "ptrnet_decoder.Attention", "ptrnet_decoder.Attention", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "layers", ",", "drop_out_rate", ",", "max_length", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "drop_rate", "=", "drop_out_rate", "\n", "self", ".", "max_length", "=", "max_length", "\n", "\n", "if", "att_type", "==", "0", ":", "\n", "            ", "self", ".", "attention", "=", "Attention", "(", "input_dim", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "10", "*", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ")", "\n", "", "elif", "att_type", "==", "1", ":", "\n", "# self.w = nn.Linear(9 * self.input_dim, self.input_dim)", "\n", "            ", "self", ".", "attention", "=", "Attention", "(", "input_dim", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "10", "*", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ")", "\n", "", "else", ":", "\n", "# self.w = nn.Linear(9 * self.input_dim, self.input_dim)", "\n", "            ", "self", ".", "attention1", "=", "Attention", "(", "input_dim", ")", "\n", "self", ".", "attention2", "=", "Attention", "(", "input_dim", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "11", "*", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ")", "\n", "\n", "", "self", ".", "e1_pointer_lstm", "=", "nn", ".", "LSTM", "(", "2", "*", "self", ".", "input_dim", ",", "self", ".", "input_dim", ",", "1", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "self", ".", "e2_pointer_lstm", "=", "nn", ".", "LSTM", "(", "4", "*", "self", ".", "input_dim", ",", "self", ".", "input_dim", ",", "1", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "\n", "self", ".", "arg1s_lin", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "input_dim", ",", "1", ")", "\n", "self", ".", "arg1e_lin", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "input_dim", ",", "1", ")", "\n", "self", ".", "arg2s_lin", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "input_dim", ",", "1", ")", "\n", "self", ".", "arg2e_lin", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "input_dim", ",", "1", ")", "\n", "self", ".", "rel_lin", "=", "nn", ".", "Linear", "(", "9", "*", "self", ".", "input_dim", ",", "len", "(", "relnameToIdx", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "drop_rate", ")", "\n", "self", ".", "w", "=", "nn", ".", "Linear", "(", "9", "*", "self", ".", "input_dim", ",", "self", ".", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Decoder.forward": [[776, 880], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ptrnet_decoder.Decoder.lstm", "ptrnet_decoder.Decoder.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ptrnet_decoder.Decoder.e1_pointer_lstm", "ptrnet_decoder.Decoder.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ptrnet_decoder.Decoder.e2_pointer_lstm", "ptrnet_decoder.Decoder.dropout", "ptrnet_decoder.Decoder.arg1s_lin().squeeze", "torch.softmax.data.masked_fill_", "ptrnet_decoder.Decoder.arg1e_lin().squeeze", "torch.softmax.data.masked_fill_", "ptrnet_decoder.Decoder.arg2s_lin().squeeze", "torch.softmax.data.masked_fill_", "ptrnet_decoder.Decoder.arg2e_lin().squeeze", "torch.softmax.data.masked_fill_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "ptrnet_decoder.Decoder.dropout", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "ptrnet_decoder.Decoder.dropout", "ptrnet_decoder.Decoder.rel_lin", "enc_hs.size", "ptrnet_decoder.Decoder.attention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "h_prev[].squeeze().unsqueeze().repeat", "ptrnet_decoder.Decoder.w", "ptrnet_decoder.Decoder.attention", "ptrnet_decoder.Decoder.attention1", "ptrnet_decoder.Decoder.w", "ptrnet_decoder.Decoder.attention2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attn_weights.unsqueeze", "ptrnet_decoder.Decoder.unsqueeze().repeat", "ptrnet_decoder.Decoder.arg1s_lin", "float", "ptrnet_decoder.Decoder.arg1e_lin", "float", "ptrnet_decoder.Decoder.arg2s_lin", "float", "ptrnet_decoder.Decoder.arg2e_lin", "float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "ptrnet_decoder.Decoder.unsqueeze().repeat", "h_prev[].squeeze().unsqueeze().repeat", "ptrnet_decoder.Decoder.unsqueeze().repeat", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "torch.softmax.unsqueeze", "h_prev[].squeeze().unsqueeze", "ptrnet_decoder.Decoder.unsqueeze", "ptrnet_decoder.Decoder.unsqueeze", "h_prev[].squeeze().unsqueeze", "ptrnet_decoder.Decoder.unsqueeze", "h_prev[].squeeze", "h_prev[].squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y_prev", ",", "prev_tuples", ",", "h_prev", ",", "enc_hs", ",", "src_mask", ",", "arg1", ",", "arg2", ",", "arg1_mask", ",", "arg2_mask", ",", "\n", "is_training", "=", "False", ")", ":", "\n", "        ", "src_time_steps", "=", "enc_hs", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "if", "att_type", "==", "0", ":", "\n", "            ", "ctx", ",", "attn_weights", "=", "self", ".", "attention", "(", "h_prev", "[", "0", "]", ".", "squeeze", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "src_time_steps", ",", "1", ")", ",", "\n", "enc_hs", ",", "src_mask", ")", "\n", "", "elif", "att_type", "==", "1", ":", "\n", "            ", "reduce_prev_tuples", "=", "self", ".", "w", "(", "prev_tuples", ")", "\n", "ctx", ",", "attn_weights", "=", "self", ".", "attention", "(", "reduce_prev_tuples", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "src_time_steps", ",", "1", ")", ",", "\n", "enc_hs", ",", "src_mask", ")", "\n", "", "else", ":", "\n", "            ", "ctx1", ",", "attn_weights1", "=", "self", ".", "attention1", "(", "h_prev", "[", "0", "]", ".", "squeeze", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "src_time_steps", ",", "1", ")", ",", "\n", "enc_hs", ",", "src_mask", ")", "\n", "reduce_prev_tuples", "=", "self", ".", "w", "(", "prev_tuples", ")", "\n", "ctx2", ",", "attn_weights2", "=", "self", ".", "attention2", "(", "reduce_prev_tuples", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "src_time_steps", ",", "1", ")", ",", "\n", "enc_hs", ",", "src_mask", ")", "\n", "ctx", "=", "torch", ".", "cat", "(", "(", "ctx1", ",", "ctx2", ")", ",", "-", "1", ")", "\n", "attn_weights", "=", "(", "attn_weights1", "+", "attn_weights2", ")", "/", "2", "\n", "\n", "", "s_cur", "=", "torch", ".", "cat", "(", "(", "prev_tuples", ",", "ctx", ")", ",", "1", ")", "\n", "hidden", ",", "cell_state", "=", "self", ".", "lstm", "(", "s_cur", ",", "h_prev", ")", "\n", "hidden", "=", "self", ".", "dropout", "(", "hidden", ")", "\n", "\n", "if", "use_hadamard", ":", "\n", "            ", "enc_hs", "=", "enc_hs", "*", "attn_weights", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "", "e1_pointer_lstm_input", "=", "torch", ".", "cat", "(", "(", "enc_hs", ",", "hidden", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "src_time_steps", ",", "1", ")", ")", ",", "2", ")", "\n", "e1_pointer_lstm_out", ",", "phc", "=", "self", ".", "e1_pointer_lstm", "(", "e1_pointer_lstm_input", ")", "\n", "e1_pointer_lstm_out", "=", "self", ".", "dropout", "(", "e1_pointer_lstm_out", ")", "\n", "\n", "e2_pointer_lstm_input", "=", "torch", ".", "cat", "(", "(", "e1_pointer_lstm_input", ",", "e1_pointer_lstm_out", ")", ",", "2", ")", "\n", "e2_pointer_lstm_out", ",", "phc", "=", "self", ".", "e2_pointer_lstm", "(", "e2_pointer_lstm_input", ")", "\n", "e2_pointer_lstm_out", "=", "self", ".", "dropout", "(", "e2_pointer_lstm_out", ")", "\n", "\n", "arg1s", "=", "self", ".", "arg1s_lin", "(", "e1_pointer_lstm_out", ")", ".", "squeeze", "(", ")", "\n", "arg1s", ".", "data", ".", "masked_fill_", "(", "src_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "arg1e", "=", "self", ".", "arg1e_lin", "(", "e1_pointer_lstm_out", ")", ".", "squeeze", "(", ")", "\n", "arg1e", ".", "data", ".", "masked_fill_", "(", "src_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "arg2s", "=", "self", ".", "arg2s_lin", "(", "e2_pointer_lstm_out", ")", ".", "squeeze", "(", ")", "\n", "arg2s", ".", "data", ".", "masked_fill_", "(", "src_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "arg2e", "=", "self", ".", "arg2e_lin", "(", "e2_pointer_lstm_out", ")", ".", "squeeze", "(", ")", "\n", "arg2e", ".", "data", ".", "masked_fill_", "(", "src_mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "arg1sweights", "=", "F", ".", "softmax", "(", "arg1s", ",", "dim", "=", "-", "1", ")", "\n", "arg1eweights", "=", "F", ".", "softmax", "(", "arg1e", ",", "dim", "=", "-", "1", ")", "\n", "\n", "arg1sv", "=", "torch", ".", "bmm", "(", "arg1eweights", ".", "unsqueeze", "(", "1", ")", ",", "e1_pointer_lstm_out", ")", ".", "squeeze", "(", ")", "\n", "arg1ev", "=", "torch", ".", "bmm", "(", "arg1sweights", ".", "unsqueeze", "(", "1", ")", ",", "e1_pointer_lstm_out", ")", ".", "squeeze", "(", ")", "\n", "arg1", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "arg1sv", ",", "arg1ev", ")", ",", "-", "1", ")", ")", "\n", "\n", "arg2sweights", "=", "F", ".", "softmax", "(", "arg2s", ",", "dim", "=", "-", "1", ")", "\n", "arg2eweights", "=", "F", ".", "softmax", "(", "arg2e", ",", "dim", "=", "-", "1", ")", "\n", "\n", "arg2sv", "=", "torch", ".", "bmm", "(", "arg2eweights", ".", "unsqueeze", "(", "1", ")", ",", "e2_pointer_lstm_out", ")", ".", "squeeze", "(", ")", "\n", "arg2ev", "=", "torch", ".", "bmm", "(", "arg2sweights", ".", "unsqueeze", "(", "1", ")", ",", "e2_pointer_lstm_out", ")", ".", "squeeze", "(", ")", "\n", "arg2", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "arg2sv", ",", "arg2ev", ")", ",", "-", "1", ")", ")", "\n", "\n", "# enc_hs = self.mha(enc_hs, enc_hs, enc_hs)", "\n", "# sent1 = self.mha1(enc_hs, arg1, src_mask)", "\n", "# sent2 = self.mha2(enc_hs, arg2, src_mask)", "\n", "\n", "# if is_training:", "\n", "#     # arg1 = self.dropout(multi_head_pooling(mh_hid, arg1_mask, 'sum'))", "\n", "#     # arg2 = self.dropout(multi_head_pooling(mh_hid, arg2_mask, 'sum'))", "\n", "#", "\n", "#     # src_mask = src_mask + arg1_mask.eq(0) + arg2_mask.eq(0)", "\n", "#     # src_mask = src_mask.eq(0).eq(0)", "\n", "#     sent = self.dropout(multi_head_pooling(mh_hid, src_mask, 'max'))", "\n", "# else:", "\n", "#     arg1_one_hot = F.gumbel_softmax(arg1s).byte() + F.gumbel_softmax(arg1e).byte()", "\n", "#     arg2_one_hot = F.gumbel_softmax(arg2s).byte() + F.gumbel_softmax(arg2e).byte()", "\n", "#     # arg1_mask = arg1_one_hot.eq(0)", "\n", "#     # arg2_mask = arg2_one_hot.eq(0)", "\n", "#", "\n", "#     # arg1 = self.dropout(multi_head_pooling(mh_hid, arg1_mask, 'sum'))", "\n", "#     # arg2 = self.dropout(multi_head_pooling(mh_hid, arg2_mask, 'sum'))", "\n", "#", "\n", "#     # src_mask = src_mask + arg1_one_hot + arg2_one_hot", "\n", "#     # src_mask = src_mask.eq(0).eq(0)", "\n", "#     sent = self.dropout(multi_head_pooling(mh_hid, src_mask, 'max'))", "\n", "\n", "rel", "=", "self", ".", "rel_lin", "(", "torch", ".", "cat", "(", "(", "hidden", ",", "arg1", ",", "arg2", ")", ",", "-", "1", ")", ")", "\n", "\n", "if", "is_training", ":", "\n", "            ", "arg1s", "=", "F", ".", "log_softmax", "(", "arg1s", ",", "dim", "=", "-", "1", ")", "\n", "arg1e", "=", "F", ".", "log_softmax", "(", "arg1e", ",", "dim", "=", "-", "1", ")", "\n", "arg2s", "=", "F", ".", "log_softmax", "(", "arg2s", ",", "dim", "=", "-", "1", ")", "\n", "arg2e", "=", "F", ".", "log_softmax", "(", "arg2e", ",", "dim", "=", "-", "1", ")", "\n", "rel", "=", "F", ".", "log_softmax", "(", "rel", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "rel", ".", "unsqueeze", "(", "1", ")", ",", "arg1s", ".", "unsqueeze", "(", "1", ")", ",", "arg1e", ".", "unsqueeze", "(", "1", ")", ",", "arg2s", ".", "unsqueeze", "(", "1", ")", ",", "arg2e", ".", "unsqueeze", "(", "1", ")", ",", "(", "hidden", ",", "cell_state", ")", ",", "arg1", ",", "arg2", "\n", "", "else", ":", "\n", "            ", "arg1s", "=", "F", ".", "softmax", "(", "arg1s", ",", "dim", "=", "-", "1", ")", "\n", "arg1e", "=", "F", ".", "softmax", "(", "arg1e", ",", "dim", "=", "-", "1", ")", "\n", "arg2s", "=", "F", ".", "softmax", "(", "arg2s", ",", "dim", "=", "-", "1", ")", "\n", "arg2e", "=", "F", ".", "softmax", "(", "arg2e", ",", "dim", "=", "-", "1", ")", "\n", "rel", "=", "F", ".", "softmax", "(", "rel", ",", "dim", "=", "-", "1", ")", "\n", "return", "rel", ".", "unsqueeze", "(", "1", ")", ",", "arg1s", ".", "unsqueeze", "(", "1", ")", ",", "arg1e", ".", "unsqueeze", "(", "1", ")", ",", "arg2s", ".", "unsqueeze", "(", "1", ")", ",", "arg2e", ".", "unsqueeze", "(", "1", ")", ",", "(", "hidden", ",", "cell_state", ")", ",", "arg1", ",", "arg2", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__": [[883, 890], ["torch.Module.__init__", "ptrnet_decoder.Encoder", "ptrnet_decoder.Decoder", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "int", "len"], "methods", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Seq2SeqModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "enc_inp_size", ",", "int", "(", "enc_hidden_size", "/", "2", ")", ",", "1", ",", "True", ",", "drop_rate", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "dec_inp_size", ",", "dec_hidden_size", ",", "1", ",", "drop_rate", ",", "max_trg_len", ")", "\n", "self", ".", "relation_embeddings", "=", "nn", ".", "Embedding", "(", "len", "(", "relnameToIdx", ")", ",", "word_embed_dim", ")", "\n", "# self.w = nn.Linear(10 * dec_inp_size, dec_inp_size)", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "drop_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.Seq2SeqModel.forward": [[891, 966], ["ptrnet_decoder.Seq2SeqModel.encoder", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rel[].topk", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "range", "ptrnet_decoder.Seq2SeqModel.dropout", "src_words_seq.size", "src_words_seq.size", "ptrnet_decoder.Seq2SeqModel.decoder", "ptrnet_decoder.Seq2SeqModel.decoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cur_rel[].topk", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "rel.view.view.view", "arg1s.view.view.view", "arg1e.view.view.view", "arg2s.view.view.view", "arg2e.view.view.view", "ptrnet_decoder.Seq2SeqModel.relation_embeddings", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "arg1_mask[].squeeze", "arg2_mask[].squeeze", "trg_word_embeds[].squeeze", "ptrnet_decoder.Seq2SeqModel.decoder", "ptrnet_decoder.Seq2SeqModel.relation_embeddings().squeeze", "ptrnet_decoder.Seq2SeqModel.decoder", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "arg1_mask[].squeeze", "arg2_mask[].squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ptrnet_decoder.Seq2SeqModel.relation_embeddings", "torch.add.squeeze().detach", "torch.add.squeeze().detach", "torch.add.squeeze().detach", "torch.add.squeeze().detach", "torch.add.squeeze().detach", "torch.add.squeeze", "torch.add.squeeze", "torch.add.squeeze", "torch.add.squeeze", "torch.add.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src_words_seq", ",", "src_mask", ",", "src_char_seq", ",", "pos_seq", ",", "trg_words_seq", ",", "trg_rel_cnt", ",", "adj", ",", "\n", "arg1_mask", ",", "arg2_mask", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "if", "is_training", ":", "\n", "            ", "trg_word_embeds", "=", "self", ".", "dropout", "(", "self", ".", "relation_embeddings", "(", "trg_words_seq", ")", ")", "\n", "", "batch_len", "=", "src_words_seq", ".", "size", "(", ")", "[", "0", "]", "\n", "src_time_steps", "=", "src_words_seq", ".", "size", "(", ")", "[", "1", "]", "\n", "time_steps", "=", "trg_rel_cnt", "\n", "\n", "enc_hs", "=", "self", ".", "encoder", "(", "src_words_seq", ",", "src_char_seq", ",", "pos_seq", ",", "adj", ",", "is_training", ")", "\n", "\n", "h0", "=", "autograd", ".", "Variable", "(", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "batch_len", ",", "dec_hidden_size", ")", ")", ")", ".", "cuda", "(", ")", "\n", "c0", "=", "autograd", ".", "Variable", "(", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "batch_len", ",", "dec_hidden_size", ")", ")", ")", ".", "cuda", "(", ")", "\n", "dec_hid", "=", "(", "h0", ",", "c0", ")", "\n", "\n", "dec_inp", "=", "autograd", ".", "Variable", "(", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "batch_len", ",", "dec_hidden_size", ")", ")", ")", ".", "cuda", "(", ")", "\n", "arg1", "=", "autograd", ".", "Variable", "(", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "batch_len", ",", "4", "*", "dec_hidden_size", ")", ")", ")", ".", "cuda", "(", ")", "\n", "arg2", "=", "autograd", ".", "Variable", "(", "torch", ".", "FloatTensor", "(", "torch", ".", "zeros", "(", "batch_len", ",", "4", "*", "dec_hidden_size", ")", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "prev_tuples", "=", "torch", ".", "cat", "(", "(", "arg1", ",", "arg2", ",", "dec_inp", ")", ",", "-", "1", ")", "\n", "\n", "if", "is_training", ":", "\n", "            ", "dec_outs", "=", "self", ".", "decoder", "(", "dec_inp", ",", "prev_tuples", ",", "dec_hid", ",", "enc_hs", ",", "src_mask", ",", "arg1", ",", "arg2", ",", "\n", "arg1_mask", "[", ":", ",", "0", ",", ":", "]", ".", "squeeze", "(", ")", ",", "arg2_mask", "[", ":", ",", "0", ",", ":", "]", ".", "squeeze", "(", ")", ",", "is_training", ")", "\n", "", "else", ":", "\n", "            ", "dec_outs", "=", "self", ".", "decoder", "(", "dec_inp", ",", "prev_tuples", ",", "dec_hid", ",", "enc_hs", ",", "src_mask", ",", "arg1", ",", "arg2", ",", "None", ",", "None", ",", "\n", "is_training", ")", "\n", "", "rel", "=", "dec_outs", "[", "0", "]", "\n", "arg1s", "=", "dec_outs", "[", "1", "]", "\n", "arg1e", "=", "dec_outs", "[", "2", "]", "\n", "arg2s", "=", "dec_outs", "[", "3", "]", "\n", "arg2e", "=", "dec_outs", "[", "4", "]", "\n", "dec_hid", "=", "dec_outs", "[", "5", "]", "\n", "arg1", "=", "dec_outs", "[", "6", "]", "\n", "arg2", "=", "dec_outs", "[", "7", "]", "\n", "\n", "topv", ",", "topi", "=", "rel", "[", ":", ",", ":", ",", "1", ":", "]", ".", "topk", "(", "1", ")", "\n", "topi", "=", "torch", ".", "add", "(", "topi", ",", "1", ")", "\n", "\n", "for", "t", "in", "range", "(", "1", ",", "time_steps", ")", ":", "\n", "            ", "if", "is_training", ":", "\n", "                ", "dec_inp", "=", "trg_word_embeds", "[", ":", ",", "t", "-", "1", ",", ":", "]", ".", "squeeze", "(", ")", "\n", "prev_tuples", "=", "torch", ".", "cat", "(", "(", "arg1", ",", "arg2", ",", "dec_inp", ")", ",", "-", "1", ")", "+", "prev_tuples", "\n", "dec_outs", "=", "self", ".", "decoder", "(", "dec_inp", ",", "prev_tuples", ",", "dec_hid", ",", "enc_hs", ",", "src_mask", ",", "arg1", ",", "arg2", ",", "\n", "arg1_mask", "[", ":", ",", "t", ",", ":", "]", ".", "squeeze", "(", ")", ",", "arg2_mask", "[", ":", ",", "t", ",", ":", "]", ".", "squeeze", "(", ")", ",", "is_training", ")", "\n", "", "else", ":", "\n", "                ", "dec_inp", "=", "self", ".", "relation_embeddings", "(", "topi", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ")", ".", "squeeze", "(", ")", "\n", "prev_tuples", "=", "torch", ".", "cat", "(", "(", "arg1", ",", "arg2", ",", "dec_inp", ")", ",", "-", "1", ")", "+", "prev_tuples", "\n", "dec_outs", "=", "self", ".", "decoder", "(", "dec_inp", ",", "prev_tuples", ",", "dec_hid", ",", "enc_hs", ",", "src_mask", ",", "arg1", ",", "arg2", ",", "None", ",", "None", ",", "\n", "is_training", ")", "\n", "\n", "", "cur_rel", "=", "dec_outs", "[", "0", "]", "\n", "cur_arg1s", "=", "dec_outs", "[", "1", "]", "\n", "cur_arg1e", "=", "dec_outs", "[", "2", "]", "\n", "cur_arg2s", "=", "dec_outs", "[", "3", "]", "\n", "cur_arg2e", "=", "dec_outs", "[", "4", "]", "\n", "dec_hid", "=", "dec_outs", "[", "5", "]", "\n", "arg1", "=", "dec_outs", "[", "6", "]", "\n", "arg2", "=", "dec_outs", "[", "7", "]", "\n", "\n", "rel", "=", "torch", ".", "cat", "(", "(", "rel", ",", "cur_rel", ")", ",", "1", ")", "\n", "arg1s", "=", "torch", ".", "cat", "(", "(", "arg1s", ",", "cur_arg1s", ")", ",", "1", ")", "\n", "arg1e", "=", "torch", ".", "cat", "(", "(", "arg1e", ",", "cur_arg1e", ")", ",", "1", ")", "\n", "arg2s", "=", "torch", ".", "cat", "(", "(", "arg2s", ",", "cur_arg2s", ")", ",", "1", ")", "\n", "arg2e", "=", "torch", ".", "cat", "(", "(", "arg2e", ",", "cur_arg2e", ")", ",", "1", ")", "\n", "\n", "topv", ",", "topi", "=", "cur_rel", "[", ":", ",", ":", ",", "1", ":", "]", ".", "topk", "(", "1", ")", "\n", "topi", "=", "torch", ".", "add", "(", "topi", ",", "1", ")", "\n", "\n", "", "if", "is_training", ":", "\n", "            ", "rel", "=", "rel", ".", "view", "(", "-", "1", ",", "len", "(", "relnameToIdx", ")", ")", "\n", "arg1s", "=", "arg1s", ".", "view", "(", "-", "1", ",", "src_time_steps", ")", "\n", "arg1e", "=", "arg1e", ".", "view", "(", "-", "1", ",", "src_time_steps", ")", "\n", "arg2s", "=", "arg2s", ".", "view", "(", "-", "1", ",", "src_time_steps", ")", "\n", "arg2e", "=", "arg2e", ".", "view", "(", "-", "1", ",", "src_time_steps", ")", "\n", "", "return", "rel", ",", "arg1s", ",", "arg1e", ",", "arg2s", ",", "arg2e", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print": [[21, 29], ["range", "len", "print", "logger.write", "print", "logger.write", "len", "str", "str"], "function", ["None"], ["def", "custom_print", "(", "*", "msg", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "msg", ")", ")", ":", "\n", "        ", "if", "i", "==", "len", "(", "msg", ")", "-", "1", ":", "\n", "            ", "print", "(", "msg", "[", "i", "]", ")", "\n", "logger", ".", "write", "(", "str", "(", "msg", "[", "i", "]", ")", "+", "'\\n'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "msg", "[", "i", "]", ",", "' '", ",", "end", "=", "''", ")", "\n", "logger", ".", "write", "(", "str", "(", "msg", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.load_word_embedding": [[31, 63], ["ptrnet_decoder.custom_print", "collections.OrderedDict", "list", "list.append", "list.append", "ptrnet_decoder.custom_print", "len", "numpy.zeros", "numpy.random.uniform", "open", "len", "numpy.array", "line.split", "list.append", "len", "list.append", "numpy.random.uniform", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print"], ["", "", "", "def", "load_word_embedding", "(", "embed_file", ",", "vocab", ")", ":", "\n", "    ", "custom_print", "(", "'vocab length:'", ",", "len", "(", "vocab", ")", ")", "\n", "embed_vocab", "=", "OrderedDict", "(", ")", "\n", "embed_matrix", "=", "list", "(", ")", "\n", "\n", "embed_vocab", "[", "'<PAD>'", "]", "=", "0", "\n", "embed_matrix", ".", "append", "(", "np", ".", "zeros", "(", "word_embed_dim", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "embed_vocab", "[", "'<UNK>'", "]", "=", "1", "\n", "embed_matrix", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "word_embed_dim", ")", ")", "\n", "\n", "word_idx", "=", "2", "\n", "with", "open", "(", "embed_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "parts", "=", "line", ".", "split", "(", ")", "\n", "if", "len", "(", "parts", ")", "<", "word_embed_dim", "+", "1", ":", "\n", "                ", "continue", "\n", "", "word", "=", "parts", "[", "0", "]", "\n", "if", "word", "in", "vocab", "and", "vocab", "[", "word", "]", ">=", "word_min_freq", ":", "\n", "                ", "vec", "=", "[", "np", ".", "float32", "(", "val", ")", "for", "val", "in", "parts", "[", "1", ":", "]", "]", "\n", "embed_matrix", ".", "append", "(", "vec", ")", "\n", "embed_vocab", "[", "word", "]", "=", "word_idx", "\n", "word_idx", "+=", "1", "\n", "\n", "", "", "", "for", "word", "in", "vocab", ":", "\n", "        ", "if", "word", "not", "in", "embed_vocab", "and", "vocab", "[", "word", "]", ">=", "word_min_freq", ":", "\n", "            ", "embed_matrix", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "word_embed_dim", ")", ")", "\n", "embed_vocab", "[", "word", "]", "=", "word_idx", "\n", "word_idx", "+=", "1", "\n", "\n", "", "", "custom_print", "(", "'embed dictionary length:'", ",", "len", "(", "embed_vocab", ")", ")", "\n", "return", "embed_vocab", ",", "np", ".", "array", "(", "embed_matrix", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.build_vocab": [[65, 88], ["collections.OrderedDict", "collections.OrderedDict", "ptrnet_decoder.load_word_embedding", "open", "pickle.dump", "open.close"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.load_word_embedding"], ["", "def", "build_vocab", "(", "data", ",", "save_vocab", ",", "embedding_file", ")", ":", "\n", "    ", "vocab", "=", "OrderedDict", "(", ")", "\n", "char_v", "=", "OrderedDict", "(", ")", "\n", "char_v", "[", "'<PAD>'", "]", "=", "0", "\n", "char_v", "[", "'<UNK>'", "]", "=", "1", "\n", "char_idx", "=", "2", "\n", "for", "d", "in", "data", ":", "\n", "        ", "for", "word", "in", "d", ".", "SrcWords", ":", "\n", "            ", "if", "word", "not", "in", "vocab", ":", "\n", "                ", "vocab", "[", "word", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "vocab", "[", "word", "]", "+=", "1", "\n", "\n", "", "for", "c", "in", "word", ":", "\n", "                ", "if", "c", "not", "in", "char_v", ":", "\n", "                    ", "char_v", "[", "c", "]", "=", "char_idx", "\n", "char_idx", "+=", "1", "\n", "\n", "", "", "", "", "word_v", ",", "embed_matrix", "=", "load_word_embedding", "(", "embedding_file", ",", "vocab", ")", "\n", "output", "=", "open", "(", "save_vocab", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "[", "word_v", ",", "char_v", "]", ",", "output", ")", "\n", "output", ".", "close", "(", ")", "\n", "return", "word_v", ",", "char_v", ",", "embed_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.load_vocab": [[90, 94], ["open", "pickle.load"], "function", ["None"], ["", "def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "with", "open", "(", "vocab_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "embed_vocab", ",", "char_vocab", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "embed_vocab", ",", "char_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_adj_mat": [[96, 109], ["numpy.zeros", "range", "range", "len", "range", "len", "math.pow"], "function", ["None"], ["", "def", "get_adj_mat", "(", "sent_len", ",", "amat", ")", ":", "\n", "    ", "K", "=", "5", "\n", "adj_mat", "=", "np", ".", "zeros", "(", "(", "sent_len", ",", "sent_len", ")", ",", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "amat", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "amat", ")", ")", ":", "\n", "            ", "if", "0", "<=", "amat", "[", "i", "]", "[", "j", "]", "<=", "K", ":", "\n", "                ", "adj_mat", "[", "i", "]", "[", "j", "]", "=", "1.0", "/", "math", ".", "pow", "(", "2", ",", "amat", "[", "i", "]", "[", "j", "]", ")", "\n", "", "else", ":", "\n", "                ", "adj_mat", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "sent_len", ")", ":", "\n", "        ", "adj_mat", "[", "i", "]", "[", "i", "]", "=", "1", "\n", "", "return", "adj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_data": [[111, 141], ["range", "len", "src_lines[].strip", "trg_lines[].strip", "src_lines[].strip.split", "trg_lines[].strip.split", "json.loads", "ptrnet_decoder.get_adj_mat", "Sample", "samples.append", "random.shuffle", "len", "part.strip().split", "trg_rels.append", "trg_pointers.append", "len", "len", "part.strip", "int", "int", "int", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_adj_mat"], ["", "def", "get_data", "(", "src_lines", ",", "trg_lines", ",", "adj_lines", ",", "datatype", ")", ":", "\n", "    ", "samples", "=", "[", "]", "\n", "uid", "=", "1", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "src_lines", ")", ")", ":", "\n", "        ", "src_line", "=", "src_lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "trg_line", "=", "trg_lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "src_words", "=", "src_line", ".", "split", "(", ")", "\n", "\n", "trg_rels", "=", "[", "]", "\n", "trg_pointers", "=", "[", "]", "\n", "parts", "=", "trg_line", ".", "split", "(", "'|'", ")", "\n", "if", "datatype", "==", "1", ":", "\n", "            ", "random", ".", "shuffle", "(", "parts", ")", "\n", "\n", "", "adj_data", "=", "json", ".", "loads", "(", "adj_lines", "[", "i", "]", ")", "\n", "adj_mat", "=", "get_adj_mat", "(", "len", "(", "src_words", ")", ",", "adj_data", "[", "'adj_mat'", "]", ")", "\n", "\n", "for", "part", "in", "parts", ":", "\n", "            ", "elements", "=", "part", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "trg_rels", ".", "append", "(", "relnameToIdx", "[", "elements", "[", "4", "]", "]", ")", "\n", "trg_pointers", ".", "append", "(", "(", "int", "(", "elements", "[", "0", "]", ")", ",", "int", "(", "elements", "[", "1", "]", ")", ",", "int", "(", "elements", "[", "2", "]", ")", ",", "int", "(", "elements", "[", "3", "]", ")", ")", ")", "\n", "\n", "", "if", "datatype", "==", "1", "and", "(", "len", "(", "src_words", ")", ">", "max_src_len", "or", "len", "(", "trg_rels", ")", ">", "max_trg_len", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "sample", "=", "Sample", "(", "Id", "=", "uid", ",", "SrcLen", "=", "len", "(", "src_words", ")", ",", "SrcWords", "=", "src_words", ",", "TrgLen", "=", "len", "(", "trg_rels", ")", ",", "TrgRels", "=", "trg_rels", ",", "\n", "TrgPointers", "=", "trg_pointers", ",", "AdjMat", "=", "adj_mat", ")", "\n", "samples", ".", "append", "(", "sample", ")", "\n", "uid", "+=", "1", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.read_data": [[143, 163], ["open", "open.readlines", "open.close", "open", "open.readlines", "open.close", "open", "open.readlines", "open.close", "ptrnet_decoder.get_data"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_data"], ["", "def", "read_data", "(", "src_file", ",", "trg_file", ",", "adj_file", ",", "datatype", ")", ":", "\n", "    ", "reader", "=", "open", "(", "src_file", ")", "\n", "src_lines", "=", "reader", ".", "readlines", "(", ")", "\n", "reader", ".", "close", "(", ")", "\n", "\n", "reader", "=", "open", "(", "trg_file", ")", "\n", "trg_lines", "=", "reader", ".", "readlines", "(", ")", "\n", "reader", ".", "close", "(", ")", "\n", "\n", "reader", "=", "open", "(", "adj_file", ")", "\n", "adj_lines", "=", "reader", ".", "readlines", "(", ")", "\n", "reader", ".", "close", "(", ")", "\n", "\n", "# l = 1000", "\n", "# src_lines = src_lines[0:min(l, len(src_lines))]", "\n", "# trg_lines = trg_lines[0:min(l, len(trg_lines))]", "\n", "# adj_lines = adj_lines[0:min(l, len(adj_lines))]", "\n", "\n", "data", "=", "get_data", "(", "src_lines", ",", "trg_lines", ",", "adj_lines", ",", "datatype", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_relations": [[165, 183], ["collections.OrderedDict", "collections.OrderedDict", "open", "open.readlines", "open.close", "line.strip", "line.strip"], "function", ["None"], ["", "def", "get_relations", "(", "file_name", ")", ":", "\n", "    ", "nameToIdx", "=", "OrderedDict", "(", ")", "\n", "idxToName", "=", "OrderedDict", "(", ")", "\n", "reader", "=", "open", "(", "file_name", ")", "\n", "lines", "=", "reader", ".", "readlines", "(", ")", "\n", "reader", ".", "close", "(", ")", "\n", "nameToIdx", "[", "'<PAD>'", "]", "=", "0", "\n", "idxToName", "[", "0", "]", "=", "'<PAD>'", "\n", "# nameToIdx['<SOS>'] = 1", "\n", "# idxToName[1] = '<SOS>'", "\n", "nameToIdx", "[", "'None'", "]", "=", "1", "\n", "idxToName", "[", "1", "]", "=", "'None'", "\n", "idx", "=", "2", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "nameToIdx", "[", "line", ".", "strip", "(", ")", "]", "=", "idx", "\n", "idxToName", "[", "idx", "]", "=", "line", ".", "strip", "(", ")", "\n", "idx", "+=", "1", "\n", "", "return", "nameToIdx", ",", "idxToName", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_answer_pointers": [[185, 242], ["range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "min", "min", "min", "min", "min", "min"], "function", ["None"], ["", "def", "get_answer_pointers", "(", "arg1start_preds", ",", "arg1end_preds", ",", "arg2start_preds", ",", "arg2end_preds", ",", "sent_len", ")", ":", "\n", "    ", "arg1_prob", "=", "-", "1.0", "\n", "arg1start", "=", "-", "1", "\n", "arg1end", "=", "-", "1", "\n", "max_ent_len", "=", "5", "\n", "for", "i", "in", "range", "(", "0", ",", "sent_len", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "min", "(", "sent_len", ",", "i", "+", "max_ent_len", ")", ")", ":", "\n", "            ", "if", "arg1start_preds", "[", "i", "]", "*", "arg1end_preds", "[", "j", "]", ">", "arg1_prob", ":", "\n", "                ", "arg1_prob", "=", "arg1start_preds", "[", "i", "]", "*", "arg1end_preds", "[", "j", "]", "\n", "arg1start", "=", "i", "\n", "arg1end", "=", "j", "\n", "\n", "", "", "", "arg2_prob", "=", "-", "1.0", "\n", "arg2start", "=", "-", "1", "\n", "arg2end", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "0", ",", "arg1start", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "min", "(", "arg1start", ",", "i", "+", "max_ent_len", ")", ")", ":", "\n", "            ", "if", "arg2start_preds", "[", "i", "]", "*", "arg2end_preds", "[", "j", "]", ">", "arg2_prob", ":", "\n", "                ", "arg2_prob", "=", "arg2start_preds", "[", "i", "]", "*", "arg2end_preds", "[", "j", "]", "\n", "arg2start", "=", "i", "\n", "arg2end", "=", "j", "\n", "", "", "", "for", "i", "in", "range", "(", "arg1end", "+", "1", ",", "sent_len", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "min", "(", "sent_len", ",", "i", "+", "max_ent_len", ")", ")", ":", "\n", "            ", "if", "arg2start_preds", "[", "i", "]", "*", "arg2end_preds", "[", "j", "]", ">", "arg2_prob", ":", "\n", "                ", "arg2_prob", "=", "arg2start_preds", "[", "i", "]", "*", "arg2end_preds", "[", "j", "]", "\n", "arg2start", "=", "i", "\n", "arg2end", "=", "j", "\n", "\n", "", "", "", "arg2_prob1", "=", "-", "1.0", "\n", "arg2start1", "=", "-", "1", "\n", "arg2end1", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "0", ",", "sent_len", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "min", "(", "sent_len", ",", "i", "+", "max_ent_len", ")", ")", ":", "\n", "            ", "if", "arg2start_preds", "[", "i", "]", "*", "arg2end_preds", "[", "j", "]", ">", "arg2_prob1", ":", "\n", "                ", "arg2_prob1", "=", "arg2start_preds", "[", "i", "]", "*", "arg2end_preds", "[", "j", "]", "\n", "arg2start1", "=", "i", "\n", "arg2end1", "=", "j", "\n", "\n", "", "", "", "arg1_prob1", "=", "-", "1.0", "\n", "arg1start1", "=", "-", "1", "\n", "arg1end1", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "0", ",", "arg2start1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "min", "(", "arg2start1", ",", "i", "+", "max_ent_len", ")", ")", ":", "\n", "            ", "if", "arg1start_preds", "[", "i", "]", "*", "arg1end_preds", "[", "j", "]", ">", "arg1_prob1", ":", "\n", "                ", "arg1_prob1", "=", "arg1start_preds", "[", "i", "]", "*", "arg1end_preds", "[", "j", "]", "\n", "arg1start1", "=", "i", "\n", "arg1end1", "=", "j", "\n", "", "", "", "for", "i", "in", "range", "(", "arg2end1", "+", "1", ",", "sent_len", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "min", "(", "sent_len", ",", "i", "+", "max_ent_len", ")", ")", ":", "\n", "            ", "if", "arg1start_preds", "[", "i", "]", "*", "arg1end_preds", "[", "j", "]", ">", "arg1_prob1", ":", "\n", "                ", "arg1_prob1", "=", "arg1start_preds", "[", "i", "]", "*", "arg1end_preds", "[", "j", "]", "\n", "arg1start1", "=", "i", "\n", "arg1end1", "=", "j", "\n", "", "", "", "if", "arg1_prob", "*", "arg2_prob", ">", "arg1_prob1", "*", "arg2_prob1", ":", "\n", "        ", "return", "arg1start", ",", "arg1end", ",", "arg2start", ",", "arg2end", "\n", "", "else", ":", "\n", "        ", "return", "arg1start1", ",", "arg1end1", ",", "arg2start1", ",", "arg2end1", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.is_full_match": [[244, 249], ["None"], "function", ["None"], ["", "", "def", "is_full_match", "(", "triplet", ",", "triplets", ")", ":", "\n", "    ", "for", "t", "in", "triplets", ":", "\n", "        ", "if", "t", "[", "0", "]", "==", "triplet", "[", "0", "]", "and", "t", "[", "1", "]", "==", "triplet", "[", "1", "]", "and", "t", "[", "2", "]", "==", "triplet", "[", "2", "]", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_gt_triples": [[251, 262], ["arg1.strip", "arg2.strip", "ptrnet_decoder.is_full_match", "triples.append"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.is_full_match"], ["", "def", "get_gt_triples", "(", "src_words", ",", "rels", ",", "pointers", ")", ":", "\n", "    ", "triples", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "r", "in", "rels", ":", "\n", "        ", "arg1", "=", "' '", ".", "join", "(", "src_words", "[", "pointers", "[", "i", "]", "[", "0", "]", ":", "pointers", "[", "i", "]", "[", "1", "]", "+", "1", "]", ")", "\n", "arg2", "=", "' '", ".", "join", "(", "src_words", "[", "pointers", "[", "i", "]", "[", "2", "]", ":", "pointers", "[", "i", "]", "[", "3", "]", "+", "1", "]", ")", "\n", "triplet", "=", "(", "arg1", ".", "strip", "(", ")", ",", "arg2", ".", "strip", "(", ")", ",", "relIdxToName", "[", "r", "]", ")", "\n", "if", "not", "is_full_match", "(", "triplet", ",", "triples", ")", ":", "\n", "            ", "triples", ".", "append", "(", "triplet", ")", "\n", "", "i", "+=", "1", "\n", "", "return", "triples", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_pred_triples": [[264, 283], ["range", "len", "ptrnet_decoder.get_answer_pointers", "arg1.strip.strip", "arg2.strip.strip", "all_triples.append", "numpy.argmax", "len", "ptrnet_decoder.is_full_match", "triples.append"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_answer_pointers", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.is_full_match"], ["", "def", "get_pred_triples", "(", "rel", ",", "arg1s", ",", "arg1e", ",", "arg2s", ",", "arg2e", ",", "src_words", ")", ":", "\n", "    ", "triples", "=", "[", "]", "\n", "all_triples", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "rel", ")", ")", ":", "\n", "        ", "r", "=", "np", ".", "argmax", "(", "rel", "[", "i", "]", "[", "1", ":", "]", ")", "+", "1", "\n", "if", "r", "==", "relnameToIdx", "[", "'None'", "]", ":", "\n", "            ", "break", "\n", "", "s1", ",", "e1", ",", "s2", ",", "e2", "=", "get_answer_pointers", "(", "arg1s", "[", "i", "]", ",", "arg1e", "[", "i", "]", ",", "arg2s", "[", "i", "]", ",", "arg2e", "[", "i", "]", ",", "len", "(", "src_words", ")", ")", "\n", "arg1", "=", "' '", ".", "join", "(", "src_words", "[", "s1", ":", "e1", "+", "1", "]", ")", "\n", "arg2", "=", "' '", ".", "join", "(", "src_words", "[", "s2", ":", "e2", "+", "1", "]", ")", "\n", "arg1", "=", "arg1", ".", "strip", "(", ")", "\n", "arg2", "=", "arg2", ".", "strip", "(", ")", "\n", "if", "arg1", "==", "arg2", ":", "\n", "            ", "continue", "\n", "", "triplet", "=", "(", "arg1", ",", "arg2", ",", "relIdxToName", "[", "r", "]", ")", "\n", "all_triples", ".", "append", "(", "triplet", ")", "\n", "if", "not", "is_full_match", "(", "triplet", ",", "triples", ")", ":", "\n", "            ", "triples", ".", "append", "(", "triplet", ")", "\n", "", "", "return", "triples", ",", "all_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_F1": [[285, 303], ["range", "print", "len", "ptrnet_decoder.get_gt_triples", "ptrnet_decoder.get_pred_triples", "len", "len", "len", "ptrnet_decoder.is_full_match"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_gt_triples", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_pred_triples", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.is_full_match"], ["", "def", "get_F1", "(", "data", ",", "preds", ")", ":", "\n", "    ", "gt_pos", "=", "0", "\n", "pred_pos", "=", "0", "\n", "total_pred_pos", "=", "0", "\n", "correct_pos", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "data", ")", ")", ":", "\n", "        ", "gt_triples", "=", "get_gt_triples", "(", "data", "[", "i", "]", ".", "SrcWords", ",", "data", "[", "i", "]", ".", "TrgRels", ",", "data", "[", "i", "]", ".", "TrgPointers", ")", "\n", "\n", "pred_triples", ",", "all_pred_triples", "=", "get_pred_triples", "(", "preds", "[", "0", "]", "[", "i", "]", ",", "preds", "[", "1", "]", "[", "i", "]", ",", "preds", "[", "2", "]", "[", "i", "]", ",", "preds", "[", "3", "]", "[", "i", "]", ",", "\n", "preds", "[", "4", "]", "[", "i", "]", ",", "data", "[", "i", "]", ".", "SrcWords", ")", "\n", "total_pred_pos", "+=", "len", "(", "all_pred_triples", ")", "\n", "gt_pos", "+=", "len", "(", "gt_triples", ")", "\n", "pred_pos", "+=", "len", "(", "pred_triples", ")", "\n", "for", "gt_triple", "in", "gt_triples", ":", "\n", "            ", "if", "is_full_match", "(", "gt_triple", ",", "pred_triples", ")", ":", "\n", "                ", "correct_pos", "+=", "1", "\n", "", "", "", "print", "(", "total_pred_pos", ")", "\n", "return", "pred_pos", ",", "gt_pos", ",", "correct_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.write_test_res": [[305, 315], ["open", "range", "open.close", "len", "ptrnet_decoder.get_pred_triples", "open.write", "pred_triples_str.append"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_pred_triples"], ["", "def", "write_test_res", "(", "data", ",", "preds", ",", "outfile", ")", ":", "\n", "    ", "writer", "=", "open", "(", "outfile", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "data", ")", ")", ":", "\n", "        ", "pred_triples", ",", "_", "=", "get_pred_triples", "(", "preds", "[", "0", "]", "[", "i", "]", ",", "preds", "[", "1", "]", "[", "i", "]", ",", "preds", "[", "2", "]", "[", "i", "]", ",", "preds", "[", "3", "]", "[", "i", "]", ",", "preds", "[", "4", "]", "[", "i", "]", ",", "\n", "data", "[", "i", "]", ".", "SrcWords", ")", "\n", "pred_triples_str", "=", "[", "]", "\n", "for", "pt", "in", "pred_triples", ":", "\n", "            ", "pred_triples_str", ".", "append", "(", "pt", "[", "0", "]", "+", "' ; '", "+", "pt", "[", "1", "]", "+", "' ; '", "+", "pt", "[", "2", "]", ")", "\n", "", "writer", ".", "write", "(", "' | '", ".", "join", "(", "pred_triples_str", ")", "+", "'\\n'", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.shuffle_data": [[317, 328], ["ptrnet_decoder.custom_print", "data.sort", "int", "random.sample", "len", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print"], ["", "def", "shuffle_data", "(", "data", ")", ":", "\n", "    ", "custom_print", "(", "len", "(", "data", ")", ")", "\n", "data", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "SrcLen", ")", "\n", "num_batch", "=", "int", "(", "len", "(", "data", ")", "/", "batch_size", ")", "\n", "rand_idx", "=", "random", ".", "sample", "(", "range", "(", "num_batch", ")", ",", "num_batch", ")", "\n", "new_data", "=", "[", "]", "\n", "for", "idx", "in", "rand_idx", ":", "\n", "        ", "new_data", "+=", "data", "[", "batch_size", "*", "idx", ":", "batch_size", "*", "(", "idx", "+", "1", ")", "]", "\n", "", "if", "len", "(", "new_data", ")", "<", "len", "(", "data", ")", ":", "\n", "        ", "new_data", "+=", "data", "[", "num_batch", "*", "batch_size", ":", "]", "\n", "", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_max_len": [[330, 342], ["len", "range", "len", "range", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "get_max_len", "(", "sample_batch", ")", ":", "\n", "    ", "src_max_len", "=", "len", "(", "sample_batch", "[", "0", "]", ".", "SrcWords", ")", "\n", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "sample_batch", ")", ")", ":", "\n", "        ", "if", "len", "(", "sample_batch", "[", "idx", "]", ".", "SrcWords", ")", ">", "src_max_len", ":", "\n", "            ", "src_max_len", "=", "len", "(", "sample_batch", "[", "idx", "]", ".", "SrcWords", ")", "\n", "\n", "", "", "trg_max_len", "=", "len", "(", "sample_batch", "[", "0", "]", ".", "TrgRels", ")", "\n", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "sample_batch", ")", ")", ":", "\n", "        ", "if", "len", "(", "sample_batch", "[", "idx", "]", ".", "TrgRels", ")", ">", "trg_max_len", ":", "\n", "            ", "trg_max_len", "=", "len", "(", "sample_batch", "[", "idx", "]", ".", "TrgRels", ")", "\n", "\n", "", "", "return", "src_max_len", ",", "trg_max_len", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_words_index_seq": [[344, 355], ["list", "range", "len", "list.append", "list.append", "list.append"], "function", ["None"], ["", "def", "get_words_index_seq", "(", "words", ",", "max_len", ")", ":", "\n", "    ", "seq", "=", "list", "(", ")", "\n", "for", "word", "in", "words", ":", "\n", "        ", "if", "word", "in", "word_vocab", ":", "\n", "            ", "seq", ".", "append", "(", "word_vocab", "[", "word", "]", ")", "\n", "", "else", ":", "\n", "            ", "seq", ".", "append", "(", "word_vocab", "[", "'<UNK>'", "]", ")", "\n", "", "", "pad_len", "=", "max_len", "-", "len", "(", "words", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "        ", "seq", ".", "append", "(", "word_vocab", "[", "'<PAD>'", "]", ")", "\n", "", "return", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_char_seq": [[357, 378], ["list", "range", "range", "list.append", "range", "range", "len", "range", "len", "list.append", "list.append", "list.append", "min", "list.append", "list.append", "len"], "function", ["None"], ["", "def", "get_char_seq", "(", "words", ",", "max_len", ")", ":", "\n", "    ", "char_seq", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "conv_filter_size", "-", "1", ")", ":", "\n", "        ", "char_seq", ".", "append", "(", "char_vocab", "[", "'<PAD>'", "]", ")", "\n", "", "for", "word", "in", "words", ":", "\n", "        ", "for", "c", "in", "word", "[", "0", ":", "min", "(", "len", "(", "word", ")", ",", "max_word_len", ")", "]", ":", "\n", "            ", "if", "c", "in", "char_vocab", ":", "\n", "                ", "char_seq", ".", "append", "(", "char_vocab", "[", "c", "]", ")", "\n", "", "else", ":", "\n", "                ", "char_seq", ".", "append", "(", "char_vocab", "[", "'<UNK>'", "]", ")", "\n", "", "", "pad_len", "=", "max_word_len", "-", "len", "(", "word", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "            ", "char_seq", ".", "append", "(", "char_vocab", "[", "'<PAD>'", "]", ")", "\n", "", "for", "i", "in", "range", "(", "0", ",", "conv_filter_size", "-", "1", ")", ":", "\n", "            ", "char_seq", ".", "append", "(", "char_vocab", "[", "'<PAD>'", "]", ")", "\n", "\n", "", "", "pad_len", "=", "max_len", "-", "len", "(", "words", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "max_word_len", "+", "conv_filter_size", "-", "1", ")", ":", "\n", "            ", "char_seq", ".", "append", "(", "char_vocab", "[", "'<PAD>'", "]", ")", "\n", "", "", "return", "char_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_relation_index_seq": [[380, 390], ["list", "list.append", "range", "list.append", "len", "list.append"], "function", ["None"], ["", "def", "get_relation_index_seq", "(", "rel_ids", ",", "max_len", ")", ":", "\n", "    ", "seq", "=", "list", "(", ")", "\n", "# seq.append(relnameToIdx['<SOS>'])", "\n", "for", "r", "in", "rel_ids", ":", "\n", "        ", "seq", ".", "append", "(", "r", ")", "\n", "", "seq", ".", "append", "(", "relnameToIdx", "[", "'None'", "]", ")", "\n", "pad_len", "=", "max_len", "+", "1", "-", "len", "(", "seq", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "        ", "seq", ".", "append", "(", "relnameToIdx", "[", "'<PAD>'", "]", ")", "\n", "", "return", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_padded_pointers": [[392, 400], ["range", "idx_list.append", "len", "idx_list.append"], "function", ["None"], ["", "def", "get_padded_pointers", "(", "pointers", ",", "pidx", ",", "max_len", ")", ":", "\n", "    ", "idx_list", "=", "[", "]", "\n", "for", "p", "in", "pointers", ":", "\n", "        ", "idx_list", ".", "append", "(", "p", "[", "pidx", "]", ")", "\n", "", "pad_len", "=", "max_len", "+", "1", "-", "len", "(", "pointers", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "        ", "idx_list", ".", "append", "(", "-", "1", ")", "\n", "", "return", "idx_list", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_padded_relations": [[402, 411], ["rel_list.append", "range", "rel_list.append", "len", "rel_list.append"], "function", ["None"], ["", "def", "get_padded_relations", "(", "rels", ",", "max_len", ")", ":", "\n", "    ", "rel_list", "=", "[", "]", "\n", "for", "r", "in", "rels", ":", "\n", "        ", "rel_list", ".", "append", "(", "r", ")", "\n", "", "rel_list", ".", "append", "(", "relnameToIdx", "[", "'None'", "]", ")", "\n", "pad_len", "=", "max_len", "+", "1", "-", "len", "(", "rel_list", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "        ", "rel_list", ".", "append", "(", "relnameToIdx", "[", "'<PAD>'", "]", ")", "\n", "", "return", "rel_list", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_padded_mask": [[413, 421], ["list", "range", "range", "list.append", "list.append"], "function", ["None"], ["", "def", "get_padded_mask", "(", "cur_len", ",", "max_len", ")", ":", "\n", "    ", "mask_seq", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "cur_len", ")", ":", "\n", "        ", "mask_seq", ".", "append", "(", "0", ")", "\n", "", "pad_len", "=", "max_len", "-", "cur_len", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "        ", "mask_seq", ".", "append", "(", "1", ")", "\n", "", "return", "mask_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_entity_masks": [[423, 445], ["range", "arg1_masks.append", "arg2_masks.append", "len", "arg1_masks.append", "arg2_masks.append", "range", "range", "range", "range"], "function", ["None"], ["", "def", "get_entity_masks", "(", "pointers", ",", "src_max", ",", "trg_max", ")", ":", "\n", "    ", "arg1_masks", "=", "[", "]", "\n", "arg2_masks", "=", "[", "]", "\n", "for", "p", "in", "pointers", ":", "\n", "        ", "arg1_mask", "=", "[", "1", "for", "i", "in", "range", "(", "src_max", ")", "]", "\n", "arg1_mask", "[", "p", "[", "0", "]", "]", "=", "0", "\n", "arg1_mask", "[", "p", "[", "1", "]", "]", "=", "0", "\n", "\n", "arg2_mask", "=", "[", "1", "for", "i", "in", "range", "(", "src_max", ")", "]", "\n", "arg2_mask", "[", "p", "[", "2", "]", "]", "=", "0", "\n", "arg2_mask", "[", "p", "[", "3", "]", "]", "=", "0", "\n", "\n", "arg1_masks", ".", "append", "(", "arg1_mask", ")", "\n", "arg2_masks", ".", "append", "(", "arg2_mask", ")", "\n", "\n", "", "pad_len", "=", "trg_max", "+", "1", "-", "len", "(", "pointers", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "pad_len", ")", ":", "\n", "        ", "arg1_mask", "=", "[", "1", "for", "i", "in", "range", "(", "src_max", ")", "]", "\n", "arg2_mask", "=", "[", "1", "for", "i", "in", "range", "(", "src_max", ")", "]", "\n", "arg1_masks", ".", "append", "(", "arg1_mask", ")", "\n", "arg2_masks", ".", "append", "(", "arg2_mask", ")", "\n", "", "return", "arg1_masks", ",", "arg2_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_positional_index": [[447, 451], ["min", "range", "range"], "function", ["None"], ["", "def", "get_positional_index", "(", "sent_len", ",", "max_len", ")", ":", "\n", "    ", "index_seq", "=", "[", "min", "(", "i", "+", "1", ",", "max_positional_idx", "-", "1", ")", "for", "i", "in", "range", "(", "sent_len", ")", "]", "\n", "index_seq", "+=", "[", "0", "for", "i", "in", "range", "(", "max_len", "-", "sent_len", ")", "]", "\n", "return", "index_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_batch_data": [[453, 510], ["ptrnet_decoder.get_max_len", "list", "list", "list", "list", "list", "list", "list", "list", "list", "list.append", "list.append", "list.append", "numpy.zeros", "adj_lst.append", "positional_index_list.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "ptrnet_decoder.get_words_index_seq", "ptrnet_decoder.get_padded_mask", "ptrnet_decoder.get_char_seq", "ptrnet_decoder.get_positional_index", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "ptrnet_decoder.get_entity_masks", "arg1_mask_seq.append", "arg2_mask_seq.append", "list.append", "len", "ptrnet_decoder.get_padded_pointers", "ptrnet_decoder.get_padded_pointers", "ptrnet_decoder.get_padded_pointers", "ptrnet_decoder.get_padded_pointers", "ptrnet_decoder.get_padded_relations", "ptrnet_decoder.get_relation_index_seq", "ptrnet_decoder.get_relation_index_seq", "len", "len"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_max_len", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_words_index_seq", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_padded_mask", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_char_seq", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_positional_index", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_entity_masks", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_padded_pointers", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_padded_pointers", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_padded_pointers", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_padded_pointers", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_padded_relations", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_relation_index_seq", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_relation_index_seq"], ["", "def", "get_batch_data", "(", "cur_samples", ",", "is_training", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns the training samples and labels as numpy array\n    \"\"\"", "\n", "batch_src_max_len", ",", "batch_trg_max_len", "=", "get_max_len", "(", "cur_samples", ")", "\n", "batch_trg_max_len", "+=", "1", "\n", "src_words_list", "=", "list", "(", ")", "\n", "src_words_mask_list", "=", "list", "(", ")", "\n", "src_char_seq", "=", "list", "(", ")", "\n", "decoder_input_list", "=", "list", "(", ")", "\n", "adj_lst", "=", "[", "]", "\n", "positional_index_list", "=", "[", "]", "\n", "\n", "rel_seq", "=", "list", "(", ")", "\n", "arg1_start_seq", "=", "list", "(", ")", "\n", "arg1_end_seq", "=", "list", "(", ")", "\n", "arg2_start_seq", "=", "list", "(", ")", "\n", "arg2_end_seq", "=", "list", "(", ")", "\n", "arg1_mask_seq", "=", "[", "]", "\n", "arg2_mask_seq", "=", "[", "]", "\n", "\n", "for", "sample", "in", "cur_samples", ":", "\n", "        ", "src_words_list", ".", "append", "(", "get_words_index_seq", "(", "sample", ".", "SrcWords", ",", "batch_src_max_len", ")", ")", "\n", "src_words_mask_list", ".", "append", "(", "get_padded_mask", "(", "sample", ".", "SrcLen", ",", "batch_src_max_len", ")", ")", "\n", "src_char_seq", ".", "append", "(", "get_char_seq", "(", "sample", ".", "SrcWords", ",", "batch_src_max_len", ")", ")", "\n", "cur_masked_adj", "=", "np", ".", "zeros", "(", "(", "batch_src_max_len", ",", "batch_src_max_len", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cur_masked_adj", "[", ":", "len", "(", "sample", ".", "SrcWords", ")", ",", ":", "len", "(", "sample", ".", "SrcWords", ")", "]", "=", "sample", ".", "AdjMat", "\n", "adj_lst", ".", "append", "(", "cur_masked_adj", ")", "\n", "positional_index_list", ".", "append", "(", "get_positional_index", "(", "len", "(", "sample", ".", "SrcWords", ")", ",", "batch_src_max_len", ")", ")", "\n", "\n", "if", "is_training", ":", "\n", "            ", "arg1_start_seq", ".", "append", "(", "get_padded_pointers", "(", "sample", ".", "TrgPointers", ",", "0", ",", "batch_trg_max_len", ")", ")", "\n", "arg1_end_seq", ".", "append", "(", "get_padded_pointers", "(", "sample", ".", "TrgPointers", ",", "1", ",", "batch_trg_max_len", ")", ")", "\n", "arg2_start_seq", ".", "append", "(", "get_padded_pointers", "(", "sample", ".", "TrgPointers", ",", "2", ",", "batch_trg_max_len", ")", ")", "\n", "arg2_end_seq", ".", "append", "(", "get_padded_pointers", "(", "sample", ".", "TrgPointers", ",", "3", ",", "batch_trg_max_len", ")", ")", "\n", "rel_seq", ".", "append", "(", "get_padded_relations", "(", "sample", ".", "TrgRels", ",", "batch_trg_max_len", ")", ")", "\n", "decoder_input_list", ".", "append", "(", "get_relation_index_seq", "(", "sample", ".", "TrgRels", ",", "batch_trg_max_len", ")", ")", "\n", "\n", "arg1_mask", ",", "arg2_mask", "=", "get_entity_masks", "(", "sample", ".", "TrgPointers", ",", "batch_src_max_len", ",", "batch_trg_max_len", ")", "\n", "arg1_mask_seq", ".", "append", "(", "arg1_mask", ")", "\n", "arg2_mask_seq", ".", "append", "(", "arg2_mask", ")", "\n", "", "else", ":", "\n", "            ", "decoder_input_list", ".", "append", "(", "get_relation_index_seq", "(", "[", "]", ",", "1", ")", ")", "\n", "\n", "", "", "return", "{", "'src_words'", ":", "np", ".", "array", "(", "src_words_list", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'positional_seq'", ":", "np", ".", "array", "(", "positional_index_list", ")", ",", "\n", "'src_words_mask'", ":", "np", ".", "array", "(", "src_words_mask_list", ")", ",", "\n", "'src_chars'", ":", "np", ".", "array", "(", "src_char_seq", ")", ",", "\n", "'decoder_input'", ":", "np", ".", "array", "(", "decoder_input_list", ")", ",", "\n", "'adj'", ":", "np", ".", "array", "(", "adj_lst", ")", ",", "\n", "'rel'", ":", "np", ".", "array", "(", "rel_seq", ")", ",", "\n", "'arg1_start'", ":", "np", ".", "array", "(", "arg1_start_seq", ")", ",", "\n", "'arg1_end'", ":", "np", ".", "array", "(", "arg1_end_seq", ")", ",", "\n", "'arg2_start'", ":", "np", ".", "array", "(", "arg2_start_seq", ")", ",", "\n", "'arg2_end'", ":", "np", ".", "array", "(", "arg2_end_seq", ")", ",", "\n", "'arg1_mask'", ":", "np", ".", "array", "(", "arg1_mask_seq", ")", ",", "\n", "'arg2_mask'", ":", "np", ".", "array", "(", "arg2_mask_seq", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.multi_head_pooling": [[605, 613], ["h.data.masked_fill_", "h.data.masked_fill_", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mask.unsqueeze", "float", "mask.unsqueeze"], "function", ["None"], ["", "", "def", "multi_head_pooling", "(", "h", ",", "mask", ",", "pool_type", "=", "'max'", ")", ":", "\n", "    ", "if", "pool_type", "==", "'max'", ":", "\n", "        ", "h", ".", "data", ".", "masked_fill_", "(", "mask", ".", "unsqueeze", "(", "2", ")", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "pooled_h", "=", "torch", ".", "max", "(", "h", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "h", ".", "data", ".", "masked_fill_", "(", "mask", ".", "unsqueeze", "(", "2", ")", ".", "data", ",", "0", ")", "\n", "pooled_h", "=", "torch", ".", "max", "(", "h", ",", "1", ")", "[", "0", "]", "\n", "", "return", "pooled_h", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_model": [[968, 971], ["ptrnet_decoder.Seq2SeqModel"], "function", ["None"], ["", "", "def", "get_model", "(", "model_id", ")", ":", "\n", "    ", "if", "model_id", "==", "1", ":", "\n", "        ", "return", "Seq2SeqModel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.set_random_seeds": [[973, 979], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "", "def", "set_random_seeds", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "n_gpu", ">", "1", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.predict": [[981, 1042], ["math.ceil", "list", "list", "list", "list", "list", "model.eval", "ptrnet_decoder.set_random_seeds", "datetime.datetime.now", "tqdm.tqdm", "datetime.datetime.now", "ptrnet_decoder.custom_print", "range", "min", "ptrnet_decoder.get_batch_data", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "list", "list", "list", "list", "list", "model.zero_grad", "len", "len", "len", "len", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "src_words_seq.cuda.cuda", "src_words_mask.cuda.cuda", "trg_words_seq.cuda.cuda", "src_chars_seq.cuda.cuda", "adj.cuda.cuda", "positional_seq.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "outputs[].data.cpu().numpy", "outputs[].data.cpu().numpy", "outputs[].data.cpu().numpy", "outputs[].data.cpu().numpy", "outputs[].data.cpu().numpy", "model", "outputs[].data.cpu", "outputs[].data.cpu", "outputs[].data.cpu", "outputs[].data.cpu", "outputs[].data.cpu"], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.set_random_seeds", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_batch_data"], ["", "", "def", "predict", "(", "samples", ",", "model", ",", "model_id", ")", ":", "\n", "    ", "pred_batch_size", "=", "batch_size", "\n", "batch_count", "=", "math", ".", "ceil", "(", "len", "(", "samples", ")", "/", "pred_batch_size", ")", "\n", "move_last_batch", "=", "False", "\n", "if", "len", "(", "samples", ")", "-", "batch_size", "*", "(", "batch_count", "-", "1", ")", "==", "1", ":", "\n", "        ", "move_last_batch", "=", "True", "\n", "batch_count", "-=", "1", "\n", "", "rel", "=", "list", "(", ")", "\n", "arg1s", "=", "list", "(", ")", "\n", "arg1e", "=", "list", "(", ")", "\n", "arg2s", "=", "list", "(", ")", "\n", "arg2e", "=", "list", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "set_random_seeds", "(", "random_seed", ")", "\n", "start_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "for", "batch_idx", "in", "tqdm", "(", "range", "(", "0", ",", "batch_count", ")", ")", ":", "\n", "        ", "batch_start", "=", "batch_idx", "*", "pred_batch_size", "\n", "batch_end", "=", "min", "(", "len", "(", "samples", ")", ",", "batch_start", "+", "pred_batch_size", ")", "\n", "if", "batch_idx", "==", "batch_count", "-", "1", "and", "move_last_batch", ":", "\n", "            ", "batch_end", "=", "len", "(", "samples", ")", "\n", "\n", "", "cur_batch", "=", "samples", "[", "batch_start", ":", "batch_end", "]", "\n", "cur_samples_input", "=", "get_batch_data", "(", "cur_batch", ",", "False", ")", "\n", "\n", "src_words_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'src_words'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "positional_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'positional_seq'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "src_words_mask", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'src_words_mask'", "]", ".", "astype", "(", "'uint8'", ")", ")", "\n", "trg_words_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'decoder_input'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "src_chars_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'src_chars'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "adj", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'adj'", "]", ".", "astype", "(", "'float32'", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "src_words_seq", "=", "src_words_seq", ".", "cuda", "(", ")", "\n", "src_words_mask", "=", "src_words_mask", ".", "cuda", "(", ")", "\n", "trg_words_seq", "=", "trg_words_seq", ".", "cuda", "(", ")", "\n", "src_chars_seq", "=", "src_chars_seq", ".", "cuda", "(", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "positional_seq", "=", "positional_seq", ".", "cuda", "(", ")", "\n", "\n", "", "src_words_seq", "=", "autograd", ".", "Variable", "(", "src_words_seq", ")", "\n", "src_words_mask", "=", "autograd", ".", "Variable", "(", "src_words_mask", ")", "\n", "trg_words_seq", "=", "autograd", ".", "Variable", "(", "trg_words_seq", ")", "\n", "src_chars_seq", "=", "autograd", ".", "Variable", "(", "src_chars_seq", ")", "\n", "adj", "=", "autograd", ".", "Variable", "(", "adj", ")", "\n", "positional_seq", "=", "autograd", ".", "Variable", "(", "positional_seq", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "model_id", "==", "1", ":", "\n", "                ", "outputs", "=", "model", "(", "src_words_seq", ",", "src_words_mask", ",", "src_chars_seq", ",", "positional_seq", ",", "trg_words_seq", ",", "\n", "max_trg_len", ",", "adj", ",", "None", ",", "None", ",", "False", ")", "\n", "\n", "", "", "rel", "+=", "list", "(", "outputs", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "arg1s", "+=", "list", "(", "outputs", "[", "1", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "arg1e", "+=", "list", "(", "outputs", "[", "2", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "arg2s", "+=", "list", "(", "outputs", "[", "3", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "arg2e", "+=", "list", "(", "outputs", "[", "4", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "\n", "", "end_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "custom_print", "(", "'Prediction time:'", ",", "end_time", "-", "start_time", ")", "\n", "return", "rel", ",", "arg1s", ",", "arg1e", ",", "arg2s", ",", "arg2e", "\n", "\n"]], "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.train_model": [[1044, 1192], ["len", "int", "ptrnet_decoder.custom_print", "ptrnet_decoder.get_model", "sum", "ptrnet_decoder.custom_print", "ptrnet_decoder.custom_print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.NLLLoss", "torch.NLLLoss", "ptrnet_decoder.custom_print", "torch.Adam", "ptrnet_decoder.custom_print", "range", "ptrnet_decoder.custom_print", "ptrnet_decoder.custom_print", "ptrnet_decoder.custom_print", "math.ceil", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.train", "torch.nn.DataParallel.zero_grad", "ptrnet_decoder.custom_print", "ptrnet_decoder.set_random_seeds", "ptrnet_decoder.shuffle_data", "datetime.datetime.now", "tqdm.tqdm", "datetime.datetime.now", "ptrnet_decoder.custom_print", "ptrnet_decoder.custom_print", "ptrnet_decoder.custom_print", "ptrnet_decoder.set_random_seeds", "ptrnet_decoder.predict", "ptrnet_decoder.get_F1", "ptrnet_decoder.custom_print", "ptrnet_decoder.custom_print", "ptrnet_decoder.custom_print", "len", "p.numel", "range", "min", "ptrnet_decoder.get_batch_data", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "torch.Variable", "rel.cuda.view().squeeze", "arg1s.cuda.view().squeeze", "arg1e.cuda.view().squeeze", "arg2s.cuda.view().squeeze", "arg2e.cuda.view().squeeze", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "loss.item", "float", "float", "ptrnet_decoder.custom_print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.nn.DataParallel.parameters", "len", "len", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "cur_samples_input[].astype", "src_words_seq.cuda.cuda", "src_words_mask.cuda.cuda", "trg_words_seq.cuda.cuda", "src_chars_seq.cuda.cuda", "adj.cuda.cuda", "positional_seq.cuda.cuda", "rel.cuda.cuda", "arg1s.cuda.cuda", "arg1e.cuda.cuda", "arg2s.cuda.cuda", "arg2e.cuda.cuda", "arg1_mask.cuda.cuda", "arg2_mask.cuda.cuda", "torch.nn.DataParallel.", "torch.nn.DataParallel.parameters", "optim.Adam.step", "torch.nn.DataParallel.zero_grad", "torch.nn.DataParallel.state_dict", "rel.cuda.view", "arg1s.cuda.view", "arg1e.cuda.view", "arg2s.cuda.view", "arg2e.cuda.view", "nn.NLLLoss.", "rel.cuda.size", "nn.NLLLoss.", "nn.NLLLoss.", "nn.NLLLoss.", "nn.NLLLoss."], "function", ["home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_model", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.set_random_seeds", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.shuffle_data", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.set_random_seeds", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.predict", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_F1", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.get_batch_data", "home.repos.pwc.inspect_result.nusnlp_PtrNetDecoding4JERE.None.ptrnet_decoder.custom_print"], ["", "def", "train_model", "(", "model_id", ",", "train_samples", ",", "dev_samples", ",", "best_model_file", ")", ":", "\n", "    ", "train_size", "=", "len", "(", "train_samples", ")", "\n", "batch_count", "=", "int", "(", "math", ".", "ceil", "(", "train_size", "/", "batch_size", ")", ")", "\n", "move_last_batch", "=", "False", "\n", "if", "len", "(", "train_samples", ")", "-", "batch_size", "*", "(", "batch_count", "-", "1", ")", "==", "1", ":", "\n", "        ", "move_last_batch", "=", "True", "\n", "batch_count", "-=", "1", "\n", "", "custom_print", "(", "batch_count", ")", "\n", "model", "=", "get_model", "(", "model_id", ")", "\n", "pytorch_total_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "custom_print", "(", "'Parameters size:'", ",", "pytorch_total_params", ")", "\n", "\n", "custom_print", "(", "model", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "if", "n_gpu", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "rel_criterion", "=", "nn", ".", "NLLLoss", "(", "ignore_index", "=", "0", ")", "\n", "pointer_criterion", "=", "nn", ".", "NLLLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "\n", "custom_print", "(", "'weight factor:'", ",", "wf", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "\n", "custom_print", "(", "optimizer", ")", "\n", "\n", "best_dev_acc", "=", "-", "1.0", "\n", "best_epoch_idx", "=", "-", "1", "\n", "best_epoch_seed", "=", "-", "1", "\n", "for", "epoch_idx", "in", "range", "(", "0", ",", "num_epoch", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "custom_print", "(", "'Epoch:'", ",", "epoch_idx", "+", "1", ")", "\n", "cur_seed", "=", "random_seed", "+", "epoch_idx", "+", "1", "\n", "\n", "set_random_seeds", "(", "cur_seed", ")", "\n", "cur_shuffled_train_data", "=", "shuffle_data", "(", "train_samples", ")", "\n", "start_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "train_loss_val", "=", "0.0", "\n", "\n", "for", "batch_idx", "in", "tqdm", "(", "range", "(", "0", ",", "batch_count", ")", ")", ":", "\n", "            ", "batch_start", "=", "batch_idx", "*", "batch_size", "\n", "batch_end", "=", "min", "(", "len", "(", "cur_shuffled_train_data", ")", ",", "batch_start", "+", "batch_size", ")", "\n", "if", "batch_idx", "==", "batch_count", "-", "1", "and", "move_last_batch", ":", "\n", "                ", "batch_end", "=", "len", "(", "cur_shuffled_train_data", ")", "\n", "\n", "", "cur_batch", "=", "cur_shuffled_train_data", "[", "batch_start", ":", "batch_end", "]", "\n", "cur_samples_input", "=", "get_batch_data", "(", "cur_batch", ",", "True", ")", "\n", "\n", "src_words_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'src_words'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "positional_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'positional_seq'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "src_words_mask", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'src_words_mask'", "]", ".", "astype", "(", "'uint8'", ")", ")", "\n", "trg_words_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'decoder_input'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "src_chars_seq", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'src_chars'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "adj", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'adj'", "]", ".", "astype", "(", "'float32'", ")", ")", "\n", "\n", "rel", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'rel'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "arg1s", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'arg1_start'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "arg1e", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'arg1_end'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "arg2s", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'arg2_start'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "arg2e", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'arg2_end'", "]", ".", "astype", "(", "'long'", ")", ")", "\n", "\n", "arg1_mask", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'arg1_mask'", "]", ".", "astype", "(", "'uint8'", ")", ")", "\n", "arg2_mask", "=", "torch", ".", "from_numpy", "(", "cur_samples_input", "[", "'arg2_mask'", "]", ".", "astype", "(", "'uint8'", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "src_words_seq", "=", "src_words_seq", ".", "cuda", "(", ")", "\n", "src_words_mask", "=", "src_words_mask", ".", "cuda", "(", ")", "\n", "trg_words_seq", "=", "trg_words_seq", ".", "cuda", "(", ")", "\n", "src_chars_seq", "=", "src_chars_seq", ".", "cuda", "(", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "positional_seq", "=", "positional_seq", ".", "cuda", "(", ")", "\n", "\n", "rel", "=", "rel", ".", "cuda", "(", ")", "\n", "arg1s", "=", "arg1s", ".", "cuda", "(", ")", "\n", "arg1e", "=", "arg1e", ".", "cuda", "(", ")", "\n", "arg2s", "=", "arg2s", ".", "cuda", "(", ")", "\n", "arg2e", "=", "arg2e", ".", "cuda", "(", ")", "\n", "\n", "arg1_mask", "=", "arg1_mask", ".", "cuda", "(", ")", "\n", "arg2_mask", "=", "arg2_mask", ".", "cuda", "(", ")", "\n", "\n", "", "src_words_seq", "=", "autograd", ".", "Variable", "(", "src_words_seq", ")", "\n", "src_words_mask", "=", "autograd", ".", "Variable", "(", "src_words_mask", ")", "\n", "trg_words_seq", "=", "autograd", ".", "Variable", "(", "trg_words_seq", ")", "\n", "src_chars_seq", "=", "autograd", ".", "Variable", "(", "src_chars_seq", ")", "\n", "adj", "=", "autograd", ".", "Variable", "(", "adj", ")", "\n", "positional_seq", "=", "autograd", ".", "Variable", "(", "positional_seq", ")", "\n", "\n", "rel", "=", "autograd", ".", "Variable", "(", "rel", ")", "\n", "arg1s", "=", "autograd", ".", "Variable", "(", "arg1s", ")", "\n", "arg1e", "=", "autograd", ".", "Variable", "(", "arg1e", ")", "\n", "arg2s", "=", "autograd", ".", "Variable", "(", "arg2s", ")", "\n", "arg2e", "=", "autograd", ".", "Variable", "(", "arg2e", ")", "\n", "\n", "arg1_mask", "=", "autograd", ".", "Variable", "(", "arg1_mask", ")", "\n", "arg2_mask", "=", "autograd", ".", "Variable", "(", "arg2_mask", ")", "\n", "\n", "if", "model_id", "==", "1", ":", "\n", "                ", "outputs", "=", "model", "(", "src_words_seq", ",", "src_words_mask", ",", "src_chars_seq", ",", "positional_seq", ",", "trg_words_seq", ",", "\n", "rel", ".", "size", "(", ")", "[", "1", "]", ",", "adj", ",", "arg1_mask", ",", "arg2_mask", ",", "True", ")", "\n", "\n", "", "rel", "=", "rel", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "arg1s", "=", "arg1s", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "arg1e", "=", "arg1e", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "arg2s", "=", "arg2s", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "arg2e", "=", "arg2e", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "loss", "=", "rel_criterion", "(", "outputs", "[", "0", "]", ",", "rel", ")", "+", "wf", "*", "(", "pointer_criterion", "(", "outputs", "[", "1", "]", ",", "arg1s", ")", "+", "pointer_criterion", "(", "outputs", "[", "2", "]", ",", "arg1e", ")", ")", "+", "wf", "*", "(", "pointer_criterion", "(", "outputs", "[", "3", "]", ",", "arg2s", ")", "+", "pointer_criterion", "(", "outputs", "[", "4", "]", ",", "arg2e", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "10.0", ")", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "update_freq", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "", "train_loss_val", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "train_loss_val", "/=", "batch_count", "\n", "end_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "custom_print", "(", "'Training loss:'", ",", "train_loss_val", ")", "\n", "custom_print", "(", "'Training time:'", ",", "end_time", "-", "start_time", ")", "\n", "\n", "custom_print", "(", "'\\nDev Results\\n'", ")", "\n", "set_random_seeds", "(", "random_seed", ")", "\n", "dev_preds", "=", "predict", "(", "dev_samples", ",", "model", ",", "model_id", ")", "\n", "\n", "pred_pos", ",", "gt_pos", ",", "correct_pos", "=", "get_F1", "(", "dev_samples", ",", "dev_preds", ")", "\n", "custom_print", "(", "pred_pos", ",", "'\\t'", ",", "gt_pos", ",", "'\\t'", ",", "correct_pos", ")", "\n", "p", "=", "float", "(", "correct_pos", ")", "/", "(", "pred_pos", "+", "1e-8", ")", "\n", "r", "=", "float", "(", "correct_pos", ")", "/", "(", "gt_pos", "+", "1e-8", ")", "\n", "dev_acc", "=", "(", "2", "*", "p", "*", "r", ")", "/", "(", "p", "+", "r", "+", "1e-8", ")", "\n", "custom_print", "(", "'F1:'", ",", "dev_acc", ")", "\n", "\n", "if", "dev_acc", ">=", "best_dev_acc", ":", "\n", "            ", "best_epoch_idx", "=", "epoch_idx", "+", "1", "\n", "best_epoch_seed", "=", "cur_seed", "\n", "custom_print", "(", "'model saved......'", ")", "\n", "best_dev_acc", "=", "dev_acc", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "best_model_file", ")", "\n", "\n", "", "custom_print", "(", "'\\n\\n'", ")", "\n", "if", "epoch_idx", "+", "1", "-", "best_epoch_idx", ">=", "early_stop_cnt", ":", "\n", "            ", "break", "\n", "\n", "", "", "custom_print", "(", "'*******'", ")", "\n", "custom_print", "(", "'Best Epoch:'", ",", "best_epoch_idx", ")", "\n", "custom_print", "(", "'Best Epoch Seed:'", ",", "best_epoch_seed", ")", "\n", "\n"]]}