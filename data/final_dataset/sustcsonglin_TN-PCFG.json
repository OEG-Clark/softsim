{"home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.None.evaluate.main": [[11, 27], ["click.command", "click.option", "click.option", "click.option", "click.option", "yaml.load", "easydict.EasyDict", "print", "parser.cmds.Evaluate", "parser.cmds.Evaluate.", "open", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\"--eval_dep\"", ",", "default", "=", "False", ",", "help", "=", "\"evaluate dependency, only for N(B)L-PCFG\"", ")", "\n", "@", "click", ".", "option", "(", "\"--decode_type\"", ",", "default", "=", "'mbr'", ",", "help", "=", "\"viterbi or mbr\"", ")", "\n", "@", "click", ".", "option", "(", "\"--device\"", ",", "'-d'", ",", "default", "=", "'0'", ")", "\n", "@", "click", ".", "option", "(", "\"--load_from_dir\"", ",", "default", "=", "\"\"", ")", "\n", "def", "main", "(", "eval_dep", ",", "decode_type", ",", "load_from_dir", ",", "device", ")", ":", "\n", "    ", "yaml_cfg", "=", "yaml", ".", "load", "(", "open", "(", "load_from_dir", "+", "\"/config.yaml\"", ",", "'r'", ")", ")", "\n", "args", "=", "edict", "(", "yaml_cfg", ")", "\n", "args", ".", "device", "=", "device", "\n", "args", ".", "load_from_dir", "=", "load_from_dir", "\n", "print", "(", "f\"Set the device with ID {args.device} visible\"", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "device", "\n", "args", ".", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "\n", "command", "=", "Evaluate", "(", ")", "\n", "command", "(", "args", ",", "decode_type", "=", "decode_type", ",", "eval_dep", "=", "eval_dep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.None.preprocessing.factorize": [[6, 21], ["tree.label", "preprocessing.factorize.track"], "function", ["None"], ["def", "factorize", "(", "tree", ")", ":", "\n", "    ", "def", "track", "(", "tree", ",", "i", ")", ":", "\n", "        ", "label", "=", "tree", ".", "label", "(", ")", "\n", "if", "len", "(", "tree", ")", "==", "1", "and", "not", "isinstance", "(", "tree", "[", "0", "]", ",", "Tree", ")", ":", "\n", "            ", "return", "(", "i", "+", "1", "if", "label", "is", "not", "None", "else", "i", ")", ",", "[", "]", "\n", "", "j", ",", "spans", "=", "i", ",", "[", "]", "\n", "for", "child", "in", "tree", ":", "\n", "            ", "j", ",", "s", "=", "track", "(", "child", ",", "j", ")", "\n", "spans", "+=", "s", "\n", "", "if", "label", "is", "not", "None", "and", "j", ">", "i", ":", "\n", "            ", "spans", "=", "[", "[", "i", ",", "j", ",", "label", "]", "]", "+", "spans", "\n", "", "elif", "j", ">", "i", ":", "\n", "            ", "spans", "=", "[", "[", "i", ",", "j", ",", "'NULL'", "]", "]", "+", "spans", "\n", "", "return", "j", ",", "spans", "\n", "", "return", "track", "(", "tree", ",", "0", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.None.preprocessing.create_dataset": [[23, 39], ["open", "nltk.Tree.fromstring", "Tree.fromstring.pos", "zip", "word_array.append", "pos_array.append", "gold_trees.append", "preprocessing.factorize"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.None.preprocessing.factorize"], ["", "def", "create_dataset", "(", "file_name", ")", ":", "\n", "    ", "word_array", "=", "[", "]", "\n", "pos_array", "=", "[", "]", "\n", "gold_trees", "=", "[", "]", "\n", "with", "open", "(", "file_name", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tree", "=", "Tree", ".", "fromstring", "(", "line", ")", "\n", "token", "=", "tree", ".", "pos", "(", ")", "\n", "word", ",", "pos", "=", "zip", "(", "*", "token", ")", "\n", "word_array", ".", "append", "(", "word", ")", "\n", "pos_array", ".", "append", "(", "pos", ")", "\n", "gold_trees", ".", "append", "(", "factorize", "(", "tree", ")", ")", "\n", "\n", "", "", "return", "{", "'word'", ":", "word_array", ",", "\n", "'pos'", ":", "pos_array", ",", "\n", "'gold_tree'", ":", "gold_trees", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.data_module.DataModule.__init__": [[12, 18], ["super().__init__", "data_module.DataModule.setup"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.data_module.DataModule.setup"], ["    ", "def", "__init__", "(", "self", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "device", "=", "self", ".", "hparams", ".", "device", "\n", "self", ".", "setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.data_module.DataModule.prepare_data": [[19, 21], ["None"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.data_module.DataModule.setup": [[22, 83], ["fastNLP.core.dataset.DataSet", "fastNLP.core.dataset.DataSet", "fastNLP.core.dataset.DataSet", "fastNLP.core.vocabulary.Vocabulary", "pickle.load", "pickle.load", "pickle.load", "fastNLP.core.dataset.DataSet.add_field", "fastNLP.core.dataset.DataSet.add_field", "fastNLP.core.dataset.DataSet.add_field", "fastNLP.core.dataset.DataSet.add_field", "fastNLP.core.dataset.DataSet.add_field", "fastNLP.core.dataset.DataSet.add_field", "fastNLP.core.dataset.DataSet.add_seq_len", "fastNLP.core.dataset.DataSet.add_seq_len", "fastNLP.core.dataset.DataSet.add_seq_len", "fastNLP.core.dataset.DataSet.apply_field", "fastNLP.core.dataset.DataSet.apply_field", "fastNLP.core.dataset.DataSet.apply_field", "fastNLP.core.vocabulary.Vocabulary.from_dataset", "fastNLP.core.vocabulary.Vocabulary.index_dataset", "fastNLP.core.vocabulary.Vocabulary.index_dataset", "fastNLP.core.vocabulary.Vocabulary.index_dataset", "fastNLP.core.dataset.DataSet.drop", "fastNLP.core.dataset.DataSet.drop", "fastNLP.core.dataset.DataSet.drop", "data_module.DataModule.train_dataset.set_input", "data_module.DataModule.val_dataset.set_input", "data_module.DataModule.test_dataset.set_input", "data_module.DataModule.val_dataset.set_target", "data_module.DataModule.test_dataset.set_target", "open", "open", "open", "fastNLP.core.dataset.DataSet.add_field", "fastNLP.core.dataset.DataSet.add_field", "fastNLP.core.dataset.DataSet.set_target", "fastNLP.core.dataset.DataSet.set_target", "print", "re.sub", "clean_number"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.from_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target"], ["", "def", "setup", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "hparams", ".", "data", "\n", "train_dataset", "=", "DataSet", "(", ")", "\n", "val_dataset", "=", "DataSet", "(", ")", "\n", "test_dataset", "=", "DataSet", "(", ")", "\n", "word_vocab", "=", "Vocabulary", "(", "max_size", "=", "data", ".", "vocab_size", ")", "\n", "train_data", "=", "pickle", ".", "load", "(", "open", "(", "data", ".", "train_file", ",", "'rb'", ")", ")", "\n", "val_data", "=", "pickle", ".", "load", "(", "open", "(", "data", ".", "val_file", ",", "'rb'", ")", ")", "\n", "test_data", "=", "pickle", ".", "load", "(", "open", "(", "data", ".", "test_file", ",", "'rb'", ")", ")", "\n", "train_dataset", ".", "add_field", "(", "\"word\"", ",", "train_data", "[", "'word'", "]", ")", "\n", "val_dataset", ".", "add_field", "(", "\"word\"", ",", "val_data", "[", "'word'", "]", ")", "\n", "test_dataset", ".", "add_field", "(", "\"word\"", ",", "test_data", "[", "'word'", "]", ")", "\n", "\n", "# only for lexicalized PCFGs.", "\n", "try", ":", "\n", "            ", "val_dataset", ".", "add_field", "(", "\"head\"", ",", "val_data", "[", "'head'", "]", ",", "padder", "=", "None", ",", "ignore_type", "=", "True", ")", "\n", "test_dataset", ".", "add_field", "(", "\"head\"", ",", "test_data", "[", "'head'", "]", ",", "padder", "=", "None", ",", "ignore_type", "=", "True", ")", "\n", "val_dataset", ".", "set_target", "(", "'head'", ")", "\n", "test_dataset", ".", "set_target", "(", "\"head\"", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"No head\"", ")", "\n", "pass", "\n", "\n", "", "train_dataset", ".", "add_field", "(", "\"gold_tree\"", ",", "train_data", "[", "'gold_tree'", "]", ",", "padder", "=", "None", ",", "ignore_type", "=", "True", ")", "\n", "val_dataset", ".", "add_field", "(", "\"gold_tree\"", ",", "val_data", "[", "'gold_tree'", "]", ",", "padder", "=", "None", ",", "ignore_type", "=", "True", ")", "\n", "test_dataset", ".", "add_field", "(", "\"gold_tree\"", ",", "test_data", "[", "'gold_tree'", "]", ",", "padder", "=", "None", ",", "ignore_type", "=", "True", ")", "\n", "train_dataset", ".", "add_seq_len", "(", "field_name", "=", "\"word\"", ",", "new_field_name", "=", "\"seq_len\"", ")", "\n", "val_dataset", ".", "add_seq_len", "(", "field_name", "=", "\"word\"", ",", "new_field_name", "=", "\"seq_len\"", ")", "\n", "test_dataset", ".", "add_seq_len", "(", "field_name", "=", "\"word\"", ",", "new_field_name", "=", "\"seq_len\"", ")", "\n", "\n", "\n", "def", "clean_word", "(", "words", ")", ":", "\n", "            ", "import", "re", "\n", "def", "clean_number", "(", "w", ")", ":", "\n", "                ", "new_w", "=", "re", ".", "sub", "(", "'[0-9]{1,}([,.]?[0-9]*)*'", ",", "'N'", ",", "w", ")", "\n", "return", "new_w", "\n", "", "return", "[", "clean_number", "(", "word", ".", "lower", "(", ")", ")", "for", "word", "in", "words", "]", "\n", "\n", "\n", "", "train_dataset", ".", "apply_field", "(", "clean_word", ",", "\"word\"", ",", "\"word\"", ")", "\n", "val_dataset", ".", "apply_field", "(", "clean_word", ",", "\"word\"", ",", "\"word\"", ")", "\n", "test_dataset", ".", "apply_field", "(", "clean_word", ",", "\"word\"", ",", "\"word\"", ")", "\n", "\n", "word_vocab", ".", "from_dataset", "(", "train_dataset", ",", "field_name", "=", "\"word\"", ")", "\n", "word_vocab", ".", "index_dataset", "(", "train_dataset", ",", "field_name", "=", "\"word\"", ")", "\n", "word_vocab", ".", "index_dataset", "(", "val_dataset", ",", "field_name", "=", "\"word\"", ")", "\n", "word_vocab", ".", "index_dataset", "(", "test_dataset", ",", "field_name", "=", "\"word\"", ")", "\n", "\n", "#drop length 1 sentences. As S->NT, while NT cannot generate single word in our", "\n", "#settings (only preterminals generate words", "\n", "self", ".", "val_dataset", "=", "val_dataset", ".", "drop", "(", "lambda", "x", ":", "x", "[", "'seq_len'", "]", "==", "1", ",", "inplace", "=", "True", ")", "\n", "self", ".", "train_dataset", "=", "train_dataset", ".", "drop", "(", "lambda", "x", ":", "x", "[", "'seq_len'", "]", "==", "1", ",", "inplace", "=", "True", ")", "\n", "self", ".", "test_dataset", "=", "test_dataset", ".", "drop", "(", "lambda", "x", ":", "x", "[", "'seq_len'", "]", "==", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "word_vocab", "=", "word_vocab", "\n", "self", ".", "train_dataset", ".", "set_input", "(", "\"word\"", ",", "\"seq_len\"", ")", "\n", "self", ".", "val_dataset", ".", "set_input", "(", "\"word\"", ",", "\"seq_len\"", ")", "\n", "self", ".", "test_dataset", ".", "set_input", "(", "\"word\"", ",", "\"seq_len\"", ")", "\n", "\n", "self", ".", "val_dataset", ".", "set_target", "(", "'gold_tree'", ")", "\n", "self", ".", "test_dataset", ".", "set_target", "(", "\"gold_tree\"", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.data_module.DataModule.train_dataloader": [[87, 92], ["data_module.DataModule.train_dataset.drop", "data_module.ByLengthSampler", "fastNLP.core.batch.DataSetIter"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop"], ["", "def", "train_dataloader", "(", "self", ",", "max_len", "=", "40", ")", ":", "\n", "        ", "args", "=", "self", ".", "hparams", ".", "train", "\n", "train_dataset", "=", "self", ".", "train_dataset", ".", "drop", "(", "lambda", "x", ":", "x", "[", "'seq_len'", "]", ">", "max_len", ",", "inplace", "=", "False", ")", "\n", "train_sampler", "=", "ByLengthSampler", "(", "dataset", "=", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "return", "DataSetIter", "(", "dataset", "=", "train_dataset", ",", "batch_sampler", "=", "train_sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.data_module.DataModule.val_dataloader": [[93, 107], ["fastNLP.core.sampler.ConstantTokenNumSampler", "fastNLP.core.batch.DataSetIter", "data_module.ByLengthSampler", "fastNLP.core.batch.DataSetIter", "data_module.DataModule.val_dataset.get_field"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_field"], ["", "@", "property", "\n", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "hparams", ".", "test", "\n", "if", "args", ".", "sampler", "==", "'token'", ":", "\n", "            ", "test_sampler", "=", "ConstantTokenNumSampler", "(", "seq_len", "=", "self", ".", "val_dataset", ".", "get_field", "(", "\"seq_len\"", ")", ".", "content", ",", "\n", "max_token", "=", "args", ".", "max_tokens", ",", "num_bucket", "=", "args", ".", "bucket", ")", "\n", "return", "DataSetIter", "(", "self", ".", "val_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "None", ",", "as_numpy", "=", "False", ",", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ",", "timeout", "=", "0", ",", "worker_init_fn", "=", "None", ",", "\n", "batch_sampler", "=", "test_sampler", ")", "\n", "", "elif", "args", ".", "sampler", "==", "'batch'", ":", "\n", "            ", "train_sampler", "=", "ByLengthSampler", "(", "dataset", "=", "self", ".", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "return", "DataSetIter", "(", "dataset", "=", "self", ".", "val_dataset", ",", "batch_sampler", "=", "train_sampler", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.data_module.DataModule.test_dataloader": [[109, 124], ["fastNLP.core.sampler.ConstantTokenNumSampler", "fastNLP.core.batch.DataSetIter", "data_module.ByLengthSampler", "fastNLP.core.batch.DataSetIter", "test_dataset.get_field"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_field"], ["", "", "@", "property", "\n", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "hparams", ".", "test", "\n", "test_dataset", "=", "self", ".", "test_dataset", "\n", "if", "args", ".", "sampler", "==", "'token'", ":", "\n", "            ", "test_sampler", "=", "ConstantTokenNumSampler", "(", "seq_len", "=", "test_dataset", ".", "get_field", "(", "\"seq_len\"", ")", ".", "content", ",", "\n", "max_token", "=", "args", ".", "max_tokens", ",", "num_bucket", "=", "args", ".", "bucket", ")", "\n", "return", "DataSetIter", "(", "self", ".", "test_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "None", ",", "as_numpy", "=", "False", ",", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ",", "timeout", "=", "0", ",", "worker_init_fn", "=", "None", ",", "\n", "batch_sampler", "=", "test_sampler", ")", "\n", "", "elif", "args", ".", "sampler", "==", "'batch'", ":", "\n", "            ", "train_sampler", "=", "ByLengthSampler", "(", "dataset", "=", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "return", "DataSetIter", "(", "dataset", "=", "test_dataset", ",", "batch_sampler", "=", "train_sampler", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.data_module.ByLengthSampler.__init__": [[130, 144], ["collections.defaultdict", "enumerate", "data_module.ByLengthSampler.group.items", "data_module.ByLengthSampler.group[].append", "range", "len", "list", "data_module.ByLengthSampler.__init__.chunks"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", "=", "4", ")", ":", "\n", "        ", "self", ".", "group", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "seq_lens", "=", "dataset", "[", "'seq_len'", "]", "\n", "for", "i", ",", "length", "in", "enumerate", "(", "self", ".", "seq_lens", ")", ":", "\n", "            ", "self", ".", "group", "[", "length", "]", ".", "append", "(", "i", ")", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "total", "=", "[", "]", "\n", "def", "chunks", "(", "lst", ",", "n", ")", ":", "\n", "            ", "\"\"\"Yield successive n-sized chunks from lst.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lst", ")", ",", "n", ")", ":", "\n", "                ", "yield", "lst", "[", "i", ":", "i", "+", "n", "]", "\n", "", "", "for", "idx", ",", "lst", "in", "self", ".", "group", ".", "items", "(", ")", ":", "\n", "            ", "total", "=", "total", "+", "list", "(", "chunks", "(", "lst", ",", "self", ".", "batch_size", ")", ")", "\n", "", "self", ".", "total", "=", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.data_module.ByLengthSampler.__iter__": [[145, 149], ["random.shuffle"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "self", ".", "total", ")", "\n", "for", "batch", "in", "self", ".", "total", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.data_module.ByLengthSampler.__len__": [[150, 152], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.Metric.__lt__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "score", "<", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.Metric.__le__": [[12, 14], ["None"], "methods", ["None"], ["", "def", "__le__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "score", "<=", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.Metric.__ge__": [[15, 17], ["None"], "methods", ["None"], ["", "def", "__ge__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "score", ">=", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.Metric.__gt__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "score", ">", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.Metric.score": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "score", "(", "self", ")", ":", "\n", "        ", "return", "-", "1e9", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.UF1.__init__": [[26, 36], ["torch.device", "object.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", "=", "1e-8", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ":", "\n", "        ", "super", "(", "UF1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f1", "=", "0.0", "\n", "self", ".", "evalb", "=", "0.0", "\n", "self", ".", "n", "=", "0.0", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "tp", "=", "0.0", "\n", "self", ".", "fp", "=", "0.0", "\n", "self", ".", "fn", "=", "0.0", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.UF1.__call__": [[38, 78], ["zip", "list", "list", "list", "list", "list", "set", "set", "set.intersection", "len", "max", "filter", "filter", "filter", "filter", "map", "float", "float", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "__call__", "(", "self", ",", "preds", ",", "golds", ")", ":", "\n", "        ", "for", "pred", ",", "gold", "in", "zip", "(", "preds", ",", "golds", ")", ":", "\n", "# in the case of sentence length=1", "\n", "            ", "if", "len", "(", "pred", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "length", "=", "max", "(", "gold", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "1", "]", "\n", "#removing the trival span", "\n", "gold", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "+", "1", "!=", "x", "[", "1", "]", ",", "gold", ")", ")", "\n", "pred", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "+", "1", "!=", "x", "[", "1", "]", ",", "pred", ")", ")", "\n", "#remove the entire sentence span.", "\n", "gold", "=", "list", "(", "filter", "(", "lambda", "x", ":", "not", "(", "x", "[", "0", "]", "==", "0", "and", "x", "[", "1", "]", "==", "length", ")", ",", "gold", ")", ")", "\n", "pred", "=", "list", "(", "filter", "(", "lambda", "x", ":", "not", "(", "x", "[", "0", "]", "==", "0", "and", "x", "[", "1", "]", "==", "length", ")", ",", "pred", ")", ")", "\n", "#remove label.", "\n", "gold", "=", "[", "g", "[", ":", "2", "]", "for", "g", "in", "gold", "]", "\n", "pred", "=", "[", "p", "[", ":", "2", "]", "for", "p", "in", "pred", "]", "\n", "gold", "=", "list", "(", "map", "(", "tuple", ",", "gold", ")", ")", "\n", "#corpus f1", "\n", "for", "span", "in", "pred", ":", "\n", "                ", "if", "span", "in", "gold", ":", "\n", "                    ", "self", ".", "tp", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "fp", "+=", "1", "\n", "", "", "for", "span", "in", "gold", ":", "\n", "                ", "if", "span", "not", "in", "pred", ":", "\n", "                    ", "self", ".", "fn", "+=", "1", "\n", "\n", "#sentence f1", "\n", "#remove duplicated span.", "\n", "", "", "gold", "=", "set", "(", "gold", ")", "\n", "pred", "=", "set", "(", "pred", ")", "\n", "overlap", "=", "pred", ".", "intersection", "(", "gold", ")", "\n", "prec", "=", "float", "(", "len", "(", "overlap", ")", ")", "/", "(", "len", "(", "pred", ")", "+", "self", ".", "eps", ")", "\n", "reca", "=", "float", "(", "len", "(", "overlap", ")", ")", "/", "(", "len", "(", "gold", ")", "+", "self", ".", "eps", ")", "\n", "if", "len", "(", "gold", ")", "==", "0", ":", "\n", "                ", "reca", "=", "1.", "\n", "if", "len", "(", "pred", ")", "==", "0", ":", "\n", "                    ", "prec", "=", "1.", "\n", "", "", "f1", "=", "2", "*", "prec", "*", "reca", "/", "(", "prec", "+", "reca", "+", "1e-8", ")", "\n", "self", ".", "f1", "+=", "f1", "\n", "self", ".", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.UF1.sentence_uf1": [[79, 82], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "sentence_uf1", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "f1", "/", "self", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.UF1.corpus_uf1": [[83, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "corpus_uf1", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "tp", "==", "0", "and", "self", ".", "fp", "==", "0", ":", "\n", "            ", "return", "0", "\n", "\n", "", "prec", "=", "self", ".", "tp", "/", "(", "self", ".", "tp", "+", "self", ".", "fp", ")", "\n", "recall", "=", "self", ".", "tp", "/", "(", "self", ".", "tp", "+", "self", ".", "fn", ")", "\n", "corpus_f1", "=", "2", "*", "prec", "*", "recall", "/", "(", "prec", "+", "recall", ")", "if", "prec", "+", "recall", ">", "0", "else", "0.", "\n", "return", "corpus_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.UF1.score": [[93, 96], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "score", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sentence_uf1", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.UF1.__repr__": [[97, 100], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "f\"Sentence F1: {self.sentence_uf1:6.2%} Corpus F1: {self.corpus_uf1:6.2%} \"", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.UAS.__init__": [[102, 110], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "Metric", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "direct_correct", "=", "0.0", "\n", "self", ".", "undirect_correct", "=", "0.0", "\n", "self", ".", "total_sentence", "=", "0.0", "\n", "self", ".", "correct_root", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.UAS.score": [[111, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "score", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "direct_correct", "/", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.UAS.__call__": [[115, 136], ["zip", "len", "len", "len", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "def", "__call__", "(", "self", ",", "predicted_arcs", ",", "gold_arcs", ")", ":", "\n", "\n", "        ", "for", "pred", ",", "gold", "in", "zip", "(", "predicted_arcs", ",", "gold_arcs", ")", ":", "\n", "            ", "assert", "len", "(", "pred", ")", "==", "len", "(", "gold", ")", "\n", "\n", "if", "len", "(", "pred", ")", ">", "0", ":", "\n", "                ", "self", ".", "total_sentence", "+=", "1.", "\n", "\n", "", "for", "(", "head", ",", "child", ")", "in", "pred", ":", "\n", "                ", "if", "gold", "[", "int", "(", "child", ")", "]", "==", "int", "(", "head", ")", "+", "1", ":", "\n", "                    ", "self", ".", "direct_correct", "+=", "1.", "\n", "self", ".", "undirect_correct", "+=", "1.", "\n", "if", "int", "(", "head", ")", "+", "1", "==", "0", ":", "\n", "                        ", "self", ".", "correct_root", "+=", "1.", "\n", "\n", "", "", "elif", "gold", "[", "int", "(", "head", ")", "]", "==", "int", "(", "child", ")", "+", "1", ":", "\n", "                    ", "self", ".", "undirect_correct", "+=", "1.", "\n", "\n", "\n", "\n", "", "self", ".", "total", "+=", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.UAS.__repr__": [[138, 140], ["None"], "methods", ["None"], ["", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"UDAS: {}, UUAS:{}, root:{} \"", ".", "format", "(", "self", ".", "score", ",", "self", ".", "undirect_correct", "/", "self", ".", "total", ",", "self", ".", "correct_root", "/", "self", ".", "total_sentence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.LossMetric.__init__": [[143, 150], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "Metric", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "total_likelihood", "=", "0.0", "\n", "self", ".", "total_kl", "=", "0.0", "\n", "self", ".", "calling_time", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.LossMetric.__call__": [[152, 156], ["likelihood.detach_().sum", "likelihood.detach_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "likelihood", ")", ":", "\n", "        ", "self", ".", "calling_time", "+=", "1", "\n", "self", ".", "total", "+=", "likelihood", ".", "shape", "[", "0", "]", "\n", "self", ".", "total_likelihood", "+=", "likelihood", ".", "detach_", "(", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.LossMetric.avg_loss": [[157, 160], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg_loss", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_likelihood", "/", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.LossMetric.__repr__": [[162, 164], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"avg likelihood: {} kl: {}, total likelihood:{}, n:{}\"", ".", "format", "(", "self", ".", "avg_likelihood", ",", "self", ".", "avg_kl", ",", "self", ".", "total_likelihood", ",", "self", ".", "total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.LossMetric.score": [[165, 168], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "score", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "avg_likelihood", "+", "self", ".", "avg_kl", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.LikelihoodMetric.__init__": [[171, 177], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "Metric", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "total_likelihood", "=", "0.0", "\n", "self", ".", "total_word", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.LikelihoodMetric.score": [[178, 181], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "score", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "avg_likelihood", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.LikelihoodMetric.__call__": [[183, 189], ["likelihood.detach_().sum", "lens.sum", "likelihood.detach_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "likelihood", ",", "lens", ")", ":", "\n", "\n", "        ", "self", ".", "total", "+=", "likelihood", ".", "shape", "[", "0", "]", "\n", "self", ".", "total_likelihood", "+=", "likelihood", ".", "detach_", "(", ")", ".", "sum", "(", ")", "\n", "# Follow Yoon Kim", "\n", "self", ".", "total_word", "+=", "(", "lens", ".", "sum", "(", ")", "+", "lens", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.LikelihoodMetric.avg_likelihood": [[190, 193], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg_likelihood", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_likelihood", "/", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.LikelihoodMetric.perplexity": [[195, 198], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "perplexity", "(", "self", ")", ":", "\n", "        ", "return", "(", "-", "self", ".", "total_likelihood", "/", "self", ".", "total_word", ")", ".", "exp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.metric.LikelihoodMetric.__repr__": [[199, 201], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"avg likelihood: {}, perp. :{}\"", ".", "format", "(", "self", ".", "avg_likelihood", ",", "self", ".", "perplexity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.LoaderWrapper.__init__": [[7, 11], ["iter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loader", ",", "device", ")", ":", "\n", "        ", "self", ".", "loader", "=", "loader", "\n", "self", ".", "loader_iter", "=", "iter", "(", "loader", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.LoaderWrapper.__iter__": [[12, 14], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.LoaderWrapper.__next__": [[15, 24], ["next", "batch_x.items", "batch_y.items", "type", "key.to", "type", "key.to"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "batch_x", ",", "batch_y", "=", "next", "(", "self", ".", "loader_iter", ")", "\n", "for", "name", ",", "key", "in", "batch_x", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "key", ")", "is", "torch", ".", "Tensor", ":", "\n", "                ", "batch_x", "[", "name", "]", "=", "key", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "for", "name", ",", "key", "in", "batch_y", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "key", ")", "is", "torch", ".", "Tensor", ":", "\n", "                ", "batch_y", "[", "name", "]", "=", "key", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "return", "batch_x", ",", "batch_y", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.LoaderWrapper.__getitem__": [[25, 27], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "loader", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.LoaderWrapper.__len__": [[30, 32], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.__init__": [[39, 47], ["loader_wrapper.LoaderWrapper", "torch.cuda.Stream", "iter", "loader_wrapper.DataPrefetcher.preload"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.preload"], ["    ", "def", "__init__", "(", "self", ",", "loader", ",", "device", ",", "init", "=", "False", ")", ":", "\n", "        ", "self", ".", "loader", "=", "LoaderWrapper", "(", "loader", ",", "device", ")", "\n", "self", ".", "iter", "=", "None", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "\n", "if", "init", ":", "\n", "            ", "self", ".", "iter", "=", "iter", "(", "self", ".", "loader", ")", "\n", "self", ".", "preload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.__len__": [[48, 50], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.preload": [[51, 59], ["loader_wrapper.DataPrefetcher.next"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "next_batch", "=", "next", "(", "self", ".", "iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "next_batch", "=", "None", "\n", "return", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "self", ".", "next_batch", "=", "[", "i", ".", "cuda", "(", "non_blocking", "=", "True", ")", "if", "isinstance", "(", "i", ",", "torch", ".", "Tensor", ")", "else", "i", "for", "i", "in", "self", ".", "next_batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next": [[60, 65], ["torch.cuda.current_stream().wait_stream", "loader_wrapper.DataPrefetcher.preload", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.preload"], ["", "", "def", "next", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "batch", "=", "self", ".", "next_batch", "\n", "self", ".", "preload", "(", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.__iter__": [[66, 74], ["iter", "loader_wrapper.DataPrefetcher.preload", "loader_wrapper.DataPrefetcher.next"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.preload", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "=", "iter", "(", "self", ".", "loader", ")", "\n", "self", ".", "preload", "(", ")", "\n", "while", "True", ":", "\n", "            ", "batch", "=", "self", ".", "next", "(", ")", "\n", "if", "batch", "is", "None", ":", "\n", "                ", "break", "\n", "", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.util.get_model": [[11, 37], ["parser.model.NeuralPCFG().to", "parser.model.CompoundPCFG().to", "parser.model.NeuralPCFG", "parser.model.TNPCFG().to", "parser.model.CompoundPCFG", "parser.model.NeuralLPCFG().to", "parser.model.TNPCFG", "parser.model.NeuralBLPCFG().to", "parser.model.NeuralLPCFG", "parser.model.FastTNPCFG().to", "parser.model.NeuralBLPCFG", "parser.model.FastNBLPCFG().to", "parser.model.FastTNPCFG", "parser.model.FastNBLPCFG"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], ["def", "get_model", "(", "args", ",", "dataset", ")", ":", "\n", "    ", "if", "args", ".", "model_name", "==", "'NPCFG'", ":", "\n", "        ", "return", "NeuralPCFG", "(", "args", ",", "dataset", ")", ".", "to", "(", "dataset", ".", "device", ")", "\n", "\n", "", "elif", "args", ".", "model_name", "==", "'CPCFG'", ":", "\n", "        ", "return", "CompoundPCFG", "(", "args", ",", "dataset", ")", ".", "to", "(", "dataset", ".", "device", ")", "\n", "\n", "", "elif", "args", ".", "model_name", "==", "'TNPCFG'", ":", "\n", "        ", "return", "TNPCFG", "(", "args", ",", "dataset", ")", ".", "to", "(", "dataset", ".", "device", ")", "\n", "\n", "\n", "", "elif", "args", ".", "model_name", "==", "'NLPCFG'", ":", "\n", "        ", "return", "NeuralLPCFG", "(", "args", ",", "dataset", ")", ".", "to", "(", "dataset", ".", "device", ")", "\n", "\n", "", "elif", "args", ".", "model_name", "==", "'NBLPCFG'", ":", "\n", "        ", "return", "NeuralBLPCFG", "(", "args", ",", "dataset", ")", ".", "to", "(", "dataset", ".", "device", ")", "\n", "\n", "", "elif", "args", ".", "model_name", "==", "'FastTNPCFG'", ":", "\n", "        ", "return", "FastTNPCFG", "(", "args", ",", "dataset", ")", ".", "to", "(", "dataset", ".", "device", ")", "\n", "\n", "", "elif", "args", ".", "model_name", "==", "'FastNBLPCFG'", ":", "\n", "        ", "return", "FastNBLPCFG", "(", "args", ",", "dataset", ")", ".", "to", "(", "dataset", ".", "device", ")", "\n", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.util.get_optimizer": [[39, 46], ["torch.optim.Adam", "torch.optim.AdamW", "model.parameters", "model.parameters"], "function", ["None"], ["", "", "def", "get_optimizer", "(", "args", ",", "model", ")", ":", "\n", "    ", "if", "args", ".", "name", "==", "'adam'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "args", ".", "mu", ",", "args", ".", "nu", ")", ")", "\n", "", "elif", "args", ".", "name", "==", "'adamw'", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "AdamW", "(", "params", "=", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "args", ".", "mu", ",", "args", ".", "nu", ")", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.util.get_logger": [[47, 64], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.info", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], ["", "", "def", "get_logger", "(", "args", ",", "log_name", "=", "'train'", ",", "path", "=", "None", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(levelname)s - %(message)s'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "", "handler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", "if", "path", "is", "None", "else", "path", ",", "'{}.log'", ".", "format", "(", "log_name", ")", ")", ",", "'w'", ")", "\n", "handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "console", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "logger", ".", "info", "(", "args", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.util.create_save_path": [[66, 85], ["os.path.exists", "shutil.copyfile", "os.makedirs", "distutils.dir_util.copy_tree", "time.strftime", "print", "print", "os.makedirs", "time.localtime", "Path", "time.time"], "function", ["None"], ["", "def", "create_save_path", "(", "args", ")", ":", "\n", "    ", "model_name", "=", "args", ".", "model", ".", "model_name", "\n", "suffix", "=", "\"/{}\"", ".", "format", "(", "model_name", ")", "+", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H_%M_%S\"", ",", "\n", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "from", "pathlib", "import", "Path", "\n", "saved_name", "=", "Path", "(", "args", ".", "save_dir", ")", ".", "stem", "+", "suffix", "\n", "args", ".", "save_dir", "=", "args", ".", "save_dir", "+", "suffix", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "print", "(", "f'Warning: the folder {args.save_dir} exists.'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Creating {}'", ".", "format", "(", "args", ".", "save_dir", ")", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "# save the config file and model file.", "\n", "", "import", "shutil", "\n", "shutil", ".", "copyfile", "(", "args", ".", "conf", ",", "args", ".", "save_dir", "+", "\"/config.yaml\"", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "save_dir", "+", "\"/parser\"", ")", "\n", "copy_tree", "(", "\"parser/\"", ",", "args", ".", "save_dir", "+", "\"/parser\"", ")", "\n", "return", "saved_name", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.FastBLPCFG.__init__": [[8, 10], ["pcfgs.PCFG_base.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FastBLPCFG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.FastBLPCFG.loss": [[11, 13], ["blpcfg.FastBLPCFG._inside"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside"], ["", "def", "loss", "(", "self", ",", "rules", ",", "lens", ")", ":", "\n", "        ", "return", "self", ".", "_inside", "(", "rules", ",", "lens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.FastBLPCFG.decode": [[14, 41], ["torch.enable_grad", "inherent.new_zeros().requires_grad_", "inherent.new_zeros().requires_grad_", "Inside.apply", "Inside.apply.sum().backward", "blpcfg.FastBLPCFG._cky_zero_order", "inherent.new_zeros", "inherent.new_zeros", "Inside.apply.sum", "marginals.detach", "range"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.lexicalizedPCFG.backward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base._cky_zero_order"], ["", "@", "torch", ".", "enable_grad", "(", ")", "\n", "def", "decode", "(", "self", ",", "rules", ",", "lens", ",", "mbr", "=", "True", ",", "viterbi", "=", "False", ",", "eval_dep", "=", "False", ")", ":", "\n", "        ", "noninherent_word", "=", "rules", "[", "'noninherent_word'", "]", "\n", "root", "=", "rules", "[", "'root'", "]", "\n", "noninherent_symbol", "=", "rules", "[", "'noninherent_symbol'", "]", "\n", "head", "=", "rules", "[", "'head'", "]", "\n", "inherent", "=", "rules", "[", "'inherent'", "]", "\n", "b", ",", "n", "=", "root", ".", "shape", "[", ":", "2", "]", "\n", "arc_indicator", "=", "inherent", ".", "new_zeros", "(", "b", ",", "n", ",", "n", ")", ".", "requires_grad_", "(", "True", ")", "\n", "span_indicator", "=", "inherent", ".", "new_zeros", "(", "b", ",", "n", "+", "1", ",", "n", "+", "1", ")", ".", "requires_grad_", "(", "True", ")", "\n", "logZ", "=", "Inside", ".", "apply", "(", "noninherent_word", ",", "noninherent_symbol", ",", "inherent", ",", "root", ",", "head", ",", "span_indicator", ",", "arc_indicator", ",", "\n", "lens", ")", "\n", "logZ", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "\n", "# to avoid some trivial corner cases.", "\n", "if", "n", ">=", "3", ":", "\n", "            ", "marginals", "=", "span_indicator", ".", "grad", "\n", "prediction", "=", "self", ".", "_cky_zero_order", "(", "marginals", ".", "detach", "(", ")", ",", "lens", ")", "\n", "", "else", ":", "\n", "            ", "prediction", "=", "[", "[", "]", "for", "_", "in", "range", "(", "b", ")", "]", "\n", "\n", "# TODO:", "\n", "", "if", "eval_dep", ":", "\n", "            ", "pass", "\n", "\n", "", "return", "{", "'partition'", ":", "logZ", ",", "\n", "'prediction'", ":", "prediction", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.FastBLPCFG._inside": [[42, 56], ["torch.enable_grad", "inherent.new_zeros", "inherent.new_zeros", "Inside.apply"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply"], ["", "@", "torch", ".", "enable_grad", "(", ")", "\n", "def", "_inside", "(", "self", ",", "rules", ",", "lens", ",", "**", "kwargs", ")", ":", "\n", "# noninherent_word, noninherent_symbol, inherent, root, head", "\n", "        ", "noninherent_word", "=", "rules", "[", "'noninherent_word'", "]", "\n", "root", "=", "rules", "[", "'root'", "]", "\n", "noninherent_symbol", "=", "rules", "[", "'noninherent_symbol'", "]", "\n", "head", "=", "rules", "[", "'head'", "]", "\n", "inherent", "=", "rules", "[", "'inherent'", "]", "\n", "b", ",", "n", "=", "root", ".", "shape", "[", ":", "2", "]", "\n", "arc_indicator", "=", "inherent", ".", "new_zeros", "(", "b", ",", "n", ",", "n", ")", "\n", "span_indicator", "=", "inherent", ".", "new_zeros", "(", "b", ",", "n", "+", "1", ",", "n", "+", "1", ")", "\n", "logZ", "=", "Inside", ".", "apply", "(", "noninherent_word", ",", "noninherent_symbol", ",", "inherent", ",", "root", ",", "head", ",", "arc_indicator", ",", "span_indicator", ",", "\n", "lens", ")", "\n", "return", "{", "'partition'", ":", "logZ", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.Inside.forward": [[59, 335], ["slice", "slice", "head.new_zeros().fill_", "head.new_zeros().fill_", "head.new_zeros().fill_", "head.new_zeros().fill_", "noninherent_symbol[].contiguous", "inherent[].contiguous", "inherent[].sum().unsqueeze().expand", "range", "s[].clamp().log_().add_().add_", "torch.einsum.logsumexp", "torch.einsum.logsumexp.new_zeros", "torch.einsum.logsumexp.new_zeros", "torch.einsum.logsumexp.new_zeros", "torch.einsum.logsumexp.new_zeros", "torch.einsum.logsumexp.new_zeros", "torch.einsum.logsumexp.new_zeros", "torch.einsum.logsumexp.new_zeros", "torch.einsum.logsumexp.new_zeros", "torch.einsum.logsumexp.new_zeros", "torch.einsum.logsumexp.new_zeros", "torch.einsum.logsumexp.new_zeros", "torch.einsum.logsumexp.new_zeros", "range", "torch.cat.sum().unsqueeze().expand", "torch.cat", "torch.cat.sum", "torch.cat", "torch.cat.sum", "Operation1.apply", "torch.einsum", "torch.einsum", "torch.einsum", "fn.stripe", "fn.stripe", "fn.stripe_with_headword", "fn.stripe_with_headword", "blpcfg.Inside.forward.merge"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_with_headword", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_with_headword"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "noninherent_word", ",", "noninherent_symbol", ",", "inherent", ",", "root", ",", "head", ",", "span_indicator", ",", "arc_indicator", ",", "lens", ")", ":", "\n", "        ", "H", "=", "root", ".", "shape", "[", "1", "]", "\n", "NT", "=", "root", ".", "shape", "[", "-", "1", "]", "\n", "S", "=", "noninherent_symbol", ".", "shape", "[", "1", "]", "\n", "r", "=", "inherent", ".", "shape", "[", "-", "1", "]", "\n", "B", "=", "root", ".", "shape", "[", "0", "]", "\n", "N", "=", "H", "+", "1", "\n", "nt_slice", "=", "slice", "(", "0", ",", "NT", ")", "\n", "t_slice", "=", "slice", "(", "NT", ",", "S", ")", "\n", "# s = head.new_zeros(B, N, N, H, NT).fill_(0)", "\n", "s_normalizer", "=", "head", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "H", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "s_noninherent", "=", "head", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "r", ",", "2", ")", ".", "fill_", "(", "0", ")", "\n", "s", "=", "head", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "NT", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "s_inherent", "=", "head", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "r", ")", ".", "fill_", "(", "0", ")", "\n", "noninherent_nt", "=", "noninherent_symbol", "[", ":", ",", "nt_slice", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "inherent_nt", "=", "inherent", "[", ":", ",", "nt_slice", "]", ".", "contiguous", "(", ")", "\n", "LEFT", "=", "0", "\n", "RIGHT", "=", "1", "\n", "\n", "s_noninherent", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", "torch", ".", "arange", "(", "H", ")", "+", "1", ",", ":", "]", "=", "(", "noninherent_symbol", "[", ":", ",", "t_slice", ",", ":", ",", ":", "]", ".", "sum", "(", "\n", "1", ")", "+", "1e-9", ")", ".", "log", "(", ")", "[", ":", ",", "None", ",", "...", "]", "+", "noninherent_word", "[", "...", ",", "None", "]", "\n", "s_inherent", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", "torch", ".", "arange", "(", "H", ")", "+", "1", ",", "torch", ".", "arange", "(", "H", ")", "]", "=", "inherent", "[", ":", ",", "t_slice", ",", ":", "]", ".", "sum", "(", "\n", "-", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "H", ",", "-", "1", ")", "\n", "s_normalizer", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", "torch", ".", "arange", "(", "H", ")", "+", "1", ",", "torch", ".", "arange", "(", "H", ")", "]", "=", "0", "\n", "\n", "# calculation of s_{i,j}^{A,p} [Term A1 (left) + Term A2 (right)] in Equation (3) of the paper.", "\n", "\n", "def", "merge", "(", "left", ",", "right", ",", "closed_left", ",", "closed_right", ",", "head_rule", ")", ":", "\n", "            ", "headed", "=", "Operation1", ".", "apply", "(", "left", ",", "right", ",", "closed_left", ",", "closed_right", ")", "\n", "headed_normalizer", "=", "headed", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "headed", "=", "(", "headed", "-", "headed_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", "\n", "new_headed", "=", "torch", ".", "einsum", "(", "'bnhr,bnhmr->bnhm'", ",", "headed", ",", "head_rule", ")", "\n", "return", "headed_normalizer", ",", "new_headed", "\n", "\n", "", "def", "contract_qC", "(", "s", ",", "rule_word", ",", "rule_symbol", ",", "normalizer", ")", ":", "\n", "            ", "'''\n            contract the head word and nt of the noninherent span.\n            :param s:  inside score of shape (b, n, h, NT)\n            :param rule_symbol: of shape (b, n, r, D)  [log P(H->C,D)] noninherent nt\n            :param rule_word: of shape (b, n, h, r)  [log P(H->beta)] beta\n            :return: (b, n, r)\n            '''", "\n", "# b, n, nt, r, 2", "\n", "tmp", "=", "torch", ".", "einsum", "(", "'bnhm, bmrd->bnhrd'", ",", "s", ",", "rule_symbol", ")", "\n", "tmp", "=", "(", "tmp", ".", "clamp", "(", "min", "=", "1e-9", ")", ")", ".", "log", "(", ")", "+", "normalizer", "[", "...", ",", "None", ",", "None", "]", "\n", "return", "(", "tmp", "+", "rule_word", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "logsumexp", "(", "2", ")", "\n", "\n", "# Term D-1-1 in the paper", "\n", "", "@", "checkpoint", "\n", "def", "contract_B", "(", "s", ",", "rule", ")", ":", "\n", "            ", "'''\n            :param s: inside score of shape (b, n, h, NT)\n            :param rule: shape (b, NT, r),  log p(H -> B) inherent nt.\n            :return: shape (b, n, h, r)\n            '''", "\n", "return", "torch", ".", "einsum", "(", "\"bnhm, bmr -> bnhr\"", ",", "s", ",", "rule", ")", "\n", "\n", "", "for", "w", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "            ", "n", "=", "N", "-", "w", "\n", "# Equation (8).  Term D1-1 \\times Term D1-2", "\n", "# (b, n, w, H, r)", "\n", "# right = stripe_with_headword(s_inherent, n, w - 1, (1, w), 0)", "\n", "# (b, n, w, r)", "\n", "closed_left", "=", "stripe", "(", "s_noninherent", "[", "...", ",", "LEFT", "]", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "closed_right", "=", "stripe", "(", "s_noninherent", "[", "...", ",", "RIGHT", "]", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "left_normalizer", "=", "stripe_with_headword", "(", "s_normalizer", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "right_normalizer", "=", "stripe_with_headword", "(", "s_normalizer", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "# (b, n, H, A)", "\n", "headed_normalizer", ",", "headed", "=", "merge", "(", "\n", "(", "stripe_with_headword", "(", "s_inherent", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", ".", "clamp", "(", "min", "=", "1e-9", ")", ")", ".", "log_", "(", ")", ".", "add_", "(", "left_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "\n", "(", "stripe_with_headword", "(", "s_inherent", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", ".", "clamp", "(", "min", "=", "1e-9", ")", ")", ".", "log_", "(", ")", ".", "add_", "(", "\n", "right_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "\n", "closed_left", ",", "\n", "closed_right", ",", "\n", "stripe_grammar_rules", "(", "head", ",", "n", ",", "w", ")", ")", "\n", "\n", "diagonal_copy_with_headword", "(", "s", ",", "headed", ",", "w", ")", "\n", "diagonal_copy_with_headword", "(", "s_normalizer", ",", "headed_normalizer", ",", "w", ")", "\n", "\n", "if", "w", "<", "N", "-", "1", ":", "\n", "# calculating Term D1-2 as described in the paper.", "\n", "                ", "headed_closed", "=", "contract_qC", "(", "headed", ",", "stripe_grammar_rules", "(", "noninherent_word", ",", "n", ",", "w", ")", ",", "noninherent_nt", ",", "\n", "headed_normalizer", ")", "\n", "# calculating Term D1-1 as described in the paper.", "\n", "headed", "=", "contract_B", "(", "headed", ",", "inherent_nt", ")", "\n", "# caching them.", "\n", "diagonal_copy_", "(", "s_noninherent", ",", "headed_closed", ",", "w", ")", "\n", "diagonal_copy_with_headword", "(", "s_inherent", ",", "headed", ",", "w", ")", "\n", "\n", "", "", "tmp", "=", "(", "s", "[", "torch", ".", "arange", "(", "B", ")", ",", "0", ",", "lens", "]", ".", "clamp", "(", "min", "=", "1e-9", ")", ")", ".", "log_", "(", ")", ".", "add_", "(", "headed_normalizer", ".", "squeeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "add_", "(", "root", ")", "\n", "logZ", "=", "(", "tmp", ")", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "\n", "grad_noninherent_word", "=", "logZ", ".", "new_zeros", "(", "*", "noninherent_word", ".", "shape", ")", "\n", "grad_noninherent_symbol", "=", "logZ", ".", "new_zeros", "(", "*", "noninherent_symbol", ".", "shape", ")", "\n", "grad_inherent", "=", "logZ", ".", "new_zeros", "(", "*", "inherent", ".", "shape", ")", "\n", "grad_head", "=", "logZ", ".", "new_zeros", "(", "*", "head", ".", "shape", ")", "\n", "\n", "grad_s", "=", "logZ", ".", "new_zeros", "(", "*", "s", ".", "shape", ")", "\n", "grad_span_headword_left", "=", "logZ", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "r", ")", "\n", "grad_span_headword_right", "=", "logZ", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "r", ")", "\n", "\n", "grad_s_noninherent_l", "=", "logZ", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "r", ")", "\n", "grad_s_noninherent_r", "=", "logZ", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "r", ")", "\n", "grad_s_inherent", "=", "logZ", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "r", ")", "\n", "\n", "# marginals.", "\n", "grad_arc", "=", "logZ", ".", "new_zeros", "(", "B", ",", "H", ",", "H", ")", "\n", "grad_span", "=", "logZ", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ")", "\n", "\n", "grad_root", "=", "(", "tmp", "-", "logZ", "[", "...", ",", "None", ",", "None", "]", ")", ".", "exp_", "(", ")", "\n", "grad_s", "[", "torch", ".", "arange", "(", "B", ")", ",", "0", ",", "lens", "]", "=", "(", "1", "/", "(", "s", "[", "torch", ".", "arange", "(", "B", ")", ",", "0", ",", "lens", "]", ".", "clamp", "(", "min", "=", "1e-9", ")", ")", ")", "*", "grad_root", "\n", "\n", "\n", "# aaa = ((1 / (headed + 1e-9)) * grad_root).sum(1)", "\n", "\n", "for", "w", "in", "range", "(", "N", "-", "1", ",", "1", ",", "-", "1", ")", ":", "\n", "            ", "n", "=", "N", "-", "w", "\n", "if", "w", "<", "N", "-", "1", ":", "\n", "# parent gradient..", "\n", "                ", "tmp_grd_s_inherent", "=", "diagonal_with_headword", "(", "grad_s_inherent", ",", "w", ")", "\n", "tmp_grd_s_noninherent", "=", "torch", ".", "cat", "(", "\n", "[", "diagonal", "(", "grad_s_noninherent_l", ",", "w", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "diagonal", "(", "grad_s_noninherent_r", ",", "w", ")", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Backward Contract_B", "\n", "headed", "=", "diagonal_with_headword", "(", "s", ",", "w", ")", "\n", "grad_inherent", "[", ":", ",", "nt_slice", "]", "+=", "torch", ".", "einsum", "(", "'bnhr, bnhm -> bmr'", ",", "tmp_grd_s_inherent", ",", "headed", ")", "\n", "tmp_grd_headed", "=", "torch", ".", "einsum", "(", "'bnhr, bmr->bnhm'", ",", "tmp_grd_s_inherent", ",", "inherent_nt", ")", "\n", "\n", "# compute arc marginal.", "\n", "# Forward Contract Q_C", "\n", "headed_normalizer", "=", "diagonal_with_headword", "(", "s_normalizer", ",", "w", ")", "\n", "rule", "=", "stripe_grammar_rules", "(", "noninherent_word", ",", "n", ",", "w", ")", "\n", "tmp_bnhrd_1", "=", "torch", ".", "einsum", "(", "'bnhm, bmrd->bnhrd'", ",", "headed", ",", "noninherent_nt", ")", "\n", "tmp_bnhrd_2", "=", "(", "tmp_bnhrd_1", ".", "clamp", "(", "min", "=", "1e-9", ")", ")", ".", "log_", "(", ")", ".", "add_", "(", "headed_normalizer", "[", "...", ",", "None", ",", "None", "]", ")", "\n", "tmp", "=", "tmp_bnhrd_2", "+", "rule", ".", "unsqueeze", "(", "-", "1", ")", "\n", "final", "=", "(", "tmp", ")", ".", "logsumexp", "(", "2", ")", "\n", "percent", "=", "(", "tmp", ".", "sub_", "(", "final", ".", "unsqueeze", "(", "2", ")", ")", ")", ".", "exp_", "(", ")", "\n", "\n", "# Backward Contract Q_C", "\n", "grd_tmp", "=", "percent", "*", "tmp_grd_s_noninherent", "[", ":", ",", ":", ",", "None", ",", "...", "]", "\n", "grd_rule_word", "=", "grd_tmp", ".", "sum", "(", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                    ", "grad_noninherent_word", "[", ":", ",", "i", ":", "i", "+", "w", "]", "+=", "grd_rule_word", "[", ":", ",", "i", "]", "\n", "\n", "", "tmptmp", "=", "(", "1", "/", "tmp_bnhrd_1", ".", "clamp", "(", "min", "=", "1e-9", ")", ")", "*", "grd_tmp", "\n", "grad_noninherent_symbol", "[", ":", ",", "nt_slice", "]", "+=", "torch", ".", "einsum", "(", "'bnhrd, bnhm -> bmrd'", ",", "tmptmp", ",", "headed", ")", "\n", "tmp_grd_headed", "+=", "torch", ".", "einsum", "(", "'bnhrd, bmrd -> bnhm'", ",", "tmptmp", ",", "noninherent_nt", ")", "\n", "diagonal_with_headword_add_", "(", "grad_s", ",", "tmp_grd_headed", ",", "w", ")", "\n", "\n", "tmp_grd", "=", "torch", ".", "cat", "(", "[", "diagonal", "(", "grad_span_headword_left", ",", "w", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "diagonal", "(", "grad_span_headword_right", ",", "w", ")", ".", "unsqueeze", "(", "-", "1", ")", "]", "\n", ",", "dim", "=", "-", "1", ")", "\n", "arc_grd", "=", "torch", ".", "einsum", "(", "'bnhrd, bncrd -> bnch'", ",", "tmp_grd", ",", "percent", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                    ", "grad_arc", "[", ":", ",", "i", ":", "i", "+", "w", "]", "+=", "arc_grd", "[", ":", ",", "i", "]", "\n", "\n", "# span_grd = arc_grd.sum([-1, -2])", "\n", "# diagonal_copy_(grad_span, span_grd, w)", "\n", "\n", "# prepare.", "\n", "", "", "closed_left", "=", "stripe", "(", "s_noninherent", "[", "...", ",", "LEFT", "]", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "closed_right", "=", "stripe", "(", "s_noninherent", "[", "...", ",", "RIGHT", "]", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "left_normalizer", "=", "stripe_with_headword", "(", "s_normalizer", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "right_normalizer", "=", "stripe_with_headword", "(", "s_normalizer", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "\n", "left", "=", "(", "stripe_with_headword", "(", "s_inherent", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "+", "1e-9", ")", ".", "log_", "(", ")", ".", "add_", "(", "\n", "left_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "right", "=", "(", "stripe_with_headword", "(", "s_inherent", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "+", "1e-9", ")", ".", "log_", "(", ")", ".", "add_", "(", "\n", "right_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "# merge", "\n", "# forward pass. Prepare for all necessary quantities that are needed in the backward pass.", "\n", "headed", "=", "left", ".", "new_zeros", "(", "B", ",", "n", ",", "w", "-", "1", ",", "w", ",", "r", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "for", "i", "in", "range", "(", "w", "-", "1", ")", ":", "\n", "                ", "headed", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", "]", "=", "(", "left", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", "]", "+", "closed_right", "[", ":", ",", ":", ",", "i", ",", "None", ",", ":", "]", ")", "\n", "headed", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", "]", "=", "(", "right", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", "]", "+", "closed_left", "[", ":", ",", ":", ",", "i", ",", "None", ",", ":", "]", ")", "\n", "\n", "", "left_shape", "=", "left", ".", "shape", "\n", "closed_left_shape", "=", "closed_left", ".", "shape", "\n", "del", "left", ",", "right", ",", "closed_left", ",", "closed_right", "\n", "\n", "final_headed", "=", "headed", ".", "logsumexp", "(", "2", ")", "\n", "percent", "=", "(", "headed", "-", "final_headed", ".", "unsqueeze", "(", "2", ")", ")", ".", "exp_", "(", ")", "\n", "headed", "=", "final_headed", "\n", "del", "final_headed", "\n", "\n", "headed_normalizer", "=", "headed", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "headed", "=", "(", "headed", "-", "headed_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", "\n", "## Backward pass. Estimate gradients.", "\n", "parent_grad_s", "=", "diagonal_with_headword", "(", "grad_s", ",", "w", ")", "\n", "\n", "# Backward head.", "\n", "tmp", "=", "torch", ".", "einsum", "(", "'bnhm, bnhr -> bnhmr'", ",", "parent_grad_s", ",", "headed", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "grad_head", "[", ":", ",", "i", ":", "i", "+", "w", ",", "...", "]", "+=", "tmp", "[", ":", ",", "i", "]", "\n", "\n", "# Backward headed.", "\n", "", "rule", "=", "stripe_grammar_rules", "(", "head", ",", "n", ",", "w", ")", "\n", "tmp", "=", "torch", ".", "einsum", "(", "'bnhm, bnhmr, bnhr, bnwhr -> bnwhr'", ",", "parent_grad_s", ",", "rule", ",", "headed", ",", "percent", ")", "\n", "\n", "del", "rule", "\n", "\n", "# print(\"!!!\", tmp)", "\n", "# tmp = tmp.scatter_(-1, index.unsqueeze(-1), (tmp.gather(-1, index.unsqueeze(-1)).squeeze(-1) - tmp.sum(-1)).unsqueeze(-1))", "\n", "# print(\"!!\", tmp)", "\n", "# tmp = tmp[:, :, None, :] * percent", "\n", "# compute span marginal", "\n", "\n", "tmp_span_grd", "=", "tmp", ".", "sum", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "stripe_add_", "(", "grad_span", ",", "tmp_span_grd", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "stripe_add_", "(", "grad_span", ",", "tmp_span_grd", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "del", "tmp_span_grd", "\n", "\n", "grad_left", "=", "s", ".", "new_zeros", "(", "*", "left_shape", ")", "\n", "grad_right", "=", "s", ".", "new_zeros", "(", "*", "left_shape", ")", "\n", "grad_closed_left", "=", "s", ".", "new_zeros", "(", "*", "closed_left_shape", ")", "\n", "grad_closed_right", "=", "s", ".", "new_zeros", "(", "*", "closed_left_shape", ")", "\n", "\n", "for", "i", "in", "range", "(", "w", "-", "1", ")", ":", "\n", "                ", "grad_left", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", "]", "=", "tmp", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", "]", "\n", "grad_closed_right", "[", ":", ",", ":", ",", "i", ",", "]", "=", "(", "tmp", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", "]", ")", ".", "sum", "(", "2", ")", "\n", "grad_right", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", "]", "=", "tmp", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", "]", "\n", "grad_closed_left", "[", ":", ",", ":", ",", "i", ",", "]", "=", "tmp", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", "]", ".", "sum", "(", "2", ")", "\n", "# grad_span_headword[:, :, i, :i + 1, :] = tmp[:, :, i, :i + 1]", "\n", "stripe_need_dad_add_", "(", "grad_span_headword_left", ",", "tmp", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", "]", ",", "n", ",", "w", "-", "(", "i", "+", "1", ")", ",", "start", "=", "0", ",", "end", "=", "i", "+", "1", ",", "\n", "headstart", "=", "i", "+", "1", ")", "\n", "stripe_need_dad_add_", "(", "grad_span_headword_right", ",", "tmp", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", "]", ",", "n", ",", "i", "+", "1", ",", "start", "=", "i", "+", "1", ",", "end", "=", "w", ",", "\n", "headstart", "=", "0", ")", "\n", "\n", "", "stripe_add_", "(", "grad_s_noninherent_l", ",", "grad_closed_left", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "stripe_add_", "(", "grad_s_noninherent_r", ",", "grad_closed_right", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "\n", "stripe_with_headword_add_", "(", "grad_s_inherent", ",", "\n", "(", "1", "/", "(", "stripe_with_headword", "(", "s_inherent", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", ".", "clamp", "(", "min", "=", "1e-9", ")", ")", ")", ".", "mul_", "(", "grad_left", ")", ",", "\n", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", "\n", ")", "\n", "\n", "stripe_with_headword_add_", "(", "grad_s_inherent", ",", "\n", "(", "1", "/", "(", "stripe_with_headword", "(", "s_inherent", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", ".", "clamp", "(", "min", "=", "1e-9", ")", ")", ")", ".", "mul_", "(", "grad_right", ")", ",", "\n", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", "\n", ")", "\n", "\n", "del", "grad_left", ",", "grad_right", ",", "tmp", ",", "grad_closed_left", ",", "grad_closed_right", "\n", "\n", "", "parent_grd", "=", "grad_s_inherent", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", "torch", ".", "arange", "(", "H", ")", "+", "1", ",", "torch", ".", "arange", "(", "H", ")", "]", "\n", "\n", "grad_inherent", "[", ":", ",", "t_slice", "]", "=", "parent_grd", ".", "sum", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "*", "grad_inherent", "[", ":", ",", "t_slice", "]", ".", "shape", ")", "\n", "\n", "parent_grd", "=", "torch", ".", "cat", "(", "[", "grad_s_noninherent_l", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", "torch", ".", "arange", "(", "H", ")", "+", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "grad_s_noninherent_r", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", "torch", ".", "arange", "(", "H", ")", "+", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "grad_noninherent_word", "+=", "parent_grd", ".", "sum", "(", "-", "1", ")", "\n", "\n", "grad_noninherent_symbol", "[", ":", ",", "t_slice", "]", "=", "(", "(", "1", "/", "(", "noninherent_symbol", "[", ":", ",", "t_slice", ",", ":", ",", ":", "]", ".", "sum", "(", "\n", "1", ")", ")", ".", "clamp", "(", "min", "=", "1e-9", ")", ")", "[", ":", ",", "None", ",", "...", "]", "*", "parent_grd", ")", ".", "sum", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "*", "grad_noninherent_symbol", "[", ":", ",", "t_slice", "]", ".", "shape", ")", "\n", "\n", "tmp_grd", "=", "torch", ".", "cat", "(", "[", "diagonal", "(", "grad_span_headword_left", ",", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "diagonal", "(", "grad_span_headword_right", ",", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "]", "\n", ",", "dim", "=", "-", "1", ")", "\n", "\n", "grad_arc", "+=", "tmp_grd", ".", "sum", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "\n", "# grad_inherent,grad_noninherent_symbol, grad_noninherent_word, grad_span, grad_head, grad_arc", "\n", "\n", "ctx", ".", "grad_inherent", "=", "grad_inherent", "\n", "ctx", ".", "grad_noninherent_symbol", "=", "grad_noninherent_symbol", "\n", "ctx", ".", "grad_noninherent_word", "=", "grad_noninherent_word", "\n", "ctx", ".", "grad_head", "=", "grad_head", "\n", "ctx", ".", "grad_root", "=", "grad_root", "\n", "ctx", ".", "arc_marginal", "=", "grad_arc", "\n", "ctx", ".", "span_marginal", "=", "grad_span", "\n", "return", "logZ", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.Inside.backward": [[336, 350], ["grad_output.max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "multiplier", "=", "grad_output", ".", "max", "(", ")", "\n", "# unary, rule, root", "\n", "# noninherent_word, noninherent_symbol, inherent, root, head, span_indicator, arc_indicator", "\n", "# print(ctx.span_marginal)", "\n", "return", "ctx", ".", "grad_noninherent_word", "*", "multiplier", ",", "ctx", ".", "grad_noninherent_symbol", "*", "multiplier", ",", "ctx", ".", "grad_inherent", "*", "multiplier", ",", "ctx", ".", "grad_root", "*", "multiplier", ",", "ctx", ".", "grad_head", "*", "multiplier", ",", "ctx", ".", "span_marginal", ",", "ctx", ".", "arc_marginal", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.Operation1.forward": [[354, 370], ["left.new_zeros().fill_", "range", "left.new_zeros().fill_.logsumexp", "left.new_zeros", "left.new_zeros().fill_.logsumexp.unsqueeze"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "left", ",", "right", ",", "left_closed", ",", "right_closed", ")", ":", "\n", "        ", "batch", ",", "n", ",", "w", "=", "left", ".", "shape", "[", ":", "3", "]", "\n", "r", "=", "left", ".", "shape", "[", "-", "1", "]", "\n", "headed", "=", "left", ".", "new_zeros", "(", "batch", ",", "n", ",", "w", ",", "w", "+", "1", ",", "r", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "for", "i", "in", "range", "(", "w", ")", ":", "\n", "            ", "headed", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", "]", "=", "(", "left", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", "]", "+", "right_closed", "[", ":", ",", ":", ",", "i", ",", "None", ",", ":", "]", ")", "\n", "headed", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", "]", "=", "(", "right", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", "]", "+", "left_closed", "[", ":", ",", ":", ",", "i", ",", "None", ",", ":", "]", ")", "\n", "", "ctx", ".", "shape1", "=", "left", ".", "shape", "\n", "ctx", ".", "shape2", "=", "left_closed", ".", "shape", "\n", "del", "left", ",", "right", ",", "left_closed", ",", "right_closed", "\n", "# max_ = headed.max(2)[0].unsqueeze(2)", "\n", "# final_headed = (headed - max_).exp_().sum(2).log_() + max_.squeeze(2)", "\n", "final_headed", "=", "headed", ".", "logsumexp", "(", "2", ")", "\n", "ctx", ".", "percent", "=", "(", "headed", "-", "final_headed", ".", "unsqueeze", "(", "2", ")", ")", ".", "exp_", "(", ")", "\n", "return", "final_headed", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.Operation1.backward": [[371, 389], ["grad_output.new_zeros", "grad_output.new_zeros", "grad_output.new_zeros", "grad_output.new_zeros", "range", "tmp[].sum", "tmp[].sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "shape1", "=", "ctx", ".", "shape1", "\n", "shape2", "=", "ctx", ".", "shape2", "\n", "percent", "=", "ctx", ".", "percent", "\n", "tmp", "=", "grad_output", "[", ":", ",", ":", ",", "None", ",", ":", "]", "*", "percent", "\n", "del", "ctx", ".", "percent", "\n", "grad_left", "=", "grad_output", ".", "new_zeros", "(", "*", "shape1", ")", "\n", "grad_right", "=", "grad_output", ".", "new_zeros", "(", "*", "shape1", ")", "\n", "grad_closed_left", "=", "grad_output", ".", "new_zeros", "(", "*", "shape2", ")", "\n", "grad_closed_right", "=", "grad_output", ".", "new_zeros", "(", "*", "shape2", ")", "\n", "w", "=", "shape1", "[", "2", "]", "\n", "for", "i", "in", "range", "(", "w", ")", ":", "\n", "            ", "grad_left", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", "]", "=", "tmp", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", "]", "\n", "grad_closed_right", "[", ":", ",", ":", ",", "i", ",", "]", "=", "(", "tmp", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", "]", ")", ".", "sum", "(", "2", ")", "\n", "grad_right", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", "]", "=", "tmp", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", "]", "\n", "grad_closed_left", "[", ":", ",", ":", ",", "i", ",", "]", "=", "tmp", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", "]", ".", "sum", "(", "2", ")", "\n", "", "return", "grad_left", ",", "grad_right", ",", "grad_closed_left", ",", "grad_closed_right", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.BLPCFG._inside": [[396, 510], ["torch.enable_grad", "slice", "slice", "head.new_zeros().fill_", "head.new_zeros().fill_", "head.new_zeros().fill_", "noninherent[].contiguous", "inherent[].contiguous", "noninherent[].logsumexp", "inherent[].logsumexp().unsqueeze().expand", "head.new_zeros().requires_grad_", "range", "torch.stack().logsumexp", "fn.stripe_with_headword", "fn.stripe_with_headword", "fn.stripe", "fn.stripe", "blpcfg.BLPCFG._inside.merge"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_with_headword", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_with_headword", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe"], ["    ", "@", "torch", ".", "enable_grad", "(", ")", "\n", "def", "_inside", "(", "self", ",", "rules", ",", "lens", ",", "decoding", "=", "False", ")", ":", "\n", "\n", "\n", "        ", "noninherent", "=", "rules", "[", "'noninherent'", "]", "\n", "inherent", "=", "rules", "[", "'inherent'", "]", "\n", "root", "=", "rules", "[", "'root'", "]", "\n", "head", "=", "rules", "[", "'head'", "]", "\n", "\n", "# B, D, H, NT, S, _ = rule.shape", "\n", "# B: batch_size D: direction, H: head word \\alpha, NT: head-nt, S: NT+T", "\n", "H", "=", "root", ".", "shape", "[", "1", "]", "\n", "NT", "=", "root", ".", "shape", "[", "-", "1", "]", "\n", "S", "=", "noninherent", ".", "shape", "[", "2", "]", "\n", "r", "=", "inherent", ".", "shape", "[", "-", "1", "]", "\n", "B", "=", "root", ".", "shape", "[", "0", "]", "\n", "N", "=", "H", "+", "1", "\n", "nt_slice", "=", "slice", "(", "0", ",", "NT", ")", "\n", "t_slice", "=", "slice", "(", "NT", ",", "S", ")", "\n", "\n", "s", "=", "head", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "NT", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "\n", "s_noninherent", "=", "head", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "r", ",", "2", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "s_inherent", "=", "head", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "r", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "noninherent_nt", "=", "noninherent", "[", ":", ",", ":", ",", "nt_slice", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "inherent_nt", "=", "inherent", "[", ":", ",", "nt_slice", "]", ".", "contiguous", "(", ")", "\n", "\n", "LEFT", "=", "0", "\n", "RIGHT", "=", "1", "\n", "\n", "s_noninherent", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", "torch", ".", "arange", "(", "H", ")", "+", "1", ",", ":", "]", "=", "noninherent", "[", ":", ",", ":", ",", "t_slice", ",", ":", ",", ":", "]", ".", "logsumexp", "(", "-", "3", ")", "\n", "\n", "s_inherent", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", "torch", ".", "arange", "(", "H", ")", "+", "1", ",", "torch", ".", "arange", "(", "H", ")", "]", "=", "inherent", "[", ":", ",", "t_slice", ",", ":", "]", ".", "logsumexp", "(", "-", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "H", ",", "-", "1", ")", "\n", "\n", "span_indicator", "=", "head", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ")", ".", "requires_grad_", "(", "decoding", ")", "\n", "\n", "# calculation of s_{i,j}^{A,p} [Term A1 (left) + Term A2 (right)] in Equation (3) of the paper.", "\n", "@", "checkpoint", "\n", "def", "merge", "(", "left", ",", "right", ",", "closed_left", ",", "closed_right", ",", "head_rule", ")", ":", "\n", "            ", "'''\n            :param left: (b, n, w, h, r)\n            :param right: (b, n, w, h, r)\n            :param closed_left: (b, n, w, r)\n            :param closed_right: (b, n, w, r)\n            :param head_rule: (b, n, w, h, NT, r)\n            :return: inside score (b, n, h, NT)\n            '''", "\n", "# contract w firstly", "\n", "# 0=left, 1=right", "\n", "left", "=", "(", "(", "left", "+", "closed_right", "[", "...", ",", "None", ",", ":", "]", ")", ".", "logsumexp", "(", "-", "3", ")", "[", "...", ",", "None", ",", ":", "]", ")", "\n", "right", "=", "(", "(", "right", "+", "closed_left", "[", "...", ",", "None", ",", ":", "]", ")", ".", "logsumexp", "(", "-", "3", ")", "[", "...", ",", "None", ",", ":", "]", ")", "\n", "# combine left and right case.", "\n", "headed", "=", "torch", ".", "stack", "(", "[", "left", ",", "right", "]", ")", ".", "logsumexp", "(", "[", "0", "]", ")", "\n", "# contract tensor-rank r.", "\n", "return", "(", "headed", "+", "head_rule", ")", ".", "logsumexp", "(", "-", "1", ")", "\n", "\n", "# Term D1-2 in the paper.", "\n", "", "def", "contract_qC", "(", "s", ",", "rule", ")", ":", "\n", "            ", "'''\n            contract the head word and nt of the noninherent span.\n            :param s:  inside score of shape (b, n, h, NT)\n            :param rules: of shape (b, n, h, NT, r, D)  [ log p( H-> beta) + log P(H->C,D) ] noninherent nt + beta\n            :return: (b, n, r)\n            '''", "\n", "return", "(", "s", "[", "...", ",", "None", ",", "None", "]", "+", "rule", ")", ".", "logsumexp", "(", "[", "-", "3", ",", "-", "4", "]", ")", "\n", "\n", "# Term D-1-1 in the paper", "\n", "", "def", "contract_B", "(", "s", ",", "rule", ")", ":", "\n", "            ", "'''\n            :param s: inside score of shape (b, n, h, NT)\n            :param rule: shape (b, NT, r),  log p(H -> B) inherent nt.\n            :return: shape (b, n, h, r)\n            '''", "\n", "return", "(", "s", "[", "...", ",", "None", "]", "+", "rule", "[", ":", ",", "None", ",", "None", ",", "...", "]", ")", ".", "logsumexp", "(", "-", "2", ")", "\n", "\n", "\n", "", "for", "w", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "            ", "n", "=", "N", "-", "w", "\n", "\n", "# Equation (8).  Term D1-1 \\times Term D1-2", "\n", "# (b, n, w, H, r)", "\n", "left", "=", "stripe_with_headword", "(", "s_inherent", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "right", "=", "stripe_with_headword", "(", "s_inherent", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "# (b, n, w, r)", "\n", "closed_left", "=", "stripe", "(", "s_noninherent", "[", "...", ",", "LEFT", "]", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "closed_right", "=", "stripe", "(", "s_noninherent", "[", "...", ",", "RIGHT", "]", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "# (b, n, H, A)", "\n", "headed", "=", "merge", "(", "left", ".", "clone", "(", ")", ",", "right", ".", "clone", "(", ")", ",", "closed_left", ".", "clone", "(", ")", ",", "closed_right", ".", "clone", "(", ")", ",", "stripe_grammar_rules", "(", "head", ",", "n", ",", "w", ")", ")", "\n", "headed", "=", "headed", "+", "span_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", ",", "None", ",", "None", "]", "\n", "diagonal_copy_with_headword", "(", "s", ",", "headed", ",", "w", ")", "\n", "\n", "if", "w", "<", "N", "-", "1", ":", "\n", "# calculating Term D1-2 as described in the paper.", "\n", "                ", "headed_closed", "=", "contract_qC", "(", "headed", ",", "stripe_grammar_rules", "(", "noninherent_nt", ",", "n", ",", "w", ")", ")", "\n", "# calculating Term D1-1 as described in the paper.", "\n", "headed", "=", "contract_B", "(", "headed", ",", "inherent_nt", ")", "\n", "# caching them.", "\n", "diagonal_copy_", "(", "s_noninherent", ",", "headed_closed", ",", "w", ")", "\n", "diagonal_copy_with_headword", "(", "s_inherent", ",", "headed", ",", "w", ")", "\n", "\n", "", "", "logZ", "=", "(", "s", "[", "torch", ".", "arange", "(", "B", ")", ",", "0", ",", "lens", "]", "+", "root", ")", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "\n", "\n", "if", "not", "decoding", ":", "\n", "            ", "if", "lens", ".", "max", "(", ")", ">", "1", ":", "\n", "                ", "return", "{", "'partition'", ":", "logZ", "}", "\n", "", "else", ":", "\n", "                ", "return", "{", "'partition'", ":", "0", "}", "\n", "\n", "", "", "else", ":", "\n", "            ", "return", "{", "'prediction'", ":", "self", ".", "_get_prediction", "(", "logZ", ",", "span_indicator", ",", "lens", ",", "mbr", "=", "True", ")", ",", "\n", "'partition'", ":", "logZ", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.BLPCFG.loss": [[512, 514], ["blpcfg.BLPCFG._inside"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside"], ["", "", "def", "loss", "(", "self", ",", "rules", ",", "lens", ")", ":", "\n", "        ", "return", "self", ".", "_inside", "(", "rules", ",", "lens", ",", "decoding", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.BLPCFG.decode": [[515, 523], ["blpcfg.BLPCFG._inside", "blpcfg.BLPCFG._inside", "blpcfg.BLPCFG._mbr_arc"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.BLPCFG._mbr_arc"], ["", "def", "decode", "(", "self", ",", "rules", ",", "lens", ",", "mbr", "=", "True", ",", "viterbi", "=", "False", ",", "eval_dep", "=", "False", ")", ":", "\n", "# It seems no way but to recover the origin tensor and perform the Eisner-Satta alg.", "\n", "        ", "if", "not", "eval_dep", ":", "\n", "            ", "return", "self", ".", "_inside", "(", "rules", ",", "lens", ",", "decoding", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "prediction", "=", "self", ".", "_inside", "(", "rules", ",", "lens", ",", "decoding", "=", "True", ")", "\n", "prediction", "[", "'prediction_arc'", "]", "=", "self", ".", "_mbr_arc", "(", "rules", ",", "lens", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.blpcfg.BLPCFG._mbr_arc": [[532, 649], ["slice", "slice", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.enable_grad", "torch.zeros().requires_grad_", "root.detach().requires_grad_.detach().requires_grad_.detach().requires_grad_", "inherent[].logsumexp().unsqueeze().expand", "range", "logZ.logsumexp.logsumexp.logsumexp", "logZ.logsumexp.logsumexp.sum().backward", "root_attach.sum.sum.sum", "torch.zeros().fill_", "arc_marginals.transpose", "blpcfg.BLPCFG._eisner", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "noninherent[].logsumexp().unsqueeze", "arc_indicator[].unsqueeze", "noninherent[].logsumexp().unsqueeze", "arc_indicator[].unsqueeze", "torch.stack().logsumexp", "fn.diagonal_copy_with_headword", "torch.zeros", "root.detach().requires_grad_.detach().requires_grad_.detach", "inherent[].logsumexp().unsqueeze", "torch.zeros().fill_", "fn.stripe_with_headword", "fn.stripe_with_headword", "fn.stripe_with_headword", "fn.stripe_with_headword", "blpcfg.BLPCFG._mbr_arc.reduce_1"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.lexicalizedPCFG.backward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base._eisner", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.diagonal_copy_with_headword", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_with_headword", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_with_headword", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_with_headword", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_with_headword"], ["", "", "def", "_mbr_arc", "(", "self", ",", "rules", ",", "lens", ")", ":", "\n", "        ", "noninherent", "=", "rules", "[", "'noninherent'", "]", "\n", "inherent", "=", "rules", "[", "'inherent'", "]", "\n", "root", "=", "rules", "[", "'root'", "]", "\n", "head", "=", "rules", "[", "'head'", "]", "\n", "# B, D, H, NT, S, _ = rule.shape", "\n", "H", "=", "root", ".", "shape", "[", "1", "]", "\n", "NT", "=", "root", ".", "shape", "[", "-", "1", "]", "\n", "S", "=", "noninherent", ".", "shape", "[", "2", "]", "\n", "r", "=", "inherent", ".", "shape", "[", "-", "1", "]", "\n", "B", "=", "root", ".", "shape", "[", "0", "]", "\n", "N", "=", "H", "+", "1", "\n", "# print(NT, N, S)", "\n", "nt_slice", "=", "slice", "(", "0", ",", "NT", ")", "\n", "t_slice", "=", "slice", "(", "NT", ",", "S", ")", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "s_noninherent_left", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "r", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "s_noninherent_right", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "r", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "s_inherent", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "r", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "arc_indicator", "=", "torch", ".", "zeros", "(", "B", ",", "H", ",", "H", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", ".", "requires_grad_", "(", "True", ")", "\n", "root", "=", "root", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "LEFT", "=", "0", "\n", "\n", "RIGHT", "=", "1", "\n", "s_noninherent_left", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", "torch", ".", "arange", "(", "H", ")", "+", "1", ",", ":", ",", ":", "]", "=", "noninherent", "[", ":", ",", ":", ",", "t_slice", ",", ":", ",", "LEFT", "]", ".", "logsumexp", "(", "\n", "-", "2", ")", ".", "unsqueeze", "(", "-", "2", ")", "+", "arc_indicator", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", ":", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "s_noninherent_right", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", "torch", ".", "arange", "(", "H", ")", "+", "1", ",", ":", ",", ":", "]", "=", "noninherent", "[", ":", ",", ":", ",", "t_slice", ",", ":", ",", "\n", "RIGHT", "]", ".", "logsumexp", "(", "-", "2", ")", ".", "unsqueeze", "(", "-", "2", ")", "+", "arc_indicator", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", ":", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "s_inherent", "[", ":", ",", "torch", ".", "arange", "(", "H", ")", ",", "torch", ".", "arange", "(", "H", ")", "+", "1", ",", "torch", ".", "arange", "(", "H", ")", "]", "=", "inherent", "[", ":", ",", "t_slice", ",", ":", "]", ".", "logsumexp", "(", "\n", "-", "2", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "H", ",", "-", "1", ")", "\n", "\n", "@", "checkpoint", "\n", "def", "reduce_1", "(", "left", ",", "closed_left", ",", "right", ",", "closed_right", ")", ":", "\n", "                ", "left", "=", "(", "left", "[", ":", ",", ":", ",", ":", ",", ":", "]", "+", "closed_right", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "]", ")", ".", "logsumexp", "(", "[", "2", "]", ")", "\n", "right", "=", "(", "right", "[", ":", ",", ":", ",", ":", ",", ":", "]", "+", "closed_left", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "]", ")", ".", "logsumexp", "(", "[", "2", "]", ")", "\n", "return", "torch", ".", "stack", "(", "[", "left", ",", "right", "]", ")", ".", "logsumexp", "(", "[", "0", "]", ")", "\n", "\n", "", "@", "checkpoint", "\n", "def", "reduce_2", "(", "a", ",", "b", ")", ":", "\n", "                ", "return", "(", "a", "+", "b", ")", ".", "logsumexp", "(", "-", "1", ")", "\n", "\n", "", "@", "checkpoint", "\n", "def", "reduce_3", "(", "a", ",", "b", ")", ":", "\n", "                ", "return", "(", "a", "+", "b", ")", ".", "logsumexp", "(", "-", "2", ")", "\n", "\n", "\n", "", "for", "w", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "                ", "n", "=", "N", "-", "w", "\n", "\n", "if", "w", "==", "2", ":", "\n", "                    ", "headed", "=", "torch", ".", "zeros", "(", "B", ",", "n", ",", "w", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "headed", "[", ":", ",", ":", ",", "LEFT", ",", "...", "]", "=", "(", "\n", "s_noninherent_right", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "torch", ".", "arange", "(", "n", ")", "+", "2", ",", "torch", ".", "arange", "(", "n", ")", ",", "None", ",", ":", "]", "+", "s_inherent", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "torch", ".", "arange", "(", "n", ")", ",", "None", ",", ":", "]", "+", "head", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", ":", ",", ":", "]", "\n", ")", ".", "logsumexp", "(", "-", "1", ")", "\n", "\n", "headed", "[", ":", ",", ":", ",", "RIGHT", ",", "...", "]", "=", "(", "\n", "s_noninherent_left", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "None", ",", ":", "]", "+", "s_inherent", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "torch", ".", "arange", "(", "n", ")", "+", "2", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "None", ",", ":", "]", "+", "head", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", ":", ",", ":", "]", "\n", ")", ".", "logsumexp", "(", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "left", "=", "stripe_with_headword", "(", "s_inherent", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "right", "=", "stripe_with_headword", "(", "s_inherent", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "closed_left", "=", "stripe_with_headword", "(", "s_noninherent_left", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "closed_right", "=", "stripe_with_headword", "(", "s_noninherent_right", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "# b, n, w, w+1,", "\n", "headed_tmp", "=", "reduce_1", "(", "left", ".", "clone", "(", ")", ",", "closed_left", ".", "clone", "(", ")", ",", "right", ".", "clone", "(", ")", ",", "\n", "closed_right", ".", "clone", "(", ")", ")", "\n", "headed", "=", "reduce_2", "(", "headed_tmp", "[", "...", ",", "None", ",", ":", "]", ",", "stripe_grammar_rules", "(", "head", ",", "n", ",", "w", ")", ")", "\n", "\n", "# headed = headed + span_indicator[:, torch.arange(n), torch.arange(n) + w, None, None]", "\n", "", "diagonal_copy_with_headword", "(", "s", ",", "headed", ",", "w", ")", "\n", "\n", "if", "w", "<", "N", "-", "1", ":", "\n", "\n", "# headed: (batch, n, child, nt)", "\n", "# noninherent; (batch, child, nt, r, direction),  after stripe->  (batch, n, child, nt, r, direction)", "\n", "# arcindicator: (batch, n, child, HEAD)", "\n", "#  (batch, n, child, 1, nt, 1, 1) + (batch, n, child, 1, nt, r, direction) -> (batch, n, child, 1, r, direction) [marginalzie over nt]", "\n", "#  + (batch, n, child, HEAD, 1, 1)", "\n", "#  -> (batch, n, child, HEAD,, r, direction) -> (batch, n, HEAD, r, direction) [marginalize over the non-inherenting span's head index]", "\n", "                    ", "@", "checkpoint", "\n", "def", "reduce22", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "# marginalize nt first", "\n", "                        ", "tmp", "=", "(", "a", "[", ":", ",", ":", ",", ":", ",", "None", ",", ":", ",", "None", ",", "None", "]", "+", "b", "[", ":", ",", ":", ",", ":", ",", "None", ",", ":", ",", ":", ",", ":", "]", ")", ".", "logsumexp", "(", "-", "3", ")", "\n", "return", "(", "tmp", "+", "c", "[", "...", ",", "None", ",", "None", "]", ")", ".", "logsumexp", "(", "2", ")", "\n", "\n", "", "headed_closed", "=", "reduce22", "(", "headed", ",", "\n", "stripe_grammar_rules", "(", "noninherent", "[", ":", ",", ":", ",", "nt_slice", ",", ":", ",", "]", ",", "n", ",", "w", ")", ",", "\n", "stripe_grammar_rules", "(", "arc_indicator", ",", "n", ",", "w", ")", "\n", ")", "\n", "headed", "=", "reduce_3", "(", "headed", "[", "...", ",", "None", "]", ",", "inherent", "[", ":", ",", "None", ",", "None", ",", "nt_slice", "]", ")", "\n", "diagonal_copy_", "(", "s_noninherent_left", ",", "headed_closed", "[", "...", ",", "0", "]", ",", "w", ")", "\n", "diagonal_copy_", "(", "s_noninherent_right", ",", "headed_closed", "[", "...", ",", "1", "]", ",", "w", ")", "\n", "diagonal_copy_with_headword", "(", "s_inherent", ",", "headed", ",", "w", ")", "\n", "\n", "", "", "logZ", "=", "(", "s", "[", ":", ",", "0", ",", "-", "1", "]", ")", "+", "root", "\n", "logZ", "=", "logZ", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "logZ", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "arc_marginals", "=", "arc_indicator", ".", "grad", "\n", "root_attach", "=", "root", ".", "grad", "\n", "root_attach", "=", "root_attach", ".", "sum", "(", "2", ")", "\n", "attach", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "attach", "[", ":", ",", "0", ",", "1", ":", "]", "=", "root_attach", "\n", "attach", "[", ":", ",", "1", ":", ",", "1", ":", "]", "=", "arc_marginals", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "del", "s", ",", "s_noninherent_left", ",", "s_inherent", ",", "s_noninherent_right", "\n", "arc_prediction", "=", "self", ".", "_eisner", "(", "attach", ",", "lens", ")", "\n", "return", "arc_prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.tdpcfg.TDPCFG.__init__": [[7, 9], ["parser.pcfgs.pcfgs.PCFG_base.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TDPCFG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.tdpcfg.TDPCFG.loss": [[10, 12], ["tdpcfg.TDPCFG._inside"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside"], ["", "def", "loss", "(", "self", ",", "rules", ",", "lens", ")", ":", "\n", "        ", "return", "self", ".", "_inside", "(", "rules", ",", "lens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.tdpcfg.TDPCFG._inside": [[13, 111], ["torch.enable_grad", "L[].contiguous", "L[].contiguous", "R[].contiguous", "R[].contiguous", "unary.new_zeros().requires_grad_", "tdpcfg.TDPCFG._inside.transform_left_t"], "methods", ["None"], ["", "@", "torch", ".", "enable_grad", "(", ")", "\n", "def", "_inside", "(", "self", ",", "rules", ",", "lens", ",", "mbr", "=", "False", ",", "viterbi", "=", "False", ")", ":", "\n", "        ", "assert", "viterbi", "is", "not", "True", "\n", "unary", "=", "rules", "[", "'unary'", "]", "\n", "root", "=", "rules", "[", "'root'", "]", "\n", "\n", "# 3d binary rule probabilities tensor decomposes to three 2d matrices after CP decomposition.", "\n", "H", "=", "rules", "[", "'head'", "]", "# (batch, NT, r) r:=rank", "\n", "L", "=", "rules", "[", "'left'", "]", "# (batch, NT+T, r)", "\n", "R", "=", "rules", "[", "'right'", "]", "# (batch, NT+T, r)", "\n", "\n", "T", "=", "unary", ".", "shape", "[", "-", "1", "]", "\n", "S", "=", "L", ".", "shape", "[", "-", "2", "]", "\n", "NT", "=", "S", "-", "T", "\n", "# r = L.shape[-1]", "\n", "\n", "L_term", "=", "L", "[", ":", ",", "NT", ":", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "L_nonterm", "=", "L", "[", ":", ",", ":", "NT", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "R_term", "=", "R", "[", ":", ",", "NT", ":", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "R_nonterm", "=", "R", "[", ":", ",", ":", "NT", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "\n", "@", "checkpoint", "\n", "def", "transform_left_t", "(", "x", ",", "left", ")", ":", "\n", "            ", "'''\n            :param x: shape (batch, n, T)\n            :return: shape (batch, n, r)\n            '''", "\n", "return", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", "+", "left", ".", "unsqueeze", "(", "1", ")", ")", ".", "logsumexp", "(", "2", ")", "\n", "\n", "", "@", "checkpoint", "\n", "def", "transform_left_nt", "(", "x", ",", "left", ")", ":", "\n", "            ", "return", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", "+", "left", ".", "unsqueeze", "(", "1", ")", ")", ".", "logsumexp", "(", "2", ")", "\n", "\n", "", "@", "checkpoint", "\n", "def", "transform_right_t", "(", "x", ",", "right", ")", ":", "\n", "            ", "return", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", "+", "right", ".", "unsqueeze", "(", "1", ")", ")", ".", "logsumexp", "(", "2", ")", "\n", "\n", "", "@", "checkpoint", "\n", "def", "transform_right_nt", "(", "x", ",", "right", ")", ":", "\n", "            ", "return", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", "+", "right", ".", "unsqueeze", "(", "1", ")", ")", ".", "logsumexp", "(", "2", ")", "\n", "\n", "# @checkpoint", "\n", "", "def", "merge", "(", "Y", ",", "Z", ")", ":", "\n", "            ", "'''\n            :param Y: shape (batch, n, w, r)\n            :param Z: shape (batch, n, w, r)\n            :return: shape (batch, n, x)\n            '''", "\n", "# contract dimension w.", "\n", "b_n_r", "=", "(", "Y", "+", "Z", ")", ".", "logsumexp", "(", "-", "2", ")", "\n", "# contract dimension r.", "\n", "b_n_x", "=", "(", "b_n_r", ".", "unsqueeze", "(", "-", "2", ")", "+", "H", ".", "unsqueeze", "(", "1", ")", ")", ".", "logsumexp", "(", "-", "1", ")", "\n", "return", "b_n_x", "\n", "\n", "\n", "", "batch", ",", "N", ",", "*", "_", "=", "unary", ".", "shape", "\n", "N", "+=", "1", "\n", "\n", "# for estimating marginals.", "\n", "span_indicator", "=", "unary", ".", "new_zeros", "(", "batch", ",", "N", ",", "N", ")", ".", "requires_grad_", "(", "mbr", ")", "\n", "\n", "left_term", "=", "transform_left_t", "(", "unary", ",", "L_term", ")", "\n", "right_term", "=", "transform_right_t", "(", "unary", ",", "R_term", ")", "\n", "\n", "s", "=", "unary", ".", "new_zeros", "(", "batch", ",", "N", ",", "N", ",", "NT", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "# for caching V^{T}s_{i,k} and W^{T}s_{k+1,j} as described in paper to decrease complexities.", "\n", "left_s", "=", "unary", ".", "new_zeros", "(", "batch", ",", "N", ",", "N", ",", "L", ".", "shape", "[", "2", "]", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "right_s", "=", "unary", ".", "new_zeros", "(", "batch", ",", "N", ",", "N", ",", "L", ".", "shape", "[", "2", "]", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "diagonal_copy_", "(", "left_s", ",", "left_term", ",", "w", "=", "1", ")", "\n", "diagonal_copy_", "(", "right_s", ",", "right_term", ",", "w", "=", "1", ")", "\n", "\n", "# w: span width", "\n", "for", "w", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "# n: the number of spans of width w.", "\n", "            ", "n", "=", "N", "-", "w", "\n", "Y", "=", "stripe", "(", "left_s", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "Z", "=", "stripe", "(", "right_s", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "x", "=", "merge", "(", "Y", ".", "clone", "(", ")", ",", "Z", ".", "clone", "(", ")", ")", "\n", "x", "=", "x", "+", "span_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "w", "+", "torch", ".", "arange", "(", "n", ")", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "if", "w", "+", "1", "<", "N", ":", "\n", "                ", "left_x", "=", "transform_left_nt", "(", "x", ",", "L_nonterm", ")", "\n", "right_x", "=", "transform_right_nt", "(", "x", ",", "R_nonterm", ")", "\n", "diagonal_copy_", "(", "left_s", ",", "left_x", ",", "w", ")", "\n", "diagonal_copy_", "(", "right_s", ",", "right_x", ",", "w", ")", "\n", "", "diagonal_copy_", "(", "s", ",", "x", ",", "w", ")", "\n", "\n", "", "final", "=", "s", "[", "torch", ".", "arange", "(", "batch", ")", ",", "0", ",", "lens", "]", "+", "root", "\n", "logZ", "=", "final", ".", "logsumexp", "(", "-", "1", ")", "\n", "\n", "if", "not", "mbr", "and", "not", "viterbi", ":", "\n", "            ", "return", "{", "'partition'", ":", "logZ", "}", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "return", "{", "\n", "\"prediction\"", ":", "self", ".", "_get_prediction", "(", "logZ", ",", "span_indicator", ",", "lens", ",", "mbr", "=", "True", ")", ",", "\n", "\"partition\"", ":", "logZ", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.tdpcfg.Fastest_TDPCFG.__init__": [[115, 117], ["parser.pcfgs.pcfgs.PCFG_base.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Fastest_TDPCFG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.tdpcfg.Fastest_TDPCFG.loss": [[118, 120], ["tdpcfg.Fastest_TDPCFG._inside"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside"], ["", "def", "loss", "(", "self", ",", "rules", ",", "lens", ")", ":", "\n", "        ", "return", "self", ".", "_inside", "(", "rules", ",", "lens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.tdpcfg.Fastest_TDPCFG._inside": [[121, 229], ["torch.enable_grad", "rules[].clone", "rules[].clone", "rules[].clone", "rules[].clone", "rules[].clone", "L[].contiguous", "L[].contiguous", "R[].contiguous", "R[].contiguous", "H.transpose.transpose.transpose", "torch.matmul", "torch.matmul", "rules[].clone.new_zeros().fill_", "parser.pcfgs.fn.diagonal_copy_", "tdpcfg.Fastest_TDPCFG._inside.transform"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_"], ["", "@", "torch", ".", "enable_grad", "(", ")", "\n", "def", "_inside", "(", "self", ",", "rules", ",", "lens", ",", "mbr", "=", "False", ",", "viterbi", "=", "False", ",", "marginal", "=", "False", ",", "s_span", "=", "None", ")", ":", "\n", "        ", "assert", "viterbi", "is", "not", "True", "\n", "unary", "=", "rules", "[", "'unary'", "]", ".", "clone", "(", ")", "\n", "root", "=", "rules", "[", "'root'", "]", ".", "clone", "(", ")", "\n", "\n", "# 3d binary rule probabilities tensor decomposes to three 2d matrices after CP decomposition.", "\n", "H", "=", "rules", "[", "'head'", "]", ".", "clone", "(", ")", "# (batch, NT, r) r:=rank", "\n", "L", "=", "rules", "[", "'left'", "]", ".", "clone", "(", ")", "# (batch, NT+T, r)", "\n", "R", "=", "rules", "[", "'right'", "]", ".", "clone", "(", ")", "# (batch, NT+T, r)", "\n", "\n", "T", "=", "unary", ".", "shape", "[", "-", "1", "]", "\n", "S", "=", "L", ".", "shape", "[", "-", "2", "]", "\n", "NT", "=", "S", "-", "T", "\n", "# r = L.shape[-1]", "\n", "\n", "L_term", "=", "L", "[", ":", ",", "NT", ":", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "L_nonterm", "=", "L", "[", ":", ",", ":", "NT", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "R_term", "=", "R", "[", ":", ",", "NT", ":", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "R_nonterm", "=", "R", "[", ":", ",", ":", "NT", ",", "...", "]", ".", "contiguous", "(", ")", "\n", "\n", "H", "=", "H", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "# (m_A, r_A) + (m_B, r_B) -> (r_A, r_B)", "\n", "H_L", "=", "torch", ".", "matmul", "(", "H", ",", "L_nonterm", ")", "\n", "H_R", "=", "torch", ".", "matmul", "(", "H", ",", "R_nonterm", ")", "\n", "\n", "def", "transform", "(", "x", ",", "y", ")", ":", "\n", "            ", "'''\n            :param x: shape (batch, n, T)\n            :return: shape (batch, n, r)\n            '''", "\n", "return", "torch", ".", "matmul", "(", "x", ",", "y", ")", "\n", "\n", "", "@", "checkpoint", "\n", "def", "merge", "(", "Y", ",", "Z", ",", "y", ",", "z", ",", "indicator", ")", ":", "\n", "            ", "'''\n            :param Y: shape (batch, n, w, r)\n            :param Z: shape (batch, n, w, r)\n            :return: shape (batch, n, x)\n            '''", "\n", "# contract dimension w.", "\n", "Y", "=", "(", "Y", "+", "1e-9", ")", ".", "log", "(", ")", "+", "y", ".", "unsqueeze", "(", "-", "1", ")", "\n", "Z", "=", "(", "Z", "+", "1e-9", ")", ".", "log", "(", ")", "+", "z", ".", "unsqueeze", "(", "-", "1", ")", "\n", "b_n_r", "=", "(", "Y", "+", "Z", ")", ".", "logsumexp", "(", "-", "2", ")", "+", "indicator", "\n", "normalizer", "=", "b_n_r", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "b_n_r", "=", "(", "b_n_r", "-", "normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", "\n", "return", "b_n_r", ",", "normalizer", "\n", "\n", "", "batch", ",", "N", ",", "*", "_", "=", "unary", ".", "shape", "\n", "N", "+=", "1", "\n", "\n", "# for estimating marginals.", "\n", "if", "s_span", "is", "None", ":", "\n", "            ", "span_indicator", "=", "unary", ".", "new_zeros", "(", "batch", ",", "N", ",", "N", ")", ".", "requires_grad_", "(", "mbr", ")", "\n", "", "else", ":", "\n", "            ", "span_indicator", "=", "s_span", "\n", "if", "mbr", "or", "viterbi", ":", "\n", "                ", "span_indicator", "=", "span_indicator", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "", "unary", "+=", "diagonal", "(", "span_indicator", ",", "w", "=", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "normalizer", "=", "unary", ".", "new_zeros", "(", "batch", ",", "N", ",", "N", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "norm", "=", "unary", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "diagonal_copy_", "(", "normalizer", ",", "norm", ",", "w", "=", "1", ")", "\n", "unary", "=", "(", "unary", "-", "norm", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", "\n", "left_term", "=", "transform", "(", "unary", ",", "L_term", ")", "\n", "right_term", "=", "transform", "(", "unary", ",", "R_term", ")", "\n", "\n", "# for caching V^{T}s_{i,k} and W^{T}s_{k+1,j} as described in paper to decrease complexities.", "\n", "left_s", "=", "unary", ".", "new_zeros", "(", "batch", ",", "N", ",", "N", ",", "L", ".", "shape", "[", "2", "]", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "right_s", "=", "unary", ".", "new_zeros", "(", "batch", ",", "N", ",", "N", ",", "L", ".", "shape", "[", "2", "]", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "diagonal_copy_", "(", "left_s", ",", "left_term", ",", "w", "=", "1", ")", "\n", "diagonal_copy_", "(", "right_s", ",", "right_term", ",", "w", "=", "1", ")", "\n", "\n", "# w: span width", "\n", "for", "w", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "# n: the number of spans of width w.", "\n", "            ", "n", "=", "N", "-", "w", "\n", "Y", "=", "stripe", "(", "left_s", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "Z", "=", "stripe", "(", "right_s", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "Y_normalizer", "=", "stripe", "(", "normalizer", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "Z_normalizer", "=", "stripe", "(", "normalizer", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "x", ",", "x_normalizer", "=", "merge", "(", "Y", ".", "clone", "(", ")", ",", "Z", ".", "clone", "(", ")", ",", "Y_normalizer", ".", "clone", "(", ")", ",", "Z_normalizer", ".", "clone", "(", ")", ",", "\n", "span_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "w", "+", "torch", ".", "arange", "(", "n", ")", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "if", "w", "+", "1", "<", "N", ":", "\n", "                ", "left_x", "=", "transform", "(", "x", ",", "H_L", ")", "\n", "right_x", "=", "transform", "(", "x", ",", "H_R", ")", "\n", "diagonal_copy_", "(", "left_s", ",", "left_x", ",", "w", ")", "\n", "diagonal_copy_", "(", "right_s", ",", "right_x", ",", "w", ")", "\n", "diagonal_copy_", "(", "normalizer", ",", "x_normalizer", ",", "w", ")", "\n", "", "else", ":", "\n", "                ", "final_m", "=", "transform", "(", "x", ",", "H", ")", "\n", "\n", "", "", "final", "=", "(", "final_m", "+", "1e-9", ")", ".", "squeeze", "(", "1", ")", ".", "log", "(", ")", "+", "root", "\n", "logZ", "=", "final", ".", "logsumexp", "(", "-", "1", ")", "+", "x_normalizer", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "not", "mbr", "and", "not", "viterbi", ":", "\n", "            ", "return", "{", "'partition'", ":", "logZ", "}", "\n", "\n", "", "elif", "marginal", ":", "\n", "            ", "logZ", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "return", "{", "'marginal'", ":", "span_indicator", ".", "grad", "}", "\n", "\n", "", "else", ":", "\n", "            ", "return", "{", "\n", "\"prediction\"", ":", "self", ".", "_get_prediction", "(", "logZ", ",", "span_indicator", ",", "lens", ",", "mbr", "=", "True", ")", ",", "\n", "\"partition\"", ":", "logZ", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfg.PCFG._inside": [[8, 104], ["torch.enable_grad", "terms.new_zeros().fill_", "slice", "slice", "rule[].reshape", "rule[].reshape", "rule[].reshape", "rule[].reshape", "rule.new_zeros().requires_grad_", "range", "pcfg.PCFG._inside.contract"], "methods", ["None"], ["    ", "@", "torch", ".", "enable_grad", "(", ")", "\n", "def", "_inside", "(", "self", ",", "rules", ",", "lens", ",", "viterbi", "=", "False", ",", "mbr", "=", "False", ")", ":", "\n", "        ", "terms", "=", "rules", "[", "'unary'", "]", "\n", "rule", "=", "rules", "[", "'rule'", "]", "\n", "root", "=", "rules", "[", "'root'", "]", "\n", "\n", "batch", ",", "N", ",", "T", "=", "terms", ".", "shape", "\n", "N", "+=", "1", "\n", "NT", "=", "rule", ".", "shape", "[", "1", "]", "\n", "S", "=", "NT", "+", "T", "\n", "\n", "s", "=", "terms", ".", "new_zeros", "(", "batch", ",", "N", ",", "N", ",", "NT", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "NTs", "=", "slice", "(", "0", ",", "NT", ")", "\n", "Ts", "=", "slice", "(", "NT", ",", "S", ")", "\n", "\n", "X_Y_Z", "=", "rule", "[", ":", ",", ":", ",", "NTs", ",", "NTs", "]", ".", "reshape", "(", "batch", ",", "NT", ",", "NT", "*", "NT", ")", "\n", "X_y_Z", "=", "rule", "[", ":", ",", ":", ",", "Ts", ",", "NTs", "]", ".", "reshape", "(", "batch", ",", "NT", ",", "NT", "*", "T", ")", "\n", "X_Y_z", "=", "rule", "[", ":", ",", ":", ",", "NTs", ",", "Ts", "]", ".", "reshape", "(", "batch", ",", "NT", ",", "NT", "*", "T", ")", "\n", "X_y_z", "=", "rule", "[", ":", ",", ":", ",", "Ts", ",", "Ts", "]", ".", "reshape", "(", "batch", ",", "NT", ",", "T", "*", "T", ")", "\n", "\n", "span_indicator", "=", "rule", ".", "new_zeros", "(", "batch", ",", "N", ",", "N", ")", ".", "requires_grad_", "(", "viterbi", "or", "mbr", ")", "\n", "\n", "def", "contract", "(", "x", ",", "dim", "=", "-", "1", ")", ":", "\n", "            ", "if", "viterbi", ":", "\n", "                ", "return", "x", ".", "max", "(", "dim", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "return", "x", ".", "logsumexp", "(", "dim", ")", "\n", "\n", "# nonterminals: X Y Z", "\n", "# terminals: x y z", "\n", "# XYZ: X->YZ  XYz: X->Yz  ...", "\n", "", "", "@", "checkpoint", "\n", "def", "Xyz", "(", "y", ",", "z", ",", "rule", ")", ":", "\n", "            ", "n", "=", "y", ".", "shape", "[", "1", "]", "\n", "b_n_yz", "=", "(", "y", "+", "z", ")", ".", "reshape", "(", "batch", ",", "n", ",", "T", "*", "T", ")", "\n", "b_n_x", "=", "contract", "(", "b_n_yz", ".", "unsqueeze", "(", "-", "2", ")", "+", "rule", ".", "unsqueeze", "(", "1", ")", ")", "\n", "return", "b_n_x", "\n", "\n", "", "@", "checkpoint", "\n", "def", "XYZ", "(", "Y", ",", "Z", ",", "rule", ")", ":", "\n", "            ", "n", "=", "Y", ".", "shape", "[", "1", "]", "\n", "b_n_yz", "=", "contract", "(", "Y", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", ":", "]", ".", "unsqueeze", "(", "-", "1", ")", "+", "Z", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", ":", "]", ".", "unsqueeze", "(", "-", "2", ")", ",", "dim", "=", "2", ")", ".", "reshape", "(", "batch", ",", "n", ",", "-", "1", ")", "\n", "b_n_x", "=", "contract", "(", "b_n_yz", ".", "unsqueeze", "(", "2", ")", "+", "rule", ".", "unsqueeze", "(", "1", ")", ")", "\n", "return", "b_n_x", "\n", "\n", "", "@", "checkpoint", "\n", "def", "XYz", "(", "Y", ",", "z", ",", "rule", ")", ":", "\n", "            ", "n", "=", "Y", ".", "shape", "[", "1", "]", "\n", "Y", "=", "Y", "[", ":", ",", ":", ",", "-", "1", ",", ":", ",", "None", "]", "\n", "b_n_yz", "=", "(", "Y", "+", "z", ")", ".", "reshape", "(", "batch", ",", "n", ",", "NT", "*", "T", ")", "\n", "b_n_x", "=", "contract", "(", "b_n_yz", ".", "unsqueeze", "(", "-", "2", ")", "+", "rule", ".", "unsqueeze", "(", "1", ")", ")", "\n", "return", "b_n_x", "\n", "\n", "\n", "", "@", "checkpoint", "\n", "def", "XyZ", "(", "y", ",", "Z", ",", "rule", ")", ":", "\n", "            ", "n", "=", "Z", ".", "shape", "[", "1", "]", "\n", "Z", "=", "Z", "[", ":", ",", ":", ",", "0", ",", "None", ",", ":", "]", "\n", "b_n_yz", "=", "(", "y", "+", "Z", ")", ".", "reshape", "(", "batch", ",", "n", ",", "NT", "*", "T", ")", "\n", "b_n_x", "=", "contract", "(", "b_n_yz", ".", "unsqueeze", "(", "-", "2", ")", "+", "rule", ".", "unsqueeze", "(", "1", ")", ")", "\n", "return", "b_n_x", "\n", "\n", "\n", "", "for", "w", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "            ", "n", "=", "N", "-", "w", "\n", "\n", "Y_term", "=", "terms", "[", ":", ",", ":", "n", ",", ":", ",", "None", "]", "\n", "Z_term", "=", "terms", "[", ":", ",", "w", "-", "1", ":", ",", "None", ",", ":", "]", "\n", "\n", "if", "w", "==", "2", ":", "\n", "                ", "diagonal_copy_", "(", "s", ",", "Xyz", "(", "Y_term", ",", "Z_term", ",", "X_y_z", ")", "+", "span_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "w", ")", "\n", "continue", "\n", "\n", "", "n", "=", "N", "-", "w", "\n", "x", "=", "terms", ".", "new_zeros", "(", "3", ",", "batch", ",", "n", ",", "NT", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "Y", "=", "stripe", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", ".", "clone", "(", ")", "\n", "Z", "=", "stripe", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", ".", "clone", "(", ")", "\n", "\n", "if", "w", ">", "3", ":", "\n", "                ", "x", "[", "0", "]", ".", "copy_", "(", "XYZ", "(", "Y", ",", "Z", ",", "X_Y_Z", ")", ")", "\n", "\n", "", "x", "[", "1", "]", ".", "copy_", "(", "XYz", "(", "Y", ",", "Z_term", ",", "X_Y_z", ")", ")", "\n", "x", "[", "2", "]", ".", "copy_", "(", "XyZ", "(", "Y_term", ",", "Z", ",", "X_y_Z", ")", ")", "\n", "\n", "diagonal_copy_", "(", "s", ",", "contract", "(", "x", ",", "dim", "=", "0", ")", "+", "span_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "w", ")", "\n", "\n", "", "logZ", "=", "contract", "(", "s", "[", "torch", ".", "arange", "(", "batch", ")", ",", "0", ",", "lens", "]", "+", "root", ")", "\n", "\n", "if", "viterbi", "or", "mbr", ":", "\n", "            ", "prediction", "=", "self", ".", "_get_prediction", "(", "logZ", ",", "span_indicator", ",", "lens", ",", "mbr", "=", "mbr", ")", "\n", "return", "{", "'partition'", ":", "logZ", ",", "\n", "'prediction'", ":", "prediction", "}", "\n", "\n", "", "else", ":", "\n", "            ", "return", "{", "'partition'", ":", "logZ", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfg.Faster_PCFG._inside": [[107, 218], ["torch.enable_grad", "terms.new_zeros().fill_", "slice", "slice", "rule.exp.exp.exp", "rule[].contiguous", "rule[].contiguous", "rule[].contiguous", "rule[].contiguous", "rule.exp.exp.new_zeros().requires_grad_", "range", "pcfg.Faster_PCFG._inside.contract"], "methods", ["None"], ["    ", "@", "torch", ".", "enable_grad", "(", ")", "\n", "def", "_inside", "(", "self", ",", "rules", ",", "lens", ",", "viterbi", "=", "False", ",", "mbr", "=", "False", ")", ":", "\n", "        ", "assert", "viterbi", "==", "False", "\n", "\n", "terms", "=", "rules", "[", "'unary'", "]", "\n", "rule", "=", "rules", "[", "'rule'", "]", "\n", "root", "=", "rules", "[", "'root'", "]", "\n", "\n", "\n", "batch", ",", "N", ",", "T", "=", "terms", ".", "shape", "\n", "N", "+=", "1", "\n", "NT", "=", "rule", ".", "shape", "[", "1", "]", "\n", "S", "=", "NT", "+", "T", "\n", "\n", "s", "=", "terms", ".", "new_zeros", "(", "batch", ",", "N", ",", "N", ",", "NT", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "NTs", "=", "slice", "(", "0", ",", "NT", ")", "\n", "Ts", "=", "slice", "(", "NT", ",", "S", ")", "\n", "\n", "rule", "=", "rule", ".", "exp", "(", ")", "\n", "X_Y_Z", "=", "rule", "[", ":", ",", ":", ",", "NTs", ",", "NTs", "]", ".", "contiguous", "(", ")", "\n", "X_y_Z", "=", "rule", "[", ":", ",", ":", ",", "Ts", ",", "NTs", "]", ".", "contiguous", "(", ")", "\n", "X_Y_z", "=", "rule", "[", ":", ",", ":", ",", "NTs", ",", "Ts", "]", ".", "contiguous", "(", ")", "\n", "X_y_z", "=", "rule", "[", ":", ",", ":", ",", "Ts", ",", "Ts", "]", ".", "contiguous", "(", ")", "\n", "\n", "span_indicator", "=", "rule", ".", "new_zeros", "(", "batch", ",", "N", ",", "N", ")", ".", "requires_grad_", "(", "viterbi", "or", "mbr", ")", "\n", "\n", "def", "contract", "(", "x", ",", "dim", "=", "-", "1", ")", ":", "\n", "            ", "if", "viterbi", ":", "\n", "                ", "return", "x", ".", "max", "(", "dim", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "return", "x", ".", "logsumexp", "(", "dim", ")", "\n", "\n", "# nonterminals: X Y Z", "\n", "# terminals: x y z", "\n", "# XYZ: X->YZ", "\n", "", "", "@", "checkpoint", "\n", "def", "Xyz", "(", "y", ",", "z", ",", "rule", ")", ":", "\n", "            ", "y_normalizer", "=", "y", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "z_normalizer", "=", "z", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "y", ",", "z", "=", "(", "y", "-", "y_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", ",", "(", "z", "-", "z_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", "\n", "x", "=", "torch", ".", "einsum", "(", "'bny, bnz, bxyz -> bnx'", ",", "y", ",", "z", ",", "rule", ")", "\n", "x", "=", "(", "(", "x", "+", "1e-9", ")", ".", "log", "(", ")", "+", "y_normalizer", ".", "unsqueeze", "(", "-", "1", ")", "+", "z_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n", "", "@", "checkpoint", "\n", "def", "XYZ", "(", "Y", ",", "Z", ",", "rule", ")", ":", "\n", "# n = Y.shape[1]", "\n", "            ", "Y", "=", "Y", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", ":", "]", "\n", "Z", "=", "Z", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", ":", "]", "\n", "Y_normalizer", "=", "Y", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "Z_normalizer", "=", "Z", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "Y", ",", "Z", "=", "(", "Y", "-", "Y_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", ",", "(", "Z", "-", "Z_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", "\n", "X", "=", "torch", ".", "einsum", "(", "'bnwy, bnwz, bxyz -> bnwx'", ",", "Y", ",", "Z", ",", "rule", ")", "\n", "X", "=", "(", "X", "+", "1e-9", ")", ".", "log", "(", ")", "+", "Y_normalizer", ".", "unsqueeze", "(", "-", "1", ")", "+", "Z_normalizer", ".", "unsqueeze", "(", "-", "1", ")", "\n", "X", "=", "X", ".", "logsumexp", "(", "2", ")", "\n", "return", "X", "\n", "\n", "", "@", "checkpoint", "\n", "def", "XYz", "(", "Y", ",", "z", ",", "rule", ")", ":", "\n", "            ", "Y", "=", "Y", "[", ":", ",", ":", ",", "-", "1", ",", ":", "]", "\n", "Y_normalizer", "=", "Y", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "z_normalizer", "=", "z", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "Y", ",", "z", "=", "(", "Y", "-", "Y_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", ",", "(", "z", "-", "z_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", "\n", "X", "=", "torch", ".", "einsum", "(", "'bny, bnz, bxyz->bnx'", ",", "Y", ",", "z", ",", "rule", ")", "\n", "X", "=", "(", "X", "+", "1e-9", ")", ".", "log", "(", ")", "+", "Y_normalizer", ".", "unsqueeze", "(", "-", "1", ")", "+", "z_normalizer", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "X", "\n", "\n", "", "@", "checkpoint", "\n", "def", "XyZ", "(", "y", ",", "Z", ",", "rule", ")", ":", "\n", "            ", "Z", "=", "Z", "[", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "y_normalizer", "=", "y", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "Z_normalizer", "=", "Z", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "y", ",", "Z", "=", "(", "y", "-", "y_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", ",", "(", "Z", "-", "Z_normalizer", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp", "(", ")", "\n", "X", "=", "torch", ".", "einsum", "(", "'bny, bnz, bxyz-> bnx'", ",", "y", ",", "Z", ",", "rule", ")", "\n", "X", "=", "(", "X", "+", "1e-9", ")", ".", "log", "(", ")", "+", "y_normalizer", ".", "unsqueeze", "(", "-", "1", ")", "+", "Z_normalizer", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "X", "\n", "\n", "\n", "", "for", "w", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "            ", "n", "=", "N", "-", "w", "\n", "\n", "Y_term", "=", "terms", "[", ":", ",", ":", "n", ",", ":", ",", "]", "\n", "Z_term", "=", "terms", "[", ":", ",", "w", "-", "1", ":", ",", ":", "]", "\n", "\n", "if", "w", "==", "2", ":", "\n", "                ", "diagonal_copy_", "(", "s", ",", "Xyz", "(", "Y_term", ",", "Z_term", ",", "X_y_z", ")", "+", "span_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "w", ")", "\n", "continue", "\n", "\n", "", "n", "=", "N", "-", "w", "\n", "x", "=", "terms", ".", "new_zeros", "(", "3", ",", "batch", ",", "n", ",", "NT", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "Y", "=", "stripe", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", ".", "clone", "(", ")", "\n", "Z", "=", "stripe", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", ".", "clone", "(", ")", "\n", "\n", "if", "w", ">", "3", ":", "\n", "                ", "x", "[", "0", "]", ".", "copy_", "(", "XYZ", "(", "Y", ",", "Z", ",", "X_Y_Z", ")", ")", "\n", "\n", "", "x", "[", "1", "]", ".", "copy_", "(", "XYz", "(", "Y", ",", "Z_term", ",", "X_Y_z", ")", ")", "\n", "x", "[", "2", "]", ".", "copy_", "(", "XyZ", "(", "Y_term", ",", "Z", ",", "X_y_Z", ")", ")", "\n", "\n", "diagonal_copy_", "(", "s", ",", "contract", "(", "x", ",", "dim", "=", "0", ")", "+", "span_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "w", ")", "\n", "\n", "", "logZ", "=", "contract", "(", "s", "[", "torch", ".", "arange", "(", "batch", ")", ",", "0", ",", "lens", "]", "+", "root", ")", "\n", "\n", "if", "viterbi", "or", "mbr", ":", "\n", "            ", "prediction", "=", "self", ".", "_get_prediction", "(", "logZ", ",", "span_indicator", ",", "lens", ",", "mbr", "=", "mbr", ")", "\n", "return", "{", "'partition'", ":", "logZ", ",", "\n", "'prediction'", ":", "prediction", "}", "\n", "\n", "", "else", ":", "\n", "            ", "return", "{", "'partition'", ":", "logZ", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base._inside": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "_inside", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base.inside": [[9, 11], ["pcfgs.PCFG_base._inside"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside"], ["", "def", "inside", "(", "self", ",", "rules", ",", "lens", ")", ":", "\n", "        ", "return", "self", ".", "_inside", "(", "rules", ",", "lens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base.decode": [[12, 15], ["torch.enable_grad", "pcfgs.PCFG_base._inside"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside"], ["", "@", "torch", ".", "enable_grad", "(", ")", "\n", "def", "decode", "(", "self", ",", "rules", ",", "lens", ",", "viterbi", "=", "False", ",", "mbr", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "_inside", "(", "rules", "=", "rules", ",", "lens", "=", "lens", ",", "viterbi", "=", "viterbi", ",", "mbr", "=", "mbr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base._get_prediction": [[17, 32], ["logZ.sum().backward", "range", "pcfgs.PCFG_base._cky_zero_order", "marginals.nonzero().tolist", "logZ.sum", "marginals.detach", "prediction[].append", "marginals.nonzero"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.lexicalizedPCFG.backward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base._cky_zero_order", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_get_prediction", "(", "self", ",", "logZ", ",", "span_indicator", ",", "lens", ",", "mbr", "=", "False", ")", ":", "\n", "        ", "batch", ",", "seq_len", "=", "span_indicator", ".", "shape", "[", ":", "2", "]", "\n", "prediction", "=", "[", "[", "]", "for", "_", "in", "range", "(", "batch", ")", "]", "\n", "# to avoid some trivial corner cases.", "\n", "if", "seq_len", ">=", "3", ":", "\n", "            ", "assert", "logZ", ".", "requires_grad", "\n", "logZ", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "marginals", "=", "span_indicator", ".", "grad", "\n", "if", "mbr", ":", "\n", "                ", "return", "self", ".", "_cky_zero_order", "(", "marginals", ".", "detach", "(", ")", ",", "lens", ")", "\n", "", "else", ":", "\n", "                ", "viterbi_spans", "=", "marginals", ".", "nonzero", "(", ")", ".", "tolist", "(", ")", "\n", "for", "span", "in", "viterbi_spans", ":", "\n", "                    ", "prediction", "[", "span", "[", "0", "]", "]", ".", "append", "(", "(", "span", "[", "1", "]", ",", "span", "[", "2", "]", ")", ")", "\n", "", "", "", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base._cky_zero_order": [[34, 66], ["torch.no_grad", "marginals.new_zeros().fill_", "marginals.new_zeros().long", "parser.pcfgs.fn.diagonal_copy_", "range", "p.tolist.tolist.tolist", "lens.tolist.tolist.tolist", "parser.pcfgs.fn.diagonal", "p.tolist.tolist.new_tensor", "parser.pcfgs.fn.diagonal_copy_", "parser.pcfgs.fn.diagonal_copy_", "pcfgs.PCFG_base._cky_zero_order.backtrack"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_cky_zero_order", "(", "self", ",", "marginals", ",", "lens", ")", ":", "\n", "        ", "N", "=", "marginals", ".", "shape", "[", "-", "1", "]", "\n", "s", "=", "marginals", ".", "new_zeros", "(", "*", "marginals", ".", "shape", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "p", "=", "marginals", ".", "new_zeros", "(", "*", "marginals", ".", "shape", ")", ".", "long", "(", ")", "\n", "diagonal_copy_", "(", "s", ",", "diagonal", "(", "marginals", ",", "1", ")", ",", "1", ")", "\n", "for", "w", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "            ", "n", "=", "N", "-", "w", "\n", "starts", "=", "p", ".", "new_tensor", "(", "range", "(", "n", ")", ")", "\n", "if", "w", "!=", "2", ":", "\n", "                ", "Y", "=", "stripe", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "Z", "=", "stripe", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "Y", "=", "stripe", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "Z", "=", "stripe", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "", "X", ",", "split", "=", "(", "Y", "+", "Z", ")", ".", "max", "(", "2", ")", "\n", "x", "=", "X", "+", "diagonal", "(", "marginals", ",", "w", ")", "\n", "diagonal_copy_", "(", "s", ",", "x", ",", "w", ")", "\n", "diagonal_copy_", "(", "p", ",", "split", "+", "starts", ".", "unsqueeze", "(", "0", ")", "+", "1", ",", "w", ")", "\n", "\n", "", "def", "backtrack", "(", "p", ",", "i", ",", "j", ")", ":", "\n", "            ", "if", "j", "==", "i", "+", "1", ":", "\n", "                ", "return", "[", "(", "i", ",", "j", ")", "]", "\n", "", "split", "=", "p", "[", "i", "]", "[", "j", "]", "\n", "ltree", "=", "backtrack", "(", "p", ",", "i", ",", "split", ")", "\n", "rtree", "=", "backtrack", "(", "p", ",", "split", ",", "j", ")", "\n", "return", "[", "(", "i", ",", "j", ")", "]", "+", "ltree", "+", "rtree", "\n", "\n", "", "p", "=", "p", ".", "tolist", "(", ")", "\n", "lens", "=", "lens", ".", "tolist", "(", ")", "\n", "spans", "=", "[", "backtrack", "(", "p", "[", "i", "]", ",", "0", ",", "length", ")", "for", "i", ",", "length", "in", "enumerate", "(", "lens", ")", "]", "\n", "return", "spans", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base.get_plus_semiring": [[67, 75], ["torch.logsumexp", "torch.max"], "methods", ["None"], ["", "def", "get_plus_semiring", "(", "self", ",", "viterbi", ")", ":", "\n", "        ", "if", "viterbi", ":", "\n", "            ", "def", "plus", "(", "x", ",", "dim", ")", ":", "\n", "                ", "return", "torch", ".", "max", "(", "x", ",", "dim", ")", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "def", "plus", "(", "x", ",", "dim", ")", ":", "\n", "                ", "return", "torch", ".", "logsumexp", "(", "x", ",", "dim", ")", "\n", "", "", "return", "plus", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base._eisner": [[76, 138], ["attach.requires_grad_", "pcfgs.PCFG_base.get_plus_semiring", "range", "range", "torch.gather", "[].nonzero().tolist", "pcfgs.PCFG_base.", "pcfgs.PCFG_base.", "pcfgs.PCFG_base.", "pcfgs.PCFG_base.", "pcfgs.PCFG_base.", "lens.unsqueeze", "predicted_arc[].append", "range", "torch.arange", "torch.arange", "[].nonzero", "range", "torch.zeros().fill_", "range", "range", "torch.zeros", "torch.autograd.grad", "torch.gather.sum"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base.get_plus_semiring", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_eisner", "(", "self", ",", "attach", ",", "lens", ")", ":", "\n", "        ", "self", ".", "huge", "=", "-", "1e9", "\n", "self", ".", "device", "=", "attach", ".", "device", "\n", "'''\n        :param attach: The marginal probabilities.\n        :param lens: sentences lens\n        :return: predicted_arcs\n        '''", "\n", "A", "=", "0", "\n", "B", "=", "1", "\n", "I", "=", "0", "\n", "C", "=", "1", "\n", "L", "=", "0", "\n", "R", "=", "1", "\n", "b", ",", "N", ",", "*", "_", "=", "attach", ".", "shape", "\n", "attach", ".", "requires_grad_", "(", "True", ")", "\n", "alpha", "=", "[", "\n", "[", "\n", "[", "torch", ".", "zeros", "(", "b", ",", "N", ",", "N", ",", "device", "=", "self", ".", "device", ")", ".", "fill_", "(", "self", ".", "huge", ")", "for", "_", "in", "range", "(", "2", ")", "]", "for", "_", "in", "range", "(", "2", ")", "\n", "]", "for", "_", "in", "range", "(", "2", ")", "\n", "]", "\n", "alpha", "[", "A", "]", "[", "C", "]", "[", "L", "]", "[", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "alpha", "[", "B", "]", "[", "C", "]", "[", "L", "]", "[", ":", ",", ":", ",", "-", "1", "]", "=", "0", "\n", "alpha", "[", "A", "]", "[", "C", "]", "[", "R", "]", "[", ":", ",", ":", ",", "0", "]", "=", "0", "\n", "alpha", "[", "B", "]", "[", "C", "]", "[", "R", "]", "[", ":", ",", ":", ",", "-", "1", "]", "=", "0", "\n", "semiring_plus", "=", "self", ".", "get_plus_semiring", "(", "viterbi", "=", "True", ")", "\n", "# single root.", "\n", "start_idx", "=", "1", "\n", "for", "k", "in", "range", "(", "1", ",", "N", "-", "start_idx", ")", ":", "\n", "            ", "f", "=", "torch", ".", "arange", "(", "start_idx", ",", "N", "-", "k", ")", ",", "torch", ".", "arange", "(", "k", "+", "start_idx", ",", "N", ")", "\n", "ACL", "=", "alpha", "[", "A", "]", "[", "C", "]", "[", "L", "]", "[", ":", ",", "start_idx", ":", "N", "-", "k", ",", ":", "k", "]", "\n", "ACR", "=", "alpha", "[", "A", "]", "[", "C", "]", "[", "R", "]", "[", ":", ",", "start_idx", ":", "N", "-", "k", ",", ":", "k", "]", "\n", "BCL", "=", "alpha", "[", "B", "]", "[", "C", "]", "[", "L", "]", "[", ":", ",", "start_idx", "+", "k", ":", ",", "N", "-", "k", ":", "]", "\n", "BCR", "=", "alpha", "[", "B", "]", "[", "C", "]", "[", "R", "]", "[", ":", ",", "start_idx", "+", "k", ":", ",", "N", "-", "k", ":", "]", "\n", "x", "=", "semiring_plus", "(", "ACR", "+", "BCL", ",", "dim", "=", "2", ")", "\n", "arcs_l", "=", "x", "+", "attach", "[", ":", ",", "f", "[", "1", "]", ",", "f", "[", "0", "]", "]", "\n", "alpha", "[", "A", "]", "[", "I", "]", "[", "L", "]", "[", ":", ",", "start_idx", ":", "N", "-", "k", ",", "k", "]", "=", "arcs_l", "\n", "alpha", "[", "B", "]", "[", "I", "]", "[", "L", "]", "[", ":", ",", "k", "+", "start_idx", ":", "N", ",", "N", "-", "k", "-", "1", "]", "=", "arcs_l", "\n", "x", "=", "semiring_plus", "(", "ACR", "+", "BCL", ",", "dim", "=", "2", ")", "\n", "arcs_r", "=", "x", "+", "attach", "[", ":", ",", "f", "[", "0", "]", ",", "f", "[", "1", "]", "]", "\n", "alpha", "[", "A", "]", "[", "I", "]", "[", "R", "]", "[", ":", ",", "start_idx", ":", "N", "-", "k", ",", "k", "]", "=", "arcs_r", "\n", "alpha", "[", "B", "]", "[", "I", "]", "[", "R", "]", "[", ":", ",", "k", "+", "start_idx", ":", "N", ",", "N", "-", "k", "-", "1", "]", "=", "arcs_r", "\n", "AIR", "=", "alpha", "[", "A", "]", "[", "I", "]", "[", "R", "]", "[", ":", ",", "start_idx", ":", "N", "-", "k", ",", "1", ":", "k", "+", "1", "]", "\n", "BIL", "=", "alpha", "[", "B", "]", "[", "I", "]", "[", "L", "]", "[", ":", ",", "k", "+", "start_idx", ":", ",", "N", "-", "k", "-", "1", ":", "N", "-", "1", "]", "\n", "new", "=", "semiring_plus", "(", "ACL", "+", "BIL", ",", "dim", "=", "2", ")", "\n", "alpha", "[", "A", "]", "[", "C", "]", "[", "L", "]", "[", ":", ",", "start_idx", ":", "N", "-", "k", ",", "k", "]", "=", "new", "\n", "alpha", "[", "B", "]", "[", "C", "]", "[", "L", "]", "[", ":", ",", "k", "+", "start_idx", ":", "N", ",", "N", "-", "k", "-", "1", "]", "=", "new", "\n", "new", "=", "semiring_plus", "(", "AIR", "+", "BCR", ",", "dim", "=", "2", ")", "\n", "alpha", "[", "A", "]", "[", "C", "]", "[", "R", "]", "[", ":", ",", "start_idx", ":", "N", "-", "k", ",", "k", "]", "=", "new", "\n", "alpha", "[", "B", "]", "[", "C", "]", "[", "R", "]", "[", ":", ",", "start_idx", "+", "k", ":", "N", ",", "N", "-", "k", "-", "1", "]", "=", "new", "\n", "# dealing with the root.", "\n", "", "root_incomplete_span", "=", "alpha", "[", "A", "]", "[", "C", "]", "[", "L", "]", "[", ":", ",", "1", ",", ":", "N", "-", "1", "]", "+", "attach", "[", ":", ",", "0", ",", "1", ":", "]", "\n", "for", "k", "in", "range", "(", "1", ",", "N", ")", ":", "\n", "            ", "AIR", "=", "root_incomplete_span", "[", ":", ",", ":", "k", "]", "\n", "BCR", "=", "alpha", "[", "B", "]", "[", "C", "]", "[", "R", "]", "[", ":", ",", "k", ",", "N", "-", "k", ":", "]", "\n", "alpha", "[", "A", "]", "[", "C", "]", "[", "R", "]", "[", ":", ",", "0", ",", "k", "]", "=", "semiring_plus", "(", "AIR", "+", "BCR", ",", "dim", "=", "1", ")", "\n", "", "logZ", "=", "torch", ".", "gather", "(", "alpha", "[", "A", "]", "[", "C", "]", "[", "R", "]", "[", ":", ",", "0", ",", ":", "]", ",", "-", "1", ",", "lens", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "arc", "=", "torch", ".", "autograd", ".", "grad", "(", "logZ", ".", "sum", "(", ")", ",", "attach", ")", "[", "0", "]", ".", "nonzero", "(", ")", ".", "tolist", "(", ")", "\n", "predicted_arc", "=", "[", "[", "]", "for", "_", "in", "range", "(", "logZ", ".", "shape", "[", "0", "]", ")", "]", "\n", "for", "a", "in", "arc", ":", "\n", "            ", "predicted_arc", "[", "a", "[", "0", "]", "]", ".", "append", "(", "(", "a", "[", "1", "]", "-", "1", ",", "a", "[", "2", "]", "-", "1", ")", ")", "\n", "", "return", "predicted_arc", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.eisner_satta.EisnerSatta.viterbi_decoding": [[10, 186], ["slice", "slice", "rule.new_zeros().fill_", "rule.new_zeros().fill_", "rule.new_zeros().fill_", "rule.new_zeros().fill_", "range", "range", "maxes.max", "range", "int", "int", "eisner_satta.EisnerSatta.viterbi_decoding.backtrack"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["    ", "@", "classmethod", "\n", "def", "viterbi_decoding", "(", "cls", ",", "rule", ",", "root", ",", "lens", ")", ":", "\n", "        ", "B", ",", "H", ",", "_", ",", "NT", ",", "S", ",", "_", "=", "rule", ".", "shape", "\n", "T", "=", "S", "-", "NT", "\n", "N", "=", "H", "+", "1", "\n", "nt_slice", "=", "slice", "(", "0", ",", "NT", ")", "\n", "t_slice", "=", "slice", "(", "NT", ",", "S", ")", "\n", "s", "=", "rule", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "NT", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "# for back-tracking.", "\n", "s_bp", "=", "rule", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "NT", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "s_need_dad", "=", "rule", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "NT", ",", "NT", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "# if we want to know the state of t, then we can use this tensor to look up.", "\n", "s_inherent", "=", "rule", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ",", "NT", ",", "NT", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "for", "i", "in", "range", "(", "N", "-", "1", ")", ":", "\n", "            ", "s", "[", ":", ",", "i", ",", "i", "+", "1", ",", "i", "]", "=", "0", "\n", "if", "i", ">", "0", ":", "\n", "                ", "s_need_dad", "[", ":", ",", "i", ",", "i", "+", "1", ",", ":", "i", "]", ",", "s_need_dad", "[", ":", ",", "i", "+", "1", ",", "i", ",", ":", "i", "]", "=", "(", "rule", "[", ":", ",", "i", ",", ":", "i", ",", ":", ",", "nt_slice", ",", "t_slice", "]", ")", ".", "max", "(", "-", "1", ")", "\n", "", "if", "i", "<", "N", "-", "2", ":", "\n", "                ", "s_need_dad", "[", ":", ",", "i", ",", "i", "+", "1", ",", "i", "+", "1", ":", "]", ",", "s_need_dad", "[", ":", ",", "i", "+", "1", ",", "i", ",", "i", "+", "1", ":", "]", "=", "(", "rule", "[", ":", ",", "i", ",", "i", "+", "1", ":", ",", ":", ",", "t_slice", ",", "nt_slice", "]", ")", ".", "max", "(", "-", "2", ")", "\n", "", "", "LEFT", "=", "0", "\n", "RIGHT", "=", "1", "\n", "for", "w", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "            ", "n", "=", "N", "-", "w", "\n", "if", "w", "==", "2", ":", "\n", "                ", "headed", "=", "s", ".", "new_zeros", "(", "B", ",", "n", ",", "w", ",", "NT", ",", "T", ",", "T", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "headed", "[", ":", ",", ":", ",", "LEFT", ",", "...", "]", "=", "rule", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "torch", ".", "arange", "(", "n", ")", ",", ":", ",", "t_slice", ",", "t_slice", "]", "\n", "headed", "[", ":", ",", ":", ",", "RIGHT", ",", "...", "]", "=", "rule", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", ":", ",", "t_slice", ",", "t_slice", "]", "\n", "headed", ",", "idx", "=", "headed", ".", "reshape", "(", "B", ",", "n", ",", "w", ",", "NT", ",", "-", "1", ")", ".", "max", "(", "-", "1", ")", "\n", "diagonal_copy_with_headword", "(", "s", ",", "headed", ",", "w", ")", "\n", "diagonal_copy_with_headword", "(", "s_bp", ",", "idx", ",", "w", ")", "\n", "", "else", ":", "\n", "                ", "left_span", "=", "stripe_with_headword", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "right_span", "=", "stripe_with_headword", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "headed", "=", "s", ".", "new_zeros", "(", "B", ",", "n", ",", "w", "-", "1", ",", "w", ",", "NT", ",", "NT", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "\n", "for", "i", "in", "range", "(", "w", "-", "1", ")", ":", "\n", "                    ", "if", "i", ">", "0", ":", "\n", "                        ", "need_left_dad", "=", "stripe_need_dad", "(", "s_need_dad", ",", "n", ",", "i", "+", "1", ",", "start", "=", "i", "+", "1", ",", "end", "=", "w", ",", "headstart", "=", "0", ")", "\n", "headed", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", "]", "=", "(", "left_span", "[", ":", ",", ":", ",", "i", ",", ":", "i", "+", "1", ",", "...", ",", "None", ",", ":", "]", "+", "need_left_dad", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "a", ",", "b", "=", "(", "right_span", "[", ":", ",", ":", ",", "0", ",", "1", ":", ",", "...", ",", "None", ",", "None", ",", ":", "]", "+", "\n", "stripe_headed_right", "(", "rule", ",", "n", ",", "w", "-", "1", ",", "NT", ",", "T", ")", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "5", ",", "2", ",", "4", ")", ".", "reshape", "(", "B", ",", "n", ",", "NT", ",", "NT", ",", "-", "1", ")", ".", "max", "(", "-", "1", ")", "\n", "s_inherent", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", "]", "=", "b", ".", "float", "(", ")", "\n", "headed", "[", ":", ",", ":", ",", "i", ",", "0", "]", "=", "a", "\n", "\n", "", "if", "i", "<", "w", "-", "2", ":", "\n", "                        ", "need_right_dad", "=", "stripe_need_dad", "(", "s_need_dad", ",", "n", ",", "w", "-", "(", "i", "+", "1", ")", ",", "start", "=", "0", ",", "end", "=", "i", "+", "1", ",", "\n", "headstart", "=", "i", "+", "1", ")", "\n", "headed", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", "]", "=", "(", "right_span", "[", ":", ",", ":", ",", "i", ",", "i", "+", "1", ":", ",", "...", ",", "None", ",", ":", "]", "+", "need_right_dad", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "a", ",", "b", "=", "(", "left_span", "[", ":", ",", ":", ",", "w", "-", "2", ",", ":", "w", "-", "1", ",", "...", ",", "None", ",", ":", ",", "None", "]", "+", "\n", "stripe_headed_left", "(", "rule", ",", "n", ",", "w", "-", "1", ",", "NT", ",", "T", ")", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ",", "5", ")", ".", "reshape", "(", "B", ",", "n", ",", "NT", ",", "NT", ",", "-", "1", ")", ".", "max", "(", "-", "1", ")", "\n", "headed", "[", ":", ",", ":", ",", "i", ",", "-", "1", "]", "=", "a", "\n", "s_inherent", "[", ":", ",", "w", "+", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "]", "=", "b", ".", "float", "(", ")", "\n", "\n", "", "", "headed", ",", "idxes", "=", "headed", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ",", "5", ")", ".", "reshape", "(", "B", ",", "n", ",", "w", ",", "NT", ",", "-", "1", ")", ".", "max", "(", "-", "1", ")", "\n", "diagonal_copy_with_headword", "(", "s", ",", "headed", ",", "w", ")", "\n", "diagonal_copy_with_headword", "(", "s_bp", ",", "idxes", ",", "w", ")", "\n", "\n", "", "if", "w", "<", "N", "-", "1", ":", "\n", "                ", "for", "l", "in", "range", "(", "N", "-", "w", ")", ":", "\n", "                    ", "r", "=", "w", "+", "l", "\n", "if", "l", ">", "0", ":", "\n", "                        ", "u", "=", "(", "rule", "[", ":", ",", "l", ":", "r", ",", ":", "l", ",", ":", ",", "nt_slice", ",", "nt_slice", "]", "\n", "+", "headed", "[", ":", ",", "l", ",", ":", ",", "None", ",", "None", ",", "None", ",", ":", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ",", "5", ")", "\n", "maxes", ",", "idx", "=", "u", ".", "reshape", "(", "*", "u", ".", "shape", "[", ":", "-", "2", "]", ",", "-", "1", ")", ".", "max", "(", "-", "1", ")", "\n", "s_need_dad", "[", ":", ",", "l", ",", "r", ",", ":", "l", "]", "=", "maxes", "\n", "s_need_dad", "[", ":", ",", "r", ",", "l", ",", ":", "l", "]", "=", "idx", "\n", "", "if", "r", "<", "N", "-", "1", ":", "\n", "                        ", "u", "=", "(", "rule", "[", ":", ",", "l", ":", "r", ",", "r", ":", ",", ":", ",", "nt_slice", ",", "nt_slice", "]", "\n", "+", "headed", "[", ":", ",", "l", ",", ":", ",", "None", ",", "None", ",", ":", ",", "None", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "5", ",", "1", ",", "4", ")", "\n", "maxes", ",", "idx", "=", "u", ".", "reshape", "(", "*", "u", ".", "shape", "[", ":", "-", "2", "]", ",", "-", "1", ")", ".", "max", "(", "-", "1", ")", "\n", "s_need_dad", "[", ":", ",", "l", ",", "r", ",", "r", ":", "]", "=", "maxes", "\n", "s_need_dad", "[", ":", ",", "r", ",", "l", ",", "r", ":", "]", "=", "idx", "\n", "\n", "", "", "", "", "maxes", ",", "states", "=", "(", "s", "[", "torch", ".", "arange", "(", "B", ")", ",", "0", ",", "lens", ",", ":", ",", ":", "]", "+", "root", ")", ".", "max", "(", "-", "1", ")", "\n", "maxes", ",", "head_idx", "=", "maxes", ".", "max", "(", "-", "1", ")", "\n", "\n", "def", "backtrack", "(", "b", ",", "left", ",", "right", ",", "head", ",", "head_state", ")", ":", "\n", "            ", "assert", "left", "<", "right", "\n", "assert", "head", "<", "right", "\n", "assert", "head", ">=", "left", "\n", "if", "right", "==", "left", "+", "1", ":", "\n", "                ", "if", "head", "==", "left", ":", "\n", "                    ", "return", "[", "(", "left", ",", "right", ",", "head_state", ",", "head", ")", "]", ",", "[", "]", "\n", "", "else", ":", "\n", "                    ", "return", "[", "(", "left", ",", "right", ",", "head_state", ",", "head", ")", "]", ",", "[", "]", "\n", "\n", "", "", "if", "right", "==", "left", "+", "2", ":", "\n", "                ", "child_states", "=", "int", "(", "s_bp", "[", "b", ",", "left", ",", "right", ",", "head", ",", "head_state", "]", ")", "\n", "left_state", "=", "int", "(", "child_states", "/", "T", ")", "+", "NT", "\n", "right_state", "=", "child_states", "%", "T", "+", "NT", "\n", "lspan", ",", "_", "=", "backtrack", "(", "b", ",", "left", ",", "left", "+", "1", ",", "left", ",", "left_state", ")", "\n", "rspan", ",", "_", "=", "backtrack", "(", "b", ",", "left", "+", "1", ",", "right", ",", "left", "+", "1", ",", "right_state", ")", "\n", "return", "[", "(", "left", ",", "right", ",", "head_state", ",", "head", ")", "]", "+", "lspan", "+", "rspan", ",", "[", "\n", "(", "left", ",", "right", "-", "1", ")", "if", "head", "==", "left", "else", "(", "head", ",", "left", ")", "]", "\n", "\n", "", "inherent", "=", "int", "(", "s_bp", "[", "b", ",", "left", ",", "right", ",", "head", ",", "head_state", "]", ")", "\n", "inherent_state", "=", "inherent", "%", "NT", "\n", "split", "=", "int", "(", "inherent", "/", "NT", ")", "\n", "inherent_head", "=", "head", "\n", "split", "+=", "left", "+", "1", "\n", "\n", "## means that inherent state (left) belongs to T.", "\n", "if", "(", "split", "==", "left", "+", "1", ")", "and", "(", "head", "==", "left", ")", ":", "\n", "                ", "i_t", "=", "int", "(", "s_inherent", "[", "b", ",", "left", ",", "right", ",", "head_state", ",", "inherent_state", "]", ")", "\n", "ni_split", "=", "int", "(", "i_t", "/", "T", ")", "\n", "t_states", "=", "i_t", "%", "T", "\n", "noninherent_state", "=", "inherent_state", "\n", "inherent_state", "=", "t_states", "\n", "noninherent_head", "=", "split", "+", "ni_split", "\n", "lspan", ",", "larc", "=", "backtrack", "(", "b", ",", "left", ",", "split", ",", "left", ",", "inherent_state", ")", "\n", "rspan", ",", "rarc", "=", "backtrack", "(", "b", ",", "split", ",", "right", ",", "noninherent_head", ",", "noninherent_state", ")", "\n", "return", "[", "(", "left", ",", "right", ",", "head_state", ",", "head", ")", "]", "+", "lspan", "+", "rspan", ",", "[", "(", "head", ",", "noninherent_head", ")", "]", "+", "larc", "+", "rarc", "\n", "\n", "## means that inherent state (right) belongs to T.", "\n", "", "if", "(", "split", "==", "right", "-", "1", ")", "and", "(", "head", "==", "right", "-", "1", ")", ":", "\n", "                ", "i_t", "=", "int", "(", "s_inherent", "[", "b", ",", "right", ",", "left", ",", "head_state", ",", "inherent_state", "]", ")", "\n", "ni_split", "=", "int", "(", "i_t", "/", "T", ")", "\n", "t_states", "=", "i_t", "%", "T", "\n", "noninherent_state", "=", "inherent_state", "\n", "inherent_state", "=", "t_states", "\n", "noninherent_head", "=", "left", "+", "ni_split", "\n", "lspan", ",", "larc", "=", "backtrack", "(", "b", ",", "left", ",", "split", ",", "noninherent_head", ",", "noninherent_state", ")", "\n", "rspan", ",", "rarc", "=", "backtrack", "(", "b", ",", "split", ",", "right", ",", "right", "-", "1", ",", "inherent_state", ")", "\n", "return", "[", "(", "left", ",", "right", ",", "head_state", ",", "head", ")", "]", "+", "lspan", "+", "rspan", ",", "[", "(", "head", ",", "noninherent_head", ")", "]", "+", "larc", "+", "rarc", "\n", "\n", "", "if", "split", ">", "head", ":", "\n", "                ", "direction", "=", "0", "\n", "", "else", ":", "\n", "                ", "direction", "=", "1", "\n", "\n", "", "if", "direction", "==", "0", ":", "\n", "                ", "noninherent", "=", "int", "(", "(", "s_need_dad", "[", "b", ",", "right", ",", "split", ",", "head", ",", "head_state", ",", "inherent_state", "]", ")", ")", "\n", "if", "split", "!=", "right", "-", "1", ":", "\n", "                    ", "noninherent_state", "=", "noninherent", "%", "NT", "\n", "noninherent_split", "=", "int", "(", "noninherent", "/", "NT", ")", "\n", "noninherent_head", "=", "(", "split", ")", "+", "noninherent_split", "\n", "", "else", ":", "\n", "                    ", "noninherent_head", "=", "right", "-", "1", "\n", "noninherent_state", "=", "noninherent", "+", "NT", "\n", "", "lspan", ",", "larc", "=", "backtrack", "(", "b", ",", "left", ",", "split", ",", "inherent_head", ",", "inherent_state", ")", "\n", "rspan", ",", "rarc", "=", "backtrack", "(", "b", ",", "split", ",", "right", ",", "noninherent_head", ",", "noninherent_state", ")", "\n", "\n", "", "else", ":", "\n", "                ", "noninherent", "=", "int", "(", "(", "s_need_dad", "[", "b", ",", "split", ",", "left", ",", "head", ",", "head_state", ",", "inherent_state", "]", ")", ")", "\n", "if", "split", "!=", "left", "+", "1", ":", "\n", "                    ", "noninherent_state", "=", "noninherent", "%", "NT", "\n", "noninherent_split", "=", "int", "(", "noninherent", "/", "NT", ")", "\n", "noninherent_head", "=", "(", "left", ")", "+", "noninherent_split", "\n", "", "else", ":", "\n", "                    ", "noninherent_state", "=", "noninherent", "+", "NT", "\n", "noninherent_head", "=", "left", "\n", "", "lspan", ",", "larc", "=", "backtrack", "(", "b", ",", "left", ",", "split", ",", "noninherent_head", ",", "noninherent_state", ")", "\n", "rspan", ",", "rarc", "=", "backtrack", "(", "b", ",", "split", ",", "right", ",", "inherent_head", ",", "inherent_state", ")", "\n", "", "return", "[", "(", "left", ",", "right", ",", "head_state", ",", "head", ")", "]", "+", "lspan", "+", "rspan", ",", "[", "(", "head", ",", "noninherent_head", ")", "]", "+", "larc", "+", "rarc", "\n", "\n", "", "predict_span", "=", "[", "]", "\n", "predict_arc", "=", "[", "]", "\n", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "            ", "p_s", ",", "p_a", "=", "backtrack", "(", "b", ",", "0", ",", "N", "-", "1", ",", "int", "(", "head_idx", "[", "b", "]", ")", ",", "int", "(", "(", "states", "[", "b", "]", "[", "head_idx", "[", "b", "]", "]", ")", ")", ")", "\n", "predict_span", ".", "append", "(", "p_s", ")", "\n", "predict_arc", ".", "append", "(", "p_a", "+", "[", "(", "-", "1", ",", "int", "(", "head_idx", "[", "b", "]", ")", ")", "]", ")", "\n", "\n", "", "del", "s", ",", "s_bp", ",", "s_need_dad", "\n", "return", "{", "\n", "'prediction'", ":", "predict_span", ",", "\n", "'prediction_arc'", ":", "predict_arc", ",", "\n", "'partition'", ":", "0", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.checkpoint": [[8, 13], ["torch.utils.checkpoint.checkpoint"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.checkpoint"], ["def", "checkpoint", "(", "func", ")", ":", "\n", "    ", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "ckp", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe": [[23, 37], ["list", "x.contiguous", "x.size", "x.stride", "len", "x.as_strided", "x.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["def", "stripe", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "stride", "[", "1", "]", "=", "(", "seq_len", "+", "1", ")", "*", "numel", "\n", "stride", "[", "2", "]", "=", "(", "1", "if", "dim", "==", "1", "else", "seq_len", ")", "*", "numel", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "3", ":", "\n", "        ", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_add_": [[39, 59], ["list", "x.contiguous", "x.size", "x.stride", "len", "x.as_strided", "x.as_strided().copy_", "x.as_strided", "x.as_strided().copy_", "x.as_strided", "x.as_strided", "list", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "stripe_add_", "(", "x", ",", "y", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "stride", "[", "1", "]", "=", "(", "seq_len", "+", "1", ")", "*", "numel", "\n", "stride", "[", "2", "]", "=", "(", "1", "if", "dim", "==", "1", "else", "seq_len", ")", "*", "numel", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "3", ":", "\n", "        ", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", ".", "copy_", "(", "tmp", "+", "y", ")", "\n", "", "else", ":", "\n", "        ", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", ".", "copy_", "(", "tmp", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_with_headword": [[66, 75], ["list", "x.as_strided", "x.contiguous", "x.size", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["def", "stripe_with_headword", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "stride", "[", "1", "]", "=", "(", "seq_len", "+", "1", ")", "*", "numel", "+", "stride", "[", "3", "]", "\n", "stride", "[", "2", "]", "=", "(", "1", "if", "dim", "==", "1", "else", "seq_len", ")", "*", "numel", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "w", "+", "1", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_with_headword_add_": [[79, 91], ["list", "x.as_strided", "x.as_strided().copy_", "x.contiguous", "x.size", "x.stride", "x.as_strided", "list", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_with_headword_add_", "(", "x", ",", "y", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "stride", "[", "1", "]", "=", "(", "seq_len", "+", "1", ")", "*", "numel", "+", "stride", "[", "3", "]", "\n", "stride", "[", "2", "]", "=", "(", "1", "if", "dim", "==", "1", "else", "seq_len", ")", "*", "numel", "\n", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "w", "+", "1", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "w", "+", "1", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", ".", "copy_", "(", "tmp", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_grammar_rules": [[98, 108], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["def", "stripe_grammar_rules", "(", "x", ",", "n", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "2", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", ",", "\n", "stride", "=", "new_stride", ",", "storage_offset", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_grammar_rules_add_": [[110, 122], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.as_strided().copy_", "x.contiguous", "x.size", "x.stride", "x.as_strided"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_grammar_rules_add_", "(", "x", ",", "y", ",", "n", ",", "w", ",", "offset", "=", "0", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "2", ":", "]", ")", "\n", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", ",", "\n", "stride", "=", "new_stride", ",", "storage_offset", "=", "offset", "*", "stride", "[", "1", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", ",", "\n", "stride", "=", "new_stride", ",", "storage_offset", "=", "offset", "*", "stride", "[", "1", "]", ")", ".", "copy_", "(", "tmp", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.diagonal_copy_": [[124, 141], ["new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided().copy_", "x.as_strided().copy_", "x.stride", "x.as_strided", "x.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "diagonal_copy_", "(", "x", ",", "y", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "3", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "copy_", "(", "y", ")", "\n", "", "else", ":", "\n", "        ", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "copy_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.diagonal": [[143, 159], ["new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided", "x.as_strided", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "diagonal", "(", "x", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "3", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.diagonal_copy_with_headword": [[162, 181], ["new_stride.append", "new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided().copy_", "x.as_strided().copy_", "x.stride", "x.as_strided", "x.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "diagonal_copy_with_headword", "(", "x", ",", "y", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "4", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "copy_", "(", "y", ")", "\n", "", "else", ":", "\n", "# new_stride.append(stride[3])", "\n", "        ", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "copy_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.diagonal_with_headword": [[183, 201], ["new_stride.append", "new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided", "x.as_strided", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "diagonal_with_headword", "(", "x", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "4", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", "\n", "", "else", ":", "\n", "# new_stride.append(stride[3])", "\n", "        ", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.diagonal_with_headword_add_": [[204, 232], ["new_stride.append", "new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided", "x.as_strided().copy_", "x.as_strided", "x.as_strided().copy_", "x.stride", "x.as_strided", "x.as_strided", "list", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "diagonal_with_headword_add_", "(", "x", ",", "y", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "4", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "copy_", "(", "tmp", "+", "y", ")", "\n", "\n", "", "else", ":", "\n", "# new_stride.append(stride[3])", "\n", "        ", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "copy_", "(", "tmp", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_headed_left": [[235, 246], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "stripe_headed_left", "(", "x", ",", "n", ",", "w", ",", "nt", ",", "t", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "x", ".", "shape", "[", "3", "]", ",", "nt", ",", "t", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "+", "nt", "*", "stride", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_headed_right": [[248, 259], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_headed_right", "(", "x", ",", "n", ",", "w", ",", "nt", ",", "t", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "x", ".", "shape", "[", "3", "]", ",", "t", ",", "nt", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "stride", "[", "1", "]", "+", "nt", "*", "stride", "[", "-", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_need_dad": [[261, 271], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided", "x.contiguous.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_need_dad", "(", "x", ",", "n", ",", "w", ",", "start", ",", "end", ",", "headstart", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start", "*", "stride", "[", "1", "]", "+", "(", "end", ")", "*", "stride", "[", "2", "]", "+", "headstart", "*", "stride", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.stripe_need_dad_add_": [[273, 285], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided", "x.contiguous.as_strided().copy_", "x.contiguous.stride", "x.contiguous.as_strided", "list", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_need_dad_add_", "(", "x", ",", "y", ",", "n", ",", "w", ",", "start", ",", "end", ",", "headstart", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start", "*", "stride", "[", "1", "]", "+", "(", "end", ")", "*", "stride", "[", "2", "]", "+", "headstart", "*", "stride", "[", "3", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start", "*", "stride", "[", "1", "]", "+", "(", "end", ")", "*", "stride", "[", "2", "]", "+", "headstart", "*", "stride", "[", "3", "]", ")", ".", "copy_", "(", "tmp", "+", "y", ")", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG.__init__": [[11, 13], ["parser.pcfgs.pcfgs.PCFG_base.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "L_PCFG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG.loss": [[14, 16], ["lpcfg.L_PCFG._inside"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside"], ["", "def", "loss", "(", "self", ",", "rules", ",", "lens", ")", ":", "\n", "        ", "return", "self", ".", "_inside", "(", "rules", ",", "lens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG.decode": [[17, 22], ["lpcfg.L_PCFG._inside_v2", "lpcfg.L_PCFG._mbr"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside_v2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._mbr"], ["", "def", "decode", "(", "self", ",", "rules", ",", "lens", ",", "mbr", "=", "True", ",", "viterbi", "=", "False", ",", "eval_dep", "=", "False", ")", ":", "\n", "        ", "if", "not", "eval_dep", ":", "\n", "            ", "return", "self", ".", "_inside_v2", "(", "rules", ",", "lens", ",", "decoding", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_mbr", "(", "rules", ",", "lens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside": [[24, 31], ["torch.enable_grad", "lexicalizedPCFG.apply"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply"], ["", "", "@", "torch", ".", "enable_grad", "(", ")", "\n", "def", "_inside", "(", "self", ",", "rules", ",", "lens", ",", "**", "kwargs", ")", ":", "\n", "        ", "unary", "=", "rules", "[", "'unary'", "]", "\n", "root", "=", "rules", "[", "'root'", "]", "\n", "rule", "=", "rules", "[", "'rule'", "]", "\n", "logZ", "=", "lexicalizedPCFG", ".", "apply", "(", "unary", ",", "rule", ",", "root", ")", "\n", "return", "{", "'partition'", ":", "logZ", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside_v2": [[34, 138], ["torch.enable_grad", "slice", "slice", "unary[].contiguous", "unary[].contiguous", "torch.zeros().fill_", "torch.zeros().fill_", "rule[].contiguous", "rule[].contiguous", "rule[].contiguous", "rule[].contiguous", "rule[].contiguous", "rule[].contiguous", "root.new_zeros().requires_grad_", "range", "final.logsumexp", "stripe().clone", "stripe().clone", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "torch.cat", "torch.utils.checkpoint.checkpoint", "torch.cat", "torch.stack.logsumexp", "lpcfg.diagonal_copy_v2", "lpcfg.diagonal_copy_", "torch.zeros", "torch.zeros", "root.new_zeros", "torch.zeros().fill_", "lpcfg.diagonal_copy_v2", "lpcfg.diagonal_copy_", "torch.zeros().fill_", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "torch.zeros().fill_.logsumexp", "[].clone", "lpcfg.stripe_grammar_rules", "lpcfg.stripe_grammar_rules", "[].clone", "lpcfg.stripe_grammar_rules", "torch.stack", "torch.stack", "lpcfg.L_PCFG._get_prediction", "torch.zeros().fill_.logsumexp", "lpcfg.stripe", "lpcfg.stripe", "lpcfg.stripe_version_nt_nt", "lpcfg.stripe_grammar_rules", "lpcfg.stripe_version_nt_nt", "lpcfg.stripe_grammar_rules", "torch.device", "torch.device", "torch.zeros", "torch.zeros", "lpcfg.stripe_grammar_rules", "lpcfg.stripe_grammar_rules", "lpcfg.stripe_grammar_rules", "lpcfg.stripe_version_nt_t", "lpcfg.stripe_version_t_nt", "torch.arange", "torch.device", "torch.arange", "torch.device", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.checkpoint", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.checkpoint", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.checkpoint", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_v2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_v2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.checkpoint", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.checkpoint", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base._get_prediction", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version_nt_nt", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version_nt_nt", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version_nt_t", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version_t_nt"], ["", "@", "torch", ".", "enable_grad", "(", ")", "\n", "def", "_inside_v2", "(", "self", ",", "rules", ",", "lens", ",", "decoding", "=", "False", ")", ":", "\n", "        ", "unary", "=", "rules", "[", "'unary'", "]", "\n", "root", "=", "rules", "[", "'root'", "]", "\n", "rule", "=", "rules", "[", "'rule'", "]", "\n", "# , N, _ = unary.shape", "\n", "B", ",", "D", ",", "N", ",", "NT", ",", "S", ",", "_", "=", "rule", ".", "shape", "\n", "T", "=", "S", "-", "NT", "\n", "nt_slice", "=", "slice", "(", "0", ",", "NT", ")", "\n", "t_slice", "=", "slice", "(", "NT", ",", "S", ")", "\n", "unary_t", "=", "unary", "[", "...", ",", "t_slice", "]", ".", "contiguous", "(", ")", "\n", "unary_nt", "=", "unary", "[", "...", ",", "nt_slice", "]", ".", "contiguous", "(", ")", "\n", "N", "+=", "1", "\n", "LEFT", "=", "0", "\n", "RIGHT", "=", "1", "\n", "beta", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "N", "-", "1", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "beta_closed", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "left_rule", "=", "rule", "[", ":", ",", "LEFT", ",", ":", ",", ":", ",", "nt_slice", ",", "nt_slice", "]", ".", "contiguous", "(", ")", "\n", "right_rule", "=", "rule", "[", ":", ",", "RIGHT", ",", ":", ",", ":", ",", "nt_slice", ",", "nt_slice", "]", ".", "contiguous", "(", ")", "\n", "# _term: headed by t.  _nonterm: headed by nt.", "\n", "right_rule_term", "=", "rule", "[", ":", ",", "RIGHT", ",", ":", ",", ":", ",", "nt_slice", ",", "t_slice", "]", ".", "contiguous", "(", ")", "\n", "right_rule_nonterm", "=", "rule", "[", ":", ",", "RIGHT", ",", ":", ",", ":", ",", "t_slice", ",", "nt_slice", "]", ".", "contiguous", "(", ")", "\n", "left_rule_term", "=", "rule", "[", ":", ",", "LEFT", ",", ":", ",", ":", ",", "t_slice", ",", "nt_slice", "]", ".", "contiguous", "(", ")", "\n", "left_rule_nonterm", "=", "rule", "[", ":", ",", "LEFT", ",", ":", ",", ":", ",", "nt_slice", ",", "t_slice", "]", ".", "contiguous", "(", ")", "\n", "\n", "span_indicator", "=", "root", ".", "new_zeros", "(", "B", ",", "N", ",", "N", ")", ".", "requires_grad_", "(", "decoding", ")", "\n", "\n", "\n", "def", "reduce_lasttwo_ab", "(", "a", ",", "b", ")", ":", "\n", "            ", "return", "(", "a", "+", "b", ")", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "\n", "", "def", "reduce_lasttwo_abc", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "            ", "return", "(", "a", "+", "b", "+", "c", ")", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "\n", "", "for", "w", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "            ", "n", "=", "N", "-", "w", "\n", "Y_term", "=", "unary_t", "[", ":", ",", ":", "n", ",", "...", "]", "\n", "Z_term", "=", "unary_t", "[", ":", ",", "w", "-", "1", ":", ",", "...", "]", "\n", "if", "w", "==", "2", ":", "\n", "                ", "headed", "=", "torch", ".", "zeros", "(", "B", ",", "n", ",", "2", ",", "NT", ",", "T", ",", "T", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "headed", "[", ":", ",", ":", ",", "LEFT", ",", "...", "]", "=", "Z_term", "[", ":", ",", ":", ",", "None", ",", "None", ",", ":", "]", "+", "rule", "[", ":", ",", "LEFT", ",", ":", "n", ",", ":", ",", "t_slice", ",", "t_slice", "]", "\n", "headed", "[", ":", ",", ":", ",", "RIGHT", ",", "...", "]", "=", "Y_term", "[", ":", ",", ":", ",", "None", ",", ":", ",", "None", "]", "+", "rule", "[", ":", ",", "RIGHT", ",", "w", "-", "1", ":", ",", ":", ",", "t_slice", ",", "t_slice", "]", "\n", "headed", "=", "headed", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "+", "span_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "w", "+", "torch", ".", "arange", "(", "n", ")", ",", "None", ",", "None", "]", "\n", "headed_closed", "=", "(", "headed", "+", "stripe_grammar_rules", "(", "unary_nt", ",", "n", ",", "w", ")", ")", ".", "logsumexp", "(", "2", ")", "\n", "diagonal_copy_v2", "(", "beta", ",", "headed", ",", "w", ")", "\n", "diagonal_copy_", "(", "beta_closed", ",", "headed_closed", ",", "w", ")", "\n", "continue", "\n", "\n", "", "Y_closed", "=", "stripe", "(", "beta_closed", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", ".", "clone", "(", ")", "\n", "Z_closed", "=", "stripe", "(", "beta_closed", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", ".", "clone", "(", ")", "\n", "\n", "if", "w", ">", "3", ":", "\n", "                ", "headed", "=", "torch", ".", "zeros", "(", "2", ",", "B", ",", "n", ",", "w", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "y", "=", "stripe_version_nt_nt", "(", "beta", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "[", "...", ",", "None", ",", ":", ",", "None", "]", "\n", "z", "=", "Z_closed", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "None", ",", "None", ",", "None", ",", ":", "]", "\n", "yz", "=", "(", "y", "+", "z", ")", ".", "logsumexp", "(", "2", ")", "\n", "# print(\"fuck\", yz)", "\n", "headed", "[", "0", ",", ":", ",", ":", ",", ":", "-", "2", "]", "=", "ckp", "(", "reduce_lasttwo_ab", ",", "yz", ",", "stripe_grammar_rules", "(", "left_rule", ",", "n", ",", "w", "-", "2", ")", ")", "\n", "y", "=", "Y_closed", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "None", ",", "None", ",", ":", ",", "None", "]", "\n", "z", "=", "stripe_version_nt_nt", "(", "beta", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "[", "...", ",", "None", ",", "None", ",", ":", "]", "\n", "yz", "=", "(", "y", "+", "z", ")", ".", "logsumexp", "(", "2", ")", "\n", "# print(\"fuck\", yz)", "\n", "headed", "[", "1", ",", ":", ",", ":", ",", "2", ":", "]", "=", "ckp", "(", "reduce_lasttwo_ab", ",", "yz", ",", "\n", "stripe_grammar_rules", "(", "right_rule", ",", "n", ",", "w", "-", "2", ",", "offset", "=", "2", ")", ")", "\n", "x_0", "=", "headed", ".", "logsumexp", "(", "0", ")", "\n", "\n", "", "y", "=", "Y_closed", "[", ":", ",", ":", ",", "-", "1", ",", "...", "]", "\n", "z", "=", "Z_term", "\n", "\n", "headed_left", "=", "ckp", "(", "reduce_lasttwo_abc", ",", "\n", "stripe_version_nt_t", "(", "beta", ",", "n", ",", "w", "-", "1", ")", "[", "...", ",", "None", ",", ":", ",", "None", "]", ".", "clone", "(", ")", ",", "\n", "stripe_grammar_rules", "(", "left_rule_nonterm", ",", "n", ",", "w", "-", "1", ")", ",", "\n", "z", "[", "...", ",", "None", ",", "None", ",", "None", ",", ":", "]", ")", "\n", "\n", "headed_right", "=", "ckp", "(", "reduce_lasttwo_ab", ",", "\n", "y", "[", "...", ",", "None", ",", "None", ",", ":", ",", "None", "]", ",", "\n", "stripe_grammar_rules", "(", "right_rule_term", ",", "n", ",", "1", ",", "offset", "=", "w", "-", "1", ")", ")", "\n", "x_1", "=", "torch", ".", "cat", "(", "[", "headed_left", ",", "headed_right", "]", ",", "dim", "=", "2", ")", "\n", "y", "=", "Y_term", "\n", "z", "=", "Z_closed", "[", ":", ",", ":", ",", "0", ",", "...", "]", "\n", "headed_left", "=", "(", "z", "[", "...", ",", "None", ",", "None", ",", "None", ",", ":", "]", "+", "stripe_grammar_rules", "(", "left_rule_term", ",", "n", ",", "1", ")", ")", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "headed_right", "=", "ckp", "(", "reduce_lasttwo_abc", ",", "\n", "stripe_version_t_nt", "(", "beta", ",", "n", ",", "w", "-", "1", ")", "[", "...", ",", "None", ",", "None", ",", ":", "]", ".", "clone", "(", ")", ",", "\n", "stripe_grammar_rules", "(", "right_rule_nonterm", ",", "n", ",", "w", "-", "1", ",", "offset", "=", "1", ")", ",", "\n", "y", "[", "...", ",", "None", ",", "None", ",", ":", ",", "None", "]", ")", "\n", "x_2", "=", "torch", ".", "cat", "(", "[", "headed_left", ",", "headed_right", "]", ",", "dim", "=", "2", ")", "\n", "if", "w", "==", "3", ":", "\n", "                ", "x", "=", "torch", ".", "stack", "(", "[", "x_1", ",", "x_2", "]", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "torch", ".", "stack", "(", "[", "x_0", ",", "x_1", ",", "x_2", "]", ")", "\n", "", "x", "=", "x", ".", "logsumexp", "(", "0", ")", "\n", "x", "=", "x", "+", "span_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "w", "+", "torch", ".", "arange", "(", "n", ")", ",", "None", ",", "None", "]", "\n", "x_closed", "=", "(", "x", "+", "stripe_grammar_rules", "(", "unary_nt", ",", "n", ",", "w", ")", ")", ".", "logsumexp", "(", "2", ")", "\n", "# if w < N-1:", "\n", "diagonal_copy_v2", "(", "beta", ",", "x", ",", "w", ")", "\n", "diagonal_copy_", "(", "beta_closed", ",", "x_closed", ",", "w", ")", "\n", "", "final", "=", "beta_closed", "[", ":", ",", "0", ",", "-", "1", ",", "...", "]", "+", "root", "\n", "logZ", "=", "final", ".", "logsumexp", "(", "-", "1", ")", "\n", "\n", "if", "not", "decoding", ":", "\n", "            ", "return", "{", "'partition'", ":", "logZ", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'prediction'", ":", "self", ".", "_get_prediction", "(", "logZ", ",", "span_indicator", ",", "lens", ",", "mbr", "=", "True", ")", ",", "\n", "'partition'", ":", "logZ", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._mbr": [[140, 309], ["slice", "slice", "unary[].contiguous", "unary[].contiguous", "torch.zeros().fill_", "torch.zeros().fill_", "rule[].contiguous", "rule[].contiguous", "rule[].contiguous", "rule[].contiguous", "rule[].contiguous", "rule[].contiguous", "lens.max", "torch.enable_grad", "torch.zeros().requires_grad_", "torch.zeros().requires_grad_", "root.unsqueeze().expand().detach().clone().requires_grad_.unsqueeze().expand().detach().clone().requires_grad_.unsqueeze().expand().detach().clone().requires_grad_", "range", "final.squeeze.squeeze.squeeze", "final.squeeze.squeeze.logsumexp", "final.squeeze.logsumexp.sum().backward", "root_attach.sum.sum.sum", "torch.zeros().fill_", "arc_marginals.transpose", "lpcfg.L_PCFG._cky_zero_order", "lpcfg.L_PCFG._eisner", "torch.zeros", "torch.zeros", "a.logsumexp", "stripe_version2().clone", "stripe_version2().clone", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "torch.cat", "torch.utils.checkpoint.checkpoint", "torch.cat", "torch.stack.logsumexp", "marginals.detach", "torch.zeros", "torch.zeros", "root.unsqueeze().expand().detach().clone().requires_grad_.unsqueeze().expand().detach().clone().requires_grad_.unsqueeze().expand().detach().clone", "torch.zeros().fill_", "torch.zeros().fill_.logsumexp", "torch.zeros().fill_", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "torch.zeros().fill_.logsumexp", "[].clone", "lpcfg.stripe_grammar_rules", "lpcfg.stripe_grammar_rules", "[].clone", "lpcfg.stripe_grammar_rules", "torch.stack", "torch.stack", "lpcfg.diagonal_copy_v2", "lpcfg.diagonal_copy_", "final.squeeze.logsumexp.sum", "torch.zeros", "range", "range", "torch.device", "torch.device", "lens.max", "lpcfg.diagonal_copy_v2", "lpcfg.diagonal_copy_", "lpcfg.stripe_version2", "lpcfg.stripe_version2", "lpcfg.stripe_version_nt_nt", "lpcfg.stripe_grammar_rules", "lpcfg.stripe_version_nt_nt", "lpcfg.stripe_grammar_rules", "lpcfg.stripe_grammar_rules", "torch.device", "torch.device", "root.unsqueeze().expand().detach().clone().requires_grad_.unsqueeze().expand().detach().clone().requires_grad_.unsqueeze().expand().detach", "torch.zeros", "lpcfg.stripe_grammar_rules", "torch.zeros", "lpcfg.stripe_grammar_rules", "torch.device", "lpcfg.stripe_version_nt_t", "lpcfg.stripe_version_t_nt", "torch.arange", "lpcfg.stripe_grammar_rules", "stripe_grammar_rules().unsqueeze", "root.unsqueeze().expand().detach().clone().requires_grad_.unsqueeze().expand().detach().clone().requires_grad_.unsqueeze().expand", "torch.device", "torch.arange", "torch.arange", "torch.arange", "stripe_grammar_rules().unsqueeze", "torch.device", "torch.arange", "torch.stack.unsqueeze", "stripe_grammar_rules().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.zeros().fill_.unsqueeze", "stripe_grammar_rules().unsqueeze", "lpcfg.stripe_grammar_rules", "root.unsqueeze().expand().detach().clone().requires_grad_.unsqueeze().expand().detach().clone().requires_grad_.unsqueeze", "lpcfg.stripe_grammar_rules", "lpcfg.stripe_grammar_rules", "lpcfg.stripe_grammar_rules"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.lexicalizedPCFG.backward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base._cky_zero_order", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.pcfgs.PCFG_base._eisner", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.checkpoint", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.checkpoint", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.checkpoint", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.checkpoint", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.fn.checkpoint", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_v2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_v2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version_nt_nt", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version_nt_nt", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version_nt_t", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version_t_nt", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules"], ["", "", "def", "_mbr", "(", "self", ",", "rules", ",", "lens", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "lens", ".", "max", "(", ")", "==", "1", ":", "\n", "            ", "return", "{", "'prediction'", ":", "[", "[", "]", "for", "_", "in", "range", "(", "lens", ".", "shape", "[", "0", "]", ")", "]", ",", "\n", "'prediction_arc'", ":", "[", "[", "(", "-", "1", ",", "0", ")", "]", "for", "_", "in", "range", "(", "lens", ".", "shape", "[", "0", "]", ")", "]", "}", "\n", "\n", "", "unary", "=", "rules", "[", "'unary'", "]", "\n", "root", "=", "rules", "[", "'root'", "]", "\n", "rule", "=", "rules", "[", "'rule'", "]", "\n", "\n", "# , N, _ = unary.shape", "\n", "B", ",", "D", ",", "N", ",", "NT", ",", "S", ",", "_", "=", "rule", ".", "shape", "\n", "nt_slice", "=", "slice", "(", "0", ",", "NT", ")", "\n", "t_slice", "=", "slice", "(", "NT", ",", "S", ")", "\n", "unary_t", "=", "unary", "[", "...", ",", "t_slice", "]", ".", "contiguous", "(", ")", "\n", "unary_nt", "=", "unary", "[", "...", ",", "nt_slice", "]", ".", "contiguous", "(", ")", "\n", "N", "+=", "1", "\n", "H", "=", "N", "-", "1", "\n", "T", "=", "S", "-", "NT", "\n", "LEFT", "=", "0", "\n", "RIGHT", "=", "1", "\n", "beta", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "N", "-", "1", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "beta_closed", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "left_rule", "=", "rule", "[", ":", ",", "LEFT", ",", ":", ",", ":", ",", "nt_slice", ",", "nt_slice", "]", ".", "contiguous", "(", ")", "\n", "right_rule", "=", "rule", "[", ":", ",", "RIGHT", ",", ":", ",", ":", ",", "nt_slice", ",", "nt_slice", "]", ".", "contiguous", "(", ")", "\n", "# _term: headed by t.  _nonterm: headed by nt.", "\n", "right_rule_term", "=", "rule", "[", ":", ",", "RIGHT", ",", ":", ",", ":", ",", "nt_slice", ",", "t_slice", "]", ".", "contiguous", "(", ")", "\n", "right_rule_nonterm", "=", "rule", "[", ":", ",", "RIGHT", ",", ":", ",", ":", ",", "t_slice", ",", "nt_slice", "]", ".", "contiguous", "(", ")", "\n", "left_rule_term", "=", "rule", "[", ":", ",", "LEFT", ",", ":", ",", ":", ",", "t_slice", ",", "nt_slice", "]", ".", "contiguous", "(", ")", "\n", "left_rule_nonterm", "=", "rule", "[", ":", ",", "LEFT", ",", ":", ",", ":", ",", "nt_slice", ",", "t_slice", "]", ".", "contiguous", "(", ")", "\n", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "arc_indicator", "=", "torch", ".", "zeros", "(", "B", ",", "N", "-", "1", ",", "N", "-", "1", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "requires_grad_", "(", "True", ")", "\n", "span_indicator", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", ".", "requires_grad_", "(", "True", ")", "\n", "root", "=", "root", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "B", ",", "H", ",", "NT", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "final", "=", "None", "\n", "\n", "def", "reduce_lasttwo_a", "(", "a", ")", ":", "\n", "                ", "return", "a", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "\n", "", "def", "reduce_lasttwo_ab", "(", "a", ",", "b", ")", ":", "\n", "                ", "return", "(", "a", "+", "b", ")", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "\n", "", "def", "reduce_lasttwo_abc", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "                ", "return", "(", "a", "+", "b", "+", "c", ")", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "\n", "", "for", "w", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "                ", "n", "=", "N", "-", "w", "\n", "Y_term", "=", "unary_t", "[", ":", ",", ":", "n", ",", "...", "]", "\n", "Z_term", "=", "unary_t", "[", ":", ",", "w", "-", "1", ":", ",", "...", "]", "\n", "if", "w", "==", "2", ":", "\n", "                    ", "headed", "=", "torch", ".", "zeros", "(", "B", ",", "n", ",", "2", ",", "NT", ",", "T", ",", "T", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "# print( Z_term[:, :, None, None, :].shape, rule[:, LEFT, :n, :, t_slice, t_slice].shape, arc_indicator[:, torch.arange(N) + 1, torch.arange(N).shape )", "\n", "\n", "headed", "[", ":", ",", ":", ",", "LEFT", ",", "...", "]", "=", "Z_term", "[", ":", ",", ":", ",", "None", ",", "None", ",", ":", "]", "+", "rule", "[", ":", ",", "LEFT", ",", ":", "n", ",", ":", ",", "t_slice", ",", "t_slice", "]", "+", "arc_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "torch", ".", "arange", "(", "n", ")", ",", "None", ",", "None", ",", "None", "]", "\n", "headed", "[", ":", ",", ":", ",", "RIGHT", ",", "...", "]", "=", "Y_term", "[", ":", ",", ":", ",", "None", ",", ":", ",", "None", "]", "+", "rule", "[", ":", ",", "RIGHT", ",", "w", "-", "1", ":", ",", ":", ",", "t_slice", ",", "t_slice", "]", "+", "arc_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "None", ",", "None", ",", "None", "]", "\n", "headed", "=", "headed", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "headed", "=", "headed", "+", "span_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", ",", "None", ",", "None", "]", "\n", "\n", "# headed: size? ( batch, n, w,  NT)", "\n", "if", "lens", ".", "max", "(", ")", ">", "2", ":", "\n", "                        ", "headed_closed", "=", "(", "headed", ".", "unsqueeze", "(", "-", "2", ")", "+", "\n", "stripe_grammar_rules", "(", "unary_nt", ",", "n", ",", "w", ")", ".", "unsqueeze", "(", "-", "2", ")", "+", "\n", "stripe_grammar_rules", "(", "arc_indicator", ",", "n", ",", "w", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", ")", ".", "logsumexp", "(", "2", ")", "\n", "\n", "diagonal_copy_v2", "(", "beta", ",", "headed", ",", "w", ")", "\n", "diagonal_copy_", "(", "beta_closed", ",", "headed_closed", ",", "w", ")", "\n", "", "else", ":", "\n", "                        ", "final", "=", "(", "headed", "+", "stripe_grammar_rules", "(", "unary_nt", ",", "n", ",", "w", ")", ")", "\n", "\n", "\n", "", "continue", "\n", "\n", "", "Y_closed", "=", "stripe_version2", "(", "beta_closed", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", ".", "clone", "(", ")", "\n", "Z_closed", "=", "stripe_version2", "(", "beta_closed", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", ".", "clone", "(", ")", "\n", "\n", "if", "w", ">", "3", ":", "\n", "                    ", "headed", "=", "torch", ".", "zeros", "(", "2", ",", "B", ",", "n", ",", "w", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "y", "=", "stripe_version_nt_nt", "(", "beta", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "[", "...", ",", "None", ",", ":", ",", "None", "]", "\n", "# print(y.shape)", "\n", "z", "=", "Z_closed", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", ",", "None", ",", "None", ",", ":", "]", "\n", "# print(z.shape)", "\n", "# print(y.shape, z.shape, \"??????\")", "\n", "\n", "yz", "=", "(", "y", "+", "z", ")", ".", "logsumexp", "(", "2", ")", "\n", "headed", "[", "0", ",", ":", ",", ":", ",", ":", "-", "2", "]", "=", "ckp", "(", "reduce_lasttwo_ab", ",", "yz", ",", "stripe_grammar_rules", "(", "left_rule", ",", "n", ",", "w", "-", "2", ")", ")", "\n", "y", "=", "Y_closed", "[", ":", ",", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", ",", "None", ",", ":", ",", "None", "]", "\n", "z", "=", "stripe_version_nt_nt", "(", "beta", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "[", "...", ",", "None", ",", "None", ",", ":", "]", "\n", "yz", "=", "(", "y", "+", "z", ")", ".", "logsumexp", "(", "2", ")", "\n", "\n", "headed", "[", "1", ",", ":", ",", ":", ",", "2", ":", "]", "=", "ckp", "(", "reduce_lasttwo_ab", ",", "yz", ",", "\n", "stripe_grammar_rules", "(", "right_rule", ",", "n", ",", "w", "-", "2", ",", "offset", "=", "2", ")", ")", "\n", "x_0", "=", "headed", ".", "logsumexp", "(", "0", ")", "\n", "\n", "", "y", "=", "Y_closed", "[", ":", ",", ":", ",", "-", "1", ",", "None", ",", "-", "1", ",", "...", "]", "\n", "z", "=", "Z_term", "\n", "\n", "headed_left", "=", "ckp", "(", "reduce_lasttwo_abc", ",", "\n", "stripe_version_nt_t", "(", "beta", ",", "n", ",", "w", "-", "1", ")", "[", "...", ",", "None", ",", ":", ",", "None", "]", ".", "clone", "(", ")", ",", "\n", "stripe_grammar_rules", "(", "left_rule_nonterm", ",", "n", ",", "w", "-", "1", ")", ",", "\n", "z", "[", "...", ",", "None", ",", "None", ",", "None", ",", ":", "]", ")", "\n", "\n", "# print(stripe_grammar_rules(right_rule_term, n, 1, offset=w - 1).shape)", "\n", "# print(y.shape)", "\n", "headed_right", "=", "ckp", "(", "reduce_lasttwo_ab", ",", "\n", "y", "[", "...", ",", "None", ",", ":", ",", "None", "]", ",", "\n", "stripe_grammar_rules", "(", "right_rule_term", ",", "n", ",", "1", ",", "offset", "=", "w", "-", "1", ")", ")", "\n", "# print(headed_right.shape, \"suppose to 1.\")", "\n", "\n", "x_1", "=", "torch", ".", "cat", "(", "[", "headed_left", ",", "headed_right", "]", ",", "dim", "=", "2", ")", "\n", "\n", "y", "=", "Y_term", "\n", "\n", "z", "=", "Z_closed", "[", ":", ",", ":", ",", "0", ",", "None", ",", "0", ",", "...", "]", "\n", "\n", "\n", "headed_left", "=", "(", "z", "[", "...", ",", "None", ",", "None", ",", ":", "]", "+", "stripe_grammar_rules", "(", "left_rule_term", ",", "n", ",", "1", ")", ")", ".", "logsumexp", "(", "\n", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "\n", "headed_right", "=", "ckp", "(", "reduce_lasttwo_abc", ",", "\n", "stripe_version_t_nt", "(", "beta", ",", "n", ",", "w", "-", "1", ")", "[", "...", ",", "None", ",", "None", ",", ":", "]", ".", "clone", "(", ")", ",", "\n", "stripe_grammar_rules", "(", "right_rule_nonterm", ",", "n", ",", "w", "-", "1", ",", "offset", "=", "1", ")", ",", "\n", "y", "[", "...", ",", "None", ",", "None", ",", ":", ",", "None", "]", ")", "\n", "\n", "x_2", "=", "torch", ".", "cat", "(", "[", "headed_left", ",", "headed_right", "]", ",", "dim", "=", "2", ")", "\n", "if", "w", "==", "3", ":", "\n", "                    ", "x", "=", "torch", ".", "stack", "(", "[", "x_1", ",", "x_2", "]", ")", "\n", "", "else", ":", "\n", "# print(x_0.shape,)", "\n", "# print(x_1.shape)", "\n", "# print(x_2.shape)", "\n", "                    ", "x", "=", "torch", ".", "stack", "(", "[", "x_0", ",", "x_1", ",", "x_2", "]", ")", "\n", "", "x", "=", "x", ".", "logsumexp", "(", "0", ")", "\n", "# print(x.shape, '?????')", "\n", "\n", "x", "=", "x", "+", "span_indicator", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", ",", "None", ",", "None", "]", "\n", "\n", "if", "w", "<", "N", "-", "1", ":", "\n", "                    ", "(", "x", "+", "stripe_grammar_rules", "(", "unary_nt", ",", "n", ",", "w", ")", ")", ".", "logsumexp", "(", "2", ")", "\n", "x_closed", "=", "(", "x", ".", "unsqueeze", "(", "-", "2", ")", "+", "\n", "stripe_grammar_rules", "(", "unary_nt", ",", "n", ",", "w", ")", ".", "unsqueeze", "(", "-", "2", ")", "+", "\n", "stripe_grammar_rules", "(", "arc_indicator", ",", "n", ",", "w", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", ")", ".", "logsumexp", "(", "2", ")", "\n", "diagonal_copy_v2", "(", "beta", ",", "x", ",", "w", ")", "\n", "diagonal_copy_", "(", "beta_closed", ",", "x_closed", ",", "w", ")", "\n", "", "else", ":", "\n", "                    ", "final", "=", "(", "x", "+", "stripe_grammar_rules", "(", "unary_nt", ",", "n", ",", "w", ")", ")", "\n", "\n", "", "", "final", "=", "final", ".", "squeeze", "(", "1", ")", "\n", "final", "=", "final", "+", "root", "\n", "# print(final.shape)", "\n", "logZ", "=", "final", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "\n", "# print(logZ)", "\n", "logZ", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "marginals", "=", "span_indicator", ".", "grad", "\n", "arc_marginals", "=", "arc_indicator", ".", "grad", "\n", "root_attach", "=", "root", ".", "grad", "\n", "root_attach", "=", "root_attach", ".", "sum", "(", "-", "1", ")", "\n", "attach", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "attach", "[", ":", ",", "0", ",", "1", ":", "]", "=", "root_attach", "\n", "attach", "[", ":", ",", "1", ":", ",", "1", ":", "]", "=", "arc_marginals", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "del", "beta", ",", "beta_closed", "\n", "prediction", "=", "self", ".", "_cky_zero_order", "(", "marginals", ".", "detach", "(", ")", ",", "lens", ")", "\n", "arc_prediction", "=", "self", ".", "_eisner", "(", "attach", ",", "lens", ")", "\n", "return", "{", "'partition'", ":", "logZ", ",", "\n", "'prediction'", ":", "prediction", ",", "\n", "'prediction_arc'", ":", "arc_prediction", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.lexicalizedPCFG.forward": [[314, 525], ["root.squeeze.squeeze.squeeze", "slice", "slice", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "rule.transpose().contiguous", "range", "range", "s_final.logsumexp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "lpcfg.diagonal_copy_", "torch.zeros().fill_", "lpcfg.diagonal", "lpcfg.diagonal_v2", "lpcfg.diagonal_v2", "torch.zeros", "torch.zeros", "torch.zeros", "rule.transpose", "torch.zeros().fill_", "torch.stack().logsumexp.logsumexp", "lpcfg.diagonal_copy_v2", "lpcfg.stripe_version2", "lpcfg.stripe_version2", "lpcfg.stripe_version2", "lpcfg.stripe_version2", "torch.stack().logsumexp", "torch.logaddexp", "torch.logaddexp", "lpcfg.diagonal_copy_v2", "range", "sss.logsumexp.logsumexp.logsumexp", "range", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.zeros", "torch.zeros", "range", "torch.zeros.add_().exp_().mul_", "torch.zeros.sum", "range", "out_gradient.mul_", "range", "lpcfg.stripe_version2", "lpcfg.stripe_version2", "lpcfg.stripe_version2", "lpcfg.stripe_version2", "lpcfg.stripe_version2_add", "lpcfg.stripe_version2_add", "lpcfg.stripe_version2_add", "lpcfg.stripe_version2_add", "stripe_version2.sum", "stripe_version2.sum", "tmp.sum", "tmp.sum", "torch.zeros", "s_final.logsumexp.unsqueeze", "gradient_root.unsqueeze", "torch.zeros.unsqueeze", "diagonal().unsqueeze", "range", "diagonal_v2.unsqueeze().unsqueeze", "diagonal_v2.unsqueeze().unsqueeze", "stripe_version2.sum", "stripe_version2.sum", "b_n_h_x[].unsqueeze().unsqueeze", "b_n_h_x[].unsqueeze().unsqueeze", "b_n_h_x[].unsqueeze().unsqueeze", "b_n_h_x[].unsqueeze().unsqueeze", "torch.device", "torch.device", "torch.device", "torch.zeros", "torch.stack", "lpcfg.stripe_grammar_rules", "torch.device", "torch.device", "torch.zeros.add_().exp_", "out_s_need_dad[].transpose", "torch.device", "s_need_dad[].unsqueeze", "s_need_dad[].unsqueeze", "torch.arange", "diagonal.unsqueeze", "lpcfg.diagonal", "tmp.sum", "tmp.sum", "diagonal_v2.unsqueeze", "diagonal_v2.unsqueeze", "b_n_h_x[].unsqueeze", "b_n_h_x[].unsqueeze", "torch.arange", "torch.arange", "b_n_h_x[].unsqueeze", "torch.arange", "b_n_h_x[].unsqueeze", "torch.arange", "torch.device", "torch.arange", "torch.arange", "s_closed[].unsqueeze", "torch.zeros.add_", "torch.arange", "lpcfg.stripe_grammar_rules", "out_need_dad[].unsqueeze", "out_need_dad[].unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack().logsumexp.unsqueeze().unsqueeze", "torch.stack().logsumexp.unsqueeze().unsqueeze", "headed[].unsqueeze().unsqueeze", "headed[].unsqueeze().unsqueeze", "torch.arange", "torch.arange", "headed[].unsqueeze().unsqueeze", "headed[].unsqueeze().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack().logsumexp.unsqueeze", "torch.stack().logsumexp.unsqueeze", "headed[].unsqueeze", "headed[].unsqueeze", "headed[].unsqueeze", "headed[].unsqueeze", "torch.arange", "torch.arange", "s_need_dad[].unsqueeze", "s_need_dad[].unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_v2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_v2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_v2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_v2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2_add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2_add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2_add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2_add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "unary", ",", "rule", ",", "root", ")", ":", "\n", "        ", "root", "=", "root", ".", "squeeze", "(", "1", ")", "\n", "LEFT", "=", "0", "\n", "RIGHT", "=", "1", "\n", "B", ",", "D", ",", "H", ",", "NT", ",", "S", ",", "_", "=", "rule", ".", "shape", "\n", "T", "=", "S", "-", "NT", "\n", "N", "=", "H", "+", "1", "\n", "nt_slice", "=", "slice", "(", "0", ",", "NT", ")", "\n", "t_slice", "=", "slice", "(", "NT", ",", "S", ")", "\n", "s", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "s_closed", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "s_need_dad", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "NT", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "rule_t", "=", "rule", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "N", "-", "1", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "s_need_dad", "[", ":", ",", "i", ",", "i", "+", "1", ",", ":", "i", "]", "=", "(", "\n", "unary", "[", ":", ",", "i", ",", "None", ",", "None", ",", "None", ",", "t_slice", "]", "+", "rule", "[", ":", ",", "LEFT", ",", ":", "i", ",", ":", ",", "nt_slice", ",", "t_slice", "]", ")", ".", "logsumexp", "(", "\n", "-", "1", ")", "\n", "", "if", "i", "<", "N", "-", "1", ":", "\n", "                ", "s_need_dad", "[", ":", ",", "i", ",", "i", "+", "1", ",", "i", "+", "1", ":", "]", "=", "(", "\n", "unary", "[", ":", ",", "i", ",", "None", ",", "None", ",", "t_slice", ",", "None", "]", "+", "rule", "[", ":", ",", "RIGHT", ",", "i", "+", "1", ":", ",", ":", ",", "t_slice", ",", "\n", "nt_slice", "]", ")", ".", "logsumexp", "(", "-", "2", ")", "\n", "\n", "", "", "LEFT", "=", "0", "\n", "RIGHT", "=", "1", "\n", "\n", "for", "w", "in", "range", "(", "2", ",", "N", ")", ":", "\n", "            ", "n", "=", "N", "-", "w", "\n", "if", "w", "==", "2", ":", "\n", "                ", "headed", "=", "torch", ".", "zeros", "(", "B", ",", "n", ",", "w", ",", "NT", ",", "T", ",", "T", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "headed", "[", ":", ",", ":", ",", "LEFT", ",", "...", "]", "=", "(", "\n", "unary", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "None", ",", "None", ",", "t_slice", "]", "+", "rule", "[", ":", ",", "LEFT", ",", "torch", ".", "arange", "(", "n", ")", ",", ":", ",", "\n", "t_slice", ",", "t_slice", "]", ")", "\n", "headed", "[", ":", ",", ":", ",", "RIGHT", ",", "...", "]", "=", "(", "\n", "unary", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "None", ",", "t_slice", ",", "None", "]", "+", "rule", "[", ":", ",", "RIGHT", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", ":", ",", "\n", "t_slice", ",", "t_slice", "]", ")", "\n", "headed", "=", "headed", ".", "logsumexp", "(", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "diagonal_copy_v2", "(", "s", ",", "headed", ",", "w", ")", "\n", "", "else", ":", "\n", "                ", "left", "=", "stripe_version2", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "right", "=", "stripe_version2", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "left_need_dad", "=", "stripe_version2", "(", "s_need_dad", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "right_need_dad", "=", "stripe_version2", "(", "s_need_dad", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "left", "=", "(", "left", "[", ":", ",", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", "+", "right_need_dad", ")", ".", "logsumexp", "(", "[", "2", ",", "-", "1", "]", ")", "\n", "right", "=", "(", "right", "[", ":", ",", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", "+", "left_need_dad", ")", ".", "logsumexp", "(", "[", "2", ",", "-", "1", "]", ")", "\n", "headed", "=", "torch", ".", "stack", "(", "[", "left", ",", "right", "]", ")", ".", "logsumexp", "(", "0", ")", "\n", "# headed by left most element of the span. [i, i+1] + [i+1, j] -> [i, j], headed by element i.", "\n", "left", "=", "(", "s_closed", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", ",", "None", ",", "None", ",", ":", "]", "+", "rule", "[", ":", ",", "LEFT", ",", "\n", "torch", ".", "arange", "(", "n", ")", ",", ":", ",", "\n", "t_slice", ",", "\n", "nt_slice", "]", ")", ".", "logsumexp", "(", "\n", "[", "-", "2", ",", "-", "1", "]", ")", "\n", "# headed by right most element of the span.", "\n", "right", "=", "(", "s_closed", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", "-", "1", ",", "None", ",", ":", ",", "None", "]", "+", "rule", "[", ":", ",", "RIGHT", ",", "\n", "torch", ".", "arange", "(", "n", ")", "+", "w", "-", "1", ",", "\n", ":", ",", "nt_slice", ",", "\n", "t_slice", "]", ")", ".", "logsumexp", "(", "\n", "[", "-", "1", ",", "-", "2", "]", ")", "\n", "headed", "[", ":", ",", ":", ",", "0", "]", "=", "torch", ".", "logaddexp", "(", "headed", "[", ":", ",", ":", ",", "0", "]", ",", "left", ")", "\n", "headed", "[", ":", ",", ":", ",", "-", "1", "]", "=", "torch", ".", "logaddexp", "(", "headed", "[", ":", ",", ":", ",", "-", "1", "]", ",", "right", ")", "\n", "diagonal_copy_v2", "(", "s", ",", "headed", ",", "w", ")", "\n", "", "headed", "=", "(", "headed", "+", "stripe_grammar_rules", "(", "unary", "[", "...", ",", "nt_slice", "]", ",", "n", ",", "w", ")", ")", ".", "logsumexp", "(", "2", ")", "\n", "diagonal_copy_", "(", "s_closed", ",", "headed", ",", "w", ")", "\n", "sss", "=", "torch", ".", "zeros", "(", "B", ",", "N", "-", "w", ",", "N", "-", "w", "-", "1", ",", "NT", ",", "NT", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "fill_", "(", "-", "1e9", ")", "\n", "if", "w", "<", "N", "-", "1", ":", "\n", "                ", "for", "l", "in", "range", "(", "N", "-", "w", ")", ":", "\n", "                    ", "r", "=", "w", "+", "l", "\n", "if", "l", ">", "0", ":", "\n", "                        ", "sss", "[", ":", ",", "l", ",", ":", "l", "]", "=", "(", "headed", "[", ":", ",", "l", ",", "None", ",", "None", ",", "None", ",", ":", "]", "+", "rule", "[", ":", ",", "LEFT", ",", ":", "l", ",", ":", ",", "nt_slice", ",", "nt_slice", "]", ")", "\n", "", "if", "r", "<", "N", "-", "1", ":", "\n", "                        ", "sss", "[", ":", ",", "l", ",", "l", ":", "]", "=", "(", "\n", "headed", "[", ":", ",", "l", ",", "None", ",", "None", ",", "None", ",", ":", "]", "+", "rule_t", "[", ":", ",", "RIGHT", ",", "r", ":", ",", ":", ",", "nt_slice", ",", "nt_slice", "]", ")", "\n", "", "", "sss", "=", "sss", ".", "logsumexp", "(", "-", "1", ")", "\n", "for", "l", "in", "range", "(", "N", "-", "w", ")", ":", "\n", "                    ", "r", "=", "w", "+", "l", "\n", "s_need_dad", "[", ":", ",", "l", ",", "r", ",", ":", "l", "]", "=", "sss", "[", ":", ",", "l", ",", ":", "l", "]", "\n", "s_need_dad", "[", ":", ",", "l", ",", "r", ",", "r", ":", "]", "=", "sss", "[", ":", ",", "l", ",", "l", ":", "]", "\n", "\n", "", "", "", "s_final", "=", "s_closed", "[", ":", ",", "0", ",", "-", "1", "]", "+", "root", "\n", "\n", "logZ", "=", "(", "s_final", ")", ".", "logsumexp", "(", "-", "1", ")", "\n", "\n", "gradient_unary", "=", "torch", ".", "zeros", "(", "B", ",", "H", ",", "S", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "gradient_rule", "=", "torch", ".", "zeros", "(", "B", ",", "2", ",", "H", ",", "NT", ",", "S", ",", "S", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "out", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", "\n", "out_closed", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", "\n", "out_need_dad", "=", "torch", ".", "zeros", "(", "B", ",", "N", ",", "N", ",", "H", ",", "NT", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "gradient_root", "=", "(", "s_final", "-", "logZ", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp_", "(", ")", "\n", "out_closed", "[", ":", ",", "0", ",", "-", "1", ",", "]", "=", "(", "gradient_root", ".", "unsqueeze", "(", "-", "2", ")", "*", "(", "\n", "s", "[", ":", ",", "0", ",", "-", "1", "]", "+", "unary", "[", ":", ",", ":", ",", "nt_slice", "]", "-", "s_closed", "[", ":", ",", "0", ",", "-", "1", "]", ".", "unsqueeze", "(", "-", "2", ")", ")", ".", "exp_", "(", ")", ")", ".", "sum", "(", "1", ")", "\n", "\n", "for", "w", "in", "range", "(", "N", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "n", "=", "N", "-", "w", "\n", "headed_closed", "=", "diagonal", "(", "s_closed", ",", "w", ")", "\n", "headed", "=", "diagonal_v2", "(", "s", ",", "w", ")", "\n", "\n", "if", "w", ">", "1", ":", "\n", "                ", "out_s_need_dad", "=", "torch", ".", "zeros", "(", "B", ",", "N", "-", "w", ",", "N", "-", "w", "-", "1", ",", "NT", ",", "NT", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", "\n", "out_need_dad_gradient", "=", "torch", ".", "zeros", "(", "B", ",", "n", ",", "n", "-", "1", ",", "NT", ",", "NT", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "for", "l", "in", "range", "(", "N", "-", "w", ")", ":", "\n", "                    ", "r", "=", "l", "+", "w", "\n", "if", "l", ">", "0", ":", "\n", "                        ", "out_s_need_dad", "[", ":", ",", "l", ",", ":", "l", ",", "...", "]", "=", "(", "rule", "[", ":", ",", "LEFT", ",", ":", "l", ",", ":", ",", "nt_slice", ",", "nt_slice", "]", "-", "s_need_dad", "[", ":", ",", "l", ",", "r", ",", "\n", ":", "l", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "out_need_dad_gradient", "[", ":", ",", "l", ",", ":", "l", "]", "=", "out_need_dad", "[", ":", ",", "l", ",", "r", ",", ":", "l", "]", "\n", "", "if", "r", "<", "N", "-", "1", ":", "\n", "                        ", "out_s_need_dad", "[", ":", ",", "l", ",", "l", ":", ",", "...", "]", "=", "(", "\n", "rule_t", "[", ":", ",", "RIGHT", ",", "r", ":", ",", ":", ",", "nt_slice", ",", "nt_slice", "]", "-", "s_need_dad", "[", ":", ",", "l", ",", "r", ",", "r", ":", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "out_need_dad_gradient", "[", ":", ",", "l", ",", "l", ":", "]", "=", "out_need_dad", "[", ":", ",", "l", ",", "r", ",", "r", ":", "]", "\n", "\n", "", "", "out_s_need_dad", ".", "add_", "(", "headed_closed", "[", ":", ",", ":", ",", "None", ",", "None", ",", "None", ",", ":", "]", ")", ".", "exp_", "(", ")", ".", "mul_", "(", "\n", "out_need_dad_gradient", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "out_closed", "[", ":", ",", "torch", ".", "arange", "(", "N", "-", "w", ")", ",", "torch", ".", "arange", "(", "N", "-", "w", ")", "+", "w", "]", "+=", "out_s_need_dad", ".", "sum", "(", "[", "-", "2", ",", "-", "3", ",", "-", "4", "]", ")", "\n", "\n", "for", "l", "in", "range", "(", "N", "-", "w", ")", ":", "\n", "                    ", "r", "=", "l", "+", "w", "\n", "if", "l", ">", "0", ":", "\n", "                        ", "gradient_rule", "[", ":", ",", "LEFT", ",", ":", "l", ",", ":", ",", "nt_slice", ",", "nt_slice", "]", "+=", "out_s_need_dad", "[", ":", ",", "l", ",", ":", "l", ",", "...", "]", "\n", "", "if", "r", "<", "N", "-", "1", ":", "\n", "                        ", "gradient_rule", "[", ":", ",", "RIGHT", ",", "r", ":", ",", ":", ",", "nt_slice", ",", "nt_slice", "]", "+=", "out_s_need_dad", "[", ":", ",", "l", ",", "l", ":", ",", "...", "]", ".", "transpose", "(", "\n", "-", "1", ",", "-", "2", ")", "\n", "\n", "", "", "out_gradient", "=", "(", "headed", "+", "stripe_grammar_rules", "(", "unary", "[", "...", ",", "nt_slice", "]", ",", "n", ",", "w", ")", "-", "headed_closed", ".", "unsqueeze", "(", "\n", "2", ")", ")", ".", "exp_", "(", ")", "\n", "\n", "out_gradient", ".", "mul_", "(", "diagonal", "(", "out_closed", ",", "w", ")", ".", "unsqueeze", "(", "2", ")", ")", "\n", "\n", "for", "l", "in", "range", "(", "N", "-", "w", ")", ":", "\n", "                    ", "r", "=", "l", "+", "w", "\n", "out", "[", ":", ",", "l", ",", "r", ",", "l", ":", "r", "]", "+=", "out_gradient", "[", ":", ",", "l", ",", "]", "\n", "gradient_unary", "[", ":", ",", "l", ":", "r", ",", "nt_slice", "]", "+=", "out_gradient", "[", ":", ",", "l", ",", "]", "\n", "\n", "", "", "elif", "w", "==", "1", ":", "\n", "\n", "                ", "for", "l", "in", "range", "(", "N", "-", "w", ")", ":", "\n", "                    ", "if", "l", ">", "1", ":", "\n", "                        ", "tmp", "=", "(", "unary", "[", ":", ",", "l", ",", "None", ",", "None", ",", "None", ",", "t_slice", "]", "+", "rule", "[", ":", ",", "LEFT", ",", ":", "l", ",", ":", ",", "nt_slice", ",", "\n", "t_slice", "]", "-", "s_need_dad", "[", ":", ",", "l", ",", "l", "+", "1", ",", "\n", ":", "l", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp_", "(", ")", ".", "mul_", "(", "\n", "out_need_dad", "[", ":", ",", "l", ",", "l", "+", "1", ",", ":", "l", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "gradient_unary", "[", ":", ",", "l", ",", "t_slice", "]", "+=", "tmp", ".", "sum", "(", "[", "-", "2", ",", "-", "3", ",", "-", "4", "]", ")", "\n", "gradient_rule", "[", ":", ",", "LEFT", ",", ":", "l", ",", ":", ",", "nt_slice", ",", "t_slice", "]", "+=", "tmp", "\n", "\n", "", "if", "(", "l", "+", "1", ")", "<", "N", "-", "2", ":", "\n", "                        ", "tmp", "=", "(", "unary", "[", ":", ",", "l", ",", "None", ",", "None", ",", "t_slice", ",", "None", "]", "+", "rule", "[", ":", ",", "RIGHT", ",", "l", "+", "1", ":", ",", ":", ",", "t_slice", ",", "\n", "nt_slice", "]", "-", "s_need_dad", "[", ":", ",", "l", ",", "l", "+", "1", ",", "\n", "l", "+", "1", ":", "]", ".", "unsqueeze", "(", "-", "2", ")", ")", ".", "exp_", "(", ")", ".", "mul_", "(", "\n", "out_need_dad", "[", ":", ",", "l", ",", "l", "+", "1", ",", "l", "+", "1", ":", "]", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "gradient_unary", "[", ":", ",", "l", ",", "t_slice", "]", "+=", "tmp", ".", "sum", "(", "[", "-", "1", ",", "-", "3", ",", "-", "4", "]", ")", "\n", "gradient_rule", "[", ":", ",", "RIGHT", ",", "l", "+", "1", ":", ",", ":", ",", "t_slice", ",", "nt_slice", "]", "+=", "tmp", "\n", "\n", "", "", "", "b_n_h_x", "=", "diagonal_v2", "(", "out", ",", "w", ")", "\n", "\n", "if", "w", ">", "2", ":", "\n", "                ", "left", "=", "stripe_version2", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "right", "=", "stripe_version2", "(", "s", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "left_need_dad", "=", "stripe_version2", "(", "s_need_dad", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "right_need_dad", "=", "stripe_version2", "(", "s_need_dad", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "left", "=", "(", "left", "[", ":", ",", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", "+", "right_need_dad", "-", "headed", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp_", "(", ")", ".", "mul_", "(", "\n", "b_n_h_x", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "right", "=", "(", "right", "[", ":", ",", ":", ",", ":", ",", ":", ",", "None", ",", ":", "]", "+", "left_need_dad", "-", "headed", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp_", "(", ")", ".", "mul_", "(", "\n", "b_n_h_x", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "stripe_version2_add", "(", "out", ",", "left", ".", "sum", "(", "-", "2", ")", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "stripe_version2_add", "(", "out_need_dad", ",", "left", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "\n", "stripe_version2_add", "(", "out", ",", "right", ".", "sum", "(", "-", "2", ")", ",", "n", ",", "w", "-", "1", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "stripe_version2_add", "(", "out_need_dad", ",", "right", ",", "n", ",", "w", "-", "1", ",", "(", "0", ",", "1", ")", ")", "\n", "\n", "left", "=", "(", "s_closed", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", ",", "None", ",", "None", ",", ":", "]", "+", "rule", "[", ":", ",", "LEFT", ",", "\n", "torch", ".", "arange", "(", "n", ")", ",", ":", ",", "\n", "t_slice", ",", "\n", "nt_slice", "]", "-", "headed", "[", ":", ",", ":", ",", "\n", "0", "]", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp_", "(", ")", ".", "mul_", "(", "b_n_h_x", "[", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "right", "=", "(", "s_closed", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", "-", "1", ",", "None", ",", ":", ",", "None", "]", "+", "rule", "[", ":", ",", "RIGHT", ",", "\n", "torch", ".", "arange", "(", "n", ")", "+", "w", "-", "1", ",", "\n", ":", ",", "nt_slice", ",", "\n", "t_slice", "]", "-", "headed", "[", ":", ",", ":", ",", "\n", "-", "1", "]", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp_", "(", ")", ".", "mul_", "(", "b_n_h_x", "[", ":", ",", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "gradient_rule", "[", ":", ",", "LEFT", ",", "torch", ".", "arange", "(", "n", ")", ",", ":", ",", "t_slice", ",", "nt_slice", "]", "+=", "left", "\n", "gradient_rule", "[", ":", ",", "RIGHT", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", "-", "1", ",", ":", ",", "nt_slice", ",", "t_slice", "]", "+=", "right", "\n", "\n", "out_closed", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", "]", "+=", "left", ".", "sum", "(", "[", "-", "2", ",", "-", "3", "]", ")", "\n", "out_closed", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "torch", ".", "arange", "(", "n", ")", "+", "w", "-", "1", "]", "+=", "right", ".", "sum", "(", "[", "-", "1", ",", "-", "3", "]", ")", "\n", "\n", "", "if", "w", "==", "2", ":", "\n", "                ", "tmp", "=", "(", "unary", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "None", ",", "t_slice", ",", "None", "]", "+", "rule", "[", ":", ",", "RIGHT", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", ":", ",", "\n", "t_slice", ",", "t_slice", "]", "-", "headed", "[", ":", ",", ":", ",", "1", ",", "\n", "...", "]", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp_", "(", ")", ".", "mul_", "(", "b_n_h_x", "[", ":", ",", ":", ",", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "gradient_rule", "[", ":", ",", "RIGHT", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", ":", ",", "t_slice", ",", "t_slice", "]", "+=", "tmp", "\n", "\n", "gradient_unary", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", ",", "t_slice", "]", "+=", "tmp", ".", "sum", "(", "[", "-", "1", ",", "-", "3", "]", ")", "\n", "\n", "tmp", "=", "(", "unary", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "None", ",", "None", ",", "t_slice", "]", "+", "rule", "[", ":", ",", "LEFT", ",", "torch", ".", "arange", "(", "n", ")", ",", ":", ",", "t_slice", ",", "\n", "t_slice", "]", "-", "headed", "[", ":", ",", ":", ",", "0", ",", "...", "]", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "exp_", "(", ")", ".", "mul_", "(", "b_n_h_x", "[", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "gradient_rule", "[", ":", ",", "LEFT", ",", "torch", ".", "arange", "(", "n", ")", ",", ":", ",", "t_slice", ",", "t_slice", "]", "+=", "tmp", "\n", "gradient_unary", "[", ":", ",", "torch", ".", "arange", "(", "n", ")", "+", "1", ",", "t_slice", "]", "+=", "tmp", ".", "sum", "(", "[", "-", "2", ",", "-", "3", "]", ")", "\n", "\n", "", "", "ctx", ".", "rule_gradient", "=", "gradient_rule", "\n", "ctx", ".", "root_gradient", "=", "gradient_root", "\n", "ctx", ".", "unary_gradient", "=", "gradient_unary", "\n", "return", "logZ", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.lexicalizedPCFG.backward": [[526, 531], ["grad_output.max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "multiplier", "=", "grad_output", ".", "max", "(", ")", "\n", "# unary, rule, root", "\n", "return", "ctx", ".", "unary_gradient", "*", "multiplier", ",", "ctx", ".", "rule_gradient", "*", "multiplier", ",", "(", "ctx", ".", "root_gradient", "*", "multiplier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_need_left_parent": [[548, 559], ["list", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "stripe_need_left_parent", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "(", "seq_len", "+", "1", ")", "*", "numel", ")", "\n", "new_stride", ".", "extend", "(", "*", "stride", "[", "2", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_left": [[561, 573], ["list", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_left", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "# stride[1] = (seq_len + 1) * numel", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "(", "seq_len", "+", "1", ")", "*", "numel", ")", "\n", "new_stride", ".", "extend", "(", "*", "stride", "[", "2", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_right": [[575, 589], ["list", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous", "x.size", "x.stride", "x.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_right", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "# stride[1] = (seq_len + 1) * numel", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "(", "seq_len", "+", "1", ")", "*", "numel", ")", "\n", "new_stride", ".", "extend", "(", "*", "stride", "[", "2", ":", "]", ")", "\n", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "+", "(", "w", "-", "1", ")", "*", "numel", "*", "(", "\n", "1", "if", "dim", "==", "0", "else", "seq_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_proper": [[590, 602], ["list", "x.contiguous", "x.size", "x.stride", "len", "x.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_proper", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "stride", "[", "1", "]", "=", "(", "seq_len", "+", "1", ")", "*", "numel", "\n", "stride", "[", "2", "]", "=", "(", "1", "if", "dim", "==", "1", "else", "seq_len", ")", "*", "numel", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "3", ":", "\n", "        ", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", "-", "2", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", "+", "numel", "*", "(", "1", "if", "dim", "==", "0", "else", "seq_len", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe": [[1094, 1108], ["list", "x.contiguous", "x.size", "x.stride", "len", "x.as_strided", "x.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "stride", "[", "1", "]", "=", "(", "seq_len", "+", "1", ")", "*", "numel", "\n", "stride", "[", "2", "]", "=", "(", "1", "if", "dim", "==", "1", "else", "seq_len", ")", "*", "numel", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "3", ":", "\n", "        ", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_logadd1": [[628, 646], ["list", "x.contiguous", "x.size", "x.stride", "len", "x.as_strided", "x.as_strided().copy_", "x.as_strided", "torch.logaddexp", "x.as_strided", "list", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "stripe_logadd1", "(", "x", ",", "value", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "stride", "[", "1", "]", "=", "(", "seq_len", "+", "1", ")", "*", "numel", "\n", "stride", "[", "2", "]", "=", "(", "1", "if", "dim", "==", "1", "else", "seq_len", ")", "*", "numel", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "3", ":", "\n", "        ", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", "+", "1", ")", "*", "numel", ")", ".", "copy_", "(", "torch", ".", "logaddexp", "(", "tmp", ",", "value", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.logbmmexp": [[650, 654], ["x.contiguous.contiguous", "y.contiguous.contiguous", "x.contiguous.unsqueeze", "y.contiguous.unsqueeze"], "function", ["None"], ["", "", "def", "logbmmexp", "(", "x", ",", "y", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "contiguous", "(", ")", "\n", "return", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", "+", "y", ".", "unsqueeze", "(", "-", "3", ")", ")", ".", "logsumexp", "(", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.maxbmm": [[655, 657], ["x.unsqueeze", "y.unsqueeze"], "function", ["None"], ["", "def", "maxbmm", "(", "x", ",", "y", ")", ":", "\n", "    ", "return", "(", "x", ".", "unsqueeze", "(", "-", "1", ")", "+", "y", ".", "unsqueeze", "(", "-", "3", ")", ")", ".", "max", "(", "-", "2", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_grammar_rules": [[662, 672], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_grammar_rules", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "0", ",", "addition", "=", "0", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "2", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", ",", "\n", "stride", "=", "new_stride", ",", "storage_offset", "=", "offset", "*", "(", "stride", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version3": [[678, 689], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_version3", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "0", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "2", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version5": [[690, 701], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_version5", "(", "x", ",", "n", ",", "w", "=", "0", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "2", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "2", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_parent_left": [[703, 714], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_parent_left", "(", "x", ",", "n", ",", "w", ",", "nt", ",", "t", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "x", ".", "shape", "[", "3", "]", ",", "t", ",", "nt", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "stride", "[", "2", "]", "+", "stride", "[", "-", "2", "]", "*", "nt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_parent_left_add": [[715, 726], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided().add_", "x.contiguous", "x.size", "x.stride", "x.as_strided"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_parent_left_add", "(", "x", ",", "y", ",", "n", ",", "w", ",", "nt", ",", "t", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "x", ".", "shape", "[", "3", "]", ",", "t", ",", "nt", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "stride", "[", "2", "]", "+", "stride", "[", "-", "2", "]", "*", "nt", ")", ".", "add_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_headed_left": [[727, 738], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_headed_left", "(", "x", ",", "n", ",", "w", ",", "nt", ",", "t", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "x", ".", "shape", "[", "3", "]", ",", "nt", ",", "t", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "+", "nt", "*", "stride", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_rules_left": [[740, 751], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_rules_left", "(", "x", ",", "w", ",", "start", ",", "nt", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "w", ",", "start", ",", "nt", ",", "nt", ",", "nt", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start", "*", "stride", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_rules_right": [[753, 764], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_rules_right", "(", "x", ",", "w", ",", "end", ",", "nt", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "w", ",", "seq_len", "-", "end", ",", "nt", ",", "nt", ",", "nt", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "end", "*", "stride", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_headed_left_add": [[769, 780], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided().add_", "x.contiguous", "x.size", "x.stride", "x.as_strided"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_headed_left_add", "(", "x", ",", "y", ",", "n", ",", "w", ",", "nt", ",", "t", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "x", ".", "shape", "[", "3", "]", ",", "nt", ",", "t", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "+", "nt", "*", "stride", "[", "-", "1", "]", ")", ".", "add_", "(", "y", ")", "\n", "# return x", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_headed_right": [[783, 794], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_headed_right", "(", "x", ",", "n", ",", "w", ",", "nt", ",", "t", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "x", ".", "shape", "[", "3", "]", ",", "t", ",", "nt", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "stride", "[", "1", "]", "+", "nt", "*", "stride", "[", "-", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_headed_right_add": [[795, 806], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided().add_", "x.contiguous", "x.size", "x.stride", "x.as_strided"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_headed_right_add", "(", "x", ",", "y", ",", "n", ",", "w", ",", "nt", ",", "t", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "x", ".", "shape", "[", "3", "]", ",", "t", ",", "nt", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "stride", "[", "1", "]", "+", "nt", "*", "stride", "[", "-", "2", "]", ")", ".", "add_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_parent_right": [[807, 818], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_parent_right", "(", "x", ",", "n", ",", "w", ",", "nt", ",", "t", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "x", ".", "shape", "[", "3", "]", ",", "nt", ",", "t", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "1", "]", "+", "nt", "*", "stride", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_parent_right_add": [[819, 830], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided().add_", "x.contiguous", "x.size", "x.stride", "x.as_strided"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_parent_right_add", "(", "x", ",", "y", ",", "n", ",", "w", ",", "nt", ",", "t", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "x", ".", "shape", "[", "3", "]", ",", "nt", ",", "t", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "1", "]", "+", "nt", "*", "stride", "[", "-", "1", "]", ")", ".", "add_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version7": [[945, 947], ["None"], "function", ["None"], ["", "def", "stripe_version7", "(", "x", ",", "n", ",", "w", "=", "0", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version6": [[948, 960], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_version6", "(", "x", ",", "n", ",", "w", "=", "0", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "2", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.decode_stripe1": [[963, 974], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "x.as_strided", "x.contiguous", "x.size", "x.stride"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "decode_stripe1", "(", "x", ",", "n", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "# new_stride.extend(stride[3:])", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "(", "w", ")", "*", "(", "stride", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.decode_stripe2": [[975, 985], ["list", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "decode_stripe2", "(", "x", ",", "n", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_logadd_outside": [[986, 997], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided", "x.contiguous.as_strided().copy_", "x.contiguous.stride", "torch.logaddexp", "x.contiguous.as_strided", "list", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_logadd_outside", "(", "x", ",", "y", ",", "n", ",", "w", ",", "offset", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "storage_offset", "=", "offset", "*", "stride", "[", "1", "]", "+", "(", "offset", "+", "w", ")", "*", "stride", "[", "2", "]", "+", "offset", "*", "stride", "[", "3", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "storage_offset", "=", "offset", "*", "stride", "[", "1", "]", "+", "(", "offset", "+", "w", ")", "*", "stride", "[", "2", "]", "+", "offset", "*", "stride", "[", "3", "]", ")", ".", "copy_", "(", "torch", ".", "logaddexp", "(", "tmp", ",", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_add_outside": [[998, 1009], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided().add_", "x.contiguous.stride", "x.contiguous.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_add_outside", "(", "x", ",", "y", ",", "n", ",", "w", ",", "offset", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "# tmp = x.as_strided(size=(x.shape[0], n, w, *list(x.shape[4:])), stride=new_stride, storage_offset= offset * stride[1] + (offset + w) * stride[2] + offset * stride[3] )", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "storage_offset", "=", "offset", "*", "stride", "[", "1", "]", "+", "(", "offset", "+", "w", ")", "*", "stride", "[", "2", "]", "+", "offset", "*", "stride", "[", "3", "]", ")", ".", "add_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_need_dad_add": [[1010, 1020], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided().add_", "x.contiguous.stride", "x.contiguous.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_need_dad_add", "(", "x", ",", "y", ",", "n", ",", "w", ",", "start", ",", "end", ",", "headstart", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start", "*", "stride", "[", "1", "]", "+", "(", "end", ")", "*", "stride", "[", "2", "]", "+", "headstart", "*", "stride", "[", "3", "]", ")", ".", "add_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_need_dad": [[1023, 1033], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided", "x.contiguous.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_need_dad", "(", "x", ",", "n", ",", "w", ",", "start", ",", "end", ",", "headstart", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start", "*", "stride", "[", "1", "]", "+", "(", "end", ")", "*", "stride", "[", "2", "]", "+", "headstart", "*", "stride", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_add_outside_v2": [[1036, 1049], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided().add_", "x.contiguous.stride", "x.contiguous.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_add_outside_v2", "(", "x", ",", "y", ",", "n", ",", "w", ",", "start", ",", "end", ",", "headstart", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "# tmp = x.as_strided(size=(x.shape[0], n, w, *list(x.shape[4:])), stride=new_stride,", "\n", "#                    storage_offset= start * stride[1] + (end) * stride[2] + headstart * stride[3])", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start", "*", "stride", "[", "1", "]", "+", "(", "end", ")", "*", "stride", "[", "2", "]", "+", "headstart", "*", "stride", "[", "3", "]", ")", ".", "add_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_add_outside_left": [[1050, 1061], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided().add_", "x.contiguous.stride", "x.contiguous.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_add_outside_left", "(", "x", ",", "y", ",", "n", ",", "w", ",", "start", ",", "end", ",", "headstart", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", "-", "1", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start", "*", "stride", "[", "1", "]", "+", "(", "end", ")", "*", "stride", "[", "2", "]", "+", "headstart", "*", "stride", "[", "3", "]", ")", ".", "add_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_add_outside_right": [[1062, 1073], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided().add_", "x.contiguous.stride", "x.contiguous.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_add_outside_right", "(", "x", ",", "y", ",", "n", ",", "w", ",", "start", ",", "end", ",", "headstart", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", "-", "1", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start", "*", "stride", "[", "1", "]", "+", "(", "end", ")", "*", "stride", "[", "2", "]", "+", "headstart", "*", "stride", "[", "3", "]", ")", ".", "add_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_logadd_outside_v2": [[1077, 1092], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided", "x.contiguous.as_strided().copy_", "x.contiguous.stride", "torch.logaddexp", "x.contiguous.as_strided", "list", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_logadd_outside_v2", "(", "x", ",", "y", ",", "n", ",", "w", ",", "start", ",", "end", ",", "headstart", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start", "*", "stride", "[", "1", "]", "+", "(", "end", ")", "*", "stride", "[", "2", "]", "+", "headstart", "*", "stride", "[", "3", "]", ")", "\n", "# print(tmp.shape)", "\n", "# print(y.shape)", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start", "*", "stride", "[", "1", "]", "+", "(", "end", ")", "*", "stride", "[", "2", "]", "+", "headstart", "*", "stride", "[", "3", "]", ")", ".", "copy_", "(", "torch", ".", "logaddexp", "(", "tmp", ",", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_outside": [[1110, 1120], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided", "x.contiguous.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "def", "stripe_outside", "(", "x", ",", "y", ",", "n", ",", "w", ",", "offset", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "stride", "=", "new_stride", ",", "storage_offset", "=", "offset", "*", "stride", "[", "1", "]", "+", "(", "offset", "+", "w", ")", "*", "stride", "[", "2", "]", "+", "offset", "*", "stride", "[", "3", "]", ")", "\n", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_copy_gradient_left": [[1122, 1137], ["x.contiguous.contiguous", "list", "newstride.append", "newstride.append", "newstride.append", "newstride.extend", "x.contiguous.as_strided", "print", "print", "x.contiguous.as_strided().copy_", "x.contiguous.stride", "torch.logaddexp", "x.contiguous.as_strided"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_copy_gradient_left", "(", "x", ",", "y", ",", "n", ",", "left", ",", "right", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "newstride", "=", "[", "]", "\n", "newstride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "newstride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "# newstride.append(stride[1]+stride[2])", "\n", "newstride", ".", "append", "(", "stride", "[", "2", "]", ")", "\n", "newstride", ".", "extend", "(", "stride", "[", "2", ":", "]", ")", "\n", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "right", ",", "left", ",", "*", "x", ".", "shape", "[", "3", ":", "]", ")", ",", "stride", "=", "newstride", ",", "\n", "storage_offset", "=", "left", "*", "stride", "[", "2", "]", ")", "\n", "print", "(", "tmp", ".", "shape", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "right", ",", "left", ",", "*", "x", ".", "shape", "[", "3", ":", "]", ")", ",", "stride", "=", "newstride", ",", "\n", "storage_offset", "=", "right", "*", "stride", "[", "1", "]", ")", ".", "copy_", "(", "torch", ".", "logaddexp", "(", "tmp", ",", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_copy_gradient_right": [[1139, 1154], ["x.contiguous.contiguous", "list", "newstride.append", "newstride.append", "newstride.append", "newstride.extend", "x.contiguous.as_strided", "x.contiguous.as_strided().copy_", "x.contiguous.stride", "torch.logaddexp", "x.contiguous.as_strided"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_copy_gradient_right", "(", "x", ",", "y", ",", "n", ",", "left", ",", "right", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "newstride", "=", "[", "]", "\n", "newstride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "newstride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "# newstride.append(stride[1]+stride[2])", "\n", "newstride", ".", "append", "(", "stride", "[", "2", "]", ")", "\n", "newstride", ".", "extend", "(", "stride", "[", "2", ":", "]", ")", "\n", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "left", ",", "right", ",", "*", "x", ".", "shape", "[", "3", ":", "]", ")", ",", "stride", "=", "newstride", ",", "\n", "storage_offset", "=", "left", "*", "stride", "[", "2", "]", ")", "\n", "# print(tmp.shape)", "\n", "# print(y.shape)", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "left", ",", "right", ",", "*", "x", ".", "shape", "[", "3", ":", "]", ")", ",", "stride", "=", "newstride", ",", "\n", "storage_offset", "=", "right", "*", "stride", "[", "2", "]", ")", ".", "copy_", "(", "torch", ".", "logaddexp", "(", "tmp", ",", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2": [[1158, 1167], ["list", "x.as_strided", "x.contiguous", "x.size", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_version2", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "stride", "[", "1", "]", "=", "(", "seq_len", "+", "1", ")", "*", "numel", "+", "stride", "[", "3", "]", "\n", "stride", "[", "2", "]", "=", "(", "1", "if", "dim", "==", "1", "else", "seq_len", ")", "*", "numel", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "w", "+", "1", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2_add": [[1168, 1178], ["list", "x.as_strided().add_", "x.contiguous", "x.size", "x.stride", "x.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_version2_add", "(", "x", ",", "y", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "stride", "[", "1", "]", "=", "(", "seq_len", "+", "1", ")", "*", "numel", "+", "stride", "[", "3", "]", "\n", "stride", "[", "2", "]", "=", "(", "1", "if", "dim", "==", "1", "else", "seq_len", ")", "*", "numel", "\n", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "w", "+", "1", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", ".", "add_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2_left": [[1180, 1190], ["x.contiguous.contiguous", "list", "list", "x.contiguous.as_strided", "x.contiguous.stride", "x.contiguous.stride", "list"], "function", ["None"], ["", "def", "stripe_version2_left", "(", "x", ",", "n", ",", "w", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "# numel = stride[2]", "\n", "new_stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "[", "1", "]", "=", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", "\n", "new_stride", "[", "2", "]", "=", "stride", "[", "1", "]", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", "-", "1", ",", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "stride", "[", "1", "]", "+", "(", "w", "+", "1", ")", "*", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_copy_left": [[1192, 1204], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided().copy_", "x.contiguous.stride", "x.contiguous.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_copy_left", "(", "x", ",", "y", ",", "n", ",", "w", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "# numel = stride[2]", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "x", ".", "shape", "[", "4", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", "-", "1", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "stride", "[", "1", "]", "+", "(", "w", "+", "1", ")", "*", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", ".", "copy_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version2_right": [[1205, 1215], ["x.contiguous.contiguous", "list", "list", "x.contiguous.as_strided", "x.contiguous.stride", "x.contiguous.stride", "list"], "function", ["None"], ["", "def", "stripe_version2_right", "(", "x", ",", "n", ",", "w", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "# numel = stride[2]", "\n", "new_stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "[", "1", "]", "=", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", "\n", "new_stride", "[", "2", "]", "=", "stride", "[", "2", "]", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", "-", "1", ",", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "stride", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_copy_right": [[1216, 1228], ["x.contiguous.contiguous", "list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.contiguous.as_strided().copy_", "x.contiguous.stride", "x.contiguous.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "stripe_copy_right", "(", "x", ",", "y", ",", "n", ",", "w", ")", ":", "\n", "    ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "# numel = stride[2]", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "extend", "(", "x", ".", "shape", "[", "4", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", "-", "1", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "stride", "[", "2", "]", ")", ".", "copy_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version_nt_nt": [[1230, 1243], ["list", "x.stride", "x.as_strided", "x.contiguous", "x.size", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_version_nt_nt", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "stride", "[", "1", "]", "=", "(", "seq_len", "+", "1", ")", "*", "numel", "+", "stride", "[", "3", "]", "\n", "stride", "[", "2", "]", "=", "(", "1", "if", "dim", "==", "1", "else", "seq_len", ")", "*", "numel", "\n", "origin_stride", "=", "x", ".", "stride", "(", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", "-", "2", ",", "w", "-", "1", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", "+", "2", "*", "(", "1", "-", "dim", ")", "*", "(", "origin_stride", "[", "3", "]", ")", "\n", "+", "(", "1", "-", "dim", ")", "*", "origin_stride", "[", "1", "]", "+", "dim", "*", "origin_stride", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version_nt_t": [[1245, 1256], ["list", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_version_nt_t", "(", "x", ",", "n", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "numel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version_t_nt": [[1257, 1267], ["list", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided", "x.contiguous", "x.size", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_version_t_nt", "(", "x", ",", "n", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "stride", "[", "1", "]", "+", "(", "w", "+", "1", ")", "*", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_version4": [[1276, 1285], ["list", "x.as_strided", "x.contiguous", "x.size", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_version4", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "stride", "[", "1", "]", "=", "(", "seq_len", "+", "1", ")", "*", "numel", "+", "stride", "[", "3", "]", "+", "stride", "[", "4", "]", "\n", "stride", "[", "2", "]", "=", "(", "1", "if", "dim", "==", "1", "else", "seq_len", ")", "*", "numel", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "w", "+", "1", ",", "w", "+", "1", ",", "*", "list", "(", "x", ".", "shape", "[", "5", ":", "]", ")", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.stripe_arc_indicator": [[1287, 1299], ["list", "new_stride.append", "new_stride.append", "new_stride.append", "new_stride.append", "x.as_strided", "x.contiguous", "x.size", "x.stride"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "stripe_arc_indicator", "(", "x", ",", "n", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "2", ")", "\n", "stride", "=", "list", "(", "x", ".", "stride", "(", ")", ")", "\n", "numel", "=", "stride", "[", "2", "]", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "2", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "w", ",", "w", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_v2": [[1303, 1321], ["new_stride.append", "new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided().copy_", "x.as_strided().copy_", "x.stride", "x.as_strided", "x.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "diagonal_copy_v2", "(", "x", ",", "y", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "4", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "copy_", "(", "y", ")", "\n", "", "else", ":", "\n", "        ", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "copy_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_v2_add": [[1322, 1341], ["new_stride.append", "new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided().add_", "new_stride.append", "x.as_strided().add_", "x.stride", "x.as_strided", "x.as_strided", "list", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "def", "diagonal_copy_v2_add", "(", "x", ",", "y", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "4", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "add_", "(", "y", ")", "\n", "", "else", ":", "\n", "        ", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "add_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal2": [[1343, 1361], ["new_stride.append", "new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided", "new_stride.append", "x.as_strided", "x.stride", "list", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "def", "diagonal2", "(", "x", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "4", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_logadd_v2": [[1365, 1390], ["new_stride.append", "new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided", "x.as_strided().copy_", "new_stride.append", "x.as_strided().copy_", "x.stride", "torch.logaddexp", "x.as_strided", "x.as_strided", "list", "list", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "def", "diagonal_copy_logadd_v2", "(", "x", ",", "y", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "4", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "tmp", "=", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "copy_", "(", "torch", ".", "logaddexp", "(", "tmp", ",", "y", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "copy_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_v2": [[1392, 1407], ["new_stride.append", "new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "diagonal_v2", "(", "x", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "4", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_v4": [[1416, 1429], ["new_stride.append", "new_stride.append", "new_stride.append", "new_stride.extend", "x.as_strided().copy_", "x.contiguous", "x.size", "list", "x[].numel", "x.stride", "list", "x.as_strided"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "diagonal_copy_v4", "(", "x", ",", "y", ",", "nth_diagonal", ",", "total_num", ",", "width", ",", "start_offset", "=", "0", ",", "head_offset", "=", "0", ",", "head_moving", "=", "0", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "stride", "[", "3", "]", "+", "head_moving", "*", "stride", "[", "4", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "total_num", ",", "width", ",", "*", "list", "(", "y", ".", "shape", "[", "3", ":", "]", ")", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "size", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start_offset", "*", "stride", "[", "1", "]", "+", "(", "start_offset", "+", "nth_diagonal", ")", "*", "(", "stride", "[", "2", "]", ")", "+", "(", "head_offset", ")", "*", "stride", "[", "4", "]", "\n", ")", ".", "copy_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_v3": [[1430, 1447], ["new_stride.append", "new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided().copy_", "x.stride", "list", "x.as_strided"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "diagonal_copy_v3", "(", "x", ",", "y", ",", "nth_diagonal", ",", "total_num", ",", "width", ",", "start_offset", "=", "0", ",", "head_offset", "=", "0", ",", "head_moving", "=", "1", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", "+", "head_moving", "*", "stride", "[", "3", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "3", "]", ")", "\n", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "4", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "4", ":", "]", ")", "\n", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "total_num", ",", "width", ",", "*", "list", "(", "x", ".", "shape", "[", "4", ":", "]", ")", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "size", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "start_offset", "*", "stride", "[", "1", "]", "+", "(", "start_offset", "+", "nth_diagonal", ")", "*", "stride", "[", "2", "]", "+", "(", "head_offset", ")", "*", "stride", "[", "3", "]", "\n", ")", ".", "copy_", "(", "y", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal_copy_": [[1448, 1468], ["new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided().copy_", "x.as_strided().copy_", "x.stride", "x.as_strided", "x.as_strided", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "diagonal_copy_", "(", "x", ",", "y", ",", "w", ")", ":", "\n", "# size of x: (batch, N, N, nt)", "\n", "# size of y: (batch, N, nt)", "\n", "# the function aims to copy y to the diagonal of x (dim1 and dim2) without any copy of tensor.", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "3", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "copy_", "(", "y", ")", "\n", "", "else", ":", "\n", "        ", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", ".", "copy_", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.diagonal": [[1472, 1488], ["new_stride.append", "new_stride.append", "x.contiguous", "x.size", "list", "x[].numel", "len", "new_stride.extend", "x.as_strided", "x.as_strided", "x.stride", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "diagonal", "(", "x", ",", "w", ")", ":", "\n", "    ", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", ":", ",", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "new_stride", "=", "[", "]", "\n", "new_stride", ".", "append", "(", "stride", "[", "0", "]", ")", "\n", "new_stride", ".", "append", "(", "stride", "[", "1", "]", "+", "stride", "[", "2", "]", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "3", ":", "\n", "        ", "new_stride", ".", "extend", "(", "stride", "[", "3", ":", "]", ")", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ",", "*", "list", "(", "x", ".", "shape", "[", "3", ":", "]", ")", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", ".", "as_strided", "(", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "seq_len", "-", "w", ")", ",", "\n", "stride", "=", "new_stride", ",", "\n", "storage_offset", "=", "w", "*", "stride", "[", "2", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.TN_PCFG.TNPCFG.__init__": [[7, 38], ["torch.Module.__init__", "pcfgs.tdpcfg.TDPCFG", "len", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "TNPCFG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pcfg", "=", "TDPCFG", "(", ")", "\n", "self", ".", "device", "=", "dataset", ".", "device", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "NT", "=", "args", ".", "NT", "\n", "self", ".", "T", "=", "args", ".", "T", "\n", "self", ".", "V", "=", "len", "(", "dataset", ".", "word_vocab", ")", "\n", "self", ".", "s_dim", "=", "args", ".", "s_dim", "\n", "self", ".", "r", "=", "args", ".", "r_dim", "\n", "self", ".", "word_emb_size", "=", "args", ".", "word_emb_size", "\n", "\n", "## root", "\n", "self", ".", "root_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "root_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "NT", ")", ")", "\n", "\n", "#terms", "\n", "self", ".", "term_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "T", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "term_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "V", ")", ")", "\n", "\n", "self", ".", "rule_state_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT", "+", "self", ".", "T", ",", "self", ".", "s_dim", ")", ")", "\n", "rule_dim", "=", "self", ".", "s_dim", "\n", "self", ".", "parent_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "rule_dim", ",", "rule_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "rule_dim", ",", "self", ".", "r", ")", ")", "\n", "self", ".", "left_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "rule_dim", ",", "rule_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "rule_dim", ",", "self", ".", "r", ")", ")", "\n", "self", ".", "right_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "rule_dim", ",", "rule_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "rule_dim", ",", "self", ".", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.TN_PCFG.TNPCFG.forward": [[40, 71], ["TN_PCFG.TNPCFG.root_mlp().log_softmax", "TN_PCFG.TNPCFG.expand().contiguous", "TN_PCFG.TNPCFG.term_mlp().log_softmax", "TN_PCFG.TNPCFG.parent_mlp().log_softmax", "TN_PCFG.TNPCFG.left_mlp().log_softmax", "TN_PCFG.TNPCFG.right_mlp().log_softmax", "head.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "left.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "right.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "TN_PCFG.TNPCFG."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "input", "[", "'word'", "]", "\n", "b", ",", "n", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "\n", "def", "roots", "(", ")", ":", "\n", "            ", "roots", "=", "self", ".", "root_mlp", "(", "self", ".", "root_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "return", "roots", ".", "expand", "(", "b", ",", "roots", ".", "shape", "[", "-", "1", "]", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "def", "terms", "(", ")", ":", "\n", "            ", "term_prob", "=", "self", ".", "term_mlp", "(", "self", ".", "term_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "return", "term_prob", "[", "torch", ".", "arange", "(", "self", ".", "T", ")", "[", "None", ",", "None", "]", ",", "x", "[", ":", ",", ":", ",", "None", "]", "]", "\n", "\n", "", "def", "rules", "(", ")", ":", "\n", "            ", "rule_state_emb", "=", "self", ".", "rule_state_emb", "\n", "nonterm_emb", "=", "rule_state_emb", "[", ":", "self", ".", "NT", "]", "\n", "head", "=", "self", ".", "parent_mlp", "(", "nonterm_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "left", "=", "self", ".", "left_mlp", "(", "rule_state_emb", ")", ".", "log_softmax", "(", "-", "2", ")", "\n", "right", "=", "self", ".", "right_mlp", "(", "rule_state_emb", ")", ".", "log_softmax", "(", "-", "2", ")", "\n", "head", "=", "head", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "*", "head", ".", "shape", ")", "\n", "left", "=", "left", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "*", "left", ".", "shape", ")", "\n", "right", "=", "right", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "*", "right", ".", "shape", ")", "\n", "return", "(", "head", ",", "left", ",", "right", ")", "\n", "\n", "", "root", ",", "unary", ",", "(", "head", ",", "left", ",", "right", ")", "=", "roots", "(", ")", ",", "terms", "(", ")", ",", "rules", "(", ")", "\n", "\n", "return", "{", "'unary'", ":", "unary", ",", "\n", "'root'", ":", "root", ",", "\n", "'head'", ":", "head", ",", "\n", "'left'", ":", "left", ",", "\n", "'right'", ":", "right", ",", "\n", "'kl'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.TN_PCFG.TNPCFG.loss": [[72, 77], ["TN_PCFG.TNPCFG.forward", "TN_PCFG.TNPCFG.pcfg._inside", "result[].mean"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside"], ["", "def", "loss", "(", "self", ",", "input", ")", ":", "\n", "        ", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "result", "=", "self", ".", "pcfg", ".", "_inside", "(", "rules", "=", "rules", ",", "lens", "=", "input", "[", "'seq_len'", "]", ")", "\n", "logZ", "=", "-", "result", "[", "'partition'", "]", ".", "mean", "(", ")", "\n", "return", "logZ", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.TN_PCFG.TNPCFG.evaluate": [[79, 88], ["TN_PCFG.TNPCFG.forward", "TN_PCFG.TNPCFG.pcfg.decode"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode"], ["", "def", "evaluate", "(", "self", ",", "input", ",", "decode_type", ",", "**", "kwargs", ")", ":", "\n", "        ", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "if", "decode_type", "==", "'viterbi'", ":", "\n", "            ", "assert", "NotImplementedError", "\n", "\n", "", "elif", "decode_type", "==", "'mbr'", ":", "\n", "            ", "return", "self", ".", "pcfg", ".", "decode", "(", "rules", "=", "rules", ",", "lens", "=", "input", "[", "'seq_len'", "]", ",", "viterbi", "=", "False", ",", "mbr", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.TN_PCFG.FastTNPCFG.__init__": [[92, 129], ["torch.Module.__init__", "pcfgs.tdpcfg.Fastest_TDPCFG", "len", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Parameter", "torch.Parameter", "TN_PCFG.FastTNPCFG._initialize", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.C_PCFG.CompoundPCFG._initialize"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "FastTNPCFG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pcfg", "=", "Fastest_TDPCFG", "(", ")", "\n", "self", ".", "device", "=", "dataset", ".", "device", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "NT", "=", "args", ".", "NT", "\n", "self", ".", "T", "=", "args", ".", "T", "\n", "self", ".", "V", "=", "len", "(", "dataset", ".", "word_vocab", ")", "\n", "self", ".", "s_dim", "=", "args", ".", "s_dim", "\n", "self", ".", "r", "=", "args", ".", "r_dim", "\n", "self", ".", "word_emb_size", "=", "args", ".", "word_emb_size", "\n", "\n", "## root", "\n", "self", ".", "root_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "root_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "# )", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "NT", ")", ")", "\n", "\n", "#terms", "\n", "# self.term_emb = nn.Parameter(torch.randn(self.T, self.s_dim))", "\n", "self", ".", "term_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "V", ")", ")", "\n", "\n", "self", ".", "rule_state_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT", "+", "self", ".", "T", ",", "self", ".", "s_dim", ")", ")", "\n", "rule_dim", "=", "self", ".", "s_dim", "\n", "self", ".", "parent_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "rule_dim", ",", "rule_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "left_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "rule_dim", ",", "rule_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "right_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "rule_dim", ",", "rule_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "rank_proj", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "rule_dim", ",", "self", ".", "r", ")", ")", "\n", "\n", "\n", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.TN_PCFG.FastTNPCFG._initialize": [[131, 135], ["TN_PCFG.FastTNPCFG.parameters", "p.dim", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.TN_PCFG.FastTNPCFG.forward": [[136, 178], ["TN_PCFG.FastTNPCFG.root_mlp", "roots.log_softmax.log_softmax.log_softmax", "roots.log_softmax.log_softmax.expand", "TN_PCFG.FastTNPCFG.term_mlp().log_softmax", "head.unsqueeze().expand.unsqueeze().expand.softmax", "left.unsqueeze().expand.unsqueeze().expand.softmax", "right.unsqueeze().expand.unsqueeze().expand.softmax", "head.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "left.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "right.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "roots.log_softmax.log_softmax."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "input", "[", "'word'", "]", "\n", "b", ",", "n", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "\n", "def", "roots", "(", ")", ":", "\n", "            ", "roots", "=", "self", ".", "root_mlp", "(", "self", ".", "root_emb", ")", "\n", "roots", "=", "roots", ".", "log_softmax", "(", "-", "1", ")", "\n", "return", "roots", ".", "expand", "(", "b", ",", "roots", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "def", "terms", "(", ")", ":", "\n", "            ", "term_emb", "=", "self", ".", "rule_state_emb", "[", "self", ".", "NT", ":", "]", "\n", "term_prob", "=", "self", ".", "term_mlp", "(", "term_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "return", "term_prob", "[", "torch", ".", "arange", "(", "self", ".", "T", ")", "[", "None", ",", "None", "]", ",", "x", "[", ":", ",", ":", ",", "None", "]", "]", "\n", "# term_prob = term_prob.unsqueeze(0).unsqueeze(1).expand(", "\n", "#     b, n, self.T, self.V", "\n", "# )", "\n", "# indices = x.unsqueeze(2).expand(b, n, self.T).unsqueeze(3)", "\n", "# term_prob = torch.gather(term_prob, 3, indices).squeeze(3)", "\n", "# return term_prob", "\n", "\n", "", "def", "rules", "(", ")", ":", "\n", "            ", "rule_state_emb", "=", "self", ".", "rule_state_emb", "\n", "nonterm_emb", "=", "rule_state_emb", "[", ":", "self", ".", "NT", "]", "\n", "head", "=", "self", ".", "parent_mlp", "(", "nonterm_emb", ")", "@", "self", ".", "rank_proj", "\n", "left", "=", "self", ".", "left_mlp", "(", "rule_state_emb", ")", "@", "self", ".", "rank_proj", "\n", "right", "=", "self", ".", "right_mlp", "(", "rule_state_emb", ")", "@", "self", ".", "rank_proj", "\n", "head", "=", "head", ".", "softmax", "(", "-", "1", ")", "\n", "left", "=", "left", ".", "softmax", "(", "-", "2", ")", "\n", "right", "=", "right", ".", "softmax", "(", "-", "2", ")", "\n", "head", "=", "head", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "*", "head", ".", "shape", ")", "\n", "left", "=", "left", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "*", "left", ".", "shape", ")", "\n", "right", "=", "right", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "*", "right", ".", "shape", ")", "\n", "return", "(", "head", ",", "left", ",", "right", ")", "\n", "\n", "", "root", ",", "unary", ",", "(", "head", ",", "left", ",", "right", ")", "=", "roots", "(", ")", ",", "terms", "(", ")", ",", "rules", "(", ")", "\n", "\n", "return", "{", "'unary'", ":", "unary", ",", "\n", "'root'", ":", "root", ",", "\n", "'head'", ":", "head", ",", "\n", "'left'", ":", "left", ",", "\n", "'right'", ":", "right", ",", "\n", "'kl'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.TN_PCFG.FastTNPCFG.loss": [[179, 184], ["TN_PCFG.FastTNPCFG.forward", "TN_PCFG.FastTNPCFG.pcfg._inside", "result[].mean"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside"], ["", "def", "loss", "(", "self", ",", "input", ")", ":", "\n", "        ", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "result", "=", "self", ".", "pcfg", ".", "_inside", "(", "rules", "=", "rules", ",", "lens", "=", "input", "[", "'seq_len'", "]", ")", "\n", "logZ", "=", "-", "result", "[", "'partition'", "]", ".", "mean", "(", ")", "\n", "return", "logZ", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.TN_PCFG.FastTNPCFG.evaluate": [[186, 195], ["TN_PCFG.FastTNPCFG.forward", "TN_PCFG.FastTNPCFG.pcfg.decode"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode"], ["", "def", "evaluate", "(", "self", ",", "input", ",", "decode_type", ",", "**", "kwargs", ")", ":", "\n", "        ", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "if", "decode_type", "==", "'viterbi'", ":", "\n", "            ", "assert", "NotImplementedError", "\n", "\n", "", "elif", "decode_type", "==", "'mbr'", ":", "\n", "            ", "return", "self", ".", "pcfg", ".", "decode", "(", "rules", "=", "rules", ",", "lens", "=", "input", "[", "'seq_len'", "]", ",", "viterbi", "=", "False", ",", "mbr", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.NeuralBLPCFG.__init__": [[9, 70], ["torch.Module.__init__", "pcfgs.blpcfg.BLPCFG", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "NBL_PCFG.NeuralBLPCFG._initialize", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.C_PCFG.CompoundPCFG._initialize"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "NeuralBLPCFG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pcfg", "=", "BLPCFG", "(", ")", "\n", "\n", "self", ".", "device", "=", "dataset", ".", "device", "\n", "self", ".", "args", "=", "args", "\n", "# number of states", "\n", "self", ".", "NT", "=", "args", ".", "NT", "\n", "self", ".", "T", "=", "args", ".", "T", "\n", "self", ".", "V", "=", "len", "(", "dataset", ".", "word_vocab", ")", "\n", "self", ".", "NT_T", "=", "self", ".", "NT", "+", "self", ".", "T", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n", "# embedding dimensions", "\n", "self", ".", "s_dim", "=", "args", ".", "s_dim", "\n", "self", ".", "r", "=", "args", ".", "r", "\n", "\n", "self", ".", "nonterm_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "nonterm_emb_root", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "noninherent_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT_T", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "inherent_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT_T", ",", "self", ".", "s_dim", ")", ")", "\n", "\n", "self", ".", "word_emb", "=", "nn", ".", "Embedding", "(", "self", ".", "V", ",", "self", ".", "s_dim", ")", "\n", "\n", "self", ".", "root_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "s_dim", ")", ")", "\n", "\n", "self", ".", "r_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "r", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "r_emb2", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "r", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "r_emb3", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "r", ",", "self", ".", "s_dim", ")", ")", "\n", "\n", "self", ".", "beta_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "V", ")", "\n", ")", "\n", "\n", "self", ".", "noninherent_mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "NT_T", "*", "2", ")", ")", "\n", "\n", "self", ".", "inherent_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "NT_T", ")", ")", "\n", "\n", "\n", "self", ".", "head_encoder", "=", "nn", ".", "Linear", "(", "self", ".", "s_dim", "+", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", "\n", "\n", "self", ".", "head_mlp", "=", "nn", ".", "Sequential", "(", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "r", ")", "\n", ")", "\n", "\n", "self", ".", "root_mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "NT", ")", ")", "\n", "\n", "self", ".", "root_mlp2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "V", ")", ")", "\n", "\n", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.NeuralBLPCFG._initialize": [[71, 75], ["NBL_PCFG.NeuralBLPCFG.parameters", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.NeuralBLPCFG.forward": [[76, 114], ["NBL_PCFG.NeuralBLPCFG.word_emb", "NBL_PCFG.NeuralBLPCFG.nonterm_emb.unsqueeze().expand", "x_emb.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NBL_PCFG.NeuralBLPCFG.head_mlp", "head.log_softmax.log_softmax.log_softmax", "NBL_PCFG.NeuralBLPCFG.inherent_mlp().log_softmax().permute().unsqueeze().expand", "NBL_PCFG.NeuralBLPCFG.noninherent_mlp().log_softmax().reshape().transpose().unsqueeze().expand", "NBL_PCFG.NeuralBLPCFG.beta_mlp().log_softmax().transpose().unsqueeze().expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "NBL_PCFG.NeuralBLPCFG.root_mlp().log_softmax", "NBL_PCFG.NeuralBLPCFG.root_mlp2().log_softmax", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "x.unsqueeze().expand", "torch.gather.unsqueeze().unsqueeze", "torch.gather.unsqueeze().unsqueeze", "NBL_PCFG.NeuralBLPCFG.unsqueeze", "NBL_PCFG.NeuralBLPCFG."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "input", "[", "'word'", "]", "\n", "b", ",", "n", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "x_emb", "=", "self", ".", "word_emb", "(", "x", ")", "\n", "\n", "def", "roots", "(", ")", ":", "\n", "            ", "root_emb", "=", "self", ".", "root_emb", "\n", "roots", "=", "self", ".", "root_mlp", "(", "root_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "roots_v", "=", "self", ".", "root_mlp2", "(", "self", ".", "nonterm_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "roots_v", "=", "torch", ".", "gather", "(", "roots_v", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "self", ".", "NT", ",", "self", ".", "V", ")", ",", "-", "1", ",", "\n", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "self", ".", "NT", ",", "-", "1", ")", ")", "\n", "return", "roots", ".", "expand", "(", "b", ",", "self", ".", "NT", ")", ".", "unsqueeze", "(", "1", ")", "+", "roots_v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n", "", "nt_emb", "=", "self", ".", "nonterm_emb", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "-", "1", ")", "\n", "x_emb", "=", "x_emb", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "NT", ",", "-", "1", ")", "\n", "nt_x_emb", "=", "torch", ".", "cat", "(", "[", "x_emb", ",", "\n", "nt_emb", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "n", ",", "-", "1", ",", "-", "1", ")", "]", ",", "dim", "=", "3", "\n", ")", "\n", "\n", "head", "=", "self", ".", "head_mlp", "(", "self", ".", "head_encoder", "(", "nt_x_emb", ")", ".", "relu", "(", ")", "+", "x_emb", ")", "\n", "\n", "head", "=", "head", ".", "log_softmax", "(", "-", "1", ")", "\n", "\n", "inherent", "=", "self", ".", "inherent_mlp", "(", "self", ".", "r_emb", ")", ".", "log_softmax", "(", "-", "1", ")", ".", "permute", "(", "1", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "noninherent_symbol", "=", "self", ".", "noninherent_mlp", "(", "self", ".", "r_emb2", ")", ".", "log_softmax", "(", "-", "1", ")", ".", "reshape", "(", "self", ".", "r", ",", "self", ".", "NT_T", ",", "2", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "\n", "-", "1", ",", "-", "1", ")", "\n", "\n", "noninherent_word", "=", "self", ".", "beta_mlp", "(", "self", ".", "r_emb3", ")", ".", "log_softmax", "(", "-", "1", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "-", "1", ")", "\n", "noninherent_word", "=", "torch", ".", "gather", "(", "noninherent_word", ",", "1", ",", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "r", ")", ")", "\n", "noninherent", "=", "noninherent_word", ".", "unsqueeze", "(", "-", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "+", "noninherent_symbol", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "return", "{", "\n", "'head'", ":", "head", ",", "\n", "'noninherent'", ":", "noninherent", ",", "\n", "'inherent'", ":", "inherent", ",", "\n", "'root'", ":", "roots", "(", ")", ",", "\n", "'kl'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.NeuralBLPCFG.forward4viterbi": [[117, 166], ["NBL_PCFG.NeuralBLPCFG.word_emb", "NBL_PCFG.NeuralBLPCFG.nonterm_emb.unsqueeze().expand", "x_emb.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NBL_PCFG.NeuralBLPCFG.head_mlp", "head.softmax.softmax.softmax", "NBL_PCFG.NeuralBLPCFG.inherent_mlp().softmax().permute().unsqueeze().expand", "NBL_PCFG.NeuralBLPCFG.noninherent_mlp().softmax().reshape().transpose().unsqueeze().expand", "NBL_PCFG.NeuralBLPCFG.beta_mlp().softmax().transpose().unsqueeze().expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "x.unsqueeze().expand", "NBL_PCFG.NeuralBLPCFG.root_mlp().log_softmax", "NBL_PCFG.NeuralBLPCFG.root_mlp2().log_softmax", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "rule[].transpose", "NBL_PCFG.NeuralBLPCFG."], "methods", ["None"], ["", "def", "forward4viterbi", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "input", "[", "'word'", "]", "\n", "b", ",", "n", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "x_emb", "=", "self", ".", "word_emb", "(", "x", ")", "\n", "\n", "nt_emb", "=", "self", ".", "nonterm_emb", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "-", "1", ")", "\n", "x_emb", "=", "x_emb", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "NT", ",", "-", "1", ")", "\n", "nt_x_emb", "=", "torch", ".", "cat", "(", "[", "x_emb", ",", "\n", "nt_emb", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "n", ",", "-", "1", ",", "-", "1", ")", "]", ",", "dim", "=", "3", "\n", ")", "\n", "\n", "head", "=", "self", ".", "head_mlp", "(", "self", ".", "head_encoder", "(", "nt_x_emb", ")", ".", "relu", "(", ")", "+", "x_emb", ")", "\n", "head", "=", "head", ".", "softmax", "(", "-", "1", ")", "\n", "\n", "inherent", "=", "self", ".", "inherent_mlp", "(", "self", ".", "r_emb", ")", ".", "softmax", "(", "-", "1", ")", ".", "permute", "(", "1", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "noninherent_symbol", "=", "self", ".", "noninherent_mlp", "(", "self", ".", "r_emb2", ")", ".", "softmax", "(", "-", "1", ")", ".", "reshape", "(", "self", ".", "r", ",", "self", ".", "NT_T", ",", "2", ")", ".", "transpose", "(", "1", ",", "\n", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "noninherent_word", "=", "self", ".", "beta_mlp", "(", "self", ".", "r_emb3", ")", ".", "softmax", "(", "-", "1", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "unsqueeze", "(", "\n", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "noninherent_word", "=", "torch", ".", "gather", "(", "noninherent_word", ",", "1", ",", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "r", ")", ")", "\n", "\n", "def", "roots", "(", ")", ":", "\n", "            ", "root_emb", "=", "self", ".", "root_emb", "\n", "roots", "=", "self", ".", "root_mlp", "(", "root_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "roots_v", "=", "self", ".", "root_mlp2", "(", "self", ".", "nonterm_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "roots_v", "=", "torch", ".", "gather", "(", "roots_v", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "self", ".", "NT", ",", "self", ".", "V", ")", ",", "-", "1", ",", "\n", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "self", ".", "NT", ",", "-", "1", ")", ")", "\n", "return", "roots", ".", "expand", "(", "b", ",", "self", ".", "NT", ")", ".", "unsqueeze", "(", "1", ")", "+", "roots_v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n", "", "def", "rule", "(", ")", ":", "\n", "            ", "rule", "=", "torch", ".", "zeros", "(", "b", ",", "n", ",", "n", ",", "self", ".", "NT", ",", "self", ".", "NT_T", ",", "self", ".", "NT_T", ",", "2", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "#### to avoid cuda out-of-memory:", "\n", "for", "i", "in", "range", "(", "self", ".", "NT", ")", ":", "\n", "                ", "rule", "[", ":", ",", ":", ",", ":", ",", "i", ",", "...", "]", "=", "torch", ".", "einsum", "(", "\"qnr, qbrd, qmr, qcr -> qmnbcd\"", ",", "head", "[", ":", ",", ":", ",", "i", "]", ",", "noninherent_symbol", ",", "noninherent_word", ",", "inherent", ")", ".", "add_", "(", "1e-15", ")", ".", "log_", "(", ")", "\n", "", "left", "=", "rule", "[", "...", ",", "1", "]", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "right", "=", "rule", "[", "...", ",", "0", "]", "\n", "rule", "=", "left", ".", "mul_", "(", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "n", ",", "n", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ",", "diagonal", "=", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "*", "left", ".", "shape", ")", ")", "+", "right", ".", "mul_", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "n", ",", "n", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ",", "diagonal", "=", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "*", "right", ".", "shape", ")", ")", "\n", "return", "rule", "\n", "\n", "", "return", "{", "\n", "'root'", ":", "roots", "(", ")", ",", "\n", "'rule'", ":", "rule", "(", ")", ",", "\n", "'kl'", ":", "0", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.NeuralBLPCFG.loss": [[172, 176], ["NBL_PCFG.NeuralBLPCFG.forward", "NBL_PCFG.NeuralBLPCFG.pcfg.loss", "result[].mean"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.loss"], ["", "def", "loss", "(", "self", ",", "input", ")", ":", "\n", "        ", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "result", "=", "self", ".", "pcfg", ".", "loss", "(", "rules", ",", "input", "[", "'seq_len'", "]", ")", "\n", "return", "-", "result", "[", "'partition'", "]", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.NeuralBLPCFG.evaluate": [[177, 188], ["NBL_PCFG.NeuralBLPCFG.forward", "NBL_PCFG.NeuralBLPCFG.pcfg.decode", "NBL_PCFG.NeuralBLPCFG.forward4viterbi", "pcfgs.eisner_satta.EisnerSatta.viterbi_decoding", "NBL_PCFG.NeuralBLPCFG.forward", "NBL_PCFG.NeuralBLPCFG.pcfg.loss", "pcfgs.eisner_satta.EisnerSatta.viterbi_decoding.update"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.NeuralBLPCFG.forward4viterbi", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.eisner_satta.EisnerSatta.viterbi_decoding", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.loss", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update"], ["", "def", "evaluate", "(", "self", ",", "input", ",", "decode_type", "=", "'mbr'", ",", "eval_dep", "=", "False", ")", ":", "\n", "        ", "if", "decode_type", "==", "'mbr'", ":", "\n", "            ", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "return", "self", ".", "pcfg", ".", "decode", "(", "rules", ",", "input", "[", "'seq_len'", "]", ",", "mbr", "=", "True", ",", "eval_dep", "=", "eval_dep", ")", "\n", "", "else", ":", "\n", "            ", "rules", "=", "self", ".", "forward4viterbi", "(", "input", ")", "\n", "result", "=", "EisnerSatta", ".", "viterbi_decoding", "(", "rule", "=", "rules", "[", "'rule'", "]", ",", "root", "=", "rules", "[", "'root'", "]", ",", "lens", "=", "input", "[", "'seq_len'", "]", ")", "\n", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "logZ", "=", "self", ".", "pcfg", ".", "loss", "(", "rules", ",", "input", "[", "'seq_len'", "]", ")", "\n", "result", ".", "update", "(", "logZ", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.FastNBLPCFG.__init__": [[193, 251], ["torch.Module.__init__", "pcfgs.blpcfg.FastBLPCFG", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "NBL_PCFG.FastNBLPCFG._initialize", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.C_PCFG.CompoundPCFG._initialize"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "FastNBLPCFG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pcfg", "=", "FastBLPCFG", "(", ")", "\n", "\n", "self", ".", "device", "=", "dataset", ".", "device", "\n", "self", ".", "args", "=", "args", "\n", "# number of states", "\n", "self", ".", "NT", "=", "args", ".", "NT", "\n", "self", ".", "T", "=", "args", ".", "T", "\n", "self", ".", "V", "=", "len", "(", "dataset", ".", "word_vocab", ")", "\n", "self", ".", "NT_T", "=", "self", ".", "NT", "+", "self", ".", "T", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n", "# embedding dimensions", "\n", "self", ".", "s_dim", "=", "args", ".", "s_dim", "\n", "self", ".", "r", "=", "args", ".", "r", "\n", "\n", "self", ".", "nonterm_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "nonterm_emb_root", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "noninherent_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT_T", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "inherent_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT_T", ",", "self", ".", "s_dim", ")", ")", "\n", "\n", "self", ".", "word_emb", "=", "nn", ".", "Embedding", "(", "self", ".", "V", ",", "self", ".", "s_dim", ")", "\n", "\n", "self", ".", "root_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "s_dim", ")", ")", "\n", "\n", "self", ".", "r_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "r", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "r_emb2", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "r", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "r_emb3", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "r", ",", "self", ".", "s_dim", ")", ")", "\n", "\n", "self", ".", "beta_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "V", ")", "\n", ")", "\n", "\n", "self", ".", "noninherent_mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "NT_T", "*", "2", ")", ")", "\n", "\n", "self", ".", "inherent_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "NT_T", ")", ")", "\n", "self", ".", "head_encoder", "=", "nn", ".", "Linear", "(", "self", ".", "s_dim", "+", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", "\n", "\n", "self", ".", "head_mlp", "=", "nn", ".", "Sequential", "(", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "r", ")", "\n", ")", "\n", "\n", "self", ".", "root_mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "NT", ")", ")", "\n", "\n", "self", ".", "root_mlp2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "V", ")", ")", "\n", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.FastNBLPCFG._initialize": [[252, 256], ["NBL_PCFG.FastNBLPCFG.parameters", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.FastNBLPCFG.forward": [[257, 291], ["NBL_PCFG.FastNBLPCFG.word_emb", "NBL_PCFG.FastNBLPCFG.nonterm_emb.unsqueeze().expand", "x_emb.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NBL_PCFG.FastNBLPCFG.head_mlp", "head.softmax.softmax.softmax", "NBL_PCFG.FastNBLPCFG.inherent_mlp().softmax().permute().unsqueeze().expand", "NBL_PCFG.FastNBLPCFG.noninherent_mlp().softmax().reshape().transpose().unsqueeze().expand", "NBL_PCFG.FastNBLPCFG.beta_mlp().log_softmax().transpose().unsqueeze().expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "NBL_PCFG.FastNBLPCFG.root_mlp().log_softmax", "NBL_PCFG.FastNBLPCFG.root_mlp2().log_softmax", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "x.unsqueeze().expand", "NBL_PCFG.FastNBLPCFG."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "input", "[", "'word'", "]", "\n", "b", ",", "n", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "x_emb", "=", "self", ".", "word_emb", "(", "x", ")", "\n", "\n", "def", "roots", "(", ")", ":", "\n", "            ", "root_emb", "=", "self", ".", "root_emb", "\n", "roots", "=", "self", ".", "root_mlp", "(", "root_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "roots_v", "=", "self", ".", "root_mlp2", "(", "self", ".", "nonterm_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "roots_v", "=", "torch", ".", "gather", "(", "roots_v", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "self", ".", "NT", ",", "self", ".", "V", ")", ",", "-", "1", ",", "\n", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "self", ".", "NT", ",", "-", "1", ")", ")", "\n", "return", "roots", ".", "expand", "(", "b", ",", "self", ".", "NT", ")", ".", "unsqueeze", "(", "1", ")", "+", "roots_v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n", "", "nt_emb", "=", "self", ".", "nonterm_emb", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "-", "1", ")", "\n", "x_emb", "=", "x_emb", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "NT", ",", "-", "1", ")", "\n", "nt_x_emb", "=", "torch", ".", "cat", "(", "[", "x_emb", ",", "\n", "nt_emb", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "n", ",", "-", "1", ",", "-", "1", ")", "]", ",", "dim", "=", "3", "\n", ")", "\n", "head", "=", "self", ".", "head_mlp", "(", "self", ".", "head_encoder", "(", "nt_x_emb", ")", ".", "relu", "(", ")", "+", "x_emb", ")", "\n", "head", "=", "head", ".", "softmax", "(", "-", "1", ")", "\n", "inherent", "=", "self", ".", "inherent_mlp", "(", "self", ".", "r_emb", ")", ".", "softmax", "(", "-", "1", ")", ".", "permute", "(", "1", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "-", "1", ")", "\n", "noninherent_symbol", "=", "self", ".", "noninherent_mlp", "(", "self", ".", "r_emb2", ")", ".", "softmax", "(", "-", "1", ")", ".", "reshape", "(", "self", ".", "r", ",", "self", ".", "NT_T", ",", "2", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "\n", "-", "1", ",", "-", "1", ")", "\n", "noninherent_word", "=", "self", ".", "beta_mlp", "(", "self", ".", "r_emb3", ")", ".", "log_softmax", "(", "-", "1", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "-", "1", ")", "\n", "noninherent_word", "=", "torch", ".", "gather", "(", "noninherent_word", ",", "1", ",", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "r", ")", ")", "\n", "\n", "# b, n, nt, r, 2", "\n", "return", "{", "\n", "'head'", ":", "head", ",", "\n", "'noninherent_symbol'", ":", "noninherent_symbol", ",", "\n", "'noninherent_word'", ":", "noninherent_word", ",", "\n", "'inherent'", ":", "inherent", ",", "\n", "'root'", ":", "roots", "(", ")", ",", "\n", "'kl'", ":", "0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.FastNBLPCFG.loss": [[292, 296], ["NBL_PCFG.FastNBLPCFG.forward", "NBL_PCFG.FastNBLPCFG.pcfg.loss", "result[].mean"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.loss"], ["", "def", "loss", "(", "self", ",", "input", ")", ":", "\n", "        ", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "result", "=", "self", ".", "pcfg", ".", "loss", "(", "rules", ",", "input", "[", "'seq_len'", "]", ")", "\n", "return", "-", "result", "[", "'partition'", "]", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.FastNBLPCFG.evaluate": [[297, 308], ["NBL_PCFG.FastNBLPCFG.forward", "NBL_PCFG.FastNBLPCFG.pcfg.decode", "NBL_PCFG.FastNBLPCFG.forward4viterbi", "pcfgs.eisner_satta.EisnerSatta.viterbi_decoding", "NBL_PCFG.FastNBLPCFG.forward", "NBL_PCFG.FastNBLPCFG.pcfg.loss", "pcfgs.eisner_satta.EisnerSatta.viterbi_decoding.update"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NBL_PCFG.NeuralBLPCFG.forward4viterbi", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.eisner_satta.EisnerSatta.viterbi_decoding", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.loss", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update"], ["", "def", "evaluate", "(", "self", ",", "input", ",", "decode_type", "=", "'mbr'", ",", "eval_dep", "=", "False", ")", ":", "\n", "        ", "if", "decode_type", "==", "'mbr'", ":", "\n", "            ", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "return", "self", ".", "pcfg", ".", "decode", "(", "rules", ",", "input", "[", "'seq_len'", "]", ",", "mbr", "=", "True", ",", "eval_dep", "=", "eval_dep", ")", "\n", "", "else", ":", "\n", "            ", "rules", "=", "self", ".", "forward4viterbi", "(", "input", ")", "\n", "result", "=", "EisnerSatta", ".", "viterbi_decoding", "(", "rule", "=", "rules", "[", "'rule'", "]", ",", "root", "=", "rules", "[", "'root'", "]", ",", "lens", "=", "input", "[", "'seq_len'", "]", ")", "\n", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "logZ", "=", "self", ".", "pcfg", ".", "loss", "(", "rules", ",", "input", "[", "'seq_len'", "]", ")", "\n", "result", ".", "update", "(", "logZ", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.N_PCFG.NeuralPCFG.__init__": [[7, 38], ["torch.Module.__init__", "pcfgs.pcfg.PCFG", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "N_PCFG.NeuralPCFG._initialize", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.C_PCFG.CompoundPCFG._initialize"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "NeuralPCFG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pcfg", "=", "PCFG", "(", ")", "\n", "self", ".", "device", "=", "dataset", ".", "device", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "NT", "=", "args", ".", "NT", "\n", "self", ".", "T", "=", "args", ".", "T", "\n", "self", ".", "V", "=", "len", "(", "dataset", ".", "word_vocab", ")", "\n", "\n", "self", ".", "s_dim", "=", "args", ".", "s_dim", "\n", "\n", "self", ".", "term_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "T", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "nonterm_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "root_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "s_dim", ")", ")", "\n", "\n", "self", ".", "term_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "V", ")", ")", "\n", "\n", "self", ".", "root_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "NT", ")", ")", "\n", "\n", "self", ".", "NT_T", "=", "self", ".", "NT", "+", "self", ".", "T", "\n", "self", ".", "rule_mlp", "=", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "(", "self", ".", "NT_T", ")", "**", "2", ")", "\n", "\n", "# I find this is important for neural/compound PCFG. if do not use this initialization, the performance would get much worser.", "\n", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.N_PCFG.NeuralPCFG._initialize": [[40, 44], ["N_PCFG.NeuralPCFG.parameters", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.N_PCFG.NeuralPCFG.forward": [[45, 69], ["N_PCFG.NeuralPCFG.root_mlp().log_softmax", "N_PCFG.NeuralPCFG.expand", "N_PCFG.NeuralPCFG.term_mlp().log_softmax", "N_PCFG.NeuralPCFG.rule_mlp().log_softmax", "rule_prob.reshape.reshape.reshape", "rule_prob.reshape.reshape.unsqueeze().expand().contiguous", "N_PCFG.NeuralPCFG."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ",", "evaluating", "=", "False", ")", ":", "\n", "        ", "x", "=", "input", "[", "'word'", "]", "\n", "b", ",", "n", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "\n", "def", "roots", "(", ")", ":", "\n", "            ", "root_emb", "=", "self", ".", "root_emb", "\n", "roots", "=", "self", ".", "root_mlp", "(", "root_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "return", "roots", ".", "expand", "(", "b", ",", "self", ".", "NT", ")", "\n", "\n", "", "def", "terms", "(", ")", ":", "\n", "            ", "term_prob", "=", "self", ".", "term_mlp", "(", "self", ".", "term_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "return", "term_prob", "[", "torch", ".", "arange", "(", "self", ".", "T", ")", "[", "None", ",", "None", "]", ",", "x", "[", ":", ",", ":", ",", "None", "]", "]", "\n", "\n", "", "def", "rules", "(", ")", ":", "\n", "            ", "rule_prob", "=", "self", ".", "rule_mlp", "(", "self", ".", "nonterm_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "rule_prob", "=", "rule_prob", ".", "reshape", "(", "self", ".", "NT", ",", "self", ".", "NT_T", ",", "self", ".", "NT_T", ")", "\n", "return", "rule_prob", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "*", "rule_prob", ".", "shape", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "root", ",", "unary", ",", "rule", "=", "roots", "(", ")", ",", "terms", "(", ")", ",", "rules", "(", ")", "\n", "\n", "return", "{", "'unary'", ":", "unary", ",", "\n", "'root'", ":", "root", ",", "\n", "'rule'", ":", "rule", ",", "\n", "'kl'", ":", "torch", ".", "tensor", "(", "0", ",", "device", "=", "self", ".", "device", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.N_PCFG.NeuralPCFG.loss": [[71, 75], ["N_PCFG.NeuralPCFG.forward", "N_PCFG.NeuralPCFG.pcfg._inside", "result[].mean"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside"], ["", "def", "loss", "(", "self", ",", "input", ")", ":", "\n", "        ", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "result", "=", "self", ".", "pcfg", ".", "_inside", "(", "rules", "=", "rules", ",", "lens", "=", "input", "[", "'seq_len'", "]", ")", "\n", "return", "-", "result", "[", "'partition'", "]", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.N_PCFG.NeuralPCFG.evaluate": [[77, 85], ["N_PCFG.NeuralPCFG.forward", "N_PCFG.NeuralPCFG.pcfg.decode", "N_PCFG.NeuralPCFG.pcfg.decode"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode"], ["", "def", "evaluate", "(", "self", ",", "input", ",", "decode_type", ",", "**", "kwargs", ")", ":", "\n", "        ", "rules", "=", "self", ".", "forward", "(", "input", ",", "evaluating", "=", "True", ")", "\n", "if", "decode_type", "==", "'viterbi'", ":", "\n", "            ", "return", "self", ".", "pcfg", ".", "decode", "(", "rules", "=", "rules", ",", "lens", "=", "input", "[", "'seq_len'", "]", ",", "viterbi", "=", "True", ",", "mbr", "=", "False", ")", "\n", "", "elif", "decode_type", "==", "'mbr'", ":", "\n", "            ", "return", "self", ".", "pcfg", ".", "decode", "(", "rules", "=", "rules", ",", "lens", "=", "input", "[", "'seq_len'", "]", ",", "viterbi", "=", "False", ",", "mbr", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NL_PCFG.NeuralLPCFG.__init__": [[12, 52], ["torch.Module.__init__", "pcfgs.lpcfg.L_PCFG", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Embedding", "torch.Embedding", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "NL_PCFG.NeuralLPCFG._initialize", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.C_PCFG.CompoundPCFG._initialize"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "NeuralLPCFG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pcfg", "=", "L_PCFG", "(", ")", "\n", "self", ".", "device", "=", "dataset", ".", "device", "\n", "self", ".", "args", "=", "args", "\n", "# number of states", "\n", "self", ".", "NT", "=", "args", ".", "NT", "\n", "self", ".", "T", "=", "args", ".", "T", "\n", "self", ".", "V", "=", "len", "(", "dataset", ".", "word_vocab", ")", "\n", "self", ".", "NT_T", "=", "self", ".", "NT", "+", "self", ".", "T", "\n", "\n", "# embedding dimensions", "\n", "self", ".", "s_dim", "=", "args", ".", "s_dim", "\n", "\n", "# embeddings", "\n", "self", ".", "term_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "T", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "nonterm_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "nonterm_emission_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "root_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "word_emb", "=", "nn", ".", "Embedding", "(", "self", ".", "V", ",", "self", ".", "s_dim", ")", "\n", "\n", "self", ".", "head_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", "+", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "2", "*", "self", ".", "NT_T", ")", ")", "\n", "\n", "self", ".", "left_rule_mlp", "=", "nn", ".", "Linear", "(", "self", ".", "s_dim", "+", "self", ".", "s_dim", ",", "(", "self", ".", "NT_T", ")", "**", "2", ")", "\n", "self", ".", "right_rule_mlp", "=", "nn", ".", "Linear", "(", "self", ".", "s_dim", "+", "self", ".", "s_dim", ",", "(", "self", ".", "NT_T", ")", "**", "2", ")", "\n", "\n", "# root rule.", "\n", "self", ".", "root_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "NT", ")", ")", "\n", "\n", "# unary rule", "\n", "self", ".", "term_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "V", ")", ")", "\n", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NL_PCFG.NeuralLPCFG._initialize": [[53, 57], ["NL_PCFG.NeuralLPCFG.parameters", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NL_PCFG.NeuralLPCFG.forward": [[61, 119], ["NL_PCFG.NeuralLPCFG.root_mlp().log_softmax", "NL_PCFG.NeuralLPCFG.expand", "NL_PCFG.NeuralLPCFG.term_mlp().log_softmax", "x.unsqueeze().expand().unsqueeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "NL_PCFG.NeuralLPCFG.word_emb", "NL_PCFG.NeuralLPCFG.nonterm_emb.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NL_PCFG.NeuralLPCFG.left_rule_mlp", "NL_PCFG.NeuralLPCFG.right_rule_mlp", "NL_PCFG.NeuralLPCFG.reshape", "NL_PCFG.NeuralLPCFG.reshape", "NL_PCFG.NeuralLPCFG.head_mlp().log_softmax", "NL_PCFG.NeuralLPCFG.reshape", "NL_PCFG.NeuralLPCFG.reshape.log_softmax", "NL_PCFG.NeuralLPCFG.reshape.log_softmax", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "NL_PCFG.NeuralLPCFG."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ",", "eval_dep", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "input", "[", "'word'", "]", "\n", "b", ",", "n", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "\n", "def", "roots", "(", ")", ":", "\n", "            ", "root_emb", "=", "self", ".", "root_emb", "\n", "roots", "=", "self", ".", "root_mlp", "(", "root_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "return", "roots", ".", "expand", "(", "b", ",", "self", ".", "NT", ")", "\n", "\n", "", "def", "terms", "(", ")", ":", "\n", "            ", "term_emb", "=", "self", ".", "term_emb", "\n", "term_prob", "=", "self", ".", "term_mlp", "(", "torch", ".", "cat", "(", "[", "self", ".", "nonterm_emission_emb", ",", "term_emb", "]", ",", "dim", "=", "0", ")", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "indices", "=", "x", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "b", ",", "n", ",", "self", ".", "NT", "+", "self", ".", "T", ")", ".", "unsqueeze", "(", "3", ")", "\n", "term_prob", "=", "torch", ".", "gather", "(", "term_prob", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "n", ",", "*", "term_prob", ".", "shape", ")", ",", "\n", "3", ",", "indices", ")", ".", "squeeze", "(", "3", ")", "\n", "return", "term_prob", "\n", "\n", "", "def", "rules", "(", ")", ":", "\n", "            ", "x_emb", "=", "self", ".", "word_emb", "(", "x", ")", "\n", "nt_emb", "=", "self", ".", "nonterm_emb", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "b", ",", "-", "1", ",", "-", "1", ")", "\n", "nt_x_emb", "=", "torch", ".", "cat", "(", "[", "x_emb", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "NT", ",", "-", "1", ")", ",", "\n", "nt_emb", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "n", ",", "-", "1", ",", "-", "1", ")", "]", ",", "dim", "=", "3", "\n", ")", "\n", "left_rule_score", "=", "self", ".", "left_rule_mlp", "(", "nt_x_emb", ")", "# nt x t**2", "\n", "right_rule_score", "=", "self", ".", "right_rule_mlp", "(", "nt_x_emb", ")", "# nt x t**2", "\n", "left_rule_scores", "=", "left_rule_score", ".", "reshape", "(", "b", ",", "n", ",", "self", ".", "NT", ",", "self", ".", "NT_T", ",", "self", ".", "NT_T", ")", "\n", "right_rule_scores", "=", "right_rule_score", ".", "reshape", "(", "b", ",", "n", ",", "self", ".", "NT", ",", "self", ".", "NT_T", ",", "self", ".", "NT_T", ")", "\n", "head_score", "=", "self", ".", "head_mlp", "(", "nt_x_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "# nt x t**2", "\n", "head_scores", "=", "head_score", ".", "reshape", "(", "b", ",", "n", ",", "self", ".", "NT", ",", "self", ".", "NT_T", ",", "2", ")", "\n", "left_scores", "=", "left_rule_scores", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", "\n", "right_scores", "=", "right_rule_scores", ".", "log_softmax", "(", "dim", "=", "-", "2", ")", "\n", "rule_scores", "=", "torch", ".", "stack", "(", "[", "head_scores", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "4", ")", "+", "left_scores", ",", "\n", "head_scores", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", ".", "unsqueeze", "(", "3", ")", "+", "right_scores", "]", ",", "dim", "=", "1", ")", "\n", "return", "rule_scores", "\n", "\n", "", "root", ",", "unary", ",", "rule", "=", "roots", "(", ")", ",", "terms", "(", ")", ",", "rules", "(", ")", "\n", "\n", "\n", "if", "eval_dep", ":", "\n", "            ", "left", "=", "torch", ".", "einsum", "(", "\"qnabc, qmc -> qmnabc\"", ",", "rule", "[", ":", ",", "0", "]", ".", "exp", "(", ")", ",", "unary", ".", "exp", "(", ")", ")", ".", "add_", "(", "1e-20", ")", ".", "log", "(", ")", "\n", "right", "=", "torch", ".", "einsum", "(", "\"qnabc, qmb -> qmnabc\"", ",", "rule", "[", ":", ",", "1", "]", ".", "exp", "(", ")", ",", "unary", ".", "exp", "(", ")", ")", ".", "add_", "(", "1e-20", ")", ".", "log", "(", ")", "\n", "\n", "rule", "=", "left", ".", "mul_", "(", "\n", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "n", ",", "n", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ",", "diagonal", "=", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "*", "left", ".", "shape", ")", ")", "+", "right", ".", "mul_", "(", "\n", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "n", ",", "n", ",", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ",", "diagonal", "=", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "*", "right", ".", "shape", ")", ")", "\n", "return", "{", "\n", "'rule'", ":", "rule", ",", "\n", "'root'", ":", "root", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "b", ",", "n", ",", "self", ".", "NT", ")", "\n", "}", "\n", "\n", "", "else", ":", "\n", "            ", "return", "{", "'unary'", ":", "unary", ",", "\n", "'root'", ":", "root", ",", "\n", "'rule'", ":", "rule", ",", "\n", "'kl'", ":", "torch", ".", "tensor", "(", "0", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NL_PCFG.NeuralLPCFG.loss": [[120, 124], ["NL_PCFG.NeuralLPCFG.forward", "NL_PCFG.NeuralLPCFG.pcfg.loss", "result[].mean"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.loss"], ["", "", "def", "loss", "(", "self", ",", "input", ")", ":", "\n", "        ", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "result", "=", "self", ".", "pcfg", ".", "loss", "(", "rules", ",", "input", "[", "'seq_len'", "]", ")", "\n", "return", "-", "result", "[", "'partition'", "]", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.NL_PCFG.NeuralLPCFG.evaluate": [[125, 137], ["NL_PCFG.NeuralLPCFG.forward", "NL_PCFG.NeuralLPCFG.pcfg.decode", "NL_PCFG.NeuralLPCFG.forward", "pcfgs.eisner_satta.EisnerSatta.viterbi_decoding", "NL_PCFG.NeuralLPCFG.forward", "NL_PCFG.NeuralLPCFG.pcfg.loss", "pcfgs.eisner_satta.EisnerSatta.viterbi_decoding.update"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.eisner_satta.EisnerSatta.viterbi_decoding", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.loss", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update"], ["", "def", "evaluate", "(", "self", ",", "input", ",", "decode_type", "=", "'mbr'", ",", "eval_dep", "=", "False", ")", ":", "\n", "        ", "if", "decode_type", "==", "'mbr'", ":", "\n", "            ", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "return", "self", ".", "pcfg", ".", "decode", "(", "rules", ",", "input", "[", "'seq_len'", "]", ",", "mbr", "=", "True", ",", "eval_dep", "=", "eval_dep", ")", "\n", "\n", "", "else", ":", "\n", "            ", "rules", "=", "self", ".", "forward", "(", "input", ",", "eval_dep", "=", "True", ")", "\n", "result", "=", "EisnerSatta", ".", "viterbi_decoding", "(", "rule", "=", "rules", "[", "'rule'", "]", ",", "root", "=", "rules", "[", "'root'", "]", ",", "lens", "=", "input", "[", "'seq_len'", "]", ")", "\n", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "logZ", "=", "self", ".", "pcfg", ".", "loss", "(", "rules", ",", "input", "[", "'seq_len'", "]", ")", "\n", "result", ".", "update", "(", "logZ", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.C_PCFG.CompoundPCFG.__init__": [[8, 49], ["torch.Module.__init__", "pcfgs.pcfg.PCFG", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "C_PCFG.CompoundPCFG._initialize", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "parser.modules.res.ResLayer", "parser.modules.res.ResLayer", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.C_PCFG.CompoundPCFG._initialize"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "CompoundPCFG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pcfg", "=", "PCFG", "(", ")", "\n", "self", ".", "device", "=", "dataset", ".", "device", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "NT", "=", "args", ".", "NT", "\n", "self", ".", "T", "=", "args", ".", "T", "\n", "self", ".", "V", "=", "len", "(", "dataset", ".", "word_vocab", ")", "\n", "\n", "self", ".", "s_dim", "=", "args", ".", "s_dim", "\n", "self", ".", "z_dim", "=", "args", ".", "z_dim", "\n", "self", ".", "w_dim", "=", "args", ".", "w_dim", "\n", "self", ".", "h_dim", "=", "args", ".", "h_dim", "\n", "\n", "self", ".", "term_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "T", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "nonterm_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "NT", ",", "self", ".", "s_dim", ")", ")", "\n", "self", ".", "root_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "self", ".", "s_dim", ")", ")", "\n", "\n", "input_dim", "=", "self", ".", "s_dim", "+", "self", ".", "z_dim", "\n", "\n", "self", ".", "term_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "input_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "V", ")", ")", "\n", "\n", "self", ".", "root_mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "input_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "ResLayer", "(", "self", ".", "s_dim", ",", "self", ".", "s_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "s_dim", ",", "self", ".", "NT", ")", ")", "\n", "\n", "self", ".", "enc_emb", "=", "nn", ".", "Embedding", "(", "self", ".", "V", ",", "self", ".", "w_dim", ")", "\n", "\n", "self", ".", "enc_rnn", "=", "nn", ".", "LSTM", "(", "self", ".", "w_dim", ",", "self", ".", "h_dim", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "1", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "enc_out", "=", "nn", ".", "Linear", "(", "self", ".", "h_dim", "*", "2", ",", "self", ".", "z_dim", "*", "2", ")", "\n", "\n", "self", ".", "NT_T", "=", "self", ".", "NT", "+", "self", ".", "T", "\n", "self", ".", "rule_mlp", "=", "nn", ".", "Linear", "(", "input_dim", ",", "(", "self", ".", "NT_T", ")", "**", "2", ")", "\n", "\n", "self", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.C_PCFG.CompoundPCFG._initialize": [[51, 55], ["C_PCFG.CompoundPCFG.parameters", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.C_PCFG.CompoundPCFG.forward": [[56, 123], ["C_PCFG.CompoundPCFG.forward.enc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ",", "evaluating", "=", "False", ")", ":", "\n", "        ", "x", "=", "input", "[", "'word'", "]", "\n", "b", ",", "n", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "seq_len", "=", "input", "[", "'seq_len'", "]", "\n", "\n", "def", "enc", "(", "x", ")", ":", "\n", "            ", "x_embbed", "=", "self", ".", "enc_emb", "(", "x", ")", "\n", "x_packed", "=", "pack_padded_sequence", "(", "\n", "x_embbed", ",", "seq_len", ",", "batch_first", "=", "True", ",", "enforce_sorted", "=", "False", "\n", ")", "\n", "h_packed", ",", "_", "=", "self", ".", "enc_rnn", "(", "x_packed", ")", "\n", "padding_value", "=", "float", "(", "\"-inf\"", ")", "\n", "output", ",", "lengths", "=", "pad_packed_sequence", "(", "\n", "h_packed", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", "\n", ")", "\n", "h", "=", "output", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "out", "=", "self", ".", "enc_out", "(", "h", ")", "\n", "mean", "=", "out", "[", ":", ",", ":", "self", ".", "z_dim", "]", "\n", "lvar", "=", "out", "[", ":", ",", "self", ".", "z_dim", ":", "]", "\n", "return", "mean", ",", "lvar", "\n", "\n", "", "def", "kl", "(", "mean", ",", "logvar", ")", ":", "\n", "            ", "result", "=", "-", "0.5", "*", "(", "logvar", "-", "torch", ".", "pow", "(", "mean", ",", "2", ")", "-", "torch", ".", "exp", "(", "logvar", ")", "+", "1", ")", "\n", "return", "result", "\n", "\n", "", "mean", ",", "lvar", "=", "enc", "(", "x", ")", "\n", "z", "=", "mean", "\n", "\n", "if", "not", "evaluating", ":", "\n", "            ", "z", "=", "mean", ".", "new", "(", "b", ",", "mean", ".", "size", "(", "1", ")", ")", ".", "normal_", "(", "0", ",", "1", ")", "\n", "z", "=", "(", "0.5", "*", "lvar", ")", ".", "exp", "(", ")", "*", "z", "+", "mean", "\n", "\n", "\n", "", "def", "roots", "(", ")", ":", "\n", "            ", "root_emb", "=", "self", ".", "root_emb", ".", "expand", "(", "b", ",", "self", ".", "s_dim", ")", "\n", "root_emb", "=", "torch", ".", "cat", "(", "[", "root_emb", ",", "z", "]", ",", "-", "1", ")", "\n", "roots", "=", "self", ".", "root_mlp", "(", "root_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "return", "roots", "\n", "\n", "", "def", "terms", "(", ")", ":", "\n", "            ", "term_emb", "=", "self", ".", "term_emb", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "\n", "b", ",", "self", ".", "T", ",", "self", ".", "s_dim", "\n", ")", "\n", "z_expand", "=", "z", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "b", ",", "self", ".", "T", ",", "self", ".", "z_dim", ")", "\n", "term_emb", "=", "torch", ".", "cat", "(", "[", "term_emb", ",", "z_expand", "]", ",", "-", "1", ")", "\n", "term_prob", "=", "self", ".", "term_mlp", "(", "term_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "return", "term_prob", ".", "gather", "(", "-", "1", ",", "x", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "b", ",", "self", ".", "T", ",", "x", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n", "", "def", "rules", "(", ")", ":", "\n", "            ", "nonterm_emb", "=", "self", ".", "nonterm_emb", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "\n", "b", ",", "self", ".", "NT", ",", "self", ".", "s_dim", "\n", ")", "\n", "z_expand", "=", "z", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "\n", "b", ",", "self", ".", "NT", ",", "self", ".", "z_dim", "\n", ")", "\n", "nonterm_emb", "=", "torch", ".", "cat", "(", "[", "nonterm_emb", ",", "z_expand", "]", ",", "-", "1", ")", "\n", "rule_prob", "=", "self", ".", "rule_mlp", "(", "nonterm_emb", ")", ".", "log_softmax", "(", "-", "1", ")", "\n", "rule_prob", "=", "rule_prob", ".", "reshape", "(", "b", ",", "self", ".", "NT", ",", "self", ".", "NT_T", ",", "self", ".", "NT_T", ")", "\n", "return", "rule_prob", "\n", "\n", "\n", "", "root", ",", "unary", ",", "rule", "=", "roots", "(", ")", ",", "terms", "(", ")", ",", "rules", "(", ")", "\n", "\n", "return", "{", "'unary'", ":", "unary", ",", "\n", "'root'", ":", "root", ",", "\n", "'rule'", ":", "rule", ",", "\n", "'kl'", ":", "kl", "(", "mean", ",", "lvar", ")", ".", "sum", "(", "1", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.C_PCFG.CompoundPCFG.loss": [[124, 129], ["C_PCFG.CompoundPCFG.forward", "C_PCFG.CompoundPCFG.pcfg._inside"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.L_PCFG._inside"], ["", "def", "loss", "(", "self", ",", "input", ")", ":", "\n", "        ", "rules", "=", "self", ".", "forward", "(", "input", ")", "\n", "result", "=", "self", ".", "pcfg", ".", "_inside", "(", "rules", "=", "rules", ",", "lens", "=", "input", "[", "'seq_len'", "]", ")", "\n", "loss", "=", "(", "-", "result", "[", "'partition'", "]", "+", "rules", "[", "'kl'", "]", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.model.C_PCFG.CompoundPCFG.evaluate": [[131, 142], ["C_PCFG.CompoundPCFG.forward", "C_PCFG.CompoundPCFG.pcfg.decode", "C_PCFG.CompoundPCFG.pcfg.decode"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode"], ["", "def", "evaluate", "(", "self", ",", "input", ",", "decode_type", ",", "**", "kwargs", ")", ":", "\n", "        ", "rules", "=", "self", ".", "forward", "(", "input", ",", "evaluating", "=", "True", ")", "\n", "if", "decode_type", "==", "'viterbi'", ":", "\n", "            ", "result", "=", "self", ".", "pcfg", ".", "decode", "(", "rules", "=", "rules", ",", "lens", "=", "input", "[", "'seq_len'", "]", ",", "viterbi", "=", "True", ",", "mbr", "=", "False", ")", "\n", "", "elif", "decode_type", "==", "'mbr'", ":", "\n", "            ", "result", "=", "self", ".", "pcfg", ".", "decode", "(", "rules", "=", "rules", ",", "lens", "=", "input", "[", "'seq_len'", "]", ",", "viterbi", "=", "False", ",", "mbr", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "result", "[", "'partition'", "]", "-=", "rules", "[", "'kl'", "]", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.res.ResLayer.__init__": [[4, 11], ["torch.Module.__init__", "torch.Sequential", "torch.Linear", "torch.ReLU", "torch.Linear", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "ResLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "out_dim", ",", "out_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.res.ResLayer.forward": [[13, 15], ["res.ResLayer.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "linear", "(", "x", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.DotAttention.__init__": [[24, 31], ["torch.nn.Module.__init__", "math.sqrt", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Softmax", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "key_size", ",", "value_size", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "DotAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "key_size", "=", "key_size", "\n", "self", ".", "value_size", "=", "value_size", "\n", "self", ".", "scale", "=", "math", ".", "sqrt", "(", "key_size", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.DotAttention.forward": [[32, 46], ["attention.DotAttention.softmax", "attention.DotAttention.drop", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "attention.DotAttention.masked_fill_", "K.transpose"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop"], ["", "def", "forward", "(", "self", ",", "Q", ",", "K", ",", "V", ",", "mask_out", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param Q: [..., seq_len_q, key_size]\n        :param K: [..., seq_len_k, key_size]\n        :param V: [..., seq_len_k, value_size]\n        :param mask_out: [..., 1, seq_len] or [..., seq_len_q, seq_len_k]\n        \"\"\"", "\n", "output", "=", "torch", ".", "matmul", "(", "Q", ",", "K", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "/", "self", ".", "scale", "\n", "if", "mask_out", "is", "not", "None", ":", "\n", "            ", "output", ".", "masked_fill_", "(", "mask_out", ",", "-", "1e9", ")", "\n", "", "output", "=", "self", ".", "softmax", "(", "output", ")", "\n", "output", "=", "self", ".", "drop", "(", "output", ")", "\n", "return", "torch", ".", "matmul", "(", "output", ",", "V", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.MultiHeadAttention.__init__": [[53, 69], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "attention.MultiHeadAttention.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.reset_parameters"], ["def", "__init__", "(", "self", ",", "d_model", ":", "int", "=", "512", ",", "n_head", ":", "int", "=", "8", ",", "dropout", ":", "float", "=", "0.0", ",", "layer_idx", ":", "int", "=", "None", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "head_dim", "=", "d_model", "//", "n_head", "\n", "self", ".", "layer_idx", "=", "layer_idx", "\n", "assert", "d_model", "%", "n_head", "==", "0", ",", "\"d_model should be divisible by n_head\"", "\n", "self", ".", "scaling", "=", "self", ".", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "q_proj", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "k_proj", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "v_proj", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.MultiHeadAttention.forward": [[70, 141], ["attention.MultiHeadAttention.q_proj", "isinstance", "isinstance", "query.size", "q.reshape.reshape.reshape", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.reshape", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attention.MultiHeadAttention.reshape", "attention.MultiHeadAttention.out_proj", "key.size", "value.size", "query.data_ptr", "key.data_ptr", "value.data_ptr", "attention.MultiHeadAttention.k_proj", "attention.MultiHeadAttention.v_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "attn_weights.masked_fill.masked_fill.masked_fill", "attn_mask[].eq", "attn_weights.masked_fill.masked_fill.masked_fill", "key_mask[].bool", "float", "float"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "key_mask", "=", "None", ",", "attn_mask", "=", "None", ",", "state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :param query: batch x seq x dim\n        :param key: batch x seq x dim\n        :param value: batch x seq x dim\n        :param key_mask: batch x seq \u7528\u4e8e\u6307\u793a\u54ea\u4e9bkey\u4e0d\u8981attend\u5230\uff1b\u6ce8\u610f\u5230mask\u4e3a1\u7684\u5730\u65b9\u662f\u8981attend\u5230\u7684\n        :param attn_mask: seq x seq, \u7528\u4e8emask\u6389attention map\u3002 \u4e3b\u8981\u662f\u7528\u5728\u8bad\u7ec3\u65f6decoder\u7aef\u7684self attention\uff0c\u4e0b\u4e09\u89d2\u4e3a1\n        :param state: \u8fc7\u53bb\u7684\u4fe1\u606f\uff0c\u5728inference\u7684\u65f6\u5019\u4f1a\u7528\u5230\uff0c\u6bd4\u5982encoder output\u3001decoder\u7684prev kv\u3002\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u8ba1\u7b97\u3002\n        :return:\n        \"\"\"", "\n", "assert", "key", ".", "size", "(", ")", "==", "value", ".", "size", "(", ")", "\n", "if", "state", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "layer_idx", "is", "not", "None", "\n", "", "qkv_same", "=", "query", ".", "data_ptr", "(", ")", "==", "key", ".", "data_ptr", "(", ")", "==", "value", ".", "data_ptr", "(", ")", "\n", "\n", "q", "=", "self", ".", "q_proj", "(", "query", ")", "# batch x seq x dim", "\n", "q", "*=", "self", ".", "scaling", "\n", "k", "=", "v", "=", "None", "\n", "prev_k", "=", "prev_v", "=", "None", "\n", "\n", "# \u4ecestate\u4e2d\u53d6kv", "\n", "if", "isinstance", "(", "state", ",", "TransformerState", ")", ":", "# \u8bf4\u660e\u6b64\u65f6\u5728inference\u9636\u6bb5", "\n", "            ", "if", "qkv_same", ":", "# \u6b64\u65f6\u5728decoder self attention", "\n", "                ", "prev_k", "=", "state", ".", "decoder_prev_key", "[", "self", ".", "layer_idx", "]", "\n", "prev_v", "=", "state", ".", "decoder_prev_value", "[", "self", ".", "layer_idx", "]", "\n", "", "else", ":", "# \u6b64\u65f6\u5728decoder-encoder attention\uff0c\u76f4\u63a5\u5c06\u4fdd\u5b58\u4e0b\u6765\u7684key\u88c5\u8f7d\u8d77\u6765\u5373\u53ef", "\n", "                ", "k", "=", "state", ".", "encoder_key", "[", "self", ".", "layer_idx", "]", "\n", "v", "=", "state", ".", "encoder_value", "[", "self", ".", "layer_idx", "]", "\n", "\n", "", "", "if", "k", "is", "None", ":", "\n", "            ", "k", "=", "self", ".", "k_proj", "(", "key", ")", "\n", "v", "=", "self", ".", "v_proj", "(", "value", ")", "\n", "\n", "", "if", "prev_k", "is", "not", "None", ":", "\n", "            ", "k", "=", "torch", ".", "cat", "(", "(", "prev_k", ",", "k", ")", ",", "dim", "=", "1", ")", "\n", "v", "=", "torch", ".", "cat", "(", "(", "prev_v", ",", "v", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# \u66f4\u65b0state", "\n", "", "if", "isinstance", "(", "state", ",", "TransformerState", ")", ":", "\n", "            ", "if", "qkv_same", ":", "\n", "                ", "state", ".", "decoder_prev_key", "[", "self", ".", "layer_idx", "]", "=", "k", "\n", "state", ".", "decoder_prev_value", "[", "self", ".", "layer_idx", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "state", ".", "encoder_key", "[", "self", ".", "layer_idx", "]", "=", "k", "\n", "state", ".", "encoder_value", "[", "self", ".", "layer_idx", "]", "=", "v", "\n", "\n", "# \u5f00\u59cb\u8ba1\u7b97attention", "\n", "", "", "batch_size", ",", "q_len", ",", "d_model", "=", "query", ".", "size", "(", ")", "\n", "k_len", ",", "v_len", "=", "k", ".", "size", "(", "1", ")", ",", "v", ".", "size", "(", "1", ")", "\n", "q", "=", "q", ".", "reshape", "(", "batch_size", ",", "q_len", ",", "self", ".", "n_head", ",", "self", ".", "head_dim", ")", "\n", "k", "=", "k", ".", "reshape", "(", "batch_size", ",", "k_len", ",", "self", ".", "n_head", ",", "self", ".", "head_dim", ")", "\n", "v", "=", "v", ".", "reshape", "(", "batch_size", ",", "v_len", ",", "self", ".", "n_head", ",", "self", ".", "head_dim", ")", "\n", "\n", "attn_weights", "=", "torch", ".", "einsum", "(", "'bqnh,bknh->bqkn'", ",", "q", ",", "k", ")", "# bs,q_len,k_len,n_head", "\n", "if", "key_mask", "is", "not", "None", ":", "\n", "            ", "_key_mask", "=", "~", "key_mask", "[", ":", ",", "None", ",", ":", ",", "None", "]", ".", "bool", "(", ")", "# batch,1,k_len,1", "\n", "attn_weights", "=", "attn_weights", ".", "masked_fill", "(", "_key_mask", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "_attn_mask", "=", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ".", "eq", "(", "0", ")", "# 1,q_len,k_len,n_head", "\n", "attn_weights", "=", "attn_weights", ".", "masked_fill", "(", "_attn_mask", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "", "attn_weights", "=", "F", ".", "softmax", "(", "attn_weights", ",", "dim", "=", "2", ")", "\n", "attn_weights", "=", "F", ".", "dropout", "(", "attn_weights", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "output", "=", "torch", ".", "einsum", "(", "'bqkn,bknh->bqnh'", ",", "attn_weights", ",", "v", ")", "# batch,q_len,n_head,head_dim", "\n", "output", "=", "output", ".", "reshape", "(", "batch_size", ",", "q_len", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "out_proj", "(", "output", ")", "# batch,q_len,dim", "\n", "\n", "return", "output", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.MultiHeadAttention.reset_parameters": [[142, 147], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "q_proj", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "k_proj", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v_proj", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "out_proj", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.MultiHeadAttention.set_layer_idx": [[148, 150], ["None"], "methods", ["None"], ["", "def", "set_layer_idx", "(", "self", ",", "layer_idx", ")", ":", "\n", "        ", "self", ".", "layer_idx", "=", "layer_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.AttentionLayer.__init__": [[153, 166], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "selfu", ",", "input_size", ",", "key_dim", ",", "value_dim", ",", "bias", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        \u53ef\u7528\u4e8eLSTM2LSTM\u7684\u5e8f\u5217\u5230\u5e8f\u5217\u6a21\u578b\u7684decode\u8fc7\u7a0b\u4e2d\uff0c\u8be5attention\u662f\u5728decode\u8fc7\u7a0b\u4e2d\u6839\u636e\u4e0a\u4e00\u4e2astep\u7684hidden\u8ba1\u7b97\u5bf9encoder\u7ed3\u679c\u7684attention\n\n        :param int input_size: \u8f93\u5165\u7684\u5927\u5c0f\n        :param int key_dim: \u4e00\u822c\u5c31\u662fencoder_output\u8f93\u51fa\u7684\u7ef4\u5ea6\n        :param int value_dim: \u8f93\u51fa\u7684\u5927\u5c0f\u7ef4\u5ea6, \u4e00\u822c\u5c31\u662fdecoder hidden\u7684\u5927\u5c0f\n        :param bias:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "selfu", ".", "input_proj", "=", "nn", ".", "Linear", "(", "input_size", ",", "key_dim", ",", "bias", "=", "bias", ")", "\n", "selfu", ".", "output_proj", "=", "nn", ".", "Linear", "(", "input_size", "+", "key_dim", ",", "value_dim", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.AttentionLayer.forward": [[167, 196], ["attention.AttentionLayer.input_proj", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.softmax", "torch.softmax", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "attn_scores.float().masked_fill_().type_as.float().masked_fill_().type_as.float().masked_fill_().type_as", "attention.AttentionLayer.output_proj", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh.unsqueeze", "torch.tanh.unsqueeze", "attn_scores.float().masked_fill_().type_as.float().masked_fill_().type_as.float().masked_fill_", "attn_scores.float().masked_fill_().type_as.float().masked_fill_().type_as.unsqueeze", "encode_mask.eq", "float", "attn_scores.float().masked_fill_().type_as.float().masked_fill_().type_as.float"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "forward", "(", "self", ",", "input", ",", "encode_outputs", ",", "encode_mask", ")", ":", "\n", "        ", "\"\"\"\n\n        :param input: batch_size x input_size\n        :param encode_outputs: batch_size x max_len x key_dim\n        :param encode_mask: batch_size x max_len, \u4e3a0\u7684\u5730\u65b9\u4e3apadding\n        :return: hidden: batch_size x value_dim, scores: batch_size x max_len, normalized\u8fc7\u7684\n        \"\"\"", "\n", "\n", "# x: bsz x encode_hidden_size", "\n", "x", "=", "self", ".", "input_proj", "(", "input", ")", "\n", "\n", "# compute attention", "\n", "attn_scores", "=", "torch", ".", "matmul", "(", "encode_outputs", ",", "x", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "# b x max_len", "\n", "\n", "# don't attend over padding", "\n", "if", "encode_mask", "is", "not", "None", ":", "\n", "            ", "attn_scores", "=", "attn_scores", ".", "float", "(", ")", ".", "masked_fill_", "(", "\n", "encode_mask", ".", "eq", "(", "0", ")", ",", "\n", "float", "(", "'-inf'", ")", "\n", ")", ".", "type_as", "(", "attn_scores", ")", "# FP16 support: cast to float and back", "\n", "\n", "", "attn_scores", "=", "F", ".", "softmax", "(", "attn_scores", ",", "dim", "=", "-", "1", ")", "# srclen x bsz", "\n", "\n", "# sum weighted sources", "\n", "x", "=", "torch", ".", "matmul", "(", "attn_scores", ".", "unsqueeze", "(", "1", ")", ",", "encode_outputs", ")", ".", "squeeze", "(", "1", ")", "# b x encode_hidden_size", "\n", "\n", "x", "=", "torch", ".", "tanh", "(", "self", ".", "output_proj", "(", "torch", ".", "cat", "(", "(", "x", ",", "input", ")", ",", "dim", "=", "1", ")", ")", ")", "\n", "return", "x", ",", "attn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.BiAttention.forward": [[239, 263], ["premise_batch.bmm", "attention._masked_softmax", "attention._masked_softmax", "attention._weighted_sum", "attention._weighted_sum", "hypothesis_batch.transpose().contiguous", "premise_batch.bmm.transpose().contiguous", "hypothesis_batch.transpose", "premise_batch.bmm.transpose"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention._masked_softmax", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention._masked_softmax", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention._weighted_sum", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention._weighted_sum"], ["def", "forward", "(", "self", ",", "premise_batch", ",", "premise_mask", ",", "hypothesis_batch", ",", "hypothesis_mask", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.Tensor premise_batch: [batch_size, a_seq_len, hidden_size]\n        :param torch.Tensor premise_mask: [batch_size, a_seq_len]\n        :param torch.Tensor hypothesis_batch: [batch_size, b_seq_len, hidden_size]\n        :param torch.Tensor hypothesis_mask: [batch_size, b_seq_len]\n        :return: torch.Tensor attended_premises: [batch_size, a_seq_len, hidden_size] torch.Tensor attended_hypotheses: [batch_size, b_seq_len, hidden_size]\n        \"\"\"", "\n", "similarity_matrix", "=", "premise_batch", ".", "bmm", "(", "hypothesis_batch", ".", "transpose", "(", "2", ",", "1", ")", "\n", ".", "contiguous", "(", ")", ")", "\n", "\n", "prem_hyp_attn", "=", "_masked_softmax", "(", "similarity_matrix", ",", "hypothesis_mask", ")", "\n", "hyp_prem_attn", "=", "_masked_softmax", "(", "similarity_matrix", ".", "transpose", "(", "1", ",", "2", ")", "\n", ".", "contiguous", "(", ")", ",", "\n", "premise_mask", ")", "\n", "\n", "attended_premises", "=", "_weighted_sum", "(", "hypothesis_batch", ",", "\n", "prem_hyp_attn", ",", "\n", "premise_mask", ")", "\n", "attended_hypotheses", "=", "_weighted_sum", "(", "premise_batch", ",", "\n", "hyp_prem_attn", ",", "\n", "hypothesis_mask", ")", "\n", "\n", "return", "attended_premises", ",", "attended_hypotheses", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.SelfAttention.__init__": [[271, 290], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Tanh", "torch.nn.Tanh", "utils.initial_parameter"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.utils.initial_parameter"], ["def", "__init__", "(", "self", ",", "input_size", ",", "attention_unit", "=", "300", ",", "attention_hops", "=", "10", ",", "drop", "=", "0.5", ",", "initial_method", "=", "None", ",", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param int input_size: \u8f93\u5165tensor\u7684hidden\u7ef4\u5ea6\n        :param int attention_unit: \u8f93\u51fatensor\u7684hidden\u7ef4\u5ea6\n        :param int attention_hops:\n        :param float drop: dropout\u6982\u7387\uff0c\u9ed8\u8ba4\u503c\u4e3a0.5\n        :param str initial_method: \u521d\u59cb\u5316\u53c2\u6570\u65b9\u6cd5\n        \"\"\"", "\n", "super", "(", "SelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "attention_hops", "=", "attention_hops", "\n", "self", ".", "ws1", "=", "nn", ".", "Linear", "(", "input_size", ",", "attention_unit", ",", "bias", "=", "False", ")", "\n", "self", ".", "ws2", "=", "nn", ".", "Linear", "(", "attention_unit", ",", "attention_hops", ",", "bias", "=", "False", ")", "\n", "self", ".", "I", "=", "torch", ".", "eye", "(", "attention_hops", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "I_origin", "=", "self", ".", "I", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "initial_parameter", "(", "self", ",", "initial_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.SelfAttention._penalization": [[291, 304], ["attention.size", "attention.SelfAttention.I.size", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "attention.SelfAttention.I_origin.expand", "attention.SelfAttention.I.to", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "attention.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "_penalization", "(", "self", ",", "attention", ")", ":", "\n", "        ", "r\"\"\"\n        compute the penalization term for attention module\n        \"\"\"", "\n", "baz", "=", "attention", ".", "size", "(", "0", ")", "\n", "size", "=", "self", ".", "I", ".", "size", "(", ")", "\n", "if", "len", "(", "size", ")", "!=", "3", "or", "size", "[", "0", "]", "!=", "baz", ":", "\n", "            ", "self", ".", "I", "=", "self", ".", "I_origin", ".", "expand", "(", "baz", ",", "-", "1", ",", "-", "1", ")", "\n", "self", ".", "I", "=", "self", ".", "I", ".", "to", "(", "device", "=", "attention", ".", "device", ")", "\n", "", "attention_t", "=", "torch", ".", "transpose", "(", "attention", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "mat", "=", "torch", ".", "bmm", "(", "attention", ",", "attention_t", ")", "-", "self", ".", "I", "[", ":", "attention", ".", "size", "(", "0", ")", "]", "\n", "ret", "=", "(", "torch", ".", "sum", "(", "torch", ".", "sum", "(", "(", "mat", "**", "2", ")", ",", "2", ")", ",", "1", ")", ".", "squeeze", "(", ")", "+", "1e-10", ")", "**", "0.5", "\n", "return", "torch", ".", "sum", "(", "ret", ")", "/", "size", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.SelfAttention.forward": [[305, 325], ["input.contiguous.contiguous.contiguous", "input.contiguous.contiguous.size", "input_origin.transpose().contiguous.transpose().contiguous.expand", "input_origin.transpose().contiguous.transpose().contiguous.transpose().contiguous", "F.softmax.SelfAttention.tanh", "F.softmax.SelfAttention.ws2().transpose().contiguous", "torch.softmax", "torch.softmax", "F.softmax.SelfAttention.ws1", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "F.softmax.SelfAttention._penalization", "input_origin.transpose().contiguous.transpose().contiguous.transpose", "F.softmax.SelfAttention.drop", "F.softmax.SelfAttention.ws2().transpose", "F.softmax.SelfAttention.ws2"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention.SelfAttention._penalization", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop"], ["", "def", "forward", "(", "self", ",", "input", ",", "input_origin", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.Tensor input: [batch_size, seq_len, hidden_size] \u8981\u505aattention\u7684\u77e9\u9635\n        :param torch.Tensor input_origin: [batch_size, seq_len] \u539f\u59cbtoken\u7684index\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u542b\u6709pad\u90e8\u5206\u5185\u5bb9\n        :return torch.Tensor output1: [batch_size, multi-head, hidden_size] \u7ecf\u8fc7attention\u64cd\u4f5c\u540e\u8f93\u5165\u77e9\u9635\u7684\u7ed3\u679c\n        :return torch.Tensor output2: [1] attention\u60e9\u7f5a\u9879\uff0c\u662f\u4e00\u4e2a\u6807\u91cf\n        \"\"\"", "\n", "input", "=", "input", ".", "contiguous", "(", ")", "\n", "size", "=", "input", ".", "size", "(", ")", "# [bsz, len, nhid]", "\n", "\n", "input_origin", "=", "input_origin", ".", "expand", "(", "self", ".", "attention_hops", ",", "-", "1", ",", "-", "1", ")", "# [hops,baz, len]", "\n", "input_origin", "=", "input_origin", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# [baz, hops,len]", "\n", "\n", "y1", "=", "self", ".", "tanh", "(", "self", ".", "ws1", "(", "self", ".", "drop", "(", "input", ")", ")", ")", "# [baz,len,dim] -->[bsz,len, attention-unit]", "\n", "attention", "=", "self", ".", "ws2", "(", "y1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "# [bsz,len, attention-unit]--> [bsz, len, hop]--> [baz,hop,len]", "\n", "\n", "attention", "=", "attention", "+", "(", "-", "999999", "*", "(", "input_origin", "==", "0", ")", ".", "float", "(", ")", ")", "# remove the weight on padding token.", "\n", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "2", ")", "# [baz ,hop, len]", "\n", "return", "torch", ".", "bmm", "(", "attention", ",", "input", ")", ",", "self", ".", "_penalization", "(", "attention", ")", "# output1 --> [baz ,hop ,nhid]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention._masked_softmax": [[198, 212], ["tensor.size", "tensor.view", "mask.unsqueeze.expand_as().contiguous().float", "mask.unsqueeze.view", "torch.softmax", "F.softmax.view", "mask.unsqueeze.dim", "tensor.dim", "mask.unsqueeze.unsqueeze", "mask.unsqueeze.expand_as().contiguous", "mask.unsqueeze.size", "F.softmax.sum", "mask.unsqueeze.expand_as"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "_masked_softmax", "(", "tensor", ",", "mask", ")", ":", "\n", "    ", "tensor_shape", "=", "tensor", ".", "size", "(", ")", "\n", "reshaped_tensor", "=", "tensor", ".", "view", "(", "-", "1", ",", "tensor_shape", "[", "-", "1", "]", ")", "\n", "\n", "# Reshape the mask so it matches the size of the input tensor.", "\n", "while", "mask", ".", "dim", "(", ")", "<", "tensor", ".", "dim", "(", ")", ":", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "mask", "=", "mask", ".", "expand_as", "(", "tensor", ")", ".", "contiguous", "(", ")", ".", "float", "(", ")", "\n", "reshaped_mask", "=", "mask", ".", "view", "(", "-", "1", ",", "mask", ".", "size", "(", ")", "[", "-", "1", "]", ")", "\n", "result", "=", "F", ".", "softmax", "(", "reshaped_tensor", "*", "reshaped_mask", ",", "dim", "=", "-", "1", ")", "\n", "result", "=", "result", "*", "reshaped_mask", "\n", "# 1e-13 is added to avoid divisions by zero.", "\n", "result", "=", "result", "/", "(", "result", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "+", "1e-13", ")", "\n", "return", "result", ".", "view", "(", "*", "tensor_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.attention._weighted_sum": [[214, 221], ["weights.bmm", "mask.unsqueeze.transpose", "mask.unsqueeze.expand_as().contiguous().float", "mask.unsqueeze.dim", "weights.bmm.dim", "mask.unsqueeze.unsqueeze", "mask.unsqueeze.expand_as().contiguous", "mask.unsqueeze.expand_as"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "_weighted_sum", "(", "tensor", ",", "weights", ",", "mask", ")", ":", "\n", "    ", "w_sum", "=", "weights", ".", "bmm", "(", "tensor", ")", "\n", "while", "mask", ".", "dim", "(", ")", "<", "w_sum", ".", "dim", "(", ")", ":", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "mask", "=", "mask", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "w_sum", ")", ".", "contiguous", "(", ")", ".", "float", "(", ")", "\n", "return", "w_sum", "*", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.dropout.TimestepDropout.forward": [[16, 25], ["x.new_ones", "torch.nn.functional.dropout", "dropout_mask.unsqueeze.unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "dropout_mask", "=", "x", ".", "new_ones", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "-", "1", "]", ")", "\n", "torch", ".", "nn", ".", "functional", ".", "dropout", "(", "dropout_mask", ",", "self", ".", "p", ",", "self", ".", "training", ",", "inplace", "=", "True", ")", "\n", "dropout_mask", "=", "dropout_mask", ".", "unsqueeze", "(", "1", ")", "# [batch_size, 1, embedding_dim]", "\n", "if", "self", ".", "inplace", ":", "\n", "            ", "x", "*=", "dropout_mask", "\n", "return", "\n", "", "else", ":", "\n", "            ", "return", "x", "*", "dropout_mask", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.utils.initial_parameter": [[18, 83], ["net.apply", "isinstance", "isinstance", "isinstance", "torch.normal_", "isinstance", "init_method", "torch.xavier_normal_", "m.parameters", "hasattr", "hasattr", "m.parameters", "len", "init_method", "torch.normal_", "len", "init_method", "torch.normal_", "w.data.size", "m.weight.size", "len", "init_method", "torch.normal_", "w.data.size"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["    ", "r\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2aword\u7684vocabulary\u751f\u6210character\u7684vocabulary.\n\n    :param vocab: \u4ecevocab\n    :param min_freq:\n    :param include_word_start_end: \u662f\u5426\u9700\u8981\u5305\u542b\u7279\u6b8a\u7684<bow>\u548c<eos>\n    :return:\n    \"\"\"", "\n", "char_vocab", "=", "Vocabulary", "(", "min_freq", "=", "min_freq", ")", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "        ", "if", "not", "vocab", ".", "_is_word_no_create_entry", "(", "word", ")", ":", "\n", "            ", "char_vocab", ".", "add_word_lst", "(", "list", "(", "word", ")", ")", "\n", "", "", "if", "include_word_start_end", ":", "\n", "        ", "char_vocab", ".", "add_word_lst", "(", "[", "'<bow>'", ",", "'<eow>'", "]", ")", "\n", "", "return", "char_vocab", "\n", "\n", "\n", "", "def", "get_embeddings", "(", "init_embed", ",", "padding_idx", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    \u6839\u636e\u8f93\u5165\u7684init_embed\u8fd4\u56deEmbedding\u5bf9\u8c61\u3002\u5982\u679c\u8f93\u5165\u662ftuple, \u5219\u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2ann.Embedding; \u5982\u679c\u8f93\u5165\u662fnumpy.ndarray, \u5219\u6309\u7167ndarray\n    \u7684\u503c\u5c06nn.Embedding\u521d\u59cb\u5316; \u5982\u679c\u8f93\u5165\u662ftorch.Tensor, \u5219\u6309\u8be5\u503c\u521d\u59cb\u5316nn.Embedding; \u5982\u679c\u8f93\u5165\u662ffastNLP\u4e2d\u7684embedding\u5c06\u4e0d\u505a\u5904\u7406\n    \u8fd4\u56de\u539f\u5bf9\u8c61\u3002\n\n    :param init_embed: \u53ef\u4ee5\u662f tuple:(num_embedings, embedding_dim), \u5373embedding\u7684\u5927\u5c0f\u548c\u6bcf\u4e2a\u8bcd\u7684\u7ef4\u5ea6;\u4e5f\u53ef\u4ee5\u4f20\u5165\n        nn.Embedding \u5bf9\u8c61, \u6b64\u65f6\u5c31\u4ee5\u4f20\u5165\u7684\u5bf9\u8c61\u4f5c\u4e3aembedding; \u4f20\u5165np.ndarray\u4e5f\u884c\uff0c\u5c06\u4f7f\u7528\u4f20\u5165\u7684ndarray\u4f5c\u4e3a\u4f5c\u4e3aEmbedding\u521d\u59cb\u5316;\n        \u4f20\u5165torch.Tensor, \u5c06\u4f7f\u7528\u4f20\u5165\u7684\u503c\u4f5c\u4e3aEmbedding\u521d\u59cb\u5316\u3002\n    :param padding_idx: \u5f53\u4f20\u5165tuple\u65f6\uff0cpadding_idx\u6709\u6548\n    :return nn.Embedding:  embeddings\n    \"\"\"", "\n", "if", "isinstance", "(", "init_embed", ",", "tuple", ")", ":", "\n", "        ", "res", "=", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "init_embed", "[", "0", "]", ",", "embedding_dim", "=", "init_embed", "[", "1", "]", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "res", ".", "weight", ".", "data", ",", "a", "=", "-", "np", ".", "sqrt", "(", "3", "/", "res", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ")", ",", "\n", "b", "=", "np", ".", "sqrt", "(", "3", "/", "res", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "res", "=", "init_embed", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "res", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "init_embed", ",", "freeze", "=", "False", ")", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "init_embed", "=", "torch", ".", "tensor", "(", "init_embed", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "res", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "init_embed", ",", "freeze", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'invalid init_embed type: {}'", ".", "format", "(", "(", "type", "(", "init_embed", ")", ")", ")", ")", "\n", "", "return", "res", "\n", "\n", "\n", "", "def", "get_sinusoid_encoding_table", "(", "n_position", ",", "d_hid", ",", "padding_idx", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    sinusoid\u7684embedding\uff0c\u5176\u4e2dposition\u7684\u8868\u793a\u4e2d\uff0c\u5076\u6570\u7ef4(0,2,4,...)\u662fsin, \u5947\u6570(1,3,5...)\u662fcos\n\n    :param int n_position: \u4e00\u5171\u591a\u5c11\u4e2aposition\n    :param int d_hid: \u591a\u5c11\u7ef4\u5ea6\uff0c\u9700\u8981\u4e3a\u5076\u6570\n    :param padding_idx:\n    :return: torch.FloatTensor, shape\u4e3an_position x d_hid\n    \"\"\"", "\n", "\n", "def", "cal_angle", "(", "position", ",", "hid_idx", ")", ":", "\n", "        ", "return", "position", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_idx", "//", "2", ")", "/", "d_hid", ")", "\n", "\n", "", "def", "get_posi_angle_vec", "(", "position", ")", ":", "\n", "        ", "return", "[", "cal_angle", "(", "position", ",", "hid_j", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "[", "get_posi_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_position", ")", "]", ")", "\n", "\n", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.utils.summary": [[85, 124], ["utils.summary.layer_summary"], "function", ["None"], ["\n", "if", "padding_idx", "is", "not", "None", ":", "\n", "# zero vector for padding dimension", "\n", "        ", "sinusoid_table", "[", "padding_idx", "]", "=", "0.", "\n", "\n", "", "return", "torch", ".", "FloatTensor", "(", "sinusoid_table", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.utils.get_dropout_mask": [[126, 138], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.functional.dropout"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.cmds.cmd.CMD.__call__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.cmds.cmd.CMD.train": [[14, 29], ["cmd.CMD.model.train", "tqdm.tqdm.tqdm", "cmd.CMD.optimizer.zero_grad", "cmd.CMD.model.loss", "cmd.CMD.backward", "cmd.CMD.optimizer.step", "tqdm.tqdm.tqdm.set_postfix", "int", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "len", "cmd.CMD.model.parameters", "cmd.CMD.item"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.loss", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.lexicalizedPCFG.backward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.AdamW.step", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "def", "train", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "t", "=", "tqdm", "(", "loader", ",", "total", "=", "int", "(", "len", "(", "loader", ")", ")", ",", "position", "=", "0", ",", "leave", "=", "True", ")", "\n", "train_arg", "=", "self", ".", "args", ".", "train", "\n", "for", "x", ",", "_", "in", "t", ":", "\n", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "model", ".", "loss", "(", "x", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "train_arg", ".", "clip", ">", "0", ":", "\n", "                ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "train_arg", ".", "clip", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "t", ".", "set_postfix", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.cmds.cmd.CMD.evaluate": [[31, 53], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "parser.helper.metric.UF1", "parser.helper.metric.LikelihoodMetric", "tqdm.tqdm.tqdm", "print", "print", "parser.helper.metric.UAS", "model.evaluate", "parser.helper.metric.UF1.", "parser.helper.metric.LikelihoodMetric.", "int", "parser.helper.metric.UAS.", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.CMRC2018Metric.evaluate", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ",", "loader", ",", "eval_dep", "=", "False", ",", "decode_type", "=", "'mbr'", ",", "model", "=", "None", ")", ":", "\n", "        ", "if", "model", "==", "None", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "", "model", ".", "eval", "(", ")", "\n", "metric_f1", "=", "UF1", "(", ")", "\n", "if", "eval_dep", ":", "\n", "            ", "metric_uas", "=", "UAS", "(", ")", "\n", "", "metric_ll", "=", "LikelihoodMetric", "(", ")", "\n", "t", "=", "tqdm", "(", "loader", ",", "total", "=", "int", "(", "len", "(", "loader", ")", ")", ",", "position", "=", "0", ",", "leave", "=", "True", ")", "\n", "print", "(", "'decoding mode:{}'", ".", "format", "(", "decode_type", ")", ")", "\n", "print", "(", "'evaluate_dep:{}'", ".", "format", "(", "eval_dep", ")", ")", "\n", "for", "x", ",", "y", "in", "t", ":", "\n", "            ", "result", "=", "model", ".", "evaluate", "(", "x", ",", "decode_type", "=", "decode_type", ",", "eval_dep", "=", "eval_dep", ")", "\n", "metric_f1", "(", "result", "[", "'prediction'", "]", ",", "y", "[", "'gold_tree'", "]", ")", "\n", "metric_ll", "(", "result", "[", "'partition'", "]", ",", "x", "[", "'seq_len'", "]", ")", "\n", "if", "eval_dep", ":", "\n", "                ", "metric_uas", "(", "result", "[", "'prediction_arc'", "]", ",", "y", "[", "'head'", "]", ")", "\n", "", "", "if", "not", "eval_dep", ":", "\n", "            ", "return", "metric_f1", ",", "metric_ll", "\n", "", "else", ":", "\n", "            ", "return", "metric_f1", ",", "metric_uas", ",", "metric_ll", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.cmds.evaluate.Evaluate.__call__": [[19, 38], ["super().__call__", "parser.helper.data_module.DataModule", "get_model", "evaluate.Evaluate.model.load_state_dict", "print", "parser.helper.loader_wrapper.DataPrefetcher", "print", "print", "torch.load", "torch.load", "torch.load", "torch.load", "evaluate.Evaluate.evaluate", "evaluate.Evaluate.evaluate", "print", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossInForward.__call__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.util.get_model", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.CMRC2018Metric.evaluate", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.CMRC2018Metric.evaluate"], ["args", ".", "device", "=", "device", "\n", "args", ".", "load_from_dir", "=", "load_from_dir", "\n", "print", "(", "f\"Set the device with ID {args.device} visible\"", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "device", "\n", "args", ".", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "\n", "command", "=", "Evaluate", "(", ")", "\n", "command", "(", "args", ",", "decode_type", "=", "decode_type", ",", "eval_dep", "=", "eval_dep", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.cmds.train.Train.__call__": [[15, 78], ["parser.helper.data_module.DataModule", "get_model", "get_logger", "create_save_path", "get_optimizer", "get_logger.info", "get_logger.info", "datetime.datetime.timedelta", "get_logger.info", "get_logger.info", "range", "parser.helper.metric.Metric", "parser.helper.loader_wrapper.DataPrefetcher", "parser.helper.loader_wrapper.DataPrefetcher", "datetime.datetime.datetime.now", "train.Train.train", "get_logger.info", "train.Train.evaluate", "get_logger.info", "get_logger.info", "parser.helper.data_module.DataModule.train_dataloader", "parser.helper.data_module.DataModule.train_dataloader", "datetime.datetime.datetime.now", "torch.save", "get_logger.info", "get_logger.info", "min", "train.Train.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.util.get_model", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.util.get_logger", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.util.create_save_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.util.get_optimizer", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.CMRC2018Metric.evaluate", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.data_module.DataModule.train_dataloader", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.data_module.DataModule.train_dataloader", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save"], ["description", "=", "'PCFGs'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--conf'", ",", "'-c'", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "'-d'", ",", "default", "=", "'0'", ")", "\n", "\n", "\n", "args2", "=", "parser", ".", "parse_args", "(", ")", "\n", "yaml_cfg", "=", "yaml", ".", "load", "(", "open", "(", "args2", ".", "conf", ",", "'r'", ")", ")", "\n", "args", "=", "edict", "(", "yaml_cfg", ")", "\n", "args", ".", "update", "(", "args2", ".", "__dict__", ")", "\n", "\n", "print", "(", "f\"Set the device with ID {args.device} visible\"", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "device", "\n", "args", ".", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "\n", "\n", "config_path", "=", "Path", "(", "args", ".", "conf", "if", "args", ".", "conf", "else", "args2", ".", "load_from_dir", "+", "\"/config.yaml\"", ")", "\n", "config_name", "=", "config_path", ".", "stem", "\n", "args", ".", "save_dir", "=", "args", ".", "save_dir", "+", "\"/{}\"", ".", "format", "(", "config_name", ")", "\n", "\n", "try", ":", "\n", "        ", "command", "=", "Train", "(", ")", "\n", "command", "(", "args", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "command", "=", "int", "(", "input", "(", "'Enter 0 to delete the repo, and enter anything else to save.'", ")", ")", "\n", "if", "command", "==", "0", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "args", ".", "save_dir", ")", "\n", "print", "(", "\"You have successfully delete the created log directory.\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"log directory have been saved.\"", ")", "\n", "", "", "except", "Exception", ":", "\n", "        ", "traceback", ".", "print_exc", "(", ")", "\n", "shutil", ".", "rmtree", "(", "args", ".", "save_dir", ")", "\n", "print", "(", "\"log directory have been deleted.\"", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.fastNLP.doc_utils.doc_process": [[11, 55], ["inspect.getmembers", "inspect.isclass", "inspect.isfunction", "inspect.isclass", "base.__module__.startswith", "print", "range", "module_name.split", "base.__module__.split", "len", "print"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["def", "doc_process", "(", "m", ")", ":", "\n", "    ", "for", "name", ",", "obj", "in", "inspect", ".", "getmembers", "(", "m", ")", ":", "\n", "        ", "if", "inspect", ".", "isclass", "(", "obj", ")", "or", "inspect", ".", "isfunction", "(", "obj", ")", ":", "\n", "            ", "if", "obj", ".", "__module__", "!=", "m", ".", "__name__", ":", "\n", "                ", "if", "obj", ".", "__doc__", "is", "None", ":", "\n", "# print(name, obj.__doc__)", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "module_name", "=", "obj", ".", "__module__", "\n", "\n", "# \u8bc6\u522b\u5e76\u6807\u6ce8\u7c7b\u548c\u51fd\u6570\u5728\u4e0d\u540c\u5c42\u6b21\u4e2d\u7684\u4f4d\u7f6e", "\n", "\n", "while", "1", ":", "\n", "                        ", "defined_m", "=", "sys", ".", "modules", "[", "module_name", "]", "\n", "try", ":", "\n", "                            ", "if", "\"undocumented\"", "not", "in", "defined_m", ".", "__doc__", "and", "name", "in", "defined_m", ".", "__all__", ":", "\n", "                                ", "obj", ".", "__doc__", "=", "r\"\u522b\u540d :class:`\"", "+", "m", ".", "__name__", "+", "\".\"", "+", "name", "+", "\"`\"", "+", "\" :class:`\"", "+", "module_name", "+", "\".\"", "+", "name", "+", "\"`\\n\"", "+", "obj", ".", "__doc__", "\n", "break", "\n", "", "module_name", "=", "\".\"", ".", "join", "(", "module_name", ".", "split", "(", "'.'", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "module_name", "==", "m", ".", "__name__", ":", "\n", "# print(name, \": not found defined doc.\")", "\n", "                                ", "break", "\n", "", "", "except", ":", "\n", "                            ", "print", "(", "\"Warning: Module {} lacks `__doc__`\"", ".", "format", "(", "module_name", ")", ")", "\n", "break", "\n", "\n", "# \u8bc6\u522b\u5e76\u6807\u6ce8\u57fa\u7c7b\uff0c\u53ea\u6709\u57fa\u7c7b\u4e5f\u5728 fastNLP \u4e2d\u5b9a\u4e49\u624d\u663e\u793a", "\n", "\n", "", "", "if", "inspect", ".", "isclass", "(", "obj", ")", ":", "\n", "                        ", "for", "base", "in", "obj", ".", "__bases__", ":", "\n", "                            ", "if", "base", ".", "__module__", ".", "startswith", "(", "\"fastNLP\"", ")", ":", "\n", "                                ", "parts", "=", "base", ".", "__module__", ".", "split", "(", "\".\"", ")", "+", "[", "]", "\n", "module_name", ",", "i", "=", "\"fastNLP\"", ",", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "parts", ")", "-", "1", ")", ":", "\n", "                                    ", "defined_m", "=", "sys", ".", "modules", "[", "module_name", "]", "\n", "try", ":", "\n", "                                        ", "if", "\"undocumented\"", "not", "in", "defined_m", ".", "__doc__", "and", "name", "in", "defined_m", ".", "__all__", ":", "\n", "                                            ", "obj", ".", "__doc__", "=", "r\"\u57fa\u7c7b :class:`\"", "+", "defined_m", ".", "__name__", "+", "\".\"", "+", "base", ".", "__name__", "+", "\"` \\n\\n\"", "+", "obj", ".", "__doc__", "\n", "break", "\n", "", "module_name", "+=", "\".\"", "+", "parts", "[", "i", "+", "1", "]", "\n", "", "except", ":", "\n", "                                        ", "print", "(", "\"Warning: Module {} lacks `__doc__`\"", ".", "format", "(", "module_name", ")", ")", "\n", "break", "\n", "", "", "", "", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.elmo_embedding.ElmoEmbedding.__init__": [[57, 104], ["contextual_embedding.ContextualEmbedding.__init__", "elmo_embedding._ElmoModel", "model_dir_or_name.lower", "io.file_utils._get_embedding_url", "io.file_utils.cached_path", "os.path.isdir", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "list", "model_dir_or_name.lower", "os.path.abspath", "ValueError", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "map", "len", "os.path.expanduser", "list.split", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_embedding_url", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.cached_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["def", "__init__", "(", "self", ",", "vocab", ":", "Vocabulary", ",", "model_dir_or_name", ":", "str", "=", "'en'", ",", "layers", ":", "str", "=", "'2'", ",", "requires_grad", ":", "bool", "=", "True", ",", "\n", "word_dropout", "=", "0.0", ",", "dropout", "=", "0.0", ",", "cache_word_reprs", ":", "bool", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param vocab: \u8bcd\u8868\n        :param model_dir_or_name: \u53ef\u4ee5\u6709\u4e24\u79cd\u65b9\u5f0f\u8c03\u7528\u9884\u8bad\u7ec3\u597d\u7684ELMo embedding\uff1a\u7b2c\u4e00\u79cd\u662f\u4f20\u5165ELMo\u6240\u5728\u6587\u4ef6\u5939\uff0c\u8be5\u6587\u4ef6\u5939\u4e0b\u9762\u5e94\u8be5\u6709\u4e24\u4e2a\u6587\u4ef6\uff0c\n            \u5176\u4e2d\u4e00\u4e2a\u662f\u4ee5json\u4e3a\u540e\u7f00\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u53e6\u4e00\u4e2a\u662f\u4ee5pkl\u4e3a\u540e\u7f00\u7684\u6743\u91cd\u6587\u4ef6\uff1b\u7b2c\u4e8c\u79cd\u662f\u4f20\u5165ELMo\u7248\u672c\u7684\u540d\u79f0\uff0c\u5c06\u81ea\u52a8\u67e5\u770b\u7f13\u5b58\u4e2d\u662f\u5426\u5b58\u5728\u8be5\u6a21\u578b\uff0c\n            \u6ca1\u6709\u7684\u8bdd\u5c06\u81ea\u52a8\u4e0b\u8f7d\u5e76\u7f13\u5b58\u3002\n        :param layers: str, \u6307\u5b9a\u8fd4\u56de\u7684\u5c42\u6570(\u4ece0\u5f00\u59cb), \u4ee5,\u9694\u5f00\u4e0d\u540c\u7684\u5c42\u3002\u5982\u679c\u8981\u8fd4\u56de\u7b2c\u4e8c\u5c42\u7684\u7ed3\u679c'2', \u8fd4\u56de\u540e\u4e24\u5c42\u7684\u7ed3\u679c'1,2'\u3002\u4e0d\u540c\u7684\u5c42\u7684\u7ed3\u679c\n            \u6309\u7167\u8fd9\u4e2a\u987a\u5e8fconcat\u8d77\u6765\uff0c\u9ed8\u8ba4\u4e3a'2'\u3002'mix'\u4f1a\u4f7f\u7528\u53ef\u5b66\u4e60\u7684\u6743\u91cd\u7ed3\u5408\u4e0d\u540c\u5c42\u7684\u8868\u793a(\u6743\u91cd\u662f\u5426\u53ef\u8bad\u7ec3\u4e0erequires_grad\u4fdd\u6301\u4e00\u81f4\uff0c\n            \u521d\u59cb\u5316\u6743\u91cd\u5bf9\u4e09\u5c42\u7ed3\u679c\u8fdb\u884cmean-pooling, \u53ef\u4ee5\u901a\u8fc7ElmoEmbedding.set_mix_weights_requires_grad()\u65b9\u6cd5\u53ea\u5c06mix weights\u8bbe\u7f6e\u4e3a\u53ef\u5b66\u4e60\u3002)\n        :param requires_grad: bool, \u8be5\u5c42\u662f\u5426\u9700\u8981gradient, \u9ed8\u8ba4\u4e3aFalse.\n        :param float word_dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5c06\u4e00\u4e2a\u8bcd\u66ff\u6362\u4e3aunk\u3002\u8fd9\u6837\u65e2\u53ef\u4ee5\u8bad\u7ec3unk\u4e5f\u662f\u4e00\u5b9a\u7684regularize\u3002\n        :param float dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5bf9embedding\u7684\u8868\u793a\u8fdb\u884cDropout\u30020.1\u5373\u968f\u673a\u5c0610%\u7684\u503c\u7f6e\u4e3a0\u3002\n        :param cache_word_reprs: \u53ef\u4ee5\u9009\u62e9\u5bf9word\u7684\u8868\u793a\u8fdb\u884ccache; \u8bbe\u7f6e\u4e3aTrue\u7684\u8bdd\uff0c\u5c06\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4e3a\u6bcf\u4e2aword\u751f\u6210\u5bf9\u5e94\u7684embedding\uff0c\n            \u5e76\u5220\u9664character encoder\uff0c\u4e4b\u540e\u5c06\u76f4\u63a5\u4f7f\u7528cache\u7684embedding\u3002\u9ed8\u8ba4\u4e3aFalse\u3002\n        \"\"\"", "\n", "super", "(", "ElmoEmbedding", ",", "self", ")", ".", "__init__", "(", "vocab", ",", "word_dropout", "=", "word_dropout", ",", "dropout", "=", "dropout", ")", "\n", "\n", "# \u6839\u636emodel_dir_or_name\u68c0\u67e5\u662f\u5426\u5b58\u5728\u5e76\u4e0b\u8f7d", "\n", "if", "model_dir_or_name", ".", "lower", "(", ")", "in", "PRETRAINED_ELMO_MODEL_DIR", ":", "\n", "            ", "model_url", "=", "_get_embedding_url", "(", "'elmo'", ",", "model_dir_or_name", ".", "lower", "(", ")", ")", "\n", "model_dir", "=", "cached_path", "(", "model_url", ",", "name", "=", "'embedding'", ")", "\n", "# \u68c0\u67e5\u662f\u5426\u5b58\u5728", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "model_dir_or_name", ")", ")", ")", ":", "\n", "            ", "model_dir", "=", "model_dir_or_name", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Cannot recognize {model_dir_or_name}.\"", ")", "\n", "", "self", ".", "model", "=", "_ElmoModel", "(", "model_dir", ",", "vocab", ",", "cache_word_reprs", "=", "cache_word_reprs", ")", "\n", "num_layers", "=", "self", ".", "model", ".", "encoder", ".", "num_layers", "\n", "\n", "if", "layers", "==", "'mix'", ":", "\n", "            ", "self", ".", "layer_weights", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "model", ".", "config", "[", "'lstm'", "]", "[", "'n_layers'", "]", "+", "1", ")", ",", "\n", "requires_grad", "=", "requires_grad", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ",", "requires_grad", "=", "requires_grad", ")", "\n", "self", ".", "_get_outputs", "=", "self", ".", "_get_mixed_outputs", "\n", "self", ".", "_embed_size", "=", "self", ".", "model", ".", "config", "[", "'lstm'", "]", "[", "'projection_dim'", "]", "*", "2", "\n", "", "else", ":", "\n", "            ", "layers", "=", "list", "(", "map", "(", "int", ",", "layers", ".", "split", "(", "','", ")", ")", ")", "\n", "assert", "len", "(", "layers", ")", ">", "0", ",", "\"Must choose at least one output, but got None.\"", "\n", "for", "layer", "in", "layers", ":", "\n", "                ", "assert", "0", "<=", "layer", "<=", "num_layers", ",", "f\"Layer index should be in range [0, {num_layers}], but got {layer}.\"", "\n", "", "self", ".", "layers", "=", "layers", "\n", "self", ".", "_get_outputs", "=", "self", ".", "_get_layer_outputs", "\n", "self", ".", "_embed_size", "=", "len", "(", "self", ".", "layers", ")", "*", "self", ".", "model", ".", "config", "[", "'lstm'", "]", "[", "'projection_dim'", "]", "*", "2", "\n", "\n", "", "self", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.elmo_embedding.ElmoEmbedding._get_mixed_outputs": [[105, 111], ["torch.softmax().to", "torch.softmax().to", "torch.softmax().to", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "elmo_embedding.ElmoEmbedding.gamma.to", "torch.softmax", "torch.softmax", "torch.softmax", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], ["", "def", "_get_mixed_outputs", "(", "self", ",", "outputs", ")", ":", "\n", "# outputs: num_layers x batch_size x max_len x hidden_size", "\n", "# return: batch_size x max_len x hidden_size", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "self", ".", "layer_weights", "+", "1", "/", "len", "(", "outputs", ")", ",", "dim", "=", "0", ")", ".", "to", "(", "outputs", ")", "\n", "outputs", "=", "torch", ".", "einsum", "(", "'l,lbij->bij'", ",", "weights", ",", "outputs", ")", "\n", "return", "self", ".", "gamma", ".", "to", "(", "outputs", ")", "*", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.elmo_embedding.ElmoEmbedding.set_mix_weights_requires_grad": [[112, 123], ["hasattr"], "methods", ["None"], ["", "def", "set_mix_weights_requires_grad", "(", "self", ",", "flag", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5f53\u521d\u59cb\u5316ElmoEmbedding\u65f6layers\u88ab\u8bbe\u7f6e\u4e3amix\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u8be5\u65b9\u6cd5\u8bbe\u7f6emix weights\u662f\u5426\u53ef\u8bad\u7ec3\u3002\u5982\u679clayers\u4e0d\u662fmix\uff0c\u8c03\u7528\n        \u8be5\u65b9\u6cd5\u6ca1\u6709\u7528\u3002\n        \n        :param bool flag: \u6df7\u5408\u4e0d\u540c\u5c42\u8868\u793a\u7684\u7ed3\u679c\u662f\u5426\u53ef\u4ee5\u8bad\u7ec3\u3002\n        :return:\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "'layer_weights'", ")", ":", "\n", "            ", "self", ".", "layer_weights", ".", "requires_grad", "=", "flag", "\n", "self", ".", "gamma", ".", "requires_grad", "=", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.elmo_embedding.ElmoEmbedding._get_layer_outputs": [[124, 131], ["len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tuple"], "methods", ["None"], ["", "", "def", "_get_layer_outputs", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "layers", ")", "==", "1", ":", "\n", "            ", "outputs", "=", "outputs", "[", "self", ".", "layers", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "torch", ".", "cat", "(", "tuple", "(", "[", "*", "outputs", "[", "self", ".", "layers", "]", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.elmo_embedding.ElmoEmbedding.forward": [[132, 148], ["elmo_embedding.ElmoEmbedding.drop_word", "elmo_embedding.ElmoEmbedding._get_sent_reprs", "elmo_embedding.ElmoEmbedding.model", "elmo_embedding.ElmoEmbedding._get_outputs", "elmo_embedding.ElmoEmbedding.dropout", "elmo_embedding.ElmoEmbedding.dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.drop_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.contextual_embedding.ContextualEmbedding._get_sent_reprs", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.model", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["", "def", "forward", "(", "self", ",", "words", ":", "torch", ".", "LongTensor", ")", ":", "\n", "        ", "r\"\"\"\n        \u8ba1\u7b97words\u7684elmo embedding\u8868\u793a\u3002\u6839\u636eelmo\u6587\u7ae0\u4e2d\u4ecb\u7ecd\u7684ELMO\u5b9e\u9645\u4e0a\u662f\u67092L+1\u5c42\u7ed3\u679c\uff0c\u4f46\u662f\u4e3a\u4e86\u8ba9\u7ed3\u679c\u6bd4\u8f83\u5bb9\u6613\u62c6\u5206\uff0ctoken\u7684\n        \u88ab\u91cd\u590d\u4e86\u4e00\u6b21\uff0c\u4f7f\u5f97\u5b9e\u9645\u4e0alayer=0\u7684\u7ed3\u679c\u662f[token_embedding;token_embedding], \u800clayer=1\u7684\u7ed3\u679c\u662f[forward_hiddens;\n        backward_hiddens].\n\n        :param words: batch_size x max_len\n        :return: torch.FloatTensor. batch_size x max_len x (512*len(self.layers))\n        \"\"\"", "\n", "words", "=", "self", ".", "drop_word", "(", "words", ")", "\n", "outputs", "=", "self", ".", "_get_sent_reprs", "(", "words", ")", "\n", "if", "outputs", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "dropout", "(", "outputs", ")", "\n", "", "outputs", "=", "self", ".", "model", "(", "words", ")", "\n", "outputs", "=", "self", ".", "_get_outputs", "(", "outputs", ")", "\n", "return", "self", ".", "dropout", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.elmo_embedding.ElmoEmbedding._delete_model_weights": [[149, 153], ["hasattr", "delattr"], "methods", ["None"], ["", "def", "_delete_model_weights", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "[", "'layers'", ",", "'model'", ",", "'layer_weights'", ",", "'gamma'", "]", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "name", ")", ":", "\n", "                ", "delattr", "(", "self", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.elmo_embedding._ElmoModel.__init__": [[165, 296], ["torch.Module.__init__", "os.walk", "os.path.join", "core.vocabulary.Vocabulary", "core.vocabulary.Vocabulary.add_word_lst", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "core.logger.info", "elmo_embedding._ElmoModel.register_buffer", "modules.encoder._elmo.ConvTokenEmbedder", "elmo_embedding._ElmoModel.token_embedder.load_state_dict", "modules.encoder._elmo.ElmobiLm", "elmo_embedding._ElmoModel.encoder.load_state_dict", "Exception", "open", "json.load", "codecs.open", "core.vocabulary.Vocabulary.add_word_lst", "len", "int", "os.path.join", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "list", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "file_name.__contains__", "Exception", "os.path.join", "os.path.join", "line.strip().split", "int", "list", "len", "len", "len", "char_lexicon.get", "iter", "core.logger.info", "elmo_embedding._ElmoModel.words_to_chars_embedding.size", "torch.Embedding", "torch.Embedding", "torch.Embedding", "core.logger.info", "file_name.__contains__", "len", "line.strip().split.insert", "len", "len", "len", "len", "int", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "core.logger.info", "line.strip", "len", "len", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "elmo_embedding._ElmoModel.words_to_chars_embedding[].unsqueeze", "elmo_embedding._ElmoModel.token_embedder().detach", "elmo_embedding._ElmoModel.squeeze", "core.vocabulary.Vocabulary.to_index", "core.vocabulary.Vocabulary.to_index", "len", "core.vocabulary.Vocabulary.to_index", "core.vocabulary.Vocabulary.to_index", "len", "core.vocabulary.Vocabulary.to_index", "core.vocabulary.Vocabulary.to_index", "core.vocabulary.Vocabulary.to_index", "core.vocabulary.Vocabulary.to_index", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "elmo_embedding._ElmoModel.token_embedder", "min", "torch.arange().long.unsqueeze", "torch.arange().long.unsqueeze", "torch.arange().long.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word_lst", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word_lst", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.__contains__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.__contains__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index"], ["def", "__init__", "(", "self", ",", "model_dir", ":", "str", ",", "vocab", ":", "Vocabulary", "=", "None", ",", "cache_word_reprs", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", "_ElmoModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_dir", "=", "model_dir", "\n", "dir", "=", "os", ".", "walk", "(", "self", ".", "model_dir", ")", "\n", "config_file", "=", "None", "\n", "weight_file", "=", "None", "\n", "config_count", "=", "0", "\n", "weight_count", "=", "0", "\n", "for", "path", ",", "dir_list", ",", "file_list", "in", "dir", ":", "\n", "            ", "for", "file_name", "in", "file_list", ":", "\n", "                ", "if", "file_name", ".", "__contains__", "(", "\".json\"", ")", ":", "\n", "                    ", "config_file", "=", "file_name", "\n", "config_count", "+=", "1", "\n", "", "elif", "file_name", ".", "__contains__", "(", "\".pkl\"", ")", ":", "\n", "                    ", "weight_file", "=", "file_name", "\n", "weight_count", "+=", "1", "\n", "", "", "", "if", "config_count", ">", "1", "or", "weight_count", ">", "1", ":", "\n", "            ", "raise", "Exception", "(", "f\"Multiple config files(*.json) or weight files(*.hdf5) detected in {model_dir}.\"", ")", "\n", "", "elif", "config_count", "==", "0", "or", "weight_count", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "f\"No config file or weight file found in {model_dir}\"", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "config_file", ")", ",", "'r'", ")", "as", "config_f", ":", "\n", "            ", "config", "=", "json", ".", "load", "(", "config_f", ")", "\n", "", "self", ".", "weight_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "weight_file", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "OOV_TAG", "=", "'<oov>'", "\n", "PAD_TAG", "=", "'<pad>'", "\n", "BOS_TAG", "=", "'<bos>'", "\n", "EOS_TAG", "=", "'<eos>'", "\n", "BOW_TAG", "=", "'<bow>'", "\n", "EOW_TAG", "=", "'<eow>'", "\n", "\n", "# For the model trained with character-based word encoder.", "\n", "char_lexicon", "=", "{", "}", "\n", "with", "codecs", ".", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'char.dic'", ")", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fpi", ":", "\n", "            ", "for", "line", "in", "fpi", ":", "\n", "                ", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "tokens", ")", "==", "1", ":", "\n", "                    ", "tokens", ".", "insert", "(", "0", ",", "'\\u3000'", ")", "\n", "", "token", ",", "i", "=", "tokens", "\n", "char_lexicon", "[", "token", "]", "=", "int", "(", "i", ")", "\n", "\n", "# \u505a\u4e00\u4e9bsanity check", "\n", "", "", "for", "special_word", "in", "[", "PAD_TAG", ",", "OOV_TAG", ",", "BOW_TAG", ",", "EOW_TAG", "]", ":", "\n", "            ", "assert", "special_word", "in", "char_lexicon", ",", "f\"{special_word} not found in char.dic.\"", "\n", "\n", "# \u4ecevocab\u4e2d\u6784\u5efachar_vocab", "\n", "", "char_vocab", "=", "Vocabulary", "(", "unknown", "=", "OOV_TAG", ",", "padding", "=", "PAD_TAG", ")", "\n", "# \u9700\u8981\u4fdd\u8bc1<bow>\u4e0e<eow>\u5728\u91cc\u9762", "\n", "char_vocab", ".", "add_word_lst", "(", "[", "BOW_TAG", ",", "EOW_TAG", ",", "BOS_TAG", ",", "EOS_TAG", "]", ")", "\n", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "            ", "char_vocab", ".", "add_word_lst", "(", "list", "(", "word", ")", ")", "\n", "\n", "", "self", ".", "bos_index", ",", "self", ".", "eos_index", ",", "self", ".", "_pad_index", "=", "len", "(", "vocab", ")", ",", "len", "(", "vocab", ")", "+", "1", ",", "vocab", ".", "padding_idx", "\n", "# \u6839\u636echar_lexicon\u8c03\u6574, \u591a\u8bbe\u7f6e\u4e00\u4f4d\uff0c\u662f\u9884\u7559\u7ed9word padding\u7684(\u8be5\u4f4d\u7f6e\u7684char\u8868\u793a\u4e3a\u51680\u8868\u793a)", "\n", "char_emb_layer", "=", "nn", ".", "Embedding", "(", "len", "(", "char_vocab", ")", "+", "1", ",", "int", "(", "config", "[", "'char_cnn'", "]", "[", "'embedding'", "]", "[", "'dim'", "]", ")", ",", "\n", "padding_idx", "=", "len", "(", "char_vocab", ")", ")", "\n", "\n", "# \u8bfb\u5165\u9884\u8bad\u7ec3\u6743\u91cd \u8fd9\u91cc\u7684elmo_model \u5305\u542bchar_cnn\u548c lstm \u7684 state_dict", "\n", "elmo_model", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "weight_file", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "char_embed_weights", "=", "elmo_model", "[", "\"char_cnn\"", "]", "[", "'char_emb_layer.weight'", "]", "\n", "\n", "found_char_count", "=", "0", "\n", "for", "char", ",", "index", "in", "char_vocab", ":", "# \u8c03\u6574character embedding", "\n", "            ", "if", "char", "in", "char_lexicon", ":", "\n", "                ", "index_in_pre", "=", "char_lexicon", ".", "get", "(", "char", ")", "\n", "found_char_count", "+=", "1", "\n", "", "else", ":", "\n", "                ", "index_in_pre", "=", "char_lexicon", "[", "OOV_TAG", "]", "\n", "", "char_emb_layer", ".", "weight", ".", "data", "[", "index", "]", "=", "char_embed_weights", "[", "index_in_pre", "]", "\n", "\n", "", "logger", ".", "info", "(", "f\"{found_char_count} out of {len(char_vocab)} characters were found in pretrained elmo embedding.\"", ")", "\n", "# \u751f\u6210words\u5230chars\u7684\u6620\u5c04", "\n", "max_chars", "=", "config", "[", "'char_cnn'", "]", "[", "'max_characters_per_token'", "]", "\n", "self", ".", "register_buffer", "(", "'words_to_chars_embedding'", ",", "torch", ".", "full", "(", "(", "len", "(", "vocab", ")", "+", "2", ",", "max_chars", ")", ",", "\n", "fill_value", "=", "len", "(", "char_vocab", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "for", "word", ",", "index", "in", "list", "(", "iter", "(", "vocab", ")", ")", "+", "[", "(", "BOS_TAG", ",", "len", "(", "vocab", ")", ")", ",", "(", "EOS_TAG", ",", "len", "(", "vocab", ")", "+", "1", ")", "]", ":", "\n", "            ", "if", "len", "(", "word", ")", "+", "2", ">", "max_chars", ":", "\n", "                ", "word", "=", "word", "[", ":", "max_chars", "-", "2", "]", "\n", "", "if", "index", "==", "self", ".", "_pad_index", ":", "\n", "                ", "continue", "\n", "", "elif", "word", "==", "BOS_TAG", "or", "word", "==", "EOS_TAG", ":", "\n", "                ", "char_ids", "=", "[", "char_vocab", ".", "to_index", "(", "BOW_TAG", ")", "]", "+", "[", "char_vocab", ".", "to_index", "(", "word", ")", "]", "+", "[", "\n", "char_vocab", ".", "to_index", "(", "EOW_TAG", ")", "]", "\n", "char_ids", "+=", "[", "char_vocab", ".", "to_index", "(", "PAD_TAG", ")", "]", "*", "(", "max_chars", "-", "len", "(", "char_ids", ")", ")", "\n", "", "else", ":", "\n", "                ", "char_ids", "=", "[", "char_vocab", ".", "to_index", "(", "BOW_TAG", ")", "]", "+", "[", "char_vocab", ".", "to_index", "(", "c", ")", "for", "c", "in", "word", "]", "+", "[", "\n", "char_vocab", ".", "to_index", "(", "EOW_TAG", ")", "]", "\n", "char_ids", "+=", "[", "char_vocab", ".", "to_index", "(", "PAD_TAG", ")", "]", "*", "(", "max_chars", "-", "len", "(", "char_ids", ")", ")", "\n", "", "self", ".", "words_to_chars_embedding", "[", "index", "]", "=", "torch", ".", "LongTensor", "(", "char_ids", ")", "\n", "\n", "", "self", ".", "char_vocab", "=", "char_vocab", "\n", "\n", "self", ".", "token_embedder", "=", "ConvTokenEmbedder", "(", "\n", "config", ",", "self", ".", "weight_file", ",", "None", ",", "char_emb_layer", ")", "\n", "elmo_model", "[", "\"char_cnn\"", "]", "[", "'char_emb_layer.weight'", "]", "=", "char_emb_layer", ".", "weight", "\n", "self", ".", "token_embedder", ".", "load_state_dict", "(", "elmo_model", "[", "\"char_cnn\"", "]", ")", "\n", "\n", "self", ".", "output_dim", "=", "config", "[", "'lstm'", "]", "[", "'projection_dim'", "]", "\n", "\n", "# lstm encoder", "\n", "self", ".", "encoder", "=", "ElmobiLm", "(", "config", ")", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "elmo_model", "[", "\"lstm\"", "]", ")", "\n", "\n", "if", "cache_word_reprs", ":", "\n", "            ", "if", "config", "[", "'char_cnn'", "]", "[", "'embedding'", "]", "[", "'dim'", "]", ">", "0", ":", "# \u53ea\u6709\u5728\u4f7f\u7528\u4e86chars\u7684\u60c5\u51b5\u4e0b\u6709\u7528", "\n", "                ", "logger", ".", "info", "(", "\"Start to generate cache word representations.\"", ")", "\n", "batch_size", "=", "320", "\n", "# bos eos", "\n", "word_size", "=", "self", ".", "words_to_chars_embedding", ".", "size", "(", "0", ")", "\n", "num_batches", "=", "word_size", "//", "batch_size", "+", "int", "(", "word_size", "%", "batch_size", "!=", "0", ")", "\n", "\n", "self", ".", "cached_word_embedding", "=", "nn", ".", "Embedding", "(", "word_size", ",", "\n", "config", "[", "'lstm'", "]", "[", "'projection_dim'", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "                        ", "words", "=", "torch", ".", "arange", "(", "i", "*", "batch_size", ",", "\n", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", ",", "word_size", ")", ")", ".", "long", "(", ")", "\n", "chars", "=", "self", ".", "words_to_chars_embedding", "[", "words", "]", ".", "unsqueeze", "(", "1", ")", "# batch_size x 1 x max_chars", "\n", "word_reprs", "=", "self", ".", "token_embedder", "(", "words", ".", "unsqueeze", "(", "1", ")", ",", "\n", "chars", ")", ".", "detach", "(", ")", "# batch_size x 1 x config['encoder']['projection_dim']", "\n", "self", ".", "cached_word_embedding", ".", "weight", ".", "data", "[", "words", "]", "=", "word_reprs", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Finish generating cached word representations. Going to delete the character encoder.\"", ")", "\n", "", "del", "self", ".", "token_embedder", ",", "self", ".", "words_to_chars_embedding", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"There is no need to cache word representations, since no character information is used.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.elmo_embedding._ElmoModel.forward": [[297, 336], ["words.size", "words.new_zeros", "words.ne().sum", "expanded_words[].fill_", "words.new_zeros.new_zeros", "hasattr", "elmo_embedding._ElmoModel.encoder", "torch.cat.size", "torch.cat.size", "torch.cat.size", "elmo_embedding._ElmoModel.masked_fill", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "elmo_embedding._ElmoModel.cached_word_embedding", "hasattr", "elmo_embedding._ElmoModel.token_embedder", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "words.ne", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], ["", "", "", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param words: batch_size x max_len\n        :return: num_layers x batch_size x max_len x hidden_size\n        \"\"\"", "\n", "# \u6269\u5c55<bos>, <eos>", "\n", "batch_size", ",", "max_len", "=", "words", ".", "size", "(", ")", "\n", "expanded_words", "=", "words", ".", "new_zeros", "(", "batch_size", ",", "max_len", "+", "2", ")", "# \u56e0\u4e3apad\u4e00\u5b9a\u4e3a0\uff0c", "\n", "seq_len", "=", "words", ".", "ne", "(", "self", ".", "_pad_index", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "expanded_words", "[", ":", ",", "1", ":", "-", "1", "]", "=", "words", "\n", "expanded_words", "[", ":", ",", "0", "]", ".", "fill_", "(", "self", ".", "bos_index", ")", "\n", "expanded_words", "[", "torch", ".", "arange", "(", "batch_size", ")", ".", "to", "(", "words", ")", ",", "seq_len", "+", "1", "]", "=", "self", ".", "eos_index", "\n", "seq_len", "=", "seq_len", "+", "2", "\n", "zero_tensor", "=", "expanded_words", ".", "new_zeros", "(", "expanded_words", ".", "shape", ")", "\n", "mask", "=", "(", "expanded_words", "==", "zero_tensor", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "if", "hasattr", "(", "self", ",", "'cached_word_embedding'", ")", ":", "\n", "            ", "token_embedding", "=", "self", ".", "cached_word_embedding", "(", "expanded_words", ")", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "'words_to_chars_embedding'", ")", ":", "\n", "                ", "chars", "=", "self", ".", "words_to_chars_embedding", "[", "expanded_words", "]", "\n", "", "else", ":", "\n", "                ", "chars", "=", "None", "\n", "", "token_embedding", "=", "self", ".", "token_embedder", "(", "expanded_words", ",", "chars", ")", "# batch_size x max_len x embed_dim", "\n", "\n", "", "encoder_output", "=", "self", ".", "encoder", "(", "token_embedding", ",", "seq_len", ")", "\n", "if", "encoder_output", ".", "size", "(", "2", ")", "<", "max_len", "+", "2", ":", "\n", "            ", "num_layers", ",", "_", ",", "output_len", ",", "hidden_size", "=", "encoder_output", ".", "size", "(", ")", "\n", "dummy_tensor", "=", "encoder_output", ".", "new_zeros", "(", "num_layers", ",", "batch_size", ",", "\n", "max_len", "+", "2", "-", "output_len", ",", "hidden_size", ")", "\n", "encoder_output", "=", "torch", ".", "cat", "(", "(", "encoder_output", ",", "dummy_tensor", ")", ",", "2", ")", "\n", "", "sz", "=", "encoder_output", ".", "size", "(", ")", "# 2, batch_size, max_len, hidden_size", "\n", "token_embedding", "=", "token_embedding", ".", "masked_fill", "(", "mask", ",", "0", ")", "\n", "token_embedding", "=", "torch", ".", "cat", "(", "(", "token_embedding", ",", "token_embedding", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "1", ",", "sz", "[", "1", "]", ",", "sz", "[", "2", "]", ",", "sz", "[", "3", "]", ")", "\n", "encoder_output", "=", "torch", ".", "cat", "(", "(", "token_embedding", ",", "encoder_output", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# \u5220\u9664<eos>, <bos>. \u8fd9\u91cc\u6ca1\u6709\u7cbe\u786e\u5730\u5220\u9664\uff0c\u4f46\u5e94\u8be5\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u6700\u540e\u7684\u7ed3\u679c\u4e86\u3002", "\n", "encoder_output", "=", "encoder_output", "[", ":", ",", ":", ",", "1", ":", "-", "1", "]", "\n", "return", "encoder_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaEmbedding.__init__": [[57, 104], ["contextual_embedding.ContextualEmbedding.__init__", "kwargs.get", "roberta_embedding._RobertaWordModel", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["def", "__init__", "(", "self", ",", "vocab", ":", "Vocabulary", ",", "model_dir_or_name", ":", "str", "=", "'en'", ",", "layers", ":", "str", "=", "'-1'", ",", "\n", "pool_method", ":", "str", "=", "'first'", ",", "word_dropout", "=", "0", ",", "dropout", "=", "0", ",", "include_cls_sep", ":", "bool", "=", "False", ",", "\n", "pooled_cls", "=", "True", ",", "requires_grad", ":", "bool", "=", "True", ",", "auto_truncate", ":", "bool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param ~fastNLP.Vocabulary vocab: \u8bcd\u8868\n        :param str model_dir_or_name: \u6a21\u578b\u6240\u5728\u76ee\u5f55\u6216\u8005\u6a21\u578b\u7684\u540d\u79f0\u3002\u5f53\u4f20\u5165\u6a21\u578b\u6240\u5728\u76ee\u5f55\u65f6\uff0c\u76ee\u5f55\u4e2d\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u8bcd\u8868\u6587\u4ef6\n            (\u4ee5vocab.json\u4f5c\u4e3a\u540e\u7f00\u540d), \u6743\u91cd\u6587\u4ef6(\u4ee5.bin\u4f5c\u4e3a\u6587\u4ef6\u540e\u7f00\u540d), \u914d\u7f6e\u6587\u4ef6(\u4ee5config.json\u4f5c\u4e3a\u540e\u7f00\u540d)\u3002\n        :param str,list layers: \u8f93\u51faembedding\u8868\u793a\u6765\u81ea\u4e8e\u54ea\u4e9b\u5c42\uff0c\u4e0d\u540c\u5c42\u7684\u7ed3\u679c\u6309\u7167layers\u4e2d\u7684\u987a\u5e8f\u5728\u6700\u540e\u4e00\u7ef4concat\u8d77\u6765\u3002\u4ee5','\u9694\u5f00\u5c42\u6570\uff0c\u5c42\u7684\u5e8f\u53f7\u662f\n            \u4ece0\u5f00\u59cb\uff0c\u53ef\u4ee5\u4ee5\u8d1f\u6570\u53bb\u7d22\u5f15\u5012\u6570\u51e0\u5c42\u3002layer=0\u4e3aembedding\u5c42\uff08\u5305\u62ecwordpiece embedding, position embedding\uff09\n        :param str pool_method: \u56e0\u4e3a\u5728bert\u4e2d\uff0c\u6bcf\u4e2aword\u4f1a\u88ab\u8868\u793a\u4e3a\u591a\u4e2aword pieces, \u5f53\u83b7\u53d6\u4e00\u4e2aword\u7684\u8868\u793a\u7684\u65f6\u5019\uff0c\u600e\u6837\u4ece\u5b83\u7684word pieces\n            \u4e2d\u8ba1\u7b97\u5f97\u5230\u5b83\u5bf9\u5e94\u7684\u8868\u793a\u3002\u652f\u6301 ``last`` , ``first`` , ``avg`` , ``max``\u3002\n        :param float word_dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5c06\u4e00\u4e2a\u8bcd\u66ff\u6362\u4e3aunk\u3002\u8fd9\u6837\u65e2\u53ef\u4ee5\u8bad\u7ec3unk\u4e5f\u662f\u4e00\u5b9a\u7684regularize\u3002\n        :param float dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5bf9embedding\u7684\u8868\u793a\u8fdb\u884cDropout\u30020.1\u5373\u968f\u673a\u5c0610%\u7684\u503c\u7f6e\u4e3a0\u3002\n        :param bool include_cls_sep: bool\uff0c\u5728bert\u8ba1\u7b97\u53e5\u5b50\u7684\u8868\u793a\u7684\u65f6\u5019\uff0c\u9700\u8981\u5728\u524d\u9762\u52a0\u4e0a[CLS]\u548c[SEP], \u662f\u5426\u5728\u7ed3\u679c\u4e2d\u4fdd\u7559\u8fd9\u4e24\u4e2a\u5185\u5bb9\u3002 \u8fd9\u6837\n            \u4f1a\u4f7f\u5f97word embedding\u7684\u7ed3\u679c\u6bd4\u8f93\u5165\u7684\u7ed3\u679c\u957f\u4e24\u4e2atoken\u3002\u5982\u679c\u8be5\u503c\u4e3aTrue\uff0c\u5219\u5728\u4f7f\u7528 :class::StackEmbedding \u53ef\u80fd\u4f1a\u4e0e\u5176\u5b83\u7c7b\u578b\u7684\n            embedding\u957f\u5ea6\u4e0d\u5339\u914d\u3002\n        :param bool pooled_cls: \u8fd4\u56de\u7684<s>\u662f\u5426\u4f7f\u7528\u9884\u8bad\u7ec3\u4e2d\u7684BertPool\u6620\u5c04\u4e00\u4e0b\uff0c\u4ec5\u5728include_cls_sep\u65f6\u6709\u6548\u3002\u5982\u679c\u4e0b\u6e38\u4efb\u52a1\u53ea\u53d6<s>\u505a\u9884\u6d4b\uff0c\n            \u4e00\u822c\u8be5\u503c\u4e3aTrue\u3002\n        :param bool requires_grad: \u662f\u5426\u9700\u8981gradient\u4ee5\u66f4\u65b0Bert\u7684\u6743\u91cd\u3002\n        :param bool auto_truncate: \u5f53\u53e5\u5b50words\u62c6\u5206\u4e3aword pieces\u957f\u5ea6\u8d85\u8fc7bert\u6700\u5927\u5141\u8bb8\u957f\u5ea6(\u4e00\u822c\u4e3a512), \u81ea\u52a8\u622a\u6389\u62c6\u5206\u540e\u7684\u8d85\u8fc7510\u4e2a\n            word pieces\u540e\u7684\u5185\u5bb9\uff0c\u5e76\u5c06\u7b2c512\u4e2aword piece\u7f6e\u4e3a</s>\u3002\u8d85\u8fc7\u957f\u5ea6\u7684\u90e8\u5206\u7684encode\u7ed3\u679c\u76f4\u63a5\u5168\u90e8\u7f6e\u96f6\u3002\u4e00\u822c\u4ec5\u6709\u53ea\u4f7f\u7528<s>\n            \u6765\u8fdb\u884c\u5206\u7c7b\u7684\u4efb\u52a1\u5c06auto_truncate\u7f6e\u4e3aTrue\u3002\n        :param kwargs:\n            int min_freq: \u5c0f\u4e8e\u8be5\u6b21\u6570\u7684\u8bcd\u4f1a\u88abunk\u4ee3\u66ff\uff0c \u9ed8\u8ba4\u4e3a1\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "vocab", ",", "word_dropout", "=", "word_dropout", ",", "dropout", "=", "dropout", ")", "\n", "\n", "if", "word_dropout", ">", "0", ":", "\n", "            ", "assert", "vocab", ".", "unknown", "is", "not", "None", ",", "\"When word_drop > 0, Vocabulary must contain the unknown token.\"", "\n", "\n", "", "self", ".", "_word_sep_index", "=", "-", "100", "\n", "if", "'</s>'", "in", "vocab", ":", "\n", "            ", "self", ".", "_word_sep_index", "=", "vocab", "[", "'</s>'", "]", "\n", "\n", "", "self", ".", "_word_cls_index", "=", "-", "100", "\n", "if", "'<s>'", "in", "vocab", ":", "\n", "            ", "self", ".", "_word_cls_index", "=", "vocab", "[", "'<s>'", "]", "\n", "\n", "", "min_freq", "=", "kwargs", ".", "get", "(", "'min_freq'", ",", "1", ")", "\n", "self", ".", "_min_freq", "=", "min_freq", "\n", "\n", "self", ".", "model", "=", "_RobertaWordModel", "(", "model_dir_or_name", "=", "model_dir_or_name", ",", "vocab", "=", "vocab", ",", "layers", "=", "layers", ",", "\n", "pool_method", "=", "pool_method", ",", "include_cls_sep", "=", "include_cls_sep", ",", "\n", "pooled_cls", "=", "pooled_cls", ",", "auto_truncate", "=", "auto_truncate", ",", "min_freq", "=", "min_freq", ")", "\n", "self", ".", "requires_grad", "=", "requires_grad", "\n", "self", ".", "_embed_size", "=", "len", "(", "self", ".", "model", ".", "layers", ")", "*", "self", ".", "model", ".", "encoder", ".", "hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaEmbedding._delete_model_weights": [[105, 107], ["None"], "methods", ["None"], ["", "def", "_delete_model_weights", "(", "self", ")", ":", "\n", "        ", "del", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaEmbedding.forward": [[108, 124], ["roberta_embedding.RobertaEmbedding.drop_word", "roberta_embedding.RobertaEmbedding._get_sent_reprs", "roberta_embedding.RobertaEmbedding.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "roberta_embedding.RobertaEmbedding.dropout", "roberta_embedding.RobertaEmbedding.dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.drop_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.contextual_embedding.ContextualEmbedding._get_sent_reprs", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.model", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n            \u8ba1\u7b97words\u7684roberta embedding\u8868\u793a\u3002\u8ba1\u7b97\u4e4b\u524d\u4f1a\u5728\u6bcf\u53e5\u8bdd\u7684\u5f00\u59cb\u589e\u52a0<s>\u5728\u7ed3\u675f\u589e\u52a0</s>, \u5e76\u6839\u636einclude_cls_sep\u5224\u65ad\u8981\u4e0d\u8981\n            \u5220\u9664\u8fd9\u4e24\u4e2atoken\u7684\u8868\u793a\u3002\n\n        :param torch.LongTensor words: [batch_size, max_len]\n        :return: torch.FloatTensor. batch_size x max_len x (768*len(self.layers))\n        \"\"\"", "\n", "words", "=", "self", ".", "drop_word", "(", "words", ")", "\n", "outputs", "=", "self", ".", "_get_sent_reprs", "(", "words", ")", "\n", "if", "outputs", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "dropout", "(", "outputs", ")", "\n", "", "outputs", "=", "self", ".", "model", "(", "words", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "[", "*", "outputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "self", ".", "dropout", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaEmbedding.drop_word": [[125, 146], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.bernoulli().eq", "torch.bernoulli().eq", "torch.bernoulli().eq", "torch.bernoulli().eq", "words.masked_fill.masked_fill.ne", "words.masked_fill.ne.__and__", "words.masked_fill.masked_fill.masked_fill", "words.masked_fill.masked_fill.ne", "mask.__and__.__and__.__and__", "words.masked_fill.masked_fill.ne", "mask.__and__.__and__.__and__", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["None"], ["", "def", "drop_word", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        \u6309\u7167\u8bbe\u5b9a\u968f\u673a\u5c06words\u8bbe\u7f6e\u4e3aunknown_index\u3002\n\n        :param torch.LongTensor words: batch_size x max_len\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "word_dropout", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "mask", "=", "torch", ".", "full_like", "(", "words", ",", "fill_value", "=", "self", ".", "word_dropout", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "words", ".", "device", ")", "\n", "mask", "=", "torch", ".", "bernoulli", "(", "mask", ")", ".", "eq", "(", "1", ")", "# dropout_word\u8d8a\u5927\uff0c\u8d8a\u591a\u4f4d\u7f6e\u4e3a1", "\n", "pad_mask", "=", "words", ".", "ne", "(", "self", ".", "_word_pad_index", ")", "\n", "mask", "=", "pad_mask", ".", "__and__", "(", "mask", ")", "# pad\u7684\u4f4d\u7f6e\u4e0d\u4e3aunk", "\n", "if", "self", ".", "_word_sep_index", "!=", "-", "100", ":", "\n", "                    ", "not_sep_mask", "=", "words", ".", "ne", "(", "self", ".", "_word_sep_index", ")", "\n", "mask", "=", "mask", ".", "__and__", "(", "not_sep_mask", ")", "\n", "", "if", "self", ".", "_word_cls_index", "!=", "-", "100", ":", "\n", "                    ", "not_cls_mask", "=", "words", ".", "ne", "(", "self", ".", "_word_cls_index", ")", "\n", "mask", "=", "mask", ".", "__and__", "(", "not_cls_mask", ")", "\n", "", "words", "=", "words", ".", "masked_fill", "(", "mask", ",", "self", ".", "_word_unk_index", ")", "\n", "", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaEmbedding.save": [[147, 173], ["os.makedirs", "roberta_embedding.RobertaEmbedding.get_word_vocab().save", "bool", "os.makedirs", "roberta_embedding.RobertaEmbedding.model.save", "os.path.join", "map", "open", "json.dump", "os.path.join", "os.path.join", "roberta_embedding.RobertaEmbedding.get_word_vocab", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.get_word_vocab"], ["", "def", "save", "(", "self", ",", "folder", ")", ":", "\n", "        ", "\"\"\"\n        \u5c06roberta embedding\u4fdd\u5b58\u5230folder\uff0c\u4fdd\u5b58\u4e4b\u540e\u5305\u542b\u4e09\u4e2a\u6587\u4ef6vocab.txt, roberta_embed_hyper.txt, roberta_embed/,\n\n        :param str folder: \u4fdd\u5b58\u5730\u5740\n        :return:\n        \"\"\"", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "get_word_vocab", "(", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "VOCAB_NAME", ")", ")", "\n", "\n", "hyper", "=", "{", "}", "\n", "hyper", "[", "'min_freq'", "]", "=", "self", ".", "_min_freq", "\n", "hyper", "[", "'layers'", "]", "=", "','", ".", "join", "(", "map", "(", "str", ",", "self", ".", "model", ".", "layers", ")", ")", "\n", "hyper", "[", "'pool_method'", "]", "=", "self", ".", "model", ".", "pool_method", "\n", "hyper", "[", "'dropout'", "]", "=", "self", ".", "dropout_layer", ".", "p", "\n", "hyper", "[", "'word_dropout'", "]", "=", "self", ".", "word_dropout", "\n", "hyper", "[", "'include_cls_sep'", "]", "=", "self", ".", "model", ".", "include_cls_sep", "\n", "hyper", "[", "'pooled_cls'", "]", "=", "self", ".", "model", ".", "pooled_cls", "\n", "hyper", "[", "'auto_truncate'", "]", "=", "self", ".", "model", ".", "auto_truncate", "\n", "hyper", "[", "'requires_grad'", "]", "=", "bool", "(", "self", ".", "requires_grad", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "ROBERTA_EMBED_HYPER", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "hyper", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "ROBERTA_EMBED_FOLDER", ")", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "model", ".", "save", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "ROBERTA_EMBED_FOLDER", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaEmbedding.load": [[174, 192], ["core.Vocabulary.load", "os.path.join", "cls", "os.path.exists", "os.path.join", "open", "json.load", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "folder", ")", ":", "\n", "        ", "\"\"\"\n        \u4ecefolder\u4e2d\u8bfb\u53d6\u6570\u636e\u521d\u59cb\u5316RobertaEmbedding\n\n        :param folder:\n        :return:\n        \"\"\"", "\n", "for", "name", "in", "[", "VOCAB_NAME", ",", "ROBERTA_EMBED_HYPER", ",", "ROBERTA_EMBED_FOLDER", "]", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "name", ")", ")", ",", "f\"{name} not found in {folder}.\"", "\n", "\n", "", "vocab", "=", "Vocabulary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "VOCAB_NAME", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "ROBERTA_EMBED_HYPER", ")", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "hyper", "=", "json", ".", "load", "(", "f", ")", "\n", "", "model_name_or_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "ROBERTA_EMBED_FOLDER", ")", "\n", "\n", "roberta", "=", "cls", "(", "vocab", "=", "vocab", ",", "model_dir_or_name", "=", "model_name_or_path", ",", "**", "hyper", ")", "\n", "return", "roberta", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding._RobertaWordModel.__init__": [[195, 247], ["torch.Module.__init__", "modules.tokenizer.RobertaTokenizer.from_pretrained", "modules.encoder.roberta.RobertaModel.from_pretrained", "len", "isinstance", "numpy.array", "roberta_embedding._RobertaWordModel.register_buffer", "core.logger.debug", "isinstance", "roberta_embedding._RobertaWordModel.tokenzier.tokenize", "roberta_embedding._RobertaWordModel.tokenzier.convert_tokens_to_ids", "word_to_wordpieces.append", "word_pieces_lengths.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "int", "list", "TypeError", "len", "map", "layers.split"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["    ", "def", "__init__", "(", "self", ",", "model_dir_or_name", ":", "str", ",", "vocab", ":", "Vocabulary", ",", "layers", ":", "str", "=", "'-1'", ",", "pool_method", ":", "str", "=", "'first'", ",", "\n", "include_cls_sep", ":", "bool", "=", "False", ",", "pooled_cls", ":", "bool", "=", "False", ",", "auto_truncate", ":", "bool", "=", "False", ",", "min_freq", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tokenzier", "=", "RobertaTokenizer", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "self", ".", "encoder", "=", "RobertaModel", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "# \u7531\u4e8eRobertaEmbedding\u4e2d\u8bbe\u7f6e\u4e86padding_idx\u4e3a1, \u4e14\u4f7f\u7528\u4e86\u975e\u5e38\u795e\u5947\u7684position\u8ba1\u7b97\u65b9\u5f0f\uff0c\u6240\u4ee5-2", "\n", "self", ".", "_max_position_embeddings", "=", "self", ".", "encoder", ".", "config", ".", "max_position_embeddings", "-", "2", "\n", "#  \u68c0\u67e5encoder_layer_number\u662f\u5426\u5408\u7406", "\n", "encoder_layer_number", "=", "len", "(", "self", ".", "encoder", ".", "encoder", ".", "layer", ")", "\n", "\n", "if", "isinstance", "(", "layers", ",", "list", ")", ":", "\n", "            ", "self", ".", "layers", "=", "[", "int", "(", "l", ")", "for", "l", "in", "layers", "]", "\n", "", "elif", "isinstance", "(", "layers", ",", "str", ")", ":", "\n", "            ", "self", ".", "layers", "=", "list", "(", "map", "(", "int", ",", "layers", ".", "split", "(", "','", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"`layers` only supports str or list[int]\"", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "layer", "<", "0", ":", "\n", "                ", "assert", "-", "layer", "<=", "encoder_layer_number", ",", "f\"The layer index:{layer} is out of scope for \"", "f\"a roberta model with {encoder_layer_number} layers.\"", "\n", "", "else", ":", "\n", "                ", "assert", "layer", "<=", "encoder_layer_number", ",", "f\"The layer index:{layer} is out of scope for \"", "f\"a roberta model with {encoder_layer_number} layers.\"", "\n", "\n", "", "", "assert", "pool_method", "in", "(", "'avg'", ",", "'max'", ",", "'first'", ",", "'last'", ")", "\n", "self", ".", "pool_method", "=", "pool_method", "\n", "self", ".", "include_cls_sep", "=", "include_cls_sep", "\n", "self", ".", "pooled_cls", "=", "pooled_cls", "\n", "self", ".", "auto_truncate", "=", "auto_truncate", "\n", "\n", "word_to_wordpieces", "=", "[", "]", "\n", "word_pieces_lengths", "=", "[", "]", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "            ", "if", "index", "==", "vocab", ".", "padding_idx", ":", "# pad\u662f\u4e2a\u7279\u6b8a\u7684\u7b26\u53f7", "\n", "                ", "word", "=", "'<pad>'", "\n", "", "elif", "index", "==", "vocab", ".", "unknown_idx", ":", "\n", "                ", "word", "=", "'<unk>'", "\n", "", "elif", "vocab", ".", "word_count", "[", "word", "]", "<", "min_freq", ":", "\n", "                ", "word", "=", "'<unk>'", "\n", "", "word_pieces", "=", "self", ".", "tokenzier", ".", "tokenize", "(", "word", ")", "\n", "word_pieces", "=", "self", ".", "tokenzier", ".", "convert_tokens_to_ids", "(", "word_pieces", ")", "\n", "word_to_wordpieces", ".", "append", "(", "word_pieces", ")", "\n", "word_pieces_lengths", ".", "append", "(", "len", "(", "word_pieces", ")", ")", "\n", "", "self", ".", "_cls_index", "=", "self", ".", "tokenzier", ".", "encoder", "[", "'<s>'", "]", "\n", "self", ".", "_sep_index", "=", "self", ".", "tokenzier", ".", "encoder", "[", "'</s>'", "]", "\n", "self", ".", "_word_pad_index", "=", "vocab", ".", "padding_idx", "\n", "self", ".", "_wordpiece_pad_index", "=", "self", ".", "tokenzier", ".", "encoder", "[", "'<pad>'", "]", "# \u9700\u8981\u7528\u4e8e\u751f\u6210word_piece", "\n", "self", ".", "word_to_wordpieces", "=", "np", ".", "array", "(", "word_to_wordpieces", ")", "\n", "self", ".", "register_buffer", "(", "'word_pieces_lengths'", ",", "torch", ".", "LongTensor", "(", "word_pieces_lengths", ")", ")", "\n", "logger", ".", "debug", "(", "\"Successfully generate word pieces.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding._RobertaWordModel.forward": [[248, 353], ["roberta_embedding._RobertaWordModel.encoder", "roberta_embedding._RobertaWordModel.new_zeros", "roberta_embedding._RobertaWordModel.cumsum", "enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "words.size", "words.ne", "words.ne.sum", "roberta_embedding._RobertaWordModel.word_pieces_lengths[].masked_fill", "roberta_embedding._RobertaWordModel.sum", "roberta_embedding._RobertaWordModel.sum().max().item", "words.new_full", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "words.cpu().numpy", "range", "word_pieces[].fill_", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "bert_outputs[].new_zeros", "bert_outputs[].new_zeros", "roberta_embedding._RobertaWordModel.new_zeros.masked_fill_", "batch_indexes[].expand", "words.ne.eq", "list", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "attn_masks[].fill_", "len", "bert_outputs[].size", "len", "bert_outputs[].size", "roberta_embedding._RobertaWordModel.new_zeros.ge", "roberta_embedding._RobertaWordModel.new_zeros.masked_fill_", "batch_indexes[].expand", "torch.cat().contiguous.size", "torch.cat().contiguous.size", "torch.cat().contiguous.new_zeros", "torch.cat().contiguous.new_zeros", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "tmp.masked_fill.masked_fill.masked_fill", "roberta_embedding._RobertaWordModel.sum().max", "word_pieces_lengths.masked_fill.masked_fill.masked_fill", "RuntimeError", "min", "words.cpu", "itertools.chain", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "roberta_embedding._RobertaWordModel.new_zeros.size", "roberta_embedding._RobertaWordModel.new_zeros.ge", "torch.cat().contiguous.size", "torch.cat().contiguous.size", "word_mask[].eq", "tmp.masked_fill.masked_fill.masked_fill", "len", "words.ne.sum.max", "roberta_embedding._RobertaWordModel.new_zeros.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "word_mask[].eq", "range", "range", "roberta_embedding._RobertaWordModel.sum", "range", "range", "roberta_embedding._RobertaWordModel.new_zeros.size", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "words.ne.sum.max", "roberta_embedding._RobertaWordModel.new_zeros.size", "roberta_embedding._RobertaWordModel.new_zeros.size", "roberta_embedding._RobertaWordModel.new_zeros.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param words: torch.LongTensor, batch_size x max_len\n        :return: num_layers x batch_size x max_len x hidden_size\u6216\u8005num_layers x batch_size x (max_len+2) x hidden_size\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_size", ",", "max_word_len", "=", "words", ".", "size", "(", ")", "\n", "word_mask", "=", "words", ".", "ne", "(", "self", ".", "_word_pad_index", ")", "# \u4e3a1\u7684\u5730\u65b9\u6709word", "\n", "seq_len", "=", "word_mask", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "batch_word_pieces_length", "=", "self", ".", "word_pieces_lengths", "[", "words", "]", ".", "masked_fill", "(", "word_mask", ".", "eq", "(", "False", ")", ",", "0", ")", "# batch_size x max_len", "\n", "word_pieces_lengths", "=", "batch_word_pieces_length", ".", "sum", "(", "dim", "=", "-", "1", ")", "# batch_size", "\n", "max_word_piece_length", "=", "batch_word_pieces_length", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "max", "(", ")", ".", "item", "(", ")", "# \u8868\u793aword piece\u7684\u957f\u5ea6(\u5305\u62ecpadding)", "\n", "if", "max_word_piece_length", "+", "2", ">", "self", ".", "_max_position_embeddings", ":", "\n", "                ", "if", "self", ".", "auto_truncate", ":", "\n", "                    ", "word_pieces_lengths", "=", "word_pieces_lengths", ".", "masked_fill", "(", "\n", "word_pieces_lengths", "+", "2", ">", "self", ".", "_max_position_embeddings", ",", "self", ".", "_max_position_embeddings", "-", "2", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "\"After split words into word pieces, the lengths of word pieces are longer than the \"", "\n", "f\"maximum allowed sequence length:{self._max_position_embeddings} of bert. You can set \"", "\n", "f\"`auto_truncate=True` for BertEmbedding to automatically truncate overlong input.\"", ")", "\n", "\n", "# +2\u662f\u7531\u4e8e\u9700\u8981\u52a0\u5165<s>\u4e0e</s>", "\n", "", "", "word_pieces", "=", "words", ".", "new_full", "(", "(", "batch_size", ",", "min", "(", "max_word_piece_length", "+", "2", ",", "self", ".", "_max_position_embeddings", ")", ")", ",", "\n", "fill_value", "=", "self", ".", "_wordpiece_pad_index", ")", "\n", "attn_masks", "=", "torch", ".", "zeros_like", "(", "word_pieces", ")", "\n", "# 1. \u83b7\u53d6words\u7684word_pieces\u7684id\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684span\u8303\u56f4", "\n", "word_indexes", "=", "words", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "word_pieces_i", "=", "list", "(", "chain", "(", "*", "self", ".", "word_to_wordpieces", "[", "word_indexes", "[", "i", ",", ":", "seq_len", "[", "i", "]", "]", "]", ")", ")", "\n", "if", "self", ".", "auto_truncate", "and", "len", "(", "word_pieces_i", ")", ">", "self", ".", "_max_position_embeddings", "-", "2", ":", "\n", "                    ", "word_pieces_i", "=", "word_pieces_i", "[", ":", "self", ".", "_max_position_embeddings", "-", "2", "]", "\n", "", "word_pieces", "[", "i", ",", "1", ":", "word_pieces_lengths", "[", "i", "]", "+", "1", "]", "=", "torch", ".", "LongTensor", "(", "word_pieces_i", ")", "\n", "attn_masks", "[", "i", ",", ":", "word_pieces_lengths", "[", "i", "]", "+", "2", "]", ".", "fill_", "(", "1", ")", "\n", "", "word_pieces", "[", ":", ",", "0", "]", ".", "fill_", "(", "self", ".", "_cls_index", ")", "\n", "batch_indexes", "=", "torch", ".", "arange", "(", "batch_size", ")", ".", "to", "(", "words", ")", "\n", "word_pieces", "[", "batch_indexes", ",", "word_pieces_lengths", "+", "1", "]", "=", "self", ".", "_sep_index", "\n", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "word_pieces", ")", "\n", "# 2. \u83b7\u53d6hidden\u7684\u7ed3\u679c\uff0c\u6839\u636eword_pieces\u8fdb\u884c\u5bf9\u5e94\u7684pool\u8ba1\u7b97", "\n", "# all_outputs: [batch_size x max_len x hidden_size, batch_size x max_len x hidden_size, ...]", "\n", "", "bert_outputs", ",", "pooled_cls", "=", "self", ".", "encoder", "(", "word_pieces", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "attention_mask", "=", "attn_masks", ",", "\n", "output_all_encoded_layers", "=", "True", ")", "\n", "# output_layers = [self.layers]  # len(self.layers) x batch_size x real_word_piece_length x hidden_size", "\n", "\n", "if", "self", ".", "include_cls_sep", ":", "\n", "            ", "s_shift", "=", "1", "\n", "outputs", "=", "bert_outputs", "[", "-", "1", "]", ".", "new_zeros", "(", "len", "(", "self", ".", "layers", ")", ",", "batch_size", ",", "max_word_len", "+", "2", ",", "\n", "bert_outputs", "[", "-", "1", "]", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "s_shift", "=", "0", "\n", "outputs", "=", "bert_outputs", "[", "-", "1", "]", ".", "new_zeros", "(", "len", "(", "self", ".", "layers", ")", ",", "batch_size", ",", "max_word_len", ",", "\n", "bert_outputs", "[", "-", "1", "]", ".", "size", "(", "-", "1", ")", ")", "\n", "", "batch_word_pieces_cum_length", "=", "batch_word_pieces_length", ".", "new_zeros", "(", "batch_size", ",", "max_word_len", "+", "1", ")", "\n", "batch_word_pieces_cum_length", "[", ":", ",", "1", ":", "]", "=", "batch_word_pieces_length", ".", "cumsum", "(", "dim", "=", "-", "1", ")", "# batch_size x max_len", "\n", "\n", "if", "self", ".", "pool_method", "==", "'first'", ":", "\n", "            ", "batch_word_pieces_cum_length", "=", "batch_word_pieces_cum_length", "[", ":", ",", ":", "seq_len", ".", "max", "(", ")", "]", "\n", "batch_word_pieces_cum_length", ".", "masked_fill_", "(", "batch_word_pieces_cum_length", ".", "ge", "(", "max_word_piece_length", ")", ",", "0", ")", "\n", "_batch_indexes", "=", "batch_indexes", "[", ":", ",", "None", "]", ".", "expand", "(", "(", "batch_size", ",", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "self", ".", "pool_method", "==", "'last'", ":", "\n", "            ", "batch_word_pieces_cum_length", "=", "batch_word_pieces_cum_length", "[", ":", ",", "1", ":", "seq_len", ".", "max", "(", ")", "+", "1", "]", "-", "1", "\n", "batch_word_pieces_cum_length", ".", "masked_fill_", "(", "batch_word_pieces_cum_length", ".", "ge", "(", "max_word_piece_length", ")", ",", "0", ")", "\n", "_batch_indexes", "=", "batch_indexes", "[", ":", ",", "None", "]", ".", "expand", "(", "(", "batch_size", ",", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "", "for", "l_index", ",", "l", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "output_layer", "=", "bert_outputs", "[", "l", "]", "\n", "real_word_piece_length", "=", "output_layer", ".", "size", "(", "1", ")", "-", "2", "\n", "if", "max_word_piece_length", ">", "real_word_piece_length", ":", "# \u5982\u679c\u5b9e\u9645\u4e0a\u662f\u622a\u53d6\u51fa\u6765\u7684", "\n", "                ", "paddings", "=", "output_layer", ".", "new_zeros", "(", "batch_size", ",", "\n", "max_word_piece_length", "-", "real_word_piece_length", ",", "\n", "output_layer", ".", "size", "(", "2", ")", ")", "\n", "output_layer", "=", "torch", ".", "cat", "(", "(", "output_layer", ",", "paddings", ")", ",", "dim", "=", "1", ")", ".", "contiguous", "(", ")", "\n", "# \u4eceword_piece collapse\u5230word\u7684\u8868\u793a", "\n", "", "truncate_output_layer", "=", "output_layer", "[", ":", ",", "1", ":", "-", "1", "]", "# \u5220\u9664<s>\u4e0e</s> batch_size x len x hidden_size", "\n", "if", "self", ".", "pool_method", "==", "'first'", ":", "\n", "                ", "tmp", "=", "truncate_output_layer", "[", "_batch_indexes", ",", "batch_word_pieces_cum_length", "]", "\n", "tmp", "=", "tmp", ".", "masked_fill", "(", "word_mask", "[", ":", ",", ":", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", ",", "None", "]", ".", "eq", "(", "False", ")", ",", "0", ")", "\n", "outputs", "[", "l_index", ",", ":", ",", "s_shift", ":", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", "+", "s_shift", "]", "=", "tmp", "\n", "\n", "", "elif", "self", ".", "pool_method", "==", "'last'", ":", "\n", "                ", "tmp", "=", "truncate_output_layer", "[", "_batch_indexes", ",", "batch_word_pieces_cum_length", "]", "\n", "tmp", "=", "tmp", ".", "masked_fill", "(", "word_mask", "[", ":", ",", ":", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", ",", "None", "]", ".", "eq", "(", "False", ")", ",", "0", ")", "\n", "outputs", "[", "l_index", ",", ":", ",", "s_shift", ":", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", "+", "s_shift", "]", "=", "tmp", "\n", "", "elif", "self", ".", "pool_method", "==", "'max'", ":", "\n", "                ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "seq_len", "[", "i", "]", ")", ":", "\n", "                        ", "start", ",", "end", "=", "batch_word_pieces_cum_length", "[", "i", ",", "j", "]", ",", "batch_word_pieces_cum_length", "[", "i", ",", "j", "+", "1", "]", "\n", "outputs", "[", "l_index", ",", "i", ",", "j", "+", "s_shift", "]", ",", "_", "=", "torch", ".", "max", "(", "truncate_output_layer", "[", "i", ",", "start", ":", "end", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "seq_len", "[", "i", "]", ")", ":", "\n", "                        ", "start", ",", "end", "=", "batch_word_pieces_cum_length", "[", "i", ",", "j", "]", ",", "batch_word_pieces_cum_length", "[", "i", ",", "j", "+", "1", "]", "\n", "outputs", "[", "l_index", ",", "i", ",", "j", "+", "s_shift", "]", "=", "torch", ".", "mean", "(", "truncate_output_layer", "[", "i", ",", "start", ":", "end", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "", "", "if", "self", ".", "include_cls_sep", ":", "\n", "                ", "if", "l", "in", "(", "len", "(", "bert_outputs", ")", "-", "1", ",", "-", "1", ")", "and", "self", ".", "pooled_cls", ":", "\n", "                    ", "outputs", "[", "l_index", ",", ":", ",", "0", "]", "=", "pooled_cls", "\n", "", "else", ":", "\n", "                    ", "outputs", "[", "l_index", ",", ":", ",", "0", "]", "=", "output_layer", "[", ":", ",", "0", "]", "\n", "", "outputs", "[", "l_index", ",", "batch_indexes", ",", "seq_len", "+", "s_shift", "]", "=", "output_layer", "[", "batch_indexes", ",", "word_pieces_lengths", "+", "s_shift", "]", "\n", "\n", "# 3. \u6700\u7ec8\u7684embedding\u7ed3\u679c", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding._RobertaWordModel.save": [[354, 357], ["roberta_embedding._RobertaWordModel.tokenzier.save_pretrained", "roberta_embedding._RobertaWordModel.encoder.save_pretrained"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_pretrained"], ["", "def", "save", "(", "self", ",", "folder", ")", ":", "\n", "        ", "self", ".", "tokenzier", ".", "save_pretrained", "(", "folder", ")", "\n", "self", ".", "encoder", ".", "save_pretrained", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaWordPieceEncoder.__init__": [[369, 392], ["torch.Module.__init__", "roberta_embedding._WordPieceRobertaModel", "torch.Dropout", "torch.Dropout", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "model_dir_or_name", ":", "str", "=", "'en'", ",", "layers", ":", "str", "=", "'-1'", ",", "pooled_cls", ":", "bool", "=", "False", ",", "\n", "word_dropout", "=", "0", ",", "dropout", "=", "0", ",", "requires_grad", ":", "bool", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param str model_dir_or_name: \u6a21\u578b\u6240\u5728\u76ee\u5f55\u6216\u8005\u6a21\u578b\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3a ``en-base-uncased``\n        :param str layers: \u6700\u7ec8\u7ed3\u679c\u4e2d\u7684\u8868\u793a\u3002\u4ee5','\u9694\u5f00\u5c42\u6570\uff0c\u53ef\u4ee5\u4ee5\u8d1f\u6570\u53bb\u7d22\u5f15\u5012\u6570\u51e0\u5c42\u3002layer=0\u4e3aembedding\u5c42\uff08\u5305\u62ecwordpiece embedding,\n                position embedding\uff09\n        :param bool pooled_cls: \u8fd4\u56de\u7684\u53e5\u5b50\u5f00\u5934\u7684<s>\u662f\u5426\u4f7f\u7528\u9884\u8bad\u7ec3\u4e2d\u7684BertPool\u6620\u5c04\u4e00\u4e0b\u3002\u5982\u679c\u4e0b\u6e38\u4efb\u52a1\u53d6<s>\u505a\u9884\u6d4b\uff0c\u4e00\u822c\u8be5\u503c\u4e3aTrue\u3002\n        :param float word_dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5c06\u4e00\u4e2a\u8bcd\u66ff\u6362\u4e3aunk\u3002\u8fd9\u6837\u65e2\u53ef\u4ee5\u8bad\u7ec3unk\u4e5f\u662f\u4e00\u5b9a\u7684regularize\u3002\n        :param float dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5bf9embedding\u7684\u8868\u793a\u8fdb\u884cDropout\u30020.1\u5373\u968f\u673a\u5c0610%\u7684\u503c\u7f6e\u4e3a0\u3002\n        :param bool requires_grad: \u662f\u5426\u9700\u8981gradient\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "_WordPieceRobertaModel", "(", "model_dir_or_name", "=", "model_dir_or_name", ",", "layers", "=", "layers", ",", "pooled_cls", "=", "pooled_cls", ")", "\n", "self", ".", "_sep_index", "=", "self", ".", "model", ".", "_sep_index", "\n", "self", ".", "_cls_index", "=", "self", ".", "model", ".", "_cls_index", "\n", "self", ".", "_wordpiece_pad_index", "=", "self", ".", "model", ".", "_wordpiece_pad_index", "\n", "self", ".", "_wordpiece_unk_index", "=", "self", ".", "model", ".", "_wordpiece_unknown_index", "\n", "self", ".", "_embed_size", "=", "len", "(", "self", ".", "model", ".", "layers", ")", "*", "self", ".", "model", ".", "encoder", ".", "hidden_size", "\n", "self", ".", "requires_grad", "=", "requires_grad", "\n", "self", ".", "word_dropout", "=", "word_dropout", "\n", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaWordPieceEncoder.embed_size": [[393, 396], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "embed_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embed_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaWordPieceEncoder.embedding_dim": [[397, 400], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "embedding_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embed_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaWordPieceEncoder.num_embedding": [[401, 404], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_embedding", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "encoder", ".", "config", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaWordPieceEncoder.index_datasets": [[405, 417], ["roberta_embedding.RobertaWordPieceEncoder.model.index_datasets"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding._GPT2WordPieceModel.index_datasets"], ["", "def", "index_datasets", "(", "self", ",", "*", "datasets", ",", "field_name", ",", "add_cls_sep", "=", "True", ",", "add_prefix_space", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f7f\u7528bert\u7684tokenizer\u65b0\u751f\u6210word_pieces\u5217\u52a0\u5165\u5230datasets\u4e2d\uff0c\u5e76\u5c06\u4ed6\u4eec\u8bbe\u7f6e\u4e3ainput,\u4e14\u5c06word_pieces\u8fd9\u4e00\u5217\u7684pad value\u8bbe\u7f6e\u4e3a\u4e86\n        bert\u7684pad value\u3002\n\n        :param ~fastNLP.DataSet datasets: DataSet\u5bf9\u8c61\n        :param str field_name: \u57fa\u4e8e\u54ea\u4e00\u5217\u7684\u5185\u5bb9\u751f\u6210word_pieces\u5217\u3002\u8fd9\u4e00\u5217\u4e2d\u6bcf\u4e2a\u6570\u636e\u5e94\u8be5\u662fList[str]\u7684\u5f62\u5f0f\u3002\n        :param bool add_cls_sep: \u5982\u679c\u9996\u5c3e\u4e0d\u662f<s>\u4e0e</s>\u4f1a\u5728\u9996\u5c3e\u989d\u5916\u52a0\u5165<s>\u4e0e</s>\u3002\n        :param bool add_prefix_spance: \u662f\u5426\u5728\u53e5\u9996\u6dfb\u52a0\u989d\u5916\u7684\u7a7a\u683c\uff0cRoBERTa\u9884\u8bad\u7ec3\u65f6\u8be5\u503c\u4e3aTrue\n        :return:\n        \"\"\"", "\n", "self", ".", "model", ".", "index_datasets", "(", "*", "datasets", ",", "field_name", "=", "field_name", ",", "add_cls_sep", "=", "add_cls_sep", ",", "add_prefix_space", "=", "add_prefix_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaWordPieceEncoder.forward": [[418, 432], ["roberta_embedding.RobertaWordPieceEncoder.drop_word", "roberta_embedding.RobertaWordPieceEncoder.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "roberta_embedding.RobertaWordPieceEncoder.dropout_layer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.drop_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.model"], ["", "def", "forward", "(", "self", ",", "word_pieces", ",", "token_type_ids", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u8ba1\u7b97words\u7684bert embedding\u8868\u793a\u3002\u4f20\u5165\u7684words\u4e2d\u5e94\u8be5\u81ea\u884c\u5305\u542b[CLS]\u4e0e[SEP]\u7684tag\u3002\n\n        :param words: batch_size x max_len\n        :param token_type_ids: batch_size x max_len, \u7528\u4e8e\u533a\u5206\u524d\u4e00\u53e5\u548c\u540e\u4e00\u53e5\u8bdd. \u5982\u679c\u4e0d\u4f20\u5165\uff0c\u5219\u81ea\u52a8\u751f\u6210(\u5927\u90e8\u5206\u60c5\u51b5\uff0c\u90fd\u4e0d\u9700\u8981\u8f93\u5165),\n            \u7b2c\u4e00\u4e2a[SEP]\u53ca\u4e4b\u524d\u4e3a0, \u7b2c\u4e8c\u4e2a[SEP]\u53ca\u5230\u7b2c\u4e00\u4e2a[SEP]\u4e4b\u95f4\u4e3a1; \u7b2c\u4e09\u4e2a[SEP]\u53ca\u5230\u7b2c\u4e8c\u4e2a[SEP]\u4e4b\u95f4\u4e3a0\uff0c\u4f9d\u6b21\u5f80\u540e\u63a8\u3002\n        :return: torch.FloatTensor. batch_size x max_len x (768*len(self.layers))\n        \"\"\"", "\n", "word_pieces", "=", "self", ".", "drop_word", "(", "word_pieces", ")", "\n", "outputs", "=", "self", ".", "model", "(", "word_pieces", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "[", "*", "outputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "self", ".", "dropout_layer", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaWordPieceEncoder.drop_word": [[433, 451], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "words.masked_fill.masked_fill.ne", "words.masked_fill.masked_fill.ne", "words.masked_fill.ne.__and__", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.bernoulli().eq", "torch.bernoulli().eq", "torch.bernoulli().eq", "torch.bernoulli().eq", "words.masked_fill.masked_fill.ne", "words.masked_fill.ne.__and__().__and__", "words.masked_fill.masked_fill.masked_fill", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "words.masked_fill.ne.__and__"], "methods", ["None"], ["", "def", "drop_word", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        \u6309\u7167\u8bbe\u5b9a\u968f\u673a\u5c06words\u8bbe\u7f6e\u4e3aunknown_index\u3002\n\n        :param torch.LongTensor words: batch_size x max_len\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "word_dropout", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "not_sep_mask", "=", "words", ".", "ne", "(", "self", ".", "_sep_index", ")", "\n", "not_cls_mask", "=", "words", ".", "ne", "(", "self", ".", "_cls_index", ")", "\n", "replaceable_mask", "=", "not_sep_mask", ".", "__and__", "(", "not_cls_mask", ")", "\n", "mask", "=", "torch", ".", "full_like", "(", "words", ",", "fill_value", "=", "self", ".", "word_dropout", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "words", ".", "device", ")", "\n", "mask", "=", "torch", ".", "bernoulli", "(", "mask", ")", ".", "eq", "(", "1", ")", "# dropout_word\u8d8a\u5927\uff0c\u8d8a\u591a\u4f4d\u7f6e\u4e3a1", "\n", "pad_mask", "=", "words", ".", "ne", "(", "self", ".", "_wordpiece_pad_index", ")", "\n", "mask", "=", "pad_mask", ".", "__and__", "(", "mask", ")", ".", "__and__", "(", "replaceable_mask", ")", "# pad\u7684\u4f4d\u7f6e\u4e0d\u4e3aunk", "\n", "words", "=", "words", ".", "masked_fill", "(", "mask", ",", "self", ".", "_wordpiece_unk_index", ")", "\n", "", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaWordPieceEncoder.save": [[452, 468], ["os.makedirs", "bool", "os.makedirs", "roberta_embedding.RobertaWordPieceEncoder.model.save", "core.logger.debug", "map", "open", "json.dump", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save"], ["", "def", "save", "(", "self", ",", "folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "hyper", "=", "{", "}", "\n", "hyper", "[", "'layers'", "]", "=", "','", ".", "join", "(", "map", "(", "str", ",", "self", ".", "model", ".", "layers", ")", ")", "\n", "hyper", "[", "'dropout'", "]", "=", "self", ".", "dropout_layer", ".", "p", "\n", "hyper", "[", "'word_dropout'", "]", "=", "self", ".", "word_dropout", "\n", "hyper", "[", "'pooled_cls'", "]", "=", "self", ".", "model", ".", "pooled_cls", "\n", "hyper", "[", "'requires_grad'", "]", "=", "bool", "(", "self", ".", "requires_grad", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "ROBERTA_ENCODER_HYPER", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "hyper", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "ROBERTA_ENCODER_FOLDER", ")", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "model", ".", "save", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "ROBERTA_ENCODER_FOLDER", ")", ")", "\n", "logger", ".", "debug", "(", "f\"RobertaWordPieceEncoder has been saved in {folder}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding.RobertaWordPieceEncoder.load": [[469, 481], ["os.path.join", "cls", "os.path.exists", "open", "json.load", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "folder", ")", ":", "\n", "        ", "for", "name", "in", "[", "ROBERTA_ENCODER_HYPER", ",", "ROBERTA_ENCODER_FOLDER", "]", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "name", ")", ")", ",", "f\"{name} not found in {folder}.\"", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "ROBERTA_ENCODER_HYPER", ")", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "hyper", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "model_dir_or_name", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "ROBERTA_ENCODER_FOLDER", ")", ")", "\n", "\n", "bert_encoder", "=", "cls", "(", "model_dir_or_name", "=", "model_dir_or_name", ",", "**", "hyper", ")", "\n", "return", "bert_encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding._WordPieceRobertaModel.__init__": [[484, 512], ["torch.Module.__init__", "modules.tokenizer.RobertaTokenizer.from_pretrained", "modules.encoder.roberta.RobertaModel.from_pretrained", "len", "isinstance", "isinstance", "int", "list", "TypeError", "map", "layers.split"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["    ", "def", "__init__", "(", "self", ",", "model_dir_or_name", ":", "str", ",", "layers", ":", "str", "=", "'-1'", ",", "pooled_cls", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tokenzier", "=", "RobertaTokenizer", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "self", ".", "encoder", "=", "RobertaModel", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "#  \u68c0\u67e5encoder_layer_number\u662f\u5426\u5408\u7406", "\n", "encoder_layer_number", "=", "len", "(", "self", ".", "encoder", ".", "encoder", ".", "layer", ")", "\n", "\n", "if", "isinstance", "(", "layers", ",", "list", ")", ":", "\n", "            ", "self", ".", "layers", "=", "[", "int", "(", "l", ")", "for", "l", "in", "layers", "]", "\n", "", "elif", "isinstance", "(", "layers", ",", "str", ")", ":", "\n", "            ", "self", ".", "layers", "=", "list", "(", "map", "(", "int", ",", "layers", ".", "split", "(", "','", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"`layers` only supports str or list[int]\"", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "layer", "<", "0", ":", "\n", "                ", "assert", "-", "layer", "<=", "encoder_layer_number", ",", "f\"The layer index:{layer} is out of scope for \"", "f\"a RoBERTa model with {encoder_layer_number} layers.\"", "\n", "", "else", ":", "\n", "                ", "assert", "layer", "<=", "encoder_layer_number", ",", "f\"The layer index:{layer} is out of scope for \"", "f\"a RoBERTa model with {encoder_layer_number} layers.\"", "\n", "\n", "", "", "self", ".", "_cls_index", "=", "self", ".", "tokenzier", ".", "encoder", "[", "'<s>'", "]", "\n", "self", ".", "_sep_index", "=", "self", ".", "tokenzier", ".", "encoder", "[", "'</s>'", "]", "\n", "self", ".", "_wordpiece_pad_index", "=", "self", ".", "tokenzier", ".", "encoder", "[", "'<pad>'", "]", "# \u9700\u8981\u7528\u4e8e\u751f\u6210word_piece", "\n", "self", ".", "_wordpiece_unknown_index", "=", "self", ".", "tokenzier", ".", "encoder", "[", "'<unk>'", "]", "\n", "self", ".", "pooled_cls", "=", "pooled_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding._WordPieceRobertaModel.index_datasets": [[513, 535], ["functools.partial", "enumerate", "dataset.apply_field", "dataset.set_pad_val", "core.logger.error"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_pad_val"], ["", "def", "index_datasets", "(", "self", ",", "*", "datasets", ",", "field_name", ",", "add_cls_sep", "=", "True", ",", "add_prefix_space", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f7f\u7528bert\u7684tokenizer\u65b0\u751f\u6210word_pieces\u5217\u52a0\u5165\u5230datasets\u4e2d\uff0c\u5e76\u5c06\u4ed6\u4eec\u8bbe\u7f6e\u4e3ainput\u3002\u5982\u679c\u9996\u5c3e\u4e0d\u662f\n            [CLS]\u4e0e[SEP]\u4f1a\u5728\u9996\u5c3e\u989d\u5916\u52a0\u5165[CLS]\u4e0e[SEP], \u4e14\u5c06word_pieces\u8fd9\u4e00\u5217\u7684pad value\u8bbe\u7f6e\u4e3a\u4e86bert\u7684pad value\u3002\n\n        :param datasets: DataSet\u5bf9\u8c61\n        :param field_name: \u57fa\u4e8e\u54ea\u4e00\u5217index\n        :param bool add_cls_sep: \u662f\u5426\u5728\u53e5\u9996\u53e5\u5c3e\u6dfb\u52a0cls\u548csep\u7684index\n        :param bool add_prefix_space: \u662f\u5426\u5728\u53e5\u5b50\u5f00\u5934\u6dfb\u52a0\u7a7a\u683c\uff0c\u9884\u8bad\u7ec3\u65f6RoBERTa\u8be5\u503c\u4e3aTrue\n        :return:\n        \"\"\"", "\n", "\n", "encode_func", "=", "partial", "(", "self", ".", "tokenzier", ".", "encode", ",", "add_special_tokens", "=", "add_cls_sep", ",", "add_prefix_space", "=", "add_prefix_space", ")", "\n", "\n", "for", "index", ",", "dataset", "in", "enumerate", "(", "datasets", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "encode_func", ",", "field_name", "=", "field_name", ",", "new_field_name", "=", "'word_pieces'", ",", "\n", "is_input", "=", "True", ")", "\n", "dataset", ".", "set_pad_val", "(", "'word_pieces'", ",", "self", ".", "_wordpiece_pad_index", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"Exception happens when processing the {index} dataset.\"", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding._WordPieceRobertaModel.forward": [[536, 556], ["word_pieces.size", "word_pieces.ne", "roberta_embedding._WordPieceRobertaModel.encoder", "roberta_outputs[].new_zeros", "enumerate", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "roberta_outputs[].size", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "", "def", "forward", "(", "self", ",", "word_pieces", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param word_pieces: torch.LongTensor, batch_size x max_len\n        :return: num_layers x batch_size x max_len x hidden_size\u6216\u8005num_layers x batch_size x (max_len+2) x hidden_size\n        \"\"\"", "\n", "batch_size", ",", "max_len", "=", "word_pieces", ".", "size", "(", ")", "\n", "\n", "attn_masks", "=", "word_pieces", ".", "ne", "(", "self", ".", "_wordpiece_pad_index", ")", "\n", "roberta_outputs", ",", "pooled_cls", "=", "self", ".", "encoder", "(", "word_pieces", ",", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "word_pieces", ")", ",", "\n", "attention_mask", "=", "attn_masks", ",", "\n", "output_all_encoded_layers", "=", "True", ")", "\n", "# output_layers = [self.layers]  # len(self.layers) x batch_size x max_word_piece_length x hidden_size", "\n", "outputs", "=", "roberta_outputs", "[", "0", "]", ".", "new_zeros", "(", "(", "len", "(", "self", ".", "layers", ")", ",", "batch_size", ",", "max_len", ",", "roberta_outputs", "[", "0", "]", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "for", "l_index", ",", "l", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "roberta_output", "=", "roberta_outputs", "[", "l", "]", "\n", "if", "l", "in", "(", "len", "(", "roberta_output", ")", "-", "1", ",", "-", "1", ")", "and", "self", ".", "pooled_cls", ":", "\n", "                ", "roberta_output", "[", ":", ",", "0", "]", "=", "pooled_cls", "\n", "", "outputs", "[", "l_index", "]", "=", "roberta_output", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.roberta_embedding._WordPieceRobertaModel.save": [[557, 560], ["roberta_embedding._WordPieceRobertaModel.tokenzier.save_pretrained", "roberta_embedding._WordPieceRobertaModel.encoder.save_pretrained"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_pretrained"], ["", "def", "save", "(", "self", ",", "folder", ")", ":", "\n", "        ", "self", ".", "tokenzier", ".", "save_pretrained", "(", "folder", ")", "\n", "self", ".", "encoder", ".", "save_pretrained", "(", "folder", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.static_embedding.StaticEmbedding.__init__": [[80, 211], ["embedding.TokenEmbedding.__init__", "kwargs.get", "kwargs.get", "torch.Embedding", "torch.Embedding", "static_embedding.StaticEmbedding.embedding.weight.size", "int", "copy.deepcopy", "copy.deepcopy.build_vocab", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "core.logger.info", "core.vocabulary.Vocabulary", "core.logger.info", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "static_embedding.StaticEmbedding.register_buffer", "range", "static_embedding.StaticEmbedding.register_buffer", "core.logger.info", "model_dir_or_name.lower", "io.file_utils._get_embedding_url", "io.file_utils.cached_path", "os.path.isfile", "collections.defaultdict", "copy.deepcopy.word_count.items", "copy.deepcopy.word_count.keys", "kwargs.get", "copy.deepcopy.word_count.keys", "copy.deepcopy.to_index", "vocab._is_word_no_create_entry", "static_embedding.StaticEmbedding._load_with_vocab", "static_embedding.StaticEmbedding._randomly_init_embed", "static_embedding.StaticEmbedding.register_buffer", "static_embedding.StaticEmbedding.register_buffer", "static_embedding.StaticEmbedding._load_with_vocab", "static_embedding.StaticEmbedding._randomly_init_embed", "static_embedding.StaticEmbedding.register_buffer", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "len", "model_dir_or_name.lower", "os.path.abspath", "os.path.abspath", "os.path.isdir", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "core.vocabulary.Vocabulary.add_word", "core.vocabulary.Vocabulary.add_word", "len", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "static_embedding.StaticEmbedding.size", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.full", "torch.full", "torch.full", "torch.full", "word.lower.lower.lower", "len", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "os.path.expanduser", "os.path.expanduser", "os.path.abspath", "io.file_utils._get_file_name_base_on_postfix", "ValueError", "copy.deepcopy.add_word_lst", "copy.deepcopy._is_word_no_create_entry", "copy.deepcopy.add_word_lst", "len", "word.lower.lower.lower", "word.lower.lower.lower", "len", "len", "core.vocabulary.Vocabulary._is_word_no_create_entry", "core.vocabulary.Vocabulary.to_index", "os.path.expanduser", "os.path.abspath", "word.lower.lower.lower", "len", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "os.path.expanduser", "copy.deepcopy._is_word_no_create_entry", "len", "len", "len", "word.lower.lower.lower"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.build_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_embedding_url", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.cached_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._is_word_no_create_entry", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.static_embedding.StaticEmbedding._load_with_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.static_embedding.StaticEmbedding._randomly_init_embed", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.static_embedding.StaticEmbedding._load_with_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.static_embedding.StaticEmbedding._randomly_init_embed", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word_lst", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._is_word_no_create_entry", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word_lst", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._is_word_no_create_entry", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._is_word_no_create_entry", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["def", "__init__", "(", "self", ",", "vocab", ":", "Vocabulary", ",", "model_dir_or_name", ":", "Union", "[", "str", ",", "None", "]", "=", "'en'", ",", "embedding_dim", "=", "-", "1", ",", "requires_grad", ":", "bool", "=", "True", ",", "\n", "init_method", "=", "None", ",", "lower", "=", "False", ",", "dropout", "=", "0", ",", "word_dropout", "=", "0", ",", "normalize", "=", "False", ",", "min_freq", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param vocab: Vocabulary. \u82e5\u8be5\u9879\u4e3aNone\u5219\u4f1a\u8bfb\u53d6\u6240\u6709\u7684embedding\u3002\n        :param model_dir_or_name: \u53ef\u4ee5\u6709\u4e24\u79cd\u65b9\u5f0f\u8c03\u7528\u9884\u8bad\u7ec3\u597d\u7684static embedding\uff1a\u7b2c\u4e00\u79cd\u662f\u4f20\u5165embedding\u6587\u4ef6\u5939(\u6587\u4ef6\u5939\u4e0b\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\n            \u4ee5.txt\u4f5c\u4e3a\u540e\u7f00\u7684\u6587\u4ef6)\u6216\u6587\u4ef6\u8def\u5f84\uff1b\u7b2c\u4e8c\u79cd\u662f\u4f20\u5165embedding\u7684\u540d\u79f0\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u5c06\u81ea\u52a8\u67e5\u770b\u7f13\u5b58\u4e2d\u662f\u5426\u5b58\u5728\u8be5\u6a21\u578b\uff0c\u6ca1\u6709\u7684\u8bdd\u5c06\u81ea\u52a8\u4e0b\u8f7d\u3002\n            \u5982\u679c\u8f93\u5165\u4e3aNone\u5219\u4f7f\u7528embedding_dim\u7684\u7ef4\u5ea6\u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2aembedding\u3002\n        :param int embedding_dim: \u968f\u673a\u521d\u59cb\u5316\u7684embedding\u7684\u7ef4\u5ea6\uff0c\u5f53\u8be5\u503c\u4e3a\u5927\u4e8e0\u7684\u503c\u65f6\uff0c\u5c06\u5ffd\u7565model_dir_or_name\u3002\n        :param bool requires_grad: \u662f\u5426\u9700\u8981gradient. \u9ed8\u8ba4\u4e3aTrue\n        :param callable init_method: \u5982\u4f55\u521d\u59cb\u5316\u6ca1\u6709\u627e\u5230\u7684\u503c\u3002\u53ef\u4ee5\u4f7f\u7528torch.nn.init.*\u4e2d\u5404\u79cd\u65b9\u6cd5, \u4f20\u5165\u7684\u65b9\u6cd5\u5e94\u8be5\u63a5\u53d7\u4e00\u4e2atensor\uff0c\u5e76\n            inplace\u5730\u4fee\u6539\u5176\u503c\u3002\n        :param bool lower: \u662f\u5426\u5c06vocab\u4e2d\u7684\u8bcd\u8bed\u5c0f\u5199\u540e\u518d\u548c\u9884\u8bad\u7ec3\u7684\u8bcd\u8868\u8fdb\u884c\u5339\u914d\u3002\u5982\u679c\u4f60\u7684\u8bcd\u8868\u4e2d\u5305\u542b\u5927\u5199\u7684\u8bcd\u8bed\uff0c\u6216\u8005\u5c31\u662f\u9700\u8981\u5355\u72ec\n            \u4e3a\u5927\u5199\u7684\u8bcd\u8bed\u5f00\u8f9f\u4e00\u4e2avector\u8868\u793a\uff0c\u5219\u5c06lower\u8bbe\u7f6e\u4e3aFalse\u3002\n        :param float dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5bf9embedding\u7684\u8868\u793a\u8fdb\u884cDropout\u30020.1\u5373\u968f\u673a\u5c0610%\u7684\u503c\u7f6e\u4e3a0\u3002\n        :param float word_dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5c06\u4e00\u4e2a\u8bcd\u66ff\u6362\u4e3aunk\u3002\u8fd9\u6837\u65e2\u53ef\u4ee5\u8bad\u7ec3unk\u4e5f\u662f\u4e00\u5b9a\u7684regularize\u3002\n        :param bool normalize: \u662f\u5426\u5bf9vector\u8fdb\u884cnormalize\uff0c\u4f7f\u5f97\u6bcf\u4e2avector\u7684norm\u4e3a1\u3002\n        :param int min_freq: Vocabulary\u8bcd\u9891\u6570\u5c0f\u4e8e\u8fd9\u4e2a\u6570\u91cf\u7684word\u5c06\u88ab\u6307\u5411unk\u3002\n        :param dict kwargs:\n                bool only_train_min_freq: \u4ec5\u5bf9train\u4e2d\u7684\u8bcd\u8bed\u4f7f\u7528min_freq\u7b5b\u9009;\n                bool only_norm_found_vector: \u9ed8\u8ba4\u4e3aFalse, \u662f\u5426\u4ec5\u5bf9\u5728\u9884\u8bad\u7ec3\u4e2d\u627e\u5230\u7684\u8bcd\u8bed\u4f7f\u7528normalize;\n                bool only_use_pretrain_word: \u9ed8\u8ba4\u4e3aFalse, \u4ec5\u4f7f\u7528\u51fa\u73b0\u5728pretrain\u8bcd\u8868\u4e2d\u7684\u8bcd\uff0c\u5982\u679c\u8be5\u8bcd\u6ca1\u6709\u5728\u9884\u8bad\u7ec3\u7684\u8bcd\u8868\u4e2d\u51fa\u73b0\u5219\u4e3aunk\u3002\u5982\u679cembedding\u4e0d\u9700\u8981\u66f4\u65b0\u5efa\u8bae\u8bbe\u7f6e\u4e3aTrue\u3002\n        \"\"\"", "\n", "super", "(", "StaticEmbedding", ",", "self", ")", ".", "__init__", "(", "vocab", ",", "word_dropout", "=", "word_dropout", ",", "dropout", "=", "dropout", ")", "\n", "if", "embedding_dim", ">", "0", ":", "\n", "            ", "if", "model_dir_or_name", ":", "\n", "                ", "logger", ".", "info", "(", "f\"StaticEmbedding will ignore `model_dir_or_name`, and randomly initialize embedding with\"", "\n", "f\" dimension {embedding_dim}. If you want to use pre-trained embedding, \"", "\n", "f\"set `embedding_dim` to 0.\"", ")", "\n", "", "model_dir_or_name", "=", "None", "\n", "\n", "# \u5f97\u5230cache_path", "\n", "", "if", "model_dir_or_name", "is", "None", ":", "\n", "            ", "assert", "embedding_dim", ">=", "1", ",", "\"The dimension of embedding should be larger than 1.\"", "\n", "embedding_dim", "=", "int", "(", "embedding_dim", ")", "\n", "model_path", "=", "None", "\n", "", "elif", "model_dir_or_name", ".", "lower", "(", ")", "in", "PRETRAIN_STATIC_FILES", ":", "\n", "            ", "model_url", "=", "_get_embedding_url", "(", "'static'", ",", "model_dir_or_name", ".", "lower", "(", ")", ")", "\n", "model_path", "=", "cached_path", "(", "model_url", ",", "name", "=", "'embedding'", ")", "\n", "# \u68c0\u67e5\u662f\u5426\u5b58\u5728", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "model_dir_or_name", ")", ")", ")", ":", "\n", "            ", "model_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "model_dir_or_name", ")", ")", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "model_dir_or_name", ")", ")", ")", ":", "\n", "            ", "model_path", "=", "_get_file_name_base_on_postfix", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "model_dir_or_name", ")", ")", ",", "'.txt'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Cannot recognize {model_dir_or_name}.\"", ")", "\n", "\n", "", "kwargs", "[", "'min_freq'", "]", "=", "min_freq", "\n", "kwargs", "[", "'lower'", "]", "=", "lower", "\n", "# \u6839\u636emin_freq\u7f29\u5c0fvocab", "\n", "truncate_vocab", "=", "(", "vocab", ".", "min_freq", "is", "None", "and", "min_freq", ">", "1", ")", "or", "(", "vocab", ".", "min_freq", "and", "vocab", ".", "min_freq", "<", "min_freq", ")", "\n", "if", "truncate_vocab", ":", "\n", "            ", "truncated_vocab", "=", "deepcopy", "(", "vocab", ")", "\n", "truncated_vocab", ".", "min_freq", "=", "min_freq", "\n", "truncated_vocab", ".", "word2idx", "=", "None", "\n", "if", "lower", ":", "# \u5982\u679c\u6709lower\uff0c\u5c06\u5927\u5c0f\u5199\u7684\u7684freq\u9700\u8981\u540c\u65f6\u8003\u8651\u5230", "\n", "                ", "lowered_word_count", "=", "defaultdict", "(", "int", ")", "\n", "for", "word", ",", "count", "in", "truncated_vocab", ".", "word_count", ".", "items", "(", ")", ":", "\n", "                    ", "lowered_word_count", "[", "word", ".", "lower", "(", ")", "]", "+=", "count", "\n", "", "for", "word", "in", "truncated_vocab", ".", "word_count", ".", "keys", "(", ")", ":", "\n", "                    ", "word_count", "=", "truncated_vocab", ".", "word_count", "[", "word", "]", "\n", "if", "lowered_word_count", "[", "word", ".", "lower", "(", ")", "]", ">=", "min_freq", "and", "word_count", "<", "min_freq", ":", "\n", "                        ", "truncated_vocab", ".", "add_word_lst", "(", "[", "word", "]", "*", "(", "min_freq", "-", "word_count", ")", ",", "\n", "no_create_entry", "=", "truncated_vocab", ".", "_is_word_no_create_entry", "(", "word", ")", ")", "\n", "\n", "# \u53ea\u9650\u5236\u5728train\u91cc\u9762\u7684\u8bcd\u8bed\u4f7f\u7528min_freq\u7b5b\u9009", "\n", "", "", "", "if", "kwargs", ".", "get", "(", "'only_train_min_freq'", ",", "False", ")", "and", "model_dir_or_name", "is", "not", "None", ":", "\n", "                ", "for", "word", "in", "truncated_vocab", ".", "word_count", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "truncated_vocab", ".", "_is_word_no_create_entry", "(", "word", ")", "and", "truncated_vocab", ".", "word_count", "[", "word", "]", "<", "min_freq", ":", "\n", "                        ", "truncated_vocab", ".", "add_word_lst", "(", "[", "word", "]", "*", "(", "min_freq", "-", "truncated_vocab", ".", "word_count", "[", "word", "]", ")", ",", "\n", "no_create_entry", "=", "True", ")", "\n", "", "", "", "truncated_vocab", ".", "build_vocab", "(", ")", "\n", "truncated_words_to_words", "=", "torch", ".", "arange", "(", "len", "(", "vocab", ")", ")", ".", "long", "(", ")", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "                ", "truncated_words_to_words", "[", "index", "]", "=", "truncated_vocab", ".", "to_index", "(", "word", ")", "\n", "", "logger", ".", "info", "(", "f\"{len(vocab) - len(truncated_vocab)} words have frequency less than {min_freq}.\"", ")", "\n", "vocab", "=", "truncated_vocab", "\n", "\n", "", "self", ".", "only_use_pretrain_word", "=", "kwargs", ".", "get", "(", "'only_use_pretrain_word'", ",", "False", ")", "\n", "self", ".", "only_norm_found_vector", "=", "kwargs", ".", "get", "(", "'only_norm_found_vector'", ",", "False", ")", "\n", "# \u8bfb\u53d6embedding", "\n", "if", "lower", ":", "\n", "            ", "lowered_vocab", "=", "Vocabulary", "(", "padding", "=", "vocab", ".", "padding", ",", "unknown", "=", "vocab", ".", "unknown", ")", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "                ", "if", "vocab", ".", "_is_word_no_create_entry", "(", "word", ")", ":", "\n", "                    ", "lowered_vocab", ".", "add_word", "(", "word", ".", "lower", "(", ")", ",", "no_create_entry", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "lowered_vocab", ".", "add_word", "(", "word", ".", "lower", "(", ")", ")", "# \u5148\u52a0\u5165\u9700\u8981\u521b\u5efaentry\u7684", "\n", "", "", "logger", ".", "info", "(", "f\"All word in the vocab have been lowered. There are {len(vocab)} words, {len(lowered_vocab)} \"", "\n", "f\"unique lowered words.\"", ")", "\n", "if", "model_path", ":", "\n", "                ", "embedding", "=", "self", ".", "_load_with_vocab", "(", "model_path", ",", "vocab", "=", "lowered_vocab", ",", "init_method", "=", "init_method", ")", "\n", "", "else", ":", "\n", "                ", "embedding", "=", "self", ".", "_randomly_init_embed", "(", "len", "(", "vocab", ")", ",", "embedding_dim", ",", "init_method", ")", "\n", "self", ".", "register_buffer", "(", "'words_to_words'", ",", "torch", ".", "arange", "(", "len", "(", "vocab", ")", ")", ".", "long", "(", ")", ")", "\n", "", "if", "lowered_vocab", ".", "unknown", ":", "\n", "                ", "unknown_idx", "=", "lowered_vocab", ".", "unknown_idx", "\n", "", "else", ":", "\n", "                ", "unknown_idx", "=", "embedding", ".", "size", "(", "0", ")", "-", "1", "# \u5426\u5219\u662f\u6700\u540e\u4e00\u4e2a\u4e3aunknow", "\n", "self", ".", "register_buffer", "(", "'words_to_words'", ",", "torch", ".", "arange", "(", "len", "(", "vocab", ")", ")", ".", "long", "(", ")", ")", "\n", "", "words_to_words", "=", "torch", ".", "full", "(", "(", "len", "(", "vocab", ")", ",", ")", ",", "fill_value", "=", "unknown_idx", ",", "dtype", "=", "torch", ".", "long", ")", ".", "long", "(", ")", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "                ", "if", "word", "not", "in", "lowered_vocab", ":", "\n", "                    ", "word", "=", "word", ".", "lower", "(", ")", "\n", "if", "word", "not", "in", "lowered_vocab", "and", "lowered_vocab", ".", "_is_word_no_create_entry", "(", "word", ")", ":", "\n", "                        ", "continue", "# \u5982\u679c\u4e0d\u9700\u8981\u521b\u5efaentry,\u5df2\u7ecf\u9ed8\u8ba4unknown\u4e86", "\n", "", "", "words_to_words", "[", "index", "]", "=", "self", ".", "words_to_words", "[", "lowered_vocab", ".", "to_index", "(", "word", ")", "]", "\n", "", "self", ".", "register_buffer", "(", "'words_to_words'", ",", "words_to_words", ")", "\n", "self", ".", "_word_unk_index", "=", "lowered_vocab", ".", "unknown_idx", "# \u66ff\u6362\u4e00\u4e0bunknown\u7684index", "\n", "", "else", ":", "\n", "            ", "if", "model_path", ":", "\n", "                ", "embedding", "=", "self", ".", "_load_with_vocab", "(", "model_path", ",", "vocab", "=", "vocab", ",", "init_method", "=", "init_method", ")", "\n", "", "else", ":", "\n", "                ", "embedding", "=", "self", ".", "_randomly_init_embed", "(", "len", "(", "vocab", ")", ",", "embedding_dim", ",", "init_method", ")", "\n", "self", ".", "register_buffer", "(", "'words_to_words'", ",", "torch", ".", "arange", "(", "len", "(", "vocab", ")", ")", ".", "long", "(", ")", ")", "\n", "", "", "if", "not", "self", ".", "only_norm_found_vector", "and", "normalize", ":", "\n", "            ", "embedding", "/=", "(", "torch", ".", "norm", "(", "embedding", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-12", ")", "\n", "\n", "", "if", "truncate_vocab", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "truncated_words_to_words", ")", ")", ":", "\n", "                ", "index_in_truncated_vocab", "=", "truncated_words_to_words", "[", "i", "]", "\n", "truncated_words_to_words", "[", "i", "]", "=", "self", ".", "words_to_words", "[", "index_in_truncated_vocab", "]", "\n", "", "del", "self", ".", "words_to_words", "\n", "self", ".", "register_buffer", "(", "'words_to_words'", ",", "truncated_words_to_words", ")", "\n", "", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "embedding", ".", "shape", "[", "0", "]", ",", "embedding_dim", "=", "embedding", ".", "shape", "[", "1", "]", ",", "\n", "padding_idx", "=", "vocab", ".", "padding_idx", ",", "\n", "max_norm", "=", "None", ",", "norm_type", "=", "2", ",", "scale_grad_by_freq", "=", "False", ",", "\n", "sparse", "=", "False", ",", "_weight", "=", "embedding", ")", "\n", "self", ".", "_embed_size", "=", "self", ".", "embedding", ".", "weight", ".", "size", "(", "1", ")", "\n", "self", ".", "requires_grad", "=", "requires_grad", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.static_embedding.StaticEmbedding.weight": [[212, 215], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "weight", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embedding", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.static_embedding.StaticEmbedding._randomly_init_embed": [[216, 232], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.init.uniform_", "torch.init.uniform_", "init_embed", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "def", "_randomly_init_embed", "(", "self", ",", "num_embedding", ",", "embedding_dim", ",", "init_embed", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param int num_embedding: embedding\u7684entry\u7684\u6570\u91cf\n        :param int embedding_dim: embedding\u7684\u7ef4\u5ea6\u5927\u5c0f\n        :param callable init_embed: \u521d\u59cb\u5316\u65b9\u6cd5\n        :return: torch.FloatTensor\n        \"\"\"", "\n", "embed", "=", "torch", ".", "zeros", "(", "num_embedding", ",", "embedding_dim", ")", "\n", "\n", "if", "init_embed", "is", "None", ":", "\n", "            ", "nn", ".", "init", ".", "uniform_", "(", "embed", ",", "-", "np", ".", "sqrt", "(", "3", "/", "embedding_dim", ")", ",", "np", ".", "sqrt", "(", "3", "/", "embedding_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "init_embed", "(", "embed", ")", "\n", "\n", "", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.static_embedding.StaticEmbedding._load_with_vocab": [[233, 320], ["isinstance", "os.path.exists", "FileNotFoundError", "open", "f.readline().strip", "f.readline().strip.split", "enumerate", "core.logger.info", "static_embedding.StaticEmbedding._randomly_init_embed", "static_embedding.StaticEmbedding.register_buffer", "len", "int", "f.seek", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.full().long", "torch.full().long", "torch.full().long", "torch.full().long", "f.readline", "len", "f.readline().strip.strip().split", "len", "matrix.get", "vocab.to_index", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full", "torch.full", "torch.full", "torch.full", "f.readline().strip.strip", "numpy.fromstring", "warnings.warn", "core.logger.error", "vocab._is_word_no_create_entry", "numpy.linalg.norm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.static_embedding.StaticEmbedding._randomly_init_embed", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._is_word_no_create_entry"], ["", "def", "_load_with_vocab", "(", "self", ",", "embed_filepath", ",", "vocab", ",", "dtype", "=", "np", ".", "float32", ",", "padding", "=", "'<pad>'", ",", "unknown", "=", "'<unk>'", ",", "\n", "error", "=", "'ignore'", ",", "init_method", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u4eceembed_filepath\u8fd9\u4e2a\u9884\u8bad\u7ec3\u7684\u8bcd\u5411\u91cf\u4e2d\u62bd\u53d6\u51favocab\u8fd9\u4e2a\u8bcd\u8868\u7684\u8bcd\u7684embedding\u3002EmbedLoader\u5c06\u81ea\u52a8\u5224\u65adembed_filepath\u662f\n        word2vec(\u7b2c\u4e00\u884c\u53ea\u6709\u4e24\u4e2a\u5143\u7d20)\u8fd8\u662fglove\u683c\u5f0f\u7684\u6570\u636e\u3002\n\n        :param str embed_filepath: \u9884\u8bad\u7ec3\u7684embedding\u7684\u8def\u5f84\u3002\n        :param vocab: \u8bcd\u8868 :class:`~fastNLP.Vocabulary` \u7c7b\u578b\uff0c\u8bfb\u53d6\u51fa\u73b0\u5728vocab\u4e2d\u7684\u8bcd\u7684embedding\u3002\n            \u6ca1\u6709\u51fa\u73b0\u5728vocab\u4e2d\u7684\u8bcd\u7684embedding\u5c06\u901a\u8fc7\u627e\u5230\u7684\u8bcd\u7684embedding\u7684\u6b63\u6001\u5206\u5e03\u91c7\u6837\u51fa\u6765\uff0c\u4ee5\u4f7f\u5f97\u6574\u4e2aEmbedding\u662f\u540c\u5206\u5e03\u7684\u3002\n        :param dtype: \u8bfb\u51fa\u7684embedding\u7684\u7c7b\u578b\n        :param str padding: \u8bcd\u8868\u4e2dpadding\u7684token\n        :param str unknown: \u8bcd\u8868\u4e2dunknown\u7684token\n        :param str error: `ignore` , `strict` ; \u5982\u679c `ignore` \uff0c\u9519\u8bef\u5c06\u81ea\u52a8\u8df3\u8fc7; \u5982\u679c `strict` , \u9519\u8bef\u5c06\u629b\u51fa\u3002\n            \u8fd9\u91cc\u4e3b\u8981\u53ef\u80fd\u51fa\u9519\u7684\u5730\u65b9\u5728\u4e8e\u8bcd\u8868\u6709\u7a7a\u884c\u6216\u8005\u8bcd\u8868\u51fa\u73b0\u4e86\u7ef4\u5ea6\u4e0d\u4e00\u81f4\u3002\n        :param init_method: \u5982\u4f55\u521d\u59cb\u5316\u6ca1\u6709\u627e\u5230\u7684\u503c\u3002\u53ef\u4ee5\u4f7f\u7528torch.nn.init.*\u4e2d\u5404\u79cd\u65b9\u6cd5\u3002\u9ed8\u8ba4\u4f7f\u7528torch.nn.init.zeros_\n        :return torch.tensor:  shape\u4e3a [len(vocab), dimension], dimension\u7531pretrain\u7684embedding\u51b3\u5b9a\u3002\n        \"\"\"", "\n", "assert", "isinstance", "(", "vocab", ",", "Vocabulary", ")", ",", "\"Only fastNLP.Vocabulary is supported.\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "embed_filepath", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\"`{}` does not exist.\"", ".", "format", "(", "embed_filepath", ")", ")", "\n", "", "with", "open", "(", "embed_filepath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "line", "=", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "parts", "=", "line", ".", "split", "(", ")", "\n", "start_idx", "=", "0", "\n", "if", "len", "(", "parts", ")", "==", "2", ":", "\n", "                ", "dim", "=", "int", "(", "parts", "[", "1", "]", ")", "\n", "start_idx", "+=", "1", "\n", "", "else", ":", "\n", "                ", "dim", "=", "len", "(", "parts", ")", "-", "1", "\n", "f", ".", "seek", "(", "0", ")", "\n", "", "matrix", "=", "{", "}", "# index\u662fword\u5728vocab\u4e2d\u7684index\uff0cvalue\u662fvector\u6216None(\u5982\u679c\u5728pretrain\u4e2d\u6ca1\u6709\u627e\u5230\u8be5word)", "\n", "if", "vocab", ".", "padding", ":", "\n", "                ", "matrix", "[", "vocab", ".", "padding_idx", "]", "=", "torch", ".", "zeros", "(", "dim", ")", "\n", "", "if", "vocab", ".", "unknown", ":", "\n", "                ", "matrix", "[", "vocab", ".", "unknown_idx", "]", "=", "torch", ".", "zeros", "(", "dim", ")", "\n", "", "found_count", "=", "0", "\n", "found_unknown", "=", "False", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ",", "start_idx", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "word", "=", "''", ".", "join", "(", "parts", "[", ":", "-", "dim", "]", ")", "\n", "nums", "=", "parts", "[", "-", "dim", ":", "]", "\n", "# \u5bf9\u9f50unk\u4e0epad", "\n", "if", "word", "==", "padding", "and", "vocab", ".", "padding", "is", "not", "None", ":", "\n", "                        ", "word", "=", "vocab", ".", "padding", "\n", "", "elif", "word", "==", "unknown", "and", "vocab", ".", "unknown", "is", "not", "None", ":", "\n", "                        ", "word", "=", "vocab", ".", "unknown", "\n", "found_unknown", "=", "True", "\n", "", "if", "word", "in", "vocab", ":", "\n", "                        ", "index", "=", "vocab", ".", "to_index", "(", "word", ")", "\n", "matrix", "[", "index", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "fromstring", "(", "' '", ".", "join", "(", "nums", ")", ",", "sep", "=", "' '", ",", "dtype", "=", "dtype", ",", "count", "=", "dim", ")", ")", "\n", "if", "self", ".", "only_norm_found_vector", ":", "\n", "                            ", "matrix", "[", "index", "]", "=", "matrix", "[", "index", "]", "/", "np", ".", "linalg", ".", "norm", "(", "matrix", "[", "index", "]", ")", "\n", "", "found_count", "+=", "1", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "if", "error", "==", "'ignore'", ":", "\n", "                        ", "warnings", ".", "warn", "(", "\"Error occurred at the {} line.\"", ".", "format", "(", "idx", ")", ")", "\n", "", "else", ":", "\n", "                        ", "logger", ".", "error", "(", "\"Error occurred at the {} line.\"", ".", "format", "(", "idx", ")", ")", "\n", "raise", "e", "\n", "", "", "", "logger", ".", "info", "(", "\"Found {} out of {} words in the pre-training embedding.\"", ".", "format", "(", "found_count", ",", "len", "(", "vocab", ")", ")", ")", "\n", "if", "not", "self", ".", "only_use_pretrain_word", ":", "# \u5982\u679c\u53ea\u7528pretrain\u4e2d\u7684\u503c\u5c31\u4e0d\u8981\u4e3a\u672a\u627e\u5230\u7684\u8bcd\u521b\u5efaentry\u4e86", "\n", "                ", "for", "word", ",", "index", "in", "vocab", ":", "\n", "                    ", "if", "index", "not", "in", "matrix", "and", "not", "vocab", ".", "_is_word_no_create_entry", "(", "word", ")", ":", "\n", "                        ", "if", "found_unknown", ":", "# \u5982\u679c\u6709unkonwn\uff0c\u7528unknown\u521d\u59cb\u5316", "\n", "                            ", "matrix", "[", "index", "]", "=", "matrix", "[", "vocab", ".", "unknown_idx", "]", "\n", "", "else", ":", "\n", "                            ", "matrix", "[", "index", "]", "=", "None", "\n", "# matrix\u4e2d\u4ee3\u8868\u662f\u9700\u8981\u5efa\u7acbentry\u7684\u8bcd", "\n", "", "", "", "", "vectors", "=", "self", ".", "_randomly_init_embed", "(", "len", "(", "matrix", ")", ",", "dim", ",", "init_method", ")", "\n", "\n", "if", "vocab", ".", "unknown", "is", "None", ":", "# \u521b\u5efa\u4e00\u4e2a\u4e13\u95e8\u7684unknown", "\n", "                ", "unknown_idx", "=", "len", "(", "matrix", ")", "\n", "vectors", "=", "torch", ".", "cat", "(", "(", "vectors", ",", "torch", ".", "zeros", "(", "1", ",", "dim", ")", ")", ",", "dim", "=", "0", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "                ", "unknown_idx", "=", "vocab", ".", "unknown_idx", "\n", "", "self", ".", "register_buffer", "(", "'words_to_words'", ",", "torch", ".", "full", "(", "(", "len", "(", "vocab", ")", ",", ")", ",", "fill_value", "=", "unknown_idx", ",", "dtype", "=", "torch", ".", "long", ")", ".", "long", "(", ")", ")", "\n", "index", "=", "0", "\n", "for", "word", ",", "index_in_vocab", "in", "vocab", ":", "\n", "                ", "if", "index_in_vocab", "in", "matrix", ":", "\n", "                    ", "vec", "=", "matrix", ".", "get", "(", "index_in_vocab", ")", "\n", "if", "vec", "is", "not", "None", ":", "# \u4f7f\u7528\u627e\u5230\u7684vector, \u5982\u679c\u4e3aNone\u8bf4\u660e\u9700\u8981\u8bad\u7ec3", "\n", "                        ", "vectors", "[", "index", "]", "=", "vec", "\n", "", "self", ".", "words_to_words", "[", "index_in_vocab", "]", "=", "index", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.static_embedding.StaticEmbedding.forward": [[321, 334], ["hasattr", "static_embedding.StaticEmbedding.drop_word", "static_embedding.StaticEmbedding.embedding", "static_embedding.StaticEmbedding.dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.drop_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["", "", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f20\u5165words\u7684index\n\n        :param words: torch.LongTensor, [batch_size, max_len]\n        :return: torch.FloatTensor, [batch_size, max_len, embed_size]\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "'words_to_words'", ")", ":", "\n", "            ", "words", "=", "self", ".", "words_to_words", "[", "words", "]", "\n", "", "words", "=", "self", ".", "drop_word", "(", "words", ")", "\n", "words", "=", "self", ".", "embedding", "(", "words", ")", "\n", "words", "=", "self", ".", "dropout", "(", "words", ")", "\n", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.static_embedding.StaticEmbedding.save": [[335, 383], ["os.makedirs", "static_embedding.StaticEmbedding.get_word_vocab", "os.path.join", "static_embedding.StaticEmbedding.save", "static_embedding.StaticEmbedding.kwargs.copy", "core.logger.debug", "open", "json.dump", "open", "f.write", "range", "f.seek", "f.write", "os.path.join", "os.path.join", "len", "static_embedding.StaticEmbedding.to_word", "static_embedding.StaticEmbedding._is_word_no_create_entry", "static_embedding.StaticEmbedding.embedding.weight.data[].tolist", "f.write", "word.lower.lower.lower", "map"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.get_word_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._is_word_no_create_entry", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["", "def", "save", "(", "self", ",", "folder", ")", ":", "\n", "        ", "\"\"\"\n        \u5c06embedding\u5b58\u50a8\u5230folder\u4e0b\uff0c\u4e4b\u540e\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528load\u65b9\u6cd5\u8bfb\u53d6\n\n        :param str folder: \u4f1a\u5728\u8be5folder\u4e0b\u751f\u6210\u4e09\u4e2a\u6587\u4ef6, vocab.txt, static_embed_hyper.txt, static_embed_hyper.json.\n            \u5176\u4e2dvocab.txt\u53ef\u4ee5\u7528Vocabulary\u901a\u8fc7load\u8bfb\u53d6; embedding.txt\u6309\u7167word2vec\u7684\u65b9\u5f0f\u5b58\u50a8\uff0c\u4ee5\u7a7a\u683c\u7684\u65b9\u5f0f\u9694\u5f00\u5143\u7d20,\n            \u7b2c\u4e00\u884c\u53ea\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u5269\u4e0b\u7684\u884c\u9996\u5148\u662fword\u7136\u540e\u662f\u5404\u4e2a\u7ef4\u5ea6\u7684\u503c; static_embed_hyper.json\u662fStaticEmbedding\u7684\u8d85\u53c2\u6570\n        :return:\n        \"\"\"", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "vocab", "=", "self", ".", "get_word_vocab", "(", ")", "\n", "vocab_fp", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "VOCAB_FILENAME", ")", "\n", "vocab", ".", "save", "(", "vocab_fp", ")", "\n", "kwargs", "=", "self", ".", "kwargs", ".", "copy", "(", ")", "\n", "kwargs", "[", "'dropout'", "]", "=", "self", ".", "dropout_layer", ".", "p", "\n", "kwargs", "[", "'word_dropout'", "]", "=", "self", ".", "word_dropout", "\n", "kwargs", "[", "'requires_grad'", "]", "=", "self", ".", "requires_grad", "\n", "kwargs", "[", "'only_norm_found_vector'", "]", "=", "False", "\n", "kwargs", "[", "'only_use_pretrain_word'", "]", "=", "True", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "STATIC_HYPER_FILENAME", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "kwargs", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "STATIC_EMBED_FILENAME", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'{}\\n'", ".", "format", "(", "' '", "*", "30", ")", ")", "# \u7559\u767d\u4e4b\u540e\u518d\u6765\u586b\u5199", "\n", "word_count", "=", "0", "\n", "saved_word", "=", "{", "}", "\n", "valid_word_count", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "words_to_words", ")", ")", ":", "\n", "                ", "word", "=", "vocab", ".", "to_word", "(", "i", ")", "\n", "if", "not", "vocab", ".", "_is_word_no_create_entry", "(", "word", ")", ":", "\n", "                    ", "word_count", "+=", "1", "\n", "if", "kwargs", "[", "'lower'", "]", ":", "\n", "                        ", "word", "=", "word", ".", "lower", "(", ")", "\n", "", "if", "word", "in", "saved_word", ":", "\n", "                        ", "continue", "\n", "", "saved_word", "[", "word", "]", "=", "1", "\n", "vec_i", "=", "self", ".", "words_to_words", "[", "i", "]", "\n", "if", "vec_i", "==", "vocab", ".", "unknown_idx", "and", "i", "!=", "vocab", ".", "unknown_idx", ":", "\n", "                        ", "continue", "\n", "", "vec", "=", "self", ".", "embedding", ".", "weight", ".", "data", "[", "vec_i", "]", ".", "tolist", "(", ")", "\n", "vec_str", "=", "' '", ".", "join", "(", "map", "(", "str", ",", "vec", ")", ")", "\n", "f", ".", "write", "(", "f'{word} {vec_str}\\n'", ")", "\n", "valid_word_count", "+=", "1", "\n", "", "", "f", ".", "seek", "(", "0", ")", "\n", "f", ".", "write", "(", "'{} {}'", ".", "format", "(", "valid_word_count", ",", "self", ".", "embedding_dim", ")", ")", "\n", "", "logger", ".", "debug", "(", "f\"StaticEmbedding has been saved to {folder}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.static_embedding.StaticEmbedding.load": [[384, 401], ["core.vocabulary.Vocabulary.load", "core.logger.info", "cls", "os.path.exists", "os.path.join", "open", "json.load", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "folder", ")", ":", "\n", "        ", "\"\"\"\n\n        :param str folder: \u8be5folder\u4e0b\u5e94\u8be5\u6709\u4ee5\u4e0b\u4e09\u4e2a\u6587\u4ef6vocab.txt, static_embed.txt, static_hyper.json\n        :return:\n        \"\"\"", "\n", "for", "name", "in", "[", "VOCAB_FILENAME", ",", "STATIC_EMBED_FILENAME", ",", "STATIC_HYPER_FILENAME", "]", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "name", ")", ")", ",", "f\"{name} not found in {folder}.\"", "\n", "\n", "", "vocab", "=", "Vocabulary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "VOCAB_FILENAME", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "STATIC_HYPER_FILENAME", ")", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "hyper", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "logger", ".", "info", "(", "f\"Load StaticEmbedding from {folder}.\"", ")", "\n", "embed", "=", "cls", "(", "vocab", "=", "vocab", ",", "model_dir_or_name", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "STATIC_EMBED_FILENAME", ")", ",", "**", "hyper", ")", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertEmbedding.__init__": [[67, 121], ["contextual_embedding.ContextualEmbedding.__init__", "kwargs.get", "bert_embedding._BertWordModel", "model_dir_or_name.lower", "len", "core.logger.warning", "warnings.warn", "model_dir_or_name.lower"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["def", "__init__", "(", "self", ",", "vocab", ":", "Vocabulary", ",", "model_dir_or_name", ":", "str", "=", "'en-base-uncased'", ",", "layers", ":", "str", "=", "'-1'", ",", "\n", "pool_method", ":", "str", "=", "'first'", ",", "word_dropout", "=", "0", ",", "dropout", "=", "0", ",", "include_cls_sep", ":", "bool", "=", "False", ",", "\n", "pooled_cls", "=", "True", ",", "requires_grad", ":", "bool", "=", "True", ",", "auto_truncate", ":", "bool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param ~fastNLP.Vocabulary vocab: \u8bcd\u8868\n        :param str model_dir_or_name: \u6a21\u578b\u6240\u5728\u76ee\u5f55\u6216\u8005\u6a21\u578b\u7684\u540d\u79f0\u3002\u5f53\u4f20\u5165\u6a21\u578b\u6240\u5728\u76ee\u5f55\u65f6\uff0c\u76ee\u5f55\u4e2d\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u8bcd\u8868\u6587\u4ef6(\u4ee5.txt\u4f5c\u4e3a\u540e\u7f00\u540d),\n            \u6743\u91cd\u6587\u4ef6(\u4ee5.bin\u4f5c\u4e3a\u6587\u4ef6\u540e\u7f00\u540d), \u914d\u7f6e\u6587\u4ef6(\u4ee5.json\u4f5c\u4e3a\u540e\u7f00\u540d)\u3002\n        :param str layers: \u8f93\u51faembedding\u8868\u793a\u6765\u81ea\u4e8e\u54ea\u4e9b\u5c42\uff0c\u4e0d\u540c\u5c42\u7684\u7ed3\u679c\u6309\u7167layers\u4e2d\u7684\u987a\u5e8f\u5728\u6700\u540e\u4e00\u7ef4concat\u8d77\u6765\u3002\u4ee5','\u9694\u5f00\u5c42\u6570\uff0c\u5c42\u7684\u5e8f\u53f7\u662f\n            \u4ece0\u5f00\u59cb\uff0c\u53ef\u4ee5\u4ee5\u8d1f\u6570\u53bb\u7d22\u5f15\u5012\u6570\u51e0\u5c42\u3002 layer=0\u4e3aembedding\u5c42\uff08\u5305\u62ecwordpiece embedding,\n            position embedding\u548csegment embedding\uff09\n        :param str pool_method: \u56e0\u4e3a\u5728bert\u4e2d\uff0c\u6bcf\u4e2aword\u4f1a\u88ab\u8868\u793a\u4e3a\u591a\u4e2aword pieces, \u5f53\u83b7\u53d6\u4e00\u4e2aword\u7684\u8868\u793a\u7684\u65f6\u5019\uff0c\u600e\u6837\u4ece\u5b83\u7684word pieces\n            \u4e2d\u8ba1\u7b97\u5f97\u5230\u5b83\u5bf9\u5e94\u7684\u8868\u793a\u3002\u652f\u6301 ``last`` , ``first`` , ``avg`` , ``max``\u3002\n        :param float word_dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5c06\u4e00\u4e2a\u8bcd\u66ff\u6362\u4e3aunk\u3002\u8fd9\u6837\u65e2\u53ef\u4ee5\u8bad\u7ec3unk\u4e5f\u662f\u4e00\u5b9a\u7684regularize\u3002\n        :param float dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5bf9embedding\u7684\u8868\u793a\u8fdb\u884cDropout\u30020.1\u5373\u968f\u673a\u5c0610%\u7684\u503c\u7f6e\u4e3a0\u3002\n        :param bool include_cls_sep: bool\uff0c\u5728bert\u8ba1\u7b97\u53e5\u5b50\u7684\u8868\u793a\u7684\u65f6\u5019\uff0c\u9700\u8981\u5728\u524d\u9762\u52a0\u4e0a[CLS]\u548c[SEP], \u662f\u5426\u5728\u7ed3\u679c\u4e2d\u4fdd\u7559\u8fd9\u4e24\u4e2a\u5185\u5bb9\u3002 \u8fd9\u6837\n            \u4f1a\u4f7f\u5f97word embedding\u7684\u7ed3\u679c\u6bd4\u8f93\u5165\u7684\u7ed3\u679c\u957f\u4e24\u4e2atoken\u3002\u5982\u679c\u8be5\u503c\u4e3aTrue\uff0c\u5219\u5728\u4f7f\u7528 :class::StackEmbedding \u53ef\u80fd\u4f1a\u4e0e\u5176\u5b83\u7c7b\u578b\u7684\n            embedding\u957f\u5ea6\u4e0d\u5339\u914d\u3002\n        :param bool pooled_cls: \u8fd4\u56de\u7684[CLS]\u662f\u5426\u4f7f\u7528\u9884\u8bad\u7ec3\u4e2d\u7684BertPool\u6620\u5c04\u4e00\u4e0b\uff0c\u4ec5\u5728include_cls_sep\u65f6\u6709\u6548\u3002\u5982\u679c\u4e0b\u6e38\u4efb\u52a1\u53ea\u53d6[CLS]\u505a\u9884\u6d4b\uff0c\n            \u4e00\u822c\u8be5\u503c\u4e3aTrue\u3002\n        :param bool requires_grad: \u662f\u5426\u9700\u8981gradient\u4ee5\u66f4\u65b0Bert\u7684\u6743\u91cd\u3002\n        :param bool auto_truncate: \u5f53\u53e5\u5b50words\u62c6\u5206\u4e3aword pieces\u957f\u5ea6\u8d85\u8fc7bert\u6700\u5927\u5141\u8bb8\u957f\u5ea6(\u4e00\u822c\u4e3a512), \u81ea\u52a8\u622a\u6389\u62c6\u5206\u540e\u7684\u8d85\u8fc7510\u4e2a\n            word pieces\u540e\u7684\u5185\u5bb9\uff0c\u5e76\u5c06\u7b2c512\u4e2aword piece\u7f6e\u4e3a[SEP]\u3002\u8d85\u8fc7\u957f\u5ea6\u7684\u90e8\u5206\u7684encode\u7ed3\u679c\u76f4\u63a5\u5168\u90e8\u7f6e\u96f6\u3002\u4e00\u822c\u4ec5\u6709\u53ea\u4f7f\u7528[CLS]\n            \u6765\u8fdb\u884c\u5206\u7c7b\u7684\u4efb\u52a1\u5c06auto_truncate\u7f6e\u4e3aTrue\u3002\n        :param kwargs:\n            int min_freq: \u5c0f\u4e8e\u8be5\u6b21\u6570\u7684\u8bcd\u4f1a\u88abunk\u4ee3\u66ff, \u9ed8\u8ba4\u4e3a1\n        \"\"\"", "\n", "super", "(", "BertEmbedding", ",", "self", ")", ".", "__init__", "(", "vocab", ",", "word_dropout", "=", "word_dropout", ",", "dropout", "=", "dropout", ")", "\n", "\n", "if", "word_dropout", ">", "0", ":", "\n", "            ", "assert", "vocab", ".", "unknown", "!=", "None", ",", "\"When word_drop>0, Vocabulary must contain the unknown token.\"", "\n", "\n", "", "if", "model_dir_or_name", ".", "lower", "(", ")", "in", "PRETRAINED_BERT_MODEL_DIR", ":", "\n", "            ", "if", "'cn'", "in", "model_dir_or_name", ".", "lower", "(", ")", "and", "pool_method", "not", "in", "(", "'first'", ",", "'last'", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "\"For Chinese bert, pooled_method should choose from 'first', 'last' in order to achieve\"", "\n", "\" faster speed.\"", ")", "\n", "warnings", ".", "warn", "(", "\"For Chinese bert, pooled_method should choose from 'first', 'last' in order to achieve\"", "\n", "\" faster speed.\"", ")", "\n", "\n", "", "", "self", ".", "_word_sep_index", "=", "-", "100", "\n", "if", "'[SEP]'", "in", "vocab", ":", "\n", "            ", "self", ".", "_word_sep_index", "=", "vocab", "[", "'[SEP]'", "]", "\n", "", "self", ".", "_word_cls_index", "=", "-", "100", "\n", "if", "'[CLS]'", "in", "vocab", ":", "\n", "            ", "self", ".", "_word_cls_index", "=", "vocab", "[", "'CLS'", "]", "\n", "\n", "", "min_freq", "=", "kwargs", ".", "get", "(", "'min_freq'", ",", "1", ")", "\n", "self", ".", "_min_freq", "=", "min_freq", "\n", "self", ".", "model", "=", "_BertWordModel", "(", "model_dir_or_name", "=", "model_dir_or_name", ",", "vocab", "=", "vocab", ",", "layers", "=", "layers", ",", "\n", "pool_method", "=", "pool_method", ",", "include_cls_sep", "=", "include_cls_sep", ",", "\n", "pooled_cls", "=", "pooled_cls", ",", "min_freq", "=", "min_freq", ",", "auto_truncate", "=", "auto_truncate", ")", "\n", "\n", "self", ".", "requires_grad", "=", "requires_grad", "\n", "self", ".", "_embed_size", "=", "len", "(", "self", ".", "model", ".", "layers", ")", "*", "self", ".", "model", ".", "encoder", ".", "hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertEmbedding._delete_model_weights": [[122, 124], ["None"], "methods", ["None"], ["", "def", "_delete_model_weights", "(", "self", ")", ":", "\n", "        ", "del", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertEmbedding.forward": [[125, 141], ["bert_embedding.BertEmbedding.drop_word", "bert_embedding.BertEmbedding._get_sent_reprs", "bert_embedding.BertEmbedding.model", "torch.cat", "bert_embedding.BertEmbedding.dropout", "bert_embedding.BertEmbedding.dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.drop_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.contextual_embedding.ContextualEmbedding._get_sent_reprs", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.model", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        \u8ba1\u7b97words\u7684bert embedding\u8868\u793a\u3002\u8ba1\u7b97\u4e4b\u524d\u4f1a\u5728\u6bcf\u53e5\u8bdd\u7684\u5f00\u59cb\u589e\u52a0[CLS]\u5728\u7ed3\u675f\u589e\u52a0[SEP], \u5e76\u6839\u636einclude_cls_sep\u5224\u65ad\u8981\u4e0d\u8981\n            \u5220\u9664\u8fd9\u4e24\u4e2atoken\u7684\u8868\u793a\u3002\n\n        :param torch.LongTensor words: [batch_size, max_len]\n        :return: torch.FloatTensor. batch_size x max_len x (768*len(self.layers))\n        \"\"\"", "\n", "words", "=", "self", ".", "drop_word", "(", "words", ")", "\n", "outputs", "=", "self", ".", "_get_sent_reprs", "(", "words", ")", "\n", "if", "outputs", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "dropout", "(", "outputs", ")", "\n", "", "outputs", "=", "self", ".", "model", "(", "words", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "[", "*", "outputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "self", ".", "dropout", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertEmbedding.drop_word": [[142, 163], ["torch.no_grad", "torch.full_like", "torch.bernoulli().eq", "words.masked_fill.masked_fill.ne", "words.masked_fill.ne.__and__", "words.masked_fill.masked_fill.masked_fill", "words.masked_fill.masked_fill.ne", "mask.__and__.__and__.__and__", "words.masked_fill.masked_fill.ne", "mask.__and__.__and__.__and__", "torch.bernoulli"], "methods", ["None"], ["", "def", "drop_word", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        \u6309\u7167\u8bbe\u5b9a\u968f\u673a\u5c06words\u8bbe\u7f6e\u4e3aunknown_index\u3002\n\n        :param torch.LongTensor words: batch_size x max_len\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "word_dropout", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "mask", "=", "torch", ".", "full_like", "(", "words", ",", "fill_value", "=", "self", ".", "word_dropout", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "words", ".", "device", ")", "\n", "mask", "=", "torch", ".", "bernoulli", "(", "mask", ")", ".", "eq", "(", "1", ")", "# dropout_word\u8d8a\u5927\uff0c\u8d8a\u591a\u4f4d\u7f6e\u4e3a1", "\n", "pad_mask", "=", "words", ".", "ne", "(", "self", ".", "_word_pad_index", ")", "\n", "mask", "=", "pad_mask", ".", "__and__", "(", "mask", ")", "# pad\u7684\u4f4d\u7f6e\u4e0d\u4e3aunk", "\n", "if", "self", ".", "_word_sep_index", "!=", "-", "100", ":", "\n", "                    ", "not_sep_mask", "=", "words", ".", "ne", "(", "self", ".", "_word_sep_index", ")", "\n", "mask", "=", "mask", ".", "__and__", "(", "not_sep_mask", ")", "\n", "", "if", "self", ".", "_word_cls_index", "!=", "-", "100", ":", "\n", "                    ", "not_cls_mask", "=", "words", ".", "ne", "(", "self", ".", "_word_cls_index", ")", "\n", "mask", "=", "mask", ".", "__and__", "(", "not_cls_mask", ")", "\n", "", "words", "=", "words", ".", "masked_fill", "(", "mask", ",", "self", ".", "_word_unk_index", ")", "\n", "", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertEmbedding.save": [[164, 193], ["os.makedirs", "bert_embedding.BertEmbedding.get_word_vocab().save", "bool", "os.makedirs", "bert_embedding.BertEmbedding.model.save", "core.logger.debug", "os.path.join", "map", "open", "json.dump", "os.path.join", "os.path.join", "bert_embedding.BertEmbedding.get_word_vocab", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.get_word_vocab"], ["", "def", "save", "(", "self", ",", "folder", ")", ":", "\n", "        ", "\"\"\"\n        \u5c06embedding\u4fdd\u5b58\u5230folder\u8fd9\u4e2a\u76ee\u5f55\u4e0b\uff0c\u5c06\u4f1a\u4fdd\u5b58\u4e09\u4e2a\u6587\u4ef6vocab.txt, bert_embed_hyper.txt, bert_embed/, \u5176\u4e2dbert_embed\u4e0b\u5305\u542b\n            config.json,pytorch_model.bin,vocab.txt\u4e09\u4e2a\u6587\u4ef6(\u8be5folder\u4e0b\u7684\u6570\u636e\u4e5f\u53ef\u4ee5\u76f4\u63a5\u88abBERTModel\u8bfb\u53d6)\n\n        :param str folder:\n        :return:\n        \"\"\"", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "get_word_vocab", "(", ")", ".", "save", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "VOCAB_NAME", ")", ")", "\n", "\n", "hyper", "=", "{", "}", "\n", "hyper", "[", "'min_freq'", "]", "=", "self", ".", "_min_freq", "\n", "hyper", "[", "'layers'", "]", "=", "','", ".", "join", "(", "map", "(", "str", ",", "self", ".", "model", ".", "layers", ")", ")", "\n", "hyper", "[", "'pool_method'", "]", "=", "self", ".", "model", ".", "pool_method", "\n", "hyper", "[", "'dropout'", "]", "=", "self", ".", "dropout_layer", ".", "p", "\n", "hyper", "[", "'word_dropout'", "]", "=", "self", ".", "word_dropout", "\n", "hyper", "[", "'include_cls_sep'", "]", "=", "self", ".", "model", ".", "include_cls_sep", "\n", "hyper", "[", "'pooled_cls'", "]", "=", "self", ".", "model", ".", "pooled_cls", "\n", "hyper", "[", "'auto_truncate'", "]", "=", "self", ".", "model", ".", "auto_truncate", "\n", "hyper", "[", "'requires_grad'", "]", "=", "bool", "(", "self", ".", "requires_grad", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "BERT_EMBED_HYPER", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "hyper", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "BERT_EMBED_FOLDER", ")", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "model", ".", "save", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "BERT_EMBED_FOLDER", ")", ")", "\n", "logger", ".", "debug", "(", "f\"BERTEmbedding has been saved in {folder}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertEmbedding.load": [[194, 214], ["core.vocabulary.Vocabulary.load", "os.path.join", "cls", "os.path.exists", "os.path.join", "open", "json.load", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "folder", ")", ":", "\n", "        ", "\"\"\"\n        \u7ed9\u5b9a\u4e00\u4e2afolder, \u9700\u8981\u5305\u542b\u4ee5\u4e0b\u4e09\u4e2a\u5185\u5bb9vocab.txt, bert_embed_hyper.txt, bert_embed/\n\n        :param str folder:\n        :return:\n        \"\"\"", "\n", "for", "name", "in", "[", "VOCAB_NAME", ",", "BERT_EMBED_FOLDER", ",", "BERT_EMBED_HYPER", "]", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "name", ")", ")", ",", "f\"{name} not found in {folder}.\"", "\n", "\n", "", "vocab", "=", "Vocabulary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "VOCAB_NAME", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "BERT_EMBED_HYPER", ")", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "hyper", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "model_dir_or_name", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "BERT_EMBED_FOLDER", ")", ")", "\n", "\n", "bert_embed", "=", "cls", "(", "vocab", "=", "vocab", ",", "model_dir_or_name", "=", "model_dir_or_name", ",", "**", "hyper", ")", "\n", "return", "bert_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertWordPieceEncoder.__init__": [[234, 257], ["torch.nn.Module.__init__", "bert_embedding._BertWordPieceModel", "torch.nn.Dropout", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "model_dir_or_name", ":", "str", "=", "'en-base-uncased'", ",", "layers", ":", "str", "=", "'-1'", ",", "pooled_cls", ":", "bool", "=", "False", ",", "\n", "word_dropout", "=", "0", ",", "dropout", "=", "0", ",", "requires_grad", ":", "bool", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param str model_dir_or_name: \u6a21\u578b\u6240\u5728\u76ee\u5f55\u6216\u8005\u6a21\u578b\u7684\u540d\u79f0\u3002\u9ed8\u8ba4\u503c\u4e3a ``en-base-uncased``\n        :param str layers: \u6700\u7ec8\u7ed3\u679c\u4e2d\u7684\u8868\u793a\u3002\u4ee5','\u9694\u5f00\u5c42\u6570\uff0c\u53ef\u4ee5\u4ee5\u8d1f\u6570\u53bb\u7d22\u5f15\u5012\u6570\u51e0\u5c42\u3002layer=0\u4e3aembedding\u5c42\uff08\u5305\u62ecwordpiece embedding,\n                position embedding\u548csegment embedding\uff09\n        :param bool pooled_cls: \u8fd4\u56de\u7684\u53e5\u5b50\u5f00\u5934\u7684[CLS]\u662f\u5426\u4f7f\u7528\u9884\u8bad\u7ec3\u4e2d\u7684BertPool\u6620\u5c04\u4e00\u4e0b\u3002\u5982\u679c\u4e0b\u6e38\u4efb\u52a1\u53d6[CLS]\u505a\u9884\u6d4b\uff0c\u4e00\u822c\u8be5\u503c\u4e3aTrue\u3002\n        :param float word_dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5c06\u4e00\u4e2a\u8bcd\u66ff\u6362\u4e3aunk\u3002\u8fd9\u6837\u65e2\u53ef\u4ee5\u8bad\u7ec3unk\u4e5f\u662f\u4e00\u5b9a\u7684regularize\u3002\n        :param float dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5bf9embedding\u7684\u8868\u793a\u8fdb\u884cDropout\u30020.1\u5373\u968f\u673a\u5c0610%\u7684\u503c\u7f6e\u4e3a0\u3002\n        :param bool requires_grad: \u662f\u5426\u9700\u8981gradient\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "_BertWordPieceModel", "(", "model_dir_or_name", "=", "model_dir_or_name", ",", "layers", "=", "layers", ",", "pooled_cls", "=", "pooled_cls", ")", "\n", "self", ".", "_sep_index", "=", "self", ".", "model", ".", "_sep_index", "\n", "self", ".", "_cls_index", "=", "self", ".", "model", ".", "_cls_index", "\n", "self", ".", "_wordpiece_pad_index", "=", "self", ".", "model", ".", "_wordpiece_pad_index", "\n", "self", ".", "_wordpiece_unk_index", "=", "self", ".", "model", ".", "_wordpiece_unknown_index", "\n", "self", ".", "_embed_size", "=", "len", "(", "self", ".", "model", ".", "layers", ")", "*", "self", ".", "model", ".", "encoder", ".", "hidden_size", "\n", "self", ".", "requires_grad", "=", "requires_grad", "\n", "self", ".", "word_dropout", "=", "word_dropout", "\n", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertWordPieceEncoder.embed_size": [[258, 261], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "embed_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embed_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertWordPieceEncoder.embedding_dim": [[262, 265], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "embedding_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embed_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertWordPieceEncoder.num_embedding": [[266, 269], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_embedding", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "encoder", ".", "config", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertWordPieceEncoder.index_datasets": [[270, 282], ["bert_embedding.BertWordPieceEncoder.model.index_datasets"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding._GPT2WordPieceModel.index_datasets"], ["", "def", "index_datasets", "(", "self", ",", "*", "datasets", ",", "field_name", ",", "add_cls_sep", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f7f\u7528bert\u7684tokenizer\u65b0\u751f\u6210word_pieces\u5217\u52a0\u5165\u5230datasets\u4e2d\uff0c\u5e76\u5c06\u4ed6\u4eec\u8bbe\u7f6e\u4e3ainput,\u4e14\u5c06word_pieces\u8fd9\u4e00\u5217\u7684pad value\u8bbe\u7f6e\u4e3a\u4e86\n        bert\u7684pad value\u3002\n\n        :param ~fastNLP.DataSet datasets: DataSet\u5bf9\u8c61\n        :param str field_name: \u57fa\u4e8e\u54ea\u4e00\u5217\u7684\u5185\u5bb9\u751f\u6210word_pieces\u5217\u3002\u8fd9\u4e00\u5217\u4e2d\u6bcf\u4e2a\u6570\u636e\u5e94\u8be5\u662fList[str]\u7684\u5f62\u5f0f\u3002\n        :param bool add_cls_sep: \u5982\u679c\u9996\u5c3e\u4e0d\u662f[CLS]\u4e0e[SEP]\u4f1a\u5728\u9996\u5c3e\u989d\u5916\u52a0\u5165[CLS]\u4e0e[SEP]\u3002\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "model", ".", "index_datasets", "(", "*", "datasets", ",", "field_name", "=", "field_name", ",", "add_cls_sep", "=", "add_cls_sep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertWordPieceEncoder.forward": [[283, 305], ["bert_embedding.BertWordPieceEncoder.drop_word", "bert_embedding.BertWordPieceEncoder.model", "torch.cat", "bert_embedding.BertWordPieceEncoder.dropout_layer", "torch.no_grad", "bert_embedding.BertWordPieceEncoder.eq", "bert_embedding.BertWordPieceEncoder.eq.long().flip().cumsum().flip", "word_pieces.eq.long().flip().cumsum().flip.fmod", "token_type_ids[].item", "token_type_ids.eq().long.eq().long.eq().long", "bert_embedding.BertWordPieceEncoder.eq.long().flip().cumsum", "token_type_ids.eq().long.eq().long.eq", "bert_embedding.BertWordPieceEncoder.eq.long().flip", "bert_embedding.BertWordPieceEncoder.eq.long"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.drop_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.model"], ["", "def", "forward", "(", "self", ",", "word_pieces", ",", "token_type_ids", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u8ba1\u7b97words\u7684bert embedding\u8868\u793a\u3002\u4f20\u5165\u7684words\u4e2d\u5e94\u8be5\u81ea\u884c\u5305\u542b[CLS]\u4e0e[SEP]\u7684tag\u3002\n\n        :param words: batch_size x max_len\n        :param token_type_ids: batch_size x max_len, \u7528\u4e8e\u533a\u5206\u524d\u4e00\u53e5\u548c\u540e\u4e00\u53e5\u8bdd. \u5982\u679c\u4e0d\u4f20\u5165\uff0c\u5219\u81ea\u52a8\u751f\u6210(\u5927\u90e8\u5206\u60c5\u51b5\uff0c\u90fd\u4e0d\u9700\u8981\u8f93\u5165),\n            \u7b2c\u4e00\u4e2a[SEP]\u53ca\u4e4b\u524d\u4e3a0, \u7b2c\u4e8c\u4e2a[SEP]\u53ca\u5230\u7b2c\u4e00\u4e2a[SEP]\u4e4b\u95f4\u4e3a1; \u7b2c\u4e09\u4e2a[SEP]\u53ca\u5230\u7b2c\u4e8c\u4e2a[SEP]\u4e4b\u95f4\u4e3a0\uff0c\u4f9d\u6b21\u5f80\u540e\u63a8\u3002\n        :return: torch.FloatTensor. batch_size x max_len x (768*len(self.layers))\n        \"\"\"", "\n", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "sep_mask", "=", "word_pieces", ".", "eq", "(", "self", ".", "_sep_index", ")", "# batch_size x max_len", "\n", "sep_mask_cumsum", "=", "sep_mask", ".", "long", "(", ")", ".", "flip", "(", "dims", "=", "[", "-", "1", "]", ")", ".", "cumsum", "(", "dim", "=", "-", "1", ")", ".", "flip", "(", "dims", "=", "[", "-", "1", "]", ")", "\n", "token_type_ids", "=", "sep_mask_cumsum", ".", "fmod", "(", "2", ")", "\n", "if", "token_type_ids", "[", "0", ",", "0", "]", ".", "item", "(", ")", ":", "# \u5982\u679c\u5f00\u5934\u662f\u5947\u6570\uff0c\u5219\u9700\u8981flip\u4e00\u4e0b\u7ed3\u679c\uff0c\u56e0\u4e3a\u9700\u8981\u4fdd\u8bc1\u5f00\u5934\u4e3a0", "\n", "                    ", "token_type_ids", "=", "token_type_ids", ".", "eq", "(", "0", ")", ".", "long", "(", ")", "\n", "\n", "", "", "", "word_pieces", "=", "self", ".", "drop_word", "(", "word_pieces", ")", "\n", "outputs", "=", "self", ".", "model", "(", "word_pieces", ",", "token_type_ids", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "[", "*", "outputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "self", ".", "dropout_layer", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertWordPieceEncoder.drop_word": [[306, 324], ["torch.no_grad", "words.masked_fill.masked_fill.ne", "words.masked_fill.masked_fill.ne", "words.masked_fill.ne.__and__", "torch.full_like", "torch.bernoulli().eq", "words.masked_fill.masked_fill.ne", "words.masked_fill.ne.__and__().__and__", "words.masked_fill.masked_fill.masked_fill", "torch.bernoulli", "words.masked_fill.ne.__and__"], "methods", ["None"], ["", "def", "drop_word", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        \u6309\u7167\u8bbe\u5b9a\u968f\u673a\u5c06words\u8bbe\u7f6e\u4e3aunknown_index\u3002\n\n        :param torch.LongTensor words: batch_size x max_len\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "word_dropout", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "not_sep_mask", "=", "words", ".", "ne", "(", "self", ".", "_sep_index", ")", "\n", "not_cls_mask", "=", "words", ".", "ne", "(", "self", ".", "_cls_index", ")", "\n", "replaceable_mask", "=", "not_sep_mask", ".", "__and__", "(", "not_cls_mask", ")", "\n", "mask", "=", "torch", ".", "full_like", "(", "words", ",", "fill_value", "=", "self", ".", "word_dropout", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "words", ".", "device", ")", "\n", "mask", "=", "torch", ".", "bernoulli", "(", "mask", ")", ".", "eq", "(", "1", ")", "# dropout_word\u8d8a\u5927\uff0c\u8d8a\u591a\u4f4d\u7f6e\u4e3a1", "\n", "pad_mask", "=", "words", ".", "ne", "(", "self", ".", "_wordpiece_pad_index", ")", "\n", "mask", "=", "pad_mask", ".", "__and__", "(", "mask", ")", ".", "__and__", "(", "replaceable_mask", ")", "# pad\u7684\u4f4d\u7f6e\u4e0d\u4e3aunk", "\n", "words", "=", "words", ".", "masked_fill", "(", "mask", ",", "self", ".", "_wordpiece_unk_index", ")", "\n", "", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertWordPieceEncoder.save": [[325, 348], ["os.makedirs", "bool", "os.makedirs", "bert_embedding.BertWordPieceEncoder.model.save", "core.logger.debug", "map", "open", "json.dump", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save"], ["", "def", "save", "(", "self", ",", "folder", ")", ":", "\n", "        ", "\"\"\"\n        \u4f1a\u5728folder\u4e0b\u521b\u5efa\u4e24\u4e2a\u6587\u4ef6bert_encoder_hyper.json\u4e0ebert_encoder/, bert_encoder\u4e0b\u5305\u542b\u4e09\u4e2a\u6587\u4ef6config.json,\n            pytorch_model.bin,vocab.txt\u4e09\u4e2a\u6587\u4ef6(\u8be5folder\u4e0b\u7684\u6570\u636e\u4e5f\u53ef\u4ee5\u76f4\u63a5\u88abBERTModel\u8bfb\u53d6)\n\n        :param str folder:\n        :return:\n        \"\"\"", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "hyper", "=", "{", "}", "\n", "hyper", "[", "'layers'", "]", "=", "','", ".", "join", "(", "map", "(", "str", ",", "self", ".", "model", ".", "layers", ")", ")", "\n", "hyper", "[", "'dropout'", "]", "=", "self", ".", "dropout_layer", ".", "p", "\n", "hyper", "[", "'word_dropout'", "]", "=", "self", ".", "word_dropout", "\n", "hyper", "[", "'pooled_cls'", "]", "=", "self", ".", "model", ".", "pooled_cls", "\n", "hyper", "[", "'requires_grad'", "]", "=", "bool", "(", "self", ".", "requires_grad", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "BERT_ENCODER_HYPER", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "hyper", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "BERT_ENCODER_FOLDER", ")", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "model", ".", "save", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "BERT_ENCODER_FOLDER", ")", ")", "\n", "logger", ".", "debug", "(", "f\"BertWordPieceEncoder has been saved in {folder}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding.BertWordPieceEncoder.load": [[349, 367], ["os.path.join", "cls", "os.path.exists", "open", "json.load", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "folder", ")", ":", "\n", "        ", "\"\"\"\n        \u4f1a\u5728folder\u4e0b\u521b\u5efa\u4e24\u4e2a\u6587\u4ef6bert_encoder_hyper.json\u4e0ebert_encoder/, bert_encoder\u4e0b\u5305\u542b\u4e09\u4e2a\u6587\u4ef6\n\n        :param folder:\n        :return:\n        \"\"\"", "\n", "for", "name", "in", "[", "BERT_ENCODER_HYPER", ",", "BERT_ENCODER_FOLDER", "]", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "name", ")", ")", ",", "f\"{name} not found in {folder}.\"", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "BERT_ENCODER_HYPER", ")", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "hyper", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "model_dir_or_name", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "BERT_ENCODER_FOLDER", ")", ")", "\n", "\n", "bert_encoder", "=", "cls", "(", "model_dir_or_name", "=", "model_dir_or_name", ",", "**", "hyper", ")", "\n", "return", "bert_encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding._BertWordModel.__init__": [[370, 422], ["torch.nn.Module.__init__", "modules.tokenizer.BertTokenizer.from_pretrained", "modules.encoder.bert.BertModel.from_pretrained", "len", "isinstance", "numpy.array", "bert_embedding._BertWordModel.register_buffer", "core.logger.debug", "isinstance", "bert_embedding._BertWordModel.tokenzier.wordpiece_tokenizer.tokenize", "bert_embedding._BertWordModel.tokenzier.convert_tokens_to_ids", "word_to_wordpieces.append", "word_pieces_lengths.append", "torch.LongTensor", "int", "list", "TypeError", "len", "map", "layers.split"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["    ", "def", "__init__", "(", "self", ",", "model_dir_or_name", ":", "str", ",", "vocab", ":", "Vocabulary", ",", "layers", ":", "str", "=", "'-1'", ",", "pool_method", ":", "str", "=", "'first'", ",", "\n", "include_cls_sep", ":", "bool", "=", "False", ",", "pooled_cls", ":", "bool", "=", "False", ",", "auto_truncate", ":", "bool", "=", "False", ",", "min_freq", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tokenzier", "=", "BertTokenizer", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "self", ".", "encoder", "=", "BertModel", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "self", ".", "_max_position_embeddings", "=", "self", ".", "encoder", ".", "config", ".", "max_position_embeddings", "\n", "#  \u68c0\u67e5encoder_layer_number\u662f\u5426\u5408\u7406", "\n", "encoder_layer_number", "=", "len", "(", "self", ".", "encoder", ".", "encoder", ".", "layer", ")", "\n", "if", "isinstance", "(", "layers", ",", "list", ")", ":", "\n", "            ", "self", ".", "layers", "=", "[", "int", "(", "l", ")", "for", "l", "in", "layers", "]", "\n", "", "elif", "isinstance", "(", "layers", ",", "str", ")", ":", "\n", "            ", "self", ".", "layers", "=", "list", "(", "map", "(", "int", ",", "layers", ".", "split", "(", "','", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"`layers` only supports str or list[int]\"", ")", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "layer", "<", "0", ":", "\n", "                ", "assert", "-", "layer", "<=", "encoder_layer_number", ",", "f\"The layer index:{layer} is out of scope for \"", "f\"a bert model with {encoder_layer_number} layers.\"", "\n", "", "else", ":", "\n", "                ", "assert", "layer", "<=", "encoder_layer_number", ",", "f\"The layer index:{layer} is out of scope for \"", "f\"a bert model with {encoder_layer_number} layers.\"", "\n", "\n", "", "", "assert", "pool_method", "in", "(", "'avg'", ",", "'max'", ",", "'first'", ",", "'last'", ")", "\n", "self", ".", "pool_method", "=", "pool_method", "\n", "self", ".", "include_cls_sep", "=", "include_cls_sep", "\n", "self", ".", "pooled_cls", "=", "pooled_cls", "\n", "self", ".", "auto_truncate", "=", "auto_truncate", "\n", "\n", "# \u5c06\u6240\u6709vocab\u4e2dword\u7684wordpiece\u8ba1\u7b97\u51fa\u6765, \u9700\u8981\u989d\u5916\u8003\u8651[CLS]\u548c[SEP]", "\n", "self", ".", "_has_sep_in_vocab", "=", "'[SEP]'", "in", "vocab", "# \u7528\u6765\u5224\u65ad\u4f20\u5165\u7684\u6570\u636e\u662f\u5426\u9700\u8981\u751f\u6210token_ids", "\n", "\n", "word_to_wordpieces", "=", "[", "]", "\n", "word_pieces_lengths", "=", "[", "]", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "            ", "if", "index", "==", "vocab", ".", "padding_idx", ":", "# pad\u662f\u4e2a\u7279\u6b8a\u7684\u7b26\u53f7", "\n", "                ", "word", "=", "'[PAD]'", "\n", "", "elif", "index", "==", "vocab", ".", "unknown_idx", ":", "\n", "                ", "word", "=", "'[UNK]'", "\n", "", "elif", "vocab", ".", "word_count", "[", "word", "]", "<", "min_freq", ":", "\n", "                ", "word", "=", "'[UNK]'", "\n", "", "word_pieces", "=", "self", ".", "tokenzier", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "word", ")", "\n", "word_pieces", "=", "self", ".", "tokenzier", ".", "convert_tokens_to_ids", "(", "word_pieces", ")", "\n", "word_to_wordpieces", ".", "append", "(", "word_pieces", ")", "\n", "word_pieces_lengths", ".", "append", "(", "len", "(", "word_pieces", ")", ")", "\n", "", "self", ".", "_cls_index", "=", "self", ".", "tokenzier", ".", "vocab", "[", "'[CLS]'", "]", "\n", "self", ".", "_sep_index", "=", "self", ".", "tokenzier", ".", "vocab", "[", "'[SEP]'", "]", "\n", "self", ".", "_word_pad_index", "=", "vocab", ".", "padding_idx", "\n", "self", ".", "_wordpiece_pad_index", "=", "self", ".", "tokenzier", ".", "vocab", "[", "'[PAD]'", "]", "# \u9700\u8981\u7528\u4e8e\u751f\u6210word_piece", "\n", "self", ".", "word_to_wordpieces", "=", "np", ".", "array", "(", "word_to_wordpieces", ")", "\n", "self", ".", "register_buffer", "(", "'word_pieces_lengths'", ",", "torch", ".", "LongTensor", "(", "word_pieces_lengths", ")", ")", "\n", "logger", ".", "debug", "(", "\"Successfully generate word pieces.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding._BertWordModel.forward": [[423, 537], ["bert_embedding._BertWordModel.encoder", "bert_embedding._BertWordModel.new_zeros", "bert_embedding._BertWordModel.cumsum", "enumerate", "torch.no_grad", "words.size", "words.ne", "words.ne.sum", "bert_embedding._BertWordModel.word_pieces_lengths[].masked_fill", "bert_embedding._BertWordModel.sum", "bert_embedding._BertWordModel.sum().max().item", "words.new_full", "torch.zeros_like", "words.cpu().numpy", "range", "word_pieces[].fill_", "torch.arange().to", "bert_outputs[].new_zeros", "bert_outputs[].new_zeros", "bert_embedding._BertWordModel.new_zeros.masked_fill_", "batch_indexes[].expand", "words.ne.eq", "list", "torch.LongTensor", "attn_masks[].fill_", "words.new_full.eq().long", "words.new_full.eq().long.flip().cumsum().flip", "word_pieces.eq().long.flip().cumsum().flip.fmod", "token_type_ids[].item", "torch.zeros_like", "len", "bert_outputs[].size", "len", "bert_outputs[].size", "bert_embedding._BertWordModel.new_zeros.ge", "bert_embedding._BertWordModel.new_zeros.masked_fill_", "batch_indexes[].expand", "torch.cat().contiguous.size", "torch.cat().contiguous.new_zeros", "torch.cat().contiguous", "tmp.masked_fill.masked_fill.masked_fill", "bert_embedding._BertWordModel.sum().max", "word_pieces_lengths.masked_fill.masked_fill.masked_fill", "RuntimeError", "min", "words.cpu", "itertools.chain", "torch.arange", "token_type_ids.eq().long.eq().long.eq().long", "bert_embedding._BertWordModel.new_zeros.size", "bert_embedding._BertWordModel.new_zeros.ge", "torch.cat().contiguous.size", "word_mask[].eq", "tmp.masked_fill.masked_fill.masked_fill", "len", "words.new_full.eq", "words.new_full.eq().long.flip().cumsum", "words.ne.sum.max", "bert_embedding._BertWordModel.new_zeros.size", "torch.cat", "word_mask[].eq", "range", "range", "bert_embedding._BertWordModel.sum", "token_type_ids.eq().long.eq().long.eq", "range", "range", "words.new_full.eq().long.flip", "bert_embedding._BertWordModel.new_zeros.size", "torch.max", "torch.mean", "len", "words.ne.sum.max", "bert_embedding._BertWordModel.new_zeros.size", "bert_embedding._BertWordModel.new_zeros.size", "bert_embedding._BertWordModel.new_zeros.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param words: torch.LongTensor, batch_size x max_len\n        :return: num_layers x batch_size x max_len x hidden_size\u6216\u8005num_layers x batch_size x (max_len+2) x hidden_size\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_size", ",", "max_word_len", "=", "words", ".", "size", "(", ")", "\n", "word_mask", "=", "words", ".", "ne", "(", "self", ".", "_word_pad_index", ")", "# \u4e3a1\u7684\u5730\u65b9\u6709word", "\n", "seq_len", "=", "word_mask", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "batch_word_pieces_length", "=", "self", ".", "word_pieces_lengths", "[", "words", "]", ".", "masked_fill", "(", "word_mask", ".", "eq", "(", "False", ")", ",", "\n", "0", ")", "# batch_size x max_len", "\n", "word_pieces_lengths", "=", "batch_word_pieces_length", ".", "sum", "(", "dim", "=", "-", "1", ")", "# batch_size", "\n", "max_word_piece_length", "=", "batch_word_pieces_length", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "max", "(", ")", ".", "item", "(", ")", "# \u8868\u793aword piece\u7684\u957f\u5ea6(\u5305\u62ecpadding)", "\n", "if", "max_word_piece_length", "+", "2", ">", "self", ".", "_max_position_embeddings", ":", "\n", "                ", "if", "self", ".", "auto_truncate", ":", "\n", "                    ", "word_pieces_lengths", "=", "word_pieces_lengths", ".", "masked_fill", "(", "\n", "word_pieces_lengths", "+", "2", ">", "self", ".", "_max_position_embeddings", ",", "\n", "self", ".", "_max_position_embeddings", "-", "2", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "\"After split words into word pieces, the lengths of word pieces are longer than the \"", "\n", "f\"maximum allowed sequence length:{self._max_position_embeddings} of bert. You can set \"", "\n", "f\"`auto_truncate=True` for BertEmbedding to automatically truncate overlong input.\"", ")", "\n", "\n", "# +2\u662f\u7531\u4e8e\u9700\u8981\u52a0\u5165[CLS]\u4e0e[SEP]", "\n", "", "", "word_pieces", "=", "words", ".", "new_full", "(", "(", "batch_size", ",", "min", "(", "max_word_piece_length", "+", "2", ",", "self", ".", "_max_position_embeddings", ")", ")", ",", "\n", "fill_value", "=", "self", ".", "_wordpiece_pad_index", ")", "\n", "attn_masks", "=", "torch", ".", "zeros_like", "(", "word_pieces", ")", "\n", "# 1. \u83b7\u53d6words\u7684word_pieces\u7684id\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684span\u8303\u56f4", "\n", "word_indexes", "=", "words", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "word_pieces_i", "=", "list", "(", "chain", "(", "*", "self", ".", "word_to_wordpieces", "[", "word_indexes", "[", "i", ",", ":", "seq_len", "[", "i", "]", "]", "]", ")", ")", "\n", "if", "self", ".", "auto_truncate", "and", "len", "(", "word_pieces_i", ")", ">", "self", ".", "_max_position_embeddings", "-", "2", ":", "\n", "                    ", "word_pieces_i", "=", "word_pieces_i", "[", ":", "self", ".", "_max_position_embeddings", "-", "2", "]", "\n", "", "word_pieces", "[", "i", ",", "1", ":", "word_pieces_lengths", "[", "i", "]", "+", "1", "]", "=", "torch", ".", "LongTensor", "(", "word_pieces_i", ")", "\n", "attn_masks", "[", "i", ",", ":", "word_pieces_lengths", "[", "i", "]", "+", "2", "]", ".", "fill_", "(", "1", ")", "\n", "# \u6dfb\u52a0[cls]\u548c[sep]", "\n", "", "word_pieces", "[", ":", ",", "0", "]", ".", "fill_", "(", "self", ".", "_cls_index", ")", "\n", "batch_indexes", "=", "torch", ".", "arange", "(", "batch_size", ")", ".", "to", "(", "words", ")", "\n", "word_pieces", "[", "batch_indexes", ",", "word_pieces_lengths", "+", "1", "]", "=", "self", ".", "_sep_index", "\n", "if", "self", ".", "_has_sep_in_vocab", ":", "# \u4f46[SEP]\u5728vocab\u4e2d\u51fa\u73b0\u5e94\u8be5\u624d\u4f1a\u9700\u8981token_ids", "\n", "                ", "sep_mask", "=", "word_pieces", ".", "eq", "(", "self", ".", "_sep_index", ")", ".", "long", "(", ")", "# batch_size x max_len", "\n", "sep_mask_cumsum", "=", "sep_mask", ".", "flip", "(", "dims", "=", "[", "-", "1", "]", ")", ".", "cumsum", "(", "dim", "=", "-", "1", ")", ".", "flip", "(", "dims", "=", "[", "-", "1", "]", ")", "\n", "token_type_ids", "=", "sep_mask_cumsum", ".", "fmod", "(", "2", ")", "\n", "if", "token_type_ids", "[", "0", ",", "0", "]", ".", "item", "(", ")", ":", "# \u5982\u679c\u5f00\u5934\u662f\u5947\u6570\uff0c\u5219\u9700\u8981flip\u4e00\u4e0b\u7ed3\u679c\uff0c\u56e0\u4e3a\u9700\u8981\u4fdd\u8bc1\u5f00\u5934\u4e3a0", "\n", "                    ", "token_type_ids", "=", "token_type_ids", ".", "eq", "(", "0", ")", ".", "long", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "word_pieces", ")", "\n", "# 2. \u83b7\u53d6hidden\u7684\u7ed3\u679c\uff0c\u6839\u636eword_pieces\u8fdb\u884c\u5bf9\u5e94\u7684pool\u8ba1\u7b97", "\n", "# all_outputs: [batch_size x max_len x hidden_size, batch_size x max_len x hidden_size, ...]", "\n", "", "", "bert_outputs", ",", "pooled_cls", "=", "self", ".", "encoder", "(", "word_pieces", ",", "token_type_ids", "=", "token_type_ids", ",", "attention_mask", "=", "attn_masks", ",", "\n", "output_all_encoded_layers", "=", "True", ")", "\n", "# output_layers = [self.layers]  # len(self.layers) x batch_size x real_word_piece_length x hidden_size", "\n", "\n", "if", "self", ".", "include_cls_sep", ":", "\n", "            ", "s_shift", "=", "1", "\n", "outputs", "=", "bert_outputs", "[", "-", "1", "]", ".", "new_zeros", "(", "len", "(", "self", ".", "layers", ")", ",", "batch_size", ",", "max_word_len", "+", "2", ",", "\n", "bert_outputs", "[", "-", "1", "]", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "s_shift", "=", "0", "\n", "outputs", "=", "bert_outputs", "[", "-", "1", "]", ".", "new_zeros", "(", "len", "(", "self", ".", "layers", ")", ",", "batch_size", ",", "max_word_len", ",", "\n", "bert_outputs", "[", "-", "1", "]", ".", "size", "(", "-", "1", ")", ")", "\n", "", "batch_word_pieces_cum_length", "=", "batch_word_pieces_length", ".", "new_zeros", "(", "batch_size", ",", "max_word_len", "+", "1", ")", "\n", "batch_word_pieces_cum_length", "[", ":", ",", "1", ":", "]", "=", "batch_word_pieces_length", ".", "cumsum", "(", "dim", "=", "-", "1", ")", "# batch_size x max_len", "\n", "\n", "if", "self", ".", "pool_method", "==", "'first'", ":", "\n", "            ", "batch_word_pieces_cum_length", "=", "batch_word_pieces_cum_length", "[", ":", ",", ":", "seq_len", ".", "max", "(", ")", "]", "\n", "batch_word_pieces_cum_length", ".", "masked_fill_", "(", "batch_word_pieces_cum_length", ".", "ge", "(", "max_word_piece_length", ")", ",", "0", ")", "\n", "_batch_indexes", "=", "batch_indexes", "[", ":", ",", "None", "]", ".", "expand", "(", "(", "batch_size", ",", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "self", ".", "pool_method", "==", "'last'", ":", "\n", "            ", "batch_word_pieces_cum_length", "=", "batch_word_pieces_cum_length", "[", ":", ",", "1", ":", "seq_len", ".", "max", "(", ")", "+", "1", "]", "-", "1", "\n", "batch_word_pieces_cum_length", ".", "masked_fill_", "(", "batch_word_pieces_cum_length", ".", "ge", "(", "max_word_piece_length", ")", ",", "0", ")", "\n", "_batch_indexes", "=", "batch_indexes", "[", ":", ",", "None", "]", ".", "expand", "(", "(", "batch_size", ",", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "", "for", "l_index", ",", "l", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "output_layer", "=", "bert_outputs", "[", "l", "]", "\n", "real_word_piece_length", "=", "output_layer", ".", "size", "(", "1", ")", "-", "2", "\n", "if", "max_word_piece_length", ">", "real_word_piece_length", ":", "# \u5982\u679c\u5b9e\u9645\u4e0a\u662f\u622a\u53d6\u51fa\u6765\u7684", "\n", "                ", "paddings", "=", "output_layer", ".", "new_zeros", "(", "batch_size", ",", "\n", "max_word_piece_length", "-", "real_word_piece_length", ",", "\n", "output_layer", ".", "size", "(", "2", ")", ")", "\n", "output_layer", "=", "torch", ".", "cat", "(", "(", "output_layer", ",", "paddings", ")", ",", "dim", "=", "1", ")", ".", "contiguous", "(", ")", "\n", "# \u4eceword_piece collapse\u5230word\u7684\u8868\u793a", "\n", "", "truncate_output_layer", "=", "output_layer", "[", ":", ",", "1", ":", "-", "1", "]", "# \u5220\u9664[CLS]\u4e0e[SEP] batch_size x len x hidden_size", "\n", "if", "self", ".", "pool_method", "==", "'first'", ":", "\n", "                ", "tmp", "=", "truncate_output_layer", "[", "_batch_indexes", ",", "batch_word_pieces_cum_length", "]", "\n", "tmp", "=", "tmp", ".", "masked_fill", "(", "word_mask", "[", ":", ",", ":", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", ",", "None", "]", ".", "eq", "(", "False", ")", ",", "0", ")", "\n", "outputs", "[", "l_index", ",", ":", ",", "s_shift", ":", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", "+", "s_shift", "]", "=", "tmp", "\n", "\n", "", "elif", "self", ".", "pool_method", "==", "'last'", ":", "\n", "                ", "tmp", "=", "truncate_output_layer", "[", "_batch_indexes", ",", "batch_word_pieces_cum_length", "]", "\n", "tmp", "=", "tmp", ".", "masked_fill", "(", "word_mask", "[", ":", ",", ":", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", ",", "None", "]", ".", "eq", "(", "False", ")", ",", "0", ")", "\n", "outputs", "[", "l_index", ",", ":", ",", "s_shift", ":", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", "+", "s_shift", "]", "=", "tmp", "\n", "", "elif", "self", ".", "pool_method", "==", "'max'", ":", "\n", "                ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "seq_len", "[", "i", "]", ")", ":", "\n", "                        ", "start", ",", "end", "=", "batch_word_pieces_cum_length", "[", "i", ",", "j", "]", ",", "batch_word_pieces_cum_length", "[", "i", ",", "j", "+", "1", "]", "\n", "outputs", "[", "l_index", ",", "i", ",", "j", "+", "s_shift", "]", ",", "_", "=", "torch", ".", "max", "(", "truncate_output_layer", "[", "i", ",", "start", ":", "end", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "seq_len", "[", "i", "]", ")", ":", "\n", "                        ", "start", ",", "end", "=", "batch_word_pieces_cum_length", "[", "i", ",", "j", "]", ",", "batch_word_pieces_cum_length", "[", "i", ",", "j", "+", "1", "]", "\n", "outputs", "[", "l_index", ",", "i", ",", "j", "+", "s_shift", "]", "=", "torch", ".", "mean", "(", "truncate_output_layer", "[", "i", ",", "start", ":", "end", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "", "", "if", "self", ".", "include_cls_sep", ":", "\n", "                ", "if", "l", "in", "(", "len", "(", "bert_outputs", ")", "-", "1", ",", "-", "1", ")", "and", "self", ".", "pooled_cls", ":", "\n", "                    ", "outputs", "[", "l_index", ",", ":", ",", "0", "]", "=", "pooled_cls", "\n", "", "else", ":", "\n", "                    ", "outputs", "[", "l_index", ",", ":", ",", "0", "]", "=", "output_layer", "[", ":", ",", "0", "]", "\n", "", "outputs", "[", "l_index", ",", "batch_indexes", ",", "seq_len", "+", "s_shift", "]", "=", "output_layer", "[", "batch_indexes", ",", "word_pieces_lengths", "+", "s_shift", "]", "\n", "\n", "# 3. \u6700\u7ec8\u7684embedding\u7ed3\u679c", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding._BertWordModel.save": [[538, 547], ["bert_embedding._BertWordModel.tokenzier.save_pretrained", "bert_embedding._BertWordModel.encoder.save_pretrained"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_pretrained"], ["", "def", "save", "(", "self", ",", "folder", ")", ":", "\n", "        ", "\"\"\"\n        \u7ed9\u5b9a\u4e00\u4e2afolder\u4fdd\u5b58pytorch_model.bin, config.json, vocab.txt\n\n        :param str folder:\n        :return:\n        \"\"\"", "\n", "self", ".", "tokenzier", ".", "save_pretrained", "(", "folder", ")", "\n", "self", ".", "encoder", ".", "save_pretrained", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding._BertWordPieceModel.__init__": [[555, 583], ["torch.nn.Module.__init__", "modules.tokenizer.BertTokenizer.from_pretrained", "modules.encoder.bert.BertModel.from_pretrained", "len", "isinstance", "isinstance", "int", "list", "TypeError", "map", "layers.split"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["def", "__init__", "(", "self", ",", "model_dir_or_name", ":", "str", ",", "layers", ":", "str", "=", "'-1'", ",", "pooled_cls", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tokenzier", "=", "BertTokenizer", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "self", ".", "encoder", "=", "BertModel", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "#  \u68c0\u67e5encoder_layer_number\u662f\u5426\u5408\u7406", "\n", "encoder_layer_number", "=", "len", "(", "self", ".", "encoder", ".", "encoder", ".", "layer", ")", "\n", "\n", "if", "isinstance", "(", "layers", ",", "list", ")", ":", "\n", "            ", "self", ".", "layers", "=", "[", "int", "(", "l", ")", "for", "l", "in", "layers", "]", "\n", "", "elif", "isinstance", "(", "layers", ",", "str", ")", ":", "\n", "            ", "self", ".", "layers", "=", "list", "(", "map", "(", "int", ",", "layers", ".", "split", "(", "','", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"`layers` only supports str or list[int]\"", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "layer", "<", "0", ":", "\n", "                ", "assert", "-", "layer", "<=", "encoder_layer_number", ",", "f\"The layer index:{layer} is out of scope for \"", "f\"a bert model with {encoder_layer_number} layers.\"", "\n", "", "else", ":", "\n", "                ", "assert", "layer", "<=", "encoder_layer_number", ",", "f\"The layer index:{layer} is out of scope for \"", "f\"a bert model with {encoder_layer_number} layers.\"", "\n", "\n", "", "", "self", ".", "_cls_index", "=", "self", ".", "tokenzier", ".", "cls_index", "\n", "self", ".", "_sep_index", "=", "self", ".", "tokenzier", ".", "sep_index", "\n", "self", ".", "_wordpiece_unknown_index", "=", "self", ".", "tokenzier", ".", "unk_index", "\n", "self", ".", "_wordpiece_pad_index", "=", "self", ".", "tokenzier", ".", "pad_index", "# \u9700\u8981\u7528\u4e8e\u751f\u6210word_piece", "\n", "self", ".", "pooled_cls", "=", "pooled_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding._BertWordPieceModel.index_datasets": [[584, 604], ["functools.partial", "enumerate", "dataset.apply_field", "dataset.set_pad_val", "core.logger.error"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_pad_val"], ["", "def", "index_datasets", "(", "self", ",", "*", "datasets", ",", "field_name", ",", "add_cls_sep", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f7f\u7528bert\u7684tokenizer\u65b0\u751f\u6210word_pieces\u5217\u52a0\u5165\u5230datasets\u4e2d\uff0c\u5e76\u5c06\u4ed6\u4eec\u8bbe\u7f6e\u4e3ainput\u3002\u5982\u679c\u9996\u5c3e\u4e0d\u662f\n            [CLS]\u4e0e[SEP]\u4f1a\u5728\u9996\u5c3e\u989d\u5916\u52a0\u5165[CLS]\u4e0e[SEP], \u4e14\u5c06word_pieces\u8fd9\u4e00\u5217\u7684pad value\u8bbe\u7f6e\u4e3a\u4e86bert\u7684pad value\u3002\n\n        :param datasets: DataSet\u5bf9\u8c61\n        :param field_name: \u57fa\u4e8e\u54ea\u4e00\u5217index\n        :return:\n        \"\"\"", "\n", "\n", "encode_func", "=", "partial", "(", "self", ".", "tokenzier", ".", "encode", ",", "add_special_tokens", "=", "add_cls_sep", ")", "\n", "\n", "for", "index", ",", "dataset", "in", "enumerate", "(", "datasets", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "encode_func", ",", "field_name", "=", "field_name", ",", "new_field_name", "=", "'word_pieces'", ",", "\n", "is_input", "=", "True", ")", "\n", "dataset", ".", "set_pad_val", "(", "'word_pieces'", ",", "self", ".", "_wordpiece_pad_index", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"Exception happens when processing the {index} dataset.\"", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding._BertWordPieceModel.forward": [[605, 625], ["word_pieces.size", "word_pieces.ne", "bert_embedding._BertWordPieceModel.encoder", "bert_outputs[].new_zeros", "enumerate", "len", "bert_outputs[].size", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "", "def", "forward", "(", "self", ",", "word_pieces", ",", "token_type_ids", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param word_pieces: torch.LongTensor, batch_size x max_len\n        :param token_type_ids: torch.LongTensor, batch_size x max_len\n        :return: num_layers x batch_size x max_len x hidden_size\u6216\u8005num_layers x batch_size x (max_len+2) x hidden_size\n        \"\"\"", "\n", "batch_size", ",", "max_len", "=", "word_pieces", ".", "size", "(", ")", "\n", "\n", "attn_masks", "=", "word_pieces", ".", "ne", "(", "self", ".", "_wordpiece_pad_index", ")", "\n", "bert_outputs", ",", "pooled_cls", "=", "self", ".", "encoder", "(", "word_pieces", ",", "token_type_ids", "=", "token_type_ids", ",", "attention_mask", "=", "attn_masks", ",", "\n", "output_all_encoded_layers", "=", "True", ")", "\n", "# output_layers = [self.layers]  # len(self.layers) x batch_size x max_word_piece_length x hidden_size", "\n", "outputs", "=", "bert_outputs", "[", "0", "]", ".", "new_zeros", "(", "(", "len", "(", "self", ".", "layers", ")", ",", "batch_size", ",", "max_len", ",", "bert_outputs", "[", "0", "]", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "for", "l_index", ",", "l", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "bert_output", "=", "bert_outputs", "[", "l", "]", "\n", "if", "l", "in", "(", "len", "(", "bert_outputs", ")", "-", "1", ",", "-", "1", ")", "and", "self", ".", "pooled_cls", ":", "\n", "                ", "bert_output", "[", ":", ",", "0", "]", "=", "pooled_cls", "\n", "", "outputs", "[", "l_index", "]", "=", "bert_output", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.bert_embedding._BertWordPieceModel.save": [[626, 635], ["bert_embedding._BertWordPieceModel.tokenzier.save_pretrained", "bert_embedding._BertWordPieceModel.encoder.save_pretrained"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_pretrained"], ["", "def", "save", "(", "self", ",", "folder", ")", ":", "\n", "        ", "\"\"\"\n        \u7ed9\u5b9a\u4e00\u4e2afolder\u4fdd\u5b58pytorch_model.bin, config.json, vocab.txt\n\n        :param folder:\n        :return:\n        \"\"\"", "\n", "self", ".", "tokenzier", ".", "save_pretrained", "(", "folder", ")", "\n", "self", ".", "encoder", ".", "save_pretrained", "(", "folder", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.char_embedding.CNNCharEmbedding.__init__": [[45, 123], ["embedding.TokenEmbedding.__init__", "isinstance", "core.logger.info", "utils._construct_char_vocab_from_vocab", "core.logger.info", "max", "char_embedding.CNNCharEmbedding.register_buffer", "char_embedding.CNNCharEmbedding.register_buffer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "map", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "static_embedding.StaticEmbedding", "utils.get_embeddings", "sum", "activation.lower", "callable", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "activation.lower", "Exception", "len", "len", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "char_embedding.CNNCharEmbedding.char_vocab.to_index", "len", "range", "activation.lower", "len", "list", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils._construct_char_vocab_from_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["def", "__init__", "(", "self", ",", "vocab", ":", "Vocabulary", ",", "embed_size", ":", "int", "=", "50", ",", "char_emb_size", ":", "int", "=", "50", ",", "word_dropout", ":", "float", "=", "0", ",", "\n", "dropout", ":", "float", "=", "0", ",", "filter_nums", ":", "List", "[", "int", "]", "=", "(", "40", ",", "30", ",", "20", ")", ",", "kernel_sizes", ":", "List", "[", "int", "]", "=", "(", "5", ",", "3", ",", "1", ")", ",", "\n", "pool_method", ":", "str", "=", "'max'", ",", "activation", "=", "'relu'", ",", "min_char_freq", ":", "int", "=", "2", ",", "pre_train_char_embed", ":", "str", "=", "None", ",", "\n", "requires_grad", ":", "bool", "=", "True", ",", "include_word_start_end", ":", "bool", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param vocab: \u8bcd\u8868\n        :param embed_size: \u8be5CNNCharEmbedding\u7684\u8f93\u51fa\u7ef4\u5ea6\u5927\u5c0f\uff0c\u9ed8\u8ba4\u503c\u4e3a50.\n        :param char_emb_size: character\u7684embed\u7684\u7ef4\u5ea6\u3002character\u662f\u4ecevocab\u4e2d\u751f\u6210\u7684\u3002\u9ed8\u8ba4\u503c\u4e3a50.\n        :param float word_dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5c06\u4e00\u4e2a\u8bcd\u66ff\u6362\u4e3aunk\u3002\u8fd9\u6837\u65e2\u53ef\u4ee5\u8bad\u7ec3unk\u4e5f\u662f\u4e00\u5b9a\u7684regularize\u3002\n        :param float dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387drop\u5206\u5e03\u5f0f\u8868\u793a\u4e0echar embedding\u7684\u8f93\u51fa\u3002\n        :param filter_nums: filter\u7684\u6570\u91cf. \u957f\u5ea6\u9700\u8981\u548ckernels\u4e00\u81f4\u3002\u9ed8\u8ba4\u503c\u4e3a[40, 30, 20].\n        :param kernel_sizes: kernel\u7684\u5927\u5c0f. \u9ed8\u8ba4\u503c\u4e3a[5, 3, 1].\n        :param pool_method: character\u7684\u8868\u793a\u5728\u5408\u6210\u4e00\u4e2a\u8868\u793a\u65f6\u6240\u4f7f\u7528\u7684pool\u65b9\u6cd5\uff0c\u652f\u6301'avg', 'max'.\n        :param activation: CNN\u4e4b\u540e\u4f7f\u7528\u7684\u6fc0\u6d3b\u65b9\u6cd5\uff0c\u652f\u6301'relu', 'sigmoid', 'tanh' \u6216\u8005\u81ea\u5b9a\u4e49\u51fd\u6570.\n        :param min_char_freq: character\u7684\u6700\u5c11\u51fa\u73b0\u6b21\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a2.\n        :param pre_train_char_embed: \u53ef\u4ee5\u6709\u4e24\u79cd\u65b9\u5f0f\u8c03\u7528\u9884\u8bad\u7ec3\u597d\u7684character embedding\uff1a\u7b2c\u4e00\u79cd\u662f\u4f20\u5165embedding\u6587\u4ef6\u5939\n            (\u6587\u4ef6\u5939\u4e0b\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u4ee5.txt\u4f5c\u4e3a\u540e\u7f00\u7684\u6587\u4ef6)\u6216\u6587\u4ef6\u8def\u5f84\uff1b\u7b2c\u4e8c\u79cd\u662f\u4f20\u5165embedding\u7684\u540d\u79f0\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u5c06\u81ea\u52a8\u67e5\u770b\u7f13\u5b58\u4e2d\u662f\u5426\u5b58\u5728\u8be5\u6a21\u578b\uff0c\n            \u6ca1\u6709\u7684\u8bdd\u5c06\u81ea\u52a8\u4e0b\u8f7d\u3002\u5982\u679c\u8f93\u5165\u4e3aNone\u5219\u4f7f\u7528embedding_dim\u7684\u7ef4\u5ea6\u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2aembedding.\n        :param requires_grad: \u662f\u5426\u66f4\u65b0\u6743\u91cd\n        :param include_word_start_end: \u662f\u5426\u5728\u6bcf\u4e2aword\u5f00\u59cb\u7684character\u524d\u548c\u7ed3\u675f\u7684character\u589e\u52a0\u7279\u6b8a\u6807\u793a\u7b26\u53f7\uff1b\n        \"\"\"", "\n", "super", "(", "CNNCharEmbedding", ",", "self", ")", ".", "__init__", "(", "vocab", ",", "word_dropout", "=", "word_dropout", ",", "dropout", "=", "dropout", ")", "\n", "\n", "for", "kernel", "in", "kernel_sizes", ":", "\n", "            ", "assert", "kernel", "%", "2", "==", "1", ",", "\"Only odd kernel is allowed.\"", "\n", "\n", "", "assert", "pool_method", "in", "(", "'max'", ",", "'avg'", ")", "\n", "self", ".", "pool_method", "=", "pool_method", "\n", "# activation function", "\n", "if", "isinstance", "(", "activation", ",", "str", ")", ":", "\n", "            ", "if", "activation", ".", "lower", "(", ")", "==", "'relu'", ":", "\n", "                ", "self", ".", "activation", "=", "F", ".", "relu", "\n", "", "elif", "activation", ".", "lower", "(", ")", "==", "'sigmoid'", ":", "\n", "                ", "self", ".", "activation", "=", "F", ".", "sigmoid", "\n", "", "elif", "activation", ".", "lower", "(", ")", "==", "'tanh'", ":", "\n", "                ", "self", ".", "activation", "=", "F", ".", "tanh", "\n", "", "", "elif", "activation", "is", "None", ":", "\n", "            ", "self", ".", "activation", "=", "lambda", "x", ":", "x", "\n", "", "elif", "callable", "(", "activation", ")", ":", "\n", "            ", "self", ".", "activation", "=", "activation", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"Undefined activation function: choose from: [relu, tanh, sigmoid, or a callable function]\"", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Start constructing character vocabulary.\"", ")", "\n", "# \u5efa\u7acbchar\u7684\u8bcd\u8868", "\n", "self", ".", "char_vocab", "=", "_construct_char_vocab_from_vocab", "(", "vocab", ",", "min_freq", "=", "min_char_freq", ",", "\n", "include_word_start_end", "=", "include_word_start_end", ")", "\n", "self", ".", "char_pad_index", "=", "self", ".", "char_vocab", ".", "padding_idx", "\n", "logger", ".", "info", "(", "f\"In total, there are {len(self.char_vocab)} distinct characters.\"", ")", "\n", "# \u5bf9vocab\u8fdb\u884cindex", "\n", "max_word_len", "=", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", "[", "0", "]", ")", ",", "vocab", ")", ")", "\n", "if", "include_word_start_end", ":", "\n", "            ", "max_word_len", "+=", "2", "\n", "", "self", ".", "register_buffer", "(", "'words_to_chars_embedding'", ",", "torch", ".", "full", "(", "(", "len", "(", "vocab", ")", ",", "max_word_len", ")", ",", "\n", "fill_value", "=", "self", ".", "char_pad_index", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "self", ".", "register_buffer", "(", "'word_lengths'", ",", "torch", ".", "zeros", "(", "len", "(", "vocab", ")", ")", ".", "long", "(", ")", ")", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "# if index!=vocab.padding_idx:  # \u5982\u679c\u662fpad\u7684\u8bdd\uff0c\u76f4\u63a5\u5c31\u4e3apad_value\u4e86\u3002\u4fee\u6539\u4e3a\u4e0d\u533a\u5206pad, \u8fd9\u6837\u6240\u6709\u7684<pad>\u4e5f\u662f\u540c\u4e00\u4e2aembed", "\n", "            ", "if", "include_word_start_end", ":", "\n", "                ", "word", "=", "[", "'<bow>'", "]", "+", "list", "(", "word", ")", "+", "[", "'<eow>'", "]", "\n", "", "self", ".", "words_to_chars_embedding", "[", "index", ",", ":", "len", "(", "word", ")", "]", "=", "torch", ".", "LongTensor", "(", "[", "self", ".", "char_vocab", ".", "to_index", "(", "c", ")", "for", "c", "in", "word", "]", ")", "\n", "self", ".", "word_lengths", "[", "index", "]", "=", "len", "(", "word", ")", "\n", "# self.char_embedding = nn.Embedding(len(self.char_vocab), char_emb_size)", "\n", "", "if", "pre_train_char_embed", ":", "\n", "            ", "self", ".", "char_embedding", "=", "StaticEmbedding", "(", "self", ".", "char_vocab", ",", "model_dir_or_name", "=", "pre_train_char_embed", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "char_embedding", "=", "get_embeddings", "(", "(", "len", "(", "self", ".", "char_vocab", ")", ",", "char_emb_size", ")", ")", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv1d", "(", "\n", "self", ".", "char_embedding", ".", "embedding_dim", ",", "filter_nums", "[", "i", "]", ",", "kernel_size", "=", "kernel_sizes", "[", "i", "]", ",", "bias", "=", "True", ",", "\n", "padding", "=", "kernel_sizes", "[", "i", "]", "//", "2", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "kernel_sizes", ")", ")", "]", ")", "\n", "self", ".", "_embed_size", "=", "embed_size", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "sum", "(", "filter_nums", ")", ",", "embed_size", ")", "\n", "self", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.char_embedding.CNNCharEmbedding.forward": [[124, 155], ["char_embedding.CNNCharEmbedding.drop_word", "char_embedding.CNNCharEmbedding.size", "word_lengths.max", "char_embedding.CNNCharEmbedding.eq", "char_embedding.CNNCharEmbedding.char_embedding", "char_embedding.CNNCharEmbedding.dropout", "char_embedding.CNNCharEmbedding.reshape", "reshaped_chars.transpose.transpose.transpose", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "torch.cat().contiguous", "char_embedding.CNNCharEmbedding.activation", "char_embedding.CNNCharEmbedding.fc", "char_embedding.CNNCharEmbedding.dropout", "conv().transpose().reshape", "conv_chars.masked_fill.masked_fill.masked_fill", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "conv_chars.masked_fill.masked_fill.masked_fill", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "char_embedding.CNNCharEmbedding.eq.unsqueeze", "float", "char_embedding.CNNCharEmbedding.eq.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "char_embedding.CNNCharEmbedding.eq.eq().sum().float", "conv().transpose", "char_embedding.CNNCharEmbedding.eq.eq().sum", "conv", "char_embedding.CNNCharEmbedding.eq.eq"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.drop_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        \u8f93\u5165words\u7684index\u540e\uff0c\u751f\u6210\u5bf9\u5e94\u7684words\u7684\u8868\u793a\u3002\n\n        :param words: [batch_size, max_len]\n        :return: [batch_size, max_len, embed_size]\n        \"\"\"", "\n", "words", "=", "self", ".", "drop_word", "(", "words", ")", "\n", "batch_size", ",", "max_len", "=", "words", ".", "size", "(", ")", "\n", "chars", "=", "self", ".", "words_to_chars_embedding", "[", "words", "]", "# batch_size x max_len x max_word_len", "\n", "word_lengths", "=", "self", ".", "word_lengths", "[", "words", "]", "# batch_size x max_len", "\n", "max_word_len", "=", "word_lengths", ".", "max", "(", ")", "\n", "chars", "=", "chars", "[", ":", ",", ":", ",", ":", "max_word_len", "]", "\n", "# \u4e3a1\u7684\u5730\u65b9\u4e3amask", "\n", "chars_masks", "=", "chars", ".", "eq", "(", "self", ".", "char_pad_index", ")", "# batch_size x max_len x max_word_len \u5982\u679c\u4e3a0, \u8bf4\u660e\u662fpadding\u7684\u4f4d\u7f6e\u4e86", "\n", "chars", "=", "self", ".", "char_embedding", "(", "chars", ")", "# batch_size x max_len x max_word_len x embed_size", "\n", "chars", "=", "self", ".", "dropout", "(", "chars", ")", "\n", "reshaped_chars", "=", "chars", ".", "reshape", "(", "batch_size", "*", "max_len", ",", "max_word_len", ",", "-", "1", ")", "\n", "reshaped_chars", "=", "reshaped_chars", ".", "transpose", "(", "1", ",", "2", ")", "# B' x E x M", "\n", "conv_chars", "=", "[", "conv", "(", "reshaped_chars", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "batch_size", ",", "max_len", ",", "max_word_len", ",", "-", "1", ")", "\n", "for", "conv", "in", "self", ".", "convs", "]", "\n", "conv_chars", "=", "torch", ".", "cat", "(", "conv_chars", ",", "dim", "=", "-", "1", ")", ".", "contiguous", "(", ")", "# B x max_len x max_word_len x sum(filters)", "\n", "conv_chars", "=", "self", ".", "activation", "(", "conv_chars", ")", "\n", "if", "self", ".", "pool_method", "==", "'max'", ":", "\n", "            ", "conv_chars", "=", "conv_chars", ".", "masked_fill", "(", "chars_masks", ".", "unsqueeze", "(", "-", "1", ")", ",", "float", "(", "'-inf'", ")", ")", "\n", "chars", ",", "_", "=", "torch", ".", "max", "(", "conv_chars", ",", "dim", "=", "-", "2", ")", "# batch_size x max_len x sum(filters)", "\n", "", "else", ":", "\n", "            ", "conv_chars", "=", "conv_chars", ".", "masked_fill", "(", "chars_masks", ".", "unsqueeze", "(", "-", "1", ")", ",", "0", ")", "\n", "chars", "=", "torch", ".", "sum", "(", "conv_chars", ",", "dim", "=", "-", "2", ")", "/", "chars_masks", ".", "eq", "(", "False", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "", "chars", "=", "self", ".", "fc", "(", "chars", ")", "\n", "return", "self", ".", "dropout", "(", "chars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.char_embedding.LSTMCharEmbedding.__init__": [[175, 251], ["embedding.TokenEmbedding.__init__", "isinstance", "core.logger.info", "utils._construct_char_vocab_from_vocab", "core.logger.info", "max", "char_embedding.LSTMCharEmbedding.register_buffer", "char_embedding.LSTMCharEmbedding.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear", "modules.encoder.lstm.LSTM", "map", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "static_embedding.StaticEmbedding", "utils.get_embeddings", "activation.lower", "callable", "activation.lower", "Exception", "len", "len", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "char_embedding.LSTMCharEmbedding.char_vocab.to_index", "len", "activation.lower", "len", "list", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils._construct_char_vocab_from_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["def", "__init__", "(", "self", ",", "vocab", ":", "Vocabulary", ",", "embed_size", ":", "int", "=", "50", ",", "char_emb_size", ":", "int", "=", "50", ",", "word_dropout", ":", "float", "=", "0", ",", "\n", "dropout", ":", "float", "=", "0", ",", "hidden_size", "=", "50", ",", "pool_method", ":", "str", "=", "'max'", ",", "activation", "=", "'relu'", ",", "\n", "min_char_freq", ":", "int", "=", "2", ",", "bidirectional", "=", "True", ",", "pre_train_char_embed", ":", "str", "=", "None", ",", "\n", "requires_grad", ":", "bool", "=", "True", ",", "include_word_start_end", ":", "bool", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param vocab: \u8bcd\u8868\n        :param embed_size: LSTMCharEmbedding\u7684\u8f93\u51fa\u7ef4\u5ea6\u3002\u9ed8\u8ba4\u503c\u4e3a50.\n        :param char_emb_size: character\u7684embedding\u7684\u7ef4\u5ea6\u3002\u9ed8\u8ba4\u503c\u4e3a50.\n        :param float word_dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5c06\u4e00\u4e2a\u8bcd\u66ff\u6362\u4e3aunk\u3002\u8fd9\u6837\u65e2\u53ef\u4ee5\u8bad\u7ec3unk\u4e5f\u662f\u4e00\u5b9a\u7684regularize\u3002\n        :param dropout: \u4ee5\u591a\u5927\u6982\u7387drop character embedding\u7684\u8f93\u51fa\u4ee5\u53ca\u6700\u7ec8\u7684word\u7684\u8f93\u51fa\u3002\n        :param hidden_size: LSTM\u7684\u4e2d\u95f4hidden\u7684\u5927\u5c0f\uff0c\u5982\u679c\u4e3abidirectional\u7684\uff0chidden\u4f1a\u9664\u4e8c\uff0c\u9ed8\u8ba4\u4e3a50.\n        :param pool_method: \u652f\u6301'max', 'avg'\u3002\n        :param activation: \u6fc0\u6d3b\u51fd\u6570\uff0c\u652f\u6301'relu', 'sigmoid', 'tanh', \u6216\u8005\u81ea\u5b9a\u4e49\u51fd\u6570.\n        :param min_char_freq: character\u7684\u6700\u5c0f\u51fa\u73b0\u6b21\u6570\u3002\u9ed8\u8ba4\u503c\u4e3a2.\n        :param bidirectional: \u662f\u5426\u4f7f\u7528\u53cc\u5411\u7684LSTM\u8fdb\u884cencode\u3002\u9ed8\u8ba4\u503c\u4e3aTrue\u3002\n        :param pre_train_char_embed: \u53ef\u4ee5\u6709\u4e24\u79cd\u65b9\u5f0f\u8c03\u7528\u9884\u8bad\u7ec3\u597d\u7684character embedding\uff1a\u7b2c\u4e00\u79cd\u662f\u4f20\u5165embedding\u6587\u4ef6\u5939\n            (\u6587\u4ef6\u5939\u4e0b\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u4ee5.txt\u4f5c\u4e3a\u540e\u7f00\u7684\u6587\u4ef6)\u6216\u6587\u4ef6\u8def\u5f84\uff1b\u7b2c\u4e8c\u79cd\u662f\u4f20\u5165embedding\u7684\u540d\u79f0\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u5c06\u81ea\u52a8\u67e5\u770b\u7f13\u5b58\u4e2d\u662f\u5426\u5b58\u5728\u8be5\u6a21\u578b\uff0c\n            \u6ca1\u6709\u7684\u8bdd\u5c06\u81ea\u52a8\u4e0b\u8f7d\u3002\u5982\u679c\u8f93\u5165\u4e3aNone\u5219\u4f7f\u7528embedding_dim\u7684\u7ef4\u5ea6\u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2aembedding.\n        :param requires_grad: \u662f\u5426\u66f4\u65b0\u6743\u91cd\n        :param include_word_start_end: \u662f\u5426\u5728\u6bcf\u4e2aword\u5f00\u59cb\u7684character\u524d\u548c\u7ed3\u675f\u7684character\u589e\u52a0\u7279\u6b8a\u6807\u793a\u7b26\u53f7\uff1b\n        \"\"\"", "\n", "super", "(", "LSTMCharEmbedding", ",", "self", ")", ".", "__init__", "(", "vocab", ",", "word_dropout", "=", "word_dropout", ",", "dropout", "=", "dropout", ")", "\n", "\n", "assert", "hidden_size", "%", "2", "==", "0", ",", "\"Only even kernel is allowed.\"", "\n", "\n", "assert", "pool_method", "in", "(", "'max'", ",", "'avg'", ")", "\n", "self", ".", "pool_method", "=", "pool_method", "\n", "# activation function", "\n", "if", "isinstance", "(", "activation", ",", "str", ")", ":", "\n", "            ", "if", "activation", ".", "lower", "(", ")", "==", "'relu'", ":", "\n", "                ", "self", ".", "activation", "=", "F", ".", "relu", "\n", "", "elif", "activation", ".", "lower", "(", ")", "==", "'sigmoid'", ":", "\n", "                ", "self", ".", "activation", "=", "F", ".", "sigmoid", "\n", "", "elif", "activation", ".", "lower", "(", ")", "==", "'tanh'", ":", "\n", "                ", "self", ".", "activation", "=", "F", ".", "tanh", "\n", "", "", "elif", "activation", "is", "None", ":", "\n", "            ", "self", ".", "activation", "=", "lambda", "x", ":", "x", "\n", "", "elif", "callable", "(", "activation", ")", ":", "\n", "            ", "self", ".", "activation", "=", "activation", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"Undefined activation function: choose from: [relu, tanh, sigmoid, or a callable function]\"", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Start constructing character vocabulary.\"", ")", "\n", "# \u5efa\u7acbchar\u7684\u8bcd\u8868", "\n", "self", ".", "char_vocab", "=", "_construct_char_vocab_from_vocab", "(", "vocab", ",", "min_freq", "=", "min_char_freq", ",", "\n", "include_word_start_end", "=", "include_word_start_end", ")", "\n", "self", ".", "char_pad_index", "=", "self", ".", "char_vocab", ".", "padding_idx", "\n", "logger", ".", "info", "(", "f\"In total, there are {len(self.char_vocab)} distinct characters.\"", ")", "\n", "# \u5bf9vocab\u8fdb\u884cindex", "\n", "max_word_len", "=", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", "[", "0", "]", ")", ",", "vocab", ")", ")", "\n", "if", "include_word_start_end", ":", "\n", "            ", "max_word_len", "+=", "2", "\n", "", "self", ".", "register_buffer", "(", "'words_to_chars_embedding'", ",", "torch", ".", "full", "(", "(", "len", "(", "vocab", ")", ",", "max_word_len", ")", ",", "\n", "fill_value", "=", "self", ".", "char_pad_index", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "self", ".", "register_buffer", "(", "'word_lengths'", ",", "torch", ".", "zeros", "(", "len", "(", "vocab", ")", ")", ".", "long", "(", ")", ")", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "# if index!=vocab.padding_idx:  # \u5982\u679c\u662fpad\u7684\u8bdd\uff0c\u76f4\u63a5\u5c31\u4e3apad_value\u4e86. \u4fee\u6539\u4e3a\u4e0d\u533a\u5206pad\u4e0e\u5426", "\n", "            ", "if", "include_word_start_end", ":", "\n", "                ", "word", "=", "[", "'<bow>'", "]", "+", "list", "(", "word", ")", "+", "[", "'<eow>'", "]", "\n", "", "self", ".", "words_to_chars_embedding", "[", "index", ",", ":", "len", "(", "word", ")", "]", "=", "torch", ".", "LongTensor", "(", "[", "self", ".", "char_vocab", ".", "to_index", "(", "c", ")", "for", "c", "in", "word", "]", ")", "\n", "self", ".", "word_lengths", "[", "index", "]", "=", "len", "(", "word", ")", "\n", "", "if", "pre_train_char_embed", ":", "\n", "            ", "self", ".", "char_embedding", "=", "StaticEmbedding", "(", "self", ".", "char_vocab", ",", "pre_train_char_embed", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "char_embedding", "=", "get_embeddings", "(", "(", "len", "(", "self", ".", "char_vocab", ")", ",", "char_emb_size", ")", ")", "\n", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "embed_size", ")", "\n", "hidden_size", "=", "hidden_size", "//", "2", "if", "bidirectional", "else", "hidden_size", "\n", "\n", "self", ".", "lstm", "=", "LSTM", "(", "self", ".", "char_embedding", ".", "embedding_dim", ",", "hidden_size", ",", "bidirectional", "=", "bidirectional", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "_embed_size", "=", "embed_size", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.char_embedding.LSTMCharEmbedding.forward": [[252, 285], ["char_embedding.LSTMCharEmbedding.drop_word", "char_embedding.LSTMCharEmbedding.size", "word_lengths.max", "char_embedding.LSTMCharEmbedding.eq", "char_embedding.LSTMCharEmbedding.char_embedding", "char_embedding.LSTMCharEmbedding.dropout", "char_embedding.LSTMCharEmbedding.reshape", "char_embedding.LSTMCharEmbedding.eq.eq().sum().reshape", "[].reshape", "char_embedding.LSTMCharEmbedding.activation", "char_embedding.LSTMCharEmbedding.fc", "char_embedding.LSTMCharEmbedding.dropout", "lstm_chars.masked_fill.masked_fill.masked_fill", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "lstm_chars.masked_fill.masked_fill.masked_fill", "char_embedding.LSTMCharEmbedding.eq.eq().sum", "char_embedding.LSTMCharEmbedding.eq.unsqueeze", "float", "char_embedding.LSTMCharEmbedding.eq.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "char_embedding.LSTMCharEmbedding.eq.eq().sum().float", "char_embedding.LSTMCharEmbedding.lstm", "char_embedding.LSTMCharEmbedding.eq.eq", "char_embedding.LSTMCharEmbedding.eq.eq().sum", "char_embedding.LSTMCharEmbedding.eq.eq"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.drop_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        \u8f93\u5165words\u7684index\u540e\uff0c\u751f\u6210\u5bf9\u5e94\u7684words\u7684\u8868\u793a\u3002\n\n        :param words: [batch_size, max_len]\n        :return: [batch_size, max_len, embed_size]\n        \"\"\"", "\n", "words", "=", "self", ".", "drop_word", "(", "words", ")", "\n", "batch_size", ",", "max_len", "=", "words", ".", "size", "(", ")", "\n", "chars", "=", "self", ".", "words_to_chars_embedding", "[", "words", "]", "# batch_size x max_len x max_word_len", "\n", "word_lengths", "=", "self", ".", "word_lengths", "[", "words", "]", "# batch_size x max_len", "\n", "max_word_len", "=", "word_lengths", ".", "max", "(", ")", "\n", "chars", "=", "chars", "[", ":", ",", ":", ",", ":", "max_word_len", "]", "\n", "# \u4e3amask\u7684\u5730\u65b9\u4e3a1", "\n", "chars_masks", "=", "chars", ".", "eq", "(", "self", ".", "char_pad_index", ")", "# batch_size x max_len x max_word_len \u5982\u679c\u4e3a0, \u8bf4\u660e\u662fpadding\u7684\u4f4d\u7f6e\u4e86", "\n", "chars", "=", "self", ".", "char_embedding", "(", "chars", ")", "# batch_size x max_len x max_word_len x embed_size", "\n", "chars", "=", "self", ".", "dropout", "(", "chars", ")", "\n", "reshaped_chars", "=", "chars", ".", "reshape", "(", "batch_size", "*", "max_len", ",", "max_word_len", ",", "-", "1", ")", "\n", "char_seq_len", "=", "chars_masks", ".", "eq", "(", "False", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "reshape", "(", "batch_size", "*", "max_len", ")", "\n", "lstm_chars", "=", "self", ".", "lstm", "(", "reshaped_chars", ",", "char_seq_len", ")", "[", "0", "]", ".", "reshape", "(", "batch_size", ",", "max_len", ",", "max_word_len", ",", "-", "1", ")", "\n", "# B x M x M x H", "\n", "\n", "lstm_chars", "=", "self", ".", "activation", "(", "lstm_chars", ")", "\n", "if", "self", ".", "pool_method", "==", "'max'", ":", "\n", "            ", "lstm_chars", "=", "lstm_chars", ".", "masked_fill", "(", "chars_masks", ".", "unsqueeze", "(", "-", "1", ")", ",", "float", "(", "'-inf'", ")", ")", "\n", "chars", ",", "_", "=", "torch", ".", "max", "(", "lstm_chars", ",", "dim", "=", "-", "2", ")", "# batch_size x max_len x H", "\n", "", "else", ":", "\n", "            ", "lstm_chars", "=", "lstm_chars", ".", "masked_fill", "(", "chars_masks", ".", "unsqueeze", "(", "-", "1", ")", ",", "0", ")", "\n", "chars", "=", "torch", ".", "sum", "(", "lstm_chars", ",", "dim", "=", "-", "2", ")", "/", "chars_masks", ".", "eq", "(", "False", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "\n", "", "chars", "=", "self", ".", "fc", "(", "chars", ")", "\n", "\n", "return", "self", ".", "dropout", "(", "chars", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.Embedding.__init__": [[34, 63], ["torch.Module.__init__", "utils.get_embeddings", "torch.Dropout", "torch.Dropout", "isinstance", "hasattr", "hasattr", "ValueError", "embedding.Embedding.embed.get_word_vocab", "embedding.Embedding.embed.weight.size", "isinstance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.get_word_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["def", "__init__", "(", "self", ",", "init_embed", ",", "word_dropout", "=", "0", ",", "dropout", "=", "0.0", ",", "unk_index", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param tuple(int,int),torch.FloatTensor,nn.Embedding,numpy.ndarray init_embed: \u652f\u6301\u4f20\u5165Embedding\u7684\u5927\u5c0f(\u4f20\u5165tuple(int, int),\n            \u7b2c\u4e00\u4e2aint\u4e3avocab_zie, \u7b2c\u4e8c\u4e2aint\u4e3aembed_dim); \u6216\u4f20\u5165Tensor, Embedding, numpy.ndarray\u7b49\u5219\u76f4\u63a5\u4f7f\u7528\u8be5\u503c\u521d\u59cb\u5316Embedding;\n        :param float word_dropout: \u6309\u7167\u4e00\u5b9a\u6982\u7387\u968f\u673a\u5c06word\u8bbe\u7f6e\u4e3aunk_index\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97unk\u8fd9\u4e2atoken\u5f97\u5230\u8db3\u591f\u7684\u8bad\u7ec3, \u4e14\u4f1a\u5bf9\u7f51\u7edc\u6709\n            \u4e00\u5b9a\u7684regularize\u7684\u4f5c\u7528\u3002\u8bbe\u7f6e\u8be5\u503c\u65f6\uff0c\u5fc5\u987b\u540c\u65f6\u8bbe\u7f6eunk_index\n        :param float dropout: \u5bf9Embedding\u7684\u8f93\u51fa\u7684dropout\u3002\n        :param int unk_index: drop word\u65f6\u66ff\u6362\u4e3a\u7684index\u3002fastNLP\u7684Vocabulary\u7684unk_index\u9ed8\u8ba4\u4e3a1\u3002\n        \"\"\"", "\n", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed", "=", "get_embeddings", "(", "init_embed", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "if", "not", "isinstance", "(", "self", ".", "embed", ",", "TokenEmbedding", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "embed", ",", "'embed_size'", ")", ":", "\n", "                ", "self", ".", "_embed_size", "=", "self", ".", "embed", ".", "embed_size", "\n", "", "elif", "hasattr", "(", "self", ".", "embed", ",", "'embedding_dim'", ")", ":", "\n", "                ", "self", ".", "_embed_size", "=", "self", ".", "embed", ".", "embedding_dim", "\n", "", "else", ":", "\n", "                ", "self", ".", "_embed_size", "=", "self", ".", "embed", ".", "weight", ".", "size", "(", "1", ")", "\n", "", "if", "word_dropout", ">", "0", "and", "not", "isinstance", "(", "unk_index", ",", "int", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"When drop word is set, you need to pass in the unk_index.\"", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_embed_size", "=", "self", ".", "embed", ".", "embed_size", "\n", "unk_index", "=", "self", ".", "embed", ".", "get_word_vocab", "(", ")", ".", "unknown_idx", "\n", "", "self", ".", "unk_index", "=", "unk_index", "\n", "self", ".", "word_dropout", "=", "word_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.Embedding.forward": [[64, 75], ["embedding.Embedding.embed", "embedding.Embedding.dropout", "torch.bernoulli().eq", "torch.bernoulli().eq", "torch.bernoulli().eq", "torch.bernoulli().eq", "words.masked_fill.masked_fill.masked_fill", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.LongTensor words: [batch, seq_len]\n        :return: torch.Tensor : [batch, seq_len, embed_dim]\n        \"\"\"", "\n", "if", "self", ".", "word_dropout", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "mask", "=", "torch", ".", "ones_like", "(", "words", ")", ".", "float", "(", ")", "*", "self", ".", "word_dropout", "\n", "mask", "=", "torch", ".", "bernoulli", "(", "mask", ")", ".", "eq", "(", "1", ")", "# dropout_word\u8d8a\u5927\uff0c\u8d8a\u591a\u4f4d\u7f6e\u4e3a1", "\n", "words", "=", "words", ".", "masked_fill", "(", "mask", ",", "self", ".", "unk_index", ")", "\n", "", "words", "=", "self", ".", "embed", "(", "words", ")", "\n", "return", "self", ".", "dropout", "(", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.Embedding.num_embedding": [[76, 82], ["isinstance", "embedding.Embedding.embed.weight.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "@", "property", "\n", "def", "num_embedding", "(", "self", ")", "->", "int", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "embed", ",", "nn", ".", "Embedding", ")", ":", "\n", "            ", "return", "self", ".", "embed", ".", "weight", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "embed", ".", "num_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.Embedding.__len__": [[83, 85], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.Embedding.embed_size": [[86, 89], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "embed_size", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_embed_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.Embedding.embedding_dim": [[90, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "embedding_dim", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_embed_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.Embedding.requires_grad": [[105, 111], ["isinstance"], "methods", ["None"], ["", "", "@", "requires_grad", ".", "setter", "\n", "def", "requires_grad", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "embed", ",", "TokenEmbedding", ")", ":", "\n", "            ", "self", ".", "embed", ".", "weight", ".", "requires_grad", "=", "value", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed", ".", "requires_grad", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.Embedding.size": [[112, 118], ["isinstance", "embedding.Embedding.embed.weight.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "embed", ",", "TokenEmbedding", ")", ":", "\n", "            ", "return", "self", ".", "embed", ".", "size", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "embed", ".", "weight", ".", "size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.__init__": [[125, 137], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "vocab.build_vocab"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.build_vocab"], ["def", "__init__", "(", "self", ",", "vocab", ",", "word_dropout", "=", "0.0", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "TokenEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "vocab", ".", "rebuild", ":", "\n", "            ", "vocab", ".", "build_vocab", "(", ")", "\n", "", "assert", "vocab", ".", "padding", "is", "not", "None", ",", "\"Vocabulary must have a padding entry.\"", "\n", "self", ".", "_word_vocab", "=", "vocab", "\n", "self", ".", "_word_pad_index", "=", "vocab", ".", "padding_idx", "\n", "if", "word_dropout", ">", "0", ":", "\n", "            ", "assert", "vocab", ".", "unknown", "is", "not", "None", ",", "\"Vocabulary must have unknown entry when you want to drop a word.\"", "\n", "", "self", ".", "word_dropout", "=", "word_dropout", "\n", "self", ".", "_word_unk_index", "=", "vocab", ".", "unknown_idx", "\n", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.drop_word": [[138, 152], ["torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.bernoulli().eq", "torch.bernoulli().eq", "torch.bernoulli().eq", "torch.bernoulli().eq", "words.masked_fill.masked_fill.ne", "mask.__and__.__and__.__and__", "words.masked_fill.masked_fill.masked_fill", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["None"], ["", "def", "drop_word", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        \u6309\u7167\u8bbe\u5b9a\u968f\u673a\u5c06words\u8bbe\u7f6e\u4e3aunknown_index\u3002\n\n        :param torch.LongTensor words: batch_size x max_len\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "word_dropout", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "mask", "=", "torch", ".", "full_like", "(", "words", ",", "fill_value", "=", "self", ".", "word_dropout", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "words", ".", "device", ")", "\n", "mask", "=", "torch", ".", "bernoulli", "(", "mask", ")", ".", "eq", "(", "1", ")", "# dropout_word\u8d8a\u5927\uff0c\u8d8a\u591a\u4f4d\u7f6e\u4e3a1", "\n", "pad_mask", "=", "words", ".", "ne", "(", "self", ".", "_word_pad_index", ")", "\n", "mask", "=", "mask", ".", "__and__", "(", "pad_mask", ")", "\n", "words", "=", "words", ".", "masked_fill", "(", "mask", ",", "self", ".", "_word_unk_index", ")", "\n", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout": [[153, 161], ["embedding.TokenEmbedding.dropout_layer"], "methods", ["None"], ["", "def", "dropout", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        \u5bf9embedding\u540e\u7684word\u8868\u793a\u8fdb\u884cdrop\u3002\n\n        :param torch.FloatTensor words: batch_size x max_len x embed_size\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "dropout_layer", "(", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.requires_grad": [[174, 178], ["embedding.TokenEmbedding.parameters"], "methods", ["None"], ["", "", "@", "requires_grad", ".", "setter", "\n", "def", "requires_grad", "(", "self", ",", "value", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.__len__": [[179, 181], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_word_vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.embed_size": [[182, 185], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "embed_size", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_embed_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.embedding_dim": [[186, 189], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "embedding_dim", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_embed_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.num_embeddings": [[190, 197], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_embeddings", "(", "self", ")", "->", "int", ":", "\n", "        ", "r\"\"\"\n        \u8fd9\u4e2a\u503c\u53ef\u80fd\u4f1a\u5927\u4e8e\u5b9e\u9645\u7684embedding\u77e9\u9635\u7684\u5927\u5c0f\u3002\n        :return:\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "_word_vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.get_word_vocab": [[198, 205], ["None"], "methods", ["None"], ["", "def", "get_word_vocab", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8fd4\u56deembedding\u7684\u8bcd\u5178\u3002\n\n        :return: Vocabulary\n        \"\"\"", "\n", "return", "self", ".", "_word_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size": [[206, 209], ["torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "Size", "(", "self", ".", "num_embeddings", ",", "self", ".", "_embed_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.forward": [[210, 213], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2Embedding.__init__": [[50, 96], ["contextual_embedding.ContextualEmbedding.__init__", "kwargs.get", "kwargs.get", "kwargs.get", "gpt2_embedding._GPT2Model", "model_dir_or_name.lower", "len", "core.logger.warning", "warnings.warn", "model_dir_or_name.lower"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["def", "__init__", "(", "self", ",", "vocab", ":", "Vocabulary", ",", "model_dir_or_name", ":", "str", "=", "'en'", ",", "layers", ":", "str", "=", "'-1'", ",", "\n", "pool_method", ":", "str", "=", "'first'", ",", "dropout", "=", "0", ",", "requires_grad", ":", "bool", "=", "True", ",", "\n", "auto_truncate", ":", "bool", "=", "False", ",", "language_model", ":", "bool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        :param ~fastNLP.Vocabulary vocab: \u8bcd\u8868\n        :param str model_dir_or_name: \u6a21\u578b\u6240\u5728\u76ee\u5f55\u6216\u8005\u6a21\u578b\u7684\u540d\u79f0\u3002\u5f53\u4f20\u5165\u6a21\u578b\u6240\u5728\u76ee\u5f55\u65f6\uff0c\u76ee\u5f55\u4e2d\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u8bcd\u8868\u6587\u4ef6(\u4ee5.txt\u4f5c\u4e3a\u540e\u7f00\u540d),\n            \u6743\u91cd\u6587\u4ef6(\u4ee5.bin\u4f5c\u4e3a\u6587\u4ef6\u540e\u7f00\u540d), \u914d\u7f6e\u6587\u4ef6(\u4ee5.json\u4f5c\u4e3a\u540e\u7f00\u540d)\u3002\n        :param str layers: \u8f93\u51faembedding\u8868\u793a\u6765\u81ea\u4e8e\u54ea\u4e9b\u5c42\uff0c\u4e0d\u540c\u5c42\u7684\u7ed3\u679c\u6309\u7167layers\u4e2d\u7684\u987a\u5e8f\u5728\u6700\u540e\u4e00\u7ef4concat\u8d77\u6765\u3002\u4ee5','\u9694\u5f00\u5c42\u6570\uff0c\u5c42\u7684\u5e8f\u53f7\u662f\n            \u4ece0\u5f00\u59cb\uff0c\u53ef\u4ee5\u4ee5\u8d1f\u6570\u53bb\u7d22\u5f15\u5012\u6570\u51e0\u5c42\u3002\n        :param str pool_method: \u56e0\u4e3a\u5728bert\u4e2d\uff0c\u6bcf\u4e2aword\u4f1a\u88ab\u8868\u793a\u4e3a\u591a\u4e2aword pieces, \u5f53\u83b7\u53d6\u4e00\u4e2aword\u7684\u8868\u793a\u7684\u65f6\u5019\uff0c\u600e\u6837\u4ece\u5b83\u7684word pieces\n            \u4e2d\u8ba1\u7b97\u5f97\u5230\u5b83\u5bf9\u5e94\u7684\u8868\u793a\u3002\u652f\u6301 ``last`` , ``first`` , ``avg`` , ``max``\u3002\n        :param float dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5bf9embedding\u7684\u8868\u793a\u8fdb\u884cDropout\u30020.1\u5373\u968f\u673a\u5c0610%\u7684\u503c\u7f6e\u4e3a0\u3002\n        :param bool requires_grad: \u662f\u5426\u9700\u8981gradient\u4ee5\u66f4\u65b0Bert\u7684\u6743\u91cd\u3002\n        :param bool auto_truncate: \u5f53\u53e5\u5b50words\u62c6\u5206\u4e3aword pieces\u957f\u5ea6\u8d85\u8fc7bert\u6700\u5927\u5141\u8bb8\u957f\u5ea6(\u4e00\u822c\u4e3a512), \u81ea\u52a8\u622a\u6389\u62c6\u5206\u540e\u7684\u8d85\u8fc7510\u4e2a\n            word pieces\u540e\u7684\u5185\u5bb9\uff0c\u5e76\u5c06\u7b2c512\u4e2aword piece\u7f6e\u4e3a[SEP]\u3002\u8d85\u8fc7\u957f\u5ea6\u7684\u90e8\u5206\u7684encode\u7ed3\u679c\u76f4\u63a5\u5168\u90e8\u7f6e\u96f6\u3002\u4e00\u822c\u4ec5\u6709\u53ea\u4f7f\u7528[CLS]\n            \u6765\u8fdb\u884c\u5206\u7c7b\u7684\u4efb\u52a1\u5c06auto_truncate\u7f6e\u4e3aTrue\u3002\n        :param bool language_model: \u662f\u5426\u8ba1\u7b97gpt2\u7684lm loss\uff0c\u53ef\u4ee5\u901a\u8fc7get_loss()\u83b7\u53d6\uff0c\u8f93\u5165\u4e00\u4e2abatch\u4e4b\u540e\u7684get_loss\u8c03\u7528\u5373\u4e3abatch\u7684language\n            model\u7684loss\n        :param **kwargs:\n            bool only_use_pretrain_bpe: \u4ec5\u4f7f\u7528\u51fa\u73b0\u5728pretrain\u8bcd\u8868\u4e2d\u7684bpe\uff0c\u5982\u679c\u8be5\u8bcd\u6ca1\u6cd5tokenize\u5219\u4f7f\u7528unk\u3002\u5982\u679cembedding\u4e0d\u9700\u8981\u66f4\u65b0\n                \u5efa\u8bae\u8bbe\u7f6e\u4e3aTrue\u3002\n            int min_freq: \u4ec5\u5728only_use_pretrain_bpe\u4e3aFalse\u6709\u6548\uff0c\u5927\u4e8e\u7b49\u4e8e\u8be5\u6b21\u6570\u7684\u8bcd\u4f1a\u88ab\u65b0\u52a0\u5165GPT2\u7684BPE\u8bcd\u8868\u4e2d\n            bool truncate_embed: \u662f\u5426\u4ec5\u4fdd\u7559\u7528\u5230\u7684bpe(\u8fd9\u6837\u4f1a\u51cf\u5185\u5b58\u5360\u7528\u548c\u52a0\u5feb\u901f\u5ea6)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "vocab", ",", "word_dropout", "=", "0", ",", "dropout", "=", "dropout", ")", "\n", "\n", "if", "model_dir_or_name", ".", "lower", "(", ")", "in", "PRETRAINED_BERT_MODEL_DIR", ":", "\n", "            ", "if", "'cn'", "in", "model_dir_or_name", ".", "lower", "(", ")", "and", "pool_method", "not", "in", "(", "'first'", ",", "'last'", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "\"For Chinese GPT, pooled_method should choose from 'first', 'last' in order to achieve\"", "\n", "\" faster speed.\"", ")", "\n", "warnings", ".", "warn", "(", "\"For Chinese GPT, pooled_method should choose from 'first', 'last' in order to achieve\"", "\n", "\" faster speed.\"", ")", "\n", "\n", "", "", "only_use_pretrain_bpe", "=", "kwargs", ".", "get", "(", "'only_use_pretrain_bpe'", ",", "False", ")", "\n", "truncate_embed", "=", "kwargs", ".", "get", "(", "'truncate_embed'", ",", "True", ")", "\n", "min_freq", "=", "kwargs", ".", "get", "(", "'min_freq'", ",", "1", ")", "\n", "\n", "self", ".", "lm_loss", "=", "language_model", "\n", "self", ".", "model", "=", "_GPT2Model", "(", "model_dir_or_name", "=", "model_dir_or_name", ",", "vocab", "=", "vocab", ",", "layers", "=", "layers", ",", "\n", "pool_method", "=", "pool_method", ",", "auto_truncate", "=", "auto_truncate", ",", "language_model", "=", "language_model", ",", "\n", "only_use_pretrain_bpe", "=", "only_use_pretrain_bpe", ",", "truncate_embed", "=", "truncate_embed", ",", "\n", "min_freq", "=", "min_freq", ")", "\n", "\n", "self", ".", "requires_grad", "=", "requires_grad", "\n", "self", ".", "_embed_size", "=", "len", "(", "self", ".", "model", ".", "layers", ")", "*", "self", ".", "model", ".", "encoder", ".", "config", ".", "n_embd", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2Embedding._delete_model_weights": [[97, 99], ["None"], "methods", ["None"], ["", "def", "_delete_model_weights", "(", "self", ")", ":", "\n", "        ", "del", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2Embedding.forward": [[100, 115], ["gpt2_embedding.GPT2Embedding._get_sent_reprs", "gpt2_embedding.GPT2Embedding.model", "torch.cat", "gpt2_embedding.GPT2Embedding.dropout", "gpt2_embedding.GPT2Embedding.dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.contextual_embedding.ContextualEmbedding._get_sent_reprs", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.model", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "\"\"\"\n        \u8ba1\u7b97words\u7684bert embedding\u8868\u793a\u3002\u8ba1\u7b97\u4e4b\u524d\u4f1a\u5728\u6bcf\u53e5\u8bdd\u7684\u5f00\u59cb\u589e\u52a0[CLS]\u5728\u7ed3\u675f\u589e\u52a0[SEP], \u5e76\u6839\u636einclude_cls_sep\u5224\u65ad\u8981\u4e0d\u8981\n            \u5220\u9664\u8fd9\u4e24\u4e2atoken\u7684\u8868\u793a\u3002\n\n        :param torch.LongTensor words: [batch_size, max_len]\n        :return: torch.FloatTensor. batch_size x max_len x (768*len(self.layers))\n        \"\"\"", "\n", "outputs", "=", "self", ".", "_get_sent_reprs", "(", "words", ")", "\n", "if", "outputs", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "dropout", "(", "outputs", ")", "\n", "", "outputs", "=", "self", ".", "model", "(", "words", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "[", "*", "outputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "self", ".", "dropout", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2Embedding.drop_word": [[116, 127], ["torch.no_grad", "torch.full_like", "torch.bernoulli().eq", "words.masked_fill.masked_fill.masked_fill", "torch.bernoulli"], "methods", ["None"], ["", "def", "drop_word", "(", "self", ",", "words", ")", ":", "\n", "        ", "\"\"\"\n        :param torch.LongTensor words: batch_size x max_len\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "word_dropout", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "mask", "=", "torch", ".", "full_like", "(", "words", ",", "fill_value", "=", "self", ".", "word_dropout", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "words", ".", "device", ")", "\n", "mask", "=", "torch", ".", "bernoulli", "(", "mask", ")", ".", "eq", "(", "1", ")", "# dropout_word\u8d8a\u5927\uff0c\u8d8a\u591a\u4f4d\u7f6e\u4e3a1", "\n", "words", "=", "words", ".", "masked_fill", "(", "mask", ",", "self", ".", "_word_unk_index", ")", "\n", "", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2Embedding.get_lm_loss": [[128, 144], ["hasattr", "delattr", "RuntimeError", "RuntimeError"], "methods", ["None"], ["", "def", "get_lm_loss", "(", "self", ",", "release", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        \u5f53language_model=True\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8be5\u63a5\u53e3\u83b7\u53d6\u5f53\u524dbatch\u7684language model loss\u7684\u5927\u5c0f\n\n        :param bool release: \u5982\u679c\u4e3aTrue\uff0c\u83b7\u53d6\u4e86lm_loss\u540e\u5728\u4e0b\u4e00\u6b21forward\u5b8c\u6210\u4e4b\u524d\u90fd\u65e0\u6cd5\u83b7\u53d6lm_loss\u4e86\n        :return: torch.FloatTensor([])\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'_lm_loss_value'", ")", ":", "\n", "            ", "lm_loss_value", "=", "self", ".", "model", ".", "_lm_loss_value", "\n", "if", "release", ":", "\n", "                ", "delattr", "(", "self", ".", "model", ",", "'_lm_loss_value'", ")", "\n", "", "return", "lm_loss_value", "\n", "", "elif", "self", ".", "lm_loss", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Make sure you have passed a batch into GPT2Embdding before accessing loss.\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Initialize your GPT2Embedding with language_model=True.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.__init__": [[155, 176], ["torch.nn.Module.__init__", "gpt2_embedding._GPT2WordPieceModel", "torch.nn.Dropout", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "model_dir_or_name", ":", "str", "=", "'en'", ",", "layers", ":", "str", "=", "'-1'", ",", "\n", "word_dropout", "=", "0", ",", "dropout", "=", "0", ",", "requires_grad", ":", "bool", "=", "True", ",", "language_model", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param str model_dir_or_name: \u6a21\u578b\u6240\u5728\u76ee\u5f55\u6216\u8005\u6a21\u578b\u7684\u540d\u79f0\u3002\n        :param str,list layers: \u6700\u7ec8\u7ed3\u679c\u4e2d\u7684\u8868\u793a\u3002\u4ee5','\u9694\u5f00\u5c42\u6570\uff0c\u53ef\u4ee5\u4ee5\u8d1f\u6570\u53bb\u7d22\u5f15\u5012\u6570\u51e0\u5c42\n        :param float word_dropout: \u591a\u5927\u6982\u7387\u5c06word piece\u7f6e\u4e3a<|endoftext|>\n        :param float dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5bf9embedding\u7684\u8868\u793a\u8fdb\u884cDropout\u30020.1\u5373\u968f\u673a\u5c0610%\u7684\u503c\u7f6e\u4e3a0\u3002\n        :param bool language_model: \u662f\u5426\u4f7f\u7528language model\n        :param bool requires_grad: \u662f\u5426\u9700\u8981gradient\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "_GPT2WordPieceModel", "(", "model_dir_or_name", "=", "model_dir_or_name", ",", "layers", "=", "layers", ",", "language_model", "=", "language_model", ")", "\n", "self", ".", "_wordpiece_pad_index", "=", "self", ".", "model", ".", "_wordpiece_pad_index", "\n", "self", ".", "_embed_size", "=", "len", "(", "self", ".", "model", ".", "layers", ")", "*", "self", ".", "model", ".", "encoder", ".", "config", ".", "n_embd", "\n", "self", ".", "requires_grad", "=", "requires_grad", "\n", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "_wordpiece_endoftext_index", "=", "self", ".", "model", ".", "_endoftext_index", "\n", "self", ".", "word_dropout", "=", "word_dropout", "\n", "self", ".", "language_model", "=", "language_model", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.embed_size": [[177, 180], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "embed_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embed_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.embedding_dim": [[181, 184], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "embedding_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embed_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.num_embedding": [[185, 188], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_embedding", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "encoder", ".", "config", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.index_datasets": [[189, 202], ["gpt2_embedding.GPT2WordPieceEncoder.model.index_datasets"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding._GPT2WordPieceModel.index_datasets"], ["", "def", "index_datasets", "(", "self", ",", "*", "datasets", ",", "field_name", ",", "add_endoftext", "=", "False", ",", "add_prefix_space", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        \u4f7f\u7528bert\u7684tokenizer\u65b0\u751f\u6210word_pieces\u5217\u52a0\u5165\u5230datasets\u4e2d\uff0c\u5e76\u5c06\u4ed6\u4eec\u8bbe\u7f6e\u4e3ainput,\u4e14\u5c06word_pieces\u8fd9\u4e00\u5217\u7684pad value\u8bbe\u7f6e\u4e3a\u4e86\n        bert\u7684pad value\u3002\n\n        :param ~fastNLP.DataSet datasets: DataSet\u5bf9\u8c61\n        :param list[str] field_name: \u57fa\u4e8e\u54ea\u4e00\u5217\u7684\u5185\u5bb9\u751f\u6210word_pieces\u5217\u3002\u8fd9\u4e00\u5217\u4e2d\u6bcf\u4e2a\u6570\u636e\u5e94\u8be5\u662fList[str]\u7684\u5f62\u5f0f\u3002\n        :param bool add_endoftext: \u5728\u53e5\u5b50\u5f00\u5934\u52a0\u5165<|endofline|>\u3002\n        :param bool add_prefix_space: \u662f\u5426\u5728\u53e5\u9996\u589e\u52a0\u7a7a\u683c\n        :return:\n        \"\"\"", "\n", "self", ".", "model", ".", "index_datasets", "(", "*", "datasets", ",", "field_name", "=", "field_name", ",", "add_endoftext", "=", "add_endoftext", ",", "\n", "add_prefix_space", "=", "add_prefix_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.forward": [[203, 216], ["gpt2_embedding.GPT2WordPieceEncoder.model", "torch.cat", "gpt2_embedding.GPT2WordPieceEncoder.dropout_layer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.model"], ["", "def", "forward", "(", "self", ",", "word_pieces", ",", "token_type_ids", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        \u8ba1\u7b97words\u7684bert embedding\u8868\u793a\u3002\u4f20\u5165\u7684words\u4e2d\u5e94\u8be5\u5728\u5f00\u5934\u5305\u542b<|endofline|>\u3002\n\n        :param word_pieces: batch_size x max_len\n        :param token_type_ids: batch_size x max_len,\n        :return: torch.FloatTensor.\n        \"\"\"", "\n", "\n", "outputs", "=", "self", ".", "model", "(", "word_pieces", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "[", "*", "outputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "self", ".", "dropout_layer", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.drop_word": [[217, 231], ["torch.no_grad", "torch.full_like", "torch.bernoulli().eq", "words.masked_fill.masked_fill.ne", "words.masked_fill.ne.__and__", "words.masked_fill.masked_fill.masked_fill", "torch.bernoulli"], "methods", ["None"], ["", "def", "drop_word", "(", "self", ",", "words", ")", ":", "\n", "        ", "\"\"\"\n\n        :param torch.LongTensor words: batch_size x max_len\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "word_dropout", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "mask", "=", "torch", ".", "full_like", "(", "words", ",", "fill_value", "=", "self", ".", "word_dropout", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "words", ".", "device", ")", "\n", "mask", "=", "torch", ".", "bernoulli", "(", "mask", ")", ".", "eq", "(", "1", ")", "# dropout_word\u8d8a\u5927\uff0c\u8d8a\u591a\u4f4d\u7f6e\u4e3a1", "\n", "endoftext_mask", "=", "words", ".", "ne", "(", "self", ".", "_wordpiece_endoftext_index", ")", "\n", "mask", "=", "endoftext_mask", ".", "__and__", "(", "mask", ")", "# pad\u7684\u4f4d\u7f6e\u4e0d\u4e3aunk", "\n", "words", "=", "words", ".", "masked_fill", "(", "mask", ",", "self", ".", "_wordpiece_unk_index", ")", "\n", "", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.generate_from_str": [[232, 280], ["core.utils._get_model_device", "torch.LongTensor.to", "gpt2_embedding.GPT2WordPieceEncoder.model.encoder.generate().squeeze", "range", "len", "torch.LongTensor", "isinstance", "gpt2_embedding.GPT2WordPieceEncoder.model.convert_words_to_word_pieces", "torch.LongTensor", "gpt2_embedding.GPT2WordPieceEncoder.dim", "len", "gpt2_embedding.GPT2WordPieceEncoder.model.tokenizer.convert_tokens_to_string", "output_strs.append", "gpt2_embedding.GPT2WordPieceEncoder.model.encoder.generate", "gpt2_embedding.GPT2WordPieceEncoder.model.tokenizer.convert_ids_to_tokens", "outputs[].tolist"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_model_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding._GPT2WordPieceModel.convert_words_to_word_pieces", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_string", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.SequenceGenerator.generate", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_ids_to_tokens"], ["", "def", "generate_from_str", "(", "self", ",", "text", "=", "''", ",", "max_len", "=", "40", ",", "do_sample", "=", "True", ",", "num_beams", "=", "1", ",", "temperature", "=", "1", ",", "top_k", "=", "50", ",", "top_p", "=", "1.0", ",", "\n", "repetition_penalty", "=", "1.0", ",", "length_penalty", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n\n        :param str text: \u6545\u4e8b\u7684\u5f00\u5934\n        :param int max_len: \u751f\u6210\u591a\u957f\u7684\u53e5\u5b50\n        :param bool do_sample: \u662f\u5426\u4f7f\u7528\u91c7\u6837\u7684\u65b9\u5f0f\u751f\u6210\uff0c\u5982\u679c\u4f7f\u7528\u91c7\u6837\uff0c\u76f8\u540c\u7684\u53c2\u6570\u53ef\u80fd\u51fa\u73b0\u4e0d\u540c\u7684\u53e5\u5b50\u3002\n        :param int num_beams: \u4f7f\u7528\u591a\u5927\u7684beam size\n        :param float temperature: \u7528\u4ee5\u8c03\u8282\u91c7\u6837\u5206\u5e03\u7684\n        :param int top_k: \u53ea\u4fdd\u7559\u6b64\u8868\u4e2dtop_k\u4e2a\u8bcd\u8fdb\u884c\u751f\u6210\u3002\u8303\u56f41-infinity\n        :param float top_p: \u4fdd\u7559\u6982\u7387\u7d2f\u79ef\u4e3atop_p\u7684\u8bcd\u6c47\uff0c\u8303\u56f40-1.\n        :param float repetition_penalty: \u5bf9\u91cd\u590dtoken\u7684\u60e9\u7f5a\n        :param float length_penalty: \u60e9\u7f5a\u8fc7\u957f\u7684\u53e5\u5b50\n        :return: list[str]\n        \"\"\"", "\n", "if", "len", "(", "text", ")", "==", "0", ":", "\n", "            ", "word_pieces", "=", "torch", ".", "LongTensor", "(", "[", "[", "self", ".", "model", ".", "tokenizer", ".", "bos_index", "]", "]", ")", "\n", "start_idx", "=", "1", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "text", ",", "str", ")", ",", "\"Only string input allowed.\"", "\n", "assert", "self", ".", "language_model", ",", "\"You must set `language_model=True`.\"", "\n", "word_pieces", "=", "self", ".", "model", ".", "convert_words_to_word_pieces", "(", "text", ",", "add_prefix_space", "=", "True", ")", "\n", "word_pieces", "=", "torch", ".", "LongTensor", "(", "[", "word_pieces", "]", ")", "\n", "start_idx", "=", "0", "\n", "", "device", "=", "_get_model_device", "(", "self", ")", "\n", "word_pieces", "=", "word_pieces", ".", "to", "(", "device", ")", "\n", "outputs", "=", "self", ".", "model", ".", "encoder", ".", "generate", "(", "input_ids", "=", "word_pieces", ",", "\n", "max_length", "=", "max_len", ",", "\n", "do_sample", "=", "do_sample", ",", "\n", "num_beams", "=", "num_beams", ",", "\n", "temperature", "=", "temperature", ",", "\n", "top_k", "=", "top_k", ",", "\n", "top_p", "=", "top_p", ",", "\n", "repetition_penalty", "=", "repetition_penalty", ",", "\n", "bos_token_id", "=", "self", ".", "model", ".", "tokenizer", ".", "bos_index", ",", "\n", "pad_token_id", "=", "self", ".", "model", ".", "tokenizer", ".", "eos_index", ",", "# \u4f7f\u7528<|endoftext|>\u4ee3\u66ffpad", "\n", "eos_token_ids", "=", "self", ".", "model", ".", "tokenizer", ".", "eos_index", ",", "\n", "length_penalty", "=", "length_penalty", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "output_strs", "=", "[", "]", "\n", "if", "outputs", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "outputs", "=", "outputs", "[", "None", "]", "\n", "", "outputs", "=", "outputs", "[", ":", ",", "start_idx", ":", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "outputs", ")", ")", ":", "\n", "            ", "str_", "=", "self", ".", "model", ".", "tokenizer", ".", "convert_tokens_to_string", "(", "self", ".", "model", ".", "tokenizer", ".", "convert_ids_to_tokens", "(", "outputs", "[", "i", "]", ".", "tolist", "(", ")", ")", ")", "\n", "output_strs", ".", "append", "(", "str_", ")", "\n", "\n", "", "return", "output_strs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.generate": [[281, 297], ["None"], "methods", ["None"], ["", "def", "generate", "(", "self", ",", "word_pieces", "=", "None", ",", "max_len", "=", "40", ",", "do_sample", "=", "True", ",", "num_beams", "=", "1", ",", "temperature", "=", "1", ",", "top_k", "=", "50", ",", "top_p", "=", "1.0", ",", "\n", "repetition_penalty", "=", "1.0", ",", "length_penalty", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n\n        :param torch.LongTensor,None word_pieces: \u5982\u679c\u4f20\u5165tensor\uff0cshape\u5e94\u8be5\u4e3abatch_size x start_len; \u5982\u679c\u4f20\u5165None\uff0c\u4f1a\u968f\u673a\u751f\u6210\u3002\n        :param int max_len: \u751f\u6210\u591a\u957f\u7684\u53e5\u5b50\n        :param bool do_sample: \u662f\u5426\u4f7f\u7528\u91c7\u6837\u7684\u65b9\u5f0f\u751f\u6210\uff0c\u5982\u679c\u4f7f\u7528\u91c7\u6837\uff0c\u76f8\u540c\u7684\u53c2\u6570\u53ef\u80fd\u51fa\u73b0\u4e0d\u540c\u7684\u53e5\u5b50\u3002\n        :param int num_beams: \u4f7f\u7528\u591a\u5927\u7684beam size\n        :param float temperature: \u7528\u4ee5\u8c03\u8282\u91c7\u6837\u5206\u5e03\u7684\n        :param int top_k: \u53ea\u4fdd\u7559\u6b64\u8868\u4e2dtop_k\u4e2a\u8bcd\u8fdb\u884c\u751f\u6210\u3002\u8303\u56f41-infinity\n        :param float top_p: \u4fdd\u7559\u6982\u7387\u7d2f\u79ef\u4e3atop_p\u7684\u8bcd\u6c47\uff0c\u8303\u56f40-1.\n        :param float repetition_penalty: \u5bf9\u91cd\u590dtoken\u7684\u60e9\u7f5a\n        :param float length_penalty: \u60e9\u7f5a\u8fc7\u957f\u7684\u53e5\u5b50\n        :return:\n        \"\"\"", "\n", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.get_lm_loss": [[298, 314], ["hasattr", "delattr", "RuntimeError", "RuntimeError"], "methods", ["None"], ["", "def", "get_lm_loss", "(", "self", ",", "release", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        \u5f53language_model=True\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u8be5\u63a5\u53e3\u83b7\u53d6\u5f53\u524dbatch\u7684language model loss\u7684\u5927\u5c0f\n\n        :param bool release: \u5982\u679c\u4e3aTrue\uff0c\u83b7\u53d6\u4e86lm_loss\u540e\u5728\u4e0b\u4e00\u6b21forward\u5b8c\u6210\u4e4b\u524d\u90fd\u65e0\u6cd5\u83b7\u53d6lm_loss\u4e86\n        :return: torch.FloatTensor([])\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'_lm_loss_value'", ")", ":", "\n", "            ", "lm_loss_value", "=", "self", ".", "model", ".", "_lm_loss_value", "\n", "if", "release", ":", "\n", "                ", "delattr", "(", "self", ".", "model", ",", "'_lm_loss_value'", ")", "\n", "", "return", "lm_loss_value", "\n", "", "elif", "self", ".", "lm_loss", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Make sure you have passed a batch into GPT2Embdding before accessing loss.\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Initialize your GPT2Embedding with language_model=True.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding._GPT2Model.__init__": [[317, 429], ["torch.nn.Module.__init__", "modules.tokenizer.GPT2Tokenizer.from_pretrained", "isinstance", "core.logger.info", "torch.nn.Embedding", "collections.OrderedDict", "enumerate", "word_piece_dict.keys", "gpt2_embedding._GPT2Model.tokenzier._reinit_on_new_vocab", "gpt2_embedding._GPT2Model.encoder.set_input_embeddings", "gpt2_embedding._GPT2Model.encoder.tie_weights", "len", "gpt2_embedding._GPT2Model.tokenzier.encoder.get", "gpt2_embedding._GPT2Model.tokenzier.encoder.get", "numpy.array", "gpt2_embedding._GPT2Model.register_buffer", "core.logger.debug", "modules.encoder.gpt2.GPT2LMHeadModel.from_pretrained", "modules.encoder.gpt2.GPT2Model.from_pretrained", "isinstance", "gpt2_embedding._GPT2Model.extend", "gpt2_embedding._GPT2Model.encoder.get_input_embeddings", "word_piece_dict.update", "len", "original_embed.size", "word_piece_dict.pop", "gpt2_embedding._GPT2Model.tokenzier.tokenize", "gpt2_embedding._GPT2Model.tokenzier.convert_tokens_to_ids", "word_to_wordpieces.append", "word_pieces_lengths.append", "torch.LongTensor", "int", "list", "TypeError", "gpt2_embedding._GPT2Model.tokenzier.tokenize", "len", "core.logger.info", "core.logger.info", "len", "len", "len", "map", "vocab._is_word_no_create_entry", "layers.split", "vocab._is_word_no_create_entry"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer._reinit_on_new_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Model.set_input_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.tie_weights", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2LMHeadModel.get_input_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._is_word_no_create_entry", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._is_word_no_create_entry"], ["    ", "def", "__init__", "(", "self", ",", "model_dir_or_name", ",", "vocab", ",", "layers", ",", "pool_method", "=", "'first'", ",", "auto_truncate", "=", "True", ",", "language_model", "=", "False", ",", "\n", "only_use_pretrain_bpe", "=", "False", ",", "min_freq", "=", "1", ",", "truncate_embed", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tokenzier", "=", "GPT2Tokenizer", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "if", "language_model", ":", "\n", "            ", "self", ".", "encoder", "=", "GPT2LMHeadModel", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "GPT2Model", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "\n", "", "self", ".", "lm_loss", "=", "language_model", "\n", "self", ".", "_max_position_embeddings", "=", "self", ".", "encoder", ".", "config", ".", "max_position_embeddings", "\n", "#  \u68c0\u67e5encoder_layer_number\u662f\u5426\u5408\u7406", "\n", "encoder_layer_number", "=", "self", ".", "encoder", ".", "config", ".", "n_layer", "\n", "if", "isinstance", "(", "layers", ",", "list", ")", ":", "\n", "            ", "self", ".", "layers", "=", "[", "int", "(", "l", ")", "for", "l", "in", "layers", "]", "\n", "", "elif", "isinstance", "(", "layers", ",", "str", ")", ":", "\n", "            ", "self", ".", "layers", "=", "list", "(", "map", "(", "int", ",", "layers", ".", "split", "(", "','", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"`layers` only supports str or list[int]\"", ")", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "layer", "<", "0", ":", "\n", "                ", "assert", "-", "layer", "<=", "encoder_layer_number", ",", "f\"The layer index:{layer} is out of scope for \"", "f\"a GPT2 model with {encoder_layer_number} layers.\"", "\n", "", "else", ":", "\n", "                ", "assert", "layer", "<=", "encoder_layer_number", ",", "f\"The layer index:{layer} is out of scope for \"", "f\"a GPT2 model with {encoder_layer_number} layers.\"", "\n", "\n", "", "", "assert", "pool_method", "in", "(", "'avg'", ",", "'max'", ",", "'first'", ",", "'last'", ")", "\n", "self", ".", "pool_method", "=", "pool_method", "\n", "self", ".", "auto_truncate", "=", "auto_truncate", "\n", "\n", "# \u5c06\u6240\u6709vocab\u4e2dword\u7684wordpiece\u8ba1\u7b97\u51fa\u6765, \u9700\u8981\u989d\u5916\u8003\u8651<s>\u548c</s>", "\n", "logger", ".", "info", "(", "\"Start to generate word pieces for word.\"", ")", "\n", "# \u7b2c\u4e00\u6b65\u7edf\u8ba1\u51fa\u9700\u8981\u7684word_piece, \u7136\u540e\u521b\u5efa\u65b0\u7684embed\u548cword_piece_vocab, \u7136\u540e\u586b\u5165\u503c", "\n", "word_piece_dict", "=", "{", "'<|endoftext|>'", ":", "1", "}", "# \u7528\u5230\u7684word_piece\u4ee5\u53ca\u65b0\u589e\u7684", "\n", "found_count", "=", "0", "\n", "new_add_to_bpe_vocab", "=", "0", "\n", "unsegment_count", "=", "0", "\n", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "            ", "if", "index", "==", "vocab", ".", "padding_idx", ":", "# pad\u662f\u4e2a\u7279\u6b8a\u7684\u7b26\u53f7", "\n", "                ", "word", "=", "'<|endoftext|>'", "\n", "", "elif", "index", "==", "vocab", ".", "unknown_idx", ":", "\n", "                ", "word", "=", "'<|endoftext|>'", "\n", "# _words = self.tokenzier.basic_tokenizer._tokenize_chinese_chars(word).split()  # \u8fd9\u91cc\u6682\u65f6\u4e0d\u8003\u8651\u4e2d\u6587\u5185\u5bb9", "\n", "", "word_pieces", "=", "[", "]", "\n", "word_pieces", ".", "extend", "(", "self", ".", "tokenzier", ".", "tokenize", "(", "word", ",", "add_prefix_space", "=", "True", ")", ")", "\n", "if", "len", "(", "word_pieces", ")", "==", "1", ":", "\n", "                ", "if", "not", "vocab", ".", "_is_word_no_create_entry", "(", "word", ")", ":", "# \u5982\u679c\u662ftrain\u4e2d\u7684\u503c, \u4f46\u662f\u5374\u6ca1\u6709\u627e\u5230", "\n", "                    ", "if", "index", "not", "in", "(", "vocab", ".", "unknown_idx", ",", "vocab", ".", "padding_idx", ")", "and", "word_pieces", "[", "0", "]", "==", "'<|endoftext|>'", ":", "# \u8bf4\u660e\u8fd9\u4e2a\u8bcd\u4e0d\u5728\u539f\u59cb\u7684word\u91cc\u9762", "\n", "                        ", "if", "vocab", ".", "word_count", "[", "word", "]", ">=", "min_freq", "and", "not", "vocab", ".", "_is_word_no_create_entry", "(", "\n", "word", ")", "and", "not", "only_use_pretrain_bpe", ":", "# \u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u8fd9\u4e2a\u6b21\u6570\u624d\u65b0\u589e", "\n", "                            ", "word_piece_dict", "[", "word", "]", "=", "1", "# \u65b0\u589e\u4e00\u4e2a\u503c", "\n", "new_add_to_bpe_vocab", "+=", "1", "\n", "", "unsegment_count", "+=", "1", "\n", "continue", "\n", "", "", "", "for", "word_piece", "in", "word_pieces", ":", "\n", "                ", "word_piece_dict", "[", "word_piece", "]", "=", "1", "\n", "", "found_count", "+=", "1", "\n", "\n", "", "if", "unsegment_count", ">", "0", ":", "\n", "            ", "if", "only_use_pretrain_bpe", "or", "new_add_to_bpe_vocab", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "f\"{unsegment_count} words are unsegmented.\"", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "f\"{unsegment_count} words are unsegmented. Among them, {new_add_to_bpe_vocab} added to the BPE vocab.\"", ")", "\n", "\n", "", "", "original_embed", "=", "self", ".", "encoder", ".", "get_input_embeddings", "(", ")", ".", "weight", "\n", "# \u7279\u6b8a\u8bcd\u6c47\u8981\u7279\u6b8a\u5904\u7406", "\n", "if", "not", "truncate_embed", ":", "# \u5982\u679c\u4e0d\u5220\u9664\u7684\u8bdd\u9700\u8981\u5c06\u5df2\u6709\u7684\u52a0\u4e0a", "\n", "            ", "word_piece_dict", ".", "update", "(", "self", ".", "tokenzier", ".", "encoder", ")", "\n", "\n", "", "embed", "=", "nn", ".", "Embedding", "(", "len", "(", "word_piece_dict", ")", ",", "original_embed", ".", "size", "(", "1", ")", ")", "# \u65b0\u7684embed", "\n", "new_word_piece_vocab", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "index", ",", "token", "in", "enumerate", "(", "[", "'<|endoftext|>'", "]", ")", ":", "\n", "            ", "index", "=", "word_piece_dict", ".", "pop", "(", "token", ",", "None", ")", "\n", "if", "index", "is", "not", "None", ":", "\n", "                ", "new_word_piece_vocab", "[", "token", "]", "=", "len", "(", "new_word_piece_vocab", ")", "\n", "embed", ".", "weight", ".", "data", "[", "new_word_piece_vocab", "[", "token", "]", "]", "=", "original_embed", "[", "self", ".", "tokenzier", ".", "encoder", "[", "token", "]", "]", "\n", "\n", "", "", "for", "token", "in", "word_piece_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "token", "not", "in", "new_word_piece_vocab", ":", "\n", "                ", "new_word_piece_vocab", "[", "token", "]", "=", "len", "(", "new_word_piece_vocab", ")", "\n", "", "index", "=", "new_word_piece_vocab", "[", "token", "]", "\n", "if", "token", "in", "self", ".", "tokenzier", ".", "encoder", ":", "\n", "                ", "embed", ".", "weight", ".", "data", "[", "index", "]", "=", "original_embed", "[", "self", ".", "tokenzier", ".", "encoder", "[", "token", "]", "]", "\n", "", "else", ":", "\n", "                ", "embed", ".", "weight", ".", "data", "[", "index", "]", "=", "original_embed", "[", "self", ".", "tokenzier", ".", "encoder", "[", "'<|endoftext|>'", "]", "]", "\n", "\n", "", "", "self", ".", "tokenzier", ".", "_reinit_on_new_vocab", "(", "new_word_piece_vocab", ")", "\n", "self", ".", "encoder", ".", "set_input_embeddings", "(", "embed", ")", "\n", "self", ".", "encoder", ".", "tie_weights", "(", ")", "\n", "self", ".", "encoder", ".", "config", ".", "vocab_size", "=", "len", "(", "new_word_piece_vocab", ")", "\n", "\n", "word_to_wordpieces", "=", "[", "]", "\n", "word_pieces_lengths", "=", "[", "]", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "            ", "if", "index", "==", "vocab", ".", "padding_idx", ":", "# pad\u662f\u4e2a\u7279\u6b8a\u7684\u7b26\u53f7", "\n", "                ", "word", "=", "'<|endoftext|>'", "\n", "", "elif", "index", "==", "vocab", ".", "unknown_idx", ":", "\n", "                ", "word", "=", "'<|endoftext|>'", "\n", "", "word_pieces", "=", "self", ".", "tokenzier", ".", "tokenize", "(", "word", ")", "\n", "word_pieces", "=", "self", ".", "tokenzier", ".", "convert_tokens_to_ids", "(", "word_pieces", ")", "\n", "word_to_wordpieces", ".", "append", "(", "word_pieces", ")", "\n", "word_pieces_lengths", ".", "append", "(", "len", "(", "word_pieces", ")", ")", "\n", "", "self", ".", "_word_pad_index", "=", "vocab", ".", "padding_idx", "\n", "self", ".", "_endoftext_index", "=", "self", ".", "tokenzier", ".", "encoder", ".", "get", "(", "'<|endoftext|>'", ")", "\n", "self", ".", "_wordpiece_pad_index", "=", "self", ".", "tokenzier", ".", "encoder", ".", "get", "(", "'<|endoftext|>'", ")", "# \u9700\u8981\u7528\u4e8e\u751f\u6210word_piece", "\n", "self", ".", "word_to_wordpieces", "=", "np", ".", "array", "(", "word_to_wordpieces", ")", "\n", "self", ".", "register_buffer", "(", "'word_pieces_lengths'", ",", "torch", ".", "LongTensor", "(", "word_pieces_lengths", ")", ")", "\n", "logger", ".", "debug", "(", "\"Successfully generate word pieces.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding._GPT2Model.forward": [[430, 526], ["gpt2_outputs[].new_zeros", "gpt2_embedding._GPT2Model.new_zeros", "gpt2_embedding._GPT2Model.cumsum", "enumerate", "torch.no_grad", "words.size", "words.ne", "words.ne.sum", "gpt2_embedding._GPT2Model.word_pieces_lengths[].masked_fill", "gpt2_embedding._GPT2Model.sum", "gpt2_embedding._GPT2Model.sum().max().item", "words.new_full", "words.new_full.clone", "torch.zeros_like", "words.cpu().numpy", "range", "torch.arange().to", "gpt2_embedding._GPT2Model.encoder", "len", "gpt2_outputs[].size", "gpt2_embedding._GPT2Model.new_zeros.masked_fill_", "batch_indexes[].expand", "torch.cat().contiguous.size", "words.ne.eq", "list", "torch.LongTensor", "word_labels[].fill_", "attn_masks[].fill_", "gpt2_embedding._GPT2Model.encoder", "gpt2_embedding._GPT2Model.new_zeros.ge", "gpt2_embedding._GPT2Model.new_zeros.masked_fill_", "batch_indexes[].expand", "torch.cat().contiguous.new_zeros", "torch.cat().contiguous", "tmp.masked_fill.masked_fill.masked_fill", "gpt2_embedding._GPT2Model.sum().max", "word_pieces_lengths.masked_fill.masked_fill.masked_fill", "RuntimeError", "min", "words.cpu", "itertools.chain", "torch.arange", "gpt2_embedding._GPT2Model.new_zeros.size", "gpt2_embedding._GPT2Model.new_zeros.ge", "torch.cat().contiguous.size", "word_mask[].eq", "tmp.masked_fill.masked_fill.masked_fill", "len", "words.ne.sum.max", "gpt2_embedding._GPT2Model.new_zeros.size", "torch.cat", "word_mask[].eq", "range", "range", "gpt2_embedding._GPT2Model.sum", "gpt2_embedding._GPT2Model.new_zeros.size", "range", "range", "words.ne.sum.max", "gpt2_embedding._GPT2Model.new_zeros.size", "torch.max", "torch.mean", "gpt2_embedding._GPT2Model.new_zeros.size", "gpt2_embedding._GPT2Model.new_zeros.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "\"\"\"\n\n        :param words: torch.LongTensor, batch_size x max_len\n        :return: num_layers x batch_size x max_len x hidden_size\u6216\u8005num_layers x batch_size x (max_len+2) x hidden_size\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_size", ",", "max_word_len", "=", "words", ".", "size", "(", ")", "\n", "word_mask", "=", "words", ".", "ne", "(", "self", ".", "_word_pad_index", ")", "# \u4e3a1\u7684\u5730\u65b9\u6709word", "\n", "seq_len", "=", "word_mask", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "batch_word_pieces_length", "=", "self", ".", "word_pieces_lengths", "[", "words", "]", ".", "masked_fill", "(", "word_mask", ".", "eq", "(", "False", ")", ",", "\n", "0", ")", "# batch_size x max_len", "\n", "word_pieces_lengths", "=", "batch_word_pieces_length", ".", "sum", "(", "dim", "=", "-", "1", ")", "# batch_size", "\n", "max_word_piece_length", "=", "batch_word_pieces_length", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "max", "(", ")", ".", "item", "(", ")", "# \u8868\u793aword piece\u7684\u957f\u5ea6(\u5305\u62ecpadding)", "\n", "if", "max_word_piece_length", ">", "self", ".", "_max_position_embeddings", ":", "\n", "                ", "if", "self", ".", "auto_truncate", ":", "\n", "                    ", "word_pieces_lengths", "=", "word_pieces_lengths", ".", "masked_fill", "(", "\n", "word_pieces_lengths", ">", "self", ".", "_max_position_embeddings", ",", "\n", "self", ".", "_max_position_embeddings", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "\"After split words into word pieces, the lengths of word pieces are longer than the \"", "\n", "f\"maximum allowed sequence length:{self._max_position_embeddings} of GPT2. You can set \"", "\n", "f\"`auto_truncate=True` for BertEmbedding to automatically truncate overlong input.\"", ")", "\n", "\n", "", "", "word_pieces", "=", "words", ".", "new_full", "(", "(", "batch_size", ",", "min", "(", "max_word_piece_length", ",", "self", ".", "_max_position_embeddings", ")", ")", ",", "\n", "fill_value", "=", "self", ".", "_wordpiece_pad_index", ")", "\n", "word_labels", "=", "word_pieces", ".", "clone", "(", ")", "\n", "attn_masks", "=", "torch", ".", "zeros_like", "(", "word_pieces", ")", "\n", "# 1. \u83b7\u53d6words\u7684word_pieces\u7684id\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684span\u8303\u56f4", "\n", "word_indexes", "=", "words", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "word_pieces_i", "=", "list", "(", "chain", "(", "*", "self", ".", "word_to_wordpieces", "[", "word_indexes", "[", "i", ",", ":", "seq_len", "[", "i", "]", "]", "]", ")", ")", "\n", "if", "self", ".", "auto_truncate", "and", "len", "(", "word_pieces_i", ")", ">", "self", ".", "_max_position_embeddings", ":", "\n", "                    ", "word_pieces_i", "=", "word_pieces_i", "[", ":", "self", ".", "_max_position_embeddings", "]", "\n", "", "word_pieces", "[", "i", ",", ":", "word_pieces_lengths", "[", "i", "]", "]", "=", "torch", ".", "LongTensor", "(", "word_pieces_i", ")", "\n", "word_labels", "[", "i", ",", "word_pieces_lengths", "[", "i", "]", ":", "]", ".", "fill_", "(", "-", "100", ")", "# \u8ba1\u7b97lm_loss\u7528\u7684", "\n", "attn_masks", "[", "i", ",", ":", "word_pieces_lengths", "[", "i", "]", "]", ".", "fill_", "(", "1", ")", "\n", "# \u6dfb\u52a0<|endoftext|>, \u9ed8\u8ba4\u4e0d\u6dfb\u52a0\u4e86", "\n", "# word_pieces[:, 0].fill_(self._endoftext_index)", "\n", "", "batch_indexes", "=", "torch", ".", "arange", "(", "batch_size", ")", ".", "to", "(", "words", ")", "\n", "# 2. \u83b7\u53d6hidden\u7684\u7ed3\u679c\uff0c\u6839\u636eword_pieces\u8fdb\u884c\u5bf9\u5e94\u7684pool\u8ba1\u7b97", "\n", "# all_outputs: [batch_size x max_len x hidden_size, batch_size x max_len x hidden_size, ...]", "\n", "", "if", "self", ".", "lm_loss", ":", "\n", "            ", "gpt2_outputs", "=", "self", ".", "encoder", "(", "word_pieces", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "attn_masks", ",", "labels", "=", "word_labels", ",", "\n", "output_attentions", "=", "False", ")", "\n", "gpt2_outputs", ",", "self", ".", "_lm_loss_value", "=", "gpt2_outputs", "[", "-", "1", "]", ",", "gpt2_outputs", "[", "0", "]", "# n_layers x batch_size x max_len x hidden_size", "\n", "", "else", ":", "\n", "            ", "gpt2_outputs", "=", "self", ".", "encoder", "(", "word_pieces", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "attn_masks", ",", "\n", "output_attentions", "=", "False", ")", "[", "-", "1", "]", "\n", "", "outputs", "=", "gpt2_outputs", "[", "-", "1", "]", ".", "new_zeros", "(", "len", "(", "self", ".", "layers", ")", ",", "batch_size", ",", "max_word_len", ",", "\n", "gpt2_outputs", "[", "-", "1", "]", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "batch_word_pieces_cum_length", "=", "batch_word_pieces_length", ".", "new_zeros", "(", "batch_size", ",", "max_word_len", "+", "1", ")", "\n", "batch_word_pieces_cum_length", "[", ":", ",", "1", ":", "]", "=", "batch_word_pieces_length", ".", "cumsum", "(", "dim", "=", "-", "1", ")", "# batch_size x max_len", "\n", "\n", "if", "self", ".", "pool_method", "==", "'first'", ":", "\n", "            ", "batch_word_pieces_cum_length", "=", "batch_word_pieces_cum_length", "[", ":", ",", ":", "seq_len", ".", "max", "(", ")", "]", "\n", "batch_word_pieces_cum_length", ".", "masked_fill_", "(", "batch_word_pieces_cum_length", ".", "ge", "(", "max_word_piece_length", ")", ",", "0", ")", "\n", "_batch_indexes", "=", "batch_indexes", "[", ":", ",", "None", "]", ".", "expand", "(", "(", "batch_size", ",", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "self", ".", "pool_method", "==", "'last'", ":", "\n", "            ", "batch_word_pieces_cum_length", "=", "batch_word_pieces_cum_length", "[", ":", ",", ":", "seq_len", ".", "max", "(", ")", "]", "-", "1", "\n", "batch_word_pieces_cum_length", ".", "masked_fill_", "(", "batch_word_pieces_cum_length", ".", "ge", "(", "max_word_piece_length", ")", ",", "0", ")", "\n", "_batch_indexes", "=", "batch_indexes", "[", ":", ",", "None", "]", ".", "expand", "(", "(", "batch_size", ",", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "", "for", "l_index", ",", "l", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "output_layer", "=", "gpt2_outputs", "[", "l", "]", "\n", "real_word_piece_length", "=", "output_layer", ".", "size", "(", "1", ")", "\n", "if", "max_word_piece_length", ">", "real_word_piece_length", ":", "# \u5982\u679c\u5b9e\u9645\u4e0a\u662f\u622a\u53d6\u51fa\u6765\u7684", "\n", "                ", "paddings", "=", "output_layer", ".", "new_zeros", "(", "batch_size", ",", "\n", "max_word_piece_length", "-", "real_word_piece_length", ",", "\n", "output_layer", ".", "size", "(", "2", ")", ")", "\n", "output_layer", "=", "torch", ".", "cat", "(", "(", "output_layer", ",", "paddings", ")", ",", "dim", "=", "1", ")", ".", "contiguous", "(", ")", "\n", "# \u4eceword_piece collapse\u5230word\u7684\u8868\u793a", "\n", "# truncate_output_layer = output_layer  # \u5220\u9664endoftext batch_size x len x hidden_size", "\n", "", "if", "self", ".", "pool_method", "==", "'first'", ":", "\n", "                ", "tmp", "=", "output_layer", "[", "_batch_indexes", ",", "batch_word_pieces_cum_length", "]", "\n", "tmp", "=", "tmp", ".", "masked_fill", "(", "word_mask", "[", ":", ",", ":", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", ",", "None", "]", ".", "eq", "(", "False", ")", ",", "0", ")", "\n", "outputs", "[", "l_index", ",", ":", ",", ":", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", "]", "=", "tmp", "\n", "", "elif", "self", ".", "pool_method", "==", "'last'", ":", "\n", "                ", "tmp", "=", "output_layer", "[", "_batch_indexes", ",", "batch_word_pieces_cum_length", "]", "\n", "tmp", "=", "tmp", ".", "masked_fill", "(", "word_mask", "[", ":", ",", ":", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", ",", "None", "]", ".", "eq", "(", "False", ")", ",", "0", ")", "\n", "outputs", "[", "l_index", ",", ":", ",", ":", "batch_word_pieces_cum_length", ".", "size", "(", "1", ")", "]", "=", "tmp", "\n", "", "elif", "self", ".", "pool_method", "==", "'max'", ":", "\n", "                ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "seq_len", "[", "i", "]", ")", ":", "\n", "                        ", "start", ",", "end", "=", "batch_word_pieces_cum_length", "[", "i", ",", "j", "]", ",", "batch_word_pieces_cum_length", "[", "i", ",", "j", "+", "1", "]", "\n", "outputs", "[", "l_index", ",", "i", ",", "j", "]", ",", "_", "=", "torch", ".", "max", "(", "output_layer", "[", "i", ",", "start", ":", "end", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "seq_len", "[", "i", "]", ")", ":", "\n", "                        ", "start", ",", "end", "=", "batch_word_pieces_cum_length", "[", "i", ",", "j", "]", ",", "batch_word_pieces_cum_length", "[", "i", ",", "j", "+", "1", "]", "\n", "outputs", "[", "l_index", ",", "i", ",", "j", "]", "=", "torch", ".", "mean", "(", "output_layer", "[", "i", ",", "start", ":", "end", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "# 3. \u6700\u7ec8\u7684embedding\u7ed3\u679c", "\n", "", "", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding._GPT2Model.get_lm_loss": [[527, 534], ["None"], "methods", ["None"], ["", "def", "get_lm_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u5f53language_model\u4e3aTrue\u65f6\uff0c\u901a\u8fc7\u8be5\u63a5\u53e3\u53ef\u4ee5\u83b7\u53d6\u6700\u8fd1\u4f20\u5165\u7684\u4e00\u4e2abatch\u7684lanuage model loss\n\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "_lm_loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding._GPT2WordPieceModel.__init__": [[542, 574], ["torch.nn.Module.__init__", "modules.tokenizer.GPT2Tokenizer.from_pretrained", "isinstance", "gpt2_embedding._GPT2WordPieceModel.tokenizer.encoder.get", "gpt2_embedding._GPT2WordPieceModel.tokenizer.encoder.get", "modules.encoder.gpt2.GPT2LMHeadModel.from_pretrained", "modules.encoder.gpt2.GPT2Model.from_pretrained", "isinstance", "int", "list", "TypeError", "map", "layers.split"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["def", "__init__", "(", "self", ",", "model_dir_or_name", ":", "str", ",", "layers", ":", "str", "=", "'-1'", ",", "language_model", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tokenizer", "=", "GPT2Tokenizer", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "if", "language_model", ":", "\n", "            ", "self", ".", "encoder", "=", "GPT2LMHeadModel", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "GPT2Model", ".", "from_pretrained", "(", "model_dir_or_name", ")", "\n", "\n", "", "self", ".", "lm_loss", "=", "language_model", "\n", "\n", "#  \u68c0\u67e5encoder_layer_number\u662f\u5426\u5408\u7406", "\n", "encoder_layer_number", "=", "self", ".", "encoder", ".", "config", ".", "n_layer", "\n", "\n", "if", "isinstance", "(", "layers", ",", "list", ")", ":", "\n", "            ", "self", ".", "layers", "=", "[", "int", "(", "l", ")", "for", "l", "in", "layers", "]", "\n", "", "elif", "isinstance", "(", "layers", ",", "str", ")", ":", "\n", "            ", "self", ".", "layers", "=", "list", "(", "map", "(", "int", ",", "layers", ".", "split", "(", "','", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"`layers` only supports str or list[int]\"", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "layer", "<", "0", ":", "\n", "                ", "assert", "-", "layer", "<=", "encoder_layer_number", ",", "f\"The layer index:{layer} is out of scope for \"", "f\"a gpt2 model with {encoder_layer_number} layers.\"", "\n", "", "else", ":", "\n", "                ", "assert", "layer", "<=", "encoder_layer_number", ",", "f\"The layer index:{layer} is out of scope for \"", "f\"a gpt2 model with {encoder_layer_number} layers.\"", "\n", "\n", "", "", "self", ".", "_endoftext_index", "=", "self", ".", "tokenizer", ".", "encoder", ".", "get", "(", "'<|endoftext|>'", ")", "\n", "self", ".", "_wordpiece_pad_index", "=", "self", ".", "tokenizer", ".", "encoder", ".", "get", "(", "'<|endoftext|>'", ")", "# \u539f\u6765\u5e76\u6ca1\u6709pad\uff0c\u4f7f\u7528\u8fd9\u4e2a\u503c\u66ff\u4ee3\u4e00\u4e0b\u3002\u8fd9\u4e2apad\u503c\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u4e3a\u662f\u4ece\u5de6\u5230\u53f3\u8ba1\u7b97\u7684", "\n", "self", ".", "_max_position_embeddings", "=", "self", ".", "encoder", ".", "config", ".", "max_position_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding._GPT2WordPieceModel.index_datasets": [[575, 595], ["functools.partial", "enumerate", "dataset.apply_field", "dataset.set_pad_val", "core.logger.error"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_pad_val"], ["", "def", "index_datasets", "(", "self", ",", "*", "datasets", ",", "field_name", ",", "add_endoftext", "=", "False", ",", "add_prefix_space", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        \u4f7f\u7528gpt2\u7684tokenizer\u65b0\u751f\u6210word_pieces\u5217\u52a0\u5165\u5230datasets\u4e2d\uff0c\u5e76\u5c06\u4ed6\u4eec\u8bbe\u7f6e\u4e3ainput\u3002\u5982\u679c\u5f00\u5934\u4e0d\u662f<|endoftext|>, \u4e14\u5c06\n            word_pieces\u8fd9\u4e00\u5217\u7684pad value\u8bbe\u7f6e\u4e3a\u4e86bert\u7684pad value\u3002\n\n        :param datasets: DataSet\u5bf9\u8c61\n        :param field_name: \u57fa\u4e8e\u54ea\u4e00\u5217index\n        :param bool add_prefix_space: \u662f\u5426\u6dfb\u52a0\u53e5\u9996\u7684\u7a7a\u683c\n        :return:\n        \"\"\"", "\n", "convert_words_to_word_pieces", "=", "partial", "(", "self", ".", "convert_words_to_word_pieces", ",", "add_endoftext", "=", "add_endoftext", ",", "\n", "add_prefix_space", "=", "add_prefix_space", ")", "\n", "for", "index", ",", "dataset", "in", "enumerate", "(", "datasets", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "convert_words_to_word_pieces", ",", "field_name", "=", "field_name", ",", "new_field_name", "=", "'word_pieces'", ",", "\n", "is_input", "=", "True", ")", "\n", "dataset", ".", "set_pad_val", "(", "'word_pieces'", ",", "self", ".", "_wordpiece_pad_index", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"Exception happens when processing the {index} dataset.\"", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding._GPT2WordPieceModel.convert_words_to_word_pieces": [[596, 621], ["isinstance", "gpt2_embedding._GPT2WordPieceModel.tokenizer.tokenize", "gpt2_embedding._GPT2WordPieceModel.tokenizer.convert_tokens_to_ids", "word_pieces.extend", "len", "gpt2_embedding._GPT2WordPieceModel.tokenizer.tokenize", "gpt2_embedding._GPT2WordPieceModel.tokenizer.convert_tokens_to_ids", "word_pieces.extend", "word_pieces.insert"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids"], ["", "", "", "def", "convert_words_to_word_pieces", "(", "self", ",", "words", ",", "add_endoftext", "=", "False", ",", "add_prefix_space", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n\n        :param list[str],str words: \u5c06str\u6570\u636e\u8f6c\u6362\u4e3aindex\n        :param bool add_endoftext: \u662f\u5426\u5728\u53e5\u9996\u589e\u52a0endoftext\n        :param bool add_prefix_space: \u662f\u5426\u6dfb\u52a0\u53e5\u9996\u7684\u7a7a\u683c\n        :return:\n        \"\"\"", "\n", "word_pieces", "=", "[", "]", "\n", "if", "isinstance", "(", "words", ",", "str", ")", ":", "\n", "            ", "words", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "words", ",", "add_prefix_space", "=", "add_prefix_space", ")", "\n", "word_piece_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "words", ")", "\n", "word_pieces", ".", "extend", "(", "word_piece_ids", ")", "\n", "", "else", ":", "\n", "            ", "for", "word", "in", "words", ":", "\n", "                ", "tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "word", ",", "add_prefix_space", "=", "add_prefix_space", ")", "\n", "word_piece_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "word_pieces", ".", "extend", "(", "word_piece_ids", ")", "\n", "", "", "if", "add_endoftext", ":", "\n", "            ", "if", "word_pieces", "[", "0", "]", "!=", "self", ".", "_endoftext_index", ":", "\n", "                ", "word_pieces", ".", "insert", "(", "0", ",", "self", ".", "_endoftext_index", ")", "\n", "", "", "if", "len", "(", "word_pieces", ")", ">", "self", ".", "_max_position_embeddings", ":", "\n", "            ", "word_pieces", "[", "self", ".", "_max_position_embeddings", "-", "1", "]", "=", "word_pieces", "[", "-", "1", "]", "\n", "word_pieces", "=", "word_pieces", "[", ":", "self", ".", "_max_position_embeddings", "]", "\n", "", "return", "word_pieces", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding._GPT2WordPieceModel.forward": [[622, 648], ["word_pieces.masked_fill.masked_fill.size", "word_pieces.masked_fill.masked_fill.ne", "word_pieces.masked_fill.masked_fill.masked_fill", "gpt_outputs[].new_zeros", "enumerate", "word_pieces.masked_fill.ne.eq", "word_pieces.masked_fill.masked_fill.clone", "labels.masked_fill.masked_fill.masked_fill", "gpt2_embedding._GPT2WordPieceModel.encoder", "gpt2_embedding._GPT2WordPieceModel.encoder", "labels.masked_fill.masked_fill.eq", "len", "gpt_outputs[].size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "word_pieces", ",", "token_type_ids", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :param word_pieces: torch.LongTensor, batch_size x max_len\n        :param token_type_ids: torch.LongTensor, batch_size x max_len\n        :return: num_layers x batch_size x max_len x hidden_size\u6216\u8005num_layers x batch_size x (max_len+2) x hidden_size\n        \"\"\"", "\n", "batch_size", ",", "max_len", "=", "word_pieces", ".", "size", "(", ")", "\n", "\n", "attn_masks", "=", "word_pieces", ".", "ne", "(", "self", ".", "_wordpiece_pad_index", ")", "# \u53ef\u80fd\u4f1a\u9519\u8bef\u5bfc\u81f4\u5f00\u5934\u7684\u8bcd\u88abmask\u6389", "\n", "word_pieces", "=", "word_pieces", ".", "masked_fill", "(", "attn_masks", ".", "eq", "(", "0", ")", ",", "self", ".", "_endoftext_index", ")", "# \u66ff\u6362pad\u7684\u503c", "\n", "if", "self", ".", "lm_loss", ":", "\n", "            ", "labels", "=", "word_pieces", ".", "clone", "(", ")", "\n", "labels", "=", "labels", ".", "masked_fill", "(", "labels", ".", "eq", "(", "self", ".", "_wordpiece_pad_index", ")", ",", "-", "100", ")", "\n", "gpt_outputs", "=", "self", ".", "encoder", "(", "word_pieces", ",", "token_type_ids", "=", "token_type_ids", ",", "attention_mask", "=", "attn_masks", ",", "\n", "output_attentions", "=", "False", ",", "labels", "=", "labels", ")", "\n", "gpt_outputs", ",", "self", ".", "_lm_loss_value", "=", "gpt_outputs", "[", "-", "1", "]", ",", "gpt_outputs", "[", "0", "]", "# n_layers x batch_size x max_len x hidden_size", "\n", "", "else", ":", "\n", "            ", "gpt_outputs", "=", "self", ".", "encoder", "(", "word_pieces", ",", "token_type_ids", "=", "token_type_ids", ",", "attention_mask", "=", "attn_masks", ",", "\n", "output_attentions", "=", "False", ")", "\n", "gpt_outputs", "=", "gpt_outputs", "[", "-", "1", "]", "\n", "# output_layers = [self.layers]  # len(self.layers) x batch_size x max_word_piece_length x hidden_size", "\n", "", "outputs", "=", "gpt_outputs", "[", "0", "]", ".", "new_zeros", "(", "(", "len", "(", "self", ".", "layers", ")", ",", "batch_size", ",", "max_len", ",", "gpt_outputs", "[", "0", "]", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "for", "l_index", ",", "l", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "outputs", "[", "l_index", "]", "=", "gpt_outputs", "[", "l", "]", "# \u5220\u9664\u5f00\u5934", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding._GPT2WordPieceModel.get_lm_loss": [[649, 656], ["None"], "methods", ["None"], ["", "def", "get_lm_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u5f53language_model\u4e3aTrue\u65f6\uff0c\u901a\u8fc7\u8be5\u63a5\u53e3\u53ef\u4ee5\u83b7\u53d6\u6700\u8fd1\u4f20\u5165\u7684\u4e00\u4e2abatch\u7684lanuage model loss\n\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "_lm_loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.contextual_embedding.ContextualEmbedding.__init__": [[27, 29], ["embedding.TokenEmbedding.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "vocab", ":", "Vocabulary", ",", "word_dropout", ":", "float", "=", "0.0", ",", "dropout", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "ContextualEmbedding", ",", "self", ")", ".", "__init__", "(", "vocab", ",", "word_dropout", "=", "word_dropout", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.contextual_embedding.ContextualEmbedding.add_sentence_cache": [[30, 78], ["enumerate", "core.utils._move_model_to_device", "core.utils._get_model_device", "core.logger.info", "core.logger.info", "torch.no_grad", "enumerate", "contextual_embedding.ContextualEmbedding._delete_model_weights", "isinstance", "dataset.get_input_name", "core.logger.error", "core.batch.DataSetIter", "batch_x[].to", "batch_x[].to.tolist", "batch_x[].to.ne().sum", "batch_x[].to.size", "contextual_embedding.ContextualEmbedding.detach().cpu().numpy", "range", "core.logger.error", "core.sampler.SequentialSampler", "batch_x[].to.size", "batch_x[].to.ne", "contextual_embedding.ContextualEmbedding.detach().cpu", "contextual_embedding.ContextualEmbedding.detach", "tuple", "tuple", "contextual_embedding.ContextualEmbedding."], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._move_model_to_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_model_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.contextual_embedding.ContextualEmbedding._delete_model_weights", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_input_name", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "add_sentence_cache", "(", "self", ",", "*", "datasets", ",", "batch_size", "=", "32", ",", "device", "=", "'cpu'", ",", "delete_weights", ":", "bool", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u7531\u4e8e\u52a8\u6001embedding\u751f\u6210\u6bd4\u8f83\u8017\u65f6\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u6bcf\u53e5\u8bddembedding\u7f13\u5b58\u4e0b\u6765\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd\u8fd0\u884c\u751f\u6210\u8fc7\u7a0b\u3002\n\n        :param datasets: DataSet\u5bf9\u8c61\n        :param batch_size: int, \u751f\u6210cache\u7684sentence\u8868\u793a\u65f6\u4f7f\u7528\u7684batch\u7684\u5927\u5c0f\n        :param device: \u53c2\u8003 :class::fastNLP.Trainer \u7684device\n        :param delete_weights: \u4f3c\u4e4e\u5728\u751f\u6210\u4e86cache\u4e4b\u540e\u5220\u9664\u6743\u91cd\uff0c\u5728\u4e0d\u9700\u8981finetune\u52a8\u6001\u6a21\u578b\u7684\u60c5\u51b5\u4e0b\uff0c\u5220\u9664\u6743\u91cd\u4f1a\u5927\u91cf\u51cf\u5c11\u5185\u5b58\u5360\u7528\u3002\n        :return:\n        \"\"\"", "\n", "for", "index", ",", "dataset", "in", "enumerate", "(", "datasets", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "assert", "isinstance", "(", "dataset", ",", "DataSet", ")", ",", "\"Only fastNLP.DataSet object is allowed.\"", "\n", "assert", "'words'", "in", "dataset", ".", "get_input_name", "(", ")", ",", "\"`words` field has to be set as input.\"", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"Exception happens at {index} dataset.\"", ")", "\n", "raise", "e", "\n", "\n", "", "", "sent_embeds", "=", "{", "}", "\n", "_move_model_to_device", "(", "self", ",", "device", "=", "device", ")", "\n", "device", "=", "_get_model_device", "(", "self", ")", "\n", "pad_index", "=", "self", ".", "_word_vocab", ".", "padding_idx", "\n", "logger", ".", "info", "(", "\"Start to calculate sentence representations.\"", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "index", ",", "dataset", "in", "enumerate", "(", "datasets", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "batch", "=", "DataSetIter", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "SequentialSampler", "(", ")", ")", "\n", "for", "batch_x", ",", "batch_y", "in", "batch", ":", "\n", "                        ", "words", "=", "batch_x", "[", "'words'", "]", ".", "to", "(", "device", ")", "\n", "words_list", "=", "words", ".", "tolist", "(", ")", "\n", "seq_len", "=", "words", ".", "ne", "(", "pad_index", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "max_len", "=", "words", ".", "size", "(", "1", ")", "\n", "# \u56e0\u4e3a\u6709\u4e9b\u60c5\u51b5\u53ef\u80fd\u5305\u542bCLS, SEP, \u4ece\u540e\u9762\u5f80\u524d\u8ba1\u7b97\u6bd4\u8f83\u5b89\u5168\u3002", "\n", "seq_len_from_behind", "=", "(", "max_len", "-", "seq_len", ")", ".", "tolist", "(", ")", "\n", "word_embeds", "=", "self", "(", "words", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "b", "in", "range", "(", "words", ".", "size", "(", "0", ")", ")", ":", "\n", "                            ", "length", "=", "seq_len_from_behind", "[", "b", "]", "\n", "if", "length", "==", "0", ":", "\n", "                                ", "sent_embeds", "[", "tuple", "(", "words_list", "[", "b", "]", "[", ":", "seq_len", "[", "b", "]", "]", ")", "]", "=", "word_embeds", "[", "b", "]", "\n", "", "else", ":", "\n", "                                ", "sent_embeds", "[", "tuple", "(", "words_list", "[", "b", "]", "[", ":", "seq_len", "[", "b", "]", "]", ")", "]", "=", "word_embeds", "[", "b", ",", ":", "-", "length", "]", "\n", "", "", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "logger", ".", "error", "(", "f\"Exception happens at {index} dataset.\"", ")", "\n", "raise", "e", "\n", "", "", "", "logger", ".", "info", "(", "\"Finish calculating sentence representations.\"", ")", "\n", "self", ".", "sent_embeds", "=", "sent_embeds", "\n", "if", "delete_weights", ":", "\n", "            ", "self", ".", "_delete_model_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.contextual_embedding.ContextualEmbedding._get_sent_reprs": [[79, 101], ["hasattr", "words.tolist", "words.ne().sum", "range", "max", "words.new_zeros", "enumerate", "len", "tuple", "_embeds.append", "map", "len", "torch.FloatTensor().to", "words.ne", "torch.FloatTensor", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], ["", "", "def", "_get_sent_reprs", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        \u83b7\u53d6sentence\u7684\u8868\u793a\uff0c\u5982\u679c\u6709\u7f13\u5b58\uff0c\u5219\u8fd4\u56de\u7f13\u5b58\u7684\u503c; \u6ca1\u6709\u7f13\u5b58\u5219\u8fd4\u56deNone\n\n        :param words: torch.LongTensor\n        :return:\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "'sent_embeds'", ")", ":", "\n", "            ", "words_list", "=", "words", ".", "tolist", "(", ")", "\n", "seq_len", "=", "words", ".", "ne", "(", "self", ".", "_word_pad_index", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "_embeds", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "len", "(", "words", ")", ")", ":", "\n", "                ", "words_i", "=", "tuple", "(", "words_list", "[", "b", "]", "[", ":", "seq_len", "[", "b", "]", "]", ")", "\n", "embed", "=", "self", ".", "sent_embeds", "[", "words_i", "]", "\n", "_embeds", ".", "append", "(", "embed", ")", "\n", "", "max_sent_len", "=", "max", "(", "map", "(", "len", ",", "_embeds", ")", ")", "\n", "embeds", "=", "words", ".", "new_zeros", "(", "len", "(", "_embeds", ")", ",", "max_sent_len", ",", "self", ".", "embed_size", ",", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "words", ".", "device", ")", "\n", "for", "i", ",", "embed", "in", "enumerate", "(", "_embeds", ")", ":", "\n", "                ", "embeds", "[", "i", ",", ":", "len", "(", "embed", ")", "]", "=", "torch", ".", "FloatTensor", "(", "embed", ")", ".", "to", "(", "words", ".", "device", ")", "\n", "", "return", "embeds", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.contextual_embedding.ContextualEmbedding._delete_model_weights": [[102, 106], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_delete_model_weights", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\u5220\u9664\u8ba1\u7b97\u8868\u793a\u7684\u6a21\u578b\u4ee5\u8282\u7701\u8d44\u6e90\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.contextual_embedding.ContextualEmbedding.remove_sentence_cache": [[107, 114], ["None"], "methods", ["None"], ["", "def", "remove_sentence_cache", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u5220\u9664\u7f13\u5b58\u7684\u53e5\u5b50\u8868\u793a. \u5220\u9664\u4e4b\u540e\u5982\u679c\u6a21\u578b\u6743\u91cd\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u5c06\u5f00\u59cb\u4f7f\u7528\u52a8\u6001\u8ba1\u7b97\u6743\u91cd\u3002\n\n        :return:\n        \"\"\"", "\n", "del", "self", ".", "sent_embeds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils._construct_char_vocab_from_vocab": [[17, 33], ["core.vocabulary.Vocabulary", "core.vocabulary.Vocabulary.add_word_lst", "vocab._is_word_no_create_entry", "core.vocabulary.Vocabulary.add_word_lst", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word_lst", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._is_word_no_create_entry", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word_lst"], ["def", "_construct_char_vocab_from_vocab", "(", "vocab", ":", "Vocabulary", ",", "min_freq", ":", "int", "=", "1", ",", "include_word_start_end", "=", "True", ")", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2aword\u7684vocabulary\u751f\u6210character\u7684vocabulary.\n\n    :param vocab: \u4ecevocab\n    :param min_freq:\n    :param include_word_start_end: \u662f\u5426\u9700\u8981\u5305\u542b\u7279\u6b8a\u7684<bow>\u548c<eos>\n    :return:\n    \"\"\"", "\n", "char_vocab", "=", "Vocabulary", "(", "min_freq", "=", "min_freq", ")", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "        ", "if", "not", "vocab", ".", "_is_word_no_create_entry", "(", "word", ")", ":", "\n", "            ", "char_vocab", ".", "add_word_lst", "(", "list", "(", "word", ")", ")", "\n", "", "", "if", "include_word_start_end", ":", "\n", "        ", "char_vocab", ".", "add_word_lst", "(", "[", "'<bow>'", ",", "'<eow>'", "]", ")", "\n", "", "return", "char_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings": [[35, 63], ["isinstance", "torch.nn.Embedding", "torch.nn.init.uniform_", "isinstance", "isinstance", "numpy.sqrt", "torch.nn.Embedding.from_pretrained", "isinstance", "numpy.sqrt", "torch.tensor", "torch.nn.Embedding.from_pretrained", "TypeError", "nn.Embedding.from_pretrained.weight.data.size", "nn.Embedding.from_pretrained.weight.data.size", "type"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "get_embeddings", "(", "init_embed", ",", "padding_idx", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    \u6839\u636e\u8f93\u5165\u7684init_embed\u8fd4\u56deEmbedding\u5bf9\u8c61\u3002\u5982\u679c\u8f93\u5165\u662ftuple, \u5219\u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2ann.Embedding; \u5982\u679c\u8f93\u5165\u662fnumpy.ndarray, \u5219\u6309\u7167ndarray\n    \u7684\u503c\u5c06nn.Embedding\u521d\u59cb\u5316; \u5982\u679c\u8f93\u5165\u662ftorch.Tensor, \u5219\u6309\u8be5\u503c\u521d\u59cb\u5316nn.Embedding; \u5982\u679c\u8f93\u5165\u662ffastNLP\u4e2d\u7684embedding\u5c06\u4e0d\u505a\u5904\u7406\n    \u8fd4\u56de\u539f\u5bf9\u8c61\u3002\n\n    :param init_embed: \u53ef\u4ee5\u662f tuple:(num_embedings, embedding_dim), \u5373embedding\u7684\u5927\u5c0f\u548c\u6bcf\u4e2a\u8bcd\u7684\u7ef4\u5ea6;\u4e5f\u53ef\u4ee5\u4f20\u5165\n        nn.Embedding \u5bf9\u8c61, \u6b64\u65f6\u5c31\u4ee5\u4f20\u5165\u7684\u5bf9\u8c61\u4f5c\u4e3aembedding; \u4f20\u5165np.ndarray\u4e5f\u884c\uff0c\u5c06\u4f7f\u7528\u4f20\u5165\u7684ndarray\u4f5c\u4e3a\u4f5c\u4e3aEmbedding\u521d\u59cb\u5316;\n        \u4f20\u5165torch.Tensor, \u5c06\u4f7f\u7528\u4f20\u5165\u7684\u503c\u4f5c\u4e3aEmbedding\u521d\u59cb\u5316\u3002\n    :param padding_idx: \u5f53\u4f20\u5165tuple\u65f6\uff0cpadding_idx\u6709\u6548\n    :return nn.Embedding:  embeddings\n    \"\"\"", "\n", "if", "isinstance", "(", "init_embed", ",", "tuple", ")", ":", "\n", "        ", "res", "=", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "init_embed", "[", "0", "]", ",", "embedding_dim", "=", "init_embed", "[", "1", "]", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "res", ".", "weight", ".", "data", ",", "a", "=", "-", "np", ".", "sqrt", "(", "3", "/", "res", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ")", ",", "\n", "b", "=", "np", ".", "sqrt", "(", "3", "/", "res", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "res", "=", "init_embed", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "res", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "init_embed", ",", "freeze", "=", "False", ")", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "init_embed", "=", "torch", ".", "tensor", "(", "init_embed", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "res", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "init_embed", ",", "freeze", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'invalid init_embed type: {}'", ".", "format", "(", "(", "type", "(", "init_embed", ")", ")", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_sinusoid_encoding_table": [[65, 91], ["numpy.array", "numpy.sin", "numpy.cos", "torch.FloatTensor", "numpy.power", "utils.get_sinusoid_encoding_table.cal_angle"], "function", ["None"], ["", "def", "get_sinusoid_encoding_table", "(", "n_position", ",", "d_hid", ",", "padding_idx", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    sinusoid\u7684embedding\uff0c\u5176\u4e2dposition\u7684\u8868\u793a\u4e2d\uff0c\u5076\u6570\u7ef4(0,2,4,...)\u662fsin, \u5947\u6570(1,3,5...)\u662fcos\n\n    :param int n_position: \u4e00\u5171\u591a\u5c11\u4e2aposition\n    :param int d_hid: \u591a\u5c11\u7ef4\u5ea6\uff0c\u9700\u8981\u4e3a\u5076\u6570\n    :param padding_idx:\n    :return: torch.FloatTensor, shape\u4e3an_position x d_hid\n    \"\"\"", "\n", "\n", "def", "cal_angle", "(", "position", ",", "hid_idx", ")", ":", "\n", "        ", "return", "position", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_idx", "//", "2", ")", "/", "d_hid", ")", "\n", "\n", "", "def", "get_posi_angle_vec", "(", "position", ")", ":", "\n", "        ", "return", "[", "cal_angle", "(", "position", ",", "hid_j", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "[", "get_posi_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_position", ")", "]", ")", "\n", "\n", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n", "\n", "if", "padding_idx", "is", "not", "None", ":", "\n", "# zero vector for padding dimension", "\n", "        ", "sinusoid_table", "[", "padding_idx", "]", "=", "0.", "\n", "\n", "", "return", "torch", ".", "FloatTensor", "(", "sinusoid_table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.stack_embedding.StackEmbedding.__init__": [[33, 55], ["embedding.TokenEmbedding.__init__", "isinstance", "torch.nn.ModuleList", "sum", "hasattr", "isinstance", "vocabs.append", "embed.get_word_vocab"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.get_word_vocab"], ["def", "__init__", "(", "self", ",", "embeds", ":", "List", "[", "TokenEmbedding", "]", ",", "word_dropout", "=", "0", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param embeds: \u4e00\u4e2a\u7531\u82e5\u5e72\u4e2aTokenEmbedding\u7ec4\u6210\u7684list\uff0c\u8981\u6c42\u6bcf\u4e00\u4e2aTokenEmbedding\u7684\u8bcd\u8868\u90fd\u4fdd\u6301\u4e00\u81f4\n        :param float word_dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5c06\u4e00\u4e2a\u8bcd\u66ff\u6362\u4e3aunk\u3002\u8fd9\u6837\u65e2\u53ef\u4ee5\u8bad\u7ec3unk\u4e5f\u662f\u4e00\u5b9a\u7684regularize\u3002\u4e0d\u540cembedidng\u4f1a\u5728\u76f8\u540c\u7684\u4f4d\u7f6e\n            \u88ab\u8bbe\u7f6e\u4e3aunknown\u3002\u5982\u679c\u8fd9\u91cc\u8bbe\u7f6e\u4e86dropout\uff0c\u5219\u7ec4\u6210\u7684embedding\u5c31\u4e0d\u8981\u518d\u8bbe\u7f6edropout\u4e86\u3002\n        :param float dropout: \u4ee5\u591a\u5927\u7684\u6982\u7387\u5bf9embedding\u7684\u8868\u793a\u8fdb\u884cDropout\u30020.1\u5373\u968f\u673a\u5c0610%\u7684\u503c\u7f6e\u4e3a0\u3002\n        \"\"\"", "\n", "vocabs", "=", "[", "]", "\n", "for", "embed", "in", "embeds", ":", "\n", "            ", "if", "hasattr", "(", "embed", ",", "'get_word_vocab'", ")", ":", "\n", "                ", "vocabs", ".", "append", "(", "embed", ".", "get_word_vocab", "(", ")", ")", "\n", "", "", "_vocab", "=", "vocabs", "[", "0", "]", "\n", "for", "vocab", "in", "vocabs", "[", "1", ":", "]", ":", "\n", "            ", "assert", "vocab", "==", "_vocab", ",", "\"All embeddings in StackEmbedding should use the same word vocabulary.\"", "\n", "\n", "", "super", "(", "StackEmbedding", ",", "self", ")", ".", "__init__", "(", "_vocab", ",", "word_dropout", "=", "word_dropout", ",", "dropout", "=", "dropout", ")", "\n", "assert", "isinstance", "(", "embeds", ",", "list", ")", "\n", "for", "embed", "in", "embeds", ":", "\n", "            ", "assert", "isinstance", "(", "embed", ",", "TokenEmbedding", ")", ",", "\"Only TokenEmbedding type is supported.\"", "\n", "", "self", ".", "embeds", "=", "nn", ".", "ModuleList", "(", "embeds", ")", "\n", "self", ".", "_embed_size", "=", "sum", "(", "[", "embed", ".", "embed_size", "for", "embed", "in", "self", ".", "embeds", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.stack_embedding.StackEmbedding.append": [[56, 66], ["isinstance", "stack_embedding.StackEmbedding.embeds.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "append", "(", "self", ",", "embed", ":", "TokenEmbedding", ")", ":", "\n", "        ", "r\"\"\"\n        \u6dfb\u52a0\u4e00\u4e2aembedding\u5230\u7ed3\u5c3e\u3002\n        :param embed:\n        :return:\n        \"\"\"", "\n", "assert", "isinstance", "(", "embed", ",", "TokenEmbedding", ")", "\n", "self", ".", "_embed_size", "+=", "embed", ".", "embed_size", "\n", "self", ".", "embeds", ".", "append", "(", "embed", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.stack_embedding.StackEmbedding.pop": [[67, 75], ["stack_embedding.StackEmbedding.embeds.pop"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u5f39\u51fa\u6700\u540e\u4e00\u4e2aembed\n        :return:\n        \"\"\"", "\n", "embed", "=", "self", ".", "embeds", ".", "pop", "(", ")", "\n", "self", ".", "_embed_size", "-=", "embed", ".", "embed_size", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.stack_embedding.StackEmbedding.embed_size": [[76, 83], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "embed_size", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8be5Embedding\u8f93\u51fa\u7684vector\u7684\u6700\u540e\u4e00\u7ef4\u7684\u7ef4\u5ea6\u3002\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "_embed_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.stack_embedding.StackEmbedding.forward": [[84, 97], ["stack_embedding.StackEmbedding.drop_word", "stack_embedding.StackEmbedding.dropout", "stack_embedding.StackEmbedding.append", "torch.cat", "embed"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.gpt2_embedding.GPT2WordPieceEncoder.drop_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "r\"\"\"\n        \u5f97\u5230\u591a\u4e2aembedding\u7684\u7ed3\u679c\uff0c\u5e76\u628a\u7ed3\u679c\u6309\u7167\u987a\u5e8fconcat\u8d77\u6765\u3002\n\n        :param words: batch_size x max_len\n        :return: \u8fd4\u56de\u7684shape\u548c\u5f53\u524d\u8fd9\u4e2astack embedding\u4e2dembedding\u7684\u7ec4\u6210\u6709\u5173\n        \"\"\"", "\n", "outputs", "=", "[", "]", "\n", "words", "=", "self", ".", "drop_word", "(", "words", ")", "\n", "for", "embed", "in", "self", ".", "embeds", ":", "\n", "            ", "outputs", ".", "append", "(", "embed", "(", "words", ")", ")", "\n", "", "outputs", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "-", "1", ")", ")", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.seq2seq_encoder.Seq2SeqEncoder.__init__": [[20, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.seq2seq_encoder.Seq2SeqEncoder.forward": [[23, 31], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tokens", ",", "seq_len", ")", ":", "\n", "        ", "\"\"\"\n\n        :param torch.LongTensor tokens: bsz x max_len, encoder\u7684\u8f93\u5165\n        :param torch.LongTensor seq_len: bsz\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.seq2seq_encoder.TransformerSeq2SeqEncoderLayer.__init__": [[34, 59], ["torch.Module.__init__", "fastNLP.modules.attention.MultiHeadAttention", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ":", "int", "=", "512", ",", "n_head", ":", "int", "=", "8", ",", "dim_ff", ":", "int", "=", "2048", ",", "\n", "dropout", ":", "float", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"\n        Self-Attention\u7684Layer\uff0c\n\n        :param int d_model: input\u548coutput\u7684\u8f93\u51fa\u7ef4\u5ea6\n        :param int n_head: \u591a\u5c11\u4e2ahead\uff0c\u6bcf\u4e2ahead\u7684\u7ef4\u5ea6\u4e3ad_model/n_head\n        :param int dim_ff: FFN\u7684\u7ef4\u5ea6\u5927\u5c0f\n        :param float dropout: Self-attention\u548cFFN\u7684dropout\u5927\u5c0f\uff0c0\u8868\u793a\u4e0ddrop\n        \"\"\"", "\n", "super", "(", "TransformerSeq2SeqEncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "dim_ff", "=", "dim_ff", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "self_attn", "=", "MultiHeadAttention", "(", "d_model", ",", "n_head", ",", "dropout", ")", "\n", "self", ".", "attn_layer_norm", "=", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "ffn_layer_norm", "=", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "ffn", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "dim_ff", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "dim_ff", ",", "self", ".", "d_model", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.seq2seq_encoder.TransformerSeq2SeqEncoderLayer.forward": [[60, 84], ["seq2seq_encoder.TransformerSeq2SeqEncoderLayer.attn_layer_norm", "seq2seq_encoder.TransformerSeq2SeqEncoderLayer.self_attn", "torch.dropout", "torch.dropout", "torch.dropout", "seq2seq_encoder.TransformerSeq2SeqEncoderLayer.ffn_layer_norm", "seq2seq_encoder.TransformerSeq2SeqEncoderLayer.ffn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n\n        :param x: batch x src_seq x d_model\n        :param mask: batch x src_seq\uff0c\u4e3a0\u7684\u5730\u65b9\u4e3apadding\n        :return:\n        \"\"\"", "\n", "# attention", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "attn_layer_norm", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "self_attn", "(", "query", "=", "x", ",", "\n", "key", "=", "x", ",", "\n", "value", "=", "x", ",", "\n", "key_mask", "=", "mask", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "\n", "# ffn", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "ffn_layer_norm", "(", "x", ")", "\n", "x", "=", "self", ".", "ffn", "(", "x", ")", "\n", "x", "=", "residual", "+", "x", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.seq2seq_encoder.TransformerSeq2SeqEncoder.__init__": [[87, 114], ["seq2seq_encoder.Seq2SeqEncoder.__init__", "embeddings.utils.get_embeddings", "math.sqrt", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "seq2seq_encoder.TransformerSeq2SeqEncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings"], ["    ", "def", "__init__", "(", "self", ",", "embed", ":", "Union", "[", "nn", ".", "Module", ",", "StaticEmbedding", ",", "Tuple", "[", "int", ",", "int", "]", "]", ",", "pos_embed", "=", "None", ",", "\n", "num_layers", "=", "6", ",", "d_model", "=", "512", ",", "n_head", "=", "8", ",", "dim_ff", "=", "2048", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"\n        \u57fa\u4e8eTransformer\u7684Encoder\n\n        :param embed: encoder\u8f93\u5165token\u7684embedding\n        :param nn.Module pos_embed: position embedding\n        :param int num_layers: \u591a\u5c11\u5c42\u7684encoder\n        :param int d_model: \u8f93\u5165\u8f93\u51fa\u7684\u7ef4\u5ea6\n        :param int n_head: \u591a\u5c11\u4e2ahead\n        :param int dim_ff: FFN\u4e2d\u95f4\u7684\u7ef4\u5ea6\u5927\u5c0f\n        :param float dropout: Attention\u548cFFN\u7684dropout\u5927\u5c0f\n        \"\"\"", "\n", "super", "(", "TransformerSeq2SeqEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "get_embeddings", "(", "embed", ")", "\n", "self", ".", "embed_scale", "=", "math", ".", "sqrt", "(", "d_model", ")", "\n", "self", ".", "pos_embed", "=", "pos_embed", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "dim_ff", "=", "dim_ff", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "input_fc", "=", "nn", ".", "Linear", "(", "self", ".", "embed", ".", "embedding_dim", ",", "d_model", ")", "\n", "self", ".", "layer_stacks", "=", "nn", ".", "ModuleList", "(", "[", "TransformerSeq2SeqEncoderLayer", "(", "d_model", ",", "n_head", ",", "dim_ff", ",", "dropout", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.seq2seq_encoder.TransformerSeq2SeqEncoder.forward": [[115, 141], ["layer.size", "seq2seq_encoder.TransformerSeq2SeqEncoder.input_fc", "torch.dropout", "torch.dropout", "torch.dropout", "core.utils.seq_len_to_mask", "encoder_mask.to.to.to", "seq2seq_encoder.TransformerSeq2SeqEncoder.layer_norm", "seq2seq_encoder.TransformerSeq2SeqEncoder.embed", "torch.arange().unsqueeze().long().to", "torch.arange().unsqueeze().long().to", "torch.arange().unsqueeze().long().to", "torch.arange().unsqueeze().long().to", "torch.arange().unsqueeze().long().to", "torch.arange().unsqueeze().long().to", "torch.arange().unsqueeze().long().to", "torch.arange().unsqueeze().long().to", "torch.arange().unsqueeze().long().to", "seq2seq_encoder.TransformerSeq2SeqEncoder.pos_embed", "layer", "torch.arange().unsqueeze().long", "torch.arange().unsqueeze().long", "torch.arange().unsqueeze().long", "torch.arange().unsqueeze().long", "torch.arange().unsqueeze().long", "torch.arange().unsqueeze().long", "torch.arange().unsqueeze().long", "torch.arange().unsqueeze().long", "torch.arange().unsqueeze().long", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], ["", "def", "forward", "(", "self", ",", "tokens", ",", "seq_len", ")", ":", "\n", "        ", "\"\"\"\n\n        :param tokens: batch x max_len\n        :param seq_len: [batch]\n        :return: bsz x max_len x d_model, bsz x max_len(\u4e3a0\u7684\u5730\u65b9\u4e3apadding)\n        \"\"\"", "\n", "x", "=", "self", ".", "embed", "(", "tokens", ")", "*", "self", ".", "embed_scale", "# batch, seq, dim", "\n", "batch_size", ",", "max_src_len", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "device", "=", "x", ".", "device", "\n", "if", "self", ".", "pos_embed", "is", "not", "None", ":", "\n", "            ", "position", "=", "torch", ".", "arange", "(", "1", ",", "max_src_len", "+", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "x", "+=", "self", ".", "pos_embed", "(", "position", ")", "\n", "\n", "", "x", "=", "self", ".", "input_fc", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "encoder_mask", "=", "seq_len_to_mask", "(", "seq_len", ")", "\n", "encoder_mask", "=", "encoder_mask", ".", "to", "(", "device", ")", "\n", "\n", "for", "layer", "in", "self", ".", "layer_stacks", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "encoder_mask", ")", "\n", "\n", "", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "return", "x", ",", "encoder_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.seq2seq_encoder.LSTMSeq2SeqEncoder.__init__": [[144, 164], ["seq2seq_encoder.Seq2SeqEncoder.__init__", "embeddings.utils.get_embeddings", "modules.encoder.lstm.LSTM"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings"], ["    ", "def", "__init__", "(", "self", ",", "embed", ":", "Union", "[", "nn", ".", "Module", ",", "StaticEmbedding", ",", "Tuple", "[", "int", ",", "int", "]", "]", ",", "num_layers", "=", "3", ",", "\n", "hidden_size", "=", "400", ",", "dropout", "=", "0.3", ",", "bidirectional", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        LSTM\u7684Encoder\n\n        :param embed: encoder\u7684token embed\n        :param int num_layers: \u591a\u5c11\u5c42\n        :param int hidden_size: LSTM\u9690\u85cf\u5c42\u3001\u8f93\u51fa\u7684\u5927\u5c0f\n        :param float dropout: LSTM\u5c42\u4e4b\u95f4\u7684Dropout\u662f\u591a\u5c11\n        :param bool bidirectional: \u662f\u5426\u4f7f\u7528\u53cc\u5411\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "get_embeddings", "(", "embed", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "hidden_size", "=", "hidden_size", "//", "2", "if", "bidirectional", "else", "hidden_size", "\n", "self", ".", "lstm", "=", "LSTM", "(", "input_size", "=", "embed", ".", "embedding_dim", ",", "hidden_size", "=", "hidden_size", ",", "bidirectional", "=", "bidirectional", ",", "\n", "batch_first", "=", "True", ",", "dropout", "=", "dropout", "if", "num_layers", ">", "1", "else", "0", ",", "num_layers", "=", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.seq2seq_encoder.LSTMSeq2SeqEncoder.forward": [[165, 187], ["seq2seq_encoder.LSTMSeq2SeqEncoder.embed", "seq2seq_encoder.LSTMSeq2SeqEncoder.lstm", "core.utils.seq_len_to_mask().to", "seq2seq_encoder.LSTMSeq2SeqEncoder.concat_bidir", "seq2seq_encoder.LSTMSeq2SeqEncoder.concat_bidir", "core.utils.seq_len_to_mask"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.seq2seq_encoder.LSTMSeq2SeqEncoder.concat_bidir", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.seq2seq_encoder.LSTMSeq2SeqEncoder.concat_bidir", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask"], ["", "def", "forward", "(", "self", ",", "tokens", ",", "seq_len", ")", ":", "\n", "        ", "\"\"\"\n\n        :param torch.LongTensor tokens: bsz x max_len\n        :param torch.LongTensor seq_len: bsz\n        :return: (output, (hidden, cell)), encoder_mask\n            output: bsz x max_len x hidden_size,\n            hidden,cell: batch_size x hidden_size, \u6700\u540e\u4e00\u5c42\u7684\u9690\u85cf\u72b6\u6001\u6216cell\u72b6\u6001\n            encoder_mask: bsz x max_len, \u4e3a0\u7684\u5730\u65b9\u662fpadding\n        \"\"\"", "\n", "x", "=", "self", ".", "embed", "(", "tokens", ")", "\n", "device", "=", "x", ".", "device", "\n", "x", ",", "(", "final_hidden", ",", "final_cell", ")", "=", "self", ".", "lstm", "(", "x", ",", "seq_len", ")", "\n", "encoder_mask", "=", "seq_len_to_mask", "(", "seq_len", ")", ".", "to", "(", "device", ")", "\n", "\n", "# x: batch,seq_len,dim; h/c: num_layers*2,batch,dim", "\n", "\n", "if", "self", ".", "bidirectional", ":", "\n", "            ", "final_hidden", "=", "self", ".", "concat_bidir", "(", "final_hidden", ")", "# \u5c06\u53cc\u5411\u7684hidden state\u62fc\u63a5\u8d77\u6765\uff0c\u7528\u4e8e\u63a5\u4e0b\u6765\u7684decoder\u7684input", "\n", "final_cell", "=", "self", ".", "concat_bidir", "(", "final_cell", ")", "\n", "\n", "", "return", "(", "x", ",", "(", "final_hidden", "[", "-", "1", "]", ",", "final_cell", "[", "-", "1", "]", ")", ")", ",", "encoder_mask", "# \u4e3a\u4e86\u914d\u5408Seq2SeqBaseModel\u7684forward\uff0c\u8fd9\u8fb9\u9700\u8981\u5206\u4e3a\u4e24\u4e2areturn", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.seq2seq_encoder.LSTMSeq2SeqEncoder.concat_bidir": [[188, 191], ["input.view().transpose", "input.view().transpose.reshape", "input.size", "input.view", "input.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "concat_bidir", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "input", ".", "view", "(", "self", ".", "num_layers", ",", "2", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "output", ".", "reshape", "(", "self", ".", "num_layers", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertConfig.__init__": [[50, 110], ["isinstance", "json.loads.items", "isinstance", "open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "architectures", "=", "'bert'", ")", ":", "\n", "        ", "r\"\"\"Constructs BertConfig.\n\n        Args:\n            vocab_size_or_config_json_file: Vocabulary size of `inputs_ids` in `BertModel`.\n            hidden_size: Size of the encoder layers and the pooler layer.\n            num_hidden_layers: Number of hidden layers in the Transformer encoder.\n            num_attention_heads: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n                layer in the Transformer encoder.\n            hidden_act: The non-linear activation function (function or string) in the\n                encoder and pooler. If string, \"gelu\", \"relu\" and \"swish\" are supported.\n            hidden_dropout_prob: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attention_probs_dropout_prob: The dropout ratio for the attention\n                probabilities.\n            max_position_embeddings: The maximum sequence length that this model might\n                ever be used with. Typically set this to something large just in case\n                (e.g., 512 or 1024 or 2048).\n            type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n                `BertModel`.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n            layer_norm_eps: The epsilon used by LayerNorm.\n        \"\"\"", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "self", ".", "architectures", "=", "architectures", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertConfig.from_dict": [[112, 119], ["bert.BertConfig", "json_object.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "r\"\"\"Constructs a `BertConfig` from a Python dictionary of parameters.\"\"\"", "\n", "config", "=", "BertConfig", "(", "vocab_size_or_config_json_file", "=", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "json_object", ".", "items", "(", ")", ":", "\n", "            ", "config", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertConfig.from_json_file": [[120, 126], ["cls.from_dict", "open", "reader.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertConfig.from_dict"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "r\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertConfig.__repr__": [[127, 129], ["str", "bert.BertConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertConfig.to_dict": [[130, 134], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertConfig.to_json_string": [[135, 138], ["json.dumps", "bert.BertConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertConfig.to_json_file": [[139, 145], ["os.path.isdir", "os.path.join", "open", "writer.write", "bert.BertConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.to_json_string"], ["", "def", "to_json_file", "(", "self", ",", "json_file_path", ")", ":", "\n", "        ", "r\"\"\" Save this instance to a json file.\"\"\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "json_file_path", ")", ":", "\n", "            ", "json_file_path", "=", "os", ".", "path", ".", "join", "(", "json_file_path", ",", "CONFIG_FILE", ")", "\n", "", "with", "open", "(", "json_file_path", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertConfig.save_pretrained": [[146, 148], ["bert.BertConfig.to_json_file"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.to_json_file"], ["", "", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "self", ".", "to_json_file", "(", "save_directory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.DistilBertEmbeddings.__init__": [[164, 186], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.LayerNorm", "torch.nn.Dropout", "numpy.array", "torch.FloatTensor", "torch.FloatTensor", "out.detach_", "bert.DistilBertEmbeddings.__init__.create_sinusoidal_embeddings"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "create_sinusoidal_embeddings", "(", "n_pos", ",", "dim", ",", "out", ")", ":", "\n", "            ", "position_enc", "=", "np", ".", "array", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "j", "//", "2", ")", "/", "dim", ")", "for", "j", "in", "range", "(", "dim", ")", "]", "\n", "for", "pos", "in", "range", "(", "n_pos", ")", "\n", "]", ")", "\n", "out", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", ")", "\n", "out", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", ")", "\n", "out", ".", "detach_", "(", ")", "\n", "out", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "if", "config", ".", "sinusoidal_pos_embds", ":", "\n", "            ", "create_sinusoidal_embeddings", "(", "n_pos", "=", "config", ".", "max_position_embeddings", ",", "\n", "dim", "=", "config", ".", "hidden_size", ",", "\n", "out", "=", "self", ".", "position_embeddings", ".", "weight", ")", "\n", "\n", "", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.DistilBertEmbeddings.forward": [[187, 210], ["input_ids.size", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "bert.DistilBertEmbeddings.word_embeddings", "bert.DistilBertEmbeddings.position_embeddings", "bert.DistilBertEmbeddings.LayerNorm", "bert.DistilBertEmbeddings.dropout", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", ")", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        input_ids: torch.tensor(bs, max_seq_length)\n            The token ids to embed.\n        token_type_ids: no used.\n        Outputs\n        -------\n        embeddings: torch.tensor(bs, max_seq_length, dim)\n            The embedded tokens (plus position embeddings, no token_type embeddings)\n        \"\"\"", "\n", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "# (max_seq_length)", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "# (bs, max_seq_length)", "\n", "\n", "word_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "# (bs, max_seq_length, dim)", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "# (bs, max_seq_length, dim)", "\n", "\n", "embeddings", "=", "word_embeddings", "+", "position_embeddings", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "# (bs, max_seq_length, dim)", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertEmbeddings.__init__": [[216, 226], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertEmbeddings.forward": [[227, 246], ["input_ids.size", "bert.BertEmbeddings.position_embeddings", "bert.BertEmbeddings.token_type_embeddings", "bert.BertEmbeddings.LayerNorm", "bert.BertEmbeddings.dropout", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "torch.zeros_like", "bert.BertEmbeddings.word_embeddings", "input_ids.size", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "bert.BertEmbeddings.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "words_embeddings", "=", "None", ")", ":", "\n", "        ", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "", "if", "words_embeddings", "is", "None", ":", "\n", "            ", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "", "else", ":", "\n", "            ", "assert", "input_ids", ".", "size", "(", ")", "==", "words_embeddings", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertSelfAttention.__init__": [[249, 264], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertSelfAttention.transpose_for_scores": [[265, 269], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertSelfAttention.forward": [[270, 297], ["bert.BertSelfAttention.query", "bert.BertSelfAttention.key", "bert.BertSelfAttention.value", "bert.BertSelfAttention.transpose_for_scores", "bert.BertSelfAttention.transpose_for_scores", "bert.BertSelfAttention.transpose_for_scores", "torch.matmul", "bert.BertSelfAttention.dropout", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "bert.BertSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "return", "context_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertSelfOutput.__init__": [[300, 305], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertSelfOutput.forward": [[306, 311], ["bert.BertSelfOutput.dense", "bert.BertSelfOutput.dropout", "bert.BertSelfOutput.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertAttention.__init__": [[314, 318], ["torch.nn.Module.__init__", "bert.BertSelfAttention", "bert.BertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertAttention.forward": [[319, 323], ["bert.BertAttention.self", "bert.BertAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ")", ":", "\n", "        ", "self_output", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_output", ",", "input_tensor", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertIntermediate.__init__": [[326, 333], ["torch.nn.Module.__init__", "torch.nn.Linear", "isinstance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertIntermediate.forward": [[334, 338], ["bert.BertIntermediate.dense", "bert.BertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertOutput.__init__": [[341, 346], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertOutput.forward": [[347, 352], ["bert.BertOutput.dense", "bert.BertOutput.dropout", "bert.BertOutput.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertLayer.__init__": [[355, 360], ["torch.nn.Module.__init__", "bert.BertAttention", "bert.BertIntermediate", "bert.BertOutput"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertLayer.forward": [[361, 366], ["bert.BertLayer.attention", "bert.BertLayer.intermediate", "bert.BertLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "attention_output", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ")", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertEncoder.__init__": [[369, 373], ["torch.nn.Module.__init__", "bert.BertLayer", "torch.nn.ModuleList", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layer", "=", "BertLayer", "(", "config", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "layer", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertEncoder.forward": [[374, 383], ["layer_module", "all_encoder_layers.append", "all_encoder_layers.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "all_encoder_layers", "=", "[", "]", "\n", "for", "layer_module", "in", "self", ".", "layer", ":", "\n", "            ", "hidden_states", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ")", "\n", "if", "output_all_encoded_layers", ":", "\n", "                ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "all_encoder_layers", ".", "append", "(", "hidden_states", ")", "\n", "", "return", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertPooler.__init__": [[386, 390], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertPooler.forward": [[391, 398], ["bert.BertPooler.dense", "bert.BertPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertModel.__init__": [[425, 454], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "hasattr", "bert.BertEncoder", "bert.BertModel.apply", "isinstance", "ValueError", "bert.DistilBertEmbeddings", "bert.BertEmbeddings", "bert.BertPooler", "core.logger.info", "kwargs[].lower"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BertModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "BertConfig", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of class `BertConfig`. \"", "\n", "\"To create a model from a Google pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "", "super", "(", "BertModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "hidden_size", "=", "self", ".", "config", ".", "hidden_size", "\n", "self", ".", "model_type", "=", "'bert'", "\n", "if", "hasattr", "(", "config", ",", "'sinusoidal_pos_embds'", ")", ":", "\n", "            ", "self", ".", "model_type", "=", "'distilbert'", "\n", "", "elif", "'model_type'", "in", "kwargs", ":", "\n", "            ", "self", ".", "model_type", "=", "kwargs", "[", "'model_type'", "]", ".", "lower", "(", ")", "\n", "\n", "", "if", "self", ".", "model_type", "==", "'distilbert'", ":", "\n", "            ", "self", ".", "embeddings", "=", "DistilBertEmbeddings", "(", "config", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embeddings", "=", "BertEmbeddings", "(", "config", ")", "\n", "\n", "", "self", ".", "encoder", "=", "BertEncoder", "(", "config", ")", "\n", "if", "self", ".", "model_type", "!=", "'distilbert'", ":", "\n", "            ", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'DistilBert has NOT pooler, will use hidden states of [CLS] token as pooled output.'", ")", "\n", "", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertModel.init_bert_weights": [[455, 467], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "init_bert_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "r\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "BertLayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertModel.forward": [[468, 514], ["torch.ones_like.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "bert.BertModel.embeddings", "bert.BertModel.encoder", "torch.ones_like", "torch.zeros_like", "bert.BertModel.pooler", "bert.BertModel.insert", "torch.ones_like.unsqueeze", "next", "bert.BertModel.parameters"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next"], ["", "", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "output_all_encoded_layers", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n\n        :param torch.LongTensor input_ids: bsz x max_len\u7684\u8f93\u5165id\n        :param torch.LongTensor token_type_ids: bsz x max_len\uff0c\u5982\u679c\u4e0d\u8f93\u5165\u8ba4\u4e3a\u5168\u4e3a0\uff0c\u4e00\u822c\u7b2c\u4e00\u4e2asep(\u542b)\u53ca\u4ee5\u524d\u4e3a0, \u4e00\u4e2asep\u4e4b\u540e\u4e3a1\n        :param attention_mask: \u9700\u8981attend\u7684\u4e3a1\uff0c\u4e0d\u9700\u8981\u4e3a0\n        :param bool output_all_encoded_layers: \u662f\u5426\u8f93\u51fa\u6240\u6709\u5c42\uff0c\u9ed8\u8ba4\u8f93\u51fatoken embedding(\u5305\u542bbpe, position\u4ee5\u53catype embedding)\n            \u53ca\u6bcf\u4e00\u5c42\u7684hidden states\u3002\u5982\u679c\u4e3aFalse\uff0c\u53ea\u8f93\u51fa\u6700\u540e\u4e00\u5c42\u7684\u7ed3\u679c\n        :return: encode_layers: \u5982\u679coutput_all_encoded_layers\u4e3aTrue\uff0c\u8fd4\u56delist(\u5171num_layers+1\u4e2a\u5143\u7d20)\uff0c\u6bcf\u4e2a\u5143\u7d20\u4e3a\n            bsz x max_len x hidden_size\u5426\u5219\u8fd4\u56debsz x max_len x hidden_size\u7684tensor;\n            pooled_output: bsz x hidden_size\u4e3acls\u7684\u8868\u793a\uff0c\u53ef\u4ee5\u7528\u4e8e\u53e5\u5b50\u7684\u5206\u7c7b\n        \"\"\"", "\n", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones_like", "(", "input_ids", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ",", "token_type_ids", ")", "\n", "encoded_layers", "=", "self", ".", "encoder", "(", "embedding_output", ",", "\n", "extended_attention_mask", ",", "\n", "output_all_encoded_layers", "=", "output_all_encoded_layers", ")", "\n", "sequence_output", "=", "encoded_layers", "[", "-", "1", "]", "\n", "if", "self", ".", "model_type", "!=", "'distilbert'", ":", "\n", "            ", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "", "else", ":", "\n", "            ", "pooled_output", "=", "sequence_output", "[", ":", ",", "0", "]", "\n", "", "if", "not", "output_all_encoded_layers", ":", "\n", "            ", "encoded_layers", "=", "encoded_layers", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "encoded_layers", ".", "insert", "(", "0", ",", "embedding_output", ")", "\n", "", "return", "encoded_layers", ",", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertModel.from_pretrained": [[515, 609], ["kwargs.get", "kwargs.pop", "kwargs.pop", "kwargs.pop", "io.file_utils._get_bert_dir", "io.file_utils._get_file_name_base_on_postfix", "bert.BertConfig.from_json_file", "torch.load.keys", "zip", "torch.load.keys", "zip", "torch.load.keys", "zip", "cls", "getattr", "torch.load.copy", "bert.BertModel.from_pretrained.load"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_bert_dir", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.from_json_file", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "model_dir_or_name", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "state_dict", "=", "kwargs", ".", "get", "(", "'state_dict'", ",", "None", ")", "\n", "kwargs", ".", "pop", "(", "'state_dict'", ",", "None", ")", "\n", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "kwargs", ".", "pop", "(", "'from_tf'", ",", "None", ")", "\n", "\n", "# get model dir from name or dir", "\n", "pretrained_model_dir", "=", "_get_bert_dir", "(", "model_dir_or_name", ")", "\n", "\n", "# Load config", "\n", "config_file", "=", "_get_file_name_base_on_postfix", "(", "pretrained_model_dir", ",", "'.json'", ")", "\n", "config", "=", "BertConfig", ".", "from_json_file", "(", "config_file", ")", "\n", "\n", "if", "state_dict", "is", "None", ":", "\n", "            ", "weights_path", "=", "_get_file_name_base_on_postfix", "(", "pretrained_model_dir", ",", "'.bin'", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "weights_path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "error", "(", "f'Cannot load parameters through `state_dict` variable.'", ")", "\n", "raise", "RuntimeError", "(", "f'Cannot load parameters through `state_dict` variable.'", ")", "\n", "\n", "", "model_type", "=", "'BERT'", "\n", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_key", "=", "None", "\n", "if", "'bert'", "not", "in", "key", ":", "\n", "                ", "new_key", "=", "'bert.'", "+", "key", "\n", "", "if", "new_key", ":", "\n", "                ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "            ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_key", "=", "None", "\n", "for", "key_name", "in", "BERT_KEY_RENAME_MAP_1", ":", "\n", "                ", "if", "key_name", "in", "key", ":", "\n", "                    ", "new_key", "=", "key", ".", "replace", "(", "key_name", ",", "BERT_KEY_RENAME_MAP_1", "[", "key_name", "]", ")", "\n", "if", "'distilbert'", "in", "key", ":", "\n", "                        ", "model_type", "=", "'DistilBert'", "\n", "", "break", "\n", "", "", "if", "new_key", ":", "\n", "                ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "            ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_key", "=", "None", "\n", "for", "key_name", "in", "BERT_KEY_RENAME_MAP_2", ":", "\n", "                ", "if", "key_name", "in", "key", ":", "\n", "                    ", "new_key", "=", "key", ".", "replace", "(", "key_name", ",", "BERT_KEY_RENAME_MAP_2", "[", "key_name", "]", ")", "\n", "break", "\n", "", "", "if", "new_key", ":", "\n", "                ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "            ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "# Instantiate model.", "\n", "", "model", "=", "cls", "(", "config", ",", "model_type", "=", "model_type", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "            ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "child", "is", "not", "None", ":", "\n", "                    ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "", "", "", "load", "(", "model", ",", "prefix", "=", "''", "if", "hasattr", "(", "model", ",", "'bert'", ")", "else", "'bert.'", ")", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Weights of {} not initialized from pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "debug", "(", "\"Weights from pretrained model not used in {}: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "f\"Load pre-trained {model_type} parameters from file {weights_path}.\"", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.BertModel.save_pretrained": [[610, 630], ["os.path.isdir", "model_to_save.config.save_pretrained", "os.path.join", "torch.save", "core.logger.debug", "hasattr", "model_to_save.state_dict"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" \u4fdd\u5b58\u6a21\u578b\u5230\u67d0\u4e2afolder\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "\n", "save_directory", "\n", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# Only save the model itself if we are using distributed training", "\n", "model_to_save", "=", "self", ".", "module", "if", "hasattr", "(", "self", ",", "\"module\"", ")", "else", "self", "\n", "\n", "# Attach architecture to the config", "\n", "model_to_save", ".", "config", ".", "architectures", "=", "[", "model_to_save", ".", "__class__", ".", "__name__", "]", "\n", "\n", "# Save configuration file", "\n", "model_to_save", ".", "config", ".", "save_pretrained", "(", "save_directory", ")", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "WEIGHTS_NAME", ")", "\n", "torch", ".", "save", "(", "model_to_save", ".", "state_dict", "(", ")", ",", "output_model_file", ")", "\n", "logger", ".", "debug", "(", "\"Model weights saved in {}\"", ".", "format", "(", "output_model_file", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.gelu": [[149, 151], ["torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.bert.swish": [[153, 155], ["torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.star_transformer.StarTransformer.__init__": [[23, 52], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.Dropout", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Embedding", "torch.nn.LayerNorm", "star_transformer._MSA1", "star_transformer._MSA2", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "num_layers", ",", "num_head", ",", "head_dim", ",", "dropout", "=", "0.1", ",", "max_len", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param int hidden_size: \u8f93\u5165\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002\u540c\u65f6\u4e5f\u662f\u8f93\u51fa\u7ef4\u5ea6\u7684\u5927\u5c0f\u3002\n        :param int num_layers: star-transformer\u7684\u5c42\u6570\n        :param int num_head: head\u7684\u6570\u91cf\u3002\n        :param int head_dim: \u6bcf\u4e2ahead\u7684\u7ef4\u5ea6\u5927\u5c0f\u3002\n        :param float dropout: dropout \u6982\u7387. Default: 0.1\n        :param int max_len: int or None, \u5982\u679c\u4e3aint\uff0c\u8f93\u5165\u5e8f\u5217\u7684\u6700\u5927\u957f\u5ea6\uff0c\n            \u6a21\u578b\u4f1a\u4e3a\u8f93\u5165\u5e8f\u5217\u52a0\u4e0aposition embedding\u3002\n            \u82e5\u4e3a`None`\uff0c\u5ffd\u7565\u52a0\u4e0aposition embedding\u7684\u6b65\u9aa4. Default: `None`\n        \"\"\"", "\n", "super", "(", "StarTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "iters", "=", "num_layers", "\n", "\n", "self", ".", "norm", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "LayerNorm", "(", "hidden_size", ",", "eps", "=", "1e-6", ")", "for", "_", "in", "range", "(", "self", ".", "iters", ")", "]", ")", "\n", "# self.emb_fc = nn.Conv2d(hidden_size, hidden_size, 1)", "\n", "self", ".", "emb_drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "ring_att", "=", "nn", ".", "ModuleList", "(", "\n", "[", "_MSA1", "(", "hidden_size", ",", "nhead", "=", "num_head", ",", "head_dim", "=", "head_dim", ",", "dropout", "=", "0.0", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "iters", ")", "]", ")", "\n", "self", ".", "star_att", "=", "nn", ".", "ModuleList", "(", "\n", "[", "_MSA2", "(", "hidden_size", ",", "nhead", "=", "num_head", ",", "head_dim", "=", "head_dim", ",", "dropout", "=", "0.0", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "iters", ")", "]", ")", "\n", "\n", "if", "max_len", "is", "not", "None", ":", "\n", "            ", "self", ".", "pos_emb", "=", "nn", ".", "Embedding", "(", "max_len", ",", "hidden_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pos_emb", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.star_transformer.StarTransformer.forward": [[53, 92], ["data.size", "mask.eq.eq.eq", "torch.cat", "star_transformer.StarTransformer.forward.norm_func"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "mask", ")", ":", "\n", "        ", "r\"\"\"\n        :param FloatTensor data: [batch, length, hidden] \u8f93\u5165\u7684\u5e8f\u5217\n        :param ByteTensor mask: [batch, length] \u8f93\u5165\u5e8f\u5217\u7684padding mask, \u5728\u6ca1\u6709\u5185\u5bb9(padding \u90e8\u5206) \u4e3a 0,\n            \u5426\u5219\u4e3a 1\n        :return: [batch, length, hidden] \u7f16\u7801\u540e\u7684\u8f93\u51fa\u5e8f\u5217\n\n                [batch, hidden] \u5168\u5c40 relay \u8282\u70b9, \u8be6\u89c1\u8bba\u6587\n        \"\"\"", "\n", "\n", "def", "norm_func", "(", "f", ",", "x", ")", ":", "\n", "# B, H, L, 1", "\n", "            ", "return", "f", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "", "B", ",", "L", ",", "H", "=", "data", ".", "size", "(", ")", "\n", "mask", "=", "(", "mask", ".", "eq", "(", "False", ")", ")", "# flip the mask for masked_fill_", "\n", "smask", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "B", ",", "1", ",", ")", ".", "byte", "(", ")", ".", "to", "(", "mask", ")", ",", "mask", "]", ",", "1", ")", "\n", "\n", "embs", "=", "data", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "# B H L 1", "\n", "if", "self", ".", "pos_emb", ":", "\n", "            ", "P", "=", "self", ".", "pos_emb", "(", "torch", ".", "arange", "(", "L", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "embs", ".", "device", ")", ".", "view", "(", "1", ",", "L", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "# 1 H L 1", "\n", "embs", "=", "embs", "+", "P", "\n", "", "embs", "=", "norm_func", "(", "self", ".", "emb_drop", ",", "embs", ")", "\n", "nodes", "=", "embs", "\n", "relay", "=", "embs", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", "\n", "ex_mask", "=", "mask", "[", ":", ",", "None", ",", ":", ",", "None", "]", ".", "expand", "(", "B", ",", "H", ",", "L", ",", "1", ")", "\n", "r_embs", "=", "embs", ".", "view", "(", "B", ",", "H", ",", "1", ",", "L", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "iters", ")", ":", "\n", "            ", "ax", "=", "torch", ".", "cat", "(", "[", "r_embs", ",", "relay", ".", "expand", "(", "B", ",", "H", ",", "1", ",", "L", ")", "]", ",", "2", ")", "\n", "nodes", "=", "F", ".", "leaky_relu", "(", "self", ".", "ring_att", "[", "i", "]", "(", "norm_func", "(", "self", ".", "norm", "[", "i", "]", ",", "nodes", ")", ",", "ax", "=", "ax", ")", ")", "\n", "# nodes = F.leaky_relu(self.ring_att[i](nodes, ax=ax))", "\n", "relay", "=", "F", ".", "leaky_relu", "(", "self", ".", "star_att", "[", "i", "]", "(", "relay", ",", "torch", ".", "cat", "(", "[", "relay", ",", "nodes", "]", ",", "2", ")", ",", "smask", ")", ")", "\n", "\n", "nodes", "=", "nodes", ".", "masked_fill_", "(", "ex_mask", ",", "0", ")", "\n", "\n", "", "nodes", "=", "nodes", ".", "view", "(", "B", ",", "H", ",", "L", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "return", "nodes", ",", "relay", ".", "view", "(", "B", ",", "H", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.star_transformer._MSA1.__init__": [[95, 108], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nhid", ",", "nhead", "=", "10", ",", "head_dim", "=", "10", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "_MSA1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Multi-head Self Attention Case 1, doing self-attention for small regions", "\n", "# Due to the architecture of GPU, using hadamard production and summation are faster than dot production when unfold_size is very small", "\n", "self", ".", "WQ", "=", "nn", ".", "Conv2d", "(", "nhid", ",", "nhead", "*", "head_dim", ",", "1", ")", "\n", "self", ".", "WK", "=", "nn", ".", "Conv2d", "(", "nhid", ",", "nhead", "*", "head_dim", ",", "1", ")", "\n", "self", ".", "WV", "=", "nn", ".", "Conv2d", "(", "nhid", ",", "nhead", "*", "head_dim", ",", "1", ")", "\n", "self", ".", "WO", "=", "nn", ".", "Conv2d", "(", "nhead", "*", "head_dim", ",", "nhid", ",", "1", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "# print('NUM_HEAD', nhead, 'DIM_HEAD', head_dim)", "\n", "self", ".", "nhid", ",", "self", ".", "nhead", ",", "self", ".", "head_dim", ",", "self", ".", "unfold_size", "=", "nhid", ",", "nhead", ",", "head_dim", ",", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.star_transformer._MSA1.forward": [[109, 135], ["q.view.view.view", "torch.nn.functional.unfold().view", "torch.nn.functional.unfold().view", "star_transformer._MSA1.drop", "star_transformer._MSA1.WO", "star_transformer._MSA1.WQ", "star_transformer._MSA1.WK", "star_transformer._MSA1.WV", "star_transformer._MSA1.WK().view", "star_transformer._MSA1.WV().view", "torch.cat", "torch.cat", "torch.nn.functional.softmax", "torch.nn.functional.unfold", "torch.nn.functional.unfold", "star_transformer._MSA1.WK", "star_transformer._MSA1.WV", "torch.cat.view", "torch.cat.view", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop"], ["", "def", "forward", "(", "self", ",", "x", ",", "ax", "=", "None", ")", ":", "\n", "# x: B, H, L, 1, ax : B, H, X, L append features", "\n", "        ", "nhid", ",", "nhead", ",", "head_dim", ",", "unfold_size", "=", "self", ".", "nhid", ",", "self", ".", "nhead", ",", "self", ".", "head_dim", ",", "self", ".", "unfold_size", "\n", "B", ",", "H", ",", "L", ",", "_", "=", "x", ".", "shape", "\n", "\n", "q", ",", "k", ",", "v", "=", "self", ".", "WQ", "(", "x", ")", ",", "self", ".", "WK", "(", "x", ")", ",", "self", ".", "WV", "(", "x", ")", "# x: (B,H,L,1)", "\n", "\n", "if", "ax", "is", "not", "None", ":", "\n", "            ", "aL", "=", "ax", ".", "shape", "[", "2", "]", "\n", "ak", "=", "self", ".", "WK", "(", "ax", ")", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "aL", ",", "L", ")", "\n", "av", "=", "self", ".", "WV", "(", "ax", ")", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "aL", ",", "L", ")", "\n", "", "q", "=", "q", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "1", ",", "L", ")", "\n", "k", "=", "F", ".", "unfold", "(", "k", ".", "view", "(", "B", ",", "nhead", "*", "head_dim", ",", "L", ",", "1", ")", ",", "(", "unfold_size", ",", "1", ")", ",", "padding", "=", "(", "unfold_size", "//", "2", ",", "0", ")", ")", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "unfold_size", ",", "L", ")", "\n", "v", "=", "F", ".", "unfold", "(", "v", ".", "view", "(", "B", ",", "nhead", "*", "head_dim", ",", "L", ",", "1", ")", ",", "(", "unfold_size", ",", "1", ")", ",", "padding", "=", "(", "unfold_size", "//", "2", ",", "0", ")", ")", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "unfold_size", ",", "L", ")", "\n", "if", "ax", "is", "not", "None", ":", "\n", "            ", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "ak", "]", ",", "3", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "av", "]", ",", "3", ")", "\n", "\n", "", "alphas", "=", "self", ".", "drop", "(", "F", ".", "softmax", "(", "(", "q", "*", "k", ")", ".", "sum", "(", "2", ",", "keepdim", "=", "True", ")", "/", "NP", ".", "sqrt", "(", "head_dim", ")", ",", "3", ")", ")", "# B N L 1 U", "\n", "att", "=", "(", "alphas", "*", "v", ")", ".", "sum", "(", "3", ")", ".", "view", "(", "B", ",", "nhead", "*", "head_dim", ",", "L", ",", "1", ")", "\n", "\n", "ret", "=", "self", ".", "WO", "(", "att", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.star_transformer._MSA2.__init__": [[138, 150], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nhid", ",", "nhead", "=", "10", ",", "head_dim", "=", "10", ",", "dropout", "=", "0.1", ")", ":", "\n", "# Multi-head Self Attention Case 2, a broadcastable query for a sequence key and value", "\n", "        ", "super", "(", "_MSA2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "WQ", "=", "nn", ".", "Conv2d", "(", "nhid", ",", "nhead", "*", "head_dim", ",", "1", ")", "\n", "self", ".", "WK", "=", "nn", ".", "Conv2d", "(", "nhid", ",", "nhead", "*", "head_dim", ",", "1", ")", "\n", "self", ".", "WV", "=", "nn", ".", "Conv2d", "(", "nhid", ",", "nhead", "*", "head_dim", ",", "1", ")", "\n", "self", ".", "WO", "=", "nn", ".", "Conv2d", "(", "nhead", "*", "head_dim", ",", "nhid", ",", "1", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "# print('NUM_HEAD', nhead, 'DIM_HEAD', head_dim)", "\n", "self", ".", "nhid", ",", "self", ".", "nhead", ",", "self", ".", "head_dim", ",", "self", ".", "unfold_size", "=", "nhid", ",", "nhead", ",", "head_dim", ",", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.star_transformer._MSA2.forward": [[151, 167], ["q.view.view.view", "k.view.view.view", "v.view().permute.view().permute.view().permute", "star_transformer._MSA2.drop", "torch.matmul().view", "star_transformer._MSA2.WO", "star_transformer._MSA2.WQ", "star_transformer._MSA2.WK", "star_transformer._MSA2.WV", "torch.matmul", "numpy.sqrt", "pre_a.masked_fill.masked_fill.masked_fill", "torch.nn.functional.softmax", "v.view().permute.view().permute.view", "torch.matmul", "float"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "mask", "=", "None", ")", ":", "\n", "# x: B, H, 1, 1, 1 y: B H L 1", "\n", "        ", "nhid", ",", "nhead", ",", "head_dim", ",", "unfold_size", "=", "self", ".", "nhid", ",", "self", ".", "nhead", ",", "self", ".", "head_dim", ",", "self", ".", "unfold_size", "\n", "B", ",", "H", ",", "L", ",", "_", "=", "y", ".", "shape", "\n", "\n", "q", ",", "k", ",", "v", "=", "self", ".", "WQ", "(", "x", ")", ",", "self", ".", "WK", "(", "y", ")", ",", "self", ".", "WV", "(", "y", ")", "\n", "\n", "q", "=", "q", ".", "view", "(", "B", ",", "nhead", ",", "1", ",", "head_dim", ")", "# B, H, 1, 1 -> B, N, 1, h", "\n", "k", "=", "k", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "L", ")", "# B, H, L, 1 -> B, N, h, L", "\n", "v", "=", "v", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "L", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "# B, H, L, 1 -> B, N, L, h", "\n", "pre_a", "=", "torch", ".", "matmul", "(", "q", ",", "k", ")", "/", "NP", ".", "sqrt", "(", "head_dim", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "pre_a", "=", "pre_a", ".", "masked_fill", "(", "mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "alphas", "=", "self", ".", "drop", "(", "F", ".", "softmax", "(", "pre_a", ",", "3", ")", ")", "# B, N, 1, L", "\n", "att", "=", "torch", ".", "matmul", "(", "alphas", ",", "v", ")", ".", "view", "(", "B", ",", "-", "1", ",", "1", ",", "1", ")", "# B, N, 1, h -> B, N*h, 1, 1", "\n", "return", "self", ".", "WO", "(", "att", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.variational_rnn.VarRnnCellWrapper.__init__": [[34, 40], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "cell", ",", "hidden_size", ",", "input_p", ",", "hidden_p", ")", ":", "\n", "        ", "super", "(", "VarRnnCellWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cell", "=", "cell", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "input_p", "=", "input_p", "\n", "self", ".", "hidden_p", "=", "hidden_p", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.variational_rnn.VarRnnCellWrapper.forward": [[41, 101], ["isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "flip", "input.size", "hidden.clone", "list", "torch.nn.utils.rnn.PackedSequence", "torch.nn.utils.rnn.PackedSequence", "cell.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hidden[].clone", "hidden[].clone", "cell", "list.append", "cell", "list.append", "reversed", "variational_rnn.VarRnnCellWrapper.forward.get_hi"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "forward", "(", "self", ",", "input_x", ",", "hidden", ",", "mask_x", ",", "mask_h", ",", "is_reversed", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        :param PackedSequence input_x: [seq_len, batch_size, input_size]\n        :param hidden: for LSTM, tuple of (h_0, c_0), [batch_size, hidden_size]\n            for other RNN, h_0, [batch_size, hidden_size]\n        :param mask_x: [batch_size, input_size] dropout mask for input\n        :param mask_h: [batch_size, hidden_size] dropout mask for hidden\n        :return PackedSequence output: [seq_len, bacth_size, hidden_size]\n                hidden: for LSTM, tuple of (h_n, c_n), [batch_size, hidden_size]\n                        for other RNN, h_n, [batch_size, hidden_size]\n        \"\"\"", "\n", "\n", "def", "get_hi", "(", "hi", ",", "h0", ",", "size", ")", ":", "\n", "            ", "h0_size", "=", "size", "-", "hi", ".", "size", "(", "0", ")", "\n", "if", "h0_size", ">", "0", ":", "\n", "                ", "return", "torch", ".", "cat", "(", "[", "hi", ",", "h0", "[", ":", "h0_size", "]", "]", ",", "dim", "=", "0", ")", "\n", "", "return", "hi", "[", ":", "size", "]", "\n", "\n", "", "is_lstm", "=", "isinstance", "(", "hidden", ",", "tuple", ")", "\n", "input", ",", "batch_sizes", "=", "input_x", ".", "data", ",", "input_x", ".", "batch_sizes", "\n", "output", "=", "[", "]", "\n", "cell", "=", "self", ".", "cell", "\n", "if", "is_reversed", ":", "\n", "            ", "batch_iter", "=", "flip", "(", "batch_sizes", ",", "[", "0", "]", ")", "\n", "idx", "=", "input", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "batch_iter", "=", "batch_sizes", "\n", "idx", "=", "0", "\n", "\n", "", "if", "is_lstm", ":", "\n", "            ", "hn", "=", "(", "hidden", "[", "0", "]", ".", "clone", "(", ")", ",", "hidden", "[", "1", "]", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "hn", "=", "hidden", ".", "clone", "(", ")", "\n", "", "hi", "=", "hidden", "\n", "for", "size", "in", "batch_iter", ":", "\n", "            ", "if", "is_reversed", ":", "\n", "                ", "input_i", "=", "input", "[", "idx", "-", "size", ":", "idx", "]", "*", "mask_x", "[", ":", "size", "]", "\n", "idx", "-=", "size", "\n", "", "else", ":", "\n", "                ", "input_i", "=", "input", "[", "idx", ":", "idx", "+", "size", "]", "*", "mask_x", "[", ":", "size", "]", "\n", "idx", "+=", "size", "\n", "", "mask_hi", "=", "mask_h", "[", ":", "size", "]", "\n", "if", "is_lstm", ":", "\n", "                ", "hx", ",", "cx", "=", "hi", "\n", "hi", "=", "(", "get_hi", "(", "hx", ",", "hidden", "[", "0", "]", ",", "size", ")", "*", "\n", "mask_hi", ",", "get_hi", "(", "cx", ",", "hidden", "[", "1", "]", ",", "size", ")", ")", "\n", "hi", "=", "cell", "(", "input_i", ",", "hi", ")", "\n", "hn", "[", "0", "]", "[", ":", "size", "]", "=", "hi", "[", "0", "]", "\n", "hn", "[", "1", "]", "[", ":", "size", "]", "=", "hi", "[", "1", "]", "\n", "output", ".", "append", "(", "hi", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "hi", "=", "get_hi", "(", "hi", ",", "hidden", ",", "size", ")", "*", "mask_hi", "\n", "hi", "=", "cell", "(", "input_i", ",", "hi", ")", "\n", "hn", "[", ":", "size", "]", "=", "hi", "\n", "output", ".", "append", "(", "hi", ")", "\n", "\n", "", "", "if", "is_reversed", ":", "\n", "            ", "output", "=", "list", "(", "reversed", "(", "output", ")", ")", "\n", "", "output", "=", "torch", ".", "cat", "(", "output", ",", "dim", "=", "0", ")", "\n", "return", "PackedSequence", "(", "output", ",", "batch_sizes", ")", ",", "hn", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.variational_rnn.VarRNNBase.__init__": [[112, 149], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "utils.initial_parameter", "range", "Cell", "variational_rnn.VarRNNBase._all_cells.append", "variational_rnn.VarRnnCellWrapper"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.utils.initial_parameter", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["def", "__init__", "(", "self", ",", "mode", ",", "Cell", ",", "input_size", ",", "hidden_size", ",", "num_layers", "=", "1", ",", "\n", "bias", "=", "True", ",", "batch_first", "=", "False", ",", "\n", "input_dropout", "=", "0", ",", "hidden_dropout", "=", "0", ",", "bidirectional", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param mode: rnn \u6a21\u5f0f, (lstm or not)\n        :param Cell: rnn cell \u7c7b\u578b, (lstm, gru, etc)\n        :param input_size:  \u8f93\u5165 `x` \u7684\u7279\u5f81\u7ef4\u5ea6\n        :param hidden_size: \u9690\u72b6\u6001 `h` \u7684\u7279\u5f81\u7ef4\u5ea6\n        :param num_layers: rnn\u7684\u5c42\u6570. Default: 1\n        :param bias: \u5982\u679c\u4e3a ``False``, \u6a21\u578b\u5c06\u4e0d\u4f1a\u4f7f\u7528bias. Default: ``True``\n        :param batch_first: \u82e5\u4e3a ``True``, \u8f93\u5165\u548c\u8f93\u51fa ``Tensor`` \u5f62\u72b6\u4e3a\n            (batch, seq, feature). Default: ``False``\n        :param input_dropout: \u5bf9\u8f93\u5165\u7684dropout\u6982\u7387. Default: 0\n        :param hidden_dropout: \u5bf9\u6bcf\u4e2a\u9690\u72b6\u6001\u7684dropout\u6982\u7387. Default: 0\n        :param bidirectional: \u82e5\u4e3a ``True``, \u4f7f\u7528\u53cc\u5411\u7684RNN. Default: ``False``\n        \"\"\"", "\n", "super", "(", "VarRNNBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "input_dropout", "=", "input_dropout", "\n", "self", ".", "hidden_dropout", "=", "hidden_dropout", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "num_directions", "=", "2", "if", "bidirectional", "else", "1", "\n", "self", ".", "_all_cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "for", "direction", "in", "range", "(", "self", ".", "num_directions", ")", ":", "\n", "                ", "input_size", "=", "self", ".", "input_size", "if", "layer", "==", "0", "else", "self", ".", "hidden_size", "*", "self", ".", "num_directions", "\n", "cell", "=", "Cell", "(", "input_size", ",", "self", ".", "hidden_size", ",", "bias", ")", "\n", "self", ".", "_all_cells", ".", "append", "(", "VarRnnCellWrapper", "(", "\n", "cell", ",", "self", ".", "hidden_size", ",", "input_dropout", ",", "hidden_dropout", ")", ")", "\n", "", "", "initial_parameter", "(", "self", ")", "\n", "self", ".", "is_lstm", "=", "(", "self", ".", "mode", "==", "\"LSTM\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.variational_rnn.VarRNNBase._forward_one": [[150, 158], ["cell"], "methods", ["None"], ["", "def", "_forward_one", "(", "self", ",", "n_layer", ",", "n_direction", ",", "input", ",", "hx", ",", "mask_x", ",", "mask_h", ")", ":", "\n", "        ", "is_lstm", "=", "self", ".", "is_lstm", "\n", "idx", "=", "self", ".", "num_directions", "*", "n_layer", "+", "n_direction", "\n", "cell", "=", "self", ".", "_all_cells", "[", "idx", "]", "\n", "hi", "=", "(", "hx", "[", "0", "]", "[", "idx", "]", ",", "hx", "[", "1", "]", "[", "idx", "]", ")", "if", "is_lstm", "else", "hx", "[", "idx", "]", "\n", "output_x", ",", "hidden_x", "=", "cell", "(", "\n", "input", ",", "hi", ",", "mask_x", ",", "mask_h", ",", "is_reversed", "=", "(", "n_direction", "==", "1", ")", ")", "\n", "return", "output_x", ",", "hidden_x", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.variational_rnn.VarRNNBase.forward": [[159, 226], ["isinstance", "torch.nn.utils.rnn.PackedSequence.new_ones", "torch.nn.utils.rnn.PackedSequence.new_ones", "torch.nn.utils.rnn.PackedSequence.new_ones", "torch.nn.utils.rnn.PackedSequence.new_ones", "torch.nn.utils.rnn.PackedSequence.new_ones", "torch.nn.utils.rnn.PackedSequence.new_ones", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.nn.utils.rnn.PackedSequence.new_zeros", "torch.nn.utils.rnn.PackedSequence.new_zeros", "range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "int", "torch.nn.utils.rnn.PackedSequence.new_zeros", "torch.nn.utils.rnn.PackedSequence.new_zeros", "torch.nn.utils.rnn.PackedSequence.new_zeros", "torch.nn.utils.rnn.PackedSequence.new_zeros", "torch.nn.utils.rnn.PackedSequence", "torch.nn.utils.rnn.PackedSequence", "torch.functional.dropout", "torch.functional.dropout", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.utils.rnn.PackedSequence", "torch.nn.utils.rnn.PackedSequence", "torch.nn.utils.rnn.PackedSequence", "torch.nn.utils.rnn.PackedSequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.PackedSequence.size", "torch.nn.utils.rnn.PackedSequence.size", "torch.nn.utils.rnn.PackedSequence.size", "torch.nn.utils.rnn.PackedSequence.size", "torch.nn.utils.rnn.PackedSequence.size", "torch.nn.utils.rnn.PackedSequence.size", "torch.nn.utils.rnn.PackedSequence.size", "torch.nn.utils.rnn.PackedSequence.size", "variational_rnn.VarRNNBase._forward_one", "output_list.append", "torch.nn.utils.rnn.PackedSequence.new_zeros.new_zeros", "range", "torch.nn.utils.rnn.PackedSequence.new_zeros.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.variational_rnn.VarRNNBase._forward_one", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "hx", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param x: [batch, seq_len, input_size] \u8f93\u5165\u5e8f\u5217\n        :param hx: [batch, hidden_size] \u521d\u59cb\u9690\u72b6\u6001, \u82e5\u4e3a ``None`` , \u8bbe\u4e3a\u51681\u5411\u91cf. Default: ``None``\n        :return (output, ht): [batch, seq_len, hidden_size*num_direction] \u8f93\u51fa\u5e8f\u5217\n            \u548c [batch, hidden_size*num_direction] \u6700\u540e\u65f6\u523b\u9690\u72b6\u6001\n        \"\"\"", "\n", "is_lstm", "=", "self", ".", "is_lstm", "\n", "is_packed", "=", "isinstance", "(", "x", ",", "PackedSequence", ")", "\n", "if", "not", "is_packed", ":", "\n", "            ", "seq_len", "=", "x", ".", "size", "(", "1", ")", "if", "self", ".", "batch_first", "else", "x", ".", "size", "(", "0", ")", "\n", "max_batch_size", "=", "x", ".", "size", "(", "0", ")", "if", "self", ".", "batch_first", "else", "x", ".", "size", "(", "1", ")", "\n", "seq_lens", "=", "torch", ".", "LongTensor", "(", "\n", "[", "seq_len", "for", "_", "in", "range", "(", "max_batch_size", ")", "]", ")", "\n", "x", "=", "pack_padded_sequence", "(", "x", ",", "seq_lens", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "", "else", ":", "\n", "            ", "max_batch_size", "=", "int", "(", "x", ".", "batch_sizes", "[", "0", "]", ")", "\n", "", "x", ",", "batch_sizes", "=", "x", ".", "data", ",", "x", ".", "batch_sizes", "\n", "\n", "if", "hx", "is", "None", ":", "\n", "            ", "hx", "=", "x", ".", "new_zeros", "(", "self", ".", "num_layers", "*", "self", ".", "num_directions", ",", "\n", "max_batch_size", ",", "self", ".", "hidden_size", ",", "requires_grad", "=", "True", ")", "\n", "if", "is_lstm", ":", "\n", "                ", "hx", "=", "(", "hx", ",", "hx", ".", "new_zeros", "(", "hx", ".", "size", "(", ")", ",", "requires_grad", "=", "True", ")", ")", "\n", "\n", "", "", "mask_x", "=", "x", ".", "new_ones", "(", "(", "max_batch_size", ",", "self", ".", "input_size", ")", ")", "\n", "mask_out", "=", "x", ".", "new_ones", "(", "\n", "(", "max_batch_size", ",", "self", ".", "hidden_size", "*", "self", ".", "num_directions", ")", ")", "\n", "mask_h_ones", "=", "x", ".", "new_ones", "(", "(", "max_batch_size", ",", "self", ".", "hidden_size", ")", ")", "\n", "nn", ".", "functional", ".", "dropout", "(", "mask_x", ",", "p", "=", "self", ".", "input_dropout", ",", "\n", "training", "=", "self", ".", "training", ",", "inplace", "=", "True", ")", "\n", "nn", ".", "functional", ".", "dropout", "(", "mask_out", ",", "p", "=", "self", ".", "hidden_dropout", ",", "\n", "training", "=", "self", ".", "training", ",", "inplace", "=", "True", ")", "\n", "\n", "hidden", "=", "x", ".", "new_zeros", "(", "\n", "(", "self", ".", "num_layers", "*", "self", ".", "num_directions", ",", "max_batch_size", ",", "self", ".", "hidden_size", ")", ")", "\n", "if", "is_lstm", ":", "\n", "            ", "cellstate", "=", "x", ".", "new_zeros", "(", "\n", "(", "self", ".", "num_layers", "*", "self", ".", "num_directions", ",", "max_batch_size", ",", "self", ".", "hidden_size", ")", ")", "\n", "", "for", "layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "output_list", "=", "[", "]", "\n", "input_seq", "=", "PackedSequence", "(", "x", ",", "batch_sizes", ")", "\n", "mask_h", "=", "nn", ".", "functional", ".", "dropout", "(", "\n", "mask_h_ones", ",", "p", "=", "self", ".", "hidden_dropout", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "False", ")", "\n", "for", "direction", "in", "range", "(", "self", ".", "num_directions", ")", ":", "\n", "                ", "output_x", ",", "hidden_x", "=", "self", ".", "_forward_one", "(", "layer", ",", "direction", ",", "input_seq", ",", "hx", ",", "\n", "mask_x", "if", "layer", "==", "0", "else", "mask_out", ",", "mask_h", ")", "\n", "output_list", ".", "append", "(", "output_x", ".", "data", ")", "\n", "idx", "=", "self", ".", "num_directions", "*", "layer", "+", "direction", "\n", "if", "is_lstm", ":", "\n", "                    ", "hidden", "[", "idx", "]", "=", "hidden_x", "[", "0", "]", "\n", "cellstate", "[", "idx", "]", "=", "hidden_x", "[", "1", "]", "\n", "", "else", ":", "\n", "                    ", "hidden", "[", "idx", "]", "=", "hidden_x", "\n", "", "", "x", "=", "torch", ".", "cat", "(", "output_list", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "is_lstm", ":", "\n", "            ", "hidden", "=", "(", "hidden", ",", "cellstate", ")", "\n", "\n", "", "if", "is_packed", ":", "\n", "            ", "output", "=", "PackedSequence", "(", "x", ",", "batch_sizes", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "PackedSequence", "(", "x", ",", "batch_sizes", ")", "\n", "output", ",", "_", "=", "pad_packed_sequence", "(", "x", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "\n", "", "return", "output", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.variational_rnn.VarLSTM.__init__": [[235, 250], ["variational_rnn.VarRNNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param input_size:  \u8f93\u5165 `x` \u7684\u7279\u5f81\u7ef4\u5ea6\n        :param hidden_size: \u9690\u72b6\u6001  `h`  \u7684\u7279\u5f81\u7ef4\u5ea6\n        :param num_layers: rnn\u7684\u5c42\u6570. Default: 1\n        :param bias: \u5982\u679c\u4e3a ``False``, \u6a21\u578b\u5c06\u4e0d\u4f1a\u4f7f\u7528bias. Default: ``True``\n        :param batch_first: \u82e5\u4e3a ``True``, \u8f93\u5165\u548c\u8f93\u51fa ``Tensor`` \u5f62\u72b6\u4e3a\n            (batch, seq, feature). Default: ``False``\n        :param input_dropout: \u5bf9\u8f93\u5165\u7684dropout\u6982\u7387. Default: 0\n        :param hidden_dropout: \u5bf9\u6bcf\u4e2a\u9690\u72b6\u6001\u7684dropout\u6982\u7387. Default: 0\n        :param bidirectional: \u82e5\u4e3a ``True``, \u4f7f\u7528\u53cc\u5411\u7684LSTM. Default: ``False``\n        \"\"\"", "\n", "super", "(", "VarLSTM", ",", "self", ")", ".", "__init__", "(", "\n", "mode", "=", "\"LSTM\"", ",", "Cell", "=", "nn", ".", "LSTMCell", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.variational_rnn.VarLSTM.forward": [[251, 253], ["variational_rnn.VarRNNBase.forward"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "hx", "=", "None", ")", ":", "\n", "        ", "return", "super", "(", "VarLSTM", ",", "self", ")", ".", "forward", "(", "x", ",", "hx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.variational_rnn.VarRNN.__init__": [[262, 277], ["variational_rnn.VarRNNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param input_size:  \u8f93\u5165 `x` \u7684\u7279\u5f81\u7ef4\u5ea6\n        :param hidden_size: \u9690\u72b6\u6001 `h` \u7684\u7279\u5f81\u7ef4\u5ea6\n        :param num_layers: rnn\u7684\u5c42\u6570. Default: 1\n        :param bias: \u5982\u679c\u4e3a ``False``, \u6a21\u578b\u5c06\u4e0d\u4f1a\u4f7f\u7528bias. Default: ``True``\n        :param batch_first: \u82e5\u4e3a ``True``, \u8f93\u5165\u548c\u8f93\u51fa ``Tensor`` \u5f62\u72b6\u4e3a\n            (batch, seq, feature). Default: ``False``\n        :param input_dropout: \u5bf9\u8f93\u5165\u7684dropout\u6982\u7387. Default: 0\n        :param hidden_dropout: \u5bf9\u6bcf\u4e2a\u9690\u72b6\u6001\u7684dropout\u6982\u7387. Default: 0\n        :param bidirectional: \u82e5\u4e3a ``True``, \u4f7f\u7528\u53cc\u5411\u7684RNN. Default: ``False``\n        \"\"\"", "\n", "super", "(", "VarRNN", ",", "self", ")", ".", "__init__", "(", "\n", "mode", "=", "\"RNN\"", ",", "Cell", "=", "nn", ".", "RNNCell", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.variational_rnn.VarRNN.forward": [[278, 280], ["variational_rnn.VarRNNBase.forward"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "hx", "=", "None", ")", ":", "\n", "        ", "return", "super", "(", "VarRNN", ",", "self", ")", ".", "forward", "(", "x", ",", "hx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.variational_rnn.VarGRU.__init__": [[289, 304], ["variational_rnn.VarRNNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param input_size:  \u8f93\u5165 `x` \u7684\u7279\u5f81\u7ef4\u5ea6\n        :param hidden_size: \u9690\u72b6\u6001 `h` \u7684\u7279\u5f81\u7ef4\u5ea6\n        :param num_layers: rnn\u7684\u5c42\u6570. Default: 1\n        :param bias: \u5982\u679c\u4e3a ``False``, \u6a21\u578b\u5c06\u4e0d\u4f1a\u4f7f\u7528bias. Default: ``True``\n        :param batch_first: \u82e5\u4e3a ``True``, \u8f93\u5165\u548c\u8f93\u51fa ``Tensor`` \u5f62\u72b6\u4e3a\n            (batch, seq, feature). Default: ``False``\n        :param input_dropout: \u5bf9\u8f93\u5165\u7684dropout\u6982\u7387. Default: 0\n        :param hidden_dropout: \u5bf9\u6bcf\u4e2a\u9690\u72b6\u6001\u7684dropout\u6982\u7387. Default: 0\n        :param bidirectional: \u82e5\u4e3a ``True``, \u4f7f\u7528\u53cc\u5411\u7684GRU. Default: ``False``\n        \"\"\"", "\n", "super", "(", "VarGRU", ",", "self", ")", ".", "__init__", "(", "\n", "mode", "=", "\"GRU\"", ",", "Cell", "=", "nn", ".", "GRUCell", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.variational_rnn.VarGRU.forward": [[305, 307], ["variational_rnn.VarRNNBase.forward"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "hx", "=", "None", ")", ":", "\n", "        ", "return", "super", "(", "VarGRU", ",", "self", ")", ".", "forward", "(", "x", ",", "hx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.LstmCellWithProjection.__init__": [[58, 84], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "_elmo.LstmCellWithProjection.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.reset_parameters"], ["def", "__init__", "(", "self", ",", "\n", "input_size", ":", "int", ",", "\n", "hidden_size", ":", "int", ",", "\n", "cell_size", ":", "int", ",", "\n", "go_forward", ":", "bool", "=", "True", ",", "\n", "recurrent_dropout_probability", ":", "float", "=", "0.0", ",", "\n", "memory_cell_clip_value", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "state_projection_clip_value", ":", "Optional", "[", "float", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", "LstmCellWithProjection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Required to be wrapped with a :class:`PytorchSeq2SeqWrapper`.", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "cell_size", "=", "cell_size", "\n", "\n", "self", ".", "go_forward", "=", "go_forward", "\n", "self", ".", "state_projection_clip_value", "=", "state_projection_clip_value", "\n", "self", ".", "memory_cell_clip_value", "=", "memory_cell_clip_value", "\n", "self", ".", "recurrent_dropout_probability", "=", "recurrent_dropout_probability", "\n", "\n", "# We do the projections for all the gates all at once.", "\n", "self", ".", "input_linearity", "=", "torch", ".", "nn", ".", "Linear", "(", "input_size", ",", "4", "*", "cell_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "state_linearity", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_size", ",", "4", "*", "cell_size", ",", "bias", "=", "True", ")", "\n", "\n", "# Additional projection matrix for making the hidden state smaller.", "\n", "self", ".", "state_projection", "=", "torch", ".", "nn", ".", "Linear", "(", "cell_size", ",", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.LstmCellWithProjection.reset_parameters": [[85, 94], ["torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "_elmo.LstmCellWithProjection.state_linearity.bias.data.fill_", "_elmo.LstmCellWithProjection.state_linearity.bias.data[].fill_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# Use sensible default initializations for parameters.", "\n", "        ", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "input_linearity", ".", "weight", ".", "data", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "state_linearity", ".", "weight", ".", "data", ")", "\n", "\n", "self", ".", "state_linearity", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "# Initialize forget gate biases to 1.0 as per An Empirical", "\n", "# Exploration of Recurrent Network Architectures, (Jozefowicz, 2015).", "\n", "self", ".", "state_linearity", ".", "bias", ".", "data", "[", "self", ".", "cell_size", ":", "2", "*", "self", ".", "cell_size", "]", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.LstmCellWithProjection.forward": [[95, 237], ["inputs.data.new().fill_", "range", "inputs.size", "inputs.size", "inputs.data.new().fill_", "inputs.data.new().fill_", "initial_state[].squeeze", "initial_state[].squeeze", "utils.get_dropout_mask", "full_batch_previous_memory[].clone", "full_batch_previous_state[].clone", "_elmo.LstmCellWithProjection.input_linearity", "_elmo.LstmCellWithProjection.state_linearity", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "_elmo.LstmCellWithProjection.state_projection", "full_batch_previous_memory.data.clone.data.clone.data.clone", "full_batch_previous_state.data.clone.data.clone.data.clone", "full_batch_previous_state.data.clone.data.clone.unsqueeze", "full_batch_previous_memory.data.clone.data.clone.unsqueeze", "inputs.data.new", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "inputs.data.new", "inputs.data.new", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.utils.get_dropout_mask"], ["", "def", "forward", "(", "self", ",", "# pylint: disable=arguments-differ", "\n", "inputs", ":", "torch", ".", "FloatTensor", ",", "\n", "batch_lengths", ":", "List", "[", "int", "]", ",", "\n", "initial_state", ":", "Optional", "[", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "]", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        inputs : ``torch.FloatTensor``, required.\n            A tensor of shape (batch_size, num_timesteps, input_size)\n            to apply the LSTM over.\n        batch_lengths : ``List[int]``, required.\n            A list of length batch_size containing the lengths of the sequences in batch.\n        initial_state : ``Tuple[torch.Tensor, torch.Tensor]``, optional, (default = None)\n            A tuple (state, memory) representing the initial hidden state and memory\n            of the LSTM. The ``state`` has shape (1, batch_size, hidden_size) and the\n            ``memory`` has shape (1, batch_size, cell_size).\n        Returns\n        -------\n        output_accumulator : ``torch.FloatTensor``\n            The outputs of the LSTM for each timestep. A tensor of shape\n            (batch_size, max_timesteps, hidden_size) where for a given batch\n            element, all outputs past the sequence length for that batch are\n            zero tensors.\n        final_state : ``Tuple[``torch.FloatTensor, torch.FloatTensor]``\n            A tuple (state, memory) representing the initial hidden state and memory\n            of the LSTM. The ``state`` has shape (1, batch_size, hidden_size) and the\n            ``memory`` has shape (1, batch_size, cell_size).\n        \"\"\"", "\n", "batch_size", "=", "inputs", ".", "size", "(", ")", "[", "0", "]", "\n", "total_timesteps", "=", "inputs", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "# We have to use this '.data.new().fill_' pattern to create tensors with the correct", "\n", "# type - forward has no knowledge of whether these are torch.Tensors or torch.cuda.Tensors.", "\n", "output_accumulator", "=", "inputs", ".", "data", ".", "new", "(", "batch_size", ",", "\n", "total_timesteps", ",", "\n", "self", ".", "hidden_size", ")", ".", "fill_", "(", "0", ")", "\n", "if", "initial_state", "is", "None", ":", "\n", "            ", "full_batch_previous_memory", "=", "inputs", ".", "data", ".", "new", "(", "batch_size", ",", "\n", "self", ".", "cell_size", ")", ".", "fill_", "(", "0", ")", "\n", "full_batch_previous_state", "=", "inputs", ".", "data", ".", "new", "(", "batch_size", ",", "\n", "self", ".", "hidden_size", ")", ".", "fill_", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "full_batch_previous_state", "=", "initial_state", "[", "0", "]", ".", "squeeze", "(", "0", ")", "\n", "full_batch_previous_memory", "=", "initial_state", "[", "1", "]", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "current_length_index", "=", "batch_size", "-", "1", "if", "self", ".", "go_forward", "else", "0", "\n", "if", "self", ".", "recurrent_dropout_probability", ">", "0.0", "and", "self", ".", "training", ":", "\n", "            ", "dropout_mask", "=", "get_dropout_mask", "(", "self", ".", "recurrent_dropout_probability", ",", "\n", "full_batch_previous_state", ")", "\n", "", "else", ":", "\n", "            ", "dropout_mask", "=", "None", "\n", "\n", "", "for", "timestep", "in", "range", "(", "total_timesteps", ")", ":", "\n", "# The index depends on which end we start.", "\n", "            ", "index", "=", "timestep", "if", "self", ".", "go_forward", "else", "total_timesteps", "-", "timestep", "-", "1", "\n", "\n", "# What we are doing here is finding the index into the batch dimension", "\n", "# which we need to use for this timestep, because the sequences have", "\n", "# variable length, so once the index is greater than the length of this", "\n", "# particular batch sequence, we no longer need to do the computation for", "\n", "# this sequence. The key thing to recognise here is that the batch inputs", "\n", "# must be _ordered_ by length from longest (first in batch) to shortest", "\n", "# (last) so initially, we are going forwards with every sequence and as we", "\n", "# pass the index at which the shortest elements of the batch finish,", "\n", "# we stop picking them up for the computation.", "\n", "if", "self", ".", "go_forward", ":", "\n", "                ", "while", "batch_lengths", "[", "current_length_index", "]", "<=", "index", ":", "\n", "                    ", "current_length_index", "-=", "1", "\n", "# If we're going backwards, we are _picking up_ more indices.", "\n", "", "", "else", ":", "\n", "# First conditional: Are we already at the maximum number of elements in the batch?", "\n", "# Second conditional: Does the next shortest sequence beyond the current batch", "\n", "# index require computation use this timestep?", "\n", "                ", "while", "current_length_index", "<", "(", "len", "(", "batch_lengths", ")", "-", "1", ")", "and", "batch_lengths", "[", "current_length_index", "+", "1", "]", ">", "index", ":", "\n", "                    ", "current_length_index", "+=", "1", "\n", "\n", "# Actually get the slices of the batch which we", "\n", "# need for the computation at this timestep.", "\n", "# shape (batch_size, cell_size)", "\n", "", "", "previous_memory", "=", "full_batch_previous_memory", "[", "0", ":", "current_length_index", "+", "1", "]", ".", "clone", "(", ")", "\n", "# Shape (batch_size, hidden_size)", "\n", "previous_state", "=", "full_batch_previous_state", "[", "0", ":", "current_length_index", "+", "1", "]", ".", "clone", "(", ")", "\n", "# Shape (batch_size, input_size)", "\n", "timestep_input", "=", "inputs", "[", "0", ":", "current_length_index", "+", "1", ",", "index", "]", "\n", "\n", "# Do the projections for all the gates all at once.", "\n", "# Both have shape (batch_size, 4 * cell_size)", "\n", "projected_input", "=", "self", ".", "input_linearity", "(", "timestep_input", ")", "\n", "projected_state", "=", "self", ".", "state_linearity", "(", "previous_state", ")", "\n", "\n", "# Main LSTM equations using relevant chunks of the big linear", "\n", "# projections of the hidden state and inputs.", "\n", "input_gate", "=", "torch", ".", "sigmoid", "(", "projected_input", "[", ":", ",", "(", "0", "*", "self", ".", "cell_size", ")", ":", "(", "1", "*", "self", ".", "cell_size", ")", "]", "+", "\n", "projected_state", "[", ":", ",", "(", "0", "*", "self", ".", "cell_size", ")", ":", "(", "1", "*", "self", ".", "cell_size", ")", "]", ")", "\n", "forget_gate", "=", "torch", ".", "sigmoid", "(", "projected_input", "[", ":", ",", "(", "1", "*", "self", ".", "cell_size", ")", ":", "(", "2", "*", "self", ".", "cell_size", ")", "]", "+", "\n", "projected_state", "[", ":", ",", "(", "1", "*", "self", ".", "cell_size", ")", ":", "(", "2", "*", "self", ".", "cell_size", ")", "]", ")", "\n", "memory_init", "=", "torch", ".", "tanh", "(", "projected_input", "[", ":", ",", "(", "2", "*", "self", ".", "cell_size", ")", ":", "(", "3", "*", "self", ".", "cell_size", ")", "]", "+", "\n", "projected_state", "[", ":", ",", "(", "2", "*", "self", ".", "cell_size", ")", ":", "(", "3", "*", "self", ".", "cell_size", ")", "]", ")", "\n", "output_gate", "=", "torch", ".", "sigmoid", "(", "projected_input", "[", ":", ",", "(", "3", "*", "self", ".", "cell_size", ")", ":", "(", "4", "*", "self", ".", "cell_size", ")", "]", "+", "\n", "projected_state", "[", ":", ",", "(", "3", "*", "self", ".", "cell_size", ")", ":", "(", "4", "*", "self", ".", "cell_size", ")", "]", ")", "\n", "memory", "=", "input_gate", "*", "memory_init", "+", "forget_gate", "*", "previous_memory", "\n", "\n", "# Here is the non-standard part of this LSTM cell; first, we clip the", "\n", "# memory cell, then we project the output of the timestep to a smaller size", "\n", "# and again clip it.", "\n", "\n", "if", "self", ".", "memory_cell_clip_value", ":", "\n", "# pylint: disable=invalid-unary-operand-type", "\n", "                ", "memory", "=", "torch", ".", "clamp", "(", "memory", ",", "-", "self", ".", "memory_cell_clip_value", ",", "self", ".", "memory_cell_clip_value", ")", "\n", "\n", "# shape (current_length_index, cell_size)", "\n", "", "pre_projection_timestep_output", "=", "output_gate", "*", "torch", ".", "tanh", "(", "memory", ")", "\n", "\n", "# shape (current_length_index, hidden_size)", "\n", "timestep_output", "=", "self", ".", "state_projection", "(", "pre_projection_timestep_output", ")", "\n", "if", "self", ".", "state_projection_clip_value", ":", "\n", "# pylint: disable=invalid-unary-operand-type", "\n", "                ", "timestep_output", "=", "torch", ".", "clamp", "(", "timestep_output", ",", "\n", "-", "self", ".", "state_projection_clip_value", ",", "\n", "self", ".", "state_projection_clip_value", ")", "\n", "\n", "# Only do dropout if the dropout prob is > 0.0 and we are in training mode.", "\n", "", "if", "dropout_mask", "is", "not", "None", ":", "\n", "                ", "timestep_output", "=", "timestep_output", "*", "dropout_mask", "[", "0", ":", "current_length_index", "+", "1", "]", "\n", "\n", "# We've been doing computation with less than the full batch, so here we create a new", "\n", "# variable for the the whole batch at this timestep and insert the result for the", "\n", "# relevant elements of the batch into it.", "\n", "", "full_batch_previous_memory", "=", "full_batch_previous_memory", ".", "data", ".", "clone", "(", ")", "\n", "full_batch_previous_state", "=", "full_batch_previous_state", ".", "data", ".", "clone", "(", ")", "\n", "full_batch_previous_memory", "[", "0", ":", "current_length_index", "+", "1", "]", "=", "memory", "\n", "full_batch_previous_state", "[", "0", ":", "current_length_index", "+", "1", "]", "=", "timestep_output", "\n", "output_accumulator", "[", "0", ":", "current_length_index", "+", "1", ",", "index", "]", "=", "timestep_output", "\n", "\n", "# Mimic the pytorch API by returning state in the following shape:", "\n", "# (num_layers * num_directions, batch_size, ...). As this", "\n", "# LSTM cell cannot be stacked, the first dimension here is just 1.", "\n", "", "final_state", "=", "(", "full_batch_previous_state", ".", "unsqueeze", "(", "0", ")", ",", "\n", "full_batch_previous_memory", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "return", "output_accumulator", ",", "final_state", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.LstmbiLm.__init__": [[240, 250], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "LstmbiLm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "encoder", "=", "nn", ".", "LSTM", "(", "self", ".", "config", "[", "'lstm'", "]", "[", "'projection_dim'", "]", ",", "\n", "self", ".", "config", "[", "'lstm'", "]", "[", "'dim'", "]", ",", "\n", "num_layers", "=", "self", ".", "config", "[", "'lstm'", "]", "[", "'n_layers'", "]", ",", "\n", "bidirectional", "=", "True", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "self", ".", "config", "[", "'dropout'", "]", ")", "\n", "self", ".", "projection", "=", "nn", ".", "Linear", "(", "self", ".", "config", "[", "'lstm'", "]", "[", "'dim'", "]", ",", "self", ".", "config", "[", "'lstm'", "]", "[", "'projection_dim'", "]", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.LstmbiLm.forward": [[251, 261], ["torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "_elmo.LstmbiLm.encoder", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "output.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "_elmo.LstmbiLm.projection", "_elmo.LstmbiLm.projection"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seq_len", ")", ":", "\n", "        ", "sort_lens", ",", "sort_idx", "=", "torch", ".", "sort", "(", "seq_len", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "inputs", "=", "inputs", "[", "sort_idx", "]", "\n", "inputs", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "inputs", ",", "sort_lens", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "output", ",", "hx", "=", "self", ".", "encoder", "(", "inputs", ",", "None", ")", "# -> [N,L,C]", "\n", "output", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "output", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "_", ",", "unsort_idx", "=", "torch", ".", "sort", "(", "sort_idx", ",", "dim", "=", "0", ",", "descending", "=", "False", ")", "\n", "output", "=", "output", "[", "unsort_idx", "]", "\n", "forward", ",", "backward", "=", "output", ".", "split", "(", "self", ".", "config", "[", "'lstm'", "]", "[", "'dim'", "]", ",", "2", ")", "\n", "return", "torch", ".", "cat", "(", "[", "self", ".", "projection", "(", "forward", ")", ",", "self", ".", "projection", "(", "backward", ")", "]", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.ElmobiLm.__init__": [[264, 308], ["super().__init__", "range", "_elmo.LstmCellWithProjection", "_elmo.LstmCellWithProjection", "_elmo.ElmobiLm.add_module", "_elmo.ElmobiLm.add_module", "forward_layers.append", "backward_layers.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "ElmobiLm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "input_size", "=", "config", "[", "'lstm'", "]", "[", "'projection_dim'", "]", "\n", "hidden_size", "=", "config", "[", "'lstm'", "]", "[", "'projection_dim'", "]", "\n", "cell_size", "=", "config", "[", "'lstm'", "]", "[", "'dim'", "]", "\n", "num_layers", "=", "config", "[", "'lstm'", "]", "[", "'n_layers'", "]", "\n", "memory_cell_clip_value", "=", "config", "[", "'lstm'", "]", "[", "'cell_clip'", "]", "\n", "state_projection_clip_value", "=", "config", "[", "'lstm'", "]", "[", "'proj_clip'", "]", "\n", "recurrent_dropout_probability", "=", "0.0", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "cell_size", "=", "cell_size", "\n", "\n", "forward_layers", "=", "[", "]", "\n", "backward_layers", "=", "[", "]", "\n", "\n", "lstm_input_size", "=", "input_size", "\n", "go_forward", "=", "True", "\n", "for", "layer_index", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "forward_layer", "=", "LstmCellWithProjection", "(", "lstm_input_size", ",", "\n", "hidden_size", ",", "\n", "cell_size", ",", "\n", "go_forward", ",", "\n", "recurrent_dropout_probability", ",", "\n", "memory_cell_clip_value", ",", "\n", "state_projection_clip_value", ")", "\n", "backward_layer", "=", "LstmCellWithProjection", "(", "lstm_input_size", ",", "\n", "hidden_size", ",", "\n", "cell_size", ",", "\n", "not", "go_forward", ",", "\n", "recurrent_dropout_probability", ",", "\n", "memory_cell_clip_value", ",", "\n", "state_projection_clip_value", ")", "\n", "lstm_input_size", "=", "hidden_size", "\n", "\n", "self", ".", "add_module", "(", "'forward_layer_{}'", ".", "format", "(", "layer_index", ")", ",", "forward_layer", ")", "\n", "self", ".", "add_module", "(", "'backward_layer_{}'", ".", "format", "(", "layer_index", ")", ",", "backward_layer", ")", "\n", "forward_layers", ".", "append", "(", "forward_layer", ")", "\n", "backward_layers", ".", "append", "(", "backward_layer", ")", "\n", "", "self", ".", "forward_layers", "=", "forward_layers", "\n", "self", ".", "backward_layers", "=", "backward_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.ElmobiLm.forward": [[309, 324], ["torch.utils.rnn.pack_padded_sequence.size", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "_elmo.ElmobiLm._lstm_forward", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.ElmobiLm._lstm_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seq_len", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param inputs: batch_size x max_len x embed_size\n        :param seq_len: batch_size\n        :return: torch.FloatTensor. num_layers x batch_size x max_len x hidden_size\n        \"\"\"", "\n", "max_len", "=", "inputs", ".", "size", "(", "1", ")", "\n", "sort_lens", ",", "sort_idx", "=", "torch", ".", "sort", "(", "seq_len", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "inputs", "=", "inputs", "[", "sort_idx", "]", "\n", "inputs", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "inputs", ",", "sort_lens", ",", "batch_first", "=", "True", ")", "\n", "output", ",", "_", "=", "self", ".", "_lstm_forward", "(", "inputs", ",", "None", ")", "\n", "_", ",", "unsort_idx", "=", "torch", ".", "sort", "(", "sort_idx", ",", "dim", "=", "0", ",", "descending", "=", "False", ")", "\n", "output", "=", "output", "[", ":", ",", "unsort_idx", "]", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.ElmobiLm._lstm_forward": [[325, 407], ["torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "zip", "getattr", "getattr", "getattr.", "getattr.", "sequence_outputs.append", "final_states.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "Exception", "list", "state[].split", "state[].split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "initial_state[].size", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "initial_state[].split", "initial_state[].split"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["", "def", "_lstm_forward", "(", "self", ",", "\n", "inputs", ":", "PackedSequence", ",", "\n", "initial_state", ":", "Optional", "[", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "]", "=", "None", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "]", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        inputs : ``PackedSequence``, required.\n          A batch first ``PackedSequence`` to run the stacked LSTM over.\n        initial_state : ``Tuple[torch.Tensor, torch.Tensor]``, optional, (default = None)\n          A tuple (state, memory) representing the initial hidden state and memory\n          of the LSTM, with shape (num_layers, batch_size, 2 * hidden_size) and\n          (num_layers, batch_size, 2 * cell_size) respectively.\n        Returns\n        -------\n        output_sequence : ``torch.FloatTensor``\n          The encoded sequence of shape (num_layers, batch_size, sequence_length, hidden_size)\n        final_states: ``Tuple[torch.FloatTensor, torch.FloatTensor]``\n          The per-layer final (state, memory) states of the LSTM, with shape\n          (num_layers, batch_size, 2 * hidden_size) and  (num_layers, batch_size, 2 * cell_size)\n          respectively. The last dimension is duplicated because it contains the state/memory\n          for both the forward and backward layers.\n        \"\"\"", "\n", "\n", "if", "initial_state", "is", "None", ":", "\n", "            ", "hidden_states", ":", "List", "[", "Optional", "[", "Tuple", "[", "torch", ".", "Tensor", ",", "\n", "torch", ".", "Tensor", "]", "]", "]", "=", "[", "None", "]", "*", "len", "(", "self", ".", "forward_layers", ")", "\n", "", "elif", "initial_state", "[", "0", "]", ".", "size", "(", ")", "[", "0", "]", "!=", "len", "(", "self", ".", "forward_layers", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Initial states were passed to forward() but the number of \"", "\n", "\"initial states does not match the number of layers.\"", ")", "\n", "", "else", ":", "\n", "            ", "hidden_states", "=", "list", "(", "zip", "(", "initial_state", "[", "0", "]", ".", "split", "(", "1", ",", "0", ")", ",", "initial_state", "[", "1", "]", ".", "split", "(", "1", ",", "0", ")", ")", ")", "\n", "\n", "", "inputs", ",", "batch_lengths", "=", "pad_packed_sequence", "(", "inputs", ",", "batch_first", "=", "True", ")", "\n", "forward_output_sequence", "=", "inputs", "\n", "backward_output_sequence", "=", "inputs", "\n", "\n", "final_states", "=", "[", "]", "\n", "sequence_outputs", "=", "[", "]", "\n", "for", "layer_index", ",", "state", "in", "enumerate", "(", "hidden_states", ")", ":", "\n", "            ", "forward_layer", "=", "getattr", "(", "self", ",", "'forward_layer_{}'", ".", "format", "(", "layer_index", ")", ")", "\n", "backward_layer", "=", "getattr", "(", "self", ",", "'backward_layer_{}'", ".", "format", "(", "layer_index", ")", ")", "\n", "\n", "forward_cache", "=", "forward_output_sequence", "\n", "backward_cache", "=", "backward_output_sequence", "\n", "\n", "if", "state", "is", "not", "None", ":", "\n", "                ", "forward_hidden_state", ",", "backward_hidden_state", "=", "state", "[", "0", "]", ".", "split", "(", "self", ".", "hidden_size", ",", "2", ")", "\n", "forward_memory_state", ",", "backward_memory_state", "=", "state", "[", "1", "]", ".", "split", "(", "self", ".", "cell_size", ",", "2", ")", "\n", "forward_state", "=", "(", "forward_hidden_state", ",", "forward_memory_state", ")", "\n", "backward_state", "=", "(", "backward_hidden_state", ",", "backward_memory_state", ")", "\n", "", "else", ":", "\n", "                ", "forward_state", "=", "None", "\n", "backward_state", "=", "None", "\n", "\n", "", "forward_output_sequence", ",", "forward_state", "=", "forward_layer", "(", "forward_output_sequence", ",", "\n", "batch_lengths", ",", "\n", "forward_state", ")", "\n", "backward_output_sequence", ",", "backward_state", "=", "backward_layer", "(", "backward_output_sequence", ",", "\n", "batch_lengths", ",", "\n", "backward_state", ")", "\n", "# Skip connections, just adding the input to the output.", "\n", "if", "layer_index", "!=", "0", ":", "\n", "                ", "forward_output_sequence", "+=", "forward_cache", "\n", "backward_output_sequence", "+=", "backward_cache", "\n", "\n", "", "sequence_outputs", ".", "append", "(", "torch", ".", "cat", "(", "[", "forward_output_sequence", ",", "\n", "backward_output_sequence", "]", ",", "-", "1", ")", ")", "\n", "# Append the state tuples in a list, so that we can return", "\n", "# the final states for all the layers.", "\n", "final_states", ".", "append", "(", "(", "torch", ".", "cat", "(", "[", "forward_state", "[", "0", "]", ",", "backward_state", "[", "0", "]", "]", ",", "-", "1", ")", ",", "\n", "torch", ".", "cat", "(", "[", "forward_state", "[", "1", "]", ",", "backward_state", "[", "1", "]", "]", ",", "-", "1", ")", ")", ")", "\n", "\n", "", "stacked_sequence_outputs", ":", "torch", ".", "FloatTensor", "=", "torch", ".", "stack", "(", "sequence_outputs", ")", "\n", "# Stack the hidden state and memory for each layer in\u3002to 2 tensors of shape", "\n", "# (num_layers, batch_size, hidden_size) and (num_layers, batch_size, cell_size)", "\n", "# respectively.", "\n", "final_hidden_states", ",", "final_memory_states", "=", "zip", "(", "*", "final_states", ")", "\n", "final_state_tuple", ":", "Tuple", "[", "torch", ".", "FloatTensor", ",", "\n", "torch", ".", "FloatTensor", "]", "=", "(", "torch", ".", "cat", "(", "final_hidden_states", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "final_memory_states", ",", "0", ")", ")", "\n", "return", "stacked_sequence_outputs", ",", "final_state_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.ConvTokenEmbedder.__init__": [[410, 452], ["torch.Module.__init__", "enumerate", "sum", "_elmo.Highway", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "Exception", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "convolutions.append", "_elmo.ConvTokenEmbedder.add_module"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "weight_file", ",", "word_emb_layer", ",", "char_emb_layer", ")", ":", "\n", "        ", "super", "(", "ConvTokenEmbedder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight_file", "=", "weight_file", "\n", "self", ".", "word_emb_layer", "=", "word_emb_layer", "\n", "self", ".", "char_emb_layer", "=", "char_emb_layer", "\n", "\n", "self", ".", "output_dim", "=", "config", "[", "'lstm'", "]", "[", "'projection_dim'", "]", "\n", "self", ".", "_options", "=", "config", "\n", "\n", "char_cnn_options", "=", "self", ".", "_options", "[", "'char_cnn'", "]", "\n", "if", "char_cnn_options", "[", "'activation'", "]", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "tanh", "\n", "", "elif", "char_cnn_options", "[", "'activation'", "]", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown activation\"", ")", "\n", "\n", "", "if", "char_emb_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "char_conv", "=", "[", "]", "\n", "cnn_config", "=", "config", "[", "'char_cnn'", "]", "\n", "filters", "=", "cnn_config", "[", "'filters'", "]", "\n", "char_embed_dim", "=", "cnn_config", "[", "'embedding'", "]", "[", "'dim'", "]", "\n", "convolutions", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "width", ",", "num", ")", "in", "enumerate", "(", "filters", ")", ":", "\n", "                ", "conv", "=", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "char_embed_dim", ",", "\n", "out_channels", "=", "num", ",", "\n", "kernel_size", "=", "width", ",", "\n", "bias", "=", "True", "\n", ")", "\n", "convolutions", ".", "append", "(", "conv", ")", "\n", "self", ".", "add_module", "(", "'char_conv_{}'", ".", "format", "(", "i", ")", ",", "conv", ")", "\n", "\n", "", "self", ".", "_convolutions", "=", "convolutions", "\n", "\n", "n_filters", "=", "sum", "(", "f", "[", "1", "]", "for", "f", "in", "filters", ")", "\n", "n_highway", "=", "cnn_config", "[", "'n_highway'", "]", "\n", "\n", "self", ".", "_highways", "=", "Highway", "(", "n_filters", ",", "n_highway", ",", "activation", "=", "torch", ".", "nn", ".", "functional", ".", "relu", ")", "\n", "\n", "self", ".", "_projection", "=", "torch", ".", "nn", ".", "Linear", "(", "n_filters", ",", "self", ".", "output_dim", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.ConvTokenEmbedder.forward": [[453, 491], ["chars.size", "_elmo.ConvTokenEmbedder.char_emb_layer().reshape", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "_elmo.ConvTokenEmbedder._highways", "_elmo.ConvTokenEmbedder._projection", "_elmo.ConvTokenEmbedder.view", "len", "getattr", "getattr.", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "_elmo.ConvTokenEmbedder.activation", "convs.append", "_elmo.ConvTokenEmbedder.char_emb_layer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "def", "forward", "(", "self", ",", "words", ",", "chars", ")", ":", "\n", "        ", "r\"\"\"\n        :param words:\n        :param chars: Tensor  Shape ``(batch_size, sequence_length, 50)``:\n        :return Tensor Shape ``(batch_size, sequence_length + 2, embedding_dim)`` :\n        \"\"\"", "\n", "# the character id embedding", "\n", "# (batch_size * sequence_length, max_chars_per_token, embed_dim)", "\n", "# character_embedding = torch.nn.functional.embedding(", "\n", "#     chars.view(-1, max_chars_per_token),", "\n", "#     self._char_embedding_weights", "\n", "# )", "\n", "batch_size", ",", "sequence_length", ",", "max_char_len", "=", "chars", ".", "size", "(", ")", "\n", "character_embedding", "=", "self", ".", "char_emb_layer", "(", "chars", ")", ".", "reshape", "(", "batch_size", "*", "sequence_length", ",", "max_char_len", ",", "-", "1", ")", "\n", "# run convolutions", "\n", "\n", "# (batch_size * sequence_length, embed_dim, max_chars_per_token)", "\n", "character_embedding", "=", "torch", ".", "transpose", "(", "character_embedding", ",", "1", ",", "2", ")", "\n", "convs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_convolutions", ")", ")", ":", "\n", "            ", "conv", "=", "getattr", "(", "self", ",", "'char_conv_{}'", ".", "format", "(", "i", ")", ")", "\n", "convolved", "=", "conv", "(", "character_embedding", ")", "\n", "# (batch_size * sequence_length, n_filters for this width)", "\n", "convolved", ",", "_", "=", "torch", ".", "max", "(", "convolved", ",", "dim", "=", "-", "1", ")", "\n", "convolved", "=", "self", ".", "activation", "(", "convolved", ")", "\n", "convs", ".", "append", "(", "convolved", ")", "\n", "\n", "# (batch_size * sequence_length, n_filters)", "\n", "", "token_embedding", "=", "torch", ".", "cat", "(", "convs", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# apply the highway layers (batch_size * sequence_length, n_filters)", "\n", "token_embedding", "=", "self", ".", "_highways", "(", "token_embedding", ")", "\n", "\n", "# final projection  (batch_size * sequence_length, embedding_dim)", "\n", "token_embedding", "=", "self", ".", "_projection", "(", "token_embedding", ")", "\n", "\n", "# reshape to (batch_size, sequence_length+2, embedding_dim)", "\n", "return", "token_embedding", ".", "view", "(", "batch_size", ",", "sequence_length", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.Highway.__init__": [[512, 527], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "layer.bias[].data.fill_", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", ",", "\n", "num_layers", ":", "int", "=", "1", ",", "\n", "activation", ":", "Callable", "[", "[", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", "=", "torch", ".", "nn", ".", "functional", ".", "relu", ")", "->", "None", ":", "\n", "        ", "super", "(", "Highway", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_input_dim", "=", "input_dim", "\n", "self", ".", "_layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", "[", "torch", ".", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", "*", "2", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "self", ".", "_activation", "=", "activation", "\n", "for", "layer", "in", "self", ".", "_layers", ":", "\n", "# We should bias the highway layer to just carry its input forward.  We do that by", "\n", "# setting the bias on `B(x)` to be positive, because that means `g` will be biased to", "\n", "# be high, to we will carry the input forward.  The bias on `B(x)` is the second half", "\n", "# of the bias vector in each Linear layer.", "\n", "            ", "layer", ".", "bias", "[", "input_dim", ":", "]", ".", "data", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder._elmo.Highway.forward": [[528, 541], ["layer", "_elmo.Highway._activation", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "# pylint: disable=arguments-differ", "\n", "        ", "current_input", "=", "inputs", "\n", "for", "layer", "in", "self", ".", "_layers", ":", "\n", "            ", "projected_input", "=", "layer", "(", "current_input", ")", "\n", "linear_part", "=", "current_input", "\n", "# NOTE: if you modify this, think about whether you should modify the initialization", "\n", "# above, too.", "\n", "nonlinear_part", "=", "projected_input", "[", ":", ",", "(", "0", "*", "self", ".", "_input_dim", ")", ":", "(", "1", "*", "self", ".", "_input_dim", ")", "]", "\n", "gate", "=", "projected_input", "[", ":", ",", "(", "1", "*", "self", ".", "_input_dim", ")", ":", "(", "2", "*", "self", ".", "_input_dim", ")", "]", "\n", "nonlinear_part", "=", "self", ".", "_activation", "(", "nonlinear_part", ")", "\n", "gate", "=", "torch", ".", "sigmoid", "(", "gate", ")", "\n", "current_input", "=", "gate", "*", "linear_part", "+", "(", "1", "-", "gate", ")", "*", "nonlinear_part", "\n", "", "return", "current_input", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.__init__": [[49, 144], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "dict", "kwargs.pop", "dict", "kwargs.items", "dict", "zip", "setattr", "range", "int", "gpt2.GPT2Config.id2label.items", "gpt2.GPT2Config.id2label.values", "gpt2.GPT2Config.id2label.keys", "int", "gpt2.GPT2Config.label2id.items", "fastNLP.core.logger.error"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["def", "__init__", "(", "\n", "self", ",", "\n", "vocab_size", "=", "50257", ",", "\n", "n_positions", "=", "1024", ",", "\n", "n_ctx", "=", "1024", ",", "\n", "n_embd", "=", "768", ",", "\n", "n_layer", "=", "12", ",", "\n", "n_head", "=", "12", ",", "\n", "resid_pdrop", "=", "0.1", ",", "\n", "embd_pdrop", "=", "0.1", ",", "\n", "attn_pdrop", "=", "0.1", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "summary_type", "=", "\"cls_index\"", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Constructs GPT2Config.\n\n        Args:\n            vocab_size: Vocabulary size of `inputs_ids` in `GPT2Model` or a configuration json file.\n            n_positions: Number of positional embeddings.\n            n_ctx: Size of the causal mask (usually same as n_positions).\n            n_embd: Dimensionality of the embeddings and hidden states.\n            n_layer: Number of hidden layers in the Transformer encoder.\n            n_head: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            layer_norm_epsilon: epsilon to use in the layer norm layers\n            resid_pdrop: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attn_pdrop: The dropout ratio for the attention\n                probabilities.\n            embd_pdrop: The dropout ratio for the embeddings.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "self", ".", "output_attentions", "=", "kwargs", ".", "pop", "(", "\"output_attentions\"", ",", "False", ")", "\n", "self", ".", "output_hidden_states", "=", "kwargs", ".", "pop", "(", "\"output_hidden_states\"", ",", "False", ")", "\n", "self", ".", "output_past", "=", "kwargs", ".", "pop", "(", "\"output_past\"", ",", "True", ")", "# Not used by all models", "\n", "self", ".", "torchscript", "=", "kwargs", ".", "pop", "(", "\"torchscript\"", ",", "False", ")", "# Only used by PyTorch models", "\n", "self", ".", "use_bfloat16", "=", "kwargs", ".", "pop", "(", "\"use_bfloat16\"", ",", "False", ")", "\n", "self", ".", "pruned_heads", "=", "kwargs", ".", "pop", "(", "\"pruned_heads\"", ",", "{", "}", ")", "\n", "\n", "# Is decoder is used in encoder-decoder models to differentiate encoder from decoder", "\n", "self", ".", "is_decoder", "=", "kwargs", ".", "pop", "(", "\"is_decoder\"", ",", "False", ")", "\n", "\n", "# Parameters for sequence generation", "\n", "self", ".", "max_length", "=", "kwargs", ".", "pop", "(", "\"max_length\"", ",", "20", ")", "\n", "self", ".", "do_sample", "=", "kwargs", ".", "pop", "(", "\"do_sample\"", ",", "False", ")", "\n", "self", ".", "num_beams", "=", "kwargs", ".", "pop", "(", "\"num_beams\"", ",", "1", ")", "\n", "self", ".", "temperature", "=", "kwargs", ".", "pop", "(", "\"temperature\"", ",", "1.0", ")", "\n", "self", ".", "top_k", "=", "kwargs", ".", "pop", "(", "\"top_k\"", ",", "50", ")", "\n", "self", ".", "top_p", "=", "kwargs", ".", "pop", "(", "\"top_p\"", ",", "1.0", ")", "\n", "self", ".", "repetition_penalty", "=", "kwargs", ".", "pop", "(", "\"repetition_penalty\"", ",", "1.0", ")", "\n", "self", ".", "bos_token_id", "=", "kwargs", ".", "pop", "(", "\"bos_token_id\"", ",", "0", ")", "\n", "self", ".", "pad_token_id", "=", "kwargs", ".", "pop", "(", "\"pad_token_id\"", ",", "0", ")", "\n", "self", ".", "eos_token_ids", "=", "kwargs", ".", "pop", "(", "\"eos_token_ids\"", ",", "0", ")", "\n", "self", ".", "length_penalty", "=", "kwargs", ".", "pop", "(", "\"length_penalty\"", ",", "1.0", ")", "\n", "self", ".", "num_return_sequences", "=", "kwargs", ".", "pop", "(", "\"num_return_sequences\"", ",", "1", ")", "\n", "\n", "# Fine-tuning task arguments", "\n", "self", ".", "finetuning_task", "=", "kwargs", ".", "pop", "(", "\"finetuning_task\"", ",", "None", ")", "\n", "self", ".", "num_labels", "=", "kwargs", ".", "pop", "(", "\"num_labels\"", ",", "2", ")", "\n", "self", ".", "id2label", "=", "kwargs", ".", "pop", "(", "\"id2label\"", ",", "{", "i", ":", "\"LABEL_{}\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_labels", ")", "}", ")", "\n", "self", ".", "id2label", "=", "dict", "(", "(", "int", "(", "key", ")", ",", "value", ")", "for", "key", ",", "value", "in", "self", ".", "id2label", ".", "items", "(", ")", ")", "\n", "self", ".", "label2id", "=", "kwargs", ".", "pop", "(", "\"label2id\"", ",", "dict", "(", "zip", "(", "self", ".", "id2label", ".", "values", "(", ")", ",", "self", ".", "id2label", ".", "keys", "(", ")", ")", ")", ")", "\n", "self", ".", "label2id", "=", "dict", "(", "(", "key", ",", "int", "(", "value", ")", ")", "for", "key", ",", "value", "in", "self", ".", "label2id", ".", "items", "(", ")", ")", "\n", "\n", "# Additional attributes without default values", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "                ", "logger", ".", "error", "(", "\"Can't set {} with value {} for {}\"", ".", "format", "(", "key", ",", "value", ",", "self", ")", ")", "\n", "raise", "err", "\n", "\n", "", "", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_positions", "=", "n_positions", "\n", "self", ".", "n_embd", "=", "n_embd", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "resid_pdrop", "=", "resid_pdrop", "\n", "self", ".", "embd_pdrop", "=", "embd_pdrop", "\n", "self", ".", "attn_pdrop", "=", "attn_pdrop", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.max_position_embeddings": [[145, 148], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.hidden_size": [[149, 152], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_embd", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.num_attention_heads": [[153, 156], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.num_hidden_layers": [[157, 160], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.save_pretrained": [[161, 173], ["os.path.isdir", "os.path.join", "gpt2.GPT2Config.to_json_file"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.to_json_file"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a configuration object to the directory `save_directory`, so that it\n            can be re-loaded using the :func:`~transformers.PretrainedConfig.from_pretrained` class method.\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "\n", "save_directory", "\n", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_config_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "'config.json'", ")", "\n", "\n", "self", ".", "to_json_file", "(", "output_config_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.to_json_file": [[174, 178], ["open", "writer.write", "gpt2.GPT2Config.to_json_string"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.to_json_string"], ["", "def", "to_json_file", "(", "self", ",", "json_file_path", ")", ":", "\n", "        ", "\"\"\" Save this instance to a json file.\"\"\"", "\n", "with", "open", "(", "json_file_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.to_dict": [[179, 183], ["copy.deepcopy"], "methods", ["None"], ["", "", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.to_json_string": [[184, 187], ["json.dumps", "gpt2.GPT2Config.to_dict"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.from_json_file": [[188, 195], ["json.loads", "cls", "open", "reader.read"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `Config` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "dict_obj", "=", "json", ".", "loads", "(", "text", ")", "\n", "return", "cls", "(", "**", "dict_obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.from_pretrained": [[196, 227], ["io.file_utils._get_gpt2_dir", "fastNLP.io.file_utils._get_file_name_base_on_postfix", "cls.from_json_file", "hasattr", "kwargs.items", "dict", "hasattr", "kwargs.pop", "setattr", "to_remove.append", "int", "cls.from_json_file.pruned_heads.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_gpt2_dir", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.from_json_file", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "model_dir_or_name", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiate a :class:`~transformers.PretrainedConfig` (or a derived class) from a pre-trained model configuration.\n\n        Parameters:\n            model_dir_or_name:\n\n        \"\"\"", "\n", "model_dir", "=", "_get_gpt2_dir", "(", "model_dir_or_name", ")", "\n", "tokenizer_config_file", "=", "_get_file_name_base_on_postfix", "(", "model_dir", ",", "'config.json'", ")", "\n", "\n", "config", "=", "cls", ".", "from_json_file", "(", "tokenizer_config_file", ")", "\n", "\n", "# if resolved_config_file == config_file:", "\n", "#     logger.info(\"loading configuration file {}\".format(config_file))", "\n", "# else:", "\n", "#     logger.info(\"loading configuration file {} from cache at {}\".format(config_file, resolved_config_file))", "\n", "\n", "if", "hasattr", "(", "config", ",", "\"pruned_heads\"", ")", ":", "\n", "            ", "config", ".", "pruned_heads", "=", "dict", "(", "(", "int", "(", "key", ")", ",", "value", ")", "for", "key", ",", "value", "in", "config", ".", "pruned_heads", ".", "items", "(", ")", ")", "\n", "\n", "# Update config with kwargs if needed", "\n", "", "to_remove", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "config", ",", "key", ")", ":", "\n", "                ", "setattr", "(", "config", ",", "key", ",", "value", ")", "\n", "to_remove", ".", "append", "(", "key", ")", "\n", "", "", "for", "key", "in", "to_remove", ":", "\n", "            ", "kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Attention.__init__": [[258, 274], ["torch.nn.Module.__init__", "gpt2.Attention.register_buffer", "gpt2.Conv1D", "gpt2.Conv1D", "torch.nn.Dropout", "torch.nn.Dropout", "set", "torch.tril().view", "torch.tril", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "n_state", "=", "nx", "# in Attention: n_state=768 (nx=n_embd)", "\n", "# [switch nx => n_state from Block to Attention to keep identical to TF implem]", "\n", "assert", "n_state", "%", "config", ".", "n_head", "==", "0", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "n_ctx", ",", "n_ctx", ")", ")", ".", "view", "(", "1", ",", "1", ",", "n_ctx", ",", "n_ctx", ")", ")", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "split_size", "=", "n_state", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "c_attn", "=", "Conv1D", "(", "n_state", "*", "3", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "attn_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Attention.prune_heads": [[275, 296], ["torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "torch.cat", "gpt2.prune_conv1d_layer", "gpt2.prune_conv1d_layer", "gpt2.Attention.pruned_heads.union", "len", "set", "len", "sum", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "len", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.prune_conv1d_layer", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.prune_conv1d_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_head", ",", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "# Convert to set and emove already pruned heads", "\n", "for", "head", "in", "heads", ":", "\n", "# Compute how many pruned heads are before the head and move the index accordingly", "\n", "            ", "head", "=", "head", "-", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "index_attn", "=", "torch", ".", "cat", "(", "[", "index", ",", "index", "+", "self", ".", "split_size", ",", "index", "+", "(", "2", "*", "self", ".", "split_size", ")", "]", ")", "\n", "\n", "# Prune conv1d layers", "\n", "self", ".", "c_attn", "=", "prune_conv1d_layer", "(", "self", ".", "c_attn", ",", "index_attn", ",", "dim", "=", "1", ")", "\n", "self", ".", "c_proj", "=", "prune_conv1d_layer", "(", "self", ".", "c_proj", ",", "index", ",", "dim", "=", "0", ")", "\n", "\n", "# Update hyper params", "\n", "self", ".", "split_size", "=", "(", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "*", "(", "self", ".", "n_head", "-", "len", "(", "heads", ")", ")", "\n", "self", ".", "n_head", "=", "self", ".", "n_head", "-", "len", "(", "heads", ")", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Attention._attn": [[297, 319], ["torch.matmul", "gpt2.Attention.attn_dropout", "outputs.append", "gpt2.Attention.size", "gpt2.Attention.size", "torch.nn.Softmax", "torch.matmul", "math.sqrt", "v.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "_attn", "(", "self", ",", "q", ",", "k", ",", "v", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "w", "=", "torch", ".", "matmul", "(", "q", ",", "k", ")", "# batch_size x n_head x pre_len x (past_len+pre_len)", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "w", "=", "w", "/", "math", ".", "sqrt", "(", "v", ".", "size", "(", "-", "1", ")", ")", "\n", "", "nd", ",", "ns", "=", "w", ".", "size", "(", "-", "2", ")", ",", "w", ".", "size", "(", "-", "1", ")", "\n", "b", "=", "self", ".", "bias", "[", ":", ",", ":", ",", "ns", "-", "nd", ":", "ns", ",", ":", "ns", "]", "# 1 x 1 x pre_len x (past_len + pre_len)", "\n", "w", "=", "w", "*", "b", "-", "1e4", "*", "(", "1", "-", "b", ")", "# batch_size x n_head x pre_len x (past_len + pre_len)", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "            ", "w", "=", "w", "+", "attention_mask", "\n", "\n", "", "w", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "w", ")", "\n", "w", "=", "self", ".", "attn_dropout", "(", "w", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "w", "=", "w", "*", "head_mask", "\n", "\n", "", "outputs", "=", "[", "torch", ".", "matmul", "(", "w", ",", "v", ")", "]", "\n", "outputs", ".", "append", "(", "w", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Attention.merge_heads": [[320, 324], ["x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "x", ".", "size", "(", "-", "2", ")", "*", "x", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct merge_states", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Attention.split_heads": [[325, 332], ["x.view.view.view", "x.view.view.permute", "x.view.view.permute", "x.view.view.size", "x.view.view.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "split_heads", "(", "self", ",", "x", ",", "k", "=", "False", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "n_head", ",", "x", ".", "size", "(", "-", "1", ")", "//", "self", ".", "n_head", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct split_states", "\n", "if", "k", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# (batch, head, head_features, seq_length)", "\n", "", "else", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (batch, head, seq_length, head_features)", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Attention.forward": [[333, 356], ["gpt2.Attention.c_attn", "gpt2.Attention.split", "gpt2.Attention.split_heads", "gpt2.Attention.split_heads", "gpt2.Attention.split_heads", "torch.stack", "gpt2.Attention._attn", "gpt2.Attention.merge_heads", "gpt2.Attention.c_proj", "gpt2.Attention.resid_dropout", "torch.cat", "torch.cat", "layer_past[].transpose", "torch.cat.transpose"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Attention.split_heads", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Attention.split_heads", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Attention.split_heads", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Attention._attn", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Attention.merge_heads"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "c_attn", "(", "x", ")", "\n", "query", ",", "key", ",", "value", "=", "x", ".", "split", "(", "self", ".", "split_size", ",", "dim", "=", "2", ")", "\n", "query", "=", "self", ".", "split_heads", "(", "query", ")", "# (batch, head, seq_length, head_features)", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ",", "k", "=", "True", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "if", "layer_past", "is", "not", "None", ":", "\n", "            ", "past_key", ",", "past_value", "=", "layer_past", "[", "0", "]", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "layer_past", "[", "1", "]", "# transpose back cf below", "\n", "# key: (batch, head, head_features, seq_length)", "\n", "key", "=", "torch", ".", "cat", "(", "(", "past_key", ",", "key", ")", ",", "dim", "=", "-", "1", ")", "\n", "# value: (batch, head, seq_length, head_features)", "\n", "value", "=", "torch", ".", "cat", "(", "(", "past_value", ",", "value", ")", ",", "dim", "=", "-", "2", ")", "\n", "", "present", "=", "torch", ".", "stack", "(", "(", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "value", ")", ")", "# transpose to have same shapes for stacking", "\n", "\n", "attn_outputs", "=", "self", ".", "_attn", "(", "query", ",", "key", ",", "value", ",", "attention_mask", ",", "head_mask", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "a", "=", "self", ".", "merge_heads", "(", "a", ")", "\n", "a", "=", "self", ".", "c_proj", "(", "a", ")", "\n", "a", "=", "self", ".", "resid_dropout", "(", "a", ")", "\n", "\n", "outputs", "=", "[", "a", ",", "present", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "# a, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Conv1D.__init__": [[359, 369], ["torch.nn.Module.__init__", "torch.empty", "torch.nn.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "nx", ")", ":", "\n", "        ", "\"\"\" Conv1D layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)\n            Basically works like a Linear layer but the weights are transposed\n        \"\"\"", "\n", "super", "(", "Conv1D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nf", "=", "nf", "\n", "w", "=", "torch", ".", "empty", "(", "nx", ",", "nf", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "w", ",", "std", "=", "0.02", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "w", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "nf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Conv1D.forward": [[370, 375], ["torch.addmm", "x.view.view.view", "x.view.view.view", "x.view.view.size", "x.view.view.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size_out", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "nf", ",", ")", "\n", "x", "=", "torch", ".", "addmm", "(", "self", ".", "bias", ",", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", ",", "self", ".", "weight", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "size_out", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.MLP.__init__": [[378, 385], ["torch.nn.Module.__init__", "gpt2.Conv1D", "gpt2.Conv1D", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_state", ",", "config", ")", ":", "# in MLP: n_state=3072 (4 * n_embd)", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "c_fc", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "nx", ",", "n_state", ")", "\n", "self", ".", "act", "=", "gelu", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.MLP.forward": [[386, 390], ["gpt2.MLP.act", "gpt2.MLP.c_proj", "gpt2.MLP.dropout", "gpt2.MLP.c_fc"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "act", "(", "self", ".", "c_fc", "(", "x", ")", ")", "\n", "h2", "=", "self", ".", "c_proj", "(", "h", ")", "\n", "return", "self", ".", "dropout", "(", "h2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Block.__init__": [[393, 400], ["torch.nn.Module.__init__", "torch.nn.LayerNorm", "gpt2.Attention", "torch.nn.LayerNorm", "gpt2.MLP"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "ln_1", "=", "nn", ".", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ")", "\n", "self", ".", "ln_2", "=", "nn", ".", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "4", "*", "nx", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.Block.forward": [[401, 413], ["gpt2.Block.attn", "gpt2.Block.mlp", "gpt2.Block.ln_1", "gpt2.Block.ln_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "output_attn", "=", "self", ".", "attn", "(", "\n", "self", ".", "ln_1", "(", "x", ")", ",", "layer_past", "=", "layer_past", ",", "attention_mask", "=", "attention_mask", ",", "head_mask", "=", "head_mask", "\n", ")", "\n", "a", "=", "output_attn", "[", "0", "]", "# output_attn: a, present, (attentions)", "\n", "\n", "x", "=", "x", "+", "a", "\n", "m", "=", "self", ".", "mlp", "(", "self", ".", "ln_2", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "m", "\n", "\n", "outputs", "=", "[", "x", "]", "+", "output_attn", "[", "1", ":", "]", "\n", "return", "outputs", "# x, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel._init_weights": [[423, 435], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ",", "Conv1D", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "Conv1D", ")", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.__init__": [[436, 448], ["torch.nn.Module.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["", "", "def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "GPT2Config", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of class `PretrainedConfig`. \"", "\n", "\"To create a model from a pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", "\n", ")", "\n", "# Save config in model", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.base_model": [[449, 452], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_model", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.get_input_embeddings": [[453, 461], ["getattr", "getattr.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2LMHeadModel.get_input_embeddings"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get model's input embeddings\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "if", "base_model", "is", "not", "self", ":", "\n", "            ", "return", "base_model", ".", "get_input_embeddings", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.set_input_embeddings": [[462, 470], ["getattr", "getattr.set_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Model.set_input_embeddings"], ["", "", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\" Set model's input embeddings\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "if", "base_model", "is", "not", "self", ":", "\n", "            ", "base_model", ".", "set_input_embeddings", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.get_output_embeddings": [[471, 476], ["None"], "methods", ["None"], ["", "", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get model's output embeddings\n            Return None if the model doesn't have output embeddings\n        \"\"\"", "\n", "return", "None", "# Overwrite for models with output embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.tie_weights": [[477, 484], ["gpt2.GPT2PreTrainedModel.get_output_embeddings", "gpt2.GPT2PreTrainedModel._tie_or_clone_weights", "gpt2.GPT2PreTrainedModel.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2LMHeadModel.get_output_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel._tie_or_clone_weights", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2LMHeadModel.get_input_embeddings"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "output_embeddings", "=", "self", ".", "get_output_embeddings", "(", ")", "\n", "if", "output_embeddings", "is", "not", "None", ":", "\n", "            ", "self", ".", "_tie_or_clone_weights", "(", "output_embeddings", ",", "self", ".", "get_input_embeddings", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel._tie_or_clone_weights": [[485, 502], ["torch.nn.Parameter", "hasattr", "torch.nn.functional.pad", "hasattr", "hasattr", "input_embeddings.weight.clone"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pad"], ["", "", "def", "_tie_or_clone_weights", "(", "self", ",", "output_embeddings", ",", "input_embeddings", ")", ":", "\n", "        ", "\"\"\" Tie or clone module weights depending of weither we are using TorchScript or not\n        \"\"\"", "\n", "if", "self", ".", "config", ".", "torchscript", ":", "\n", "            ", "output_embeddings", ".", "weight", "=", "nn", ".", "Parameter", "(", "input_embeddings", ".", "weight", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "output_embeddings", ".", "weight", "=", "input_embeddings", ".", "weight", "\n", "\n", "", "if", "hasattr", "(", "output_embeddings", ",", "\"bias\"", ")", "and", "output_embeddings", ".", "bias", "is", "not", "None", ":", "\n", "            ", "output_embeddings", ".", "bias", ".", "data", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "\n", "output_embeddings", ".", "bias", ".", "data", ",", "\n", "(", "0", ",", "output_embeddings", ".", "weight", ".", "shape", "[", "0", "]", "-", "output_embeddings", ".", "bias", ".", "shape", "[", "0", "]", ")", ",", "\n", "\"constant\"", ",", "\n", "0", ",", "\n", ")", "\n", "", "if", "hasattr", "(", "output_embeddings", ",", "\"out_features\"", ")", "and", "hasattr", "(", "input_embeddings", ",", "\"num_embeddings\"", ")", ":", "\n", "            ", "output_embeddings", ".", "out_features", "=", "input_embeddings", ".", "num_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.init_weights": [[503, 514], ["gpt2.GPT2PreTrainedModel.apply", "gpt2.GPT2PreTrainedModel.tie_weights", "gpt2.GPT2PreTrainedModel.prune_heads"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.tie_weights", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.prune_heads"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Initialize and prunes weights if needed. \"\"\"", "\n", "# Initialize weights", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "# Prune heads if needed", "\n", "if", "self", ".", "config", ".", "pruned_heads", ":", "\n", "            ", "self", ".", "prune_heads", "(", "self", ".", "config", ".", "pruned_heads", ")", "\n", "\n", "# Tie weights if needed", "\n", "", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.prune_heads": [[515, 529], ["heads_to_prune.items", "gpt2.GPT2PreTrainedModel.base_model._prune_heads", "list", "set", "set", "gpt2.GPT2PreTrainedModel.config.pruned_heads.get"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Model._prune_heads", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["", "def", "prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the base model.\n\n            Arguments:\n\n                heads_to_prune: dict with keys being selected layer indices (`int`) and associated values being the list of heads to prune in said layer (list of `int`).\n                E.g. {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on layer 1 and heads 2 and 3 on layer 2.\n        \"\"\"", "\n", "# save new sets of pruned heads as union of previously stored pruned heads and newly pruned heads", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "union_heads", "=", "set", "(", "self", ".", "config", ".", "pruned_heads", ".", "get", "(", "layer", ",", "[", "]", ")", ")", "|", "set", "(", "heads", ")", "\n", "self", ".", "config", ".", "pruned_heads", "[", "layer", "]", "=", "list", "(", "union_heads", ")", "# Unfortunately we have to store it as list for JSON", "\n", "\n", "", "self", ".", "base_model", ".", "_prune_heads", "(", "heads_to_prune", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.save_pretrained": [[530, 548], ["os.path.isdir", "model_to_save.config.save_pretrained", "os.path.join", "torch.save", "fastNLP.core.logger.info", "hasattr", "model_to_save.state_dict"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a model and its configuration file to a directory, so that it\n            can be re-loaded using the `:func:`~transformers.PreTrainedModel.from_pretrained`` class method.\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "\n", "save_directory", "\n", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# Only save the model itself if we are using distributed training", "\n", "model_to_save", "=", "self", ".", "module", "if", "hasattr", "(", "self", ",", "\"module\"", ")", "else", "self", "\n", "\n", "# Save configuration file", "\n", "model_to_save", ".", "config", ".", "save_pretrained", "(", "save_directory", ")", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "\"pytorch_model.bin\"", ")", "\n", "torch", ".", "save", "(", "model_to_save", ".", "state_dict", "(", ")", ",", "output_model_file", ")", "\n", "logger", ".", "info", "(", "\"Model weights saved in {}\"", ".", "format", "(", "output_model_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.from_pretrained": [[549, 677], ["kwargs.pop", "kwargs.pop", "io.file_utils._get_gpt2_dir", "cls", "fastNLP.io.file_utils._get_file_name_base_on_postfix", "torch.load", "state_dict.copy.copy.keys", "zip", "getattr", "state_dict.copy.copy.copy", "gpt2.GPT2PreTrainedModel.from_pretrained.load"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_gpt2_dir", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "model_dir_or_name", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Instantiate a pretrained pytorch model from a pre-trained model configuration.\n\n        The model is set in evaluation mode by default using ``model.eval()`` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with ``model.train()``\n\n        The warning ``Weights from XXX not initialized from pretrained model`` means that the weights of XXX do not come pre-trained with the rest of the model.\n        It is up to you to train those weights with a downstream fine-tuning task.\n\n        The warning ``Weights from XXX not used in YYY`` means that the layer XXX is not used by YYY, therefore those weights are discarded.\n\n        Parameters:\n            model_dir_or_name: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n                - None if you are both providing the configuration and state dictionary (resp. with keyword arguments ``config`` and ``state_dict``)\n\n        Examples::\n\n            model = BertModel.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = BertModel.from_pretrained('./test/saved_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = BertModel.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = BertConfig.from_json_file('./tf_model/my_tf_model_config.json')\n            model = BertModel.from_pretrained('./tf_model/my_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "config", "=", "kwargs", ".", "pop", "(", "\"config\"", ",", "None", ")", "\n", "state_dict", "=", "kwargs", ".", "pop", "(", "\"state_dict\"", ",", "None", ")", "\n", "\n", "model_dir", "=", "_get_gpt2_dir", "(", "model_dir_or_name", ")", "\n", "\n", "# Load config if we don't provide a configuration", "\n", "model_kwargs", "=", "{", "}", "\n", "if", "not", "isinstance", "(", "config", ",", "GPT2Config", ")", ":", "\n", "            ", "config", "=", "cls", ".", "config_class", ".", "from_pretrained", "(", "\n", "model_dir", ",", "\n", "*", "model_args", ",", "\n", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "model_kwargs", "=", "kwargs", "\n", "\n", "# Instantiate model.", "\n", "", "model", "=", "cls", "(", "config", ",", "*", "model_args", ",", "**", "model_kwargs", ")", "\n", "\n", "model_path", "=", "_get_file_name_base_on_postfix", "(", "model_dir", ",", "'model.bin'", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "\n", "# Convert old format to new format if needed from a PyTorch state_dict", "\n", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_key", "=", "None", "\n", "if", "\"gamma\"", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "\"gamma\"", ",", "\"weight\"", ")", "\n", "", "if", "\"beta\"", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "\"beta\"", ",", "\"bias\"", ")", "\n", "", "if", "new_key", ":", "\n", "                ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "            ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "", "metadata", "=", "getattr", "(", "state_dict", ",", "\"_metadata\"", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "# PyTorch's `_load_from_state_dict` does not copy parameters in a module's descendants", "\n", "# so we need to apply the function recursively.", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "\"\"", ")", ":", "\n", "            ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", "\n", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "child", "is", "not", "None", ":", "\n", "                    ", "load", "(", "child", ",", "prefix", "+", "name", "+", "\".\"", ")", "\n", "\n", "# Make sure we are able to load base models as well as derived models (with heads)", "\n", "", "", "", "start_prefix", "=", "\"\"", "\n", "model_to_load", "=", "model", "\n", "if", "not", "hasattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "and", "any", "(", "\n", "s", ".", "startswith", "(", "cls", ".", "base_model_prefix", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", "\n", ")", ":", "\n", "            ", "start_prefix", "=", "cls", ".", "base_model_prefix", "+", "\".\"", "\n", "", "if", "hasattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "and", "not", "any", "(", "\n", "s", ".", "startswith", "(", "cls", ".", "base_model_prefix", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", "\n", ")", ":", "\n", "            ", "model_to_load", "=", "getattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "\n", "\n", "", "load", "(", "model_to_load", ",", "prefix", "=", "start_prefix", ")", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Weights of {} not initialized from pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "missing_keys", "\n", ")", "\n", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Weights from pretrained model not used in {}: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", "\n", ")", "\n", ")", "\n", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Error(s) in loading state_dict for {}:\\n\\t{}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "\"\\n\\t\"", ".", "join", "(", "error_msgs", ")", "\n", ")", "\n", ")", "\n", "\n", "", "model", ".", "tie_weights", "(", ")", "# make sure word embedding weights are still tied if needed", "\n", "\n", "# Set model in evaluation mode to desactivate DropOut modules by default", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.prepare_inputs_for_generation": [[678, 680], ["None"], "methods", ["None"], ["", "def", "prepare_inputs_for_generation", "(", "self", ",", "input_ids", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "{", "\"input_ids\"", ":", "input_ids", ",", "**", "kwargs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.generate": [[681, 736], ["torch.no_grad", "gpt2._GPT2Decoder", "generator.seq2seq_generator.SequenceGenerator.seq2seq_generator.SequenceGenerator", "generator.seq2seq_generator.SequenceGenerator.seq2seq_generator.SequenceGenerator.generate", "gpt2.GPT2State"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.SequenceGenerator.generate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate", "(", "\n", "self", ",", "\n", "input_ids", ",", "\n", "max_length", "=", "None", ",", "\n", "do_sample", "=", "None", ",", "\n", "num_beams", "=", "None", ",", "\n", "temperature", "=", "None", ",", "\n", "top_k", "=", "None", ",", "\n", "top_p", "=", "None", ",", "\n", "repetition_penalty", "=", "None", ",", "\n", "bos_token_id", "=", "None", ",", "\n", "pad_token_id", "=", "None", ",", "\n", "eos_token_ids", "=", "None", ",", "\n", "length_penalty", "=", "None", ")", ":", "\n", "        ", "\"\"\" Sequence generator for models with a LM head.\n\n        The method currently supports greedy or penalized greedy decoding, sampling with top-k or nucleus sampling\n        and beam-search.\n\n        Params:\n            **input_ids**: (`optional`) `torch.LongTensor` of shape (1, sequence_length)\n                The sequence used as a prompt for the generation. If `None` the method initializes\n                it as an empty `torch.LongTensor` of shape (1,)\n            **max_length**: (`optional`) int\n                The max length of the sequence to be generated.  Between 1 and infinity. Default to 20.\n            **do_sample**: (`optional`) bool\n                If set to `False` we use greedy decoding; otherwise sampling. Default to greedy sampling.\n            **num_beams**: (`optional`) int\n                Number of beams for beam search. 1 means no beam serach. Default to 1.\n            **temperature**: (`optional`) float\n                The value used to module the next token probabilities.\n            **top_k**: (`optional`) int\n                The number of highest probability vocabulary tokens to keep for top-k-filtering. Between 1 and infinity. Default to 50.\n            **top_p**: (`optional`) float\n                The cumulative probability of parameter highest probability vocabulary tokens to keep for nucleus sampling. Must be between 0 and 1. Default to 1.\n            **repetition_penalty**: (`optional`) float\n                The parameter for repetition penalty. Between 1.0 and + infinity. 1.0 means no penalty. Default to 1.\n            **bos_token_id**: (`optional`) int\n                Beginning of sentence token if no prompt is provided. Default to 0.\n            **eos_token_ids**: (`optional`) int or list of int\n                End of sequence token or list of tokens to stop the generation. Default to 0.\n            **length_penalty**: (`optional`) int\n                Exponential penalty to the length. Default to 0.\n            **length_penalty**: (`optional`) float\n                Exponential penalty to the length. Default to 1.\n        \"\"\"", "\n", "decoder", "=", "_GPT2Decoder", "(", "self", ")", "\n", "generator", "=", "SequenceGenerator", "(", "decoder", "=", "decoder", ",", "max_length", "=", "max_length", ",", "num_beams", "=", "num_beams", ",", "\n", "do_sample", "=", "do_sample", ",", "temperature", "=", "temperature", ",", "top_k", "=", "top_k", ",", "top_p", "=", "top_p", ",", "\n", "bos_token_id", "=", "bos_token_id", ",", "eos_token_id", "=", "eos_token_ids", ",", "\n", "repetition_penalty", "=", "repetition_penalty", ",", "length_penalty", "=", "length_penalty", ",", "\n", "pad_token_id", "=", "pad_token_id", ")", "\n", "results", "=", "generator", ".", "generate", "(", "tokens", "=", "input_ids", ",", "state", "=", "GPT2State", "(", ")", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Model.__init__": [[766, 776], ["gpt2.GPT2PreTrainedModel.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Dropout", "torch.nn.ModuleList", "torch.nn.LayerNorm", "gpt2.GPT2Model.init_weights", "gpt2.Block", "range"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "wte", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "wpe", "=", "nn", ".", "Embedding", "(", "config", ".", "n_positions", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "config", ".", "n_ctx", ",", "config", ",", "scale", "=", "True", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "self", ".", "ln_f", "=", "nn", ".", "LayerNorm", "(", "config", ".", "n_embd", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Model.get_input_embeddings": [[777, 779], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "wte", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Model.set_input_embeddings": [[780, 782], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "wte", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Model._prune_heads": [[783, 789], ["heads_to_prune.items", "gpt2.GPT2Model.h[].attn.prune_heads"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "h", "[", "layer", "]", ".", "attn", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Model.forward": [[790, 907], ["input_ids.view.view.size", "input_ids.view.view.view", "gpt2.GPT2Model.wte", "gpt2.GPT2Model.wpe", "gpt2.GPT2Model.drop", "enumerate", "gpt2.GPT2Model.ln_f", "hidden_states.view.view.view", "token_type_ids.view.view.view", "position_ids.unsqueeze().view.unsqueeze().view.view", "[].size", "torch.arange", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze().view", "attention_mask.to.to.view", "attention_mask.to.to.unsqueeze().unsqueeze", "attention_mask.to.to.to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "gpt2.GPT2Model.wte", "zip", "block", "tuple.append", "tuple", "len", "len", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "hidden_states.view.view.size", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze", "attention_mask.to.to.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "hidden_states.view.view.view", "t.view", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "gpt2.GPT2Model.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "gpt2.GPT2Model.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next"], ["", "", "def", "forward", "(", "self", ",", "input_ids", ",", "state", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "output_attentions", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n\n        :param torch.LongTensor input_ids: batch_size x max_len or batch_size x beam_size x 1\n        :param GPT2State state: \u4e4b\u524d\u7684\u72b6\u6001\n        :param torch.ByteTensor attention_mask: batch_size x (pre_len+past_len)\uff0c \u4e0einput_ids\u4e0estate\u7684concat\u4e00\u6837\u5927\u3002\n            \u4e3a0\u7684\u5730\u65b9\u4e3apadding\u3002\n        :param torch.LongTensor token_type_ids:  batch_size x max_len\u3002\n        :param torch.LongTensor position_ids: \u4e0einput_ids\u5bf9\u5e94\u7684\u4f4d\u7f6e\n        :param head_mask:\n        :param bool output_attentions: \u662f\u5426\u8f93\u51faattention\u72b6\u6001\n        :return:\n        \"\"\"", "\n", "input_shape", "=", "input_ids", ".", "size", "(", ")", "# batch_size x max_len \u6216 batch_size x beam_size x 1", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "# input_shape\u662f batch_size' x max_len", "\n", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "", "if", "position_ids", "is", "not", "None", ":", "\n", "            ", "position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "state", "is", "None", "or", "len", "(", "state", ")", "==", "0", ":", "\n", "            ", "past_length", "=", "0", "\n", "state", "=", "[", "None", "]", "*", "len", "(", "self", ".", "h", ")", "# len(self.h) \u662flayer\u7684\u5c42\u6570", "\n", "", "else", ":", "\n", "            ", "past_length", "=", "state", "[", "0", "]", "[", "0", "]", ".", "size", "(", "-", "2", ")", "\n", "", "if", "position_ids", "is", "None", ":", "# \u5982\u679c\u6ca1\u6709position id\u5219\u751f\u6210", "\n", "            ", "device", "=", "input_ids", ".", "device", "\n", "position_ids", "=", "torch", ".", "arange", "(", "past_length", ",", "input_shape", "[", "-", "1", "]", "+", "past_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "# Attention mask.", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "            ", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "attention_mask", "=", "attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "# attention_mask = attention_mask.masked_fill(attention_mask.eq(0), -10000.0)", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# head_mask has shape n_layer x batch x n_heads x N x N", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "(", "\n", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "\n", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "\n", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "n_layer", "\n", "\n", "", "inputs_embeds", "=", "self", ".", "wte", "(", "input_ids", ")", "\n", "position_embeds", "=", "self", ".", "wpe", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_embeds", "=", "self", ".", "wte", "(", "token_type_ids", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "hidden_states", "=", "inputs_embeds", "+", "position_embeds", "+", "token_type_embeds", "\n", "hidden_states", "=", "self", ".", "drop", "(", "hidden_states", ")", "\n", "\n", "# batch_size x max_len x embed_size", "\n", "output_shape", "=", "input_shape", "+", "(", "hidden_states", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "\n", "presents", "=", "(", ")", "\n", "all_attentions", "=", "[", "]", "\n", "all_hidden_states", "=", "(", ")", "\n", "for", "i", ",", "(", "block", ",", "layer_past", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "h", ",", "state", ")", ")", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "\n", "outputs", "=", "block", "(", "\n", "hidden_states", ",", "layer_past", "=", "layer_past", ",", "attention_mask", "=", "attention_mask", ",", "head_mask", "=", "head_mask", "[", "i", "]", "\n", ")", "\n", "\n", "hidden_states", ",", "present", "=", "outputs", "[", ":", "2", "]", "\n", "presents", "=", "presents", "+", "(", "present", ",", ")", "\n", "\n", "all_attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "", "hidden_states", "=", "self", ".", "ln_f", "(", "hidden_states", ")", "\n", "\n", "hidden_states", "=", "hidden_states", ".", "view", "(", "*", "output_shape", ")", "\n", "# Add last hidden state", "\n", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "outputs", "=", "outputs", "+", "(", "presents", ",", ")", "\n", "\n", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "if", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "(", "-", "1", ",", ")", "+", "all_attentions", "[", "0", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "t", ".", "view", "(", "*", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "# \u5199\u51fa\u6240\u6709\u8f93\u51fa\u7684shape.", "\n", "# last hidden states, Tensor: batch_size x max_len x embed_size", "\n", "# presents, tuple: n_layer x 2 x batch_size x n_head x (max_len+past_len) x head_dim, \u7b2c\u4e8c\u7ef4\u524d\u4e00\u534a\u4e3akey\uff0c\u540e\u4e00\u534a\u4e3avalue", "\n", "# all hidden states, tuple: n_layer x batch_size x max_len x embed_size\uff0c", "\n", "# attention, tuple: n_layer x batch_size x n_head' x src_len x tgt_len", "\n", "", "return", "outputs", "# last hidden state, (presents), (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2State.__init__": [[910, 913], ["decoder.seq2seq_decoder.State.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "None", ",", "None", ")", "\n", "self", ".", "state", "=", "None", "# tuple [n_layer, 2 x batch_size x n_head x past_len x head_dim]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2State.num_samples": [[914, 919], ["gpt2.GPT2State.state[].size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "@", "property", "\n", "def", "num_samples", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "state", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "state", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2State.decode_length": [[920, 925], ["gpt2.GPT2State.state[].size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "@", "property", "\n", "def", "decode_length", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "state", "is", "None", ":", "\n", "            ", "return", "0", "\n", "", "return", "self", ".", "state", "[", "0", "]", ".", "size", "(", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2State.reorder_state": [[926, 931], ["range", "len", "gpt2.GPT2State.state[].index_select"], "methods", ["None"], ["", "def", "reorder_state", "(", "self", ",", "indices", ")", ":", "\n", "        ", "if", "self", ".", "state", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "state", ")", ")", ":", "\n", "                ", "assert", "self", ".", "state", "[", "i", "]", "is", "not", "None", "\n", "self", ".", "state", "[", "i", "]", "=", "self", ".", "state", "[", "i", "]", ".", "index_select", "(", "index", "=", "indices", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2State.__iter__": [[932, 935], ["None"], "methods", ["None"], ["", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "state", ":", "\n", "            ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2State.__getitem__": [[936, 939], ["isinstance"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "assert", "isinstance", "(", "item", ",", "int", ")", "\n", "return", "self", ".", "state", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2State.__len__": [[940, 944], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "state", "is", "not", "None", ":", "\n", "            ", "return", "len", "(", "self", ".", "state", ")", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2._GPT2Decoder.__init__": [[950, 953], ["decoder.seq2seq_decoder.Seq2SeqDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "gpt_model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpt_model", "=", "gpt_model", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2._GPT2Decoder.decode": [[954, 966], ["gpt2._GPT2Decoder.gpt_model", "list", "gpt2.GPT2State"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "tokens", ",", "state", "=", "None", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "state", "is", "None", ":", "\n", "            ", "state", "=", "GPT2State", "(", ")", "\n", "", "lm_logits", ",", "presents", ",", "_", "=", "self", ".", "gpt_model", "(", "input_ids", "=", "tokens", "[", ":", ",", "state", ".", "decode_length", ":", "]", ",", "\n", "state", "=", "state", ",", "\n", "attention_mask", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "\n", "output_attentions", "=", "False", ")", "\n", "state", ".", "state", "=", "list", "(", "presents", ")", "\n", "return", "lm_logits", "[", ":", ",", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2LMHeadModel.__init__": [[996, 1002], ["gpt2.GPT2PreTrainedModel.__init__", "gpt2.GPT2Model", "torch.nn.Linear", "gpt2.GPT2LMHeadModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "GPT2LMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "GPT2Model", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2LMHeadModel.get_output_embeddings": [[1003, 1005], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2LMHeadModel.get_input_embeddings": [[1006, 1008], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "wte", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2LMHeadModel.forward": [[1009, 1054], ["gpt2.GPT2LMHeadModel.transformer", "gpt2.GPT2LMHeadModel.lm_head", "lm_logits[].contiguous", "labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous.view", "labels[].contiguous.view", "lm_logits[].contiguous.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "state", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "labels", "=", "None", ",", "output_attentions", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param torch.LongTensor input_ids: batch_size x max_len or batch_size x beam_size x 1\n        :param tuple state: num_layers x 2 x batch_size x n_head x max_len' x head_dim. \u53ef\u4ee5\u5c06\u524d\u4e00\u4e2a\u65f6\u523b\u7684presents\u4f5c\u4e3a\u8f93\u5165\n        :param torch.ByteTensor attention_mask: batch_size x max_len\uff0c \u4e0einput_ids\u4e00\u6837\u5927\u3002\u4e3a0\u7684\u5730\u65b9\u4e3apadding\u3002\n        :param torch.LongTensor token_type_ids:  batch_size x max_len\u3002\n        :param torch.LongTensor position_ids: \u4e0einput_ids\u5bf9\u5e94\u7684\u4f4d\u7f6e\n        :param head_mask:\n        :param labels: language model\u5e94\u8be5\u9884\u6d4b\u7684\u503c\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u6ca1\u6709language model\u7684\u989d\u5916loss\u3002\u6700\u597d\u628apadding\u4f4d\u7f6e\u8bbe\u7f6e\u4e3a-100\n            \u4f7f\u5f97language model\u4e0d\u8981\u8ba1\u7b97\u8fd9\u90e8\u5206\u7684loss\n        :param output_attentions: \u662f\u5426\u8f93\u51faoutput_attentions\n        :return:\n        \"\"\"", "\n", "transformer_outputs", "=", "self", ".", "transformer", "(", "\n", "input_ids", ",", "\n", "state", "=", "state", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "output_attentions", "=", "output_attentions", "\n", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# Shift so that tokens < n predict n", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "# Flatten the tokens", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "# \u8fd4\u56de\u503c", "\n", "# loss: torch.FloatTensor, \u5982\u679clabels\u4e3aNone\u5219\u6ca1\u6709\u8be5loss", "\n", "# lm_logits: batch_size x max_len x vocab_size", "\n", "# presents, tuple: n_layer x 2 x batch_size x n_head x (max_len+past_len) x head_dim, \u7b2c\u4e8c\u7ef4\u524d\u4e00\u534a\u4e3akey\uff0c\u540e\u4e00\u534a\u4e3avalue", "\n", "# all hidden states, tuple: n_layer x batch_size x max_len x embed_size\uff0c", "\n", "# attention, tuple: n_layer x batch_size x n_head' x src_len x tgt_len", "\n", "", "return", "outputs", "# (loss), lm_logits, presents, all hidden_states, (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.gelu": [[229, 231], ["torch.tanh", "torch.pow"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "GELU_CONSTANT", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.prune_conv1d_layer": [[233, 255], ["index.to.to", "layer.weight.index_select().clone().detach", "list", "len", "Conv1D().to", "Conv1D().to.weight.copy_", "Conv1D().to.bias.copy_", "layer.bias.clone().detach", "layer.bias[].clone().detach", "layer.weight.size", "layer.weight.index_select().clone().detach.contiguous", "layer.bias[].clone().detach.contiguous", "layer.weight.index_select().clone", "gpt2.Conv1D", "layer.bias.clone", "layer.bias[].clone", "layer.weight.index_select"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "prune_conv1d_layer", "(", "layer", ",", "index", ",", "dim", "=", "1", ")", ":", "\n", "    ", "\"\"\" Prune a Conv1D layer (a model parameters) to keep only entries in index.\n        A Conv1D work as a Linear layer (see e.g. BERT) but the weights are transposed.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "index", "=", "index", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "W", "=", "layer", ".", "weight", ".", "index_select", "(", "dim", ",", "index", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "dim", "==", "0", ":", "\n", "        ", "b", "=", "layer", ".", "bias", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "        ", "b", "=", "layer", ".", "bias", "[", "index", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "new_size", "=", "list", "(", "layer", ".", "weight", ".", "size", "(", ")", ")", "\n", "new_size", "[", "dim", "]", "=", "len", "(", "index", ")", "\n", "new_layer", "=", "Conv1D", "(", "new_size", "[", "1", "]", ",", "new_size", "[", "0", "]", ")", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "weight", ".", "copy_", "(", "W", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "True", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "bias", ".", "copy_", "(", "b", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "True", "\n", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.lstm.LSTM.__init__": [[22, 40], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "lstm.LSTM.init_param"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.lstm.LSTM.init_param"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", "=", "100", ",", "num_layers", "=", "1", ",", "dropout", "=", "0.0", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "False", ",", "bias", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param input_size:  \u8f93\u5165 `x` \u7684\u7279\u5f81\u7ef4\u5ea6\n        :param hidden_size: \u9690\u72b6\u6001 `h` \u7684\u7279\u5f81\u7ef4\u5ea6. \u5982\u679cbidirectional\u4e3aTrue\uff0c\u5219\u8f93\u51fa\u7684\u7ef4\u5ea6\u4f1a\u662fhidde_size*2\n        :param num_layers: rnn\u7684\u5c42\u6570. Default: 1\n        :param dropout: \u5c42\u95f4dropout\u6982\u7387. Default: 0\n        :param bidirectional: \u82e5\u4e3a ``True``, \u4f7f\u7528\u53cc\u5411\u7684RNN. Default: ``False``\n        :param batch_first: \u82e5\u4e3a ``True``, \u8f93\u5165\u548c\u8f93\u51fa ``Tensor`` \u5f62\u72b6\u4e3a\n            :(batch, seq, feature). Default: ``False``\n        :param bias: \u5982\u679c\u4e3a ``False``, \u6a21\u578b\u5c06\u4e0d\u4f1a\u4f7f\u7528bias. Default: ``True``\n        \"\"\"", "\n", "super", "(", "LSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", ",", "hidden_size", ",", "num_layers", ",", "bias", "=", "bias", ",", "batch_first", "=", "batch_first", ",", "\n", "dropout", "=", "dropout", ",", "bidirectional", "=", "bidirectional", ")", "\n", "self", ".", "init_param", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.lstm.LSTM.init_param": [[41, 51], ["lstm.LSTM.named_parameters", "param.data.fill_", "param.size", "param.data[].fill_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "init_param", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'bias'", "in", "name", ":", "\n", "# based on https://github.com/pytorch/pytorch/issues/750#issuecomment-280671871", "\n", "                ", "param", ".", "data", ".", "fill_", "(", "0", ")", "\n", "n", "=", "param", ".", "size", "(", "0", ")", "\n", "start", ",", "end", "=", "n", "//", "4", ",", "n", "//", "2", "\n", "param", ".", "data", "[", "start", ":", "end", "]", ".", "fill_", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.lstm.LSTM.forward": [[52, 85], ["torch.pack_padded_sequence.size", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "lstm.LSTM.lstm", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "lstm.LSTM.lstm", "isinstance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "seq_len", "=", "None", ",", "h0", "=", "None", ",", "c0", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param x: [batch, seq_len, input_size] \u8f93\u5165\u5e8f\u5217\n        :param seq_len: [batch, ] \u5e8f\u5217\u957f\u5ea6, \u82e5\u4e3a ``None``, \u6240\u6709\u8f93\u5165\u770b\u505a\u4e00\u6837\u957f. Default: ``None``\n        :param h0: [batch, hidden_size] \u521d\u59cb\u9690\u72b6\u6001, \u82e5\u4e3a ``None`` , \u8bbe\u4e3a\u51680\u5411\u91cf. Default: ``None``\n        :param c0: [batch, hidden_size] \u521d\u59cbCell\u72b6\u6001, \u82e5\u4e3a ``None`` , \u8bbe\u4e3a\u51680\u5411\u91cf. Default: ``None``\n        :return (output, (ht, ct)): output: [batch, seq_len, hidden_size*num_direction] \u8f93\u51fa\u5e8f\u5217\n            \u548c ht,ct: [num_layers*num_direction, batch, hidden_size] \u6700\u540e\u65f6\u523b\u9690\u72b6\u6001.\n        \"\"\"", "\n", "batch_size", ",", "max_len", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "if", "h0", "is", "not", "None", "and", "c0", "is", "not", "None", ":", "\n", "            ", "hx", "=", "(", "h0", ",", "c0", ")", "\n", "", "else", ":", "\n", "            ", "hx", "=", "None", "\n", "", "if", "seq_len", "is", "not", "None", "and", "not", "isinstance", "(", "x", ",", "rnn", ".", "PackedSequence", ")", ":", "\n", "            ", "sort_lens", ",", "sort_idx", "=", "torch", ".", "sort", "(", "seq_len", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "if", "self", ".", "batch_first", ":", "\n", "                ", "x", "=", "x", "[", "sort_idx", "]", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", "[", ":", ",", "sort_idx", "]", "\n", "", "x", "=", "rnn", ".", "pack_padded_sequence", "(", "x", ",", "sort_lens", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "output", ",", "hx", "=", "self", ".", "lstm", "(", "x", ",", "hx", ")", "# -> [N,L,C]", "\n", "output", ",", "_", "=", "rnn", ".", "pad_packed_sequence", "(", "output", ",", "batch_first", "=", "self", ".", "batch_first", ",", "total_length", "=", "max_len", ")", "\n", "_", ",", "unsort_idx", "=", "torch", ".", "sort", "(", "sort_idx", ",", "dim", "=", "0", ",", "descending", "=", "False", ")", "\n", "if", "self", ".", "batch_first", ":", "\n", "                ", "output", "=", "output", "[", "unsort_idx", "]", "\n", "", "else", ":", "\n", "                ", "output", "=", "output", "[", ":", ",", "unsort_idx", "]", "\n", "", "hx", "=", "hx", "[", "0", "]", "[", ":", ",", "unsort_idx", "]", ",", "hx", "[", "1", "]", "[", ":", ",", "unsort_idx", "]", "\n", "", "else", ":", "\n", "            ", "output", ",", "hx", "=", "self", ".", "lstm", "(", "x", ",", "hx", ")", "\n", "", "return", "output", ",", "hx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.conv_maxpool.ConvMaxpool.__init__": [[19, 69], ["torch.Module.__init__", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "Exception", "isinstance", "isinstance", "isinstance", "isinstance", "ValueError", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "Exception", "len", "len", "zip"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_sizes", ",", "activation", "=", "\"relu\"", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param int in_channels: \u8f93\u5165channel\u7684\u5927\u5c0f\uff0c\u4e00\u822c\u662fembedding\u7684\u7ef4\u5ea6; \u6216encoder\u7684output\u7ef4\u5ea6\n        :param int,tuple(int) out_channels: \u8f93\u51fachannel\u7684\u6570\u91cf\u3002\u5982\u679c\u4e3alist\uff0c\u5219\u9700\u8981\u4e0ekernel_sizes\u7684\u6570\u91cf\u4fdd\u6301\u4e00\u81f4\n        :param int,tuple(int) kernel_sizes: \u8f93\u51fachannel\u7684kernel\u5927\u5c0f\u3002\n        :param str activation: Convolution\u540e\u7684\u7ed3\u679c\u5c06\u901a\u8fc7\u8be5activation\u540e\u518d\u7ecf\u8fc7max-pooling\u3002\u652f\u6301relu, sigmoid, tanh\n        \"\"\"", "\n", "super", "(", "ConvMaxpool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "for", "kernel_size", "in", "kernel_sizes", ":", "\n", "            ", "assert", "kernel_size", "%", "2", "==", "1", ",", "\"kernel size has to be odd numbers.\"", "\n", "\n", "# convolution", "\n", "", "if", "isinstance", "(", "kernel_sizes", ",", "(", "list", ",", "tuple", ",", "int", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "kernel_sizes", ",", "int", ")", "and", "isinstance", "(", "out_channels", ",", "int", ")", ":", "\n", "                ", "out_channels", "=", "[", "out_channels", "]", "\n", "kernel_sizes", "=", "[", "kernel_sizes", "]", "\n", "", "elif", "isinstance", "(", "kernel_sizes", ",", "(", "tuple", ",", "list", ")", ")", "and", "isinstance", "(", "out_channels", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "assert", "len", "(", "out_channels", ")", "==", "len", "(", "\n", "kernel_sizes", ")", ",", "\"The number of out_channels should be equal to the number\"", "\" of kernel_sizes.\"", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"The type of out_channels and kernel_sizes should be the same.\"", ")", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "oc", ",", "\n", "kernel_size", "=", "ks", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "ks", "//", "2", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "None", ")", "\n", "for", "oc", ",", "ks", "in", "zip", "(", "out_channels", ",", "kernel_sizes", ")", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "'Incorrect kernel sizes: should be list, tuple or int'", ")", "\n", "\n", "# activation function", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "F", ".", "relu", "\n", "", "elif", "activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "activation", "=", "F", ".", "sigmoid", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "F", ".", "tanh", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"Undefined activation function: choose from: relu, tanh, sigmoid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.conv_maxpool.ConvMaxpool.forward": [[70, 88], ["torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv_maxpool.ConvMaxpool.activation", "mask.unsqueeze.unsqueeze.unsqueeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "torch.max_pool1d().squeeze", "conv", "torch.transpose.masked_fill_", "torch.transpose.masked_fill_", "torch.transpose.masked_fill_", "mask.unsqueeze.unsqueeze.eq", "float", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "i.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param torch.FloatTensor x: batch_size x max_len x input_size, \u4e00\u822c\u662f\u7ecf\u8fc7embedding\u540e\u7684\u503c\n        :param mask: batch_size x max_len, pad\u7684\u5730\u65b9\u4e3a0\u3002\u4e0d\u5f71\u54cd\u5377\u79ef\u8fd0\u7b97\uff0cmax-pool\u4e00\u5b9a\u4e0d\u4f1apool\u5230pad\u4e3a0\u7684\u4f4d\u7f6e\n        :return:\n        \"\"\"", "\n", "# [N,L,C] -> [N,C,L]", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", "\n", "# convolution", "\n", "xs", "=", "[", "self", ".", "activation", "(", "conv", "(", "x", ")", ")", "for", "conv", "in", "self", ".", "convs", "]", "# [[N,C,L], ...]", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "# B x 1 x L", "\n", "xs", "=", "[", "x", ".", "masked_fill_", "(", "mask", ".", "eq", "(", "False", ")", ",", "float", "(", "'-inf'", ")", ")", "for", "x", "in", "xs", "]", "\n", "# max-pooling", "\n", "", "xs", "=", "[", "F", ".", "max_pool1d", "(", "input", "=", "i", ",", "kernel_size", "=", "i", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "for", "i", "in", "xs", "]", "# [[N, C], ...]", "\n", "return", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "-", "1", ")", "# [N, C]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.pooling.MaxPool.__init__": [[20, 38], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "stride", "=", "None", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "dimension", "=", "1", ",", "kernel_size", "=", "None", ",", "ceil_mode", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param stride: \u7a97\u53e3\u79fb\u52a8\u5927\u5c0f\uff0c\u9ed8\u8ba4\u4e3akernel_size\n        :param padding: padding\u7684\u5185\u5bb9\uff0c\u9ed8\u8ba4\u4e3a0\n        :param dilation: \u63a7\u5236\u7a97\u53e3\u5185\u5143\u7d20\u79fb\u52a8\u8ddd\u79bb\u7684\u5927\u5c0f\n        :param dimension: MaxPool\u7684\u7ef4\u5ea6\uff0c\u652f\u63011\uff0c2\uff0c3\u7ef4\u3002\n        :param kernel_size: max pooling\u7684\u7a97\u53e3\u5927\u5c0f\uff0c\u9ed8\u8ba4\u4e3atensor\u6700\u540ek\u7ef4\uff0c\u5176\u4e2dk\u4e3adimension\n        :param ceil_mode:\n        \"\"\"", "\n", "super", "(", "MaxPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "dimension", "in", "[", "1", ",", "2", ",", "3", "]", ",", "f'Now we only support 1d, 2d, or 3d Pooling'", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "ceil_mode", "=", "ceil_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.pooling.MaxPool.forward": [[39, 61], ["torch.MaxPool3d.", "torch.transpose.squeeze", "torch.transpose.squeeze", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size", "torch.transpose.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "dimension", "==", "1", ":", "\n", "            ", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", "# [N,L,C] -> [N,C,L]", "\n", "pooling", "=", "nn", ".", "MaxPool1d", "(", "\n", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", "if", "self", ".", "kernel_size", "is", "not", "None", "else", "x", ".", "size", "(", "-", "1", ")", ",", "\n", "return_indices", "=", "False", ",", "ceil_mode", "=", "self", ".", "ceil_mode", "\n", ")", "\n", "", "elif", "self", ".", "dimension", "==", "2", ":", "\n", "            ", "pooling", "=", "nn", ".", "MaxPool2d", "(", "\n", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", "if", "self", ".", "kernel_size", "is", "not", "None", "else", "(", "x", ".", "size", "(", "-", "2", ")", ",", "x", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "return_indices", "=", "False", ",", "ceil_mode", "=", "self", ".", "ceil_mode", "\n", ")", "\n", "", "else", ":", "\n", "            ", "pooling", "=", "nn", ".", "MaxPool3d", "(", "\n", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", "if", "self", ".", "kernel_size", "is", "not", "None", "else", "(", "x", ".", "size", "(", "-", "3", ")", ",", "x", ".", "size", "(", "-", "2", ")", ",", "x", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "return_indices", "=", "False", ",", "ceil_mode", "=", "self", ".", "ceil_mode", "\n", ")", "\n", "", "x", "=", "pooling", "(", "x", ")", "\n", "return", "x", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "# [N,C,1] -> [N,C]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.pooling.MaxPoolWithMask.__init__": [[68, 71], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MaxPoolWithMask", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inf", "=", "10e12", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.pooling.MaxPoolWithMask.forward": [[72, 82], ["mask.view", "masks.expand().float.expand().float.expand().float", "mask.size", "mask.size", "torch.max", "torch.max", "torch.max", "torch.max", "masks.expand().float.expand().float.expand", "tensor.size", "masks.expand().float.expand().float.le().float", "masks.expand().float.expand().float.le"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "forward", "(", "self", ",", "tensor", ",", "mask", ",", "dim", "=", "1", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.FloatTensor tensor: [batch_size, seq_len, channels] \u521d\u59cbtensor\n        :param torch.LongTensor mask: [batch_size, seq_len] 0/1\u7684mask\u77e9\u9635\n        :param int dim: \u9700\u8981\u8fdb\u884cmax pooling\u7684\u7ef4\u5ea6\n        :return:\n        \"\"\"", "\n", "masks", "=", "mask", ".", "view", "(", "mask", ".", "size", "(", "0", ")", ",", "mask", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "masks", "=", "masks", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "tensor", ".", "size", "(", "2", ")", ")", ".", "float", "(", ")", "\n", "return", "torch", ".", "max", "(", "tensor", "+", "masks", ".", "le", "(", "0.5", ")", ".", "float", "(", ")", "*", "-", "self", ".", "inf", ",", "dim", "=", "dim", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.pooling.KMaxPool.__init__": [[87, 90], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "k", "=", "1", ")", ":", "\n", "        ", "super", "(", "KMaxPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.pooling.KMaxPool.forward": [[91, 99], ["torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape.size", "torch.reshape.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.Tensor x: [N, C, L] \u521d\u59cbtensor\n        :return: torch.Tensor x: [N, C*k] k-max pool\u540e\u7684\u7ed3\u679c\n        \"\"\"", "\n", "x", ",", "index", "=", "torch", ".", "topk", "(", "x", ",", "self", ".", "k", ",", "dim", "=", "-", "1", ",", "sorted", "=", "False", ")", "\n", "x", "=", "torch", ".", "reshape", "(", "x", ",", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.pooling.AvgPool.__init__": [[106, 110], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "stride", "=", "None", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "AvgPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.pooling.AvgPool.forward": [[111, 124], ["nn.AvgPool1d.size", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d.", "nn.AvgPool1d.squeeze"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.Tensor x: [N, C, L] \u521d\u59cbtensor\n        :return: torch.Tensor x: [N, C] avg pool\u540e\u7684\u7ed3\u679c\n        \"\"\"", "\n", "# [N,C,L] -> [N,C]", "\n", "kernel_size", "=", "x", ".", "size", "(", "2", ")", "\n", "pooling", "=", "nn", ".", "AvgPool1d", "(", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ")", "\n", "x", "=", "pooling", "(", "x", ")", "\n", "return", "x", ".", "squeeze", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.pooling.AvgPoolWithMask.__init__": [[132, 135], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AvgPoolWithMask", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inf", "=", "10e12", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.pooling.AvgPoolWithMask.forward": [[136, 145], ["mask.view().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.view", "mask.view().float.float", "mask.size", "mask.size", "mask.view().float.float"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "forward", "(", "self", ",", "tensor", ",", "mask", ",", "dim", "=", "1", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.FloatTensor tensor: [batch_size, seq_len, channels] \u521d\u59cbtensor\n        :param torch.LongTensor mask: [batch_size, seq_len] 0/1\u7684mask\u77e9\u9635\n        :param int dim: \u9700\u8981\u8fdb\u884cmax pooling\u7684\u7ef4\u5ea6\n        :return:\n        \"\"\"", "\n", "masks", "=", "mask", ".", "view", "(", "mask", ".", "size", "(", "0", ")", ",", "mask", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "return", "torch", ".", "sum", "(", "tensor", "*", "masks", ".", "float", "(", ")", ",", "dim", "=", "dim", ")", "/", "torch", ".", "sum", "(", "masks", ".", "float", "(", ")", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.roberta.RobertaEmbeddings.__init__": [[34, 40], ["bert.BertEmbeddings.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "padding_idx", "=", "1", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "self", ".", "padding_idx", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "\n", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "self", ".", "padding_idx", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.roberta.RobertaEmbeddings.forward": [[42, 47], ["roberta.RobertaEmbeddings.create_position_ids_from_input_ids", "super().forward"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.roberta.RobertaEmbeddings.create_position_ids_from_input_ids", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", ",", "words_embeddings", "=", "None", ")", ":", "\n", "        ", "position_ids", "=", "self", ".", "create_position_ids_from_input_ids", "(", "input_ids", ")", "\n", "\n", "return", "super", "(", ")", ".", "forward", "(", "\n", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "position_ids", "=", "position_ids", ",", "words_embeddings", "=", "words_embeddings", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.roberta.RobertaEmbeddings.create_position_ids_from_input_ids": [[49, 60], ["x.ne().long", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "x.ne"], "methods", ["None"], ["", "def", "create_position_ids_from_input_ids", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Replace non-padding symbols with their position numbers. Position numbers begin at\n        padding_idx+1. Padding symbols are ignored. This is modified from fairseq's\n        `utils.make_positions`.\n\n        :param torch.Tensor x:\n        :return torch.Tensor:\n        \"\"\"", "\n", "mask", "=", "x", ".", "ne", "(", "self", ".", "padding_idx", ")", ".", "long", "(", ")", "\n", "incremental_indicies", "=", "torch", ".", "cumsum", "(", "mask", ",", "dim", "=", "1", ")", "*", "mask", "\n", "return", "incremental_indicies", "+", "self", ".", "padding_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.roberta.RobertaModel.__init__": [[67, 72], ["bert.BertModel.__init__", "roberta.RobertaEmbeddings", "roberta.RobertaModel.apply"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "embeddings", "=", "RobertaEmbeddings", "(", "config", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_bert_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.roberta.RobertaModel.from_pretrained": [[73, 181], ["kwargs.get", "kwargs.pop", "kwargs.pop", "kwargs.pop", "io.file_utils._get_roberta_dir", "fastNLP.io.file_utils._get_file_name_base_on_postfix", "bert.BertConfig.from_json_file", "cls", "torch.load.keys", "torch.load.keys", "zip", "getattr", "torch.load.copy", "torch.load.copy", "roberta.RobertaModel.from_pretrained.load"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_roberta_dir", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.gpt2.GPT2Config.from_json_file", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "model_dir_or_name", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "state_dict", "=", "kwargs", ".", "get", "(", "'state_dict'", ",", "None", ")", "\n", "kwargs", ".", "pop", "(", "'state_dict'", ",", "None", ")", "\n", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "kwargs", ".", "pop", "(", "'from_tf'", ",", "None", ")", "\n", "\n", "# get model dir from name or dir", "\n", "pretrained_model_dir", "=", "_get_roberta_dir", "(", "model_dir_or_name", ")", "\n", "\n", "# Load config", "\n", "config_file", "=", "_get_file_name_base_on_postfix", "(", "pretrained_model_dir", ",", "'config.json'", ")", "\n", "config", "=", "BertConfig", ".", "from_json_file", "(", "config_file", ")", "\n", "\n", "# Load model", "\n", "if", "state_dict", "is", "None", ":", "\n", "            ", "weights_path", "=", "_get_file_name_base_on_postfix", "(", "pretrained_model_dir", ",", "'.bin'", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "weights_path", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "error", "(", "f'Cannot load parameters through `state_dict` variable.'", ")", "\n", "raise", "RuntimeError", "(", "f'Cannot load parameters through `state_dict` variable.'", ")", "\n", "\n", "# Instantiate model.", "\n", "", "model", "=", "cls", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "\n", "# Convert old format to new format if needed from a PyTorch state_dict", "\n", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_key", "=", "None", "\n", "if", "\"gamma\"", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "\"gamma\"", ",", "\"weight\"", ")", "\n", "", "if", "\"beta\"", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "\"beta\"", ",", "\"bias\"", ")", "\n", "", "if", "new_key", ":", "\n", "                ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "            ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "", "metadata", "=", "getattr", "(", "state_dict", ",", "\"_metadata\"", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "# PyTorch's `_load_from_state_dict` does not copy parameters in a module's descendants", "\n", "# so we need to apply the function recursively.", "\n", "", "def", "load", "(", "module", ":", "nn", ".", "Module", ",", "prefix", "=", "\"\"", ")", ":", "\n", "            ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ",", "\n", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "child", "is", "not", "None", ":", "\n", "                    ", "load", "(", "child", ",", "prefix", "+", "name", "+", "\".\"", ")", "\n", "\n", "# Make sure we are able to load base models as well as derived models (with heads)", "\n", "", "", "", "start_prefix", "=", "\"\"", "\n", "model_to_load", "=", "model", "\n", "if", "not", "hasattr", "(", "model", ",", "'roberta'", ")", "and", "any", "(", "\n", "s", ".", "startswith", "(", "'roberta'", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", "\n", ")", ":", "\n", "            ", "start_prefix", "=", "'roberta.'", "\n", "", "if", "hasattr", "(", "model", ",", "'roberta'", ")", "and", "not", "any", "(", "\n", "s", ".", "startswith", "(", "'roberta'", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", "\n", ")", ":", "\n", "            ", "model_to_load", "=", "getattr", "(", "model", ",", "'roberta'", ")", "\n", "\n", "", "load", "(", "model_to_load", ",", "prefix", "=", "start_prefix", ")", "\n", "\n", "if", "model", ".", "__class__", ".", "__name__", "!=", "model_to_load", ".", "__class__", ".", "__name__", ":", "\n", "            ", "base_model_state_dict", "=", "model_to_load", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "\n", "head_model_state_dict_without_base_prefix", "=", "[", "\n", "key", ".", "split", "(", "'roberta.'", ")", "[", "-", "1", "]", "for", "key", "in", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "\n", "]", "\n", "\n", "missing_keys", ".", "extend", "(", "head_model_state_dict_without_base_prefix", "-", "base_model_state_dict", ")", "\n", "\n", "", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Weights of {} not initialized from pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "missing_keys", "\n", ")", "\n", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Weights from pretrained model not used in {}: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", "\n", ")", "\n", ")", "\n", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Error(s) in loading state_dict for {}:\\n\\t{}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "\"\\n\\t\"", ".", "join", "(", "error_msgs", ")", "\n", ")", "\n", ")", "\n", "\n", "# Set model in evaluation mode to desactivate DropOut modules by default", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "logger", ".", "info", "(", "f\"Load pre-trained RoBERTa parameters from file {weights_path}.\"", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.transformer.TransformerEncoder.__init__": [[16, 29], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.LayerNorm", "seq2seq_encoder.TransformerSeq2SeqEncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "num_layers", ",", "d_model", "=", "512", ",", "n_head", "=", "8", ",", "dim_ff", "=", "2048", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"\n\n        :param int num_layers: \u591a\u5c11\u5c42Transformer\n        :param int d_model: input\u548coutput\u7684\u5927\u5c0f\n        :param int n_head: \u591a\u5c11\u4e2ahead\n        :param int dim_ff: FFN\u4e2d\u95f4hidden\u5927\u5c0f\n        :param float dropout: \u591a\u5927\u6982\u7387drop attention\u548cffn\u4e2d\u95f4\u7684\u8868\u793a\n        \"\"\"", "\n", "super", "(", "TransformerEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "TransformerSeq2SeqEncoderLayer", "(", "d_model", "=", "d_model", ",", "n_head", "=", "n_head", ",", "dim_ff", "=", "dim_ff", ",", "\n", "dropout", "=", "dropout", ")", "for", "_", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.transformer.TransformerEncoder.forward": [[30, 43], ["transformer.TransformerEncoder.norm", "x.new_ones().bool", "layer", "x.new_ones", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "seq_mask", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param x: [batch, seq_len, model_size] \u8f93\u5165\u5e8f\u5217\n        :param seq_mask: [batch, seq_len] \u8f93\u5165\u5e8f\u5217\u7684padding mask, \u82e5\u4e3a ``None`` , \u751f\u6210\u51681\u5411\u91cf. \u4e3a1\u7684\u5730\u65b9\u9700\u8981attend\n            Default: ``None``\n        :return: [batch, seq_len, model_size] \u8f93\u51fa\u5e8f\u5217\n        \"\"\"", "\n", "output", "=", "x", "\n", "if", "seq_mask", "is", "None", ":", "\n", "            ", "seq_mask", "=", "x", ".", "new_ones", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", ".", "bool", "(", ")", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "output", "=", "layer", "(", "output", ",", "seq_mask", ")", "\n", "", "return", "self", ".", "norm", "(", "output", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.char_encoder.ConvolutionCharEncoder.__init__": [[20, 36], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "utils.initial_parameter", "torch.Conv2d", "torch.Conv2d", "range", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.utils.initial_parameter"], ["def", "__init__", "(", "self", ",", "char_emb_size", "=", "50", ",", "feature_maps", "=", "(", "40", ",", "30", ",", "30", ")", ",", "kernels", "=", "(", "1", ",", "3", ",", "5", ")", ",", "initial_method", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param int char_emb_size: char\u7ea7\u522bembedding\u7684\u7ef4\u5ea6. Default: 50\n            :\u4f8b: \u670926\u4e2a\u5b57\u7b26, \u6bcf\u4e00\u4e2a\u7684embedding\u662f\u4e00\u4e2a50\u7ef4\u7684\u5411\u91cf, \u6240\u4ee5\u8f93\u5165\u7684\u5411\u91cf\u7ef4\u5ea6\u4e3a50.\n        :param tuple feature_maps: \u4e00\u4e2a\u7531int\u7ec4\u6210\u7684tuple. tuple\u7684\u957f\u5ea6\u662fchar\u7ea7\u522b\u5377\u79ef\u64cd\u4f5c\u7684\u6570\u76ee, \u7b2c`i`\u4e2aint\u8868\u793a\u7b2c`i`\u4e2a\u5377\u79ef\u64cd\u4f5c\u7684filter.\n        :param tuple kernels: \u4e00\u4e2a\u7531int\u7ec4\u6210\u7684tuple. tuple\u7684\u957f\u5ea6\u662fchar\u7ea7\u522b\u5377\u79ef\u64cd\u4f5c\u7684\u6570\u76ee, \u7b2c`i`\u4e2aint\u8868\u793a\u7b2c`i`\u4e2a\u5377\u79ef\u64cd\u4f5c\u7684\u5377\u79ef\u6838.\n        :param initial_method: \u521d\u59cb\u5316\u53c2\u6570\u7684\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a`xavier normal`\n        \"\"\"", "\n", "super", "(", "ConvolutionCharEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Conv2d", "(", "1", ",", "feature_maps", "[", "i", "]", ",", "kernel_size", "=", "(", "char_emb_size", ",", "kernels", "[", "i", "]", ")", ",", "bias", "=", "True", ",", "\n", "padding", "=", "(", "0", ",", "kernels", "[", "i", "]", "//", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "kernels", ")", ")", "]", ")", "\n", "\n", "initial_parameter", "(", "self", ",", "initial_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.char_encoder.ConvolutionCharEncoder.forward": [[37, 47], ["x.transpose.transpose.contiguous().view", "x.transpose.transpose.transpose", "char_encoder.ConvolutionCharEncoder._convolute().unsqueeze", "x.transpose.transpose.size", "x.transpose.transpose.size", "x.transpose.transpose.size", "x.transpose.transpose.contiguous", "char_encoder.ConvolutionCharEncoder._convolute"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.char_encoder.ConvolutionCharEncoder._convolute"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.Tensor x: ``[batch_size * sent_length, word_length, char_emb_size]`` \u8f93\u5165\u5b57\u7b26\u7684embedding\n        :return: torch.Tensor : \u5377\u79ef\u8ba1\u7b97\u7684\u7ed3\u679c, \u7ef4\u5ea6\u4e3a[batch_size * sent_length, sum(feature_maps), 1]\n        \"\"\"", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "# [batch_size*sent_length, channel, width, height]", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "3", ")", "\n", "# [batch_size*sent_length, channel, height, width]", "\n", "return", "self", ".", "_convolute", "(", "x", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.char_encoder.ConvolutionCharEncoder._convolute": [[48, 60], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.max", "torch.max", "torch.max", "torch.max", "feats.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_convolute", "(", "self", ",", "x", ")", ":", "\n", "        ", "feats", "=", "[", "]", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "y", "=", "conv", "(", "x", ")", "\n", "# [batch_size*sent_length, feature_maps[i], 1, width - kernels[i] + 1]", "\n", "y", "=", "torch", ".", "squeeze", "(", "y", ",", "2", ")", "\n", "# [batch_size*sent_length, feature_maps[i], width - kernels[i] + 1]", "\n", "y", "=", "torch", ".", "tanh", "(", "y", ")", "\n", "y", ",", "__", "=", "torch", ".", "max", "(", "y", ",", "2", ")", "\n", "# [batch_size*sent_length, feature_maps[i]]", "\n", "feats", ".", "append", "(", "y", ")", "\n", "", "return", "torch", ".", "cat", "(", "feats", ",", "1", ")", "# [batch_size*sent_length, sum(feature_maps)]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.char_encoder.LSTMCharEncoder.__init__": [[67, 83], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "utils.initial_parameter"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.utils.initial_parameter"], ["def", "__init__", "(", "self", ",", "char_emb_size", "=", "50", ",", "hidden_size", "=", "None", ",", "initial_method", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param int char_emb_size: char\u7ea7\u522bembedding\u7684\u7ef4\u5ea6. Default: 50\n                \u4f8b: \u670926\u4e2a\u5b57\u7b26, \u6bcf\u4e00\u4e2a\u7684embedding\u662f\u4e00\u4e2a50\u7ef4\u7684\u5411\u91cf, \u6240\u4ee5\u8f93\u5165\u7684\u5411\u91cf\u7ef4\u5ea6\u4e3a50.\n        :param int hidden_size: LSTM\u9690\u5c42\u7684\u5927\u5c0f, \u9ed8\u8ba4\u4e3achar\u7684embedding\u7ef4\u5ea6\n        :param initial_method: \u521d\u59cb\u5316\u53c2\u6570\u7684\u65b9\u5f0f, \u9ed8\u8ba4\u4e3a`xavier normal`\n        \"\"\"", "\n", "super", "(", "LSTMCharEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "char_emb_size", "if", "hidden_size", "is", "None", "else", "hidden_size", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "char_emb_size", ",", "\n", "hidden_size", "=", "self", ".", "hidden_size", ",", "\n", "num_layers", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "batch_first", "=", "True", ")", "\n", "initial_parameter", "(", "self", ",", "initial_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.encoder.char_encoder.LSTMCharEncoder.forward": [[84, 97], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.init.orthogonal_", "torch.init.orthogonal_", "char_encoder.LSTMCharEncoder.lstm", "hidden[].squeeze().unsqueeze", "hidden[].squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.Tensor x: ``[ n_batch*n_word, word_length, char_emb_size]`` \u8f93\u5165\u5b57\u7b26\u7684embedding\n        :return: torch.Tensor : [ n_batch*n_word, char_emb_size]\u7ecf\u8fc7LSTM\u7f16\u7801\u7684\u7ed3\u679c\n        \"\"\"", "\n", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "h0", "=", "torch", ".", "empty", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "h0", "=", "nn", ".", "init", ".", "orthogonal_", "(", "h0", ")", "\n", "c0", "=", "torch", ".", "empty", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "c0", "=", "nn", ".", "init", ".", "orthogonal_", "(", "c0", ")", "\n", "\n", "_", ",", "hidden", "=", "self", ".", "lstm", "(", "x", ",", "(", "h0", ",", "c0", ")", ")", "\n", "return", "hidden", "[", "0", "]", ".", "squeeze", "(", ")", ".", "unsqueeze", "(", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.__init__": [[20, 22], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.forward": [[23, 31], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tokens", ",", "state", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        :param torch.LongTensor tokens: bsz x max_len\n        :param State state: state\u5305\u542b\u4e86encoder\u7684\u8f93\u51fa\u4ee5\u53cadecode\u4e4b\u524d\u7684\u5185\u5bb9\n        :return: \u8fd4\u56de\u503c\u53ef\u4ee5\u4e3absz x max_len x vocab_size\u7684Tensor\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2alist\uff0c\u4f46\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u5fc5\u987b\u662f\u8bcd\u7684\u9884\u6d4b\u5206\u5e03\n        \"\"\"", "\n", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.reorder_states": [[32, 42], ["isinstance", "states.reorder_state", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.TransformerState.reorder_state"], ["", "def", "reorder_states", "(", "self", ",", "indices", ",", "states", ")", ":", "\n", "        ", "\"\"\"\n        \u6839\u636eindices\u91cd\u65b0\u6392\u5217states\u4e2d\u7684\u72b6\u6001\uff0c\u5728beam search\u8fdb\u884c\u751f\u6210\u65f6\uff0c\u4f1a\u7528\u5230\u8be5\u51fd\u6570\u3002\n\n        :param torch.LongTensor indices:\n        :param State states:\n        :return:\n        \"\"\"", "\n", "assert", "isinstance", "(", "states", ",", "State", ")", ",", "f\"`states` should be of type State instead of {type(states)}\"", "\n", "states", ".", "reorder_state", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.init_state": [[43, 56], ["seq2seq_state.State"], "methods", ["None"], ["", "def", "init_state", "(", "self", ",", "encoder_output", ",", "encoder_mask", ")", ":", "\n", "        ", "\"\"\"\n        \u521d\u59cb\u5316\u4e00\u4e2astate\u5bf9\u8c61\uff0c\u7528\u6765\u8bb0\u5f55\u4e86encoder\u7684\u8f93\u51fa\u4ee5\u53cadecode\u5df2\u7ecf\u5b8c\u6210\u7684\u90e8\u5206\u3002\n\n        :param Union[torch.Tensor, list, tuple] encoder_output: \u5982\u679c\u4e0d\u4e3aNone\uff0c\u5185\u90e8\u5143\u7d20\u9700\u8981\u4e3atorch.Tensor, \u9ed8\u8ba4\u5176\u4e2d\u7b2c\u4e00\u7ef4\u662fbatch\n            \u7ef4\u5ea6\n        :param Union[torch.Tensor, list, tuple] encoder_mask: \u5982\u679c\u90e8\u4f4dNone\uff0c\u5185\u90e8\u5143\u7d20\u9700\u8981torch.Tensor, \u9ed8\u8ba4\u5176\u4e2d\u7b2c\u4e00\u7ef4\u662fbatch\n            \u7ef4\u5ea6\n        :param kwargs:\n        :return: State, \u8fd4\u56de\u4e00\u4e2aState\u5bf9\u8c61\uff0c\u8bb0\u5f55\u4e86encoder\u7684\u8f93\u51fa\n        \"\"\"", "\n", "state", "=", "State", "(", "encoder_output", ",", "encoder_mask", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode": [[57, 70], ["seq2seq_decoder.Seq2SeqDecoder.", "isinstance", "RuntimeError"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "tokens", ",", "state", ")", ":", "\n", "        ", "\"\"\"\n        \u6839\u636estates\u4e2d\u7684\u5185\u5bb9\uff0c\u4ee5\u53catokens\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u4e4b\u540e\u7684\u751f\u6210\u3002\n\n        :param torch.LongTensor tokens: bsz x max_len, \u4e0a\u4e00\u4e2a\u65f6\u523b\u7684token\u8f93\u51fa\u3002\n        :param State state: \u8bb0\u5f55\u4e86encoder\u8f93\u51fa\u4e0edecoder\u8fc7\u53bb\u72b6\u6001\n        :return: torch.FloatTensor: bsz x vocab_size, \u8f93\u51fa\u7684\u662f\u4e0b\u4e00\u4e2a\u65f6\u523b\u7684\u5206\u5e03\n        \"\"\"", "\n", "outputs", "=", "self", "(", "state", "=", "state", ",", "tokens", "=", "tokens", ")", "\n", "if", "isinstance", "(", "outputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "outputs", "[", ":", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Unrecognized output from the `forward()` function. Please override the `decode()` function.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.TiedEmbedding.__init__": [[77, 80], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "weight", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "# vocab_size x embed_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.TiedEmbedding.forward": [[81, 88], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "seq2seq_decoder.TiedEmbedding.weight.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n\n        :param torch.FloatTensor x: bsz x * x embed_size\n        :return: torch.FloatTensor bsz x * x vocab_size\n        \"\"\"", "\n", "return", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ".", "t", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.LSTMSeq2SeqDecoder.__init__": [[109, 140], ["seq2seq_decoder.Seq2SeqDecoder.__init__", "embeddings.utils.get_embeddings", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "seq2seq_decoder.get_binded_decoder_output_embed", "embeddings.utils.get_embeddings", "seq2seq_decoder.TiedEmbedding", "attention.AttentionLayer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.get_binded_decoder_output_embed", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings"], ["    ", "def", "__init__", "(", "self", ",", "embed", ":", "Union", "[", "nn", ".", "Module", ",", "StaticEmbedding", ",", "Tuple", "[", "int", ",", "int", "]", "]", ",", "num_layers", "=", "3", ",", "hidden_size", "=", "300", ",", "\n", "dropout", "=", "0.3", ",", "bind_decoder_input_output_embed", "=", "True", ",", "attention", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        LSTM\u7684Decoder\n\n        :param nn.Module,tuple embed: decoder\u8f93\u5165\u7684embedding.\n        :param int num_layers: \u591a\u5c11\u5c42LSTM\n        :param int hidden_size: \u9690\u85cf\u5c42\u5927\u5c0f, \u8be5\u503c\u4e5f\u88ab\u8ba4\u4e3a\u662fencoder\u7684\u8f93\u51fa\u7ef4\u5ea6\u5927\u5c0f\n        :param dropout: Dropout\u7684\u5927\u5c0f\n        :param bool bind_decoder_input_output_embed: \u662f\u5426\u5c06\u8f93\u51fa\u5c42\u548c\u8f93\u5165\u5c42\u7684\u8bcd\u5411\u91cf\u7ed1\u5b9a\u5728\u4e00\u8d77\uff08\u5373\u4e3a\u540c\u4e00\u4e2a\uff09\uff0c\u82e5embed\u4e3aStaticEmbedding\uff0c\n            \u5219StaticEmbedding\u7684vocab\u4e0d\u80fd\u5305\u542bno_create_entry\u7684token\uff0c\u540c\u65f6StaticEmbedding\u521d\u59cb\u5316\u65f6lower\u4e3aFalse, min_freq=1.\n        :param bool attention: \u662f\u5426\u4f7f\u7528attention\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "get_embeddings", "(", "init_embed", "=", "embed", ")", "\n", "self", ".", "embed_dim", "=", "embed", ".", "embedding_dim", "\n", "\n", "if", "bind_decoder_input_output_embed", ":", "\n", "            ", "self", ".", "output_layer", "=", "get_binded_decoder_output_embed", "(", "self", ".", "embed", ")", "\n", "", "else", ":", "# \u4e0d\u9700\u8981bind", "\n", "            ", "self", ".", "output_embed", "=", "get_embeddings", "(", "(", "self", ".", "embed", ".", "num_embeddings", ",", "self", ".", "embed", ".", "embedding_dim", ")", ")", "\n", "self", ".", "output_layer", "=", "TiedEmbedding", "(", "self", ".", "output_embed", ".", "weight", ")", "\n", "\n", "", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "self", ".", "embed_dim", "+", "hidden_size", ",", "hidden_size", "=", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "\n", "batch_first", "=", "True", ",", "bidirectional", "=", "False", ",", "dropout", "=", "dropout", "if", "num_layers", ">", "1", "else", "0", ")", "\n", "\n", "self", ".", "attention_layer", "=", "AttentionLayer", "(", "hidden_size", ",", "hidden_size", ",", "hidden_size", ")", "if", "attention", "else", "None", "\n", "self", ".", "output_proj", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.LSTMSeq2SeqDecoder.forward": [[141, 195], ["seq2seq_decoder.LSTMSeq2SeqDecoder.embed", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "seq2seq_decoder.LSTMSeq2SeqDecoder.dropout_layer", "seq2seq_decoder.LSTMSeq2SeqDecoder.output_proj", "seq2seq_decoder.LSTMSeq2SeqDecoder.output_layer", "tokens.size", "tokens.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq2seq_decoder.LSTMSeq2SeqDecoder.lstm", "seq2seq_decoder.LSTMSeq2SeqDecoder.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seq2seq_decoder.LSTMSeq2SeqDecoder.attention_layer", "torch.cat.append", "torch.cat.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "forward", "(", "self", ",", "tokens", ",", "state", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param torch.LongTensor tokens: batch x max_len\n        :param LSTMState state: \u4fdd\u5b58encoder\u8f93\u51fa\u548cdecode\u72b6\u6001\u7684State\u5bf9\u8c61\n        :param bool return_attention: \u662f\u5426\u8fd4\u56deattention\u7684\u7684score\n        :return: bsz x max_len x vocab_size; \u5982\u679creturn_attention=True, \u8fd8\u4f1a\u8fd4\u56debsz x max_len x encode_length\n        \"\"\"", "\n", "src_output", "=", "state", ".", "encoder_output", "\n", "encoder_mask", "=", "state", ".", "encoder_mask", "\n", "\n", "assert", "tokens", ".", "size", "(", "1", ")", ">", "state", ".", "decode_length", ",", "\"The state does not match the tokens.\"", "\n", "tokens", "=", "tokens", "[", ":", ",", "state", ".", "decode_length", ":", "]", "\n", "x", "=", "self", ".", "embed", "(", "tokens", ")", "\n", "\n", "attn_weights", "=", "[", "]", "if", "self", ".", "attention_layer", "is", "not", "None", "else", "None", "# \u4fdd\u5b58attention weight, batch,tgt_seq,src_seq", "\n", "input_feed", "=", "state", ".", "input_feed", "\n", "decoder_out", "=", "[", "]", "\n", "\n", "cur_hidden", "=", "state", ".", "hidden", "\n", "cur_cell", "=", "state", ".", "cell", "\n", "\n", "# \u5f00\u59cb\u8ba1\u7b97", "\n", "for", "i", "in", "range", "(", "tokens", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "input", "=", "torch", ".", "cat", "(", "\n", "(", "x", "[", ":", ",", "i", ":", "i", "+", "1", ",", ":", "]", ",", "\n", "input_feed", "[", ":", ",", "None", ",", ":", "]", "\n", ")", ",", "\n", "dim", "=", "2", "\n", ")", "# batch,1,2*dim", "\n", "_", ",", "(", "cur_hidden", ",", "cur_cell", ")", "=", "self", ".", "lstm", "(", "input", ",", "hx", "=", "(", "cur_hidden", ",", "cur_cell", ")", ")", "# hidden/cell\u4fdd\u6301\u539f\u6765\u7684size", "\n", "if", "self", ".", "attention_layer", "is", "not", "None", ":", "\n", "                ", "input_feed", ",", "attn_weight", "=", "self", ".", "attention_layer", "(", "cur_hidden", "[", "-", "1", "]", ",", "src_output", ",", "encoder_mask", ")", "\n", "attn_weights", ".", "append", "(", "attn_weight", ")", "\n", "", "else", ":", "\n", "                ", "input_feed", "=", "cur_hidden", "[", "-", "1", "]", "\n", "\n", "", "state", ".", "input_feed", "=", "input_feed", "# batch, hidden", "\n", "state", ".", "hidden", "=", "cur_hidden", "\n", "state", ".", "cell", "=", "cur_cell", "\n", "state", ".", "decode_length", "+=", "1", "\n", "decoder_out", ".", "append", "(", "input_feed", ")", "\n", "\n", "", "decoder_out", "=", "torch", ".", "stack", "(", "decoder_out", ",", "dim", "=", "1", ")", "# batch,seq_len,hidden", "\n", "decoder_out", "=", "self", ".", "dropout_layer", "(", "decoder_out", ")", "\n", "if", "attn_weights", "is", "not", "None", ":", "\n", "            ", "attn_weights", "=", "torch", ".", "cat", "(", "attn_weights", ",", "dim", "=", "1", ")", "# batch, tgt_len, src_len", "\n", "\n", "", "decoder_out", "=", "self", ".", "output_proj", "(", "decoder_out", ")", "\n", "feats", "=", "self", ".", "output_layer", "(", "decoder_out", ")", "\n", "\n", "if", "return_attention", ":", "\n", "            ", "return", "feats", ",", "attn_weights", "\n", "", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.LSTMSeq2SeqDecoder.init_state": [[196, 229], ["range", "seq2seq_state.LSTMState", "isinstance", "encoder_mask.size", "encoder_output.size", "encoder_output.size", "encoder_output.new_zeros", "v[].repeat", "encoder_output.size", "v[].repeat.dim", "v[].repeat.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "init_state", "(", "self", ",", "encoder_output", ",", "encoder_mask", ")", "->", "LSTMState", ":", "\n", "        ", "\"\"\"\n\n        :param encoder_output: \u8f93\u5165\u53ef\u4ee5\u6709\u4e24\u79cd\u60c5\u51b5(1) \u8f93\u5165\u4e3a\u4e00\u4e2atuple\uff0c\u5305\u542b\u4e09\u4e2a\u5185\u5bb9(encoder_output, (hidden, cell))\uff0c\u5176\u4e2dencoder_output:\n            bsz x max_len x hidden_size, hidden: bsz x hidden_size, cell:bsz x hidden_size,\u4e00\u822c\u4f7f\u7528LSTMEncoder\u7684\u6700\u540e\u4e00\u5c42\u7684\n            hidden state\u548ccell state\u6765\u8d4b\u503c\u8fd9\u4e24\u4e2a\u503c\n            (2) \u53ea\u6709encoder_output: bsz x max_len x hidden_size, \u8fd9\u79cd\u60c5\u51b5\u4e0bhidden\u548ccell\u4f7f\u75280\u521d\u59cb\u5316\n        :param torch.ByteTensor encoder_mask: bsz x max_len, \u4e3a0\u7684\u4f4d\u7f6e\u662fpadding, \u7528\u6765\u6307\u793asource\u4e2d\u54ea\u4e9b\u4e0d\u9700\u8981attend\n        :return:\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "encoder_output", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "encoder_output", ",", "(", "hidden", ",", "cell", ")", "=", "encoder_output", "\n", "", "else", ":", "\n", "            ", "hidden", "=", "cell", "=", "None", "\n", "", "assert", "encoder_output", ".", "ndim", "==", "3", "\n", "assert", "encoder_mask", ".", "size", "(", ")", "==", "encoder_output", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "assert", "encoder_output", ".", "size", "(", "-", "1", ")", "==", "self", ".", "hidden_size", ",", "\"The dimension of encoder outputs should be the same with \"", "\"the hidden_size.\"", "\n", "\n", "t", "=", "[", "hidden", ",", "cell", "]", "\n", "for", "idx", "in", "range", "(", "2", ")", ":", "\n", "            ", "v", "=", "t", "[", "idx", "]", "\n", "if", "v", "is", "None", ":", "\n", "                ", "v", "=", "encoder_output", ".", "new_zeros", "(", "self", ".", "num_layers", ",", "encoder_output", ".", "size", "(", "0", ")", ",", "self", ".", "hidden_size", ")", "\n", "", "else", ":", "\n", "                ", "assert", "v", ".", "dim", "(", ")", "==", "2", "\n", "assert", "v", ".", "size", "(", "-", "1", ")", "==", "self", ".", "hidden_size", "\n", "v", "=", "v", "[", "None", "]", ".", "repeat", "(", "self", ".", "num_layers", ",", "1", ",", "1", ")", "# num_layers x bsz x hidden_size", "\n", "", "t", "[", "idx", "]", "=", "v", "\n", "\n", "", "state", "=", "LSTMState", "(", "encoder_output", ",", "encoder_mask", ",", "t", "[", "0", "]", ",", "t", "[", "1", "]", ")", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.TransformerSeq2SeqDecoderLayer.__init__": [[232, 261], ["torch.nn.Module.__init__", "attention.MultiHeadAttention", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "attention.MultiHeadAttention", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", "=", "512", ",", "n_head", "=", "8", ",", "dim_ff", "=", "2048", ",", "dropout", "=", "0.1", ",", "layer_idx", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :param int d_model: \u8f93\u5165\u3001\u8f93\u51fa\u7684\u7ef4\u5ea6\n        :param int n_head: \u591a\u5c11\u4e2ahead\uff0c\u9700\u8981\u80fd\u88abd_model\u6574\u9664\n        :param int dim_ff:\n        :param float dropout:\n        :param int layer_idx: layer\u7684\u7f16\u53f7\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "dim_ff", "=", "dim_ff", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "layer_idx", "=", "layer_idx", "# \u8bb0\u5f55layer\u7684\u5c42\u7d22\u5f15\uff0c\u4ee5\u65b9\u4fbf\u83b7\u53d6state\u7684\u4fe1\u606f", "\n", "\n", "self", ".", "self_attn", "=", "MultiHeadAttention", "(", "d_model", ",", "n_head", ",", "dropout", ",", "layer_idx", ")", "\n", "self", ".", "self_attn_layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "encoder_attn", "=", "MultiHeadAttention", "(", "d_model", ",", "n_head", ",", "dropout", ",", "layer_idx", ")", "\n", "self", ".", "encoder_attn_layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "ffn", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "dim_ff", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "dim_ff", ",", "self", ".", "d_model", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "self", ".", "final_layer_norm", "=", "nn", ".", "LayerNorm", "(", "self", ".", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.TransformerSeq2SeqDecoderLayer.forward": [[262, 303], ["seq2seq_decoder.TransformerSeq2SeqDecoderLayer.self_attn_layer_norm", "seq2seq_decoder.TransformerSeq2SeqDecoderLayer.self_attn", "torch.dropout", "torch.dropout", "seq2seq_decoder.TransformerSeq2SeqDecoderLayer.encoder_attn_layer_norm", "seq2seq_decoder.TransformerSeq2SeqDecoderLayer.encoder_attn", "torch.dropout", "torch.dropout", "seq2seq_decoder.TransformerSeq2SeqDecoderLayer.final_layer_norm", "seq2seq_decoder.TransformerSeq2SeqDecoderLayer.ffn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["", "def", "forward", "(", "self", ",", "x", ",", "encoder_output", ",", "encoder_mask", "=", "None", ",", "self_attn_mask", "=", "None", ",", "state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :param x: (batch, seq_len, dim), decoder\u7aef\u7684\u8f93\u5165\n        :param encoder_output: (batch,src_seq_len,dim), encoder\u7684\u8f93\u51fa\n        :param encoder_mask: batch,src_seq_len, \u4e3a1\u7684\u5730\u65b9\u9700\u8981attend\n        :param self_attn_mask: seq_len, seq_len\uff0c\u4e0b\u4e09\u89d2\u7684mask\u77e9\u9635\uff0c\u53ea\u5728\u8bad\u7ec3\u65f6\u4f20\u5165\n        :param TransformerState state: \u53ea\u5728inference\u9636\u6bb5\u4f20\u5165\n        :return:\n        \"\"\"", "\n", "\n", "# self attention part", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "self_attn_layer_norm", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "self_attn", "(", "query", "=", "x", ",", "\n", "key", "=", "x", ",", "\n", "value", "=", "x", ",", "\n", "attn_mask", "=", "self_attn_mask", ",", "\n", "state", "=", "state", ")", "\n", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "\n", "# encoder attention part", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "encoder_attn_layer_norm", "(", "x", ")", "\n", "x", ",", "attn_weight", "=", "self", ".", "encoder_attn", "(", "query", "=", "x", ",", "\n", "key", "=", "encoder_output", ",", "\n", "value", "=", "encoder_output", ",", "\n", "key_mask", "=", "encoder_mask", ",", "\n", "state", "=", "state", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "\n", "# ffn", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "final_layer_norm", "(", "x", ")", "\n", "x", "=", "self", ".", "ffn", "(", "x", ")", "\n", "x", "=", "residual", "+", "x", "\n", "\n", "return", "x", ",", "attn_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.TransformerSeq2SeqDecoder.__init__": [[306, 345], ["seq2seq_decoder.Seq2SeqDecoder.__init__", "embeddings.utils.get_embeddings", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "math.sqrt", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "seq2seq_decoder.get_binded_decoder_output_embed", "embeddings.utils.get_embeddings", "seq2seq_decoder.TiedEmbedding", "seq2seq_decoder.TransformerSeq2SeqDecoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.get_binded_decoder_output_embed", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings"], ["    ", "def", "__init__", "(", "self", ",", "embed", ":", "Union", "[", "nn", ".", "Module", ",", "StaticEmbedding", ",", "Tuple", "[", "int", ",", "int", "]", "]", ",", "pos_embed", ":", "nn", ".", "Module", "=", "None", ",", "\n", "d_model", "=", "512", ",", "num_layers", "=", "6", ",", "n_head", "=", "8", ",", "dim_ff", "=", "2048", ",", "dropout", "=", "0.1", ",", "\n", "bind_decoder_input_output_embed", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n\n        :param embed: \u8f93\u5165token\u7684embedding\n        :param nn.Module pos_embed: \u4f4d\u7f6eembedding\n        :param int d_model: \u8f93\u51fa\u3001\u8f93\u51fa\u7684\u5927\u5c0f\n        :param int num_layers: \u591a\u5c11\u5c42\n        :param int n_head: \u591a\u5c11\u4e2ahead\n        :param int dim_ff: FFN \u7684\u4e2d\u95f4\u5927\u5c0f\n        :param float dropout: Self-Attention\u548cFFN\u4e2d\u7684dropout\u7684\u5927\u5c0f\n        :param bool bind_decoder_input_output_embed: \u662f\u5426\u5c06\u8f93\u51fa\u5c42\u548c\u8f93\u5165\u5c42\u7684\u8bcd\u5411\u91cf\u7ed1\u5b9a\u5728\u4e00\u8d77\uff08\u5373\u4e3a\u540c\u4e00\u4e2a\uff09\uff0c\u82e5embed\u4e3aStaticEmbedding\uff0c\n            \u5219StaticEmbedding\u7684vocab\u4e0d\u80fd\u5305\u542bno_create_entry\u7684token\uff0c\u540c\u65f6StaticEmbedding\u521d\u59cb\u5316\u65f6lower\u4e3aFalse, min_freq=1.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed", "=", "get_embeddings", "(", "embed", ")", "\n", "self", ".", "pos_embed", "=", "pos_embed", "\n", "\n", "if", "bind_decoder_input_output_embed", ":", "\n", "            ", "self", ".", "output_layer", "=", "get_binded_decoder_output_embed", "(", "self", ".", "embed", ")", "\n", "", "else", ":", "# \u4e0d\u9700\u8981bind", "\n", "            ", "self", ".", "output_embed", "=", "get_embeddings", "(", "(", "self", ".", "embed", ".", "num_embeddings", ",", "self", ".", "embed", ".", "embedding_dim", ")", ")", "\n", "self", ".", "output_layer", "=", "TiedEmbedding", "(", "self", ".", "output_embed", ".", "weight", ")", "\n", "\n", "", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "dim_ff", "=", "dim_ff", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "input_fc", "=", "nn", ".", "Linear", "(", "self", ".", "embed", ".", "embedding_dim", ",", "d_model", ")", "\n", "self", ".", "layer_stacks", "=", "nn", ".", "ModuleList", "(", "[", "TransformerSeq2SeqDecoderLayer", "(", "d_model", ",", "n_head", ",", "dim_ff", ",", "dropout", ",", "layer_idx", ")", "\n", "for", "layer_idx", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "\n", "self", ".", "embed_scale", "=", "math", ".", "sqrt", "(", "d_model", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "output_fc", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "embed", ".", "embedding_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.TransformerSeq2SeqDecoder.forward": [[346, 390], ["seq2seq_decoder.TransformerSeq2SeqDecoder.input_fc", "torch.dropout", "torch.dropout", "tokens.size", "seq2seq_decoder.TransformerSeq2SeqDecoder.layer_norm", "seq2seq_decoder.TransformerSeq2SeqDecoder.output_fc", "seq2seq_decoder.TransformerSeq2SeqDecoder.output_layer", "tokens.size", "seq2seq_decoder.TransformerSeq2SeqDecoder.embed", "seq2seq_decoder.TransformerSeq2SeqDecoder.pos_embed", "seq2seq_decoder.TransformerSeq2SeqDecoder._get_triangle_mask", "layer", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long().to", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "tokens.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.TransformerSeq2SeqDecoder._get_triangle_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "tokens", ",", "state", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param torch.LongTensor tokens: batch x tgt_len\uff0cdecode\u7684\u8bcd\n        :param TransformerState state: \u7528\u4e8e\u8bb0\u5f55encoder\u7684\u8f93\u51fa\u4ee5\u53cadecode\u72b6\u6001\u7684\u5bf9\u8c61\uff0c\u53ef\u4ee5\u901a\u8fc7init_state()\u83b7\u53d6\n        :param bool return_attention: \u662f\u5426\u8fd4\u56de\u5bf9encoder\u7ed3\u679c\u7684attention score\n        :return: bsz x max_len x vocab_size; \u5982\u679creturn_attention=True, \u8fd8\u4f1a\u8fd4\u56debsz x max_len x encode_length\n        \"\"\"", "\n", "\n", "encoder_output", "=", "state", ".", "encoder_output", "\n", "encoder_mask", "=", "state", ".", "encoder_mask", "\n", "\n", "assert", "state", ".", "decode_length", "<", "tokens", ".", "size", "(", "1", ")", ",", "\"The decoded tokens in State should be less than tokens.\"", "\n", "tokens", "=", "tokens", "[", ":", ",", "state", ".", "decode_length", ":", "]", "\n", "device", "=", "tokens", ".", "device", "\n", "\n", "x", "=", "self", ".", "embed_scale", "*", "self", ".", "embed", "(", "tokens", ")", "\n", "if", "self", ".", "pos_embed", "is", "not", "None", ":", "\n", "            ", "position", "=", "torch", ".", "arange", "(", "state", ".", "decode_length", ",", "state", ".", "decode_length", "+", "tokens", ".", "size", "(", "1", ")", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "[", "None", "]", "\n", "x", "+=", "self", ".", "pos_embed", "(", "position", ")", "\n", "", "x", "=", "self", ".", "input_fc", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "batch_size", ",", "max_tgt_len", "=", "tokens", ".", "size", "(", ")", "\n", "\n", "if", "max_tgt_len", ">", "1", ":", "\n", "            ", "triangle_mask", "=", "self", ".", "_get_triangle_mask", "(", "tokens", ")", "\n", "", "else", ":", "\n", "            ", "triangle_mask", "=", "None", "\n", "\n", "", "for", "layer", "in", "self", ".", "layer_stacks", ":", "\n", "            ", "x", ",", "attn_weight", "=", "layer", "(", "x", "=", "x", ",", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_mask", "=", "encoder_mask", ",", "\n", "self_attn_mask", "=", "triangle_mask", ",", "\n", "state", "=", "state", "\n", ")", "\n", "\n", "", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "# batch, tgt_len, dim", "\n", "x", "=", "self", ".", "output_fc", "(", "x", ")", "\n", "feats", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "\n", "if", "return_attention", ":", "\n", "            ", "return", "feats", ",", "attn_weight", "\n", "", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.TransformerSeq2SeqDecoder.init_state": [[391, 407], ["isinstance", "seq2seq_state.TransformerState", "isinstance", "TypeError"], "methods", ["None"], ["", "def", "init_state", "(", "self", ",", "encoder_output", ",", "encoder_mask", ")", ":", "\n", "        ", "\"\"\"\n        \u521d\u59cb\u5316\u4e00\u4e2aTransformerState\u7528\u4e8eforward\n\n        :param torch.FloatTensor encoder_output: bsz x max_len x d_model, encoder\u7684\u8f93\u51fa\n        :param torch.ByteTensor encoder_mask: bsz x max_len, \u4e3a1\u7684\u4f4d\u7f6e\u9700\u8981attend\u3002\n        :return: TransformerState\n        \"\"\"", "\n", "if", "isinstance", "(", "encoder_output", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "encoder_output", "=", "encoder_output", "\n", "", "elif", "isinstance", "(", "encoder_output", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "encoder_output", "=", "encoder_output", "[", "0", "]", "# \u9632\u6b62\u662fLSTMEncoder\u7684\u8f93\u51fa\u7ed3\u679c", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Unsupported `encoder_output` for TransformerSeq2SeqDecoder\"", ")", "\n", "", "state", "=", "TransformerState", "(", "encoder_output", ",", "encoder_mask", ",", "num_decoder_layer", "=", "self", ".", "num_layers", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.TransformerSeq2SeqDecoder._get_triangle_mask": [[408, 412], ["tokens.new_ones", "torch.tril().byte", "torch.tril().byte", "torch.tril().byte", "torch.tril().byte", "tokens.size", "tokens.size", "torch.tril", "torch.tril", "torch.tril", "torch.tril"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "@", "staticmethod", "\n", "def", "_get_triangle_mask", "(", "tokens", ")", ":", "\n", "        ", "tensor", "=", "tokens", ".", "new_ones", "(", "tokens", ".", "size", "(", "1", ")", ",", "tokens", ".", "size", "(", "1", ")", ")", "\n", "return", "torch", ".", "tril", "(", "tensor", ")", ".", "byte", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.get_binded_decoder_output_embed": [[90, 106], ["isinstance", "seq2seq_decoder.TiedEmbedding", "enumerate", "isinstance", "TypeError"], "function", ["None"], ["", "", "def", "get_binded_decoder_output_embed", "(", "embed", ")", ":", "\n", "    ", "\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2aembedding\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u7ed1\u5b9a\u7684embedding\uff0c\u8f93\u51fa\u5bf9\u8c61\u4e3aTiedEmbedding\n\n    :param embed:\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "embed", ",", "StaticEmbedding", ")", ":", "\n", "        ", "for", "idx", ",", "map2idx", "in", "enumerate", "(", "embed", ".", "words_to_words", ")", ":", "\n", "            ", "assert", "idx", "==", "map2idx", ",", "\"Invalid StaticEmbedding for Decoder, please check:(1) whether the vocabulary \"", "\"include `no_create_entry=True` word; (2) StaticEmbedding should  not initialize with \"", "\"`lower=True` or `min_freq!=1`.\"", "\n", "", "", "elif", "not", "isinstance", "(", "embed", ",", "nn", ".", "Embedding", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Only nn.Embedding or StaticEmbedding is allowed for binding.\"", ")", "\n", "\n", "", "return", "TiedEmbedding", "(", "embed", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.crf.ConditionalRandomField.__init__": [[175, 206], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "utils.initial_parameter", "torch.randn", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.full", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.utils.initial_parameter"], ["def", "__init__", "(", "self", ",", "num_tags", ",", "include_start_end_trans", "=", "False", ",", "allowed_transitions", "=", "None", ",", "\n", "initial_method", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param int num_tags: \u6807\u7b7e\u7684\u6570\u91cf\n        :param bool include_start_end_trans: \u662f\u5426\u8003\u8651\u5404\u4e2atag\u4f5c\u4e3a\u5f00\u59cb\u4ee5\u53ca\u7ed3\u5c3e\u7684\u5206\u6570\u3002\n        :param List[Tuple[from_tag_id(int), to_tag_id(int)]] allowed_transitions: \u5185\u90e8\u7684Tuple[from_tag_id(int),\n                                   to_tag_id(int)]\u89c6\u4e3a\u5141\u8bb8\u53d1\u751f\u7684\u8dc3\u8fc1\uff0c\u5176\u4ed6\u6ca1\u6709\u5305\u542b\u7684\u8dc3\u8fc1\u8ba4\u4e3a\u662f\u7981\u6b62\u8dc3\u8fc1\uff0c\u53ef\u4ee5\u901a\u8fc7\n                                   allowed_transitions()\u51fd\u6570\u5f97\u5230\uff1b\u5982\u679c\u4e3aNone\uff0c\u5219\u6240\u6709\u8dc3\u8fc1\u5747\u4e3a\u5408\u6cd5\n        :param str initial_method: \u521d\u59cb\u5316\u65b9\u6cd5\u3002\u89c1initial_parameter\n        \"\"\"", "\n", "super", "(", "ConditionalRandomField", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "include_start_end_trans", "=", "include_start_end_trans", "\n", "self", ".", "num_tags", "=", "num_tags", "\n", "\n", "# the meaning of entry in this matrix is (from_tag_id, to_tag_id) score", "\n", "self", ".", "trans_m", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_tags", ",", "num_tags", ")", ")", "\n", "if", "self", ".", "include_start_end_trans", ":", "\n", "            ", "self", ".", "start_scores", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_tags", ")", ")", "\n", "self", ".", "end_scores", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_tags", ")", ")", "\n", "\n", "", "if", "allowed_transitions", "is", "None", ":", "\n", "            ", "constrain", "=", "torch", ".", "zeros", "(", "num_tags", "+", "2", ",", "num_tags", "+", "2", ")", "\n", "", "else", ":", "\n", "            ", "constrain", "=", "torch", ".", "full", "(", "(", "num_tags", "+", "2", ",", "num_tags", "+", "2", ")", ",", "fill_value", "=", "-", "10000.0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "from_tag_id", ",", "to_tag_id", "in", "allowed_transitions", ":", "\n", "                ", "constrain", "[", "from_tag_id", ",", "to_tag_id", "]", "=", "0", "\n", "", "", "self", ".", "_constrain", "=", "nn", ".", "Parameter", "(", "constrain", ",", "requires_grad", "=", "False", ")", "\n", "\n", "initial_parameter", "(", "self", ",", "initial_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.crf.ConditionalRandomField._normalizer_likelihood": [[207, 233], ["logits.size", "mask.eq", "range", "torch.logsumexp", "logits[].view", "crf.ConditionalRandomField.trans_m.view", "crf.ConditionalRandomField.start_scores.view", "torch.logsumexp().masked_fill", "alpha.masked_fill", "crf.ConditionalRandomField.end_scores.view", "alpha.view", "flip_mask[].view", "mask[].eq().view", "torch.logsumexp", "mask[].eq"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "_normalizer_likelihood", "(", "self", ",", "logits", ",", "mask", ")", ":", "\n", "        ", "r\"\"\"Computes the (batch_size,) denominator term for the log-likelihood, which is the\n        sum of the likelihoods across all possible state sequences.\n\n        :param logits:FloatTensor, max_len x batch_size x num_tags\n        :param mask:ByteTensor, max_len x batch_size\n        :return:FloatTensor, batch_size\n        \"\"\"", "\n", "seq_len", ",", "batch_size", ",", "n_tags", "=", "logits", ".", "size", "(", ")", "\n", "alpha", "=", "logits", "[", "0", "]", "\n", "if", "self", ".", "include_start_end_trans", ":", "\n", "            ", "alpha", "=", "alpha", "+", "self", ".", "start_scores", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "", "flip_mask", "=", "mask", ".", "eq", "(", "False", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "seq_len", ")", ":", "\n", "            ", "emit_score", "=", "logits", "[", "i", "]", ".", "view", "(", "batch_size", ",", "1", ",", "n_tags", ")", "\n", "trans_score", "=", "self", ".", "trans_m", ".", "view", "(", "1", ",", "n_tags", ",", "n_tags", ")", "\n", "tmp", "=", "alpha", ".", "view", "(", "batch_size", ",", "n_tags", ",", "1", ")", "+", "emit_score", "+", "trans_score", "\n", "alpha", "=", "torch", ".", "logsumexp", "(", "tmp", ",", "1", ")", ".", "masked_fill", "(", "flip_mask", "[", "i", "]", ".", "view", "(", "batch_size", ",", "1", ")", ",", "0", ")", "+", "alpha", ".", "masked_fill", "(", "mask", "[", "i", "]", ".", "eq", "(", "True", ")", ".", "view", "(", "batch_size", ",", "1", ")", ",", "0", ")", "\n", "\n", "", "if", "self", ".", "include_start_end_trans", ":", "\n", "            ", "alpha", "=", "alpha", "+", "self", ".", "end_scores", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "", "return", "torch", ".", "logsumexp", "(", "alpha", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.crf.ConditionalRandomField._gold_score": [[234, 262], ["logits.size", "torch.arange", "torch.arange", "mask.eq.eq.eq", "mask.eq.eq.eq", "crf.ConditionalRandomField.trans_m[].masked_fill", "logits[].masked_fill", "score.sum", "emit_score[].masked_fill", "crf.ConditionalRandomField.start_scores.view().repeat", "mask.eq.eq.long().sum", "crf.ConditionalRandomField.end_scores.view().repeat", "crf.ConditionalRandomField.start_scores.view", "mask.eq.eq.long", "crf.ConditionalRandomField.end_scores.view", "torch.arange.view", "torch.arange.view"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "_gold_score", "(", "self", ",", "logits", ",", "tags", ",", "mask", ")", ":", "\n", "        ", "r\"\"\"\n        Compute the score for the gold path.\n        :param logits: FloatTensor, max_len x batch_size x num_tags\n        :param tags: LongTensor, max_len x batch_size\n        :param mask: ByteTensor, max_len x batch_size\n        :return:FloatTensor, batch_size\n        \"\"\"", "\n", "seq_len", ",", "batch_size", ",", "_", "=", "logits", ".", "size", "(", ")", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "batch_size", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "logits", ".", "device", ")", "\n", "seq_idx", "=", "torch", ".", "arange", "(", "seq_len", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "logits", ".", "device", ")", "\n", "\n", "# trans_socre [L-1, B]", "\n", "mask", "=", "mask", ".", "eq", "(", "True", ")", "\n", "flip_mask", "=", "mask", ".", "eq", "(", "False", ")", "\n", "trans_score", "=", "self", ".", "trans_m", "[", "tags", "[", ":", "seq_len", "-", "1", "]", ",", "tags", "[", "1", ":", "]", "]", ".", "masked_fill", "(", "flip_mask", "[", "1", ":", ",", ":", "]", ",", "0", ")", "\n", "# emit_score [L, B]", "\n", "emit_score", "=", "logits", "[", "seq_idx", ".", "view", "(", "-", "1", ",", "1", ")", ",", "batch_idx", ".", "view", "(", "1", ",", "-", "1", ")", ",", "tags", "]", ".", "masked_fill", "(", "flip_mask", ",", "0", ")", "\n", "# score [L-1, B]", "\n", "score", "=", "trans_score", "+", "emit_score", "[", ":", "seq_len", "-", "1", ",", ":", "]", "\n", "score", "=", "score", ".", "sum", "(", "0", ")", "+", "emit_score", "[", "-", "1", "]", ".", "masked_fill", "(", "flip_mask", "[", "-", "1", "]", ",", "0", ")", "\n", "if", "self", ".", "include_start_end_trans", ":", "\n", "            ", "st_scores", "=", "self", ".", "start_scores", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "batch_size", ",", "1", ")", "[", "batch_idx", ",", "tags", "[", "0", "]", "]", "\n", "last_idx", "=", "mask", ".", "long", "(", ")", ".", "sum", "(", "0", ")", "-", "1", "\n", "ed_scores", "=", "self", ".", "end_scores", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "batch_size", ",", "1", ")", "[", "batch_idx", ",", "tags", "[", "last_idx", ",", "batch_idx", "]", "]", "\n", "score", "=", "score", "+", "st_scores", "+", "ed_scores", "\n", "# return [B,]", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.crf.ConditionalRandomField.forward": [[263, 279], ["feats.transpose.transpose.transpose", "tags.transpose().long.transpose().long.transpose().long", "mask.transpose().float.transpose().float.transpose().float", "crf.ConditionalRandomField._normalizer_likelihood", "crf.ConditionalRandomField._gold_score", "tags.transpose().long.transpose().long.transpose", "mask.transpose().float.transpose().float.transpose"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.crf.ConditionalRandomField._normalizer_likelihood", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.crf.ConditionalRandomField._gold_score"], ["", "def", "forward", "(", "self", ",", "feats", ",", "tags", ",", "mask", ")", ":", "\n", "        ", "r\"\"\"\n        \u7528\u4e8e\u8ba1\u7b97CRF\u7684\u524d\u5411loss\uff0c\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2abatch_size\u7684FloatTensor\uff0c\u53ef\u80fd\u9700\u8981mean()\u6c42\u5f97loss\u3002\n\n        :param torch.FloatTensor feats: batch_size x max_len x num_tags\uff0c\u7279\u5f81\u77e9\u9635\u3002\n        :param torch.LongTensor tags: batch_size x max_len\uff0c\u6807\u7b7e\u77e9\u9635\u3002\n        :param torch.ByteTensor mask: batch_size x max_len\uff0c\u4e3a0\u7684\u4f4d\u7f6e\u8ba4\u4e3a\u662fpadding\u3002\n        :return: torch.FloatTensor, (batch_size,)\n        \"\"\"", "\n", "feats", "=", "feats", ".", "transpose", "(", "0", ",", "1", ")", "\n", "tags", "=", "tags", ".", "transpose", "(", "0", ",", "1", ")", ".", "long", "(", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "all_path_score", "=", "self", ".", "_normalizer_likelihood", "(", "feats", ",", "mask", ")", "\n", "gold_path_score", "=", "self", ".", "_gold_score", "(", "feats", ",", "tags", ",", "mask", ")", "\n", "\n", "return", "all_path_score", "-", "gold_path_score", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.crf.ConditionalRandomField.viterbi_decode": [[280, 341], ["logits.size", "mask.transpose().data.eq.transpose().data.eq.transpose().data.eq", "mask.transpose().data.eq.transpose().data.eq.eq", "logits.new_zeros", "crf.ConditionalRandomField._constrain.data.clone", "range", "torch.arange", "torch.arange", "logits.new_empty", "vscore.max", "range", "ans.transpose.transpose.transpose", "logits.transpose", "transitions[].view", "vscore.view", "score.max", "transitions[].view", "mask.transpose().data.eq.transpose().data.eq.long().sum", "enumerate", "logits[].view", "cur_score.masked_fill", "lens.view", "torch.arange.view", "paths.append", "mask.transpose().data.eq.transpose().data.eq.transpose", "flip_mask[].view", "mask.transpose().data.eq.transpose().data.eq.long", "ans[].tolist"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "viterbi_decode", "(", "self", ",", "logits", ",", "mask", ",", "unpad", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\u7ed9\u5b9a\u4e00\u4e2a\u7279\u5f81\u77e9\u9635\u4ee5\u53ca\u8f6c\u79fb\u5206\u6570\u77e9\u9635\uff0c\u8ba1\u7b97\u51fa\u6700\u4f73\u7684\u8def\u5f84\u4ee5\u53ca\u5bf9\u5e94\u7684\u5206\u6570\n\n        :param torch.FloatTensor logits: batch_size x max_len x num_tags\uff0c\u7279\u5f81\u77e9\u9635\u3002\n        :param torch.ByteTensor mask: batch_size x max_len, \u4e3a0\u7684\u4f4d\u7f6e\u8ba4\u4e3a\u662fpad\uff1b\u5982\u679c\u4e3aNone\uff0c\u5219\u8ba4\u4e3a\u6ca1\u6709padding\u3002\n        :param bool unpad: \u662f\u5426\u5c06\u7ed3\u679c\u5220\u53bbpadding\u3002False, \u8fd4\u56de\u7684\u662fbatch_size x max_len\u7684tensor; True\uff0c\u8fd4\u56de\u7684\u662f\n            List[List[int]], \u5185\u90e8\u7684List[int]\u4e3a\u6bcf\u4e2asequence\u7684label\uff0c\u5df2\u7ecf\u9664\u53bbpad\u90e8\u5206\uff0c\u5373\u6bcf\u4e2aList[int]\u7684\u957f\u5ea6\u662f\u8fd9\n            \u4e2asample\u7684\u6709\u6548\u957f\u5ea6\u3002\n        :return: \u8fd4\u56de (paths, scores)\u3002\n                    paths: \u662f\u89e3\u7801\u540e\u7684\u8def\u5f84, \u5176\u503c\u53c2\u7167unpad\u53c2\u6570.\n                    scores: torch.FloatTensor, size\u4e3a(batch_size,), \u5bf9\u5e94\u6bcf\u4e2a\u6700\u4f18\u8def\u5f84\u7684\u5206\u6570\u3002\n\n        \"\"\"", "\n", "batch_size", ",", "seq_len", ",", "n_tags", "=", "logits", ".", "size", "(", ")", "\n", "logits", "=", "logits", ".", "transpose", "(", "0", ",", "1", ")", ".", "data", "# L, B, H", "\n", "mask", "=", "mask", ".", "transpose", "(", "0", ",", "1", ")", ".", "data", ".", "eq", "(", "True", ")", "# L, B", "\n", "flip_mask", "=", "mask", ".", "eq", "(", "False", ")", "\n", "\n", "# dp", "\n", "vpath", "=", "logits", ".", "new_zeros", "(", "(", "seq_len", ",", "batch_size", ",", "n_tags", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "vscore", "=", "logits", "[", "0", "]", "\n", "transitions", "=", "self", ".", "_constrain", ".", "data", ".", "clone", "(", ")", "\n", "transitions", "[", ":", "n_tags", ",", ":", "n_tags", "]", "+=", "self", ".", "trans_m", ".", "data", "\n", "if", "self", ".", "include_start_end_trans", ":", "\n", "            ", "transitions", "[", "n_tags", ",", ":", "n_tags", "]", "+=", "self", ".", "start_scores", ".", "data", "\n", "transitions", "[", ":", "n_tags", ",", "n_tags", "+", "1", "]", "+=", "self", ".", "end_scores", ".", "data", "\n", "\n", "", "vscore", "+=", "transitions", "[", "n_tags", ",", ":", "n_tags", "]", "\n", "trans_score", "=", "transitions", "[", ":", "n_tags", ",", ":", "n_tags", "]", ".", "view", "(", "1", ",", "n_tags", ",", "n_tags", ")", ".", "data", "\n", "for", "i", "in", "range", "(", "1", ",", "seq_len", ")", ":", "\n", "            ", "prev_score", "=", "vscore", ".", "view", "(", "batch_size", ",", "n_tags", ",", "1", ")", "\n", "cur_score", "=", "logits", "[", "i", "]", ".", "view", "(", "batch_size", ",", "1", ",", "n_tags", ")", "+", "trans_score", "\n", "score", "=", "prev_score", "+", "cur_score", ".", "masked_fill", "(", "flip_mask", "[", "i", "]", ".", "view", "(", "batch_size", ",", "1", ",", "1", ")", ",", "0", ")", "\n", "best_score", ",", "best_dst", "=", "score", ".", "max", "(", "1", ")", "\n", "vpath", "[", "i", "]", "=", "best_dst", "\n", "vscore", "=", "best_score", "\n", "\n", "", "if", "self", ".", "include_start_end_trans", ":", "\n", "            ", "vscore", "+=", "transitions", "[", ":", "n_tags", ",", "n_tags", "+", "1", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "# backtrace", "\n", "", "batch_idx", "=", "torch", ".", "arange", "(", "batch_size", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "logits", ".", "device", ")", "\n", "seq_idx", "=", "torch", ".", "arange", "(", "seq_len", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "logits", ".", "device", ")", "\n", "lens", "=", "(", "mask", ".", "long", "(", ")", ".", "sum", "(", "0", ")", "-", "1", ")", "\n", "# idxes [L, B], batched idx from seq_len-1 to 0", "\n", "idxes", "=", "(", "lens", ".", "view", "(", "1", ",", "-", "1", ")", "-", "seq_idx", ".", "view", "(", "-", "1", ",", "1", ")", ")", "%", "seq_len", "\n", "\n", "ans", "=", "logits", ".", "new_empty", "(", "(", "seq_len", ",", "batch_size", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "ans_score", ",", "last_tags", "=", "vscore", ".", "max", "(", "1", ")", "\n", "ans", "[", "idxes", "[", "0", "]", ",", "batch_idx", "]", "=", "last_tags", "\n", "for", "i", "in", "range", "(", "seq_len", "-", "1", ")", ":", "\n", "            ", "last_tags", "=", "vpath", "[", "idxes", "[", "i", "]", ",", "batch_idx", ",", "last_tags", "]", "\n", "ans", "[", "idxes", "[", "i", "+", "1", "]", ",", "batch_idx", "]", "=", "last_tags", "\n", "", "ans", "=", "ans", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "unpad", ":", "\n", "            ", "paths", "=", "[", "]", "\n", "for", "idx", ",", "seq_len", "in", "enumerate", "(", "lens", ")", ":", "\n", "                ", "paths", ".", "append", "(", "ans", "[", "idx", ",", ":", "seq_len", "+", "1", "]", ".", "tolist", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "paths", "=", "ans", "\n", "", "return", "paths", ",", "ans_score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.crf.allowed_transitions": [[18, 73], ["isinstance", "len", "core.metrics._get_encoding_type_from_tag_vocab", "encoding_type.lower.lower", "core.metrics._check_tag_vocab_and_encoding_type", "list", "list", "from_label.lower.lower", "crf.allowed_transitions.split_tag_label"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._get_encoding_type_from_tag_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._check_tag_vocab_and_encoding_type", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["def", "allowed_transitions", "(", "tag_vocab", ":", "Union", "[", "Vocabulary", ",", "dict", "]", ",", "encoding_type", "=", "None", ",", "include_start_end", "=", "False", ")", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2aid\u5230label\u7684\u6620\u5c04\u8868\uff0c\u8fd4\u56de\u6240\u6709\u53ef\u4ee5\u8df3\u8f6c\u7684(from_tag_id, to_tag_id)\u5217\u8868\u3002\n\n    :param ~fastNLP.Vocabulary,dict tag_vocab: \u652f\u6301\u7c7b\u578b\u4e3atag\u6216tag-label\u3002\u53ea\u6709tag\u7684,\u6bd4\u5982\"B\", \"M\"; \u4e5f\u53ef\u4ee5\u662f\"B-NN\", \"M-NN\",\n        tag\u548clabel\u4e4b\u95f4\u4e00\u5b9a\u8981\u7528\"-\"\u9694\u5f00\u3002\u5982\u679c\u4f20\u5165dict\uff0c\u683c\u5f0f\u9700\u8981\u5f62\u5982{0:\"O\", 1:\"B-tag1\"}\uff0c\u5373index\u5728\u524d\uff0ctag\u5728\u540e\u3002\n    :param str encoding_type: \u652f\u6301\"bio\", \"bmes\", \"bmeso\", \"bioes\"\u3002\u9ed8\u8ba4\u4e3aNone\uff0c\u901a\u8fc7vocab\u81ea\u52a8\u63a8\u65ad\n    :param bool include_start_end: \u662f\u5426\u5305\u542b\u5f00\u59cb\u4e0e\u7ed3\u5c3e\u7684\u8f6c\u6362\u3002\u6bd4\u5982\u5728bio\u4e2d\uff0cb/o\u53ef\u4ee5\u5728\u5f00\u5934\uff0c\u4f46\u662fi\u4e0d\u80fd\u5728\u5f00\u5934\uff1b\n        \u4e3aTrue\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u4e2d\u4f1a\u5305\u542b(start_idx, b_idx), (start_idx, o_idx), \u4f46\u662f\u4e0d\u5305\u542b(start_idx, i_idx);\n        start_idx=len(id2label), end_idx=len(id2label)+1\u3002\u4e3aFalse, \u8fd4\u56de\u7684\u7ed3\u679c\u4e2d\u4e0d\u542b\u4e0e\u5f00\u59cb\u7ed3\u5c3e\u76f8\u5173\u7684\u5185\u5bb9\n    :return: List[Tuple(int, int)]], \u5185\u90e8\u7684Tuple\u662f\u53ef\u4ee5\u8fdb\u884c\u8df3\u8f6c\u7684(from_tag_id, to_tag_id)\u3002\n    \"\"\"", "\n", "if", "encoding_type", "is", "None", ":", "\n", "        ", "encoding_type", "=", "_get_encoding_type_from_tag_vocab", "(", "tag_vocab", ")", "\n", "", "else", ":", "\n", "        ", "encoding_type", "=", "encoding_type", ".", "lower", "(", ")", "\n", "_check_tag_vocab_and_encoding_type", "(", "tag_vocab", ",", "encoding_type", ")", "\n", "\n", "", "pad_token", "=", "'<pad>'", "\n", "unk_token", "=", "'<unk>'", "\n", "\n", "if", "isinstance", "(", "tag_vocab", ",", "Vocabulary", ")", ":", "\n", "        ", "id_label_lst", "=", "list", "(", "tag_vocab", ".", "idx2word", ".", "items", "(", ")", ")", "\n", "pad_token", "=", "tag_vocab", ".", "padding", "\n", "unk_token", "=", "tag_vocab", ".", "unknown", "\n", "", "else", ":", "\n", "        ", "id_label_lst", "=", "list", "(", "tag_vocab", ".", "items", "(", ")", ")", "\n", "\n", "", "num_tags", "=", "len", "(", "tag_vocab", ")", "\n", "start_idx", "=", "num_tags", "\n", "end_idx", "=", "num_tags", "+", "1", "\n", "allowed_trans", "=", "[", "]", "\n", "if", "include_start_end", ":", "\n", "        ", "id_label_lst", "+=", "[", "(", "start_idx", ",", "'start'", ")", ",", "(", "end_idx", ",", "'end'", ")", "]", "\n", "", "def", "split_tag_label", "(", "from_label", ")", ":", "\n", "        ", "from_label", "=", "from_label", ".", "lower", "(", ")", "\n", "if", "from_label", "in", "[", "'start'", ",", "'end'", "]", ":", "\n", "            ", "from_tag", "=", "from_label", "\n", "from_label", "=", "''", "\n", "", "else", ":", "\n", "            ", "from_tag", "=", "from_label", "[", ":", "1", "]", "\n", "from_label", "=", "from_label", "[", "2", ":", "]", "\n", "", "return", "from_tag", ",", "from_label", "\n", "\n", "", "for", "from_id", ",", "from_label", "in", "id_label_lst", ":", "\n", "        ", "if", "from_label", "in", "[", "pad_token", ",", "unk_token", "]", ":", "\n", "            ", "continue", "\n", "", "from_tag", ",", "from_label", "=", "split_tag_label", "(", "from_label", ")", "\n", "for", "to_id", ",", "to_label", "in", "id_label_lst", ":", "\n", "            ", "if", "to_label", "in", "[", "pad_token", ",", "unk_token", "]", ":", "\n", "                ", "continue", "\n", "", "to_tag", ",", "to_label", "=", "split_tag_label", "(", "to_label", ")", "\n", "if", "_is_transition_allowed", "(", "encoding_type", ",", "from_tag", ",", "from_label", ",", "to_tag", ",", "to_label", ")", ":", "\n", "                ", "allowed_trans", ".", "append", "(", "(", "from_id", ",", "to_id", ")", ")", "\n", "", "", "", "return", "allowed_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.crf._is_transition_allowed": [[75, 167], ["encoding_type.lower.lower", "any", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["", "def", "_is_transition_allowed", "(", "encoding_type", ",", "from_tag", ",", "from_label", ",", "to_tag", ",", "to_label", ")", ":", "\n", "    ", "r\"\"\"\n\n    :param str encoding_type: \u652f\u6301\"BIO\", \"BMES\", \"BEMSO\", 'bioes'\u3002\n    :param str from_tag: \u6bd4\u5982\"B\", \"M\"\u4e4b\u7c7b\u7684\u6807\u6ce8tag. \u8fd8\u5305\u62ecstart, end\u7b49\u4e24\u79cd\u7279\u6b8atag\n    :param str from_label: \u6bd4\u5982\"PER\", \"LOC\"\u7b49label\n    :param str to_tag: \u6bd4\u5982\"B\", \"M\"\u4e4b\u7c7b\u7684\u6807\u6ce8tag. \u8fd8\u5305\u62ecstart, end\u7b49\u4e24\u79cd\u7279\u6b8atag\n    :param str to_label: \u6bd4\u5982\"PER\", \"LOC\"\u7b49label\n    :return: bool\uff0c\u80fd\u5426\u8dc3\u8fc1\n    \"\"\"", "\n", "if", "to_tag", "==", "'start'", "or", "from_tag", "==", "'end'", ":", "\n", "        ", "return", "False", "\n", "", "encoding_type", "=", "encoding_type", ".", "lower", "(", ")", "\n", "if", "encoding_type", "==", "'bio'", ":", "\n", "        ", "r\"\"\"\n        \u7b2c\u4e00\u884c\u662fto_tag, \u7b2c\u4e00\u5217\u662ffrom_tag. y\u4efb\u610f\u6761\u4ef6\u4e0b\u53ef\u8f6c\uff0c-\u53ea\u6709\u5728label\u76f8\u540c\u65f6\u53ef\u8f6c\uff0cn\u4e0d\u53ef\u8f6c\n        +-------+---+---+---+-------+-----+\n        |       | B | I | O | start | end |\n        +-------+---+---+---+-------+-----+\n        |   B   | y | - | y | n     | y   |\n        +-------+---+---+---+-------+-----+\n        |   I   | y | - | y | n     | y   |\n        +-------+---+---+---+-------+-----+\n        |   O   | y | n | y | n     | y   |\n        +-------+---+---+---+-------+-----+\n        | start | y | n | y | n     | n   |\n        +-------+---+---+---+-------+-----+\n        | end   | n | n | n | n     | n   |\n        +-------+---+---+---+-------+-----+\n        \"\"\"", "\n", "if", "from_tag", "==", "'start'", ":", "\n", "            ", "return", "to_tag", "in", "(", "'b'", ",", "'o'", ")", "\n", "", "elif", "from_tag", "in", "[", "'b'", ",", "'i'", "]", ":", "\n", "            ", "return", "any", "(", "[", "to_tag", "in", "[", "'end'", ",", "'b'", ",", "'o'", "]", ",", "to_tag", "==", "'i'", "and", "from_label", "==", "to_label", "]", ")", "\n", "", "elif", "from_tag", "==", "'o'", ":", "\n", "            ", "return", "to_tag", "in", "[", "'end'", ",", "'b'", ",", "'o'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unexpect tag {}. Expect only 'B', 'I', 'O'.\"", ".", "format", "(", "from_tag", ")", ")", "\n", "\n", "", "", "elif", "encoding_type", "==", "'bmes'", ":", "\n", "        ", "r\"\"\"\n        \u7b2c\u4e00\u884c\u662fto_tag, \u7b2c\u4e00\u5217\u662ffrom_tag\uff0cy\u4efb\u610f\u6761\u4ef6\u4e0b\u53ef\u8f6c\uff0c-\u53ea\u6709\u5728label\u76f8\u540c\u65f6\u53ef\u8f6c\uff0cn\u4e0d\u53ef\u8f6c\n        +-------+---+---+---+---+-------+-----+\n        |       | B | M | E | S | start | end |\n        +-------+---+---+---+---+-------+-----+\n        |   B   | n | - | - | n |   n   |  n  |\n        +-------+---+---+---+---+-------+-----+\n        |   M   | n | - | - | n |   n   |  n  |\n        +-------+---+---+---+---+-------+-----+\n        |   E   | y | n | n | y |   n   |  y  |\n        +-------+---+---+---+---+-------+-----+\n        |   S   | y | n | n | y |   n   |  y  |\n        +-------+---+---+---+---+-------+-----+\n        | start | y | n | n | y |   n   |  n  |\n        +-------+---+---+---+---+-------+-----+\n        |  end  | n | n | n | n |   n   |  n  |\n        +-------+---+---+---+---+-------+-----+\n        \"\"\"", "\n", "if", "from_tag", "==", "'start'", ":", "\n", "            ", "return", "to_tag", "in", "[", "'b'", ",", "'s'", "]", "\n", "", "elif", "from_tag", "==", "'b'", ":", "\n", "            ", "return", "to_tag", "in", "[", "'m'", ",", "'e'", "]", "and", "from_label", "==", "to_label", "\n", "", "elif", "from_tag", "==", "'m'", ":", "\n", "            ", "return", "to_tag", "in", "[", "'m'", ",", "'e'", "]", "and", "from_label", "==", "to_label", "\n", "", "elif", "from_tag", "in", "[", "'e'", ",", "'s'", "]", ":", "\n", "            ", "return", "to_tag", "in", "[", "'b'", ",", "'s'", ",", "'end'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unexpect tag type {}. Expect only 'B', 'M', 'E', 'S'.\"", ".", "format", "(", "from_tag", ")", ")", "\n", "", "", "elif", "encoding_type", "==", "'bmeso'", ":", "\n", "        ", "if", "from_tag", "==", "'start'", ":", "\n", "            ", "return", "to_tag", "in", "[", "'b'", ",", "'s'", ",", "'o'", "]", "\n", "", "elif", "from_tag", "==", "'b'", ":", "\n", "            ", "return", "to_tag", "in", "[", "'m'", ",", "'e'", "]", "and", "from_label", "==", "to_label", "\n", "", "elif", "from_tag", "==", "'m'", ":", "\n", "            ", "return", "to_tag", "in", "[", "'m'", ",", "'e'", "]", "and", "from_label", "==", "to_label", "\n", "", "elif", "from_tag", "in", "[", "'e'", ",", "'s'", ",", "'o'", "]", ":", "\n", "            ", "return", "to_tag", "in", "[", "'b'", ",", "'s'", ",", "'end'", ",", "'o'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unexpect tag type {}. Expect only 'B', 'M', 'E', 'S', 'O'.\"", ".", "format", "(", "from_tag", ")", ")", "\n", "", "", "elif", "encoding_type", "==", "'bioes'", ":", "\n", "        ", "if", "from_tag", "==", "'start'", ":", "\n", "            ", "return", "to_tag", "in", "[", "'b'", ",", "'s'", ",", "'o'", "]", "\n", "", "elif", "from_tag", "==", "'b'", ":", "\n", "            ", "return", "to_tag", "in", "[", "'i'", ",", "'e'", "]", "and", "from_label", "==", "to_label", "\n", "", "elif", "from_tag", "==", "'i'", ":", "\n", "            ", "return", "to_tag", "in", "[", "'i'", ",", "'e'", "]", "and", "from_label", "==", "to_label", "\n", "", "elif", "from_tag", "in", "[", "'e'", ",", "'s'", ",", "'o'", "]", ":", "\n", "            ", "return", "to_tag", "in", "[", "'b'", ",", "'s'", ",", "'end'", ",", "'o'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unexpect tag type {}. Expect only 'B', 'I', 'E', 'S', 'O'.\"", ".", "format", "(", "from_tag", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Only support BIO, BMES, BMESO, BIOES encoding type, got {}.\"", ".", "format", "(", "encoding_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.mlp.MLP.__init__": [[38, 88], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Dropout", "torch.Dropout", "utils.initial_parameter", "len", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Sigmoid", "torch.Sigmoid", "isinstance", "callable", "callable", "len", "torch.Linear", "torch.Linear", "mlp.MLP.hiddens.append", "len", "ValueError", "mlp.MLP.hidden_active.append", "torch.Linear", "torch.Linear", "len", "len", "func.lower", "mlp.MLP.hidden_active.append", "ValueError", "mlp.MLP.output_activation.lower", "ValueError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.utils.initial_parameter", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["def", "__init__", "(", "self", ",", "size_layer", ",", "activation", "=", "'relu'", ",", "output_activation", "=", "None", ",", "initial_method", "=", "None", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param List[int] size_layer: \u4e00\u4e2aint\u7684\u5217\u8868\uff0c\u7528\u6765\u5b9a\u4e49MLP\u7684\u5c42\u6570\uff0c\u5217\u8868\u4e2d\u7684\u6570\u5b57\u4e3a\u6bcf\u4e00\u5c42\u662fhidden\u6570\u76ee\u3002MLP\u7684\u5c42\u6570\u4e3a len(size_layer) - 1\n        :param Union[str,func,List[str]] activation: \u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u8005\u51fd\u6570\u7684\u5217\u8868\uff0c\u7528\u6765\u5b9a\u4e49\u6bcf\u4e00\u4e2a\u9690\u5c42\u7684\u6fc0\u6d3b\u51fd\u6570\uff0c\u5b57\u7b26\u4e32\u5305\u62ecrelu\uff0ctanh\u548c\n            sigmoid\uff0c\u9ed8\u8ba4\u503c\u4e3arelu\n        :param Union[str,func] output_activation:  \u5b57\u7b26\u4e32\u6216\u8005\u51fd\u6570\uff0c\u7528\u6765\u5b9a\u4e49\u8f93\u51fa\u5c42\u7684\u6fc0\u6d3b\u51fd\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3aNone\uff0c\u8868\u793a\u8f93\u51fa\u5c42\u6ca1\u6709\u6fc0\u6d3b\u51fd\u6570\n        :param str initial_method: \u53c2\u6570\u521d\u59cb\u5316\u65b9\u5f0f\n        :param float dropout: dropout\u6982\u7387\uff0c\u9ed8\u8ba4\u503c\u4e3a0\n        \"\"\"", "\n", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hiddens", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "output", "=", "None", "\n", "self", ".", "output_activation", "=", "output_activation", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "size_layer", ")", ")", ":", "\n", "            ", "if", "i", "+", "1", "==", "len", "(", "size_layer", ")", ":", "\n", "                ", "self", ".", "output", "=", "nn", ".", "Linear", "(", "size_layer", "[", "i", "-", "1", "]", ",", "size_layer", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "hiddens", ".", "append", "(", "nn", ".", "Linear", "(", "size_layer", "[", "i", "-", "1", "]", ",", "size_layer", "[", "i", "]", ")", ")", "\n", "\n", "", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "actives", "=", "{", "\n", "'relu'", ":", "nn", ".", "ReLU", "(", ")", ",", "\n", "'tanh'", ":", "nn", ".", "Tanh", "(", ")", ",", "\n", "'sigmoid'", ":", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "}", "\n", "if", "not", "isinstance", "(", "activation", ",", "list", ")", ":", "\n", "            ", "activation", "=", "[", "activation", "]", "*", "(", "len", "(", "size_layer", ")", "-", "2", ")", "\n", "", "elif", "len", "(", "activation", ")", "==", "len", "(", "size_layer", ")", "-", "2", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"the length of activation function list except {len(size_layer) - 2} but got {len(activation)}!\"", ")", "\n", "", "self", ".", "hidden_active", "=", "[", "]", "\n", "for", "func", "in", "activation", ":", "\n", "            ", "if", "callable", "(", "activation", ")", ":", "\n", "                ", "self", ".", "hidden_active", ".", "append", "(", "activation", ")", "\n", "", "elif", "func", ".", "lower", "(", ")", "in", "actives", ":", "\n", "                ", "self", ".", "hidden_active", ".", "append", "(", "actives", "[", "func", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"should set activation correctly: {}\"", ".", "format", "(", "activation", ")", ")", "\n", "", "", "if", "self", ".", "output_activation", "is", "not", "None", ":", "\n", "            ", "if", "callable", "(", "self", ".", "output_activation", ")", ":", "\n", "                ", "pass", "\n", "", "elif", "self", ".", "output_activation", ".", "lower", "(", ")", "in", "actives", ":", "\n", "                ", "self", ".", "output_activation", "=", "actives", "[", "self", ".", "output_activation", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"should set activation correctly: {}\"", ".", "format", "(", "activation", ")", ")", "\n", "", "", "initial_parameter", "(", "self", ",", "initial_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.mlp.MLP.forward": [[89, 101], ["zip", "mlp.MLP.output", "mlp.MLP.dropout", "mlp.MLP.dropout", "mlp.MLP.output_activation", "func", "layer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.Tensor x: MLP\u63a5\u53d7\u7684\u8f93\u5165\n        :return: torch.Tensor : MLP\u7684\u8f93\u51fa\u7ed3\u679c\n        \"\"\"", "\n", "for", "layer", ",", "func", "in", "zip", "(", "self", ".", "hiddens", ",", "self", ".", "hidden_active", ")", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "func", "(", "layer", "(", "x", ")", ")", ")", "\n", "", "x", "=", "self", ".", "output", "(", "x", ")", "\n", "if", "self", ".", "output_activation", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "output_activation", "(", "x", ")", "\n", "", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State.__init__": [[17, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "encoder_output", "=", "None", ",", "encoder_mask", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        \u6bcf\u4e2aDecoder\u90fd\u6709\u5bf9\u5e94\u7684State\u5bf9\u8c61\u7528\u6765\u627f\u8f7dencoder\u7684\u8f93\u51fa\u4ee5\u53ca\u5f53\u524d\u65f6\u523b\u4e4b\u524d\u7684decode\u72b6\u6001\u3002\n\n        :param Union[torch.Tensor, list, tuple] encoder_output: \u5982\u679c\u4e0d\u4e3aNone\uff0c\u5185\u90e8\u5143\u7d20\u9700\u8981\u4e3atorch.Tensor, \u9ed8\u8ba4\u5176\u4e2d\u7b2c\u4e00\u7ef4\u662fbatch\n            \u7ef4\u5ea6\n        :param Union[torch.Tensor, list, tuple] encoder_mask: \u5982\u679c\u90e8\u4f4dNone\uff0c\u5185\u90e8\u5143\u7d20\u9700\u8981torch.Tensor, \u9ed8\u8ba4\u5176\u4e2d\u7b2c\u4e00\u7ef4\u662fbatch\n            \u7ef4\u5ea6\n        :param kwargs:\n        \"\"\"", "\n", "self", ".", "encoder_output", "=", "encoder_output", "\n", "self", ".", "encoder_mask", "=", "encoder_mask", "\n", "self", ".", "_decode_length", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State.num_samples": [[31, 42], ["seq2seq_state.State.encoder_output.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "@", "property", "\n", "def", "num_samples", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u8fd4\u56de\u7684State\u4e2d\u5305\u542b\u7684\u662f\u591a\u5c11\u4e2asample\u7684encoder\u72b6\u6001\uff0c\u4e3b\u8981\u7528\u4e8eGenerate\u7684\u65f6\u5019\u786e\u5b9abatch\u7684\u5927\u5c0f\u3002\n\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "encoder_output", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "encoder_output", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State.decode_length": [[52, 55], ["None"], "methods", ["None"], ["", "@", "decode_length", ".", "setter", "\n", "def", "decode_length", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_decode_length", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State._reorder_state": [[56, 73], ["isinstance", "tuple.index_select", "isinstance", "range", "isinstance", "len", "seq2seq_state.State._reorder_state", "range", "tuple", "TypeError", "len", "tmp_list.append", "seq2seq_state.State._reorder_state", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State._reorder_state", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State._reorder_state"], ["", "def", "_reorder_state", "(", "self", ",", "state", ":", "Union", "[", "torch", ".", "Tensor", ",", "list", ",", "tuple", "]", ",", "indices", ":", "torch", ".", "LongTensor", ",", "dim", ":", "int", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "state", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "state", "=", "state", ".", "index_select", "(", "index", "=", "indices", ",", "dim", "=", "dim", ")", "\n", "", "elif", "isinstance", "(", "state", ",", "list", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "state", ")", ")", ":", "\n", "                ", "assert", "state", "[", "i", "]", "is", "not", "None", "\n", "state", "[", "i", "]", "=", "self", ".", "_reorder_state", "(", "state", "[", "i", "]", ",", "indices", ",", "dim", ")", "\n", "", "", "elif", "isinstance", "(", "state", ",", "tuple", ")", ":", "\n", "            ", "tmp_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "state", ")", ")", ":", "\n", "                ", "assert", "state", "[", "i", "]", "is", "not", "None", "\n", "tmp_list", ".", "append", "(", "self", ".", "_reorder_state", "(", "state", "[", "i", "]", ",", "indices", ",", "dim", ")", ")", "\n", "", "state", "=", "tuple", "(", "tmp_list", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "f\"Cannot reorder data of type:{type(state)}\"", ")", "\n", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State.reorder_state": [[74, 79], ["seq2seq_state.State._reorder_state", "seq2seq_state.State._reorder_state"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State._reorder_state", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State._reorder_state"], ["", "def", "reorder_state", "(", "self", ",", "indices", ":", "torch", ".", "LongTensor", ")", ":", "\n", "        ", "if", "self", ".", "encoder_mask", "is", "not", "None", ":", "\n", "            ", "self", ".", "encoder_mask", "=", "self", ".", "_reorder_state", "(", "self", ".", "encoder_mask", ",", "indices", ")", "\n", "", "if", "self", ".", "encoder_output", "is", "not", "None", ":", "\n", "            ", "self", ".", "encoder_output", "=", "self", ".", "_reorder_state", "(", "self", ".", "encoder_output", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.LSTMState.__init__": [[82, 95], ["seq2seq_state.State.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder_output", ",", "encoder_mask", ",", "hidden", ",", "cell", ")", ":", "\n", "        ", "\"\"\"\n        LSTMDecoder\u5bf9\u5e94\u7684State\uff0c\u4fdd\u5b58encoder\u7684\u8f93\u51fa\u4ee5\u53caLSTM\u89e3\u7801\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u4e2d\u95f4\u72b6\u6001\n\n        :param torch.FloatTensor encoder_output: bsz x src_seq_len x encode_output_size\uff0cencoder\u7684\u8f93\u51fa\n        :param torch.BoolTensor encoder_mask: bsz x src_seq_len, \u4e3a0\u7684\u5730\u65b9\u662fpadding\n        :param torch.FloatTensor hidden: num_layers x bsz x hidden_size, \u4e0a\u4e2a\u65f6\u523b\u7684hidden\u72b6\u6001\n        :param torch.FloatTensor cell: num_layers x bsz x hidden_size, \u4e0a\u4e2a\u65f6\u523b\u7684cell\u72b6\u6001\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "encoder_output", ",", "encoder_mask", ")", "\n", "self", ".", "hidden", "=", "hidden", "\n", "self", ".", "cell", "=", "cell", "\n", "self", ".", "_input_feed", "=", "hidden", "[", "0", "]", "# \u9ed8\u8ba4\u662f\u4e0a\u4e00\u4e2a\u65f6\u523b\u7684\u8f93\u51fa", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.LSTMState.input_feed": [[105, 108], ["None"], "methods", ["None"], ["", "@", "input_feed", ".", "setter", "\n", "def", "input_feed", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_input_feed", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.LSTMState.reorder_state": [[109, 115], ["seq2seq_state.State.reorder_state", "seq2seq_state.LSTMState._reorder_state", "seq2seq_state.LSTMState._reorder_state", "seq2seq_state.LSTMState._reorder_state"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.TransformerState.reorder_state", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State._reorder_state", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State._reorder_state", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State._reorder_state"], ["", "def", "reorder_state", "(", "self", ",", "indices", ":", "torch", ".", "LongTensor", ")", ":", "\n", "        ", "super", "(", ")", ".", "reorder_state", "(", "indices", ")", "\n", "self", ".", "hidden", "=", "self", ".", "_reorder_state", "(", "self", ".", "hidden", ",", "indices", ",", "dim", "=", "1", ")", "\n", "self", ".", "cell", "=", "self", ".", "_reorder_state", "(", "self", ".", "cell", ",", "indices", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "input_feed", "is", "not", "None", ":", "\n", "            ", "self", ".", "input_feed", "=", "self", ".", "_reorder_state", "(", "self", ".", "input_feed", ",", "indices", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.TransformerState.__init__": [[118, 131], ["seq2seq_state.State.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder_output", ",", "encoder_mask", ",", "num_decoder_layer", ")", ":", "\n", "        ", "\"\"\"\n        \u4e0eTransformerSeq2SeqDecoder\u5bf9\u5e94\u7684State\uff0c\n\n        :param torch.FloatTensor encoder_output: bsz x encode_max_len x encoder_output_size, encoder\u7684\u8f93\u51fa\n        :param torch.ByteTensor encoder_mask: bsz x encode_max_len \u4e3a1\u7684\u5730\u65b9\u9700\u8981attend\n        :param int num_decoder_layer: decode\u6709\u591a\u5c11\u5c42\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "encoder_output", ",", "encoder_mask", ")", "\n", "self", ".", "encoder_key", "=", "[", "None", "]", "*", "num_decoder_layer", "# \u6bcf\u4e00\u4e2a\u5143\u7d20 bsz x encoder_max_len x key_dim", "\n", "self", ".", "encoder_value", "=", "[", "None", "]", "*", "num_decoder_layer", "# \u6bcf\u4e00\u4e2a\u5143\u7d20 bsz x encoder_max_len x value_dim", "\n", "self", ".", "decoder_prev_key", "=", "[", "None", "]", "*", "num_decoder_layer", "# \u6bcf\u4e00\u4e2a\u5143\u7d20 bsz x decode_length x key_dim", "\n", "self", ".", "decoder_prev_value", "=", "[", "None", "]", "*", "num_decoder_layer", "# \u6bcf\u4e00\u4e2a\u5143\u7d20 bsz x decode_length x key_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.TransformerState.reorder_state": [[132, 138], ["seq2seq_state.State.reorder_state", "seq2seq_state.TransformerState._reorder_state", "seq2seq_state.TransformerState._reorder_state", "seq2seq_state.TransformerState._reorder_state", "seq2seq_state.TransformerState._reorder_state"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.TransformerState.reorder_state", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State._reorder_state", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State._reorder_state", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State._reorder_state", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.State._reorder_state"], ["", "def", "reorder_state", "(", "self", ",", "indices", ":", "torch", ".", "LongTensor", ")", ":", "\n", "        ", "super", "(", ")", ".", "reorder_state", "(", "indices", ")", "\n", "self", ".", "encoder_key", "=", "self", ".", "_reorder_state", "(", "self", ".", "encoder_key", ",", "indices", ")", "\n", "self", ".", "encoder_value", "=", "self", ".", "_reorder_state", "(", "self", ".", "encoder_value", ",", "indices", ")", "\n", "self", ".", "decoder_prev_key", "=", "self", ".", "_reorder_state", "(", "self", ".", "decoder_prev_key", ",", "indices", ")", "\n", "self", ".", "decoder_prev_value", "=", "self", ".", "_reorder_state", "(", "self", ".", "decoder_prev_value", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.TransformerState.decode_length": [[139, 144], ["seq2seq_state.TransformerState.decoder_prev_key[].size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "@", "property", "\n", "def", "decode_length", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "decoder_prev_key", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "decoder_prev_key", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.utils.viterbi_decode": [[9, 80], ["logits.size", "logits.new_zeros", "range", "torch.arange", "torch.arange", "logits.new_empty", "vscore.max", "range", "ans.transpose.transpose", "transitions.size", "logits.transpose", "logits.new_ones().eq.transpose().data.eq", "logits.new_ones().eq", "transitions[].view", "vscore.view", "logits[].view", "score.max", "transitions[].view", "logits.new_ones().eq.long().sum", "enumerate", "transitions.size", "RuntimeError", "best_score.masked_fill", "vscore.masked_fill", "lens.view", "torch.arange.view", "paths.append", "logits.new_ones", "mask[].eq().view", "mask[].view", "logits.new_ones().eq.long", "ans[].tolist", "logits.new_ones().eq.transpose", "mask[].eq"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["from", ".", ".", "core", ".", "vocabulary", "import", "Vocabulary", "\n", "\n", "__all__", "=", "[", "\n", "'get_embeddings'", ",", "\n", "'get_sinusoid_encoding_table'", "\n", "]", "\n", "\n", "\n", "def", "_construct_char_vocab_from_vocab", "(", "vocab", ":", "Vocabulary", ",", "min_freq", ":", "int", "=", "1", ",", "include_word_start_end", "=", "True", ")", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2aword\u7684vocabulary\u751f\u6210character\u7684vocabulary.\n\n    :param vocab: \u4ecevocab\n    :param min_freq:\n    :param include_word_start_end: \u662f\u5426\u9700\u8981\u5305\u542b\u7279\u6b8a\u7684<bow>\u548c<eos>\n    :return:\n    \"\"\"", "\n", "char_vocab", "=", "Vocabulary", "(", "min_freq", "=", "min_freq", ")", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "        ", "if", "not", "vocab", ".", "_is_word_no_create_entry", "(", "word", ")", ":", "\n", "            ", "char_vocab", ".", "add_word_lst", "(", "list", "(", "word", ")", ")", "\n", "", "", "if", "include_word_start_end", ":", "\n", "        ", "char_vocab", ".", "add_word_lst", "(", "[", "'<bow>'", ",", "'<eow>'", "]", ")", "\n", "", "return", "char_vocab", "\n", "\n", "\n", "", "def", "get_embeddings", "(", "init_embed", ",", "padding_idx", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    \u6839\u636e\u8f93\u5165\u7684init_embed\u8fd4\u56deEmbedding\u5bf9\u8c61\u3002\u5982\u679c\u8f93\u5165\u662ftuple, \u5219\u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2ann.Embedding; \u5982\u679c\u8f93\u5165\u662fnumpy.ndarray, \u5219\u6309\u7167ndarray\n    \u7684\u503c\u5c06nn.Embedding\u521d\u59cb\u5316; \u5982\u679c\u8f93\u5165\u662ftorch.Tensor, \u5219\u6309\u8be5\u503c\u521d\u59cb\u5316nn.Embedding; \u5982\u679c\u8f93\u5165\u662ffastNLP\u4e2d\u7684embedding\u5c06\u4e0d\u505a\u5904\u7406\n    \u8fd4\u56de\u539f\u5bf9\u8c61\u3002\n\n    :param init_embed: \u53ef\u4ee5\u662f tuple:(num_embedings, embedding_dim), \u5373embedding\u7684\u5927\u5c0f\u548c\u6bcf\u4e2a\u8bcd\u7684\u7ef4\u5ea6;\u4e5f\u53ef\u4ee5\u4f20\u5165\n        nn.Embedding \u5bf9\u8c61, \u6b64\u65f6\u5c31\u4ee5\u4f20\u5165\u7684\u5bf9\u8c61\u4f5c\u4e3aembedding; \u4f20\u5165np.ndarray\u4e5f\u884c\uff0c\u5c06\u4f7f\u7528\u4f20\u5165\u7684ndarray\u4f5c\u4e3a\u4f5c\u4e3aEmbedding\u521d\u59cb\u5316;\n        \u4f20\u5165torch.Tensor, \u5c06\u4f7f\u7528\u4f20\u5165\u7684\u503c\u4f5c\u4e3aEmbedding\u521d\u59cb\u5316\u3002\n    :param padding_idx: \u5f53\u4f20\u5165tuple\u65f6\uff0cpadding_idx\u6709\u6548\n    :return nn.Embedding:  embeddings\n    \"\"\"", "\n", "if", "isinstance", "(", "init_embed", ",", "tuple", ")", ":", "\n", "        ", "res", "=", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "init_embed", "[", "0", "]", ",", "embedding_dim", "=", "init_embed", "[", "1", "]", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "res", ".", "weight", ".", "data", ",", "a", "=", "-", "np", ".", "sqrt", "(", "3", "/", "res", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ")", ",", "\n", "b", "=", "np", ".", "sqrt", "(", "3", "/", "res", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "res", "=", "init_embed", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "res", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "init_embed", ",", "freeze", "=", "False", ")", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "init_embed", "=", "torch", ".", "tensor", "(", "init_embed", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "res", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "init_embed", ",", "freeze", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'invalid init_embed type: {}'", ".", "format", "(", "(", "type", "(", "init_embed", ")", ")", ")", ")", "\n", "", "return", "res", "\n", "\n", "\n", "", "def", "get_sinusoid_encoding_table", "(", "n_position", ",", "d_hid", ",", "padding_idx", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    sinusoid\u7684embedding\uff0c\u5176\u4e2dposition\u7684\u8868\u793a\u4e2d\uff0c\u5076\u6570\u7ef4(0,2,4,...)\u662fsin, \u5947\u6570(1,3,5...)\u662fcos\n\n    :param int n_position: \u4e00\u5171\u591a\u5c11\u4e2aposition\n    :param int d_hid: \u591a\u5c11\u7ef4\u5ea6\uff0c\u9700\u8981\u4e3a\u5076\u6570\n    :param padding_idx:\n    :return: torch.FloatTensor, shape\u4e3an_position x d_hid\n    \"\"\"", "\n", "\n", "def", "cal_angle", "(", "position", ",", "hid_idx", ")", ":", "\n", "        ", "return", "position", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_idx", "//", "2", ")", "/", "d_hid", ")", "\n", "\n", "", "def", "get_posi_angle_vec", "(", "position", ")", ":", "\n", "        ", "return", "[", "cal_angle", "(", "position", ",", "hid_j", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.SequenceGenerator.__init__": [[20, 62], ["functools.partial", "functools.partial"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "decoder", ":", "Seq2SeqDecoder", ",", "max_length", "=", "20", ",", "max_len_a", "=", "0.0", ",", "num_beams", "=", "1", ",", "\n", "do_sample", "=", "True", ",", "temperature", "=", "1.0", ",", "top_k", "=", "50", ",", "top_p", "=", "1.0", ",", "bos_token_id", "=", "None", ",", "eos_token_id", "=", "None", ",", "\n", "repetition_penalty", "=", "1", ",", "length_penalty", "=", "1.0", ",", "pad_token_id", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n\n        :param Seq2SeqDecoder decoder: Decoder\u5bf9\u8c61\n        :param int max_length: \u751f\u6210\u53e5\u5b50\u7684\u6700\u5927\u957f\u5ea6, \u6bcf\u53e5\u8bdd\u7684decode\u957f\u5ea6\u4e3amax_length + max_len_a*src_len\n        :param float max_len_a: \u6bcf\u53e5\u8bdd\u7684decode\u957f\u5ea6\u4e3amax_length + max_len_a*src_len\u3002 \u5982\u679c\u4e0d\u4e3a0\uff0c\u9700\u8981\u4fdd\u8bc1State\u4e2d\u5305\u542bencoder_mask\n        :param int num_beams: beam search\u7684\u5927\u5c0f\n        :param bool do_sample: \u662f\u5426\u901a\u8fc7\u91c7\u6837\u7684\u65b9\u5f0f\u751f\u6210\n        :param float temperature: \u53ea\u6709\u5728do_sample\u4e3aTrue\u624d\u6709\u610f\u4e49\n        :param int top_k: \u53ea\u4ecetop_k\u4e2d\u91c7\u6837\n        :param float top_p: \u53ea\u4ecetop_p\u7684token\u4e2d\u91c7\u6837\uff0cnucles sample\n        :param int,None bos_token_id: \u53e5\u5b50\u5f00\u5934\u7684token id\n        :param int,None eos_token_id: \u53e5\u5b50\u7ed3\u675f\u7684token id\n        :param float repetition_penalty: \u591a\u5927\u7a0b\u5ea6\u4e0a\u60e9\u7f5a\u91cd\u590d\u7684token\n        :param float length_penalty: \u5bf9\u957f\u5ea6\u7684\u60e9\u7f5a\uff0c\u5c0f\u4e8e1\u9f13\u52b1\u957f\u53e5\uff0c\u5927\u4e8e1\u9f13\u52b1\u77ed\u5267\n        :param int pad_token_id: \u5f53\u67d0\u53e5\u8bdd\u751f\u6210\u7ed3\u675f\u4e4b\u540e\uff0c\u4e4b\u540e\u751f\u6210\u7684\u5185\u5bb9\u7528pad_token_id\u8865\u5145\n        \"\"\"", "\n", "if", "do_sample", ":", "\n", "            ", "self", ".", "generate_func", "=", "partial", "(", "sample_generate", ",", "decoder", "=", "decoder", ",", "max_length", "=", "max_length", ",", "max_len_a", "=", "max_len_a", ",", "\n", "num_beams", "=", "num_beams", ",", "\n", "temperature", "=", "temperature", ",", "top_k", "=", "top_k", ",", "top_p", "=", "top_p", ",", "bos_token_id", "=", "bos_token_id", ",", "\n", "eos_token_id", "=", "eos_token_id", ",", "repetition_penalty", "=", "repetition_penalty", ",", "\n", "length_penalty", "=", "length_penalty", ",", "pad_token_id", "=", "pad_token_id", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "generate_func", "=", "partial", "(", "greedy_generate", ",", "decoder", "=", "decoder", ",", "max_length", "=", "max_length", ",", "max_len_a", "=", "max_len_a", ",", "\n", "num_beams", "=", "num_beams", ",", "\n", "bos_token_id", "=", "bos_token_id", ",", "eos_token_id", "=", "eos_token_id", ",", "\n", "repetition_penalty", "=", "repetition_penalty", ",", "\n", "length_penalty", "=", "length_penalty", ",", "pad_token_id", "=", "pad_token_id", ")", "\n", "", "self", ".", "do_sample", "=", "do_sample", "\n", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "num_beams", "=", "num_beams", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "top_k", "=", "top_k", "\n", "self", ".", "top_p", "=", "top_p", "\n", "self", ".", "bos_token_id", "=", "bos_token_id", "\n", "self", ".", "eos_token_id", "=", "eos_token_id", "\n", "self", ".", "repetition_penalty", "=", "repetition_penalty", "\n", "self", ".", "length_penalty", "=", "length_penalty", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.SequenceGenerator.generate": [[63, 73], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "seq2seq_generator.SequenceGenerator.generate_func"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate", "(", "self", ",", "state", ",", "tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :param State state: encoder\u7ed3\u679c\u7684State, \u662f\u4e0eDecoder\u914d\u5957\u662f\u7528\u7684\n        :param torch.LongTensor,None tokens: batch_size x length, \u5f00\u59cb\u7684token\n        :return: bsz x max_length' \u751f\u6210\u7684token\u5e8f\u5217\u3002\u5982\u679ceos_token_id\u4e0d\u4e3aNone, \u6bcf\u4e2asequence\u7684\u7ed3\u5c3e\u4e00\u5b9a\u662feos_token_id\n        \"\"\"", "\n", "\n", "return", "self", ".", "generate_func", "(", "tokens", "=", "tokens", ",", "state", "=", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.BeamHypotheses.__init__": [[435, 445], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_beams", ",", "max_length", ",", "length_penalty", ",", "early_stopping", ")", ":", "\n", "        ", "\"\"\"\n        Initialize n-best list of hypotheses.\n        \"\"\"", "\n", "self", ".", "max_length", "=", "max_length", "-", "1", "# ignoring bos_token", "\n", "self", ".", "length_penalty", "=", "length_penalty", "\n", "self", ".", "early_stopping", "=", "early_stopping", "\n", "self", ".", "num_beams", "=", "num_beams", "\n", "self", ".", "hyp", "=", "[", "]", "\n", "self", ".", "worst_score", "=", "1e9", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.BeamHypotheses.__len__": [[446, 451], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Number of hypotheses in the list.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "hyp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.BeamHypotheses.add": [[452, 465], ["seq2seq_generator.BeamHypotheses.hyp.append", "len", "len", "len", "sorted", "min", "enumerate"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "add", "(", "self", ",", "hyp", ",", "sum_logprobs", ")", ":", "\n", "        ", "\"\"\"\n        Add a new hypothesis to the list.\n        \"\"\"", "\n", "score", "=", "sum_logprobs", "/", "len", "(", "hyp", ")", "**", "self", ".", "length_penalty", "\n", "if", "len", "(", "self", ")", "<", "self", ".", "num_beams", "or", "score", ">", "self", ".", "worst_score", ":", "\n", "            ", "self", ".", "hyp", ".", "append", "(", "(", "score", ",", "hyp", ")", ")", "\n", "if", "len", "(", "self", ")", ">", "self", ".", "num_beams", ":", "\n", "                ", "sorted_scores", "=", "sorted", "(", "[", "(", "s", ",", "idx", ")", "for", "idx", ",", "(", "s", ",", "_", ")", "in", "enumerate", "(", "self", ".", "hyp", ")", "]", ")", "\n", "del", "self", ".", "hyp", "[", "sorted_scores", "[", "0", "]", "[", "1", "]", "]", "\n", "self", ".", "worst_score", "=", "sorted_scores", "[", "1", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "worst_score", "=", "min", "(", "score", ",", "self", ".", "worst_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.BeamHypotheses.is_done": [[466, 477], ["len"], "methods", ["None"], ["", "", "", "def", "is_done", "(", "self", ",", "best_sum_logprobs", ")", ":", "\n", "        ", "\"\"\"\n        If there are enough hypotheses and that none of the hypotheses being generated\n        can become better than the worst one in the heap, then we are done with this sentence.\n        \"\"\"", "\n", "if", "len", "(", "self", ")", "<", "self", ".", "num_beams", ":", "\n", "            ", "return", "False", "\n", "", "elif", "self", ".", "early_stopping", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "worst_score", ">=", "best_sum_logprobs", "/", "self", ".", "max_length", "**", "self", ".", "length_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.greedy_generate": [[75, 109], ["torch.no_grad", "torch.no_grad", "seq2seq_generator._no_beam_search_generate", "seq2seq_generator._beam_search_generate"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator._no_beam_search_generate", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator._beam_search_generate"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "greedy_generate", "(", "decoder", ",", "tokens", "=", "None", ",", "state", "=", "None", ",", "max_length", "=", "20", ",", "max_len_a", "=", "0.0", ",", "num_beams", "=", "1", ",", "\n", "bos_token_id", "=", "None", ",", "eos_token_id", "=", "None", ",", "pad_token_id", "=", "0", ",", "\n", "repetition_penalty", "=", "1", ",", "length_penalty", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    \u8d2a\u5a6a\u5730\u641c\u7d22\u53e5\u5b50\n\n    :param Decoder decoder: Decoder\u5bf9\u8c61\n    :param torch.LongTensor tokens: batch_size x len, decode\u7684\u8f93\u5165\u503c\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u81ea\u52a8\u4ecebos_token_id\u5f00\u59cb\u751f\u6210\n    :param State state: \u5e94\u8be5\u5305\u542bencoder\u7684\u4e00\u4e9b\u8f93\u51fa\u3002\n    :param int max_length: \u751f\u6210\u53e5\u5b50\u7684\u6700\u5927\u957f\u5ea6, \u6bcf\u53e5\u8bdd\u7684decode\u957f\u5ea6\u4e3amax_length + max_len_a*src_len\n    :param float max_len_a: \u6bcf\u53e5\u8bdd\u7684decode\u957f\u5ea6\u4e3amax_length + max_len_a*src_len\u3002 \u5982\u679c\u4e0d\u4e3a0\uff0c\u9700\u8981\u4fdd\u8bc1State\u4e2d\u5305\u542bencoder_mask\n    :param int num_beams: \u4f7f\u7528\u591a\u5927\u7684beam\u8fdb\u884c\u89e3\u7801\u3002\n    :param int bos_token_id: \u5982\u679ctokens\u4f20\u5165\u4e3aNone\uff0c\u5219\u4f7f\u7528bos_token_id\u5f00\u59cb\u5f80\u540e\u89e3\u7801\u3002\n    :param int eos_token_id: \u7ed3\u675f\u7684token\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4e00\u5b9a\u4f1a\u89e3\u7801\u5230max_length\u8fd9\u4e48\u957f\u3002\n    :param int pad_token_id: pad\u7684token id\n    :param float repetition_penalty: \u5bf9\u91cd\u590d\u51fa\u73b0\u7684token\u591a\u5927\u7684\u60e9\u7f5a\u3002\n    :param float length_penalty: \u5bf9\u6bcf\u4e2atoken\uff08\u9664\u4e86eos\uff09\u6309\u7167\u957f\u5ea6\u8fdb\u884c\u4e00\u5b9a\u7684\u60e9\u7f5a\u3002\n    :return:\n    \"\"\"", "\n", "if", "num_beams", "==", "1", ":", "\n", "        ", "token_ids", "=", "_no_beam_search_generate", "(", "decoder", ",", "tokens", "=", "tokens", ",", "state", "=", "state", ",", "max_length", "=", "max_length", ",", "max_len_a", "=", "max_len_a", ",", "\n", "temperature", "=", "1", ",", "top_k", "=", "50", ",", "top_p", "=", "1", ",", "\n", "bos_token_id", "=", "bos_token_id", ",", "eos_token_id", "=", "eos_token_id", ",", "do_sample", "=", "False", ",", "\n", "repetition_penalty", "=", "repetition_penalty", ",", "length_penalty", "=", "length_penalty", ",", "\n", "pad_token_id", "=", "pad_token_id", ")", "\n", "", "else", ":", "\n", "        ", "token_ids", "=", "_beam_search_generate", "(", "decoder", ",", "tokens", "=", "tokens", ",", "state", "=", "state", ",", "max_length", "=", "max_length", ",", "max_len_a", "=", "max_len_a", ",", "\n", "num_beams", "=", "num_beams", ",", "temperature", "=", "1", ",", "top_k", "=", "50", ",", "top_p", "=", "1", ",", "\n", "bos_token_id", "=", "bos_token_id", ",", "eos_token_id", "=", "eos_token_id", ",", "do_sample", "=", "False", ",", "\n", "repetition_penalty", "=", "repetition_penalty", ",", "length_penalty", "=", "length_penalty", ",", "\n", "pad_token_id", "=", "pad_token_id", ")", "\n", "\n", "", "return", "token_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.sample_generate": [[111, 148], ["torch.no_grad", "torch.no_grad", "seq2seq_generator._no_beam_search_generate", "seq2seq_generator._beam_search_generate"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator._no_beam_search_generate", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator._beam_search_generate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample_generate", "(", "decoder", ",", "tokens", "=", "None", ",", "state", "=", "None", ",", "max_length", "=", "20", ",", "max_len_a", "=", "0.0", ",", "num_beams", "=", "1", ",", "temperature", "=", "1.0", ",", "top_k", "=", "50", ",", "\n", "top_p", "=", "1.0", ",", "bos_token_id", "=", "None", ",", "eos_token_id", "=", "None", ",", "pad_token_id", "=", "0", ",", "repetition_penalty", "=", "1.0", ",", "\n", "length_penalty", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    \u4f7f\u7528\u91c7\u6837\u7684\u65b9\u6cd5\u751f\u6210\u53e5\u5b50\n\n    :param Decoder decoder: Decoder\u5bf9\u8c61\n    :param torch.LongTensor tokens: batch_size x len, decode\u7684\u8f93\u5165\u503c\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u81ea\u52a8\u4ecebos_token_id\u5f00\u59cb\u751f\u6210\n    :param State state: \u5e94\u8be5\u5305\u542bencoder\u7684\u4e00\u4e9b\u8f93\u51fa\u3002\n    :param int max_length: \u751f\u6210\u53e5\u5b50\u7684\u6700\u5927\u957f\u5ea6, \u6bcf\u53e5\u8bdd\u7684decode\u957f\u5ea6\u4e3amax_length + max_len_a*src_len\n    :param float max_len_a: \u6bcf\u53e5\u8bdd\u7684decode\u957f\u5ea6\u4e3amax_length + max_len_a*src_len\u3002 \u5982\u679c\u4e0d\u4e3a0\uff0c\u9700\u8981\u4fdd\u8bc1State\u4e2d\u5305\u542bencoder_mask\n    :param int num_beam: \u4f7f\u7528\u591a\u5927\u7684beam\u8fdb\u884c\u89e3\u7801\u3002\n    :param float temperature: \u91c7\u6837\u65f6\u7684\u9000\u706b\u5927\u5c0f\n    :param int top_k: \u53ea\u5728top_k\u7684sample\u91cc\u9762\u91c7\u6837\n    :param float top_p: \u4ecb\u4e8e0,1\u7684\u503c\u3002\n    :param int bos_token_id: \u5982\u679ctokens\u4f20\u5165\u4e3aNone\uff0c\u5219\u4f7f\u7528bos_token_id\u5f00\u59cb\u5f80\u540e\u89e3\u7801\u3002\n    :param int eos_token_id: \u7ed3\u675f\u7684token\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4e00\u5b9a\u4f1a\u89e3\u7801\u5230max_length\u8fd9\u4e48\u957f\u3002\n    :param int pad_token_id: pad\u7684token id\n    :param float repetition_penalty: \u5bf9\u91cd\u590d\u51fa\u73b0\u7684token\u591a\u5927\u7684\u60e9\u7f5a\u3002\n    :param float length_penalty: \u5bf9\u6bcf\u4e2atoken\uff08\u9664\u4e86eos\uff09\u6309\u7167\u957f\u5ea6\u8fdb\u884c\u4e00\u5b9a\u7684\u60e9\u7f5a\u3002\n    :return:\n    \"\"\"", "\n", "# \u6bcf\u4e2a\u4f4d\u7f6e\u5728\u751f\u6210\u7684\u65f6\u5019\u4f1asample\u751f\u6210", "\n", "if", "num_beams", "==", "1", ":", "\n", "        ", "token_ids", "=", "_no_beam_search_generate", "(", "decoder", ",", "tokens", "=", "tokens", ",", "state", "=", "state", ",", "max_length", "=", "max_length", ",", "max_len_a", "=", "max_len_a", ",", "\n", "temperature", "=", "temperature", ",", "top_k", "=", "top_k", ",", "top_p", "=", "top_p", ",", "\n", "bos_token_id", "=", "bos_token_id", ",", "eos_token_id", "=", "eos_token_id", ",", "do_sample", "=", "True", ",", "\n", "repetition_penalty", "=", "repetition_penalty", ",", "length_penalty", "=", "length_penalty", ",", "\n", "pad_token_id", "=", "pad_token_id", ")", "\n", "", "else", ":", "\n", "        ", "token_ids", "=", "_beam_search_generate", "(", "decoder", ",", "tokens", "=", "tokens", ",", "state", "=", "state", ",", "max_length", "=", "max_length", ",", "max_len_a", "=", "max_len_a", ",", "\n", "num_beams", "=", "num_beams", ",", "temperature", "=", "temperature", ",", "top_k", "=", "top_k", ",", "top_p", "=", "top_p", ",", "\n", "bos_token_id", "=", "bos_token_id", ",", "eos_token_id", "=", "eos_token_id", ",", "do_sample", "=", "True", ",", "\n", "repetition_penalty", "=", "repetition_penalty", ",", "length_penalty", "=", "length_penalty", ",", "\n", "pad_token_id", "=", "pad_token_id", ")", "\n", "", "return", "token_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator._no_beam_search_generate": [[150, 240], ["core.utils._get_model_device", "next_tokens.unsqueeze.size", "decoder.decode", "top_k_top_p_filtering.argmax", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.new_zeros().eq", "torch.full().to", "torch.full().to", "tokens.new_full.max().item", "decoder.decode", "next_tokens.masked_fill.masked_fill", "next_tokens.masked_fill.unsqueeze", "torch.cat", "torch.cat", "next_tokens.masked_fill.eq", "dones.__or__.__or__", "RuntimeError", "RuntimeError", "torch.cat.new_zeros", "next_tokens.unsqueeze.new_full", "next_tokens.unsqueeze.new_full", "top_k_top_p_filtering.gather", "scores.gather.lt().float", "token_scores.lt().float.eq().float", "top_k_top_p_filtering.scatter_", "top_k_top_p_filtering.new_ones", "eos_mask.unsqueeze().eq.unsqueeze().eq", "top_k_top_p_filtering.masked_scatter", "seq2seq_generator.top_k_top_p_filtering", "torch.multinomial().squeeze", "torch.multinomial().squeeze", "torch.argmax", "torch.argmax", "next_tokens.masked_fill.masked_fill", "dones.__or__.min", "torch.full", "torch.full", "tokens.new_full.max", "state.encoder_mask.new_ones().long", "top_k_top_p_filtering.size", "torch.softmax", "tokens.new_full.eq", "next_tokens.unsqueeze.size", "next_tokens.unsqueeze.size", "scores.gather.lt", "token_scores.lt().float.eq", "eos_mask.unsqueeze().eq.unsqueeze", "torch.multinomial", "torch.multinomial", "state.encoder_mask.new_ones", "state.encoder_mask.sum().float", "state.encoder_mask.size", "state.encoder_mask.sum"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_model_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.top_k_top_p_filtering", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "_no_beam_search_generate", "(", "decoder", ":", "Seq2SeqDecoder", ",", "state", ",", "tokens", "=", "None", ",", "max_length", "=", "20", ",", "max_len_a", "=", "0.0", ",", "temperature", "=", "1.0", ",", "top_k", "=", "50", ",", "\n", "top_p", "=", "1.0", ",", "bos_token_id", "=", "None", ",", "eos_token_id", "=", "None", ",", "do_sample", "=", "True", ",", "\n", "repetition_penalty", "=", "1.0", ",", "length_penalty", "=", "1.0", ",", "pad_token_id", "=", "0", ")", ":", "\n", "    ", "device", "=", "_get_model_device", "(", "decoder", ")", "\n", "if", "tokens", "is", "None", ":", "\n", "        ", "if", "bos_token_id", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"You have to specify either `tokens` or `bos_token_id`.\"", ")", "\n", "", "batch_size", "=", "state", ".", "num_samples", "\n", "if", "batch_size", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Cannot infer the number of samples from `state`.\"", ")", "\n", "", "tokens", "=", "torch", ".", "full", "(", "[", "batch_size", ",", "1", "]", ",", "fill_value", "=", "bos_token_id", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "", "batch_size", "=", "tokens", ".", "size", "(", "0", ")", "\n", "if", "state", ".", "num_samples", ":", "\n", "        ", "assert", "state", ".", "num_samples", "==", "batch_size", ",", "\"The number of samples in `tokens` and `state` should match.\"", "\n", "\n", "", "if", "eos_token_id", "is", "None", ":", "\n", "        ", "_eos_token_id", "=", "-", "1", "\n", "", "else", ":", "\n", "        ", "_eos_token_id", "=", "eos_token_id", "\n", "\n", "", "scores", "=", "decoder", ".", "decode", "(", "tokens", "=", "tokens", ",", "state", "=", "state", ")", "# \u4e3b\u8981\u662f\u4e3a\u4e86update state", "\n", "next_tokens", "=", "scores", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "token_ids", "=", "torch", ".", "cat", "(", "[", "tokens", ",", "next_tokens", "]", ",", "dim", "=", "1", ")", "\n", "cur_len", "=", "token_ids", ".", "size", "(", "1", ")", "\n", "dones", "=", "token_ids", ".", "new_zeros", "(", "batch_size", ")", ".", "eq", "(", "1", ")", "\n", "# tokens = tokens[:, -1:]", "\n", "\n", "if", "max_len_a", "!=", "0", ":", "\n", "# (bsz x num_beams, )", "\n", "        ", "if", "state", ".", "encoder_mask", "is", "not", "None", ":", "\n", "            ", "max_lengths", "=", "(", "state", ".", "encoder_mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", "*", "max_len_a", ")", ".", "long", "(", ")", "+", "max_length", "\n", "", "else", ":", "\n", "            ", "max_lengths", "=", "tokens", ".", "new_full", "(", "(", "tokens", ".", "size", "(", "0", ")", ",", ")", ",", "fill_value", "=", "max_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "real_max_length", "=", "max_lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "real_max_length", "=", "max_length", "\n", "if", "state", ".", "encoder_mask", "is", "not", "None", ":", "\n", "            ", "max_lengths", "=", "state", ".", "encoder_mask", ".", "new_ones", "(", "state", ".", "encoder_mask", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", "*", "max_length", "\n", "", "else", ":", "\n", "            ", "max_lengths", "=", "tokens", ".", "new_full", "(", "(", "tokens", ".", "size", "(", "0", ")", ",", ")", ",", "fill_value", "=", "max_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "", "while", "cur_len", "<", "real_max_length", ":", "\n", "        ", "scores", "=", "decoder", ".", "decode", "(", "tokens", "=", "token_ids", ",", "state", "=", "state", ")", "# batch_size x vocab_size", "\n", "\n", "if", "repetition_penalty", "!=", "1.0", ":", "\n", "            ", "token_scores", "=", "scores", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "token_ids", ")", "\n", "lt_zero_mask", "=", "token_scores", ".", "lt", "(", "0", ")", ".", "float", "(", ")", "\n", "ge_zero_mask", "=", "lt_zero_mask", ".", "eq", "(", "0", ")", ".", "float", "(", ")", "\n", "token_scores", "=", "lt_zero_mask", "*", "repetition_penalty", "*", "token_scores", "+", "ge_zero_mask", "/", "repetition_penalty", "*", "token_scores", "\n", "scores", ".", "scatter_", "(", "dim", "=", "1", ",", "index", "=", "token_ids", ",", "src", "=", "token_scores", ")", "\n", "\n", "", "if", "eos_token_id", "is", "not", "None", "and", "length_penalty", "!=", "1.0", ":", "\n", "            ", "token_scores", "=", "scores", "/", "cur_len", "**", "length_penalty", "# batch_size x vocab_size", "\n", "eos_mask", "=", "scores", ".", "new_ones", "(", "scores", ".", "size", "(", "1", ")", ")", "\n", "eos_mask", "[", "eos_token_id", "]", "=", "0", "\n", "eos_mask", "=", "eos_mask", ".", "unsqueeze", "(", "0", ")", ".", "eq", "(", "1", ")", "\n", "scores", "=", "scores", ".", "masked_scatter", "(", "eos_mask", ",", "token_scores", ")", "# \u4e5f\u5373\u9664\u4e86eos\uff0c\u5176\u4ed6\u8bcd\u7684\u5206\u6570\u7ecf\u8fc7\u4e86\u653e\u5927/\u7f29\u5c0f", "\n", "\n", "", "if", "do_sample", ":", "\n", "            ", "if", "temperature", ">", "0", "and", "temperature", "!=", "1", ":", "\n", "                ", "scores", "=", "scores", "/", "temperature", "\n", "\n", "", "scores", "=", "top_k_top_p_filtering", "(", "scores", ",", "top_k", ",", "top_p", ",", "min_tokens_to_keep", "=", "2", ")", "\n", "# \u52a0\u4e0a1e-12\u662f\u4e3a\u4e86\u907f\u514dhttps://github.com/pytorch/pytorch/pull/27523", "\n", "probs", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "+", "1e-12", "\n", "\n", "next_tokens", "=", "torch", ".", "multinomial", "(", "probs", ",", "num_samples", "=", "1", ")", ".", "squeeze", "(", "1", ")", "# batch_size", "\n", "", "else", ":", "\n", "            ", "next_tokens", "=", "torch", ".", "argmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "# batch_size", "\n", "\n", "# \u5982\u679c\u5df2\u7ecf\u8fbe\u5230\u5bf9\u5e94\u7684sequence\u957f\u5ea6\u4e86\uff0c\u5c31\u76f4\u63a5\u586b\u4e3aeos\u4e86", "\n", "", "if", "_eos_token_id", "!=", "-", "1", ":", "\n", "            ", "next_tokens", "=", "next_tokens", ".", "masked_fill", "(", "max_lengths", ".", "eq", "(", "cur_len", "+", "1", ")", ",", "_eos_token_id", ")", "\n", "", "next_tokens", "=", "next_tokens", ".", "masked_fill", "(", "dones", ",", "pad_token_id", ")", "# \u5bf9\u5df2\u7ecf\u641c\u7d22\u5b8c\u6210\u7684sample\u505apadding", "\n", "tokens", "=", "next_tokens", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "token_ids", "=", "torch", ".", "cat", "(", "[", "token_ids", ",", "tokens", "]", ",", "dim", "=", "-", "1", ")", "# batch_size x max_len", "\n", "\n", "end_mask", "=", "next_tokens", ".", "eq", "(", "_eos_token_id", ")", "\n", "dones", "=", "dones", ".", "__or__", "(", "end_mask", ")", "\n", "cur_len", "+=", "1", "\n", "\n", "if", "dones", ".", "min", "(", ")", "==", "1", ":", "\n", "            ", "break", "\n", "\n", "# if eos_token_id is not None:", "\n", "#     tokens.scatter(index=max_lengths[:, None], dim=1, value=eos_token_id)  # \u5c06\u6700\u5927\u957f\u5ea6\u4f4d\u7f6e\u8bbe\u7f6e\u4e3aeos", "\n", "# if cur_len == max_length:", "\n", "#     token_ids[:, -1].masked_fill_(~dones, eos_token_id)  # \u82e5\u5230\u6700\u957f\u957f\u5ea6\u4ecd\u672a\u5230EOS\uff0c\u5219\u5f3a\u5236\u5c06\u6700\u540e\u4e00\u4e2a\u8bcd\u66ff\u6362\u6210eos", "\n", "", "", "return", "token_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator._beam_search_generate": [[242, 432], ["core.utils._get_model_device", "torch.full().to.size", "decoder.decode", "F.log_softmax.size", "torch.arange().to", "torch.arange().to", "indices.repeat_interleave.repeat_interleave", "state.reorder_state", "torch.full().to.index_select", "torch.cat", "torch.cat", "logits.gather.view", "torch.cat.size", "torch.cat.new", "enumerate", "torch.cat.new().fill_", "enumerate", "torch.full().to", "torch.full().to", "torch.multinomial", "torch.multinomial", "probs.log", "probs.log.gather", "torch.log_softmax", "torch.topk", "torch.topk", "tokens.new_full.max().item", "seq2seq_generator.BeamHypotheses", "decoder.decode", "logits.gather.sort", "_tokens.gather.gather", "from_which_beam.gather.gather", "_tokens.gather.ne", "next_tokens.ne.cumsum().le", "next_tokens.ne.__and__", "_tokens.gather.masked_select().view", "from_which_beam.gather.masked_select().view", "logits.gather.masked_select().view", "next_scores.masked_select().view.view", "state.reorder_state", "torch.cat", "torch.cat", "range", "all", "len", "best.append", "RuntimeError", "RuntimeError", "torch.softmax", "torch.arange", "torch.arange", "_tokens.gather.view", "torch.full().to.new_full", "torch.full().to.new_full", "range", "F.log_softmax.gather", "scores.gather.lt().float", "token_scores.lt().float.eq().float", "F.log_softmax.scatter_", "tokens.new_full.eq", "torch.where", "torch.where", "seq2seq_generator.top_k_top_p_filtering", "torch.multinomial", "torch.multinomial", "probs.log", "probs.log.gather", "_scores.view.view", "_scores.view.topk", "_tokens.view.view", "_tokens.view.gather", "torch.log_softmax", "_scores.view.view", "torch.topk", "torch.topk", "torch.arange().to().repeat_interleave", "torch.arange().to().repeat_interleave", "torch.arange().to().repeat", "torch.arange().to().repeat", "from_which_beam[].reshape", "next_tokens[].eq", "next_tokens[].eq.sum().gt", "torch.cat", "torch.cat", "zip", "max", "torch.cat", "torch.cat", "torch.cat.new", "torch.full", "torch.full", "tokens.new_full.max", "state.encoder_mask.new_ones().long", "torch.softmax", "next_tokens.ne.cumsum", "_tokens.gather.masked_select", "from_which_beam.gather.masked_select", "logits.gather.masked_select", "next_tokens[].eq.nonzero", "torch.arange().to().repeat_interleave.tolist", "torch.arange().to().repeat.tolist", "from_which_beam[].reshape.tolist", "torch.cat.index_select", "hypos[].is_done", "token_ids.new.max().item", "torch.full().to.size", "torch.full().to.size", "scores.gather.lt", "token_scores.lt().float.eq", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "next_tokens[].eq.sum", "from_which_beam.gather.view", "next_scores[].item", "next_scores[].item", "state.encoder_mask.new_ones", "torch.arange", "torch.arange", "hypos[].add", "hypos[].add", "torch.cat.new_ones", "token_ids.new.max", "state.encoder_mask.sum().float", "state.encoder_mask.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "_token_ids[].clone", "_token_ids[].clone", "state.encoder_mask.sum"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_model_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.TransformerState.reorder_state", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_state.TransformerState.reorder_state", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.top_k_top_p_filtering", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.BeamHypotheses.is_done", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "_beam_search_generate", "(", "decoder", ":", "Seq2SeqDecoder", ",", "tokens", "=", "None", ",", "state", "=", "None", ",", "max_length", "=", "20", ",", "max_len_a", "=", "0.0", ",", "num_beams", "=", "4", ",", "temperature", "=", "1.0", ",", "\n", "top_k", "=", "50", ",", "top_p", "=", "1.0", ",", "bos_token_id", "=", "None", ",", "eos_token_id", "=", "None", ",", "do_sample", "=", "True", ",", "\n", "repetition_penalty", "=", "1.0", ",", "length_penalty", "=", "None", ",", "pad_token_id", "=", "0", ")", "->", "torch", ".", "LongTensor", ":", "\n", "# \u8fdb\u884cbeam search", "\n", "    ", "device", "=", "_get_model_device", "(", "decoder", ")", "\n", "if", "tokens", "is", "None", ":", "\n", "        ", "if", "bos_token_id", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"You have to specify either `tokens` or `bos_token_id`.\"", ")", "\n", "", "batch_size", "=", "state", ".", "num_samples", "\n", "if", "batch_size", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Cannot infer the number of samples from `state`.\"", ")", "\n", "", "tokens", "=", "torch", ".", "full", "(", "[", "batch_size", ",", "1", "]", ",", "fill_value", "=", "bos_token_id", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "", "batch_size", "=", "tokens", ".", "size", "(", "0", ")", "\n", "if", "state", ".", "num_samples", ":", "\n", "        ", "assert", "state", ".", "num_samples", "==", "batch_size", ",", "\"The number of samples in `tokens` and `state` should match.\"", "\n", "\n", "", "if", "eos_token_id", "is", "None", ":", "\n", "        ", "_eos_token_id", "=", "-", "1", "\n", "", "else", ":", "\n", "        ", "_eos_token_id", "=", "eos_token_id", "\n", "\n", "", "scores", "=", "decoder", ".", "decode", "(", "tokens", "=", "tokens", ",", "state", "=", "state", ")", "# \u8fd9\u91cc\u8981\u4f20\u5165\u7684\u662f\u6574\u4e2a\u53e5\u5b50\u7684\u957f\u5ea6", "\n", "vocab_size", "=", "scores", ".", "size", "(", "1", ")", "\n", "assert", "vocab_size", ">=", "num_beams", ",", "\"num_beams should be smaller than the number of vocabulary size.\"", "\n", "\n", "if", "do_sample", ":", "\n", "        ", "probs", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "+", "1e-12", "\n", "next_tokens", "=", "torch", ".", "multinomial", "(", "probs", ",", "num_samples", "=", "num_beams", ")", "# (batch_size, num_beams)", "\n", "logits", "=", "probs", ".", "log", "(", ")", "\n", "next_scores", "=", "logits", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "next_tokens", ")", "# (batch_size, num_beams)", "\n", "", "else", ":", "\n", "        ", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "# (batch_size, vocab_size)", "\n", "# \u5f97\u5230(batch_size, num_beams), (batch_size, num_beams)", "\n", "next_scores", ",", "next_tokens", "=", "torch", ".", "topk", "(", "scores", ",", "num_beams", ",", "dim", "=", "1", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "\n", "# \u6839\u636eindex\u6765\u505a\u987a\u5e8f\u7684\u8c03\u8f6c", "\n", "", "indices", "=", "torch", ".", "arange", "(", "batch_size", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "\n", "indices", "=", "indices", ".", "repeat_interleave", "(", "num_beams", ")", "\n", "state", ".", "reorder_state", "(", "indices", ")", "\n", "\n", "tokens", "=", "tokens", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "indices", ")", "# batch_size * num_beams x length", "\n", "# \u8bb0\u5f55\u751f\u6210\u597d\u7684token (batch_size', cur_len)", "\n", "token_ids", "=", "torch", ".", "cat", "(", "[", "tokens", ",", "next_tokens", ".", "view", "(", "-", "1", ",", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "dones", "=", "[", "False", "]", "*", "batch_size", "\n", "\n", "beam_scores", "=", "next_scores", ".", "view", "(", "-", "1", ")", "# batch_size * num_beams", "\n", "\n", "#  \u7528\u6765\u8bb0\u5f55\u5df2\u7ecf\u751f\u6210\u597d\u7684token\u7684\u957f\u5ea6", "\n", "cur_len", "=", "token_ids", ".", "size", "(", "1", ")", "\n", "\n", "if", "max_len_a", "!=", "0", ":", "\n", "# (bsz x num_beams, )", "\n", "        ", "if", "state", ".", "encoder_mask", "is", "not", "None", ":", "\n", "            ", "max_lengths", "=", "(", "state", ".", "encoder_mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", "*", "max_len_a", ")", ".", "long", "(", ")", "+", "max_length", "\n", "", "else", ":", "\n", "            ", "max_lengths", "=", "tokens", ".", "new_full", "(", "(", "tokens", ".", "size", "(", "0", ")", ",", ")", ",", "fill_value", "=", "max_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "real_max_length", "=", "max_lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "real_max_length", "=", "max_length", "\n", "if", "state", ".", "encoder_mask", "is", "not", "None", ":", "\n", "            ", "max_lengths", "=", "state", ".", "encoder_mask", ".", "new_ones", "(", "state", ".", "encoder_mask", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", "*", "max_length", "\n", "", "else", ":", "\n", "            ", "max_lengths", "=", "tokens", ".", "new_full", "(", "(", "tokens", ".", "size", "(", "0", ")", ",", ")", ",", "fill_value", "=", "max_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "", "hypos", "=", "[", "\n", "BeamHypotheses", "(", "num_beams", ",", "real_max_length", ",", "length_penalty", ",", "early_stopping", "=", "False", ")", "for", "_", "in", "range", "(", "batch_size", ")", "\n", "]", "\n", "# 0, num_beams, 2*num_beams, ...", "\n", "batch_inds_with_numbeams_interval", "=", "(", "torch", ".", "arange", "(", "batch_size", ")", "*", "num_beams", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "token_ids", ")", "\n", "\n", "while", "cur_len", "<", "real_max_length", ":", "\n", "        ", "scores", "=", "decoder", ".", "decode", "(", "token_ids", ",", "state", ")", "# (bsz x num_beams, vocab_size)", "\n", "if", "repetition_penalty", "!=", "1.0", ":", "\n", "            ", "token_scores", "=", "scores", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "token_ids", ")", "\n", "lt_zero_mask", "=", "token_scores", ".", "lt", "(", "0", ")", ".", "float", "(", ")", "\n", "ge_zero_mask", "=", "lt_zero_mask", ".", "eq", "(", "0", ")", ".", "float", "(", ")", "\n", "token_scores", "=", "lt_zero_mask", "*", "repetition_penalty", "*", "token_scores", "+", "ge_zero_mask", "/", "repetition_penalty", "*", "token_scores", "\n", "scores", ".", "scatter_", "(", "dim", "=", "1", ",", "index", "=", "token_ids", ",", "src", "=", "token_scores", ")", "\n", "\n", "", "if", "_eos_token_id", "!=", "-", "1", ":", "\n", "            ", "max_len_eos_mask", "=", "max_lengths", ".", "eq", "(", "cur_len", "+", "1", ")", "\n", "eos_scores", "=", "scores", "[", ":", ",", "_eos_token_id", "]", "\n", "# \u5982\u679c\u5df2\u7ecf\u8fbe\u5230\u6700\u5927\u957f\u5ea6\uff0c\u5c31\u628aeos\u7684\u5206\u6570\u52a0\u5927", "\n", "scores", "[", ":", ",", "_eos_token_id", "]", "=", "torch", ".", "where", "(", "max_len_eos_mask", ",", "eos_scores", "+", "1e12", ",", "eos_scores", ")", "\n", "\n", "", "if", "do_sample", ":", "\n", "            ", "if", "temperature", ">", "0", "and", "temperature", "!=", "1", ":", "\n", "                ", "scores", "=", "scores", "/", "temperature", "\n", "\n", "# \u591a\u53ec\u56de\u4e00\u4e2a\u9632\u6b62eos", "\n", "", "scores", "=", "top_k_top_p_filtering", "(", "scores", ",", "top_k", ",", "top_p", ",", "min_tokens_to_keep", "=", "num_beams", "+", "1", ")", "\n", "# \u52a0\u4e0a1e-12\u662f\u4e3a\u4e86\u907f\u514dhttps://github.com/pytorch/pytorch/pull/27523", "\n", "probs", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "+", "1e-12", "\n", "\n", "# \u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u4e0d\u662feos\u7684\u503c", "\n", "_tokens", "=", "torch", ".", "multinomial", "(", "probs", ",", "num_samples", "=", "num_beams", "+", "1", ")", "# batch_size' x (num_beams+1)", "\n", "\n", "logits", "=", "probs", ".", "log", "(", ")", "\n", "# \u9632\u6b62\u5168\u662f\u8fd9\u4e2abeam\u7684\u88ab\u9009\u4e2d\u4e86\uff0c\u4e14\u9700\u8981\u8003\u8651eos\u88ab\u9009\u62e9\u7684\u60c5\u51b5", "\n", "_scores", "=", "logits", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "_tokens", ")", "# batch_size' x (num_beams+1)", "\n", "_scores", "=", "_scores", "+", "beam_scores", "[", ":", ",", "None", "]", "# batch_size' x (num_beams+1)", "\n", "# \u4ece\u8fd9\u91cc\u9762\u518d\u9009\u62e9top\u76842*num_beam\u4e2a", "\n", "_scores", "=", "_scores", ".", "view", "(", "batch_size", ",", "num_beams", "*", "(", "num_beams", "+", "1", ")", ")", "\n", "next_scores", ",", "ids", "=", "_scores", ".", "topk", "(", "2", "*", "num_beams", ",", "dim", "=", "1", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "_tokens", "=", "_tokens", ".", "view", "(", "batch_size", ",", "num_beams", "*", "(", "num_beams", "+", "1", ")", ")", "\n", "next_tokens", "=", "_tokens", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "ids", ")", "# (batch_size, 2*num_beams)", "\n", "from_which_beam", "=", "ids", "//", "(", "num_beams", "+", "1", ")", "# (batch_size, 2*num_beams)", "\n", "", "else", ":", "\n", "            ", "scores", "=", "F", ".", "log_softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "# (batch_size * num_beams, vocab_size)", "\n", "_scores", "=", "scores", "+", "beam_scores", "[", ":", ",", "None", "]", "# (batch_size * num_beams, vocab_size)", "\n", "_scores", "=", "_scores", ".", "view", "(", "batch_size", ",", "-", "1", ")", "# (batch_size, num_beams*vocab_size)", "\n", "next_scores", ",", "ids", "=", "torch", ".", "topk", "(", "_scores", ",", "2", "*", "num_beams", ",", "dim", "=", "1", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "# (bsz, 2*num_beams)", "\n", "from_which_beam", "=", "ids", "//", "vocab_size", "# (batch_size, 2*num_beams)", "\n", "next_tokens", "=", "ids", "%", "vocab_size", "# (batch_size, 2*num_beams)", "\n", "\n", "#  \u63a5\u4e0b\u6765\u9700\u8981\u7ec4\u88c5\u4e0b\u4e00\u4e2abatch\u7684\u7ed3\u679c\u3002", "\n", "#  \u9700\u8981\u9009\u5b9a\u54ea\u4e9b\u7559\u4e0b\u6765", "\n", "", "next_scores", ",", "sorted_inds", "=", "next_scores", ".", "sort", "(", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "next_tokens", "=", "next_tokens", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "sorted_inds", ")", "\n", "from_which_beam", "=", "from_which_beam", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "sorted_inds", ")", "\n", "\n", "not_eos_mask", "=", "next_tokens", ".", "ne", "(", "_eos_token_id", ")", "# \u4e3a1\u7684\u5730\u65b9\u4e0d\u662feos", "\n", "keep_mask", "=", "not_eos_mask", ".", "cumsum", "(", "dim", "=", "1", ")", ".", "le", "(", "num_beams", ")", "# \u4e3a1\u7684\u5730\u65b9\u9700\u8981\u4fdd\u7559", "\n", "keep_mask", "=", "not_eos_mask", ".", "__and__", "(", "keep_mask", ")", "# \u4e3a1\u7684\u5730\u65b9\u662f\u9700\u8981\u8fdb\u884c\u4e0b\u4e00\u6b65search\u7684", "\n", "\n", "_next_tokens", "=", "next_tokens", ".", "masked_select", "(", "keep_mask", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "_from_which_beam", "=", "from_which_beam", ".", "masked_select", "(", "keep_mask", ")", ".", "view", "(", "batch_size", ",", "num_beams", ")", "# \u4e0a\u9762\u7684token\u662f\u6765\u81ea\u54ea\u4e2abeam", "\n", "_next_scores", "=", "next_scores", ".", "masked_select", "(", "keep_mask", ")", ".", "view", "(", "batch_size", ",", "num_beams", ")", "\n", "beam_scores", "=", "_next_scores", ".", "view", "(", "-", "1", ")", "\n", "\n", "flag", "=", "True", "\n", "if", "cur_len", "+", "1", "==", "real_max_length", ":", "\n", "            ", "eos_batch_idx", "=", "torch", ".", "arange", "(", "batch_size", ")", ".", "to", "(", "next_tokens", ")", ".", "repeat_interleave", "(", "repeats", "=", "num_beams", ",", "dim", "=", "0", ")", "\n", "eos_beam_ind", "=", "torch", ".", "arange", "(", "num_beams", ")", ".", "to", "(", "token_ids", ")", ".", "repeat", "(", "batch_size", ")", "# \u8868\u793a\u7684\u662findice", "\n", "eos_beam_idx", "=", "from_which_beam", "[", ":", ",", ":", "num_beams", "]", ".", "reshape", "(", "-", "1", ")", "# \u8868\u793a\u7684\u662f\u4ece\u54ea\u4e2abeam\u83b7\u53d6\u5f97\u5230\u7684", "\n", "", "else", ":", "\n", "# \u5c06\u6bcf\u4e2abatch\u4e2d\u5728num_beam\u5185\u7684\u5e8f\u5217\u6dfb\u52a0\u5230\u7ed3\u675f\u4e2d, \u4e3a1\u7684\u5730\u65b9\u9700\u8981\u7ed3\u675f\u4e86", "\n", "            ", "effective_eos_mask", "=", "next_tokens", "[", ":", ",", ":", "num_beams", "]", ".", "eq", "(", "_eos_token_id", ")", "# batch_size x num_beams", "\n", "if", "effective_eos_mask", ".", "sum", "(", ")", ".", "gt", "(", "0", ")", ":", "\n", "                ", "eos_batch_idx", ",", "eos_beam_ind", "=", "effective_eos_mask", ".", "nonzero", "(", "as_tuple", "=", "True", ")", "\n", "# \u662f\u7531\u4e8efrom_which_beam\u662f (batch_size, 2*num_beams)\u7684\uff0c\u6240\u4ee5\u9700\u89812*num_beams", "\n", "eos_beam_idx", "=", "eos_batch_idx", "*", "num_beams", "*", "2", "+", "eos_beam_ind", "\n", "eos_beam_idx", "=", "from_which_beam", ".", "view", "(", "-", "1", ")", "[", "eos_beam_idx", "]", "# \u83b7\u53d6\u771f\u5b9e\u7684\u4ece\u54ea\u4e2abeam\u83b7\u53d6\u7684eos", "\n", "", "else", ":", "\n", "                ", "flag", "=", "False", "\n", "\n", "", "", "if", "flag", ":", "\n", "            ", "_token_ids", "=", "torch", ".", "cat", "(", "[", "token_ids", ",", "_next_tokens", "]", ",", "dim", "=", "-", "1", ")", "\n", "for", "batch_idx", ",", "beam_ind", ",", "beam_idx", "in", "zip", "(", "eos_batch_idx", ".", "tolist", "(", ")", ",", "eos_beam_ind", ".", "tolist", "(", ")", ",", "\n", "eos_beam_idx", ".", "tolist", "(", ")", ")", ":", "\n", "                ", "if", "not", "dones", "[", "batch_idx", "]", ":", "\n", "                    ", "score", "=", "next_scores", "[", "batch_idx", ",", "beam_ind", "]", ".", "item", "(", ")", "\n", "# \u4e4b\u540e\u9700\u8981\u5728\u7ed3\u5c3e\u65b0\u589e\u4e00\u4e2aeos", "\n", "if", "_eos_token_id", "!=", "-", "1", ":", "\n", "                        ", "hypos", "[", "batch_idx", "]", ".", "add", "(", "_token_ids", "[", "batch_idx", "*", "num_beams", "+", "beam_idx", ",", ":", "cur_len", "]", ".", "clone", "(", ")", ",", "score", ")", "\n", "", "else", ":", "\n", "                        ", "hypos", "[", "batch_idx", "]", ".", "add", "(", "_token_ids", "[", "batch_idx", "*", "num_beams", "+", "beam_idx", "]", ".", "clone", "(", ")", ",", "score", ")", "\n", "\n", "# \u66f4\u6539state\u72b6\u6001, \u91cd\u7ec4token_ids", "\n", "", "", "", "", "reorder_inds", "=", "(", "batch_inds_with_numbeams_interval", "+", "_from_which_beam", ")", ".", "view", "(", "-", "1", ")", "# flatten\u6210\u4e00\u7ef4", "\n", "state", ".", "reorder_state", "(", "reorder_inds", ")", "\n", "# \u91cd\u65b0\u7ec4\u7ec7token_ids\u7684\u72b6\u6001", "\n", "token_ids", "=", "torch", ".", "cat", "(", "[", "token_ids", ".", "index_select", "(", "index", "=", "reorder_inds", ",", "dim", "=", "0", ")", ",", "_next_tokens", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "dones", "[", "batch_idx", "]", "=", "dones", "[", "batch_idx", "]", "or", "hypos", "[", "batch_idx", "]", ".", "is_done", "(", "next_scores", "[", "batch_idx", ",", "0", "]", ".", "item", "(", ")", ")", "or", "max_lengths", "[", "batch_idx", "*", "num_beams", "]", "==", "cur_len", "+", "1", "\n", "\n", "", "cur_len", "+=", "1", "\n", "\n", "if", "all", "(", "dones", ")", ":", "\n", "            ", "break", "\n", "\n", "# select the best hypotheses", "\n", "", "", "tgt_len", "=", "token_ids", ".", "new", "(", "batch_size", ")", "\n", "best", "=", "[", "]", "\n", "\n", "for", "i", ",", "hypotheses", "in", "enumerate", "(", "hypos", ")", ":", "\n", "        ", "best_hyp", "=", "max", "(", "hypotheses", ".", "hyp", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "[", "1", "]", "\n", "# \u628a\u4e0a\u9762\u66ff\u6362\u4e3a\u975eeos\u7684\u8bcd\u66ff\u6362\u56deeos", "\n", "if", "_eos_token_id", "!=", "-", "1", ":", "\n", "            ", "best_hyp", "=", "torch", ".", "cat", "(", "[", "best_hyp", ",", "best_hyp", ".", "new_ones", "(", "1", ")", "*", "_eos_token_id", "]", ")", "\n", "", "tgt_len", "[", "i", "]", "=", "len", "(", "best_hyp", ")", "\n", "best", ".", "append", "(", "best_hyp", ")", "\n", "\n", "# generate target batch", "\n", "", "decoded", "=", "token_ids", ".", "new", "(", "batch_size", ",", "tgt_len", ".", "max", "(", ")", ".", "item", "(", ")", ")", ".", "fill_", "(", "pad_token_id", ")", "\n", "for", "i", ",", "hypo", "in", "enumerate", "(", "best", ")", ":", "\n", "        ", "decoded", "[", "i", ",", ":", "tgt_len", "[", "i", "]", "]", "=", "hypo", "\n", "\n", "", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.top_k_top_p_filtering": [[479, 513], ["float", "min", "torch.sort", "torch.sort", "torch.cumsum", "torch.cumsum", "sorted_indices_to_remove[].clone", "sorted_indices_to_remove.scatter", "max", "logits.size", "torch.softmax", "torch.topk", "torch.topk"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "", "", "def", "top_k_top_p_filtering", "(", "logits", ",", "top_k", "=", "0", ",", "top_p", "=", "1.0", ",", "filter_value", "=", "-", "float", "(", "\"Inf\"", ")", ",", "min_tokens_to_keep", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    \u6839\u636etop_k, top_p\u7684\u503c\uff0c\u5c06\u4e0d\u6ee1\u8db3\u7684\u503c\u7f6e\u4e3afilter_value\u7684\u503c\n\n    :param torch.Tensor logits: bsz x vocab_size\n    :param int top_k: \u5982\u679c\u5927\u4e8e0\uff0c\u5219\u53ea\u4fdd\u7559\u6700top_k\u7684\u8bcd\u6c47\u7684\u6982\u7387\uff0c\u5269\u4e0b\u7684\u4f4d\u7f6e\u88ab\u7f6e\u4e3afilter_value\n    :param int top_p: \u6839\u636e(http://arxiv.org/abs/1904.09751)\u8bbe\u7f6e\u7684\u7b5b\u9009\u65b9\u5f0f\n    :param float filter_value:\n    :param int min_tokens_to_keep: \u6bcf\u4e2asample\u8fd4\u56de\u7684\u5206\u5e03\u4e2d\u6709\u6982\u7387\u7684\u8bcd\u4e0d\u4f1a\u4f4e\u4e8e\u8fd9\u4e2a\u503c\n    :return:\n    \"\"\"", "\n", "if", "top_k", ">", "0", ":", "\n", "        ", "top_k", "=", "min", "(", "max", "(", "top_k", ",", "min_tokens_to_keep", ")", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "# Safety check", "\n", "# Remove all tokens with a probability less than the last token of the top-k", "\n", "indices_to_remove", "=", "logits", "<", "torch", ".", "topk", "(", "logits", ",", "top_k", ")", "[", "0", "]", "[", "...", ",", "-", "1", ",", "None", "]", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "\n", "", "if", "top_p", "<", "1.0", ":", "\n", "        ", "sorted_logits", ",", "sorted_indices", "=", "torch", ".", "sort", "(", "logits", ",", "descending", "=", "True", ")", "\n", "cumulative_probs", "=", "torch", ".", "cumsum", "(", "F", ".", "softmax", "(", "sorted_logits", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Remove tokens with cumulative probability above the threshold (token with 0 are kept)", "\n", "sorted_indices_to_remove", "=", "cumulative_probs", ">", "top_p", "\n", "if", "min_tokens_to_keep", ">", "1", ":", "\n", "# Keep at least min_tokens_to_keep (set to min_tokens_to_keep-1 because we add the first one below)", "\n", "            ", "sorted_indices_to_remove", "[", "...", ",", ":", "min_tokens_to_keep", "]", "=", "0", "\n", "# Shift the indices to the right to keep also the first token above the threshold", "\n", "", "sorted_indices_to_remove", "[", "...", ",", "1", ":", "]", "=", "sorted_indices_to_remove", "[", "...", ",", ":", "-", "1", "]", ".", "clone", "(", ")", "\n", "sorted_indices_to_remove", "[", "...", ",", "0", "]", "=", "0", "\n", "\n", "# scatter sorted tensors to original indexing", "\n", "indices_to_remove", "=", "sorted_indices_to_remove", ".", "scatter", "(", "1", ",", "sorted_indices", ",", "sorted_indices_to_remove", ")", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "", "return", "logits", "\n", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.__init__": [[125, 183], ["int", "kwargs.pop", "set", "kwargs.items", "gpt2_tokenizer.bytes_to_unicode", "dict", "open", "json.load", "open", "tuple", "zip", "setattr", "gpt2_tokenizer.GPT2Tokenizer.encoder.items", "gpt2_tokenizer.GPT2Tokenizer.byte_encoder.items", "merges_handle.read().split", "merge.split", "range", "isinstance", "len", "isinstance", "all", "merges_handle.read", "isinstance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.bytes_to_unicode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["def", "__init__", "(", "\n", "self", ",", "\n", "vocab_file", ",", "\n", "merges_file", ",", "\n", "errors", "=", "\"replace\"", ",", "\n", "unk_token", "=", "\"<|endoftext|>\"", ",", "\n", "bos_token", "=", "\"<|endoftext|>\"", ",", "\n", "eos_token", "=", "\"<|endoftext|>\"", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "_bos_token", "=", "None", "\n", "self", ".", "_eos_token", "=", "None", "\n", "self", ".", "_unk_token", "=", "None", "\n", "self", ".", "_sep_token", "=", "None", "\n", "self", ".", "_pad_token", "=", "None", "\n", "self", ".", "_cls_token", "=", "None", "\n", "self", ".", "_mask_token", "=", "None", "\n", "self", ".", "_pad_token_type_id", "=", "0", "\n", "\n", "self", ".", "bos_token", "=", "bos_token", "\n", "self", ".", "eos_token", "=", "eos_token", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "\n", "self", ".", "max_len", "=", "int", "(", "1e12", ")", "\n", "self", ".", "padding_side", "=", "kwargs", ".", "pop", "(", "\"padding_side\"", ",", "self", ".", "padding_side", ")", "\n", "self", ".", "added_tokens_encoder", "=", "{", "}", "\n", "self", ".", "unique_added_tokens_encoder", "=", "set", "(", ")", "\n", "self", ".", "added_tokens_decoder", "=", "{", "}", "\n", "# inputs and kwargs for saving and re-loading (see ``from_pretrained`` and ``save_pretrained``)", "\n", "self", ".", "init_inputs", "=", "(", ")", "\n", "self", ".", "init_kwargs", "=", "{", "}", "\n", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "self", ".", "SPECIAL_TOKENS_ATTRIBUTES", ":", "\n", "                ", "if", "key", "==", "\"additional_special_tokens\"", ":", "\n", "                    ", "assert", "isinstance", "(", "value", ",", "(", "list", ",", "tuple", ")", ")", "and", "all", "(", "isinstance", "(", "t", ",", "str", ")", "for", "t", "in", "value", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "isinstance", "(", "value", ",", "str", ")", "\n", "", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n", "", "", "self", ".", "max_len_single_sentence", "=", "(", "\n", "self", ".", "max_len", "\n", ")", "# no default special tokens - you can update this value if you add special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "(", "\n", "self", ".", "max_len", "\n", ")", "# no default special tokens - you can update this value if you add special tokens", "\n", "\n", "with", "open", "(", "vocab_file", ",", "encoding", "=", "\"utf-8\"", ")", "as", "vocab_handle", ":", "\n", "            ", "self", ".", "encoder", "=", "json", ".", "load", "(", "vocab_handle", ")", "\n", "", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "errors", "=", "errors", "# how to handle errors in decoding", "\n", "self", ".", "byte_encoder", "=", "bytes_to_unicode", "(", ")", "\n", "self", ".", "byte_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "byte_encoder", ".", "items", "(", ")", "}", "\n", "with", "open", "(", "merges_file", ",", "encoding", "=", "\"utf-8\"", ")", "as", "merges_handle", ":", "\n", "            ", "bpe_merges", "=", "merges_handle", ".", "read", "(", ")", ".", "split", "(", "\"\\n\"", ")", "[", "1", ":", "-", "1", "]", "\n", "", "bpe_merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "bpe_merges", "]", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "bpe_merges", ",", "range", "(", "len", "(", "bpe_merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer._reinit_on_new_vocab": [[184, 188], ["vocab.items", "vocab.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "def", "_reinit_on_new_vocab", "(", "self", ",", "vocab", ")", ":", "\n", "        ", "self", ".", "encoder", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "vocab", ".", "items", "(", ")", "}", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "vocab", ".", "items", "(", ")", "}", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.bos_token": [[237, 240], ["None"], "methods", ["None"], ["", "@", "bos_token", ".", "setter", "\n", "def", "bos_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_bos_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.eos_token": [[241, 244], ["None"], "methods", ["None"], ["", "@", "eos_token", ".", "setter", "\n", "def", "eos_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_eos_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.unk_token": [[245, 248], ["None"], "methods", ["None"], ["", "@", "unk_token", ".", "setter", "\n", "def", "unk_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_unk_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.pad_token": [[249, 252], ["None"], "methods", ["None"], ["", "@", "pad_token", ".", "setter", "\n", "def", "pad_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_pad_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.cls_token": [[253, 256], ["None"], "methods", ["None"], ["", "@", "cls_token", ".", "setter", "\n", "def", "cls_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_cls_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.sep_token": [[257, 260], ["None"], "methods", ["None"], ["", "@", "sep_token", ".", "setter", "\n", "def", "sep_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_sep_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.mask_token": [[261, 264], ["None"], "methods", ["None"], ["", "@", "mask_token", ".", "setter", "\n", "def", "mask_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_mask_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.bos_index": [[265, 269], ["gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "bos_index", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the beginning of sentence token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "bos_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.sep_index": [[270, 273], ["gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "sep_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "sep_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.eos_index": [[274, 278], ["gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "eos_index", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the end of sentence token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "eos_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.unk_index": [[279, 283], ["gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "unk_index", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the unknown token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.pad_index": [[284, 288], ["gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "pad_index", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the padding token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "pad_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.pad_token_type_id": [[289, 293], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pad_token_type_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the padding token type in the vocabulary.\"\"\"", "\n", "return", "self", ".", "_pad_token_type_id", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.cls_index": [[294, 298], ["gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "cls_index", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the classification token in the vocabulary. E.g. to extract a summary of an input sequence leveraging self-attention along the full depth of the model. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "cls_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.mask_index": [[299, 303], ["gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "mask_index", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the mask token in the vocabulary. E.g. when training a model with masked-language modeling. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "mask_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.vocab_size": [[304, 307], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.bpe": [[308, 351], ["tuple", "gpt2_tokenizer.get_pairs", "min", "tuple", "len", "len", "gpt2_tokenizer.get_pairs", "tuple.index", "tuple.extend", "tuple.append", "tuple.append", "gpt2_tokenizer.GPT2Tokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.get_pairs", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.get_pairs", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "# \u5982\u679ctoken\u6ca1\u6709\u627e\u5230\uff0c\u4f1a\u88ab\u62c6\u5206\u6210\u5b57\u6bcd\u8fd4\u56de", "\n", "        ", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "# \u5982\u679cword\u662fabcd\uff0c\u5219((a,b), (b,c), (c, d), (e,f))", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "\n", "\n", "", "while", "True", ":", "\n", "# \u9996\u5148\u627e\u5230\u6700\u5e38\u7684pair", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "\"inf\"", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "#\u6700\u5148\u627e\u7684", "\n", "i", "=", "j", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "\" \"", ".", "join", "(", "word", ")", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer._tokenize": [[352, 365], ["gpt2_tokenizer.gpt2_tokenize", "bpe_tokens.extend", "token.encode", "gpt2_tokenizer.GPT2Tokenizer.bpe().split", "gpt2_tokenizer.GPT2Tokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.gpt2_tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.encode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.bpe"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "add_prefix_space", "=", "False", ")", ":", "\n", "        ", "\"\"\" Tokenize a string.\n            Args:\n                - add_prefix_space (boolean, default False):\n                    Begin the sentence with at least one space to get invariance to word order in GPT-2 (and RoBERTa) tokenizers.\n        \"\"\"", "\n", "bpe_tokens", "=", "[", "]", "\n", "for", "token", "in", "gpt2_tokenize", "(", "text", ",", "add_prefix_space", "=", "add_prefix_space", ")", ":", "\n", "            ", "token", "=", "\"\"", ".", "join", "(", "\n", "self", ".", "byte_encoder", "[", "b", "]", "for", "b", "in", "token", ".", "encode", "(", "\"utf-8\"", ")", "\n", ")", "# Maps all our bytes to unicode strings, avoiding controle tokens of the BPE (spaces in our case)", "\n", "bpe_tokens", ".", "extend", "(", "bpe_token", "for", "bpe_token", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "\" \"", ")", ")", "\n", "", "return", "bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer._convert_token_to_id": [[366, 369], ["gpt2_tokenizer.GPT2Tokenizer.encoder.get", "gpt2_tokenizer.GPT2Tokenizer.encoder.get"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "encoder", ".", "get", "(", "token", ",", "self", ".", "encoder", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer._convert_id_to_token": [[370, 373], ["gpt2_tokenizer.GPT2Tokenizer.decoder.get"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (str) using the vocab.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "get", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_string": [[374, 379], ["bytearray().decode", "bytearray"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.Seq2SeqDecoder.decode"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "text", "=", "\"\"", ".", "join", "(", "tokens", ")", "\n", "text", "=", "bytearray", "(", "[", "self", ".", "byte_decoder", "[", "c", "]", "for", "c", "in", "text", "]", ")", ".", "decode", "(", "\"utf-8\"", ",", "errors", "=", "self", ".", "errors", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.save_pretrained": [[380, 382], ["gpt2_tokenizer.GPT2Tokenizer.save_vocabulary"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_vocabulary"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "return", "self", ".", "save_vocabulary", "(", "save_directory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.save_vocabulary": [[383, 408], ["os.path.join", "os.path.join", "os.path.isdir", "core.logger.error", "open", "f.write", "open", "writer.write", "sorted", "json.dumps", "gpt2_tokenizer.GPT2Tokenizer.bpe_ranks.items", "writer.write", "core.logger.warning"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary and merge files to a directory.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "\"vocab_file\"", "]", ")", "\n", "merge_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "\"merges_file\"", "]", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "encoder", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "with", "open", "(", "merge_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "\"#version: 0.2\\n\"", ")", "\n", "for", "bpe_tokens", ",", "token_index", "in", "sorted", "(", "self", ".", "bpe_ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\n", "\"Saving vocabulary to {}: BPE merge indices are not consecutive.\"", "\n", "\" Please check that the tokenizer is not corrupted!\"", ".", "format", "(", "merge_file", ")", "\n", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "\" \"", ".", "join", "(", "bpe_tokens", ")", "+", "\"\\n\"", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vocab_file", ",", "merge_file", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.from_pretrained": [[409, 414], ["cls._from_pretrained"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer._from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "model_dir_or_name", ")", ":", "\n", "        ", "r\"\"\"\n        \"\"\"", "\n", "return", "cls", ".", "_from_pretrained", "(", "model_dir_or_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer._from_pretrained": [[416, 457], ["io.file_utils._get_gpt2_dir", "fastNLP.io.file_utils._get_file_name_base_on_postfix", "fastNLP.io.file_utils._get_file_name_base_on_postfix", "fastNLP.io.file_utils._get_file_name_base_on_postfix", "json.load.pop", "open", "json.load", "cls", "isinstance", "min", "OSError", "json.load.get", "int"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_gpt2_dir", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "@", "classmethod", "\n", "def", "_from_pretrained", "(", "cls", ",", "model_dir_or_name", ")", ":", "\n", "        ", "\"\"\"\n\n        :param str model_dir_or_name: \u76ee\u5f55\u6216\u8005\u7f29\u5199\u540d\n        :param init_inputs:\n        :param kwargs:\n        :return:\n        \"\"\"", "\n", "# \u5b83\u9700\u8981\u4e24\u4e2a\u6587\u4ef6\uff0c\u7b2c\u4e00\u4e2a\u662fvocab.json\uff0c\u7b2c\u4e8c\u4e2a\u662fmerge_file?", "\n", "model_dir", "=", "_get_gpt2_dir", "(", "model_dir_or_name", ")", "\n", "# \u91cc\u9762\u4f1a\u5305\u542b\u56db\u4e2a\u6587\u4ef6vocab.json, merge.txt, config.json, model.bin", "\n", "\n", "tokenizer_config_file", "=", "_get_file_name_base_on_postfix", "(", "model_dir", ",", "'config.json'", ")", "\n", "with", "open", "(", "tokenizer_config_file", ",", "encoding", "=", "\"utf-8\"", ")", "as", "tokenizer_config_handle", ":", "\n", "            ", "init_kwargs", "=", "json", ".", "load", "(", "tokenizer_config_handle", ")", "\n", "", "if", "'max_len'", "not", "in", "init_kwargs", ":", "\n", "            ", "init_kwargs", "[", "'max_len'", "]", "=", "1024", "\n", "# Set max length if needed", "\n", "", "if", "model_dir_or_name", "in", "PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES", ":", "\n", "# if we're using a pretrained model, ensure the tokenizer", "\n", "# wont index sequences longer than the number of positional embeddings", "\n", "            ", "max_len", "=", "PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES", "[", "model_dir_or_name", "]", "\n", "if", "max_len", "is", "not", "None", "and", "isinstance", "(", "max_len", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "                ", "init_kwargs", "[", "\"max_len\"", "]", "=", "min", "(", "init_kwargs", ".", "get", "(", "\"max_len\"", ",", "int", "(", "1e12", ")", ")", ",", "max_len", ")", "\n", "\n", "# \u5c06vocab, merge\u52a0\u5165\u5230init_kwargs\u4e2d", "\n", "", "", "init_kwargs", "[", "'vocab_file'", "]", "=", "_get_file_name_base_on_postfix", "(", "model_dir", ",", "'vocab.json'", ")", "\n", "init_kwargs", "[", "'merges_file'", "]", "=", "_get_file_name_base_on_postfix", "(", "model_dir", ",", "'merges.txt'", ")", "\n", "\n", "init_inputs", "=", "init_kwargs", ".", "pop", "(", "\"init_inputs\"", ",", "(", ")", ")", "\n", "# Instantiate tokenizer.", "\n", "try", ":", "\n", "            ", "tokenizer", "=", "cls", "(", "*", "init_inputs", ",", "**", "init_kwargs", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "OSError", "(", "\n", "\"Unable to load vocabulary from file. \"", "\n", "\"Please check that the provided vocabulary is accessible and not corrupted.\"", "\n", ")", "\n", "\n", "", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.__len__": [[458, 461], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Size of the full vocabulary with the added tokens \"\"\"", "\n", "return", "self", ".", "vocab_size", "+", "len", "(", "self", ".", "added_tokens_encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.tokenize": [[462, 531], ["gpt2_tokenizer.GPT2Tokenizer.init_kwargs.get", "gpt2_tokenizer.GPT2Tokenizer.tokenize.split_on_tokens"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["", "def", "tokenize", "(", "self", ",", "text", ",", "add_prefix_space", "=", "True", ")", ":", "\n", "        ", "\"\"\" Converts a string in a sequence of tokens (string), using the tokenizer.\n            Split in words for word-based vocabulary or sub-words for sub-word-based\n            vocabularies (BPE/SentencePieces/WordPieces).\n\n            Take care of added tokens.\n            Args:\n                - text: The sequence to be encoded.\n                - add_prefix_space (boolean, default True):\n                    Begin the sentence with at least one space to get invariance to word order in GPT-2 (and RoBERTa) tokenizers.\n        \"\"\"", "\n", "all_special_tokens", "=", "self", ".", "all_special_tokens", "\n", "\n", "def", "lowercase_text", "(", "t", ")", ":", "\n", "# convert non-special tokens to lowercase", "\n", "            ", "escaped_special_toks", "=", "[", "re", ".", "escape", "(", "s_tok", ")", "for", "s_tok", "in", "all_special_tokens", "]", "\n", "pattern", "=", "r'('", "+", "r'|'", ".", "join", "(", "escaped_special_toks", ")", "+", "r')|'", "+", "r'(.+?)'", "\n", "return", "re", ".", "sub", "(", "\n", "pattern", ",", "\n", "lambda", "m", ":", "m", ".", "groups", "(", ")", "[", "0", "]", "or", "m", ".", "groups", "(", ")", "[", "1", "]", ".", "lower", "(", ")", ",", "\n", "t", ")", "\n", "\n", "", "if", "self", ".", "init_kwargs", ".", "get", "(", "'do_lower_case'", ",", "False", ")", ":", "\n", "            ", "text", "=", "lowercase_text", "(", "text", ")", "\n", "\n", "", "def", "split_on_token", "(", "tok", ",", "text", ")", ":", "\n", "            ", "result", "=", "[", "]", "\n", "split_text", "=", "text", ".", "split", "(", "tok", ")", "\n", "for", "i", ",", "sub_text", "in", "enumerate", "(", "split_text", ")", ":", "\n", "                ", "sub_text", "=", "sub_text", ".", "strip", "(", ")", "\n", "if", "i", "==", "0", "and", "not", "sub_text", ":", "\n", "                    ", "result", "+=", "[", "tok", "]", "\n", "", "elif", "i", "==", "len", "(", "split_text", ")", "-", "1", ":", "\n", "                    ", "if", "sub_text", ":", "\n", "                        ", "result", "+=", "[", "sub_text", "]", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "", "", "else", ":", "\n", "                    ", "if", "sub_text", ":", "\n", "                        ", "result", "+=", "[", "sub_text", "]", "\n", "", "result", "+=", "[", "tok", "]", "\n", "", "", "return", "result", "\n", "\n", "", "def", "split_on_tokens", "(", "tok_list", ",", "text", ")", ":", "\n", "            ", "if", "not", "text", ".", "strip", "(", ")", ":", "\n", "                ", "return", "[", "]", "\n", "", "if", "not", "tok_list", ":", "\n", "                ", "return", "self", ".", "_tokenize", "(", "text", ",", "add_prefix_space", "=", "add_prefix_space", ")", "\n", "\n", "", "tokenized_text", "=", "[", "]", "\n", "text_list", "=", "[", "text", "]", "\n", "for", "tok", "in", "tok_list", ":", "\n", "                ", "tokenized_text", "=", "[", "]", "\n", "for", "sub_text", "in", "text_list", ":", "\n", "                    ", "if", "sub_text", "not", "in", "self", ".", "added_tokens_encoder", "and", "sub_text", "not", "in", "all_special_tokens", ":", "\n", "                        ", "tokenized_text", "+=", "split_on_token", "(", "tok", ",", "sub_text", ")", "\n", "", "else", ":", "\n", "                        ", "tokenized_text", "+=", "[", "sub_text", "]", "\n", "", "", "text_list", "=", "tokenized_text", "\n", "\n", "", "return", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "(", "self", ".", "_tokenize", "(", "token", ",", "add_prefix_space", "=", "add_prefix_space", ")", "if", "token", "not", "in", "self", ".", "added_tokens_encoder", "and", "token", "not", "in", "all_special_tokens", "else", "[", "token", "]", "for", "token", "in", "tokenized_text", ")", ")", ")", "\n", "\n", "", "added_tokens", "=", "list", "(", "self", ".", "added_tokens_encoder", ".", "keys", "(", ")", ")", "+", "all_special_tokens", "\n", "tokenized_text", "=", "split_on_tokens", "(", "added_tokens", ",", "text", ")", "\n", "return", "tokenized_text", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_ids": [[532, 546], ["isinstance", "gpt2_tokenizer.GPT2Tokenizer._convert_token_to_id_with_added_voc", "ids.append", "gpt2_tokenizer.GPT2Tokenizer._convert_token_to_id_with_added_voc"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer._convert_token_to_id_with_added_voc", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer._convert_token_to_id_with_added_voc"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a single token, or a sequence of tokens, (str) in a single integer id\n            (resp. a sequence of ids), using the vocabulary.\n        \"\"\"", "\n", "if", "tokens", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "isinstance", "(", "tokens", ",", "str", ")", ":", "\n", "            ", "return", "self", ".", "_convert_token_to_id_with_added_voc", "(", "tokens", ")", "\n", "\n", "", "ids", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "ids", ".", "append", "(", "self", ".", "_convert_token_to_id_with_added_voc", "(", "token", ")", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer._convert_token_to_id_with_added_voc": [[547, 554], ["gpt2_tokenizer.GPT2Tokenizer._convert_token_to_id"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer._convert_token_to_id"], ["", "def", "_convert_token_to_id_with_added_voc", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "token", "in", "self", ".", "added_tokens_encoder", ":", "\n", "            ", "return", "self", ".", "added_tokens_encoder", "[", "token", "]", "\n", "", "return", "self", ".", "_convert_token_to_id", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.convert_ids_to_tokens": [[555, 571], ["isinstance", "gpt2_tokenizer.GPT2Tokenizer._convert_id_to_token", "int", "tokens.append", "gpt2_tokenizer.GPT2Tokenizer._convert_id_to_token"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer._convert_id_to_token", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer._convert_id_to_token"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ",", "skip_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\" Converts a single index or a sequence of indices (integers) in a token \"\n            (resp.) a sequence of tokens (str), using the vocabulary and added tokens.\n\n            Args:\n                skip_special_tokens: Don't decode special tokens (self.all_special_tokens). Default: False\n        \"\"\"", "\n", "if", "isinstance", "(", "ids", ",", "int", ")", ":", "\n", "            ", "return", "self", ".", "_convert_id_to_token", "(", "ids", ")", "\n", "", "tokens", "=", "[", "]", "\n", "for", "index", "in", "ids", ":", "\n", "            ", "index", "=", "int", "(", "index", ")", "\n", "if", "skip_special_tokens", "and", "index", "in", "self", ".", "all_special_ids", ":", "\n", "                ", "continue", "\n", "", "tokens", ".", "append", "(", "self", ".", "_convert_id_to_token", "(", "index", ")", ")", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.convert_id_to_tokens": [[572, 609], ["gpt2_tokenizer.GPT2Tokenizer.convert_ids_to_tokens", "sub_texts.append", "gpt2_tokenizer.GPT2Tokenizer.clean_up_tokenization", "sub_texts.append", "current_sub_text.append", "gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_string", "sub_texts.append", "gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_string"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.clean_up_tokenization", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_string", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_string"], ["", "def", "convert_id_to_tokens", "(", "self", ",", "token_ids", ",", "skip_special_tokens", "=", "False", ",", "clean_up_tokenization_spaces", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Converts a sequence of ids (integer) in a string, using the tokenizer and vocabulary\n        with options to remove special tokens and clean up tokenization spaces.\n        Similar to doing ``self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids))``.\n\n        Args:\n            token_ids: list of tokenized input ids. Can be obtained using the `encode` or `encode_plus` methods.\n            skip_special_tokens: if set to True, will replace special tokens.\n            clean_up_tokenization_spaces: if set to True, will clean up the tokenization spaces.\n        \"\"\"", "\n", "filtered_tokens", "=", "self", ".", "convert_ids_to_tokens", "(", "token_ids", ",", "skip_special_tokens", "=", "skip_special_tokens", ")", "\n", "\n", "# To avoid mixing byte-level and unicode for byte-level BPT", "\n", "# we need to build string separatly for added tokens and byte-level tokens", "\n", "# cf. https://github.com/huggingface/transformers/issues/1133", "\n", "sub_texts", "=", "[", "]", "\n", "current_sub_text", "=", "[", "]", "\n", "for", "token", "in", "filtered_tokens", ":", "\n", "            ", "if", "skip_special_tokens", "and", "token", "in", "self", ".", "all_special_ids", ":", "\n", "                ", "continue", "\n", "", "if", "token", "in", "self", ".", "added_tokens_encoder", ":", "\n", "                ", "if", "current_sub_text", ":", "\n", "                    ", "sub_texts", ".", "append", "(", "self", ".", "convert_tokens_to_string", "(", "current_sub_text", ")", ")", "\n", "current_sub_text", "=", "[", "]", "\n", "", "sub_texts", ".", "append", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "current_sub_text", ".", "append", "(", "token", ")", "\n", "", "", "if", "current_sub_text", ":", "\n", "            ", "sub_texts", ".", "append", "(", "self", ".", "convert_tokens_to_string", "(", "current_sub_text", ")", ")", "\n", "", "text", "=", "\" \"", ".", "join", "(", "sub_texts", ")", "\n", "\n", "if", "clean_up_tokenization_spaces", ":", "\n", "            ", "clean_text", "=", "self", ".", "clean_up_tokenization", "(", "text", ")", "\n", "return", "clean_text", "\n", "", "else", ":", "\n", "            ", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.special_tokens_map": [[610, 621], ["getattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "special_tokens_map", "(", "self", ")", ":", "\n", "        ", "\"\"\" A dictionary mapping special token class attribute (cls_token, unk_token...) to their\n            values ('<unk>', '<cls>'...)\n        \"\"\"", "\n", "set_attr", "=", "{", "}", "\n", "for", "attr", "in", "self", ".", "SPECIAL_TOKENS_ATTRIBUTES", ":", "\n", "            ", "attr_value", "=", "getattr", "(", "self", ",", "\"_\"", "+", "attr", ")", "\n", "if", "attr_value", ":", "\n", "                ", "set_attr", "[", "attr", "]", "=", "attr_value", "\n", "", "", "return", "set_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.all_special_tokens": [[622, 633], ["set_attr.values", "list", "set", "isinstance", "list"], "methods", ["None"], ["", "@", "property", "\n", "def", "all_special_tokens", "(", "self", ")", ":", "\n", "        ", "\"\"\" List all the special tokens ('<unk>', '<cls>'...) mapped to class attributes\n            (cls_token, unk_token...).\n        \"\"\"", "\n", "all_toks", "=", "[", "]", "\n", "set_attr", "=", "self", ".", "special_tokens_map", "\n", "for", "attr_value", "in", "set_attr", ".", "values", "(", ")", ":", "\n", "            ", "all_toks", "=", "all_toks", "+", "(", "list", "(", "attr_value", ")", "if", "isinstance", "(", "attr_value", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "attr_value", "]", ")", "\n", "", "all_toks", "=", "list", "(", "set", "(", "all_toks", ")", ")", "\n", "return", "all_toks", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.all_special_ids": [[634, 642], ["gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "all_special_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\" List the vocabulary indices of the special tokens ('<unk>', '<cls>'...) mapped to\n            class attributes (cls_token, unk_token...).\n        \"\"\"", "\n", "all_toks", "=", "self", ".", "all_special_tokens", "\n", "all_ids", "=", "self", ".", "convert_tokens_to_ids", "(", "all_toks", ")", "\n", "return", "all_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.clean_up_tokenization": [[643, 661], ["out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "clean_up_tokenization", "(", "out_string", ")", ":", "\n", "        ", "\"\"\" Clean up a list of simple English tokenization artifacts like spaces before punctuations and abreviated forms.\n        \"\"\"", "\n", "out_string", "=", "(", "\n", "out_string", ".", "replace", "(", "\" .\"", ",", "\".\"", ")", "\n", ".", "replace", "(", "\" ?\"", ",", "\"?\"", ")", "\n", ".", "replace", "(", "\" !\"", ",", "\"!\"", ")", "\n", ".", "replace", "(", "\" ,\"", ",", "\",\"", ")", "\n", ".", "replace", "(", "\" ' \"", ",", "\"'\"", ")", "\n", ".", "replace", "(", "\" n't\"", ",", "\"n't\"", ")", "\n", ".", "replace", "(", "\" 'm\"", ",", "\"'m\"", ")", "\n", ".", "replace", "(", "\" do not\"", ",", "\" don't\"", ")", "\n", ".", "replace", "(", "\" 's\"", ",", "\"'s\"", ")", "\n", ".", "replace", "(", "\" 've\"", ",", "\"'ve\"", ")", "\n", ".", "replace", "(", "\" 're\"", ",", "\"'re\"", ")", "\n", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.encode": [[662, 697], ["isinstance", "text.split", "isinstance", "gpt2_tokenizer.GPT2Tokenizer.tokenize", "gpt2_tokenizer.GPT2Tokenizer.convert_tokens_to_ids", "word_pieces.extend", "TypeError", "word_pieces.insert", "word_pieces.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "encode", "(", "self", ",", "text", ",", "add_special_tokens", "=", "False", ",", "add_prefix_space", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        \u7ed9\u5b9atext\u8f93\u5165\u5c06\u6570\u636eencode\u4e3aindex\u7684\u5f62\u5f0f\u3002\n\n        Example::\n\n            >>> from fastNLP.modules import GPT2Tokenizer\n            >>> gpt2_tokenizer = GPT2Tokenizer.from_pretrained('en')\n            >>> print(gpt2_tokenizer.encode('from'))\n            >>> print(gpt2_tokenizer.encode(\"This is a demo sentence\"))\n            >>> print(gpt2_tokenizer.encode([\"This\", \"is\", 'a']))\n\n\n        :param List[str],str text: \u8f93\u5165\u7684\u4e00\u6761\u8ba4\u4e3a\u662f\u4e00\u53e5\u8bdd\u3002\n        :param bool add_special_tokens: \u662f\u5426\u4fdd\u8bc1\u53e5\u9996\u548c\u53e5\u5c3e\u662fcls\u548csep\u3002GPT2\u6ca1\u6709cls\u548csep\u8fd9\u4e00\u8bf4\n        :return:\n        \"\"\"", "\n", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "words", "=", "text", ".", "split", "(", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "list", ")", ":", "\n", "            ", "words", "=", "text", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Only support str or List[str]\"", ")", "\n", "\n", "", "word_pieces", "=", "[", "]", "\n", "for", "word", "in", "words", ":", "\n", "            ", "tokens", "=", "self", ".", "tokenize", "(", "word", ",", "add_prefix_space", "=", "add_prefix_space", ")", "\n", "word_piece_ids", "=", "self", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "word_pieces", ".", "extend", "(", "word_piece_ids", ")", "\n", "", "if", "add_special_tokens", ":", "\n", "            ", "if", "self", ".", "_cls_token", "is", "not", "None", "and", "word_pieces", "[", "0", "]", "!=", "self", ".", "cls_index", ":", "\n", "                ", "word_pieces", ".", "insert", "(", "0", ",", "self", ".", "cls_index", ")", "\n", "", "if", "self", ".", "_sep_token", "is", "not", "None", "and", "word_pieces", "[", "-", "1", "]", "!=", "self", ".", "sep_index", ":", "\n", "                ", "word_pieces", ".", "append", "(", "self", ".", "eos_index", ")", "\n", "", "", "return", "word_pieces", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.GPT2Tokenizer.get_used_merge_pair_vocab": [[698, 740], ["tuple", "gpt2_tokenizer.get_pairs", "min", "tuple", "len", "len", "gpt2_tokenizer.get_pairs", "tuple.index", "tuple.extend", "tuple.append", "tuple.append", "gpt2_tokenizer.GPT2Tokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.get_pairs", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.get_pairs", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "get_used_merge_pair_vocab", "(", "self", ",", "token", ")", ":", "\n", "# \u5982\u679ctoken\u6ca1\u6709\u627e\u5230\uff0c\u4f1a\u88ab\u62c6\u5206\u6210\u5b57\u6bcd\u8fd4\u56de  TODO need comment", "\n", "        ", "used_pairs", "=", "{", "}", "\n", "word", "=", "tuple", "(", "token", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "# \u5982\u679cword\u662fabcd\uff0c\u5219((a,b), (b,c), (c, d), (e,f))", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", ",", "used_pairs", "\n", "\n", "", "while", "True", ":", "\n", "# \u9996\u5148\u627e\u5230\u6700\u5e38\u7684pair", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "\"inf\"", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "used_pairs", "[", "bigram", "]", "=", "self", ".", "bpe_ranks", "[", "bigram", "]", "\n", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "#\u6700\u5148\u627e\u7684", "\n", "i", "=", "j", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "\" \"", ".", "join", "(", "word", ")", "\n", "return", "word", ",", "used_pairs", "", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.bytes_to_unicode": [[29, 53], ["functools.lru_cache", "range", "dict", "list", "chr", "zip", "list", "list", "range", "bs.append", "cs.append", "range", "range", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["@", "lru_cache", "(", ")", "\n", "def", "bytes_to_unicode", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of utf-8 byte and a mapping to unicode strings.\n    We specifically avoids mapping to whitespace/control characters the bpe code barfs on.\n\n    The reversible bpe codes work on unicode strings.\n    This means you need a large # of unicode characters in your vocab if you want to avoid UNKs.\n    When you're at something like a 10B token dataset you end up needing around 5K for decent coverage.\n    This is a signficant percentage of your normal, say, 32K bpe vocab.\n    To avoid that, we want lookup tables between utf-8 bytes and unicode strings.\n    \"\"\"", "\n", "bs", "=", "(", "\n", "list", "(", "range", "(", "ord", "(", "\"!\"", ")", ",", "ord", "(", "\"~\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00a1\"", ")", ",", "ord", "(", "\"\u00ac\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00ae\"", ")", ",", "ord", "(", "\"\u00ff\"", ")", "+", "1", ")", ")", "\n", ")", "\n", "cs", "=", "bs", "[", ":", "]", "\n", "n", "=", "0", "\n", "for", "b", "in", "range", "(", "2", "**", "8", ")", ":", "\n", "        ", "if", "b", "not", "in", "bs", ":", "\n", "            ", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "2", "**", "8", "+", "n", ")", "\n", "n", "+=", "1", "\n", "", "", "cs", "=", "[", "chr", "(", "n", ")", "for", "n", "in", "cs", "]", "\n", "return", "dict", "(", "zip", "(", "bs", ",", "cs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.get_pairs": [[55, 66], ["set", "set.add"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add"], ["", "def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.gpt2_tokenizer.gpt2_tokenize": [[86, 101], ["regex.findall", "tokens.append"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["def", "gpt2_tokenize", "(", "text", ",", "add_prefix_space", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n\n    :param str text:\n    :param bool add_prefix_space: \u662f\u5426\u5728\u53e5\u5b50\u524d\u9762\u52a0\u4e0aspace\uff0c\u5982\u679c\u52a0\u4e0a\u624d\u80fd\u4fdd\u8bc1\u4e0eGPT2\u8bad\u7ec3\u65f6\u4e00\u81f4\n    :return: []\n    \"\"\"", "\n", "if", "text", "is", "''", ":", "\n", "        ", "return", "[", "]", "\n", "", "if", "add_prefix_space", ":", "\n", "        ", "text", "=", "' '", "+", "text", "\n", "", "tokens", "=", "[", "]", "\n", "for", "token", "in", "re", ".", "findall", "(", "PATTERN", ",", "text", ")", ":", "\n", "        ", "tokens", ".", "append", "(", "token", ")", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.roberta_tokenizer.RobertaTokenizer.__init__": [[31, 60], ["gpt2_tokenizer.GPT2Tokenizer.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "vocab_file", ",", "\n", "merges_file", ",", "\n", "errors", "=", "\"replace\"", ",", "\n", "bos_token", "=", "\"<s>\"", ",", "\n", "eos_token", "=", "\"</s>\"", ",", "\n", "sep_token", "=", "\"</s>\"", ",", "\n", "cls_token", "=", "\"<s>\"", ",", "\n", "unk_token", "=", "\"<unk>\"", ",", "\n", "pad_token", "=", "\"<pad>\"", ",", "\n", "mask_token", "=", "\"<mask>\"", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "vocab_file", "=", "vocab_file", ",", "\n", "merges_file", "=", "merges_file", ",", "\n", "errors", "=", "errors", ",", "\n", "bos_token", "=", "bos_token", ",", "\n", "eos_token", "=", "eos_token", ",", "\n", "unk_token", "=", "unk_token", ",", "\n", "sep_token", "=", "sep_token", ",", "\n", "cls_token", "=", "cls_token", ",", "\n", "pad_token", "=", "pad_token", ",", "\n", "mask_token", "=", "mask_token", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "4", "# take into account special tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.roberta_tokenizer.RobertaTokenizer.from_pretrained": [[61, 102], ["io.file_utils._get_roberta_dir", "fastNLP.io.file_utils._get_file_name_base_on_postfix", "fastNLP.io.file_utils._get_file_name_base_on_postfix", "json.load.pop", "open", "json.load", "fastNLP.io.file_utils._get_file_name_base_on_postfix", "cls", "isinstance", "min", "OSError", "json.load.get", "int"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_roberta_dir", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "model_dir_or_name", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        :param str model_dir_or_name: \u76ee\u5f55\u6216\u8005\u7f29\u5199\u540d\n        :param kwargs:\n        :return:\n        \"\"\"", "\n", "# \u5b83\u9700\u8981\u4e24\u4e2a\u6587\u4ef6\uff0c\u7b2c\u4e00\u4e2a\u662fvocab.json\uff0c\u7b2c\u4e8c\u4e2a\u662fmerge_file?", "\n", "model_dir", "=", "_get_roberta_dir", "(", "model_dir_or_name", ")", "\n", "# \u91cc\u9762\u4f1a\u5305\u542b\u56db\u4e2a\u6587\u4ef6vocab.json, merge.txt, config.json, model.bin", "\n", "\n", "tokenizer_config_file", "=", "_get_file_name_base_on_postfix", "(", "model_dir", ",", "'config.json'", ")", "\n", "with", "open", "(", "tokenizer_config_file", ",", "encoding", "=", "\"utf-8\"", ")", "as", "tokenizer_config_handle", ":", "\n", "            ", "init_kwargs", "=", "json", ".", "load", "(", "tokenizer_config_handle", ")", "\n", "# Set max length if needed", "\n", "", "if", "model_dir_or_name", "in", "PRETRAINED_ROBERTA_POSITIONAL_EMBEDDINGS_SIZES", ":", "\n", "# if we're using a pretrained model, ensure the tokenizer", "\n", "# wont index sequences longer than the number of positional embeddings", "\n", "            ", "max_len", "=", "PRETRAINED_ROBERTA_POSITIONAL_EMBEDDINGS_SIZES", "[", "model_dir_or_name", "]", "\n", "if", "max_len", "is", "not", "None", "and", "isinstance", "(", "max_len", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "                ", "init_kwargs", "[", "\"max_len\"", "]", "=", "min", "(", "init_kwargs", ".", "get", "(", "\"max_len\"", ",", "int", "(", "1e12", ")", ")", ",", "max_len", ")", "\n", "\n", "# \u5c06vocab, merge\u52a0\u5165\u5230init_kwargs\u4e2d", "\n", "", "", "if", "'vocab_file'", "in", "kwargs", ":", "# \u5982\u679c\u6307\u5b9a\u4e86\u8bcd\u8868\u5219\u7528\u6307\u5b9a\u8bcd\u8868", "\n", "            ", "init_kwargs", "[", "'vocab_file'", "]", "=", "kwargs", "[", "'vocab_file'", "]", "\n", "", "else", ":", "\n", "            ", "init_kwargs", "[", "'vocab_file'", "]", "=", "_get_file_name_base_on_postfix", "(", "model_dir", ",", "RobertaTokenizer", ".", "vocab_files_names", "[", "'vocab_file'", "]", ")", "\n", "", "init_kwargs", "[", "'merges_file'", "]", "=", "_get_file_name_base_on_postfix", "(", "model_dir", ",", "RobertaTokenizer", ".", "vocab_files_names", "[", "'merges_file'", "]", ")", "\n", "\n", "init_inputs", "=", "init_kwargs", ".", "pop", "(", "\"init_inputs\"", ",", "(", ")", ")", "\n", "# Instantiate tokenizer.", "\n", "try", ":", "\n", "            ", "tokenizer", "=", "cls", "(", "*", "init_inputs", ",", "**", "init_kwargs", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "OSError", "(", "\n", "\"Unable to load vocabulary from file. \"", "\n", "\"Please check that the provided vocabulary is accessible and not corrupted.\"", "\n", ")", "\n", "\n", "", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer.__init__": [[85, 95], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "do_lower_case", "=", "True", ",", "\n", "never_split", "=", "(", "\"[UNK]\"", ",", "\"[SEP]\"", ",", "\"[PAD]\"", ",", "\"[CLS]\"", ",", "\"[MASK]\"", ")", ")", ":", "\n", "        ", "r\"\"\"Constructs a BasicTokenizer.\n\n        Args:\n          do_lower_case: Whether to lower case the input.\n        \"\"\"", "\n", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "never_split", "=", "never_split", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer.tokenize": [[96, 116], ["bert_tokenizer.BasicTokenizer._clean_text", "bert_tokenizer.BasicTokenizer._tokenize_chinese_chars", "bert_tokenizer.whitespace_tokenize", "bert_tokenizer.whitespace_tokenize", "split_tokens.extend", "bert_tokenizer.BasicTokenizer.lower", "bert_tokenizer.BasicTokenizer._run_strip_accents", "bert_tokenizer.BasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.whitespace_tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.whitespace_tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer._run_split_on_punc"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "r\"\"\"Tokenizes a piece of text.\"\"\"", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "# This was added on November 1st, 2018 for the multilingual and Chinese", "\n", "# models. This is also applied to the English models now, but it doesn't", "\n", "# matter since the English models were not trained on any Chinese data", "\n", "# and generally don't have any Chinese data in them (there are Chinese", "\n", "# characters in the vocabulary because Wikipedia does have some Chinese", "\n", "# words in the English Wikipedia.).", "\n", "text", "=", "self", ".", "_tokenize_chinese_chars", "(", "text", ")", "\n", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "            ", "if", "self", ".", "do_lower_case", "and", "token", "not", "in", "self", ".", "never_split", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer._run_strip_accents": [[117, 127], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "        ", "r\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "                ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer._run_split_on_punc": [[128, 149], ["list", "len", "bert_tokenizer._is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer._is_punctuation", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ")", ":", "\n", "        ", "r\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "if", "text", "in", "self", ".", "never_split", ":", "\n", "            ", "return", "[", "text", "]", "\n", "", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "            ", "char", "=", "chars", "[", "i", "]", "\n", "if", "_is_punctuation", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "start_new_word", ":", "\n", "                    ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer._tokenize_chinese_chars": [[150, 162], ["ord", "bert_tokenizer.BasicTokenizer._is_chinese_char", "output.append", "output.append", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer._is_chinese_char", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_tokenize_chinese_chars", "(", "self", ",", "text", ")", ":", "\n", "        ", "r\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "self", ".", "_is_chinese_char", "(", "cp", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "output", ".", "append", "(", "char", ")", "\n", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer._is_chinese_char": [[163, 184], ["None"], "methods", ["None"], ["", "def", "_is_chinese_char", "(", "self", ",", "cp", ")", ":", "\n", "        ", "r\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "(", "cp", ">=", "0x4E00", ")", "and", "(", "cp", "<=", "0x9FFF", ")", ")", "or", "#", "\n", "(", "(", "cp", ">=", "0x3400", ")", "and", "(", "cp", "<=", "0x4DBF", ")", ")", "or", "#", "\n", "(", "(", "cp", ">=", "0x20000", ")", "and", "(", "cp", "<=", "0x2A6DF", ")", ")", "or", "#", "\n", "(", "(", "cp", ">=", "0x2A700", ")", "and", "(", "cp", "<=", "0x2B73F", ")", ")", "or", "#", "\n", "(", "(", "cp", ">=", "0x2B740", ")", "and", "(", "cp", "<=", "0x2B81F", ")", ")", "or", "#", "\n", "(", "(", "cp", ">=", "0x2B820", ")", "and", "(", "cp", "<=", "0x2CEAF", ")", ")", "or", "\n", "(", "(", "cp", ">=", "0xF900", ")", "and", "(", "cp", "<=", "0xFAFF", ")", ")", "or", "#", "\n", "(", "(", "cp", ">=", "0x2F800", ")", "and", "(", "cp", "<=", "0x2FA1F", ")", ")", ")", ":", "#", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer._clean_text": [[185, 197], ["ord", "bert_tokenizer._is_whitespace", "bert_tokenizer._is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer._is_whitespace", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer._is_control", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "r\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "_is_control", "(", "char", ")", ":", "\n", "                ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.WordpieceTokenizer.__init__": [[217, 221], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", "=", "\"[UNK]\"", ",", "max_input_chars_per_word", "=", "100", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.WordpieceTokenizer.tokenize": [[222, 274], ["bert_tokenizer.whitespace_tokenize", "list", "len", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.whitespace_tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "r\"\"\"Tokenizes a piece of text into its word pieces.\n\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n\n        For example:\n          input = \"unaffable\"\n          output = [\"un\", \"##aff\", \"##able\"]\n\n        Args:\n          text: A single token or whitespace separated tokens. This should have\n            already been passed through `BasicTokenizer`.\n\n        Returns:\n          A list of wordpiece tokens.\n        \"\"\"", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "                ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "                    ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "                        ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "                        ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "                    ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "if", "len", "(", "output_tokens", ")", "==", "0", ":", "# \u9632\u6b62\u91cc\u9762\u5168\u662f\u7a7a\u683c\u6216\u8005\u56de\u8f66\u7b26\u53f7", "\n", "            ", "return", "[", "self", ".", "unk_token", "]", "\n", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.__init__": [[279, 308], ["bert_tokenizer.load_vocab", "collections.OrderedDict", "bert_tokenizer.WordpieceTokenizer", "os.path.isfile", "ValueError", "bert_tokenizer.BasicTokenizer", "int", "bert_tokenizer.BertTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.load_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ",", "max_len", "=", "None", ",", "do_basic_tokenize", "=", "True", ",", "\n", "never_split", "=", "(", "\"[UNK]\"", ",", "\"[SEP]\"", ",", "\"[PAD]\"", ",", "\"[CLS]\"", ",", "\"[MASK]\"", ")", ")", ":", "\n", "        ", "r\"\"\"Constructs a BertTokenizer.\n\n        Args:\n          vocab_file: Path to a one-wordpiece-per-line vocabulary file\n          do_lower_case: Whether to lower case the input\n                         Only has an effect when do_wordpiece_only=False\n          do_basic_tokenize: Whether to do basic tokenization before wordpiece.\n          max_len: An artificial maximum length to truncate tokenized sequences to;\n                         Effective maximum length is always the minimum of this\n                         value (if specified) and the underlying BERT model's\n                         sequence length.\n          never_split: List of tokens which will never be split during tokenization.\n                         Only has an effect when do_wordpiece_only=False\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "vocab_file", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Can't find a vocabulary file at path '{}'. To load the vocabulary from a Google pretrained \"", "\n", "\"model use `tokenizer = BertTokenizer.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "ids_to_tokens", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "(", "ids", ",", "tok", ")", "for", "tok", ",", "ids", "in", "self", ".", "vocab", ".", "items", "(", ")", "]", ")", "\n", "self", ".", "do_basic_tokenize", "=", "do_basic_tokenize", "\n", "if", "do_basic_tokenize", ":", "\n", "            ", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ",", "\n", "never_split", "=", "never_split", ")", "\n", "", "self", ".", "wordpiece_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ")", "\n", "self", ".", "max_len", "=", "max_len", "if", "max_len", "is", "not", "None", "else", "int", "(", "1e12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.unk_index": [[309, 312], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unk_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab", "[", "'[UNK]'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.pad_index": [[313, 316], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pad_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab", "[", "'[PAD]'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.cls_index": [[317, 320], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cls_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab", "[", "'[CLS]'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.sep_index": [[321, 324], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sep_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab", "[", "'[SEP]'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer._reinit_on_new_vocab": [[325, 334], ["bert_tokenizer.WordpieceTokenizer"], "methods", ["None"], ["", "def", "_reinit_on_new_vocab", "(", "self", ",", "vocab", ")", ":", "\n", "        ", "r\"\"\"\n        \u5728load bert\u4e4b\u540e\uff0c\u53ef\u80fd\u4f1a\u5bf9vocab\u8fdb\u884c\u91cd\u65b0\u6392\u5217\u3002\u91cd\u65b0\u6392\u5217\u4e4b\u540e\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u91cd\u65b0\u521d\u59cb\u5316\u4e0evocab\u76f8\u5173\u7684\u6027\u8d28\n\n        :param vocab:\n        :return:\n        \"\"\"", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "wordpiece_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.tokenize": [[335, 344], ["bert_tokenizer.BertTokenizer.basic_tokenizer.tokenize", "bert_tokenizer.BertTokenizer.wordpiece_tokenizer.tokenize", "bert_tokenizer.BertTokenizer.wordpiece_tokenizer.tokenize", "bert_tokenizer.BertTokenizer.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "split_tokens", "=", "[", "]", "\n", "if", "self", ".", "do_basic_tokenize", ":", "\n", "            ", "for", "token", "in", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "text", ")", ":", "\n", "                ", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "                    ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "", "", "", "else", ":", "\n", "            ", "split_tokens", "=", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "text", ")", "\n", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids": [[345, 357], ["ids.append", "len", "core.logger.warning", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "r\"\"\"Converts a sequence of tokens into ids using the vocab.\"\"\"", "\n", "ids", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "ids", ".", "append", "(", "self", ".", "vocab", "[", "token", "]", ")", "\n", "", "if", "len", "(", "ids", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"Token indices sequence length is longer than the specified maximum \"", "\n", "\" sequence length for this BERT model ({} > {}). Running this\"", "\n", "\" sequence through BERT will result in indexing errors\"", ".", "format", "(", "len", "(", "ids", ")", ",", "self", ".", "max_len", ")", "\n", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_ids_to_tokens": [[358, 364], ["bert_tokenizer.BertTokenizer._convert_tokens_to_string", "tokens.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer._convert_tokens_to_string", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "r\"\"\"\u5c06token ids\u8f6c\u6362\u4e3a\u4e00\u53e5\u8bdd\"\"\"", "\n", "tokens", "=", "[", "]", "\n", "for", "i", "in", "ids", ":", "\n", "            ", "tokens", ".", "append", "(", "self", ".", "ids_to_tokens", "[", "i", "]", ")", "\n", "", "return", "self", ".", "_convert_tokens_to_string", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer._convert_tokens_to_string": [[365, 369], ["None"], "methods", ["None"], ["", "def", "_convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "\" \"", ".", "join", "(", "tokens", ")", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_vocabulary": [[370, 386], ["os.path.isdir", "os.path.join", "open", "sorted", "bert_tokenizer.BertTokenizer.vocab.items", "writer.write", "core.logger.warning"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write"], ["", "def", "save_vocabulary", "(", "self", ",", "vocab_path", ")", ":", "\n", "        ", "r\"\"\"Save the tokenizer vocabulary to a directory or file.\"\"\"", "\n", "index", "=", "0", "\n", "if", "os", ".", "path", ".", "isdir", "(", "vocab_path", ")", ":", "\n", "            ", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "vocab_path", ",", "VOCAB_NAME", ")", "\n", "", "else", ":", "\n", "            ", "vocab_file", "=", "vocab_path", "\n", "", "with", "open", "(", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "for", "token", ",", "token_index", "in", "sorted", "(", "self", ".", "vocab", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: vocabulary indices are not consecutive.\"", "\n", "\" Please check that the vocabulary is not corrupted!\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "token", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "", "", "return", "vocab_file", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_pretrained": [[387, 389], ["bert_tokenizer.BertTokenizer.save_vocabulary"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.save_vocabulary"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "self", ".", "save_vocabulary", "(", "save_directory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained": [[390, 412], ["io.file_utils._get_bert_dir", "io.file_utils._get_file_name_base_on_postfix", "core.logger.info", "min", "cls", "kwargs.get", "int"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_bert_dir", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "model_dir_or_name", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \u7ed9\u5b9a\u6a21\u578b\u7684\u540d\u5b57\u6216\u8005\u8def\u5f84\uff0c\u76f4\u63a5\u8bfb\u53d6vocab.\n        \"\"\"", "\n", "model_dir", "=", "_get_bert_dir", "(", "model_dir_or_name", ")", "\n", "pretrained_model_name_or_path", "=", "_get_file_name_base_on_postfix", "(", "model_dir", ",", "'.txt'", ")", "\n", "logger", ".", "info", "(", "\"loading vocabulary file {}\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "max_len", "=", "512", "\n", "kwargs", "[", "'max_len'", "]", "=", "min", "(", "kwargs", ".", "get", "(", "'max_position_embeddings'", ",", "int", "(", "1e12", ")", ")", ",", "max_len", ")", "\n", "# Instantiate tokenizer.", "\n", "if", "'do_lower_case'", "not", "in", "kwargs", ":", "\n", "            ", "if", "model_dir_or_name", "in", "PRETRAINED_INIT_CONFIGURATION", ":", "\n", "                ", "kwargs", "[", "'do_lower_case'", "]", "=", "PRETRAINED_INIT_CONFIGURATION", "[", "model_dir_or_name", "]", "[", "'do_lower_case'", "]", "\n", "", "else", ":", "\n", "                ", "if", "'case'", "in", "model_dir_or_name", ":", "\n", "                    ", "kwargs", "[", "'do_lower_case'", "]", "=", "False", "\n", "", "elif", "'uncase'", "in", "model_dir_or_name", ":", "\n", "                    ", "kwargs", "[", "'do_lower_case'", "]", "=", "True", "\n", "\n", "", "", "", "tokenizer", "=", "cls", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.encode": [[413, 451], ["isinstance", "text.split", "isinstance", "bert_tokenizer.BertTokenizer.basic_tokenizer._tokenize_chinese_chars().split", "bert_tokenizer.BertTokenizer.convert_tokens_to_ids", "word_pieces.extend", "TypeError", "tokens.extend", "word_pieces.insert", "word_pieces.append", "bert_tokenizer.BertTokenizer.basic_tokenizer._tokenize_chinese_chars", "bert_tokenizer.BertTokenizer.wordpiece_tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.tokenize"], ["", "def", "encode", "(", "self", ",", "text", ",", "add_special_tokens", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        \u7ed9\u5b9atext\u8f93\u5165\u5c06\u6570\u636eencode\u4e3aindex\u7684\u5f62\u5f0f\u3002\n\n        Example::\n\n            >>> from fastNLP.modules import BertTokenizer\n            >>> bert_tokenizer = BertTokenizer.from_pretrained('en')\n            >>> print(bert_tokenizer.encode('from'))\n            >>> print(bert_tokenizer.encode(\"This is a demo sentence\"))\n            >>> print(bert_tokenizer.encode([\"This\", \"is\", 'a']))\n\n\n        :param List[str],str text: \u8f93\u5165\u7684\u4e00\u6761\u8ba4\u4e3a\u662f\u4e00\u53e5\u8bdd\u3002\n        :param bool add_special_tokens: \u662f\u5426\u4fdd\u8bc1\u53e5\u9996\u548c\u53e5\u5c3e\u662fcls\u548csep\u3002\n        :return:\n        \"\"\"", "\n", "\n", "word_pieces", "=", "[", "]", "\n", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "words", "=", "text", ".", "split", "(", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "list", ")", ":", "\n", "            ", "words", "=", "text", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Only support str or List[str]\"", ")", "\n", "", "for", "word", "in", "words", ":", "\n", "            ", "_words", "=", "self", ".", "basic_tokenizer", ".", "_tokenize_chinese_chars", "(", "word", ")", ".", "split", "(", ")", "\n", "tokens", "=", "[", "]", "\n", "for", "word", "in", "_words", ":", "\n", "                ", "tokens", ".", "extend", "(", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "word", ")", ")", "\n", "", "word_piece_ids", "=", "self", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "word_pieces", ".", "extend", "(", "word_piece_ids", ")", "\n", "", "if", "add_special_tokens", ":", "\n", "            ", "if", "word_pieces", "[", "0", "]", "!=", "self", ".", "cls_index", ":", "\n", "                ", "word_pieces", ".", "insert", "(", "0", ",", "self", ".", "cls_index", ")", "\n", "", "if", "word_pieces", "[", "-", "1", "]", "!=", "self", ".", "sep_index", ":", "\n", "                ", "word_pieces", ".", "append", "(", "self", ".", "sep_index", ")", "\n", "", "", "return", "word_pieces", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer._is_control": [[33, 43], ["unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["def", "_is_control", "(", "char", ")", ":", "\n", "    ", "r\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"C\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer._is_punctuation": [[45, 59], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_punctuation", "(", "char", ")", ":", "\n", "    ", "r\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "(", "cp", ">=", "33", ")", "and", "(", "cp", "<=", "47", ")", ")", "or", "(", "(", "cp", ">=", "58", ")", "and", "(", "cp", "<=", "64", ")", ")", "or", "\n", "(", "(", "cp", ">=", "91", ")", "and", "(", "cp", "<=", "96", ")", ")", "or", "(", "(", "cp", ">=", "123", ")", "and", "(", "cp", "<=", "126", ")", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer._is_whitespace": [[61, 71], ["unicodedata.category"], "function", ["None"], ["", "def", "_is_whitespace", "(", "char", ")", ":", "\n", "    ", "r\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically contorl characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.whitespace_tokenize": [[73, 80], ["text.strip.strip", "text.strip.split"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "    ", "r\"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "        ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.load_vocab": [[199, 212], ["collections.OrderedDict", "open", "reader.readline", "token.strip.strip"], "function", ["None"], ["", "", "def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "r\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "index", "=", "0", "\n", "with", "open", "(", "vocab_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "token", "=", "reader", ".", "readline", "(", ")", "\n", "if", "not", "token", ":", "\n", "                ", "break", "\n", "", "token", "=", "token", ".", "strip", "(", ")", "\n", "vocab", "[", "token", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForSequenceClassification.__init__": [[50, 70], ["base_model.BaseModel.__init__", "torch.nn.Dropout", "torch.nn.Linear", "core._logger.logger.warning", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "architectures", "=", "'bert'", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForSequenceClassification.forward": [[71, 84], ["bert.BertForSequenceClassification.dropout", "bert.BertForSequenceClassification.classifier", "bert.BertForSequenceClassification.bert", "logits.squeeze.squeeze.size", "logits.squeeze.squeeze.squeeze"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForSequenceClassification.predict": [[85, 95], ["bert.BertForSequenceClassification.forward", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], ["\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForSentenceMatching.__init__": [[102, 121], ["base_model.BaseModel.__init__", "torch.nn.Dropout", "torch.nn.Linear", "core._logger.logger.warning", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "self", ".", "architectures", "=", "architectures", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", ")", "\n", "\n", "", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "r\"\"\"Constructs a `BertConfig` from a Python dictionary of parameters.\"\"\"", "\n", "config", "=", "BertConfig", "(", "vocab_size_or_config_json_file", "=", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "json_object", ".", "items", "(", ")", ":", "\n", "            ", "config", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "return", "config", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForSentenceMatching.forward": [[122, 134], ["bert.BertForSentenceMatching.bert", "bert.BertForSentenceMatching.dropout", "bert.BertForSentenceMatching.classifier"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["        ", "r\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n", "", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForSentenceMatching.predict": [[135, 142], ["bert.BertForSentenceMatching.forward", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n", "", "def", "to_json_file", "(", "self", ",", "json_file_path", ")", ":", "\n", "        ", "r\"\"\" Save this instance to a json file.\"\"\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "json_file_path", ")", ":", "\n", "            ", "json_file_path", "=", "os", ".", "path", ".", "join", "(", "json_file_path", ",", "CONFIG_FILE", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForMultipleChoice.__init__": [[149, 169], ["base_model.BaseModel.__init__", "torch.nn.Dropout", "torch.nn.Linear", "core._logger.logger.warning", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n", "\n", "", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n", "\n", "", "ACT2FN", "=", "{", "\"gelu\"", ":", "gelu", ",", "\"relu\"", ":", "torch", ".", "nn", ".", "functional", ".", "relu", ",", "\"swish\"", ":", "swish", "}", "\n", "\n", "\n", "BertLayerNorm", "=", "torch", ".", "nn", ".", "LayerNorm", "\n", "\n", "\n", "class", "DistilBertEmbeddings", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "create_sinusoidal_embeddings", "(", "n_pos", ",", "dim", ",", "out", ")", ":", "\n", "            ", "position_enc", "=", "np", ".", "array", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "j", "//", "2", ")", "/", "dim", ")", "for", "j", "in", "range", "(", "dim", ")", "]", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForMultipleChoice.forward": [[170, 184], ["words.size", "words.view", "bert.BertForMultipleChoice.bert", "bert.BertForMultipleChoice.dropout", "bert.BertForMultipleChoice.classifier", "bert.BertForMultipleChoice.view"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["for", "pos", "in", "range", "(", "n_pos", ")", "\n", "]", ")", "\n", "out", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", ")", "\n", "out", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", ")", "\n", "out", ".", "detach_", "(", ")", "\n", "out", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "if", "config", ".", "sinusoidal_pos_embds", ":", "\n", "            ", "create_sinusoidal_embeddings", "(", "n_pos", "=", "config", ".", "max_position_embeddings", ",", "\n", "dim", "=", "config", ".", "hidden_size", ",", "\n", "out", "=", "self", ".", "position_embeddings", ".", "weight", ")", "\n", "\n", "", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForMultipleChoice.predict": [[185, 192], ["bert.BertForMultipleChoice.forward", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], ["self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForTokenClassification.__init__": [[199, 219], ["base_model.BaseModel.__init__", "torch.nn.Dropout", "torch.nn.Linear", "core._logger.logger.warning", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "# (max_seq_length)", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "# (bs, max_seq_length)", "\n", "\n", "word_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "# (bs, max_seq_length, dim)", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "# (bs, max_seq_length, dim)", "\n", "\n", "embeddings", "=", "word_embeddings", "+", "position_embeddings", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "# (bs, max_seq_length, dim)", "\n", "return", "embeddings", "\n", "\n", "\n", "", "", "class", "BertEmbeddings", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "r\"\"\"Construct the embeddings from word, position and token_type embeddings.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForTokenClassification.forward": [[220, 230], ["bert.BertForTokenClassification.bert", "bert.BertForTokenClassification.dropout", "bert.BertForTokenClassification.classifier"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "words_embeddings", "=", "None", ")", ":", "\n", "        ", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForTokenClassification.predict": [[231, 238], ["bert.BertForTokenClassification.forward", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], ["position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "", "if", "words_embeddings", "is", "None", ":", "\n", "            ", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "", "else", ":", "\n", "            ", "assert", "input_ids", ".", "size", "(", ")", "==", "words_embeddings", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForQuestionAnswering.__init__": [[245, 255], ["base_model.BaseModel.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["return", "embeddings", "\n", "\n", "\n", "", "", "class", "BertSelfAttention", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForQuestionAnswering.forward": [[256, 269], ["bert.BertForQuestionAnswering.bert", "bert.BertForQuestionAnswering.qa_outputs"], "methods", ["None"], ["self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n", "", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.bert.BertForQuestionAnswering.predict": [[270, 272], ["bert.BertForQuestionAnswering.forward"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer.StarTransEnc.__init__": [[26, 57], ["torch.nn.Module.__init__", "embeddings.utils.get_embeddings", "torch.nn.Linear", "modules.encoder.star_transformer.StarTransformer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings"], ["\n", "super", "(", "StarTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "iters", "=", "num_layers", "\n", "\n", "self", ".", "norm", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "LayerNorm", "(", "hidden_size", ",", "eps", "=", "1e-6", ")", "for", "_", "in", "range", "(", "self", ".", "iters", ")", "]", ")", "\n", "# self.emb_fc = nn.Conv2d(hidden_size, hidden_size, 1)", "\n", "self", ".", "emb_drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "ring_att", "=", "nn", ".", "ModuleList", "(", "\n", "[", "_MSA1", "(", "hidden_size", ",", "nhead", "=", "num_head", ",", "head_dim", "=", "head_dim", ",", "dropout", "=", "0.0", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "iters", ")", "]", ")", "\n", "self", ".", "star_att", "=", "nn", ".", "ModuleList", "(", "\n", "[", "_MSA2", "(", "hidden_size", ",", "nhead", "=", "num_head", ",", "head_dim", "=", "head_dim", ",", "dropout", "=", "0.0", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "iters", ")", "]", ")", "\n", "\n", "if", "max_len", "is", "not", "None", ":", "\n", "            ", "self", ".", "pos_emb", "=", "nn", ".", "Embedding", "(", "max_len", ",", "hidden_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pos_emb", "=", "None", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "data", ",", "mask", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer.StarTransEnc.forward": [[58, 71], ["star_transformer.StarTransEnc.embedding", "star_transformer.StarTransEnc.emb_fc", "star_transformer.StarTransEnc.encoder"], "methods", ["None"], ["\n", "\n", "def", "norm_func", "(", "f", ",", "x", ")", ":", "\n", "# B, H, L, 1", "\n", "            ", "return", "f", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "", "B", ",", "L", ",", "H", "=", "data", ".", "size", "(", ")", "\n", "mask", "=", "(", "mask", ".", "eq", "(", "False", ")", ")", "# flip the mask for masked_fill_", "\n", "smask", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "B", ",", "1", ",", ")", ".", "byte", "(", ")", ".", "to", "(", "mask", ")", ",", "mask", "]", ",", "1", ")", "\n", "\n", "embs", "=", "data", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "# B H L 1", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer._Cls.__init__": [[74, 81], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], [".", "view", "(", "1", ",", "L", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "[", ":", ",", ":", ",", ":", ",", "None", "]", "# 1 H L 1", "\n", "embs", "=", "embs", "+", "P", "\n", "", "embs", "=", "norm_func", "(", "self", ".", "emb_drop", ",", "embs", ")", "\n", "nodes", "=", "embs", "\n", "relay", "=", "embs", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", "\n", "ex_mask", "=", "mask", "[", ":", ",", "None", ",", ":", ",", "None", "]", ".", "expand", "(", "B", ",", "H", ",", "L", ",", "1", ")", "\n", "r_embs", "=", "embs", ".", "view", "(", "B", ",", "H", ",", "1", ",", "L", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "iters", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer._Cls.forward": [[83, 86], ["star_transformer._Cls.fc"], "methods", ["None"], ["nodes", "=", "F", ".", "leaky_relu", "(", "self", ".", "ring_att", "[", "i", "]", "(", "norm_func", "(", "self", ".", "norm", "[", "i", "]", ",", "nodes", ")", ",", "ax", "=", "ax", ")", ")", "\n", "# nodes = F.leaky_relu(self.ring_att[i](nodes, ax=ax))", "\n", "relay", "=", "F", ".", "leaky_relu", "(", "self", ".", "star_att", "[", "i", "]", "(", "relay", ",", "torch", ".", "cat", "(", "[", "relay", ",", "nodes", "]", ",", "2", ")", ",", "smask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer._NLICls.__init__": [[89, 97], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["", "nodes", "=", "nodes", ".", "view", "(", "B", ",", "H", ",", "L", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "return", "nodes", ",", "relay", ".", "view", "(", "B", ",", "H", ")", "\n", "\n", "\n", "", "", "class", "_MSA1", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "nhid", ",", "nhead", "=", "10", ",", "head_dim", "=", "10", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "_MSA1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Multi-head Self Attention Case 1, doing self-attention for small regions", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer._NLICls.forward": [[99, 103], ["torch.cat", "star_transformer._NLICls.fc", "torch.abs"], "methods", ["None"], ["self", ".", "WQ", "=", "nn", ".", "Conv2d", "(", "nhid", ",", "nhead", "*", "head_dim", ",", "1", ")", "\n", "self", ".", "WK", "=", "nn", ".", "Conv2d", "(", "nhid", ",", "nhead", "*", "head_dim", ",", "1", ")", "\n", "self", ".", "WV", "=", "nn", ".", "Conv2d", "(", "nhid", ",", "nhead", "*", "head_dim", ",", "1", ")", "\n", "self", ".", "WO", "=", "nn", ".", "Conv2d", "(", "nhead", "*", "head_dim", ",", "nhid", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer.STSeqLabel.__init__": [[111, 144], ["torch.nn.Module.__init__", "star_transformer.StarTransEnc", "star_transformer._Cls"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["        ", "nhid", ",", "nhead", ",", "head_dim", ",", "unfold_size", "=", "self", ".", "nhid", ",", "self", ".", "nhead", ",", "self", ".", "head_dim", ",", "self", ".", "unfold_size", "\n", "B", ",", "H", ",", "L", ",", "_", "=", "x", ".", "shape", "\n", "\n", "q", ",", "k", ",", "v", "=", "self", ".", "WQ", "(", "x", ")", ",", "self", ".", "WK", "(", "x", ")", ",", "self", ".", "WV", "(", "x", ")", "# x: (B,H,L,1)", "\n", "\n", "if", "ax", "is", "not", "None", ":", "\n", "            ", "aL", "=", "ax", ".", "shape", "[", "2", "]", "\n", "ak", "=", "self", ".", "WK", "(", "ax", ")", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "aL", ",", "L", ")", "\n", "av", "=", "self", ".", "WV", "(", "ax", ")", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "aL", ",", "L", ")", "\n", "", "q", "=", "q", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "1", ",", "L", ")", "\n", "k", "=", "F", ".", "unfold", "(", "k", ".", "view", "(", "B", ",", "nhead", "*", "head_dim", ",", "L", ",", "1", ")", ",", "(", "unfold_size", ",", "1", ")", ",", "padding", "=", "(", "unfold_size", "//", "2", ",", "0", ")", ")", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "unfold_size", ",", "L", ")", "\n", "v", "=", "F", ".", "unfold", "(", "v", ".", "view", "(", "B", ",", "nhead", "*", "head_dim", ",", "L", ",", "1", ")", ",", "(", "unfold_size", ",", "1", ")", ",", "padding", "=", "(", "unfold_size", "//", "2", ",", "0", ")", ")", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "unfold_size", ",", "L", ")", "\n", "if", "ax", "is", "not", "None", ":", "\n", "            ", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "ak", "]", ",", "3", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "av", "]", ",", "3", ")", "\n", "\n", "", "alphas", "=", "self", ".", "drop", "(", "F", ".", "softmax", "(", "(", "q", "*", "k", ")", ".", "sum", "(", "2", ",", "keepdim", "=", "True", ")", "/", "NP", ".", "sqrt", "(", "head_dim", ")", ",", "3", ")", ")", "# B N L 1 U", "\n", "att", "=", "(", "alphas", "*", "v", ")", ".", "sum", "(", "3", ")", ".", "view", "(", "B", ",", "nhead", "*", "head_dim", ",", "L", ",", "1", ")", "\n", "\n", "ret", "=", "self", ".", "WO", "(", "att", ")", "\n", "\n", "return", "ret", "\n", "\n", "\n", "", "", "class", "_MSA2", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "nhid", ",", "nhead", "=", "10", ",", "head_dim", "=", "10", ",", "dropout", "=", "0.1", ")", ":", "\n", "# Multi-head Self Attention Case 2, a broadcastable query for a sequence key and value", "\n", "        ", "super", "(", "_MSA2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "WQ", "=", "nn", ".", "Conv2d", "(", "nhid", ",", "nhead", "*", "head_dim", ",", "1", ")", "\n", "self", ".", "WK", "=", "nn", ".", "Conv2d", "(", "nhid", ",", "nhead", "*", "head_dim", ",", "1", ")", "\n", "self", ".", "WV", "=", "nn", ".", "Conv2d", "(", "nhid", ",", "nhead", "*", "head_dim", ",", "1", ")", "\n", "self", ".", "WO", "=", "nn", ".", "Conv2d", "(", "nhead", "*", "head_dim", ",", "nhid", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer.STSeqLabel.forward": [[145, 157], ["core.utils.seq_len_to_mask", "star_transformer.STSeqLabel.enc", "star_transformer.STSeqLabel.cls", "output.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask"], ["\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "# print('NUM_HEAD', nhead, 'DIM_HEAD', head_dim)", "\n", "self", ".", "nhid", ",", "self", ".", "nhead", ",", "self", ".", "head_dim", ",", "self", ".", "unfold_size", "=", "nhid", ",", "nhead", ",", "head_dim", ",", "3", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "mask", "=", "None", ")", ":", "\n", "# x: B, H, 1, 1, 1 y: B H L 1", "\n", "        ", "nhid", ",", "nhead", ",", "head_dim", ",", "unfold_size", "=", "self", ".", "nhid", ",", "self", ".", "nhead", ",", "self", ".", "head_dim", ",", "self", ".", "unfold_size", "\n", "B", ",", "H", ",", "L", ",", "_", "=", "y", ".", "shape", "\n", "\n", "q", ",", "k", ",", "v", "=", "self", ".", "WQ", "(", "x", ")", ",", "self", ".", "WK", "(", "y", ")", ",", "self", ".", "WV", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer.STSeqLabel.predict": [[158, 168], ["star_transformer.STSeqLabel.forward", "y[].max"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], ["q", "=", "q", ".", "view", "(", "B", ",", "nhead", ",", "1", ",", "head_dim", ")", "# B, H, 1, 1 -> B, N, 1, h", "\n", "k", "=", "k", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "L", ")", "# B, H, L, 1 -> B, N, h, L", "\n", "v", "=", "v", ".", "view", "(", "B", ",", "nhead", ",", "head_dim", ",", "L", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "# B, H, L, 1 -> B, N, L, h", "\n", "pre_a", "=", "torch", ".", "matmul", "(", "q", ",", "k", ")", "/", "NP", ".", "sqrt", "(", "head_dim", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "pre_a", "=", "pre_a", ".", "masked_fill", "(", "mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "alphas", "=", "self", ".", "drop", "(", "F", ".", "softmax", "(", "pre_a", ",", "3", ")", ")", "# B, N, 1, L", "\n", "att", "=", "torch", ".", "matmul", "(", "alphas", ",", "v", ")", ".", "view", "(", "B", ",", "-", "1", ",", "1", ",", "1", ")", "# B, N, 1, h -> B, N*h, 1, 1", "\n", "return", "self", ".", "WO", "(", "att", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer.STSeqCls.__init__": [[176, 209], ["torch.nn.Module.__init__", "star_transformer.StarTransEnc", "star_transformer._Cls"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer.STSeqCls.forward": [[210, 222], ["core.utils.seq_len_to_mask", "star_transformer.STSeqCls.enc", "star_transformer.STSeqCls.cls", "nodes.max"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer.STSeqCls.predict": [[223, 233], ["star_transformer.STSeqCls.forward", "y[].max"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer.STNLICls.__init__": [[241, 274], ["torch.nn.Module.__init__", "star_transformer.StarTransEnc", "star_transformer._NLICls"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer.STNLICls.forward": [[275, 295], ["core.utils.seq_len_to_mask", "core.utils.seq_len_to_mask", "star_transformer.STNLICls.forward.enc"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.star_transformer.STNLICls.predict": [[296, 308], ["star_transformer.STNLICls.forward", "y[].max"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.GraphParser.__init__": [[136, 138], ["base_model.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GraphParser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.GraphParser.greedy_decoder": [[139, 157], ["mask.eq", "matrix.masked_fill_", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "mask.eq.unsqueeze", "mask.long", "arc_matrix.new().fill_", "arc_matrix.new"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "greedy_decoder", "(", "arc_matrix", ",", "mask", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u8d2a\u5fc3\u89e3\u7801\u65b9\u5f0f, \u8f93\u5165\u56fe, \u8f93\u51fa\u8d2a\u5fc3\u89e3\u7801\u7684parsing\u7ed3\u679c, \u4e0d\u4fdd\u8bc1\u5408\u6cd5\u7684\u6784\u6210\u6811\n\n        :param arc_matrix: [batch, seq_len, seq_len] \u8f93\u5165\u56fe\u77e9\u9635\n        :param mask: [batch, seq_len] \u8f93\u5165\u56fe\u7684padding mask, \u6709\u5185\u5bb9\u7684\u90e8\u5206\u4e3a 1, \u5426\u5219\u4e3a 0.\n            \u82e5\u4e3a ``None`` \u65f6, \u9ed8\u8ba4\u4e3a\u51681\u5411\u91cf. Default: ``None``\n        :return heads: [batch, seq_len] \u6bcf\u4e2a\u5143\u7d20\u5728\u6811\u4e2d\u5bf9\u5e94\u7684head(parent)\u9884\u6d4b\u7ed3\u679c\n        \"\"\"", "\n", "_", ",", "seq_len", ",", "_", "=", "arc_matrix", ".", "shape", "\n", "matrix", "=", "arc_matrix", "+", "torch", ".", "diag", "(", "arc_matrix", ".", "new", "(", "seq_len", ")", ".", "fill_", "(", "-", "np", ".", "inf", ")", ")", "\n", "flip_mask", "=", "mask", ".", "eq", "(", "False", ")", "\n", "matrix", ".", "masked_fill_", "(", "flip_mask", ".", "unsqueeze", "(", "1", ")", ",", "-", "np", ".", "inf", ")", "\n", "_", ",", "heads", "=", "torch", ".", "max", "(", "matrix", ",", "dim", "=", "2", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "heads", "*=", "mask", ".", "long", "(", ")", "\n", "", "return", "heads", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.GraphParser.mst_decoder": [[158, 178], ["arc_matrix.clone", "arc_matrix.clone.new_zeros().long", "enumerate", "mask.long().sum", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "mask.long", "arc_matrix.clone.new_zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "biaffine_parser._mst", "mask.long", "[].cpu().numpy", "[].cpu", "graph.detach"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser._mst"], ["", "@", "staticmethod", "\n", "def", "mst_decoder", "(", "arc_matrix", ",", "mask", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u7528\u6700\u5927\u751f\u6210\u6811\u7b97\u6cd5, \u8ba1\u7b97parsing\u7ed3\u679c, \u4fdd\u8bc1\u8f93\u51fa\u5408\u6cd5\u7684\u6811\u7ed3\u6784\n\n        :param arc_matrix: [batch, seq_len, seq_len] \u8f93\u5165\u56fe\u77e9\u9635\n        :param mask: [batch, seq_len] \u8f93\u5165\u56fe\u7684padding mask, \u6709\u5185\u5bb9\u7684\u90e8\u5206\u4e3a 1, \u5426\u5219\u4e3a 0.\n            \u82e5\u4e3a ``None`` \u65f6, \u9ed8\u8ba4\u4e3a\u51681\u5411\u91cf. Default: ``None``\n        :return heads: [batch, seq_len] \u6bcf\u4e2a\u5143\u7d20\u5728\u6811\u4e2d\u5bf9\u5e94\u7684head(parent)\u9884\u6d4b\u7ed3\u679c\n        \"\"\"", "\n", "batch_size", ",", "seq_len", ",", "_", "=", "arc_matrix", ".", "shape", "\n", "matrix", "=", "arc_matrix", ".", "clone", "(", ")", "\n", "ans", "=", "matrix", ".", "new_zeros", "(", "batch_size", ",", "seq_len", ")", ".", "long", "(", ")", "\n", "lens", "=", "(", "mask", ".", "long", "(", ")", ")", ".", "sum", "(", "1", ")", "if", "mask", "is", "not", "None", "else", "torch", ".", "zeros", "(", "batch_size", ")", "+", "seq_len", "\n", "for", "i", ",", "graph", "in", "enumerate", "(", "matrix", ")", ":", "\n", "            ", "len_i", "=", "lens", "[", "i", "]", "\n", "ans", "[", "i", ",", ":", "len_i", "]", "=", "torch", ".", "as_tensor", "(", "_mst", "(", "graph", ".", "detach", "(", ")", "[", ":", "len_i", ",", ":", "len_i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "device", "=", "ans", ".", "device", ")", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "            ", "ans", "*=", "mask", ".", "long", "(", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.ArcBiaffine.__init__": [[186, 200], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modules.utils.initial_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "biaffine_parser.ArcBiaffine.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.modules.utils.initial_parameter"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "bias", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param hidden_size: \u8f93\u5165\u7684\u7279\u5f81\u7ef4\u5ea6\n        :param bias: \u662f\u5426\u4f7f\u7528bias. Default: ``True``\n        \"\"\"", "\n", "super", "(", "ArcBiaffine", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "U", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "hidden_size", ",", "hidden_size", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "has_bias", "=", "bias", "\n", "if", "self", ".", "has_bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "hidden_size", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "\"bias\"", ",", "None", ")", "\n", "", "initial_parameter", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.ArcBiaffine.forward": [[201, 213], ["dep.matmul", "output.bmm.bmm.bmm", "head.transpose", "head.matmul().unsqueeze", "head.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "head", ",", "dep", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param head: arc-head tensor [batch, length, hidden]\n        :param dep: arc-dependent tensor [batch, length, hidden]\n        :return output: tensor [bacth, length, length]\n        \"\"\"", "\n", "output", "=", "dep", ".", "matmul", "(", "self", ".", "U", ")", "\n", "output", "=", "output", ".", "bmm", "(", "head", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "if", "self", ".", "has_bias", ":", "\n", "            ", "output", "=", "output", "+", "head", ".", "matmul", "(", "self", ".", "bias", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.LabelBilinear.__init__": [[221, 232], ["torch.Module.__init__", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "in1_features", ",", "in2_features", ",", "num_label", ",", "bias", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param in1_features: \u8f93\u5165\u7684\u7279\u5f811\u7ef4\u5ea6\n        :param in2_features: \u8f93\u5165\u7684\u7279\u5f812\u7ef4\u5ea6\n        :param num_label: \u8fb9\u7c7b\u522b\u7684\u4e2a\u6570\n        :param bias: \u662f\u5426\u4f7f\u7528bias. Default: ``True``\n        \"\"\"", "\n", "super", "(", "LabelBilinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bilinear", "=", "nn", ".", "Bilinear", "(", "in1_features", ",", "in2_features", ",", "num_label", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "in1_features", "+", "in2_features", ",", "num_label", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.LabelBilinear.forward": [[233, 243], ["biaffine_parser.LabelBilinear.bilinear", "biaffine_parser.LabelBilinear.lin", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param x1: [batch, seq_len, hidden] \u8f93\u5165\u7279\u5f811, \u5373label-head\n        :param x2: [batch, seq_len, hidden] \u8f93\u5165\u7279\u5f812, \u5373label-dep\n        :return output: [batch, seq_len, num_cls] \u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u7c7b\u522b\u7684\u6982\u7387\u56fe\n        \"\"\"", "\n", "output", "=", "self", ".", "bilinear", "(", "x1", ",", "x2", ")", "\n", "output", "=", "output", "+", "self", ".", "lin", "(", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "2", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.__init__": [[252, 332], ["biaffine_parser.GraphParser.__init__", "embeddings.utils.get_embeddings", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "biaffine_parser.ArcBiaffine", "biaffine_parser.LabelBilinear", "biaffine_parser.BiaffineParser.reset_parameters", "modules.encoder.variational_rnn.VarLSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ELU", "torch.ELU", "torch.ELU", "modules.dropout.TimestepDropout", "torch.LSTM", "torch.LSTM", "torch.LSTM", "int", "torch.Embedding", "torch.Embedding", "torch.Embedding", "modules.encoder.transformer.TransformerEncoder", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.reset_parameters", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["def", "__init__", "(", "self", ",", "\n", "embed", ",", "\n", "pos_vocab_size", ",", "\n", "pos_emb_dim", ",", "\n", "num_label", ",", "\n", "rnn_layers", "=", "1", ",", "\n", "rnn_hidden_size", "=", "200", ",", "\n", "arc_mlp_size", "=", "100", ",", "\n", "label_mlp_size", "=", "100", ",", "\n", "dropout", "=", "0.3", ",", "\n", "encoder", "=", "'lstm'", ",", "\n", "use_greedy_infer", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param embed: \u5355\u8bcd\u8bcd\u5178, \u53ef\u4ee5\u662f tuple, \u5305\u62ec(num_embedings, embedding_dim), \u5373\n            embedding\u7684\u5927\u5c0f\u548c\u6bcf\u4e2a\u8bcd\u7684\u7ef4\u5ea6. \u4e5f\u53ef\u4ee5\u4f20\u5165 nn.Embedding \u5bf9\u8c61,\n            \u6b64\u65f6\u5c31\u4ee5\u4f20\u5165\u7684\u5bf9\u8c61\u4f5c\u4e3aembedding\n        :param pos_vocab_size: part-of-speech \u8bcd\u5178\u5927\u5c0f\n        :param pos_emb_dim: part-of-speech \u5411\u91cf\u7ef4\u5ea6\n        :param num_label: \u8fb9\u7684\u7c7b\u522b\u4e2a\u6570\n        :param rnn_layers: rnn encoder\u7684\u5c42\u6570\n        :param rnn_hidden_size: rnn encoder \u7684\u9690\u72b6\u6001\u7ef4\u5ea6\n        :param arc_mlp_size: \u8fb9\u9884\u6d4b\u7684MLP\u7ef4\u5ea6\n        :param label_mlp_size: \u7c7b\u522b\u9884\u6d4b\u7684MLP\u7ef4\u5ea6\n        :param dropout: dropout\u6982\u7387.\n        :param encoder: encoder\u7c7b\u522b, \u53ef\u9009 ('lstm', 'var-lstm', 'transformer'). Default: lstm\n        :param use_greedy_infer: \u662f\u5426\u5728inference\u65f6\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5.\n            \u82e5 ``False`` , \u4f7f\u7528\u66f4\u52a0\u7cbe\u786e\u4f46\u76f8\u5bf9\u7f13\u6162\u7684MST\u7b97\u6cd5. Default: ``False``\n        \"\"\"", "\n", "super", "(", "BiaffineParser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "rnn_out_size", "=", "2", "*", "rnn_hidden_size", "\n", "word_hid_dim", "=", "pos_hid_dim", "=", "rnn_hidden_size", "\n", "self", ".", "word_embedding", "=", "get_embeddings", "(", "embed", ")", "\n", "word_emb_dim", "=", "self", ".", "word_embedding", ".", "embedding_dim", "\n", "self", ".", "pos_embedding", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "pos_vocab_size", ",", "embedding_dim", "=", "pos_emb_dim", ")", "\n", "self", ".", "word_fc", "=", "nn", ".", "Linear", "(", "word_emb_dim", ",", "word_hid_dim", ")", "\n", "self", ".", "pos_fc", "=", "nn", ".", "Linear", "(", "pos_emb_dim", ",", "pos_hid_dim", ")", "\n", "self", ".", "word_norm", "=", "nn", ".", "LayerNorm", "(", "word_hid_dim", ")", "\n", "self", ".", "pos_norm", "=", "nn", ".", "LayerNorm", "(", "pos_hid_dim", ")", "\n", "self", ".", "encoder_name", "=", "encoder", "\n", "self", ".", "max_len", "=", "512", "\n", "if", "encoder", "==", "'var-lstm'", ":", "\n", "            ", "self", ".", "encoder", "=", "VarLSTM", "(", "input_size", "=", "word_hid_dim", "+", "pos_hid_dim", ",", "\n", "hidden_size", "=", "rnn_hidden_size", ",", "\n", "num_layers", "=", "rnn_layers", ",", "\n", "bias", "=", "True", ",", "\n", "batch_first", "=", "True", ",", "\n", "input_dropout", "=", "dropout", ",", "\n", "hidden_dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "True", ")", "\n", "", "elif", "encoder", "==", "'lstm'", ":", "\n", "            ", "self", ".", "encoder", "=", "nn", ".", "LSTM", "(", "input_size", "=", "word_hid_dim", "+", "pos_hid_dim", ",", "\n", "hidden_size", "=", "rnn_hidden_size", ",", "\n", "num_layers", "=", "rnn_layers", ",", "\n", "bias", "=", "True", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "True", ")", "\n", "", "elif", "encoder", "==", "'transformer'", ":", "\n", "            ", "n_head", "=", "16", "\n", "d_k", "=", "d_v", "=", "int", "(", "rnn_out_size", "/", "n_head", ")", "\n", "if", "(", "d_k", "*", "n_head", ")", "!=", "rnn_out_size", ":", "\n", "                ", "raise", "ValueError", "(", "'unsupported rnn_out_size: {} for transformer'", ".", "format", "(", "rnn_out_size", ")", ")", "\n", "", "self", ".", "position_emb", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "self", ".", "max_len", ",", "\n", "embedding_dim", "=", "rnn_out_size", ",", ")", "\n", "self", ".", "encoder", "=", "TransformerEncoder", "(", "num_layers", "=", "rnn_layers", ",", "d_model", "=", "rnn_out_size", ",", "\n", "n_head", "=", "n_head", ",", "dim_ff", "=", "1024", ",", "dropout", "=", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'unsupported encoder type: {}'", ".", "format", "(", "encoder", ")", ")", "\n", "\n", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "rnn_out_size", ",", "arc_mlp_size", "*", "2", "+", "label_mlp_size", "*", "2", ")", ",", "\n", "nn", ".", "ELU", "(", ")", ",", "\n", "TimestepDropout", "(", "p", "=", "dropout", ")", ",", ")", "\n", "self", ".", "arc_mlp_size", "=", "arc_mlp_size", "\n", "self", ".", "label_mlp_size", "=", "label_mlp_size", "\n", "self", ".", "arc_predictor", "=", "ArcBiaffine", "(", "arc_mlp_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "label_predictor", "=", "LabelBilinear", "(", "label_mlp_size", ",", "label_mlp_size", ",", "num_label", ",", "bias", "=", "True", ")", "\n", "self", ".", "use_greedy_infer", "=", "use_greedy_infer", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.reset_parameters": [[333, 343], ["biaffine_parser.BiaffineParser.modules", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "m.parameters", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Embedding", ")", ":", "\n", "                ", "continue", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "p", ",", "0", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.forward": [[344, 423], ["core.utils.seq_len_to_mask().long", "biaffine_parser.BiaffineParser.word_embedding", "biaffine_parser.BiaffineParser.pos_embedding", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "biaffine_parser.BiaffineParser.encoder_name.endswith", "biaffine_parser.BiaffineParser.mlp", "biaffine_parser.BiaffineParser.arc_predictor", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "label_head[].contiguous", "biaffine_parser.BiaffineParser.label_predictor", "biaffine_parser.BiaffineParser.word_fc", "biaffine_parser.BiaffineParser.pos_fc", "biaffine_parser.BiaffineParser.word_norm", "biaffine_parser.BiaffineParser.pos_norm", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "biaffine_parser.BiaffineParser.encoder", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "biaffine_parser.BiaffineParser.encoder", "core.const.Const.OUTPUTS", "core.const.Const.OUTPUTS", "core.utils.seq_len_to_mask", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "biaffine_parser.BiaffineParser.position_emb", "core.utils.seq_len_to_mask().long.float", "biaffine_parser.BiaffineParser.greedy_decoder", "biaffine_parser.BiaffineParser.mst_decoder", "biaffine_parser.BiaffineParser.greedy_decoder", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "core.const.Const.OUTPUTS"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.OUTPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.OUTPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.GraphParser.greedy_decoder", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.GraphParser.mst_decoder", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.GraphParser.greedy_decoder", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.OUTPUTS"], ["", "", "", "", "def", "forward", "(", "self", ",", "words1", ",", "words2", ",", "seq_len", ",", "target1", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\u6a21\u578bforward\u9636\u6bb5\n\n        :param words1: [batch_size, seq_len] \u8f93\u5165word\u5e8f\u5217\n        :param words2: [batch_size, seq_len] \u8f93\u5165pos\u5e8f\u5217\n        :param seq_len: [batch_size, seq_len] \u8f93\u5165\u5e8f\u5217\u957f\u5ea6\n        :param target1: [batch_size, seq_len] \u8f93\u5165\u771f\u5b9e\u6807\u6ce8\u7684heads, \u4ec5\u5728\u8bad\u7ec3\u9636\u6bb5\u6709\u6548,\n            \u7528\u4e8e\u8bad\u7ec3label\u5206\u7c7b\u5668. \u82e5\u4e3a ``None`` , \u4f7f\u7528\u9884\u6d4b\u7684heads\u8f93\u5165\u5230label\u5206\u7c7b\u5668\n            Default: ``None``\n        :return dict: parsing\n                \u7ed3\u679c::\n\n                    pred1: [batch_size, seq_len, seq_len] \u8fb9\u9884\u6d4blogits\n                    pred2: [batch_size, seq_len, num_label] label\u9884\u6d4blogits\n                    pred3: [batch_size, seq_len] heads\u7684\u9884\u6d4b\u7ed3\u679c, \u5728 ``target1=None`` \u65f6\u9884\u6d4b\n\n        \"\"\"", "\n", "# prepare embeddings", "\n", "batch_size", ",", "length", "=", "words1", ".", "shape", "\n", "# print('forward {} {}'.format(batch_size, seq_len))", "\n", "\n", "# get sequence mask", "\n", "mask", "=", "seq_len_to_mask", "(", "seq_len", ",", "max_len", "=", "length", ")", ".", "long", "(", ")", "\n", "\n", "word", "=", "self", ".", "word_embedding", "(", "words1", ")", "# [N,L] -> [N,L,C_0]", "\n", "pos", "=", "self", ".", "pos_embedding", "(", "words2", ")", "# [N,L] -> [N,L,C_1]", "\n", "\n", "word", ",", "pos", "=", "self", ".", "word_fc", "(", "word", ")", ",", "self", ".", "pos_fc", "(", "pos", ")", "\n", "word", ",", "pos", "=", "self", ".", "word_norm", "(", "word", ")", ",", "self", ".", "pos_norm", "(", "pos", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "word", ",", "pos", "]", ",", "dim", "=", "2", ")", "# -> [N,L,C]", "\n", "\n", "# encoder, extract features", "\n", "if", "self", ".", "encoder_name", ".", "endswith", "(", "'lstm'", ")", ":", "\n", "            ", "sort_lens", ",", "sort_idx", "=", "torch", ".", "sort", "(", "seq_len", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "x", "=", "x", "[", "sort_idx", "]", "\n", "x", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "x", ",", "sort_lens", ",", "batch_first", "=", "True", ")", "\n", "feat", ",", "_", "=", "self", ".", "encoder", "(", "x", ")", "# -> [N,L,C]", "\n", "feat", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "feat", ",", "batch_first", "=", "True", ")", "\n", "_", ",", "unsort_idx", "=", "torch", ".", "sort", "(", "sort_idx", ",", "dim", "=", "0", ",", "descending", "=", "False", ")", "\n", "feat", "=", "feat", "[", "unsort_idx", "]", "\n", "", "else", ":", "\n", "            ", "seq_range", "=", "torch", ".", "arange", "(", "length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "x", ".", "device", ")", "[", "None", ",", ":", "]", "\n", "x", "=", "x", "+", "self", ".", "position_emb", "(", "seq_range", ")", "\n", "feat", "=", "self", ".", "encoder", "(", "x", ",", "mask", ".", "float", "(", ")", ")", "\n", "\n", "# for arc biaffine", "\n", "# mlp, reduce dim", "\n", "", "feat", "=", "self", ".", "mlp", "(", "feat", ")", "\n", "arc_sz", ",", "label_sz", "=", "self", ".", "arc_mlp_size", ",", "self", ".", "label_mlp_size", "\n", "arc_dep", ",", "arc_head", "=", "feat", "[", ":", ",", ":", ",", ":", "arc_sz", "]", ",", "feat", "[", ":", ",", ":", ",", "arc_sz", ":", "2", "*", "arc_sz", "]", "\n", "label_dep", ",", "label_head", "=", "feat", "[", ":", ",", ":", ",", "2", "*", "arc_sz", ":", "2", "*", "arc_sz", "+", "label_sz", "]", ",", "feat", "[", ":", ",", ":", ",", "2", "*", "arc_sz", "+", "label_sz", ":", "]", "\n", "\n", "# biaffine arc classifier", "\n", "arc_pred", "=", "self", ".", "arc_predictor", "(", "arc_head", ",", "arc_dep", ")", "# [N, L, L]", "\n", "\n", "# use gold or predicted arc to predict label", "\n", "if", "target1", "is", "None", "or", "not", "self", ".", "training", ":", "\n", "# use greedy decoding in training", "\n", "            ", "if", "self", ".", "training", "or", "self", ".", "use_greedy_infer", ":", "\n", "                ", "heads", "=", "self", ".", "greedy_decoder", "(", "arc_pred", ",", "mask", ")", "\n", "", "else", ":", "\n", "                ", "heads", "=", "self", ".", "mst_decoder", "(", "arc_pred", ",", "mask", ")", "\n", "", "head_pred", "=", "heads", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "training", "# must be training mode", "\n", "if", "target1", "is", "None", ":", "\n", "                ", "heads", "=", "self", ".", "greedy_decoder", "(", "arc_pred", ",", "mask", ")", "\n", "head_pred", "=", "heads", "\n", "", "else", ":", "\n", "                ", "head_pred", "=", "None", "\n", "heads", "=", "target1", "\n", "\n", "", "", "batch_range", "=", "torch", ".", "arange", "(", "start", "=", "0", ",", "end", "=", "batch_size", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "words1", ".", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "label_head", "=", "label_head", "[", "batch_range", ",", "heads", "]", ".", "contiguous", "(", ")", "\n", "label_pred", "=", "self", ".", "label_predictor", "(", "label_head", ",", "label_dep", ")", "# [N, L, num_label]", "\n", "res_dict", "=", "{", "C", ".", "OUTPUTS", "(", "0", ")", ":", "arc_pred", ",", "C", ".", "OUTPUTS", "(", "1", ")", ":", "label_pred", "}", "\n", "if", "head_pred", "is", "not", "None", ":", "\n", "            ", "res_dict", "[", "C", ".", "OUTPUTS", "(", "2", ")", "]", "=", "head_pred", "\n", "", "return", "res_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.loss": [[424, 454], ["core.utils.seq_len_to_mask", "core.utils.seq_len_to_mask.eq", "pred1.clone", "_arc_pred.masked_fill.masked_fill.masked_fill", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "arc_loss.masked_fill.masked_fill.masked_fill", "label_loss.masked_fill.masked_fill.masked_fill", "core.utils.seq_len_to_mask.eq.unsqueeze", "arc_loss.masked_fill.masked_fill.mean", "label_loss.masked_fill.masked_fill.mean", "float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "@", "staticmethod", "\n", "def", "loss", "(", "pred1", ",", "pred2", ",", "target1", ",", "target2", ",", "seq_len", ")", ":", "\n", "        ", "r\"\"\"\n        \u8ba1\u7b97parser\u7684loss\n\n        :param pred1: [batch_size, seq_len, seq_len] \u8fb9\u9884\u6d4blogits\n        :param pred2: [batch_size, seq_len, num_label] label\u9884\u6d4blogits\n        :param target1: [batch_size, seq_len] \u771f\u5b9e\u8fb9\u7684\u6807\u6ce8\n        :param target2: [batch_size, seq_len] \u771f\u5b9e\u7c7b\u522b\u7684\u6807\u6ce8\n        :param seq_len: [batch_size, seq_len] \u771f\u5b9e\u76ee\u6807\u7684\u957f\u5ea6\n        :return loss: scalar\n        \"\"\"", "\n", "\n", "batch_size", ",", "length", ",", "_", "=", "pred1", ".", "shape", "\n", "mask", "=", "seq_len_to_mask", "(", "seq_len", ",", "max_len", "=", "length", ")", "\n", "flip_mask", "=", "(", "mask", ".", "eq", "(", "False", ")", ")", "\n", "_arc_pred", "=", "pred1", ".", "clone", "(", ")", "\n", "_arc_pred", "=", "_arc_pred", ".", "masked_fill", "(", "flip_mask", ".", "unsqueeze", "(", "1", ")", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "arc_logits", "=", "F", ".", "log_softmax", "(", "_arc_pred", ",", "dim", "=", "2", ")", "\n", "label_logits", "=", "F", ".", "log_softmax", "(", "pred2", ",", "dim", "=", "2", ")", "\n", "batch_index", "=", "torch", ".", "arange", "(", "batch_size", ",", "device", "=", "arc_logits", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "1", ")", "\n", "child_index", "=", "torch", ".", "arange", "(", "length", ",", "device", "=", "arc_logits", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", ".", "unsqueeze", "(", "0", ")", "\n", "arc_loss", "=", "arc_logits", "[", "batch_index", ",", "child_index", ",", "target1", "]", "\n", "label_loss", "=", "label_logits", "[", "batch_index", ",", "child_index", ",", "target2", "]", "\n", "\n", "arc_loss", "=", "arc_loss", ".", "masked_fill", "(", "flip_mask", ",", "0", ")", "\n", "label_loss", "=", "label_loss", ".", "masked_fill", "(", "flip_mask", ",", "0", ")", "\n", "arc_nll", "=", "-", "arc_loss", ".", "mean", "(", ")", "\n", "label_nll", "=", "-", "label_loss", ".", "mean", "(", ")", "\n", "return", "arc_nll", "+", "label_nll", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.BiaffineParser.predict": [[455, 474], ["biaffine_parser.BiaffineParser.", "biaffine_parser.BiaffineParser.pop", "biaffine_parser.BiaffineParser.pop().max", "core.const.Const.OUTPUTS", "core.const.Const.OUTPUTS", "biaffine_parser.BiaffineParser.pop", "core.const.Const.OUTPUTS", "core.const.Const.OUTPUTS"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.OUTPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.OUTPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.OUTPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.OUTPUTS"], ["", "def", "predict", "(", "self", ",", "words1", ",", "words2", ",", "seq_len", ")", ":", "\n", "        ", "r\"\"\"\u6a21\u578b\u9884\u6d4bAPI\n\n        :param words1: [batch_size, seq_len] \u8f93\u5165word\u5e8f\u5217\n        :param words2: [batch_size, seq_len] \u8f93\u5165pos\u5e8f\u5217\n        :param seq_len: [batch_size, seq_len] \u8f93\u5165\u5e8f\u5217\u957f\u5ea6\n        :return dict: parsing\n                \u7ed3\u679c::\n\n                    pred1: [batch_size, seq_len] heads\u7684\u9884\u6d4b\u7ed3\u679c\n                    pred2: [batch_size, seq_len, num_label] label\u9884\u6d4blogits\n\n        \"\"\"", "\n", "res", "=", "self", "(", "words1", ",", "words2", ",", "seq_len", ")", "\n", "output", "=", "{", "}", "\n", "output", "[", "C", ".", "OUTPUTS", "(", "0", ")", "]", "=", "res", ".", "pop", "(", "C", ".", "OUTPUTS", "(", "2", ")", ")", "\n", "_", ",", "label_pred", "=", "res", ".", "pop", "(", "C", ".", "OUTPUTS", "(", "1", ")", ")", ".", "max", "(", "2", ")", "\n", "output", "[", "C", ".", "OUTPUTS", "(", "1", ")", "]", "=", "label_pred", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.ParserLoss.__init__": [[482, 500], ["core.losses.LossFunc.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "pred1", "=", "None", ",", "pred2", "=", "None", ",", "\n", "target1", "=", "None", ",", "target2", "=", "None", ",", "\n", "seq_len", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param pred1: [batch_size, seq_len, seq_len] \u8fb9\u9884\u6d4blogits\n        :param pred2: [batch_size, seq_len, num_label] label\u9884\u6d4blogits\n        :param target1: [batch_size, seq_len] \u771f\u5b9e\u8fb9\u7684\u6807\u6ce8\n        :param target2: [batch_size, seq_len] \u771f\u5b9e\u7c7b\u522b\u7684\u6807\u6ce8\n        :param seq_len: [batch_size, seq_len] \u771f\u5b9e\u76ee\u6807\u7684\u957f\u5ea6\n        :return loss: scalar\n        \"\"\"", "\n", "super", "(", "ParserLoss", ",", "self", ")", ".", "__init__", "(", "BiaffineParser", ".", "loss", ",", "\n", "pred1", "=", "pred1", ",", "\n", "pred2", "=", "pred2", ",", "\n", "target1", "=", "target1", ",", "\n", "target2", "=", "target2", ",", "\n", "seq_len", "=", "seq_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.ParserMetric.__init__": [[508, 529], ["core.metrics.MetricBase.__init__", "biaffine_parser.ParserMetric._init_param_map"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map"], ["def", "__init__", "(", "self", ",", "pred1", "=", "None", ",", "pred2", "=", "None", ",", "\n", "target1", "=", "None", ",", "target2", "=", "None", ",", "seq_len", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param pred1: \u8fb9\u9884\u6d4blogits\n        :param pred2: label\u9884\u6d4blogits\n        :param target1: \u771f\u5b9e\u8fb9\u7684\u6807\u6ce8\n        :param target2: \u771f\u5b9e\u7c7b\u522b\u7684\u6807\u6ce8\n        :param seq_len: \u5e8f\u5217\u957f\u5ea6\n        :return dict: \u8bc4\u4f30\u7ed3\u679c::\n    \n            UAS: \u4e0d\u5e26label\u65f6, \u8fb9\u9884\u6d4b\u7684\u51c6\u786e\u7387\n            LAS: \u540c\u65f6\u9884\u6d4b\u8fb9\u548clabel\u7684\u51c6\u786e\u7387\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_param_map", "(", "pred1", "=", "pred1", ",", "pred2", "=", "pred2", ",", "\n", "target1", "=", "target1", ",", "target2", "=", "target2", ",", "\n", "seq_len", "=", "seq_len", ")", "\n", "self", ".", "num_arc", "=", "0", "\n", "self", ".", "num_label", "=", "0", "\n", "self", ".", "num_sample", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.ParserMetric.get_metric": [[530, 535], ["None"], "methods", ["None"], ["", "def", "get_metric", "(", "self", ",", "reset", "=", "True", ")", ":", "\n", "        ", "res", "=", "{", "'UAS'", ":", "self", ".", "num_arc", "*", "1.0", "/", "self", ".", "num_sample", ",", "'LAS'", ":", "self", ".", "num_label", "*", "1.0", "/", "self", ".", "num_sample", "}", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "num_sample", "=", "self", ".", "num_label", "=", "self", ".", "num_arc", "=", "0", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser.ParserMetric.evaluate": [[536, 550], ["head_pred_correct.sum().item", "label_pred_correct.sum().item", "core.utils.seq_len_to_mask().long.sum().item", "pred1.new_ones", "core.utils.seq_len_to_mask().long", "pred1.size", "head_pred_correct.sum", "label_pred_correct.sum", "core.utils.seq_len_to_mask().long.sum", "core.utils.seq_len_to_mask", "seq_len.long"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask"], ["", "def", "evaluate", "(", "self", ",", "pred1", ",", "pred2", ",", "target1", ",", "target2", ",", "seq_len", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Evaluate the performance of prediction.\n        \"\"\"", "\n", "if", "seq_len", "is", "None", ":", "\n", "            ", "seq_mask", "=", "pred1", ".", "new_ones", "(", "pred1", ".", "size", "(", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "            ", "seq_mask", "=", "seq_len_to_mask", "(", "seq_len", ".", "long", "(", ")", ")", ".", "long", "(", ")", "\n", "# mask out <root> tag", "\n", "", "seq_mask", "[", ":", ",", "0", "]", "=", "0", "\n", "head_pred_correct", "=", "(", "pred1", "==", "target1", ")", ".", "long", "(", ")", "*", "seq_mask", "\n", "label_pred_correct", "=", "(", "pred2", "==", "target2", ")", ".", "long", "(", ")", "*", "head_pred_correct", "\n", "self", ".", "num_arc", "+=", "head_pred_correct", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "num_label", "+=", "label_pred_correct", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "num_sample", "+=", "seq_mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser._mst": [[28, 85], ["numpy.eye", "numpy.argmax", "numpy.arange", "collections.defaultdict", "set", "enumerate", "biaffine_parser._find_cycle", "scores.min", "len", "set.add", "edges[].add", "set", "set", "numpy.array", "numpy.array", "numpy.argmax", "edges[].add", "edges[].remove", "numpy.where", "len", "len", "set.pop", "list", "list", "numpy.argmax", "numpy.argmax", "numpy.argmax", "set.add", "set.update", "numpy.argmin", "numpy.repeat", "numpy.repeat().flatten", "len", "numpy.repeat", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser._find_cycle", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.flatten"], ["def", "_mst", "(", "scores", ")", ":", "\n", "    ", "r\"\"\"\n    with some modification to support parser output for MST decoding\n    https://github.com/tdozat/Parser/blob/0739216129cd39d69997d28cbc4133b360ea3934/lib/models/nn.py#L692\n    \"\"\"", "\n", "length", "=", "scores", ".", "shape", "[", "0", "]", "\n", "min_score", "=", "scores", ".", "min", "(", ")", "-", "1", "\n", "eye", "=", "np", ".", "eye", "(", "length", ")", "\n", "scores", "=", "scores", "*", "(", "1", "-", "eye", ")", "+", "min_score", "*", "eye", "\n", "heads", "=", "np", ".", "argmax", "(", "scores", ",", "axis", "=", "1", ")", "\n", "heads", "[", "0", "]", "=", "0", "\n", "tokens", "=", "np", ".", "arange", "(", "1", ",", "length", ")", "\n", "roots", "=", "np", ".", "where", "(", "heads", "[", "tokens", "]", "==", "0", ")", "[", "0", "]", "+", "1", "\n", "if", "len", "(", "roots", ")", "<", "1", ":", "\n", "        ", "root_scores", "=", "scores", "[", "tokens", ",", "0", "]", "\n", "head_scores", "=", "scores", "[", "tokens", ",", "heads", "[", "tokens", "]", "]", "\n", "new_root", "=", "tokens", "[", "np", ".", "argmax", "(", "root_scores", "/", "head_scores", ")", "]", "\n", "heads", "[", "new_root", "]", "=", "0", "\n", "", "elif", "len", "(", "roots", ")", ">", "1", ":", "\n", "        ", "root_scores", "=", "scores", "[", "roots", ",", "0", "]", "\n", "scores", "[", "roots", ",", "0", "]", "=", "0", "\n", "new_heads", "=", "np", ".", "argmax", "(", "scores", "[", "roots", "]", "[", ":", ",", "tokens", "]", ",", "axis", "=", "1", ")", "+", "1", "\n", "new_root", "=", "roots", "[", "np", ".", "argmin", "(", "\n", "scores", "[", "roots", ",", "new_heads", "]", "/", "root_scores", ")", "]", "\n", "heads", "[", "roots", "]", "=", "new_heads", "\n", "heads", "[", "new_root", "]", "=", "0", "\n", "\n", "", "edges", "=", "defaultdict", "(", "set", ")", "\n", "vertices", "=", "set", "(", "(", "0", ",", ")", ")", "\n", "for", "dep", ",", "head", "in", "enumerate", "(", "heads", "[", "tokens", "]", ")", ":", "\n", "        ", "vertices", ".", "add", "(", "dep", "+", "1", ")", "\n", "edges", "[", "head", "]", ".", "add", "(", "dep", "+", "1", ")", "\n", "", "for", "cycle", "in", "_find_cycle", "(", "vertices", ",", "edges", ")", ":", "\n", "        ", "dependents", "=", "set", "(", ")", "\n", "to_visit", "=", "set", "(", "cycle", ")", "\n", "while", "len", "(", "to_visit", ")", ">", "0", ":", "\n", "            ", "node", "=", "to_visit", ".", "pop", "(", ")", "\n", "if", "node", "not", "in", "dependents", ":", "\n", "                ", "dependents", ".", "add", "(", "node", ")", "\n", "to_visit", ".", "update", "(", "edges", "[", "node", "]", ")", "\n", "", "", "cycle", "=", "np", ".", "array", "(", "list", "(", "cycle", ")", ")", "\n", "old_heads", "=", "heads", "[", "cycle", "]", "\n", "old_scores", "=", "scores", "[", "cycle", ",", "old_heads", "]", "\n", "non_heads", "=", "np", ".", "array", "(", "list", "(", "dependents", ")", ")", "\n", "scores", "[", "np", ".", "repeat", "(", "cycle", ",", "len", "(", "non_heads", ")", ")", ",", "\n", "np", ".", "repeat", "(", "[", "non_heads", "]", ",", "len", "(", "cycle", ")", ",", "axis", "=", "0", ")", ".", "flatten", "(", ")", "]", "=", "min_score", "\n", "new_heads", "=", "np", ".", "argmax", "(", "scores", "[", "cycle", "]", "[", ":", ",", "tokens", "]", ",", "axis", "=", "1", ")", "+", "1", "\n", "new_scores", "=", "scores", "[", "cycle", ",", "new_heads", "]", "/", "old_scores", "\n", "change", "=", "np", ".", "argmax", "(", "new_scores", ")", "\n", "changed_cycle", "=", "cycle", "[", "change", "]", "\n", "old_head", "=", "old_heads", "[", "change", "]", "\n", "new_head", "=", "new_heads", "[", "change", "]", "\n", "heads", "[", "changed_cycle", "]", "=", "new_head", "\n", "edges", "[", "new_head", "]", ".", "add", "(", "changed_cycle", ")", "\n", "edges", "[", "old_head", "]", ".", "remove", "(", "changed_cycle", ")", "\n", "\n", "", "return", "heads", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.biaffine_parser._find_cycle": [[87, 129], ["collections.defaultdict", "_stack.append", "set", "_SCCs.append", "biaffine_parser._find_cycle._strongconnect"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_find_cycle", "(", "vertices", ",", "edges", ")", ":", "\n", "    ", "r\"\"\"\n    https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm\n    https://github.com/tdozat/Parser/blob/0739216129cd39d69997d28cbc4133b360ea3934/lib/etc/tarjan.py\n    \"\"\"", "\n", "_index", "=", "0", "\n", "_stack", "=", "[", "]", "\n", "_indices", "=", "{", "}", "\n", "_lowlinks", "=", "{", "}", "\n", "_onstack", "=", "defaultdict", "(", "lambda", ":", "False", ")", "\n", "_SCCs", "=", "[", "]", "\n", "\n", "def", "_strongconnect", "(", "v", ")", ":", "\n", "        ", "nonlocal", "_index", "\n", "_indices", "[", "v", "]", "=", "_index", "\n", "_lowlinks", "[", "v", "]", "=", "_index", "\n", "_index", "+=", "1", "\n", "_stack", ".", "append", "(", "v", ")", "\n", "_onstack", "[", "v", "]", "=", "True", "\n", "\n", "for", "w", "in", "edges", "[", "v", "]", ":", "\n", "            ", "if", "w", "not", "in", "_indices", ":", "\n", "                ", "_strongconnect", "(", "w", ")", "\n", "_lowlinks", "[", "v", "]", "=", "min", "(", "_lowlinks", "[", "v", "]", ",", "_lowlinks", "[", "w", "]", ")", "\n", "", "elif", "_onstack", "[", "w", "]", ":", "\n", "                ", "_lowlinks", "[", "v", "]", "=", "min", "(", "_lowlinks", "[", "v", "]", ",", "_indices", "[", "w", "]", ")", "\n", "\n", "", "", "if", "_lowlinks", "[", "v", "]", "==", "_indices", "[", "v", "]", ":", "\n", "            ", "SCC", "=", "set", "(", ")", "\n", "while", "True", ":", "\n", "                ", "w", "=", "_stack", ".", "pop", "(", ")", "\n", "_onstack", "[", "w", "]", "=", "False", "\n", "SCC", ".", "add", "(", "w", ")", "\n", "if", "not", "(", "w", "!=", "v", ")", ":", "\n", "                    ", "break", "\n", "", "", "_SCCs", ".", "append", "(", "SCC", ")", "\n", "\n", "", "", "for", "v", "in", "vertices", ":", "\n", "        ", "if", "v", "not", "in", "_indices", ":", "\n", "            ", "_strongconnect", "(", "v", ")", "\n", "\n", "", "", "return", "[", "SCC", "for", "SCC", "in", "_SCCs", "if", "len", "(", "SCC", ")", ">", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.BiLSTMCRF.__init__": [[29, 59], ["base_model.BaseModel.__init__", "embeddings.utils.get_embeddings", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "modules.decoder.ConditionalRandomField", "modules.encoder.LSTM", "modules.encoder.LSTM", "modules.decoder.crf.allowed_transitions", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.crf.allowed_transitions"], ["def", "__init__", "(", "self", ",", "embed", ",", "num_classes", ",", "num_layers", "=", "1", ",", "hidden_size", "=", "100", ",", "dropout", "=", "0.5", ",", "\n", "target_vocab", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param embed: \u652f\u6301(1)fastNLP\u7684\u5404\u79cdEmbedding, (2) tuple, \u6307\u660enum_embedding, dimension, \u5982(1000, 100)\n        :param num_classes: \u4e00\u5171\u591a\u5c11\u4e2a\u7c7b\n        :param num_layers: BiLSTM\u7684\u5c42\u6570\n        :param hidden_size: BiLSTM\u7684hidden_size\uff0c\u5b9e\u9645hidden size\u4e3a\u8be5\u503c\u7684\u4e24\u500d(\u524d\u5411\u3001\u540e\u5411)\n        :param dropout: dropout\u7684\u6982\u7387\uff0c0\u4e3a\u4e0ddropout\n        :param target_vocab: Vocabulary\u5bf9\u8c61\uff0ctarget\u4e0eindex\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\u5982\u679c\u4f20\u5165\u8be5\u503c\uff0c\u5c06\u81ea\u52a8\u907f\u514d\u975e\u6cd5\u7684\u89e3\u7801\u5e8f\u5217\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "get_embeddings", "(", "embed", ")", "\n", "\n", "if", "num_layers", ">", "1", ":", "\n", "            ", "self", ".", "lstm", "=", "LSTM", "(", "self", ".", "embed", ".", "embedding_dim", ",", "num_layers", "=", "num_layers", ",", "hidden_size", "=", "hidden_size", ",", "bidirectional", "=", "True", ",", "\n", "batch_first", "=", "True", ",", "dropout", "=", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lstm", "=", "LSTM", "(", "self", ".", "embed", ".", "embedding_dim", ",", "num_layers", "=", "num_layers", ",", "hidden_size", "=", "hidden_size", ",", "bidirectional", "=", "True", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_size", "*", "2", ",", "num_classes", ")", "\n", "\n", "trans", "=", "None", "\n", "if", "target_vocab", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "target_vocab", ")", "==", "num_classes", ",", "\"The number of classes should be same with the length of target vocabulary.\"", "\n", "trans", "=", "allowed_transitions", "(", "target_vocab", ".", "idx2word", ",", "include_start_end", "=", "True", ")", "\n", "\n", "", "self", ".", "crf", "=", "ConditionalRandomField", "(", "num_classes", ",", "include_start_end_trans", "=", "True", ",", "allowed_transitions", "=", "trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.BiLSTMCRF._forward": [[60, 73], ["sequence_labeling.BiLSTMCRF.embed", "sequence_labeling.BiLSTMCRF.lstm", "sequence_labeling.BiLSTMCRF.fc", "sequence_labeling.BiLSTMCRF.dropout", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "core.utils.seq_len_to_mask", "sequence_labeling.BiLSTMCRF.crf.viterbi_decode", "sequence_labeling.BiLSTMCRF.crf().mean", "sequence_labeling.BiLSTMCRF.crf"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.utils.viterbi_decode"], ["", "def", "_forward", "(", "self", ",", "words", ",", "seq_len", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "        ", "words", "=", "self", ".", "embed", "(", "words", ")", "\n", "feats", ",", "_", "=", "self", ".", "lstm", "(", "words", ",", "seq_len", "=", "seq_len", ")", "\n", "feats", "=", "self", ".", "fc", "(", "feats", ")", "\n", "feats", "=", "self", ".", "dropout", "(", "feats", ")", "\n", "logits", "=", "F", ".", "log_softmax", "(", "feats", ",", "dim", "=", "-", "1", ")", "\n", "mask", "=", "seq_len_to_mask", "(", "seq_len", ")", "\n", "if", "target", "is", "None", ":", "\n", "            ", "pred", ",", "_", "=", "self", ".", "crf", ".", "viterbi_decode", "(", "logits", ",", "mask", ")", "\n", "return", "{", "C", ".", "OUTPUT", ":", "pred", "}", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "crf", "(", "logits", ",", "target", ",", "mask", ")", ".", "mean", "(", ")", "\n", "return", "{", "C", ".", "LOSS", ":", "loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.BiLSTMCRF.forward": [[74, 76], ["sequence_labeling.BiLSTMCRF._forward"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel._forward"], ["", "", "def", "forward", "(", "self", ",", "words", ",", "seq_len", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "_forward", "(", "words", ",", "seq_len", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.BiLSTMCRF.predict": [[77, 79], ["sequence_labeling.BiLSTMCRF._forward"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel._forward"], ["", "def", "predict", "(", "self", ",", "words", ",", "seq_len", ")", ":", "\n", "        ", "return", "self", ".", "_forward", "(", "words", ",", "seq_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.SeqLabeling.__init__": [[88, 102], ["base_model.BaseModel.__init__", "embeddings.utils.get_embeddings", "modules.encoder.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "modules.decoder.ConditionalRandomField"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings"], ["def", "__init__", "(", "self", ",", "embed", ",", "hidden_size", ",", "num_classes", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param tuple(int,int),torch.FloatTensor,nn.Embedding,numpy.ndarray embed: Embedding\u7684\u5927\u5c0f(\u4f20\u5165tuple(int, int),\n            \u7b2c\u4e00\u4e2aint\u4e3avocab_zie, \u7b2c\u4e8c\u4e2aint\u4e3aembed_dim); \u5982\u679c\u4e3aTensor, embedding, ndarray\u7b49\u5219\u76f4\u63a5\u4f7f\u7528\u8be5\u503c\u521d\u59cb\u5316Embedding\n        :param int hidden_size: LSTM\u9690\u85cf\u5c42\u7684\u5927\u5c0f\n        :param int num_classes: \u4e00\u5171\u6709\u591a\u5c11\u7c7b\n        \"\"\"", "\n", "super", "(", "SeqLabeling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embedding", "=", "get_embeddings", "(", "embed", ")", "\n", "self", ".", "rnn", "=", "encoder", ".", "LSTM", "(", "self", ".", "embedding", ".", "embedding_dim", ",", "hidden_size", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "num_classes", ")", "\n", "self", ".", "crf", "=", "decoder", ".", "ConditionalRandomField", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.SeqLabeling.forward": [[103, 119], ["core.utils.seq_len_to_mask", "sequence_labeling.SeqLabeling.embedding", "sequence_labeling.SeqLabeling.rnn", "sequence_labeling.SeqLabeling.fc", "sequence_labeling.SeqLabeling._internal_loss", "words.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel._internal_loss", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "words", ",", "seq_len", ",", "target", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.LongTensor words: [batch_size, max_len]\uff0c\u5e8f\u5217\u7684index\n        :param torch.LongTensor seq_len: [batch_size,], \u8fd9\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\n        :param torch.LongTensor target: [batch_size, max_len], \u5e8f\u5217\u7684\u76ee\u6807\u503c\n        :return y: If truth is None, return list of [decode path(list)]. Used in testing and predicting.\n                    If truth is not None, return loss, a scalar. Used in training.\n        \"\"\"", "\n", "mask", "=", "seq_len_to_mask", "(", "seq_len", ",", "max_len", "=", "words", ".", "size", "(", "1", ")", ")", "\n", "x", "=", "self", ".", "embedding", "(", "words", ")", "\n", "# [batch_size, max_len, word_emb_dim]", "\n", "x", ",", "_", "=", "self", ".", "rnn", "(", "x", ",", "seq_len", ")", "\n", "# [batch_size, max_len, hidden_size * direction]", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "# [batch_size, max_len, num_classes]", "\n", "return", "{", "C", ".", "LOSS", ":", "self", ".", "_internal_loss", "(", "x", ",", "target", ",", "mask", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.SeqLabeling.predict": [[120, 138], ["core.utils.seq_len_to_mask", "sequence_labeling.SeqLabeling.embedding", "sequence_labeling.SeqLabeling.rnn", "sequence_labeling.SeqLabeling.fc", "sequence_labeling.SeqLabeling._decode", "words.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel._decode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "predict", "(", "self", ",", "words", ",", "seq_len", ")", ":", "\n", "        ", "r\"\"\"\n        \u7528\u4e8e\u5728\u9884\u6d4b\u65f6\u4f7f\u7528\n\n        :param torch.LongTensor words: [batch_size, max_len]\n        :param torch.LongTensor seq_len: [batch_size,]\n        :return: {'pred': xx}, [batch_size, max_len]\n        \"\"\"", "\n", "mask", "=", "seq_len_to_mask", "(", "seq_len", ",", "max_len", "=", "words", ".", "size", "(", "1", ")", ")", "\n", "\n", "x", "=", "self", ".", "embedding", "(", "words", ")", "\n", "# [batch_size, max_len, word_emb_dim]", "\n", "x", ",", "_", "=", "self", ".", "rnn", "(", "x", ",", "seq_len", ")", "\n", "# [batch_size, max_len, hidden_size * direction]", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "# [batch_size, max_len, num_classes]", "\n", "pred", "=", "self", ".", "_decode", "(", "x", ",", "mask", ")", "\n", "return", "{", "C", ".", "OUTPUT", ":", "pred", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.SeqLabeling._internal_loss": [[139, 151], ["x.float.float.float", "y.long.long.long", "sequence_labeling.SeqLabeling.crf", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "_internal_loss", "(", "self", ",", "x", ",", "y", ",", "mask", ")", ":", "\n", "        ", "r\"\"\"\n        Negative log likelihood loss.\n        :param x: Tensor, [batch_size, max_len, tag_size]\n        :param y: Tensor, [batch_size, max_len]\n        :return loss: a scalar Tensor\n\n        \"\"\"", "\n", "x", "=", "x", ".", "float", "(", ")", "\n", "y", "=", "y", ".", "long", "(", ")", "\n", "total_loss", "=", "self", ".", "crf", "(", "x", ",", "y", ",", "mask", ")", "\n", "return", "torch", ".", "mean", "(", "total_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.SeqLabeling._decode": [[152, 159], ["sequence_labeling.SeqLabeling.crf.viterbi_decode"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.utils.viterbi_decode"], ["", "def", "_decode", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.FloatTensor x: [batch_size, max_len, tag_size]\n        :return prediction: [batch_size, max_len]\n        \"\"\"", "\n", "tag_seq", ",", "_", "=", "self", ".", "crf", ".", "viterbi_decode", "(", "x", ",", "mask", ")", "\n", "return", "tag_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel.__init__": [[166, 198], ["torch.Module.__init__", "embeddings.utils.get_embeddings", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "modules.encoder.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "modules.decoder.crf.ConditionalRandomField", "modules.decoder.crf.ConditionalRandomField", "modules.decoder.crf.allowed_transitions"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.crf.allowed_transitions"], ["def", "__init__", "(", "self", ",", "embed", ",", "hidden_size", ",", "num_classes", ",", "dropout", "=", "0.3", ",", "id2words", "=", "None", ",", "encoding_type", "=", "'bmes'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param tuple(int,int),torch.FloatTensor,nn.Embedding,numpy.ndarray embed: Embedding\u7684\u5927\u5c0f(\u4f20\u5165tuple(int, int),\n            \u7b2c\u4e00\u4e2aint\u4e3avocab_zie, \u7b2c\u4e8c\u4e2aint\u4e3aembed_dim); \u5982\u679c\u4e3aTensor, Embedding, ndarray\u7b49\u5219\u76f4\u63a5\u4f7f\u7528\u8be5\u503c\u521d\u59cb\u5316Embedding\n        :param int hidden_size: LSTM\u7684\u9690\u5c42\u5927\u5c0f\n        :param int num_classes: \u6709\u591a\u5c11\u4e2a\u7c7b\n        :param float dropout: LSTM\u4e2d\u4ee5\u53caDropOut\u5c42\u7684drop\u6982\u7387\n        :param dict id2words: tag id\u8f6c\u4e3a\u5176tag word\u7684\u8868\u3002\u7528\u4e8e\u5728CRF\u89e3\u7801\u65f6\u9632\u6b62\u89e3\u51fa\u975e\u6cd5\u7684\u987a\u5e8f\uff0c\u6bd4\u5982'BMES'\u8fd9\u4e2a\u6807\u7b7e\u89c4\u8303\u4e2d\uff0c'S'\n            \u4e0d\u80fd\u51fa\u73b0\u5728'B'\u4e4b\u540e\u3002\u8fd9\u91cc\u4e5f\u652f\u6301\u7c7b\u4f3c\u4e0e'B-NN'\uff0c\u5373'-'\u524d\u4e3a\u6807\u7b7e\u7c7b\u578b\u7684\u6307\u793a\uff0c\u540e\u9762\u4e3a\u5177\u4f53\u7684tag\u7684\u60c5\u51b5\u3002\u8fd9\u91cc\u4e0d\u4f46\u4f1a\u4fdd\u8bc1\n            'B-NN'\u540e\u9762\u4e0d\u4e3a'S-NN'\u8fd8\u4f1a\u4fdd\u8bc1'B-NN'\u540e\u9762\u4e0d\u4f1a\u51fa\u73b0'M-xx'(\u4efb\u4f55\u975e'M-NN'\u548c'E-NN'\u7684\u60c5\u51b5\u3002)\n        :param str encoding_type: \u652f\u6301\"BIO\", \"BMES\", \"BEMSO\", \u53ea\u6709\u5728id2words\u4e0d\u4e3aNone\u7684\u60c5\u51b5\u6709\u7528\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "Embedding", "=", "get_embeddings", "(", "embed", ")", "\n", "self", ".", "norm1", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "self", ".", "Embedding", ".", "embedding_dim", ")", "\n", "self", ".", "Rnn", "=", "encoder", ".", "LSTM", "(", "input_size", "=", "self", ".", "Embedding", ".", "embedding_dim", ",", "hidden_size", "=", "hidden_size", ",", "num_layers", "=", "2", ",", "\n", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "Linear1", "=", "nn", ".", "Linear", "(", "hidden_size", "*", "2", ",", "hidden_size", "*", "2", "//", "3", ")", "\n", "self", ".", "norm2", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "hidden_size", "*", "2", "//", "3", ")", "\n", "self", ".", "relu", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "drop", "=", "torch", ".", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "Linear2", "=", "nn", ".", "Linear", "(", "hidden_size", "*", "2", "//", "3", ",", "num_classes", ")", "\n", "\n", "if", "id2words", "is", "None", ":", "\n", "            ", "self", ".", "Crf", "=", "decoder", ".", "crf", ".", "ConditionalRandomField", "(", "num_classes", ",", "include_start_end_trans", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Crf", "=", "decoder", ".", "crf", ".", "ConditionalRandomField", "(", "num_classes", ",", "include_start_end_trans", "=", "False", ",", "\n", "allowed_transitions", "=", "allowed_transitions", "(", "id2words", ",", "\n", "encoding_type", "=", "encoding_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel._decode": [[199, 207], ["sequence_labeling.AdvSeqLabel.Crf.viterbi_decode"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.utils.viterbi_decode"], ["", "", "def", "_decode", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.FloatTensor x: [batch_size, max_len, tag_size]\n        :param torch.ByteTensor mask: [batch_size, max_len]\n        :return torch.LongTensor, [batch_size, max_len]\n        \"\"\"", "\n", "tag_seq", ",", "_", "=", "self", ".", "Crf", ".", "viterbi_decode", "(", "x", ",", "mask", ")", "\n", "return", "tag_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel._internal_loss": [[208, 221], ["x.float.float.float", "y.long.long.long", "sequence_labeling.AdvSeqLabel.Crf", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "_internal_loss", "(", "self", ",", "x", ",", "y", ",", "mask", ")", ":", "\n", "        ", "r\"\"\"\n        Negative log likelihood loss.\n        :param x: Tensor, [batch_size, max_len, tag_size]\n        :param y: Tensor, [batch_size, max_len]\n        :param mask: Tensor, [batch_size, max_len]\n        :return loss: a scalar Tensor\n\n        \"\"\"", "\n", "x", "=", "x", ".", "float", "(", ")", "\n", "y", "=", "y", ".", "long", "(", ")", "\n", "total_loss", "=", "self", ".", "Crf", "(", "x", ",", "y", ",", "mask", ")", "\n", "return", "torch", ".", "mean", "(", "total_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel._forward": [[222, 255], ["words.cuda.cuda.long", "seq_len.long.long.long", "core.utils.seq_len_to_mask", "sequence_labeling.AdvSeqLabel.Embedding", "sequence_labeling.AdvSeqLabel.norm1", "sequence_labeling.AdvSeqLabel.Rnn", "sequence_labeling.AdvSeqLabel.Linear1", "sequence_labeling.AdvSeqLabel.norm2", "sequence_labeling.AdvSeqLabel.relu", "sequence_labeling.AdvSeqLabel.drop", "sequence_labeling.AdvSeqLabel.Linear2", "target.long", "next", "words.cuda.cuda.cuda", "words.cuda.cuda.size", "sequence_labeling.AdvSeqLabel.parameters", "sequence_labeling.AdvSeqLabel._internal_loss", "sequence_labeling.AdvSeqLabel._decode"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel._internal_loss", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel._decode"], ["", "def", "_forward", "(", "self", ",", "words", ",", "seq_len", ",", "target", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.LongTensor words: [batch_size, mex_len]\n        :param torch.LongTensor seq_len:[batch_size, ]\n        :param torch.LongTensor target: [batch_size, max_len]\n        :return y: If truth is None, return list of [decode path(list)]. Used in testing and predicting.\n                   If truth is not None, return loss, a scalar. Used in training.\n        \"\"\"", "\n", "\n", "words", "=", "words", ".", "long", "(", ")", "\n", "seq_len", "=", "seq_len", ".", "long", "(", ")", "\n", "mask", "=", "seq_len_to_mask", "(", "seq_len", ",", "max_len", "=", "words", ".", "size", "(", "1", ")", ")", "\n", "\n", "target", "=", "target", ".", "long", "(", ")", "if", "target", "is", "not", "None", "else", "None", "\n", "\n", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "            ", "words", "=", "words", ".", "cuda", "(", ")", "\n", "\n", "", "x", "=", "self", ".", "Embedding", "(", "words", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "# [batch_size, max_len, word_emb_dim]", "\n", "\n", "x", ",", "_", "=", "self", ".", "Rnn", "(", "x", ",", "seq_len", "=", "seq_len", ")", "\n", "\n", "x", "=", "self", ".", "Linear1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "Linear2", "(", "x", ")", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "return", "{", "\"loss\"", ":", "self", ".", "_internal_loss", "(", "x", ",", "target", ",", "mask", ")", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "\"pred\"", ":", "self", ".", "_decode", "(", "x", ",", "mask", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel.forward": [[256, 265], ["sequence_labeling.AdvSeqLabel._forward"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel._forward"], ["", "", "def", "forward", "(", "self", ",", "words", ",", "seq_len", ",", "target", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param torch.LongTensor words: [batch_size, mex_len]\n        :param torch.LongTensor seq_len: [batch_size, ]\n        :param torch.LongTensor target: [batch_size, max_len], \u76ee\u6807\n        :return torch.Tensor: a scalar loss\n        \"\"\"", "\n", "return", "self", ".", "_forward", "(", "words", ",", "seq_len", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel.predict": [[266, 274], ["sequence_labeling.AdvSeqLabel._forward"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.sequence_labeling.AdvSeqLabel._forward"], ["", "def", "predict", "(", "self", ",", "words", ",", "seq_len", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param torch.LongTensor words: [batch_size, mex_len]\n        :param torch.LongTensor seq_len: [batch_size, ]\n        :return torch.LongTensor: [batch_size, max_len]\n        \"\"\"", "\n", "return", "self", ".", "_forward", "(", "words", ",", "seq_len", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.snli.ESIM.__init__": [[28, 69], ["base_model.BaseModel.__init__", "snli.EmbedDropout", "snli.BiRNN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "modules.encoder.BiAttention", "snli.BiRNN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "isinstance", "embeddings.embedding.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "embed", ",", "hidden_size", "=", "None", ",", "num_labels", "=", "3", ",", "dropout_rate", "=", "0.3", ",", "\n", "dropout_embed", "=", "0.1", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param embed: \u521d\u59cb\u5316\u7684Embedding\n        :param int hidden_size: \u9690\u85cf\u5c42\u5927\u5c0f\uff0c\u9ed8\u8ba4\u503c\u4e3aEmbedding\u7684\u7ef4\u5ea6\n        :param int num_labels: \u76ee\u6807\u6807\u7b7e\u79cd\u7c7b\u6570\u91cf\uff0c\u9ed8\u8ba4\u503c\u4e3a3\n        :param float dropout_rate: dropout\u7684\u6bd4\u7387\uff0c\u9ed8\u8ba4\u503c\u4e3a0.3\n        :param float dropout_embed: \u5bf9Embedding\u7684dropout\u6bd4\u7387\uff0c\u9ed8\u8ba4\u503c\u4e3a0.1\n        \"\"\"", "\n", "super", "(", "ESIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "isinstance", "(", "embed", ",", "TokenEmbedding", ")", "or", "isinstance", "(", "embed", ",", "Embedding", ")", ":", "\n", "            ", "self", ".", "embedding", "=", "embed", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding", "=", "Embedding", "(", "embed", ")", "\n", "", "self", ".", "dropout_embed", "=", "EmbedDropout", "(", "p", "=", "dropout_embed", ")", "\n", "if", "hidden_size", "is", "None", ":", "\n", "            ", "hidden_size", "=", "self", ".", "embedding", ".", "embed_size", "\n", "", "self", ".", "rnn", "=", "BiRNN", "(", "self", ".", "embedding", ".", "embed_size", ",", "hidden_size", ",", "dropout_rate", "=", "dropout_rate", ")", "\n", "# self.rnn = LSTM(self.embedding.embed_size, hidden_size, dropout=dropout_rate, bidirectional=True)", "\n", "\n", "self", ".", "interfere", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", ",", "\n", "nn", ".", "Linear", "(", "8", "*", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "interfere", "[", "1", "]", ".", "weight", ".", "data", ")", "\n", "self", ".", "bi_attention", "=", "BiAttention", "(", ")", "\n", "\n", "self", ".", "rnn_high", "=", "BiRNN", "(", "self", ".", "embedding", ".", "embed_size", ",", "hidden_size", ",", "dropout_rate", "=", "dropout_rate", ")", "\n", "# self.rnn_high = LSTM(hidden_size, hidden_size, dropout=dropout_rate, bidirectional=True,)", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", ",", "\n", "nn", ".", "Linear", "(", "8", "*", "hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "num_labels", ")", ")", "\n", "\n", "self", ".", "dropout_rnn", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "classifier", "[", "1", "]", ".", "weight", ".", "data", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "classifier", "[", "4", "]", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.snli.ESIM.forward": [[70, 116], ["core.utils.seq_len_to_mask", "core.utils.seq_len_to_mask", "snli.ESIM.embedding", "snli.ESIM.embedding", "snli.ESIM.rnn", "snli.ESIM.rnn", "snli.ESIM.bi_attention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "snli.ESIM.interfere", "snli.ESIM.interfere", "snli.ESIM.rnn_high", "snli.ESIM.rnn_high", "snli.ESIM.mean_pooling", "snli.ESIM.max_pooling", "snli.ESIM.mean_pooling", "snli.ESIM.max_pooling", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "words1.size", "words2.size", "snli.ESIM.dropout_embed", "snli.ESIM.dropout_embed", "core.utils.seq_len_to_mask.byte", "core.utils.seq_len_to_mask.byte", "core.utils.seq_len_to_mask.byte", "core.utils.seq_len_to_mask.byte", "snli.ESIM.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss."], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.snli.ESIM.mean_pooling", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.snli.ESIM.max_pooling", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.snli.ESIM.mean_pooling", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.snli.ESIM.max_pooling", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "words1", ",", "words2", ",", "seq_len1", ",", "seq_len2", ",", "target", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param words1: [batch, seq_len]\n        :param words2: [batch, seq_len]\n        :param seq_len1: [batch]\n        :param seq_len2: [batch]\n        :param target:\n        :return:\n        \"\"\"", "\n", "mask1", "=", "seq_len_to_mask", "(", "seq_len1", ",", "words1", ".", "size", "(", "1", ")", ")", "\n", "mask2", "=", "seq_len_to_mask", "(", "seq_len2", ",", "words2", ".", "size", "(", "1", ")", ")", "\n", "a0", "=", "self", ".", "embedding", "(", "words1", ")", "# B * len * emb_dim", "\n", "b0", "=", "self", ".", "embedding", "(", "words2", ")", "\n", "a0", ",", "b0", "=", "self", ".", "dropout_embed", "(", "a0", ")", ",", "self", ".", "dropout_embed", "(", "b0", ")", "\n", "a", "=", "self", ".", "rnn", "(", "a0", ",", "mask1", ".", "byte", "(", ")", ")", "# a: [B, PL, 2 * H]", "\n", "b", "=", "self", ".", "rnn", "(", "b0", ",", "mask2", ".", "byte", "(", ")", ")", "\n", "# a = self.dropout_rnn(self.rnn(a0, seq_len1)[0])  # a: [B, PL, 2 * H]", "\n", "# b = self.dropout_rnn(self.rnn(b0, seq_len2)[0])", "\n", "\n", "ai", ",", "bi", "=", "self", ".", "bi_attention", "(", "a", ",", "mask1", ",", "b", ",", "mask2", ")", "\n", "\n", "a_", "=", "torch", ".", "cat", "(", "(", "a", ",", "ai", ",", "a", "-", "ai", ",", "a", "*", "ai", ")", ",", "dim", "=", "2", ")", "# ma: [B, PL, 8 * H]", "\n", "b_", "=", "torch", ".", "cat", "(", "(", "b", ",", "bi", ",", "b", "-", "bi", ",", "b", "*", "bi", ")", ",", "dim", "=", "2", ")", "\n", "a_f", "=", "self", ".", "interfere", "(", "a_", ")", "\n", "b_f", "=", "self", ".", "interfere", "(", "b_", ")", "\n", "\n", "a_h", "=", "self", ".", "rnn_high", "(", "a_f", ",", "mask1", ".", "byte", "(", ")", ")", "# ma: [B, PL, 2 * H]", "\n", "b_h", "=", "self", ".", "rnn_high", "(", "b_f", ",", "mask2", ".", "byte", "(", ")", ")", "\n", "# a_h = self.dropout_rnn(self.rnn_high(a_f, seq_len1)[0])  # ma: [B, PL, 2 * H]", "\n", "# b_h = self.dropout_rnn(self.rnn_high(b_f, seq_len2)[0])", "\n", "\n", "a_avg", "=", "self", ".", "mean_pooling", "(", "a_h", ",", "mask1", ",", "dim", "=", "1", ")", "\n", "a_max", ",", "_", "=", "self", ".", "max_pooling", "(", "a_h", ",", "mask1", ",", "dim", "=", "1", ")", "\n", "b_avg", "=", "self", ".", "mean_pooling", "(", "b_h", ",", "mask2", ",", "dim", "=", "1", ")", "\n", "b_max", ",", "_", "=", "self", ".", "max_pooling", "(", "b_h", ",", "mask2", ",", "dim", "=", "1", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "(", "a_avg", ",", "a_max", ",", "b_avg", ",", "b_max", ")", ",", "dim", "=", "1", ")", "# v: [B, 8 * H]", "\n", "logits", "=", "torch", ".", "tanh", "(", "self", ".", "classifier", "(", "out", ")", ")", "\n", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ",", "target", ")", "\n", "\n", "return", "{", "Const", ".", "LOSS", ":", "loss", ",", "Const", ".", "OUTPUT", ":", "logits", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "Const", ".", "OUTPUT", ":", "logits", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.snli.ESIM.predict": [[117, 120], ["[].argmax", "snli.ESIM.forward"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward"], ["", "", "def", "predict", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pred", "=", "self", ".", "forward", "(", "**", "kwargs", ")", "[", "Const", ".", "OUTPUT", "]", ".", "argmax", "(", "-", "1", ")", "\n", "return", "{", "Const", ".", "OUTPUT", ":", "pred", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.snli.ESIM.mean_pooling": [[123, 127], ["mask.view().float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.view", "mask.size", "mask.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "@", "staticmethod", "\n", "def", "mean_pooling", "(", "input", ",", "mask", ",", "dim", "=", "1", ")", ":", "\n", "        ", "masks", "=", "mask", ".", "view", "(", "mask", ".", "size", "(", "0", ")", ",", "mask", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "return", "torch", ".", "sum", "(", "input", "*", "masks", ",", "dim", "=", "dim", ")", "/", "torch", ".", "sum", "(", "masks", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.snli.ESIM.max_pooling": [[128, 134], ["mask.view", "masks.expand().float.expand().float.expand().float", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mask.size", "mask.size", "masks.expand().float.expand().float.expand", "input.size", "masks.expand().float.expand().float.le().float", "masks.expand().float.expand().float.le"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "@", "staticmethod", "\n", "def", "max_pooling", "(", "input", ",", "mask", ",", "dim", "=", "1", ")", ":", "\n", "        ", "my_inf", "=", "10e12", "\n", "masks", "=", "mask", ".", "view", "(", "mask", ".", "size", "(", "0", ")", ",", "mask", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "masks", "=", "masks", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", ".", "float", "(", ")", "\n", "return", "torch", ".", "max", "(", "input", "+", "masks", ".", "le", "(", "0.5", ")", ".", "float", "(", ")", "*", "-", "my_inf", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.snli.EmbedDropout.forward": [[138, 142], ["sequences_batch.data.new_ones", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout", "torch.functional.dropout.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout"], ["    ", "def", "forward", "(", "self", ",", "sequences_batch", ")", ":", "\n", "        ", "ones", "=", "sequences_batch", ".", "data", ".", "new_ones", "(", "sequences_batch", ".", "shape", "[", "0", "]", ",", "sequences_batch", ".", "shape", "[", "-", "1", "]", ")", "\n", "dropout_mask", "=", "nn", ".", "functional", ".", "dropout", "(", "ones", ",", "self", ".", "p", ",", "self", ".", "training", ",", "inplace", "=", "False", ")", "\n", "return", "dropout_mask", ".", "unsqueeze", "(", "1", ")", "*", "sequences_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.snli.BiRNN.__init__": [[145, 152], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "dropout_rate", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "BiRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "input_size", ",", "hidden_size", ",", "\n", "num_layers", "=", "1", ",", "\n", "bidirectional", "=", "True", ",", "\n", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.snli.BiRNN.forward": [[153, 178], ["x_mask.data.eq().long().sum", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "list", "x.index_select.index_select.index_select", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "snli.BiRNN.rnn.flatten_parameters", "torch.cat.index_select", "torch.cat.index_select", "torch.cat.index_select", "torch.dropout", "torch.dropout", "torch.dropout", "torch.utils.rnn.PackedSequence", "torch.utils.rnn.PackedSequence", "torch.utils.rnn.PackedSequence", "snli.BiRNN.rnn", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.cat.size", "torch.cat.size", "torch.cat.size", "x_mask.size", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_mask.data.eq().long", "torch.cat.data.type", "torch.cat.data.type", "torch.cat.data.type", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "x_mask.data.eq", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "x_mask.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_mask", ")", ":", "\n", "# Sort x", "\n", "        ", "lengths", "=", "x_mask", ".", "data", ".", "eq", "(", "True", ")", ".", "long", "(", ")", ".", "sum", "(", "1", ")", "\n", "_", ",", "idx_sort", "=", "torch", ".", "sort", "(", "lengths", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "_", ",", "idx_unsort", "=", "torch", ".", "sort", "(", "idx_sort", ",", "dim", "=", "0", ")", "\n", "lengths", "=", "list", "(", "lengths", "[", "idx_sort", "]", ")", "\n", "\n", "x", "=", "x", ".", "index_select", "(", "0", ",", "idx_sort", ")", "\n", "# Pack it up", "\n", "rnn_input", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "x", ",", "lengths", ",", "batch_first", "=", "True", ")", "\n", "# Apply dropout to input", "\n", "if", "self", ".", "dropout_rate", ">", "0", ":", "\n", "            ", "dropout_input", "=", "F", ".", "dropout", "(", "rnn_input", ".", "data", ",", "p", "=", "self", ".", "dropout_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "rnn_input", "=", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", "(", "dropout_input", ",", "rnn_input", ".", "batch_sizes", ")", "\n", "", "self", ".", "rnn", ".", "flatten_parameters", "(", ")", "\n", "output", "=", "self", ".", "rnn", "(", "rnn_input", ")", "[", "0", "]", "\n", "# Unpack everything", "\n", "output", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "output", ",", "batch_first", "=", "True", ")", "[", "0", "]", "\n", "output", "=", "output", ".", "index_select", "(", "0", ",", "idx_unsort", ")", "\n", "if", "output", ".", "size", "(", "1", ")", "!=", "x_mask", ".", "size", "(", "1", ")", ":", "\n", "            ", "padding", "=", "torch", ".", "zeros", "(", "output", ".", "size", "(", "0", ")", ",", "\n", "x_mask", ".", "size", "(", "1", ")", "-", "output", ".", "size", "(", "1", ")", ",", "\n", "output", ".", "size", "(", "2", ")", ")", ".", "type", "(", "output", ".", "data", ".", "type", "(", ")", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "padding", "]", ",", "1", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.cnn_text_classification.CNNText.__init__": [[26, 49], ["super().__init__", "embeddings.embedding.Embedding", "modules.encoder.ConvMaxpool", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "sum"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "embed", ",", "\n", "num_classes", ",", "\n", "kernel_nums", "=", "(", "30", ",", "40", ",", "50", ")", ",", "\n", "kernel_sizes", "=", "(", "1", ",", "3", ",", "5", ")", ",", "\n", "dropout", "=", "0.5", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param tuple(int,int),torch.FloatTensor,nn.Embedding,numpy.ndarray embed: Embedding\u7684\u5927\u5c0f(\u4f20\u5165tuple(int, int),\n            \u7b2c\u4e00\u4e2aint\u4e3avocab_zie, \u7b2c\u4e8c\u4e2aint\u4e3aembed_dim); \u5982\u679c\u4e3aTensor, Embedding, ndarray\u7b49\u5219\u76f4\u63a5\u4f7f\u7528\u8be5\u503c\u521d\u59cb\u5316Embedding\n        :param int num_classes: \u4e00\u5171\u6709\u591a\u5c11\u7c7b\n        :param int,tuple(int) kernel_sizes: \u8f93\u51fachannel\u7684kernel\u5927\u5c0f\u3002\n        :param float dropout: Dropout\u7684\u5927\u5c0f\n        \"\"\"", "\n", "super", "(", "CNNText", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# no support for pre-trained embedding currently", "\n", "self", ".", "embed", "=", "embedding", ".", "Embedding", "(", "embed", ")", "\n", "self", ".", "conv_pool", "=", "encoder", ".", "ConvMaxpool", "(", "\n", "in_channels", "=", "self", ".", "embed", ".", "embedding_dim", ",", "\n", "out_channels", "=", "kernel_nums", ",", "\n", "kernel_sizes", "=", "kernel_sizes", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "sum", "(", "kernel_nums", ")", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.cnn_text_classification.CNNText.forward": [[50, 66], ["cnn_text_classification.CNNText.embed", "cnn_text_classification.CNNText.dropout", "cnn_text_classification.CNNText.fc", "core.utils.seq_len_to_mask", "cnn_text_classification.CNNText.conv_pool", "cnn_text_classification.CNNText.conv_pool"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.dropout", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask"], ["", "def", "forward", "(", "self", ",", "words", ",", "seq_len", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param torch.LongTensor words: [batch_size, seq_len]\uff0c\u53e5\u5b50\u4e2dword\u7684index\n        :param torch.LongTensor seq_len:  [batch,] \u6bcf\u4e2a\u53e5\u5b50\u7684\u957f\u5ea6\n        :return output: dict of torch.LongTensor, [batch_size, num_classes]\n        \"\"\"", "\n", "x", "=", "self", ".", "embed", "(", "words", ")", "# [N,L] -> [N,L,C]", "\n", "if", "seq_len", "is", "not", "None", ":", "\n", "            ", "mask", "=", "seq_len_to_mask", "(", "seq_len", ")", "\n", "x", "=", "self", ".", "conv_pool", "(", "x", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv_pool", "(", "x", ")", "# [N,L,C] -> [N,C]", "\n", "", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "# [N,C] -> [N, N_class]", "\n", "return", "{", "C", ".", "OUTPUT", ":", "x", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.cnn_text_classification.CNNText.predict": [[67, 77], ["cnn_text_classification.CNNText.", "output[].max"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "words", ",", "seq_len", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.LongTensor words: [batch_size, seq_len]\uff0c\u53e5\u5b50\u4e2dword\u7684index\n        :param torch.LongTensor seq_len:  [batch,] \u6bcf\u4e2a\u53e5\u5b50\u7684\u957f\u5ea6\n\n        :return predict: dict of torch.LongTensor, [batch_size, ]\n        \"\"\"", "\n", "output", "=", "self", "(", "words", ",", "seq_len", ")", "\n", "_", ",", "predict", "=", "output", "[", "C", ".", "OUTPUT", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "return", "{", "C", ".", "OUTPUT", ":", "predict", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_generator.SequenceGeneratorModel.__init__": [[15, 43], ["torch.nn.Module.__init__", "modules.generator.seq2seq_generator.SequenceGenerator"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["class", "SequenceGenerator", ":", "\n", "    ", "\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2aSeq2SeqDecoder\uff0cdecode\u51fa\u53e5\u5b50\n\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "decoder", ":", "Seq2SeqDecoder", ",", "max_length", "=", "20", ",", "max_len_a", "=", "0.0", ",", "num_beams", "=", "1", ",", "\n", "do_sample", "=", "True", ",", "temperature", "=", "1.0", ",", "top_k", "=", "50", ",", "top_p", "=", "1.0", ",", "bos_token_id", "=", "None", ",", "eos_token_id", "=", "None", ",", "\n", "repetition_penalty", "=", "1", ",", "length_penalty", "=", "1.0", ",", "pad_token_id", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n\n        :param Seq2SeqDecoder decoder: Decoder\u5bf9\u8c61\n        :param int max_length: \u751f\u6210\u53e5\u5b50\u7684\u6700\u5927\u957f\u5ea6, \u6bcf\u53e5\u8bdd\u7684decode\u957f\u5ea6\u4e3amax_length + max_len_a*src_len\n        :param float max_len_a: \u6bcf\u53e5\u8bdd\u7684decode\u957f\u5ea6\u4e3amax_length + max_len_a*src_len\u3002 \u5982\u679c\u4e0d\u4e3a0\uff0c\u9700\u8981\u4fdd\u8bc1State\u4e2d\u5305\u542bencoder_mask\n        :param int num_beams: beam search\u7684\u5927\u5c0f\n        :param bool do_sample: \u662f\u5426\u901a\u8fc7\u91c7\u6837\u7684\u65b9\u5f0f\u751f\u6210\n        :param float temperature: \u53ea\u6709\u5728do_sample\u4e3aTrue\u624d\u6709\u610f\u4e49\n        :param int top_k: \u53ea\u4ecetop_k\u4e2d\u91c7\u6837\n        :param float top_p: \u53ea\u4ecetop_p\u7684token\u4e2d\u91c7\u6837\uff0cnucles sample\n        :param int,None bos_token_id: \u53e5\u5b50\u5f00\u5934\u7684token id\n        :param int,None eos_token_id: \u53e5\u5b50\u7ed3\u675f\u7684token id\n        :param float repetition_penalty: \u591a\u5927\u7a0b\u5ea6\u4e0a\u60e9\u7f5a\u91cd\u590d\u7684token\n        :param float length_penalty: \u5bf9\u957f\u5ea6\u7684\u60e9\u7f5a\uff0c\u5c0f\u4e8e1\u9f13\u52b1\u957f\u53e5\uff0c\u5927\u4e8e1\u9f13\u52b1\u77ed\u5267\n        :param int pad_token_id: \u5f53\u67d0\u53e5\u8bdd\u751f\u6210\u7ed3\u675f\u4e4b\u540e\uff0c\u4e4b\u540e\u751f\u6210\u7684\u5185\u5bb9\u7528pad_token_id\u8865\u5145\n        \"\"\"", "\n", "if", "do_sample", ":", "\n", "            ", "self", ".", "generate_func", "=", "partial", "(", "sample_generate", ",", "decoder", "=", "decoder", ",", "max_length", "=", "max_length", ",", "max_len_a", "=", "max_len_a", ",", "\n", "num_beams", "=", "num_beams", ",", "\n", "temperature", "=", "temperature", ",", "top_k", "=", "top_k", ",", "top_p", "=", "top_p", ",", "bos_token_id", "=", "bos_token_id", ",", "\n", "eos_token_id", "=", "eos_token_id", ",", "repetition_penalty", "=", "repetition_penalty", ",", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_generator.SequenceGeneratorModel.forward": [[44, 55], ["seq2seq_generator.SequenceGeneratorModel.seq2seq_model"], "methods", ["None"], ["length_penalty", "=", "length_penalty", ",", "pad_token_id", "=", "pad_token_id", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "generate_func", "=", "partial", "(", "greedy_generate", ",", "decoder", "=", "decoder", ",", "max_length", "=", "max_length", ",", "max_len_a", "=", "max_len_a", ",", "\n", "num_beams", "=", "num_beams", ",", "\n", "bos_token_id", "=", "bos_token_id", ",", "eos_token_id", "=", "eos_token_id", ",", "\n", "repetition_penalty", "=", "repetition_penalty", ",", "\n", "length_penalty", "=", "length_penalty", ",", "pad_token_id", "=", "pad_token_id", ")", "\n", "", "self", ".", "do_sample", "=", "do_sample", "\n", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "num_beams", "=", "num_beams", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "top_k", "=", "top_k", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_generator.SequenceGeneratorModel.predict": [[56, 67], ["seq2seq_generator.SequenceGeneratorModel.seq2seq_model.prepare_state", "seq2seq_generator.SequenceGeneratorModel.generator.generate"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_model.Seq2SeqModel.prepare_state", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.generator.seq2seq_generator.SequenceGenerator.generate"], ["self", ".", "top_p", "=", "top_p", "\n", "self", ".", "bos_token_id", "=", "bos_token_id", "\n", "self", ".", "eos_token_id", "=", "eos_token_id", "\n", "self", ".", "repetition_penalty", "=", "repetition_penalty", "\n", "self", ".", "length_penalty", "=", "length_penalty", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate", "(", "self", ",", "state", ",", "tokens", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_model.Seq2SeqModel.__init__": [[16, 26], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ":", "Seq2SeqEncoder", ",", "decoder", ":", "Seq2SeqDecoder", ")", ":", "\n", "        ", "\"\"\"\n        \u53ef\u4ee5\u7528\u4e8e\u5728Trainer\u4e2d\u8bad\u7ec3\u7684Seq2Seq\u6a21\u578b\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u7ee7\u627f\u4e86\u8be5\u51fd\u6570\u4e4b\u540e\uff0c\u53ea\u9700\u8981\u5b9e\u73b0classmethod build_model\u5373\u53ef\u3002\n\n        :param encoder: Encoder\n        :param decoder: Decoder\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_model.Seq2SeqModel.forward": [[27, 44], ["seq2seq_model.Seq2SeqModel.prepare_state", "seq2seq_model.Seq2SeqModel.decoder", "isinstance", "isinstance", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_model.Seq2SeqModel.prepare_state"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "tgt_tokens", ",", "src_seq_len", "=", "None", ",", "tgt_seq_len", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        :param torch.LongTensor src_tokens: source\u7684token\n        :param torch.LongTensor tgt_tokens: target\u7684token\n        :param torch.LongTensor src_seq_len: src\u7684\u957f\u5ea6\n        :param torch.LongTensor tgt_seq_len: target\u7684\u957f\u5ea6\uff0c\u9ed8\u8ba4\u7528\u4e0d\u4e0a\n        :return: {'pred': torch.Tensor}, \u5176\u4e2dpred\u7684shape\u4e3absz x max_len x vocab_size\n        \"\"\"", "\n", "state", "=", "self", ".", "prepare_state", "(", "src_tokens", ",", "src_seq_len", ")", "\n", "decoder_output", "=", "self", ".", "decoder", "(", "tgt_tokens", ",", "state", ")", "\n", "if", "isinstance", "(", "decoder_output", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "{", "'pred'", ":", "decoder_output", "}", "\n", "", "elif", "isinstance", "(", "decoder_output", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "return", "{", "'pred'", ":", "decoder_output", "[", "0", "]", "}", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "f\"Unsupported return type from Decoder:{type(self.decoder)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_model.Seq2SeqModel.prepare_state": [[45, 56], ["seq2seq_model.Seq2SeqModel.encoder", "seq2seq_model.Seq2SeqModel.decoder.init_state"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.decoder.seq2seq_decoder.TransformerSeq2SeqDecoder.init_state"], ["", "", "def", "prepare_state", "(", "self", ",", "src_tokens", ",", "src_seq_len", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        \u8c03\u7528encoder\u83b7\u53d6state\uff0c\u4f1a\u628aencoder\u7684encoder_output, encoder_mask\u76f4\u63a5\u4f20\u5165\u5230decoder.init_state\u4e2d\u521d\u59cb\u5316\u4e00\u4e2astate\n\n        :param src_tokens:\n        :param src_seq_len:\n        :return:\n        \"\"\"", "\n", "encoder_output", ",", "encoder_mask", "=", "self", ".", "encoder", "(", "src_tokens", ",", "src_seq_len", ")", "\n", "state", "=", "self", ".", "decoder", ".", "init_state", "(", "encoder_output", ",", "encoder_mask", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_model.Seq2SeqModel.build_model": [[57, 65], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        \u9700\u8981\u5b9e\u73b0\u672c\u65b9\u6cd5\u6765\u8fdb\u884cSeq2SeqModel\u7684\u521d\u59cb\u5316\n\n        :return:\n        \"\"\"", "\n", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_model.TransformerSeq2SeqModel.__init__": [[73, 75], ["seq2seq_model.Seq2SeqModel.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_model.TransformerSeq2SeqModel.build_model": [[76, 131], ["embeddings.get_embeddings", "modules.encoder.seq2seq_encoder.TransformerSeq2SeqEncoder", "modules.decoder.seq2seq_decoder.TransformerSeq2SeqDecoder", "cls", "RuntimeError", "embeddings.get_embeddings", "torch.nn.Embedding.from_pretrained", "torch.nn.Embedding.from_pretrained", "embeddings.utils.get_sinusoid_encoding_table", "embeddings.utils.get_sinusoid_encoding_table", "embeddings.get_embeddings", "embeddings.get_embeddings", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.tokenizer.bert_tokenizer.BertTokenizer.from_pretrained", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_sinusoid_encoding_table", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_sinusoid_encoding_table", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "src_embed", ",", "tgt_embed", "=", "None", ",", "\n", "pos_embed", "=", "'sin'", ",", "max_position", "=", "1024", ",", "num_layers", "=", "6", ",", "d_model", "=", "512", ",", "n_head", "=", "8", ",", "dim_ff", "=", "2048", ",", "dropout", "=", "0.1", ",", "\n", "bind_encoder_decoder_embed", "=", "False", ",", "\n", "bind_decoder_input_output_embed", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        \u521d\u59cb\u5316\u4e00\u4e2aTransformerSeq2SeqModel\n\n        :param nn.Module, StaticEmbedding, Tuple[int, int] src_embed: source\u7684embedding\n        :param nn.Module, StaticEmbedding, Tuple[int, int] tgt_embed: target\u7684embedding\uff0c\u5982\u679cbind_encoder_decoder_embed\u4e3a\n            True\uff0c\u5219\u4e0d\u8981\u8f93\u5165\u8be5\u503c\n        :param str pos_embed: \u652f\u6301sin, learned\u4e24\u79cd\n        :param int max_position: \u6700\u5927\u652f\u6301\u957f\u5ea6\n        :param int num_layers: encoder\u548cdecoder\u7684\u5c42\u6570\n        :param int d_model: encoder\u548cdecoder\u8f93\u5165\u8f93\u51fa\u7684\u5927\u5c0f\n        :param int n_head: encoder\u548cdecoder\u7684head\u7684\u6570\u91cf\n        :param int dim_ff: encoder\u548cdecoder\u4e2dFFN\u4e2d\u95f4\u6620\u5c04\u7684\u7ef4\u5ea6\n        :param float dropout: Attention\u548cFFN dropout\u7684\u5927\u5c0f\n        :param bool bind_encoder_decoder_embed: \u662f\u5426\u5bf9encoder\u548cdecoder\u4f7f\u7528\u76f8\u540c\u7684embedding\n        :param bool bind_decoder_input_output_embed: decoder\u7684\u8f93\u51faembedding\u662f\u5426\u4e0e\u5176\u8f93\u5165embedding\u662f\u4e00\u6837\u7684\u6743\u91cd\n        :return: TransformerSeq2SeqModel\n        \"\"\"", "\n", "if", "bind_encoder_decoder_embed", "and", "tgt_embed", "is", "not", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"If you set `bind_encoder_decoder_embed=True`, please do not provide `tgt_embed`.\"", ")", "\n", "\n", "", "src_embed", "=", "get_embeddings", "(", "src_embed", ")", "\n", "\n", "if", "bind_encoder_decoder_embed", ":", "\n", "            ", "tgt_embed", "=", "src_embed", "\n", "", "else", ":", "\n", "            ", "assert", "tgt_embed", "is", "not", "None", ",", "\"You need to pass `tgt_embed` when `bind_encoder_decoder_embed=False`\"", "\n", "tgt_embed", "=", "get_embeddings", "(", "tgt_embed", ")", "\n", "\n", "", "if", "pos_embed", "==", "'sin'", ":", "\n", "            ", "encoder_pos_embed", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "get_sinusoid_encoding_table", "(", "max_position", "+", "1", ",", "src_embed", ".", "embedding_dim", ",", "padding_idx", "=", "0", ")", ",", "\n", "freeze", "=", "True", ")", "# \u8fd9\u91cc\u89c4\u5b9a0\u662fpadding", "\n", "deocder_pos_embed", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "get_sinusoid_encoding_table", "(", "max_position", "+", "1", ",", "tgt_embed", ".", "embedding_dim", ",", "padding_idx", "=", "0", ")", ",", "\n", "freeze", "=", "True", ")", "# \u8fd9\u91cc\u89c4\u5b9a0\u662fpadding", "\n", "", "elif", "pos_embed", "==", "'learned'", ":", "\n", "            ", "encoder_pos_embed", "=", "get_embeddings", "(", "(", "max_position", "+", "1", ",", "src_embed", ".", "embedding_dim", ")", ",", "padding_idx", "=", "0", ")", "\n", "deocder_pos_embed", "=", "get_embeddings", "(", "(", "max_position", "+", "1", ",", "src_embed", ".", "embedding_dim", ")", ",", "padding_idx", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"pos_embed only supports sin or learned.\"", ")", "\n", "\n", "", "encoder", "=", "TransformerSeq2SeqEncoder", "(", "embed", "=", "src_embed", ",", "pos_embed", "=", "encoder_pos_embed", ",", "\n", "num_layers", "=", "num_layers", ",", "d_model", "=", "d_model", ",", "n_head", "=", "n_head", ",", "dim_ff", "=", "dim_ff", ",", "\n", "dropout", "=", "dropout", ")", "\n", "decoder", "=", "TransformerSeq2SeqDecoder", "(", "embed", "=", "tgt_embed", ",", "pos_embed", "=", "deocder_pos_embed", ",", "\n", "d_model", "=", "d_model", ",", "num_layers", "=", "num_layers", ",", "n_head", "=", "n_head", ",", "dim_ff", "=", "dim_ff", ",", "\n", "dropout", "=", "dropout", ",", "\n", "bind_decoder_input_output_embed", "=", "bind_decoder_input_output_embed", ")", "\n", "\n", "return", "cls", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_model.LSTMSeq2SeqModel.__init__": [[138, 140], ["seq2seq_model.Seq2SeqModel.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.seq2seq_model.LSTMSeq2SeqModel.build_model": [[141, 177], ["embeddings.get_embeddings", "modules.encoder.seq2seq_encoder.LSTMSeq2SeqEncoder", "modules.decoder.seq2seq_decoder.LSTMSeq2SeqDecoder", "cls", "RuntimeError", "embeddings.get_embeddings"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.utils.get_embeddings"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "src_embed", ",", "tgt_embed", "=", "None", ",", "\n", "num_layers", "=", "3", ",", "hidden_size", "=", "400", ",", "dropout", "=", "0.3", ",", "bidirectional", "=", "True", ",", "\n", "attention", "=", "True", ",", "bind_encoder_decoder_embed", "=", "False", ",", "\n", "bind_decoder_input_output_embed", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n\n        :param nn.Module, StaticEmbedding, Tuple[int, int] src_embed: source\u7684embedding\n        :param nn.Module, StaticEmbedding, Tuple[int, int] tgt_embed: target\u7684embedding\uff0c\u5982\u679cbind_encoder_decoder_embed\u4e3a\n            True\uff0c\u5219\u4e0d\u8981\u8f93\u5165\u8be5\u503c\n        :param int num_layers: Encoder\u548cDecoder\u7684\u5c42\u6570\n        :param int hidden_size: encoder\u548cdecoder\u7684\u9690\u85cf\u5c42\u5927\u5c0f\n        :param float dropout: \u6bcf\u5c42\u4e4b\u95f4\u7684Dropout\u7684\u5927\u5c0f\n        :param bool bidirectional: encoder\u662f\u5426\u4f7f\u7528\u53cc\u5411LSTM\n        :param bool attention: decoder\u662f\u5426\u4f7f\u7528attention attend encoder\u5728\u6240\u6709\u65f6\u523b\u7684\u72b6\u6001\n        :param bool bind_encoder_decoder_embed: \u662f\u5426\u5bf9encoder\u548cdecoder\u4f7f\u7528\u76f8\u540c\u7684embedding\n        :param bool bind_decoder_input_output_embed: decoder\u7684\u8f93\u51faembedding\u662f\u5426\u4e0e\u5176\u8f93\u5165embedding\u662f\u4e00\u6837\u7684\u6743\u91cd\n        :return: LSTMSeq2SeqModel\n        \"\"\"", "\n", "if", "bind_encoder_decoder_embed", "and", "tgt_embed", "is", "not", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"If you set `bind_encoder_decoder_embed=True`, please do not provide `tgt_embed`.\"", ")", "\n", "\n", "", "src_embed", "=", "get_embeddings", "(", "src_embed", ")", "\n", "\n", "if", "bind_encoder_decoder_embed", ":", "\n", "            ", "tgt_embed", "=", "src_embed", "\n", "", "else", ":", "\n", "            ", "assert", "tgt_embed", "is", "not", "None", ",", "\"You need to pass `tgt_embed` when `bind_encoder_decoder_embed=False`\"", "\n", "tgt_embed", "=", "get_embeddings", "(", "tgt_embed", ")", "\n", "\n", "", "encoder", "=", "LSTMSeq2SeqEncoder", "(", "embed", "=", "src_embed", ",", "num_layers", "=", "num_layers", ",", "\n", "hidden_size", "=", "hidden_size", ",", "dropout", "=", "dropout", ",", "bidirectional", "=", "bidirectional", ")", "\n", "decoder", "=", "LSTMSeq2SeqDecoder", "(", "embed", "=", "tgt_embed", ",", "num_layers", "=", "num_layers", ",", "hidden_size", "=", "hidden_size", ",", "\n", "dropout", "=", "dropout", ",", "bind_decoder_input_output_embed", "=", "bind_decoder_input_output_embed", ",", "\n", "attention", "=", "attention", ")", "\n", "return", "cls", "(", "encoder", ",", "decoder", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.BaseModel.__init__": [[14, 16], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.BaseModel.fit": [[17, 19], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "train_data", ",", "dev_data", "=", "None", ",", "**", "train_args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.BaseModel.predict": [[20, 22], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.__init__": [[28, 31], ["base_model.BaseModel.__init__", "modules.decoder.mlp.MLP"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "in_feature_dim", ",", "out_feature_dim", ")", ":", "\n", "        ", "super", "(", "NaiveClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "[", "in_feature_dim", ",", "in_feature_dim", ",", "out_feature_dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.forward": [[32, 34], ["torch.sigmoid", "base_model.NaiveClassifier.mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "{", "\"predict\"", ":", "torch", ".", "sigmoid", "(", "self", ".", "mlp", "(", "x", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.models.base_model.NaiveClassifier.predict": [[35, 37], ["torch.sigmoid", "base_model.NaiveClassifier.mlp"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "{", "\"predict\"", ":", "torch", ".", "sigmoid", "(", "self", ".", "mlp", "(", "x", ")", ")", ">", "0.5", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.__init__": [[30, 38], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocabs", ":", "dict", "=", "None", ",", "datasets", ":", "dict", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param vocabs: \u4ece\u540d\u79f0(\u5b57\u7b26\u4e32)\u5230 :class:`~fastNLP.Vocabulary` \u7c7b\u578b\u7684dict\n        :param datasets: \u4ece\u540d\u79f0(\u5b57\u7b26\u4e32)\u5230 :class:`~fastNLP.DataSet` \u7c7b\u578b\u7684dict\n        \"\"\"", "\n", "self", ".", "vocabs", "=", "vocabs", "or", "{", "}", "\n", "self", ".", "datasets", "=", "datasets", "or", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_vocab": [[39, 50], ["isinstance"], "methods", ["None"], ["", "def", "set_vocab", "(", "self", ",", "vocab", ",", "field_name", ")", ":", "\n", "        ", "r\"\"\"\n        \u5411DataBunlde\u4e2d\u589e\u52a0vocab\n\n        :param ~fastNLP.Vocabulary vocab: \u8bcd\u8868\n        :param str field_name: \u8fd9\u4e2avocab\u5bf9\u5e94\u7684field\u540d\u79f0\n        :return: self\n        \"\"\"", "\n", "assert", "isinstance", "(", "vocab", ",", "Vocabulary", ")", ",", "\"Only fastNLP.Vocabulary supports.\"", "\n", "self", ".", "vocabs", "[", "field_name", "]", "=", "vocab", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_dataset": [[51, 61], ["isinstance"], "methods", ["None"], ["", "def", "set_dataset", "(", "self", ",", "dataset", ",", "name", ":", "str", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param ~fastNLP.DataSet dataset: \u4f20\u9012\u7ed9DataBundle\u7684DataSet\n        :param str name: dataset\u7684\u540d\u79f0\n        :return: self\n        \"\"\"", "\n", "assert", "isinstance", "(", "dataset", ",", "DataSet", ")", ",", "\"Only fastNLP.DataSet supports.\"", "\n", "self", ".", "datasets", "[", "name", "]", "=", "dataset", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.get_dataset": [[62, 76], ["data_bundle.DataBundle.datasets.keys", "core._logger.logger.error", "KeyError", "data_bundle.DataBundle.datasets.keys"], "methods", ["None"], ["", "def", "get_dataset", "(", "self", ",", "name", ":", "str", ")", "->", "DataSet", ":", "\n", "        ", "r\"\"\"\n        \u83b7\u53d6\u540d\u4e3aname\u7684dataset\n\n        :param str name: dataset\u7684\u540d\u79f0\uff0c\u4e00\u822c\u4e3a'train', 'dev', 'test'\n        :return: DataSet\n        \"\"\"", "\n", "if", "name", "in", "self", ".", "datasets", ".", "keys", "(", ")", ":", "\n", "            ", "return", "self", ".", "datasets", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "error_msg", "=", "f'DataBundle do NOT have DataSet named {name}. '", "f'It should be one of {self.datasets.keys()}.'", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "KeyError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.delete_dataset": [[77, 86], ["data_bundle.DataBundle.datasets.pop"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "", "def", "delete_dataset", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "        ", "r\"\"\"\n        \u5220\u9664\u540d\u4e3aname\u7684DataSet\n\n        :param str name:\n        :return: self\n        \"\"\"", "\n", "self", ".", "datasets", ".", "pop", "(", "name", ",", "None", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.get_vocab": [[87, 101], ["data_bundle.DataBundle.vocabs.keys", "core._logger.logger.error", "KeyError", "data_bundle.DataBundle.vocabs.keys"], "methods", ["None"], ["", "def", "get_vocab", "(", "self", ",", "field_name", ":", "str", ")", "->", "Vocabulary", ":", "\n", "        ", "r\"\"\"\n        \u83b7\u53d6field\u540d\u4e3afield_name\u5bf9\u5e94\u7684vocab\n\n        :param str field_name: \u540d\u79f0\n        :return: Vocabulary\n        \"\"\"", "\n", "if", "field_name", "in", "self", ".", "vocabs", ".", "keys", "(", ")", ":", "\n", "            ", "return", "self", ".", "vocabs", "[", "field_name", "]", "\n", "", "else", ":", "\n", "            ", "error_msg", "=", "f'DataBundle do NOT have Vocabulary named {field_name}. '", "f'It should be one of {self.vocabs.keys()}.'", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "KeyError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.delete_vocab": [[102, 110], ["data_bundle.DataBundle.vocabs.pop"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "", "def", "delete_vocab", "(", "self", ",", "field_name", ":", "str", ")", ":", "\n", "        ", "r\"\"\"\n        \u5220\u9664vocab\n        :param str field_name:\n        :return: self\n        \"\"\"", "\n", "self", ".", "vocabs", ".", "pop", "(", "field_name", ",", "None", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.num_dataset": [[111, 114], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_dataset", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.num_vocab": [[115, 118], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_vocab", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "vocabs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_input": [[119, 143], ["data_bundle.DataBundle.datasets.items", "KeyError", "dataset.has_field", "dataset.set_input", "dataset.has_field"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field"], ["", "def", "set_input", "(", "self", ",", "*", "field_names", ",", "flag", "=", "True", ",", "use_1st_ins_infer_dim_type", "=", "True", ",", "ignore_miss_dataset", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06field_names\u4e2d\u7684field\u8bbe\u7f6e\u4e3ainput, \u5bf9data_bundle\u4e2d\u6240\u6709\u7684dataset\u6267\u884c\u8be5\u64cd\u4f5c::\n\n            data_bundle.set_input('words', 'seq_len')   # \u5c06words\u548cseq_len\u8fd9\u4e24\u4e2afield\u7684input\u5c5e\u6027\u8bbe\u7f6e\u4e3aTrue\n            data_bundle.set_input('words', flag=False)  # \u5c06words\u8fd9\u4e2afield\u7684input\u5c5e\u6027\u8bbe\u7f6e\u4e3aFalse\n\n        :param str field_names: field\u7684\u540d\u79f0\n        :param bool flag: \u5c06field_name\u7684input\u72b6\u6001\u8bbe\u7f6e\u4e3aflag\n        :param bool use_1st_ins_infer_dim_type: \u5982\u679c\u4e3aTrue\uff0c\u5c06\u4e0d\u4f1acheck\u8be5\u5217\u662f\u5426\u6240\u6709\u6570\u636e\u90fd\u662f\u540c\u6837\u7684\u7ef4\u5ea6\uff0c\u540c\u6837\u7684\u7c7b\u578b\u3002\u5c06\u76f4\u63a5\u4f7f\u7528\u7b2c\u4e00\n            \u884c\u7684\u6570\u636e\u8fdb\u884c\u7c7b\u578b\u548c\u7ef4\u5ea6\u63a8\u65ad\u672c\u5217\u7684\u6570\u636e\u7684\u7c7b\u578b\u548c\u7ef4\u5ea6\u3002\n        :param bool ignore_miss_dataset: \u5f53\u67d0\u4e2afield\u540d\u79f0\u5728\u67d0\u4e2adataset\u4e0d\u5b58\u5728\u65f6\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u76f4\u63a5\u5ffd\u7565\u8be5DataSet;\n            \u5982\u679c\u4e3aFalse\uff0c\u5219\u62a5\u9519\n        :return: self\n        \"\"\"", "\n", "for", "field_name", "in", "field_names", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "ignore_miss_dataset", "and", "not", "dataset", ".", "has_field", "(", "field_name", ")", ":", "\n", "                    ", "raise", "KeyError", "(", "f\"Field:{field_name} was not found in DataSet:{name}\"", ")", "\n", "", "if", "not", "dataset", ".", "has_field", "(", "field_name", ")", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "dataset", ".", "set_input", "(", "field_name", ",", "flag", "=", "flag", ",", "use_1st_ins_infer_dim_type", "=", "use_1st_ins_infer_dim_type", ")", "\n", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_target": [[144, 168], ["data_bundle.DataBundle.datasets.items", "KeyError", "dataset.has_field", "dataset.set_target", "dataset.has_field"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field"], ["", "def", "set_target", "(", "self", ",", "*", "field_names", ",", "flag", "=", "True", ",", "use_1st_ins_infer_dim_type", "=", "True", ",", "ignore_miss_dataset", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06field_names\u4e2d\u7684field\u8bbe\u7f6e\u4e3atarget, \u5bf9data_bundle\u4e2d\u6240\u6709\u7684dataset\u6267\u884c\u8be5\u64cd\u4f5c::\n\n            data_bundle.set_target('target', 'seq_len')   # \u5c06words\u548ctarget\u8fd9\u4e24\u4e2afield\u7684input\u5c5e\u6027\u8bbe\u7f6e\u4e3aTrue\n            data_bundle.set_target('target', flag=False)  # \u5c06target\u8fd9\u4e2afield\u7684input\u5c5e\u6027\u8bbe\u7f6e\u4e3aFalse\n\n        :param str field_names: field\u7684\u540d\u79f0\n        :param bool flag: \u5c06field_name\u7684target\u72b6\u6001\u8bbe\u7f6e\u4e3aflag\n        :param bool use_1st_ins_infer_dim_type: \u5982\u679c\u4e3aTrue\uff0c\u5c06\u4e0d\u4f1acheck\u8be5\u5217\u662f\u5426\u6240\u6709\u6570\u636e\u90fd\u662f\u540c\u6837\u7684\u7ef4\u5ea6\uff0c\u540c\u6837\u7684\u7c7b\u578b\u3002\u5c06\u76f4\u63a5\u4f7f\u7528\u7b2c\u4e00\n            \u884c\u7684\u6570\u636e\u8fdb\u884c\u7c7b\u578b\u548c\u7ef4\u5ea6\u63a8\u65ad\u672c\u5217\u7684\u6570\u636e\u7684\u7c7b\u578b\u548c\u7ef4\u5ea6\u3002\n        :param bool ignore_miss_dataset: \u5f53\u67d0\u4e2afield\u540d\u79f0\u5728\u67d0\u4e2adataset\u4e0d\u5b58\u5728\u65f6\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u76f4\u63a5\u5ffd\u7565\u8be5DataSet;\n            \u5982\u679c\u4e3aFalse\uff0c\u5219\u62a5\u9519\n        :return: self\n        \"\"\"", "\n", "for", "field_name", "in", "field_names", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "ignore_miss_dataset", "and", "not", "dataset", ".", "has_field", "(", "field_name", ")", ":", "\n", "                    ", "raise", "KeyError", "(", "f\"Field:{field_name} was not found in DataSet:{name}\"", ")", "\n", "", "if", "not", "dataset", ".", "has_field", "(", "field_name", ")", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "dataset", ".", "set_target", "(", "field_name", ",", "flag", "=", "flag", ",", "use_1st_ins_infer_dim_type", "=", "use_1st_ins_infer_dim_type", ")", "\n", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_pad_val": [[169, 185], ["data_bundle.DataBundle.datasets.items", "dataset.has_field", "dataset.set_pad_val", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_pad_val"], ["", "def", "set_pad_val", "(", "self", ",", "field_name", ",", "pad_val", ",", "ignore_miss_dataset", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06DataBundle\u4e2d\u6240\u6709\u7684DataSet\u4e2d\u540d\u4e3afield_name\u7684Field\u7684padding\u503c\u8bbe\u7f6e\u4e3apad_val.\n\n        :param str field_name:\n        :param int pad_val:\n        :param bool ignore_miss_dataset: \u5f53\u67d0\u4e2afield\u540d\u79f0\u5728\u67d0\u4e2adataset\u4e0d\u5b58\u5728\u65f6\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u76f4\u63a5\u5ffd\u7565\u8be5DataSet;\n            \u5982\u679c\u4e3aFalse\uff0c\u5219\u62a5\u9519\n        :return: self\n        \"\"\"", "\n", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset", ".", "has_field", "(", "field_name", "=", "field_name", ")", ":", "\n", "                ", "dataset", ".", "set_pad_val", "(", "field_name", "=", "field_name", ",", "pad_val", "=", "pad_val", ")", "\n", "", "elif", "not", "ignore_miss_dataset", ":", "\n", "                ", "raise", "KeyError", "(", "f\"{field_name} not found DataSet:{name}.\"", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_ignore_type": [[186, 203], ["data_bundle.DataBundle.datasets.items", "dataset.has_field", "dataset.set_ignore_type", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_ignore_type"], ["", "def", "set_ignore_type", "(", "self", ",", "*", "field_names", ",", "flag", "=", "True", ",", "ignore_miss_dataset", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06DataBundle\u4e2d\u6240\u6709\u7684DataSet\u4e2d\u540d\u4e3a*field_names\u7684Field\u7684ignore_type\u8bbe\u7f6e\u4e3aflag\u72b6\u6001\n\n        :param str field_names:\n        :param bool flag:\n        :param bool ignore_miss_dataset: \u5f53\u67d0\u4e2afield\u540d\u79f0\u5728\u67d0\u4e2adataset\u4e0d\u5b58\u5728\u65f6\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u76f4\u63a5\u5ffd\u7565\u8be5DataSet;\n            \u5982\u679c\u4e3aFalse\uff0c\u5219\u62a5\u9519\n        :return: self\n        \"\"\"", "\n", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "for", "field_name", "in", "field_names", ":", "\n", "                ", "if", "dataset", ".", "has_field", "(", "field_name", "=", "field_name", ")", ":", "\n", "                    ", "dataset", ".", "set_ignore_type", "(", "field_name", ",", "flag", "=", "flag", ")", "\n", "", "elif", "not", "ignore_miss_dataset", ":", "\n", "                    ", "raise", "KeyError", "(", "f\"{field_name} not found DataSet:{name}.\"", ")", "\n", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.copy_field": [[204, 220], ["data_bundle.DataBundle.datasets.items", "dataset.has_field", "dataset.copy_field", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.copy_field"], ["", "def", "copy_field", "(", "self", ",", "field_name", ",", "new_field_name", ",", "ignore_miss_dataset", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06DataBundle\u4e2d\u6240\u6709\u7684DataSet\u4e2d\u540d\u4e3afield_name\u7684Field\u590d\u5236\u4e00\u4efd\u5e76\u547d\u540d\u4e3a\u53ebnew_field_name.\n\n        :param str field_name:\n        :param str new_field_name:\n        :param bool ignore_miss_dataset: \u5f53\u67d0\u4e2afield\u540d\u79f0\u5728\u67d0\u4e2adataset\u4e0d\u5b58\u5728\u65f6\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u76f4\u63a5\u5ffd\u7565\u8be5DataSet;\n            \u5982\u679c\u4e3aFalse\uff0c\u5219\u62a5\u9519\n        :return: self\n        \"\"\"", "\n", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset", ".", "has_field", "(", "field_name", "=", "field_name", ")", ":", "\n", "                ", "dataset", ".", "copy_field", "(", "field_name", "=", "field_name", ",", "new_field_name", "=", "new_field_name", ")", "\n", "", "elif", "not", "ignore_miss_dataset", ":", "\n", "                ", "raise", "KeyError", "(", "f\"{field_name} not found DataSet:{name}.\"", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.rename_field": [[221, 242], ["data_bundle.DataBundle.datasets.items", "dataset.has_field", "dataset.rename_field", "data_bundle.DataBundle.vocabs.pop", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "def", "rename_field", "(", "self", ",", "field_name", ",", "new_field_name", ",", "ignore_miss_dataset", "=", "True", ",", "rename_vocab", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06DataBundle\u4e2d\u6240\u6709DataSet\u4e2d\u540d\u4e3afield_name\u7684field\u91cd\u547d\u540d\u4e3anew_field_name.\n\n        :param str field_name:\n        :param str new_field_name:\n        :param bool ignore_miss_dataset: \u5f53\u67d0\u4e2afield\u540d\u79f0\u5728\u67d0\u4e2adataset\u4e0d\u5b58\u5728\u65f6\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u76f4\u63a5\u5ffd\u7565\u8be5DataSet;\n            \u5982\u679c\u4e3aFalse\uff0c\u5219\u62a5\u9519\n        :param bool rename_vocab: \u5982\u679c\u8be5field\u540c\u65f6\u4e5f\u5b58\u5728\u4e8evocabs\u4e2d\uff0c\u4f1a\u5c06\u8be5field\u7684\u540d\u79f0\u5bf9\u5e94\u4fee\u6539\n        :return: self\n        \"\"\"", "\n", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset", ".", "has_field", "(", "field_name", "=", "field_name", ")", ":", "\n", "                ", "dataset", ".", "rename_field", "(", "field_name", "=", "field_name", ",", "new_field_name", "=", "new_field_name", ")", "\n", "", "elif", "not", "ignore_miss_dataset", ":", "\n", "                ", "raise", "KeyError", "(", "f\"{field_name} not found DataSet:{name}.\"", ")", "\n", "", "", "if", "rename_vocab", ":", "\n", "            ", "if", "field_name", "in", "self", ".", "vocabs", ":", "\n", "                ", "self", ".", "vocabs", "[", "new_field_name", "]", "=", "self", ".", "vocabs", ".", "pop", "(", "field_name", ")", "\n", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.delete_field": [[243, 262], ["data_bundle.DataBundle.datasets.items", "dataset.has_field", "dataset.delete_field", "data_bundle.DataBundle.vocabs.pop", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.delete_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "def", "delete_field", "(", "self", ",", "field_name", ",", "ignore_miss_dataset", "=", "True", ",", "delete_vocab", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06DataBundle\u4e2d\u6240\u6709DataSet\u4e2d\u540d\u4e3afield_name\u7684field\u5220\u9664\u6389.\n\n        :param str field_name:\n        :param bool ignore_miss_dataset: \u5f53\u67d0\u4e2afield\u540d\u79f0\u5728\u67d0\u4e2adataset\u4e0d\u5b58\u5728\u65f6\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u76f4\u63a5\u5ffd\u7565\u8be5DataSet;\n            \u5982\u679c\u4e3aFalse\uff0c\u5219\u62a5\u9519\n        :param bool delete_vocab: \u5982\u679c\u8be5field\u4e5f\u5728vocabs\u4e2d\u5b58\u5728\uff0c\u5c06\u8be5\u503c\u4e5f\u4e00\u5e76\u5220\u9664\n        :return: self\n        \"\"\"", "\n", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset", ".", "has_field", "(", "field_name", "=", "field_name", ")", ":", "\n", "                ", "dataset", ".", "delete_field", "(", "field_name", "=", "field_name", ")", "\n", "", "elif", "not", "ignore_miss_dataset", ":", "\n", "                ", "raise", "KeyError", "(", "f\"{field_name} not found DataSet:{name}.\"", ")", "\n", "", "", "if", "delete_vocab", ":", "\n", "            ", "if", "field_name", "in", "self", ".", "vocabs", ":", "\n", "                ", "self", ".", "vocabs", ".", "pop", "(", "field_name", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets": [[263, 276], ["data_bundle.DataBundle.datasets.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "def", "iter_datasets", "(", "self", ")", "->", "Union", "[", "str", ",", "DataSet", "]", ":", "\n", "        ", "r\"\"\"\n        \u8fed\u4ee3data_bundle\u4e2d\u7684DataSet\n\n        Example::\n\n            for name, dataset in data_bundle.iter_datasets():\n                pass\n\n        :return:\n        \"\"\"", "\n", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "yield", "name", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.get_dataset_names": [[277, 284], ["list", "data_bundle.DataBundle.datasets.keys"], "methods", ["None"], ["", "", "def", "get_dataset_names", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "r\"\"\"\n        \u8fd4\u56deDataBundle\u4e2dDataSet\u7684\u540d\u79f0\n\n        :return:\n        \"\"\"", "\n", "return", "list", "(", "self", ".", "datasets", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.get_vocab_names": [[285, 292], ["list", "data_bundle.DataBundle.vocabs.keys"], "methods", ["None"], ["", "def", "get_vocab_names", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "r\"\"\"\n        \u8fd4\u56deDataBundle\u4e2dVocabulary\u7684\u540d\u79f0\n\n        :return:\n        \"\"\"", "\n", "return", "list", "(", "self", ".", "vocabs", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_vocabs": [[293, 306], ["data_bundle.DataBundle.vocabs.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "def", "iter_vocabs", "(", "self", ")", "->", "Union", "[", "str", ",", "Vocabulary", "]", ":", "\n", "        ", "r\"\"\"\n        \u8fed\u4ee3data_bundle\u4e2d\u7684DataSet\n\n        Example:\n\n            for field_name, vocab in data_bundle.iter_vocabs():\n                pass\n\n        :return:\n        \"\"\"", "\n", "for", "field_name", ",", "vocab", "in", "self", ".", "vocabs", ".", "items", "(", ")", ":", "\n", "            ", "yield", "field_name", ",", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.apply_field": [[307, 331], ["data_bundle.DataBundle.datasets.items", "dataset.has_field", "dataset.apply_field", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "", "def", "apply_field", "(", "self", ",", "func", ",", "field_name", ":", "str", ",", "new_field_name", ":", "str", ",", "ignore_miss_dataset", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \u5bf9 :class:`~fastNLP.io.DataBundle` \u4e2d\u6240\u6709\u7684dataset\u4f7f\u7528 :meth:`~fastNLP.DataSet.apply_field` \u65b9\u6cd5\n\n        :param callable func: input\u662finstance\u4e2d\u540d\u4e3a `field_name` \u7684field\u7684\u5185\u5bb9\u3002\n        :param str field_name: \u4f20\u5165func\u7684\u662f\u54ea\u4e2afield\u3002\n        :param str new_field_name: \u5c06func\u8fd4\u56de\u7684\u5185\u5bb9\u653e\u5165\u5230 `new_field_name` \u8fd9\u4e2afield\u4e2d\uff0c\u5982\u679c\u540d\u79f0\u4e0e\u5df2\u6709\u7684field\u76f8\u540c\uff0c\u5219\u8986\n            \u76d6\u4e4b\u524d\u7684field\u3002\u5982\u679c\u4e3aNone\u5219\u4e0d\u521b\u5efa\u65b0\u7684field\u3002\n        :param bool ignore_miss_dataset: \u5f53\u67d0\u4e2afield\u540d\u79f0\u5728\u67d0\u4e2adataset\u4e0d\u5b58\u5728\u65f6\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u76f4\u63a5\u5ffd\u7565\u8be5DataSet;\n            \u5982\u679c\u4e3aFalse\uff0c\u5219\u62a5\u9519\n        :param optional kwargs: \u652f\u6301\u8f93\u5165is_input,is_target,ignore_type\n\n            1. is_input: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u540d\u4e3a `new_field_name` \u7684field\u8bbe\u7f6e\u4e3ainput\n\n            2. is_target: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u540d\u4e3a `new_field_name` \u7684field\u8bbe\u7f6e\u4e3atarget\n\n            3. ignore_type: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u540d\u4e3a `new_field_name` \u7684field\u7684ignore_type\u8bbe\u7f6e\u4e3atrue, \u5ffd\u7565\u5176\u7c7b\u578b\n        \"\"\"", "\n", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset", ".", "has_field", "(", "field_name", "=", "field_name", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "func", "=", "func", ",", "field_name", "=", "field_name", ",", "new_field_name", "=", "new_field_name", ",", "**", "kwargs", ")", "\n", "", "elif", "not", "ignore_miss_dataset", ":", "\n", "                ", "raise", "KeyError", "(", "f\"{field_name} not found DataSet:{name}.\"", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.apply_field_more": [[332, 362], ["data_bundle.DataBundle.datasets.items", "dataset.has_field", "dataset.apply_field_more", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field_more"], ["", "def", "apply_field_more", "(", "self", ",", "func", ",", "field_name", ",", "modify_fields", "=", "True", ",", "ignore_miss_dataset", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \u5bf9 :class:`~fastNLP.io.DataBundle` \u4e2d\u6240\u6709\u7684 dataset \u4f7f\u7528 :meth:`~fastNLP.DataSet.apply_field_more` \u65b9\u6cd5\n\n        .. note::\n            ``apply_field_more`` \u4e0e ``apply_field`` \u7684\u533a\u522b\u53c2\u8003 :meth:`fastNLP.DataSet.apply_more` \u4e2d\u5173\u4e8e ``apply_more`` \u4e0e\n            ``apply`` \u533a\u522b\u7684\u4ecb\u7ecd\u3002\n\n        :param callable func: \u53c2\u6570\u662f ``DataSet`` \u4e2d\u7684 ``Instance`` \uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5b57\u5178\uff0ckey \u662ffield \u7684\u540d\u5b57\uff0cvalue \u662f\u5bf9\u5e94\u7684\u7ed3\u679c\n        :param str field_name: \u4f20\u5165func\u7684\u662f\u54ea\u4e2afield\u3002\n        :param bool modify_fields: \u662f\u5426\u7528\u7ed3\u679c\u4fee\u6539 `DataSet` \u4e2d\u7684 `Field`\uff0c \u9ed8\u8ba4\u4e3a True\n        :param bool ignore_miss_dataset: \u5f53\u67d0\u4e2afield\u540d\u79f0\u5728\u67d0\u4e2adataset\u4e0d\u5b58\u5728\u65f6\uff0c\u5982\u679c\u4e3aTrue\uff0c\u5219\u76f4\u63a5\u5ffd\u7565\u8be5DataSet;\n            \u5982\u679c\u4e3aFalse\uff0c\u5219\u62a5\u9519\n        :param optional kwargs: \u652f\u6301\u8f93\u5165is_input, is_target, ignore_type\n\n            1. is_input: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u88ab\u4fee\u6539\u7684field\u8bbe\u7f6e\u4e3ainput\n\n            2. is_target: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u88ab\u4fee\u6539\u7684field\u8bbe\u7f6e\u4e3atarget\n\n            3. ignore_type: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u88ab\u4fee\u6539\u7684field\u7684ignore_type\u8bbe\u7f6e\u4e3atrue, \u5ffd\u7565\u5176\u7c7b\u578b\n\n        :return Dict[str:Dict[str:Field]]: \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u5957\u5b57\u5178\uff0c\u7b2c\u4e00\u5c42\u7684 key \u662f dataset \u7684\u540d\u5b57\uff0c\u7b2c\u4e8c\u5c42\u7684 key \u662f field \u7684\u540d\u5b57\n        \"\"\"", "\n", "res", "=", "{", "}", "\n", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset", ".", "has_field", "(", "field_name", "=", "field_name", ")", ":", "\n", "                ", "res", "[", "name", "]", "=", "dataset", ".", "apply_field_more", "(", "func", "=", "func", ",", "field_name", "=", "field_name", ",", "modify_fields", "=", "modify_fields", ",", "**", "kwargs", ")", "\n", "", "elif", "not", "ignore_miss_dataset", ":", "\n", "                ", "raise", "KeyError", "(", "f\"{field_name} not found DataSet:{name} .\"", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.apply": [[363, 383], ["data_bundle.DataBundle.datasets.items", "dataset.apply"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply"], ["", "def", "apply", "(", "self", ",", "func", ",", "new_field_name", ":", "str", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \u5bf9 :class:`~fastNLP.io.DataBundle` \u4e2d\u6240\u6709\u7684 dataset \u4f7f\u7528 :meth:`~fastNLP.DataSet.apply` \u65b9\u6cd5\n\n        \u5bf9DataBundle\u4e2d\u6240\u6709\u7684dataset\u4f7f\u7528apply\u65b9\u6cd5\n\n        :param callable func: input\u662finstance\u4e2d\u540d\u4e3a `field_name` \u7684field\u7684\u5185\u5bb9\u3002\n        :param str new_field_name: \u5c06func\u8fd4\u56de\u7684\u5185\u5bb9\u653e\u5165\u5230 `new_field_name` \u8fd9\u4e2afield\u4e2d\uff0c\u5982\u679c\u540d\u79f0\u4e0e\u5df2\u6709\u7684field\u76f8\u540c\uff0c\u5219\u8986\n            \u76d6\u4e4b\u524d\u7684field\u3002\u5982\u679c\u4e3aNone\u5219\u4e0d\u521b\u5efa\u65b0\u7684field\u3002\n        :param optional kwargs: \u652f\u6301\u8f93\u5165is_input,is_target,ignore_type\n\n            1. is_input: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u540d\u4e3a `new_field_name` \u7684field\u8bbe\u7f6e\u4e3ainput\n\n            2. is_target: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u540d\u4e3a `new_field_name` \u7684field\u8bbe\u7f6e\u4e3atarget\n\n            3. ignore_type: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u540d\u4e3a `new_field_name` \u7684field\u7684ignore_type\u8bbe\u7f6e\u4e3atrue, \u5ffd\u7565\u5176\u7c7b\u578b\n        \"\"\"", "\n", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply", "(", "func", ",", "new_field_name", "=", "new_field_name", ",", "**", "kwargs", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.apply_more": [[384, 408], ["data_bundle.DataBundle.datasets.items", "dataset.apply_more"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_more"], ["", "def", "apply_more", "(", "self", ",", "func", ",", "modify_fields", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \u5bf9 :class:`~fastNLP.io.DataBundle` \u4e2d\u6240\u6709\u7684 dataset \u4f7f\u7528 :meth:`~fastNLP.DataSet.apply_more` \u65b9\u6cd5\n\n        .. note::\n            ``apply_more`` \u4e0e ``apply`` \u7684\u533a\u522b\u53c2\u8003 :meth:`fastNLP.DataSet.apply_more` \u4e2d\u5173\u4e8e ``apply_more`` \u4e0e\n            ``apply`` \u533a\u522b\u7684\u4ecb\u7ecd\u3002\n\n        :param callable func: \u53c2\u6570\u662f ``DataSet`` \u4e2d\u7684 ``Instance`` \uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5b57\u5178\uff0ckey \u662ffield \u7684\u540d\u5b57\uff0cvalue \u662f\u5bf9\u5e94\u7684\u7ed3\u679c\n        :param bool modify_fields: \u662f\u5426\u7528\u7ed3\u679c\u4fee\u6539 ``DataSet`` \u4e2d\u7684 ``Field`` \uff0c \u9ed8\u8ba4\u4e3a True\n        :param optional kwargs: \u652f\u6301\u8f93\u5165is_input,is_target,ignore_type\n\n            1. is_input: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u88ab\u4fee\u6539\u7684\u7684field\u8bbe\u7f6e\u4e3ainput\n\n            2. is_target: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u88ab\u4fee\u6539\u7684\u7684field\u8bbe\u7f6e\u4e3atarget\n\n            3. ignore_type: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u88ab\u4fee\u6539\u7684\u7684field\u7684ignore_type\u8bbe\u7f6e\u4e3atrue, \u5ffd\u7565\u5176\u7c7b\u578b\n\n        :return Dict[str:Dict[str:Field]]: \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u5957\u5b57\u5178\uff0c\u7b2c\u4e00\u5c42\u7684 key \u662f dataset \u7684\u540d\u5b57\uff0c\u7b2c\u4e8c\u5c42\u7684 key \u662f field \u7684\u540d\u5b57\n        \"\"\"", "\n", "res", "=", "{", "}", "\n", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "res", "[", "name", "]", "=", "dataset", ".", "apply_more", "(", "func", ",", "modify_fields", "=", "modify_fields", ",", "**", "kwargs", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.add_collate_fn": [[409, 419], ["data_bundle.DataBundle.datasets.items", "dataset.add_collate_fn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_collate_fn"], ["", "def", "add_collate_fn", "(", "self", ",", "fn", ",", "name", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u5411\u6240\u6709DataSet\u589e\u52a0collate_fn, collate_fn\u8be6\u89c1 :class:`~fastNLP.DataSet` \u4e2d\u76f8\u5173\u8bf4\u660e.\n\n        :param callable fn:\n        :param name:\n        :return:\n        \"\"\"", "\n", "for", "_", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_collate_fn", "(", "fn", "=", "fn", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.delete_collate_fn": [[420, 429], ["data_bundle.DataBundle.datasets.items", "dataset.delete_collate_fn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.delete_collate_fn"], ["", "", "def", "delete_collate_fn", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u5220\u9664DataSet\u4e2d\u7684collate_fn\n\n        :param name:\n        :return:\n        \"\"\"", "\n", "for", "_", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "delete_collate_fn", "(", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.__repr__": [[430, 441], ["len", "len", "data_bundle.DataBundle.datasets.items", "data_bundle.DataBundle.vocabs.items", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "_str", "=", "''", "\n", "if", "len", "(", "self", ".", "datasets", ")", ":", "\n", "            ", "_str", "+=", "'In total {} datasets:\\n'", ".", "format", "(", "self", ".", "num_dataset", ")", "\n", "for", "name", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "_str", "+=", "'\\t{} has {} instances.\\n'", ".", "format", "(", "name", ",", "len", "(", "dataset", ")", ")", "\n", "", "", "if", "len", "(", "self", ".", "vocabs", ")", ":", "\n", "            ", "_str", "+=", "'In total {} vocabs:\\n'", ".", "format", "(", "self", ".", "num_vocab", ")", "\n", "for", "name", ",", "vocab", "in", "self", ".", "vocabs", ".", "items", "(", ")", ":", "\n", "                ", "_str", "+=", "'\\t{} has {} entries.\\n'", ".", "format", "(", "name", ",", "len", "(", "vocab", ")", ")", "\n", "", "", "return", "_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.cached_path": [[156, 198], ["urllib.parse.urlparse", "pathlib.Path", "os.path.join", "file_utils.get_from_cache", "file_utils.get_cache_path", "pathlib.Path", "pathlib.Path().exists", "pathlib.Path", "os.path.join", "FileNotFoundError", "ValueError", "pathlib.Path", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.get_from_cache", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.get_cache_path"], ["def", "cached_path", "(", "url_or_filename", ":", "str", ",", "cache_dir", ":", "str", "=", "None", ",", "name", "=", "None", ")", "->", "Path", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2aurl\uff0c\u5c1d\u8bd5\u901a\u8fc7url\u4e2d\u7684\u89e3\u6790\u51fa\u6765\u7684\u6587\u4ef6\u540d\u5b57filename\u5230{cache_dir}/{name}/{filename}\u4e0b\u5bfb\u627e\u8fd9\u4e2a\u6587\u4ef6\uff0c\n    \n    1. \u5982\u679ccache_dir=None, \u5219cache_dir=~/.fastNLP/; \u5426\u5219cache_dir=cache_dir\n    2. \u5982\u679cname=None, \u5219\u6ca1\u6709\u4e2d\u95f4\u7684{name}\u8fd9\u4e00\u5c42\u7ed3\u6784\uff1b\u5426\u8005\u4e2d\u95f4\u7ed3\u6784\u5c31\u4e3a{name}\n\n    \u5982\u679c\u6709\u8be5\u6587\u4ef6\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u8def\u5f84\n    \n    \u5982\u679c\u6ca1\u6709\u8be5\u6587\u4ef6\uff0c\u5219\u5c1d\u8bd5\u7528\u4f20\u5165\u7684url\u4e0b\u8f7d\n\n    \u6216\u8005\u6587\u4ef6\u540d(\u53ef\u4ee5\u662f\u5177\u4f53\u7684\u6587\u4ef6\u540d\uff0c\u4e5f\u53ef\u4ee5\u662f\u6587\u4ef6\u5939)\uff0c\u5148\u5728cache_dir\u4e0b\u5bfb\u627e\u8be5\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u53bb\u4e0b\u8f7d, \u5e76\n    \u5c06\u6587\u4ef6\u653e\u5165\u5230cache_dir\u4e2d.\n\n    :param str url_or_filename: \u6587\u4ef6\u7684\u4e0b\u8f7durl\u6216\u8005\u6587\u4ef6\u540d\u79f0\u3002\n    :param str cache_dir: \u6587\u4ef6\u7684\u7f13\u5b58\u6587\u4ef6\u5939\u3002\u5982\u679c\u4e3aNone\uff0c\u5c06\u4f7f\u7528\"~/.fastNLP\"\u8fd9\u4e2a\u9ed8\u8ba4\u8def\u5f84\n    :param str name: \u4e2d\u95f4\u4e00\u5c42\u7684\u540d\u79f0\u3002\u5982embedding, dataset\n    :return:\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "data_cache", "=", "Path", "(", "get_cache_path", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "data_cache", "=", "cache_dir", "\n", "\n", "", "if", "name", ":", "\n", "        ", "data_cache", "=", "os", ".", "path", ".", "join", "(", "data_cache", ",", "name", ")", "\n", "\n", "", "parsed", "=", "urlparse", "(", "url_or_filename", ")", "\n", "\n", "if", "parsed", ".", "scheme", "in", "(", "\"http\"", ",", "\"https\"", ")", ":", "\n", "# URL, so get it from the cache (downloading if necessary)", "\n", "        ", "return", "get_from_cache", "(", "url_or_filename", ",", "Path", "(", "data_cache", ")", ")", "\n", "", "elif", "parsed", ".", "scheme", "==", "\"\"", "and", "Path", "(", "os", ".", "path", ".", "join", "(", "data_cache", ",", "url_or_filename", ")", ")", ".", "exists", "(", ")", ":", "\n", "# File, and it exists.", "\n", "        ", "return", "Path", "(", "os", ".", "path", ".", "join", "(", "data_cache", ",", "url_or_filename", ")", ")", "\n", "", "elif", "parsed", ".", "scheme", "==", "\"\"", ":", "\n", "# File, but it doesn't exist.", "\n", "        ", "raise", "FileNotFoundError", "(", "\"file {} not found in {}.\"", ".", "format", "(", "url_or_filename", ",", "data_cache", ")", ")", "\n", "", "else", ":", "\n", "# Something unknown", "\n", "        ", "raise", "ValueError", "(", "\n", "\"unable to parse {} as a URL or as a local path\"", ".", "format", "(", "url_or_filename", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.get_filepath": [[201, 226], ["os.path.isdir", "os.listdir", "os.path.isfile", "len", "os.path.join", "FileNotFoundError"], "function", ["None"], ["", "", "def", "get_filepath", "(", "filepath", ")", ":", "\n", "    ", "r\"\"\"\n    \u5982\u679cfilepath\u4e3a\u6587\u4ef6\u5939\uff0c\n    \n        \u5982\u679c\u5185\u542b\u591a\u4e2a\u6587\u4ef6, \u8fd4\u56defilepath\n        \n        \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6, \u8fd4\u56defilepath + filename\n\n    \u5982\u679cfilepath\u4e3a\u6587\u4ef6\n        \n        \u8fd4\u56defilepath\n\n    :param str filepath: \u8def\u5f84\n    :return:\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "filepath", ")", ":", "\n", "        ", "files", "=", "os", ".", "listdir", "(", "filepath", ")", "\n", "if", "len", "(", "files", ")", "==", "1", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "filepath", ",", "files", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "filepath", "\n", "", "", "elif", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "        ", "return", "filepath", "\n", "", "else", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "f\"{filepath} is not a valid file or directory.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.get_cache_path": [[228, 242], ["os.path.expanduser", "os.environ.get", "os.path.isdir", "os.path.join", "NotADirectoryError"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["", "", "def", "get_cache_path", "(", ")", ":", "\n", "    ", "r\"\"\"\n    \u83b7\u53d6fastNLP\u9ed8\u8ba4cache\u7684\u5b58\u653e\u8def\u5f84, \u5982\u679c\u5c06FASTNLP_CACHE_PATH\u8bbe\u7f6e\u5728\u4e86\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u5c06\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u7684\u503c\uff0c\u4f7f\u5f97\u4e0d\u7528\u6bcf\u4e2a\u7528\u6237\u90fd\u53bb\u4e0b\u8f7d\u3002\n\n    :return str:  \u5b58\u653e\u8def\u5f84\n    \"\"\"", "\n", "if", "'FASTNLP_CACHE_DIR'", "in", "os", ".", "environ", ":", "\n", "        ", "fastnlp_cache_dir", "=", "os", ".", "environ", ".", "get", "(", "'FASTNLP_CACHE_DIR'", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "fastnlp_cache_dir", ")", ":", "\n", "            ", "return", "fastnlp_cache_dir", "\n", "", "else", ":", "\n", "            ", "raise", "NotADirectoryError", "(", "f\"{os.environ['FASTNLP_CACHE_DIR']} is not a directory.\"", ")", "\n", "", "", "fastnlp_cache_dir", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "path", ".", "join", "(", "\"~\"", ",", "\".fastNLP\"", ")", ")", "\n", "return", "fastnlp_cache_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_base_url": [[244, 268], ["name.upper", "url.endswith", "name.lower", "KeyError", "name.lower"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.upper", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["", "def", "_get_base_url", "(", "name", ")", ":", "\n", "    ", "r\"\"\"\n    \u6839\u636ename\u8fd4\u56de\u4e0b\u8f7d\u7684url\u5730\u5740\u3002\n\n    :param str name: \u652f\u6301dataset\u548cembedding\u4e24\u79cd\n    :return:\n    \"\"\"", "\n", "# \u8fd4\u56de\u7684URL\u7ed3\u5c3e\u5fc5\u987b\u662f/", "\n", "environ_name", "=", "\"FASTNLP_{}_URL\"", ".", "format", "(", "name", ".", "upper", "(", ")", ")", "\n", "\n", "if", "environ_name", "in", "os", ".", "environ", ":", "\n", "        ", "url", "=", "os", ".", "environ", "[", "environ_name", "]", "\n", "if", "url", ".", "endswith", "(", "'/'", ")", ":", "\n", "            ", "return", "url", "\n", "", "else", ":", "\n", "            ", "return", "url", "+", "'/'", "\n", "", "", "else", ":", "\n", "        ", "URLS", "=", "{", "\n", "'embedding'", ":", "\"http://212.129.155.247/embedding/\"", ",", "\n", "\"dataset\"", ":", "\"http://212.129.155.247/dataset/\"", "\n", "}", "\n", "if", "name", ".", "lower", "(", ")", "not", "in", "URLS", ":", "\n", "            ", "raise", "KeyError", "(", "f\"{name} is not recognized.\"", ")", "\n", "", "return", "URLS", "[", "name", ".", "lower", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_embedding_url": [[270, 293], ["FASTNLP_EXTEND_EMBEDDING_URL.get", "PRETRAIN_MAP.get", "file_utils._read_extend_url_file", "PRETRAIN_MAP.get.get", "KeyError", "KeyError", "file_utils._get_base_url", "list", "PRETRAIN_MAP.get.keys"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._read_extend_url_file", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_base_url"], ["", "", "def", "_get_embedding_url", "(", "embed_type", ",", "name", ")", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9aembedding\u7c7b\u4f3c\u548c\u540d\u79f0\uff0c\u8fd4\u56de\u4e0b\u8f7durl\n\n    :param str embed_type: \u652f\u6301static, bert, elmo\u3002\u5373embedding\u7684\u7c7b\u578b\n    :param str name: embedding\u7684\u540d\u79f0, \u4f8b\u5982en, cn, based\u7b49\n    :return: str, \u4e0b\u8f7d\u7684url\u5730\u5740\n    \"\"\"", "\n", "#  \u4ece\u6269\u5c55\u4e2d\u5bfb\u627e\u4e0b\u8f7d\u7684url", "\n", "_filename", "=", "FASTNLP_EXTEND_EMBEDDING_URL", ".", "get", "(", "embed_type", ",", "None", ")", "\n", "if", "_filename", ":", "\n", "        ", "url", "=", "_read_extend_url_file", "(", "_filename", ",", "name", ")", "\n", "if", "url", ":", "\n", "            ", "return", "url", "\n", "", "", "embed_map", "=", "PRETRAIN_MAP", ".", "get", "(", "embed_type", ",", "None", ")", "\n", "if", "embed_map", ":", "\n", "        ", "filename", "=", "embed_map", ".", "get", "(", "name", ",", "None", ")", "\n", "if", "filename", ":", "\n", "            ", "url", "=", "_get_base_url", "(", "'embedding'", ")", "+", "filename", "\n", "return", "url", "\n", "", "raise", "KeyError", "(", "\"There is no {}. Only supports {}.\"", ".", "format", "(", "name", ",", "list", "(", "embed_map", ".", "keys", "(", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "f\"There is no {embed_type}. Only supports bert, elmo, static, gpt2, roberta\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._read_extend_url_file": [[294, 314], ["file_utils.get_cache_path", "os.path.join", "os.path.exists", "open", "line.strip.strip", "line.strip.split", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.get_cache_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["", "", "def", "_read_extend_url_file", "(", "filename", ",", "name", ")", "->", "str", ":", "\n", "    ", "r\"\"\"\n    filename\u4e2d\u7684\u5185\u5bb9\u4f7f\u7528\u5236\u8868\u7b26\u9694\u5f00\uff0c\u7b2c\u4e00\u5217\u662f\u540d\u79f0\uff0c\u7b2c\u4e8c\u5217\u662f\u4e0b\u8f7d\u7684url\u5730\u5740\n\n    :param str filename: \u5728\u9ed8\u8ba4\u7684\u8def\u5f84\u4e0b\u5bfb\u627efile\u8fd9\u4e2a\u6587\u4ef6\n    :param str name: \u9700\u8981\u5bfb\u627e\u7684\u8d44\u6e90\u7684\u540d\u79f0\n    :return: str,None\n    \"\"\"", "\n", "cache_dir", "=", "get_cache_path", "(", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "with", "open", "(", "filepath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "                    ", "parts", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "parts", ")", "==", "2", ":", "\n", "                        ", "if", "name", "==", "parts", "[", "0", "]", ":", "\n", "                            ", "return", "parts", "[", "1", "]", "\n", "", "", "", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_dataset_url": [[315, 333], ["file_utils._read_extend_url_file", "DATASET_DIR.get", "KeyError", "file_utils._get_base_url"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._read_extend_url_file", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_base_url"], ["", "def", "_get_dataset_url", "(", "name", ")", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9adataset\u7684\u540d\u79f0\uff0c\u8fd4\u56de\u4e0b\u8f7durl\n\n    :param str name: \u7ed9\u5b9adataset\u7684\u540d\u79f0\uff0c\u6bd4\u5982imdb, sst-2\u7b49\n    :return: str\n    \"\"\"", "\n", "#  \u4ece\u6269\u5c55\u4e2d\u5bfb\u627e\u4e0b\u8f7d\u7684url", "\n", "url", "=", "_read_extend_url_file", "(", "FASTNLP_EXTEND_DATASET_URL", ",", "name", ")", "\n", "if", "url", ":", "\n", "        ", "return", "url", "\n", "\n", "", "filename", "=", "DATASET_DIR", ".", "get", "(", "name", ",", "None", ")", "\n", "if", "filename", ":", "\n", "        ", "url", "=", "_get_base_url", "(", "'dataset'", ")", "+", "filename", "\n", "return", "url", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "f\"There is no {name}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.split_filename_suffix": [[335, 346], ["os.path.basename", "os.path.basename.endswith", "os.path.splitext"], "function", ["None"], ["", "", "def", "split_filename_suffix", "(", "filepath", ")", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9afilepath \u8fd4\u56de\u5bf9\u5e94\u7684name\u548csuffix. \u5982\u679c\u540e\u7f00\u662f\u591a\u4e2a\u70b9\uff0c\u4ec5\u652f\u6301.tar.gz\u7c7b\u578b\n    \n    :param filepath: \u6587\u4ef6\u8def\u5f84\n    :return: filename, suffix\n    \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "filepath", ")", "\n", "if", "filename", ".", "endswith", "(", "'.tar.gz'", ")", ":", "\n", "        ", "return", "filename", "[", ":", "-", "7", "]", ",", "'.tar.gz'", "\n", "", "return", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.get_from_cache": [[348, 460], ["cache_dir.mkdir", "re.sub", "file_utils.split_filename_suffix", "file_utils.match_file", "cache_path.exists", "file_utils.get_filepath", "cache_path.exists", "requests.get", "tempfile.mkstemp", "file_utils.get_filepath", "requests.HTTPError", "requests.get.headers.get", "tqdm.tqdm", "core.logger.info", "tqdm.tqdm.close", "core.logger.info", "core.logger.info", "os.path.isdir", "os.close", "os.remove", "int", "open", "requests.get.iter_content", "tempfile.mkdtemp", "core.logger.debug", "os.listdir", "cache_path.mkdir", "core.logger.debug", "os.listdir", "shutil.copyfile", "core.logger.error", "cache_path.exists", "os.path.isdir", "file_utils.unzip_file", "len", "os.path.isdir", "str", "os.path.isdir", "cache_path.is_file", "shutil.rmtree", "os.path.isfile", "tqdm.tqdm.update", "temp_file.write", "pathlib.Path", "pathlib.Path", "file_utils.ungzip_file", "file_utils.untar_gz_file", "os.path.join", "os.path.join", "os.path.join", "shutil.copytree", "shutil.copyfile", "os.remove", "shutil.rmtree", "os.remove", "len", "pathlib.Path", "pathlib.Path", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.split_filename_suffix", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.match_file", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.get_filepath", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.get_filepath", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.close", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.close", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.unzip_file", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.ungzip_file", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.untar_gz_file"], ["", "def", "get_from_cache", "(", "url", ":", "str", ",", "cache_dir", ":", "Path", "=", "None", ")", "->", "Path", ":", "\n", "    ", "r\"\"\"\n    \u5c1d\u8bd5\u5728cache_dir\u4e2d\u5bfb\u627eurl\u5b9a\u4e49\u7684\u8d44\u6e90; \u5982\u679c\u6ca1\u6709\u627e\u5230; \u5219\u4eceurl\u4e0b\u8f7d\u5e76\u5c06\u7ed3\u679c\u653e\u5728cache_dir\u4e0b\uff0c\u7f13\u5b58\u7684\u540d\u79f0\u7531url\u7684\u7ed3\u679c\u63a8\u65ad\u800c\u6765\u3002\u4f1a\u5c06\u4e0b\u8f7d\u7684\n    \u6587\u4ef6\u89e3\u538b\uff0c\u5c06\u89e3\u538b\u540e\u7684\u6587\u4ef6\u5168\u90e8\u653e\u5728cache_dir\u6587\u4ef6\u5939\u4e2d\u3002\n\n    \u5982\u679c\u4eceurl\u4e2d\u4e0b\u8f7d\u7684\u8d44\u6e90\u89e3\u538b\u540e\u6709\u591a\u4e2a\u6587\u4ef6\uff0c\u5219\u8fd4\u56de\u76ee\u5f55\u7684\u8def\u5f84; \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8d44\u6e90\u6587\u4ef6\uff0c\u5219\u8fd4\u56de\u5177\u4f53\u7684\u8def\u5f84\u3002\n    \n    :param url: \u8d44\u6e90\u7684 url\n    :param cache_dir: cache \u76ee\u5f55\n    :return: \u8def\u5f84\n    \"\"\"", "\n", "cache_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "filename", "=", "re", ".", "sub", "(", "r\".+/\"", ",", "\"\"", ",", "url", ")", "\n", "dir_name", ",", "suffix", "=", "split_filename_suffix", "(", "filename", ")", "\n", "\n", "# \u5bfb\u627e\u4e0e\u5b83\u540d\u5b57\u5339\u914d\u7684\u5185\u5bb9, \u800c\u4e0d\u5173\u5fc3\u540e\u7f00", "\n", "match_dir_name", "=", "match_file", "(", "dir_name", ",", "cache_dir", ")", "\n", "if", "match_dir_name", ":", "\n", "        ", "dir_name", "=", "match_dir_name", "\n", "", "cache_path", "=", "cache_dir", "/", "dir_name", "\n", "\n", "# get cache path to put the file", "\n", "if", "cache_path", ".", "exists", "(", ")", ":", "\n", "        ", "return", "get_filepath", "(", "cache_path", ")", "\n", "\n", "# make HEAD request to check ETag TODO ETag\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u8d44\u6e90\u662f\u5426\u5df2\u7ecf\u66f4\u65b0\u4e86\uff0c\u4e4b\u540e\u9700\u8981\u52a0\u4e0a", "\n", "# response = requests.head(url, headers={\"User-Agent\": \"fastNLP\"})", "\n", "# if response.status_code != 200:", "\n", "#     raise IOError(", "\n", "#         f\"HEAD request failed for url {url} with status code {response.status_code}.\"", "\n", "#     )", "\n", "\n", "# add ETag to filename if it exists", "\n", "# etag = response.headers.get(\"ETag\")", "\n", "\n", "", "if", "not", "cache_path", ".", "exists", "(", ")", ":", "\n", "# Download to temporary file, then copy to cache dir once finished.", "\n", "# Otherwise you get corrupt cache entries if the download gets interrupted.", "\n", "# GET file object", "\n", "        ", "req", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ",", "headers", "=", "{", "\"User-Agent\"", ":", "\"fastNLP\"", "}", ")", "\n", "if", "req", ".", "status_code", "==", "200", ":", "\n", "            ", "success", "=", "False", "\n", "fd", ",", "temp_filename", "=", "tempfile", ".", "mkstemp", "(", ")", "\n", "uncompress_temp_dir", "=", "None", "\n", "try", ":", "\n", "                ", "content_length", "=", "req", ".", "headers", ".", "get", "(", "\"Content-Length\"", ")", "\n", "total", "=", "int", "(", "content_length", ")", "if", "content_length", "is", "not", "None", "else", "None", "\n", "progress", "=", "tqdm", "(", "unit", "=", "\"B\"", ",", "total", "=", "total", ",", "unit_scale", "=", "1", ")", "\n", "logger", ".", "info", "(", "\"%s not found in cache, downloading to %s\"", "%", "(", "url", ",", "temp_filename", ")", ")", "\n", "\n", "with", "open", "(", "temp_filename", ",", "\"wb\"", ")", "as", "temp_file", ":", "\n", "                    ", "for", "chunk", "in", "req", ".", "iter_content", "(", "chunk_size", "=", "1024", "*", "16", ")", ":", "\n", "                        ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                            ", "progress", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "temp_file", ".", "write", "(", "chunk", ")", "\n", "", "", "", "progress", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "f\"Finish download from {url}\"", ")", "\n", "\n", "# \u5f00\u59cb\u89e3\u538b", "\n", "if", "suffix", "in", "(", "'.zip'", ",", "'.tar.gz'", ",", "'.gz'", ")", ":", "\n", "                    ", "uncompress_temp_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "logger", ".", "debug", "(", "f\"Start to uncompress file to {uncompress_temp_dir}\"", ")", "\n", "if", "suffix", "==", "'.zip'", ":", "\n", "                        ", "unzip_file", "(", "Path", "(", "temp_filename", ")", ",", "Path", "(", "uncompress_temp_dir", ")", ")", "\n", "", "elif", "suffix", "==", "'.gz'", ":", "\n", "                        ", "ungzip_file", "(", "temp_filename", ",", "uncompress_temp_dir", ",", "dir_name", ")", "\n", "", "else", ":", "\n", "                        ", "untar_gz_file", "(", "Path", "(", "temp_filename", ")", ",", "Path", "(", "uncompress_temp_dir", ")", ")", "\n", "", "filenames", "=", "os", ".", "listdir", "(", "uncompress_temp_dir", ")", "\n", "if", "len", "(", "filenames", ")", "==", "1", ":", "\n", "                        ", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "uncompress_temp_dir", ",", "filenames", "[", "0", "]", ")", ")", ":", "\n", "                            ", "uncompress_temp_dir", "=", "os", ".", "path", ".", "join", "(", "uncompress_temp_dir", ",", "filenames", "[", "0", "]", ")", "\n", "\n", "", "", "cache_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "logger", ".", "debug", "(", "\"Finish un-compressing file.\"", ")", "\n", "", "else", ":", "\n", "                    ", "uncompress_temp_dir", "=", "temp_filename", "\n", "cache_path", "=", "str", "(", "cache_path", ")", "+", "suffix", "\n", "\n", "# \u590d\u5236\u5230\u6307\u5b9a\u7684\u4f4d\u7f6e", "\n", "", "logger", ".", "info", "(", "f\"Copy file to {cache_path}\"", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "uncompress_temp_dir", ")", ":", "\n", "                    ", "for", "filename", "in", "os", ".", "listdir", "(", "uncompress_temp_dir", ")", ":", "\n", "                        ", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "uncompress_temp_dir", ",", "filename", ")", ")", ":", "\n", "                            ", "shutil", ".", "copytree", "(", "os", ".", "path", ".", "join", "(", "uncompress_temp_dir", ",", "filename", ")", ",", "cache_path", "/", "filename", ")", "\n", "", "else", ":", "\n", "                            ", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "uncompress_temp_dir", ",", "filename", ")", ",", "cache_path", "/", "filename", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "shutil", ".", "copyfile", "(", "uncompress_temp_dir", ",", "cache_path", ")", "\n", "", "success", "=", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "e", ")", "\n", "raise", "e", "\n", "", "finally", ":", "\n", "                ", "if", "not", "success", ":", "\n", "                    ", "if", "cache_path", ".", "exists", "(", ")", ":", "\n", "                        ", "if", "cache_path", ".", "is_file", "(", ")", ":", "\n", "                            ", "os", ".", "remove", "(", "cache_path", ")", "\n", "", "else", ":", "\n", "                            ", "shutil", ".", "rmtree", "(", "cache_path", ")", "\n", "", "", "", "os", ".", "close", "(", "fd", ")", "\n", "os", ".", "remove", "(", "temp_filename", ")", "\n", "if", "uncompress_temp_dir", "is", "None", ":", "\n", "                    ", "pass", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "uncompress_temp_dir", ")", ":", "\n", "                    ", "shutil", ".", "rmtree", "(", "uncompress_temp_dir", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "uncompress_temp_dir", ")", ":", "\n", "                    ", "os", ".", "remove", "(", "uncompress_temp_dir", ")", "\n", "", "", "return", "get_filepath", "(", "cache_path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "HTTPError", "(", "f\"Status code:{req.status_code}. Fail to download from {url}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.unzip_file": [[462, 469], ["ZipFile", "zipObj.extractall"], "function", ["None"], ["", "", "", "def", "unzip_file", "(", "file", ":", "Path", ",", "to", ":", "Path", ")", ":", "\n", "# unpack and write out in CoNLL column-like format", "\n", "    ", "from", "zipfile", "import", "ZipFile", "\n", "\n", "with", "ZipFile", "(", "file", ",", "\"r\"", ")", "as", "zipObj", ":", "\n", "# Extract all the contents of zip file in current directory", "\n", "        ", "zipObj", ".", "extractall", "(", "to", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.untar_gz_file": [[471, 476], ["tarfile.open", "tar.extractall"], "function", ["None"], ["", "", "def", "untar_gz_file", "(", "file", ":", "Path", ",", "to", ":", "Path", ")", ":", "\n", "    ", "import", "tarfile", "\n", "\n", "with", "tarfile", ".", "open", "(", "file", ",", "'r:gz'", ")", "as", "tar", ":", "\n", "        ", "tar", ".", "extractall", "(", "to", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.ungzip_file": [[478, 485], ["gzip.GzipFile", "gzip.GzipFile.close", "open", "f.write", "os.path.join", "gzip.GzipFile.read"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.close", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write"], ["", "", "def", "ungzip_file", "(", "file", ":", "str", ",", "to", ":", "str", ",", "filename", ":", "str", ")", ":", "\n", "    ", "import", "gzip", "\n", "\n", "g_file", "=", "gzip", ".", "GzipFile", "(", "file", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "to", ",", "filename", ")", ",", "'wb+'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "g_file", ".", "read", "(", ")", ")", "\n", "", "g_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.match_file": [[487, 507], ["os.listdir", "len", "re.match", "re.match", "matched_filenames.append", "len", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "match_file", "(", "dir_name", ":", "str", ",", "cache_dir", ":", "Path", ")", "->", "str", ":", "\n", "    ", "r\"\"\"\n    \u5339\u914d\u7684\u539f\u5219\u662f: \u5728cache_dir\u4e0b\u7684\u6587\u4ef6\u4e0edir_name\u5b8c\u5168\u4e00\u81f4, \u6216\u9664\u4e86\u540e\u7f00\u4ee5\u5916\u548cdir_name\u5b8c\u5168\u4e00\u81f4\u3002\n    \u5982\u679c\u627e\u5230\u4e86\u4e24\u4e2a\u5339\u914d\u7684\u7ed3\u679c\u5c06\u62a5\u9519. \u5982\u679c\u627e\u5230\u4e86\u5219\u8fd4\u56de\u5339\u914d\u7684\u6587\u4ef6\u7684\u540d\u79f0; \u6ca1\u6709\u627e\u5230\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n\n    :param dir_name: \u9700\u8981\u5339\u914d\u7684\u540d\u79f0\n    :param cache_dir: \u5728\u8be5\u76ee\u5f55\u4e0b\u627e\u5339\u914ddir_name\u662f\u5426\u5b58\u5728\n    :return str: \u505a\u4e3a\u5339\u914d\u7ed3\u679c\u7684\u5b57\u7b26\u4e32\n    \"\"\"", "\n", "files", "=", "os", ".", "listdir", "(", "cache_dir", ")", "\n", "matched_filenames", "=", "[", "]", "\n", "for", "file_name", "in", "files", ":", "\n", "        ", "if", "re", ".", "match", "(", "dir_name", "+", "'$'", ",", "file_name", ")", "or", "re", ".", "match", "(", "dir_name", "+", "'\\\\..*'", ",", "file_name", ")", ":", "\n", "            ", "matched_filenames", ".", "append", "(", "file_name", ")", "\n", "", "", "if", "len", "(", "matched_filenames", ")", "==", "0", ":", "\n", "        ", "return", "''", "\n", "", "elif", "len", "(", "matched_filenames", ")", "==", "1", ":", "\n", "        ", "return", "matched_filenames", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Duplicate matched files:{matched_filenames}, this should be caused by a bug.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_bert_dir": [[509, 520], ["str", "model_dir_or_name.lower", "file_utils._get_embedding_url", "file_utils.cached_path", "os.path.isdir", "model_dir_or_name.lower", "os.path.abspath", "os.path.abspath", "core.logger.error", "ValueError", "os.path.expanduser", "os.path.expanduser"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_embedding_url", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.cached_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["", "", "def", "_get_bert_dir", "(", "model_dir_or_name", ":", "str", "=", "'en-base-uncased'", ")", ":", "\n", "    ", "if", "model_dir_or_name", ".", "lower", "(", ")", "in", "PRETRAINED_BERT_MODEL_DIR", ":", "\n", "        ", "model_url", "=", "_get_embedding_url", "(", "'bert'", ",", "model_dir_or_name", ".", "lower", "(", ")", ")", "\n", "model_dir", "=", "cached_path", "(", "model_url", ",", "name", "=", "'embedding'", ")", "\n", "# \u68c0\u67e5\u662f\u5426\u5b58\u5728", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "model_dir_or_name", ")", ")", ")", ":", "\n", "        ", "model_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "model_dir_or_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "error", "(", "f\"Cannot recognize BERT dir or name ``{model_dir_or_name}``.\"", ")", "\n", "raise", "ValueError", "(", "f\"Cannot recognize BERT dir or name ``{model_dir_or_name}``.\"", ")", "\n", "", "return", "str", "(", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_gpt2_dir": [[522, 533], ["str", "model_dir_or_name.lower", "file_utils._get_embedding_url", "file_utils.cached_path", "os.path.isdir", "model_dir_or_name.lower", "os.path.abspath", "os.path.abspath", "core.logger.error", "ValueError", "os.path.expanduser", "os.path.expanduser"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_embedding_url", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.cached_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["", "def", "_get_gpt2_dir", "(", "model_dir_or_name", ":", "str", "=", "'en'", ")", ":", "\n", "    ", "if", "model_dir_or_name", ".", "lower", "(", ")", "in", "PRETRAINED_GPT2_MODEL_DIR", ":", "\n", "        ", "model_url", "=", "_get_embedding_url", "(", "'gpt2'", ",", "model_dir_or_name", ".", "lower", "(", ")", ")", "\n", "model_dir", "=", "cached_path", "(", "model_url", ",", "name", "=", "'embedding'", ")", "\n", "# \u68c0\u67e5\u662f\u5426\u5b58\u5728", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "model_dir_or_name", ")", ")", ")", ":", "\n", "        ", "model_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "model_dir_or_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "error", "(", "f\"Cannot recognize GPT2 dir or name ``{model_dir_or_name}``.\"", ")", "\n", "raise", "ValueError", "(", "f\"Cannot recognize GPT2 dir or name ``{model_dir_or_name}``.\"", ")", "\n", "", "return", "str", "(", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_roberta_dir": [[535, 546], ["str", "model_dir_or_name.lower", "file_utils._get_embedding_url", "file_utils.cached_path", "os.path.isdir", "model_dir_or_name.lower", "os.path.abspath", "os.path.abspath", "core.logger.error", "ValueError", "os.path.expanduser", "os.path.expanduser"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_embedding_url", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.cached_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["", "def", "_get_roberta_dir", "(", "model_dir_or_name", ":", "str", "=", "'en'", ")", ":", "\n", "    ", "if", "model_dir_or_name", ".", "lower", "(", ")", "in", "PRETRAINED_ROBERTA_MODEL_DIR", ":", "\n", "        ", "model_url", "=", "_get_embedding_url", "(", "'roberta'", ",", "model_dir_or_name", ".", "lower", "(", ")", ")", "\n", "model_dir", "=", "cached_path", "(", "model_url", ",", "name", "=", "'embedding'", ")", "\n", "# \u68c0\u67e5\u662f\u5426\u5b58\u5728", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "model_dir_or_name", ")", ")", ")", ":", "\n", "        ", "model_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "model_dir_or_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "error", "(", "f\"Cannot recognize RoBERTa dir or name ``{model_dir_or_name}``.\"", ")", "\n", "raise", "ValueError", "(", "f\"Cannot recognize RoBERTa dir or name ``{model_dir_or_name}``.\"", ")", "\n", "", "return", "str", "(", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_file_name_base_on_postfix": [[548, 561], ["list", "os.path.join", "filter", "len", "FileNotFoundError", "os.listdir", "len", "FileExistsError", "filename.endswith", "os.path.join"], "function", ["None"], ["", "def", "_get_file_name_base_on_postfix", "(", "dir_path", ",", "postfix", ")", ":", "\n", "    ", "r\"\"\"\n    \u5728dir_path\u4e2d\u5bfb\u627e\u540e\u7f00\u4e3apostfix\u7684\u6587\u4ef6.\n    :param dir_path: str, \u6587\u4ef6\u5939\n    :param postfix: \u5f62\u5982\".bin\", \".json\"\u7b49\n    :return: str\uff0c\u6587\u4ef6\u7684\u8def\u5f84\n    \"\"\"", "\n", "files", "=", "list", "(", "filter", "(", "lambda", "filename", ":", "filename", ".", "endswith", "(", "postfix", ")", ",", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dir_path", ")", ")", ")", ")", "\n", "if", "len", "(", "files", ")", "==", "0", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "f\"There is no file endswith {postfix} file in {dir_path}\"", ")", "\n", "", "elif", "len", "(", "files", ")", ">", "1", ":", "\n", "        ", "raise", "FileExistsError", "(", "f\"There are multiple *{postfix} files in {dir_path}\"", ")", "\n", "", "return", "os", ".", "path", ".", "join", "(", "dir_path", ",", "files", "[", "0", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.model_io.ModelLoader.__init__": [[17, 19], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ModelLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.model_io.ModelLoader.load_pytorch": [[20, 29], ["empty_model.load_state_dict", "torch.load"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "@", "staticmethod", "\n", "def", "load_pytorch", "(", "empty_model", ",", "model_path", ")", ":", "\n", "        ", "r\"\"\"\n        \u4ece \".pkl\" \u6587\u4ef6\u8bfb\u53d6 PyTorch \u6a21\u578b\n\n        :param empty_model: \u521d\u59cb\u5316\u53c2\u6570\u7684 PyTorch \u6a21\u578b\n        :param str model_path: \u6a21\u578b\u4fdd\u5b58\u7684\u8def\u5f84\n        \"\"\"", "\n", "empty_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.model_io.ModelLoader.load_pytorch_model": [[30, 38], ["torch.load"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "@", "staticmethod", "\n", "def", "load_pytorch_model", "(", "model_path", ")", ":", "\n", "        ", "r\"\"\"\n        \u8bfb\u53d6\u6574\u4e2a\u6a21\u578b\n\n        :param str model_path: \u6a21\u578b\u4fdd\u5b58\u7684\u8def\u5f84\n        \"\"\"", "\n", "return", "torch", ".", "load", "(", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.model_io.ModelSaver.__init__": [[51, 57], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param save_path: \u6a21\u578b\u4fdd\u5b58\u7684\u8def\u5f84\n        \"\"\"", "\n", "self", ".", "save_path", "=", "save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.model_io.ModelSaver.save_pytorch": [[58, 70], ["torch.save", "torch.save", "model.state_dict"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save"], ["", "def", "save_pytorch", "(", "self", ",", "model", ",", "param_only", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u628a PyTorch \u6a21\u578b\u5b58\u5165 \".pkl\" \u6587\u4ef6\n\n        :param model: PyTorch \u6a21\u578b\n        :param bool param_only: \u662f\u5426\u53ea\u4fdd\u5b58\u6a21\u578b\u7684\u53c2\u6570\uff08\u5426\u5219\u4fdd\u5b58\u6574\u4e2a\u6a21\u578b\uff09\n\n        \"\"\"", "\n", "if", "param_only", "is", "True", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "self", ".", "save_path", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "model", ",", "self", ".", "save_path", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_reader._read_csv": [[13, 51], ["open", "csv.reader", "enumerate", "next", "zip", "isinstance", "TypeError", "len", "len", "type", "ValueError", "ValueError", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next"], ["def", "_read_csv", "(", "path", ",", "encoding", "=", "'utf-8'", ",", "headers", "=", "None", ",", "sep", "=", "','", ",", "dropna", "=", "True", ")", ":", "\n", "    ", "r\"\"\"\n    Construct a generator to read csv items.\n\n    :param path: file path\n    :param encoding: file's encoding, default: utf-8\n    :param headers: file's headers, if None, make file's first line as headers. default: None\n    :param sep: separator for each column. default: ','\n    :param dropna: weather to ignore and drop invalid data,\n            :if False, raise ValueError when reading invalid data. default: True\n    :return: generator, every time yield (line number, csv item)\n    \"\"\"", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "encoding", ")", "as", "csv_file", ":", "\n", "        ", "f", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "sep", ")", "\n", "start_idx", "=", "0", "\n", "if", "headers", "is", "None", ":", "\n", "            ", "headers", "=", "next", "(", "f", ")", "\n", "start_idx", "+=", "1", "\n", "", "elif", "not", "isinstance", "(", "headers", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"headers should be list or tuple, not {}.\"", ".", "format", "(", "type", "(", "headers", ")", ")", ")", "\n", "", "for", "line_idx", ",", "line", "in", "enumerate", "(", "f", ",", "start_idx", ")", ":", "\n", "            ", "contents", "=", "line", "\n", "if", "len", "(", "contents", ")", "!=", "len", "(", "headers", ")", ":", "\n", "                ", "if", "dropna", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "if", "\"\"", "in", "headers", ":", "\n", "                        ", "raise", "ValueError", "(", "(", "\"Line {} has {} parts, while header has {} parts.\\n\"", "+", "\n", "\"Please check the empty parts or unnecessary '{}'s  in header.\"", ")", "\n", ".", "format", "(", "line_idx", ",", "len", "(", "contents", ")", ",", "len", "(", "headers", ")", ",", "sep", ")", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "\"Line {} has {} parts, while header has {} parts.\"", ".", "format", "(", "line_idx", ",", "len", "(", "contents", ")", ",", "len", "(", "headers", ")", ")", ")", "\n", "", "", "", "_dict", "=", "{", "}", "\n", "for", "header", ",", "content", "in", "zip", "(", "headers", ",", "contents", ")", ":", "\n", "                ", "_dict", "[", "header", "]", "=", "content", "\n", "", "yield", "line_idx", ",", "_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_reader._read_json": [[53, 82], ["set", "open", "enumerate", "json.loads", "json.loads.items", "len", "len", "ValueError"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "", "", "def", "_read_json", "(", "path", ",", "encoding", "=", "'utf-8'", ",", "fields", "=", "None", ",", "dropna", "=", "True", ")", ":", "\n", "    ", "r\"\"\"\n    Construct a generator to read json items.\n\n    :param path: file path\n    :param encoding: file's encoding, default: utf-8\n    :param fields: json object's fields that needed, if None, all fields are needed. default: None\n    :param dropna: weather to ignore and drop invalid data,\n            :if False, raise ValueError when reading invalid data. default: True\n    :return: generator, every time yield (line number, json item)\n    \"\"\"", "\n", "if", "fields", ":", "\n", "        ", "fields", "=", "set", "(", "fields", ")", "\n", "", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "encoding", ")", "as", "f", ":", "\n", "        ", "for", "line_idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "data", "=", "json", ".", "loads", "(", "line", ")", "\n", "if", "fields", "is", "None", ":", "\n", "                ", "yield", "line_idx", ",", "data", "\n", "continue", "\n", "", "_res", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "in", "fields", ":", "\n", "                    ", "_res", "[", "k", "]", "=", "v", "\n", "", "", "if", "len", "(", "_res", ")", "<", "len", "(", "fields", ")", ":", "\n", "                ", "if", "dropna", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'invalid instance at line: {}'", ".", "format", "(", "line_idx", ")", ")", "\n", "", "", "yield", "line_idx", ",", "_res", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_reader._read_conll": [[84, 136], ["list", "open", "next().strip", "enumerate", "map", "line.strip.strip", "len", "zip", "len", "ValueError", "next", "list.append", "list.append", "len", "line.strip.startswith", "file_reader._read_conll.parse_conll"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "", "def", "_read_conll", "(", "path", ",", "encoding", "=", "'utf-8'", ",", "sep", "=", "None", ",", "indexes", "=", "None", ",", "dropna", "=", "True", ")", ":", "\n", "    ", "r\"\"\"\n    Construct a generator to read conll items.\n    :param path: file path\n    :param encoding: file's encoding, default: utf-8\n    :param sep: seperator\n    :param indexes: conll object's column indexes that needed, if None, all columns are needed. default: None\n    :param dropna: weather to ignore and drop invalid data,\n            :if False, raise ValueError when reading invalid data. default: True\n    :return: generator, every time yield (line number, conll item)\n    \"\"\"", "\n", "def", "parse_conll", "(", "sample", ")", ":", "\n", "        ", "sample", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "sample", ")", ")", ")", "\n", "sample", "=", "[", "sample", "[", "i", "]", "for", "i", "in", "indexes", "]", "\n", "for", "f", "in", "sample", ":", "\n", "            ", "if", "len", "(", "f", ")", "<=", "0", ":", "\n", "                ", "raise", "ValueError", "(", "'empty field'", ")", "\n", "", "", "return", "sample", "\n", "\n", "\n", "", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "encoding", ")", "as", "f", ":", "\n", "        ", "sample", "=", "[", "]", "\n", "start", "=", "next", "(", "f", ")", ".", "strip", "(", ")", "\n", "if", "start", "!=", "''", ":", "\n", "            ", "sample", ".", "append", "(", "start", ".", "split", "(", "sep", ")", ")", "if", "sep", "else", "sample", ".", "append", "(", "start", ".", "split", "(", ")", ")", "\n", "", "for", "line_idx", ",", "line", "in", "enumerate", "(", "f", ",", "1", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "==", "''", ":", "\n", "                ", "if", "len", "(", "sample", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "res", "=", "parse_conll", "(", "sample", ")", "\n", "sample", "=", "[", "]", "\n", "yield", "line_idx", ",", "res", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "if", "dropna", ":", "\n", "                            ", "logger", ".", "warning", "(", "'Invalid instance which ends at line: {} has been dropped.'", ".", "format", "(", "line_idx", ")", ")", "\n", "sample", "=", "[", "]", "\n", "continue", "\n", "", "raise", "ValueError", "(", "'Invalid instance which ends at line: {}'", ".", "format", "(", "line_idx", ")", ")", "\n", "", "", "", "elif", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "sample", ".", "append", "(", "line", ".", "split", "(", "sep", ")", ")", "if", "sep", "else", "sample", ".", "append", "(", "line", ".", "split", "(", ")", ")", "\n", "", "", "if", "len", "(", "sample", ")", ">", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "res", "=", "parse_conll", "(", "sample", ")", "\n", "yield", "line_idx", ",", "res", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "if", "dropna", ":", "\n", "                    ", "return", "\n", "", "logger", ".", "error", "(", "'invalid instance ends at line: {}'", ".", "format", "(", "line_idx", ")", ")", "\n", "raise", "e", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.embed_loader.EmbeddingOption.__init__": [[21, 31], ["core.utils.Option.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "embed_filepath", "=", "None", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", "normalize", "=", "True", ",", "\n", "error", "=", "'ignore'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "embed_filepath", "=", "embed_filepath", ",", "\n", "dtype", "=", "dtype", ",", "\n", "normalize", "=", "normalize", ",", "\n", "error", "=", "error", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.embed_loader.EmbedLoader.__init__": [[39, 41], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EmbedLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.embed_loader.EmbedLoader.load_with_vocab": [[42, 113], ["isinstance", "os.path.exists", "FileNotFoundError", "open", "numpy.zeros", "f.readline().strip", "f.readline().strip.split", "numpy.random.randn().astype", "enumerate", "sum", "logging.info", "len", "len", "int", "f.seek", "init_method", "numpy.linalg.norm", "f.readline", "len", "numpy.random.randn", "f.readline().strip.strip().split", "len", "len", "numpy.mean", "numpy.std", "len", "vocab.to_index", "numpy.fromstring", "len", "f.readline().strip.strip", "warnings.warn", "logging.error", "numpy.random.randn().astype", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index"], ["", "@", "staticmethod", "\n", "def", "load_with_vocab", "(", "embed_filepath", ",", "vocab", ",", "dtype", "=", "np", ".", "float32", ",", "padding", "=", "'<pad>'", ",", "unknown", "=", "'<unk>'", ",", "normalize", "=", "True", ",", "\n", "error", "=", "'ignore'", ",", "init_method", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u4eceembed_filepath\u8fd9\u4e2a\u9884\u8bad\u7ec3\u7684\u8bcd\u5411\u91cf\u4e2d\u62bd\u53d6\u51favocab\u8fd9\u4e2a\u8bcd\u8868\u7684\u8bcd\u7684embedding\u3002EmbedLoader\u5c06\u81ea\u52a8\u5224\u65adembed_filepath\u662f\n        word2vec(\u7b2c\u4e00\u884c\u53ea\u6709\u4e24\u4e2a\u5143\u7d20)\u8fd8\u662fglove\u683c\u5f0f\u7684\u6570\u636e\u3002\n\n        :param str embed_filepath: \u9884\u8bad\u7ec3\u7684embedding\u7684\u8def\u5f84\u3002\n        :param vocab: \u8bcd\u8868 :class:`~fastNLP.Vocabulary` \u7c7b\u578b\uff0c\u8bfb\u53d6\u51fa\u73b0\u5728vocab\u4e2d\u7684\u8bcd\u7684embedding\u3002\n            \u6ca1\u6709\u51fa\u73b0\u5728vocab\u4e2d\u7684\u8bcd\u7684embedding\u5c06\u901a\u8fc7\u627e\u5230\u7684\u8bcd\u7684embedding\u7684\u6b63\u6001\u5206\u5e03\u91c7\u6837\u51fa\u6765\uff0c\u4ee5\u4f7f\u5f97\u6574\u4e2aEmbedding\u662f\u540c\u5206\u5e03\u7684\u3002\n        :param dtype: \u8bfb\u51fa\u7684embedding\u7684\u7c7b\u578b\n        :param str padding: \u8bcd\u8868\u4e2dpadding\u7684token\n        :param str unknown: \u8bcd\u8868\u4e2dunknown\u7684token\n        :param bool normalize: \u662f\u5426\u5c06\u6bcf\u4e2avector\u5f52\u4e00\u5316\u5230norm\u4e3a1\n        :param str error: `ignore` , `strict` ; \u5982\u679c `ignore` \uff0c\u9519\u8bef\u5c06\u81ea\u52a8\u8df3\u8fc7; \u5982\u679c `strict` , \u9519\u8bef\u5c06\u629b\u51fa\u3002\n            \u8fd9\u91cc\u4e3b\u8981\u53ef\u80fd\u51fa\u9519\u7684\u5730\u65b9\u5728\u4e8e\u8bcd\u8868\u6709\u7a7a\u884c\u6216\u8005\u8bcd\u8868\u51fa\u73b0\u4e86\u7ef4\u5ea6\u4e0d\u4e00\u81f4\u3002\n        :param callable init_method: \u4f20\u5165numpy.ndarray, \u8fd4\u56denumpy.ndarray, \u7528\u4ee5\u521d\u59cb\u5316embedding\n        :return numpy.ndarray:  shape\u4e3a [len(vocab), dimension], dimension\u7531pretrain\u7684embedding\u51b3\u5b9a\u3002\n        \"\"\"", "\n", "assert", "isinstance", "(", "vocab", ",", "Vocabulary", ")", ",", "\"Only fastNLP.Vocabulary is supported.\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "embed_filepath", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\"`{}` does not exist.\"", ".", "format", "(", "embed_filepath", ")", ")", "\n", "", "with", "open", "(", "embed_filepath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "hit_flags", "=", "np", ".", "zeros", "(", "len", "(", "vocab", ")", ",", "dtype", "=", "bool", ")", "\n", "line", "=", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "parts", "=", "line", ".", "split", "(", ")", "\n", "start_idx", "=", "0", "\n", "if", "len", "(", "parts", ")", "==", "2", ":", "\n", "                ", "dim", "=", "int", "(", "parts", "[", "1", "]", ")", "\n", "start_idx", "+=", "1", "\n", "", "else", ":", "\n", "                ", "dim", "=", "len", "(", "parts", ")", "-", "1", "\n", "f", ".", "seek", "(", "0", ")", "\n", "", "matrix", "=", "np", ".", "random", ".", "randn", "(", "len", "(", "vocab", ")", ",", "dim", ")", ".", "astype", "(", "dtype", ")", "\n", "if", "init_method", ":", "\n", "                ", "matrix", "=", "init_method", "(", "matrix", ")", "\n", "", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ",", "start_idx", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "word", "=", "''", ".", "join", "(", "parts", "[", ":", "-", "dim", "]", ")", "\n", "nums", "=", "parts", "[", "-", "dim", ":", "]", "\n", "# \u5bf9\u9f50unk\u4e0epad", "\n", "if", "word", "==", "padding", "and", "vocab", ".", "padding", "is", "not", "None", ":", "\n", "                        ", "word", "=", "vocab", ".", "padding", "\n", "", "elif", "word", "==", "unknown", "and", "vocab", ".", "unknown", "is", "not", "None", ":", "\n", "                        ", "word", "=", "vocab", ".", "unknown", "\n", "", "if", "word", "in", "vocab", ":", "\n", "                        ", "index", "=", "vocab", ".", "to_index", "(", "word", ")", "\n", "matrix", "[", "index", "]", "=", "np", ".", "fromstring", "(", "' '", ".", "join", "(", "nums", ")", ",", "sep", "=", "' '", ",", "dtype", "=", "dtype", ",", "count", "=", "dim", ")", "\n", "hit_flags", "[", "index", "]", "=", "True", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "if", "error", "==", "'ignore'", ":", "\n", "                        ", "warnings", ".", "warn", "(", "\"Error occurred at the {} line.\"", ".", "format", "(", "idx", ")", ")", "\n", "", "else", ":", "\n", "                        ", "logging", ".", "error", "(", "\"Error occurred at the {} line.\"", ".", "format", "(", "idx", ")", ")", "\n", "raise", "e", "\n", "", "", "", "total_hits", "=", "sum", "(", "hit_flags", ")", "\n", "logging", ".", "info", "(", "\"Found {} out of {} words in the pre-training embedding.\"", ".", "format", "(", "total_hits", ",", "len", "(", "vocab", ")", ")", ")", "\n", "if", "init_method", "is", "None", ":", "\n", "                ", "found_vectors", "=", "matrix", "[", "hit_flags", "]", "\n", "if", "len", "(", "found_vectors", ")", "!=", "0", ":", "\n", "                    ", "mean", "=", "np", ".", "mean", "(", "found_vectors", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "std", "=", "np", ".", "std", "(", "found_vectors", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "unfound_vec_num", "=", "len", "(", "vocab", ")", "-", "total_hits", "\n", "r_vecs", "=", "np", ".", "random", ".", "randn", "(", "unfound_vec_num", ",", "dim", ")", ".", "astype", "(", "dtype", ")", "*", "std", "+", "mean", "\n", "matrix", "[", "hit_flags", "==", "False", "]", "=", "r_vecs", "\n", "\n", "", "", "if", "normalize", ":", "\n", "                ", "matrix", "/=", "np", ".", "linalg", ".", "norm", "(", "matrix", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.embed_loader.EmbedLoader.load_without_vocab": [[114, 189], ["core.vocabulary.Vocabulary", "open", "f.readline", "enumerate", "numpy.random.randn().astype", "vec_dict.items", "len", "f.seek", "RuntimeError", "core.vocabulary.Vocabulary.to_index", "numpy.mean", "numpy.std", "numpy.linalg.norm", "f.readline.strip().split", "f.readline.strip().split", "numpy.fromstring", "core.vocabulary.Vocabulary.add_word", "numpy.random.randn", "len", "f.readline.strip", "f.readline.strip", "len", "warnings.warn", "logging.error", "numpy.random.randn().astype", "numpy.random.randn().astype", "numpy.random.randn", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word"], ["", "", "@", "staticmethod", "\n", "def", "load_without_vocab", "(", "embed_filepath", ",", "dtype", "=", "np", ".", "float32", ",", "padding", "=", "'<pad>'", ",", "unknown", "=", "'<unk>'", ",", "normalize", "=", "True", ",", "\n", "error", "=", "'ignore'", ")", ":", "\n", "        ", "r\"\"\"\n        \u4eceembed_filepath\u4e2d\u8bfb\u53d6\u9884\u8bad\u7ec3\u7684word vector\u3002\u6839\u636e\u9884\u8bad\u7ec3\u7684\u8bcd\u8868\u8bfb\u53d6embedding\u5e76\u751f\u6210\u4e00\u4e2a\u5bf9\u5e94\u7684Vocabulary\u3002\n\n        :param str embed_filepath: \u9884\u8bad\u7ec3\u7684embedding\u7684\u8def\u5f84\u3002\n        :param dtype: \u8bfb\u51fa\u7684embedding\u7684\u7c7b\u578b\n        :param str padding: \u8bcd\u8868\u4e2d\u7684padding\u7684token. \u5e76\u4ee5\u6b64\u7528\u505avocab\u7684padding\u3002\n        :param str unknown: \u8bcd\u8868\u4e2d\u7684unknown\u7684token. \u5e76\u4ee5\u6b64\u7528\u505avocab\u7684unknown\u3002\n        :param bool normalize: \u662f\u5426\u5c06\u6bcf\u4e2avector\u5f52\u4e00\u5316\u5230norm\u4e3a1\n        :param str error: `ignore` , `strict` ; \u5982\u679c `ignore` \uff0c\u9519\u8bef\u5c06\u81ea\u52a8\u8df3\u8fc7; \u5982\u679c `strict` , \u9519\u8bef\u5c06\u629b\u51fa\u3002\u8fd9\u91cc\u4e3b\u8981\u53ef\u80fd\u51fa\u9519\u7684\u5730\n            \u65b9\u5728\u4e8e\u8bcd\u8868\u6709\u7a7a\u884c\u6216\u8005\u8bcd\u8868\u51fa\u73b0\u4e86\u7ef4\u5ea6\u4e0d\u4e00\u81f4\u3002\n        :return (numpy.ndarray, Vocabulary): Embedding\u7684shape\u662f[\u8bcd\u8868\u5927\u5c0f+x, \u8bcd\u8868\u7ef4\u5ea6], \"\u8bcd\u8868\u5927\u5c0f+x\"\u662f\u7531\u4e8e\u6700\u7ec8\u7684\u5927\u5c0f\u8fd8\u53d6\u51b3\u4e0e\n            \u662f\u5426\u4f7f\u7528padding, \u4ee5\u53caunknown\u6709\u6ca1\u6709\u5728\u8bcd\u8868\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u8bcd\u3002 Vocabulary\u4e2d\u7684\u8bcd\u7684\u987a\u5e8f\u4e0eEmbedding\u7684\u987a\u5e8f\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\n\n        \"\"\"", "\n", "vocab", "=", "Vocabulary", "(", "padding", "=", "padding", ",", "unknown", "=", "unknown", ")", "\n", "vec_dict", "=", "{", "}", "\n", "found_unknown", "=", "False", "\n", "found_pad", "=", "False", "\n", "\n", "with", "open", "(", "embed_filepath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "line", "=", "f", ".", "readline", "(", ")", "\n", "start", "=", "1", "\n", "dim", "=", "-", "1", "\n", "if", "len", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "!=", "2", ":", "\n", "                ", "f", ".", "seek", "(", "0", ")", "\n", "start", "=", "0", "\n", "", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ",", "start", "=", "start", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "dim", "==", "-", "1", ":", "\n", "                        ", "dim", "=", "len", "(", "parts", ")", "-", "1", "\n", "", "word", "=", "''", ".", "join", "(", "parts", "[", ":", "-", "dim", "]", ")", "\n", "nums", "=", "parts", "[", "-", "dim", ":", "]", "\n", "vec", "=", "np", ".", "fromstring", "(", "' '", ".", "join", "(", "nums", ")", ",", "sep", "=", "' '", ",", "dtype", "=", "dtype", ",", "count", "=", "dim", ")", "\n", "vec_dict", "[", "word", "]", "=", "vec", "\n", "vocab", ".", "add_word", "(", "word", ")", "\n", "if", "unknown", "is", "not", "None", "and", "unknown", "==", "word", ":", "\n", "                        ", "found_unknown", "=", "True", "\n", "", "if", "padding", "is", "not", "None", "and", "padding", "==", "word", ":", "\n", "                        ", "found_pad", "=", "True", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "if", "error", "==", "'ignore'", ":", "\n", "                        ", "warnings", ".", "warn", "(", "\"Error occurred at the {} line.\"", ".", "format", "(", "idx", ")", ")", "\n", "pass", "\n", "", "else", ":", "\n", "                        ", "logging", ".", "error", "(", "\"Error occurred at the {} line.\"", ".", "format", "(", "idx", ")", ")", "\n", "raise", "e", "\n", "", "", "", "if", "dim", "==", "-", "1", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"{} is an empty file.\"", ".", "format", "(", "embed_filepath", ")", ")", "\n", "", "matrix", "=", "np", ".", "random", ".", "randn", "(", "len", "(", "vocab", ")", ",", "dim", ")", ".", "astype", "(", "dtype", ")", "\n", "for", "key", ",", "vec", "in", "vec_dict", ".", "items", "(", ")", ":", "\n", "                ", "index", "=", "vocab", ".", "to_index", "(", "key", ")", "\n", "matrix", "[", "index", "]", "=", "vec", "\n", "\n", "", "if", "(", "(", "unknown", "is", "not", "None", ")", "and", "(", "not", "found_unknown", ")", ")", "or", "(", "(", "padding", "is", "not", "None", ")", "and", "(", "not", "found_pad", ")", ")", ":", "\n", "                ", "start_idx", "=", "0", "\n", "if", "padding", "is", "not", "None", ":", "\n", "                    ", "start_idx", "+=", "1", "\n", "", "if", "unknown", "is", "not", "None", ":", "\n", "                    ", "start_idx", "+=", "1", "\n", "\n", "", "mean", "=", "np", ".", "mean", "(", "matrix", "[", "start_idx", ":", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "std", "=", "np", ".", "std", "(", "matrix", "[", "start_idx", ":", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "if", "(", "unknown", "is", "not", "None", ")", "and", "(", "not", "found_unknown", ")", ":", "\n", "                    ", "matrix", "[", "start_idx", "-", "1", "]", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "dim", ")", ".", "astype", "(", "dtype", ")", "*", "std", "+", "mean", "\n", "", "if", "(", "padding", "is", "not", "None", ")", "and", "(", "not", "found_pad", ")", ":", "\n", "                    ", "matrix", "[", "0", "]", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "dim", ")", ".", "astype", "(", "dtype", ")", "*", "std", "+", "mean", "\n", "\n", "", "", "if", "normalize", ":", "\n", "                ", "matrix", "/=", "np", ".", "linalg", ".", "norm", "(", "matrix", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "", "return", "matrix", ",", "vocab", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.utils.check_loader_paths": [[17, 83], ["isinstance", "os.path.abspath", "os.path.isfile", "isinstance", "os.path.expanduser", "os.path.isdir", "TypeError", "os.listdir", "os.listdir.sort", "FileNotFoundError", "os.path.abspath.items", "ValueError", "KeyError", "KeyError", "os.path.join", "isinstance", "isinstance", "os.path.abspath", "TypeError", "type", "Exception", "Exception", "FileExistsError", "os.path.expanduser", "os.path.exists", "TypeError"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["def", "_construct_char_vocab_from_vocab", "(", "vocab", ":", "Vocabulary", ",", "min_freq", ":", "int", "=", "1", ",", "include_word_start_end", "=", "True", ")", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2aword\u7684vocabulary\u751f\u6210character\u7684vocabulary.\n\n    :param vocab: \u4ecevocab\n    :param min_freq:\n    :param include_word_start_end: \u662f\u5426\u9700\u8981\u5305\u542b\u7279\u6b8a\u7684<bow>\u548c<eos>\n    :return:\n    \"\"\"", "\n", "char_vocab", "=", "Vocabulary", "(", "min_freq", "=", "min_freq", ")", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "        ", "if", "not", "vocab", ".", "_is_word_no_create_entry", "(", "word", ")", ":", "\n", "            ", "char_vocab", ".", "add_word_lst", "(", "list", "(", "word", ")", ")", "\n", "", "", "if", "include_word_start_end", ":", "\n", "        ", "char_vocab", ".", "add_word_lst", "(", "[", "'<bow>'", ",", "'<eow>'", "]", ")", "\n", "", "return", "char_vocab", "\n", "\n", "\n", "", "def", "get_embeddings", "(", "init_embed", ",", "padding_idx", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    \u6839\u636e\u8f93\u5165\u7684init_embed\u8fd4\u56deEmbedding\u5bf9\u8c61\u3002\u5982\u679c\u8f93\u5165\u662ftuple, \u5219\u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2ann.Embedding; \u5982\u679c\u8f93\u5165\u662fnumpy.ndarray, \u5219\u6309\u7167ndarray\n    \u7684\u503c\u5c06nn.Embedding\u521d\u59cb\u5316; \u5982\u679c\u8f93\u5165\u662ftorch.Tensor, \u5219\u6309\u8be5\u503c\u521d\u59cb\u5316nn.Embedding; \u5982\u679c\u8f93\u5165\u662ffastNLP\u4e2d\u7684embedding\u5c06\u4e0d\u505a\u5904\u7406\n    \u8fd4\u56de\u539f\u5bf9\u8c61\u3002\n\n    :param init_embed: \u53ef\u4ee5\u662f tuple:(num_embedings, embedding_dim), \u5373embedding\u7684\u5927\u5c0f\u548c\u6bcf\u4e2a\u8bcd\u7684\u7ef4\u5ea6;\u4e5f\u53ef\u4ee5\u4f20\u5165\n        nn.Embedding \u5bf9\u8c61, \u6b64\u65f6\u5c31\u4ee5\u4f20\u5165\u7684\u5bf9\u8c61\u4f5c\u4e3aembedding; \u4f20\u5165np.ndarray\u4e5f\u884c\uff0c\u5c06\u4f7f\u7528\u4f20\u5165\u7684ndarray\u4f5c\u4e3a\u4f5c\u4e3aEmbedding\u521d\u59cb\u5316;\n        \u4f20\u5165torch.Tensor, \u5c06\u4f7f\u7528\u4f20\u5165\u7684\u503c\u4f5c\u4e3aEmbedding\u521d\u59cb\u5316\u3002\n    :param padding_idx: \u5f53\u4f20\u5165tuple\u65f6\uff0cpadding_idx\u6709\u6548\n    :return nn.Embedding:  embeddings\n    \"\"\"", "\n", "if", "isinstance", "(", "init_embed", ",", "tuple", ")", ":", "\n", "        ", "res", "=", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "init_embed", "[", "0", "]", ",", "embedding_dim", "=", "init_embed", "[", "1", "]", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "res", ".", "weight", ".", "data", ",", "a", "=", "-", "np", ".", "sqrt", "(", "3", "/", "res", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ")", ",", "\n", "b", "=", "np", ".", "sqrt", "(", "3", "/", "res", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "res", "=", "init_embed", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "res", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "init_embed", ",", "freeze", "=", "False", ")", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "init_embed", "=", "torch", ".", "tensor", "(", "init_embed", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "res", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "init_embed", ",", "freeze", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'invalid init_embed type: {}'", ".", "format", "(", "(", "type", "(", "init_embed", ")", ")", ")", ")", "\n", "", "return", "res", "\n", "\n", "\n", "", "def", "get_sinusoid_encoding_table", "(", "n_position", ",", "d_hid", ",", "padding_idx", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    sinusoid\u7684embedding\uff0c\u5176\u4e2dposition\u7684\u8868\u793a\u4e2d\uff0c\u5076\u6570\u7ef4(0,2,4,...)\u662fsin, \u5947\u6570(1,3,5...)\u662fcos\n\n    :param int n_position: \u4e00\u5171\u591a\u5c11\u4e2aposition\n    :param int d_hid: \u591a\u5c11\u7ef4\u5ea6\uff0c\u9700\u8981\u4e3a\u5076\u6570\n    :param padding_idx:\n    :return: torch.FloatTensor, shape\u4e3an_position x d_hid\n    \"\"\"", "\n", "\n", "def", "cal_angle", "(", "position", ",", "hid_idx", ")", ":", "\n", "        ", "return", "position", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_idx", "//", "2", ")", "/", "d_hid", ")", "\n", "\n", "", "def", "get_posi_angle_vec", "(", "position", ")", ":", "\n", "        ", "return", "[", "cal_angle", "(", "position", ",", "hid_j", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "[", "get_posi_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_position", ")", "]", ")", "\n", "\n", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.CoReferencePipe.__init__": [[43, 46], ["pipe.Pipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.CoReferencePipe.process": [[47, 113], ["fastNLP.core.vocabulary.Vocabulary().from_dataset", "fastNLP.core.vocabulary.Vocabulary().from_dataset.build_vocab", "data_bundle.set_vocab", "data_bundle.datasets.items", "core.const.Const.INPUTS", "coreference.get_char_dict", "set", "enumerate", "collections.defaultdict", "collections.defaultdict.update", "ds.apply", "ds.apply", "ds.rename_field", "ds.apply", "ds.apply", "ds.apply", "ds.rename_field", "ds.set_ignore_type", "ds.set_padder", "ds.set_input", "ds.set_target", "enumerate", "fastNLP.core.vocabulary.Vocabulary", "data_bundle.datasets.values", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_WORDS", "core.const.Const.INPUTS", "core.const.Const.RAW_WORDS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "set.add", "core.const.Const.INPUTS", "coreference.speaker2numpy", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "enumerate", "coreference.doc2numpy", "coreference.doc2numpy", "coreference.doc2numpy", "max", "max", "max", "core.const.Const.RAW_WORDS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "core.const.Const.RAW_WORDS"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.from_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.build_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.get_char_dict", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_ignore_type", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_padder", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.speaker2numpy", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.doc2numpy", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.doc2numpy", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.doc2numpy", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u5bf9load\u8fdb\u6765\u7684\u6570\u636e\u8fdb\u4e00\u6b65\u5904\u7406\u539f\u59cb\u6570\u636e\u5305\u542b\uff1araw_key,raw_speaker,raw_words,raw_clusters\n        \n        .. csv-table::\n           :header: \"raw_key\", \"raw_speaker\",\"raw_words\",\"raw_clusters\"\n\n           \"bc/cctv/00/cctv_0000_0\", \"[[Speaker#1, Speaker#1],[]]\",\"[['I','am'],[]]\",\"[[[2,3],[6,7]],[[10,12],[20,22]]]\"\n           \"bc/cctv/00/cctv_0000_1\", \"[['Speaker#1', 'peaker#1'],[]]\",\"[['He','is'],[]]\",\"[[[2,3],[6,7]],[[10,12],[20,22]]]\"\n           \"[...]\", \"[...]\",\"[...]\",\"[...]\"\n\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "genres", "=", "{", "g", ":", "i", "for", "i", ",", "g", "in", "enumerate", "(", "[", "\"bc\"", ",", "\"bn\"", ",", "\"mz\"", ",", "\"nw\"", ",", "\"pt\"", ",", "\"tc\"", ",", "\"wb\"", "]", ")", "}", "\n", "vocab", "=", "Vocabulary", "(", ")", ".", "from_dataset", "(", "*", "data_bundle", ".", "datasets", ".", "values", "(", ")", ",", "field_name", "=", "Const", ".", "RAW_WORDS", "(", "3", ")", ")", "\n", "vocab", ".", "build_vocab", "(", ")", "\n", "word2id", "=", "vocab", ".", "word2idx", "\n", "data_bundle", ".", "set_vocab", "(", "vocab", ",", "Const", ".", "INPUTS", "(", "0", ")", ")", "\n", "if", "self", ".", "config", ".", "char_path", ":", "\n", "            ", "char_dict", "=", "get_char_dict", "(", "self", ".", "config", ".", "char_path", ")", "\n", "", "else", ":", "\n", "            ", "char_set", "=", "set", "(", ")", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "word2id", ")", ":", "\n", "                ", "if", "i", "<", "2", ":", "\n", "                    ", "continue", "\n", "", "for", "c", "in", "w", ":", "\n", "                    ", "char_set", ".", "add", "(", "c", ")", "\n", "\n", "", "", "char_dict", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "char_dict", ".", "update", "(", "{", "c", ":", "i", "for", "i", ",", "c", "in", "enumerate", "(", "char_set", ")", "}", ")", "\n", "\n", "", "for", "name", ",", "ds", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "# genre", "\n", "            ", "ds", ".", "apply", "(", "lambda", "x", ":", "genres", "[", "x", "[", "Const", ".", "RAW_WORDS", "(", "0", ")", "]", "[", ":", "2", "]", "]", ",", "new_field_name", "=", "Const", ".", "INPUTS", "(", "0", ")", ")", "\n", "\n", "# speaker_ids_np", "\n", "ds", ".", "apply", "(", "lambda", "x", ":", "speaker2numpy", "(", "x", "[", "Const", ".", "RAW_WORDS", "(", "1", ")", "]", ",", "self", ".", "config", ".", "max_sentences", ",", "is_train", "=", "name", "==", "'train'", ")", ",", "\n", "new_field_name", "=", "Const", ".", "INPUTS", "(", "1", ")", ")", "\n", "\n", "# sentences", "\n", "ds", ".", "rename_field", "(", "Const", ".", "RAW_WORDS", "(", "3", ")", ",", "Const", ".", "INPUTS", "(", "2", ")", ")", "\n", "\n", "# doc_np", "\n", "ds", ".", "apply", "(", "lambda", "x", ":", "doc2numpy", "(", "x", "[", "Const", ".", "INPUTS", "(", "2", ")", "]", ",", "word2id", ",", "char_dict", ",", "max", "(", "self", ".", "config", ".", "filter", ")", ",", "\n", "self", ".", "config", ".", "max_sentences", ",", "is_train", "=", "name", "==", "'train'", ")", "[", "0", "]", ",", "\n", "new_field_name", "=", "Const", ".", "INPUTS", "(", "3", ")", ")", "\n", "# char_index", "\n", "ds", ".", "apply", "(", "lambda", "x", ":", "doc2numpy", "(", "x", "[", "Const", ".", "INPUTS", "(", "2", ")", "]", ",", "word2id", ",", "char_dict", ",", "max", "(", "self", ".", "config", ".", "filter", ")", ",", "\n", "self", ".", "config", ".", "max_sentences", ",", "is_train", "=", "name", "==", "'train'", ")", "[", "1", "]", ",", "\n", "new_field_name", "=", "Const", ".", "CHAR_INPUT", ")", "\n", "# seq len", "\n", "ds", ".", "apply", "(", "lambda", "x", ":", "doc2numpy", "(", "x", "[", "Const", ".", "INPUTS", "(", "2", ")", "]", ",", "word2id", ",", "char_dict", ",", "max", "(", "self", ".", "config", ".", "filter", ")", ",", "\n", "self", ".", "config", ".", "max_sentences", ",", "is_train", "=", "name", "==", "'train'", ")", "[", "2", "]", ",", "\n", "new_field_name", "=", "Const", ".", "INPUT_LEN", ")", "\n", "\n", "# clusters", "\n", "ds", ".", "rename_field", "(", "Const", ".", "RAW_WORDS", "(", "2", ")", ",", "Const", ".", "TARGET", ")", "\n", "\n", "ds", ".", "set_ignore_type", "(", "Const", ".", "TARGET", ")", "\n", "ds", ".", "set_padder", "(", "Const", ".", "TARGET", ",", "None", ")", "\n", "ds", ".", "set_input", "(", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", ",", "Const", ".", "INPUTS", "(", "2", ")", ",", "Const", ".", "INPUTS", "(", "3", ")", ",", "Const", ".", "CHAR_INPUT", ",", "Const", ".", "INPUT_LEN", ")", "\n", "ds", ".", "set_target", "(", "Const", ".", "TARGET", ")", "\n", "\n", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.CoReferencePipe.process_from_file": [[114, 117], ["loader.coreference.CoReferenceLoader().load", "coreference.CoReferencePipe.process", "loader.coreference.CoReferenceLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", ")", ":", "\n", "        ", "bundle", "=", "CoReferenceLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.doc2numpy": [[121, 131], ["coreference._doc2vec", "numpy.zeros", "range", "max", "len", "len", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference._doc2vec"], ["", "", "def", "doc2numpy", "(", "doc", ",", "word2id", ",", "chardict", ",", "max_filter", ",", "max_sentences", ",", "is_train", ")", ":", "\n", "    ", "docvec", ",", "char_index", ",", "length", ",", "max_len", "=", "_doc2vec", "(", "doc", ",", "word2id", ",", "chardict", ",", "max_filter", ",", "max_sentences", ",", "is_train", ")", "\n", "assert", "max", "(", "length", ")", "==", "max_len", "\n", "assert", "char_index", ".", "shape", "[", "0", "]", "==", "len", "(", "length", ")", "\n", "assert", "char_index", ".", "shape", "[", "1", "]", "==", "max_len", "\n", "doc_np", "=", "np", ".", "zeros", "(", "(", "len", "(", "docvec", ")", ",", "max_len", ")", ",", "int", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "docvec", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "docvec", "[", "i", "]", ")", ")", ":", "\n", "            ", "doc_np", "[", "i", "]", "[", "j", "]", "=", "docvec", "[", "i", "]", "[", "j", "]", "\n", "", "", "return", "doc_np", ",", "char_index", ",", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference._doc2vec": [[132, 164], ["range", "numpy.zeros", "range", "min", "len", "length.append", "enumerate", "docvex.append", "enumerate", "len", "len", "len", "len", "len", "len", "sent_vec.append", "sent_vec.append", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_doc2vec", "(", "doc", ",", "word2id", ",", "char_dict", ",", "max_filter", ",", "max_sentences", ",", "is_train", ")", ":", "\n", "    ", "max_len", "=", "0", "\n", "max_word_length", "=", "0", "\n", "docvex", "=", "[", "]", "\n", "length", "=", "[", "]", "\n", "if", "is_train", ":", "\n", "        ", "sent_num", "=", "min", "(", "max_sentences", ",", "len", "(", "doc", ")", ")", "\n", "", "else", ":", "\n", "        ", "sent_num", "=", "len", "(", "doc", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "sent_num", ")", ":", "\n", "        ", "sent", "=", "doc", "[", "i", "]", "\n", "length", ".", "append", "(", "len", "(", "sent", ")", ")", "\n", "if", "(", "len", "(", "sent", ")", ">", "max_len", ")", ":", "\n", "            ", "max_len", "=", "len", "(", "sent", ")", "\n", "", "sent_vec", "=", "[", "]", "\n", "for", "j", ",", "word", "in", "enumerate", "(", "sent", ")", ":", "\n", "            ", "if", "len", "(", "word", ")", ">", "max_word_length", ":", "\n", "                ", "max_word_length", "=", "len", "(", "word", ")", "\n", "", "if", "word", "in", "word2id", ":", "\n", "                ", "sent_vec", ".", "append", "(", "word2id", "[", "word", "]", ")", "\n", "", "else", ":", "\n", "                ", "sent_vec", ".", "append", "(", "word2id", "[", "\"UNK\"", "]", ")", "\n", "", "", "docvex", ".", "append", "(", "sent_vec", ")", "\n", "\n", "", "char_index", "=", "np", ".", "zeros", "(", "(", "sent_num", ",", "max_len", ",", "max_word_length", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "sent_num", ")", ":", "\n", "        ", "sent", "=", "doc", "[", "i", "]", "\n", "for", "j", ",", "word", "in", "enumerate", "(", "sent", ")", ":", "\n", "            ", "char_index", "[", "i", ",", "j", ",", ":", "len", "(", "word", ")", "]", "=", "[", "char_dict", "[", "c", "]", "for", "c", "in", "word", "]", "\n", "\n", "", "", "return", "docvex", ",", "char_index", ",", "length", ",", "max_len", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.speaker2numpy": [[165, 172], ["coreference.flatten", "numpy.array", "len", "enumerate", "set"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.flatten"], ["", "def", "speaker2numpy", "(", "speakers_raw", ",", "max_sentences", ",", "is_train", ")", ":", "\n", "    ", "if", "is_train", "and", "len", "(", "speakers_raw", ")", ">", "max_sentences", ":", "\n", "        ", "speakers_raw", "=", "speakers_raw", "[", "0", ":", "max_sentences", "]", "\n", "", "speakers", "=", "flatten", "(", "speakers_raw", ")", "\n", "speaker_dict", "=", "{", "s", ":", "i", "for", "i", ",", "s", "in", "enumerate", "(", "set", "(", "speakers", ")", ")", "}", "\n", "speaker_ids", "=", "np", ".", "array", "(", "[", "speaker_dict", "[", "s", "]", "for", "s", "in", "speakers", "]", ")", "\n", "return", "speaker_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.flatten": [[174, 176], ["None"], "function", ["None"], ["", "def", "flatten", "(", "l", ")", ":", "\n", "    ", "return", "[", "item", "for", "sublist", "in", "l", "for", "item", "in", "sublist", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.get_char_dict": [[177, 184], ["collections.defaultdict", "collections.defaultdict.update", "open", "vocab.extend", "c.strip", "enumerate", "f.readlines"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update"], ["", "def", "get_char_dict", "(", "path", ")", ":", "\n", "    ", "vocab", "=", "[", "\"<UNK>\"", "]", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "vocab", ".", "extend", "(", "c", ".", "strip", "(", ")", "for", "c", "in", "f", ".", "readlines", "(", ")", ")", "\n", "", "char_dict", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "char_dict", ".", "update", "(", "{", "c", ":", "i", "for", "i", ",", "c", "in", "enumerate", "(", "vocab", ")", "}", ")", "\n", "return", "char_dict", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.MatchingBertPipe.__init__": [[67, 77], ["pipe.Pipe.__init__", "bool", "utils.get_tokenizer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils.get_tokenizer"], ["def", "__init__", "(", "self", ",", "lower", "=", "False", ",", "tokenizer", ":", "str", "=", "'raw'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param bool lower: \u662f\u5426\u5c06word\u5c0f\u5199\u5316\u3002\n        :param str tokenizer: \u4f7f\u7528\u4ec0\u4e48tokenizer\u6765\u5c06\u53e5\u5b50\u5207\u5206\u4e3awords. \u652f\u6301spacy, raw\u4e24\u79cd\u3002raw\u5373\u4f7f\u7528\u7a7a\u683c\u62c6\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lower", "=", "bool", "(", "lower", ")", "\n", "self", ".", "tokenizer", "=", "get_tokenizer", "(", "tokenize_method", "=", "tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.MatchingBertPipe._tokenize": [[78, 91], ["data_bundle.datasets.items", "zip", "dataset.apply_field", "matching.MatchingBertPipe.tokenizer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "_tokenize", "(", "self", ",", "data_bundle", ",", "field_names", ",", "new_field_names", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param DataBundle data_bundle: DataBundle.\n        :param list field_names: List[str], \u9700\u8981tokenize\u7684field\u540d\u79f0\n        :param list new_field_names: List[str], tokenize\u4e4b\u540efield\u7684\u540d\u79f0\uff0c\u4e0efield_names\u4e00\u4e00\u5bf9\u5e94\u3002\n        :return: \u8f93\u5165\u7684DataBundle\u5bf9\u8c61\n        \"\"\"", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "for", "field_name", ",", "new_field_name", "in", "zip", "(", "field_names", ",", "new_field_names", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "words", ":", "self", ".", "tokenizer", "(", "words", ")", ",", "field_name", "=", "field_name", ",", "\n", "new_field_name", "=", "new_field_name", ")", "\n", "", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.MatchingBertPipe.process": [[92, 171], ["matching.MatchingBertPipe.datasets.values", "matching.MatchingBertPipe.datasets.items", "matching.MatchingBertPipe._tokenize", "matching.MatchingBertPipe.datasets.items", "core.vocabulary.Vocabulary", "core.vocabulary.Vocabulary.from_dataset", "core.vocabulary.Vocabulary.index_dataset", "core.vocabulary.Vocabulary", "core.vocabulary.Vocabulary.from_dataset", "core.vocabulary.Vocabulary.index_dataset", "matching.MatchingBertPipe.set_vocab", "matching.MatchingBertPipe.set_vocab", "matching.MatchingBertPipe.datasets.items", "dataset.has_field", "dataset.copy_field", "dataset.copy_field", "matching.MatchingBertPipe.datasets.items", "dataset.apply", "dataset.delete_field", "dataset.delete_field", "len", "warnings.warn", "core._logger.logger.warning", "dataset.add_seq_len", "dataset.set_input", "dataset.drop", "core.const.Const.RAW_WORDS", "core.const.Const.INPUTS", "core.const.Const.RAW_WORDS", "core.const.Const.INPUTS", "dataset[].lower", "dataset[].lower", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "matching.MatchingBertPipe.datasets.values", "matching.MatchingBertPipe.datasets.items", "dataset.has_field", "dataset.has_field", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "len", "dataset.set_target", "matching.MatchingBertPipe.datasets.items", "matching.MatchingBertPipe.datasets.items", "matching.MatchingBertPipe.iter_datasets", "matching.MatchingBertPipe.iter_datasets", "ds.has_field", "matching.MatchingBertPipe.datasets.keys", "core.const.Const.INPUTS", "core.const.Const.INPUTS"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.WeiboSenti100kPipe._tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.from_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.from_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.copy_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.copy_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.delete_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.delete_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS"], ["", "def", "process", "(", "self", ",", "data_bundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u8f93\u5165\u7684data_bundle\u4e2d\u7684dataset\u9700\u8981\u5177\u6709\u4ee5\u4e0b\u7ed3\u6784\uff1a\n\n        .. csv-table::\n            :header: \"raw_words1\", \"raw_words2\", \"target\"\n\n            \"Dana Reeve, the widow of the actor...\", \"Christopher Reeve had an...\", \"not_entailment\"\n            \"...\",\"...\"\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "for", "dataset", "in", "data_bundle", ".", "datasets", ".", "values", "(", ")", ":", "\n", "            ", "if", "dataset", ".", "has_field", "(", "Const", ".", "TARGET", ")", ":", "\n", "                ", "dataset", ".", "drop", "(", "lambda", "x", ":", "x", "[", "Const", ".", "TARGET", "]", "==", "'-'", ")", "\n", "\n", "", "", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "copy_field", "(", "Const", ".", "RAW_WORDS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "0", ")", ",", ")", "\n", "dataset", ".", "copy_field", "(", "Const", ".", "RAW_WORDS", "(", "1", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", ",", ")", "\n", "\n", "", "if", "self", ".", "lower", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "dataset", "[", "Const", ".", "INPUTS", "(", "0", ")", "]", ".", "lower", "(", ")", "\n", "dataset", "[", "Const", ".", "INPUTS", "(", "1", ")", "]", ".", "lower", "(", ")", "\n", "\n", "", "", "data_bundle", "=", "self", ".", "_tokenize", "(", "data_bundle", ",", "[", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", "]", ",", "\n", "[", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", "]", ")", "\n", "\n", "# concat\u4e24\u4e2awords", "\n", "def", "concat", "(", "ins", ")", ":", "\n", "            ", "words0", "=", "ins", "[", "Const", ".", "INPUTS", "(", "0", ")", "]", "\n", "words1", "=", "ins", "[", "Const", ".", "INPUTS", "(", "1", ")", "]", "\n", "words", "=", "words0", "+", "[", "'[SEP]'", "]", "+", "words1", "\n", "return", "words", "\n", "\n", "", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply", "(", "concat", ",", "new_field_name", "=", "Const", ".", "INPUT", ")", "\n", "dataset", ".", "delete_field", "(", "Const", ".", "INPUTS", "(", "0", ")", ")", "\n", "dataset", ".", "delete_field", "(", "Const", ".", "INPUTS", "(", "1", ")", ")", "\n", "\n", "", "word_vocab", "=", "Vocabulary", "(", ")", "\n", "word_vocab", ".", "from_dataset", "(", "*", "[", "dataset", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", "if", "'train'", "in", "name", "]", ",", "\n", "field_name", "=", "Const", ".", "INPUT", ",", "\n", "no_create_entry_dataset", "=", "[", "dataset", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", "if", "\n", "'train'", "not", "in", "name", "]", ")", "\n", "word_vocab", ".", "index_dataset", "(", "*", "data_bundle", ".", "datasets", ".", "values", "(", ")", ",", "field_name", "=", "Const", ".", "INPUT", ")", "\n", "\n", "target_vocab", "=", "Vocabulary", "(", "padding", "=", "None", ",", "unknown", "=", "None", ")", "\n", "target_vocab", ".", "from_dataset", "(", "*", "[", "ds", "for", "name", ",", "ds", "in", "data_bundle", ".", "iter_datasets", "(", ")", "if", "'train'", "in", "name", "]", ",", "\n", "field_name", "=", "Const", ".", "TARGET", ",", "\n", "no_create_entry_dataset", "=", "[", "ds", "for", "name", ",", "ds", "in", "data_bundle", ".", "iter_datasets", "(", ")", "\n", "if", "(", "'train'", "not", "in", "name", ")", "and", "(", "ds", ".", "has_field", "(", "Const", ".", "TARGET", ")", ")", "]", "\n", ")", "\n", "if", "len", "(", "target_vocab", ".", "_no_create_word", ")", ">", "0", ":", "\n", "            ", "warn_msg", "=", "f\"There are {len(target_vocab._no_create_word)} target labels\"", "f\" in {[name for name in data_bundle.datasets.keys() if 'train' not in name]} \"", "f\"data set but not in train data set!.\"", "\n", "warnings", ".", "warn", "(", "warn_msg", ")", "\n", "logger", ".", "warning", "(", "warn_msg", ")", "\n", "\n", "", "has_target_datasets", "=", "[", "dataset", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", "if", "\n", "dataset", ".", "has_field", "(", "Const", ".", "TARGET", ")", "]", "\n", "target_vocab", ".", "index_dataset", "(", "*", "has_target_datasets", ",", "field_name", "=", "Const", ".", "TARGET", ")", "\n", "\n", "data_bundle", ".", "set_vocab", "(", "word_vocab", ",", "Const", ".", "INPUT", ")", "\n", "data_bundle", ".", "set_vocab", "(", "target_vocab", ",", "Const", ".", "TARGET", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "INPUT", ",", "Const", ".", "INPUT_LEN", "]", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUT", ")", "\n", "dataset", ".", "set_input", "(", "*", "input_fields", ",", "flag", "=", "True", ")", "\n", "for", "fields", "in", "target_fields", ":", "\n", "                ", "if", "dataset", ".", "has_field", "(", "fields", ")", ":", "\n", "                    ", "dataset", ".", "set_target", "(", "fields", ",", "flag", "=", "True", ")", "\n", "\n", "", "", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.RTEBertPipe.process_from_file": [[174, 177], ["loader.matching.RTELoader().load", "matching.RTEBertPipe.process", "loader.matching.RTELoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "RTELoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.SNLIBertPipe.process_from_file": [[180, 183], ["loader.matching.SNLILoader().load", "matching.SNLIBertPipe.process", "loader.matching.SNLILoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "SNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.QuoraBertPipe.process_from_file": [[186, 189], ["loader.matching.QuoraLoader().load", "matching.QuoraBertPipe.process", "loader.matching.QuoraLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["    ", "def", "process_from_file", "(", "self", ",", "paths", ")", ":", "\n", "        ", "data_bundle", "=", "QuoraLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.QNLIBertPipe.process_from_file": [[192, 195], ["loader.matching.QNLILoader().load", "matching.QNLIBertPipe.process", "loader.matching.QNLILoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "QNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.MNLIBertPipe.process_from_file": [[198, 201], ["loader.matching.MNLILoader().load", "matching.MNLIBertPipe.process", "loader.matching.MNLILoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "MNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.MatchingPipe.__init__": [[231, 241], ["pipe.Pipe.__init__", "bool", "utils.get_tokenizer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils.get_tokenizer"], ["def", "__init__", "(", "self", ",", "lower", "=", "False", ",", "tokenizer", ":", "str", "=", "'raw'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param bool lower: \u662f\u5426\u5c06\u6240\u6709raw_words\u8f6c\u4e3a\u5c0f\u5199\u3002\n        :param str tokenizer: \u5c06\u539f\u59cb\u6570\u636etokenize\u7684\u65b9\u5f0f\u3002\u652f\u6301spacy, raw. spacy\u662f\u4f7f\u7528spacy\u5207\u5206\uff0craw\u5c31\u662f\u7528\u7a7a\u683c\u5207\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lower", "=", "bool", "(", "lower", ")", "\n", "self", ".", "tokenizer", "=", "get_tokenizer", "(", "tokenize_method", "=", "tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.MatchingPipe._tokenize": [[242, 255], ["data_bundle.datasets.items", "zip", "dataset.apply_field", "matching.MatchingPipe.tokenizer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "_tokenize", "(", "self", ",", "data_bundle", ",", "field_names", ",", "new_field_names", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param ~fastNLP.DataBundle data_bundle: DataBundle.\n        :param list field_names: List[str], \u9700\u8981tokenize\u7684field\u540d\u79f0\n        :param list new_field_names: List[str], tokenize\u4e4b\u540efield\u7684\u540d\u79f0\uff0c\u4e0efield_names\u4e00\u4e00\u5bf9\u5e94\u3002\n        :return: \u8f93\u5165\u7684DataBundle\u5bf9\u8c61\n        \"\"\"", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "for", "field_name", ",", "new_field_name", "in", "zip", "(", "field_names", ",", "new_field_names", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "words", ":", "self", ".", "tokenizer", "(", "words", ")", ",", "field_name", "=", "field_name", ",", "\n", "new_field_name", "=", "new_field_name", ")", "\n", "", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.MatchingPipe.process": [[256, 321], ["matching.MatchingPipe._tokenize", "matching.MatchingPipe.datasets.values", "core.vocabulary.Vocabulary", "core.vocabulary.Vocabulary.from_dataset", "core.vocabulary.Vocabulary.index_dataset", "core.vocabulary.Vocabulary", "core.vocabulary.Vocabulary.from_dataset", "core.vocabulary.Vocabulary.index_dataset", "matching.MatchingPipe.set_vocab", "matching.MatchingPipe.set_vocab", "matching.MatchingPipe.datasets.items", "dataset.has_field", "matching.MatchingPipe.datasets.items", "len", "warnings.warn", "core._logger.logger.warning", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "core.const.Const.INPUT_LENS", "core.const.Const.INPUT_LENS", "dataset.add_seq_len", "dataset.add_seq_len", "dataset.set_input", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_WORDS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "dataset.drop", "dataset[].lower", "dataset[].lower", "matching.MatchingPipe.datasets.values", "matching.MatchingPipe.datasets.items", "dataset.has_field", "core.const.Const.INPUTS", "core.const.Const.INPUT_LENS", "core.const.Const.INPUTS", "core.const.Const.INPUT_LENS", "dataset.has_field", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "core.const.Const.INPUTS", "len", "dataset.set_target", "matching.MatchingPipe.datasets.items", "matching.MatchingPipe.datasets.items", "matching.MatchingPipe.iter_datasets", "matching.MatchingPipe.iter_datasets", "ds.has_field", "matching.MatchingPipe.datasets.keys", "core.const.Const.INPUTS", "core.const.Const.INPUTS"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.WeiboSenti100kPipe._tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.from_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.from_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUT_LENS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUT_LENS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUT_LENS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUT_LENS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS"], ["", "def", "process", "(", "self", ",", "data_bundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u63a5\u53d7\u7684DataBundle\u4e2d\u7684DataSet\u5e94\u8be5\u5177\u6709\u4ee5\u4e0b\u7684field, target\u5217\u53ef\u4ee5\u6ca1\u6709\n\n        .. csv-table::\n           :header: \"raw_words1\", \"raw_words2\", \"target\"\n\n           \"The new rights are...\", \"Everyone really likes..\", \"entailment\"\n           \"This site includes a...\", \"The Government Executive...\", \"not_entailment\"\n           \"...\", \"...\"\n\n        :param ~fastNLP.DataBundle data_bundle: \u901a\u8fc7loader\u8bfb\u53d6\u5f97\u5230\u7684data_bundle\uff0c\u91cc\u9762\u5305\u542b\u4e86\u6570\u636e\u96c6\u7684\u539f\u59cb\u6570\u636e\u5185\u5bb9\n        :return: data_bundle\n        \"\"\"", "\n", "data_bundle", "=", "self", ".", "_tokenize", "(", "data_bundle", ",", "[", "Const", ".", "RAW_WORDS", "(", "0", ")", ",", "Const", ".", "RAW_WORDS", "(", "1", ")", "]", ",", "\n", "[", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", "]", ")", "\n", "\n", "for", "dataset", "in", "data_bundle", ".", "datasets", ".", "values", "(", ")", ":", "\n", "            ", "if", "dataset", ".", "has_field", "(", "Const", ".", "TARGET", ")", ":", "\n", "                ", "dataset", ".", "drop", "(", "lambda", "x", ":", "x", "[", "Const", ".", "TARGET", "]", "==", "'-'", ")", "\n", "\n", "", "", "if", "self", ".", "lower", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "dataset", "[", "Const", ".", "INPUTS", "(", "0", ")", "]", ".", "lower", "(", ")", "\n", "dataset", "[", "Const", ".", "INPUTS", "(", "1", ")", "]", ".", "lower", "(", ")", "\n", "\n", "", "", "word_vocab", "=", "Vocabulary", "(", ")", "\n", "word_vocab", ".", "from_dataset", "(", "*", "[", "dataset", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", "if", "'train'", "in", "name", "]", ",", "\n", "field_name", "=", "[", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", "]", ",", "\n", "no_create_entry_dataset", "=", "[", "dataset", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", "if", "\n", "'train'", "not", "in", "name", "]", ")", "\n", "word_vocab", ".", "index_dataset", "(", "*", "data_bundle", ".", "datasets", ".", "values", "(", ")", ",", "field_name", "=", "[", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", "]", ")", "\n", "\n", "target_vocab", "=", "Vocabulary", "(", "padding", "=", "None", ",", "unknown", "=", "None", ")", "\n", "target_vocab", ".", "from_dataset", "(", "*", "[", "ds", "for", "name", ",", "ds", "in", "data_bundle", ".", "iter_datasets", "(", ")", "if", "'train'", "in", "name", "]", ",", "\n", "field_name", "=", "Const", ".", "TARGET", ",", "\n", "no_create_entry_dataset", "=", "[", "ds", "for", "name", ",", "ds", "in", "data_bundle", ".", "iter_datasets", "(", ")", "\n", "if", "(", "'train'", "not", "in", "name", ")", "and", "(", "ds", ".", "has_field", "(", "Const", ".", "TARGET", ")", ")", "]", "\n", ")", "\n", "if", "len", "(", "target_vocab", ".", "_no_create_word", ")", ">", "0", ":", "\n", "            ", "warn_msg", "=", "f\"There are {len(target_vocab._no_create_word)} target labels\"", "f\" in {[name for name in data_bundle.datasets.keys() if 'train' not in name]} \"", "f\"data set but not in train data set!.\"", "\n", "warnings", ".", "warn", "(", "warn_msg", ")", "\n", "logger", ".", "warning", "(", "warn_msg", ")", "\n", "\n", "", "has_target_datasets", "=", "[", "dataset", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", "if", "\n", "dataset", ".", "has_field", "(", "Const", ".", "TARGET", ")", "]", "\n", "target_vocab", ".", "index_dataset", "(", "*", "has_target_datasets", ",", "field_name", "=", "Const", ".", "TARGET", ")", "\n", "\n", "data_bundle", ".", "set_vocab", "(", "word_vocab", ",", "Const", ".", "INPUTS", "(", "0", ")", ")", "\n", "data_bundle", ".", "set_vocab", "(", "target_vocab", ",", "Const", ".", "TARGET", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", ",", "Const", ".", "INPUT_LENS", "(", "0", ")", ",", "Const", ".", "INPUT_LENS", "(", "1", ")", "]", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUT_LENS", "(", "0", ")", ")", "\n", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUTS", "(", "1", ")", ",", "Const", ".", "INPUT_LENS", "(", "1", ")", ")", "\n", "dataset", ".", "set_input", "(", "*", "input_fields", ",", "flag", "=", "True", ")", "\n", "for", "fields", "in", "target_fields", ":", "\n", "                ", "if", "dataset", ".", "has_field", "(", "fields", ")", ":", "\n", "                    ", "dataset", ".", "set_target", "(", "fields", ",", "flag", "=", "True", ")", "\n", "\n", "", "", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.RTEPipe.process_from_file": [[324, 327], ["loader.matching.RTELoader().load", "matching.RTEPipe.process", "loader.matching.RTELoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "RTELoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.SNLIPipe.process_from_file": [[330, 333], ["loader.matching.SNLILoader().load", "matching.SNLIPipe.process", "loader.matching.SNLILoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "SNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.QuoraPipe.process_from_file": [[336, 339], ["loader.matching.QuoraLoader().load", "matching.QuoraPipe.process", "loader.matching.QuoraLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["    ", "def", "process_from_file", "(", "self", ",", "paths", ")", ":", "\n", "        ", "data_bundle", "=", "QuoraLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.QNLIPipe.process_from_file": [[342, 345], ["loader.matching.QNLILoader().load", "matching.QNLIPipe.process", "loader.matching.QNLILoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "QNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.MNLIPipe.process_from_file": [[348, 351], ["loader.matching.MNLILoader().load", "matching.MNLIPipe.process", "loader.matching.MNLILoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "MNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.LCQMCPipe.__init__": [[354, 356], ["matching.MatchingPipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", "=", "'cn=char'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.LCQMCPipe.process_from_file": [[357, 363], ["loader.matching.LCQMCLoader().load", "matching.RenamePipe.process", "matching.LCQMCPipe.process", "matching.RenamePipe.process", "loader.matching.LCQMCLoader", "matching.RenamePipe", "matching.RenamePipe"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "LCQMCLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "RenamePipe", "(", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", ")", ".", "process", "(", "data_bundle", ")", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.CNXNLIPipe.__init__": [[366, 368], ["matching.MatchingPipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", "=", "'cn-char'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.CNXNLIPipe.process_from_file": [[369, 376], ["loader.matching.CNXNLILoader().load", "matching.GranularizePipe.process", "matching.RenamePipe.process", "matching.CNXNLIPipe.process", "matching.RenamePipe.process", "loader.matching.CNXNLILoader", "matching.GranularizePipe", "matching.RenamePipe", "matching.RenamePipe"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "CNXNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "GranularizePipe", "(", "task", "=", "'XNLI'", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", ")", ".", "process", "(", "data_bundle", ")", "# \u4f7f\u4e2d\u6587\u6570\u636e\u7684field", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", ")", ".", "process", "(", "data_bundle", ")", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.BQCorpusPipe.__init__": [[379, 381], ["matching.MatchingPipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", "=", "'cn-char'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.BQCorpusPipe.process_from_file": [[382, 388], ["loader.matching.BQCorpusLoader().load", "matching.RenamePipe.process", "matching.BQCorpusPipe.process", "matching.RenamePipe.process", "loader.matching.BQCorpusLoader", "matching.RenamePipe", "matching.RenamePipe"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "BQCorpusLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "RenamePipe", "(", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", ")", ".", "process", "(", "data_bundle", ")", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.RenamePipe.__init__": [[391, 394], ["pipe.Pipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task", "=", "'cn-nli'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.RenamePipe.process": [[395, 428], ["data_bundle.datasets.items", "dataset.has_field", "data_bundle.datasets.items", "RuntimeError", "core.const.Const.RAW_CHARS", "dataset.rename_field", "dataset.rename_field", "dataset.has_field", "dataset.has_field", "core.const.Const.RAW_CHARS", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_CHARS", "core.const.Const.RAW_WORDS", "core.const.Const.INPUTS", "dataset.rename_field", "dataset.rename_field", "dataset.rename_field", "dataset.rename_field", "RuntimeError", "core.const.Const.RAW_CHARS", "dataset.rename_field", "dataset.rename_field", "dataset.has_field", "core.const.Const.INPUTS", "core.const.Const.CHAR_INPUTS", "core.const.Const.INPUTS", "core.const.Const.CHAR_INPUTS", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_CHARS", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_CHARS", "core.const.Const.RAW_CHARS", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_CHARS", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_WORDS", "dataset.rename_field", "dataset.rename_field", "dataset.rename_field", "RuntimeError", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_CHARS", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_CHARS"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_CHARS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_CHARS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_CHARS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_CHARS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.CHAR_INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.CHAR_INPUTS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_CHARS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_CHARS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_CHARS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_CHARS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_CHARS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_CHARS"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "# rename field name for Chinese Matching dataset", "\n", "        ", "if", "(", "self", ".", "task", "==", "'cn-nli'", ")", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "if", "(", "dataset", ".", "has_field", "(", "Const", ".", "RAW_CHARS", "(", "0", ")", ")", ")", ":", "\n", "                    ", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_CHARS", "(", "0", ")", ",", "Const", ".", "RAW_WORDS", "(", "0", ")", ")", "# RAW_CHARS->RAW_WORDS", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_CHARS", "(", "1", ")", ",", "Const", ".", "RAW_WORDS", "(", "1", ")", ")", "\n", "", "elif", "(", "dataset", ".", "has_field", "(", "Const", ".", "INPUTS", "(", "0", ")", ")", ")", ":", "\n", "                    ", "dataset", ".", "rename_field", "(", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "CHAR_INPUTS", "(", "0", ")", ")", "# WORDS->CHARS", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "INPUTS", "(", "1", ")", ",", "Const", ".", "CHAR_INPUTS", "(", "1", ")", ")", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_WORDS", "(", "0", ")", ",", "Const", ".", "RAW_CHARS", "(", "0", ")", ")", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_WORDS", "(", "1", ")", ",", "Const", ".", "RAW_CHARS", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "\"field name of dataset is not qualified. It should have ether RAW_CHARS or WORDS\"", ")", "\n", "", "", "", "elif", "(", "self", ".", "task", "==", "'cn-nli-bert'", ")", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "if", "(", "dataset", ".", "has_field", "(", "Const", ".", "RAW_CHARS", "(", "0", ")", ")", ")", ":", "\n", "                    ", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_CHARS", "(", "0", ")", ",", "Const", ".", "RAW_WORDS", "(", "0", ")", ")", "# RAW_CHARS->RAW_WORDS", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_CHARS", "(", "1", ")", ",", "Const", ".", "RAW_WORDS", "(", "1", ")", ")", "\n", "", "elif", "(", "dataset", ".", "has_field", "(", "Const", ".", "RAW_WORDS", "(", "0", ")", ")", ")", ":", "\n", "                    ", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_WORDS", "(", "0", ")", ",", "Const", ".", "RAW_CHARS", "(", "0", ")", ")", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_WORDS", "(", "1", ")", ",", "Const", ".", "RAW_CHARS", "(", "1", ")", ")", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "INPUT", ",", "Const", ".", "CHAR_INPUT", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "\"field name of dataset is not qualified. It should have ether RAW_CHARS or RAW_WORDS\"", "\n", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Only support task='cn-nli' or 'cn-nli-bert'\"", "\n", ")", "\n", "\n", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.GranularizePipe.__init__": [[431, 434], ["pipe.Pipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.GranularizePipe._granularize": [[435, 451], ["list", "data_bundle.datasets.keys", "data_bundle.get_dataset", "data_bundle.get_dataset.apply_field", "data_bundle.get_dataset.drop", "data_bundle.set_dataset", "tag_map.get"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.get_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["", "def", "_granularize", "(", "self", ",", "data_bundle", ",", "tag_map", ")", ":", "\n", "        ", "r\"\"\"\n        \u8be5\u51fd\u6570\u5bf9data_bundle\u4e2d'target'\u5217\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u8f6c\u6362\u3002\n\n        :param data_bundle:\n        :param dict tag_map: \u5c06target\u5217\u4e2d\u7684tag\u505a\u4ee5\u4e0b\u7684\u6620\u5c04\uff0c\u6bd4\u5982{\"0\":0, \"1\":0, \"3\":1, \"4\":1}, \u5219\u4f1a\u5220\u9664target\u4e3a\"2\"\u7684instance\uff0c\n            \u4e14\u5c06\"1\"\u8ba4\u4e3a\u662f\u7b2c0\u7c7b\u3002\n        :return: \u4f20\u5165\u7684data_bundle\n        \"\"\"", "\n", "for", "name", "in", "list", "(", "data_bundle", ".", "datasets", ".", "keys", "(", ")", ")", ":", "\n", "            ", "dataset", "=", "data_bundle", ".", "get_dataset", "(", "name", ")", "\n", "dataset", ".", "apply_field", "(", "lambda", "target", ":", "tag_map", ".", "get", "(", "target", ",", "-", "100", ")", ",", "field_name", "=", "Const", ".", "TARGET", ",", "\n", "new_field_name", "=", "Const", ".", "TARGET", ")", "\n", "dataset", ".", "drop", "(", "lambda", "ins", ":", "ins", "[", "Const", ".", "TARGET", "]", "==", "-", "100", ")", "\n", "data_bundle", ".", "set_dataset", "(", "dataset", ",", "name", ")", "\n", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.GranularizePipe.process": [[452, 461], ["matching.GranularizePipe._granularize", "RuntimeError", "task_tag_dict.keys"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._granularize"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "task_tag_dict", "=", "{", "\n", "'XNLI'", ":", "{", "'neutral'", ":", "0", ",", "'entailment'", ":", "1", ",", "'contradictory'", ":", "2", ",", "'contradiction'", ":", "2", "}", "\n", "}", "\n", "if", "self", ".", "task", "in", "task_tag_dict", ":", "\n", "            ", "data_bundle", "=", "self", ".", "_granularize", "(", "data_bundle", "=", "data_bundle", ",", "tag_map", "=", "task_tag_dict", "[", "self", ".", "task", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Only support {task_tag_dict.keys()} task_tag_map.\"", ")", "\n", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.MachingTruncatePipe.__init__": [[464, 466], ["pipe.Pipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.MachingTruncatePipe.process": [[467, 471], ["data_bundle.datasets.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "pass", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.LCQMCBertPipe.__init__": [[474, 476], ["matching.MatchingBertPipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", "=", "'cn=char'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.LCQMCBertPipe.process_from_file": [[477, 484], ["loader.matching.LCQMCLoader().load", "matching.RenamePipe.process", "matching.LCQMCBertPipe.process", "matching.TruncateBertPipe.process", "matching.RenamePipe.process", "loader.matching.LCQMCLoader", "matching.RenamePipe", "matching.TruncateBertPipe", "matching.RenamePipe"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "LCQMCLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "RenamePipe", "(", "task", "=", "'cn-nli-bert'", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "TruncateBertPipe", "(", "task", "=", "'cn'", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", "task", "=", "'cn-nli-bert'", ")", ".", "process", "(", "data_bundle", ")", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.BQCorpusBertPipe.__init__": [[487, 489], ["matching.MatchingBertPipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", "=", "'cn-char'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.BQCorpusBertPipe.process_from_file": [[490, 497], ["loader.matching.BQCorpusLoader().load", "matching.RenamePipe.process", "matching.BQCorpusBertPipe.process", "matching.TruncateBertPipe.process", "matching.RenamePipe.process", "loader.matching.BQCorpusLoader", "matching.RenamePipe", "matching.TruncateBertPipe", "matching.RenamePipe"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "BQCorpusLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "RenamePipe", "(", "task", "=", "'cn-nli-bert'", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "TruncateBertPipe", "(", "task", "=", "'cn'", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", "task", "=", "'cn-nli-bert'", ")", ".", "process", "(", "data_bundle", ")", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.CNXNLIBertPipe.__init__": [[500, 502], ["matching.MatchingBertPipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", "=", "'cn-char'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.CNXNLIBertPipe.process_from_file": [[503, 511], ["loader.matching.CNXNLILoader().load", "matching.GranularizePipe.process", "matching.RenamePipe.process", "matching.CNXNLIBertPipe.process", "matching.TruncateBertPipe.process", "matching.RenamePipe.process", "loader.matching.CNXNLILoader", "matching.GranularizePipe", "matching.RenamePipe", "matching.TruncateBertPipe", "matching.RenamePipe"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "CNXNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "GranularizePipe", "(", "task", "=", "'XNLI'", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", "task", "=", "'cn-nli-bert'", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "TruncateBertPipe", "(", "task", "=", "'cn'", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", "task", "=", "'cn-nli-bert'", ")", ".", "process", "(", "data_bundle", ")", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.TruncateBertPipe.__init__": [[514, 517], ["pipe.Pipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task", "=", "'cn'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.TruncateBertPipe._truncate": [[518, 535], ["sentence_index.index", "RuntimeError"], "methods", ["None"], ["", "def", "_truncate", "(", "self", ",", "sentence_index", ":", "list", ",", "sep_index_vocab", ")", ":", "\n", "# \u6839\u636e[SEP]\u5728vocab\u4e2d\u7684index\uff0c\u627e\u5230[SEP]\u5728dataset\u7684field['words']\u4e2d\u7684index", "\n", "        ", "sep_index_words", "=", "sentence_index", ".", "index", "(", "sep_index_vocab", ")", "\n", "words_before_sep", "=", "sentence_index", "[", ":", "sep_index_words", "]", "\n", "words_after_sep", "=", "sentence_index", "[", "sep_index_words", ":", "]", "# \u6ce8\u610f\u6b64\u90e8\u5206\u5305\u62ec\u4e86[SEP]", "\n", "if", "self", ".", "task", "==", "'cn'", ":", "\n", "# \u4e2d\u6587\u4efb\u52a1\u5c06Instance['words']\u4e2d\u5728[SEP]\u524d\u540e\u7684\u6587\u672c\u5206\u522b\u622a\u81f3\u957f\u5ea6\u4e0d\u8d85\u8fc7250", "\n", "            ", "words_before_sep", "=", "words_before_sep", "[", ":", "250", "]", "\n", "words_after_sep", "=", "words_after_sep", "[", ":", "250", "]", "\n", "", "elif", "self", ".", "task", "==", "'en'", ":", "\n", "# \u82f1\u6587\u4efb\u52a1\u5c06Instance['words']\u4e2d\u5728[SEP]\u524d\u540e\u7684\u6587\u672c\u5206\u522b\u622a\u81f3\u957f\u5ea6\u4e0d\u8d85\u8fc7215", "\n", "            ", "words_before_sep", "=", "words_before_sep", "[", ":", "215", "]", "\n", "words_after_sep", "=", "words_after_sep", "[", ":", "215", "]", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Only support 'cn' or 'en' task.\"", ")", "\n", "\n", "", "return", "words_before_sep", "+", "words_after_sep", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.TruncateBertPipe.process": [[536, 545], ["data_bundle.datasets.keys", "data_bundle.get_dataset", "data_bundle.get_vocab().to_index", "data_bundle.get_dataset.apply_field", "data_bundle.get_dataset.add_seq_len", "data_bundle.get_vocab", "matching.TruncateBertPipe._truncate"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.get_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.get_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.matching.TruncateBertPipe._truncate"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", "->", "DataBundle", ":", "\n", "        ", "for", "name", "in", "data_bundle", ".", "datasets", ".", "keys", "(", ")", ":", "\n", "            ", "dataset", "=", "data_bundle", ".", "get_dataset", "(", "name", ")", "\n", "sep_index_vocab", "=", "data_bundle", ".", "get_vocab", "(", "'words'", ")", ".", "to_index", "(", "'[SEP]'", ")", "\n", "dataset", ".", "apply_field", "(", "lambda", "sent_index", ":", "self", ".", "_truncate", "(", "sentence_index", "=", "sent_index", ",", "sep_index_vocab", "=", "sep_index_vocab", ")", ",", "field_name", "=", "'words'", ",", "new_field_name", "=", "'words'", ")", "\n", "\n", "# truncate\u4e4b\u540e\u9700\u8981\u66f4\u65b0seq_len", "\n", "dataset", ".", "add_seq_len", "(", "field_name", "=", "'words'", ")", "\n", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.cws.CWSPipe.__init__": [[160, 179], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset_name", "=", "None", ",", "encoding_type", "=", "'bmes'", ",", "replace_num_alpha", "=", "True", ",", "bigrams", "=", "False", ",", "trigrams", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param str,None dataset_name: \u652f\u6301'pku', 'msra', 'cityu', 'as', None\n        :param str encoding_type: \u53ef\u4ee5\u9009\u62e9'bmes', 'segapp'\u4e24\u79cd\u3002\"\u6211 \u6765\u81ea \u590d\u65e6\u5927\u5b66...\", bmes\u7684tag\u4e3a[S, B, E, B, M, M, E...]; segapp\n            \u7684tag\u4e3a[seg, app, seg, app, app, app, seg, ...]\n        :param bool replace_num_alpha: \u662f\u5426\u5c06\u6570\u5b57\u548c\u5b57\u6bcd\u7528\u7279\u6b8a\u5b57\u7b26\u66ff\u6362\u3002\n        :param bool bigrams: \u662f\u5426\u589e\u52a0\u4e00\u5217bigram. bigram\u7684\u6784\u6210\u662f['\u590d', '\u65e6', '\u5927', '\u5b66', ...]->[\"\u590d\u65e6\", \"\u65e6\u5927\", ...]\n        :param bool trigrams: \u662f\u5426\u589e\u52a0\u4e00\u5217trigram. trigram\u7684\u6784\u6210\u662f ['\u590d', '\u65e6', '\u5927', '\u5b66', ...]->[\"\u590d\u65e6\u5927\", \"\u65e6\u5927\u5b66\", ...]\n        \"\"\"", "\n", "if", "encoding_type", "==", "'bmes'", ":", "\n", "            ", "self", ".", "word_lens_to_tags", "=", "_word_lens_to_bmes", "\n", "", "else", ":", "\n", "            ", "self", ".", "word_lens_to_tags", "=", "_word_lens_to_segapp", "\n", "\n", "", "self", ".", "dataset_name", "=", "dataset_name", "\n", "self", ".", "bigrams", "=", "bigrams", "\n", "self", ".", "trigrams", "=", "trigrams", "\n", "self", ".", "replace_num_alpha", "=", "replace_num_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.cws.CWSPipe._tokenize": [[180, 218], ["data_bundle.datasets.items", "raw_chars.split", "dataset.apply_field", "char.extend", "chars.append", "subchar.append", "subchar.append", "char.append", "subchar.append", "char.append", "char.extend", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_tokenize", "(", "self", ",", "data_bundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06data_bundle\u4e2d\u7684'chars'\u5217\u5207\u5206\u6210\u4e00\u4e2a\u4e00\u4e2a\u7684word.\n        \u4f8b\u5982\u8f93\u5165\u662f\"\u5171\u540c  \u521b\u9020  \u7f8e\u597d..\"->[[\u5171, \u540c], [\u521b, \u9020], [...], ]\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "def", "split_word_into_chars", "(", "raw_chars", ")", ":", "\n", "            ", "words", "=", "raw_chars", ".", "split", "(", ")", "\n", "chars", "=", "[", "]", "\n", "for", "word", "in", "words", ":", "\n", "                ", "char", "=", "[", "]", "\n", "subchar", "=", "[", "]", "\n", "for", "c", "in", "word", ":", "\n", "                    ", "if", "c", "==", "'<'", ":", "\n", "                        ", "if", "subchar", ":", "\n", "                            ", "char", ".", "extend", "(", "subchar", ")", "\n", "subchar", "=", "[", "]", "\n", "", "subchar", ".", "append", "(", "c", ")", "\n", "continue", "\n", "", "if", "c", "==", "'>'", "and", "len", "(", "subchar", ")", ">", "0", "and", "subchar", "[", "0", "]", "==", "'<'", ":", "\n", "                        ", "subchar", ".", "append", "(", "c", ")", "\n", "char", ".", "append", "(", "''", ".", "join", "(", "subchar", ")", ")", "\n", "subchar", "=", "[", "]", "\n", "continue", "\n", "", "if", "subchar", ":", "\n", "                        ", "subchar", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "                        ", "char", ".", "append", "(", "c", ")", "\n", "", "", "char", ".", "extend", "(", "subchar", ")", "\n", "chars", ".", "append", "(", "char", ")", "\n", "", "return", "chars", "\n", "\n", "", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply_field", "(", "split_word_into_chars", ",", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "\n", "new_field_name", "=", "Const", ".", "CHAR_INPUT", ")", "\n", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.cws.CWSPipe.process": [[219, 270], ["data_bundle.copy_field", "cws.CWSPipe._tokenize", "data_bundle.datasets.items", "utils._indexize", "data_bundle.datasets.items", "data_bundle.set_input", "data_bundle.set_target", "data_bundle.apply_field", "data_bundle.apply_field", "dataset.apply_field", "dataset.apply_field", "data_bundle.datasets.items", "input_field_names.append", "data_bundle.datasets.items", "input_field_names.append", "dataset.add_seq_len", "dataset.apply_field", "dataset.apply_field", "cws.CWSPipe.word_lens_to_tags", "list", "map", "itertools.chain", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.copy_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.WeiboSenti100kPipe._tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._indexize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", "->", "DataBundle", ":", "\n", "        ", "r\"\"\"\n        \u53ef\u4ee5\u5904\u7406\u7684DataSet\u9700\u8981\u5305\u542braw_words\u5217\n\n        .. csv-table::\n           :header: \"raw_words\"\n\n           \"\u4e0a\u6d77 \u6d66\u4e1c \u5f00\u53d1 \u4e0e \u6cd5\u5236 \u5efa\u8bbe \u540c\u6b65\"\n           \"\u65b0\u534e\u793e \u4e0a\u6d77 \u4e8c\u6708 \u5341\u65e5 \u7535 \uff08 \u8bb0\u8005 \u8c22\u91d1\u864e \u3001 \u5f20\u6301\u575a \uff09\"\n           \"...\"\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "data_bundle", ".", "copy_field", "(", "Const", ".", "RAW_WORD", ",", "Const", ".", "CHAR_INPUT", ")", "\n", "\n", "if", "self", ".", "replace_num_alpha", ":", "\n", "            ", "data_bundle", ".", "apply_field", "(", "_find_and_replace_alpha_spans", ",", "Const", ".", "CHAR_INPUT", ",", "Const", ".", "CHAR_INPUT", ")", "\n", "data_bundle", ".", "apply_field", "(", "_find_and_replace_digit_spans", ",", "Const", ".", "CHAR_INPUT", ",", "Const", ".", "CHAR_INPUT", ")", "\n", "\n", "", "self", ".", "_tokenize", "(", "data_bundle", ")", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply_field", "(", "lambda", "chars", ":", "self", ".", "word_lens_to_tags", "(", "map", "(", "len", ",", "chars", ")", ")", ",", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "\n", "new_field_name", "=", "Const", ".", "TARGET", ")", "\n", "dataset", ".", "apply_field", "(", "lambda", "chars", ":", "list", "(", "chain", "(", "*", "chars", ")", ")", ",", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "\n", "new_field_name", "=", "Const", ".", "CHAR_INPUT", ")", "\n", "", "input_field_names", "=", "[", "Const", ".", "CHAR_INPUT", "]", "\n", "if", "self", ".", "bigrams", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "chars", ":", "[", "c1", "+", "c2", "for", "c1", ",", "c2", "in", "zip", "(", "chars", ",", "chars", "[", "1", ":", "]", "+", "[", "'<eos>'", "]", ")", "]", ",", "\n", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "'bigrams'", ")", "\n", "", "input_field_names", ".", "append", "(", "'bigrams'", ")", "\n", "", "if", "self", ".", "trigrams", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "chars", ":", "[", "c1", "+", "c2", "+", "c3", "for", "c1", ",", "c2", ",", "c3", "in", "\n", "zip", "(", "chars", ",", "chars", "[", "1", ":", "]", "+", "[", "'<eos>'", "]", ",", "chars", "[", "2", ":", "]", "+", "[", "'<eos>'", "]", "*", "2", ")", "]", ",", "\n", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "'trigrams'", ")", "\n", "", "input_field_names", ".", "append", "(", "'trigrams'", ")", "\n", "\n", "", "_indexize", "(", "data_bundle", ",", "input_field_names", ",", "Const", ".", "TARGET", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "+", "input_field_names", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "CHAR_INPUT", ")", "\n", "\n", "", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.cws.CWSPipe.process_from_file": [[271, 284], ["loader.CWSLoader().load", "cws.CWSPipe.process", "RuntimeError", "RuntimeError", "loader.CWSLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", "->", "DataBundle", ":", "\n", "        ", "r\"\"\"\n        \n        :param str paths:\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "dataset_name", "is", "None", "and", "paths", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"You have to set `paths` when calling process_from_file() or `dataset_name `when initialization.\"", ")", "\n", "", "if", "self", ".", "dataset_name", "is", "not", "None", "and", "paths", "is", "not", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"You cannot specify `paths` and `dataset_name` simultaneously\"", ")", "\n", "", "data_bundle", "=", "CWSLoader", "(", "self", ".", "dataset_name", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.cws._word_lens_to_bmes": [[17, 32], ["tags.append", "tags.append", "tags.extend", "tags.append"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["def", "_word_lens_to_bmes", "(", "word_lens", ")", ":", "\n", "    ", "r\"\"\"\n\n    :param list word_lens: List[int], \u6bcf\u4e2a\u8bcd\u8bed\u7684\u957f\u5ea6\n    :return: List[str], BMES\u7684\u5e8f\u5217\n    \"\"\"", "\n", "tags", "=", "[", "]", "\n", "for", "word_len", "in", "word_lens", ":", "\n", "        ", "if", "word_len", "==", "1", ":", "\n", "            ", "tags", ".", "append", "(", "'S'", ")", "\n", "", "else", ":", "\n", "            ", "tags", ".", "append", "(", "'B'", ")", "\n", "tags", ".", "extend", "(", "[", "'M'", "]", "*", "(", "word_len", "-", "2", ")", ")", "\n", "tags", ".", "append", "(", "'E'", ")", "\n", "", "", "return", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.cws._word_lens_to_segapp": [[34, 48], ["tags.append", "tags.extend", "tags.append"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_word_lens_to_segapp", "(", "word_lens", ")", ":", "\n", "    ", "r\"\"\"\n\n    :param list word_lens: List[int], \u6bcf\u4e2a\u8bcd\u8bed\u7684\u957f\u5ea6\n    :return: List[str], BMES\u7684\u5e8f\u5217\n    \"\"\"", "\n", "tags", "=", "[", "]", "\n", "for", "word_len", "in", "word_lens", ":", "\n", "        ", "if", "word_len", "==", "1", ":", "\n", "            ", "tags", ".", "append", "(", "'SEG'", ")", "\n", "", "else", ":", "\n", "            ", "tags", ".", "extend", "(", "[", "'APP'", "]", "*", "(", "word_len", "-", "1", ")", ")", "\n", "tags", ".", "append", "(", "'SEG'", ")", "\n", "", "", "return", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.cws._alpha_span_to_special_tag": [[50, 63], ["span.lower", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["", "def", "_alpha_span_to_special_tag", "(", "span", ")", ":", "\n", "    ", "r\"\"\"\n    \u5c06span\u66ff\u6362\u6210\u7279\u6b8a\u7684\u5b57\u7b26\n\n    :param str span:\n    :return:\n    \"\"\"", "\n", "if", "'oo'", "==", "span", ".", "lower", "(", ")", ":", "# speical case when represent 2OO8", "\n", "        ", "return", "span", "\n", "", "if", "len", "(", "span", ")", "==", "1", ":", "\n", "        ", "return", "span", "\n", "", "else", ":", "\n", "        ", "return", "'<ENG>'", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.cws._find_and_replace_alpha_spans": [[65, 82], ["re.finditer", "match.span", "cws._alpha_span_to_special_tag"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.cws._alpha_span_to_special_tag"], ["", "", "def", "_find_and_replace_alpha_spans", "(", "line", ")", ":", "\n", "    ", "r\"\"\"\n    \u4f20\u5165\u539f\u59cb\u53e5\u5b50\uff0c\u66ff\u6362\u5176\u4e2d\u7684\u5b57\u6bcd\u4e3a\u7279\u6b8a\u6807\u8bb0\n\n    :param str line:\u539f\u59cb\u6570\u636e\n    :return: str\n    \"\"\"", "\n", "new_line", "=", "''", "\n", "pattern", "=", "'[a-zA-Z]+(?=[\\u4e00-\\u9fff \uff0c\uff05,.\u3002\uff01<\uff0d\u201c])'", "\n", "prev_end", "=", "0", "\n", "for", "match", "in", "re", ".", "finditer", "(", "pattern", ",", "line", ")", ":", "\n", "        ", "start", ",", "end", "=", "match", ".", "span", "(", ")", "\n", "span", "=", "line", "[", "start", ":", "end", "]", "\n", "new_line", "+=", "line", "[", "prev_end", ":", "start", "]", "+", "_alpha_span_to_special_tag", "(", "span", ")", "\n", "prev_end", "=", "end", "\n", "", "new_line", "+=", "line", "[", "prev_end", ":", "]", "\n", "return", "new_line", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.cws._digit_span_to_special_tag": [[84, 108], ["enumerate", "len"], "function", ["None"], ["", "def", "_digit_span_to_special_tag", "(", "span", ")", ":", "\n", "    ", "r\"\"\"\n\n    :param str span: \u9700\u8981\u66ff\u6362\u7684str\n    :return:\n    \"\"\"", "\n", "if", "span", "[", "0", "]", "==", "'0'", "and", "len", "(", "span", ")", ">", "2", ":", "\n", "        ", "return", "'<NUM>'", "\n", "", "decimal_point_count", "=", "0", "# one might have more than one decimal pointers", "\n", "for", "idx", ",", "char", "in", "enumerate", "(", "span", ")", ":", "\n", "        ", "if", "char", "==", "'.'", "or", "char", "==", "'\ufe52'", "or", "char", "==", "'\u00b7'", ":", "\n", "            ", "decimal_point_count", "+=", "1", "\n", "", "", "if", "span", "[", "-", "1", "]", "==", "'.'", "or", "span", "[", "-", "1", "]", "==", "'\ufe52'", "or", "span", "[", "\n", "-", "1", "]", "==", "'\u00b7'", ":", "# last digit being decimal point means this is not a number", "\n", "        ", "if", "decimal_point_count", "==", "1", ":", "\n", "            ", "return", "span", "\n", "", "else", ":", "\n", "            ", "return", "'<UNKDGT>'", "\n", "", "", "if", "decimal_point_count", "==", "1", ":", "\n", "        ", "return", "'<DEC>'", "\n", "", "elif", "decimal_point_count", ">", "1", ":", "\n", "        ", "return", "'<UNKDGT>'", "\n", "", "else", ":", "\n", "        ", "return", "'<NUM>'", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.cws._find_and_replace_digit_spans": [[110, 134], ["re.finditer", "match.span", "cws._digit_span_to_special_tag"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.cws._digit_span_to_special_tag"], ["", "", "def", "_find_and_replace_digit_spans", "(", "line", ")", ":", "\n", "    ", "r\"\"\"\n    only consider words start with number, contains '.', characters.\n    \n        If ends with space, will be processed\n        \n        If ends with Chinese character, will be processed\n        \n        If ends with or contains english char, not handled.\n    \n    floats are replaced by <DEC>\n    \n    otherwise unkdgt\n    \"\"\"", "\n", "new_line", "=", "''", "\n", "pattern", "=", "'\\d[\\d\\\\.\ufe52\u00b7]*(?=[\\u4e00-\\u9fff  \uff0c\uff05%,\u3002\uff01<\uff0d\u201c])'", "\n", "prev_end", "=", "0", "\n", "for", "match", "in", "re", ".", "finditer", "(", "pattern", ",", "line", ")", ":", "\n", "        ", "start", ",", "end", "=", "match", ".", "span", "(", ")", "\n", "span", "=", "line", "[", "start", ":", "end", "]", "\n", "new_line", "+=", "line", "[", "prev_end", ":", "start", "]", "+", "_digit_span_to_special_tag", "(", "span", ")", "\n", "prev_end", "=", "end", "\n", "", "new_line", "+=", "line", "[", "prev_end", ":", "]", "\n", "return", "new_line", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.conll._NERPipe.__init__": [[33, 46], ["ValueError", "utils.iob2bioes", "utils.iob2"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.iob2bioes", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.iob2"], ["def", "__init__", "(", "self", ",", "encoding_type", ":", "str", "=", "'bio'", ",", "lower", ":", "bool", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param: str encoding_type: target\u5217\u4f7f\u7528\u4ec0\u4e48\u7c7b\u578b\u7684encoding\u65b9\u5f0f\uff0c\u652f\u6301bioes, bio\u4e24\u79cd\u3002\n        :param bool lower: \u662f\u5426\u5c06words\u5c0f\u5199\u5316\u540e\u518d\u5efa\u7acb\u8bcd\u8868\uff0c\u7edd\u5927\u591a\u6570\u60c5\u51b5\u90fd\u4e0d\u9700\u8981\u8bbe\u7f6e\u4e3aTrue\u3002\n        \"\"\"", "\n", "if", "encoding_type", "==", "'bio'", ":", "\n", "            ", "self", ".", "convert_tag", "=", "iob2", "\n", "", "elif", "encoding_type", "==", "'bioes'", ":", "\n", "            ", "self", ".", "convert_tag", "=", "lambda", "words", ":", "iob2bioes", "(", "iob2", "(", "words", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"encoding_type only supports `bio` and `bioes`.\"", ")", "\n", "", "self", ".", "lower", "=", "lower", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.conll._NERPipe.process": [[47, 80], ["data_bundle.datasets.items", "utils._add_words_field", "utils._indexize", "data_bundle.datasets.items", "data_bundle.set_input", "data_bundle.set_target", "dataset.apply_field", "dataset.add_seq_len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._add_words_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._indexize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", "->", "DataBundle", ":", "\n", "        ", "r\"\"\"\n        \u652f\u6301\u7684DataSet\u7684field\u4e3a\n\n        .. csv-table::\n           :header: \"raw_words\", \"target\"\n\n           \"[Nadim, Ladki]\", \"[B-PER, I-PER]\"\n           \"[AL-AIN, United, Arab, ...]\", \"[B-LOC, B-LOC, I-LOC, ...]\"\n           \"[...]\", \"[...]\"\n\n        :param ~fastNLP.DataBundle data_bundle: \u4f20\u5165\u7684DataBundle\u4e2d\u7684DataSet\u5fc5\u987b\u5305\u542braw_words\u548cner\u4e24\u4e2afield\uff0c\u4e14\u4e24\u4e2afield\u7684\u5185\u5bb9\u5747\u4e3aList[str]\u5728\u4f20\u5165DataBundle\u57fa\u7840\u4e0a\u539f\u4f4d\u4fee\u6539\u3002\n        :return DataBundle:\n        \"\"\"", "\n", "# \u8f6c\u6362tag", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply_field", "(", "self", ".", "convert_tag", ",", "field_name", "=", "Const", ".", "TARGET", ",", "new_field_name", "=", "Const", ".", "TARGET", ")", "\n", "\n", "", "_add_words_field", "(", "data_bundle", ",", "lower", "=", "self", ".", "lower", ")", "\n", "\n", "# index", "\n", "_indexize", "(", "data_bundle", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT", ",", "Const", ".", "INPUT_LEN", "]", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUT", ")", "\n", "\n", "", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.conll.Conll2003NERPipe.process_from_file": [[112, 123], ["loader.conll.Conll2003NERLoader().load", "conll.Conll2003NERPipe.process", "loader.conll.Conll2003NERLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["def", "process_from_file", "(", "self", ",", "paths", ")", "->", "DataBundle", ":", "\n", "        ", "r\"\"\"\n\n        :param paths: \u652f\u6301\u8def\u5f84\u7c7b\u578b\u53c2\u89c1 :class:`fastNLP.io.loader.ConllLoader` \u7684load\u51fd\u6570\u3002\n        :return: DataBundle\n        \"\"\"", "\n", "# \u8bfb\u53d6\u6570\u636e", "\n", "data_bundle", "=", "Conll2003NERLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.conll.Conll2003Pipe.__init__": [[150, 170], ["ValueError", "ValueError", "utils.iob2bioes", "utils.iob2bioes", "utils.iob2", "utils.iob2"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.iob2bioes", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.iob2bioes", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.iob2", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.iob2"], ["def", "__init__", "(", "self", ",", "chunk_encoding_type", "=", "'bioes'", ",", "ner_encoding_type", "=", "'bioes'", ",", "lower", ":", "bool", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param str chunk_encoding_type: \u652f\u6301bioes, bio\u3002\n        :param str ner_encoding_type: \u652f\u6301bioes, bio\u3002\n        :param bool lower: \u662f\u5426\u5c06words\u5217\u5c0f\u5199\u5316\u540e\u518d\u5efa\u7acb\u8bcd\u8868\n        \"\"\"", "\n", "if", "chunk_encoding_type", "==", "'bio'", ":", "\n", "            ", "self", ".", "chunk_convert_tag", "=", "iob2", "\n", "", "elif", "chunk_encoding_type", "==", "'bioes'", ":", "\n", "            ", "self", ".", "chunk_convert_tag", "=", "lambda", "tags", ":", "iob2bioes", "(", "iob2", "(", "tags", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"chunk_encoding_type only supports `bio` and `bioes`.\"", ")", "\n", "", "if", "ner_encoding_type", "==", "'bio'", ":", "\n", "            ", "self", ".", "ner_convert_tag", "=", "iob2", "\n", "", "elif", "ner_encoding_type", "==", "'bioes'", ":", "\n", "            ", "self", ".", "ner_convert_tag", "=", "lambda", "tags", ":", "iob2bioes", "(", "iob2", "(", "tags", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"ner_encoding_type only supports `bio` and `bioes`.\"", ")", "\n", "", "self", ".", "lower", "=", "lower", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.conll.Conll2003Pipe.process": [[171, 211], ["data_bundle.datasets.items", "utils._add_words_field", "utils._indexize", "core.vocabulary.Vocabulary", "core.vocabulary.Vocabulary.from_dataset", "core.vocabulary.Vocabulary.index_dataset", "data_bundle.set_vocab", "data_bundle.datasets.items", "data_bundle.set_input", "data_bundle.set_target", "dataset.drop", "dataset.apply_field", "dataset.apply_field", "dataset.add_seq_len", "data_bundle.datasets.values", "data_bundle.datasets.values"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._add_words_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._indexize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.from_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len"], ["", "def", "process", "(", "self", ",", "data_bundle", ")", "->", "DataBundle", ":", "\n", "        ", "r\"\"\"\n        \u8f93\u5165\u7684DataSet\u5e94\u8be5\u7c7b\u4f3c\u4e8e\u5982\u4e0b\u7684\u5f62\u5f0f\n\n        .. csv-table::\n           :header: \"raw_words\", \"pos\", \"chunk\", \"ner\"\n\n           \"[Nadim, Ladki]\", \"[NNP, NNP]\", \"[B-NP, I-NP]\", \"[B-PER, I-PER]\"\n           \"[AL-AIN, United, Arab, ...]\", \"[NNP, NNP...]\", \"[B-NP, B-NP, ...]\", \"[B-LOC, B-LOC,...]\"\n           \"[...]\", \"[...]\", \"[...]\", \"[...]\", .\n\n        :param data_bundle:\n        :return: \u4f20\u5165\u7684DataBundle\n        \"\"\"", "\n", "# \u8f6c\u6362tag", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "drop", "(", "lambda", "x", ":", "\"-DOCSTART-\"", "in", "x", "[", "Const", ".", "RAW_WORD", "]", ")", "\n", "dataset", ".", "apply_field", "(", "self", ".", "chunk_convert_tag", ",", "field_name", "=", "'chunk'", ",", "new_field_name", "=", "'chunk'", ")", "\n", "dataset", ".", "apply_field", "(", "self", ".", "ner_convert_tag", ",", "field_name", "=", "'ner'", ",", "new_field_name", "=", "'ner'", ")", "\n", "\n", "", "_add_words_field", "(", "data_bundle", ",", "lower", "=", "self", ".", "lower", ")", "\n", "\n", "# index", "\n", "_indexize", "(", "data_bundle", ",", "input_field_names", "=", "Const", ".", "INPUT", ",", "target_field_names", "=", "[", "'pos'", ",", "'ner'", "]", ")", "\n", "# chunk\u4e2d\u5b58\u5728\u4e00\u4e9btag\u53ea\u5728dev\u4e2d\u51fa\u73b0\uff0c\u6ca1\u5728train\u4e2d", "\n", "tgt_vocab", "=", "Vocabulary", "(", "unknown", "=", "None", ",", "padding", "=", "None", ")", "\n", "tgt_vocab", ".", "from_dataset", "(", "*", "data_bundle", ".", "datasets", ".", "values", "(", ")", ",", "field_name", "=", "'chunk'", ")", "\n", "tgt_vocab", ".", "index_dataset", "(", "*", "data_bundle", ".", "datasets", ".", "values", "(", ")", ",", "field_name", "=", "'chunk'", ")", "\n", "data_bundle", ".", "set_vocab", "(", "tgt_vocab", ",", "'chunk'", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "INPUT", ",", "Const", ".", "INPUT_LEN", "]", "\n", "target_fields", "=", "[", "'pos'", ",", "'ner'", ",", "'chunk'", ",", "Const", ".", "INPUT_LEN", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUT", ")", "\n", "\n", "", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.conll.Conll2003Pipe.process_from_file": [[212, 220], ["loader.conll.ConllLoader().load", "conll.Conll2003Pipe.process", "loader.conll.ConllLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param paths:\n        :return:\n        \"\"\"", "\n", "data_bundle", "=", "ConllLoader", "(", "headers", "=", "[", "'raw_words'", ",", "'pos'", ",", "'chunk'", ",", "'ner'", "]", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.conll.OntoNotesNERPipe.process_from_file": [[249, 252], ["loader.conll.OntoNotesNERLoader().load", "conll.OntoNotesNERPipe.process", "loader.conll.OntoNotesNERLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["def", "process_from_file", "(", "self", ",", "paths", ")", ":", "\n", "        ", "data_bundle", "=", "OntoNotesNERLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.conll._CNNERPipe.__init__": [[265, 285], ["ValueError", "utils.iob2bioes", "utils.iob2"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.iob2bioes", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.iob2"], ["def", "__init__", "(", "self", ",", "encoding_type", ":", "str", "=", "'bio'", ",", "bigrams", "=", "False", ",", "trigrams", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param str encoding_type: target\u5217\u4f7f\u7528\u4ec0\u4e48\u7c7b\u578b\u7684encoding\u65b9\u5f0f\uff0c\u652f\u6301bioes, bio\u4e24\u79cd\u3002\n        :param bool bigrams: \u662f\u5426\u589e\u52a0\u4e00\u5217bigrams. bigrams\u7684\u6784\u6210\u662f['\u590d', '\u65e6', '\u5927', '\u5b66', ...]->[\"\u590d\u65e6\", \"\u65e6\u5927\", ...]\u3002\u5982\u679c\n            \u8bbe\u7f6e\u4e3aTrue\uff0c\u8fd4\u56de\u7684DataSet\u5c06\u6709\u4e00\u5217\u540d\u4e3abigrams, \u4e14\u5df2\u7ecf\u8f6c\u6362\u4e3a\u4e86index\u5e76\u8bbe\u7f6e\u4e3ainput\uff0c\u5bf9\u5e94\u7684vocab\u53ef\u4ee5\u901a\u8fc7\n            data_bundle.get_vocab('bigrams')\u83b7\u53d6.\n        :param bool trigrams: \u662f\u5426\u589e\u52a0\u4e00\u5217trigrams. trigrams\u7684\u6784\u6210\u662f ['\u590d', '\u65e6', '\u5927', '\u5b66', ...]->[\"\u590d\u65e6\u5927\", \"\u65e6\u5927\u5b66\", ...]\n            \u3002\u5982\u679c\u8bbe\u7f6e\u4e3aTrue\uff0c\u8fd4\u56de\u7684DataSet\u5c06\u6709\u4e00\u5217\u540d\u4e3atrigrams, \u4e14\u5df2\u7ecf\u8f6c\u6362\u4e3a\u4e86index\u5e76\u8bbe\u7f6e\u4e3ainput\uff0c\u5bf9\u5e94\u7684vocab\u53ef\u4ee5\u901a\u8fc7\n            data_bundle.get_vocab('trigrams')\u83b7\u53d6.\n        \"\"\"", "\n", "if", "encoding_type", "==", "'bio'", ":", "\n", "            ", "self", ".", "convert_tag", "=", "iob2", "\n", "", "elif", "encoding_type", "==", "'bioes'", ":", "\n", "            ", "self", ".", "convert_tag", "=", "lambda", "words", ":", "iob2bioes", "(", "iob2", "(", "words", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"encoding_type only supports `bio` and `bioes`.\"", ")", "\n", "\n", "", "self", ".", "bigrams", "=", "bigrams", "\n", "self", ".", "trigrams", "=", "trigrams", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.conll._CNNERPipe.process": [[286, 335], ["data_bundle.datasets.items", "utils._add_chars_field", "utils._indexize", "data_bundle.datasets.items", "data_bundle.set_input", "data_bundle.set_target", "dataset.apply_field", "data_bundle.datasets.items", "input_field_names.append", "data_bundle.datasets.items", "input_field_names.append", "dataset.add_seq_len", "dataset.apply_field", "dataset.apply_field", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._add_chars_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._indexize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", "->", "DataBundle", ":", "\n", "        ", "r\"\"\"\n        \u652f\u6301\u7684DataSet\u7684field\u4e3a\n\n        .. csv-table::\n           :header: \"raw_chars\", \"target\"\n\n           \"[\u76f8, \u6bd4, \u4e4b, \u4e0b,...]\", \"[O, O, O, O, ...]\"\n           \"[\u9752, \u5c9b, \u6d77, \u725b, \u961f, \u548c, ...]\", \"[B-ORG, I-ORG, I-ORG, ...]\"\n           \"[...]\", \"[...]\"\n\n        raw_chars\u5217\u4e3aList[str], \u662f\u672a\u8f6c\u6362\u7684\u539f\u59cb\u6570\u636e; chars\u5217\u4e3aList[int]\uff0c\u662f\u8f6c\u6362\u4e3aindex\u7684\u8f93\u5165\u6570\u636e; target\u5217\u662fList[int]\uff0c\n        \u662f\u8f6c\u6362\u4e3aindex\u7684target\u3002\u8fd4\u56de\u7684DataSet\u4e2d\u88ab\u8bbe\u7f6e\u4e3ainput\u6709chars, target, seq_len; \u8bbe\u7f6e\u4e3atarget\u6709target\u3002\n\n        :param ~fastNLP.DataBundle data_bundle: \u4f20\u5165\u7684DataBundle\u4e2d\u7684DataSet\u5fc5\u987b\u5305\u542braw_words\u548cner\u4e24\u4e2afield\uff0c\u4e14\u4e24\u4e2afield\u7684\u5185\u5bb9\u5747\u4e3aList[str]\u3002\u5728\u4f20\u5165DataBundle\u57fa\u7840\u4e0a\u539f\u4f4d\u4fee\u6539\u3002\n        :return: DataBundle\n        \"\"\"", "\n", "# \u8f6c\u6362tag", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply_field", "(", "self", ".", "convert_tag", ",", "field_name", "=", "Const", ".", "TARGET", ",", "new_field_name", "=", "Const", ".", "TARGET", ")", "\n", "\n", "", "_add_chars_field", "(", "data_bundle", ",", "lower", "=", "False", ")", "\n", "\n", "input_field_names", "=", "[", "Const", ".", "CHAR_INPUT", "]", "\n", "if", "self", ".", "bigrams", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "chars", ":", "[", "c1", "+", "c2", "for", "c1", ",", "c2", "in", "zip", "(", "chars", ",", "chars", "[", "1", ":", "]", "+", "[", "'<eos>'", "]", ")", "]", ",", "\n", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "'bigrams'", ")", "\n", "", "input_field_names", ".", "append", "(", "'bigrams'", ")", "\n", "", "if", "self", ".", "trigrams", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "chars", ":", "[", "c1", "+", "c2", "+", "c3", "for", "c1", ",", "c2", ",", "c3", "in", "\n", "zip", "(", "chars", ",", "chars", "[", "1", ":", "]", "+", "[", "'<eos>'", "]", ",", "chars", "[", "2", ":", "]", "+", "[", "'<eos>'", "]", "*", "2", ")", "]", ",", "\n", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "'trigrams'", ")", "\n", "", "input_field_names", ".", "append", "(", "'trigrams'", ")", "\n", "\n", "# index", "\n", "", "_indexize", "(", "data_bundle", ",", "input_field_names", ",", "Const", ".", "TARGET", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "+", "input_field_names", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "CHAR_INPUT", ")", "\n", "\n", "", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.conll.MsraNERPipe.process_from_file": [[364, 367], ["loader.conll.MsraNERLoader().load", "conll.MsraNERPipe.process", "loader.conll.MsraNERLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", "->", "DataBundle", ":", "\n", "        ", "data_bundle", "=", "MsraNERLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.conll.PeopleDailyPipe.process_from_file": [[396, 399], ["loader.conll.PeopleDailyNERLoader().load", "conll.PeopleDailyPipe.process", "loader.conll.PeopleDailyNERLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", "->", "DataBundle", ":", "\n", "        ", "data_bundle", "=", "PeopleDailyNERLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.conll.WeiboNERPipe.process_from_file": [[428, 431], ["loader.conll.WeiboNERLoader().load", "conll.WeiboNERPipe.process", "loader.conll.WeiboNERLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", "->", "DataBundle", ":", "\n", "        ", "data_bundle", "=", "WeiboNERLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.qa.CMRC2018BertPipe.__init__": [[109, 112], ["pipe.Pipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "max_len", "=", "510", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_len", "=", "max_len", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.qa.CMRC2018BertPipe.process": [[113, 143], ["qa._concat_clip", "core.Vocabulary", "core.Vocabulary.from_dataset", "core.Vocabulary.index_dataset", "_concat_clip.set_vocab", "_concat_clip.set_ignore_type", "_concat_clip.set_input", "_concat_clip.set_target", "_concat_clip.datasets.values", "_concat_clip.iter_datasets", "_concat_clip.iter_datasets"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.qa._concat_clip", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.from_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_ignore_type", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", "->", "DataBundle", ":", "\n", "        ", "r\"\"\"\n        \u4f20\u5165\u7684DataSet\u5e94\u8be5\u5177\u5907\u4ee5\u4e0b\u7684field\n\n        .. csv-table::\n           :header:\"title\", \"context\", \"question\", \"answers\", \"answer_starts\", \"id\"\n\n           \"\u8303\u5ef7\u9882\", \"\u8303\u5ef7\u9882\u67a2\u673a\uff08\uff0c\uff09\uff0c\u5723\u540d\u4fdd\u7984\u00b7\u82e5\u745f\uff08\uff09...\", \"\u8303\u5ef7\u9882\u662f\u4ec0\u4e48\u65f6\u5019\u88ab\u4efb\u4e3a\u4e3b\u6559\u7684\uff1f\", [\"1963\u5e74\"], [\"30\"], \"TRAIN_186_QUERY_0\"\n           \"\u8303\u5ef7\u9882\", \"\u8303\u5ef7\u9882\u67a2\u673a\uff08\uff0c\uff09\uff0c\u5723\u540d\u4fdd\u7984\u00b7\u82e5\u745f\uff08\uff09...\", \"1990\u5e74\uff0c\u8303\u5ef7\u9882\u62c5\u4efb\u4ec0\u4e48\u804c\u52a1\uff1f\", [\"1990\u5e74\u88ab\u64e2\u5347\u4e3a\u5929...\"], [\"41\"],\"TRAIN_186_QUERY_1\"\n           \"...\", \"...\", \"...\",\"...\", \".\", \"...\"\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "data_bundle", "=", "_concat_clip", "(", "data_bundle", ",", "max_len", "=", "self", ".", "max_len", ",", "concat_field_name", "=", "'raw_chars'", ")", "\n", "\n", "src_vocab", "=", "Vocabulary", "(", ")", "\n", "src_vocab", ".", "from_dataset", "(", "*", "[", "ds", "for", "name", ",", "ds", "in", "data_bundle", ".", "iter_datasets", "(", ")", "if", "'train'", "in", "name", "]", ",", "\n", "field_name", "=", "'raw_chars'", ",", "\n", "no_create_entry_dataset", "=", "[", "ds", "for", "name", ",", "ds", "in", "data_bundle", ".", "iter_datasets", "(", ")", "\n", "if", "'train'", "not", "in", "name", "]", "\n", ")", "\n", "src_vocab", ".", "index_dataset", "(", "*", "data_bundle", ".", "datasets", ".", "values", "(", ")", ",", "field_name", "=", "'raw_chars'", ",", "new_field_name", "=", "'chars'", ")", "\n", "data_bundle", ".", "set_vocab", "(", "src_vocab", ",", "'chars'", ")", "\n", "\n", "data_bundle", ".", "set_ignore_type", "(", "'raw_chars'", ",", "'answers'", ",", "flag", "=", "True", ")", "\n", "data_bundle", ".", "set_input", "(", "'chars'", ")", "\n", "data_bundle", ".", "set_target", "(", "'raw_chars'", ",", "'answers'", ",", "'target_start'", ",", "'target_end'", ",", "'context_len'", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.qa.CMRC2018BertPipe.process_from_file": [[144, 147], ["loader.qa.CMRC2018Loader().load", "qa.CMRC2018BertPipe.process", "loader.qa.CMRC2018Loader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", "->", "DataBundle", ":", "\n", "        ", "data_bundle", "=", "CMRC2018Loader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.qa._concat_clip": [[19, 78], ["utils.get_tokenizer", "list", "data_bundle.datasets.keys", "data_bundle.get_dataset", "data_bundle.delete_dataset", "core.DataSet", "data_bundle.set_dataset", "copy.deepcopy", "utils.get_tokenizer.", "utils.get_tokenizer.", "len", "core.DataSet.append", "int", "int", "int", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils.get_tokenizer", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.get_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.delete_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["def", "_concat_clip", "(", "data_bundle", ",", "max_len", ",", "concat_field_name", "=", "'raw_chars'", ")", ":", "\n", "    ", "r\"\"\"\n    \u5904\u7406data_bundle\u4e2d\u7684DataSet\uff0c\u5c06context\u4e0equestion\u6309\u7167character\u8fdb\u884ctokenize\uff0c\u7136\u540e\u4f7f\u7528[SEP]\u5c06\u4e24\u8005\u8fde\u63a5\u8d77\u6765\u3002\n\n    \u4f1a\u65b0\u589efield: context_len(int), raw_words(list[str]), target_start(int), target_end(int)\u5176\u4e2dtarget_start\n    \u4e0etarget_end\u662f\u4e0eraw_chars\u7b49\u957f\u7684\u3002\u5176\u4e2dtarget_start\u548ctarget_end\u662f\u524d\u95ed\u540e\u95ed\u7684\u533a\u95f4\u3002\n\n    :param DataBundle data_bundle: \u7c7b\u4f3c[\"a\", \"b\", \"[SEP]\", \"c\", ]\n    :return:\n    \"\"\"", "\n", "tokenizer", "=", "get_tokenizer", "(", "'cn-char'", ",", "lang", "=", "'cn'", ")", "\n", "for", "name", "in", "list", "(", "data_bundle", ".", "datasets", ".", "keys", "(", ")", ")", ":", "\n", "        ", "ds", "=", "data_bundle", ".", "get_dataset", "(", "name", ")", "\n", "data_bundle", ".", "delete_dataset", "(", "name", ")", "\n", "new_ds", "=", "DataSet", "(", ")", "\n", "for", "ins", "in", "ds", ":", "\n", "            ", "new_ins", "=", "deepcopy", "(", "ins", ")", "\n", "context", "=", "ins", "[", "'context'", "]", "\n", "question", "=", "ins", "[", "'question'", "]", "\n", "\n", "cnt_lst", "=", "tokenizer", "(", "context", ")", "\n", "q_lst", "=", "tokenizer", "(", "question", ")", "\n", "\n", "answer_start", "=", "-", "1", "\n", "\n", "if", "len", "(", "cnt_lst", ")", "+", "len", "(", "q_lst", ")", "+", "3", ">", "max_len", ":", "# \u9884\u7559\u5f00\u5934\u7684[CLS]\u548c[SEP]\u548c\u4e2d\u95f4\u7684[sep]", "\n", "                ", "if", "'answer_starts'", "in", "ins", "and", "'answers'", "in", "ins", ":", "\n", "                    ", "answer_start", "=", "int", "(", "ins", "[", "'answer_starts'", "]", "[", "0", "]", ")", "\n", "answer", "=", "ins", "[", "'answers'", "]", "[", "0", "]", "\n", "answer_end", "=", "answer_start", "+", "len", "(", "answer", ")", "\n", "if", "answer_end", ">", "max_len", "-", "3", "-", "len", "(", "q_lst", ")", ":", "\n", "                        ", "span_start", "=", "answer_end", "+", "3", "+", "len", "(", "q_lst", ")", "-", "max_len", "\n", "span_end", "=", "answer_end", "\n", "", "else", ":", "\n", "                        ", "span_start", "=", "0", "\n", "span_end", "=", "max_len", "-", "3", "-", "len", "(", "q_lst", ")", "\n", "", "cnt_lst", "=", "cnt_lst", "[", "span_start", ":", "span_end", "]", "\n", "answer_start", "=", "int", "(", "ins", "[", "'answer_starts'", "]", "[", "0", "]", ")", "\n", "answer_start", "-=", "span_start", "\n", "answer_end", "=", "answer_start", "+", "len", "(", "ins", "[", "'answers'", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "cnt_lst", "=", "cnt_lst", "[", ":", "max_len", "-", "len", "(", "q_lst", ")", "-", "3", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "'answer_starts'", "in", "ins", "and", "'answers'", "in", "ins", ":", "\n", "                    ", "answer_start", "=", "int", "(", "ins", "[", "'answer_starts'", "]", "[", "0", "]", ")", "\n", "answer_end", "=", "answer_start", "+", "len", "(", "ins", "[", "'answers'", "]", "[", "0", "]", ")", "\n", "\n", "", "", "tokens", "=", "cnt_lst", "+", "[", "'[SEP]'", "]", "+", "q_lst", "\n", "new_ins", "[", "'context_len'", "]", "=", "len", "(", "cnt_lst", ")", "\n", "new_ins", "[", "concat_field_name", "]", "=", "tokens", "\n", "\n", "if", "answer_start", "!=", "-", "1", ":", "\n", "                ", "new_ins", "[", "'target_start'", "]", "=", "answer_start", "\n", "new_ins", "[", "'target_end'", "]", "=", "answer_end", "-", "1", "\n", "\n", "", "new_ds", ".", "append", "(", "new_ins", ")", "\n", "", "data_bundle", ".", "set_dataset", "(", "new_ds", ",", "name", ")", "\n", "\n", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization.ExtCNNDMPipe.__init__": [[28, 42], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "sent_max_len", ",", "doc_max_timesteps", ",", "vocab_path", "=", "None", ",", "domain", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param vocab_size: int, \u8bcd\u8868\u5927\u5c0f\n        :param sent_max_len: int, \u53e5\u5b50\u6700\u5927\u957f\u5ea6\uff0c\u4e0d\u8db3\u7684\u53e5\u5b50\u5c06padding\uff0c\u8d85\u51fa\u7684\u5c06\u622a\u65ad\n        :param doc_max_timesteps: int, \u6587\u7ae0\u6700\u591a\u53e5\u5b50\u4e2a\u6570\uff0c\u4e0d\u8db3\u7684\u5c06padding\uff0c\u8d85\u51fa\u7684\u5c06\u622a\u65ad\n        :param vocab_path: str, \u5916\u90e8\u8bcd\u8868\u8def\u5f84\n        :param domain:  bool, \u662f\u5426\u9700\u8981\u5efa\u7acbdomain\u8bcd\u8868\n        \"\"\"", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "vocab_path", "=", "vocab_path", "\n", "self", ".", "sent_max_len", "=", "sent_max_len", "\n", "self", ".", "doc_max_timesteps", "=", "doc_max_timesteps", "\n", "self", ".", "domain", "=", "domain", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization.ExtCNNDMPipe.process": [[43, 108], ["utils._drop_empty_instance.apply", "utils._drop_empty_instance.apply", "utils._drop_empty_instance.apply", "utils._drop_empty_instance.apply", "utils._drop_empty_instance.apply", "utils._drop_empty_instance.apply", "utils._drop_empty_instance.apply", "utils._drop_empty_instance.apply", "utils._drop_empty_instance", "utils._drop_empty_instance.set_input", "utils._drop_empty_instance.set_target", "core.vocabulary.Vocabulary", "core.vocabulary.Vocabulary.add_word_lst", "core.vocabulary.Vocabulary.build_vocab", "utils._drop_empty_instance.set_vocab", "core._logger.logger.error", "RuntimeError", "open", "core.vocabulary.Vocabulary", "core.vocabulary.Vocabulary.from_dataset", "utils._drop_empty_instance.set_vocab", "summarization._lower_text", "summarization._lower_text", "summarization._split_list", "summarization._convert_label", "summarization._pad_sent", "summarization._pad_doc", "summarization._sent_mask", "summarization._pad_label", "line.split", "word_list.append", "utils._drop_empty_instance.get_dataset", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._drop_empty_instance", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word_lst", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.build_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.from_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._lower_text", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._lower_text", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._split_list", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._convert_label", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._pad_sent", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._pad_doc", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._sent_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._pad_label", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.get_dataset"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f20\u5165\u7684DataSet\u5e94\u8be5\u5177\u5907\u5982\u4e0b\u7684\u7ed3\u6784\n\n        .. csv-table::\n           :header: \"text\", \"summary\", \"label\", \"publication\"\n\n           [\"I got new tires from them and... \",\"...\"], [\"The new tires...\",\"...\"], [0, 1], \"cnndm\"\n           [\"Don't waste your time.  We had two...\",\"...\"], [\"Time is precious\",\"...\"], [1], \"cnndm\"\n           [\"...\"], [\"...\"], [], \"cnndm\"\n\n        :param data_bundle:\n        :return: \u5904\u7406\u5f97\u5230\u7684\u6570\u636e\u5305\u62ec\n         .. csv-table::\n           :header: \"text_wd\", \"words\", \"seq_len\", \"target\"\n\n           [[\"I\",\"got\",...\".\"],...,[\"...\"]], [[54,89,...,5],...,[9,43,..,0]], [1,1,...,0], [0,1,...,0]\n           [[\"Don't\",\"waste\",...,\".\"],...,[\"...\"]], [[5234,653,...,5],...,[87,234,..,0]], [1,1,...,0], [1,1,...,0]\n           [[\"\"],...,[\"\"]], [[],...,[]], [], []\n        \"\"\"", "\n", "\n", "if", "self", ".", "vocab_path", "is", "None", ":", "\n", "            ", "error_msg", "=", "'vocab file is not defined!'", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "RuntimeError", "(", "error_msg", ")", "\n", "", "data_bundle", ".", "apply", "(", "lambda", "x", ":", "_lower_text", "(", "x", "[", "'text'", "]", ")", ",", "new_field_name", "=", "'text'", ")", "\n", "data_bundle", ".", "apply", "(", "lambda", "x", ":", "_lower_text", "(", "x", "[", "'summary'", "]", ")", ",", "new_field_name", "=", "'summary'", ")", "\n", "data_bundle", ".", "apply", "(", "lambda", "x", ":", "_split_list", "(", "x", "[", "'text'", "]", ")", ",", "new_field_name", "=", "'text_wd'", ")", "\n", "data_bundle", ".", "apply", "(", "lambda", "x", ":", "_convert_label", "(", "x", "[", "\"label\"", "]", ",", "len", "(", "x", "[", "\"text\"", "]", ")", ")", ",", "new_field_name", "=", "Const", ".", "TARGET", ")", "\n", "\n", "data_bundle", ".", "apply", "(", "lambda", "x", ":", "_pad_sent", "(", "x", "[", "\"text_wd\"", "]", ",", "self", ".", "sent_max_len", ")", ",", "new_field_name", "=", "Const", ".", "INPUT", ")", "\n", "# db.apply(lambda x: _token_mask(x[\"text_wd\"], self.sent_max_len), new_field_name=\"pad_token_mask\")", "\n", "\n", "# pad document", "\n", "data_bundle", ".", "apply", "(", "lambda", "x", ":", "_pad_doc", "(", "x", "[", "Const", ".", "INPUT", "]", ",", "self", ".", "sent_max_len", ",", "self", ".", "doc_max_timesteps", ")", ",", "new_field_name", "=", "Const", ".", "INPUT", ")", "\n", "data_bundle", ".", "apply", "(", "lambda", "x", ":", "_sent_mask", "(", "x", "[", "Const", ".", "INPUT", "]", ",", "self", ".", "doc_max_timesteps", ")", ",", "new_field_name", "=", "Const", ".", "INPUT_LEN", ")", "\n", "data_bundle", ".", "apply", "(", "lambda", "x", ":", "_pad_label", "(", "x", "[", "Const", ".", "TARGET", "]", ",", "self", ".", "doc_max_timesteps", ")", ",", "new_field_name", "=", "Const", ".", "TARGET", ")", "\n", "\n", "data_bundle", "=", "_drop_empty_instance", "(", "data_bundle", ",", "\"label\"", ")", "\n", "\n", "# set input and target", "\n", "data_bundle", ".", "set_input", "(", "Const", ".", "INPUT", ",", "Const", ".", "INPUT_LEN", ")", "\n", "data_bundle", ".", "set_target", "(", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", ")", "\n", "\n", "# print(\"[INFO] Load existing vocab from %s!\" % self.vocab_path)", "\n", "word_list", "=", "[", "]", "\n", "with", "open", "(", "self", ".", "vocab_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "vocab_f", ":", "\n", "            ", "cnt", "=", "2", "# pad and unk", "\n", "for", "line", "in", "vocab_f", ":", "\n", "                ", "pieces", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "word_list", ".", "append", "(", "pieces", "[", "0", "]", ")", "\n", "cnt", "+=", "1", "\n", "if", "cnt", ">", "self", ".", "vocab_size", ":", "\n", "                    ", "break", "\n", "", "", "", "vocabs", "=", "Vocabulary", "(", "max_size", "=", "self", ".", "vocab_size", ",", "padding", "=", "WORD_PAD", ",", "unknown", "=", "WORD_UNK", ")", "\n", "vocabs", ".", "add_word_lst", "(", "word_list", ")", "\n", "vocabs", ".", "build_vocab", "(", ")", "\n", "data_bundle", ".", "set_vocab", "(", "vocabs", ",", "\"vocab\"", ")", "\n", "\n", "if", "self", ".", "domain", "is", "True", ":", "\n", "            ", "domaindict", "=", "Vocabulary", "(", "padding", "=", "None", ",", "unknown", "=", "DOMAIN_UNK", ")", "\n", "domaindict", ".", "from_dataset", "(", "data_bundle", ".", "get_dataset", "(", "\"train\"", ")", ",", "field_name", "=", "\"publication\"", ")", "\n", "data_bundle", ".", "set_vocab", "(", "domaindict", ",", "\"domain\"", ")", "\n", "\n", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization.ExtCNNDMPipe.process_from_file": [[109, 129], ["loader.summarization.ExtCNNDMLoader.summarization.ExtCNNDMLoader", "loader.summarization.ExtCNNDMLoader.summarization.ExtCNNDMLoader.load", "summarization.ExtCNNDMPipe.process", "summarization.ExtCNNDMPipe.datasets.values", "os.path.join", "summarization.ExtCNNDMPipe.get_vocab().index_dataset", "loader.summarization.ExtCNNDMLoader.summarization.ExtCNNDMLoader.download", "os.path.isdir", "core._logger.logger.error", "RuntimeError", "summarization.ExtCNNDMPipe.get_vocab"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader.download", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.get_vocab"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param paths: dict or string\n        :return: DataBundle\n        \"\"\"", "\n", "loader", "=", "ExtCNNDMLoader", "(", ")", "\n", "if", "self", ".", "vocab_path", "is", "None", ":", "\n", "            ", "if", "paths", "is", "None", ":", "\n", "                ", "paths", "=", "loader", ".", "download", "(", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "paths", ")", ":", "\n", "                ", "error_msg", "=", "'vocab file is not defined!'", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "RuntimeError", "(", "error_msg", ")", "\n", "", "self", ".", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "paths", ",", "'vocab'", ")", "\n", "", "db", "=", "loader", ".", "load", "(", "paths", "=", "paths", ")", "\n", "db", "=", "self", ".", "process", "(", "db", ")", "\n", "for", "ds", "in", "db", ".", "datasets", ".", "values", "(", ")", ":", "\n", "            ", "db", ".", "get_vocab", "(", "\"vocab\"", ")", ".", "index_dataset", "(", "ds", ",", "field_name", "=", "Const", ".", "INPUT", ",", "new_field_name", "=", "Const", ".", "INPUT", ")", "\n", "\n", "", "return", "db", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._lower_text": [[131, 133], ["text.lower"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["", "", "def", "_lower_text", "(", "text_list", ")", ":", "\n", "    ", "return", "[", "text", ".", "lower", "(", ")", "for", "text", "in", "text_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._split_list": [[135, 137], ["text.split"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["", "def", "_split_list", "(", "text_list", ")", ":", "\n", "    ", "return", "[", "text", ".", "split", "(", ")", "for", "text", "in", "text_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._convert_label": [[139, 144], ["numpy.zeros", "np.zeros.tolist", "numpy.array"], "function", ["None"], ["", "def", "_convert_label", "(", "label", ",", "sent_len", ")", ":", "\n", "    ", "np_label", "=", "np", ".", "zeros", "(", "sent_len", ",", "dtype", "=", "int", ")", "\n", "if", "label", "!=", "[", "]", ":", "\n", "        ", "np_label", "[", "np", ".", "array", "(", "label", ")", "]", "=", "1", "\n", "", "return", "np_label", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._pad_sent": [[146, 156], ["pad_text_wd.append", "len", "sent_wd.extend", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_pad_sent", "(", "text_wd", ",", "sent_max_len", ")", ":", "\n", "    ", "pad_text_wd", "=", "[", "]", "\n", "for", "sent_wd", "in", "text_wd", ":", "\n", "        ", "if", "len", "(", "sent_wd", ")", "<", "sent_max_len", ":", "\n", "            ", "pad_num", "=", "sent_max_len", "-", "len", "(", "sent_wd", ")", "\n", "sent_wd", ".", "extend", "(", "[", "WORD_PAD", "]", "*", "pad_num", ")", "\n", "", "else", ":", "\n", "            ", "sent_wd", "=", "sent_wd", "[", ":", "sent_max_len", "]", "\n", "", "pad_text_wd", ".", "append", "(", "sent_wd", ")", "\n", "", "return", "pad_text_wd", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._token_mask": [[158, 168], ["len", "token_mask_list.append"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_token_mask", "(", "text_wd", ",", "sent_max_len", ")", ":", "\n", "    ", "token_mask_list", "=", "[", "]", "\n", "for", "sent_wd", "in", "text_wd", ":", "\n", "        ", "token_num", "=", "len", "(", "sent_wd", ")", "\n", "if", "token_num", "<", "sent_max_len", ":", "\n", "            ", "mask", "=", "[", "1", "]", "*", "token_num", "+", "[", "0", "]", "*", "(", "sent_max_len", "-", "token_num", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "[", "1", "]", "*", "sent_max_len", "\n", "", "token_mask_list", ".", "append", "(", "mask", ")", "\n", "", "return", "token_mask_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._pad_label": [[170, 177], ["len"], "function", ["None"], ["", "def", "_pad_label", "(", "label", ",", "doc_max_timesteps", ")", ":", "\n", "    ", "text_len", "=", "len", "(", "label", ")", "\n", "if", "text_len", "<", "doc_max_timesteps", ":", "\n", "        ", "pad_label", "=", "label", "+", "[", "0", "]", "*", "(", "doc_max_timesteps", "-", "text_len", ")", "\n", "", "else", ":", "\n", "        ", "pad_label", "=", "label", "[", ":", "doc_max_timesteps", "]", "\n", "", "return", "pad_label", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._pad_doc": [[179, 187], ["len"], "function", ["None"], ["", "def", "_pad_doc", "(", "text_wd", ",", "sent_max_len", ",", "doc_max_timesteps", ")", ":", "\n", "    ", "text_len", "=", "len", "(", "text_wd", ")", "\n", "if", "text_len", "<", "doc_max_timesteps", ":", "\n", "        ", "padding", "=", "[", "WORD_PAD", "]", "*", "sent_max_len", "\n", "pad_text", "=", "text_wd", "+", "[", "padding", "]", "*", "(", "doc_max_timesteps", "-", "text_len", ")", "\n", "", "else", ":", "\n", "        ", "pad_text", "=", "text_wd", "[", ":", "doc_max_timesteps", "]", "\n", "", "return", "pad_text", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.summarization._sent_mask": [[189, 196], ["len"], "function", ["None"], ["", "def", "_sent_mask", "(", "text_wd", ",", "doc_max_timesteps", ")", ":", "\n", "    ", "text_len", "=", "len", "(", "text_wd", ")", "\n", "if", "text_len", "<", "doc_max_timesteps", ":", "\n", "        ", "sent_mask", "=", "[", "1", "]", "*", "text_len", "+", "[", "0", "]", "*", "(", "doc_max_timesteps", "-", "text_len", ")", "\n", "", "else", ":", "\n", "        ", "sent_mask", "=", "[", "1", "]", "*", "doc_max_timesteps", "\n", "", "return", "sent_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.CLSBasePipe.__init__": [[36, 40], ["pipe.Pipe.__init__", "utils.get_tokenizer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils.get_tokenizer"], ["    ", "def", "__init__", "(", "self", ",", "lower", ":", "bool", "=", "False", ",", "tokenizer", ":", "str", "=", "'spacy'", ",", "lang", "=", "'en'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lower", "=", "lower", "\n", "self", ".", "tokenizer", "=", "get_tokenizer", "(", "tokenizer", ",", "lang", "=", "lang", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.CLSBasePipe._tokenize": [[41, 55], ["data_bundle.datasets.items", "dataset.apply_field"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "_tokenize", "(", "self", ",", "data_bundle", ",", "field_name", "=", "Const", ".", "INPUT", ",", "new_field_name", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06DataBundle\u4e2d\u7684\u6570\u636e\u8fdb\u884ctokenize\n\n        :param DataBundle data_bundle:\n        :param str field_name:\n        :param str new_field_name:\n        :return: \u4f20\u5165\u7684DataBundle\u5bf9\u8c61\n        \"\"\"", "\n", "new_field_name", "=", "new_field_name", "or", "field_name", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply_field", "(", "self", ".", "tokenizer", ",", "field_name", "=", "field_name", ",", "new_field_name", "=", "new_field_name", ")", "\n", "\n", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.CLSBasePipe.process": [[56, 84], ["utils._add_words_field", "classification.CLSBasePipe._tokenize", "utils._indexize", "utils._indexize.datasets.items", "utils._indexize.set_input", "utils._indexize.set_target", "dataset.add_seq_len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._add_words_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.WeiboSenti100kPipe._tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._indexize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f20\u5165\u7684DataSet\u5e94\u8be5\u5177\u5907\u5982\u4e0b\u7684\u7ed3\u6784\n\n        .. csv-table::\n            :header: \"raw_words\", \"target\"\n\n            \"I got 'new' tires from them and... \", \"1\"\n            \"Don't waste your time.  We had two...\", \"1\"\n            \"...\", \"...\"\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "# \u590d\u5236\u4e00\u5217words", "\n", "data_bundle", "=", "_add_words_field", "(", "data_bundle", ",", "lower", "=", "self", ".", "lower", ")", "\n", "# \u8fdb\u884ctokenize", "\n", "data_bundle", "=", "self", ".", "_tokenize", "(", "data_bundle", "=", "data_bundle", ",", "field_name", "=", "Const", ".", "INPUT", ")", "\n", "# \u5efa\u7acb\u8bcd\u8868\u5e76index", "\n", "data_bundle", "=", "_indexize", "(", "data_bundle", "=", "data_bundle", ")", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUT", ")", "\n", "\n", "", "data_bundle", ".", "set_input", "(", "Const", ".", "INPUT", ",", "Const", ".", "INPUT_LEN", ")", "\n", "data_bundle", ".", "set_target", "(", "Const", ".", "TARGET", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.CLSBasePipe.process_from_file": [[85, 93], ["None"], "methods", ["None"], ["", "def", "process_from_file", "(", "self", ",", "paths", ")", "->", "DataBundle", ":", "\n", "        ", "r\"\"\"\n        \u4f20\u5165\u6587\u4ef6\u8def\u5f84\uff0c\u751f\u6210\u5904\u7406\u597d\u7684DataBundle\u5bf9\u8c61\u3002paths\u652f\u6301\u7684\u8def\u5f84\u5f62\u5f0f\u53ef\u4ee5\u53c2\u8003 \uff1a:meth:`fastNLP.io.Loader.load()`\n\n        :param paths:\n        :return: DataBundle\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.YelpFullPipe.__init__": [[119, 137], ["classification.CLSBasePipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "lower", ":", "bool", "=", "False", ",", "granularity", "=", "5", ",", "tokenizer", ":", "str", "=", "'spacy'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param bool lower: \u662f\u5426\u5bf9\u8f93\u5165\u8fdb\u884c\u5c0f\u5199\u5316\u3002\n        :param int granularity: \u652f\u63012, 3, 5\u3002\u82e5\u4e3a2, \u5219\u8ba4\u4e3a\u662f2\u5206\u7c7b\u95ee\u9898\uff0c\u5c061\u30012\u5f52\u4e3a1\u7c7b\uff0c4\u30015\u5f52\u4e3a\u4e00\u7c7b\uff0c\u4e22\u63892\uff1b\u82e5\u4e3a3, \u5219\u67093\u5206\u7c7b\u95ee\u9898\uff0c\u5c06\n            1\u30012\u5f52\u4e3a1\u7c7b\uff0c3\u5f52\u4e3a1\u7c7b\uff0c4\u30015\u5f52\u4e3a1\u7c7b\uff1b\u82e5\u4e3a5, \u5219\u67095\u5206\u7c7b\u95ee\u9898\u3002\n        :param str tokenizer: \u4f7f\u7528\u54ea\u79cdtokenize\u65b9\u5f0f\u5c06\u6570\u636e\u5207\u6210\u5355\u8bcd\u3002\u652f\u6301'spacy'\u548c'raw'\u3002raw\u4f7f\u7528\u7a7a\u683c\u4f5c\u4e3a\u5207\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "lower", "=", "lower", ",", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "assert", "granularity", "in", "(", "2", ",", "3", ",", "5", ")", ",", "\"granularity can only be 2,3,5.\"", "\n", "self", ".", "granularity", "=", "granularity", "\n", "\n", "if", "granularity", "==", "2", ":", "\n", "            ", "self", ".", "tag_map", "=", "{", "\"1\"", ":", "\"negative\"", ",", "\"2\"", ":", "\"negative\"", ",", "\"4\"", ":", "\"positive\"", ",", "\"5\"", ":", "\"positive\"", "}", "\n", "", "elif", "granularity", "==", "3", ":", "\n", "            ", "self", ".", "tag_map", "=", "{", "\"1\"", ":", "\"negative\"", ",", "\"2\"", ":", "\"negative\"", ",", "\"3\"", ":", "\"medium\"", ",", "\"4\"", ":", "\"positive\"", ",", "\"5\"", ":", "\"positive\"", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "tag_map", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.YelpFullPipe.process": [[138, 158], ["classification.CLSBasePipe.process", "utils._granularize"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._granularize"], ["", "", "def", "process", "(", "self", ",", "data_bundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f20\u5165\u7684DataSet\u5e94\u8be5\u5177\u5907\u5982\u4e0b\u7684\u7ed3\u6784\n\n        .. csv-table::\n           :header: \"raw_words\", \"target\"\n\n           \"I got 'new' tires from them and... \", \"1\"\n           \"Don't waste your time.  We had two...\", \"1\"\n           \"...\", \"...\"\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "tag_map", "is", "not", "None", ":", "\n", "            ", "data_bundle", "=", "_granularize", "(", "data_bundle", ",", "self", ".", "tag_map", ")", "\n", "\n", "", "data_bundle", "=", "super", "(", ")", ".", "process", "(", "data_bundle", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.YelpFullPipe.process_from_file": [[159, 167], ["loader.classification.YelpFullLoader().load", "classification.YelpFullPipe.process", "loader.classification.YelpFullLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param paths:\n        :return: DataBundle\n        \"\"\"", "\n", "data_bundle", "=", "YelpFullLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", "=", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.YelpPolarityPipe.__init__": [[193, 200], ["classification.CLSBasePipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "lower", ":", "bool", "=", "False", ",", "tokenizer", ":", "str", "=", "'spacy'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param bool lower: \u662f\u5426\u5bf9\u8f93\u5165\u8fdb\u884c\u5c0f\u5199\u5316\u3002\n        :param str tokenizer: \u4f7f\u7528\u54ea\u79cdtokenize\u65b9\u5f0f\u5c06\u6570\u636e\u5207\u6210\u5355\u8bcd\u3002\u652f\u6301'spacy'\u548c'raw'\u3002raw\u4f7f\u7528\u7a7a\u683c\u4f5c\u4e3a\u5207\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "lower", "=", "lower", ",", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.YelpPolarityPipe.process_from_file": [[201, 209], ["loader.classification.YelpPolarityLoader().load", "classification.YelpPolarityPipe.process", "loader.classification.YelpPolarityLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param str paths:\n        :return: DataBundle\n        \"\"\"", "\n", "data_bundle", "=", "YelpPolarityLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", "=", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.AGsNewsPipe.__init__": [[235, 242], ["classification.CLSBasePipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "lower", ":", "bool", "=", "False", ",", "tokenizer", ":", "str", "=", "'spacy'", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param bool lower: \u662f\u5426\u5bf9\u8f93\u5165\u8fdb\u884c\u5c0f\u5199\u5316\u3002\n        :param str tokenizer: \u4f7f\u7528\u54ea\u79cdtokenize\u65b9\u5f0f\u5c06\u6570\u636e\u5207\u6210\u5355\u8bcd\u3002\u652f\u6301'spacy'\u548c'raw'\u3002raw\u4f7f\u7528\u7a7a\u683c\u4f5c\u4e3a\u5207\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "lower", "=", "lower", ",", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.AGsNewsPipe.process_from_file": [[243, 250], ["loader.classification.AGsNewsLoader().load", "classification.AGsNewsPipe.process", "loader.classification.AGsNewsLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param str paths:\n        :return: DataBundle\n        \"\"\"", "\n", "data_bundle", "=", "AGsNewsLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", "=", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.DBPediaPipe.__init__": [[276, 283], ["classification.CLSBasePipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "lower", ":", "bool", "=", "False", ",", "tokenizer", ":", "str", "=", "'spacy'", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param bool lower: \u662f\u5426\u5bf9\u8f93\u5165\u8fdb\u884c\u5c0f\u5199\u5316\u3002\n        :param str tokenizer: \u4f7f\u7528\u54ea\u79cdtokenize\u65b9\u5f0f\u5c06\u6570\u636e\u5207\u6210\u5355\u8bcd\u3002\u652f\u6301'spacy'\u548c'raw'\u3002raw\u4f7f\u7528\u7a7a\u683c\u4f5c\u4e3a\u5207\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "lower", "=", "lower", ",", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.DBPediaPipe.process_from_file": [[284, 291], ["loader.classification.DBPediaLoader().load", "classification.DBPediaPipe.process", "loader.classification.DBPediaLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param str paths:\n        :return: DataBundle\n        \"\"\"", "\n", "data_bundle", "=", "DBPediaLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", "=", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.SSTPipe.__init__": [[317, 340], ["classification.CLSBasePipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "subtree", "=", "False", ",", "train_subtree", "=", "True", ",", "lower", "=", "False", ",", "granularity", "=", "5", ",", "tokenizer", "=", "'spacy'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param bool subtree: \u662f\u5426\u5c06train, test, dev\u6570\u636e\u5c55\u5f00\u4e3a\u5b50\u6811\uff0c\u6269\u5145\u6570\u636e\u91cf\u3002 Default: ``False``\n        :param bool train_subtree: \u662f\u5426\u5c06train\u96c6\u901a\u8fc7\u5b50\u6811\u6269\u5c55\u6570\u636e\u3002\n        :param bool lower: \u662f\u5426\u5bf9\u8f93\u5165\u8fdb\u884c\u5c0f\u5199\u5316\u3002\n        :param int granularity: \u652f\u63012, 3, 5\u3002\u82e5\u4e3a2, \u5219\u8ba4\u4e3a\u662f2\u5206\u7c7b\u95ee\u9898\uff0c\u5c060\u30011\u5f52\u4e3a1\u7c7b\uff0c3\u30014\u5f52\u4e3a\u4e00\u7c7b\uff0c\u4e22\u63892\uff1b\u82e5\u4e3a3, \u5219\u67093\u5206\u7c7b\u95ee\u9898\uff0c\u5c06\n            0\u30011\u5f52\u4e3a1\u7c7b\uff0c2\u5f52\u4e3a1\u7c7b\uff0c3\u30014\u5f52\u4e3a1\u7c7b\uff1b\u82e5\u4e3a5, \u5219\u67095\u5206\u7c7b\u95ee\u9898\u3002\n        :param str tokenizer: \u4f7f\u7528\u54ea\u79cdtokenize\u65b9\u5f0f\u5c06\u6570\u636e\u5207\u6210\u5355\u8bcd\u3002\u652f\u6301'spacy'\u548c'raw'\u3002raw\u4f7f\u7528\u7a7a\u683c\u4f5c\u4e3a\u5207\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "self", ".", "subtree", "=", "subtree", "\n", "self", ".", "train_tree", "=", "train_subtree", "\n", "self", ".", "lower", "=", "lower", "\n", "assert", "granularity", "in", "(", "2", ",", "3", ",", "5", ")", ",", "\"granularity can only be 2,3,5.\"", "\n", "self", ".", "granularity", "=", "granularity", "\n", "\n", "if", "granularity", "==", "2", ":", "\n", "            ", "self", ".", "tag_map", "=", "{", "\"0\"", ":", "\"negative\"", ",", "\"1\"", ":", "\"negative\"", ",", "\"3\"", ":", "\"positive\"", ",", "\"4\"", ":", "\"positive\"", "}", "\n", "", "elif", "granularity", "==", "3", ":", "\n", "            ", "self", ".", "tag_map", "=", "{", "\"0\"", ":", "\"negative\"", ",", "\"1\"", ":", "\"negative\"", ",", "\"2\"", ":", "\"medium\"", ",", "\"3\"", ":", "\"positive\"", ",", "\"4\"", ":", "\"positive\"", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "tag_map", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.SSTPipe.process": [[341, 379], ["list", "utils._granularize", "classification.CLSBasePipe.process", "super().process.datasets.keys", "super().process.get_dataset", "core.dataset.DataSet", "super().process.set_dataset", "nltk.Tree.fromstring", "nltk.Tree.fromstring.subtrees", "core.instance.Instance", "core.dataset.DataSet.append", "core.instance.Instance", "core.dataset.DataSet.append", "t.leaves", "nltk.Tree.fromstring.label", "t.label", "nltk.Tree.fromstring.leaves"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._granularize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.get_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u5bf9DataBundle\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\u3002\u8f93\u5165\u7684DataSet\u5e94\u8be5\u81f3\u5c11\u62e5\u6709raw_words\u8fd9\u4e00\u5217\uff0c\u4e14\u5185\u5bb9\u7c7b\u4f3c\u4e0e\n\n        .. csv-table:: \u4e0b\u9762\u662f\u4f7f\u7528SSTLoader\u8bfb\u53d6\u7684DataSet\u6240\u5177\u5907\u7684field\n            :header: \"raw_words\"\n\n            \"(2 (3 (3 Effective) (2 but)) (1 (1 too-tepid)...\"\n            \"(3 (3 (2 If) (3 (2 you) (3 (2 sometimes) ...\"\n            \"...\"\n\n        :param ~fastNLP.io.DataBundle data_bundle: \u9700\u8981\u5904\u7406\u7684DataBundle\u5bf9\u8c61\n        :return:\n        \"\"\"", "\n", "#  \u5148\u53d6\u51fasubtree", "\n", "for", "name", "in", "list", "(", "data_bundle", ".", "datasets", ".", "keys", "(", ")", ")", ":", "\n", "            ", "dataset", "=", "data_bundle", ".", "get_dataset", "(", "name", ")", "\n", "ds", "=", "DataSet", "(", ")", "\n", "use_subtree", "=", "self", ".", "subtree", "or", "(", "name", "==", "'train'", "and", "self", ".", "train_tree", ")", "\n", "for", "ins", "in", "dataset", ":", "\n", "                ", "raw_words", "=", "ins", "[", "Const", ".", "RAW_WORD", "]", "\n", "tree", "=", "Tree", ".", "fromstring", "(", "raw_words", ")", "\n", "if", "use_subtree", ":", "\n", "                    ", "for", "t", "in", "tree", ".", "subtrees", "(", ")", ":", "\n", "                        ", "raw_words", "=", "\" \"", ".", "join", "(", "t", ".", "leaves", "(", ")", ")", "\n", "instance", "=", "Instance", "(", "raw_words", "=", "raw_words", ",", "target", "=", "t", ".", "label", "(", ")", ")", "\n", "ds", ".", "append", "(", "instance", ")", "\n", "", "", "else", ":", "\n", "                    ", "instance", "=", "Instance", "(", "raw_words", "=", "' '", ".", "join", "(", "tree", ".", "leaves", "(", ")", ")", ",", "target", "=", "tree", ".", "label", "(", ")", ")", "\n", "ds", ".", "append", "(", "instance", ")", "\n", "", "", "data_bundle", ".", "set_dataset", "(", "ds", ",", "name", ")", "\n", "\n", "# \u6839\u636egranularity\u8bbe\u7f6etag", "\n", "", "data_bundle", "=", "_granularize", "(", "data_bundle", ",", "tag_map", "=", "self", ".", "tag_map", ")", "\n", "\n", "data_bundle", "=", "super", "(", ")", ".", "process", "(", "data_bundle", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.SSTPipe.process_from_file": [[380, 383], ["loader.classification.SSTLoader().load", "classification.SSTPipe.process", "loader.classification.SSTLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "SSTLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", "=", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.SST2Pipe.__init__": [[409, 416], ["classification.CLSBasePipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "lower", "=", "False", ",", "tokenizer", "=", "'spacy'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param bool lower: \u662f\u5426\u5bf9\u8f93\u5165\u8fdb\u884c\u5c0f\u5199\u5316\u3002\n        :param str tokenizer: \u4f7f\u7528\u54ea\u79cdtokenize\u65b9\u5f0f\u5c06\u6570\u636e\u5207\u6210\u5355\u8bcd\u3002\u652f\u6301'spacy'\u548c'raw'\u3002raw\u4f7f\u7528\u7a7a\u683c\u4f5c\u4e3a\u5207\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "lower", "=", "lower", ",", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.SST2Pipe.process_from_file": [[417, 425], ["loader.classification.SST2Loader().load", "classification.SST2Pipe.process", "loader.classification.SST2Loader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param str paths: \u5982\u679c\u4e3aNone\uff0c\u5219\u81ea\u52a8\u4e0b\u8f7d\u5e76\u7f13\u5b58\u5230fastNLP\u7684\u7f13\u5b58\u5730\u5740\u3002\n        :return: DataBundle\n        \"\"\"", "\n", "data_bundle", "=", "SST2Loader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.IMDBPipe.__init__": [[454, 462], ["classification.CLSBasePipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "lower", ":", "bool", "=", "False", ",", "tokenizer", ":", "str", "=", "'spacy'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param bool lower: \u662f\u5426\u5c06words\u5217\u7684\u6570\u636e\u5c0f\u5199\u3002\n        :param str tokenizer: \u4f7f\u7528\u4ec0\u4e48tokenizer\u6765\u5c06\u53e5\u5b50\u5207\u5206\u4e3awords. \u652f\u6301spacy, raw\u4e24\u79cd\u3002raw\u5373\u4f7f\u7528\u7a7a\u683c\u62c6\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "self", ".", "lower", "=", "lower", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.IMDBPipe.process": [[463, 490], ["super().process.datasets.items", "classification.CLSBasePipe.process", "raw_words.replace.replace.replace", "dataset.apply_field"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u671f\u5f85\u7684DataBunlde\u4e2d\u8f93\u5165\u7684DataSet\u5e94\u8be5\u7c7b\u4f3c\u4e8e\u5982\u4e0b\uff0c\u6709\u4e24\u4e2afield\uff0craw_words\u548ctarget\uff0c\u4e14\u5747\u4e3astr\u7c7b\u578b\n\n        .. csv-table:: \u8f93\u5165DataSet\u7684field\n           :header: \"raw_words\", \"target\"\n\n           \"Bromwell High is a cartoon ... \", \"pos\"\n           \"Story of a man who has ...\", \"neg\"\n           \"...\", \"...\"\n\n        :param DataBunlde data_bundle: \u4f20\u5165\u7684DataBundle\u4e2d\u7684DataSet\u5fc5\u987b\u5305\u542braw_words\u548ctarget\u4e24\u4e2afield\uff0c\u4e14raw_words\u5217\u5e94\u8be5\u4e3astr,\n            target\u5217\u5e94\u8be5\u4e3astr\u3002\n        :return: DataBundle\n        \"\"\"", "\n", "\n", "# \u66ff\u6362<br />", "\n", "def", "replace_br", "(", "raw_words", ")", ":", "\n", "            ", "raw_words", "=", "raw_words", ".", "replace", "(", "\"<br />\"", ",", "' '", ")", "\n", "return", "raw_words", "\n", "\n", "", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply_field", "(", "replace_br", ",", "field_name", "=", "Const", ".", "RAW_WORD", ",", "new_field_name", "=", "Const", ".", "RAW_WORD", ")", "\n", "\n", "", "data_bundle", "=", "super", "(", ")", ".", "process", "(", "data_bundle", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.IMDBPipe.process_from_file": [[491, 502], ["loader.classification.IMDBLoader().load", "classification.IMDBPipe.process", "loader.classification.IMDBLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param paths: \u652f\u6301\u8def\u5f84\u7c7b\u578b\u53c2\u89c1 :class:`fastNLP.io.loader.Loader` \u7684load\u51fd\u6570\u3002\n        :return: DataBundle\n        \"\"\"", "\n", "# \u8bfb\u53d6\u6570\u636e", "\n", "data_bundle", "=", "IMDBLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.ChnSentiCorpPipe.__init__": [[528, 542], ["pipe.Pipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "bigrams", "=", "False", ",", "trigrams", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param bool bigrams: \u662f\u5426\u589e\u52a0\u4e00\u5217bigrams. bigrams\u7684\u6784\u6210\u662f['\u590d', '\u65e6', '\u5927', '\u5b66', ...]->[\"\u590d\u65e6\", \"\u65e6\u5927\", ...]\u3002\u5982\u679c\n            \u8bbe\u7f6e\u4e3aTrue\uff0c\u8fd4\u56de\u7684DataSet\u5c06\u6709\u4e00\u5217\u540d\u4e3abigrams, \u4e14\u5df2\u7ecf\u8f6c\u6362\u4e3a\u4e86index\u5e76\u8bbe\u7f6e\u4e3ainput\uff0c\u5bf9\u5e94\u7684vocab\u53ef\u4ee5\u901a\u8fc7\n            data_bundle.get_vocab('bigrams')\u83b7\u53d6.\n        :param bool trigrams: \u662f\u5426\u589e\u52a0\u4e00\u5217trigrams. trigrams\u7684\u6784\u6210\u662f ['\u590d', '\u65e6', '\u5927', '\u5b66', ...]->[\"\u590d\u65e6\u5927\", \"\u65e6\u5927\u5b66\", ...]\n            \u3002\u5982\u679c\u8bbe\u7f6e\u4e3aTrue\uff0c\u8fd4\u56de\u7684DataSet\u5c06\u6709\u4e00\u5217\u540d\u4e3atrigrams, \u4e14\u5df2\u7ecf\u8f6c\u6362\u4e3a\u4e86index\u5e76\u8bbe\u7f6e\u4e3ainput\uff0c\u5bf9\u5e94\u7684vocab\u53ef\u4ee5\u901a\u8fc7\n            data_bundle.get_vocab('trigrams')\u83b7\u53d6.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bigrams", "=", "bigrams", "\n", "self", ".", "trigrams", "=", "trigrams", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.ChnSentiCorpPipe._tokenize": [[543, 552], ["data_bundle.apply_field"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "_tokenize", "(", "self", ",", "data_bundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06DataSet\u4e2d\u7684\"\u590d\u65e6\u5927\u5b66\"\u62c6\u5206\u4e3a[\"\u590d\", \"\u65e6\", \"\u5927\", \"\u5b66\"]. \u672a\u6765\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u8fd9\u4e2a\u51fd\u6570\u5b9e\u73b0\u5206\u8bcd\u3002\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "data_bundle", ".", "apply_field", "(", "list", ",", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "Const", ".", "CHAR_INPUT", ")", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.ChnSentiCorpPipe.process": [[553, 597], ["utils._add_chars_field", "classification.ChnSentiCorpPipe._tokenize", "utils._indexize", "classification.ChnSentiCorpPipe.datasets.items", "classification.ChnSentiCorpPipe.set_input", "classification.ChnSentiCorpPipe.set_target", "classification.ChnSentiCorpPipe.iter_datasets", "input_field_names.append", "classification.ChnSentiCorpPipe.iter_datasets", "input_field_names.append", "dataset.add_seq_len", "dataset.apply_field", "dataset.apply_field", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._add_chars_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.WeiboSenti100kPipe._tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._indexize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u53ef\u4ee5\u5904\u7406\u7684DataSet\u5e94\u8be5\u5177\u5907\u4ee5\u4e0b\u7684field\n\n        .. csv-table::\n            :header: \"raw_chars\", \"target\"\n\n            \"\u9019\u9593\u9152\u5e97\u74b0\u5883\u548c\u670d\u52d9\u614b\u5ea6\u4ea6\u7b97\u4e0d\u932f,\u4f46\u623f\u9593\u7a7a\u9593\u592a\u5c0f~~\", \"1\"\n            \"<\u8350\u4e66> \u63a8\u8350\u6240\u6709\u559c\u6b22<\u7ea2\u697c>...\", \"1\"\n            \"...\"\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "_add_chars_field", "(", "data_bundle", ",", "lower", "=", "False", ")", "\n", "\n", "data_bundle", "=", "self", ".", "_tokenize", "(", "data_bundle", ")", "\n", "\n", "input_field_names", "=", "[", "Const", ".", "CHAR_INPUT", "]", "\n", "if", "self", ".", "bigrams", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "iter_datasets", "(", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "chars", ":", "[", "c1", "+", "c2", "for", "c1", ",", "c2", "in", "zip", "(", "chars", ",", "chars", "[", "1", ":", "]", "+", "[", "'<eos>'", "]", ")", "]", ",", "\n", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "'bigrams'", ")", "\n", "", "input_field_names", ".", "append", "(", "'bigrams'", ")", "\n", "", "if", "self", ".", "trigrams", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "iter_datasets", "(", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "chars", ":", "[", "c1", "+", "c2", "+", "c3", "for", "c1", ",", "c2", ",", "c3", "in", "\n", "zip", "(", "chars", ",", "chars", "[", "1", ":", "]", "+", "[", "'<eos>'", "]", ",", "chars", "[", "2", ":", "]", "+", "[", "'<eos>'", "]", "*", "2", ")", "]", ",", "\n", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "'trigrams'", ")", "\n", "", "input_field_names", ".", "append", "(", "'trigrams'", ")", "\n", "\n", "# index", "\n", "", "_indexize", "(", "data_bundle", ",", "input_field_names", ",", "Const", ".", "TARGET", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "+", "input_field_names", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "CHAR_INPUT", ")", "\n", "\n", "", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.ChnSentiCorpPipe.process_from_file": [[598, 609], ["loader.classification.ChnSentiCorpLoader().load", "classification.ChnSentiCorpPipe.process", "loader.classification.ChnSentiCorpLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param paths: \u652f\u6301\u8def\u5f84\u7c7b\u578b\u53c2\u89c1 :class:`fastNLP.io.loader.Loader` \u7684load\u51fd\u6570\u3002\n        :return: DataBundle\n        \"\"\"", "\n", "# \u8bfb\u53d6\u6570\u636e", "\n", "data_bundle", "=", "ChnSentiCorpLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.THUCNewsPipe.__init__": [[641, 646], ["classification.CLSBasePipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "bigrams", "=", "False", ",", "trigrams", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bigrams", "=", "bigrams", "\n", "self", ".", "trigrams", "=", "trigrams", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.THUCNewsPipe._chracter_split": [[647, 649], ["list"], "methods", ["None"], ["", "def", "_chracter_split", "(", "self", ",", "sent", ")", ":", "\n", "        ", "return", "list", "(", "sent", ")", "\n", "# return [w for w in sent]", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.THUCNewsPipe._raw_split": [[651, 653], ["sent.split"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["", "def", "_raw_split", "(", "self", ",", "sent", ")", ":", "\n", "        ", "return", "sent", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.THUCNewsPipe._tokenize": [[654, 659], ["data_bundle.datasets.items", "dataset.apply_field"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "_tokenize", "(", "self", ",", "data_bundle", ",", "field_name", "=", "Const", ".", "INPUT", ",", "new_field_name", "=", "None", ")", ":", "\n", "        ", "new_field_name", "=", "new_field_name", "or", "field_name", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply_field", "(", "self", ".", "_chracter_split", ",", "field_name", "=", "field_name", ",", "new_field_name", "=", "new_field_name", ")", "\n", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.THUCNewsPipe.process": [[660, 711], ["utils._granularize", "classification.THUCNewsPipe._tokenize", "utils._indexize", "utils._indexize.datasets.items", "utils._indexize.set_input", "utils._indexize.set_target", "utils._indexize.iter_datasets", "input_field_names.append", "utils._indexize.iter_datasets", "input_field_names.append", "dataset.add_seq_len", "dataset.apply_field", "dataset.apply_field", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._granularize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.WeiboSenti100kPipe._tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._indexize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u53ef\u5904\u7406\u7684DataSet\u5e94\u5177\u5907\u5982\u4e0b\u7684field\n\n        .. csv-table::\n            :header: \"raw_words\", \"target\"\n            \n            \"\u9a6c\u6653\u65ed\u610f\u5916\u53d7\u4f24\u8ba9\u56fd\u5965\u8b66\u60d5 \u65e0\u5948\u5927\u96e8\u683c\u5916\u9752\u7750\u6bb7\u5bb6\u519b\u8bb0\u8005\u5085\u4e9a\u96e8\u6c88\u9633\u62a5\u9053 ... \", \"\u4f53\u80b2\"\n            \"...\", \"...\"\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "# \u6839\u636egranularity\u8bbe\u7f6etag", "\n", "tag_map", "=", "{", "'\u4f53\u80b2'", ":", "0", ",", "'\u8d22\u7ecf'", ":", "1", ",", "'\u623f\u4ea7'", ":", "2", ",", "'\u5bb6\u5c45'", ":", "3", ",", "'\u6559\u80b2'", ":", "4", ",", "'\u79d1\u6280'", ":", "5", ",", "'\u65f6\u5c1a'", ":", "6", ",", "'\u65f6\u653f'", ":", "7", ",", "'\u6e38\u620f'", ":", "8", ",", "'\u5a31\u4e50'", ":", "9", "}", "\n", "data_bundle", "=", "_granularize", "(", "data_bundle", "=", "data_bundle", ",", "tag_map", "=", "tag_map", ")", "\n", "\n", "# clean,lower", "\n", "\n", "# CWS(tokenize)", "\n", "data_bundle", "=", "self", ".", "_tokenize", "(", "data_bundle", "=", "data_bundle", ",", "field_name", "=", "'raw_chars'", ",", "new_field_name", "=", "'chars'", ")", "\n", "\n", "input_field_names", "=", "[", "Const", ".", "CHAR_INPUT", "]", "\n", "\n", "# n-grams", "\n", "if", "self", ".", "bigrams", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "iter_datasets", "(", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "chars", ":", "[", "c1", "+", "c2", "for", "c1", ",", "c2", "in", "zip", "(", "chars", ",", "chars", "[", "1", ":", "]", "+", "[", "'<eos>'", "]", ")", "]", ",", "\n", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "'bigrams'", ")", "\n", "", "input_field_names", ".", "append", "(", "'bigrams'", ")", "\n", "", "if", "self", ".", "trigrams", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "iter_datasets", "(", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "chars", ":", "[", "c1", "+", "c2", "+", "c3", "for", "c1", ",", "c2", ",", "c3", "in", "\n", "zip", "(", "chars", ",", "chars", "[", "1", ":", "]", "+", "[", "'<eos>'", "]", ",", "chars", "[", "2", ":", "]", "+", "[", "'<eos>'", "]", "*", "2", ")", "]", ",", "\n", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "'trigrams'", ")", "\n", "", "input_field_names", ".", "append", "(", "'trigrams'", ")", "\n", "\n", "# index", "\n", "", "data_bundle", "=", "_indexize", "(", "data_bundle", "=", "data_bundle", ",", "input_field_names", "=", "Const", ".", "CHAR_INPUT", ")", "\n", "\n", "# add length", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "Const", ".", "INPUT_LEN", ")", "\n", "\n", "", "input_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "+", "input_field_names", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", "]", "\n", "\n", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.THUCNewsPipe.process_from_file": [[712, 721], ["loader.classification.THUCNewsLoader", "loader.classification.THUCNewsLoader.load", "classification.THUCNewsPipe.process"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param paths: \u652f\u6301\u8def\u5f84\u7c7b\u578b\u53c2\u89c1 :class:`fastNLP.io.loader.Loader` \u7684load\u51fd\u6570\u3002\n        :return: DataBundle\n        \"\"\"", "\n", "data_loader", "=", "THUCNewsLoader", "(", ")", "# \u6b64\u5904\u9700\u8981\u5b9e\u4f8b\u5316\u4e00\u4e2adata_loader\uff0c\u5426\u5219\u4f20\u5165load()\u7684\u53c2\u6570\u4e3aNone", "\n", "data_bundle", "=", "data_loader", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.WeiboSenti100kPipe.__init__": [[753, 758], ["classification.CLSBasePipe.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "bigrams", "=", "False", ",", "trigrams", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bigrams", "=", "bigrams", "\n", "self", ".", "trigrams", "=", "trigrams", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.WeiboSenti100kPipe._chracter_split": [[759, 761], ["list"], "methods", ["None"], ["", "def", "_chracter_split", "(", "self", ",", "sent", ")", ":", "\n", "        ", "return", "list", "(", "sent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.WeiboSenti100kPipe._tokenize": [[762, 767], ["data_bundle.datasets.items", "dataset.apply_field"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "_tokenize", "(", "self", ",", "data_bundle", ",", "field_name", "=", "Const", ".", "INPUT", ",", "new_field_name", "=", "None", ")", ":", "\n", "        ", "new_field_name", "=", "new_field_name", "or", "field_name", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply_field", "(", "self", ".", "_chracter_split", ",", "field_name", "=", "field_name", ",", "new_field_name", "=", "new_field_name", ")", "\n", "", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.WeiboSenti100kPipe.process": [[768, 815], ["classification.WeiboSenti100kPipe._tokenize", "utils._indexize", "utils._indexize.datasets.items", "utils._indexize.set_input", "utils._indexize.set_target", "utils._indexize.iter_datasets", "input_field_names.append", "utils._indexize.iter_datasets", "input_field_names.append", "dataset.add_seq_len", "dataset.apply_field", "dataset.apply_field", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.WeiboSenti100kPipe._tokenize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._indexize", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u53ef\u5904\u7406\u7684DataSet\u5e94\u5177\u5907\u4ee5\u4e0b\u7684field\n\n        .. csv-table::\n            :header: \"raw_chars\", \"target\"\n            \n            \"\u516d\u4e00\u51fa\u751f\u7684\uff1f\u597d\u8bbd\u523a\u2026\u2026 //@\u796d\u6625\u59ec:\u4ed6\u7238\u7238\u662f\u5916\u661f\u4eba\u5427 //@\u9762\u5b54\u5c0f\u9ad8:\u73b0\u5728\u7684\u5b69\u5b50\u90fd\u600e\u4e48\u4e86 [\u6012][\u6012][\u6012]\", \"0\"\n            \"...\", \"...\"\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "# clean,lower", "\n", "\n", "# CWS(tokenize)", "\n", "data_bundle", "=", "self", ".", "_tokenize", "(", "data_bundle", "=", "data_bundle", ",", "field_name", "=", "'raw_chars'", ",", "new_field_name", "=", "'chars'", ")", "\n", "\n", "input_field_names", "=", "[", "Const", ".", "CHAR_INPUT", "]", "\n", "\n", "# n-grams", "\n", "if", "self", ".", "bigrams", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "iter_datasets", "(", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "chars", ":", "[", "c1", "+", "c2", "for", "c1", ",", "c2", "in", "zip", "(", "chars", ",", "chars", "[", "1", ":", "]", "+", "[", "'<eos>'", "]", ")", "]", ",", "\n", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "'bigrams'", ")", "\n", "", "input_field_names", ".", "append", "(", "'bigrams'", ")", "\n", "", "if", "self", ".", "trigrams", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "iter_datasets", "(", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "chars", ":", "[", "c1", "+", "c2", "+", "c3", "for", "c1", ",", "c2", ",", "c3", "in", "\n", "zip", "(", "chars", ",", "chars", "[", "1", ":", "]", "+", "[", "'<eos>'", "]", ",", "chars", "[", "2", ":", "]", "+", "[", "'<eos>'", "]", "*", "2", ")", "]", ",", "\n", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "'trigrams'", ")", "\n", "", "input_field_names", ".", "append", "(", "'trigrams'", ")", "\n", "\n", "# index", "\n", "", "data_bundle", "=", "_indexize", "(", "data_bundle", "=", "data_bundle", ",", "input_field_names", "=", "'chars'", ")", "\n", "\n", "# add length", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "field_name", "=", "Const", ".", "CHAR_INPUT", ",", "new_field_name", "=", "Const", ".", "INPUT_LEN", ")", "\n", "\n", "", "input_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "+", "input_field_names", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", "]", "\n", "\n", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.classification.WeiboSenti100kPipe.process_from_file": [[816, 825], ["loader.classification.WeiboSenti100kLoader", "loader.classification.WeiboSenti100kLoader.load", "classification.WeiboSenti100kPipe.process"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process"], ["", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param paths: \u652f\u6301\u8def\u5f84\u7c7b\u578b\u53c2\u89c1 :class:`fastNLP.io.loader.Loader` \u7684load\u51fd\u6570\u3002\n        :return: DataBundle\n        \"\"\"", "\n", "data_loader", "=", "WeiboSenti100kLoader", "(", ")", "# \u6b64\u5904\u9700\u8981\u5b9e\u4f8b\u5316\u4e00\u4e2adata_loader\uff0c\u5426\u5219\u4f20\u5165load()\u7684\u53c2\u6570\u4e3aNone", "\n", "data_bundle", "=", "data_loader", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process": [[25, 33], ["None"], "methods", ["None"], ["def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", "->", "DataBundle", ":", "\n", "        ", "r\"\"\"\n        \u5bf9\u8f93\u5165\u7684DataBundle\u8fdb\u884c\u5904\u7406\uff0c\u7136\u540e\u8fd4\u56de\u8be5DataBundle\u3002\n\n        :param ~fastNLP.DataBundle data_bundle: \u9700\u8981\u5904\u7406\u7684DataBundle\u5bf9\u8c61\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.pipe.Pipe.process_from_file": [[34, 42], ["None"], "methods", ["None"], ["", "def", "process_from_file", "(", "self", ",", "paths", ")", "->", "DataBundle", ":", "\n", "        ", "r\"\"\"\n        \u4f20\u5165\u6587\u4ef6\u8def\u5f84\uff0c\u751f\u6210\u5904\u7406\u597d\u7684DataBundle\u5bf9\u8c61\u3002paths\u652f\u6301\u7684\u8def\u5f84\u5f62\u5f0f\u53ef\u4ee5\u53c2\u8003 \uff1a:meth:`fastNLP.io.Loader.load()`\n\n        :param paths:\n        :return: DataBundle\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils.iob2": [[17, 39], ["enumerate", "tag.split", "TypeError", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["def", "_construct_char_vocab_from_vocab", "(", "vocab", ":", "Vocabulary", ",", "min_freq", ":", "int", "=", "1", ",", "include_word_start_end", "=", "True", ")", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2aword\u7684vocabulary\u751f\u6210character\u7684vocabulary.\n\n    :param vocab: \u4ecevocab\n    :param min_freq:\n    :param include_word_start_end: \u662f\u5426\u9700\u8981\u5305\u542b\u7279\u6b8a\u7684<bow>\u548c<eos>\n    :return:\n    \"\"\"", "\n", "char_vocab", "=", "Vocabulary", "(", "min_freq", "=", "min_freq", ")", "\n", "for", "word", ",", "index", "in", "vocab", ":", "\n", "        ", "if", "not", "vocab", ".", "_is_word_no_create_entry", "(", "word", ")", ":", "\n", "            ", "char_vocab", ".", "add_word_lst", "(", "list", "(", "word", ")", ")", "\n", "", "", "if", "include_word_start_end", ":", "\n", "        ", "char_vocab", ".", "add_word_lst", "(", "[", "'<bow>'", ",", "'<eow>'", "]", ")", "\n", "", "return", "char_vocab", "\n", "\n", "\n", "", "def", "get_embeddings", "(", "init_embed", ",", "padding_idx", "=", "None", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils.iob2bioes": [[41, 66], ["enumerate", "new_tags.append", "tag.split", "new_tags.append", "new_tags.append", "TypeError", "len", "tag.replace", "new_tags.append", "new_tags.append", "tags[].split", "len", "tag.replace", "tags[].split"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["\n", "if", "isinstance", "(", "init_embed", ",", "tuple", ")", ":", "\n", "        ", "res", "=", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "init_embed", "[", "0", "]", ",", "embedding_dim", "=", "init_embed", "[", "1", "]", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "res", ".", "weight", ".", "data", ",", "a", "=", "-", "np", ".", "sqrt", "(", "3", "/", "res", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ")", ",", "\n", "b", "=", "np", ".", "sqrt", "(", "3", "/", "res", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "res", "=", "init_embed", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "res", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "init_embed", ",", "freeze", "=", "False", ")", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "init_embed", "=", "torch", ".", "tensor", "(", "init_embed", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "res", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "init_embed", ",", "freeze", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'invalid init_embed type: {}'", ".", "format", "(", "(", "type", "(", "init_embed", ")", ")", ")", ")", "\n", "", "return", "res", "\n", "\n", "\n", "", "def", "get_sinusoid_encoding_table", "(", "n_position", ",", "d_hid", ",", "padding_idx", "=", "None", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils.get_tokenizer": [[68, 92], ["spacy.prefer_gpu", "spacy.load", "RuntimeError", "RuntimeError", "spacy.load.tokenizer", "tokenizer_dict.keys"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["\n", "\n", "def", "cal_angle", "(", "position", ",", "hid_idx", ")", ":", "\n", "        ", "return", "position", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_idx", "//", "2", ")", "/", "d_hid", ")", "\n", "\n", "", "def", "get_posi_angle_vec", "(", "position", ")", ":", "\n", "        ", "return", "[", "cal_angle", "(", "position", ",", "hid_j", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "[", "get_posi_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_position", ")", "]", ")", "\n", "\n", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n", "\n", "if", "padding_idx", "is", "not", "None", ":", "\n", "# zero vector for padding dimension", "\n", "        ", "sinusoid_table", "[", "padding_idx", "]", "=", "0.", "\n", "\n", "", "return", "torch", ".", "FloatTensor", "(", "sinusoid_table", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._cn_char_split": [[94, 96], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._raw_split": [[98, 100], ["sent.split"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._indexize": [[102, 143], ["isinstance", "isinstance", "core.vocabulary.Vocabulary", "core.vocabulary.Vocabulary.from_dataset", "core.vocabulary.Vocabulary.index_dataset", "data_bundle.set_vocab", "core.vocabulary.Vocabulary", "core.vocabulary.Vocabulary.from_dataset", "core.vocabulary.Vocabulary.index_dataset", "data_bundle.set_vocab", "len", "warnings.warn", "core._logger.logger.warning", "data_bundle.datasets.values", "len", "data_bundle.iter_datasets", "data_bundle.iter_datasets", "data_bundle.iter_datasets", "data_bundle.iter_datasets", "data_bundle.datasets.values", "ds.has_field", "ds.has_field", "ds.has_field", "data_bundle.datasets.keys"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.from_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.from_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_vocab", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.iter_datasets", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._add_words_field": [[145, 159], ["data_bundle.copy_field", "data_bundle.datasets.items", "dataset[].lower"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.copy_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._add_chars_field": [[161, 175], ["data_bundle.copy_field", "data_bundle.datasets.items", "dataset[].lower"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.copy_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._drop_empty_instance": [[177, 201], ["data_bundle.datasets.items", "ins.items", "dataset.drop"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.utils._granularize": [[203, 221], ["list", "data_bundle.datasets.keys", "data_bundle.get_dataset", "data_bundle.get_dataset.apply_field", "data_bundle.get_dataset.drop", "data_bundle.set_dataset", "tag_map.get"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.get_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.data_bundle.DataBundle.set_dataset", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.coreference.CoReferenceLoader.__init__": [[35, 39], ["json.JsonLoader.__init__", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_WORDS"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.coreference.CoReferenceLoader._load": [[40, 55], ["core.dataset.DataSet", "file_reader._read_json", "core.dataset.DataSet.append", "core.instance.Instance", "d.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_reader._read_json", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["\n", "\n", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.coreference.CoReferenceLoader.download": [[56, 65], ["RuntimeError"], "methods", ["None"], ["\n", "genres", "=", "{", "g", ":", "i", "for", "i", ",", "g", "in", "enumerate", "(", "[", "\"bc\"", ",", "\"bn\"", ",", "\"mz\"", ",", "\"nw\"", ",", "\"pt\"", ",", "\"tc\"", ",", "\"wb\"", "]", ")", "}", "\n", "vocab", "=", "Vocabulary", "(", ")", ".", "from_dataset", "(", "*", "data_bundle", ".", "datasets", ".", "values", "(", ")", ",", "field_name", "=", "Const", ".", "RAW_WORDS", "(", "3", ")", ")", "\n", "vocab", ".", "build_vocab", "(", ")", "\n", "word2id", "=", "vocab", ".", "word2idx", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.csv.CSVLoader.__init__": [[19, 32], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "headers", "=", "None", ",", "sep", "=", "\",\"", ",", "dropna", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param List[str] headers: CSV\u6587\u4ef6\u7684\u6587\u4ef6\u5934.\u5b9a\u4e49\u6bcf\u4e00\u5217\u7684\u5c5e\u6027\u540d\u79f0,\u5373\u8fd4\u56de\u7684DataSet\u4e2d`field`\u7684\u540d\u79f0\n            \u82e5\u4e3a ``None`` ,\u5219\u5c06\u8bfb\u5165\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u89c6\u4f5c ``headers`` . Default: ``None``\n        :param str sep: CSV\u6587\u4ef6\u4e2d\u5217\u4e0e\u5217\u4e4b\u95f4\u7684\u5206\u9694\u7b26. Default: \",\"\n        :param bool dropna: \u662f\u5426\u5ffd\u7565\u975e\u6cd5\u6570\u636e,\u82e5 ``True`` \u5219\u5ffd\u7565,\u82e5 ``False`` ,\u5728\u9047\u5230\u975e\u6cd5\u6570\u636e\u65f6,\u629b\u51fa ``ValueError`` .\n            Default: ``False``\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "headers", "=", "headers", "\n", "self", ".", "sep", "=", "sep", "\n", "self", ".", "dropna", "=", "dropna", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.csv.CSVLoader._load": [[33, 39], ["core.dataset.DataSet", "file_reader._read_csv", "core.dataset.DataSet.append", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_reader._read_csv", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_load", "(", "self", ",", "path", ")", ":", "\n", "        ", "ds", "=", "DataSet", "(", ")", "\n", "for", "idx", ",", "data", "in", "_read_csv", "(", "path", ",", "headers", "=", "self", ".", "headers", ",", "\n", "sep", "=", "self", ".", "sep", ",", "dropna", "=", "self", ".", "dropna", ")", ":", "\n", "            ", "ds", ".", "append", "(", "Instance", "(", "**", "data", ")", ")", "\n", "", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.MNLILoader.__init__": [[51, 53], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.MNLILoader._load": [[54, 81], ["core.dataset.DataSet", "open", "f.readline", "path.endswith", "path.endswith", "warnings.warn", "line.strip.strip.strip", "line.strip.strip.strip", "line.strip.strip.split", "int", "line.strip.strip.split", "int", "core.dataset.DataSet.append", "core.dataset.DataSet.append", "core.instance.Instance", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["\n", "\n", "def", "__init__", "(", "self", ",", "lower", "=", "False", ",", "tokenizer", ":", "str", "=", "'raw'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param bool lower: \u662f\u5426\u5c06word\u5c0f\u5199\u5316\u3002\n        :param str tokenizer: \u4f7f\u7528\u4ec0\u4e48tokenizer\u6765\u5c06\u53e5\u5b50\u5207\u5206\u4e3awords. \u652f\u6301spacy, raw\u4e24\u79cd\u3002raw\u5373\u4f7f\u7528\u7a7a\u683c\u62c6\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lower", "=", "bool", "(", "lower", ")", "\n", "self", ".", "tokenizer", "=", "get_tokenizer", "(", "tokenize_method", "=", "tokenizer", ")", "\n", "\n", "", "def", "_tokenize", "(", "self", ",", "data_bundle", ",", "field_names", ",", "new_field_names", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.MNLILoader.load": [[82, 113], ["files.items", "DataBundle", "os.path.abspath", "matching.MNLILoader.download", "os.path.isdir", "NotADirectoryError", "os.path.join", "matching.MNLILoader._load", "os.path.expanduser", "os.path.isfile", "FileNotFoundError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader.download", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._load"], ["\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "for", "field_name", ",", "new_field_name", "in", "zip", "(", "field_names", ",", "new_field_names", ")", ":", "\n", "                ", "dataset", ".", "apply_field", "(", "lambda", "words", ":", "self", ".", "tokenizer", "(", "words", ")", ",", "field_name", "=", "field_name", ",", "\n", "new_field_name", "=", "new_field_name", ")", "\n", "", "", "return", "data_bundle", "\n", "\n", "", "def", "process", "(", "self", ",", "data_bundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u8f93\u5165\u7684data_bundle\u4e2d\u7684dataset\u9700\u8981\u5177\u6709\u4ee5\u4e0b\u7ed3\u6784\uff1a\n\n        .. csv-table::\n            :header: \"raw_words1\", \"raw_words2\", \"target\"\n\n            \"Dana Reeve, the widow of the actor...\", \"Christopher Reeve had an...\", \"not_entailment\"\n            \"...\",\"...\"\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "for", "dataset", "in", "data_bundle", ".", "datasets", ".", "values", "(", ")", ":", "\n", "            ", "if", "dataset", ".", "has_field", "(", "Const", ".", "TARGET", ")", ":", "\n", "                ", "dataset", ".", "drop", "(", "lambda", "x", ":", "x", "[", "Const", ".", "TARGET", "]", "==", "'-'", ")", "\n", "\n", "", "", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "copy_field", "(", "Const", ".", "RAW_WORDS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "0", ")", ",", ")", "\n", "dataset", ".", "copy_field", "(", "Const", ".", "RAW_WORDS", "(", "1", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", ",", ")", "\n", "\n", "", "if", "self", ".", "lower", ":", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.MNLILoader.download": [[114, 123], ["matching.MNLILoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], ["            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "dataset", "[", "Const", ".", "INPUTS", "(", "0", ")", "]", ".", "lower", "(", ")", "\n", "dataset", "[", "Const", ".", "INPUTS", "(", "1", ")", "]", ".", "lower", "(", ")", "\n", "\n", "", "", "data_bundle", "=", "self", ".", "_tokenize", "(", "data_bundle", ",", "[", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", "]", ",", "\n", "[", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", "]", ")", "\n", "\n", "# concat\u4e24\u4e2awords", "\n", "def", "concat", "(", "ins", ")", ":", "\n", "            ", "words0", "=", "ins", "[", "Const", ".", "INPUTS", "(", "0", ")", "]", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.SNLILoader.__init__": [[152, 157], ["json.JsonLoader.__init__", "core.const.Const.RAW_WORDS", "core.const.Const.RAW_WORDS"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS"], ["\n", "", "has_target_datasets", "=", "[", "dataset", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", "if", "\n", "dataset", ".", "has_field", "(", "Const", ".", "TARGET", ")", "]", "\n", "target_vocab", ".", "index_dataset", "(", "*", "has_target_datasets", ",", "field_name", "=", "Const", ".", "TARGET", ")", "\n", "\n", "data_bundle", ".", "set_vocab", "(", "word_vocab", ",", "Const", ".", "INPUT", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.SNLILoader.load": [[159, 188], ["DataBundle", "matching.SNLILoader.download", "os.path.isdir", "matching.SNLILoader._load", "os.path.join", "NotADirectoryError", "matching.SNLILoader.items", "os.path.isfile", "FileNotFoundError", "os.path.join", "os.path.join", "[].split", "filename.split"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader.download", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["\n", "input_fields", "=", "[", "Const", ".", "INPUT", ",", "Const", ".", "INPUT_LEN", "]", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUT", ")", "\n", "dataset", ".", "set_input", "(", "*", "input_fields", ",", "flag", "=", "True", ")", "\n", "for", "fields", "in", "target_fields", ":", "\n", "                ", "if", "dataset", ".", "has_field", "(", "fields", ")", ":", "\n", "                    ", "dataset", ".", "set_target", "(", "fields", ",", "flag", "=", "True", ")", "\n", "\n", "", "", "", "return", "data_bundle", "\n", "\n", "\n", "", "", "class", "RTEBertPipe", "(", "MatchingBertPipe", ")", ":", "\n", "    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "RTELoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n", "\n", "", "", "class", "SNLIBertPipe", "(", "MatchingBertPipe", ")", ":", "\n", "    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "SNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n", "\n", "", "", "class", "QuoraBertPipe", "(", "MatchingBertPipe", ")", ":", "\n", "    ", "def", "process_from_file", "(", "self", ",", "paths", ")", ":", "\n", "        ", "data_bundle", "=", "QuoraLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.SNLILoader.download": [[189, 198], ["matching.SNLILoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], ["\n", "\n", "", "", "class", "QNLIBertPipe", "(", "MatchingBertPipe", ")", ":", "\n", "    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "QNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n", "\n", "", "", "class", "MNLIBertPipe", "(", "MatchingBertPipe", ")", ":", "\n", "    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.QNLILoader.__init__": [[222, 224], ["json.JsonLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.QNLILoader._load": [[225, 251], ["core.dataset.DataSet", "open", "f.readline", "path.endswith", "warnings.warn", "line.strip.strip.strip", "line.strip.strip.strip", "line.strip.strip.split", "line.strip.strip.split", "core.dataset.DataSet.append", "core.dataset.DataSet.append", "core.instance.Instance", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["\n", "\n", "def", "__init__", "(", "self", ",", "lower", "=", "False", ",", "tokenizer", ":", "str", "=", "'raw'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param bool lower: \u662f\u5426\u5c06\u6240\u6709raw_words\u8f6c\u4e3a\u5c0f\u5199\u3002\n        :param str tokenizer: \u5c06\u539f\u59cb\u6570\u636etokenize\u7684\u65b9\u5f0f\u3002\u652f\u6301spacy, raw. spacy\u662f\u4f7f\u7528spacy\u5207\u5206\uff0craw\u5c31\u662f\u7528\u7a7a\u683c\u5207\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lower", "=", "bool", "(", "lower", ")", "\n", "self", ".", "tokenizer", "=", "get_tokenizer", "(", "tokenize_method", "=", "tokenizer", ")", "\n", "\n", "", "def", "_tokenize", "(", "self", ",", "data_bundle", ",", "field_names", ",", "new_field_names", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param ~fastNLP.DataBundle data_bundle: DataBundle.\n        :param list field_names: List[str], \u9700\u8981tokenize\u7684field\u540d\u79f0\n        :param list new_field_names: List[str], tokenize\u4e4b\u540efield\u7684\u540d\u79f0\uff0c\u4e0efield_names\u4e00\u4e00\u5bf9\u5e94\u3002\n        :return: \u8f93\u5165\u7684DataBundle\u5bf9\u8c61\n        \"\"\"", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "for", "field_name", ",", "new_field_name", "in", "zip", "(", "field_names", ",", "new_field_names", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.QNLILoader.download": [[252, 261], ["matching.QNLILoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], ["                ", "dataset", ".", "apply_field", "(", "lambda", "words", ":", "self", ".", "tokenizer", "(", "words", ")", ",", "field_name", "=", "field_name", ",", "\n", "new_field_name", "=", "new_field_name", ")", "\n", "", "", "return", "data_bundle", "\n", "\n", "", "def", "process", "(", "self", ",", "data_bundle", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.RTELoader.__init__": [[284, 286], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["field_name", "=", "[", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", "]", ",", "\n", "no_create_entry_dataset", "=", "[", "dataset", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", "if", "\n", "'train'", "not", "in", "name", "]", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.RTELoader._load": [[287, 313], ["core.dataset.DataSet", "open", "f.readline", "path.endswith", "warnings.warn", "line.strip.strip.strip", "line.strip.strip.strip", "line.strip.strip.split", "line.strip.strip.split", "core.dataset.DataSet.append", "core.dataset.DataSet.append", "core.instance.Instance", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["word_vocab", ".", "index_dataset", "(", "*", "data_bundle", ".", "datasets", ".", "values", "(", ")", ",", "field_name", "=", "[", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", "]", ")", "\n", "\n", "target_vocab", "=", "Vocabulary", "(", "padding", "=", "None", ",", "unknown", "=", "None", ")", "\n", "target_vocab", ".", "from_dataset", "(", "*", "[", "ds", "for", "name", ",", "ds", "in", "data_bundle", ".", "iter_datasets", "(", ")", "if", "'train'", "in", "name", "]", ",", "\n", "field_name", "=", "Const", ".", "TARGET", ",", "\n", "no_create_entry_dataset", "=", "[", "ds", "for", "name", ",", "ds", "in", "data_bundle", ".", "iter_datasets", "(", ")", "\n", "if", "(", "'train'", "not", "in", "name", ")", "and", "(", "ds", ".", "has_field", "(", "Const", ".", "TARGET", ")", ")", "]", "\n", ")", "\n", "if", "len", "(", "target_vocab", ".", "_no_create_word", ")", ">", "0", ":", "\n", "            ", "warn_msg", "=", "f\"There are {len(target_vocab._no_create_word)} target labels\"", "f\" in {[name for name in data_bundle.datasets.keys() if 'train' not in name]} \"", "f\"data set but not in train data set!.\"", "\n", "warnings", ".", "warn", "(", "warn_msg", ")", "\n", "logger", ".", "warning", "(", "warn_msg", ")", "\n", "\n", "", "has_target_datasets", "=", "[", "dataset", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", "if", "\n", "dataset", ".", "has_field", "(", "Const", ".", "TARGET", ")", "]", "\n", "target_vocab", ".", "index_dataset", "(", "*", "has_target_datasets", ",", "field_name", "=", "Const", ".", "TARGET", ")", "\n", "\n", "data_bundle", ".", "set_vocab", "(", "word_vocab", ",", "Const", ".", "INPUTS", "(", "0", ")", ")", "\n", "data_bundle", ".", "set_vocab", "(", "target_vocab", ",", "Const", ".", "TARGET", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUTS", "(", "1", ")", ",", "Const", ".", "INPUT_LENS", "(", "0", ")", ",", "Const", ".", "INPUT_LENS", "(", "1", ")", "]", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "INPUT_LENS", "(", "0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.RTELoader.download": [[314, 323], ["matching.RTELoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], ["dataset", ".", "add_seq_len", "(", "Const", ".", "INPUTS", "(", "1", ")", ",", "Const", ".", "INPUT_LENS", "(", "1", ")", ")", "\n", "dataset", ".", "set_input", "(", "*", "input_fields", ",", "flag", "=", "True", ")", "\n", "for", "fields", "in", "target_fields", ":", "\n", "                ", "if", "dataset", ".", "has_field", "(", "fields", ")", ":", "\n", "                    ", "dataset", ".", "set_target", "(", "fields", ",", "flag", "=", "True", ")", "\n", "\n", "", "", "", "return", "data_bundle", "\n", "\n", "\n", "", "", "class", "RTEPipe", "(", "MatchingPipe", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.QuoraLoader.__init__": [[348, 350], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "MNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.QuoraLoader._load": [[351, 365], ["core.dataset.DataSet", "open", "line.strip.strip.strip", "line.strip.strip.split", "core.dataset.DataSet.append", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["\n", "\n", "", "", "class", "LCQMCPipe", "(", "MatchingPipe", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "tokenizer", "=", "'cn=char'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ")", "\n", "\n", "", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "LCQMCLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "RenamePipe", "(", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", ")", ".", "process", "(", "data_bundle", ")", "\n", "return", "data_bundle", "\n", "\n", "\n", "", "", "class", "CNXNLIPipe", "(", "MatchingPipe", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.QuoraLoader.download": [[366, 375], ["RuntimeError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", "=", "'cn-char'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ")", "\n", "\n", "", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "CNXNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "GranularizePipe", "(", "task", "=", "'XNLI'", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", ")", ".", "process", "(", "data_bundle", ")", "# \u4f7f\u4e2d\u6587\u6570\u636e\u7684field", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", ")", ".", "process", "(", "data_bundle", ")", "\n", "return", "data_bundle", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.CNXNLILoader.__init__": [[398, 400], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["                ", "if", "(", "dataset", ".", "has_field", "(", "Const", ".", "RAW_CHARS", "(", "0", ")", ")", ")", ":", "\n", "                    ", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_CHARS", "(", "0", ")", ",", "Const", ".", "RAW_WORDS", "(", "0", ")", ")", "# RAW_CHARS->RAW_WORDS", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_CHARS", "(", "1", ")", ",", "Const", ".", "RAW_WORDS", "(", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.CNXNLILoader._load": [[401, 426], ["core.dataset.DataSet", "core.dataset.DataSet", "open", "f.readline().strip().split", "f.readline().strip().split.index", "f.readline().strip().split.index", "f.readline().strip().split.index", "f.readline().strip().split.index", "line.strip.strip.strip", "line.strip.strip.split", "core.dataset.DataSet.append", "f.readline().strip", "core.dataset.DataSet.append", "core.instance.Instance", "core.instance.Instance", "f.readline"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "elif", "(", "dataset", ".", "has_field", "(", "Const", ".", "INPUTS", "(", "0", ")", ")", ")", ":", "\n", "                    ", "dataset", ".", "rename_field", "(", "Const", ".", "INPUTS", "(", "0", ")", ",", "Const", ".", "CHAR_INPUTS", "(", "0", ")", ")", "# WORDS->CHARS", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "INPUTS", "(", "1", ")", ",", "Const", ".", "CHAR_INPUTS", "(", "1", ")", ")", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_WORDS", "(", "0", ")", ",", "Const", ".", "RAW_CHARS", "(", "0", ")", ")", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_WORDS", "(", "1", ")", ",", "Const", ".", "RAW_CHARS", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "\"field name of dataset is not qualified. It should have ether RAW_CHARS or WORDS\"", ")", "\n", "", "", "", "elif", "(", "self", ".", "task", "==", "'cn-nli-bert'", ")", ":", "\n", "            ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "if", "(", "dataset", ".", "has_field", "(", "Const", ".", "RAW_CHARS", "(", "0", ")", ")", ")", ":", "\n", "                    ", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_CHARS", "(", "0", ")", ",", "Const", ".", "RAW_WORDS", "(", "0", ")", ")", "# RAW_CHARS->RAW_WORDS", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_CHARS", "(", "1", ")", ",", "Const", ".", "RAW_WORDS", "(", "1", ")", ")", "\n", "", "elif", "(", "dataset", ".", "has_field", "(", "Const", ".", "RAW_WORDS", "(", "0", ")", ")", ")", ":", "\n", "                    ", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_WORDS", "(", "0", ")", ",", "Const", ".", "RAW_CHARS", "(", "0", ")", ")", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "RAW_WORDS", "(", "1", ")", ",", "Const", ".", "RAW_CHARS", "(", "1", ")", ")", "\n", "dataset", ".", "rename_field", "(", "Const", ".", "INPUT", ",", "Const", ".", "CHAR_INPUT", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "\"field name of dataset is not qualified. It should have ether RAW_CHARS or RAW_WORDS\"", "\n", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Only support task='cn-nli' or 'cn-nli-bert'\"", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.CNXNLILoader._load_train": [[427, 446], ["core.dataset.DataSet", "core.dataset.DataSet.rename_field", "core.dataset.DataSet.rename_field", "core.dataset.DataSet.rename_field", "core.dataset.DataSet.apply", "core.dataset.DataSet.apply", "open", "next", "line.strip().split", "raw_instance[].split", "raw_instance[].split", "raw_instance[].split", "core.dataset.DataSet.append", "i[].split", "i[].split", "line.strip", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["", "return", "data_bundle", "\n", "\n", "\n", "", "", "class", "GranularizePipe", "(", "Pipe", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "task", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "\n", "", "def", "_granularize", "(", "self", ",", "data_bundle", ",", "tag_map", ")", ":", "\n", "        ", "r\"\"\"\n        \u8be5\u51fd\u6570\u5bf9data_bundle\u4e2d'target'\u5217\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u8f6c\u6362\u3002\n\n        :param data_bundle:\n        :param dict tag_map: \u5c06target\u5217\u4e2d\u7684tag\u505a\u4ee5\u4e0b\u7684\u6620\u5c04\uff0c\u6bd4\u5982{\"0\":0, \"1\":0, \"3\":1, \"4\":1}, \u5219\u4f1a\u5220\u9664target\u4e3a\"2\"\u7684instance\uff0c\n            \u4e14\u5c06\"1\"\u8ba4\u4e3a\u662f\u7b2c0\u7c7b\u3002\n        :return: \u4f20\u5165\u7684data_bundle\n        \"\"\"", "\n", "for", "name", "in", "list", "(", "data_bundle", ".", "datasets", ".", "keys", "(", ")", ")", ":", "\n", "            ", "dataset", "=", "data_bundle", ".", "get_dataset", "(", "name", ")", "\n", "dataset", ".", "apply_field", "(", "lambda", "target", ":", "tag_map", ".", "get", "(", "target", ",", "-", "100", ")", ",", "field_name", "=", "Const", ".", "TARGET", ",", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.CNXNLILoader.load": [[447, 460], ["utils.check_loader_paths", "matching.CNXNLILoader.items", "DataBundle", "matching.CNXNLILoader.download", "matching.CNXNLILoader._load_train", "matching.CNXNLILoader._load"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.utils.check_loader_paths", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader.download", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.CNXNLILoader._load_train", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._load"], ["new_field_name", "=", "Const", ".", "TARGET", ")", "\n", "dataset", ".", "drop", "(", "lambda", "ins", ":", "ins", "[", "Const", ".", "TARGET", "]", "==", "-", "100", ")", "\n", "data_bundle", ".", "set_dataset", "(", "dataset", ",", "name", ")", "\n", "", "return", "data_bundle", "\n", "\n", "", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "task_tag_dict", "=", "{", "\n", "'XNLI'", ":", "{", "'neutral'", ":", "0", ",", "'entailment'", ":", "1", ",", "'contradictory'", ":", "2", ",", "'contradiction'", ":", "2", "}", "\n", "}", "\n", "if", "self", ".", "task", "in", "task_tag_dict", ":", "\n", "            ", "data_bundle", "=", "self", ".", "_granularize", "(", "data_bundle", "=", "data_bundle", ",", "tag_map", "=", "task_tag_dict", "[", "self", ".", "task", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Only support {task_tag_dict.keys()} task_tag_map.\"", ")", "\n", "", "return", "data_bundle", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.CNXNLILoader.download": [[461, 470], ["matching.CNXNLILoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], ["\n", "\n", "", "", "class", "MachingTruncatePipe", "(", "Pipe", ")", ":", "# truncate sentence for bert, modify seq_len", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "pass", "\n", "", "return", "None", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.BQCorpusLoader.__init__": [[495, 497], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["data_bundle", "=", "RenamePipe", "(", "task", "=", "'cn-nli-bert'", ")", ".", "process", "(", "data_bundle", ")", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.BQCorpusLoader._load": [[498, 512], ["core.dataset.DataSet", "open", "next", "line.strip.strip.strip", "line.strip.strip.index", "core.dataset.DataSet.append", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["\n", "", "", "class", "CNXNLIBertPipe", "(", "MatchingBertPipe", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "tokenizer", "=", "'cn-char'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ")", "\n", "\n", "", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "data_bundle", "=", "CNXNLILoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "GranularizePipe", "(", "task", "=", "'XNLI'", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", "task", "=", "'cn-nli-bert'", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "TruncateBertPipe", "(", "task", "=", "'cn'", ")", ".", "process", "(", "data_bundle", ")", "\n", "data_bundle", "=", "RenamePipe", "(", "task", "=", "'cn-nli-bert'", ")", ".", "process", "(", "data_bundle", ")", "\n", "return", "data_bundle", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.BQCorpusLoader.download": [[513, 522], ["RuntimeError"], "methods", ["None"], ["", "", "class", "TruncateBertPipe", "(", "Pipe", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "task", "=", "'cn'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "\n", "", "def", "_truncate", "(", "self", ",", "sentence_index", ":", "list", ",", "sep_index_vocab", ")", ":", "\n", "# \u6839\u636e[SEP]\u5728vocab\u4e2d\u7684index\uff0c\u627e\u5230[SEP]\u5728dataset\u7684field['words']\u4e2d\u7684index", "\n", "        ", "sep_index_words", "=", "sentence_index", ".", "index", "(", "sep_index_vocab", ")", "\n", "words_before_sep", "=", "sentence_index", "[", ":", "sep_index_words", "]", "\n", "words_after_sep", "=", "sentence_index", "[", "sep_index_words", ":", "]", "# \u6ce8\u610f\u6b64\u90e8\u5206\u5305\u62ec\u4e86[SEP]", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.LCQMCLoader.__init__": [[548, 550], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.LCQMCLoader._load": [[551, 567], ["core.dataset.DataSet", "open", "line.strip.strip.strip", "line.strip.strip.split", "len", "core.dataset.DataSet.append", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.matching.LCQMCLoader.download": [[568, 577], ["RuntimeError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.cws.CWSLoader.__init__": [[38, 49], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["\n", "tags", "=", "[", "]", "\n", "for", "word_len", "in", "word_lens", ":", "\n", "        ", "if", "word_len", "==", "1", ":", "\n", "            ", "tags", ".", "append", "(", "'SEG'", ")", "\n", "", "else", ":", "\n", "            ", "tags", ".", "extend", "(", "[", "'APP'", "]", "*", "(", "word_len", "-", "1", ")", ")", "\n", "tags", ".", "append", "(", "'SEG'", ")", "\n", "", "", "return", "tags", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.cws.CWSLoader._load": [[50, 58], ["core.dataset.DataSet", "open", "line.strip.strip.strip", "core.dataset.DataSet.append", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_alpha_span_to_special_tag", "(", "span", ")", ":", "\n", "    ", "r\"\"\"\n    \u5c06span\u66ff\u6362\u6210\u7279\u6b8a\u7684\u5b57\u7b26\n\n    :param str span:\n    :return:\n    \"\"\"", "\n", "if", "'oo'", "==", "span", ".", "lower", "(", ")", ":", "# speical case when represent 2OO8", "\n", "        ", "return", "span", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.cws.CWSLoader.download": [[59, 98], ["cws.CWSLoader._get_dataset_path", "glob.glob", "os.path.join", "shutil.rmtree", "cws.CWSLoader._get_dataset_path", "os.path.exists", "os.stat", "os.path.join", "time.time", "os.remove", "os.renames", "os.path.exists", "open", "open", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.remove", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "random.random", "f2.write", "f1.write"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write"], ["", "if", "len", "(", "span", ")", "==", "1", ":", "\n", "        ", "return", "span", "\n", "", "else", ":", "\n", "        ", "return", "'<ENG>'", "\n", "\n", "\n", "", "", "def", "_find_and_replace_alpha_spans", "(", "line", ")", ":", "\n", "    ", "r\"\"\"\n    \u4f20\u5165\u539f\u59cb\u53e5\u5b50\uff0c\u66ff\u6362\u5176\u4e2d\u7684\u5b57\u6bcd\u4e3a\u7279\u6b8a\u6807\u8bb0\n\n    :param str line:\u539f\u59cb\u6570\u636e\n    :return: str\n    \"\"\"", "\n", "new_line", "=", "''", "\n", "pattern", "=", "'[a-zA-Z]+(?=[\\u4e00-\\u9fff \uff0c\uff05,.\u3002\uff01<\uff0d\u201c])'", "\n", "prev_end", "=", "0", "\n", "for", "match", "in", "re", ".", "finditer", "(", "pattern", ",", "line", ")", ":", "\n", "        ", "start", ",", "end", "=", "match", ".", "span", "(", ")", "\n", "span", "=", "line", "[", "start", ":", "end", "]", "\n", "new_line", "+=", "line", "[", "prev_end", ":", "start", "]", "+", "_alpha_span_to_special_tag", "(", "span", ")", "\n", "prev_end", "=", "end", "\n", "", "new_line", "+=", "line", "[", "prev_end", ":", "]", "\n", "return", "new_line", "\n", "\n", "\n", "", "def", "_digit_span_to_special_tag", "(", "span", ")", ":", "\n", "    ", "r\"\"\"\n\n    :param str span: \u9700\u8981\u66ff\u6362\u7684str\n    :return:\n    \"\"\"", "\n", "if", "span", "[", "0", "]", "==", "'0'", "and", "len", "(", "span", ")", ">", "2", ":", "\n", "        ", "return", "'<NUM>'", "\n", "", "decimal_point_count", "=", "0", "# one might have more than one decimal pointers", "\n", "for", "idx", ",", "char", "in", "enumerate", "(", "span", ")", ":", "\n", "        ", "if", "char", "==", "'.'", "or", "char", "==", "'\ufe52'", "or", "char", "==", "'\u00b7'", ":", "\n", "            ", "decimal_point_count", "+=", "1", "\n", "", "", "if", "span", "[", "-", "1", "]", "==", "'.'", "or", "span", "[", "-", "1", "]", "==", "'\ufe52'", "or", "span", "[", "\n", "-", "1", "]", "==", "'\u00b7'", ":", "# last digit being decimal point means this is not a number", "\n", "        ", "if", "decimal_point_count", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.ConllLoader.__init__": [[59, 82], ["loader.Loader.__init__", "isinstance", "TypeError", "list", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["\n", "# \u8f6c\u6362tag", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "apply_field", "(", "self", ".", "convert_tag", ",", "field_name", "=", "Const", ".", "TARGET", ",", "new_field_name", "=", "Const", ".", "TARGET", ")", "\n", "\n", "", "_add_words_field", "(", "data_bundle", ",", "lower", "=", "self", ".", "lower", ")", "\n", "\n", "# index", "\n", "_indexize", "(", "data_bundle", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT", ",", "Const", ".", "INPUT_LEN", "]", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUT", ")", "\n", "\n", "", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n", "return", "data_bundle", "\n", "\n", "\n", "", "", "class", "Conll2003NERPipe", "(", "_NERPipe", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.ConllLoader._load": [[83, 94], ["core.dataset.DataSet", "file_reader._read_conll", "core.dataset.DataSet.append", "core.instance.Instance", "enumerate"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_reader._read_conll", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["    "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.Conll2003Loader.__init__": [[123, 128], ["conll.ConllLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["\n", "\n", "", "", "class", "Conll2003Pipe", "(", "Pipe", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.Conll2003Loader._load": [[129, 149], ["core.dataset.DataSet", "file_reader._read_conll", "enumerate", "core.dataset.DataSet.append", "str().startswith", "core.instance.Instance", "enumerate", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_reader._read_conll", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.Conll2003Loader.download": [[150, 152], ["RuntimeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "chunk_encoding_type", "=", "'bioes'", ",", "ner_encoding_type", "=", "'bioes'", ",", "lower", ":", "bool", "=", "False", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.Conll2003NERLoader.__init__": [[182, 187], ["conll.ConllLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["\n", "# \u8f6c\u6362tag", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "drop", "(", "lambda", "x", ":", "\"-DOCSTART-\"", "in", "x", "[", "Const", ".", "RAW_WORD", "]", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.Conll2003NERLoader._load": [[188, 210], ["core.dataset.DataSet", "file_reader._read_conll", "enumerate", "core.dataset.DataSet.append", "len", "RuntimeError", "str().startswith", "core.instance.Instance", "enumerate", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_reader._read_conll", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["dataset", ".", "apply_field", "(", "self", ".", "chunk_convert_tag", ",", "field_name", "=", "'chunk'", ",", "new_field_name", "=", "'chunk'", ")", "\n", "dataset", ".", "apply_field", "(", "self", ".", "ner_convert_tag", ",", "field_name", "=", "'ner'", ",", "new_field_name", "=", "'ner'", ")", "\n", "\n", "", "_add_words_field", "(", "data_bundle", ",", "lower", "=", "self", ".", "lower", ")", "\n", "\n", "# index", "\n", "_indexize", "(", "data_bundle", ",", "input_field_names", "=", "Const", ".", "INPUT", ",", "target_field_names", "=", "[", "'pos'", ",", "'ner'", "]", ")", "\n", "# chunk\u4e2d\u5b58\u5728\u4e00\u4e9btag\u53ea\u5728dev\u4e2d\u51fa\u73b0\uff0c\u6ca1\u5728train\u4e2d", "\n", "tgt_vocab", "=", "Vocabulary", "(", "unknown", "=", "None", ",", "padding", "=", "None", ")", "\n", "tgt_vocab", ".", "from_dataset", "(", "*", "data_bundle", ".", "datasets", ".", "values", "(", ")", ",", "field_name", "=", "'chunk'", ")", "\n", "tgt_vocab", ".", "index_dataset", "(", "*", "data_bundle", ".", "datasets", ".", "values", "(", ")", ",", "field_name", "=", "'chunk'", ")", "\n", "data_bundle", ".", "set_vocab", "(", "tgt_vocab", ",", "'chunk'", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "INPUT", ",", "Const", ".", "INPUT_LEN", "]", "\n", "target_fields", "=", "[", "'pos'", ",", "'ner'", ",", "'chunk'", ",", "Const", ".", "INPUT_LEN", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUT", ")", "\n", "\n", "", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n", "return", "data_bundle", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.Conll2003NERLoader.download": [[211, 213], ["RuntimeError"], "methods", ["None"], ["\n", "", "def", "process_from_file", "(", "self", ",", "paths", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.OntoNotesNERLoader.__init__": [[239, 241], ["conll.ConllLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.OntoNotesNERLoader._load": [[242, 287], ["conll.ConllLoader._load", "super()._load.apply_field", "super()._load.apply_field", "tag.strip", "bio_tags.append", "word.replace.replace.replace", "word.replace.replace.startswith", "converted_words.append", "converted_words.append", "converted_words.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["\n", "\n", "def", "process_from_file", "(", "self", ",", "paths", ")", ":", "\n", "        ", "data_bundle", "=", "OntoNotesNERLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n", "\n", "", "", "class", "_CNNERPipe", "(", "Pipe", ")", ":", "\n", "    ", "r\"\"\"\n    \u4e2d\u6587NER\u4efb\u52a1\u7684\u5904\u7406Pipe, \u8be5Pipe\u4f1a\uff081\uff09\u590d\u5236raw_chars\u5217\uff0c\u5e76\u547d\u540d\u4e3achars; (2\uff09\u5728chars, target\u5217\u5efa\u7acb\u8bcd\u8868\n    (\u521b\u5efa :class:`fastNLP.Vocabulary` \u5bf9\u8c61\uff0c\u6240\u4ee5\u5728\u8fd4\u56de\u7684DataBundle\u4e2d\u5c06\u6709\u4e24\u4e2aVocabulary); (3\uff09\u5c06chars\uff0ctarget\u5217\u6839\u636e\u76f8\u5e94\u7684\n    Vocabulary\u8f6c\u6362\u4e3aindex\u3002\n\n    raw_chars\u5217\u4e3aList[str], \u662f\u672a\u8f6c\u6362\u7684\u539f\u59cb\u6570\u636e; chars\u5217\u4e3aList[int]\uff0c\u662f\u8f6c\u6362\u4e3aindex\u7684\u8f93\u5165\u6570\u636e; target\u5217\u662fList[int]\uff0c\u662f\u8f6c\u6362\u4e3aindex\u7684\n    target\u3002\u8fd4\u56de\u7684DataSet\u4e2d\u88ab\u8bbe\u7f6e\u4e3ainput\u6709chars, target, seq_len; \u8bbe\u7f6e\u4e3atarget\u6709target, seq_len\u3002\n\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "encoding_type", ":", "str", "=", "'bio'", ",", "bigrams", "=", "False", ",", "trigrams", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param str encoding_type: target\u5217\u4f7f\u7528\u4ec0\u4e48\u7c7b\u578b\u7684encoding\u65b9\u5f0f\uff0c\u652f\u6301bioes, bio\u4e24\u79cd\u3002\n        :param bool bigrams: \u662f\u5426\u589e\u52a0\u4e00\u5217bigrams. bigrams\u7684\u6784\u6210\u662f['\u590d', '\u65e6', '\u5927', '\u5b66', ...]->[\"\u590d\u65e6\", \"\u65e6\u5927\", ...]\u3002\u5982\u679c\n            \u8bbe\u7f6e\u4e3aTrue\uff0c\u8fd4\u56de\u7684DataSet\u5c06\u6709\u4e00\u5217\u540d\u4e3abigrams, \u4e14\u5df2\u7ecf\u8f6c\u6362\u4e3a\u4e86index\u5e76\u8bbe\u7f6e\u4e3ainput\uff0c\u5bf9\u5e94\u7684vocab\u53ef\u4ee5\u901a\u8fc7\n            data_bundle.get_vocab('bigrams')\u83b7\u53d6.\n        :param bool trigrams: \u662f\u5426\u589e\u52a0\u4e00\u5217trigrams. trigrams\u7684\u6784\u6210\u662f ['\u590d', '\u65e6', '\u5927', '\u5b66', ...]->[\"\u590d\u65e6\u5927\", \"\u65e6\u5927\u5b66\", ...]\n            \u3002\u5982\u679c\u8bbe\u7f6e\u4e3aTrue\uff0c\u8fd4\u56de\u7684DataSet\u5c06\u6709\u4e00\u5217\u540d\u4e3atrigrams, \u4e14\u5df2\u7ecf\u8f6c\u6362\u4e3a\u4e86index\u5e76\u8bbe\u7f6e\u4e3ainput\uff0c\u5bf9\u5e94\u7684vocab\u53ef\u4ee5\u901a\u8fc7\n            data_bundle.get_vocab('trigrams')\u83b7\u53d6.\n        \"\"\"", "\n", "if", "encoding_type", "==", "'bio'", ":", "\n", "            ", "self", ".", "convert_tag", "=", "iob2", "\n", "", "elif", "encoding_type", "==", "'bioes'", ":", "\n", "            ", "self", ".", "convert_tag", "=", "lambda", "words", ":", "iob2bioes", "(", "iob2", "(", "words", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"encoding_type only supports `bio` and `bioes`.\"", ")", "\n", "\n", "", "self", ".", "bigrams", "=", "bigrams", "\n", "self", ".", "trigrams", "=", "trigrams", "\n", "\n", "", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", "->", "DataBundle", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.OntoNotesNERLoader.download": [[288, 290], ["RuntimeError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.CTBLoader.__init__": [[320, 329], ["loader.Loader.__init__", "conll.ConllLoader"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["", "input_field_names", ".", "append", "(", "'trigrams'", ")", "\n", "\n", "# index", "\n", "", "_indexize", "(", "data_bundle", ",", "input_field_names", ",", "Const", ".", "TARGET", ")", "\n", "\n", "input_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "+", "input_field_names", "\n", "target_fields", "=", "[", "Const", ".", "TARGET", ",", "Const", ".", "INPUT_LEN", "]", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "CHAR_INPUT", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.CTBLoader._load": [[330, 333], ["conll.CTBLoader.loader._load"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._load"], ["\n", "", "data_bundle", ".", "set_input", "(", "*", "input_fields", ")", "\n", "data_bundle", ".", "set_target", "(", "*", "target_fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.CTBLoader.download": [[334, 343], ["RuntimeError"], "methods", ["None"], ["return", "data_bundle", "\n", "\n", "\n", "", "", "class", "MsraNERPipe", "(", "_CNNERPipe", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.CNNERLoader._load": [[346, 382], ["core.dataset.DataSet", "open", "line.strip.strip.strip", "line.strip.strip.split", "raw_chars.append", "target.append", "len", "line.strip.split.append", "core.dataset.DataSet.append", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["\n", "\n", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", "->", "DataBundle", ":", "\n", "        ", "data_bundle", "=", "MsraNERLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n", "\n", "", "", "class", "PeopleDailyPipe", "(", "_CNNERPipe", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.MsraNERLoader.__init__": [[419, 421], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.MsraNERLoader.download": [[422, 470], ["conll.MsraNERLoader._get_dataset_path", "glob.glob", "os.path.join", "shutil.rmtree", "conll.MsraNERLoader._get_dataset_path", "os.path.exists", "os.stat", "os.path.join", "time.time", "os.remove", "os.renames", "os.path.exists", "open", "open", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.remove", "os.path.join", "os.path.join", "os.path.join", "line.strip.strip.strip", "os.path.join", "lines.append", "lines.clear", "random.random", "f2.write", "f1.write"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.clear", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write"], ["\n", "\n", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", "->", "DataBundle", ":", "\n", "        ", "data_bundle", "=", "WeiboNERLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.WeiboNERLoader.__init__": [[497, 499], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.WeiboNERLoader.download": [[500, 511], ["conll.WeiboNERLoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.PeopleDailyNERLoader.__init__": [[538, 540], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.conll.PeopleDailyNERLoader.download": [[541, 546], ["conll.PeopleDailyNERLoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.qa.CMRC2018Loader.__init__": [[41, 43], ["Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["\n", "answer_start", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.qa.CMRC2018Loader._load": [[44, 65], ["open", "core.DataSet", "json.load", "core.DataSet.append", "answers.append", "answer_starts.append", "core.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["if", "len", "(", "cnt_lst", ")", "+", "len", "(", "q_lst", ")", "+", "3", ">", "max_len", ":", "# \u9884\u7559\u5f00\u5934\u7684[CLS]\u548c[SEP]\u548c\u4e2d\u95f4\u7684[sep]", "\n", "                ", "if", "'answer_starts'", "in", "ins", "and", "'answers'", "in", "ins", ":", "\n", "                    ", "answer_start", "=", "int", "(", "ins", "[", "'answer_starts'", "]", "[", "0", "]", ")", "\n", "answer", "=", "ins", "[", "'answers'", "]", "[", "0", "]", "\n", "answer_end", "=", "answer_start", "+", "len", "(", "answer", ")", "\n", "if", "answer_end", ">", "max_len", "-", "3", "-", "len", "(", "q_lst", ")", ":", "\n", "                        ", "span_start", "=", "answer_end", "+", "3", "+", "len", "(", "q_lst", ")", "-", "max_len", "\n", "span_end", "=", "answer_end", "\n", "", "else", ":", "\n", "                        ", "span_start", "=", "0", "\n", "span_end", "=", "max_len", "-", "3", "-", "len", "(", "q_lst", ")", "\n", "", "cnt_lst", "=", "cnt_lst", "[", "span_start", ":", "span_end", "]", "\n", "answer_start", "=", "int", "(", "ins", "[", "'answer_starts'", "]", "[", "0", "]", ")", "\n", "answer_start", "-=", "span_start", "\n", "answer_end", "=", "answer_start", "+", "len", "(", "ins", "[", "'answers'", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "cnt_lst", "=", "cnt_lst", "[", ":", "max_len", "-", "len", "(", "q_lst", ")", "-", "3", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "'answer_starts'", "in", "ins", "and", "'answers'", "in", "ins", ":", "\n", "                    ", "answer_start", "=", "int", "(", "ins", "[", "'answer_starts'", "]", "[", "0", "]", ")", "\n", "answer_end", "=", "answer_start", "+", "len", "(", "ins", "[", "'answers'", "]", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.qa.CMRC2018Loader.download": [[66, 74], ["qa.CMRC2018Loader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], ["", "", "tokens", "=", "cnt_lst", "+", "[", "'[SEP]'", "]", "+", "q_lst", "\n", "new_ins", "[", "'context_len'", "]", "=", "len", "(", "cnt_lst", ")", "\n", "new_ins", "[", "concat_field_name", "]", "=", "tokens", "\n", "\n", "if", "answer_start", "!=", "-", "1", ":", "\n", "                ", "new_ins", "[", "'target_start'", "]", "=", "answer_start", "\n", "new_ins", "[", "'target_end'", "]", "=", "answer_end", "-", "1", "\n", "\n", "", "new_ds", ".", "append", "(", "new_ins", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.summarization.ExtCNNDMLoader.__init__": [[28, 31], ["json.JsonLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "sent_max_len", ",", "doc_max_timesteps", ",", "vocab_path", "=", "None", ",", "domain", "=", "False", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.summarization.ExtCNNDMLoader.load": [[32, 54], ["utils.check_loader_paths", "data_bundle.DataBundle.DataBundle", "summarization.ExtCNNDMLoader.download", "summarization.ExtCNNDMLoader.pop", "summarization.ExtCNNDMLoader._load", "summarization.ExtCNNDMLoader.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.utils.check_loader_paths", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader.download", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "vocab_path", "=", "vocab_path", "\n", "self", ".", "sent_max_len", "=", "sent_max_len", "\n", "self", ".", "doc_max_timesteps", "=", "doc_max_timesteps", "\n", "self", ".", "domain", "=", "domain", "\n", "\n", "", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.summarization.ExtCNNDMLoader.download": [[55, 64], ["summarization.ExtCNNDMLoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], ["\n", "\n", "if", "self", ".", "vocab_path", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.CLSBaseLoader.__init__": [[53, 57], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["\n", "", "return", "data_bundle", "\n", "\n", "", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.CLSBaseLoader._load": [[58, 85], ["core.dataset.DataSet", "open", "core._logger.logger.error", "line.strip.strip.strip", "line.strip.strip.index", "target.startswith", "target.endswith", "raw_words.replace.replace.endswith", "raw_words.replace.replace.startswith", "raw_words.replace.replace.replace", "core.dataset.DataSet.append", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["\n", "# \u590d\u5236\u4e00\u5217words", "\n", "data_bundle", "=", "_add_words_field", "(", "data_bundle", ",", "lower", "=", "self", ".", "lower", ")", "\n", "# \u8fdb\u884ctokenize", "\n", "data_bundle", "=", "self", ".", "_tokenize", "(", "data_bundle", "=", "data_bundle", ",", "field_name", "=", "Const", ".", "INPUT", ")", "\n", "# \u5efa\u7acb\u8bcd\u8868\u5e76index", "\n", "data_bundle", "=", "_indexize", "(", "data_bundle", "=", "data_bundle", ")", "\n", "\n", "for", "name", ",", "dataset", "in", "data_bundle", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "add_seq_len", "(", "Const", ".", "INPUT", ")", "\n", "\n", "", "data_bundle", ".", "set_input", "(", "Const", ".", "INPUT", ",", "Const", ".", "INPUT_LEN", ")", "\n", "data_bundle", ".", "set_target", "(", "Const", ".", "TARGET", ")", "\n", "\n", "return", "data_bundle", "\n", "\n", "", "def", "process_from_file", "(", "self", ",", "paths", ")", "->", "DataBundle", ":", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.AGsNewsLoader.download": [[120, 130], ["classification.AGsNewsLoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], ["        ", "r\"\"\"\n        \n        :param bool lower: \u662f\u5426\u5bf9\u8f93\u5165\u8fdb\u884c\u5c0f\u5199\u5316\u3002\n        :param int granularity: \u652f\u63012, 3, 5\u3002\u82e5\u4e3a2, \u5219\u8ba4\u4e3a\u662f2\u5206\u7c7b\u95ee\u9898\uff0c\u5c061\u30012\u5f52\u4e3a1\u7c7b\uff0c4\u30015\u5f52\u4e3a\u4e00\u7c7b\uff0c\u4e22\u63892\uff1b\u82e5\u4e3a3, \u5219\u67093\u5206\u7c7b\u95ee\u9898\uff0c\u5c06\n            1\u30012\u5f52\u4e3a1\u7c7b\uff0c3\u5f52\u4e3a1\u7c7b\uff0c4\u30015\u5f52\u4e3a1\u7c7b\uff1b\u82e5\u4e3a5, \u5219\u67095\u5206\u7c7b\u95ee\u9898\u3002\n        :param str tokenizer: \u4f7f\u7528\u54ea\u79cdtokenize\u65b9\u5f0f\u5c06\u6570\u636e\u5207\u6210\u5355\u8bcd\u3002\u652f\u6301'spacy'\u548c'raw'\u3002raw\u4f7f\u7528\u7a7a\u683c\u4f5c\u4e3a\u5207\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "lower", "=", "lower", ",", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "assert", "granularity", "in", "(", "2", ",", "3", ",", "5", ")", ",", "\"granularity can only be 2,3,5.\"", "\n", "self", ".", "granularity", "=", "granularity", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.DBPediaLoader.download": [[133, 155], ["classification.DBPediaLoader._get_dataset_path", "classification._split_dev"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification._split_dev"], ["", "elif", "granularity", "==", "3", ":", "\n", "            ", "self", ".", "tag_map", "=", "{", "\"1\"", ":", "\"negative\"", ",", "\"2\"", ":", "\"negative\"", ",", "\"3\"", ":", "\"medium\"", ",", "\"4\"", ":", "\"positive\"", ",", "\"5\"", ":", "\"positive\"", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "tag_map", "=", "None", "\n", "\n", "", "", "def", "process", "(", "self", ",", "data_bundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f20\u5165\u7684DataSet\u5e94\u8be5\u5177\u5907\u5982\u4e0b\u7684\u7ed3\u6784\n\n        .. csv-table::\n           :header: \"raw_words\", \"target\"\n\n           \"I got 'new' tires from them and... \", \"1\"\n           \"Don't waste your time.  We had two...\", \"1\"\n           \"...\", \"...\"\n\n        :param data_bundle:\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "tag_map", "is", "not", "None", ":", "\n", "            ", "data_bundle", "=", "_granularize", "(", "data_bundle", ",", "self", ".", "tag_map", ")", "\n", "\n", "", "data_bundle", "=", "super", "(", ")", ".", "process", "(", "data_bundle", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.IMDBLoader.__init__": [[177, 179], ["classification.CLSBaseLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.IMDBLoader.download": [[180, 200], ["classification.IMDBLoader._get_dataset_path", "classification._split_dev"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification._split_dev"], ["\n", "\n", "def", "__init__", "(", "self", ",", "lower", ":", "bool", "=", "False", ",", "tokenizer", ":", "str", "=", "'spacy'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param bool lower: \u662f\u5426\u5bf9\u8f93\u5165\u8fdb\u884c\u5c0f\u5199\u5316\u3002\n        :param str tokenizer: \u4f7f\u7528\u54ea\u79cdtokenize\u65b9\u5f0f\u5c06\u6570\u636e\u5207\u6210\u5355\u8bcd\u3002\u652f\u6301'spacy'\u548c'raw'\u3002raw\u4f7f\u7528\u7a7a\u683c\u4f5c\u4e3a\u5207\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "lower", "=", "lower", ",", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.SSTLoader.__init__": [[224, 226], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.SSTLoader._load": [[227, 241], ["core.dataset.DataSet", "open", "line.strip.strip.strip", "core.dataset.DataSet.append", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["\n", "\n", "def", "__init__", "(", "self", ",", "lower", ":", "bool", "=", "False", ",", "tokenizer", ":", "str", "=", "'spacy'", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param bool lower: \u662f\u5426\u5bf9\u8f93\u5165\u8fdb\u884c\u5c0f\u5199\u5316\u3002\n        :param str tokenizer: \u4f7f\u7528\u54ea\u79cdtokenize\u65b9\u5f0f\u5c06\u6570\u636e\u5207\u6210\u5355\u8bcd\u3002\u652f\u6301'spacy'\u548c'raw'\u3002raw\u4f7f\u7528\u7a7a\u683c\u4f5c\u4e3a\u5207\u5206\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "lower", "=", "lower", ",", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.SSTLoader.download": [[242, 252], ["classification.SSTLoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], ["\n", "", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param str paths:\n        :return: DataBundle\n        \"\"\"", "\n", "data_bundle", "=", "AGsNewsLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", "=", "data_bundle", ")", "\n", "\n", "\n", "", "", "class", "DBPediaPipe", "(", "CLSBasePipe", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.YelpFullLoader.download": [[255, 277], ["classification.YelpFullLoader._get_dataset_path", "classification._split_dev"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification._split_dev"], ["\n", "\n", "def", "__init__", "(", "self", ",", "lower", ":", "bool", "=", "False", ",", "tokenizer", ":", "str", "=", "'spacy'", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.YelpPolarityLoader.download": [[280, 302], ["classification.YelpPolarityLoader._get_dataset_path", "classification._split_dev"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification._split_dev"], ["\n", "super", "(", ")", ".", "__init__", "(", "lower", "=", "lower", ",", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "\n", "", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param str paths:\n        :return: DataBundle\n        \"\"\"", "\n", "data_bundle", "=", "DBPediaLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "return", "self", ".", "process", "(", "data_bundle", "=", "data_bundle", ")", "\n", "\n", "\n", "", "", "class", "SSTPipe", "(", "CLSBasePipe", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.SST2Loader.__init__": [[326, 328], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["\n", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "self", ".", "subtree", "=", "subtree", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.SST2Loader._load": [[329, 358], ["core.dataset.DataSet", "open", "f.readline", "warnings.warn", "os.path.split", "line.strip.strip.strip", "line.strip.strip.strip", "line.strip.strip.index", "int", "core.dataset.DataSet.append", "core.dataset.DataSet.append", "core.instance.Instance", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["self", ".", "train_tree", "=", "train_subtree", "\n", "self", ".", "lower", "=", "lower", "\n", "assert", "granularity", "in", "(", "2", ",", "3", ",", "5", ")", ",", "\"granularity can only be 2,3,5.\"", "\n", "self", ".", "granularity", "=", "granularity", "\n", "\n", "if", "granularity", "==", "2", ":", "\n", "            ", "self", ".", "tag_map", "=", "{", "\"0\"", ":", "\"negative\"", ",", "\"1\"", ":", "\"negative\"", ",", "\"3\"", ":", "\"positive\"", ",", "\"4\"", ":", "\"positive\"", "}", "\n", "", "elif", "granularity", "==", "3", ":", "\n", "            ", "self", ".", "tag_map", "=", "{", "\"0\"", ":", "\"negative\"", ",", "\"1\"", ":", "\"negative\"", ",", "\"2\"", ":", "\"medium\"", ",", "\"3\"", ":", "\"positive\"", ",", "\"4\"", ":", "\"positive\"", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "tag_map", "=", "None", "\n", "\n", "", "", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        ", "r\"\"\"\n        \u5bf9DataBundle\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\u3002\u8f93\u5165\u7684DataSet\u5e94\u8be5\u81f3\u5c11\u62e5\u6709raw_words\u8fd9\u4e00\u5217\uff0c\u4e14\u5185\u5bb9\u7c7b\u4f3c\u4e0e\n\n        .. csv-table:: \u4e0b\u9762\u662f\u4f7f\u7528SSTLoader\u8bfb\u53d6\u7684DataSet\u6240\u5177\u5907\u7684field\n            :header: \"raw_words\"\n\n            \"(2 (3 (3 Effective) (2 but)) (1 (1 too-tepid)...\"\n            \"(3 (3 (2 If) (3 (2 you) (3 (2 sometimes) ...\"\n            \"...\"\n\n        :param ~fastNLP.io.DataBundle data_bundle: \u9700\u8981\u5904\u7406\u7684DataBundle\u5bf9\u8c61\n        :return:\n        \"\"\"", "\n", "#  \u5148\u53d6\u51fasubtree", "\n", "for", "name", "in", "list", "(", "data_bundle", ".", "datasets", ".", "keys", "(", ")", ")", ":", "\n", "            ", "dataset", "=", "data_bundle", ".", "get_dataset", "(", "name", ")", "\n", "ds", "=", "DataSet", "(", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.SST2Loader.download": [[359, 367], ["classification.SST2Loader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], ["use_subtree", "=", "self", ".", "subtree", "or", "(", "name", "==", "'train'", "and", "self", ".", "train_tree", ")", "\n", "for", "ins", "in", "dataset", ":", "\n", "                ", "raw_words", "=", "ins", "[", "Const", ".", "RAW_WORD", "]", "\n", "tree", "=", "Tree", ".", "fromstring", "(", "raw_words", ")", "\n", "if", "use_subtree", ":", "\n", "                    ", "for", "t", "in", "tree", ".", "subtrees", "(", ")", ":", "\n", "                        ", "raw_words", "=", "\" \"", ".", "join", "(", "t", ".", "leaves", "(", ")", ")", "\n", "instance", "=", "Instance", "(", "raw_words", "=", "raw_words", ",", "target", "=", "t", ".", "label", "(", ")", ")", "\n", "ds", ".", "append", "(", "instance", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.ChnSentiCorpLoader.__init__": [[390, 392], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.ChnSentiCorpLoader._load": [[393, 412], ["core.dataset.DataSet", "open", "f.readline", "line.strip.strip.strip", "line.strip.strip.index", "core.dataset.DataSet.append", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["\n", "\n", "def", "__init__", "(", "self", ",", "lower", "=", "False", ",", "tokenizer", "=", "'spacy'", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.ChnSentiCorpLoader.download": [[413, 422], ["classification.ChnSentiCorpLoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], ["\n", "super", "(", ")", ".", "__init__", "(", "lower", "=", "lower", ",", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "\n", "", "def", "process_from_file", "(", "self", ",", "paths", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param str paths: \u5982\u679c\u4e3aNone\uff0c\u5219\u81ea\u52a8\u4e0b\u8f7d\u5e76\u7f13\u5b58\u5230fastNLP\u7684\u7f13\u5b58\u5730\u5740\u3002\n        :return: DataBundle\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.THUCNewsLoader.__init__": [[443, 445], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.THUCNewsLoader._load": [[446, 457], ["core.dataset.DataSet", "open", "line.strip.strip.strip", "line.strip.strip.index", "core.dataset.DataSet.append", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["\n", "\n", "def", "__init__", "(", "self", ",", "lower", ":", "bool", "=", "False", ",", "tokenizer", ":", "str", "=", "'spacy'", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.THUCNewsLoader.download": [[458, 468], ["classification.THUCNewsLoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], ["\n", "super", "(", ")", ".", "__init__", "(", "tokenizer", "=", "tokenizer", ",", "lang", "=", "'en'", ")", "\n", "self", ".", "lower", "=", "lower", "\n", "\n", "", "def", "process", "(", "self", ",", "data_bundle", ":", "DataBundle", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.WeiboSenti100kLoader.__init__": [[492, 494], ["loader.Loader.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["        "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.WeiboSenti100kLoader._load": [[495, 506], ["core.dataset.DataSet", "open", "next", "line.strip.strip.strip", "core.dataset.DataSet.append", "core.instance.Instance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["\n", "# \u8bfb\u53d6\u6570\u636e", "\n", "data_bundle", "=", "IMDBLoader", "(", ")", ".", "load", "(", "paths", ")", "\n", "data_bundle", "=", "self", ".", "process", "(", "data_bundle", ")", "\n", "\n", "return", "data_bundle", "\n", "\n", "\n", "", "", "class", "ChnSentiCorpPipe", "(", "Pipe", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification.WeiboSenti100kLoader.download": [[507, 515], ["classification.WeiboSenti100kLoader._get_dataset_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.classification._split_dev": [[87, 117], ["glob.glob", "os.path.join", "shutil.rmtree", "loader.Loader()._get_dataset_path", "os.path.exists", "os.stat", "os.path.join", "time.time", "loader.Loader", "os.remove", "os.renames", "os.path.exists", "open", "open", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.remove", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "random.random", "f2.write", "f1.write"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write"], ["\n", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "class", "YelpFullPipe", "(", "CLSBasePipe", ")", ":", "\n", "    ", "r\"\"\"\n    \u5904\u7406YelpFull\u7684\u6570\u636e, \u5904\u7406\u4e4b\u540eDataSet\u4e2d\u7684\u5185\u5bb9\u5982\u4e0b\n\n    .. csv-table:: \u4e0b\u9762\u662f\u4f7f\u7528YelpFullPipe\u5904\u7406\u540e\u7684DataSet\u6240\u5177\u5907\u7684field\n        :header: \"raw_words\", \"target\", \"words\",  \"seq_len\"\n\n        \"I got 'new' tires from them and within...\", 0 ,\"[7, 110, 22, 107, 22, 499, 59, 140, 3,...]\", 160\n        \" Don't waste your time.  We had two dif... \", 0, \"[277, 17, 278, 38, 30, 112, 24, 85, 27...\", 40\n        \"...\", ., \"[...]\", .\n\n    dataset\u7684print_field_meta()\u51fd\u6570\u8f93\u51fa\u7684\u5404\u4e2afield\u7684\u88ab\u8bbe\u7f6e\u6210input\u548ctarget\u7684\u60c5\u51b5\u4e3a::\n\n        +-------------+-----------+--------+-------+---------+\n        | field_names | raw_words | target | words | seq_len |\n        +-------------+-----------+--------+-------+---------+\n        |   is_input  |   False   | False  |  True |   True  |\n        |  is_target  |   False   |  True  | False |  False  |\n        | ignore_type |           | False  | False |  False  |\n        |  pad_value  |           |   0    |   0   |    0    |\n        +-------------+-----------+--------+-------+---------+\n\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.json.JsonLoader.__init__": [[27, 37], ["loader.Loader.__init__", "fields.items", "list", "json.JsonLoader.fields.keys"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["def", "__init__", "(", "self", ",", "fields", "=", "None", ",", "dropna", "=", "False", ")", ":", "\n", "        ", "super", "(", "JsonLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropna", "=", "dropna", "\n", "self", ".", "fields", "=", "None", "\n", "self", ".", "fields_list", "=", "None", "\n", "if", "fields", ":", "\n", "            ", "self", ".", "fields", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "fields", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "fields", "[", "k", "]", "=", "k", "if", "v", "is", "None", "else", "v", "\n", "", "self", ".", "fields_list", "=", "list", "(", "self", ".", "fields", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.json.JsonLoader._load": [[38, 47], ["core.dataset.DataSet", "file_reader._read_json", "core.dataset.DataSet.append", "core.instance.Instance", "d.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_reader._read_json", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "", "def", "_load", "(", "self", ",", "path", ")", ":", "\n", "        ", "ds", "=", "DataSet", "(", ")", "\n", "for", "idx", ",", "d", "in", "_read_json", "(", "path", ",", "fields", "=", "self", ".", "fields_list", ",", "dropna", "=", "self", ".", "dropna", ")", ":", "\n", "            ", "if", "self", ".", "fields", ":", "\n", "                ", "ins", "=", "{", "self", ".", "fields", "[", "k", "]", ":", "v", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "                ", "ins", "=", "d", "\n", "", "ds", ".", "append", "(", "Instance", "(", "**", "ins", ")", ")", "\n", "", "return", "ds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader.__init__": [[26, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._load": [[29, 37], ["None"], "methods", ["None"], ["", "def", "_load", "(", "self", ",", "path", ":", "str", ")", "->", "DataSet", ":", "\n", "        ", "r\"\"\"\n        \u7ed9\u5b9a\u4e00\u4e2a\u8def\u5f84\uff0c\u8fd4\u56de\u8bfb\u53d6\u7684DataSet\u3002\n\n        :param str path: \u8def\u5f84\n        :return: DataSet\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader.load": [[38, 72], ["utils.check_loader_paths", "DataBundle", "loader.Loader.download", "loader.Loader._load", "loader.Loader.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.utils.check_loader_paths", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader.download", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "def", "load", "(", "self", ",", "paths", ":", "Union", "[", "str", ",", "Dict", "[", "str", ",", "str", "]", "]", "=", "None", ")", "->", "DataBundle", ":", "\n", "        ", "r\"\"\"\n        \u4ece\u6307\u5b9a\u4e00\u4e2a\u6216\u591a\u4e2a\u8def\u5f84\u4e2d\u7684\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u8fd4\u56de :class:`~fastNLP.io.DataBundle` \u3002\n\n        :param Union[str, Dict[str, str]] paths: \u652f\u6301\u4ee5\u4e0b\u7684\u51e0\u79cd\u8f93\u5165\u65b9\u5f0f\uff1a\n\n            0.\u5982\u679c\u4e3aNone\uff0c\u5219\u5148\u67e5\u770b\u672c\u5730\u662f\u5426\u6709\u7f13\u5b58\uff0c\u5982\u679c\u6ca1\u6709\u5219\u81ea\u52a8\u4e0b\u8f7d\u5e76\u7f13\u5b58\u3002\n\n            1.\u4f20\u5165\u4e00\u4e2a\u76ee\u5f55, \u8be5\u76ee\u5f55\u4e0b\u540d\u79f0\u5305\u542btrain\u7684\u88ab\u8ba4\u4e3a\u662ftrain\uff0c\u5305\u542btest\u7684\u88ab\u8ba4\u4e3a\u662ftest\uff0c\u5305\u542bdev\u7684\u88ab\u8ba4\u4e3a\u662fdev\uff0c\u5982\u679c\u68c0\u6d4b\u5230\u591a\u4e2a\u6587\u4ef6\u540d\u5305\u542b'train'\u3001 'dev'\u3001 'test'\u5219\u4f1a\u62a5\u9519::\n\n                data_bundle = xxxLoader().load('/path/to/dir')  # \u8fd4\u56de\u7684DataBundle\u4e2ddatasets\u6839\u636e\u76ee\u5f55\u4e0b\u662f\u5426\u68c0\u6d4b\u5230train\n                #  dev\u3001 test\u7b49\u6709\u6240\u53d8\u5316\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u7684\u65b9\u5f0f\u53d6\u51faDataSet\n                tr_data = data_bundle.get_dataset('train')\n                te_data = data_bundle.get_dataset('test')  # \u5982\u679c\u76ee\u5f55\u4e0b\u6709\u6587\u4ef6\u5305\u542btest\u8fd9\u4e2a\u5b57\u6bb5\n\n            2.\u4f20\u5165\u4e00\u4e2adict\uff0c\u6bd4\u5982train\uff0cdev\uff0ctest\u4e0d\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e0b\uff0c\u6216\u8005\u540d\u79f0\u4e2d\u4e0d\u5305\u542btrain, dev, test::\n\n                paths = {'train':\"/path/to/tr.conll\", 'dev':\"/to/validate.conll\", \"test\":\"/to/te.conll\"}\n                data_bundle = xxxLoader().load(paths)  # \u8fd4\u56de\u7684DataBundle\u4e2d\u7684dataset\u4e2d\u5305\u542b\"train\", \"dev\", \"test\"\n                dev_data = data_bundle.get_dataset('dev')\n\n            3.\u4f20\u5165\u6587\u4ef6\u8def\u5f84::\n\n                data_bundle = xxxLoader().load(\"/path/to/a/train.conll\") # \u8fd4\u56deDataBundle\u5bf9\u8c61, datasets\u4e2d\u4ec5\u5305\u542b'train'\n                tr_data = data_bundle.get_dataset('train')  # \u53d6\u51faDataSet\n\n        :return: \u8fd4\u56de\u7684 :class:`~fastNLP.io.DataBundle`\n        \"\"\"", "\n", "if", "paths", "is", "None", ":", "\n", "            ", "paths", "=", "self", ".", "download", "(", ")", "\n", "", "paths", "=", "check_loader_paths", "(", "paths", ")", "\n", "datasets", "=", "{", "name", ":", "self", ".", "_load", "(", "path", ")", "for", "name", ",", "path", "in", "paths", ".", "items", "(", ")", "}", "\n", "data_bundle", "=", "DataBundle", "(", "datasets", "=", "datasets", ")", "\n", "return", "data_bundle", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader.download": [[73, 80], ["NotImplementedError"], "methods", ["None"], ["", "def", "download", "(", "self", ")", "->", "str", ":", "\n", "        ", "r\"\"\"\n        \u81ea\u52a8\u4e0b\u8f7d\u8be5\u6570\u636e\u96c6\n\n        :return: \u4e0b\u8f7d\u540e\u89e3\u538b\u76ee\u5f55\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "f\"{self.__class__} cannot download data automatically.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.loader.loader.Loader._get_dataset_path": [[81, 95], ["file_utils.get_cache_path", "file_utils._get_dataset_url", "file_utils.cached_path"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.get_cache_path", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils._get_dataset_url", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.io.file_utils.cached_path"], ["", "@", "staticmethod", "\n", "def", "_get_dataset_path", "(", "dataset_name", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f20\u5165dataset\u7684\u540d\u79f0\uff0c\u83b7\u53d6\u8bfb\u53d6\u6570\u636e\u7684\u76ee\u5f55\u3002\u5982\u679c\u6570\u636e\u4e0d\u5b58\u5728\uff0c\u4f1a\u5c1d\u8bd5\u81ea\u52a8\u4e0b\u8f7d\u5e76\u7f13\u5b58\uff08\u5982\u679c\u652f\u6301\u7684\u8bdd\uff09\n\n        :param str dataset_name: \u6570\u636e\u96c6\u7684\u540d\u79f0\n        :return: str, \u6570\u636e\u96c6\u7684\u76ee\u5f55\u5730\u5740\u3002\u76f4\u63a5\u5230\u8be5\u76ee\u5f55\u4e0b\u8bfb\u53d6\u76f8\u5e94\u7684\u6570\u636e\u5373\u53ef\u3002\n        \"\"\"", "\n", "\n", "default_cache_path", "=", "get_cache_path", "(", ")", "\n", "url", "=", "_get_dataset_url", "(", "dataset_name", ")", "\n", "output_dir", "=", "cached_path", "(", "url_or_filename", "=", "url", ",", "cache_dir", "=", "default_cache_path", ",", "name", "=", "'dataset'", ")", "\n", "\n", "return", "output_dir", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.VocabularyOption.__init__": [[23, 33], ["utils.Option.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "max_size", "=", "None", ",", "\n", "min_freq", "=", "None", ",", "\n", "padding", "=", "'<pad>'", ",", "\n", "unknown", "=", "'<unk>'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "max_size", "=", "max_size", ",", "\n", "min_freq", "=", "min_freq", ",", "\n", "padding", "=", "padding", ",", "\n", "unknown", "=", "unknown", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.__init__": [[79, 104], ["collections.Counter", "collections.Counter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_size", "=", "None", ",", "min_freq", "=", "None", ",", "padding", "=", "'<pad>'", ",", "unknown", "=", "'<unk>'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param int max_size: `Vocabulary` \u7684\u6700\u5927\u5927\u5c0f, \u5373\u80fd\u5b58\u50a8\u8bcd\u7684\u6700\u5927\u6570\u91cf\n            \u82e5\u4e3a ``None`` , \u5219\u4e0d\u9650\u5236\u5927\u5c0f. Default: ``None``\n        :param int min_freq: \u80fd\u88ab\u8bb0\u5f55\u4e0b\u7684\u8bcd\u5728\u6587\u672c\u4e2d\u7684\u6700\u5c0f\u51fa\u73b0\u9891\u7387, \u5e94\u5927\u4e8e\u6216\u7b49\u4e8e 1.\n            \u82e5\u5c0f\u4e8e\u8be5\u9891\u7387, \u8bcd\u8bed\u5c06\u88ab\u89c6\u4e3a `unknown`. \u82e5\u4e3a ``None`` , \u6240\u6709\u6587\u672c\u4e2d\u7684\u8bcd\u90fd\u88ab\u8bb0\u5f55. Default: ``None``\n        :param str optional padding: padding\u7684\u5b57\u7b26. \u5982\u679c\u8bbe\u7f6e\u4e3a ``None`` ,\n            \u5219vocabulary\u4e2d\u4e0d\u8003\u8651padding, \u4e5f\u4e0d\u8ba1\u5165\u8bcd\u8868\u5927\u5c0f\uff0c\u4e3a ``None`` \u7684\u60c5\u51b5\u591a\u5728\u4e3alabel\u5efa\u7acbVocabulary\u7684\u60c5\u51b5.\n            Default: '<pad>'\n        :param str optional unknown: unknown\u7684\u5b57\u7b26\uff0c\u6240\u6709\u672a\u88ab\u8bb0\u5f55\u7684\u8bcd\u5728\u8f6c\u4e3a `int` \u65f6\u5c06\u88ab\u89c6\u4e3aunknown.\n            \u5982\u679c\u8bbe\u7f6e\u4e3a ``None`` ,\u5219vocabulary\u4e2d\u4e0d\u8003\u8651unknow, \u4e5f\u4e0d\u8ba1\u5165\u8bcd\u8868\u5927\u5c0f.\n            \u4e3a ``None`` \u7684\u60c5\u51b5\u591a\u5728\u4e3alabel\u5efa\u7acbVocabulary\u7684\u60c5\u51b5.\n            Default: '<unk>'\n        \"\"\"", "\n", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "min_freq", "=", "min_freq", "\n", "self", ".", "word_count", "=", "Counter", "(", ")", "\n", "self", ".", "unknown", "=", "unknown", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "_word2idx", "=", "None", "\n", "self", ".", "_idx2word", "=", "None", "\n", "self", ".", "rebuild", "=", "True", "\n", "#  \u7528\u4e8e\u627f\u8f7d\u4e0d\u9700\u8981\u5355\u72ec\u521b\u5efaentry\u7684\u8bcd\u8bed\uff0c\u5177\u4f53\u89c1from_dataset()\u65b9\u6cd5", "\n", "self", ".", "_no_create_word", "=", "Counter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.word2idx": [[110, 113], ["None"], "methods", ["None"], ["", "@", "word2idx", ".", "setter", "\n", "def", "word2idx", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_word2idx", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.idx2word": [[119, 122], ["None"], "methods", ["None"], ["", "@", "idx2word", ".", "setter", "\n", "def", "idx2word", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_idx2word", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update": [[123, 138], ["vocabulary.Vocabulary._add_no_create_entry", "vocabulary.Vocabulary.word_count.update"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._add_no_create_entry", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update"], ["", "@", "_check_build_status", "\n", "def", "update", "(", "self", ",", "word_lst", ",", "no_create_entry", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\u4f9d\u6b21\u589e\u52a0\u5e8f\u5217\u4e2d\u8bcd\u5728\u8bcd\u5178\u4e2d\u7684\u51fa\u73b0\u9891\u7387\n\n        :param list word_lst: a list of strings\n        :param bool no_create_entry: \u5728\u4f7f\u7528fastNLP.TokenEmbedding\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u6ca1\u6709\u4ece\u9884\u8bad\u7ec3\u8bcd\u8868\u4e2d\u627e\u5230\u8fd9\u4e2a\u8bcd\u7684\u5904\u7406\u65b9\u5f0f\u3002\n            \u5982\u679c\u4e3aTrue\uff0c\u5219\u4e0d\u4f1a\u6709\u8fd9\u4e2a\u8bcd\u8bed\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684entry\uff0c\u5b83\u5c06\u4e00\u76f4\u88ab\u6307\u5411unk\u7684\u8868\u793a; \u5982\u679c\u4e3aFalse\uff0c\u5219\u4e3a\u8fd9\u4e2a\u8bcd\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\n            \u7684entry\u3002\u5982\u679c\u8fd9\u4e2aword\u6765\u81ea\u4e8edev\u6216\u8005test\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3aTrue\uff0c\u5982\u679c\u6765\u81ea\u4e0etrain\u4e00\u822c\u8bbe\u7f6e\u4e3aFalse\u3002\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5: \u5982\u679c\u65b0\n            \u52a0\u5165\u4e00\u4e2aword\uff0c\u4e14no_create_entry\u4e3aTrue\uff0c\u4f46\u8fd9\u4e2a\u8bcd\u4e4b\u524d\u5df2\u7ecf\u5728Vocabulary\u4e2d\u4e14\u5e76\u4e0d\u662fno_create_entry\u7684\uff0c\u5219\u8fd8\u662f\u4f1a\u4e3a\u8fd9\n            \u4e2a\u8bcd\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684vector; \u5982\u679cno_create_entry\u4e3aFalse\uff0c\u4f46\u8fd9\u4e2a\u8bcd\u4e4b\u524d\u5df2\u7ecf\u5728Vocabulary\u4e2d\u4e14\u5e76\u4e0d\u662fno_create_entry\u7684\uff0c\n            \u5219\u8fd9\u4e2a\u8bcd\u5c06\u8ba4\u4e3a\u662f\u9700\u8981\u521b\u5efa\u5355\u72ec\u7684vector\u7684\u3002\n        \"\"\"", "\n", "self", ".", "_add_no_create_entry", "(", "word_lst", ",", "no_create_entry", ")", "\n", "self", ".", "word_count", ".", "update", "(", "word_lst", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add": [[139, 155], ["vocabulary.Vocabulary._add_no_create_entry"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._add_no_create_entry"], ["", "@", "_check_build_status", "\n", "def", "add", "(", "self", ",", "word", ",", "no_create_entry", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \u589e\u52a0\u4e00\u4e2a\u65b0\u8bcd\u5728\u8bcd\u5178\u4e2d\u7684\u51fa\u73b0\u9891\u7387\n\n        :param str word: \u65b0\u8bcd\n        :param bool no_create_entry: \u5728\u4f7f\u7528fastNLP.TokenEmbedding\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u6ca1\u6709\u4ece\u9884\u8bad\u7ec3\u8bcd\u8868\u4e2d\u627e\u5230\u8fd9\u4e2a\u8bcd\u7684\u5904\u7406\u65b9\u5f0f\u3002\n            \u5982\u679c\u4e3aTrue\uff0c\u5219\u4e0d\u4f1a\u6709\u8fd9\u4e2a\u8bcd\u8bed\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684entry\uff0c\u5b83\u5c06\u4e00\u76f4\u88ab\u6307\u5411unk\u7684\u8868\u793a; \u5982\u679c\u4e3aFalse\uff0c\u5219\u4e3a\u8fd9\u4e2a\u8bcd\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\n            \u7684entry\u3002\u5982\u679c\u8fd9\u4e2aword\u6765\u81ea\u4e8edev\u6216\u8005test\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3aTrue\uff0c\u5982\u679c\u6765\u81ea\u4e0etrain\u4e00\u822c\u8bbe\u7f6e\u4e3aFalse\u3002\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5: \u5982\u679c\u65b0\n            \u52a0\u5165\u4e00\u4e2aword\uff0c\u4e14no_create_entry\u4e3aTrue\uff0c\u4f46\u8fd9\u4e2a\u8bcd\u4e4b\u524d\u5df2\u7ecf\u5728Vocabulary\u4e2d\u4e14\u5e76\u4e0d\u662fno_create_entry\u7684\uff0c\u5219\u8fd8\u662f\u4f1a\u4e3a\u8fd9\n            \u4e2a\u8bcd\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684vector; \u5982\u679cno_create_entry\u4e3aFalse\uff0c\u4f46\u8fd9\u4e2a\u8bcd\u4e4b\u524d\u5df2\u7ecf\u5728Vocabulary\u4e2d\u4e14\u5e76\u4e0d\u662fno_create_entry\u7684\uff0c\n            \u5219\u8fd9\u4e2a\u8bcd\u5c06\u8ba4\u4e3a\u662f\u9700\u8981\u521b\u5efa\u5355\u72ec\u7684vector\u7684\u3002\n        \"\"\"", "\n", "self", ".", "_add_no_create_entry", "(", "word", ",", "no_create_entry", ")", "\n", "self", ".", "word_count", "[", "word", "]", "+=", "1", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._add_no_create_entry": [[156, 171], ["isinstance", "utils._is_iterable", "vocabulary.Vocabulary.word_count.get", "vocabulary.Vocabulary._no_create_word.get", "vocabulary.Vocabulary._no_create_word.pop"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._is_iterable", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "def", "_add_no_create_entry", "(", "self", ",", "word", ",", "no_create_entry", ")", ":", "\n", "        ", "r\"\"\"\n        \u5728\u65b0\u52a0\u5165word\u65f6\uff0c\u68c0\u67e5_no_create_word\u7684\u8bbe\u7f6e\u3002\n\n        :param str List[str] word:\n        :param bool no_create_entry:\n        :return:\n        \"\"\"", "\n", "if", "isinstance", "(", "word", ",", "str", ")", "or", "not", "_is_iterable", "(", "word", ")", ":", "\n", "            ", "word", "=", "[", "word", "]", "\n", "", "for", "w", "in", "word", ":", "\n", "            ", "if", "no_create_entry", "and", "self", ".", "word_count", ".", "get", "(", "w", ",", "0", ")", "==", "self", ".", "_no_create_word", ".", "get", "(", "w", ",", "0", ")", ":", "\n", "                ", "self", ".", "_no_create_word", "[", "w", "]", "+=", "1", "\n", "", "elif", "not", "no_create_entry", "and", "w", "in", "self", ".", "_no_create_word", ":", "\n", "                ", "self", ".", "_no_create_word", ".", "pop", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word": [[172, 186], ["vocabulary.Vocabulary.add"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add"], ["", "", "", "@", "_check_build_status", "\n", "def", "add_word", "(", "self", ",", "word", ",", "no_create_entry", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \u589e\u52a0\u4e00\u4e2a\u65b0\u8bcd\u5728\u8bcd\u5178\u4e2d\u7684\u51fa\u73b0\u9891\u7387\n\n        :param str word: \u65b0\u8bcd\n        :param bool no_create_entry: \u5728\u4f7f\u7528fastNLP.TokenEmbedding\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u6ca1\u6709\u4ece\u9884\u8bad\u7ec3\u8bcd\u8868\u4e2d\u627e\u5230\u8fd9\u4e2a\u8bcd\u7684\u5904\u7406\u65b9\u5f0f\u3002\n            \u5982\u679c\u4e3aTrue\uff0c\u5219\u4e0d\u4f1a\u6709\u8fd9\u4e2a\u8bcd\u8bed\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684entry\uff0c\u5b83\u5c06\u4e00\u76f4\u88ab\u6307\u5411unk\u7684\u8868\u793a; \u5982\u679c\u4e3aFalse\uff0c\u5219\u4e3a\u8fd9\u4e2a\u8bcd\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\n            \u7684entry\u3002\u5982\u679c\u8fd9\u4e2aword\u6765\u81ea\u4e8edev\u6216\u8005test\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3aTrue\uff0c\u5982\u679c\u6765\u81ea\u4e0etrain\u4e00\u822c\u8bbe\u7f6e\u4e3aFalse\u3002\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5: \u5982\u679c\u65b0\n            \u52a0\u5165\u4e00\u4e2aword\uff0c\u4e14no_create_entry\u4e3aTrue\uff0c\u4f46\u8fd9\u4e2a\u8bcd\u4e4b\u524d\u5df2\u7ecf\u5728Vocabulary\u4e2d\u4e14\u5e76\u4e0d\u662fno_create_entry\u7684\uff0c\u5219\u8fd8\u662f\u4f1a\u4e3a\u8fd9\n            \u4e2a\u8bcd\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684vector; \u5982\u679cno_create_entry\u4e3aFalse\uff0c\u4f46\u8fd9\u4e2a\u8bcd\u4e4b\u524d\u5df2\u7ecf\u5728Vocabulary\u4e2d\u4e14\u5e76\u4e0d\u662fno_create_entry\u7684\uff0c\n            \u5219\u8fd9\u4e2a\u8bcd\u5c06\u8ba4\u4e3a\u662f\u9700\u8981\u521b\u5efa\u5355\u72ec\u7684vector\u7684\u3002\n        \"\"\"", "\n", "self", ".", "add", "(", "word", ",", "no_create_entry", "=", "no_create_entry", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word_lst": [[187, 202], ["vocabulary.Vocabulary.update"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update"], ["", "@", "_check_build_status", "\n", "def", "add_word_lst", "(", "self", ",", "word_lst", ",", "no_create_entry", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f9d\u6b21\u589e\u52a0\u5e8f\u5217\u4e2d\u8bcd\u5728\u8bcd\u5178\u4e2d\u7684\u51fa\u73b0\u9891\u7387\n\n        :param list[str] word_lst: \u8bcd\u7684\u5e8f\u5217\n        :param bool no_create_entry: \u5728\u4f7f\u7528fastNLP.TokenEmbedding\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u6ca1\u6709\u4ece\u9884\u8bad\u7ec3\u8bcd\u8868\u4e2d\u627e\u5230\u8fd9\u4e2a\u8bcd\u7684\u5904\u7406\u65b9\u5f0f\u3002\n            \u5982\u679c\u4e3aTrue\uff0c\u5219\u4e0d\u4f1a\u6709\u8fd9\u4e2a\u8bcd\u8bed\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684entry\uff0c\u5b83\u5c06\u4e00\u76f4\u88ab\u6307\u5411unk\u7684\u8868\u793a; \u5982\u679c\u4e3aFalse\uff0c\u5219\u4e3a\u8fd9\u4e2a\u8bcd\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\n            \u7684entry\u3002\u5982\u679c\u8fd9\u4e2aword\u6765\u81ea\u4e8edev\u6216\u8005test\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3aTrue\uff0c\u5982\u679c\u6765\u81ea\u4e0etrain\u4e00\u822c\u8bbe\u7f6e\u4e3aFalse\u3002\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5: \u5982\u679c\u65b0\n            \u52a0\u5165\u4e00\u4e2aword\uff0c\u4e14no_create_entry\u4e3aTrue\uff0c\u4f46\u8fd9\u4e2a\u8bcd\u4e4b\u524d\u5df2\u7ecf\u5728Vocabulary\u4e2d\u4e14\u5e76\u4e0d\u662fno_create_entry\u7684\uff0c\u5219\u8fd8\u662f\u4f1a\u4e3a\u8fd9\n            \u4e2a\u8bcd\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684vector; \u5982\u679cno_create_entry\u4e3aFalse\uff0c\u4f46\u8fd9\u4e2a\u8bcd\u4e4b\u524d\u5df2\u7ecf\u5728Vocabulary\u4e2d\u4e14\u5e76\u4e0d\u662fno_create_entry\u7684\uff0c\n            \u5219\u8fd9\u4e2a\u8bcd\u5c06\u8ba4\u4e3a\u662f\u9700\u8981\u521b\u5efa\u5355\u72ec\u7684vector\u7684\u3002\n        \"\"\"", "\n", "self", ".", "update", "(", "word_lst", ",", "no_create_entry", "=", "no_create_entry", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.build_vocab": [[203, 227], ["vocabulary.Vocabulary.word_count.most_common", "len", "vocabulary.Vocabulary._word2idx.update", "vocabulary.Vocabulary.build_reverse_vocab", "min", "filter", "filter", "len", "len", "len", "enumerate"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.build_reverse_vocab"], ["", "def", "build_vocab", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u6839\u636e\u5df2\u7ecf\u51fa\u73b0\u7684\u8bcd\u548c\u51fa\u73b0\u9891\u7387\u6784\u5efa\u8bcd\u5178. \u6ce8\u610f: \u91cd\u590d\u6784\u5efa\u53ef\u80fd\u4f1a\u6539\u53d8\u8bcd\u5178\u7684\u5927\u5c0f,\n        \u4f46\u5df2\u7ecf\u8bb0\u5f55\u5728\u8bcd\u5178\u4e2d\u7684\u8bcd, \u4e0d\u4f1a\u6539\u53d8\u5bf9\u5e94\u7684 `int`\n\n        \"\"\"", "\n", "if", "self", ".", "_word2idx", "is", "None", ":", "\n", "            ", "self", ".", "_word2idx", "=", "{", "}", "\n", "if", "self", ".", "padding", "is", "not", "None", ":", "\n", "                ", "self", ".", "_word2idx", "[", "self", ".", "padding", "]", "=", "len", "(", "self", ".", "_word2idx", ")", "\n", "", "if", "(", "self", ".", "unknown", "is", "not", "None", ")", "and", "(", "self", ".", "unknown", "!=", "self", ".", "padding", ")", ":", "\n", "                ", "self", ".", "_word2idx", "[", "self", ".", "unknown", "]", "=", "len", "(", "self", ".", "_word2idx", ")", "\n", "\n", "", "", "max_size", "=", "min", "(", "self", ".", "max_size", ",", "len", "(", "self", ".", "word_count", ")", ")", "if", "self", ".", "max_size", "else", "None", "\n", "words", "=", "self", ".", "word_count", ".", "most_common", "(", "max_size", ")", "\n", "if", "self", ".", "min_freq", "is", "not", "None", ":", "\n", "            ", "words", "=", "filter", "(", "lambda", "kv", ":", "kv", "[", "1", "]", ">=", "self", ".", "min_freq", ",", "words", ")", "\n", "", "if", "self", ".", "_word2idx", "is", "not", "None", ":", "\n", "            ", "words", "=", "filter", "(", "lambda", "kv", ":", "kv", "[", "0", "]", "not", "in", "self", ".", "_word2idx", ",", "words", ")", "\n", "", "start_idx", "=", "len", "(", "self", ".", "_word2idx", ")", "\n", "self", ".", "_word2idx", ".", "update", "(", "{", "w", ":", "i", "+", "start_idx", "for", "i", ",", "(", "w", ",", "_", ")", "in", "enumerate", "(", "words", ")", "}", ")", "\n", "self", ".", "build_reverse_vocab", "(", ")", "\n", "self", ".", "rebuild", "=", "False", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.build_reverse_vocab": [[228, 235], ["vocabulary.Vocabulary._word2idx.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "def", "build_reverse_vocab", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u57fa\u4e8e `word to index` dict, \u6784\u5efa `index to word` dict.\n\n        \"\"\"", "\n", "self", ".", "_idx2word", "=", "{", "i", ":", "w", "for", "w", ",", "i", "in", "self", ".", "_word2idx", ".", "items", "(", ")", "}", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.__len__": [[236, 239], ["len"], "methods", ["None"], ["", "@", "_check_build_vocab", "\n", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.__contains__": [[240, 249], ["None"], "methods", ["None"], ["", "@", "_check_build_vocab", "\n", "def", "__contains__", "(", "self", ",", "item", ")", ":", "\n", "        ", "r\"\"\"\n        \u68c0\u67e5\u8bcd\u662f\u5426\u88ab\u8bb0\u5f55\n\n        :param item: the word\n        :return: True or False\n        \"\"\"", "\n", "return", "item", "in", "self", ".", "_word2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.has_word": [[250, 262], ["vocabulary.Vocabulary.__contains__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.__contains__"], ["", "def", "has_word", "(", "self", ",", "w", ")", ":", "\n", "        ", "r\"\"\"\n        \u68c0\u67e5\u8bcd\u662f\u5426\u88ab\u8bb0\u5f55::\n\n            has_abc = vocab.has_word('abc')\n            # equals to\n            has_abc = 'abc' in vocab\n\n        :param item: the word\n        :return: ``True`` or ``False``\n        \"\"\"", "\n", "return", "self", ".", "__contains__", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.__getitem__": [[263, 276], ["ValueError"], "methods", ["None"], ["", "@", "_check_build_vocab", "\n", "def", "__getitem__", "(", "self", ",", "w", ")", ":", "\n", "        ", "r\"\"\"\n        To support usage like::\n\n            vocab[w]\n        \"\"\"", "\n", "if", "w", "in", "self", ".", "_word2idx", ":", "\n", "            ", "return", "self", ".", "_word2idx", "[", "w", "]", "\n", "", "if", "self", ".", "unknown", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_word2idx", "[", "self", ".", "unknown", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"word `{}` not in vocabulary\"", ".", "format", "(", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.index_dataset": [[277, 331], ["enumerate", "type", "type", "isinstance", "isinstance", "isinstance", "vocabulary.Vocabulary.to_index", "isinstance", "RuntimeError", "utils._is_iterable", "isinstance", "len", "len", "TypeError", "zip", "utils._is_iterable", "vocabulary.Vocabulary.to_index", "utils._is_iterable", "RuntimeError", "dataset.apply_field", "_logger.logger.info", "isinstance", "vocabulary.Vocabulary.to_index"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._is_iterable", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._is_iterable", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._is_iterable", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index"], ["", "", "@", "_check_build_vocab", "\n", "def", "index_dataset", "(", "self", ",", "*", "datasets", ",", "field_name", ",", "new_field_name", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06DataSet\u4e2d\u5bf9\u5e94field\u7684\u8bcd\u8f6c\u4e3a\u6570\u5b57\uff0cExample::\n\n            # remember to use `field_name`\n            vocab.index_dataset(train_data, dev_data, test_data, field_name='words')\n\n        :param ~fastNLP.DataSet,List[~fastNLP.DataSet] datasets: \u9700\u8981\u8f6cindex\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u96c6\n        :param list,str field_name: \u9700\u8981\u8f6cindex\u7684field, \u82e5\u6709\u591a\u4e2a DataSet, \u6bcf\u4e2aDataSet\u90fd\u5fc5\u987b\u6709\u6b64 field.\n            \u76ee\u524d\u652f\u6301 ``str`` , ``List[str]``\n        :param list,str new_field_name: \u4fdd\u5b58\u7ed3\u679c\u7684field_name. \u82e5\u4e3a ``None`` , \u5c06\u8986\u76d6\u539ffield.\n            Default: ``None``.\n        \"\"\"", "\n", "\n", "def", "index_instance", "(", "field", ")", ":", "\n", "            ", "r\"\"\"\n            \u6709\u51e0\u79cd\u60c5\u51b5, str, 1d-list, 2d-list\n            :param ins:\n            :return:\n            \"\"\"", "\n", "if", "isinstance", "(", "field", ",", "str", ")", "or", "not", "_is_iterable", "(", "field", ")", ":", "\n", "                ", "return", "self", ".", "to_index", "(", "field", ")", "\n", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "field", "[", "0", "]", ",", "str", ")", "or", "not", "_is_iterable", "(", "field", "[", "0", "]", ")", ":", "\n", "                    ", "return", "[", "self", ".", "to_index", "(", "w", ")", "for", "w", "in", "field", "]", "\n", "", "else", ":", "\n", "                    ", "if", "not", "isinstance", "(", "field", "[", "0", "]", "[", "0", "]", ",", "str", ")", "and", "_is_iterable", "(", "field", "[", "0", "]", "[", "0", "]", ")", ":", "\n", "                        ", "raise", "RuntimeError", "(", "\"Only support field with 2 dimensions.\"", ")", "\n", "", "return", "[", "[", "self", ".", "to_index", "(", "c", ")", "for", "c", "in", "w", "]", "for", "w", "in", "field", "]", "\n", "\n", "", "", "", "new_field_name", "=", "new_field_name", "or", "field_name", "\n", "\n", "if", "type", "(", "new_field_name", ")", "==", "type", "(", "field_name", ")", ":", "\n", "            ", "if", "isinstance", "(", "new_field_name", ",", "list", ")", ":", "\n", "                ", "assert", "len", "(", "new_field_name", ")", "==", "len", "(", "field_name", ")", ",", "\"new_field_name should have same number elements with \"", "\"field_name.\"", "\n", "", "elif", "isinstance", "(", "new_field_name", ",", "str", ")", ":", "\n", "                ", "field_name", "=", "[", "field_name", "]", "\n", "new_field_name", "=", "[", "new_field_name", "]", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"field_name and new_field_name can only be str or List[str].\"", ")", "\n", "\n", "", "", "for", "idx", ",", "dataset", "in", "enumerate", "(", "datasets", ")", ":", "\n", "            ", "if", "isinstance", "(", "dataset", ",", "DataSet", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "for", "f_n", ",", "n_f_n", "in", "zip", "(", "field_name", ",", "new_field_name", ")", ":", "\n", "                        ", "dataset", ".", "apply_field", "(", "index_instance", ",", "field_name", "=", "f_n", ",", "new_field_name", "=", "n_f_n", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "logger", ".", "info", "(", "\"When processing the `{}` dataset, the following error occurred.\"", ".", "format", "(", "idx", ")", ")", "\n", "raise", "e", "\n", "", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Only DataSet type is allowed.\"", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._no_create_word_length": [[332, 335], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "_no_create_word_length", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_no_create_word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.from_dataset": [[336, 398], ["isinstance", "enumerate", "isinstance", "functools.partial", "isinstance", "isinstance", "TypeError", "TypeError", "no_create_entry_dataset.apply", "isinstance", "isinstance", "vocabulary.Vocabulary.add_word", "isinstance", "dataset.apply", "utils._is_iterable", "_logger.logger.error", "dataset.apply", "vocabulary.Vocabulary.add_word", "isinstance", "TypeError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._is_iterable", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add_word"], ["", "def", "from_dataset", "(", "self", ",", "*", "datasets", ",", "field_name", ",", "no_create_entry_dataset", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f7f\u7528dataset\u7684\u5bf9\u5e94field\u4e2d\u8bcd\u6784\u5efa\u8bcd\u5178::\n\n            # remember to use `field_name`\n            vocab.from_dataset(train_data1, train_data2, field_name='words')\n\n        :param ~fastNLP.DataSet,List[~fastNLP.DataSet] datasets: \u9700\u8981\u8f6cindex\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u96c6\n        :param str,List[str] field_name: \u53ef\u4e3a ``str`` \u6216 ``List[str]`` .\n            \u6784\u5efa\u8bcd\u5178\u6240\u4f7f\u7528\u7684 field(s), \u652f\u6301\u4e00\u4e2a\u6216\u591a\u4e2afield\uff0c\u82e5\u6709\u591a\u4e2a DataSet, \u6bcf\u4e2aDataSet\u90fd\u5fc5\u987b\u6709\u8fd9\u4e9bfield. \u76ee\u524d\u652f\u6301\u7684field\u7ed3\u6784\n            : ``str`` , ``List[str]``\n        :param no_create_entry_dataset: \u53ef\u4ee5\u4f20\u5165DataSet, List[DataSet]\u6216\u8005None(\u9ed8\u8ba4)\uff0c\u8be5\u9009\u9879\u7528\u5728\u63a5\u4e0b\u6765\u7684\u6a21\u578b\u4f1a\u4f7f\u7528pretrain\n            \u7684embedding(\u5305\u62ecglove, word2vec, elmo\u4e0ebert)\u4e14\u4f1afinetune\u7684\u60c5\u51b5\u3002\u5982\u679c\u4ec5\u4f7f\u7528\u6765\u81ea\u4e8etrain\u7684\u6570\u636e\u5efa\u7acbvocabulary\uff0c\u4f1a\u5bfc\u81f4test\u4e0edev\n            \u4e2d\u7684\u6570\u636e\u65e0\u6cd5\u5145\u5206\u5229\u7528\u5230\u6765\u81ea\u4e8e\u9884\u8bad\u7ec3embedding\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u5728\u5efa\u7acb\u8bcd\u8868\u7684\u65f6\u5019\u5c06test\u4e0edev\u8003\u8651\u8fdb\u6765\u4f1a\u4f7f\u5f97\u6700\u7ec8\u7684\u7ed3\u679c\u66f4\u597d\u3002\n            \u5982\u679c\u4e00\u4e2a\u8bcd\u51fa\u73b0\u5728\u4e86train\u4e2d\uff0c\u4f46\u662f\u6ca1\u5728\u9884\u8bad\u7ec3\u6a21\u578b\u4e2d\uff0cembedding\u4f1a\u4e3a\u5b83\u7528unk\u521d\u59cb\u5316\uff0c\u4f46\u5b83\u662f\u5355\u72ec\u7684\u4e00\u4e2avector\uff0c\u5982\u679c\n            finetune embedding\u7684\u8bdd\uff0c\u8fd9\u4e2a\u8bcd\u5728\u66f4\u65b0\u4e4b\u540e\u53ef\u80fd\u4f1a\u6709\u66f4\u597d\u7684\u8868\u793a; \u800c\u5982\u679c\u8fd9\u4e2a\u8bcd\u4ec5\u51fa\u73b0\u5728\u4e86dev\u6216test\u4e2d\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u4e3a\u5b83\u4eec\u5355\u72ec\u5efa\u7acbvector\uff0c\n            \u800c\u5e94\u8be5\u8ba9\u5b83\u6307\u5411unk\u8fd9\u4e2avector\u7684\u503c\u3002\u6240\u4ee5\u53ea\u4f4d\u4e8eno_create_entry_dataset\u4e2d\u7684token\uff0c\u5c06\u9996\u5148\u4ece\u9884\u8bad\u7ec3\u7684\u8bcd\u8868\u4e2d\u5bfb\u627e\u5b83\u7684\u8868\u793a\uff0c\n            \u5982\u679c\u627e\u5230\u4e86\uff0c\u5c31\u4f7f\u7528\u8be5\u8868\u793a; \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8ba4\u4e3a\u8be5\u8bcd\u7684\u8868\u793a\u5e94\u8be5\u4e3aunk\u7684\u8868\u793a\u3002\n        :return self:\n        \"\"\"", "\n", "if", "isinstance", "(", "field_name", ",", "str", ")", ":", "\n", "            ", "field_name", "=", "[", "field_name", "]", "\n", "", "elif", "not", "isinstance", "(", "field_name", ",", "list", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'invalid argument field_name: {}'", ".", "format", "(", "field_name", ")", ")", "\n", "\n", "", "def", "construct_vocab", "(", "ins", ",", "no_create_entry", "=", "False", ")", ":", "\n", "            ", "for", "fn", "in", "field_name", ":", "\n", "                ", "field", "=", "ins", "[", "fn", "]", "\n", "if", "isinstance", "(", "field", ",", "str", ")", "or", "not", "_is_iterable", "(", "field", ")", ":", "\n", "                    ", "self", ".", "add_word", "(", "field", ",", "no_create_entry", "=", "no_create_entry", ")", "\n", "", "else", ":", "\n", "                    ", "if", "isinstance", "(", "field", "[", "0", "]", ",", "str", ")", ":", "\n", "# or not _is_iterable(field[0]):", "\n", "                        ", "for", "word", "in", "field", ":", "\n", "                            ", "self", ".", "add_word", "(", "word", ",", "no_create_entry", "=", "no_create_entry", ")", "\n", "# else:", "\n", "#     if not isinstance(field[0][0], str) and _is_iterable(field[0][0]):", "\n", "#         raise RuntimeError(\"Only support field with 2 dimensions.\")", "\n", "#     for words in field:", "\n", "#         for word in words:", "\n", "#             self.add_word(word, no_create_entry=no_create_entry)", "\n", "\n", "", "", "", "", "", "for", "idx", ",", "dataset", "in", "enumerate", "(", "datasets", ")", ":", "\n", "            ", "if", "isinstance", "(", "dataset", ",", "DataSet", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "dataset", ".", "apply", "(", "construct_vocab", ")", "\n", "", "except", "BaseException", "as", "e", ":", "\n", "                    ", "logger", ".", "error", "(", "\"When processing the `{}` dataset, the following error occurred:\"", ".", "format", "(", "idx", ")", ")", "\n", "raise", "e", "\n", "", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\"Only DataSet type is allowed.\"", ")", "\n", "\n", "", "", "if", "no_create_entry_dataset", "is", "not", "None", ":", "\n", "            ", "partial_construct_vocab", "=", "partial", "(", "construct_vocab", ",", "no_create_entry", "=", "True", ")", "\n", "if", "isinstance", "(", "no_create_entry_dataset", ",", "DataSet", ")", ":", "\n", "                ", "no_create_entry_dataset", ".", "apply", "(", "partial_construct_vocab", ")", "\n", "", "elif", "isinstance", "(", "no_create_entry_dataset", ",", "list", ")", ":", "\n", "                ", "for", "dataset", "in", "no_create_entry_dataset", ":", "\n", "                    ", "if", "not", "isinstance", "(", "dataset", ",", "DataSet", ")", ":", "\n", "                        ", "raise", "TypeError", "(", "\"Only DataSet type is allowed.\"", ")", "\n", "", "dataset", ".", "apply", "(", "partial_construct_vocab", ")", "\n", "", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._is_word_no_create_entry": [[399, 406], ["None"], "methods", ["None"], ["", "def", "_is_word_no_create_entry", "(", "self", ",", "word", ")", ":", "\n", "        ", "r\"\"\"\n        \u5224\u65ad\u5f53\u524d\u7684word\u662f\u5426\u662f\u4e0d\u9700\u8981\u521b\u5efaentry\u7684\uff0c\u5177\u4f53\u53c2\u89c1from_dataset\u7684\u8bf4\u660e\n        :param word: str\n        :return: bool\n        \"\"\"", "\n", "return", "word", "in", "self", ".", "_no_create_word", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_index": [[407, 419], ["vocabulary.Vocabulary.__getitem__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.__getitem__"], ["", "def", "to_index", "(", "self", ",", "w", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06\u8bcd\u8f6c\u4e3a\u6570\u5b57. \u82e5\u8bcd\u4e0d\u518d\u8bcd\u5178\u4e2d\u88ab\u8bb0\u5f55, \u5c06\u89c6\u4e3a unknown, \u82e5 ``unknown=None`` , \u5c06\u629b\u51fa ``ValueError`` ::\n\n            index = vocab.to_index('abc')\n            # equals to\n            index = vocab['abc']\n\n        :param str w: a word\n        :return int index: the number\n        \"\"\"", "\n", "return", "self", ".", "__getitem__", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.unknown_idx": [[420, 429], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "_check_build_vocab", "\n", "def", "unknown_idx", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        unknown \u5bf9\u5e94\u7684\u6570\u5b57.\n        \"\"\"", "\n", "if", "self", ".", "unknown", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "_word2idx", "[", "self", ".", "unknown", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.padding_idx": [[430, 439], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "_check_build_vocab", "\n", "def", "padding_idx", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        padding \u5bf9\u5e94\u7684\u6570\u5b57\n        \"\"\"", "\n", "if", "self", ".", "padding", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "_word2idx", "[", "self", ".", "padding", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_word": [[440, 449], ["None"], "methods", ["None"], ["", "@", "_check_build_vocab", "\n", "def", "to_word", "(", "self", ",", "idx", ")", ":", "\n", "        ", "r\"\"\"\n        \u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57, \u5c06\u5176\u8f6c\u4e3a\u5bf9\u5e94\u7684\u8bcd.\n\n        :param int idx: the index\n        :return str word: the word\n        \"\"\"", "\n", "return", "self", ".", "_idx2word", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.clear": [[450, 462], ["vocabulary.Vocabulary.word_count.clear", "vocabulary.Vocabulary._no_create_word.clear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.clear", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u5220\u9664Vocabulary\u4e2d\u7684\u8bcd\u8868\u6570\u636e\u3002\u76f8\u5f53\u4e8e\u91cd\u65b0\u521d\u59cb\u5316\u4e00\u4e0b\u3002\n\n        :return:\n        \"\"\"", "\n", "self", ".", "word_count", ".", "clear", "(", ")", "\n", "self", ".", "_word2idx", "=", "None", "\n", "self", ".", "_idx2word", "=", "None", "\n", "self", ".", "rebuild", "=", "True", "\n", "self", ".", "_no_create_word", ".", "clear", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.__getstate__": [[463, 472], ["len", "vocabulary.Vocabulary.__dict__.copy"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Use to prepare data for pickle.\n\n        \"\"\"", "\n", "len", "(", "self", ")", "# make sure vocab has been built", "\n", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "# no need to pickle _idx2word as it can be constructed from _word2idx", "\n", "del", "state", "[", "'_idx2word'", "]", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.__setstate__": [[473, 479], ["vocabulary.Vocabulary.__dict__.update", "vocabulary.Vocabulary.build_reverse_vocab"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.build_reverse_vocab"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "r\"\"\"Use to restore state from pickle.\n\n        \"\"\"", "\n", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "self", ".", "build_reverse_vocab", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.__repr__": [[480, 482], ["list", "vocabulary.Vocabulary.word_count.keys"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Vocabulary({}...)\"", ".", "format", "(", "list", "(", "self", ".", "word_count", ".", "keys", "(", ")", ")", "[", ":", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.__iter__": [[483, 488], ["range", "len", "vocabulary.Vocabulary.to_word"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_word"], ["", "@", "_check_build_vocab", "\n", "def", "__iter__", "(", "self", ")", ":", "\n", "# \u4f9d\u6b21(word1, 0), (word1, 1)", "\n", "        ", "for", "index", "in", "range", "(", "len", "(", "self", ".", "_word2idx", ")", ")", ":", "\n", "            ", "yield", "self", ".", "to_word", "(", "index", ")", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.save": [[489, 523], ["isinstance", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "vocabulary.Vocabulary.word_count.items", "isinstance", "filepath.writable", "isinstance", "int", "open.write", "open.close", "TypeError", "vocabulary.Vocabulary._word2idx.get", "vocabulary.Vocabulary._is_word_no_create_entry", "open"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.close", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary._is_word_no_create_entry"], ["", "", "def", "save", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param str,io.StringIO filepath: Vocabulary\u7684\u50a8\u5b58\u8def\u5f84\n        :return:\n        \"\"\"", "\n", "if", "isinstance", "(", "filepath", ",", "io", ".", "IOBase", ")", ":", "\n", "            ", "assert", "filepath", ".", "writable", "(", ")", "\n", "f", "=", "filepath", "\n", "", "elif", "isinstance", "(", "filepath", ",", "str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "f", "=", "open", "(", "filepath", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "e", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Illegal `filepath`.\"", ")", "\n", "\n", "", "f", ".", "write", "(", "f'max_size\\t{self.max_size}\\n'", ")", "\n", "f", ".", "write", "(", "f'min_freq\\t{self.min_freq}\\n'", ")", "\n", "f", ".", "write", "(", "f'unknown\\t{self.unknown}\\n'", ")", "\n", "f", ".", "write", "(", "f'padding\\t{self.padding}\\n'", ")", "\n", "f", ".", "write", "(", "f'rebuild\\t{self.rebuild}\\n'", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "# idx: \u5982\u679cidx\u4e3a-2, \u8bf4\u660e\u8fd8\u6ca1\u6709\u8fdb\u884cbuild; \u5982\u679cidx\u4e3a-1\uff0c\u8bf4\u660e\u8be5\u8bcd\u672a\u7f16\u5165", "\n", "# no_create_entry: \u5982\u679c\u4e3a1\uff0c\u8bf4\u660e\u8be5\u8bcd\u662fno_create_entry; 0 otherwise", "\n", "# word \\t count \\t idx \\t no_create_entry \\n", "\n", "idx", "=", "-", "2", "\n", "for", "word", ",", "count", "in", "self", ".", "word_count", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "_word2idx", "is", "not", "None", ":", "\n", "                ", "idx", "=", "self", ".", "_word2idx", ".", "get", "(", "word", ",", "-", "1", ")", "\n", "", "is_no_create_entry", "=", "int", "(", "self", ".", "_is_word_no_create_entry", "(", "word", ")", ")", "\n", "f", ".", "write", "(", "f'{word}\\t{count}\\t{idx}\\t{is_no_create_entry}\\n'", ")", "\n", "", "if", "isinstance", "(", "filepath", ",", "str", ")", ":", "# \u5982\u679c\u662ffile\u7684\u8bdd\u5c31\u5173\u95ed", "\n", "            ", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.load": [[524, 588], ["isinstance", "vocabulary.Vocabulary", "collections.Counter", "collections.Counter", "isinstance", "filepath.writable", "isinstance", "line.strip.strip.strip", "line.strip.strip.strip", "len", "open.close", "TypeError", "line.strip.strip.split", "line.strip.strip.split", "open", "setattr", "int", "int", "int", "word2idx.items", "int", "setattr"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.close", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "", "@", "staticmethod", "\n", "def", "load", "(", "filepath", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param str,io.StringIO filepath: Vocabulary\u7684\u8bfb\u53d6\u8def\u5f84\n        :return: Vocabulary\n        \"\"\"", "\n", "if", "isinstance", "(", "filepath", ",", "io", ".", "IOBase", ")", ":", "\n", "            ", "assert", "filepath", ".", "writable", "(", ")", "\n", "f", "=", "filepath", "\n", "", "elif", "isinstance", "(", "filepath", ",", "str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "f", "=", "open", "(", "filepath", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "e", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"Illegal `filepath`.\"", ")", "\n", "\n", "", "vocab", "=", "Vocabulary", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "                ", "name", ",", "value", "=", "line", ".", "split", "(", ")", "\n", "if", "name", "in", "(", "'max_size'", ",", "'min_freq'", ")", ":", "\n", "                    ", "value", "=", "int", "(", "value", ")", "if", "value", "!=", "'None'", "else", "None", "\n", "setattr", "(", "vocab", ",", "name", ",", "value", ")", "\n", "", "elif", "name", "in", "(", "'unknown'", ",", "'padding'", ")", ":", "\n", "                    ", "value", "=", "value", "if", "value", "!=", "'None'", "else", "None", "\n", "setattr", "(", "vocab", ",", "name", ",", "value", ")", "\n", "", "elif", "name", "==", "'rebuild'", ":", "\n", "                    ", "vocab", ".", "rebuild", "=", "True", "if", "value", "==", "'True'", "else", "False", "\n", "", "", "else", ":", "\n", "                ", "break", "\n", "", "", "word_counter", "=", "{", "}", "\n", "no_create_entry_counter", "=", "{", "}", "\n", "word2idx", "=", "{", "}", "\n", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "                ", "parts", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "word", ",", "count", ",", "idx", ",", "no_create_entry", "=", "parts", "[", "0", "]", ",", "int", "(", "parts", "[", "1", "]", ")", ",", "int", "(", "parts", "[", "2", "]", ")", ",", "int", "(", "parts", "[", "3", "]", ")", "\n", "if", "idx", ">=", "0", ":", "\n", "                    ", "word2idx", "[", "word", "]", "=", "idx", "\n", "", "word_counter", "[", "word", "]", "=", "count", "\n", "if", "no_create_entry", ":", "\n", "                    ", "no_create_entry_counter", "[", "word", "]", "=", "count", "\n", "\n", "", "", "", "word_counter", "=", "Counter", "(", "word_counter", ")", "\n", "no_create_entry_counter", "=", "Counter", "(", "no_create_entry_counter", ")", "\n", "if", "len", "(", "word2idx", ")", ">", "0", ":", "\n", "            ", "if", "vocab", ".", "padding", ":", "\n", "                ", "word2idx", "[", "vocab", ".", "padding", "]", "=", "0", "\n", "", "if", "vocab", ".", "unknown", ":", "\n", "                ", "word2idx", "[", "vocab", ".", "unknown", "]", "=", "1", "if", "vocab", ".", "padding", "else", "0", "\n", "", "idx2word", "=", "{", "value", ":", "key", "for", "key", ",", "value", "in", "word2idx", ".", "items", "(", ")", "}", "\n", "\n", "", "vocab", ".", "word_count", "=", "word_counter", "\n", "vocab", ".", "_no_create_word", "=", "no_create_entry_counter", "\n", "if", "word2idx", ":", "\n", "            ", "vocab", ".", "_word2idx", "=", "word2idx", "\n", "vocab", ".", "_idx2word", "=", "idx2word", "\n", "", "if", "isinstance", "(", "filepath", ",", "str", ")", ":", "# \u5982\u679c\u662ffile\u7684\u8bdd\u5c31\u5173\u95ed", "\n", "            ", "f", ".", "close", "(", ")", "\n", "", "return", "vocab", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary._check_build_vocab": [[36, 48], ["functools.wraps", "func", "vocabulary..build_vocab"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.build_vocab"], ["", "", "def", "_check_build_vocab", "(", "func", ")", ":", "\n", "    ", "r\"\"\"A decorator to make sure the indexing is built before used.\n\n    \"\"\"", "\n", "\n", "@", "wraps", "(", "func", ")", "# to solve missing docstring", "\n", "def", "_wrapper", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "_word2idx", "is", "None", "or", "self", ".", "rebuild", "is", "True", ":", "\n", "            ", "self", ".", "build_vocab", "(", ")", "\n", "", "return", "func", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary._check_build_status": [[50, 66], ["functools.wraps", "func", "_logger.logger.info", "len"], "function", ["None"], ["", "def", "_check_build_status", "(", "func", ")", ":", "\n", "    ", "r\"\"\"A decorator to check whether the vocabulary updates after the last build.\n\n    \"\"\"", "\n", "\n", "@", "wraps", "(", "func", ")", "# to solve missing docstring", "\n", "def", "_wrapper", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "rebuild", "is", "False", ":", "\n", "            ", "self", ".", "rebuild", "=", "True", "\n", "if", "self", ".", "max_size", "is", "not", "None", "and", "len", "(", "self", ".", "word_count", ")", ">=", "self", ".", "max_size", ":", "\n", "                ", "logger", ".", "info", "(", "\"[Warning] Vocabulary has reached the max size {} when calling {} method. \"", "\n", "\"Adding more words may cause unexpected behaviour of Vocabulary. \"", ".", "format", "(", "\n", "self", ".", "max_size", ",", "func", ".", "__name__", ")", ")", "\n", "", "", "return", "func", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.predictor.Predictor.__init__": [[25, 36], ["isinstance", "ValueError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "network", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param torch.nn.Module network: \u7528\u6765\u5b8c\u6210\u9884\u6d4b\u4efb\u52a1\u7684\u6a21\u578b\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "network", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only fastNLP.models.BaseModel or torch.nn,Module is allowed, not {}\"", ".", "format", "(", "type", "(", "network", ")", ")", ")", "\n", "", "self", ".", "network", "=", "network", "\n", "self", ".", "batch_size", "=", "1", "\n", "self", ".", "batch_output", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.predictor.Predictor.predict": [[37, 84], ["predictor.Predictor.network.eval", "utils._get_model_device", "collections.defaultdict", "DataSetIter", "hasattr", "predictor.Predictor.network.train", "isinstance", "ValueError", "ValueError", "torch.no_grad", "SequentialSampler", "utils._move_dict_value_to_device", "utils._build_args", "predict_func", "predict_func.items", "type", "batch_x[].tolist", "value.cpu().numpy.cpu().numpy.cpu().numpy", "batch_output[].extend", "value.cpu().numpy.cpu().numpy.cpu", "len", "value.cpu().numpy.cpu().numpy.tolist", "enumerate", "batch_output[].extend", "batch_output[].append", "len", "tmp_batch.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_model_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._move_dict_value_to_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._build_args", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "predict", "(", "self", ",", "data", ":", "DataSet", ",", "seq_len_field_name", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\u7528\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884cinference.\n\n        :param fastNLP.DataSet data: \u5f85\u9884\u6d4b\u7684\u6570\u636e\u96c6\n        :param str seq_len_field_name: \u8868\u793a\u5e8f\u5217\u957f\u5ea6\u4fe1\u606f\u7684field\u540d\u5b57\n        :return: dict dict\u91cc\u9762\u7684\u5185\u5bb9\u4e3a\u6a21\u578b\u9884\u6d4b\u7684\u7ed3\u679c\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "data", ",", "DataSet", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only Dataset class is allowed, not {}.\"", ".", "format", "(", "type", "(", "data", ")", ")", ")", "\n", "", "if", "seq_len_field_name", "is", "not", "None", "and", "seq_len_field_name", "not", "in", "data", ".", "field_arrays", ":", "\n", "            ", "raise", "ValueError", "(", "\"Field name {} not found in DataSet {}.\"", ".", "format", "(", "seq_len_field_name", ",", "data", ")", ")", "\n", "\n", "", "prev_training", "=", "self", ".", "network", ".", "training", "\n", "self", ".", "network", ".", "eval", "(", ")", "\n", "network_device", "=", "_get_model_device", "(", "self", ".", "network", ")", "\n", "batch_output", "=", "defaultdict", "(", "list", ")", "\n", "data_iterator", "=", "DataSetIter", "(", "data", ",", "batch_size", "=", "self", ".", "batch_size", ",", "sampler", "=", "SequentialSampler", "(", ")", ",", "as_numpy", "=", "False", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "network", ",", "\"predict\"", ")", ":", "\n", "            ", "predict_func", "=", "self", ".", "network", ".", "predict", "\n", "", "else", ":", "\n", "            ", "predict_func", "=", "self", ".", "network", ".", "forward", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_x", ",", "_", "in", "data_iterator", ":", "\n", "                ", "_move_dict_value_to_device", "(", "batch_x", ",", "_", ",", "device", "=", "network_device", ")", "\n", "refined_batch_x", "=", "_build_args", "(", "predict_func", ",", "**", "batch_x", ")", "\n", "prediction", "=", "predict_func", "(", "**", "refined_batch_x", ")", "\n", "\n", "if", "seq_len_field_name", "is", "not", "None", ":", "\n", "                    ", "seq_lens", "=", "batch_x", "[", "seq_len_field_name", "]", ".", "tolist", "(", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "prediction", ".", "items", "(", ")", ":", "\n", "                    ", "value", "=", "value", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "len", "(", "value", ".", "shape", ")", "==", "1", "or", "(", "len", "(", "value", ".", "shape", ")", "==", "2", "and", "value", ".", "shape", "[", "1", "]", "==", "1", ")", ":", "\n", "                        ", "batch_output", "[", "key", "]", ".", "extend", "(", "value", ".", "tolist", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "if", "seq_len_field_name", "is", "not", "None", ":", "\n", "                            ", "tmp_batch", "=", "[", "]", "\n", "for", "idx", ",", "seq_len", "in", "enumerate", "(", "seq_lens", ")", ":", "\n", "                                ", "tmp_batch", ".", "append", "(", "value", "[", "idx", ",", ":", "seq_len", "]", ")", "\n", "", "batch_output", "[", "key", "]", ".", "extend", "(", "tmp_batch", ")", "\n", "", "else", ":", "\n", "                            ", "batch_output", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "", "", "", "", "self", ".", "network", ".", "train", "(", "prev_training", ")", "\n", "return", "batch_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.__init__": [[69, 198], ["_logger.init_logger_dist", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.get_rank", "int", "int", "int", "int", "int", "int", "losses._prepare_losser", "dist_trainer.get_local_rank", "callback.DistCallbackManager", "callback.DistCallbackManager", "model.to", "dist_trainer.DistTrainer._get_optimizer", "len", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "dist_trainer.DistTrainer._get_data_iter", "dist_trainer.DistTrainer._get_n_steps", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.broadcast", "torch.broadcast", "torch.broadcast", "torch.broadcast", "datetime.datetime.datetime.fromtimestamp().strftime", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.warning", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "isinstance", "utils._check_fp16", "amp.initialize", "pkg_resources.parse_version", "pkg_resources.parse_version", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "callback._TesterCallback", "dist_trainer.DistTrainer.test_manager.add_callback", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "dist_trainer.get_local_rank", "dist_trainer.get_local_rank", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "datetime.datetime.datetime.fromtimestamp", "os.getpid", "time.time", "time.time", "time.time", "time.time", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.item", "torch.tensor().to.item", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger.init_logger_dist", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses._prepare_losser", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.get_local_rank", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._get_optimizer", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._get_data_iter", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._get_n_steps", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_fp16", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.DistCallbackManager.add_callback", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.get_local_rank", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.get_local_rank"], ["def", "__init__", "(", "self", ",", "train_data", ",", "model", ",", "optimizer", "=", "None", ",", "loss", "=", "None", ",", "\n", "callbacks_all", "=", "None", ",", "callbacks_master", "=", "None", ",", "\n", "batch_size_per_gpu", "=", "8", ",", "n_epochs", "=", "1", ",", "\n", "num_workers", "=", "1", ",", "drop_last", "=", "False", ",", "\n", "dev_data", "=", "None", ",", "metrics", "=", "None", ",", "metric_key", "=", "None", ",", "\n", "update_every", "=", "1", ",", "print_every", "=", "10", ",", "validate_every", "=", "-", "1", ",", "\n", "save_path", "=", "None", ",", "device", "=", "'auto'", ",", "\n", "fp16", "=", "''", ",", "use_tqdm", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param train_data: \u8bad\u7ec3\u96c6\uff0c :class:`~fastNLP.DataSet` \u7c7b\u578b\u3002\n        :param nn.modules model: \u5f85\u8bad\u7ec3\u7684\u6a21\u578b\n        :param optimizer: `torch.optim.Optimizer` \u4f18\u5316\u5668\u3002\u5982\u679c\u4e3aNone\uff0c\u5219Trainer\u4f7f\u7528\u9ed8\u8ba4\u7684Adam(model.parameters(), lr=4e-3)\u8fd9\u4e2a\u4f18\u5316\u5668\n        :param loss: \u4f7f\u7528\u7684 :class:`~fastNLP.core.losses.LossBase` \u5bf9\u8c61\u3002\u5f53\u4e3aNone\u65f6\uff0c\u9ed8\u8ba4\u4f7f\u7528 :class:`~fastNLP.LossInForward`\n        :param list callbacks_all: \u7528\u4e8e\u5728train\u8fc7\u7a0b\u4e2d\u8d77\u8c03\u8282\u4f5c\u7528\u7684\u56de\u8c03\u51fd\u6570\uff0c\u4f5c\u7528\u4e8e\u6240\u6709\u8bad\u7ec3\u8fdb\u7a0b\u4e2d\u3002\n            \u53ef\u4f7f\u7528\u7684callback\u53c2\u89c1 :mod:`callback\u6a21\u5757 <fastNLP.core.callback>`\n        :param list callbacks_master: \u7528\u4e8e\u5728train\u8fc7\u7a0b\u4e2d\u8d77\u8c03\u8282\u4f5c\u7528\u7684\u56de\u8c03\u51fd\u6570\uff0c\u53ea\u4f5c\u7528\u4e8e\u5176\u4e2d\u4e00\u4e2a\u8fdb\u7a0b\uff08 Master \u8fdb\u7a0b\uff09\u3002\n            \u53ef\u4f7f\u7528\u7684callback\u53c2\u89c1 :mod:`callback\u6a21\u5757 <fastNLP.core.callback>`\n        :param int batch_size_per_gpu: \u8bad\u7ec3\u65f6\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u7684 batch \u5927\u5c0f\u3002\n        :param int n_epochs: \u9700\u8981\u4f18\u5316\u8fed\u4ee3\u591a\u5c11\u6b21\u3002\n        :param num_workers: int, \u6709\u591a\u5c11\u4e2a\u7ebf\u7a0b\u6765\u8fdb\u884c\u6570\u636epad\u5904\u7406\u3002\n        :param drop_last: \u5982\u679c\u6700\u540e\u4e00\u4e2abatch\u6ca1\u6709\u6b63\u597d\u4e3abatch_size\u8fd9\u4e48\u591a\u6570\u636e\uff0c\u5c31\u6254\u6389\u6700\u540e\u4e00\u4e2abatch\n        :param dev_data: \u7528\u4e8e\u505a\u9a8c\u8bc1\u7684DataSet\uff0c :class:`~fastNLP.DataSet` \u7c7b\u578b\u3002\n        :param metrics: \u9a8c\u8bc1\u7684\u8bc4\u4f30\u51fd\u6570\u3002\u53ef\u4ee5\u53ea\u4f7f\u7528\u4e00\u4e2a :class:`Metric<fastNLP.core.metrics.MetricBase>` \uff0c\n            \u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a :class:`Metric<fastNLP.core.metrics.MetricBase>` \uff0c\u901a\u8fc7\u5217\u8868\u4f20\u5165\u3002\n            \u5982\u9a8c\u8bc1\u65f6\u53d6\u5f97\u4e86\u66f4\u597d\u7684\u9a8c\u8bc1\u7ed3\u679c(\u5982\u679c\u6709\u591a\u4e2aMetric\uff0c\u4ee5\u5217\u8868\u4e2d\u7b2c\u4e00\u4e2aMetric\u4e3a\u51c6)\uff0c\u4e14save_path\u4e0d\u4e3aNone\uff0c\n            \u5219\u4fdd\u5b58\u5f53\u524d\u6a21\u578b\u3002Metric\u79cd\u7c7b\u8be6\u89c1 :mod:`metrics\u6a21\u5757 <fastNLP.core.metrics>` \u3002\u4ec5\u5728\u4f20\u5165dev_data\u65f6\u6709\u6548\u3002\n        :param str,None metric_key:  :class:`Metric<fastNLP.core.metrics.MetricBase>` \u6709\u65f6\u4f1a\u6709\u591a\u4e2a\u6307\u6807\uff0c\n            \u6bd4\u5982 :class:`~fastNLP.core.metrics.SpanFPreRecMetric` \u4e2d\u5305\u542b\u4e86'f', 'pre', 'rec'\u3002\u6b64\u65f6\u9700\n            \u8981\u6307\u5b9a\u4ee5\u54ea\u4e2a\u6307\u6807\u4e3a\u51c6\u3002\u53e6\u5916\u6709\u4e9b\u6307\u6807\u662f\u8d8a\u5c0f\u6548\u679c\u8d8a\u597d\uff0c\u6bd4\u5982\u8bed\u8a00\u6a21\u578b\u7684\u56f0\u60d1\u5ea6\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728key\u524d\u9762\u589e\u52a0\u4e00\u4e2a'-'\u6765\u8868\n            \u660e\u9a8c\u8bc1\u65f6\uff0c\u503c\u8d8a\u5c0f\u8d8a\u597d(\u6bd4\u5982: \"-ppl\")\u3002\u4ec5\u5728\u4f20\u5165dev_data\u65f6\u6709\u6548\u3002\n        :param update_every: int, \u591a\u5c11\u6b65\u66f4\u65b0\u4e00\u6b21\u68af\u5ea6\u3002\u7528\u4e8e\u5e0c\u671b\u7d2f\u8ba1\u68af\u5ea6\u7684\u573a\u666f\uff0c\u6bd4\u5982\u9700\u8981128\u7684batch_size, \u4f46\u662f\u76f4\u63a5\u8bbe\u4e3a128\n            \u4f1a\u5bfc\u81f4\u5185\u5b58\u4e0d\u8db3\uff0c\u901a\u8fc7\u8bbe\u7f6ebatch_size=32, update_every=4\u8fbe\u5230\u76ee\u7684\u3002\u5f53optimizer\u4e3aNone\u65f6\uff0c\u8be5\u53c2\u6570\u65e0\u6548\u3002\n        :param int print_every: \u591a\u5c11\u6b21\u53cd\u5411\u4f20\u64ad\u66f4\u65b0tqdm\u663e\u793a\u7684loss; \u5982\u679cuse_tqdm=False, \u5219\u591a\u5c11\u6b21\u53cd\u5411\u4f20\u64ad\u6253\u5370loss\u3002\n        :param int validate_every: \u591a\u5c11\u4e2astep\u5728\u9a8c\u8bc1\u96c6\u4e0a\u9a8c\u8bc1\u4e00\u6b21; \u5982\u679c\u4e3a-1\uff0c\u5219\u6bcf\u4e2aepoch\u7ed3\u675f\u9a8c\u8bc1\u4e00\u6b21\u3002\u4ec5\u5728\u4f20\u5165dev_data\u65f6\u6709\u6548\u3002\n        :param str,None save_path: \u5c06\u6a21\u578b\u4fdd\u5b58\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u5c06\u81ea\u52a8\u521b\u5efa\u6587\u4ef6\u5939\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4e0d\u4fdd\u5b58\u6a21\u578b\u3002\u5982\u679cdev_data\u4e3aNone\uff0c\u5219\u4fdd\u5b58\n            \u6700\u540e\u4e00\u6b21\u8fed\u4ee3\u7684\u6a21\u578b\u3002\u4fdd\u5b58\u7684\u65f6\u5019\u4e0d\u4ec5\u4fdd\u5b58\u4e86\u53c2\u6570\uff0c\u8fd8\u4fdd\u5b58\u4e86\u6a21\u578b\u7ed3\u6784\u3002\u5373\u4fbf\u4f7f\u7528DataParallel\uff0c\u8fd9\u91cc\u4e5f\u53ea\u4fdd\u5b58\u6a21\u578b\u3002\n        :param str device: \u6307\u5b9a device\uff0c\u53ef\u4ee5\u662f gpu\uff0ccpu \u6216 auto\n        :param str fp16: \u6307\u5b9a\u534a\u7cbe\u5ea6\u8bad\u7ec3\u7684\u4f18\u5316\u7b49\u7ea7\uff0c\u53ef\u4e3a O1\uff0cO2 \u6216 O3\uff0c\u82e5\u4e3a\u7a7a\u5b57\u7b26\u4e32\u5219\u4e0d\u4f7f\u7528\u534a\u7cbe\u5ea6\u3002\n        :param bool use_tqdm: \u662f\u5426\u4f7f\u7528tqdm\u6765\u663e\u793a\u8bad\u7ec3\u8fdb\u5ea6; \u5982\u679c\u4e3aFalse\uff0c\u5219\u5c06loss\u6253\u5370\u5728\u7ec8\u7aef\u4e2d\u3002\n        \"\"\"", "\n", "assert", "device", "in", "[", "'auto'", ",", "'cuda'", ",", "'cpu'", "]", ",", "\"Please set correct device in [auto', 'cuda', 'cpu']\"", "\n", "if", "device", "==", "'auto'", ":", "\n", "            ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "\n", "# init distributed", "\n", "", "if", "device", "==", "'cuda'", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "get_local_rank", "(", ")", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "get_local_rank", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "", "init_logger_dist", "(", ")", "\n", "\n", "self", ".", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "self", ".", "rank", "=", "dist", ".", "get_rank", "(", ")", "# unique id for each process", "\n", "\n", "self", ".", "train_data", "=", "train_data", "\n", "self", ".", "batch_size_per_gpu", "=", "int", "(", "batch_size_per_gpu", ")", "\n", "self", ".", "n_epochs", "=", "int", "(", "n_epochs", ")", "\n", "self", ".", "num_data_workers", "=", "int", "(", "num_workers", ")", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "self", ".", "update_every", "=", "int", "(", "update_every", ")", "\n", "self", ".", "print_every", "=", "int", "(", "print_every", ")", "\n", "self", ".", "validate_every", "=", "int", "(", "validate_every", ")", "\n", "self", ".", "save_path", "=", "save_path", "\n", "self", ".", "losser", "=", "_prepare_losser", "(", "loss", ")", "\n", "self", ".", "fp16", "=", "fp16", "\n", "self", ".", "local_rank", "=", "get_local_rank", "(", ")", "\n", "self", ".", "_forward_func", "=", "model", ".", "forward", "\n", "self", ".", "callback_manager", "=", "DistCallbackManager", "(", "\n", "env", "=", "{", "\"trainer\"", ":", "self", "}", ",", "callbacks_all", "=", "callbacks_all", ",", "\n", "callbacks_master", "=", "callbacks_master", ")", "\n", "self", ".", "test_manager", "=", "DistCallbackManager", "(", "env", "=", "{", "'trainer'", ":", "self", "}", ")", "\n", "self", ".", "metric_key", "=", "metric_key", "\n", "self", ".", "use_tqdm", "=", "use_tqdm", "\n", "\n", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "optimizer", "=", "self", ".", "_get_optimizer", "(", "optimizer", ")", "\n", "\n", "# init fp16, must before DataParallel init", "\n", "if", "len", "(", "self", ".", "fp16", ")", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "fp16", ",", "str", ")", ",", "\"Please set Apex AMP optimization level selected in ['O0', 'O1', 'O2', 'O3']\"", "\n", "_check_fp16", "(", ")", "\n", "assert", "device", "==", "'cuda'", ",", "\"Amp requires cuda device\"", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "self", ".", "fp16", ")", "\n", "\n", "# init DataParallel", "\n", "", "if", "parse_version", "(", "torch", ".", "__version__", ")", ">=", "parse_version", "(", "'1.1'", ")", ":", "\n", "            ", "self", ".", "ddp_model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "self", ".", "local_rank", "]", ",", "\n", "output_device", "=", "self", ".", "local_rank", ",", "find_unused_parameters", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ddp_model", "=", "DDP", "(", "model", ",", "device_ids", "=", "[", "self", ".", "local_rank", "]", ",", "\n", "output_device", "=", "self", ".", "local_rank", ")", "\n", "", "self", ".", "model", "=", "self", ".", "ddp_model", ".", "module", "\n", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "sampler", "=", "DistributedSampler", "(", "self", ".", "train_data", ")", "\n", "self", ".", "data_iterator", "=", "self", ".", "_get_data_iter", "(", "self", ".", "train_data", ")", "\n", "self", ".", "batch_size", "=", "self", ".", "world_size", "*", "self", ".", "batch_size_per_gpu", "\n", "self", ".", "n_steps", "=", "self", ".", "_get_n_steps", "(", ")", "\n", "\n", "# for evaluation, only run eval on master proc", "\n", "if", "dev_data", "and", "metrics", ":", "\n", "            ", "cb", "=", "_TesterCallback", "(", "\n", "dev_data", ",", "model", ",", "metrics", ",", "\n", "batch_size", "=", "batch_size_per_gpu", ",", "num_workers", "=", "num_workers", ")", "\n", "self", ".", "test_manager", ".", "add_callback", "(", "[", "cb", "]", ",", "master", "=", "True", ")", "\n", "\n", "# Setup logging", "\n", "# \u540c\u6b65start_time", "\n", "", "sync_time", "=", "torch", ".", "tensor", "(", "time", ".", "time", "(", ")", ",", "dtype", "=", "torch", ".", "double", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "dist", ".", "broadcast", "(", "sync_time", ",", "src", "=", "0", ")", "\n", "self", ".", "start_time", "=", "datetime", ".", "fromtimestamp", "(", "sync_time", ".", "item", "(", ")", ")", ".", "strftime", "(", "'%Y-%m-%d-%H-%M-%S-%f'", ")", "\n", "# print('sync_time: {}, start_time: {}'.format(sync_time, self.start_time))", "\n", "\n", "if", "self", ".", "save_path", ":", "\n", "            ", "self", ".", "cp_save_path", "=", "self", ".", "save_path", "\n", "", "else", ":", "\n", "            ", "self", ".", "cp_save_path", "=", "None", "\n", "# use INFO in the master, WARN for others", "\n", "", "self", ".", "logger", "=", "logger", "\n", "self", ".", "logger", ".", "info", "(", "\"Setup Distributed Trainer\"", ")", "\n", "self", ".", "logger", ".", "warning", "(", "\"Process pid: {}, rank: {}, local rank: {}, device: {}, fp16: {}\"", ".", "format", "(", "\n", "os", ".", "getpid", "(", ")", ",", "self", ".", "rank", ",", "self", ".", "local_rank", ",", "self", ".", "device", ",", "self", ".", "fp16", "if", "self", ".", "fp16", "else", "False", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Num of processes: {}\"", ".", "format", "(", "self", ".", "world_size", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Use device: {}\"", ".", "format", "(", "device", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Training with fp16: {}, optimization level: {}\"", ".", "format", "(", "\n", "len", "(", "self", ".", "fp16", ")", ">", "0", ",", "self", ".", "fp16", "if", "self", ".", "fp16", "else", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._maybe_no_sync": [[199, 214], ["hasattr", "dist_trainer.DistTrainer.ddp_model.no_sync", "contextlib.ExitStack"], "methods", ["None"], ["", "def", "_maybe_no_sync", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Whenever *samples* contains more than one mini-batch, we\n        want to accumulate gradients locally and only call\n        all-reduce in the last backwards pass.\n        \"\"\"", "\n", "i", "=", "self", ".", "step", "%", "self", ".", "update_every", "\n", "if", "(", "\n", "self", ".", "world_size", ">", "1", "\n", "and", "hasattr", "(", "self", ".", "ddp_model", ",", "\"no_sync\"", ")", "\n", "and", "i", "!=", "0", "\n", ")", ":", "\n", "            ", "return", "self", ".", "ddp_model", ".", "no_sync", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "contextlib", ".", "ExitStack", "(", ")", "# dummy contextmanager", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._get_n_steps": [[215, 217], ["len"], "methods", ["None"], ["", "", "def", "_get_n_steps", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_iterator", ")", "*", "self", ".", "n_epochs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._get_data_iter": [[218, 226], ["isinstance", "batch.DataSetIter", "isinstance", "TypeError", "type"], "methods", ["None"], ["", "def", "_get_data_iter", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "if", "isinstance", "(", "dataset", ",", "DataSet", ")", ":", "\n", "            ", "return", "DataSetIter", "(", "dataset", "=", "dataset", ",", "batch_size", "=", "self", ".", "batch_size_per_gpu", ",", "sampler", "=", "self", ".", "sampler", ",", "\n", "num_workers", "=", "self", ".", "num_data_workers", ",", "drop_last", "=", "self", ".", "drop_last", ")", "\n", "", "elif", "isinstance", "(", "dataset", ",", "BatchIter", ")", ":", "\n", "            ", "return", "dataset", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"train_data type {} not support\"", ".", "format", "(", "type", "(", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._get_optimizer": [[227, 236], ["isinstance", "isinstance", "optimizer.construct_from_pytorch", "dist_trainer.DistTrainer.ddp_model.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "TypeError", "dist_trainer.DistTrainer.ddp_model.parameters", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.Adam.construct_from_pytorch"], ["", "", "def", "_get_optimizer", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "if", "isinstance", "(", "optimizer", ",", "torch", ".", "optim", ".", "Optimizer", ")", ":", "\n", "            ", "return", "optimizer", "\n", "", "elif", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "return", "optimizer", ".", "construct_from_pytorch", "(", "self", ".", "ddp_model", ".", "parameters", "(", ")", ")", "\n", "", "elif", "optimizer", "is", "None", ":", "\n", "            ", "return", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "ddp_model", ".", "parameters", "(", ")", ",", "lr", "=", "4e-3", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"optimizer can only be torch.optim.Optimizer type, not {}.\"", ".", "format", "(", "type", "(", "optimizer", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.is_master": [[237, 241], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_master", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\u662f\u5426\u662f\u4e3b\u8fdb\u7a0b\"\"\"", "\n", "return", "self", ".", "rank", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.train": [[242, 309], ["torch.barrier", "torch.barrier", "torch.barrier", "torch.barrier", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "time.time", "time.time", "time.time", "time.time", "round", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.logger.info", "dist_trainer.DistTrainer.callback_manager.on_train_begin", "dist_trainer.DistTrainer._train", "dist_trainer.DistTrainer.callback_manager.on_train_end", "len", "dist_trainer.DistTrainer.load_check_point", "len", "len", "len", "dist_trainer.DistTrainer.callback_manager.on_exception", "time.time", "time.time", "time.time", "time.time", "dist_trainer.DistTrainer._best_save_name", "repr", "repr", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "isinstance", "dist_trainer.DistTrainer.logger.info"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback.on_train_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._train", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CheckPointCallback.on_train_end", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.load_check_point", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback.on_exception", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._best_save_name"], ["", "def", "train", "(", "self", ",", "load_best_model", "=", "True", ",", "on_exception", "=", "'auto'", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f7f\u7528\u8be5\u51fd\u6570\u4f7fTrainer\u5f00\u59cb\u8bad\u7ec3\u3002\n\n        :param str on_exception: \u5728\u8bad\u7ec3\u8fc7\u7a0b\u906d\u9047exception\uff0c\u5e76\u88ab :py:class:Callback \u7684on_exception()\u5904\u7406\u540e\uff0c\u662f\u5426\u7ee7\u7eed\u629b\u51fa\u5f02\u5e38\u3002\n                \u652f\u6301'ignore','raise', 'auto': 'ignore'\u5c06\u6355\u83b7\u5f02\u5e38\uff0c\u5199\u5728Trainer.train()\u540e\u9762\u7684\u4ee3\u7801\u5c06\u7ee7\u7eed\u8fd0\u884c; 'raise'\u5c06\u5f02\u5e38\u629b\u51fa;\n                'auto'\u5c06ignore\u4ee5\u4e0b\u4e24\u79cdException: CallbackException\u4e0eKeyboardInterrupt, raise\u5176\u5b83exception.\n        :return dict: \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b\u7684\u6570\u636e,\n                \u5185\u542b\u4ee5\u4e0b\u5185\u5bb9::\n\n                    seconds: float, \u8868\u793a\u8bad\u7ec3\u65f6\u957f\n                    \u4ee5\u4e0b\u4e09\u4e2a\u5185\u5bb9\u53ea\u6709\u5728\u63d0\u4f9b\u4e86dev_data\u7684\u60c5\u51b5\u4e0b\u4f1a\u6709\u3002\n                    best_eval: Dict of Dict, \u8868\u793aevaluation\u7684\u7ed3\u679c\u3002\u7b2c\u4e00\u5c42\u7684key\u4e3aMetric\u7684\u540d\u79f0\uff0c\n                                \u7b2c\u4e8c\u5c42\u7684key\u4e3a\u5177\u4f53\u7684Metric\n                    best_epoch: int\uff0c\u5728\u7b2c\u51e0\u4e2aepoch\u53d6\u5f97\u7684\u6700\u4f73\u503c\n                    best_step: int, \u5728\u7b2c\u51e0\u4e2astep(batch)\u66f4\u65b0\u53d6\u5f97\u7684\u6700\u4f73\u503c\n\n        \"\"\"", "\n", "try", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"###### Training epochs started ######\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Total epochs: %d'", "%", "self", ".", "n_epochs", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Total steps: %d'", "%", "self", ".", "n_steps", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Num instances per GPU: %d'", "%", "self", ".", "batch_size_per_gpu", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Num of steps per update: %d'", "%", "self", ".", "update_every", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Total batch_size: %d'", "%", "\n", "(", "self", ".", "batch_size_per_gpu", "*", "dist", ".", "get_world_size", "(", ")", "*", "self", ".", "update_every", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Total num of samples: %d'", "%", "len", "(", "self", ".", "train_data", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Num of callbacks for all workers: {}\"", ".", "format", "(", "\n", "len", "(", "self", ".", "callback_manager", ".", "callbacks_all", ")", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Num of callbacks for master workers: {}\"", ".", "format", "(", "\n", "len", "(", "self", ".", "callback_manager", ".", "callbacks_master", ")", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Callbacks for all workers: {}\"", ".", "format", "(", "\n", "[", "repr", "(", "cb", ")", "for", "cb", "in", "self", ".", "callback_manager", ".", "callbacks_all", "]", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Callbacks for master workers: {}\"", ".", "format", "(", "\n", "[", "repr", "(", "cb", ")", "for", "cb", "in", "self", ".", "callback_manager", ".", "callbacks_master", "]", ")", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "results", "=", "{", "}", "\n", "if", "self", ".", "n_epochs", "<=", "0", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Training epoch is {}, nothing was done.\"", ".", "format", "(", "self", ".", "n_epochs", ")", ")", "\n", "results", "[", "'seconds'", "]", "=", "0.", "\n", "return", "results", "\n", "\n", "", "try", ":", "\n", "                ", "self", ".", "callback_manager", ".", "on_train_begin", "(", ")", "\n", "self", ".", "_train", "(", ")", "\n", "self", ".", "callback_manager", ".", "on_train_end", "(", ")", "\n", "\n", "", "except", "BaseException", "as", "e", ":", "\n", "                ", "self", ".", "callback_manager", ".", "on_exception", "(", "e", ")", "\n", "if", "on_exception", "==", "'auto'", ":", "\n", "                    ", "if", "not", "isinstance", "(", "e", ",", "(", "CallbackException", ",", "KeyboardInterrupt", ")", ")", ":", "\n", "                        ", "raise", "e", "\n", "", "else", ":", "\n", "                        ", "self", ".", "logger", ".", "info", "(", "'Catch {}, ignored.'", ".", "format", "(", "e", ".", "__class__", ".", "__name__", ")", ")", "\n", "", "", "elif", "on_exception", "==", "'raise'", ":", "\n", "                    ", "raise", "e", "\n", "\n", "", "", "results", "[", "'seconds'", "]", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "2", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"###### Train finished ######\"", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Total train time: {} seconds.'", ".", "format", "(", "results", "[", "'seconds'", "]", ")", ")", "\n", "if", "load_best_model", "and", "self", ".", "cp_save_path", "and", "len", "(", "self", ".", "test_manager", ".", "callbacks", ")", ":", "\n", "                ", "self", ".", "load_check_point", "(", "self", ".", "_best_save_name", "(", ")", ")", "\n", "", "", "finally", ":", "\n", "            ", "pass", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._train": [[310, 382], ["torch.barrier", "torch.barrier", "torch.barrier", "torch.barrier", "inner_tqdm", "dist_trainer.DistTrainer.ddp_model.zero_grad", "range", "pbar.close", "pbar.set_description_str", "dist_trainer.DistTrainer.callback_manager.on_epoch_begin", "dist_trainer.DistTrainer.callback_manager.on_epoch_end", "dist_trainer.DistTrainer.ddp_model.train", "utils._move_dict_value_to_device", "data_iterator.get_batch_indices", "dist_trainer.DistTrainer.callback_manager.on_batch_begin", "dist_trainer.DistTrainer._data_forward", "dist_trainer.DistTrainer.callback_manager.on_loss_begin", "dist_trainer.DistTrainer._compute_loss", "dist_trainer.DistTrainer.item", "dist_trainer.DistTrainer.callback_manager.on_backward_begin", "dist_trainer.DistTrainer.callback_manager.on_backward_end", "dist_trainer.DistTrainer._update", "dist_trainer.DistTrainer.callback_manager.on_step_end", "dist_trainer.DistTrainer.callback_manager.on_batch_end", "dist_trainer.DistTrainer._do_validation", "dist_trainer.DistTrainer.backward", "pbar.update", "pbar.set_postfix_str", "dist_trainer.DistTrainer._do_validation", "amp.scale_loss", "scale_loss.backward", "float"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.close", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRFinder.on_epoch_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CheckPointCallback.on_epoch_end", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._move_dict_value_to_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.get_batch_indices", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.TensorboardCallback.on_batch_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._data_forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_loss_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._compute_loss", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.TensorboardCallback.on_backward_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.WarmupCallback.on_backward_end", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_step_end", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRFinder.on_batch_end", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._do_validation", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.lexicalizedPCFG.backward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.set_postfix_str", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._do_validation", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.lexicalizedPCFG.backward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "_train", "(", "self", ")", ":", "\n", "        ", "dist", ".", "barrier", "(", ")", "\n", "if", "not", "self", ".", "use_tqdm", ":", "\n", "            ", "from", ".", "utils", "import", "_pseudo_tqdm", "as", "inner_tqdm", "\n", "", "else", ":", "\n", "            ", "inner_tqdm", "=", "tqdm", "\n", "\n", "", "self", ".", "step", "=", "0", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "pbar", "=", "inner_tqdm", "(", "total", "=", "self", ".", "n_steps", ",", "postfix", "=", "'loss:{0:<6.5f}'", ",", "\n", "leave", "=", "False", ",", "dynamic_ncols", "=", "True", ",", "disable", "=", "not", "self", ".", "is_master", ")", "\n", "pbar", "=", "self", ".", "pbar", "\n", "avg_loss", "=", "0", "\n", "data_iterator", "=", "self", ".", "data_iterator", "\n", "self", ".", "ddp_model", ".", "zero_grad", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "self", ".", "n_epochs", "+", "1", ")", ":", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "pbar", ".", "set_description_str", "(", "desc", "=", "\"Epoch {}/{}\"", ".", "format", "(", "epoch", ",", "self", ".", "n_epochs", ")", ")", "\n", "# early stopping", "\n", "self", ".", "callback_manager", ".", "on_epoch_begin", "(", ")", "\n", "for", "batch_x", ",", "batch_y", "in", "data_iterator", ":", "\n", "                ", "self", ".", "step", "+=", "1", "\n", "self", ".", "ddp_model", ".", "train", "(", ")", "\n", "_move_dict_value_to_device", "(", "batch_x", ",", "batch_y", ",", "device", "=", "self", ".", "device", ")", "\n", "indices", "=", "data_iterator", ".", "get_batch_indices", "(", ")", "\n", "# negative sampling; replace unknown; re-weight batch_y", "\n", "self", ".", "callback_manager", ".", "on_batch_begin", "(", "batch_x", ",", "batch_y", ",", "indices", ")", "\n", "prediction", "=", "self", ".", "_data_forward", "(", "self", ".", "ddp_model", ",", "batch_x", ")", "\n", "\n", "# edit prediction", "\n", "self", ".", "callback_manager", ".", "on_loss_begin", "(", "batch_y", ",", "prediction", ")", "\n", "loss", "=", "self", ".", "_compute_loss", "(", "prediction", ",", "batch_y", ")", "\n", "if", "self", ".", "update_every", ">", "1", ":", "\n", "                    ", "loss", "=", "loss", "/", "self", ".", "update_every", "\n", "", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "# Is loss NaN or inf? requires_grad = False", "\n", "self", ".", "callback_manager", ".", "on_backward_begin", "(", "loss", ")", "\n", "\n", "# with self._maybe_no_sync():", "\n", "if", "self", ".", "fp16", ":", "\n", "                    ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "self", ".", "optimizer", ")", "as", "scale_loss", ":", "\n", "                        ", "scale_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "self", ".", "callback_manager", ".", "on_backward_end", "(", ")", "\n", "\n", "self", ".", "_update", "(", ")", "\n", "self", ".", "callback_manager", ".", "on_step_end", "(", ")", "\n", "\n", "if", "self", ".", "step", "%", "self", ".", "print_every", "==", "0", ":", "\n", "                    ", "avg_loss", "=", "float", "(", "avg_loss", ")", "/", "self", ".", "print_every", "\n", "print_output", "=", "\"loss:{:<6.5f}\"", ".", "format", "(", "avg_loss", ")", "\n", "pbar", ".", "update", "(", "self", ".", "print_every", ")", "\n", "pbar", ".", "set_postfix_str", "(", "print_output", ")", "\n", "avg_loss", "=", "0", "\n", "\n", "", "self", ".", "callback_manager", ".", "on_batch_end", "(", ")", "\n", "\n", "if", "(", "self", ".", "validate_every", ">", "0", "and", "self", ".", "step", "%", "self", ".", "validate_every", "==", "0", ")", ":", "\n", "                    ", "self", ".", "_do_validation", "(", ")", "\n", "\n", "# ================= mini-batch end ==================== #", "\n", "", "", "if", "self", ".", "validate_every", "<", "0", ":", "\n", "                ", "self", ".", "_do_validation", "(", ")", "\n", "\n", "# lr decay; early stopping", "\n", "", "self", ".", "callback_manager", ".", "on_epoch_end", "(", ")", "\n", "# =============== epochs end =================== #", "\n", "", "pbar", ".", "close", "(", ")", "\n", "self", ".", "pbar", "=", "None", "\n", "# ============ tqdm end ============== #", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._update": [[384, 391], ["dist_trainer.DistTrainer.optimizer.step", "dist_trainer.DistTrainer.ddp_model.zero_grad"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.AdamW.step"], ["", "def", "_update", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Perform weight update on a model.\n\n        \"\"\"", "\n", "if", "self", ".", "step", "%", "self", ".", "update_every", "==", "0", ":", "\n", "            ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "ddp_model", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._data_forward": [[392, 399], ["utils._build_args", "network", "isinstance", "TypeError", "utils._get_func_signature", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._build_args", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature"], ["", "", "def", "_data_forward", "(", "self", ",", "network", ",", "x", ")", ":", "\n", "        ", "x", "=", "_build_args", "(", "self", ".", "_forward_func", ",", "**", "x", ")", "\n", "y", "=", "network", "(", "**", "x", ")", "\n", "if", "not", "isinstance", "(", "y", ",", "dict", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "f\"The return value of {_get_func_signature(self._forward_func)} should be dict, got {type(y)}.\"", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._compute_loss": [[400, 413], ["dist_trainer.DistTrainer.losser", "loss.mean.mean.dim", "loss.mean.mean.mean"], "methods", ["None"], ["", "def", "_compute_loss", "(", "self", ",", "predict", ",", "truth", ")", ":", "\n", "        ", "r\"\"\"Compute loss given prediction and ground truth.\n\n        :param predict: prediction dict, produced by model.forward\n        :param truth: ground truth dict, produced by batch_y\n        :return: a scalar\n        \"\"\"", "\n", "loss", "=", "self", ".", "losser", "(", "predict", ",", "truth", ")", "\n", "if", "self", ".", "update_every", ">", "1", ":", "\n", "            ", "loss", "=", "loss", "/", "self", ".", "update_every", "\n", "", "if", "loss", ".", "dim", "(", ")", ">", "0", ":", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.save_check_point": [[414, 427], ["os.makedirs", "os.path.join", "dist_trainer.DistTrainer.logger.info", "model_to_save.state_dict.state_dict.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save"], ["", "def", "save_check_point", "(", "self", ",", "name", "=", "None", ",", "only_params", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\u4fdd\u5b58\u5f53\u524d\u6a21\u578b\"\"\"", "\n", "# only master save models", "\n", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "'checkpoint-{}.bin'", ".", "format", "(", "self", ".", "step", ")", "\n", "", "os", ".", "makedirs", "(", "self", ".", "cp_save_path", ",", "exist_ok", "=", "True", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cp_save_path", ",", "name", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Save checkpoint to {}\"", ".", "format", "(", "path", ")", ")", "\n", "model_to_save", "=", "self", ".", "ddp_model", ".", "module", "\n", "if", "only_params", ":", "\n", "            ", "model_to_save", "=", "model_to_save", ".", "state_dict", "(", ")", "\n", "", "if", "self", ".", "is_master", ":", "\n", "            ", "torch", ".", "save", "(", "model_to_save", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.load_check_point": [[428, 437], ["os.path.join", "dist_trainer.DistTrainer.logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "dist_trainer.DistTrainer.model.load_state_dict", "isinstance", "model_load.state_dict.state_dict.state_dict", "torch.serialization.default_restore_location", "torch.serialization.default_restore_location", "torch.serialization.default_restore_location", "torch.serialization.default_restore_location"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "", "def", "load_check_point", "(", "self", ",", "name", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cp_save_path", ",", "name", ")", "\n", "self", ".", "logger", ".", "info", "(", "'reload best model from %s'", ",", "path", ")", "\n", "model_load", "=", "torch", ".", "load", "(", "\n", "path", ",", "\n", "map_location", "=", "lambda", "s", ",", "l", ":", "default_restore_location", "(", "s", ",", "\"cpu\"", ")", ")", "\n", "if", "not", "isinstance", "(", "model_load", ",", "dict", ")", ":", "\n", "            ", "model_load", "=", "model_load", ".", "state_dict", "(", ")", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "model_load", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._best_save_name": [[438, 441], ["str"], "methods", ["None"], ["", "def", "_best_save_name", "(", "self", ",", "auto_fix", "=", "True", ")", ":", "\n", "        ", "best_name", "=", "\"best_\"", "+", "\"_\"", ".", "join", "(", "[", "self", ".", "model", ".", "__class__", ".", "__name__", ",", "str", "(", "self", ".", "metric_key", ")", ",", "self", ".", "start_time", "]", ")", "\n", "return", "best_name", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._do_validation": [[442, 477], ["dist_trainer.DistTrainer.ddp_model.no_sync", "dist_trainer.DistTrainer.callback_manager.on_valid_begin", "dist_trainer.DistTrainer.test_manager.on_valid_begin", "list", "len", "torch.barrier", "torch.barrier", "torch.barrier", "torch.barrier", "dist_trainer.DistTrainer.callback_manager.on_valid_end", "dist_trainer.DistTrainer.ddp_model.train", "filter", "list", "os.listdir", "zip", "list", "list", "dist_trainer.DistTrainer.save_check_point", "len", "best_name[].strip", "list.values", "eval_res0.keys", "dist_trainer.DistTrainer._best_save_name", "fn.startswith", "fn.endswith", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback.on_valid_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback.on_valid_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback.on_valid_end", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.save_check_point", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer._best_save_name"], ["", "def", "_do_validation", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "ddp_model", ".", "no_sync", "(", ")", ":", "\n", "# \u56e0\u4e3a\u6a21\u578b\u53c2\u6570\u4e0d\u66f4\u65b0\uff0c\u53ef\u4ee5\u5173\u95ed\u540c\u6b65", "\n", "            ", "self", ".", "callback_manager", ".", "on_valid_begin", "(", ")", "\n", "eval_res", "=", "self", ".", "test_manager", ".", "on_valid_begin", "(", ")", "\n", "eval_res", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "eval_res", ")", ")", "\n", "if", "len", "(", "eval_res", ")", ":", "\n", "                ", "eval_res", ",", "is_better", "=", "list", "(", "zip", "(", "*", "eval_res", ")", ")", "\n", "eval_res", "=", "eval_res", "[", "0", "]", "\n", "is_better", "=", "is_better", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "eval_res", ",", "is_better", "=", "None", ",", "None", "\n", "", "if", "self", ".", "metric_key", "is", "None", "and", "eval_res", "is", "not", "None", ":", "\n", "                ", "eval_res0", "=", "list", "(", "eval_res", ".", "values", "(", ")", ")", "[", "0", "]", "\n", "self", ".", "metric_key", "=", "list", "(", "eval_res0", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "# logger.info('{}, {}'.format(eval_res, is_better))", "\n", "# save better model on master node", "\n", "", "if", "is_better", "is", "not", "None", "and", "self", ".", "cp_save_path", ":", "\n", "                ", "if", "is_better", ":", "\n", "                    ", "self", ".", "save_check_point", "(", "self", ".", "_best_save_name", "(", ")", ",", "only_params", "=", "False", ")", "\n", "", "", "dist", ".", "barrier", "(", ")", "\n", "\n", "if", "not", "self", ".", "is_master", "and", "self", ".", "metric_key", "is", "None", ":", "\n", "# \u4e3b\u8fdb\u7a0b\u81ea\u52a8\u5f97\u5230\u4e86metric_key\uff0c\u800c\u5176\u5b83\u8fdb\u7a0b\u6ca1\u6709", "\n", "                ", "prefix", "=", "'best_'", "+", "self", ".", "model", ".", "__class__", ".", "__name__", "\n", "suffix", "=", "self", ".", "start_time", "\n", "fn_list", "=", "os", ".", "listdir", "(", "self", ".", "cp_save_path", ")", "\n", "fn_list", "=", "[", "fn", "for", "fn", "in", "fn_list", "if", "fn", ".", "startswith", "(", "prefix", ")", "and", "fn", ".", "endswith", "(", "suffix", ")", "]", "\n", "if", "len", "(", "fn_list", ")", "==", "1", ":", "\n", "                    ", "best_name", "=", "fn_list", "[", "0", "]", "\n", "self", ".", "metric_key", "=", "best_name", "[", "len", "(", "prefix", ")", ":", "-", "len", "(", "suffix", ")", "]", ".", "strip", "(", "'_'", ")", "\n", "# print('RANK {} metric_key {}'.format(self.rank, self.metric_key))", "\n", "", "", "self", ".", "callback_manager", ".", "on_valid_end", "(", "\n", "eval_res", ",", "self", ".", "metric_key", ",", "self", ".", "optimizer", ",", "is_better", ")", "\n", "self", ".", "ddp_model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.close": [[478, 481], ["torch.destroy_process_group", "torch.destroy_process_group", "torch.destroy_process_group", "torch.destroy_process_group"], "methods", ["None"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\u5173\u95edTrainer\uff0c\u9500\u6bc1\u8fdb\u7a0b\"\"\"", "\n", "dist", ".", "destroy_process_group", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.get_local_rank": [[46, 60], ["ArgumentParser", "ArgumentParser.add_argument", "ArgumentParser.parse_known_args", "RuntimeError", "int", "str"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["def", "get_local_rank", "(", ")", ":", "\n", "    ", "r\"\"\"\n    \u8fd4\u56de\u5f53\u524d\u8fdb\u7a0b\u7684 local rank\uff0c 0 \u5230 N-1 \uff0cN\u4e3a\u5f53\u524d\u5206\u5e03\u5f0f\u603b\u8fdb\u7a0b\u6570\n    \"\"\"", "\n", "if", "'LOCAL_RANK'", "in", "os", ".", "environ", ":", "\n", "        ", "return", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "", "from", "argparse", "import", "ArgumentParser", "\n", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ")", "\n", "args", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "if", "'local_rank'", "in", "args", "and", "args", ".", "local_rank", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "# for multiple calls for this function", "\n", "return", "args", ".", "local_rank", "\n", "", "raise", "RuntimeError", "(", "'Please use \"python -m torch.distributed.launch --nproc_per_node=N train_script.py'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.MetricBase.__init__": [[125, 129], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_param_map", "=", "{", "}", "# key is param in function, value is input param.", "\n", "self", ".", "_checked", "=", "False", "\n", "self", ".", "_metric_name", "=", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.MetricBase.param_map": [[130, 138], ["len", "inspect.getfullargspec"], "methods", ["None"], ["", "@", "property", "\n", "def", "param_map", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_param_map", ")", "==", "0", ":", "# \u5982\u679c\u4e3a\u7a7a\u8bf4\u660e\u8fd8\u6ca1\u6709\u521d\u59cb\u5316", "\n", "            ", "func_spect", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "evaluate", ")", "\n", "func_args", "=", "[", "arg", "for", "arg", "in", "func_spect", ".", "args", "if", "arg", "!=", "'self'", "]", "\n", "for", "arg", "in", "func_args", ":", "\n", "                ", "self", ".", "_param_map", "[", "arg", "]", "=", "arg", "\n", "", "", "return", "self", ".", "_param_map", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.MetricBase.evaluate": [[139, 142], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "evaluate", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.MetricBase.get_metric": [[143, 146], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_metric", "(", "self", ",", "reset", "=", "True", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.MetricBase.set_metric_name": [[147, 156], ["None"], "methods", ["None"], ["", "def", "set_metric_name", "(", "self", ",", "name", ":", "str", ")", ":", "\n", "        ", "r\"\"\"\n        \u8bbe\u7f6emetric\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u662fMetric\u7684class name.\n\n        :param str name:\n        :return: self\n        \"\"\"", "\n", "self", ".", "_metric_name", "=", "name", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.MetricBase.get_metric_name": [[157, 164], ["None"], "methods", ["None"], ["", "def", "get_metric_name", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8fd4\u56demetric\u7684\u540d\u79f0\n        \n        :return:\n        \"\"\"", "\n", "return", "self", ".", "_metric_name", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.MetricBase._init_param_map": [[165, 205], ["collections.defaultdict", "kwargs.items", "collections.defaultdict.items", "inspect.getfullargspec", "metrics.MetricBase._param_map.items", "key_map.items", "value_counter[].add", "isinstance", "TypeError", "value_counter[].add", "isinstance", "TypeError", "len", "ValueError", "NameError", "isinstance", "TypeError", "isinstance", "TypeError", "type", "type", "utils._get_func_signature", "type", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature"], ["", "def", "_init_param_map", "(", "self", ",", "key_map", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\u68c0\u67e5key_map\u548c\u5176\u4ed6\u53c2\u6570map\uff0c\u5e76\u5c06\u8fd9\u4e9b\u6620\u5c04\u5173\u7cfb\u6dfb\u52a0\u5230self._param_map\n\n        :param dict key_map: \u8868\u793akey\u7684\u6620\u5c04\u5173\u7cfb\n        :param kwargs: key word args\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a\u7684\u952e-\u503c\u5bf9\u90fd\u4f1a\u88ab\u6784\u9020\u6210\u6620\u5c04\u5173\u7cfb\n        :return: None\n        \"\"\"", "\n", "value_counter", "=", "defaultdict", "(", "set", ")", "\n", "if", "key_map", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "key_map", ",", "dict", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"key_map must be `dict`, got {}.\"", ".", "format", "(", "type", "(", "key_map", ")", ")", ")", "\n", "", "for", "key", ",", "value", "in", "key_map", ".", "items", "(", ")", ":", "\n", "                ", "if", "value", "is", "None", ":", "\n", "                    ", "self", ".", "_param_map", "[", "key", "]", "=", "key", "\n", "continue", "\n", "", "if", "not", "isinstance", "(", "key", ",", "str", ")", ":", "\n", "                    ", "raise", "TypeError", "(", "f\"key in key_map must be `str`, not `{type(key)}`.\"", ")", "\n", "", "if", "not", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "                    ", "raise", "TypeError", "(", "f\"value in key_map must be `str`, not `{type(value)}`.\"", ")", "\n", "", "self", ".", "_param_map", "[", "key", "]", "=", "value", "\n", "value_counter", "[", "value", "]", ".", "add", "(", "key", ")", "\n", "", "", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "self", ".", "_param_map", "[", "key", "]", "=", "key", "\n", "continue", "\n", "", "if", "not", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "                ", "raise", "TypeError", "(", "f\"in {key}={value}, value must be `str`, not `{type(value)}`.\"", ")", "\n", "", "self", ".", "_param_map", "[", "key", "]", "=", "value", "\n", "value_counter", "[", "value", "]", ".", "add", "(", "key", ")", "\n", "", "for", "value", ",", "key_set", "in", "value_counter", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "key_set", ")", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Several parameters:{key_set} are provided with one output {value}.\"", ")", "\n", "\n", "# check consistence between signature and _param_map", "\n", "", "", "func_spect", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "evaluate", ")", "\n", "func_args", "=", "[", "arg", "for", "arg", "in", "func_spect", ".", "args", "if", "arg", "!=", "'self'", "]", "\n", "for", "func_param", ",", "input_param", "in", "self", ".", "_param_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "func_param", "not", "in", "func_args", ":", "\n", "                ", "raise", "NameError", "(", "\n", "f\"Parameter `{func_param}` is not in {_get_func_signature(self.evaluate)}. Please check the \"", "\n", "f\"initialization parameters, or change its signature.\"", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.MetricBase.__call__": [[207, 280], ["metrics.MetricBase._reverse_param_map.items", "utils._build_args", "metrics.MetricBase.evaluate", "inspect.getfullargspec", "set", "metrics.MetricBase._param_map.items", "metrics.MetricBase._reverse_param_map.items", "utils._check_arg_dict_list", "list", "enumerate", "utils._CheckRes", "callable", "TypeError", "utils._CheckError", "NameError", "metrics.MetricBase._param_map.items", "duplicated.append", "utils._get_func_signature", "type", "utils._get_func_signature"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._build_args", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.CMRC2018Metric.evaluate", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_arg_dict_list", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature"], ["", "", "", "def", "__call__", "(", "self", ",", "pred_dict", ",", "target_dict", ")", ":", "\n", "        ", "r\"\"\"\n        \u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u8c03\u7528self.evaluate \u65b9\u6cd5.\n        \u5728\u8c03\u7528\u4e4b\u524d\uff0c\u4f1a\u8fdb\u884c\u4ee5\u4e0b\u68c0\u6d4b:\n            1. self.evaluate\u5f53\u4e2d\u662f\u5426\u6709varargs, \u8fd9\u662f\u4e0d\u652f\u6301\u7684.\n            2. self.evaluate\u5f53\u4e2d\u6240\u9700\u8981\u7684\u53c2\u6570\u662f\u5426\u65e2\u4e0d\u5728``pred_dict``\u4e5f\u4e0d\u5728``target_dict``.\n            3. self.evaluate\u5f53\u4e2d\u6240\u9700\u8981\u7684\u53c2\u6570\u662f\u5426\u65e2\u5728``pred_dict``\u4e5f\u5728``target_dict``.\n\n            \u9664\u6b64\u4ee5\u5916\uff0c\u5728\u53c2\u6570\u88ab\u4f20\u5165self.evaluate\u4ee5\u524d\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u68c0\u6d4b``pred_dict``\u548c``target_dict``\u5f53\u4e2d\u6ca1\u6709\u88ab\u7528\u5230\u7684\u53c2\u6570\n            \u5982\u679ckwargs\u662fself.evaluate\u7684\u53c2\u6570\uff0c\u5219\u4e0d\u4f1a\u68c0\u6d4b\n        :param pred_dict: \u6a21\u578b\u7684forward\u51fd\u6570\u6216\u8005predict\u51fd\u6570\u8fd4\u56de\u7684dict\n        :param target_dict: DataSet.batch_y\u91cc\u7684\u952e-\u503c\u5bf9\u6240\u7ec4\u6210\u7684dict(\u5373is_target=True\u7684fields\u7684\u5185\u5bb9)\n        :return:\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "_checked", ":", "\n", "            ", "if", "not", "callable", "(", "self", ".", "evaluate", ")", ":", "\n", "                ", "raise", "TypeError", "(", "f\"{self.__class__.__name__}.evaluate has to be callable, not {type(self.evaluate)}.\"", ")", "\n", "# 1. check consistence between signature and _param_map", "\n", "", "func_spect", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "evaluate", ")", "\n", "func_args", "=", "set", "(", "[", "arg", "for", "arg", "in", "func_spect", ".", "args", "if", "arg", "!=", "'self'", "]", ")", "\n", "for", "func_arg", ",", "input_arg", "in", "self", ".", "_param_map", ".", "items", "(", ")", ":", "\n", "                ", "if", "func_arg", "not", "in", "func_args", ":", "\n", "                    ", "raise", "NameError", "(", "f\"`{func_arg}` not in {_get_func_signature(self.evaluate)}.\"", ")", "\n", "\n", "# 2. only part of the _param_map are passed, left are not", "\n", "", "", "for", "arg", "in", "func_args", ":", "\n", "                ", "if", "arg", "not", "in", "self", ".", "_param_map", ":", "\n", "                    ", "self", ".", "_param_map", "[", "arg", "]", "=", "arg", "# This param does not need mapping.", "\n", "", "", "self", ".", "_evaluate_args", "=", "func_args", "\n", "self", ".", "_reverse_param_map", "=", "{", "input_arg", ":", "func_arg", "for", "func_arg", ",", "input_arg", "in", "self", ".", "_param_map", ".", "items", "(", ")", "}", "\n", "\n", "# need to wrap inputs in dict.", "\n", "", "mapped_pred_dict", "=", "{", "}", "\n", "mapped_target_dict", "=", "{", "}", "\n", "for", "input_arg", ",", "mapped_arg", "in", "self", ".", "_reverse_param_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "input_arg", "in", "pred_dict", ":", "\n", "                ", "mapped_pred_dict", "[", "mapped_arg", "]", "=", "pred_dict", "[", "input_arg", "]", "\n", "", "if", "input_arg", "in", "target_dict", ":", "\n", "                ", "mapped_target_dict", "[", "mapped_arg", "]", "=", "target_dict", "[", "input_arg", "]", "\n", "\n", "# missing", "\n", "", "", "if", "not", "self", ".", "_checked", ":", "\n", "            ", "duplicated", "=", "[", "]", "\n", "for", "input_arg", ",", "mapped_arg", "in", "self", ".", "_reverse_param_map", ".", "items", "(", ")", ":", "\n", "                ", "if", "input_arg", "in", "pred_dict", "and", "input_arg", "in", "target_dict", ":", "\n", "                    ", "duplicated", ".", "append", "(", "input_arg", ")", "\n", "", "", "check_res", "=", "_check_arg_dict_list", "(", "self", ".", "evaluate", ",", "[", "mapped_pred_dict", ",", "mapped_target_dict", "]", ")", "\n", "# only check missing.", "\n", "# replace missing.", "\n", "missing", "=", "check_res", ".", "missing", "\n", "replaced_missing", "=", "list", "(", "missing", ")", "\n", "for", "idx", ",", "func_arg", "in", "enumerate", "(", "missing", ")", ":", "\n", "# Don't delete `` in this information, nor add ``", "\n", "                ", "replaced_missing", "[", "idx", "]", "=", "f\"{self._param_map[func_arg]}\"", "+", "f\"(assign to `{func_arg}` \"", "f\"in `{self.__class__.__name__}`)\"", "\n", "\n", "", "check_res", "=", "_CheckRes", "(", "missing", "=", "replaced_missing", ",", "\n", "unused", "=", "check_res", ".", "unused", ",", "\n", "duplicated", "=", "duplicated", ",", "\n", "required", "=", "check_res", ".", "required", ",", "\n", "all_needed", "=", "check_res", ".", "all_needed", ",", "\n", "varargs", "=", "check_res", ".", "varargs", ")", "\n", "\n", "if", "check_res", ".", "missing", "or", "check_res", ".", "duplicated", ":", "\n", "                ", "raise", "_CheckError", "(", "check_res", "=", "check_res", ",", "\n", "func_signature", "=", "_get_func_signature", "(", "self", ".", "evaluate", ")", ")", "\n", "", "self", ".", "_checked", "=", "True", "\n", "", "refined_args", "=", "_build_args", "(", "self", ".", "evaluate", ",", "**", "mapped_pred_dict", ",", "**", "mapped_target_dict", ")", "\n", "\n", "self", ".", "evaluate", "(", "**", "refined_args", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.ConfusionMatrixMetric.__init__": [[311, 330], ["metrics.MetricBase.__init__", "metrics.ConfusionMatrixMetric._init_param_map", "utils.ConfusionMatrix"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map"], ["def", "__init__", "(", "self", ",", "\n", "vocab", "=", "None", ",", "\n", "pred", "=", "None", ",", "\n", "target", "=", "None", ",", "\n", "seq_len", "=", "None", ",", "\n", "print_ratio", "=", "False", "\n", ")", ":", "\n", "        ", "r\"\"\"\n        :param vocab: vocab\u8bcd\u8868\u7c7b,\u8981\u6c42\u6709to_word()\u65b9\u6cd5\u3002\n        :param pred: \u53c2\u6570\u6620\u5c04\u8868\u4e2d `pred` \u7684\u6620\u5c04\u5173\u7cfb\uff0cNone\u8868\u793a\u6620\u5c04\u5173\u7cfb\u4e3a `pred` -> `pred`\n        :param target: \u53c2\u6570\u6620\u5c04\u8868\u4e2d `target` \u7684\u6620\u5c04\u5173\u7cfb\uff0cNone\u8868\u793a\u6620\u5c04\u5173\u7cfb\u4e3a `target` -> `target`\n        :param seq_len: \u53c2\u6570\u6620\u5c04\u8868\u4e2d `seq_len` \u7684\u6620\u5c04\u5173\u7cfb\uff0cNone\u8868\u793a\u6620\u5c04\u5173\u7cfb\u4e3a `seq_len` -> `seq_len`\n        :param print_ratio: \u9650\u5236print\u7684\u8f93\u51fa\uff0cfalse only for result, true for result, percent(dim=0), percent(dim = 1) \n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_param_map", "(", "pred", "=", "pred", ",", "target", "=", "target", ",", "seq_len", "=", "seq_len", ")", "\n", "self", ".", "confusion_matrix", "=", "ConfusionMatrix", "(", "\n", "vocab", "=", "vocab", ",", "\n", "print_ratio", "=", "print_ratio", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.ConfusionMatrixMetric.evaluate": [[332, 384], ["target.to.to.to", "isinstance", "TypeError", "isinstance", "TypeError", "TypeError", "pred.argmax.argmax.dim", "target.to.to.dim", "zip", "isinstance", "torch.numel", "torch.numel", "RuntimeError", "pred.argmax.argmax.dim", "pred.argmax.argmax.argmax", "RuntimeError", "target.to.to.dim", "pred.argmax.argmax.tolist", "target.to.to.tolist", "seq_len.tolist", "int", "metrics.ConfusionMatrixMetric.confusion_matrix.add_pred_target", "target.to.to.dim", "zip", "metrics.ConfusionMatrixMetric.confusion_matrix.add_pred_target", "target.to.to.dim", "warnings.warn", "pred.argmax.argmax.tolist", "target.to.to.tolist", "metrics.ConfusionMatrixMetric.confusion_matrix.add_pred_target", "pred.argmax.argmax.tolist", "target.to.to.tolist", "utils._get_func_signature", "type", "utils._get_func_signature", "type", "utils._get_func_signature", "type", "target.to.to.dim", "utils._get_func_signature", "torch.numel", "torch.numel", "utils._get_func_signature", "pred.argmax.argmax.size", "pred.argmax.argmax.size", "target.to.to.size", "pred.argmax.argmax.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.add_pred_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.add_pred_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.add_pred_target", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "evaluate", "(", "self", ",", "pred", ",", "target", ",", "seq_len", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        evaluate\u51fd\u6570\u5c06\u9488\u5bf9\u4e00\u4e2a\u6279\u6b21\u7684\u9884\u6d4b\u7ed3\u679c\u505a\u8bc4\u4ef7\u6307\u6807\u7684\u7d2f\u8ba1\n        \n        :param torch.Tensor pred: \u9884\u6d4b\u7684tensor, tensor\u7684\u5f62\u72b6\u53ef\u4ee5\u662ftorch.Size([B,]), torch.Size([B, n_classes]),\n            torch.Size([B, max_len]), \u6216\u8005torch.Size([B, max_len, n_classes])\n        :param torch.Tensor target: \u771f\u5b9e\u503c\u7684tensor, tensor\u7684\u5f62\u72b6\u53ef\u4ee5\u662fElement's can be: torch.Size([B,]),\n            torch.Size([B,]), torch.Size([B, max_len]), \u6216\u8005torch.Size([B, max_len])\n        :param torch.Tensor seq_len: \u5e8f\u5217\u957f\u5ea6\u6807\u8bb0, \u6807\u8bb0\u7684\u5f62\u72b6\u53ef\u4ee5\u662fNone, torch.Size([B]), \u6216\u8005torch.Size([B]).\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "pred", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "f\"`pred` in {_get_func_signature(self.evaluate)} must be torch.Tensor,\"", "\n", "f\"got {type(pred)}.\"", ")", "\n", "", "if", "not", "isinstance", "(", "target", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "f\"`target` in {_get_func_signature(self.evaluate)} must be torch.Tensor,\"", "\n", "f\"got {type(target)}.\"", ")", "\n", "\n", "", "if", "seq_len", "is", "not", "None", "and", "not", "isinstance", "(", "seq_len", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "f\"`seq_lens` in {_get_func_signature(self.evaluate)} must be torch.Tensor,\"", "\n", "f\"got {type(seq_len)}.\"", ")", "\n", "\n", "", "if", "pred", ".", "dim", "(", ")", "==", "target", ".", "dim", "(", ")", ":", "\n", "            ", "if", "torch", ".", "numel", "(", "pred", ")", "!=", "torch", ".", "numel", "(", "target", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"In {_get_func_signature(self.evaluate)}, when pred have same dimensions with target, they should have same element numbers. while target have \"", "\n", "f\"element numbers:{torch.numel(target)}, pred have element numbers: {torch.numel(pred)}\"", ")", "\n", "\n", "", "pass", "\n", "", "elif", "pred", ".", "dim", "(", ")", "==", "target", ".", "dim", "(", ")", "+", "1", ":", "\n", "            ", "pred", "=", "pred", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "if", "seq_len", "is", "None", "and", "target", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"You are not passing `seq_len` to exclude pad.\"", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "f\"In {_get_func_signature(self.evaluate)}, when pred have \"", "\n", "f\"size:{pred.size()}, target should have size: {pred.size()} or \"", "\n", "f\"{pred.size()[:-1]}, got {target.size()}.\"", ")", "\n", "\n", "", "target", "=", "target", ".", "to", "(", "pred", ")", "\n", "if", "seq_len", "is", "not", "None", "and", "target", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "for", "p", ",", "t", ",", "l", "in", "zip", "(", "pred", ".", "tolist", "(", ")", ",", "target", ".", "tolist", "(", ")", ",", "\n", "seq_len", ".", "tolist", "(", ")", ")", ":", "\n", "                ", "l", "=", "int", "(", "l", ")", "\n", "self", ".", "confusion_matrix", ".", "add_pred_target", "(", "p", "[", ":", "l", "]", ",", "t", "[", ":", "l", "]", ")", "\n", "", "", "elif", "target", ".", "dim", "(", ")", ">", "1", ":", "#\u5bf9\u4e8e\u6ca1\u6709\u4f20\u5165seq_len\uff0c\u4f46\u662f\u53c8\u662f\u9ad8\u7ef4\u7684target\uff0c\u6309\u5168\u957f\u8f93\u51fa", "\n", "            ", "for", "p", ",", "t", "in", "zip", "(", "pred", ".", "tolist", "(", ")", ",", "target", ".", "tolist", "(", ")", ")", ":", "\n", "                ", "self", ".", "confusion_matrix", ".", "add_pred_target", "(", "p", ",", "t", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "confusion_matrix", ".", "add_pred_target", "(", "pred", ".", "tolist", "(", ")", ",", "\n", "target", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.ConfusionMatrixMetric.get_metric": [[385, 395], ["copy.deepcopy", "metrics.ConfusionMatrixMetric.confusion_matrix.clear"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.clear"], ["", "", "def", "get_metric", "(", "self", ",", "reset", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        get_metric\u51fd\u6570\u5c06\u6839\u636eevaluate\u51fd\u6570\u7d2f\u8ba1\u7684\u8bc4\u4ef7\u6307\u6807\u7edf\u8ba1\u91cf\u6765\u8ba1\u7b97\u6700\u7ec8\u7684\u8bc4\u4ef7\u7ed3\u679c.\n        :param bool reset: \u5728\u8c03\u7528\u5b8cget_metric\u540e\u662f\u5426\u6e05\u7a7a\u8bc4\u4ef7\u6307\u6807\u7edf\u8ba1\u91cf.\n        :return dict evaluate_result: {\"confusion_matrix\": ConfusionMatrix}\n        \"\"\"", "\n", "confusion", "=", "{", "'confusion_matrix'", ":", "deepcopy", "(", "self", ".", "confusion_matrix", ")", "}", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "confusion_matrix", ".", "clear", "(", ")", "\n", "", "return", "confusion", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.AccuracyMetric.__init__": [[405, 419], ["metrics.MetricBase.__init__", "metrics.AccuracyMetric._init_param_map"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map"], ["def", "__init__", "(", "self", ",", "pred", "=", "None", ",", "target", "=", "None", ",", "seq_len", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param pred: \u53c2\u6570\u6620\u5c04\u8868\u4e2d `pred` \u7684\u6620\u5c04\u5173\u7cfb\uff0cNone\u8868\u793a\u6620\u5c04\u5173\u7cfb\u4e3a `pred` -> `pred`\n        :param target: \u53c2\u6570\u6620\u5c04\u8868\u4e2d `target` \u7684\u6620\u5c04\u5173\u7cfb\uff0cNone\u8868\u793a\u6620\u5c04\u5173\u7cfb\u4e3a `target` -> `target`\n        :param seq_len: \u53c2\u6570\u6620\u5c04\u8868\u4e2d `seq_len` \u7684\u6620\u5c04\u5173\u7cfb\uff0cNone\u8868\u793a\u6620\u5c04\u5173\u7cfb\u4e3a `seq_len` -> `seq_len`\n        \"\"\"", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_init_param_map", "(", "pred", "=", "pred", ",", "target", "=", "target", ",", "seq_len", "=", "seq_len", ")", "\n", "\n", "self", ".", "total", "=", "0", "\n", "self", ".", "acc_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.AccuracyMetric.evaluate": [[420, 472], ["target.to.to.to", "isinstance", "TypeError", "isinstance", "TypeError", "TypeError", "target.to.to.size", "utils.seq_len_to_mask", "pred.argmax.argmax.dim", "target.to.to.dim", "torch.sum().item", "torch.sum().item", "torch.sum().item", "numpy.prod", "isinstance", "target.to.to.dim", "torch.numel", "torch.numel", "RuntimeError", "pred.argmax.argmax.dim", "pred.argmax.argmax.argmax", "RuntimeError", "list", "target.to.to.dim", "warnings.warn", "torch.sum", "torch.sum", "torch.sum", "pred.argmax.argmax.size", "utils._get_func_signature", "type", "utils._get_func_signature", "type", "utils._get_func_signature", "type", "target.to.to.dim", "torch.eq().masked_fill", "torch.eq", "utils._get_func_signature", "torch.numel", "torch.numel", "utils._get_func_signature", "pred.argmax.argmax.size", "pred.argmax.argmax.size", "target.to.to.size", "utils.seq_len_to_mask.eq", "pred.argmax.argmax.size", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "evaluate", "(", "self", ",", "pred", ",", "target", ",", "seq_len", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        evaluate\u51fd\u6570\u5c06\u9488\u5bf9\u4e00\u4e2a\u6279\u6b21\u7684\u9884\u6d4b\u7ed3\u679c\u505a\u8bc4\u4ef7\u6307\u6807\u7684\u7d2f\u8ba1\n\n        :param torch.Tensor pred: \u9884\u6d4b\u7684tensor, tensor\u7684\u5f62\u72b6\u53ef\u4ee5\u662ftorch.Size([B,]), torch.Size([B, n_classes]),\n                torch.Size([B, max_len]), \u6216\u8005torch.Size([B, max_len, n_classes])\n        :param torch.Tensor target: \u771f\u5b9e\u503c\u7684tensor, tensor\u7684\u5f62\u72b6\u53ef\u4ee5\u662fElement's can be: torch.Size([B,]),\n                torch.Size([B,]), torch.Size([B, max_len]), \u6216\u8005torch.Size([B, max_len])\n        :param torch.Tensor seq_len: \u5e8f\u5217\u957f\u5ea6\u6807\u8bb0, \u6807\u8bb0\u7684\u5f62\u72b6\u53ef\u4ee5\u662fNone, None, torch.Size([B]), \u6216\u8005torch.Size([B]).\n                \u5982\u679cmask\u4e5f\u88ab\u4f20\u8fdb\u6765\u7684\u8bddseq_len\u4f1a\u88ab\u5ffd\u7565.\n\n        \"\"\"", "\n", "# TODO \u8fd9\u91cc\u62a5\u9519\u9700\u8981\u66f4\u6539\uff0c\u56e0\u4e3apred\u662f\u5565\u7528\u6237\u5e76\u4e0d\u77e5\u9053\u3002\u9700\u8981\u544a\u77e5\u7528\u6237\u771f\u5b9e\u7684value", "\n", "if", "not", "isinstance", "(", "pred", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"`pred` in {_get_func_signature(self.evaluate)} must be torch.Tensor,\"", "\n", "f\"got {type(pred)}.\"", ")", "\n", "", "if", "not", "isinstance", "(", "target", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"`target` in {_get_func_signature(self.evaluate)} must be torch.Tensor,\"", "\n", "f\"got {type(target)}.\"", ")", "\n", "\n", "", "if", "seq_len", "is", "not", "None", "and", "not", "isinstance", "(", "seq_len", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"`seq_lens` in {_get_func_signature(self.evaluate)} must be torch.Tensor,\"", "\n", "f\"got {type(seq_len)}.\"", ")", "\n", "\n", "", "if", "seq_len", "is", "not", "None", "and", "target", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "max_len", "=", "target", ".", "size", "(", "1", ")", "\n", "masks", "=", "seq_len_to_mask", "(", "seq_len", "=", "seq_len", ",", "max_len", "=", "max_len", ")", "\n", "", "else", ":", "\n", "            ", "masks", "=", "None", "\n", "\n", "", "if", "pred", ".", "dim", "(", ")", "==", "target", ".", "dim", "(", ")", ":", "\n", "            ", "if", "torch", ".", "numel", "(", "pred", ")", "!=", "torch", ".", "numel", "(", "target", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"In {_get_func_signature(self.evaluate)}, when pred have same dimensions with target, they should have same element numbers. while target have \"", "\n", "f\"element numbers:{torch.numel(target)}, pred have element numbers: {torch.numel(pred)}\"", ")", "\n", "\n", "", "pass", "\n", "", "elif", "pred", ".", "dim", "(", ")", "==", "target", ".", "dim", "(", ")", "+", "1", ":", "\n", "            ", "pred", "=", "pred", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "if", "seq_len", "is", "None", "and", "target", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"You are not passing `seq_len` to exclude pad when calculate accuracy.\"", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"In {_get_func_signature(self.evaluate)}, when pred have \"", "\n", "f\"size:{pred.size()}, target should have size: {pred.size()} or \"", "\n", "f\"{pred.size()[:-1]}, got {target.size()}.\"", ")", "\n", "\n", "", "target", "=", "target", ".", "to", "(", "pred", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "self", ".", "acc_count", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred", ",", "target", ")", ".", "masked_fill", "(", "masks", ".", "eq", "(", "False", ")", ",", "0", ")", ")", ".", "item", "(", ")", "\n", "self", ".", "total", "+=", "torch", ".", "sum", "(", "masks", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "acc_count", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred", ",", "target", ")", ")", ".", "item", "(", ")", "\n", "self", ".", "total", "+=", "np", ".", "prod", "(", "list", "(", "pred", ".", "size", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.AccuracyMetric.get_metric": [[473, 485], ["round", "float"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "", "def", "get_metric", "(", "self", ",", "reset", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        get_metric\u51fd\u6570\u5c06\u6839\u636eevaluate\u51fd\u6570\u7d2f\u8ba1\u7684\u8bc4\u4ef7\u6307\u6807\u7edf\u8ba1\u91cf\u6765\u8ba1\u7b97\u6700\u7ec8\u7684\u8bc4\u4ef7\u7ed3\u679c.\n\n        :param bool reset: \u5728\u8c03\u7528\u5b8cget_metric\u540e\u662f\u5426\u6e05\u7a7a\u8bc4\u4ef7\u6307\u6807\u7edf\u8ba1\u91cf.\n        :return dict evaluate_result: {\"acc\": float}\n        \"\"\"", "\n", "evaluate_result", "=", "{", "'acc'", ":", "round", "(", "float", "(", "self", ".", "acc_count", ")", "/", "(", "self", ".", "total", "+", "1e-12", ")", ",", "6", ")", "}", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "acc_count", "=", "0", "\n", "self", ".", "total", "=", "0", "\n", "", "return", "evaluate_result", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.ClassifyFPreRecMetric.__init__": [[512, 544], ["metrics.MetricBase.__init__", "metrics.ClassifyFPreRecMetric._init_param_map", "ValueError", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "isinstance", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map"], ["def", "__init__", "(", "self", ",", "tag_vocab", "=", "None", ",", "pred", "=", "None", ",", "target", "=", "None", ",", "seq_len", "=", "None", ",", "ignore_labels", "=", "None", ",", "\n", "only_gross", "=", "True", ",", "f_type", "=", "'micro'", ",", "beta", "=", "1", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param tag_vocab: \u6807\u7b7e\u7684 :class:`~fastNLP.Vocabulary` . \u9ed8\u8ba4\u503c\u4e3aNone\u3002\u82e5\u4e3aNone\u5219\u4f7f\u7528\u6570\u5b57\u6765\u4f5c\u4e3a\u6807\u7b7e\u5185\u5bb9\uff0c\u5426\u5219\u4f7f\u7528vocab\u6765\u4f5c\u4e3a\u6807\u7b7e\u5185\u5bb9\u3002\n        :param str pred: \u7528\u8be5key\u5728evaluate()\u65f6\u4ece\u4f20\u5165dict\u4e2d\u53d6\u51faprediction\u6570\u636e\u3002 \u4e3aNone\uff0c\u5219\u4f7f\u7528 `pred` \u53d6\u6570\u636e\n        :param str target: \u7528\u8be5key\u5728evaluate()\u65f6\u4ece\u4f20\u5165dict\u4e2d\u53d6\u51fatarget\u6570\u636e\u3002 \u4e3aNone\uff0c\u5219\u4f7f\u7528 `target` \u53d6\u6570\u636e\n        :param str seq_len: \u7528\u8be5key\u5728evaluate()\u65f6\u4ece\u4f20\u5165dict\u4e2d\u53d6\u51fasequence length\u6570\u636e\u3002\u4e3aNone\uff0c\u5219\u4f7f\u7528 `seq_len` \u53d6\u6570\u636e\u3002\n        :param list ignore_labels: str \u7ec4\u6210\u7684list. \u8fd9\u4e2alist\u4e2d\u7684class\u4e0d\u4f1a\u88ab\u7528\u4e8e\u8ba1\u7b97\u3002\u4f8b\u5982\u5728POS tagging\u65f6\u4f20\u5165['NN']\uff0c\u5219\u4e0d\u4f1a\u8ba1\u7b97'NN'\u4e2alabel\n        :param bool only_gross: \u662f\u5426\u53ea\u8ba1\u7b97\u603b\u7684f1, precision, recall\u7684\u503c\uff1b\u5982\u679c\u4e3aFalse\uff0c\u4e0d\u4ec5\u8fd4\u56de\u603b\u7684f1, pre, rec, \u8fd8\u4f1a\u8fd4\u56de\u6bcf\u4e2alabel\u7684f1, pre, rec\n        :param str f_type: `micro` \u6216 `macro` . `micro` :\u901a\u8fc7\u5148\u8ba1\u7b97\u603b\u4f53\u7684TP\uff0cFN\u548cFP\u7684\u6570\u91cf\uff0c\u518d\u8ba1\u7b97f, precision, recall; `macro` : \u5206\u5e03\u8ba1\u7b97\u6bcf\u4e2a\u7c7b\u522b\u7684f, precision, recall\uff0c\u7136\u540e\u505a\u5e73\u5747\uff08\u5404\u7c7b\u522bf\u7684\u6743\u91cd\u76f8\u540c\uff09\n        :param float beta: f_beta\u5206\u6570\uff0c :math:`f_{beta} = \\frac{(1 + {beta}^{2})*(pre*rec)}{({beta}^{2}*pre + rec)}` . \u5e38\u7528\u4e3a `beta=0.5, 1, 2` \u82e5\u4e3a0.5\u5219\u7cbe\u786e\u7387\u7684\u6743\u91cd\u9ad8\u4e8e\u53ec\u56de\u7387\uff1b\u82e5\u4e3a1\uff0c\u5219\u4e24\u8005\u5e73\u7b49\uff1b\u82e5\u4e3a2\uff0c\u5219\u53ec\u56de\u7387\u6743\u91cd\u9ad8\u4e8e\u7cbe\u786e\u7387\u3002\n        \"\"\"", "\n", "\n", "if", "tag_vocab", ":", "\n", "            ", "if", "not", "isinstance", "(", "tag_vocab", ",", "Vocabulary", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"tag_vocab can only be fastNLP.Vocabulary, not {}.\"", ".", "format", "(", "type", "(", "tag_vocab", ")", ")", ")", "\n", "", "", "if", "f_type", "not", "in", "(", "'micro'", ",", "'macro'", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"f_type only supports `micro` or `macro`', got {}.\"", ".", "format", "(", "f_type", ")", ")", "\n", "\n", "", "self", ".", "ignore_labels", "=", "ignore_labels", "\n", "self", ".", "f_type", "=", "f_type", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "beta_square", "=", "self", ".", "beta", "**", "2", "\n", "self", ".", "only_gross", "=", "only_gross", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_param_map", "(", "pred", "=", "pred", ",", "target", "=", "target", ",", "seq_len", "=", "seq_len", ")", "\n", "\n", "self", ".", "tag_vocab", "=", "tag_vocab", "\n", "\n", "self", ".", "_tp", ",", "self", ".", "_fp", ",", "self", ".", "_fn", "=", "defaultdict", "(", "int", ")", ",", "defaultdict", "(", "int", ")", ",", "defaultdict", "(", "int", ")", "\n", "# tp: truth=T, classify=T; fp: truth=T, classify=F; dm_util: truth=F, classify=T", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.ClassifyFPreRecMetric.evaluate": [[546, 601], ["torch.ones_like().long().to.eq", "target.masked_select.masked_select.to", "target.masked_select.masked_select.masked_select", "pred.argmax.argmax.masked_select", "set", "isinstance", "TypeError", "isinstance", "TypeError", "TypeError", "target.masked_select.masked_select.size", "utils.seq_len_to_mask", "torch.ones_like().long().to", "pred.argmax.argmax.dim", "target.masked_select.masked_select.dim", "target.masked_select.masked_select.reshape().tolist", "torch.sum().item", "torch.sum().item", "torch.sum().item", "isinstance", "target.masked_select.masked_select.dim", "torch.numel", "torch.numel", "RuntimeError", "pred.argmax.argmax.dim", "pred.argmax.argmax.argmax", "RuntimeError", "torch.ones_like().long", "target.masked_select.masked_select.dim", "warnings.warn", "target.masked_select.masked_select.reshape", "torch.sum", "torch.sum", "torch.sum", "utils._get_func_signature", "type", "utils._get_func_signature", "type", "utils._get_func_signature", "type", "target.masked_select.masked_select.dim", "torch.ones_like", "utils._get_func_signature", "torch.numel", "torch.numel", "utils._get_func_signature", "pred.argmax.argmax.size", "pred.argmax.argmax.size", "target.masked_select.masked_select.size", "pred.argmax.argmax.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "evaluate", "(", "self", ",", "pred", ",", "target", ",", "seq_len", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        evaluate\u51fd\u6570\u5c06\u9488\u5bf9\u4e00\u4e2a\u6279\u6b21\u7684\u9884\u6d4b\u7ed3\u679c\u505a\u8bc4\u4ef7\u6307\u6807\u7684\u7d2f\u8ba1\n\n        :param torch.Tensor pred: \u9884\u6d4b\u7684tensor, tensor\u7684\u5f62\u72b6\u53ef\u4ee5\u662ftorch.Size([B,]), torch.Size([B, n_classes]),\n                torch.Size([B, max_len]), \u6216\u8005torch.Size([B, max_len, n_classes])\n        :param torch.Tensor target: \u771f\u5b9e\u503c\u7684tensor, tensor\u7684\u5f62\u72b6\u53ef\u4ee5\u662fElement's can be: torch.Size([B,]),\n                torch.Size([B,]), torch.Size([B, max_len]), \u6216\u8005torch.Size([B, max_len])\n        :param torch.Tensor seq_len: \u5e8f\u5217\u957f\u5ea6\u6807\u8bb0, \u6807\u8bb0\u7684\u5f62\u72b6\u53ef\u4ee5\u662fNone, None, torch.Size([B]), \u6216\u8005torch.Size([B]).\n                \u5982\u679cmask\u4e5f\u88ab\u4f20\u8fdb\u6765\u7684\u8bddseq_len\u4f1a\u88ab\u5ffd\u7565.\n\n        \"\"\"", "\n", "# TODO \u8fd9\u91cc\u62a5\u9519\u9700\u8981\u66f4\u6539\uff0c\u56e0\u4e3apred\u662f\u5565\u7528\u6237\u5e76\u4e0d\u77e5\u9053\u3002\u9700\u8981\u544a\u77e5\u7528\u6237\u771f\u5b9e\u7684value", "\n", "if", "not", "isinstance", "(", "pred", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"`pred` in {_get_func_signature(self.evaluate)} must be torch.Tensor,\"", "\n", "f\"got {type(pred)}.\"", ")", "\n", "", "if", "not", "isinstance", "(", "target", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"`target` in {_get_func_signature(self.evaluate)} must be torch.Tensor,\"", "\n", "f\"got {type(target)}.\"", ")", "\n", "\n", "", "if", "seq_len", "is", "not", "None", "and", "not", "isinstance", "(", "seq_len", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"`seq_lens` in {_get_func_signature(self.evaluate)} must be torch.Tensor,\"", "\n", "f\"got {type(seq_len)}.\"", ")", "\n", "\n", "", "if", "seq_len", "is", "not", "None", "and", "target", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "max_len", "=", "target", ".", "size", "(", "1", ")", "\n", "masks", "=", "seq_len_to_mask", "(", "seq_len", "=", "seq_len", ",", "max_len", "=", "max_len", ")", "\n", "", "else", ":", "\n", "            ", "masks", "=", "torch", ".", "ones_like", "(", "target", ")", ".", "long", "(", ")", ".", "to", "(", "target", ".", "device", ")", "\n", "\n", "", "masks", "=", "masks", ".", "eq", "(", "1", ")", "\n", "\n", "if", "pred", ".", "dim", "(", ")", "==", "target", ".", "dim", "(", ")", ":", "\n", "            ", "if", "torch", ".", "numel", "(", "pred", ")", "!=", "torch", ".", "numel", "(", "target", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"In {_get_func_signature(self.evaluate)}, when pred have same dimensions with target, they should have same element numbers. while target have \"", "\n", "f\"element numbers:{torch.numel(target)}, pred have element numbers: {torch.numel(pred)}\"", ")", "\n", "\n", "", "pass", "\n", "", "elif", "pred", ".", "dim", "(", ")", "==", "target", ".", "dim", "(", ")", "+", "1", ":", "\n", "            ", "pred", "=", "pred", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "if", "seq_len", "is", "None", "and", "target", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"You are not passing `seq_len` to exclude pad when calculate accuracy.\"", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"In {_get_func_signature(self.evaluate)}, when pred have \"", "\n", "f\"size:{pred.size()}, target should have size: {pred.size()} or \"", "\n", "f\"{pred.size()[:-1]}, got {target.size()}.\"", ")", "\n", "\n", "", "target", "=", "target", ".", "to", "(", "pred", ")", "\n", "target", "=", "target", ".", "masked_select", "(", "masks", ")", "\n", "pred", "=", "pred", ".", "masked_select", "(", "masks", ")", "\n", "target_idxes", "=", "set", "(", "target", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ")", "\n", "for", "target_idx", "in", "target_idxes", ":", "\n", "            ", "self", ".", "_tp", "[", "target_idx", "]", "+=", "torch", ".", "sum", "(", "(", "pred", "==", "target_idx", ")", ".", "long", "(", ")", ".", "masked_fill", "(", "target", "!=", "target_idx", ",", "0", ")", ")", ".", "item", "(", ")", "\n", "self", ".", "_fp", "[", "target_idx", "]", "+=", "torch", ".", "sum", "(", "(", "pred", "==", "target_idx", ")", ".", "long", "(", ")", ".", "masked_fill", "(", "target", "==", "target_idx", ",", "0", ")", ")", ".", "item", "(", ")", "\n", "self", ".", "_fn", "[", "target_idx", "]", "+=", "torch", ".", "sum", "(", "(", "pred", "!=", "target_idx", ")", ".", "long", "(", ")", ".", "masked_fill", "(", "target", "!=", "target_idx", ",", "0", ")", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.ClassifyFPreRecMetric.get_metric": [[602, 660], ["evaluate_result.items", "set", "set.update", "set.update", "metrics._compute_f_pre_rec", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "round", "metrics.ClassifyFPreRecMetric._fn.keys", "set", "set", "metrics._compute_f_pre_rec", "sum", "sum", "sum", "metrics.ClassifyFPreRecMetric._fp.keys", "metrics.ClassifyFPreRecMetric._tp.keys", "metrics.ClassifyFPreRecMetric.tag_vocab.to_word", "int", "len", "len", "len", "metrics.ClassifyFPreRecMetric._tp.values", "metrics.ClassifyFPreRecMetric._fn.values", "metrics.ClassifyFPreRecMetric._fp.values"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._compute_f_pre_rec", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._compute_f_pre_rec", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "", "def", "get_metric", "(", "self", ",", "reset", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        get_metric\u51fd\u6570\u5c06\u6839\u636eevaluate\u51fd\u6570\u7d2f\u8ba1\u7684\u8bc4\u4ef7\u6307\u6807\u7edf\u8ba1\u91cf\u6765\u8ba1\u7b97\u6700\u7ec8\u7684\u8bc4\u4ef7\u7ed3\u679c.\n\n        :param bool reset: \u5728\u8c03\u7528\u5b8cget_metric\u540e\u662f\u5426\u6e05\u7a7a\u8bc4\u4ef7\u6307\u6807\u7edf\u8ba1\u91cf.\n        :return dict evaluate_result: {\"acc\": float}\n        \"\"\"", "\n", "evaluate_result", "=", "{", "}", "\n", "if", "not", "self", ".", "only_gross", "or", "self", ".", "f_type", "==", "'macro'", ":", "\n", "            ", "tags", "=", "set", "(", "self", ".", "_fn", ".", "keys", "(", ")", ")", "\n", "tags", ".", "update", "(", "set", "(", "self", ".", "_fp", ".", "keys", "(", ")", ")", ")", "\n", "tags", ".", "update", "(", "set", "(", "self", ".", "_tp", ".", "keys", "(", ")", ")", ")", "\n", "f_sum", "=", "0", "\n", "pre_sum", "=", "0", "\n", "rec_sum", "=", "0", "\n", "for", "tag", "in", "tags", ":", "\n", "                ", "if", "self", ".", "tag_vocab", "is", "not", "None", ":", "\n", "                    ", "tag_name", "=", "self", ".", "tag_vocab", ".", "to_word", "(", "tag", ")", "\n", "", "else", ":", "\n", "                    ", "tag_name", "=", "int", "(", "tag", ")", "\n", "", "tp", "=", "self", ".", "_tp", "[", "tag", "]", "\n", "fn", "=", "self", ".", "_fn", "[", "tag", "]", "\n", "fp", "=", "self", ".", "_fp", "[", "tag", "]", "\n", "f", ",", "pre", ",", "rec", "=", "_compute_f_pre_rec", "(", "self", ".", "beta_square", ",", "tp", ",", "fn", ",", "fp", ")", "\n", "f_sum", "+=", "f", "\n", "pre_sum", "+=", "pre", "\n", "rec_sum", "+=", "rec", "\n", "if", "not", "self", ".", "only_gross", "and", "tag", "!=", "''", ":", "# tag!=''\u9632\u6b62\u65e0tag\u7684\u60c5\u51b5", "\n", "                    ", "f_key", "=", "'f-{}'", ".", "format", "(", "tag_name", ")", "\n", "pre_key", "=", "'pre-{}'", ".", "format", "(", "tag_name", ")", "\n", "rec_key", "=", "'rec-{}'", ".", "format", "(", "tag_name", ")", "\n", "evaluate_result", "[", "f_key", "]", "=", "f", "\n", "evaluate_result", "[", "pre_key", "]", "=", "pre", "\n", "evaluate_result", "[", "rec_key", "]", "=", "rec", "\n", "\n", "", "", "if", "self", ".", "f_type", "==", "'macro'", ":", "\n", "                ", "evaluate_result", "[", "'f'", "]", "=", "f_sum", "/", "len", "(", "tags", ")", "\n", "evaluate_result", "[", "'pre'", "]", "=", "pre_sum", "/", "len", "(", "tags", ")", "\n", "evaluate_result", "[", "'rec'", "]", "=", "rec_sum", "/", "len", "(", "tags", ")", "\n", "\n", "", "", "if", "self", ".", "f_type", "==", "'micro'", ":", "\n", "            ", "f", ",", "pre", ",", "rec", "=", "_compute_f_pre_rec", "(", "self", ".", "beta_square", ",", "\n", "sum", "(", "self", ".", "_tp", ".", "values", "(", ")", ")", ",", "\n", "sum", "(", "self", ".", "_fn", ".", "values", "(", ")", ")", ",", "\n", "sum", "(", "self", ".", "_fp", ".", "values", "(", ")", ")", ")", "\n", "evaluate_result", "[", "'f'", "]", "=", "f", "\n", "evaluate_result", "[", "'pre'", "]", "=", "pre", "\n", "evaluate_result", "[", "'rec'", "]", "=", "rec", "\n", "\n", "", "if", "reset", ":", "\n", "            ", "self", ".", "_tp", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "_fp", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "_fn", "=", "defaultdict", "(", "int", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "evaluate_result", ".", "items", "(", ")", ":", "\n", "            ", "evaluate_result", "[", "key", "]", "=", "round", "(", "value", ",", "6", ")", "\n", "\n", "", "return", "evaluate_result", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.SpanFPreRecMetric.__init__": [[875, 928], ["metrics.MetricBase.__init__", "metrics.SpanFPreRecMetric._init_param_map", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "isinstance", "TypeError", "ValueError", "encoding_type.lower.lower.lower", "metrics._check_tag_vocab_and_encoding_type", "metrics._get_encoding_type_from_tag_vocab", "type", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._check_tag_vocab_and_encoding_type", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._get_encoding_type_from_tag_vocab"], ["def", "__init__", "(", "self", ",", "tag_vocab", ",", "pred", "=", "None", ",", "target", "=", "None", ",", "seq_len", "=", "None", ",", "encoding_type", "=", "None", ",", "ignore_labels", "=", "None", ",", "\n", "only_gross", "=", "True", ",", "f_type", "=", "'micro'", ",", "beta", "=", "1", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param tag_vocab: \u6807\u7b7e\u7684 :class:`~fastNLP.Vocabulary` \u3002\u652f\u6301\u7684\u6807\u7b7e\u4e3a\"B\"(\u6ca1\u6709label)\uff1b\u6216\"B-xxx\"(xxx\u4e3a\u67d0\u79cdlabel\uff0c\u6bd4\u5982POS\u4e2d\u7684NN)\uff0c\n            \u5728\u89e3\u7801\u65f6\uff0c\u4f1a\u5c06\u76f8\u540cxxx\u7684\u8ba4\u4e3a\u662f\u540c\u4e00\u4e2alabel\uff0c\u6bd4\u5982['B-NN', 'E-NN']\u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u4e2a'NN'.\n        :param str pred: \u7528\u8be5key\u5728evaluate()\u65f6\u4ece\u4f20\u5165dict\u4e2d\u53d6\u51faprediction\u6570\u636e\u3002 \u4e3aNone\uff0c\u5219\u4f7f\u7528 `pred` \u53d6\u6570\u636e\n        :param str target: \u7528\u8be5key\u5728evaluate()\u65f6\u4ece\u4f20\u5165dict\u4e2d\u53d6\u51fatarget\u6570\u636e\u3002 \u4e3aNone\uff0c\u5219\u4f7f\u7528 `target` \u53d6\u6570\u636e\n        :param str seq_len: \u7528\u8be5key\u5728evaluate()\u65f6\u4ece\u4f20\u5165dict\u4e2d\u53d6\u51fasequence length\u6570\u636e\u3002\u4e3aNone\uff0c\u5219\u4f7f\u7528 `seq_len` \u53d6\u6570\u636e\u3002\n        :param str encoding_type: \u76ee\u524d\u652f\u6301bio, bmes, bmeso, bioes\u3002\u9ed8\u8ba4\u4e3aNone\uff0c\u901a\u8fc7tag_vocab\u81ea\u52a8\u5224\u65ad.\n        :param list ignore_labels: str \u7ec4\u6210\u7684list. \u8fd9\u4e2alist\u4e2d\u7684class\u4e0d\u4f1a\u88ab\u7528\u4e8e\u8ba1\u7b97\u3002\u4f8b\u5982\u5728POS tagging\u65f6\u4f20\u5165['NN']\uff0c\u5219\u4e0d\u4f1a\u8ba1\u7b97'NN'\u4e2alabel\n        :param bool only_gross: \u662f\u5426\u53ea\u8ba1\u7b97\u603b\u7684f1, precision, recall\u7684\u503c\uff1b\u5982\u679c\u4e3aFalse\uff0c\u4e0d\u4ec5\u8fd4\u56de\u603b\u7684f1, pre, rec, \u8fd8\u4f1a\u8fd4\u56de\u6bcf\u4e2alabel\u7684f1, pre, rec\n        :param str f_type: `micro` \u6216 `macro` . `micro` :\u901a\u8fc7\u5148\u8ba1\u7b97\u603b\u4f53\u7684TP\uff0cFN\u548cFP\u7684\u6570\u91cf\uff0c\u518d\u8ba1\u7b97f, precision, recall; `macro` : \u5206\u5e03\u8ba1\u7b97\u6bcf\u4e2a\u7c7b\u522b\u7684f, precision, recall\uff0c\u7136\u540e\u505a\u5e73\u5747\uff08\u5404\u7c7b\u522bf\u7684\u6743\u91cd\u76f8\u540c\uff09\n        :param float beta: f_beta\u5206\u6570\uff0c :math:`f_{beta} = \\frac{(1 + {beta}^{2})*(pre*rec)}{({beta}^{2}*pre + rec)}` . \u5e38\u7528\u4e3a `beta=0.5, 1, 2` \u82e5\u4e3a0.5\u5219\u7cbe\u786e\u7387\u7684\u6743\u91cd\u9ad8\u4e8e\u53ec\u56de\u7387\uff1b\u82e5\u4e3a1\uff0c\u5219\u4e24\u8005\u5e73\u7b49\uff1b\u82e5\u4e3a2\uff0c\u5219\u53ec\u56de\u7387\u6743\u91cd\u9ad8\u4e8e\u7cbe\u786e\u7387\u3002\n        \"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "tag_vocab", ",", "Vocabulary", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"tag_vocab can only be fastNLP.Vocabulary, not {}.\"", ".", "format", "(", "type", "(", "tag_vocab", ")", ")", ")", "\n", "", "if", "f_type", "not", "in", "(", "'micro'", ",", "'macro'", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"f_type only supports `micro` or `macro`', got {}.\"", ".", "format", "(", "f_type", ")", ")", "\n", "\n", "", "if", "encoding_type", ":", "\n", "            ", "encoding_type", "=", "encoding_type", ".", "lower", "(", ")", "\n", "_check_tag_vocab_and_encoding_type", "(", "tag_vocab", ",", "encoding_type", ")", "\n", "self", ".", "encoding_type", "=", "encoding_type", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoding_type", "=", "_get_encoding_type_from_tag_vocab", "(", "tag_vocab", ")", "\n", "\n", "", "if", "self", ".", "encoding_type", "==", "'bmes'", ":", "\n", "            ", "self", ".", "tag_to_span_func", "=", "_bmes_tag_to_spans", "\n", "", "elif", "self", ".", "encoding_type", "==", "'bio'", ":", "\n", "            ", "self", ".", "tag_to_span_func", "=", "_bio_tag_to_spans", "\n", "", "elif", "self", ".", "encoding_type", "==", "'bmeso'", ":", "\n", "            ", "self", ".", "tag_to_span_func", "=", "_bmeso_tag_to_spans", "\n", "", "elif", "self", ".", "encoding_type", "==", "'bioes'", ":", "\n", "            ", "self", ".", "tag_to_span_func", "=", "_bioes_tag_to_spans", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only support 'bio', 'bmes', 'bmeso', 'bioes' type.\"", ")", "\n", "\n", "", "self", ".", "ignore_labels", "=", "ignore_labels", "\n", "self", ".", "f_type", "=", "f_type", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "beta_square", "=", "self", ".", "beta", "**", "2", "\n", "self", ".", "only_gross", "=", "only_gross", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_param_map", "(", "pred", "=", "pred", ",", "target", "=", "target", ",", "seq_len", "=", "seq_len", ")", "\n", "\n", "self", ".", "tag_vocab", "=", "tag_vocab", "\n", "\n", "self", ".", "_true_positives", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "_false_positives", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "_false_negatives", "=", "defaultdict", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.SpanFPreRecMetric.evaluate": [[929, 982], ["pred.argmax.argmax.size", "pred.argmax.argmax.tolist", "target.tolist.tolist.tolist", "range", "isinstance", "TypeError", "isinstance", "TypeError", "isinstance", "TypeError", "metrics.SpanFPreRecMetric.tag_to_span_func", "metrics.SpanFPreRecMetric.tag_to_span_func", "pred.argmax.argmax.size", "target.tolist.tolist.size", "len", "pred.argmax.argmax.size", "pred.argmax.argmax.argmax", "RuntimeError", "metrics.SpanFPreRecMetric.tag_vocab.to_word", "metrics.SpanFPreRecMetric.tag_vocab.to_word", "target.tolist.tolist.size", "len", "len", "ValueError", "int", "int", "metrics.SpanFPreRecMetric.remove", "utils._get_func_signature", "type", "utils._get_func_signature", "type", "utils._get_func_signature", "type", "pred.argmax.argmax.size", "len", "target.tolist.tolist.size", "target.tolist.tolist.size", "utils._get_func_signature", "pred.argmax.argmax.size", "pred.argmax.argmax.size", "target.tolist.tolist.size", "pred.argmax.argmax.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_word", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "evaluate", "(", "self", ",", "pred", ",", "target", ",", "seq_len", ")", ":", "\n", "        ", "r\"\"\"evaluate\u51fd\u6570\u5c06\u9488\u5bf9\u4e00\u4e2a\u6279\u6b21\u7684\u9884\u6d4b\u7ed3\u679c\u505a\u8bc4\u4ef7\u6307\u6807\u7684\u7d2f\u8ba1\n\n        :param pred: [batch, seq_len] \u6216\u8005 [batch, seq_len, len(tag_vocab)], \u9884\u6d4b\u7684\u7ed3\u679c\n        :param target: [batch, seq_len], \u771f\u5b9e\u503c\n        :param seq_len: [batch] \u6587\u672c\u957f\u5ea6\u6807\u8bb0\n        :return:\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "pred", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"`pred` in {_get_func_signature(self.evaluate)} must be torch.Tensor,\"", "\n", "f\"got {type(pred)}.\"", ")", "\n", "", "if", "not", "isinstance", "(", "target", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"`target` in {_get_func_signature(self.evaluate)} must be torch.Tensor,\"", "\n", "f\"got {type(target)}.\"", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "seq_len", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"`seq_lens` in {_get_func_signature(self.evaluate)} must be torch.Tensor,\"", "\n", "f\"got {type(seq_len)}.\"", ")", "\n", "\n", "", "if", "pred", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "and", "len", "(", "target", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "            ", "pass", "\n", "", "elif", "len", "(", "pred", ".", "size", "(", ")", ")", "==", "len", "(", "target", ".", "size", "(", ")", ")", "+", "1", "and", "len", "(", "target", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "            ", "num_classes", "=", "pred", ".", "size", "(", "-", "1", ")", "\n", "pred", "=", "pred", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "if", "(", "target", ">=", "num_classes", ")", ".", "any", "(", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"A gold label passed to SpanBasedF1Metric contains an \"", "\n", "\"id >= {}, the number of classes.\"", ".", "format", "(", "num_classes", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"In {_get_func_signature(self.evaluate)}, when pred have \"", "\n", "f\"size:{pred.size()}, target should have size: {pred.size()} or \"", "\n", "f\"{pred.size()[:-1]}, got {target.size()}.\"", ")", "\n", "\n", "", "batch_size", "=", "pred", ".", "size", "(", "0", ")", "\n", "pred", "=", "pred", ".", "tolist", "(", ")", "\n", "target", "=", "target", ".", "tolist", "(", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "pred_tags", "=", "pred", "[", "i", "]", "[", ":", "int", "(", "seq_len", "[", "i", "]", ")", "]", "\n", "gold_tags", "=", "target", "[", "i", "]", "[", ":", "int", "(", "seq_len", "[", "i", "]", ")", "]", "\n", "\n", "pred_str_tags", "=", "[", "self", ".", "tag_vocab", ".", "to_word", "(", "tag", ")", "for", "tag", "in", "pred_tags", "]", "\n", "gold_str_tags", "=", "[", "self", ".", "tag_vocab", ".", "to_word", "(", "tag", ")", "for", "tag", "in", "gold_tags", "]", "\n", "\n", "pred_spans", "=", "self", ".", "tag_to_span_func", "(", "pred_str_tags", ",", "ignore_labels", "=", "self", ".", "ignore_labels", ")", "\n", "gold_spans", "=", "self", ".", "tag_to_span_func", "(", "gold_str_tags", ",", "ignore_labels", "=", "self", ".", "ignore_labels", ")", "\n", "\n", "for", "span", "in", "pred_spans", ":", "\n", "                ", "if", "span", "in", "gold_spans", ":", "\n", "                    ", "self", ".", "_true_positives", "[", "span", "[", "0", "]", "]", "+=", "1", "\n", "gold_spans", ".", "remove", "(", "span", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_false_positives", "[", "span", "[", "0", "]", "]", "+=", "1", "\n", "", "", "for", "span", "in", "gold_spans", ":", "\n", "                ", "self", ".", "_false_negatives", "[", "span", "[", "0", "]", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.SpanFPreRecMetric.get_metric": [[983, 1032], ["evaluate_result.items", "set", "set.update", "set.update", "metrics._compute_f_pre_rec", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "round", "metrics.SpanFPreRecMetric._false_negatives.keys", "set", "set", "metrics._compute_f_pre_rec", "sum", "sum", "sum", "metrics.SpanFPreRecMetric._false_positives.keys", "metrics.SpanFPreRecMetric._true_positives.keys", "len", "len", "len", "metrics.SpanFPreRecMetric._true_positives.values", "metrics.SpanFPreRecMetric._false_negatives.values", "metrics.SpanFPreRecMetric._false_positives.values"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._compute_f_pre_rec", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._compute_f_pre_rec"], ["", "", "", "def", "get_metric", "(", "self", ",", "reset", "=", "True", ")", ":", "\n", "        ", "r\"\"\"get_metric\u51fd\u6570\u5c06\u6839\u636eevaluate\u51fd\u6570\u7d2f\u8ba1\u7684\u8bc4\u4ef7\u6307\u6807\u7edf\u8ba1\u91cf\u6765\u8ba1\u7b97\u6700\u7ec8\u7684\u8bc4\u4ef7\u7ed3\u679c.\"\"\"", "\n", "evaluate_result", "=", "{", "}", "\n", "if", "not", "self", ".", "only_gross", "or", "self", ".", "f_type", "==", "'macro'", ":", "\n", "            ", "tags", "=", "set", "(", "self", ".", "_false_negatives", ".", "keys", "(", ")", ")", "\n", "tags", ".", "update", "(", "set", "(", "self", ".", "_false_positives", ".", "keys", "(", ")", ")", ")", "\n", "tags", ".", "update", "(", "set", "(", "self", ".", "_true_positives", ".", "keys", "(", ")", ")", ")", "\n", "f_sum", "=", "0", "\n", "pre_sum", "=", "0", "\n", "rec_sum", "=", "0", "\n", "for", "tag", "in", "tags", ":", "\n", "                ", "tp", "=", "self", ".", "_true_positives", "[", "tag", "]", "\n", "fn", "=", "self", ".", "_false_negatives", "[", "tag", "]", "\n", "fp", "=", "self", ".", "_false_positives", "[", "tag", "]", "\n", "f", ",", "pre", ",", "rec", "=", "_compute_f_pre_rec", "(", "self", ".", "beta_square", ",", "tp", ",", "fn", ",", "fp", ")", "\n", "f_sum", "+=", "f", "\n", "pre_sum", "+=", "pre", "\n", "rec_sum", "+=", "rec", "\n", "if", "not", "self", ".", "only_gross", "and", "tag", "!=", "''", ":", "# tag!=''\u9632\u6b62\u65e0tag\u7684\u60c5\u51b5", "\n", "                    ", "f_key", "=", "'f-{}'", ".", "format", "(", "tag", ")", "\n", "pre_key", "=", "'pre-{}'", ".", "format", "(", "tag", ")", "\n", "rec_key", "=", "'rec-{}'", ".", "format", "(", "tag", ")", "\n", "evaluate_result", "[", "f_key", "]", "=", "f", "\n", "evaluate_result", "[", "pre_key", "]", "=", "pre", "\n", "evaluate_result", "[", "rec_key", "]", "=", "rec", "\n", "\n", "", "", "if", "self", ".", "f_type", "==", "'macro'", ":", "\n", "                ", "evaluate_result", "[", "'f'", "]", "=", "f_sum", "/", "len", "(", "tags", ")", "\n", "evaluate_result", "[", "'pre'", "]", "=", "pre_sum", "/", "len", "(", "tags", ")", "\n", "evaluate_result", "[", "'rec'", "]", "=", "rec_sum", "/", "len", "(", "tags", ")", "\n", "\n", "", "", "if", "self", ".", "f_type", "==", "'micro'", ":", "\n", "            ", "f", ",", "pre", ",", "rec", "=", "_compute_f_pre_rec", "(", "self", ".", "beta_square", ",", "\n", "sum", "(", "self", ".", "_true_positives", ".", "values", "(", ")", ")", ",", "\n", "sum", "(", "self", ".", "_false_negatives", ".", "values", "(", ")", ")", ",", "\n", "sum", "(", "self", ".", "_false_positives", ".", "values", "(", ")", ")", ")", "\n", "evaluate_result", "[", "'f'", "]", "=", "f", "\n", "evaluate_result", "[", "'pre'", "]", "=", "pre", "\n", "evaluate_result", "[", "'rec'", "]", "=", "rec", "\n", "\n", "", "if", "reset", ":", "\n", "            ", "self", ".", "_true_positives", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "_false_positives", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "_false_negatives", "=", "defaultdict", "(", "int", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "evaluate_result", ".", "items", "(", ")", ":", "\n", "            ", "evaluate_result", "[", "key", "]", "=", "round", "(", "value", ",", "6", ")", "\n", "\n", "", "return", "evaluate_result", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.CMRC2018Metric.__init__": [[1118, 1125], ["metrics.MetricBase.__init__", "metrics.CMRC2018Metric._init_param_map"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map"], ["def", "__init__", "(", "self", ",", "answers", "=", "None", ",", "raw_chars", "=", "None", ",", "context_len", "=", "None", ",", "pred_start", "=", "None", ",", "pred_end", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_param_map", "(", "answers", "=", "answers", ",", "raw_chars", "=", "raw_chars", ",", "context_len", "=", "context_len", ",", "pred_start", "=", "pred_start", ",", "\n", "pred_end", "=", "pred_end", ")", "\n", "self", ".", "em", "=", "0", "\n", "self", ".", "total", "=", "0", "\n", "self", ".", "f1", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.CMRC2018Metric.evaluate": [[1126, 1156], ["enumerate", "zip", "pred_start.dim", "pred_start.size", "utils.seq_len_to_mask().eq", "pred_start.masked_fill_", "pred_end.masked_fill_", "pred_start.max", "pred_start.eq().cumsum().eq", "pred_end.masked_fill_", "zip", "pred_ans.append", "pred_an.strip.strip.strip", "metrics._calc_cmrc2018_f1_score", "metrics._calc_cmrc2018_em_score", "float", "float", "float", "pred_end.argmax", "pred_start_index.flatten().tolist", "pred_end_index.tolist", "utils.seq_len_to_mask", "pred_start.eq().cumsum", "pred_start_index.flatten", "pred_start.eq"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._calc_cmrc2018_f1_score", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._calc_cmrc2018_em_score", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pipe.coreference.flatten"], ["", "def", "evaluate", "(", "self", ",", "answers", ",", "raw_chars", ",", "pred_start", ",", "pred_end", ",", "context_len", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param list[str] answers: \u5982[[\"\u7b54\u68481\", \"\u7b54\u68482\", \"\u7b54\u68483\"], [...], ...]\n        :param list[str] raw_chars: [[\"\u8fd9\", \"\u662f\", ...], [...]]\n        :param tensor pred_start: batch_size x length \u6216 batch_size,\n        :param tensor pred_end: batch_size x length \u6216 batch_size(\u662f\u95ed\u533a\u95f4\uff0c\u5305\u542bend\u4f4d\u7f6e),\n        :param tensor context_len: context\u957f\u5ea6, batch_size\n        :return:\n        \"\"\"", "\n", "if", "pred_start", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "batch_size", ",", "max_len", "=", "pred_start", ".", "size", "(", ")", "\n", "context_mask", "=", "seq_len_to_mask", "(", "context_len", ",", "max_len", "=", "max_len", ")", ".", "eq", "(", "False", ")", "\n", "pred_start", ".", "masked_fill_", "(", "context_mask", ",", "float", "(", "'-inf'", ")", ")", "\n", "pred_end", ".", "masked_fill_", "(", "context_mask", ",", "float", "(", "'-inf'", ")", ")", "\n", "max_pred_start", ",", "pred_start_index", "=", "pred_start", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# batch_size,", "\n", "pred_start_mask", "=", "pred_start", ".", "eq", "(", "max_pred_start", ")", ".", "cumsum", "(", "dim", "=", "-", "1", ")", ".", "eq", "(", "0", ")", "# \u53ea\u80fd\u9884\u6d4b\u8fd9\u4e4b\u540e\u7684\u503c", "\n", "pred_end", ".", "masked_fill_", "(", "pred_start_mask", ",", "float", "(", "'-inf'", ")", ")", "\n", "pred_end_index", "=", "pred_end", ".", "argmax", "(", "dim", "=", "-", "1", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "pred_start_index", "=", "pred_start", "\n", "pred_end_index", "=", "pred_end", "+", "1", "\n", "", "pred_ans", "=", "[", "]", "\n", "for", "index", ",", "(", "start", ",", "end", ")", "in", "enumerate", "(", "zip", "(", "pred_start_index", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ",", "pred_end_index", ".", "tolist", "(", ")", ")", ")", ":", "\n", "            ", "pred_ans", ".", "append", "(", "''", ".", "join", "(", "raw_chars", "[", "index", "]", "[", "start", ":", "end", "]", ")", ")", "\n", "", "for", "answer", ",", "pred_an", "in", "zip", "(", "answers", ",", "pred_ans", ")", ":", "\n", "            ", "pred_an", "=", "pred_an", ".", "strip", "(", ")", "\n", "self", ".", "f1", "+=", "_calc_cmrc2018_f1_score", "(", "answer", ",", "pred_an", ")", "\n", "self", ".", "total", "+=", "1", "\n", "self", ".", "em", "+=", "_calc_cmrc2018_em_score", "(", "answer", ",", "pred_an", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.CMRC2018Metric.get_metric": [[1157, 1164], ["round", "round"], "methods", ["None"], ["", "", "def", "get_metric", "(", "self", ",", "reset", "=", "True", ")", ":", "\n", "        ", "eval_res", "=", "{", "'f1'", ":", "round", "(", "self", ".", "f1", "/", "self", ".", "total", "*", "100", ",", "2", ")", ",", "'em'", ":", "round", "(", "self", ".", "em", "/", "self", ".", "total", "*", "100", ",", "2", ")", "}", "\n", "if", "reset", ":", "\n", "            ", "self", ".", "em", "=", "0", "\n", "self", ".", "total", "=", "0", "\n", "self", ".", "f1", "=", "0", "\n", "", "return", "eval_res", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._bmes_tag_to_spans": [[662, 689], ["enumerate", "set", "set", "tag.lower.lower", "spans.append", "spans.append"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "def", "_bmes_tag_to_spans", "(", "tags", ",", "ignore_labels", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2atags\u7684lis\uff0c\u6bd4\u5982['S-song', 'B-singer', 'M-singer', 'E-singer', 'S-moive', 'S-actor']\u3002\n    \u8fd4\u56de[('song', (0, 1)), ('singer', (1, 4)), ('moive', (4, 5)), ('actor', (5, 6))] (\u5de6\u95ed\u53f3\u5f00\u533a\u95f4)\n    \u4e5f\u53ef\u4ee5\u662f\u5355\u7eaf\u7684['S', 'B', 'M', 'E', 'B', 'M', 'M',...]\u5e8f\u5217\n\n    :param tags: List[str],\n    :param ignore_labels: List[str], \u5728\u8be5list\u4e2d\u7684label\u5c06\u88ab\u5ffd\u7565\n    :return: List[Tuple[str, List[int, int]]]. [(label\uff0c[start, end])]\n    \"\"\"", "\n", "ignore_labels", "=", "set", "(", "ignore_labels", ")", "if", "ignore_labels", "else", "set", "(", ")", "\n", "\n", "spans", "=", "[", "]", "\n", "prev_bmes_tag", "=", "None", "\n", "for", "idx", ",", "tag", "in", "enumerate", "(", "tags", ")", ":", "\n", "        ", "tag", "=", "tag", ".", "lower", "(", ")", "\n", "bmes_tag", ",", "label", "=", "tag", "[", ":", "1", "]", ",", "tag", "[", "2", ":", "]", "\n", "if", "bmes_tag", "in", "(", "'b'", ",", "'s'", ")", ":", "\n", "            ", "spans", ".", "append", "(", "(", "label", ",", "[", "idx", ",", "idx", "]", ")", ")", "\n", "", "elif", "bmes_tag", "in", "(", "'m'", ",", "'e'", ")", "and", "prev_bmes_tag", "in", "(", "'b'", ",", "'m'", ")", "and", "label", "==", "spans", "[", "-", "1", "]", "[", "0", "]", ":", "\n", "            ", "spans", "[", "-", "1", "]", "[", "1", "]", "[", "1", "]", "=", "idx", "\n", "", "else", ":", "\n", "            ", "spans", ".", "append", "(", "(", "label", ",", "[", "idx", ",", "idx", "]", ")", ")", "\n", "", "prev_bmes_tag", "=", "bmes_tag", "\n", "", "return", "[", "(", "span", "[", "0", "]", ",", "(", "span", "[", "1", "]", "[", "0", "]", ",", "span", "[", "1", "]", "[", "1", "]", "+", "1", ")", ")", "\n", "for", "span", "in", "spans", "\n", "if", "span", "[", "0", "]", "not", "in", "ignore_labels", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._bmeso_tag_to_spans": [[692, 720], ["enumerate", "set", "set", "tag.lower.lower", "spans.append", "spans.append"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_bmeso_tag_to_spans", "(", "tags", ",", "ignore_labels", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2atags\u7684lis\uff0c\u6bd4\u5982['O', 'B-singer', 'M-singer', 'E-singer', 'O', 'O']\u3002\n    \u8fd4\u56de[('singer', (1, 4))] (\u5de6\u95ed\u53f3\u5f00\u533a\u95f4)\n\n    :param tags: List[str],\n    :param ignore_labels: List[str], \u5728\u8be5list\u4e2d\u7684label\u5c06\u88ab\u5ffd\u7565\n    :return: List[Tuple[str, List[int, int]]]. [(label\uff0c[start, end])]\n    \"\"\"", "\n", "ignore_labels", "=", "set", "(", "ignore_labels", ")", "if", "ignore_labels", "else", "set", "(", ")", "\n", "\n", "spans", "=", "[", "]", "\n", "prev_bmes_tag", "=", "None", "\n", "for", "idx", ",", "tag", "in", "enumerate", "(", "tags", ")", ":", "\n", "        ", "tag", "=", "tag", ".", "lower", "(", ")", "\n", "bmes_tag", ",", "label", "=", "tag", "[", ":", "1", "]", ",", "tag", "[", "2", ":", "]", "\n", "if", "bmes_tag", "in", "(", "'b'", ",", "'s'", ")", ":", "\n", "            ", "spans", ".", "append", "(", "(", "label", ",", "[", "idx", ",", "idx", "]", ")", ")", "\n", "", "elif", "bmes_tag", "in", "(", "'m'", ",", "'e'", ")", "and", "prev_bmes_tag", "in", "(", "'b'", ",", "'m'", ")", "and", "label", "==", "spans", "[", "-", "1", "]", "[", "0", "]", ":", "\n", "            ", "spans", "[", "-", "1", "]", "[", "1", "]", "[", "1", "]", "=", "idx", "\n", "", "elif", "bmes_tag", "==", "'o'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "spans", ".", "append", "(", "(", "label", ",", "[", "idx", ",", "idx", "]", ")", ")", "\n", "", "prev_bmes_tag", "=", "bmes_tag", "\n", "", "return", "[", "(", "span", "[", "0", "]", ",", "(", "span", "[", "1", "]", "[", "0", "]", ",", "span", "[", "1", "]", "[", "1", "]", "+", "1", ")", ")", "\n", "for", "span", "in", "spans", "\n", "if", "span", "[", "0", "]", "not", "in", "ignore_labels", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._bioes_tag_to_spans": [[723, 751], ["enumerate", "set", "set", "tag.lower.lower", "spans.append", "spans.append"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_bioes_tag_to_spans", "(", "tags", ",", "ignore_labels", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2atags\u7684lis\uff0c\u6bd4\u5982['O', 'B-singer', 'I-singer', 'E-singer', 'O', 'O']\u3002\n    \u8fd4\u56de[('singer', (1, 4))] (\u5de6\u95ed\u53f3\u5f00\u533a\u95f4)\n\n    :param tags: List[str],\n    :param ignore_labels: List[str], \u5728\u8be5list\u4e2d\u7684label\u5c06\u88ab\u5ffd\u7565\n    :return: List[Tuple[str, List[int, int]]]. [(label\uff0c[start, end])]\n    \"\"\"", "\n", "ignore_labels", "=", "set", "(", "ignore_labels", ")", "if", "ignore_labels", "else", "set", "(", ")", "\n", "\n", "spans", "=", "[", "]", "\n", "prev_bioes_tag", "=", "None", "\n", "for", "idx", ",", "tag", "in", "enumerate", "(", "tags", ")", ":", "\n", "        ", "tag", "=", "tag", ".", "lower", "(", ")", "\n", "bioes_tag", ",", "label", "=", "tag", "[", ":", "1", "]", ",", "tag", "[", "2", ":", "]", "\n", "if", "bioes_tag", "in", "(", "'b'", ",", "'s'", ")", ":", "\n", "            ", "spans", ".", "append", "(", "(", "label", ",", "[", "idx", ",", "idx", "]", ")", ")", "\n", "", "elif", "bioes_tag", "in", "(", "'i'", ",", "'e'", ")", "and", "prev_bioes_tag", "in", "(", "'b'", ",", "'i'", ")", "and", "label", "==", "spans", "[", "-", "1", "]", "[", "0", "]", ":", "\n", "            ", "spans", "[", "-", "1", "]", "[", "1", "]", "[", "1", "]", "=", "idx", "\n", "", "elif", "bioes_tag", "==", "'o'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "spans", ".", "append", "(", "(", "label", ",", "[", "idx", ",", "idx", "]", ")", ")", "\n", "", "prev_bioes_tag", "=", "bioes_tag", "\n", "", "return", "[", "(", "span", "[", "0", "]", ",", "(", "span", "[", "1", "]", "[", "0", "]", ",", "span", "[", "1", "]", "[", "1", "]", "+", "1", ")", ")", "\n", "for", "span", "in", "spans", "\n", "if", "span", "[", "0", "]", "not", "in", "ignore_labels", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._bio_tag_to_spans": [[754, 780], ["enumerate", "set", "set", "tag.lower.lower", "spans.append", "spans.append"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_bio_tag_to_spans", "(", "tags", ",", "ignore_labels", "=", "None", ")", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2atags\u7684lis\uff0c\u6bd4\u5982['O', 'B-singer', 'I-singer', 'I-singer', 'O', 'O']\u3002\n        \u8fd4\u56de[('singer', (1, 4))] (\u5de6\u95ed\u53f3\u5f00\u533a\u95f4)\n\n    :param tags: List[str],\n    :param ignore_labels: List[str], \u5728\u8be5list\u4e2d\u7684label\u5c06\u88ab\u5ffd\u7565\n    :return: List[Tuple[str, List[int, int]]]. [(label\uff0c[start, end])]\n    \"\"\"", "\n", "ignore_labels", "=", "set", "(", "ignore_labels", ")", "if", "ignore_labels", "else", "set", "(", ")", "\n", "\n", "spans", "=", "[", "]", "\n", "prev_bio_tag", "=", "None", "\n", "for", "idx", ",", "tag", "in", "enumerate", "(", "tags", ")", ":", "\n", "        ", "tag", "=", "tag", ".", "lower", "(", ")", "\n", "bio_tag", ",", "label", "=", "tag", "[", ":", "1", "]", ",", "tag", "[", "2", ":", "]", "\n", "if", "bio_tag", "==", "'b'", ":", "\n", "            ", "spans", ".", "append", "(", "(", "label", ",", "[", "idx", ",", "idx", "]", ")", ")", "\n", "", "elif", "bio_tag", "==", "'i'", "and", "prev_bio_tag", "in", "(", "'b'", ",", "'i'", ")", "and", "label", "==", "spans", "[", "-", "1", "]", "[", "0", "]", ":", "\n", "            ", "spans", "[", "-", "1", "]", "[", "1", "]", "[", "1", "]", "=", "idx", "\n", "", "elif", "bio_tag", "==", "'o'", ":", "# o tag does not count", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "spans", ".", "append", "(", "(", "label", ",", "[", "idx", ",", "idx", "]", ")", ")", "\n", "", "prev_bio_tag", "=", "bio_tag", "\n", "", "return", "[", "(", "span", "[", "0", "]", ",", "(", "span", "[", "1", "]", "[", "0", "]", ",", "span", "[", "1", "]", "[", "1", "]", "+", "1", ")", ")", "for", "span", "in", "spans", "if", "span", "[", "0", "]", "not", "in", "ignore_labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._get_encoding_type_from_tag_vocab": [[782, 815], ["set", "isinstance", "tag_vocab.items", "set", "set", "set", "set", "RuntimeError", "tag[].lower", "set.add"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add"], ["", "def", "_get_encoding_type_from_tag_vocab", "(", "tag_vocab", ":", "Union", "[", "Vocabulary", ",", "dict", "]", ")", "->", "str", ":", "\n", "    ", "r\"\"\"\n    \u7ed9\u5b9aVocabulary\u81ea\u52a8\u5224\u65ad\u662f\u54ea\u79cd\u7c7b\u578b\u7684encoding, \u652f\u6301\u5224\u65adbmes, bioes, bmeso, bio\n\n    :param tag_vocab: \u652f\u6301\u4f20\u5165tag Vocabulary; \u6216\u8005\u4f20\u5165\u5f62\u5982{0:\"O\", 1:\"B-tag1\"}\uff0c\u5373index\u5728\u524d\uff0ctag\u5728\u540e\u7684dict\u3002\n    :return:\n    \"\"\"", "\n", "tag_set", "=", "set", "(", ")", "\n", "unk_token", "=", "'<unk>'", "\n", "pad_token", "=", "'<pad>'", "\n", "if", "isinstance", "(", "tag_vocab", ",", "Vocabulary", ")", ":", "\n", "        ", "unk_token", "=", "tag_vocab", ".", "unknown", "\n", "pad_token", "=", "tag_vocab", ".", "padding", "\n", "tag_vocab", "=", "tag_vocab", ".", "idx2word", "\n", "", "for", "idx", ",", "tag", "in", "tag_vocab", ".", "items", "(", ")", ":", "\n", "        ", "if", "tag", "in", "(", "unk_token", ",", "pad_token", ")", ":", "\n", "            ", "continue", "\n", "", "tag", "=", "tag", "[", ":", "1", "]", ".", "lower", "(", ")", "\n", "tag_set", ".", "add", "(", "tag", ")", "\n", "\n", "", "bmes_tag_set", "=", "set", "(", "'bmes'", ")", "\n", "if", "tag_set", "==", "bmes_tag_set", ":", "\n", "        ", "return", "'bmes'", "\n", "", "bio_tag_set", "=", "set", "(", "'bio'", ")", "\n", "if", "tag_set", "==", "bio_tag_set", ":", "\n", "        ", "return", "'bio'", "\n", "", "bmeso_tag_set", "=", "set", "(", "'bmeso'", ")", "\n", "if", "tag_set", "==", "bmeso_tag_set", ":", "\n", "        ", "return", "'bmeso'", "\n", "", "bioes_tag_set", "=", "set", "(", "'bioes'", ")", "\n", "if", "tag_set", "==", "bioes_tag_set", ":", "\n", "        ", "return", "'bioes'", "\n", "", "raise", "RuntimeError", "(", "\"encoding_type cannot be inferred automatically. Only support \"", "\n", "\"'bio', 'bmes', 'bmeso', 'bioes' type.\"", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._check_tag_vocab_and_encoding_type": [[818, 846], ["set", "isinstance", "tag_vocab.items", "tag[].lower", "set.add", "tags.replace.replace", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add"], ["", "def", "_check_tag_vocab_and_encoding_type", "(", "tag_vocab", ":", "Union", "[", "Vocabulary", ",", "dict", "]", ",", "encoding_type", ":", "str", ")", ":", "\n", "    ", "r\"\"\"\n    \u68c0\u67e5vocab\u4e2d\u7684tag\u662f\u5426\u4e0eencoding_type\u662f\u5339\u914d\u7684\n\n    :param tag_vocab: \u652f\u6301\u4f20\u5165tag Vocabulary; \u6216\u8005\u4f20\u5165\u5f62\u5982{0:\"O\", 1:\"B-tag1\"}\uff0c\u5373index\u5728\u524d\uff0ctag\u5728\u540e\u7684dict\u3002\n    :param encoding_type: bio, bmes, bioes, bmeso\n    :return:\n    \"\"\"", "\n", "tag_set", "=", "set", "(", ")", "\n", "unk_token", "=", "'<unk>'", "\n", "pad_token", "=", "'<pad>'", "\n", "if", "isinstance", "(", "tag_vocab", ",", "Vocabulary", ")", ":", "\n", "        ", "unk_token", "=", "tag_vocab", ".", "unknown", "\n", "pad_token", "=", "tag_vocab", ".", "padding", "\n", "tag_vocab", "=", "tag_vocab", ".", "idx2word", "\n", "", "for", "idx", ",", "tag", "in", "tag_vocab", ".", "items", "(", ")", ":", "\n", "        ", "if", "tag", "in", "(", "unk_token", ",", "pad_token", ")", ":", "\n", "            ", "continue", "\n", "", "tag", "=", "tag", "[", ":", "1", "]", ".", "lower", "(", ")", "\n", "tag_set", ".", "add", "(", "tag", ")", "\n", "\n", "", "tags", "=", "encoding_type", "\n", "for", "tag", "in", "tag_set", ":", "\n", "        ", "assert", "tag", "in", "tags", ",", "f\"{tag} is not a valid tag in encoding type:{encoding_type}. Please check your \"", "f\"encoding_type.\"", "\n", "tags", "=", "tags", ".", "replace", "(", "tag", ",", "''", ")", "# \u5220\u9664\u8be5\u503c", "\n", "", "if", "tags", ":", "# \u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u8bf4\u660e\u51fa\u73b0\u4e86\u672a\u4f7f\u7528\u7684tag", "\n", "        ", "warnings", ".", "warn", "(", "f\"Tag:{tags} in encoding type:{encoding_type} is not presented in your Vocabulary. Check your \"", "\n", "\"encoding_type.\"", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._compute_f_pre_rec": [[1034, 1047], ["None"], "function", ["None"], ["", "", "def", "_compute_f_pre_rec", "(", "beta_square", ",", "tp", ",", "fn", ",", "fp", ")", ":", "\n", "    ", "r\"\"\"\n\n    :param tp: int, true positive\n    :param fn: int, false negative\n    :param fp: int, false positive\n    :return: (f, pre, rec)\n    \"\"\"", "\n", "pre", "=", "tp", "/", "(", "fp", "+", "tp", "+", "1e-13", ")", "\n", "rec", "=", "tp", "/", "(", "fn", "+", "tp", "+", "1e-13", ")", "\n", "f", "=", "(", "1", "+", "beta_square", ")", "*", "pre", "*", "rec", "/", "(", "beta_square", "*", "pre", "+", "rec", "+", "1e-13", ")", "\n", "\n", "return", "f", ",", "pre", ",", "rec", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._prepare_metrics": [[1049, 1078], ["isinstance", "isinstance", "isinstance", "isinstance", "TypeError", "metric.", "_metrics.append", "TypeError", "callable", "TypeError", "callable", "TypeError", "type", "type", "type", "type"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_prepare_metrics", "(", "metrics", ")", ":", "\n", "    ", "r\"\"\"\n\n    Prepare list of Metric based on input\n    :param metrics:\n    :return: List[fastNLP.MetricBase]\n    \"\"\"", "\n", "_metrics", "=", "[", "]", "\n", "if", "metrics", ":", "\n", "        ", "if", "isinstance", "(", "metrics", ",", "list", ")", ":", "\n", "            ", "for", "metric", "in", "metrics", ":", "\n", "                ", "if", "isinstance", "(", "metric", ",", "type", ")", ":", "\n", "                    ", "metric", "=", "metric", "(", ")", "\n", "", "if", "isinstance", "(", "metric", ",", "MetricBase", ")", ":", "\n", "                    ", "metric_name", "=", "metric", ".", "__class__", ".", "__name__", "\n", "if", "not", "callable", "(", "metric", ".", "evaluate", ")", ":", "\n", "                        ", "raise", "TypeError", "(", "f\"{metric_name}.evaluate must be callable, got {type(metric.evaluate)}.\"", ")", "\n", "", "if", "not", "callable", "(", "metric", ".", "get_metric", ")", ":", "\n", "                        ", "raise", "TypeError", "(", "f\"{metric_name}.get_metric must be callable, got {type(metric.get_metric)}.\"", ")", "\n", "", "_metrics", ".", "append", "(", "metric", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "TypeError", "(", "\n", "f\"The type of metric in metrics must be `fastNLP.MetricBase`, not `{type(metric)}`.\"", ")", "\n", "", "", "", "elif", "isinstance", "(", "metrics", ",", "MetricBase", ")", ":", "\n", "            ", "_metrics", "=", "[", "metrics", "]", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "f\"The type of metrics should be `list[fastNLP.MetricBase]` or `fastNLP.MetricBase`, \"", "\n", "f\"got {type(metrics)}.\"", ")", "\n", "", "", "return", "_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._accuracy_topk": [[1080, 1094], ["numpy.tile", "numpy.any", "numpy.argsort", "numpy.expand_dims", "numpy.sum"], "function", ["None"], ["", "def", "_accuracy_topk", "(", "y_true", ",", "y_prob", ",", "k", "=", "1", ")", ":", "\n", "    ", "r\"\"\"Compute accuracy of y_true matching top-k probable labels in y_prob.\n\n    :param y_true: ndarray, true label, [n_samples]\n    :param y_prob: ndarray, label probabilities, [n_samples, n_classes]\n    :param k: int, k in top-k\n    :returns acc: accuracy of top-k\n\n    \"\"\"", "\n", "y_pred_topk", "=", "np", ".", "argsort", "(", "y_prob", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "-", "1", ":", "-", "k", "-", "1", ":", "-", "1", "]", "\n", "y_true_tile", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "y_true", ",", "axis", "=", "1", ")", ",", "(", "1", ",", "k", ")", ")", "\n", "y_match", "=", "np", ".", "any", "(", "y_pred_topk", "==", "y_true_tile", ",", "axis", "=", "-", "1", ")", "\n", "acc", "=", "np", ".", "sum", "(", "y_match", ")", "/", "y_match", ".", "shape", "[", "0", "]", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._pred_topk": [[1096, 1112], ["numpy.tile", "numpy.argsort", "numpy.arange", "len"], "function", ["None"], ["", "def", "_pred_topk", "(", "y_prob", ",", "k", "=", "1", ")", ":", "\n", "    ", "r\"\"\"Return top-k predicted labels and corresponding probabilities.\n\n    :param y_prob: ndarray, size [n_samples, n_classes], probabilities on labels\n    :param k: int, k of top-k\n    :returns (y_pred_topk, y_prob_topk):\n        y_pred_topk: ndarray, size [n_samples, k], predicted top-k labels\n        y_prob_topk: ndarray, size [n_samples, k], probabilities for top-k labels\n\n    \"\"\"", "\n", "y_pred_topk", "=", "np", ".", "argsort", "(", "y_prob", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "-", "1", ":", "-", "k", "-", "1", ":", "-", "1", "]", "\n", "x_axis_index", "=", "np", ".", "tile", "(", "\n", "np", ".", "arange", "(", "len", "(", "y_prob", ")", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "\n", "(", "1", ",", "k", ")", ")", "\n", "y_prob_topk", "=", "y_prob", "[", "x_axis_index", ",", "y_pred_topk", "]", "\n", "return", "y_pred_topk", ",", "y_prob_topk", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._cn_segmentation": [[1166, 1190], ["str().lower().strip", "list", "segs_out.extend", "str().lower", "re.search", "segs_out.append", "list", "segs_out.extend", "str"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "def", "_cn_segmentation", "(", "in_str", ",", "rm_punc", "=", "False", ")", ":", "\n", "    ", "in_str", "=", "str", "(", "in_str", ")", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "segs_out", "=", "[", "]", "\n", "temp_str", "=", "\"\"", "\n", "sp_char", "=", "{", "'-'", ",", "':'", ",", "'_'", ",", "'*'", ",", "'^'", ",", "'/'", ",", "'\\\\'", ",", "'~'", ",", "'`'", ",", "'+'", ",", "'='", ",", "'\uff0c'", ",", "'\u3002'", ",", "'\uff1a'", ",", "'\uff1f'", ",", "'\uff01'", ",", "'\u201c'", ",", "'\u201d'", ",", "'\uff1b'", ",", "'\u2019'", ",", "'\u300a'", ",", "\n", "'\u300b'", ",", "'\u2026\u2026'", ",", "'\u00b7'", ",", "'\u3001'", ",", "'\u300c'", ",", "'\u300d'", ",", "'\uff08'", ",", "'\uff09'", ",", "'\uff0d'", ",", "'\uff5e'", ",", "'\u300e'", ",", "'\u300f'", "}", "\n", "for", "char", "in", "in_str", ":", "\n", "        ", "if", "rm_punc", "and", "char", "in", "sp_char", ":", "\n", "            ", "continue", "\n", "", "if", "re", ".", "search", "(", "r'[\\u4e00-\\u9fa5]'", ",", "char", ")", "or", "char", "in", "sp_char", ":", "\n", "            ", "if", "temp_str", "!=", "\"\"", ":", "\n", "                ", "ss", "=", "list", "(", "temp_str", ")", "\n", "segs_out", ".", "extend", "(", "ss", ")", "\n", "temp_str", "=", "\"\"", "\n", "", "segs_out", ".", "append", "(", "char", ")", "\n", "", "else", ":", "\n", "            ", "temp_str", "+=", "char", "\n", "\n", "# handling last part", "\n", "", "", "if", "temp_str", "!=", "\"\"", ":", "\n", "        ", "ss", "=", "list", "(", "temp_str", ")", "\n", "segs_out", ".", "extend", "(", "ss", ")", "\n", "\n", "", "return", "segs_out", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._remove_punctuation": [[1193, 1205], ["str().lower().strip", "str().lower", "out_segs.append", "str"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_remove_punctuation", "(", "in_str", ")", ":", "\n", "    ", "in_str", "=", "str", "(", "in_str", ")", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "sp_char", "=", "[", "'-'", ",", "':'", ",", "'_'", ",", "'*'", ",", "'^'", ",", "'/'", ",", "'\\\\'", ",", "'~'", ",", "'`'", ",", "'+'", ",", "'='", ",", "\n", "'\uff0c'", ",", "'\u3002'", ",", "'\uff1a'", ",", "'\uff1f'", ",", "'\uff01'", ",", "'\u201c'", ",", "'\u201d'", ",", "'\uff1b'", ",", "'\u2019'", ",", "'\u300a'", ",", "'\u300b'", ",", "'\u2026\u2026'", ",", "'\u00b7'", ",", "'\u3001'", ",", "\n", "'\u300c'", ",", "'\u300d'", ",", "'\uff08'", ",", "'\uff09'", ",", "'\uff0d'", ",", "'\uff5e'", ",", "'\u300e'", ",", "'\u300f'", "]", "\n", "out_segs", "=", "[", "]", "\n", "for", "char", "in", "in_str", ":", "\n", "        ", "if", "char", "in", "sp_char", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "out_segs", ".", "append", "(", "char", ")", "\n", "", "", "return", "''", ".", "join", "(", "out_segs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._find_lcs": [[1208, 1220], ["range", "len", "range", "range", "len", "range", "len", "len"], "function", ["None"], ["", "def", "_find_lcs", "(", "s1", ",", "s2", ")", ":", "\n", "    ", "m", "=", "[", "[", "0", "for", "i", "in", "range", "(", "len", "(", "s2", ")", "+", "1", ")", "]", "for", "j", "in", "range", "(", "len", "(", "s1", ")", "+", "1", ")", "]", "\n", "mmax", "=", "0", "\n", "p", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "s1", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "s2", ")", ")", ":", "\n", "            ", "if", "s1", "[", "i", "]", "==", "s2", "[", "j", "]", ":", "\n", "                ", "m", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", "=", "m", "[", "i", "]", "[", "j", "]", "+", "1", "\n", "if", "m", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", ">", "mmax", ":", "\n", "                    ", "mmax", "=", "m", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", "\n", "p", "=", "i", "+", "1", "\n", "", "", "", "", "return", "s1", "[", "p", "-", "mmax", ":", "p", "]", ",", "mmax", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._calc_cmrc2018_f1_score": [[1222, 1236], ["max", "metrics._cn_segmentation", "metrics._cn_segmentation", "metrics._find_lcs", "f1_scores.append", "f1_scores.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._cn_segmentation", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._cn_segmentation", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._find_lcs", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "_calc_cmrc2018_f1_score", "(", "answers", ",", "prediction", ")", ":", "\n", "    ", "f1_scores", "=", "[", "]", "\n", "for", "ans", "in", "answers", ":", "\n", "        ", "ans_segs", "=", "_cn_segmentation", "(", "ans", ",", "rm_punc", "=", "True", ")", "\n", "prediction_segs", "=", "_cn_segmentation", "(", "prediction", ",", "rm_punc", "=", "True", ")", "\n", "lcs", ",", "lcs_len", "=", "_find_lcs", "(", "ans_segs", ",", "prediction_segs", ")", "\n", "if", "lcs_len", "==", "0", ":", "\n", "            ", "f1_scores", ".", "append", "(", "0", ")", "\n", "continue", "\n", "", "precision", "=", "1.0", "*", "lcs_len", "/", "len", "(", "prediction_segs", ")", "\n", "recall", "=", "1.0", "*", "lcs_len", "/", "len", "(", "ans_segs", ")", "\n", "f1", "=", "(", "2", "*", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "f1_scores", ".", "append", "(", "f1", ")", "\n", "", "return", "max", "(", "f1_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._calc_cmrc2018_em_score": [[1238, 1247], ["metrics._remove_punctuation", "metrics._remove_punctuation"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._remove_punctuation", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._remove_punctuation"], ["", "def", "_calc_cmrc2018_em_score", "(", "answers", ",", "prediction", ")", ":", "\n", "    ", "em", "=", "0", "\n", "for", "ans", "in", "answers", ":", "\n", "        ", "ans_", "=", "_remove_punctuation", "(", "ans", ")", "\n", "prediction_", "=", "_remove_punctuation", "(", "prediction", ")", "\n", "if", "ans_", "==", "prediction_", ":", "\n", "            ", "em", "=", "1", "\n", "break", "\n", "", "", "return", "em", "\n", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.SetInputOrTargetException.__init__": [[26, 31], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "msg", ",", "index", "=", "None", ",", "field_name", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "msg", ")", "\n", "self", ".", "msg", "=", "msg", "\n", "self", ".", "index", "=", "index", "# \u6807\u793a\u5728\u54ea\u4e2a\u6570\u636e\u906d\u9047\u5230\u95ee\u9898\u4e86", "\n", "self", ".", "field_name", "=", "field_name", "# \u6807\u793a\u5f53\u524dfield\u7684\u540d\u79f0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.AppendToTargetOrInputException.__init__": [[34, 39], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "msg", ",", "index", "=", "None", ",", "field_name", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "msg", ")", "\n", "self", ".", "msg", "=", "msg", "\n", "self", ".", "index", "=", "index", "# \u6807\u793a\u5728\u54ea\u4e2a\u6570\u636e\u906d\u9047\u5230\u95ee\u9898\u4e86", "\n", "self", ".", "field_name", "=", "field_name", "# \u6807\u793a\u5f53\u524dfield\u7684\u540d\u79f0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.__init__": [[42, 73], ["field.FieldArray.bool"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "content", ",", "is_target", "=", "False", ",", "is_input", "=", "False", ",", "padder", "=", "None", ",", "ignore_type", "=", "False", ",", "\n", "use_1st_ins_infer_dim_type", "=", "True", ")", ":", "\n", "        ", "if", "len", "(", "content", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Empty fieldarray is not allowed.\"", ")", "\n", "", "_content", "=", "content", "\n", "try", ":", "\n", "            ", "_content", "=", "list", "(", "_content", ")", "\n", "", "except", "BaseException", "as", "e", ":", "\n", "            ", "logger", ".", "error", "(", "f\"Cannot convert content(of type:{type(content)}) into list.\"", ")", "\n", "raise", "e", "\n", "", "self", ".", "name", "=", "name", "\n", "self", ".", "content", "=", "_content", "\n", "self", ".", "_ignore_type", "=", "ignore_type", "\n", "#  \u6839\u636einput\u7684\u60c5\u51b5\u8bbe\u7f6einput\uff0ctarget\u7b49", "\n", "self", ".", "_cell_ndim", "=", "None", "# \u591a\u5c11\u7ef4\u5ea6\uff0c \u5982\u679cvalue\u662f1, dim\u4e3a0; \u5982\u679cvalue\u662f[1, 2], dim=2", "\n", "self", ".", "dtype", "=", "None", "# \u6700\u5185\u5c42\u7684element\u90fd\u662f\u4ec0\u4e48\u7c7b\u578b\u7684", "\n", "self", ".", "_use_1st_ins_infer_dim_type", "=", "bool", "(", "use_1st_ins_infer_dim_type", ")", "\n", "self", ".", "_is_input", "=", "False", "\n", "self", ".", "_is_target", "=", "False", "\n", "\n", "if", "is_input", ":", "\n", "            ", "self", ".", "is_input", "=", "is_input", "\n", "", "if", "is_target", ":", "\n", "            ", "self", ".", "is_target", "=", "is_target", "\n", "\n", "", "if", "padder", "is", "None", ":", "\n", "            ", "padder", "=", "AutoPadder", "(", "pad_val", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "padder", ",", "Padder", ")", ",", "\"padder must be of type fastNLP.Padder.\"", "\n", "padder", "=", "deepcopy", "(", "padder", ")", "\n", "", "self", ".", "set_padder", "(", "padder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.ignore_type": [[78, 84], ["None"], "methods", ["None"], ["", "@", "ignore_type", ".", "setter", "\n", "def", "ignore_type", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "value", ":", "\n", "            ", "self", ".", "_cell_ndim", "=", "None", "\n", "self", ".", "dtype", "=", "None", "\n", "", "self", ".", "_ignore_type", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.is_input": [[89, 103], ["field.FieldArray._check_dtype_and_ndim"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray._check_dtype_and_ndim"], ["", "@", "is_input", ".", "setter", "\n", "def", "is_input", "(", "self", ",", "value", ")", ":", "\n", "        ", "r\"\"\"\n            \u5f53 field_array.is_input = True / False \u65f6\u88ab\u8c03\u7528\n        \"\"\"", "\n", "# \u5982\u679c(value\u4e3aTrue)\u4e14(_is_input\u548c_is_target\u90fd\u662fFalse)\u4e14(ignore_type\u4e3aFalse)", "\n", "if", "value", "is", "True", "and", "self", ".", "_is_target", "is", "False", "and", "self", ".", "_ignore_type", "is", "False", ":", "\n", "            ", "self", ".", "_check_dtype_and_ndim", "(", "only_check_1st_ins_dim_type", "=", "self", ".", "_use_1st_ins_infer_dim_type", ")", "\n", "", "if", "value", "is", "False", "and", "self", ".", "_is_target", "is", "False", ":", "\n", "            ", "self", ".", "dtype", "=", "None", "\n", "self", ".", "_cell_ndim", "=", "None", "\n", "", "self", ".", "_is_input", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.is_target": [[108, 121], ["field.FieldArray._check_dtype_and_ndim"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray._check_dtype_and_ndim"], ["", "@", "is_target", ".", "setter", "\n", "def", "is_target", "(", "self", ",", "value", ")", ":", "\n", "        ", "r\"\"\"\n        \u5f53 field_array.is_target = True / False \u65f6\u88ab\u8c03\u7528\n        \"\"\"", "\n", "if", "value", "is", "True", "and", "self", ".", "_is_input", "is", "False", "and", "self", ".", "_ignore_type", "is", "False", ":", "\n", "            ", "self", ".", "_check_dtype_and_ndim", "(", "only_check_1st_ins_dim_type", "=", "self", ".", "_use_1st_ins_infer_dim_type", ")", "\n", "", "if", "value", "is", "False", "and", "self", ".", "_is_input", "is", "False", ":", "\n", "            ", "self", ".", "dtype", "=", "None", "\n", "self", ".", "_cell_ndim", "=", "None", "\n", "", "self", ".", "_is_target", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray._check_dtype_and_ndim": [[122, 151], ["field._get_ele_type_and_dim", "field._get_ele_type_and_dim", "field.SetInputOrTargetException", "field.SetInputOrTargetException"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field._get_ele_type_and_dim", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field._get_ele_type_and_dim"], ["", "def", "_check_dtype_and_ndim", "(", "self", ",", "only_check_1st_ins_dim_type", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u68c0\u67e5\u5f53\u524dcontent\u6240\u6709\u7684element\u662f\u5426\u662f\u540c\u4e00\u4e2a\u7c7b\u578b\uff0c\u4e14\u662f\u5426\u6bcf\u4e2a\u5143\u7d20\u5177\u6709\u76f8\u540c\u7684\u7ef4\u5ea6\u3002\u901a\u8fc7\u7684\u8bdd\uff0c\u8bbe\u7f6e_cell_ndim\u4e0e_ele_type\u5c5e\u6027\uff1b\u6ca1\u6709\n            \u901a\u8fc7\u5c06\u76f4\u63a5\u62a5\u9519.\n\n        :param bool only_check_1st_ins_dim_type: \u662f\u5426\u53ea\u68c0\u67e5\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684type\u548cdim\n        :return:\n        \"\"\"", "\n", "cell_0", "=", "self", ".", "content", "[", "0", "]", "\n", "index", "=", "0", "\n", "try", ":", "\n", "            ", "type_0", ",", "dim_0", "=", "_get_ele_type_and_dim", "(", "cell_0", ")", "\n", "if", "not", "only_check_1st_ins_dim_type", ":", "\n", "                ", "for", "cell", "in", "self", ".", "content", "[", "1", ":", "]", ":", "\n", "                    ", "index", "+=", "1", "\n", "type_i", ",", "dim_i", "=", "_get_ele_type_and_dim", "(", "cell", ")", "\n", "if", "type_i", "!=", "type_0", ":", "\n", "                        ", "raise", "SetInputOrTargetException", "(", "\n", "\"Type:{} in index {} is different from the first element with type:{}.\"", "\n", "\".\"", ".", "format", "(", "type_i", ",", "index", ",", "type_0", ")", ")", "\n", "", "if", "dim_0", "!=", "dim_i", ":", "\n", "                        ", "raise", "SetInputOrTargetException", "(", "\n", "\"Dimension:{} in index {} is different from the first element with \"", "\n", "\"dimension:{}.\"", ".", "format", "(", "dim_i", ",", "index", ",", "dim_0", ")", ")", "\n", "", "", "", "self", ".", "_cell_ndim", "=", "dim_0", "\n", "self", ".", "dtype", "=", "type_0", "\n", "", "except", "SetInputOrTargetException", "as", "e", ":", "\n", "            ", "e", ".", "index", "=", "index", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.append": [[152, 168], ["field._get_ele_type_and_dim", "field.FieldArray.content.append", "field.FieldArray.content.append", "field.AppendToTargetOrInputException", "field.AppendToTargetOrInputException"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field._get_ele_type_and_dim", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "def", "append", "(", "self", ",", "val", ":", "Any", ")", ":", "\n", "        ", "r\"\"\"\n        :param val: \u628a\u8be5val append\u5230fieldarray\u3002\n        :return:\n        \"\"\"", "\n", "if", "(", "self", ".", "_is_target", "or", "self", ".", "_is_input", ")", "and", "self", ".", "_ignore_type", "is", "False", "and", "not", "self", ".", "_use_1st_ins_infer_dim_type", ":", "\n", "            ", "type_", ",", "dim_", "=", "_get_ele_type_and_dim", "(", "val", ")", "\n", "if", "self", ".", "dtype", "!=", "type_", ":", "\n", "                ", "raise", "AppendToTargetOrInputException", "(", "f\"Value(type:{type_}) are of different types with \"", "\n", "f\"previous values(type:{self.dtype}).\"", ")", "\n", "", "if", "self", ".", "_cell_ndim", "!=", "dim_", ":", "\n", "                ", "raise", "AppendToTargetOrInputException", "(", "f\"Value(dim:{dim_}) are of different dimensions with \"", "\n", "f\"previous values(dim:{self._cell_ndim}).\"", ")", "\n", "", "self", ".", "content", ".", "append", "(", "val", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "content", ".", "append", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop": [[169, 176], ["field.FieldArray.content.pop"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "", "def", "pop", "(", "self", ",", "index", ")", ":", "\n", "        ", "r\"\"\"\n        \u5220\u9664\u8be5field\u4e2dindex\u5904\u7684\u5143\u7d20\n        :param int index: \u4ece0\u5f00\u59cb\u7684\u6570\u636e\u4e0b\u6807\u3002\n        :return:\n        \"\"\"", "\n", "self", ".", "content", ".", "pop", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.__getitem__": [[177, 179], ["field.FieldArray.get"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["", "def", "__getitem__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "get", "(", "indices", ",", "pad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.__setitem__": [[180, 191], ["isinstance", "field._get_ele_type_and_dim", "RuntimeError", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field._get_ele_type_and_dim"], ["", "def", "__setitem__", "(", "self", ",", "idx", ",", "val", ")", ":", "\n", "        ", "assert", "isinstance", "(", "idx", ",", "int", ")", "\n", "if", "(", "self", ".", "_is_target", "or", "self", ".", "_is_input", ")", "and", "self", ".", "ignore_type", "is", "False", ":", "# \u9700\u8981\u68c0\u6d4b\u7c7b\u578b", "\n", "            ", "type_", ",", "dim_", "=", "_get_ele_type_and_dim", "(", "val", ")", "\n", "if", "self", ".", "dtype", "!=", "type_", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Value(type:{type_}) are of different types with \"", "\n", "f\"other values(type:{self.dtype}).\"", ")", "\n", "", "if", "self", ".", "_cell_ndim", "!=", "dim_", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Value(dim:{dim_}) are of different dimensions with \"", "\n", "f\"previous values(dim:{self._cell_ndim}).\"", ")", "\n", "", "", "self", ".", "content", "[", "idx", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get": [[192, 211], ["isinstance", "numpy.array", "field.FieldArray.pad", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pad"], ["", "def", "get", "(", "self", ",", "indices", ",", "pad", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u6839\u636e\u7ed9\u5b9a\u7684indices\u8fd4\u56de\u5185\u5bb9\u3002\n\n        :param int,List[int] indices: \u83b7\u53d6indices\u5bf9\u5e94\u7684\u5185\u5bb9\u3002\n        :param bool pad: \u662f\u5426\u5bf9\u8fd4\u56de\u7684\u7ed3\u679c\u8fdb\u884cpadding\u3002\u4ec5\u5bf9: (1) indices\u4e3aList[int]; (2)padder\u4e0d\u4e3aNone; (3)field\u8bbe\u7f6e\u4e86input\n            \u6216target\uff0c\u6709\u6548\n        :return: \u6839\u636e\u7ed9\u5b9a\u7684indices\u8fd4\u56de\u7684\u5185\u5bb9\uff0c\u53ef\u80fd\u662f\u5355\u4e2a\u503c\u6216ndarray\n        \"\"\"", "\n", "if", "isinstance", "(", "indices", ",", "int", ")", ":", "\n", "            ", "return", "self", ".", "content", "[", "indices", "]", "\n", "\n", "", "contents", "=", "[", "self", ".", "content", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "if", "self", ".", "padder", "is", "None", "or", "pad", "is", "False", ":", "\n", "            ", "return", "np", ".", "array", "(", "contents", ")", "\n", "", "elif", "self", ".", "is_input", "or", "self", ".", "is_target", ":", "\n", "            ", "return", "self", ".", "pad", "(", "contents", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "array", "(", "contents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pad": [[212, 220], ["field.FieldArray.padder"], "methods", ["None"], ["", "", "def", "pad", "(", "self", ",", "contents", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f20\u5165list\u7684contents\uff0c\u5c06contents\u4f7f\u7528padder\u8fdb\u884cpadding\uff0ccontents\u5fc5\u987b\u4e3a\u4ece\u672cFieldArray\u4e2d\u53d6\u51fa\u7684\u3002\n\n        :param list contents:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "padder", "(", "contents", ",", "field_name", "=", "self", ".", "name", ",", "field_ele_dtype", "=", "self", ".", "dtype", ",", "dim", "=", "self", ".", "_cell_ndim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.set_padder": [[221, 232], ["isinstance", "copy.deepcopy"], "methods", ["None"], ["", "def", "set_padder", "(", "self", ",", "padder", ")", ":", "\n", "        ", "r\"\"\"\n        \u8bbe\u7f6epadder\uff0c\u5728\u8fd9\u4e2afield\u8fdb\u884cpad\u7684\u65f6\u5019\u7528\u8fd9\u4e2apadder\u8fdb\u884cpad\uff0c\u5982\u679c\u4e3aNone\u5219\u4e0d\u8fdb\u884cpad\u3002\n\n        :param padder: :class:`~fastNLP.Padder` \u7c7b\u578b\uff0c\u8bbe\u7f6e\u4e3aNone\u5373\u5220\u9664padder\u3002\n        \"\"\"", "\n", "if", "padder", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "padder", ",", "Padder", ")", ",", "\"padder must be of type Padder.\"", "\n", "self", ".", "padder", "=", "deepcopy", "(", "padder", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "padder", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.set_pad_val": [[233, 242], ["field.FieldArray.padder.set_pad_val"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_pad_val"], ["", "", "def", "set_pad_val", "(", "self", ",", "pad_val", ")", ":", "\n", "        ", "r\"\"\"\n        \u4fee\u6539padder\u7684pad_val.\n\n        :param int pad_val: \u8be5field\u7684pad\u503c\u8bbe\u7f6e\u4e3a\u8be5\u503c\u3002\n        \"\"\"", "\n", "if", "self", ".", "padder", "is", "not", "None", ":", "\n", "            ", "self", ".", "padder", ".", "set_pad_val", "(", "pad_val", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.__len__": [[243, 250], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        Returns the size of FieldArray.\n\n        :return int length:\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to": [[251, 267], ["isinstance", "type"], "methods", ["None"], ["", "def", "to", "(", "self", ",", "other", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06other\u7684\u5c5e\u6027\u590d\u5236\u7ed9\u672cFieldArray(other\u5fc5\u987b\u4e3aFieldArray\u7c7b\u578b).\n        \u5c5e\u6027\u5305\u62ec is_input, is_target, padder, ignore_type\n\n        :param  other: :class:`~fastNLP.FieldArray` \u4ece\u54ea\u4e2afield\u62f7\u8d1d\u5c5e\u6027\n        :return: :class:`~fastNLP.FieldArray`\n        \"\"\"", "\n", "assert", "isinstance", "(", "other", ",", "FieldArray", ")", ",", "\"Only supports fastNLP.FieldArray type, not {}.\"", ".", "format", "(", "type", "(", "other", ")", ")", "\n", "\n", "self", ".", "ignore_type", "=", "other", ".", "ignore_type", "\n", "self", ".", "is_input", "=", "other", ".", "is_input", "\n", "self", ".", "is_target", "=", "other", ".", "is_target", "\n", "self", ".", "padder", "=", "other", ".", "padder", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.split": [[268, 284], ["enumerate", "field.FieldArray._after_process", "new_contents.append", "cell.split", "_logger.logger.error"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray._after_process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], ["", "def", "split", "(", "self", ",", "sep", ":", "str", "=", "None", ",", "inplace", ":", "bool", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f9d\u6b21\u5bf9\u81ea\u8eab\u7684\u5143\u7d20\u4f7f\u7528.split()\u65b9\u6cd5\uff0c\u5e94\u8be5\u53ea\u6709\u5f53\u672cfield\u7684\u5143\u7d20\u4e3astr\u65f6\uff0c\u8be5\u65b9\u6cd5\u624d\u6709\u7528\u3002\u5c06\u8fd4\u56de\u503c\n\n        :param sep: \u5206\u5272\u7b26\uff0c\u5982\u679c\u4e3aNone\u5219\u76f4\u63a5\u8c03\u7528str.split()\u3002\n        :param inplace: \u5982\u679c\u4e3aTrue\uff0c\u5219\u5c06\u65b0\u751f\u6210\u503c\u66ff\u6362\u672cfield\u3002\u5426\u5219\u8fd4\u56delist\u3002\n        :return: List[List[str]] or self\n        \"\"\"", "\n", "new_contents", "=", "[", "]", "\n", "for", "index", ",", "cell", "in", "enumerate", "(", "self", ".", "content", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "new_contents", ".", "append", "(", "cell", ".", "split", "(", "sep", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"Exception happens when process value in index {index}.\"", ")", "\n", "raise", "e", "\n", "", "", "return", "self", ".", "_after_process", "(", "new_contents", ",", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int": [[285, 304], ["enumerate", "field.FieldArray._after_process", "isinstance", "new_contents.append", "new_contents.append", "_logger.logger.error", "field.FieldArray.int"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray._after_process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "def", "int", "(", "self", ",", "inplace", ":", "bool", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06\u672cfield\u4e2d\u7684\u503c\u8c03\u7528int(cell). \u652f\u6301field\u4e2d\u5185\u5bb9\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5(1)['1', '2', ...](\u5373field\u4e2d\u6bcf\u4e2a\u503c\u4e3astr\u7684)\uff0c\n            (2) [['1', '2', ..], ['3', ..], ...](\u5373field\u4e2d\u6bcf\u4e2a\u503c\u4e3a\u4e00\u4e2alist\uff0clist\u4e2d\u7684\u503c\u4f1a\u88ab\u4f9d\u6b21\u8f6c\u6362\u3002)\n\n        :param inplace: \u5982\u679c\u4e3aTrue\uff0c\u5219\u5c06\u65b0\u751f\u6210\u503c\u66ff\u6362\u672cfield\u3002\u5426\u5219\u8fd4\u56delist\u3002\n        :return: List[int], List[List[int]], self\n        \"\"\"", "\n", "new_contents", "=", "[", "]", "\n", "for", "index", ",", "cell", "in", "enumerate", "(", "self", ".", "content", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "isinstance", "(", "cell", ",", "list", ")", ":", "\n", "                    ", "new_contents", ".", "append", "(", "[", "int", "(", "value", ")", "for", "value", "in", "cell", "]", ")", "\n", "", "else", ":", "\n", "                    ", "new_contents", ".", "append", "(", "int", "(", "cell", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"Exception happens when process value in index {index}.\"", ")", "\n", "raise", "e", "\n", "", "", "return", "self", ".", "_after_process", "(", "new_contents", ",", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float": [[305, 324], ["enumerate", "field.FieldArray._after_process", "isinstance", "new_contents.append", "new_contents.append", "_logger.logger.error", "field.FieldArray.float"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray._after_process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float"], ["", "def", "float", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06\u672cfield\u4e2d\u7684\u503c\u8c03\u7528float(cell). \u652f\u6301field\u4e2d\u5185\u5bb9\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5(1)['1', '2', ...](\u5373field\u4e2d\u6bcf\u4e2a\u503c\u4e3astr\u7684)\uff0c\n            (2) [['1', '2', ..], ['3', ..], ...](\u5373field\u4e2d\u6bcf\u4e2a\u503c\u4e3a\u4e00\u4e2alist\uff0clist\u4e2d\u7684\u503c\u4f1a\u88ab\u4f9d\u6b21\u8f6c\u6362\u3002)\n\n        :param inplace: \u5982\u679c\u4e3aTrue\uff0c\u5219\u5c06\u65b0\u751f\u6210\u503c\u66ff\u6362\u672cfield\u3002\u5426\u5219\u8fd4\u56delist\u3002\n        :return:\n        \"\"\"", "\n", "new_contents", "=", "[", "]", "\n", "for", "index", ",", "cell", "in", "enumerate", "(", "self", ".", "content", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "isinstance", "(", "cell", ",", "list", ")", ":", "\n", "                    ", "new_contents", ".", "append", "(", "[", "float", "(", "value", ")", "for", "value", "in", "cell", "]", ")", "\n", "", "else", ":", "\n", "                    ", "new_contents", ".", "append", "(", "float", "(", "cell", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"Exception happens when process value in index {index}.\"", ")", "\n", "raise", "e", "\n", "", "", "return", "self", ".", "_after_process", "(", "new_contents", ",", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool": [[325, 345], ["enumerate", "field.FieldArray._after_process", "isinstance", "new_contents.append", "new_contents.append", "_logger.logger.error", "field.FieldArray.bool"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray._after_process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool"], ["", "def", "bool", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06\u672cfield\u4e2d\u7684\u503c\u8c03\u7528bool(cell). \u652f\u6301field\u4e2d\u5185\u5bb9\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5(1)['1', '2', ...](\u5373field\u4e2d\u6bcf\u4e2a\u503c\u4e3astr\u7684)\uff0c\n            (2) [['1', '2', ..], ['3', ..], ...](\u5373field\u4e2d\u6bcf\u4e2a\u503c\u4e3a\u4e00\u4e2alist\uff0clist\u4e2d\u7684\u503c\u4f1a\u88ab\u4f9d\u6b21\u8f6c\u6362\u3002)\n\n        :param inplace: \u5982\u679c\u4e3aTrue\uff0c\u5219\u5c06\u65b0\u751f\u6210\u503c\u66ff\u6362\u672cfield\u3002\u5426\u5219\u8fd4\u56delist\u3002\n        :return:\n        \"\"\"", "\n", "new_contents", "=", "[", "]", "\n", "for", "index", ",", "cell", "in", "enumerate", "(", "self", ".", "content", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "isinstance", "(", "cell", ",", "list", ")", ":", "\n", "                    ", "new_contents", ".", "append", "(", "[", "bool", "(", "value", ")", "for", "value", "in", "cell", "]", ")", "\n", "", "else", ":", "\n", "                    ", "new_contents", ".", "append", "(", "bool", "(", "cell", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"Exception happens when process value in index {index}.\"", ")", "\n", "raise", "e", "\n", "\n", "", "", "return", "self", ".", "_after_process", "(", "new_contents", ",", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower": [[346, 365], ["enumerate", "field.FieldArray._after_process", "isinstance", "new_contents.append", "new_contents.append", "_logger.logger.error", "cell.lower", "value.lower"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray._after_process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["", "def", "lower", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06\u672cfield\u4e2d\u7684\u503c\u8c03\u7528cell.lower(). \u652f\u6301field\u4e2d\u5185\u5bb9\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5(1)['1', '2', ...](\u5373field\u4e2d\u6bcf\u4e2a\u503c\u4e3astr\u7684)\uff0c\n            (2) [['1', '2', ..], ['3', ..], ...](\u5373field\u4e2d\u6bcf\u4e2a\u503c\u4e3a\u4e00\u4e2alist\uff0clist\u4e2d\u7684\u503c\u4f1a\u88ab\u4f9d\u6b21\u8f6c\u6362\u3002)\n\n        :param inplace: \u5982\u679c\u4e3aTrue\uff0c\u5219\u5c06\u65b0\u751f\u6210\u503c\u66ff\u6362\u672cfield\u3002\u5426\u5219\u8fd4\u56delist\u3002\n        :return: List[int], List[List[int]], self\n        \"\"\"", "\n", "new_contents", "=", "[", "]", "\n", "for", "index", ",", "cell", "in", "enumerate", "(", "self", ".", "content", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "isinstance", "(", "cell", ",", "list", ")", ":", "\n", "                    ", "new_contents", ".", "append", "(", "[", "value", ".", "lower", "(", ")", "for", "value", "in", "cell", "]", ")", "\n", "", "else", ":", "\n", "                    ", "new_contents", ".", "append", "(", "cell", ".", "lower", "(", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"Exception happens when process value in index {index}.\"", ")", "\n", "raise", "e", "\n", "", "", "return", "self", ".", "_after_process", "(", "new_contents", ",", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.upper": [[366, 385], ["enumerate", "field.FieldArray._after_process", "isinstance", "new_contents.append", "new_contents.append", "_logger.logger.error", "cell.upper", "value.upper"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray._after_process", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.upper", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.upper"], ["", "def", "upper", "(", "self", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06\u672cfield\u4e2d\u7684\u503c\u8c03\u7528cell.lower(). \u652f\u6301field\u4e2d\u5185\u5bb9\u4e3a\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5(1)['1', '2', ...](\u5373field\u4e2d\u6bcf\u4e2a\u503c\u4e3astr\u7684)\uff0c\n            (2) [['1', '2', ..], ['3', ..], ...](\u5373field\u4e2d\u6bcf\u4e2a\u503c\u4e3a\u4e00\u4e2alist\uff0clist\u4e2d\u7684\u503c\u4f1a\u88ab\u4f9d\u6b21\u8f6c\u6362\u3002)\n\n        :param inplace: \u5982\u679c\u4e3aTrue\uff0c\u5219\u5c06\u65b0\u751f\u6210\u503c\u66ff\u6362\u672cfield\u3002\u5426\u5219\u8fd4\u56delist\u3002\n        :return: List[int], List[List[int]], self\n        \"\"\"", "\n", "new_contents", "=", "[", "]", "\n", "for", "index", ",", "cell", "in", "enumerate", "(", "self", ".", "content", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "isinstance", "(", "cell", ",", "list", ")", ":", "\n", "                    ", "new_contents", ".", "append", "(", "[", "value", ".", "upper", "(", ")", "for", "value", "in", "cell", "]", ")", "\n", "", "else", ":", "\n", "                    ", "new_contents", ".", "append", "(", "cell", ".", "upper", "(", ")", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"Exception happens when process value in index {index}.\"", ")", "\n", "raise", "e", "\n", "", "", "return", "self", ".", "_after_process", "(", "new_contents", ",", "inplace", "=", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.value_count": [[386, 404], ["collections.Counter", "field.FieldArray.value_count.cum"], "methods", ["None"], ["", "def", "value_count", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8fd4\u56de\u8be5field\u4e0b\u4e0d\u540cvalue\u7684\u6570\u91cf\u3002\u591a\u7528\u4e8e\u7edf\u8ba1label\u6570\u91cf\n\n        :return: Counter, key\u662flabel\uff0cvalue\u662f\u51fa\u73b0\u6b21\u6570\n        \"\"\"", "\n", "count", "=", "Counter", "(", ")", "\n", "\n", "def", "cum", "(", "cell", ")", ":", "\n", "            ", "if", "_is_iterable", "(", "cell", ")", "and", "not", "isinstance", "(", "cell", ",", "str", ")", ":", "\n", "                ", "for", "cell_", "in", "cell", ":", "\n", "                    ", "cum", "(", "cell_", ")", "\n", "", "", "else", ":", "\n", "                ", "count", "[", "cell", "]", "+=", "1", "\n", "\n", "", "", "for", "cell", "in", "self", ".", "content", ":", "\n", "            ", "cum", "(", "cell", ")", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray._after_process": [[405, 424], ["_logger.logger.error"], "methods", ["None"], ["", "def", "_after_process", "(", "self", ",", "new_contents", ",", "inplace", ")", ":", "\n", "        ", "r\"\"\"\n        \u5f53\u8c03\u7528\u5904\u7406\u51fd\u6570\u4e4b\u540e\uff0c\u51b3\u5b9a\u662f\u5426\u8981\u66ff\u6362field\u3002\n\n        :param new_contents:\n        :param inplace:\n        :return: self\u6216\u8005\u751f\u6210\u7684content\n        \"\"\"", "\n", "if", "inplace", ":", "\n", "            ", "self", ".", "content", "=", "new_contents", "\n", "try", ":", "\n", "                ", "self", ".", "is_input", "=", "self", ".", "is_input", "\n", "self", ".", "is_target", "=", "self", ".", "is_input", "\n", "", "except", "SetInputOrTargetException", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"The newly generated field cannot be set as input or target.\"", ")", "\n", "raise", "e", "\n", "", "return", "self", "\n", "", "else", ":", "\n", "            ", "return", "new_contents", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.Padder.__init__": [[481, 490], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pad_val", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        :param List[Any] contents: \u4f20\u5165\u7684element\u662finplace\u7684\uff0c\u5373\u76f4\u63a5\u4fee\u6539element\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u53d8\u5316\uff0c\u5efa\u8baeinplace\u4fee\u6539\u4e4b\u524d\n            deepcopy\u4e00\u4efd\u3002\n        :param str, field_name: field\u7684\u540d\u79f0\u3002\n        :param np.int64,np.float64,np.str,None, field_ele_dtype: \u8be5field\u7684\u5185\u5c42\u5143\u7d20\u7684\u7c7b\u578b\u3002\u5982\u679c\u8be5field\u7684ignore_type\u4e3aTrue\uff0c\u8be5\u8fd9\u4e2a\u503c\u4e3aNone\u3002\n        :return: np.array([padded_element])\n        \"\"\"", "\n", "self", ".", "pad_val", "=", "pad_val", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.Padder.set_pad_val": [[491, 493], ["None"], "methods", ["None"], ["", "def", "set_pad_val", "(", "self", ",", "pad_val", ")", ":", "\n", "        ", "self", ".", "pad_val", "=", "pad_val", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.Padder.get_pad_val": [[494, 496], ["None"], "methods", ["None"], ["", "def", "get_pad_val", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pad_val", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.Padder.__call__": [[497, 540], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__call__", "(", "self", ",", "contents", ",", "field_name", ",", "field_ele_dtype", ",", "dim", ":", "int", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f20\u5165\u7684\u662fList\u5185\u5bb9\u3002\u5047\u8bbe\u6709\u4ee5\u4e0b\u7684DataSet\u3002\n\n        :param List[Any] contents: \u4f20\u5165\u7684element\u662finplace\u7684\uff0c\u5373\u76f4\u63a5\u4fee\u6539element\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u53d8\u5316\uff0c\u5efa\u8baeinplace\u4fee\u6539\u4e4b\u524d\n            deepcopy\u4e00\u4efd\u3002\n        :param str, field_name: field\u7684\u540d\u79f0\u3002\n        :param np.int64,np.float64,np.str,None, field_ele_dtype: \u8be5field\u7684\u5185\u5c42\u5143\u7d20\u7684\u7c7b\u578b\u3002\u5982\u679c\u8be5field\u7684ignore_type\u4e3aTrue\uff0c\n            \u8be5\u8fd9\u4e2a\u503c\u4e3aNone\u3002\n        :param dim: \u8fd9\u4e2afield\u7684\u7ef4\u5ea6\u3002\u5f53ignore_type\u4e3aTrue\u65f6\uff0c\u8be5\u503c\u4e3aNone\n        :return: np.array([padded_element])\n\n        Example::\n\n            from fastNLP import DataSet\n            from fastNLP import Instance\n            dataset = DataSet()\n            dataset.append(Instance(sent='this is a demo', length=4,\n                                    chars=[['t', 'h', 'i', 's'], ['i', 's'], ['a'], ['d', 'e', 'm', 'o']]))\n            dataset.append(Instance(sent='another one', length=2,\n                                    chars=[['a', 'n', 'o', 't', 'h', 'e', 'r'], ['o', 'n', 'e']]))\n            \u5982\u679c\u8c03\u7528\n            batch = dataset.get([0,1], pad=True)\n            sent\u8fd9\u4e2afield\u7684padder\u7684__call__\u4f1a\u63a5\u6536\u5230\u7684\u5185\u5bb9\u4f1a\u662f\n                [\n                    'this is a demo',\n                    'another one'\n                ]\n\n            length\u8fd9\u4e2afield\u7684padder\u7684__call__\u4f1a\u63a5\u6536\u5230\u7684\u5185\u5bb9\u4f1a\u662f\n                [4, 2]\n\n            chars\u8fd9\u4e2afield\u7684padder\u7684__call__\u4f1a\u63a5\u6536\u5230\u7684\u5185\u5bb9\u4f1a\u662f\n                [\n                    [['t', 'h', 'i', 's'], ['i', 's'], ['a'], ['d', 'e', 'm', 'o']],\n                    [['a', 'n', 'o', 't', 'h', 'e', 'r'], ['o', 'n', 'e']]\n                ]\n\n        \u5373\u628a\u6bcf\u4e2ainstance\u4e2d\u67d0\u4e2afield\u7684\u5185\u5bb9\u5408\u6210\u4e00\u4e2aList\u4f20\u5165\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.AutoPadder.__init__": [[564, 566], ["field.Padder.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "pad_val", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "pad_val", "=", "pad_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.AutoPadder.__call__": [[567, 632], ["numpy.array", "isinstance", "str().startswith", "issubclass", "issubclass", "numpy.array", "numpy.array", "max", "numpy.full", "enumerate", "str", "torch.tensor().to", "map", "max", "max", "numpy.full", "enumerate", "numpy.shape", "max", "torch.full", "enumerate", "len", "map", "enumerate", "len", "numpy.array", "RuntimeError", "torch.tensor", "map", "content_i.clone().detach", "max", "max", "torch.full", "enumerate", "set", "set.pop", "max", "len", "len", "map", "enumerate", "len", "RuntimeError", "len", "torch.full", "enumerate", "RuntimeError", "len", "content_i.clone", "max", "len", "content_ii.clone().detach", "numpy.shape", "content_i.clone().detach().to", "len", "len", "list", "len", "len", "content_ii.clone", "len", "content_i.clone().detach", "len", "content_i.clone"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], ["", "def", "__call__", "(", "self", ",", "contents", ",", "field_name", ",", "field_ele_dtype", ",", "dim", ")", ":", "\n", "        ", "if", "field_ele_dtype", ":", "\n", "            ", "if", "dim", ">", "3", ":", "\n", "                ", "return", "np", ".", "array", "(", "contents", ")", "\n", "", "if", "isinstance", "(", "field_ele_dtype", ",", "type", ")", "and", "(", "issubclass", "(", "field_ele_dtype", ",", "np", ".", "number", ")", "or", "issubclass", "(", "field_ele_dtype", ",", "Number", ")", ")", ":", "\n", "                ", "if", "dim", "==", "0", ":", "\n", "                    ", "array", "=", "np", ".", "array", "(", "contents", ",", "dtype", "=", "field_ele_dtype", ")", "\n", "", "elif", "dim", "==", "1", ":", "\n", "                    ", "max_len", "=", "max", "(", "map", "(", "len", ",", "contents", ")", ")", "\n", "array", "=", "np", ".", "full", "(", "(", "len", "(", "contents", ")", ",", "max_len", ")", ",", "self", ".", "pad_val", ",", "dtype", "=", "field_ele_dtype", ")", "\n", "for", "i", ",", "content_i", "in", "enumerate", "(", "contents", ")", ":", "\n", "                        ", "array", "[", "i", ",", ":", "len", "(", "content_i", ")", "]", "=", "content_i", "\n", "", "", "elif", "dim", "==", "2", ":", "\n", "                    ", "max_len", "=", "max", "(", "map", "(", "len", ",", "contents", ")", ")", "\n", "max_word_len", "=", "max", "(", "[", "max", "(", "[", "len", "(", "content_ii", ")", "for", "content_ii", "in", "content_i", "]", ")", "for", "\n", "content_i", "in", "contents", "]", ")", "\n", "array", "=", "np", ".", "full", "(", "(", "len", "(", "contents", ")", ",", "max_len", ",", "max_word_len", ")", ",", "self", ".", "pad_val", ",", "dtype", "=", "field_ele_dtype", ")", "\n", "for", "i", ",", "content_i", "in", "enumerate", "(", "contents", ")", ":", "\n", "                        ", "for", "j", ",", "content_ii", "in", "enumerate", "(", "content_i", ")", ":", "\n", "                            ", "array", "[", "i", ",", "j", ",", ":", "len", "(", "content_ii", ")", "]", "=", "content_ii", "\n", "", "", "", "else", ":", "\n", "                    ", "shape", "=", "np", ".", "shape", "(", "contents", ")", "\n", "if", "len", "(", "shape", ")", "==", "4", ":", "# \u8bf4\u660e\u5404dimension\u662f\u76f8\u540c\u7684\u5927\u5c0f", "\n", "                        ", "array", "=", "np", ".", "array", "(", "contents", ",", "dtype", "=", "field_ele_dtype", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "RuntimeError", "(", "\n", "f\"Field:{field_name} has 3 dimensions, every sample should have the same shape.\"", ")", "\n", "", "", "return", "array", "\n", "", "elif", "str", "(", "field_ele_dtype", ")", ".", "startswith", "(", "'torch'", ")", ":", "\n", "                ", "if", "dim", "==", "0", ":", "\n", "                    ", "tensor", "=", "torch", ".", "tensor", "(", "contents", ")", ".", "to", "(", "field_ele_dtype", ")", "\n", "", "elif", "dim", "==", "1", ":", "\n", "                    ", "max_len", "=", "max", "(", "map", "(", "len", ",", "contents", ")", ")", "\n", "tensor", "=", "torch", ".", "full", "(", "(", "len", "(", "contents", ")", ",", "max_len", ")", ",", "fill_value", "=", "self", ".", "pad_val", ",", "dtype", "=", "field_ele_dtype", ")", "\n", "for", "i", ",", "content_i", "in", "enumerate", "(", "contents", ")", ":", "\n", "                        ", "tensor", "[", "i", ",", ":", "len", "(", "content_i", ")", "]", "=", "content_i", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "", "elif", "dim", "==", "2", ":", "\n", "                    ", "max_len", "=", "max", "(", "map", "(", "len", ",", "contents", ")", ")", "\n", "max_word_len", "=", "max", "(", "[", "max", "(", "[", "len", "(", "content_ii", ")", "for", "content_ii", "in", "content_i", "]", ")", "for", "\n", "content_i", "in", "contents", "]", ")", "\n", "tensor", "=", "torch", ".", "full", "(", "(", "len", "(", "contents", ")", ",", "max_len", ",", "max_word_len", ")", ",", "fill_value", "=", "self", ".", "pad_val", ",", "\n", "dtype", "=", "field_ele_dtype", ")", "\n", "for", "i", ",", "content_i", "in", "enumerate", "(", "contents", ")", ":", "\n", "                        ", "for", "j", ",", "content_ii", "in", "enumerate", "(", "content_i", ")", ":", "\n", "                            ", "tensor", "[", "i", ",", "j", ",", ":", "len", "(", "content_ii", ")", "]", "=", "content_ii", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "shapes", "=", "set", "(", "[", "np", ".", "shape", "(", "content_i", ")", "for", "content_i", "in", "contents", "]", ")", "\n", "if", "len", "(", "shapes", ")", ">", "1", ":", "\n", "                        ", "raise", "RuntimeError", "(", "\n", "f\"Field:{field_name} has 3 dimensions, every sample should have the same shape.\"", ")", "\n", "", "shape", "=", "shapes", ".", "pop", "(", ")", "\n", "if", "len", "(", "shape", ")", "==", "3", ":", "\n", "                        ", "tensor", "=", "torch", ".", "full", "(", "[", "len", "(", "contents", ")", "]", "+", "list", "(", "shape", ")", ",", "fill_value", "=", "self", ".", "pad_val", ",", "\n", "dtype", "=", "field_ele_dtype", ")", "\n", "for", "i", ",", "content_i", "in", "enumerate", "(", "contents", ")", ":", "\n", "                            ", "tensor", "[", "i", "]", "=", "content_i", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "to", "(", "field_ele_dtype", ")", "\n", "", "", "else", ":", "\n", "                        ", "raise", "RuntimeError", "(", "\n", "f\"Field:{field_name} has 3 dimensions, every sample should have the same shape.\"", ")", "\n", "", "", "return", "tensor", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "array", "(", "contents", ")", "# \u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c", "\n", "", "", "else", ":", "\n", "            ", "return", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.EngChar2DPadder.__init__": [[656, 665], ["field.Padder.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "pad_val", "=", "0", ",", "pad_length", "=", "0", ")", ":", "\n", "        ", "r\"\"\"\n        :param pad_val: int, pad\u7684\u4f4d\u7f6e\u4f7f\u7528\u8be5index\n        :param pad_length: int, \u5982\u679c\u4e3a0\u5219\u53d6\u4e00\u4e2abatch\u4e2d\u6700\u5927\u7684\u5355\u8bcd\u957f\u5ea6\u4f5c\u4e3apadding\u957f\u5ea6\u3002\u5982\u679c\u4e3a\u5927\u4e8e0\u7684\u6570\uff0c\u5219\u5c06\u6240\u6709\u5355\u8bcd\u7684\u957f\u5ea6\n            \u90fdpad\u6216\u622a\u53d6\u5230\u8be5\u957f\u5ea6.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "pad_val", "=", "pad_val", ")", "\n", "\n", "self", ".", "pad_length", "=", "pad_length", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.EngChar2DPadder.__call__": [[666, 701], ["max", "len", "type", "numpy.full", "enumerate", "TypeError", "max", "enumerate", "len", "max", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "contents", ",", "field_name", ",", "field_ele_dtype", ",", "dim", ")", ":", "\n", "        ", "r\"\"\"\n        \u671f\u671b\u8f93\u5165\u7c7b\u4f3c\u4e8e\n        [\n            [[0, 2], [2, 3, 4], ..],\n            [[9, 8, 2, 4], [1, 2,], ...],\n            ....\n        ]\n\n        :param contents:\n        :param field_name:\n        :param field_ele_dtype\n        :return:\n        \"\"\"", "\n", "if", "field_ele_dtype", "not", "in", "(", "np", ".", "int64", ",", "np", ".", "float64", ",", "int", ",", "float", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'dtype of Field:{} should be np.int64 or np.float64 to do 2D padding, get {}.'", ".", "format", "(", "\n", "field_name", ",", "field_ele_dtype", "\n", ")", ")", "\n", "", "assert", "dim", "==", "2", ",", "f\"Field:{field_name} has {dim}, EngChar2DPadder only supports input with 2 dimensions.\"", "\n", "if", "self", ".", "pad_length", "<", "1", ":", "\n", "            ", "max_char_length", "=", "max", "(", "[", "max", "(", "len", "(", "char_lst", ")", "for", "char_lst", "in", "word_lst", ")", "for", "word_lst", "in", "contents", "]", ")", "\n", "", "else", ":", "\n", "            ", "max_char_length", "=", "self", ".", "pad_length", "\n", "", "max_sent_length", "=", "max", "(", "len", "(", "word_lst", ")", "for", "word_lst", "in", "contents", ")", "\n", "batch_size", "=", "len", "(", "contents", ")", "\n", "dtype", "=", "type", "(", "contents", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "padded_array", "=", "np", ".", "full", "(", "(", "batch_size", ",", "max_sent_length", ",", "max_char_length", ")", ",", "fill_value", "=", "self", ".", "pad_val", ",", "\n", "dtype", "=", "dtype", ")", "\n", "for", "b_idx", ",", "word_lst", "in", "enumerate", "(", "contents", ")", ":", "\n", "            ", "for", "c_idx", ",", "char_lst", "in", "enumerate", "(", "word_lst", ")", ":", "\n", "                ", "chars", "=", "char_lst", "[", ":", "max_char_length", "]", "\n", "padded_array", "[", "b_idx", ",", "c_idx", ",", ":", "len", "(", "chars", ")", "]", "=", "chars", "\n", "\n", "", "", "return", "padded_array", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field._get_ele_type_and_dim": [[426, 470], ["isinstance", "hasattr", "isinstance", "type", "set", "set", "isinstance", "field._get_ele_type_and_dim", "len", "field.SetInputOrTargetException", "len", "field.SetInputOrTargetException", "len", "field.SetInputOrTargetException", "set.pop", "set.pop", "isinstance", "set", "set", "field.SetInputOrTargetException", "list", "list", "cell.dim", "numpy.dtype", "field._get_ele_type_and_dim", "len", "field.SetInputOrTargetException", "len", "field.SetInputOrTargetException", "set.pop", "set.pop", "len", "field.SetInputOrTargetException", "list", "list", "type"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field._get_ele_type_and_dim", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field._get_ele_type_and_dim", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "", "", "def", "_get_ele_type_and_dim", "(", "cell", ":", "Any", ",", "dim", "=", "0", ")", ":", "\n", "    ", "r\"\"\"\n    \u8bc6\u522bcell\u7684\u7c7b\u522b\u4e0edimension\u7684\u6570\u91cf\n\n    numpy scalar type:https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.scalars.html\n    :param cell:\n    :param dim:\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "cell", ",", "(", "str", ",", "Number", ",", "np", ".", "bool_", ")", ")", ":", "\n", "        ", "if", "hasattr", "(", "cell", ",", "'dtype'", ")", ":", "\n", "            ", "return", "cell", ".", "dtype", ".", "type", ",", "dim", "\n", "", "return", "type", "(", "cell", ")", ",", "dim", "\n", "", "elif", "isinstance", "(", "cell", ",", "list", ")", ":", "\n", "        ", "dim", "+=", "1", "\n", "res", "=", "[", "_get_ele_type_and_dim", "(", "cell_i", ",", "dim", ")", "for", "cell_i", "in", "cell", "]", "\n", "types", "=", "set", "(", "[", "i", "for", "i", ",", "j", "in", "res", "]", ")", "\n", "dims", "=", "set", "(", "[", "j", "for", "i", ",", "j", "in", "res", "]", ")", "\n", "if", "len", "(", "types", ")", ">", "1", ":", "\n", "            ", "raise", "SetInputOrTargetException", "(", "\"Mixed types detected: {}.\"", ".", "format", "(", "list", "(", "types", ")", ")", ")", "\n", "", "if", "len", "(", "types", ")", "==", "0", ":", "\n", "            ", "raise", "SetInputOrTargetException", "(", "\"Empty value encountered.\"", ")", "\n", "", "if", "len", "(", "dims", ")", ">", "1", ":", "\n", "            ", "raise", "SetInputOrTargetException", "(", "\"Mixed dimension detected: {}.\"", ".", "format", "(", "list", "(", "dims", ")", ")", ")", "\n", "", "return", "types", ".", "pop", "(", ")", ",", "dims", ".", "pop", "(", ")", "\n", "", "elif", "isinstance", "(", "cell", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "cell", ".", "dtype", ",", "cell", ".", "dim", "(", ")", "+", "dim", "# \u5982\u679c\u662ftorch.mean\u7684\u7ed3\u679c\u662f0", "\n", "", "elif", "isinstance", "(", "cell", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "cell", ".", "dtype", "!=", "np", ".", "dtype", "(", "'O'", ")", ":", "# \u5982\u679c\u4e0d\u662fobject\u7684\u8bdd\u8bf4\u660e\u662fwell-formatted\u7684\u4e86", "\n", "            ", "return", "cell", ".", "dtype", ".", "type", ",", "cell", ".", "ndim", "+", "dim", "# dtype.type\u8fd4\u56de\u7684\u4f1a\u662fnp.int32, np.float\u7b49", "\n", "# \u5426\u5219\u9700\u8981\u7ee7\u7eed\u5f80\u4e0biterate", "\n", "", "dim", "+=", "1", "\n", "res", "=", "[", "_get_ele_type_and_dim", "(", "cell_i", ",", "dim", ")", "for", "cell_i", "in", "cell", "]", "\n", "types", "=", "set", "(", "[", "i", "for", "i", ",", "j", "in", "res", "]", ")", "\n", "dims", "=", "set", "(", "[", "j", "for", "i", ",", "j", "in", "res", "]", ")", "\n", "if", "len", "(", "types", ")", ">", "1", ":", "\n", "            ", "raise", "SetInputOrTargetException", "(", "\"Mixed types detected: {}.\"", ".", "format", "(", "list", "(", "types", ")", ")", ")", "\n", "", "elif", "len", "(", "types", ")", "==", "0", ":", "\n", "            ", "raise", "SetInputOrTargetException", "(", "\"Empty value encountered.\"", ")", "\n", "", "if", "len", "(", "dims", ")", ">", "1", ":", "\n", "            ", "raise", "SetInputOrTargetException", "(", "\"Mixed dimension detected: {}.\"", ".", "format", "(", "list", "(", "dims", ")", ")", ")", "\n", "", "return", "types", ".", "pop", "(", ")", ",", "dims", ".", "pop", "(", ")", "\n", "", "else", ":", "# \u5305\u542btuple, set, dict\u4ee5\u53ca\u5176\u5b83\u7684\u7c7b\u578b", "\n", "        ", "raise", "SetInputOrTargetException", "(", "f\"Cannot process type:{type(cell)}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.DataSetGetter.__init__": [[55, 62], ["list", "range", "len", "dataset.get_all_fields().items", "dataset.get_all_fields().items", "dataset.get_all_fields", "dataset.get_all_fields"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_all_fields", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_all_fields"], ["def", "__init__", "(", "self", ",", "dataset", ":", "DataSet", ",", "as_numpy", "=", "False", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "as_numpy", "=", "as_numpy", "\n", "self", ".", "idx_list", "=", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", "\n", "\n", "self", ".", "x_names", "=", "{", "n", "for", "n", ",", "f", "in", "dataset", ".", "get_all_fields", "(", ")", ".", "items", "(", ")", "if", "f", ".", "is_input", "}", "\n", "self", ".", "y_names", "=", "{", "n", "for", "n", ",", "f", "in", "dataset", ".", "get_all_fields", "(", ")", ".", "items", "(", ")", "if", "f", ".", "is_target", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.DataSetGetter.__getitem__": [[63, 68], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "# mapping idx to sampled idx", "\n", "        ", "idx", "=", "self", ".", "idx_list", "[", "idx", "]", "\n", "ins", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "return", "idx", ",", "ins", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.DataSetGetter.__len__": [[69, 71], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.DataSetGetter.collate_fn": [[72, 98], ["batch._pad", "batch._pad", "collections.defaultdict", "collections.defaultdict", "indices.append", "ins.items", "batch.DataSetGetter.dataset.collater.is_empty", "batch.DataSetGetter.dataset._collate_batch", "_pad.update", "_pad.update", "sin_x[].append", "sin_y[].append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch._pad", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch._pad", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.is_empty", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet._collate_batch", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "collate_fn", "(", "self", ",", "ins_list", ":", "list", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param batch: [[idx1, x_dict1, y_dict1], [idx2, x_dict2, y_dict2], [xx, xx, xx]]\n        :return:\n        \"\"\"", "\n", "indices", "=", "[", "]", "\n", "sin_x", ",", "sin_y", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "# \u6536\u96c6\u9700\u8981\u5173\u6ce8\u7684field\u7684\u6570\u636e", "\n", "for", "idx", ",", "ins", "in", "ins_list", ":", "\n", "            ", "indices", ".", "append", "(", "idx", ")", "\n", "for", "n", ",", "v", "in", "ins", ".", "items", "(", ")", ":", "\n", "                ", "if", "n", "in", "self", ".", "x_names", ":", "\n", "                    ", "sin_x", "[", "n", "]", ".", "append", "(", "v", ")", "\n", "", "if", "n", "in", "self", ".", "y_names", ":", "\n", "                    ", "sin_y", "[", "n", "]", ".", "append", "(", "v", ")", "\n", "\n", "# \u6839\u636e\u60c5\u51b5\uff0c\u8fdb\u884cpad", "\n", "", "", "", "sin_x", "=", "_pad", "(", "sin_x", ",", "dataset", "=", "self", ".", "dataset", ",", "as_numpy", "=", "self", ".", "as_numpy", ")", "\n", "sin_y", "=", "_pad", "(", "sin_y", ",", "dataset", "=", "self", ".", "dataset", ",", "as_numpy", "=", "self", ".", "as_numpy", ")", "\n", "if", "not", "self", ".", "dataset", ".", "collater", ".", "is_empty", "(", ")", ":", "\n", "            ", "bx", ",", "by", "=", "self", ".", "dataset", ".", "_collate_batch", "(", "ins_list", ")", "\n", "sin_x", ".", "update", "(", "bx", ")", "\n", "sin_y", ".", "update", "(", "by", ")", "\n", "\n", "", "return", "indices", ",", "sin_x", ",", "sin_y", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.DataSetGetter.__getattr__": [[99, 104], ["hasattr", "getattr", "AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "dataset", ",", "item", ")", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "dataset", ",", "item", ")", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "\"'DataSetGetter' object has no attribute '{}'\"", ".", "format", "(", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.SamplerAdapter.__init__": [[111, 115], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "sampler", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.SamplerAdapter.__len__": [[116, 118], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.SamplerAdapter.__iter__": [[119, 121], ["iter", "batch.SamplerAdapter.sampler"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "sampler", "(", "self", ".", "dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.__init__": [[128, 161], ["isinstance", "batch.SamplerAdapter", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "batch.BatchIter.get_num_batches", "len", "len", "SamplerAdapter.SequentialSampler"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.get_num_batches"], ["def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "None", ",", "\n", "num_workers", "=", "0", ",", "pin_memory", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "timeout", "=", "0", ",", "worker_init_fn", "=", "None", ",", "collate_fn", "=", "None", ",", "\n", "batch_sampler", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "sampler", ",", "Sampler", ")", ":", "# \u5982\u679c\u65f6fastNLP\u7684sampler\u9700\u8981adapt\u4e00\u4e0b", "\n", "            ", "sampler", "=", "SamplerAdapter", "(", "sampler", "=", "sampler", "or", "SequentialSampler", "(", ")", ",", "dataset", "=", "dataset", ")", "\n", "", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "batch_sampler", "=", "batch_sampler", "\n", "\n", "# DataLoader\u7684collate_fn\u8f93\u5165\u662fList[]\uff0c\u91cc\u9762\u7684\u5143\u7d20\u662fdataset[index]\u8fd4\u56de\u7684\u7ed3\u679c", "\n", "if", "collate_fn", "is", "None", ":", "\n", "# pytoch <= 1.1 \u4e2d\u4e0d\u80fd\u8bbe\u7f6ecollate_fn=None", "\n", "            ", "self", ".", "dataiter", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "self", ".", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "drop_last", ",", "\n", "timeout", "=", "timeout", ",", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "batch_sampler", "=", "batch_sampler", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataiter", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "self", ".", "sampler", ",", "\n", "collate_fn", "=", "collate_fn", ",", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "drop_last", ",", "\n", "timeout", "=", "timeout", ",", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "batch_sampler", "=", "batch_sampler", ")", "\n", "\n", "# \u4ee5sampler\u7684\u6570\u91cf\u4e3a\u51c6\uff0c\u56e0\u4e3aDistributedSampler\u7684\u65f6\u5019\u6bcf\u4e2a\u8fdb\u7a0b\u4e0a\u5e76\u4e0d\u662f\u6240\u6709\u7684\u6570\u636e\u90fd\u7528\u4e0a\u4e86", "\n", "", "if", "self", ".", "batch_sampler", "is", "None", ":", "\n", "            ", "self", ".", "_num_batches", "=", "self", ".", "get_num_batches", "(", "len", "(", "self", ".", "dataiter", ".", "sampler", ")", ",", "batch_size", ",", "drop_last", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_num_batches", "=", "len", "(", "self", ".", "batch_sampler", ")", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "cur_batch_indices", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.num_batches": [[166, 169], ["None"], "methods", ["None"], ["", "@", "num_batches", ".", "setter", "\n", "def", "num_batches", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_num_batches", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.init_iter": [[170, 172], ["None"], "methods", ["None"], ["", "def", "init_iter", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.get_num_batches": [[173, 187], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_num_batches", "(", "num_samples", ",", "batch_size", ",", "drop_last", ")", ":", "\n", "        ", "r\"\"\"\n        \u8ba1\u7b97batch\u7684\u6570\u91cf\u3002\u7528\u4e8e\u524d\u7aef\u663e\u793a\u8fdb\u5ea6\n\n        :param int num_samples:\n        :param int batch_size:\n        :param bool drop_last: \u5982\u679c\u6700\u540e\u4e00\u4e2abatch\u6ca1\u6709batch_size\u8fd9\u4e48\u591a\uff0c\u662f\u5426\u5c31\u4e22\u6389\u3002\n        :return:\n        \"\"\"", "\n", "num_batches", "=", "num_samples", "//", "batch_size", "\n", "if", "not", "drop_last", "and", "(", "num_samples", "%", "batch_size", ">", "0", ")", ":", "\n", "            ", "num_batches", "+=", "1", "\n", "", "return", "num_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.get_batch_indices": [[188, 195], ["None"], "methods", ["None"], ["", "def", "get_batch_indices", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u83b7\u53d6\u6700\u8fd1\u8f93\u51fa\u7684batch\u7684index\u3002\u7528\u4e8e\u6eaf\u6e90\u5f53\u524dbatch\u7684\u6570\u636e\n\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "cur_batch_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.__len__": [[196, 198], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.dataset": [[199, 207], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u83b7\u53d6\u6b63\u5728\u53c2\u4e0eiterate\u7684dataset\n\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "dataiter", ".", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.__iter__": [[208, 216], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u7528\u4e8e\u5b9e\u9645\u6570\u636e\u5faa\u73af\u7684\u7c7b\uff0c\u8fd4\u56de\u503c\u9700\u8981\u4e3a\u4e24\u4e2adict, \u7b2c\u4e00\u4e2adict\u4e2d\u7684\u5185\u5bb9\u4f1a\u8ba4\u4e3a\u662finput, \u7b2c\u4e8c\u4e2adict\u4e2d\u7684\u5185\u5bb9\u4f1a\u8ba4\u4e3a\u662ftarget\n\n        :return:\n        \"\"\"", "\n", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.DataSetIter.__init__": [[230, 262], ["isinstance", "batch.DataSetGetter", "batch.BatchIter.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "None", ",", "as_numpy", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "timeout", "=", "0", ",", "worker_init_fn", "=", "None", ",", "batch_sampler", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param dataset: :class:`~fastNLP.DataSet` \u5bf9\u8c61, \u6570\u636e\u96c6\n        :param int batch_size: \u53d6\u51fa\u7684batch\u5927\u5c0f\n        :param sampler: \u89c4\u5b9a\u4f7f\u7528\u7684 :class:`~fastNLP.Sampler` \u65b9\u5f0f. \u82e5\u4e3a ``None`` , \u4f7f\u7528 :class:`~fastNLP.SequentialSampler`.\n    \n            Default: ``None``\n        :param bool as_numpy: \u82e5\u4e3a ``True`` , \u8f93\u51fabatch\u4e3a numpy.array. \u5426\u5219\u4e3a :class:`torch.Tensor`.\n\n            Default: ``False``\n        :param int num_workers: \u4f7f\u7528\u591a\u5c11\u4e2a\u8fdb\u7a0b\u6765\u9884\u5904\u7406\u6570\u636e\n        :param  bool pin_memory: \u662f\u5426\u5c06\u4ea7\u751f\u7684tensor\u4f7f\u7528pin memory, \u53ef\u80fd\u4f1a\u52a0\u5feb\u901f\u5ea6\u3002\n        :param bool drop_last: \u5982\u679c\u6700\u540e\u4e00\u4e2abatch\u6ca1\u6709batch_size\u8fd9\u4e48\u591asample\uff0c\u5c31\u6254\u6389\u6700\u540e\u4e00\u4e2a\n        :param timeout: \u751f\u6210\u4e00\u4e2abatch\u7684timeout\u503c\n        :param worker_init_fn: \u5728\u6bcf\u4e2aworker\u542f\u52a8\u65f6\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u4f1a\u4f20\u5165\u4e00\u4e2a\u503c\uff0c\u8be5\u503c\u662fworker\u7684index\u3002\n        :param batch_sampler: \u5f53\u6bcf\u6b21batch\u53d6\u51fa\u7684\u6570\u636e\u6570\u91cf\u4e0d\u4e00\u81f4\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8be5sampler\u3002batch_sampler\u6bcf\u6b21iter\u5e94\u8be5\u8f93\u51fa\u4e00\u4e2alist\u7684index\u3002\n            \u5f53batch_sampler\u4e0d\u4e3aNone\u65f6\uff0c\u53c2\u6570batch_size, sampler, drop_last\u4f1a\u88ab\u5ffd\u7565\u3002\n        \"\"\"", "\n", "assert", "isinstance", "(", "dataset", ",", "DataSet", ")", "\n", "dataset", "=", "DataSetGetter", "(", "dataset", ",", "as_numpy", ")", "\n", "collate_fn", "=", "dataset", ".", "collate_fn", "\n", "if", "batch_sampler", "is", "not", "None", ":", "\n", "            ", "batch_size", "=", "1", "\n", "sampler", "=", "None", "\n", "drop_last", "=", "False", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "pin_memory", ",", "\n", "drop_last", "=", "drop_last", ",", "timeout", "=", "timeout", ",", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "collate_fn", "=", "collate_fn", ",", "batch_sampler", "=", "batch_sampler", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.DataSetIter.__iter__": [[264, 269], ["batch.DataSetIter.init_iter"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.init_iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "init_iter", "(", ")", "\n", "for", "indices", ",", "batch_x", ",", "batch_y", "in", "self", ".", "dataiter", ":", "\n", "            ", "self", ".", "cur_batch_indices", "=", "indices", "\n", "yield", "batch_x", ",", "batch_y", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.TorchLoaderIter.__init__": [[399, 432], ["batch.BatchIter.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "collate_fn", ",", "batch_size", "=", "1", ",", "sampler", "=", "None", ",", "\n", "num_workers", "=", "0", ",", "pin_memory", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "timeout", "=", "0", ",", "worker_init_fn", "=", "None", ",", "\n", "batch_sampler", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param dataset: \u5b9e\u73b0\u4e86__getitem__\u548c__len__\u65b9\u6cd5\u7684\u6570\u636e\u5bb9\u5668\u3002\n        :param callable collate_fn: \u7528\u4e8e\u5c06\u6837\u672c\u7ec4\u5408\u6210batch\u7684\u51fd\u6570\u3002\u8f93\u5165\u4e3a[dataset[idx1], dataset[idx2], ...], \u5373dataset\u4e2d\n            __getitem__\u8fd4\u56de\u503c\u7ec4\u6210\u7684list\uff0c\u8fd4\u56de\u503c\u5fc5\u987b\u4e3a\u4e24\u4e2adict\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2adict\u4f1a\u88ab\u8ba4\u4e3a\u662finput\uff0c\u7b2c\u4e8c\u4e2adict\u4e2d\u7684\u5185\u5bb9\u88ab\u8ba4\u4e3a\u662ftarget\u3002\n            \u9700\u8981\u8f6c\u6362\u4e3atensor\u7684\u6570\u636e\uff0c\u9700\u8981\u5728collate_fn\u4e2d\u8f6c\u5316\uff0c\u4f46\u4e0d\u9700\u8981\u8f6c\u79fb\u5230\u5bf9\u5e94device\u3002\n        :param int batch_size: \u53d6\u51fa\u7684batch\u5927\u5c0f\n        :param sampler: \u89c4\u5b9a\u4f7f\u7528\u7684 :class:`~fastNLP.Sampler` \u65b9\u5f0f. \u82e5\u4e3a ``None`` , \u4f7f\u7528 :class:`~fastNLP.SequentialSampler`.\n            Default: ``None``\n        :param int num_workers: \u4f7f\u7528\u591a\u5c11\u4e2a\u8fdb\u7a0b\u6765\u9884\u5904\u7406\u6570\u636e\n        :param bool pin_memory: \u662f\u5426\u5c06\u4ea7\u751f\u7684tensor\u4f7f\u7528pin memory, \u53ef\u80fd\u4f1a\u52a0\u5feb\u901f\u5ea6\u3002\n        :param bool drop_last: \u5982\u679c\u6700\u540e\u4e00\u4e2abatch\u6ca1\u6709batch_size\u8fd9\u4e48\u591asample\uff0c\u5c31\u6254\u6389\u6700\u540e\u4e00\u4e2a\n        :param timeout: \u751f\u6210\u4e00\u4e2abatch\u7684timeout\u503c\n        :param worker_init_fn: \u5728\u6bcf\u4e2aworker\u542f\u52a8\u65f6\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u4f1a\u4f20\u5165\u4e00\u4e2a\u503c\uff0c\u8be5\u503c\u662fworker\u7684index\u3002\n        :param batch_sampler: \u5f53\u6bcf\u6b21batch\u53d6\u51fa\u7684\u6570\u636e\u6570\u91cf\u4e0d\u4e00\u81f4\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8be5sampler\u3002batch_sampler\u6bcf\u6b21iter\u5e94\u8be5\u8f93\u51fa\u4e00\u4e2alist\u7684index\u3002\n            \u5f53batch_sampler\u4e0d\u4e3aNone\u65f6\uff0c\u53c2\u6570batch_size, sampler, drop_last\u4f1a\u88ab\u5ffd\u7565\u3002\n        \"\"\"", "\n", "assert", "len", "(", "dataset", ")", ">", "0", "\n", "assert", "collate_fn", "is", "not", "None", ",", "\"You must pass collate_fn to pad the batch.\"", "\n", "if", "batch_sampler", "is", "not", "None", ":", "\n", "            ", "batch_size", "=", "1", "\n", "sampler", "=", "None", "\n", "drop_last", "=", "False", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "dataset", "=", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "pin_memory", ",", "\n", "drop_last", "=", "drop_last", ",", "timeout", "=", "timeout", ",", "worker_init_fn", "=", "worker_init_fn", ",", "\n", "collate_fn", "=", "collate_fn", ",", "batch_sampler", "=", "batch_sampler", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.TorchLoaderIter.__iter__": [[434, 439], ["batch.TorchLoaderIter.init_iter"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.init_iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "init_iter", "(", ")", "\n", "for", "batch_x", ",", "batch_y", "in", "self", ".", "dataiter", ":", "\n", "            ", "self", ".", "cur_batch_indices", "=", "None", "\n", "yield", "batch_x", ",", "batch_y", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch._set_python_is_exit": [[28, 31], ["None"], "function", ["None"], ["def", "_set_python_is_exit", "(", ")", ":", "\n", "    ", "global", "_python_is_exit", "\n", "_python_is_exit", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch._pad": [[36, 49], ["batch_dict.items", "numpy.array", "f.pad", "batch._to_tensor"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pad", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch._to_tensor"], ["def", "_pad", "(", "batch_dict", ",", "dataset", ",", "as_numpy", ")", ":", "\n", "    ", "result", "=", "{", "}", "\n", "for", "n", ",", "vlist", "in", "batch_dict", ".", "items", "(", ")", ":", "\n", "        ", "f", "=", "dataset", ".", "field_arrays", "[", "n", "]", "\n", "if", "f", ".", "padder", "is", "None", ":", "\n", "            ", "result", "[", "n", "]", "=", "np", ".", "array", "(", "vlist", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "f", ".", "pad", "(", "vlist", ")", "\n", "if", "not", "as_numpy", ":", "\n", "                ", "res", ",", "_", "=", "_to_tensor", "(", "res", ",", "field_dtype", "=", "f", ".", "dtype", ")", "\n", "", "result", "[", "n", "]", "=", "res", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch._to_tensor": [[441, 466], ["torch.is_tensor", "torch.is_tensor", "isinstance", "issubclass", "torch.as_tensor", "torch.as_tensor", "isinstance", "new_batch.long.dtype.__repr__", "new_batch.long.float", "new_batch.long.dtype.__repr__", "new_batch.long.long"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.__repr__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.__repr__"], ["", "", "", "def", "_to_tensor", "(", "batch", ",", "field_dtype", ")", ":", "\n", "    ", "r\"\"\"\n\n    :param batch: np.array()\n    :param field_dtype: \u6570\u636e\u7c7b\u578b\n    :return: batch, flag. \u5982\u679c\u4f20\u5165\u7684\u6570\u636e\u652f\u6301\u8f6c\u4e3atensor\uff0c\u8fd4\u56de\u7684batch\u5c31\u662ftensor\uff0c\u4e14flag\u4e3aTrue\uff1b\u5982\u679c\u4f20\u5165\u7684\u6570\u636e\u4e0d\u652f\u6301\u8f6c\u4e3atensor\uff0c\n        \u8fd4\u56de\u7684batch\u5c31\u662f\u539f\u6765\u7684\u6570\u636e\uff0c\u4e14flag\u4e3aFalse\n    \"\"\"", "\n", "try", ":", "\n", "        ", "if", "field_dtype", "is", "not", "None", "and", "isinstance", "(", "field_dtype", ",", "type", ")", "and", "issubclass", "(", "field_dtype", ",", "Number", ")", "and", "not", "isinstance", "(", "batch", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "new_batch", "=", "torch", ".", "as_tensor", "(", "batch", ")", "\n", "flag", "=", "True", "\n", "", "else", ":", "\n", "            ", "new_batch", "=", "batch", "\n", "flag", "=", "False", "\n", "", "if", "torch", ".", "is_tensor", "(", "new_batch", ")", ":", "\n", "            ", "if", "'float'", "in", "new_batch", ".", "dtype", ".", "__repr__", "(", ")", ":", "\n", "                ", "new_batch", "=", "new_batch", ".", "float", "(", ")", "\n", "", "elif", "'int'", "in", "new_batch", ".", "dtype", ".", "__repr__", "(", ")", ":", "\n", "                ", "new_batch", "=", "new_batch", ".", "long", "(", ")", "\n", "", "", "return", "new_batch", ",", "flag", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "raise", "e", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer.__init__": [[371, 577], ["object.__init__", "int", "metrics._prepare_metrics._prepare_metrics", "losses._prepare_losser", "isinstance", "isinstance", "isinstance", "model.train", "utils._move_model_to_device", "_parallel_utils._model_contains_inner_module", "int", "int", "int", "isinstance", "abs", "isinstance", "callback.CallbackManager", "isinstance", "TypeError", "ValueError", "ValueError", "ValueError", "batch.DataSetIter", "isinstance", "isinstance", "min", "isinstance", "trainer._check_code", "int", "len", "isinstance", "kwargs.get", "tester.Tester", "isinstance", "warnings.warn", "warnings.warn", "warnings.warn", "warnings.warn", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "RuntimeError", "ValueError", "sampler.RandomSampler.RandomSampler", "hasattr", "TypeError", "warnings.warn", "len", "optimizer.construct_from_pytorch", "isinstance", "TypeError", "isinstance", "sampler.RandomSampler.RandomSampler.set_batch_size", "max", "max", "trainer.Trainer.model.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "TypeError", "kwargs.get", "kwargs.get", "type", "type", "len", "trainer.Trainer.model.parameters", "type", "len", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._prepare_metrics", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses._prepare_losser", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer.train", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._move_model_to_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils._model_contains_inner_module", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer._check_code", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.Adam.construct_from_pytorch", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.BucketSampler.set_batch_size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["def", "__init__", "(", "self", ",", "train_data", ",", "model", ",", "optimizer", "=", "None", ",", "loss", "=", "None", ",", "\n", "batch_size", "=", "32", ",", "sampler", "=", "None", ",", "drop_last", "=", "False", ",", "update_every", "=", "1", ",", "\n", "num_workers", "=", "0", ",", "n_epochs", "=", "10", ",", "print_every", "=", "5", ",", "\n", "dev_data", "=", "None", ",", "metrics", "=", "None", ",", "metric_key", "=", "None", ",", "\n", "validate_every", "=", "-", "1", ",", "save_path", "=", "None", ",", "use_tqdm", "=", "True", ",", "device", "=", "None", ",", "\n", "callbacks", "=", "None", ",", "check_code_level", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        :param train_data: \u8bad\u7ec3\u96c6\uff0c :class:`~fastNLP.DataSet` \u7c7b\u578b\u6216 :class:`~fastNLP.BatchIter` \u7684\u5b50\u7c7b\n        :param nn.modules model: \u5f85\u8bad\u7ec3\u7684\u6a21\u578b\n        :param optimizer: `torch.optim.Optimizer` \u4f18\u5316\u5668\u3002\u5982\u679c\u4e3aNone\uff0c\u5219Trainer\u4f7f\u7528\u9ed8\u8ba4\u7684Adam(model.parameters(), lr=4e-3)\u8fd9\u4e2a\u4f18\u5316\u5668\n        :param int batch_size: \u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u65f6\u5019\u7684batch\u5927\u5c0f\u3002\n        :param loss: \u4f7f\u7528\u7684 :class:`~fastNLP.core.losses.LossBase` \u5bf9\u8c61\u3002\u5f53\u4e3aNone\u65f6\uff0c\u9ed8\u8ba4\u4f7f\u7528 :class:`~fastNLP.LossInForward`\n        :param sampler: Batch\u6570\u636e\u751f\u6210\u7684\u987a\u5e8f\uff0c :class:`~fastNLP.Sampler` \u7c7b\u578b\u3002\u5982\u679c\u4e3aNone\uff0c\u9ed8\u8ba4\u4f7f\u7528 :class:`~fastNLP.RandomSampler`\n        :param drop_last: \u5982\u679c\u6700\u540e\u4e00\u4e2abatch\u6ca1\u6709\u6b63\u597d\u4e3abatch_size\u8fd9\u4e48\u591a\u6570\u636e\uff0c\u5c31\u6254\u6389\u6700\u540e\u4e00\u4e2abatch\n        :param num_workers: int, \u6709\u591a\u5c11\u4e2a\u7ebf\u7a0b\u6765\u8fdb\u884c\u6570\u636epad\u5904\u7406\u3002\n        :param update_every: int, \u591a\u5c11\u6b65\u66f4\u65b0\u4e00\u6b21\u68af\u5ea6\u3002\u7528\u4e8e\u5e0c\u671b\u7d2f\u8ba1\u68af\u5ea6\u7684\u573a\u666f\uff0c\u6bd4\u5982\u9700\u8981128\u7684batch_size, \u4f46\u662f\u76f4\u63a5\u8bbe\u4e3a128\n            \u4f1a\u5bfc\u81f4\u5185\u5b58\u4e0d\u8db3\uff0c\u901a\u8fc7\u8bbe\u7f6ebatch_size=32, update_every=4\u8fbe\u5230\u76ee\u7684\u3002\u5f53optimizer\u4e3aNone\u65f6\uff0c\u8be5\u53c2\u6570\u65e0\u6548\u3002\n        :param int n_epochs: \u9700\u8981\u4f18\u5316\u8fed\u4ee3\u591a\u5c11\u6b21\u3002\n        :param int print_every: \u591a\u5c11\u6b21\u53cd\u5411\u4f20\u64ad\u66f4\u65b0tqdm\u663e\u793a\u7684loss; \u5982\u679cuse_tqdm=False, \u5219\u591a\u5c11\u6b21\u53cd\u5411\u4f20\u64ad\u6253\u5370loss\u3002\n        :param dev_data: \u7528\u4e8e\u505a\u9a8c\u8bc1\u7684DataSet\uff0c :class:`~fastNLP.DataSet` \u7c7b\u578b\u3002\n        :param metrics: \u9a8c\u8bc1\u7684\u8bc4\u4f30\u51fd\u6570\u3002\u53ef\u4ee5\u53ea\u4f7f\u7528\u4e00\u4e2a :class:`Metric<fastNLP.core.metrics.MetricBase>` \uff0c\n            \u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a :class:`Metric<fastNLP.core.metrics.MetricBase>` \uff0c\u901a\u8fc7\u5217\u8868\u4f20\u5165\u3002\n            \u5982\u9a8c\u8bc1\u65f6\u53d6\u5f97\u4e86\u66f4\u597d\u7684\u9a8c\u8bc1\u7ed3\u679c(\u5982\u679c\u6709\u591a\u4e2aMetric\uff0c\u4ee5\u5217\u8868\u4e2d\u7b2c\u4e00\u4e2aMetric\u4e3a\u51c6)\uff0c\u4e14save_path\u4e0d\u4e3aNone\uff0c\n            \u5219\u4fdd\u5b58\u5f53\u524d\u6a21\u578b\u3002Metric\u79cd\u7c7b\u8be6\u89c1 :mod:`metrics\u6a21\u5757 <fastNLP.core.metrics>` \u3002\u4ec5\u5728\u4f20\u5165dev_data\u65f6\u6709\u6548\u3002\n        :param str,None metric_key:  :class:`Metric<fastNLP.core.metrics.MetricBase>` \u6709\u65f6\u4f1a\u6709\u591a\u4e2a\u6307\u6807\uff0c\n            \u6bd4\u5982 :class:`~fastNLP.core.metrics.SpanFPreRecMetric` \u4e2d\u5305\u542b\u4e86'f', 'pre', 'rec'\u3002\u6b64\u65f6\u9700\n            \u8981\u6307\u5b9a\u4ee5\u54ea\u4e2a\u6307\u6807\u4e3a\u51c6\u3002\u53e6\u5916\u6709\u4e9b\u6307\u6807\u662f\u8d8a\u5c0f\u6548\u679c\u8d8a\u597d\uff0c\u6bd4\u5982\u8bed\u8a00\u6a21\u578b\u7684\u56f0\u60d1\u5ea6\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728key\u524d\u9762\u589e\u52a0\u4e00\u4e2a'-'\u6765\u8868\n            \u660e\u9a8c\u8bc1\u65f6\uff0c\u503c\u8d8a\u5c0f\u8d8a\u597d(\u6bd4\u5982: \"-ppl\")\u3002\u4ec5\u5728\u4f20\u5165dev_data\u65f6\u6709\u6548\u3002\n        :param int validate_every: \u591a\u5c11\u4e2astep\u5728\u9a8c\u8bc1\u96c6\u4e0a\u9a8c\u8bc1\u4e00\u6b21; \u5982\u679c\u4e3a-1\uff0c\u5219\u6bcf\u4e2aepoch\u7ed3\u675f\u9a8c\u8bc1\u4e00\u6b21\u3002\u4ec5\u5728\u4f20\u5165dev_data\u65f6\u6709\u6548\u3002\n        :param str,None save_path: \u5c06\u6a21\u578b\u4fdd\u5b58\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u5c06\u81ea\u52a8\u521b\u5efa\u6587\u4ef6\u5939\u3002\u5982\u679c\u4e3aNone\uff0c\u5219\u4e0d\u4fdd\u5b58\u6a21\u578b\u3002\u5982\u679cdev_data\u4e3aNone\uff0c\u5219\u4fdd\u5b58\n            \u6700\u540e\u4e00\u6b21\u8fed\u4ee3\u7684\u6a21\u578b\u3002\u4fdd\u5b58\u7684\u65f6\u5019\u4e0d\u4ec5\u4fdd\u5b58\u4e86\u53c2\u6570\uff0c\u8fd8\u4fdd\u5b58\u4e86\u6a21\u578b\u7ed3\u6784\u3002\u5373\u4fbf\u4f7f\u7528DataParallel\uff0c\u8fd9\u91cc\u4e5f\u53ea\u4fdd\u5b58\u6a21\u578b\u3002\n        :param bool use_tqdm: \u662f\u5426\u4f7f\u7528tqdm\u6765\u663e\u793a\u8bad\u7ec3\u8fdb\u5ea6; \u5982\u679c\u4e3aFalse\uff0c\u5219\u5c06loss\u6253\u5370\u5728\u7ec8\u7aef\u4e2d\u3002\n        :param str,int,torch.device,list(int) device: \u5c06\u6a21\u578bload\u5230\u54ea\u4e2a\u8bbe\u5907\u3002\u9ed8\u8ba4\u4e3aNone\uff0c\u5373Trainer\u4e0d\u5bf9\u6a21\u578b\n            \u7684\u8ba1\u7b97\u4f4d\u7f6e\u8fdb\u884c\u7ba1\u7406\u3002\u652f\u6301\u4ee5\u4e0b\u7684\u8f93\u5165:\n    \n            1. str: ['cpu', 'cuda', 'cuda:0', 'cuda:1', ...] \u4f9d\u6b21\u4e3a'cpu'\u4e2d, \u53ef\u89c1\u7684\u7b2c\u4e00\u4e2aGPU\u4e2d, \u53ef\u89c1\u7684\u7b2c\u4e00\u4e2aGPU\u4e2d,\n            \u53ef\u89c1\u7684\u7b2c\u4e8c\u4e2aGPU\u4e2d;\n    \n            2. torch.device\uff1a\u5c06\u6a21\u578b\u88c5\u8f7d\u5230torch.device\u4e0a\u3002\n    \n            3. int: \u5c06\u4f7f\u7528device_id\u4e3a\u8be5\u503c\u7684gpu\u8fdb\u884c\u8bad\u7ec3\n    \n            4. list(int)\uff1a\u5982\u679c\u591a\u4e8e1\u4e2adevice\uff0c\u5c06\u4f7f\u7528torch.nn.DataParallel\u5305\u88f9model, \u5e76\u4f7f\u7528\u4f20\u5165\u7684device\u3002\n    \n            5. None. \u4e3aNone\u5219\u4e0d\u5bf9\u6a21\u578b\u8fdb\u884c\u4efb\u4f55\u5904\u7406\uff0c\u5982\u679c\u4f20\u5165\u7684model\u4e3atorch.nn.DataParallel\u8be5\u503c\u5fc5\u987b\u4e3aNone\u3002\n    \n            \u5df2\u77e5\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u95ee\u9898\uff1aAdagrad\u4f18\u5316\u5668\u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\u8fd9\u4e2a\u53c2\u6570\uff0c\u8bf7\u624b\u52a8\u7ba1\u7406\u6a21\u578b\u4f4d\u7f6e\u3002\n    \n        :param list(callbacks) callbacks: \u7528\u4e8e\u5728train\u8fc7\u7a0b\u4e2d\u8d77\u8c03\u8282\u4f5c\u7528\u7684\u56de\u8c03\u51fd\u6570\u3002\u6bd4\u5982early stop\uff0cnegative sampling\u7b49\u53ef\u4ee5\n            \u901a\u8fc7callback\u673a\u5236\u5b9e\u73b0\u3002 \u53ef\u4f7f\u7528\u7684callback\u53c2\u89c1 :mod:`callback\u6a21\u5757 <fastNLP.core.callback>`\n        :param int check_code_level: \u6a21\u578b\u68c0\u67e5\u7b49\u7ea7. -1: \u4e0d\u8fdb\u884c\u68c0\u67e5; 0: \u4ec5\u51fa\u73b0\u9519\u8bef\u65f6\u505c\u6b62; 1: \u5982\u679c\u6709field\u6ca1\u6709\u88ab\u4f7f\u7528\uff0c\n            \u62a5\u544a\u8b66\u544a\u4fe1\u606f; 2: \u6709\u4efb\u4f55field\u6ca1\u6709\u88ab\u4f7f\u7528\u90fd\u62a5\u9519. \u68c0\u67e5\u7684\u539f\u7406\u662f\u901a\u8fc7\u4f7f\u7528\u5f88\u5c0f\u7684batch(\u9ed8\u8ba42\u4e2asample)\u6765\u8fd0\u884c\u4ee3\u7801\uff0c\u4f46\u662f\n            \u8fd9\u4e2a\u8fc7\u7a0b\u7406\u8bba\u4e0a\u4e0d\u4f1a\u4fee\u6539\u4efb\u4f55\u53c2\u6570\uff0c\u53ea\u662f\u4f1a\u68c0\u67e5\u80fd\u5426\u8fd0\u884c\u3002\u4f46\u5982\u679c(1)\u6a21\u578b\u4e2d\u5b58\u5728\u5c06batch_size\u5199\u4e3a\u67d0\u4e2a\u56fa\u5b9a\u503c\u7684\u60c5\u51b5\uff1b\n            (2)\u6a21\u578b\u4e2d\u5b58\u5728\u7d2f\u52a0\u524d\u5411\u8ba1\u7b97\u6b21\u6570\u7684\uff0c\u53ef\u80fd\u4f1a\u591a\u8ba1\u7b971\u6b21\u3002\u4ee5\u4e0a\u60c5\u51b5\u5efa\u8bae\u5c06check_code_level\u8bbe\u7f6e\u4e3a-1\u3002\n        :param kwargs: \u652f\u6301\u914d\u7f6e\u53ef\u9009\u53c2\u6570\n            bool test_use_tqdm: \u5728dev\u4e0a\u9a8c\u8bc1\u7684\u65f6\u5019\u662f\u5426\u5f00\u542ftqdm\n            Sampler test_sampler: \u5728evaluate\u7684\u65f6\u5019\u4f7f\u7528\u7684sampler\n        \"\"\"", "\n", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"The type of model must be torch.nn.Module, got {type(model)}.\"", ")", "\n", "\n", "# check metrics and dev_data", "\n", "", "if", "(", "not", "metrics", ")", "and", "dev_data", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"No metric for dev_data evaluation.\"", ")", "\n", "", "if", "metrics", "and", "(", "dev_data", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"No dev_data for evaluations, pass dev_data or set metrics to None. \"", ")", "\n", "\n", "# check update every", "\n", "", "assert", "update_every", ">=", "1", ",", "\"update_every must be no less than 1.\"", "\n", "self", ".", "update_every", "=", "int", "(", "update_every", ")", "\n", "\n", "# check save_path", "\n", "if", "not", "(", "save_path", "is", "None", "or", "isinstance", "(", "save_path", ",", "str", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"save_path can only be None or `str`.\"", ")", "\n", "# prepare evaluate", "\n", "", "metrics", "=", "_prepare_metrics", "(", "metrics", ")", "\n", "\n", "# parse metric_key", "\n", "# increase_better is True. It means the exp result gets better if the indicator increases.", "\n", "# It is true by default.", "\n", "self", ".", "increase_better", "=", "True", "\n", "if", "metric_key", "is", "not", "None", ":", "\n", "            ", "self", ".", "increase_better", "=", "False", "if", "metric_key", "[", "0", "]", "==", "\"-\"", "else", "True", "\n", "self", ".", "metric_key", "=", "metric_key", "[", "1", ":", "]", "if", "metric_key", "[", "0", "]", "==", "\"+\"", "or", "metric_key", "[", "0", "]", "==", "\"-\"", "else", "metric_key", "\n", "", "else", ":", "\n", "            ", "self", ".", "metric_key", "=", "None", "\n", "# prepare loss", "\n", "", "losser", "=", "_prepare_losser", "(", "loss", ")", "\n", "\n", "if", "isinstance", "(", "train_data", ",", "BatchIter", ")", ":", "\n", "            ", "if", "sampler", "is", "not", "None", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"sampler is ignored when train_data is a BatchIter.\"", ")", "\n", "", "if", "num_workers", ">", "0", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"num_workers is ignored when train_data is BatchIter.\"", ")", "\n", "", "if", "drop_last", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"drop_last is ignored when train_data is BatchIter.\"", ")", "\n", "\n", "", "", "if", "isinstance", "(", "model", ",", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "# \u5982\u679c\u662f\u5206\u5e03\u5f0f\u7684", "\n", "# device\u4e3aNone", "\n", "            ", "if", "device", "is", "not", "None", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"device is ignored when model is nn.parallel.DistributedDataParallel.\"", ")", "\n", "device", "=", "None", "\n", "# Sampler\u8981\u662f\u5206\u5e03\u5f0f\u7684", "\n", "", "if", "sampler", "is", "None", ":", "\n", "                ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "train_data", ")", "\n", "", "elif", "not", "isinstance", "(", "sampler", ",", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"When using nn.parallel.DistributedDataParallel, \"", "\n", "\"sampler must be None or torch.utils.data.DistributedSampler.\"", ")", "\n", "# \u4e0d\u80fd\u4fdd\u5b58\u6a21\u578b", "\n", "", "if", "save_path", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Saving model in Distributed situation is not allowed right now.\"", ")", "\n", "", "", "else", ":", "\n", "# sampler check", "\n", "            ", "if", "sampler", "is", "not", "None", "and", "not", "isinstance", "(", "sampler", ",", "(", "Sampler", ",", "torch", ".", "utils", ".", "data", ".", "Sampler", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "f\"The type of sampler should be fastNLP.BaseSampler or pytorch's Sampler, got {type(sampler)}\"", ")", "\n", "", "if", "sampler", "is", "None", ":", "\n", "                ", "sampler", "=", "RandomSampler", "(", ")", "\n", "", "elif", "hasattr", "(", "sampler", ",", "'set_batch_size'", ")", ":", "\n", "                ", "sampler", ".", "set_batch_size", "(", "batch_size", ")", "\n", "\n", "", "", "if", "isinstance", "(", "train_data", ",", "DataSet", ")", ":", "\n", "            ", "self", ".", "data_iterator", "=", "DataSetIter", "(", "dataset", "=", "train_data", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "drop_last", "=", "drop_last", ")", "\n", "", "elif", "isinstance", "(", "train_data", ",", "BatchIter", ")", ":", "\n", "            ", "self", ".", "data_iterator", "=", "train_data", "\n", "train_data", "=", "train_data", ".", "dataset", "\n", "check_code_level", "=", "-", "1", "# \u5f3a\u5236\u8df3\u8fc7\u6821\u9a8c", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"train_data type {} not support\"", ".", "format", "(", "type", "(", "train_data", ")", ")", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "self", ".", "model", "=", "_move_model_to_device", "(", "model", ",", "device", "=", "device", ")", "\n", "if", "_model_contains_inner_module", "(", "self", ".", "model", ")", ":", "\n", "            ", "self", ".", "_forward_func", "=", "self", ".", "model", ".", "module", ".", "forward", "\n", "", "else", ":", "\n", "            ", "self", ".", "_forward_func", "=", "self", ".", "model", ".", "forward", "\n", "", "if", "check_code_level", ">", "-", "1", ":", "\n", "# _check_code \u662f fastNLP \u5e2e\u52a9\u4f60\u68c0\u67e5\u4ee3\u7801\u662f\u5426\u6b63\u786e\u7684\u65b9\u6cd5 \u3002\u5982\u679c\u4f60\u5728\u9519\u8bef\u6808\u4e2d\u770b\u5230\u8fd9\u884c\u6ce8\u91ca\uff0c\u8bf7\u8ba4\u771f\u68c0\u67e5\u4f60\u7684field\u540d\u4e0e\u6a21\u578b\u7684\u8f93\u5165", "\n", "#   \u540d\u662f\u5426\u5339\u914d", "\n", "            ", "dev_dataset", "=", "dev_data", "\n", "if", "isinstance", "(", "dev_data", ",", "BatchIter", ")", ":", "\n", "                ", "dev_dataset", "=", "None", "\n", "warnings", ".", "warn", "(", "\"dev_data is of BatchIter type, ignore validation checking.\"", ")", "\n", "", "check_batch_size", "=", "min", "(", "batch_size", ",", "DEFAULT_CHECK_BATCH_SIZE", ")", "\n", "if", "isinstance", "(", "self", ".", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "_num_devices", "=", "len", "(", "self", ".", "model", ".", "device_ids", ")", "\n", "if", "batch_size", "//", "_num_devices", ">", "1", ":", "# \u5982\u679c\u591a\u5361\u662f\u6bcf\u4e2a\u5361\u53ef\u4ee5\u5206\u591a\u4e2a\u6570\u636e\u7684\uff0c\u5219\u7528\u6bcf\u4e2a\u5361\u7ed9\u4e24\u4e2asample", "\n", "                    ", "check_batch_size", "=", "max", "(", "len", "(", "self", ".", "model", ".", "device_ids", ")", "*", "2", ",", "check_batch_size", ")", "\n", "", "else", ":", "\n", "                    ", "check_batch_size", "=", "max", "(", "len", "(", "self", ".", "model", ".", "device_ids", ")", ",", "check_batch_size", ")", "\n", "", "", "_check_code", "(", "dataset", "=", "train_data", ",", "model", "=", "self", ".", "model", ",", "losser", "=", "losser", ",", "forward_func", "=", "self", ".", "_forward_func", ",", "metrics", "=", "metrics", ",", "\n", "dev_data", "=", "dev_dataset", ",", "metric_key", "=", "self", ".", "metric_key", ",", "check_level", "=", "check_code_level", ",", "\n", "batch_size", "=", "check_batch_size", ")", "\n", "\n", "", "self", ".", "train_data", "=", "train_data", "\n", "self", ".", "dev_data", "=", "dev_data", "# If None, No validation.", "\n", "self", ".", "losser", "=", "losser", "\n", "self", ".", "metrics", "=", "metrics", "\n", "self", ".", "n_epochs", "=", "int", "(", "n_epochs", ")", "\n", "self", ".", "batch_size", "=", "int", "(", "batch_size", ")", "\n", "self", ".", "save_path", "=", "save_path", "\n", "self", ".", "print_every", "=", "int", "(", "print_every", ")", "\n", "self", ".", "validate_every", "=", "int", "(", "validate_every", ")", "if", "validate_every", "!=", "0", "else", "-", "1", "\n", "self", ".", "best_metric_indicator", "=", "None", "\n", "self", ".", "best_dev_epoch", "=", "None", "\n", "self", ".", "best_dev_step", "=", "None", "\n", "self", ".", "best_dev_perf", "=", "None", "\n", "self", ".", "n_steps", "=", "len", "(", "self", ".", "data_iterator", ")", "*", "self", ".", "n_epochs", "\n", "\n", "if", "isinstance", "(", "optimizer", ",", "torch", ".", "optim", ".", "Optimizer", ")", ":", "\n", "            ", "self", ".", "optimizer", "=", "optimizer", "\n", "", "elif", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "self", ".", "optimizer", "=", "optimizer", ".", "construct_from_pytorch", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "elif", "optimizer", "is", "None", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "4e-3", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"optimizer can only be torch.optim.Optimizer type, not {}.\"", ".", "format", "(", "type", "(", "optimizer", ")", ")", ")", "\n", "\n", "", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "use_tqdm", "=", "use_tqdm", "\n", "if", "'test_use_tqdm'", "in", "kwargs", ":", "\n", "            ", "self", ".", "test_use_tqdm", "=", "kwargs", ".", "get", "(", "'test_use_tqdm'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_use_tqdm", "=", "self", ".", "use_tqdm", "\n", "", "self", ".", "pbar", "=", "None", "\n", "self", ".", "print_every", "=", "abs", "(", "self", ".", "print_every", ")", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "if", "self", ".", "dev_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "tester", "=", "Tester", "(", "model", "=", "self", ".", "model", ",", "\n", "data", "=", "self", ".", "dev_data", ",", "\n", "metrics", "=", "self", ".", "metrics", ",", "\n", "batch_size", "=", "kwargs", ".", "get", "(", "\"dev_batch_size\"", ",", "self", ".", "batch_size", ")", ",", "\n", "device", "=", "None", ",", "# \u7531\u4e0a\u9762\u7684\u90e8\u5206\u5904\u7406device", "\n", "verbose", "=", "0", ",", "\n", "use_tqdm", "=", "self", ".", "test_use_tqdm", ",", "\n", "sampler", "=", "kwargs", ".", "get", "(", "'test_sampler'", ",", "None", ")", ")", "\n", "\n", "", "self", ".", "start_time", "=", "None", "# start timestamp", "\n", "\n", "if", "isinstance", "(", "callbacks", ",", "Callback", ")", ":", "\n", "            ", "callbacks", "=", "[", "callbacks", "]", "\n", "\n", "", "self", ".", "callback_manager", "=", "CallbackManager", "(", "env", "=", "{", "\"trainer\"", ":", "self", "}", ",", "\n", "callbacks", "=", "callbacks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer.train": [[578, 650], ["round", "trainer.Trainer.logger.info", "utils._get_model_device", "trainer.Trainer._mode", "str", "time.time", "trainer.Trainer.logger.info", "datetime.datetime.datetime.now().strftime", "trainer.Trainer.callback_manager.on_train_begin", "trainer.Trainer._train", "trainer.Trainer.callback_manager.on_train_end", "trainer.Trainer._load_model", "trainer.Trainer._save_model", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "time.time", "trainer.Trainer.callback_manager.on_exception", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "trainer.Trainer.tester._format_eval_results", "datetime.datetime.datetime.now", "isinstance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_model_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._mode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback.on_train_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._train", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CheckPointCallback.on_train_end", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._load_model", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._save_model", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback.on_exception", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._format_eval_results"], ["", "def", "train", "(", "self", ",", "load_best_model", "=", "True", ",", "on_exception", "=", "'auto'", ")", ":", "\n", "        ", "r\"\"\"\n        \u4f7f\u7528\u8be5\u51fd\u6570\u4f7fTrainer\u5f00\u59cb\u8bad\u7ec3\u3002\n\n        :param bool load_best_model: \u8be5\u53c2\u6570\u53ea\u6709\u5728\u521d\u59cb\u5316\u63d0\u4f9b\u4e86dev_data\u7684\u60c5\u51b5\u4e0b\u6709\u6548\uff0c\u5982\u679cTrue, trainer\u5c06\u5728\u8fd4\u56de\u4e4b\u524d\u91cd\u65b0\u52a0\u8f7ddev\u8868\u73b0\n                \u6700\u597d\u7684\u6a21\u578b\u53c2\u6570\u3002\n        :param str on_exception: \u5728\u8bad\u7ec3\u8fc7\u7a0b\u906d\u9047exception\uff0c\u5e76\u88ab :py:class:Callback \u7684on_exception()\u5904\u7406\u540e\uff0c\u662f\u5426\u7ee7\u7eed\u629b\u51fa\u5f02\u5e38\u3002\n                \u652f\u6301'ignore','raise', 'auto': 'ignore'\u5c06\u6355\u83b7\u5f02\u5e38\uff0c\u5199\u5728Trainer.train()\u540e\u9762\u7684\u4ee3\u7801\u5c06\u7ee7\u7eed\u8fd0\u884c; 'raise'\u5c06\u5f02\u5e38\u629b\u51fa;\n                'auto'\u5c06ignore\u4ee5\u4e0b\u4e24\u79cdException: CallbackException\u4e0eKeyboardInterrupt, raise\u5176\u5b83exception.\n        :return dict: \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u7c7b\u578b\u7684\u6570\u636e,\n                \u5185\u542b\u4ee5\u4e0b\u5185\u5bb9::\n\n                    seconds: float, \u8868\u793a\u8bad\u7ec3\u65f6\u957f\n                    \u4ee5\u4e0b\u4e09\u4e2a\u5185\u5bb9\u53ea\u6709\u5728\u63d0\u4f9b\u4e86dev_data\u7684\u60c5\u51b5\u4e0b\u4f1a\u6709\u3002\n                    best_eval: Dict of Dict, \u8868\u793aevaluation\u7684\u7ed3\u679c\u3002\u7b2c\u4e00\u5c42\u7684key\u4e3aMetric\u7684\u540d\u79f0\uff0c\n                                \u7b2c\u4e8c\u5c42\u7684key\u4e3a\u5177\u4f53\u7684Metric\n                    best_epoch: int\uff0c\u5728\u7b2c\u51e0\u4e2aepoch\u53d6\u5f97\u7684\u6700\u4f73\u503c\n                    best_step: int, \u5728\u7b2c\u51e0\u4e2astep(batch)\u66f4\u65b0\u53d6\u5f97\u7684\u6700\u4f73\u503c\n\n        \"\"\"", "\n", "results", "=", "{", "}", "\n", "if", "self", ".", "n_epochs", "<=", "0", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "f\"training epoch is {self.n_epochs}, nothing was done.\"", ")", "\n", "results", "[", "'seconds'", "]", "=", "0.", "\n", "return", "results", "\n", "", "try", ":", "\n", "            ", "self", ".", "_model_device", "=", "_get_model_device", "(", "self", ".", "model", ")", "\n", "self", ".", "_mode", "(", "self", ".", "model", ",", "is_test", "=", "False", ")", "\n", "self", ".", "_load_best_model", "=", "load_best_model", "\n", "# \u52a0\u4e0amillsecond\uff0c\u9632\u6b62\u4e24\u4e2a\u592a\u63a5\u8fd1\u7684\u4fdd\u5b58", "\n", "self", ".", "start_time", "=", "str", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H-%M-%S-%f'", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"training epochs started \"", "+", "self", ".", "start_time", ")", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "epoch", "=", "1", "\n", "try", ":", "\n", "                ", "self", ".", "callback_manager", ".", "on_train_begin", "(", ")", "\n", "self", ".", "_train", "(", ")", "\n", "self", ".", "callback_manager", ".", "on_train_end", "(", ")", "\n", "\n", "", "except", "BaseException", "as", "e", ":", "\n", "                ", "self", ".", "callback_manager", ".", "on_exception", "(", "e", ")", "\n", "if", "on_exception", "==", "'auto'", ":", "\n", "                    ", "if", "not", "isinstance", "(", "e", ",", "(", "CallbackException", ",", "KeyboardInterrupt", ")", ")", ":", "\n", "                        ", "raise", "e", "\n", "", "", "elif", "on_exception", "==", "'raise'", ":", "\n", "                    ", "raise", "e", "\n", "\n", "", "", "if", "self", ".", "dev_data", "is", "not", "None", "and", "self", ".", "best_dev_perf", "is", "not", "None", "and", "load_best_model", ":", "\n", "                ", "model_name", "=", "\"best_\"", "+", "\"_\"", ".", "join", "(", "[", "self", ".", "model", ".", "__class__", ".", "__name__", ",", "self", ".", "metric_key", ",", "self", ".", "start_time", "]", ")", "\n", "load_succeed", "=", "self", ".", "_load_model", "(", "self", ".", "model", ",", "model_name", ")", "\n", "if", "load_succeed", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"Reloaded the best model.\"", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"Fail to reload best model.\"", ")", "\n", "\n", "", "", "if", "self", ".", "dev_data", "is", "None", "and", "self", ".", "save_path", "is", "not", "None", ":", "\n", "                ", "model_name", "=", "\"_\"", ".", "join", "(", "[", "self", ".", "model", ".", "__class__", ".", "__name__", ",", "self", ".", "start_time", "]", ")", "\n", "self", ".", "_save_model", "(", "self", ".", "model", ",", "model_name", ")", "\n", "\n", "", "", "finally", ":", "\n", "            ", "if", "self", ".", "dev_data", "is", "not", "None", "and", "self", ".", "best_dev_perf", "is", "not", "None", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\n", "\"\\nIn Epoch:{}/Step:{}, got best dev performance:\"", ".", "format", "(", "self", ".", "best_dev_epoch", ",", "self", ".", "best_dev_step", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "self", ".", "tester", ".", "_format_eval_results", "(", "self", ".", "best_dev_perf", ")", ")", "\n", "results", "[", "'best_eval'", "]", "=", "self", ".", "best_dev_perf", "\n", "results", "[", "'best_epoch'", "]", "=", "self", ".", "best_dev_epoch", "\n", "results", "[", "'best_step'", "]", "=", "self", ".", "best_dev_step", "\n", "\n", "", "", "results", "[", "'seconds'", "]", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ",", "2", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._train": [[651, 724], ["time.time", "inner_tqdm", "range", "pbar.close", "pbar.set_description_str", "trainer.Trainer.callback_manager.on_epoch_begin", "trainer.Trainer.callback_manager.on_epoch_end", "utils._move_dict_value_to_device", "trainer.Trainer.data_iterator.get_batch_indices", "trainer.Trainer.callback_manager.on_batch_begin", "trainer.Trainer._data_forward", "trainer.Trainer.callback_manager.on_loss_begin", "trainer.Trainer._compute_loss().mean", "trainer.Trainer.item", "trainer.Trainer.callback_manager.on_backward_begin", "trainer.Trainer._grad_backward", "trainer.Trainer.callback_manager.on_backward_end", "trainer.Trainer._update", "trainer.Trainer.callback_manager.on_step_end", "trainer.Trainer.callback_manager.on_batch_end", "trainer.Trainer._do_validation", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "pbar.set_postfix_str", "trainer.Trainer._do_validation", "trainer.Trainer.logger.info", "trainer.Trainer.logger.info", "trainer.Trainer._compute_loss", "float", "pbar.update", "time.time", "datetime.datetime.timedelta", "trainer.Trainer.tester._format_eval_results", "trainer.Trainer.tester._format_eval_results", "round"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.close", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRFinder.on_epoch_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CheckPointCallback.on_epoch_end", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._move_dict_value_to_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.batch.BatchIter.get_batch_indices", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.TensorboardCallback.on_batch_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._data_forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_loss_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.TensorboardCallback.on_backward_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._grad_backward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.WarmupCallback.on_backward_end", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_step_end", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRFinder.on_batch_end", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._do_validation", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.set_postfix_str", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._do_validation", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._compute_loss", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._format_eval_results", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._format_eval_results"], ["", "def", "_train", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "use_tqdm", ":", "\n", "            ", "from", ".", "utils", "import", "_pseudo_tqdm", "as", "inner_tqdm", "\n", "", "else", ":", "\n", "            ", "inner_tqdm", "=", "tqdm", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "with", "inner_tqdm", "(", "total", "=", "self", ".", "n_steps", ",", "postfix", "=", "'loss:{0:<6.5f}'", ",", "leave", "=", "False", ",", "dynamic_ncols", "=", "True", ",", "\n", "initial", "=", "self", ".", "step", ")", "as", "pbar", ":", "\n", "            ", "self", ".", "pbar", "=", "pbar", "\n", "avg_loss", "=", "0", "\n", "self", ".", "batch_per_epoch", "=", "self", ".", "data_iterator", ".", "num_batches", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ",", "self", ".", "n_epochs", "+", "1", ")", ":", "\n", "                ", "self", ".", "epoch", "=", "epoch", "\n", "pbar", ".", "set_description_str", "(", "desc", "=", "\"Epoch {}/{}\"", ".", "format", "(", "epoch", ",", "self", ".", "n_epochs", ")", ")", "\n", "# early stopping", "\n", "self", ".", "callback_manager", ".", "on_epoch_begin", "(", ")", "\n", "for", "batch_x", ",", "batch_y", "in", "self", ".", "data_iterator", ":", "\n", "                    ", "self", ".", "step", "+=", "1", "\n", "_move_dict_value_to_device", "(", "batch_x", ",", "batch_y", ",", "device", "=", "self", ".", "_model_device", ")", "\n", "indices", "=", "self", ".", "data_iterator", ".", "get_batch_indices", "(", ")", "\n", "# negative sampling; replace unknown; re-weight batch_y", "\n", "self", ".", "callback_manager", ".", "on_batch_begin", "(", "batch_x", ",", "batch_y", ",", "indices", ")", "\n", "prediction", "=", "self", ".", "_data_forward", "(", "self", ".", "model", ",", "batch_x", ")", "\n", "\n", "# edit prediction", "\n", "self", ".", "callback_manager", ".", "on_loss_begin", "(", "batch_y", ",", "prediction", ")", "\n", "loss", "=", "self", ".", "_compute_loss", "(", "prediction", ",", "batch_y", ")", ".", "mean", "(", ")", "\n", "loss", "=", "loss", "/", "self", ".", "update_every", "\n", "avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "# Is loss NaN or inf? requires_grad = False", "\n", "self", ".", "callback_manager", ".", "on_backward_begin", "(", "loss", ")", "\n", "self", ".", "_grad_backward", "(", "loss", ")", "\n", "self", ".", "callback_manager", ".", "on_backward_end", "(", ")", "\n", "\n", "self", ".", "_update", "(", ")", "\n", "self", ".", "callback_manager", ".", "on_step_end", "(", ")", "\n", "\n", "if", "self", ".", "step", "%", "self", ".", "print_every", "==", "0", ":", "\n", "                        ", "avg_loss", "=", "float", "(", "avg_loss", ")", "/", "self", ".", "print_every", "\n", "if", "self", ".", "use_tqdm", ":", "\n", "                            ", "print_output", "=", "\"loss:{:<6.5f}\"", ".", "format", "(", "avg_loss", ")", "\n", "pbar", ".", "update", "(", "self", ".", "print_every", ")", "\n", "", "else", ":", "\n", "                            ", "end", "=", "time", ".", "time", "(", ")", "\n", "diff", "=", "timedelta", "(", "seconds", "=", "round", "(", "end", "-", "start", ")", ")", "\n", "print_output", "=", "\"[epoch: {:>3} step: {:>4}] train loss: {:>4.6} time: {}\"", ".", "format", "(", "\n", "epoch", ",", "self", ".", "step", ",", "avg_loss", ",", "diff", ")", "\n", "", "pbar", ".", "set_postfix_str", "(", "print_output", ")", "\n", "avg_loss", "=", "0", "\n", "", "self", ".", "callback_manager", ".", "on_batch_end", "(", ")", "\n", "\n", "if", "(", "self", ".", "validate_every", ">", "0", "and", "self", ".", "step", "%", "self", ".", "validate_every", "==", "0", ")", "and", "self", ".", "dev_data", "is", "not", "None", ":", "\n", "                        ", "eval_res", "=", "self", ".", "_do_validation", "(", "epoch", "=", "epoch", ",", "step", "=", "self", ".", "step", ")", "\n", "eval_str", "=", "\"Evaluation on dev at Epoch {}/{}. Step:{}/{}: \"", ".", "format", "(", "epoch", ",", "self", ".", "n_epochs", ",", "self", ".", "step", ",", "\n", "self", ".", "n_steps", ")", "\n", "# pbar.write(eval_str + '\\n')", "\n", "self", ".", "logger", ".", "info", "(", "eval_str", ")", "\n", "self", ".", "logger", ".", "info", "(", "self", ".", "tester", ".", "_format_eval_results", "(", "eval_res", ")", "+", "'\\n'", ")", "\n", "# ================= mini-batch end ==================== #", "\n", "", "", "if", "self", ".", "validate_every", "<", "0", "and", "self", ".", "dev_data", "is", "not", "None", ":", "# \u5728epoch\u7ed3\u675f\u4e4b\u540e\u7684evaluate", "\n", "                    ", "eval_res", "=", "self", ".", "_do_validation", "(", "epoch", "=", "epoch", ",", "step", "=", "self", ".", "step", ")", "\n", "eval_str", "=", "\"Evaluation on dev at Epoch {}/{}. Step:{}/{}: \"", ".", "format", "(", "epoch", ",", "self", ".", "n_epochs", ",", "self", ".", "step", ",", "\n", "self", ".", "n_steps", ")", "\n", "# pbar.write(eval_str + '\\n')", "\n", "self", ".", "logger", ".", "info", "(", "eval_str", ")", "\n", "self", ".", "logger", ".", "info", "(", "self", ".", "tester", ".", "_format_eval_results", "(", "eval_res", ")", "+", "'\\n'", ")", "\n", "# lr decay; early stopping", "\n", "", "self", ".", "callback_manager", ".", "on_epoch_end", "(", ")", "\n", "# =============== epochs end =================== #", "\n", "", "pbar", ".", "close", "(", ")", "\n", "self", ".", "pbar", "=", "None", "\n", "# ============ tqdm end ============== #", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._do_validation": [[726, 744], ["trainer.Trainer.callback_manager.on_valid_begin", "trainer.Trainer.tester.test", "trainer.Trainer._better_eval_result", "trainer.Trainer.callback_manager.on_valid_end", "trainer.Trainer._save_model", "param.cpu().clone", "trainer.Trainer.model.state_dict().items", "param.cpu", "trainer.Trainer.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback.on_valid_begin", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester.test", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._better_eval_result", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback.on_valid_end", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._save_model", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "", "def", "_do_validation", "(", "self", ",", "epoch", ",", "step", ")", ":", "\n", "        ", "self", ".", "callback_manager", ".", "on_valid_begin", "(", ")", "\n", "res", "=", "self", ".", "tester", ".", "test", "(", ")", "\n", "\n", "is_better_eval", "=", "False", "\n", "if", "self", ".", "_better_eval_result", "(", "res", ")", ":", "\n", "            ", "if", "self", ".", "save_path", "is", "not", "None", ":", "\n", "                ", "self", ".", "_save_model", "(", "self", ".", "model", ",", "\n", "\"best_\"", "+", "\"_\"", ".", "join", "(", "[", "self", ".", "model", ".", "__class__", ".", "__name__", ",", "self", ".", "metric_key", ",", "self", ".", "start_time", "]", ")", ")", "\n", "", "elif", "self", ".", "_load_best_model", ":", "\n", "                ", "self", ".", "_best_model_states", "=", "{", "name", ":", "param", ".", "cpu", "(", ")", ".", "clone", "(", ")", "for", "name", ",", "param", "in", "self", ".", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "}", "\n", "", "self", ".", "best_dev_perf", "=", "res", "\n", "self", ".", "best_dev_epoch", "=", "epoch", "\n", "self", ".", "best_dev_step", "=", "step", "\n", "is_better_eval", "=", "True", "\n", "# get validation results; adjust optimizer", "\n", "", "self", ".", "callback_manager", ".", "on_valid_end", "(", "res", ",", "self", ".", "metric_key", ",", "self", ".", "optimizer", ",", "is_better_eval", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._mode": [[745, 756], ["model.eval", "model.train"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer.train"], ["", "def", "_mode", "(", "self", ",", "model", ",", "is_test", "=", "False", ")", ":", "\n", "        ", "r\"\"\"Train mode or Test mode. This is for PyTorch currently.\n\n        :param model: a PyTorch model\n        :param bool is_test: whether in test mode or not.\n\n        \"\"\"", "\n", "if", "is_test", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._update": [[757, 763], ["trainer.Trainer.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.AdamW.step"], ["", "", "def", "_update", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Perform weight update on a model.\n\n        \"\"\"", "\n", "if", "self", ".", "step", "%", "self", ".", "update_every", "==", "0", ":", "\n", "            ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._data_forward": [[764, 771], ["utils._build_args", "network", "isinstance", "TypeError", "utils._get_func_signature", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._build_args", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature"], ["", "", "def", "_data_forward", "(", "self", ",", "network", ",", "x", ")", ":", "\n", "        ", "x", "=", "_build_args", "(", "self", ".", "_forward_func", ",", "**", "x", ")", "\n", "y", "=", "network", "(", "**", "x", ")", "\n", "if", "not", "isinstance", "(", "y", ",", "dict", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "f\"The return value of {_get_func_signature(self._forward_func)} should be dict, got {type(y)}.\"", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._grad_backward": [[772, 782], ["loss.backward", "trainer.Trainer.model.zero_grad"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.lexicalizedPCFG.backward"], ["", "def", "_grad_backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "r\"\"\"Compute gradient with link rules.\n\n        :param loss: a scalar where back-prop starts\n\n        For PyTorch, just do \"loss.backward()\"\n        \"\"\"", "\n", "if", "(", "self", ".", "step", "-", "1", ")", "%", "self", ".", "update_every", "==", "0", ":", "\n", "            ", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._compute_loss": [[783, 791], ["trainer.Trainer.losser"], "methods", ["None"], ["", "def", "_compute_loss", "(", "self", ",", "predict", ",", "truth", ")", ":", "\n", "        ", "r\"\"\"Compute loss given prediction and ground truth.\n\n        :param predict: prediction dict, produced by model.forward\n        :param truth: ground truth dict, produced by batch_y\n        :return: a scalar\n        \"\"\"", "\n", "return", "self", ".", "losser", "(", "predict", ",", "truth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._save_model": [[792, 814], ["os.path.join", "_parallel_utils._model_contains_inner_module", "os.path.exists", "os.makedirs", "model.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "model.cpu", "torch.save", "torch.save", "torch.save", "torch.save", "model.to", "state_dict[].cpu"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils._model_contains_inner_module", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], ["", "def", "_save_model", "(", "self", ",", "model", ",", "model_name", ",", "only_param", "=", "False", ")", ":", "\n", "        ", "r\"\"\" \u5b58\u50a8\u4e0d\u542b\u6709\u663e\u5361\u4fe1\u606f\u7684state_dict\u6216model\n        :param model:\n        :param model_name:\n        :param only_param:\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "save_path", "is", "not", "None", ":", "\n", "            ", "model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "", "if", "_model_contains_inner_module", "(", "model", ")", ":", "\n", "                ", "model", "=", "model", ".", "module", "\n", "", "if", "only_param", ":", "\n", "                ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "state_dict", ":", "\n", "                    ", "state_dict", "[", "key", "]", "=", "state_dict", "[", "key", "]", ".", "cpu", "(", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "model_path", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "cpu", "(", ")", "\n", "torch", ".", "save", "(", "model", ",", "model_path", ")", "\n", "model", ".", "to", "(", "self", ".", "_model_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._load_model": [[815, 832], ["os.path.join", "_parallel_utils._model_contains_inner_module", "hasattr", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "torch.load().state_dict", "model.module.load_state_dict", "model.load_state_dict", "model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils._model_contains_inner_module", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "", "", "def", "_load_model", "(", "self", ",", "model", ",", "model_name", ",", "only_param", "=", "False", ")", ":", "\n", "# \u8fd4\u56debool\u503c\u6307\u793a\u662f\u5426\u6210\u529freload\u6a21\u578b", "\n", "        ", "if", "self", ".", "save_path", "is", "not", "None", ":", "\n", "            ", "model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "model_name", ")", "\n", "if", "only_param", ":", "\n", "                ", "states", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "", "else", ":", "\n", "                ", "states", "=", "torch", ".", "load", "(", "model_path", ")", ".", "state_dict", "(", ")", "\n", "", "if", "_model_contains_inner_module", "(", "model", ")", ":", "\n", "                ", "model", ".", "module", ".", "load_state_dict", "(", "states", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "load_state_dict", "(", "states", ")", "\n", "", "", "elif", "hasattr", "(", "self", ",", "\"_best_model_states\"", ")", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "self", ".", "_best_model_states", ")", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer._better_eval_result": [[833, 857], ["trainer._check_eval_results"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer._check_eval_results"], ["", "def", "_better_eval_result", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "r\"\"\"Check if the current epoch yields better validation results.\n\n        :return bool value: True means current results on dev set is the best.\n        \"\"\"", "\n", "indicator", ",", "indicator_val", "=", "_check_eval_results", "(", "metrics", ",", "self", ".", "metric_key", ",", "self", ".", "metrics", ")", "\n", "if", "self", ".", "metric_key", "is", "None", ":", "\n", "            ", "self", ".", "metric_key", "=", "indicator", "\n", "", "is_better", "=", "True", "\n", "if", "self", ".", "best_metric_indicator", "is", "None", ":", "\n", "# first-time validation", "\n", "            ", "self", ".", "best_metric_indicator", "=", "indicator_val", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "increase_better", "is", "True", ":", "\n", "                ", "if", "indicator_val", ">", "self", ".", "best_metric_indicator", ":", "\n", "                    ", "self", ".", "best_metric_indicator", "=", "indicator_val", "\n", "", "else", ":", "\n", "                    ", "is_better", "=", "False", "\n", "", "", "else", ":", "\n", "                ", "if", "indicator_val", "<", "self", ".", "best_metric_indicator", ":", "\n", "                    ", "self", ".", "best_metric_indicator", "=", "indicator_val", "\n", "", "else", ":", "\n", "                    ", "is_better", "=", "False", "\n", "", "", "", "return", "is_better", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer.is_master": [[858, 862], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_master", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\u662f\u5426\u662f\u4e3b\u8fdb\u7a0b\"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer._get_value_info": [[867, 882], ["_dict.items", "isinstance", "strs.append", "isinstance", "value.size", "type"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["def", "_get_value_info", "(", "_dict", ")", ":", "\n", "# given a dict value, return information about this dict's value. Return list of str", "\n", "    ", "strs", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "_dict", ".", "items", "(", ")", ":", "\n", "        ", "_str", "=", "''", "\n", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "_str", "+=", "\"\\t{}: (1)type:torch.Tensor (2)dtype:{}, (3)shape:{} \"", ".", "format", "(", "key", ",", "\n", "value", ".", "dtype", ",", "value", ".", "size", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "_str", "+=", "\"\\t{}: (1)type:numpy.ndarray (2)dtype:{}, (3)shape:{} \"", ".", "format", "(", "key", ",", "\n", "value", ".", "dtype", ",", "value", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "_str", "+=", "\"\\t{}: type:{}\"", ".", "format", "(", "key", ",", "type", "(", "value", ")", ")", "\n", "", "strs", ".", "append", "(", "_str", ")", "\n", "", "return", "strs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer._check_code": [[884, 947], ["utils._get_model_device", "batch.DataSetIter", "enumerate", "utils._move_dict_value_to_device", "utils._build_args", "model", "utils._get_func_signature", "model.zero_grad", "tester.Tester", "tester.Tester.test", "trainer._check_eval_results", "trainer._get_value_info", "trainer._get_value_info", "_logger.logger.info", "utils._check_forward_error", "isinstance", "TypeError", "losser", "losser.backward", "len", "RuntimeError", "len", "utils._get_func_signature", "utils._check_loss_evaluate", "isinstance", "TypeError", "len", "ValueError", "type", "losser.size", "utils._get_func_signature", "type", "utils._get_func_signature", "losser.size"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_model_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._move_dict_value_to_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._build_args", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.model", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester.test", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer._check_eval_results", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer._get_value_info", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer._get_value_info", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_forward_error", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.pcfgs.lpcfg.lexicalizedPCFG.backward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_loss_evaluate", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "_check_code", "(", "dataset", ",", "model", ",", "losser", ",", "metrics", ",", "forward_func", ",", "batch_size", "=", "DEFAULT_CHECK_BATCH_SIZE", ",", "\n", "dev_data", "=", "None", ",", "metric_key", "=", "None", ",", "check_level", "=", "0", ")", ":", "\n", "# check get_loss \u65b9\u6cd5", "\n", "    ", "model_device", "=", "_get_model_device", "(", "model", "=", "model", ")", "\n", "_iter", "=", "DataSetIter", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "None", ")", "\n", "\n", "for", "batch_count", ",", "(", "batch_x", ",", "batch_y", ")", "in", "enumerate", "(", "_iter", ")", ":", "\n", "        ", "_move_dict_value_to_device", "(", "batch_x", ",", "batch_y", ",", "device", "=", "model_device", ")", "\n", "# forward check", "\n", "if", "batch_count", "==", "0", ":", "\n", "            ", "info_str", "=", "\"\"", "\n", "input_fields", "=", "_get_value_info", "(", "batch_x", ")", "\n", "target_fields", "=", "_get_value_info", "(", "batch_y", ")", "\n", "if", "len", "(", "input_fields", ")", ">", "0", ":", "\n", "                ", "info_str", "+=", "\"input fields after batch(if batch size is {}):\\n\"", ".", "format", "(", "batch_size", ")", "\n", "info_str", "+=", "\"\\n\"", ".", "join", "(", "input_fields", ")", "\n", "info_str", "+=", "'\\n'", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"There is no input field.\"", ")", "\n", "", "if", "len", "(", "target_fields", ")", ">", "0", ":", "\n", "                ", "info_str", "+=", "\"target fields after batch(if batch size is {}):\\n\"", ".", "format", "(", "batch_size", ")", "\n", "info_str", "+=", "\"\\n\"", ".", "join", "(", "target_fields", ")", "\n", "info_str", "+=", "'\\n'", "\n", "", "else", ":", "\n", "                ", "info_str", "+=", "'There is no target field.'", "\n", "", "logger", ".", "info", "(", "info_str", ")", "\n", "_check_forward_error", "(", "forward_func", "=", "forward_func", ",", "dataset", "=", "dataset", ",", "\n", "batch_x", "=", "batch_x", ",", "check_level", "=", "check_level", ")", "\n", "", "refined_batch_x", "=", "_build_args", "(", "forward_func", ",", "**", "batch_x", ")", "\n", "pred_dict", "=", "model", "(", "**", "refined_batch_x", ")", "\n", "func_signature", "=", "_get_func_signature", "(", "forward_func", ")", "\n", "if", "not", "isinstance", "(", "pred_dict", ",", "dict", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"The return value of {func_signature} should be `dict`, not `{type(pred_dict)}`.\"", ")", "\n", "\n", "# loss check", "\n", "", "try", ":", "\n", "            ", "loss", "=", "losser", "(", "pred_dict", ",", "batch_y", ")", "\n", "# check loss output", "\n", "if", "batch_count", "==", "0", ":", "\n", "                ", "if", "not", "isinstance", "(", "loss", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "raise", "TypeError", "(", "\n", "f\"The return value of {_get_func_signature(losser.get_loss)} should be `torch.Tensor`, \"", "\n", "f\"but got `{type(loss)}`.\"", ")", "\n", "", "if", "len", "(", "loss", ".", "size", "(", ")", ")", "!=", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "f\"The size of return value of {_get_func_signature(losser.get_loss)} is {loss.size()}, \"", "\n", "f\"should be torch.size([])\"", ")", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "", "except", "_CheckError", "as", "e", ":", "\n", "# TODO: another error raised if _CheckError caught", "\n", "            ", "pre_func_signature", "=", "_get_func_signature", "(", "forward_func", ")", "\n", "_check_loss_evaluate", "(", "prev_func_signature", "=", "pre_func_signature", ",", "func_signature", "=", "e", ".", "func_signature", ",", "\n", "check_res", "=", "e", ".", "check_res", ",", "pred_dict", "=", "pred_dict", ",", "target_dict", "=", "batch_y", ",", "\n", "dataset", "=", "dataset", ",", "check_level", "=", "check_level", ")", "\n", "", "model", ".", "zero_grad", "(", ")", "\n", "if", "batch_count", "+", "1", ">=", "DEFAULT_CHECK_NUM_BATCH", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "dev_data", "is", "not", "None", ":", "\n", "        ", "tester", "=", "Tester", "(", "data", "=", "dev_data", "[", ":", "batch_size", "*", "DEFAULT_CHECK_NUM_BATCH", "]", ",", "model", "=", "model", ",", "metrics", "=", "metrics", ",", "\n", "batch_size", "=", "batch_size", ",", "verbose", "=", "-", "1", ",", "use_tqdm", "=", "False", ")", "\n", "evaluate_results", "=", "tester", ".", "test", "(", ")", "\n", "_check_eval_results", "(", "metrics", "=", "evaluate_results", ",", "metric_key", "=", "metric_key", ",", "metric_list", "=", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer._check_eval_results": [[949, 970], ["isinstance", "isinstance", "RuntimeError", "list", "metrics.values", "RuntimeError", "type", "list", "list", "metric_dict.values", "metric_dict.keys"], "function", ["None"], ["", "", "def", "_check_eval_results", "(", "metrics", ",", "metric_key", ",", "metric_list", ")", ":", "\n", "# metrics: tester\u8fd4\u56de\u7684\u7ed3\u679c", "\n", "# metric_key: \u4e00\u4e2a\u7528\u6765\u505a\u7b5b\u9009\u7684\u6307\u6807\uff0c\u6765\u81eaTrainer\u7684\u521d\u59cb\u5316", "\n", "# metric_list: \u591a\u4e2a\u7528\u6765\u505a\u8bc4\u4ef7\u7684\u6307\u6807\uff0c\u6765\u81eaTrainer\u7684\u521d\u59cb\u5316", "\n", "    ", "if", "isinstance", "(", "metrics", ",", "tuple", ")", ":", "\n", "        ", "loss", ",", "metrics", "=", "metrics", "\n", "\n", "", "if", "isinstance", "(", "metrics", ",", "dict", ")", ":", "\n", "        ", "metric_dict", "=", "list", "(", "metrics", ".", "values", "(", ")", ")", "[", "0", "]", "# \u53d6\u7b2c\u4e00\u4e2ametric", "\n", "\n", "if", "metric_key", "is", "None", ":", "\n", "            ", "indicator_val", ",", "indicator", "=", "list", "(", "metric_dict", ".", "values", "(", ")", ")", "[", "0", "]", ",", "list", "(", "metric_dict", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# metric_key is set", "\n", "            ", "if", "metric_key", "not", "in", "metric_dict", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"metric key {metric_key} not found in {metric_dict}\"", ")", "\n", "", "indicator_val", "=", "metric_dict", "[", "metric_key", "]", "\n", "indicator", "=", "metric_key", "\n", "", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Invalid metrics type. Expect {}, got {}\"", ".", "format", "(", "(", "tuple", ",", "dict", ")", ",", "type", "(", "metrics", ")", ")", ")", "\n", "", "return", "indicator", ",", "indicator_val", "\n", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger.FastNLPLogger.__init__": [[125, 127], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger.FastNLPLogger.add_file": [[128, 131], ["_logger._add_file_handler"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._add_file_handler"], ["", "def", "add_file", "(", "self", ",", "path", "=", "'./log.txt'", ",", "level", "=", "'INFO'", ")", ":", "\n", "        ", "r\"\"\"add log output file and the output level\"\"\"", "\n", "_add_file_handler", "(", "self", ",", "path", ",", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger.FastNLPLogger.set_stdout": [[132, 135], ["_logger._set_stdout_handler"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._set_stdout_handler"], ["", "def", "set_stdout", "(", "self", ",", "stdout", "=", "'tqdm'", ",", "level", "=", "'INFO'", ")", ":", "\n", "        ", "r\"\"\"set stdout format and the output level\"\"\"", "\n", "_set_stdout_handler", "(", "self", ",", "stdout", ",", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._get_level": [[63, 72], ["isinstance", "level.lower.lower"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.lower"], ["", "", "", "def", "_get_level", "(", "level", ")", ":", "\n", "    ", "if", "isinstance", "(", "level", ",", "int", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "level", "=", "level", ".", "lower", "(", ")", "\n", "level", "=", "{", "'info'", ":", "logging", ".", "INFO", ",", "'debug'", ":", "logging", ".", "DEBUG", ",", "\n", "'warn'", ":", "logging", ".", "WARN", ",", "'warning'", ":", "logging", ".", "WARN", ",", "\n", "'error'", ":", "logging", ".", "ERROR", "}", "[", "level", "]", "\n", "", "return", "level", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._add_file_handler": [[74, 94], ["os.path.exists", "os.path.abspath", "os.makedirs", "logging.FileHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.Formatter", "logging.Formatter", "logging.FileHandler.setFormatter", "logger.addHandler", "isinstance", "os.path.isfile", "warnings.warn", "os.path.dirname", "_logger._get_level", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._get_level"], ["", "def", "_add_file_handler", "(", "logger", ",", "path", ",", "level", "=", "'INFO'", ")", ":", "\n", "    ", "for", "h", "in", "logger", ".", "handlers", ":", "\n", "        ", "if", "isinstance", "(", "h", ",", "logging", ".", "FileHandler", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "abspath", "(", "path", ")", "==", "h", ".", "baseFilename", ":", "\n", "# file path already added", "\n", "                ", "return", "\n", "\n", "# File Handler", "\n", "", "", "", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "path", ")", "\n", "warnings", ".", "warn", "(", "'log already exists in {}'", ".", "format", "(", "path", ")", ")", "\n", "", "dirname", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "path", ")", ")", "\n", "os", ".", "makedirs", "(", "dirname", ",", "exist_ok", "=", "True", ")", "\n", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "path", ",", "mode", "=", "'a'", ")", "\n", "file_handler", ".", "setLevel", "(", "_get_level", "(", "level", ")", ")", "\n", "file_formatter", "=", "logging", ".", "Formatter", "(", "fmt", "=", "'%(asctime)s - %(module)s - [%(levelname)s] - %(message)s'", ",", "\n", "datefmt", "=", "'%Y/%m/%d %H:%M:%S'", ")", "\n", "file_handler", ".", "setFormatter", "(", "file_formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._set_stdout_handler": [[96, 122], ["_logger._get_level", "enumerate", "ValueError", "isinstance", "logger.removeHandler", "logging.StreamHandler", "logging.StreamHandler", "logging.Formatter", "logging.Formatter", "TqdmLoggingHandler.setLevel", "TqdmLoggingHandler.setFormatter", "logger.addHandler", "TqdmLoggingHandler"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._get_level"], ["", "def", "_set_stdout_handler", "(", "logger", ",", "stdout", "=", "'tqdm'", ",", "level", "=", "'INFO'", ")", ":", "\n", "    ", "level", "=", "_get_level", "(", "level", ")", "\n", "if", "stdout", "not", "in", "[", "'none'", ",", "'plain'", ",", "'tqdm'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'stdout must in one of {}'", ".", "format", "(", "[", "'none'", ",", "'plain'", ",", "'tqdm'", "]", ")", ")", "\n", "# make sure to initialize logger only once", "\n", "", "stream_handler", "=", "None", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "logger", ".", "handlers", ")", ":", "\n", "        ", "if", "isinstance", "(", "h", ",", "(", "logging", ".", "StreamHandler", ",", "TqdmLoggingHandler", ")", ")", ":", "\n", "            ", "stream_handler", "=", "h", "\n", "break", "\n", "", "", "if", "stream_handler", "is", "not", "None", ":", "\n", "        ", "logger", ".", "removeHandler", "(", "stream_handler", ")", "\n", "\n", "# Stream Handler", "\n", "", "if", "stdout", "==", "'plain'", ":", "\n", "        ", "stream_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "", "elif", "stdout", "==", "'tqdm'", ":", "\n", "        ", "stream_handler", "=", "TqdmLoggingHandler", "(", "level", ")", "\n", "", "else", ":", "\n", "        ", "stream_handler", "=", "None", "\n", "\n", "", "if", "stream_handler", "is", "not", "None", ":", "\n", "        ", "stream_formatter", "=", "logging", ".", "Formatter", "(", "'%(message)s'", ")", "\n", "stream_handler", ".", "setLevel", "(", "level", ")", "\n", "stream_handler", ".", "setFormatter", "(", "stream_formatter", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._init_logger": [[143, 159], ["_logger._get_level", "logging.getLogger", "logging.getLogger", "logging.getLogger.setLevel", "_logger._set_stdout_handler", "_logger._add_file_handler"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._get_level", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._set_stdout_handler", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._add_file_handler"], ["def", "_init_logger", "(", "path", "=", "None", ",", "stdout", "=", "'tqdm'", ",", "level", "=", "'INFO'", ")", ":", "\n", "    ", "r\"\"\"initialize logger\"\"\"", "\n", "level", "=", "_get_level", "(", "level", ")", "\n", "\n", "# logger = logging.getLogger()", "\n", "logger", "=", "logging", ".", "getLogger", "(", "ROOT_NAME", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "logger", ".", "setLevel", "(", "1", ")", "# make the logger the lowest level", "\n", "\n", "_set_stdout_handler", "(", "logger", ",", "stdout", ",", "level", ")", "\n", "\n", "# File Handler", "\n", "if", "path", "is", "not", "None", ":", "\n", "        ", "_add_file_handler", "(", "logger", ",", "path", ",", "level", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._get_logger": [[161, 171], ["_logger._get_level", "isinstance", "logging.getLogger", "logging.getLogger", "logging.getLogger.setLevel", "name.startswith"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger._get_level"], ["", "def", "_get_logger", "(", "name", "=", "None", ",", "level", "=", "'INFO'", ")", ":", "\n", "    ", "level", "=", "_get_level", "(", "level", ")", "\n", "if", "name", "is", "None", ":", "\n", "        ", "name", "=", "ROOT_NAME", "\n", "", "assert", "isinstance", "(", "name", ",", "str", ")", "\n", "if", "not", "name", ".", "startswith", "(", "ROOT_NAME", ")", ":", "\n", "        ", "name", "=", "'{}.{}'", ".", "format", "(", "ROOT_NAME", ",", "name", ")", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._logger.init_logger_dist": [[176, 180], ["torch.distributed.get_rank", "logger.setLevel"], "function", ["None"], ["def", "init_logger_dist", "(", ")", ":", "\n", "    ", "global", "logger", "\n", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", "if", "rank", "==", "0", "else", "logging", ".", "WARNING", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.ApplyResultException.__init__": [[377, 381], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "msg", ",", "index", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "msg", ")", "\n", "self", ".", "msg", "=", "msg", "\n", "self", ".", "index", "=", "index", "# \u6807\u793a\u5728\u54ea\u4e2a\u6570\u636e\u906d\u9047\u5230\u95ee\u9898\u4e86", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.__init__": [[387, 409], ["collate_fn.Collater", "isinstance", "set", "data.items", "data.items", "isinstance", "set.add", "len", "dataset.DataSet.add_field", "ValueError", "len", "isinstance", "dataset.DataSet.append", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["def", "__init__", "(", "self", ",", "data", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param data: \u5982\u679c\u4e3adict\u7c7b\u578b\uff0c\u5219\u6bcf\u4e2akey\u7684value\u5e94\u8be5\u4e3a\u7b49\u957f\u7684list; \u5982\u679c\u4e3alist\uff0c\n            \u6bcf\u4e2a\u5143\u7d20\u5e94\u8be5\u4e3a\u5177\u6709\u76f8\u540cfield\u7684 :class:`~fastNLP.Instance` \u3002\n        \"\"\"", "\n", "self", ".", "field_arrays", "=", "{", "}", "\n", "if", "data", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "                ", "length_set", "=", "set", "(", ")", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "                    ", "length_set", ".", "add", "(", "len", "(", "value", ")", ")", "\n", "", "assert", "len", "(", "length_set", ")", "==", "1", ",", "\"Arrays must all be same length.\"", "\n", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "add_field", "(", "field_name", "=", "key", ",", "fields", "=", "value", ")", "\n", "", "", "elif", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "                ", "for", "ins", "in", "data", ":", "\n", "                    ", "assert", "isinstance", "(", "ins", ",", "Instance", ")", ",", "\"Must be Instance type, not {}.\"", ".", "format", "(", "type", "(", "ins", ")", ")", "\n", "self", ".", "append", "(", "ins", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"data only be dict or list type.\"", ")", "\n", "", "", "self", ".", "_collater", "=", "Collater", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.collater": [[416, 420], ["isinstance"], "methods", ["None"], ["", "@", "collater", ".", "setter", "\n", "def", "collater", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "isinstance", "(", "value", ",", "Collater", ")", "\n", "self", ".", "_collater", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.__contains__": [[421, 423], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "item", "in", "self", ".", "field_arrays", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.__iter__": [[424, 430], ["dataset.DataSet.__iter__.iter_func"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "def", "iter_func", "(", ")", ":", "\n", "            ", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "yield", "self", "[", "idx", "]", "\n", "\n", "", "", "return", "iter_func", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet._inner_iter": [[431, 458], ["dataset.DataSet._inner_iter.inner_iter_func"], "methods", ["None"], ["", "def", "_inner_iter", "(", "self", ")", ":", "\n", "        ", "class", "Iter_ptr", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "dataset", ",", "idx", ")", ":", "\n", "                ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "idx", "=", "idx", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "                ", "assert", "item", "in", "self", ".", "dataset", ".", "field_arrays", ",", "\"no such field:{} in Instance {}\"", ".", "format", "(", "item", ",", "self", ".", "dataset", "[", "\n", "self", ".", "idx", "]", ")", "\n", "assert", "self", ".", "idx", "<", "len", "(", "self", ".", "dataset", ".", "field_arrays", "[", "item", "]", ")", ",", "\"index:{} out of range\"", ".", "format", "(", "self", ".", "idx", ")", "\n", "return", "self", ".", "dataset", ".", "field_arrays", "[", "item", "]", "[", "self", ".", "idx", "]", "\n", "\n", "", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"You cannot modify value directly.\"", ")", "\n", "\n", "", "def", "items", "(", "self", ")", ":", "\n", "                ", "ins", "=", "self", ".", "dataset", "[", "self", ".", "idx", "]", "\n", "return", "ins", ".", "items", "(", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "                ", "return", "self", ".", "dataset", "[", "self", ".", "idx", "]", ".", "__repr__", "(", ")", "\n", "\n", "", "", "def", "inner_iter_func", "(", ")", ":", "\n", "            ", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "yield", "Iter_ptr", "(", "self", ",", "idx", ")", "\n", "\n", "", "", "return", "inner_iter_func", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.__getitem__": [[459, 493], ["isinstance", "instance.Instance", "isinstance", "DataSet.DataSet", "DataSet.DataSet.field_arrays.values", "DataSet.DataSet.collater.copy_from", "isinstance", "RuntimeError", "DataSet.DataSet.add_field", "isinstance", "KeyError", "DataSet.DataSet", "DataSet.DataSet.field_arrays.items", "DataSet.DataSet.collater.copy_from", "KeyError", "len", "isinstance", "DataSet.DataSet.append", "DataSet.field_arrays[].to", "len", "type", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.copy_from", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.copy_from", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "r\"\"\"\u7ed9\u5b9aint\u7684index\uff0c\u8fd4\u56de\u4e00\u4e2aInstance; \u7ed9\u5b9aslice\uff0c\u8fd4\u56de\u5305\u542b\u8fd9\u4e2aslice\u5185\u5bb9\u7684\u65b0\u7684DataSet\u3002\n\n        :param idx: can be int or slice.\n        :return: If `idx` is int, return an Instance object.\n                If `idx` is slice, return a DataSet object.\n        \"\"\"", "\n", "if", "isinstance", "(", "idx", ",", "int", ")", ":", "\n", "            ", "return", "Instance", "(", "**", "{", "name", ":", "self", ".", "field_arrays", "[", "name", "]", "[", "idx", "]", "for", "name", "in", "self", ".", "field_arrays", "}", ")", "\n", "", "elif", "isinstance", "(", "idx", ",", "slice", ")", ":", "\n", "            ", "if", "idx", ".", "start", "is", "not", "None", "and", "(", "idx", ".", "start", ">=", "len", "(", "self", ")", "or", "idx", ".", "start", "<=", "-", "len", "(", "self", ")", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Start index {idx.start} out of range 0-{len(self) - 1}\"", ")", "\n", "", "data_set", "=", "DataSet", "(", ")", "\n", "for", "field", "in", "self", ".", "field_arrays", ".", "values", "(", ")", ":", "\n", "                ", "data_set", ".", "add_field", "(", "field_name", "=", "field", ".", "name", ",", "fields", "=", "field", ".", "content", "[", "idx", "]", ",", "padder", "=", "field", ".", "padder", ",", "\n", "is_input", "=", "field", ".", "is_input", ",", "is_target", "=", "field", ".", "is_target", ",", "ignore_type", "=", "field", ".", "ignore_type", ")", "\n", "", "data_set", ".", "collater", "=", "self", ".", "collater", ".", "copy_from", "(", "self", ".", "collater", ")", "\n", "return", "data_set", "\n", "", "elif", "isinstance", "(", "idx", ",", "str", ")", ":", "\n", "            ", "if", "idx", "not", "in", "self", ":", "\n", "                ", "raise", "KeyError", "(", "\"No such field called {} in DataSet.\"", ".", "format", "(", "idx", ")", ")", "\n", "", "return", "self", ".", "field_arrays", "[", "idx", "]", "\n", "", "elif", "isinstance", "(", "idx", ",", "list", ")", ":", "\n", "            ", "dataset", "=", "DataSet", "(", ")", "\n", "for", "i", "in", "idx", ":", "\n", "                ", "assert", "isinstance", "(", "i", ",", "int", ")", ",", "\"Only int index allowed.\"", "\n", "instance", "=", "self", "[", "i", "]", "\n", "dataset", ".", "append", "(", "instance", ")", "\n", "", "for", "field_name", ",", "field", "in", "self", ".", "field_arrays", ".", "items", "(", ")", ":", "\n", "                ", "dataset", ".", "field_arrays", "[", "field_name", "]", ".", "to", "(", "field", ")", "\n", "", "dataset", ".", "collater", "=", "self", ".", "collater", ".", "copy_from", "(", "self", ".", "collater", ")", "\n", "return", "dataset", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\"Unrecognized type {} for idx in __getitem__ method\"", ".", "format", "(", "type", "(", "idx", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.__getattr__": [[494, 500], ["isinstance"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "# Not tested. Don't use !!", "\n", "        ", "if", "item", "==", "\"field_arrays\"", ":", "\n", "            ", "raise", "AttributeError", "\n", "", "if", "isinstance", "(", "item", ",", "str", ")", "and", "item", "in", "self", ".", "field_arrays", ":", "\n", "            ", "return", "self", ".", "field_arrays", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.__setstate__": [[501, 503], ["None"], "methods", ["None"], ["", "", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__dict__", "=", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.__getstate__": [[504, 506], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.__len__": [[507, 516], ["iter().__next__", "len", "len", "iter", "dataset.DataSet.field_arrays.values"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.LoaderWrapper.__next__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Fetch the length of the dataset.\n\n        :return length:\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "field_arrays", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "field", "=", "iter", "(", "self", ".", "field_arrays", ".", "values", "(", ")", ")", ".", "__next__", "(", ")", "\n", "return", "len", "(", "field", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.__repr__": [[517, 519], ["str", "utils.pretty_table_printer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.pretty_table_printer"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "pretty_table_printer", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.print_field_meta": [[520, 575], ["len", "dataset.DataSet.field_arrays.items", "prettytable.PrettyTable", "_logger.logger.info", "field_names.append", "prettytable.PrettyTable.add_row", "is_inputs.append", "is_inputs.append", "is_targets.append", "is_targets.append", "pad_values.append", "pad_values.append", "ignore_types.append", "field_array.padder.get_pad_val", "ignore_types.append", "ignore_types.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.Padder.get_pad_val", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "print_field_meta", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8f93\u51fa\u5f53\u524dfield\u7684meta\u4fe1\u606f, \u5f62\u4f3c\u4e0b\u5217\u7684\u8f93\u51fa::\n\n            +-------------+-------+-------+\n            | field_names |   x   |   y   |\n            +=============+=======+=======+\n            |   is_input  |  True | False |\n            |  is_target  | False | False |\n            | ignore_type | False |       |\n            |  pad_value  |   0   |       |\n            +-------------+-------+-------+\n\n        :param field_names: DataSet\u4e2dfield\u7684\u540d\u79f0\n        :param is_input: field\u662f\u5426\u4e3ainput\n        :param is_target: field\u662f\u5426\u4e3atarget\n        :param ignore_type: \u662f\u5426\u5ffd\u7565\u8be5field\u7684type, \u4e00\u822c\u4ec5\u5728\u8be5field\u81f3\u5c11\u4e3ainput\u6216target\u65f6\u624d\u6709\u610f\u4e49\n        :param pad_value: \u8be5field\u7684pad\u7684\u503c\uff0c\u4ec5\u5728\u8be5field\u4e3ainput\u6216target\u65f6\u6709\u610f\u4e49\n        :return:\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "field_arrays", ")", ">", "0", ":", "\n", "            ", "field_names", "=", "[", "'field_names'", "]", "\n", "is_inputs", "=", "[", "'is_input'", "]", "\n", "is_targets", "=", "[", "'is_target'", "]", "\n", "pad_values", "=", "[", "'pad_value'", "]", "\n", "ignore_types", "=", "[", "'ignore_type'", "]", "\n", "\n", "for", "name", ",", "field_array", "in", "self", ".", "field_arrays", ".", "items", "(", ")", ":", "\n", "                ", "field_names", ".", "append", "(", "name", ")", "\n", "if", "field_array", ".", "is_input", ":", "\n", "                    ", "is_inputs", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "                    ", "is_inputs", ".", "append", "(", "False", ")", "\n", "", "if", "field_array", ".", "is_target", ":", "\n", "                    ", "is_targets", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "                    ", "is_targets", ".", "append", "(", "False", ")", "\n", "\n", "", "if", "(", "field_array", ".", "is_input", "or", "field_array", ".", "is_target", ")", "and", "field_array", ".", "padder", "is", "not", "None", ":", "\n", "                    ", "pad_values", ".", "append", "(", "field_array", ".", "padder", ".", "get_pad_val", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "pad_values", ".", "append", "(", "' '", ")", "\n", "\n", "", "if", "field_array", ".", "_ignore_type", ":", "\n", "                    ", "ignore_types", ".", "append", "(", "True", ")", "\n", "", "elif", "field_array", ".", "is_input", "or", "field_array", ".", "is_target", ":", "\n", "                    ", "ignore_types", ".", "append", "(", "False", ")", "\n", "", "else", ":", "\n", "                    ", "ignore_types", ".", "append", "(", "' '", ")", "\n", "", "", "table", "=", "PrettyTable", "(", "field_names", "=", "field_names", ")", "\n", "fields", "=", "[", "is_inputs", ",", "is_targets", ",", "ignore_types", ",", "pad_values", "]", "\n", "for", "field", "in", "fields", ":", "\n", "                ", "table", ".", "add_row", "(", "field", ")", "\n", "", "logger", ".", "info", "(", "table", ")", "\n", "return", "table", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append": [[576, 600], ["len", "instance.fields.items", "instance.fields.items", "field.FieldArray", "len", "len", "ValueError", "dataset.DataSet.field_arrays[].append", "len", "len", "_logger.logger.error"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "def", "append", "(", "self", ",", "instance", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06\u4e00\u4e2ainstance\u5bf9\u8c61append\u5230DataSet\u540e\u9762\u3002\n\n        :param ~fastNLP.Instance instance: \u82e5DataSet\u4e0d\u4e3a\u7a7a\uff0c\u5219instance\u5e94\u8be5\u62e5\u6709\u548cDataSet\u5b8c\u5168\u4e00\u6837\u7684field\u3002\n\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "field_arrays", ")", "==", "0", ":", "\n", "# DataSet has no field yet", "\n", "            ", "for", "name", ",", "field", "in", "instance", ".", "fields", ".", "items", "(", ")", ":", "\n", "# field = field.tolist() if isinstance(field, np.ndarray) else field", "\n", "                ", "self", ".", "field_arrays", "[", "name", "]", "=", "FieldArray", "(", "name", ",", "[", "field", "]", ")", "# \u7b2c\u4e00\u4e2a\u6837\u672c\uff0c\u5fc5\u987b\u7528list\u5305\u88c5\u8d77\u6765", "\n", "", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "field_arrays", ")", "!=", "len", "(", "instance", ".", "fields", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"DataSet object has {} fields, but attempt to append an Instance object with {} fields.\"", "\n", ".", "format", "(", "len", "(", "self", ".", "field_arrays", ")", ",", "len", "(", "instance", ".", "fields", ")", ")", ")", "\n", "", "for", "name", ",", "field", "in", "instance", ".", "fields", ".", "items", "(", ")", ":", "\n", "                ", "assert", "name", "in", "self", ".", "field_arrays", "\n", "try", ":", "\n", "                    ", "self", ".", "field_arrays", "[", "name", "]", ".", "append", "(", "field", ")", "\n", "", "except", "AppendToTargetOrInputException", "as", "e", ":", "\n", "                    ", "logger", ".", "error", "(", "f\"Cannot append to field:{name}.\"", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_fieldarray": [[601, 615], ["isinstance", "TypeError", "len", "len", "RuntimeError", "len", "len"], "methods", ["None"], ["", "", "", "", "def", "add_fieldarray", "(", "self", ",", "field_name", ",", "fieldarray", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06fieldarray\u6dfb\u52a0\u5230DataSet\u4e2d.\n\n        :param str field_name: \u65b0\u52a0\u5165\u7684field\u7684\u540d\u79f0\n        :param ~fastNLP.core.FieldArray fieldarray: \u9700\u8981\u52a0\u5165DataSet\u7684field\u7684\u5185\u5bb9\n        :return:\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "fieldarray", ",", "FieldArray", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"Only fastNLP.FieldArray supported.\"", ")", "\n", "", "if", "len", "(", "self", ")", "!=", "len", "(", "fieldarray", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"The field to add must have the same size as dataset. \"", "\n", "f\"Dataset size {len(self)} != field size {len(fieldarray)}\"", ")", "\n", "", "self", ".", "field_arrays", "[", "field_name", "]", "=", "fieldarray", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_field": [[616, 633], ["field.AutoPadder", "field.FieldArray", "len", "len", "len", "RuntimeError", "len", "len"], "methods", ["None"], ["", "def", "add_field", "(", "self", ",", "field_name", ",", "fields", ",", "padder", "=", "AutoPadder", "(", ")", ",", "is_input", "=", "False", ",", "is_target", "=", "False", ",", "ignore_type", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \u65b0\u589e\u4e00\u4e2afield\n        :param str field_name: \u65b0\u589e\u7684field\u7684\u540d\u79f0\n        :param list fields: \u9700\u8981\u65b0\u589e\u7684field\u7684\u5185\u5bb9\n        :param None,~fastNLP.Padder padder: \u5982\u679c\u4e3aNone,\u5219\u4e0d\u8fdb\u884cpad\uff0c\u9ed8\u8ba4\u4f7f\u7528 :class:`~fastNLP.AutoPadder` \u81ea\u52a8\u5224\u65ad\u662f\u5426\u9700\u8981\u505apad\u3002\n        :param bool is_input: \u65b0\u52a0\u5165\u7684field\u662f\u5426\u662finput\n        :param bool is_target: \u65b0\u52a0\u5165\u7684field\u662f\u5426\u662ftarget\n        :param bool ignore_type: \u662f\u5426\u5ffd\u7565\u5bf9\u65b0\u52a0\u5165\u7684field\u7684\u7c7b\u578b\u68c0\u67e5\n        \"\"\"", "\n", "\n", "if", "len", "(", "self", ".", "field_arrays", ")", "!=", "0", ":", "\n", "            ", "if", "len", "(", "self", ")", "!=", "len", "(", "fields", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"The field to add must have the same size as dataset. \"", "\n", "f\"Dataset size {len(self)} != field size {len(fields)}\"", ")", "\n", "", "", "self", ".", "field_arrays", "[", "field_name", "]", "=", "FieldArray", "(", "field_name", ",", "fields", ",", "is_target", "=", "is_target", ",", "is_input", "=", "is_input", ",", "\n", "padder", "=", "padder", ",", "ignore_type", "=", "ignore_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.delete_instance": [[634, 649], ["isinstance", "len", "IndexError", "len", "dataset.DataSet.field_arrays.clear", "dataset.DataSet.field_arrays.values", "field.pop", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.clear", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "def", "delete_instance", "(", "self", ",", "index", ")", ":", "\n", "        ", "r\"\"\"\n        \u5220\u9664\u7b2cindex\u4e2ainstance\n\n        :param int index: \u9700\u8981\u5220\u9664\u7684instance\u7684index\uff0c\u5e8f\u53f7\u4ece0\u5f00\u59cb\u3002\n        \"\"\"", "\n", "assert", "isinstance", "(", "index", ",", "int", ")", ",", "\"Only integer supported.\"", "\n", "if", "len", "(", "self", ")", "<=", "index", ":", "\n", "            ", "raise", "IndexError", "(", "\"{} is too large for as DataSet with {} instances.\"", ".", "format", "(", "index", ",", "len", "(", "self", ")", ")", ")", "\n", "", "if", "len", "(", "self", ")", "==", "1", ":", "\n", "            ", "self", ".", "field_arrays", ".", "clear", "(", ")", "\n", "", "else", ":", "\n", "            ", "for", "field", "in", "self", ".", "field_arrays", ".", "values", "(", ")", ":", "\n", "                ", "field", ".", "pop", "(", "index", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.delete_field": [[650, 658], ["dataset.DataSet.field_arrays.pop"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "def", "delete_field", "(", "self", ",", "field_name", ")", ":", "\n", "        ", "r\"\"\"\n        \u5220\u9664\u540d\u4e3afield_name\u7684field\n\n        :param str field_name: \u9700\u8981\u5220\u9664\u7684field\u7684\u540d\u79f0.\n        \"\"\"", "\n", "self", ".", "field_arrays", ".", "pop", "(", "field_name", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.copy_field": [[659, 672], ["copy.deepcopy", "dataset.DataSet.add_fieldarray", "dataset.DataSet.has_field", "KeyError", "dataset.DataSet.get_field"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_fieldarray", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_field"], ["", "def", "copy_field", "(", "self", ",", "field_name", ",", "new_field_name", ")", ":", "\n", "        ", "r\"\"\"\n        \u6df1\u5ea6copy\u540d\u4e3afield_name\u7684field\u5230new_field_name\n\n        :param str field_name: \u9700\u8981copy\u7684field\u3002\n        :param str new_field_name: copy\u751f\u6210\u7684field\u540d\u79f0\n        :return: self\n        \"\"\"", "\n", "if", "not", "self", ".", "has_field", "(", "field_name", ")", ":", "\n", "            ", "raise", "KeyError", "(", "f\"Field:{field_name} not found in DataSet.\"", ")", "\n", "", "fieldarray", "=", "deepcopy", "(", "self", ".", "get_field", "(", "field_name", ")", ")", "\n", "self", ".", "add_fieldarray", "(", "field_name", "=", "new_field_name", ",", "fieldarray", "=", "fieldarray", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field": [[673, 683], ["isinstance"], "methods", ["None"], ["", "def", "has_field", "(", "self", ",", "field_name", ")", ":", "\n", "        ", "r\"\"\"\n        \u5224\u65adDataSet\u4e2d\u662f\u5426\u6709\u540d\u4e3afield_name\u8fd9\u4e2afield\n\n        :param str field_name: field\u7684\u540d\u79f0\n        :return bool: \u8868\u793a\u662f\u5426\u6709\u540d\u4e3afield_name\u8fd9\u4e2afield\n        \"\"\"", "\n", "if", "isinstance", "(", "field_name", ",", "str", ")", ":", "\n", "            ", "return", "field_name", "in", "self", ".", "field_arrays", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_field": [[684, 694], ["KeyError"], "methods", ["None"], ["", "def", "get_field", "(", "self", ",", "field_name", ")", ":", "\n", "        ", "r\"\"\"\n        \u83b7\u53d6field_name\u8fd9\u4e2afield\n\n        :param str field_name: field\u7684\u540d\u79f0\n        :return: :class:`~fastNLP.FieldArray`\n        \"\"\"", "\n", "if", "field_name", "not", "in", "self", ".", "field_arrays", ":", "\n", "            ", "raise", "KeyError", "(", "\"Field name {} not found in DataSet\"", ".", "format", "(", "field_name", ")", ")", "\n", "", "return", "self", ".", "field_arrays", "[", "field_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_all_fields": [[695, 702], ["None"], "methods", ["None"], ["", "def", "get_all_fields", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8fd4\u56de\u4e00\u4e2adict\uff0ckey\u4e3afield_name, value\u4e3a\u5bf9\u5e94\u7684 :class:`~fastNLP.FieldArray`\n\n        :return dict: \u8fd4\u56de\u5982\u4e0a\u6240\u8ff0\u7684\u5b57\u5178\n        \"\"\"", "\n", "return", "self", ".", "field_arrays", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_field_names": [[703, 710], ["sorted", "dataset.DataSet.field_arrays.keys"], "methods", ["None"], ["", "def", "get_field_names", "(", "self", ")", "->", "list", ":", "\n", "        ", "r\"\"\"\n        \u8fd4\u56de\u4e00\u4e2alist\uff0c\u5305\u542b\u6240\u6709 field \u7684\u540d\u5b57\n\n        :return list: \u8fd4\u56de\u5982\u4e0a\u6240\u8ff0\u7684\u5217\u8868\n        \"\"\"", "\n", "return", "sorted", "(", "self", ".", "field_arrays", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_length": [[711, 718], ["len"], "methods", ["None"], ["", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u83b7\u53d6DataSet\u7684\u5143\u7d20\u6570\u91cf\n\n        :return: int: DataSet\u4e2dInstance\u7684\u4e2a\u6570\u3002\n        \"\"\"", "\n", "return", "len", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.rename_field": [[719, 732], ["dataset.DataSet.field_arrays.pop", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "def", "rename_field", "(", "self", ",", "field_name", ",", "new_field_name", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06\u67d0\u4e2afield\u91cd\u65b0\u547d\u540d.\n\n        :param str field_name: \u539f\u6765\u7684field\u540d\u79f0\u3002\n        :param str new_field_name: \u4fee\u6539\u4e3anew_name\u3002\n        \"\"\"", "\n", "if", "field_name", "in", "self", ".", "field_arrays", ":", "\n", "            ", "self", ".", "field_arrays", "[", "new_field_name", "]", "=", "self", ".", "field_arrays", ".", "pop", "(", "field_name", ")", "\n", "self", ".", "field_arrays", "[", "new_field_name", "]", ".", "name", "=", "new_field_name", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\"DataSet has no field named {}.\"", ".", "format", "(", "field_name", ")", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_target": [[733, 759], ["isinstance", "KeyError", "bool", "_logger.logger.error"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool"], ["", "def", "set_target", "(", "self", ",", "*", "field_names", ",", "flag", "=", "True", ",", "use_1st_ins_infer_dim_type", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06field_names\u7684field\u8bbe\u7f6e\u4e3atarget\n\n        Example::\n\n            dataset.set_target('labels', 'seq_len')  # \u5c06labels\u548cseq_len\u8fd9\u4e24\u4e2afield\u7684target\u5c5e\u6027\u8bbe\u7f6e\u4e3aTrue\n            dataset.set_target('labels', 'seq_lens', flag=False) # \u5c06labels\u548cseq_len\u7684target\u5c5e\u6027\u8bbe\u7f6e\u4e3aFalse\n\n        :param str field_names: field\u7684\u540d\u79f0\n        :param bool flag: \u5c06field_name\u7684target\u72b6\u6001\u8bbe\u7f6e\u4e3aflag\n        :param bool use_1st_ins_infer_dim_type: \u5982\u679c\u4e3aTrue\uff0c\u5c06\u4e0d\u4f1acheck\u8be5\u5217\u662f\u5426\u6240\u6709\u6570\u636e\u90fd\u662f\u540c\u6837\u7684\u7ef4\u5ea6\uff0c\u540c\u6837\u7684\u7c7b\u578b\u3002\u5c06\u76f4\u63a5\u4f7f\u7528\u7b2c\u4e00\n            \u884c\u7684\u6570\u636e\u8fdb\u884c\u7c7b\u578b\u548c\u7ef4\u5ea6\u63a8\u65ad\u672c\u5217\u7684\u6570\u636e\u7684\u7c7b\u578b\u548c\u7ef4\u5ea6\u3002\n        \"\"\"", "\n", "assert", "isinstance", "(", "flag", ",", "bool", ")", ",", "\"Only bool type supported.\"", "\n", "for", "name", "in", "field_names", ":", "\n", "            ", "if", "name", "in", "self", ".", "field_arrays", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "field_arrays", "[", "name", "]", ".", "_use_1st_ins_infer_dim_type", "=", "bool", "(", "use_1st_ins_infer_dim_type", ")", "\n", "self", ".", "field_arrays", "[", "name", "]", ".", "is_target", "=", "flag", "\n", "", "except", "SetInputOrTargetException", "as", "e", ":", "\n", "                    ", "logger", ".", "error", "(", "f\"Cannot set field:{name} as target.\"", ")", "\n", "raise", "e", "\n", "", "", "else", ":", "\n", "                ", "raise", "KeyError", "(", "\"{} is not a valid field name.\"", ".", "format", "(", "name", ")", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_input": [[760, 783], ["KeyError", "bool", "_logger.logger.error"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.bool"], ["", "def", "set_input", "(", "self", ",", "*", "field_names", ",", "flag", "=", "True", ",", "use_1st_ins_infer_dim_type", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06field_names\u7684field\u8bbe\u7f6e\u4e3ainput::\n\n            dataset.set_input('words', 'seq_len')   # \u5c06words\u548cseq_len\u8fd9\u4e24\u4e2afield\u7684input\u5c5e\u6027\u8bbe\u7f6e\u4e3aTrue\n            dataset.set_input('words', flag=False)  # \u5c06words\u8fd9\u4e2afield\u7684input\u5c5e\u6027\u8bbe\u7f6e\u4e3aFalse\n\n        :param str field_names: field\u7684\u540d\u79f0\n        :param bool flag: \u5c06field_name\u7684input\u72b6\u6001\u8bbe\u7f6e\u4e3aflag\n        :param bool use_1st_ins_infer_dim_type: \u5982\u679c\u4e3aTrue\uff0c\u5c06\u4e0d\u4f1acheck\u8be5\u5217\u662f\u5426\u6240\u6709\u6570\u636e\u90fd\u662f\u540c\u6837\u7684\u7ef4\u5ea6\uff0c\u540c\u6837\u7684\u7c7b\u578b\u3002\u5c06\u76f4\u63a5\u4f7f\u7528\u7b2c\u4e00\n            \u884c\u7684\u6570\u636e\u8fdb\u884c\u7c7b\u578b\u548c\u7ef4\u5ea6\u63a8\u65ad\u672c\u5217\u7684\u6570\u636e\u7684\u7c7b\u578b\u548c\u7ef4\u5ea6\u3002\n        \"\"\"", "\n", "for", "name", "in", "field_names", ":", "\n", "            ", "if", "name", "in", "self", ".", "field_arrays", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "field_arrays", "[", "name", "]", ".", "_use_1st_ins_infer_dim_type", "=", "bool", "(", "use_1st_ins_infer_dim_type", ")", "\n", "self", ".", "field_arrays", "[", "name", "]", ".", "is_input", "=", "flag", "\n", "", "except", "SetInputOrTargetException", "as", "e", ":", "\n", "                    ", "logger", ".", "error", "(", "f\"Cannot set field:{name} as input, exception happens at the {e.index} value.\"", ")", "\n", "raise", "e", "\n", "", "", "else", ":", "\n", "                ", "raise", "KeyError", "(", "\"{} is not a valid field name.\"", ".", "format", "(", "name", ")", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_ignore_type": [[784, 801], ["isinstance", "KeyError"], "methods", ["None"], ["", "def", "set_ignore_type", "(", "self", ",", "*", "field_names", ",", "flag", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06field\u8bbe\u7f6e\u4e3a\u5ffd\u7565\u7c7b\u578b\u72b6\u6001\u3002\u5f53\u67d0\u4e2afield\u88ab\u8bbe\u7f6e\u4e86ignore_type, \u5219\u5728\u88ab\u8bbe\u7f6e\u4e3atarget\u6216\u8005input\u65f6\u5c06\u4e0d\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\n        \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e5f\u4e0d\u8fdb\u884cpad\u3002\u5982\u679c\u4ecd\u9700\u8981pad\u8be5field\uff0c\u53ef\u901a\u8fc7\u81ea\u5b9a\u4e49Padder\u5b9e\u73b0\uff0c\u82e5\u8be5field\u9700\u8981\u8f6c\u6362\u4e3atensor\uff0c\u9700\u8981\u5728padder\n        \u4e2d\u8f6c\u6362\uff0c\u4f46\u4e0d\u9700\u8981\u5728padder\u4e2d\u79fb\u52a8\u5230gpu\u3002\n\n        :param str field_names: field\u7684\u540d\u79f0\n        :param bool flag: \u5c06field_name\u7684ignore_type\u72b6\u6001\u8bbe\u7f6e\u4e3aflag\n        :return:\n        \"\"\"", "\n", "assert", "isinstance", "(", "flag", ",", "bool", ")", ",", "\"Only bool type supported.\"", "\n", "for", "name", "in", "field_names", ":", "\n", "            ", "if", "name", "in", "self", ".", "field_arrays", ":", "\n", "                ", "self", ".", "field_arrays", "[", "name", "]", ".", "ignore_type", "=", "flag", "\n", "", "else", ":", "\n", "                ", "raise", "KeyError", "(", "\"{} is not a valid field name.\"", ".", "format", "(", "name", ")", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_padder": [[802, 817], ["dataset.DataSet.field_arrays[].set_padder", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_padder"], ["", "def", "set_padder", "(", "self", ",", "field_name", ",", "padder", ")", ":", "\n", "        ", "r\"\"\"\n        \u4e3afield_name\u8bbe\u7f6epadder::\n\n            from fastNLP import EngChar2DPadder\n            padder = EngChar2DPadder()\n            dataset.set_padder('chars', padder)  # \u5219chars\u8fd9\u4e2afield\u4f1a\u4f7f\u7528EngChar2DPadder\u8fdb\u884cpad\u64cd\u4f5c\n\n        :param str field_name: \u8bbe\u7f6efield\u7684padding\u65b9\u5f0f\u4e3apadder\n        :param None,~fastNLP.Padder padder: \u8bbe\u7f6e\u4e3aNone\u5373\u5220\u9664padder, \u5373\u5bf9\u8be5field\u4e0d\u8fdb\u884cpad\u64cd\u4f5c\u3002\n        \"\"\"", "\n", "if", "field_name", "not", "in", "self", ".", "field_arrays", ":", "\n", "            ", "raise", "KeyError", "(", "\"There is no field named {}.\"", ".", "format", "(", "field_name", ")", ")", "\n", "", "self", ".", "field_arrays", "[", "field_name", "]", ".", "set_padder", "(", "padder", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_pad_val": [[818, 829], ["dataset.DataSet.field_arrays[].set_pad_val", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.set_pad_val"], ["", "def", "set_pad_val", "(", "self", ",", "field_name", ",", "pad_val", ")", ":", "\n", "        ", "r\"\"\"\n        \u4e3a\u67d0\u4e2afield\u8bbe\u7f6e\u5bf9\u5e94\u7684pad_val.\n\n        :param str field_name: \u4fee\u6539\u8be5field\u7684pad_val\n        :param int pad_val: \u8be5field\u7684padder\u4f1a\u4ee5pad_val\u4f5c\u4e3apadding index\n        \"\"\"", "\n", "if", "field_name", "not", "in", "self", ".", "field_arrays", ":", "\n", "            ", "raise", "KeyError", "(", "\"There is no field named {}.\"", ".", "format", "(", "field_name", ")", ")", "\n", "", "self", ".", "field_arrays", "[", "field_name", "]", ".", "set_pad_val", "(", "pad_val", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_input_name": [[830, 837], ["dataset.DataSet.field_arrays.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "def", "get_input_name", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8fd4\u56de\u6240\u6709is_input\u88ab\u8bbe\u7f6e\u4e3aTrue\u7684field\u540d\u79f0\n\n        :return list: \u91cc\u9762\u7684\u5143\u7d20\u4e3a\u88ab\u8bbe\u7f6e\u4e3ainput\u7684field\u540d\u79f0\n        \"\"\"", "\n", "return", "[", "name", "for", "name", ",", "field", "in", "self", ".", "field_arrays", ".", "items", "(", ")", "if", "field", ".", "is_input", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_target_name": [[838, 844], ["dataset.DataSet.field_arrays.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "def", "get_target_name", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8fd4\u56de\u6240\u6709is_target\u88ab\u8bbe\u7f6e\u4e3aTrue\u7684field\u540d\u79f0\n        :return list: \u91cc\u9762\u7684\u5143\u7d20\u4e3a\u88ab\u8bbe\u7f6e\u4e3atarget\u7684field\u540d\u79f0\n        \"\"\"", "\n", "return", "[", "name", "for", "name", ",", "field", "in", "self", ".", "field_arrays", ".", "items", "(", ")", "if", "field", ".", "is_target", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field": [[845, 863], ["dataset.DataSet.apply", "len", "dataset.DataSet.has_field", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field"], ["", "def", "apply_field", "(", "self", ",", "func", ",", "field_name", ",", "new_field_name", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06DataSet\u4e2d\u7684\u6bcf\u4e2ainstance\u4e2d\u7684\u540d\u4e3a `field_name` \u7684field\u4f20\u7ed9func\uff0c\u5e76\u83b7\u53d6\u5b83\u7684\u8fd4\u56de\u503c\u3002\n\n        :param callable func: input\u662finstance\u4e2d\u540d\u4e3a `field_name` \u7684field\u7684\u5185\u5bb9\u3002\n        :param str field_name: \u4f20\u5165func\u7684\u662f\u54ea\u4e2afield\u3002\n        :param None,str new_field_name: \u5c06func\u8fd4\u56de\u7684\u5185\u5bb9\u653e\u5165\u5230 `new_field_name` \u8fd9\u4e2afield\u4e2d\uff0c\u5982\u679c\u540d\u79f0\u4e0e\u5df2\u6709\u7684field\u76f8\u540c\uff0c\u5219\u8986\n            \u76d6\u4e4b\u524d\u7684field\u3002\u5982\u679c\u4e3aNone\u5219\u4e0d\u521b\u5efa\u65b0\u7684field\u3002\n        :param optional kwargs: \u652f\u6301\u8f93\u5165is_input,is_target,ignore_type\n            1. is_input: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u540d\u4e3a `new_field_name` \u7684field\u8bbe\u7f6e\u4e3ainput\n            2. is_target: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u540d\u4e3a `new_field_name` \u7684field\u8bbe\u7f6e\u4e3atarget\n            3. ignore_type: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u540d\u4e3a `new_field_name` \u7684field\u7684ignore_type\u8bbe\u7f6e\u4e3atrue, \u5ffd\u7565\u5176\u7c7b\u578b\n        :return List[Any]:   \u91cc\u9762\u7684\u5143\u7d20\u4e3afunc\u7684\u8fd4\u56de\u503c\uff0c\u6240\u4ee5list\u957f\u5ea6\u4e3aDataSet\u7684\u957f\u5ea6\n        \"\"\"", "\n", "assert", "len", "(", "self", ")", "!=", "0", ",", "\"Null DataSet cannot use apply_field().\"", "\n", "if", "not", "self", ".", "has_field", "(", "field_name", "=", "field_name", ")", ":", "\n", "            ", "raise", "KeyError", "(", "\"DataSet has no field named `{}`.\"", ".", "format", "(", "field_name", ")", ")", "\n", "", "return", "self", ".", "apply", "(", "func", ",", "new_field_name", ",", "_apply_field", "=", "field_name", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field_more": [[864, 888], ["dataset.DataSet.apply_more", "len", "dataset.DataSet.has_field", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_more", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field"], ["", "def", "apply_field_more", "(", "self", ",", "func", ",", "field_name", ",", "modify_fields", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06 ``DataSet`` \u4e2d\u7684\u6bcf\u4e2a ``Instance`` \u4e2d\u7684\u540d\u4e3a `field_name` \u7684field \u4f20\u7ed9 func\uff0c\u5e76\u83b7\u53d6\u5b83\u7684\u8fd4\u56de\u503c\u3002\n        func \u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a field \u4e0a\u7684\u7ed3\u679c\u3002\n        \n        .. note::\n            ``apply_field_more`` \u4e0e ``apply_field`` \u7684\u533a\u522b\u53c2\u8003 :meth:`~fastNLP.DataSet.apply_more` \u4e2d\u5173\u4e8e ``apply_more`` \u4e0e\n            ``apply`` \u533a\u522b\u7684\u4ecb\u7ecd\u3002\n            \n        :param callable func: \u53c2\u6570\u662f ``DataSet`` \u4e2d\u7684 ``Instance`` \uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5b57\u5178\uff0ckey \u662ffield \u7684\u540d\u5b57\uff0cvalue \u662f\u5bf9\u5e94\u7684\u7ed3\u679c\n        :param str field_name: \u4f20\u5165func\u7684\u662f\u54ea\u4e2afield\u3002\n        :param bool modify_fields: \u662f\u5426\u7528\u7ed3\u679c\u4fee\u6539 `DataSet` \u4e2d\u7684 `Field`\uff0c \u9ed8\u8ba4\u4e3a True\n        :param optional kwargs: \u652f\u6301\u8f93\u5165is_input,is_target,ignore_type\n\n            1. is_input: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u88ab\u4fee\u6539\u7684field\u8bbe\u7f6e\u4e3ainput\n            2. is_target: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u88ab\u4fee\u6539\u7684field\u8bbe\u7f6e\u4e3atarget\n            3. ignore_type: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u88ab\u4fee\u6539\u7684field\u7684ignore_type\u8bbe\u7f6e\u4e3atrue, \u5ffd\u7565\u5176\u7c7b\u578b\n\n        :return Dict[str:Field]: \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\n        \"\"\"", "\n", "assert", "len", "(", "self", ")", "!=", "0", ",", "\"Null DataSet cannot use apply_field().\"", "\n", "if", "not", "self", ".", "has_field", "(", "field_name", "=", "field_name", ")", ":", "\n", "            ", "raise", "KeyError", "(", "\"DataSet has no field named `{}`.\"", ".", "format", "(", "field_name", ")", ")", "\n", "", "return", "self", ".", "apply_more", "(", "func", ",", "modify_fields", ",", "_apply_field", "=", "field_name", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet._add_apply_field": [[889, 920], ["dataset.DataSet.add_field", "dataset.DataSet.add_field", "extra_param.get", "extra_param.get", "extra_param.get"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["", "def", "_add_apply_field", "(", "self", ",", "results", ",", "new_field_name", ",", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06results\u4f5c\u4e3a\u52a0\u5165\u5230\u65b0\u7684field\u4e2d\uff0cfield\u540d\u79f0\u4e3anew_field_name\n\n        :param List[str] results: \u4e00\u822c\u662fapply*()\u4e4b\u540e\u7684\u7ed3\u679c\n        :param str new_field_name: \u65b0\u52a0\u5165\u7684field\u7684\u540d\u79f0\n        :param dict kwargs: \u7528\u6237apply*()\u65f6\u4f20\u5165\u7684\u81ea\u5b9a\u4e49\u53c2\u6570\n        :return:\n        \"\"\"", "\n", "extra_param", "=", "{", "}", "\n", "if", "'is_input'", "in", "kwargs", ":", "\n", "            ", "extra_param", "[", "'is_input'", "]", "=", "kwargs", "[", "'is_input'", "]", "\n", "", "if", "'is_target'", "in", "kwargs", ":", "\n", "            ", "extra_param", "[", "'is_target'", "]", "=", "kwargs", "[", "'is_target'", "]", "\n", "", "if", "'ignore_type'", "in", "kwargs", ":", "\n", "            ", "extra_param", "[", "'ignore_type'", "]", "=", "kwargs", "[", "'ignore_type'", "]", "\n", "", "if", "new_field_name", "in", "self", ".", "field_arrays", ":", "\n", "# overwrite the field, keep same attributes", "\n", "            ", "old_field", "=", "self", ".", "field_arrays", "[", "new_field_name", "]", "\n", "if", "'is_input'", "not", "in", "extra_param", ":", "\n", "                ", "extra_param", "[", "'is_input'", "]", "=", "old_field", ".", "is_input", "\n", "", "if", "'is_target'", "not", "in", "extra_param", ":", "\n", "                ", "extra_param", "[", "'is_target'", "]", "=", "old_field", ".", "is_target", "\n", "", "if", "'ignore_type'", "not", "in", "extra_param", ":", "\n", "                ", "extra_param", "[", "'ignore_type'", "]", "=", "old_field", ".", "ignore_type", "\n", "", "self", ".", "add_field", "(", "field_name", "=", "new_field_name", ",", "fields", "=", "results", ",", "is_input", "=", "extra_param", "[", "\"is_input\"", "]", ",", "\n", "is_target", "=", "extra_param", "[", "\"is_target\"", "]", ",", "ignore_type", "=", "extra_param", "[", "'ignore_type'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_field", "(", "field_name", "=", "new_field_name", ",", "fields", "=", "results", ",", "is_input", "=", "extra_param", ".", "get", "(", "\"is_input\"", ",", "None", ")", ",", "\n", "is_target", "=", "extra_param", ".", "get", "(", "\"is_target\"", ",", "None", ")", ",", "\n", "ignore_type", "=", "extra_param", ".", "get", "(", "\"ignore_type\"", ",", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_more": [[921, 981], ["callable", "len", "enumerate", "results.items", "dataset.DataSet._inner_iter", "dataset.DataSet._add_apply_field", "func", "func", "isinstance", "dataset.ApplyResultException", "func.items", "func.items", "isinstance", "_logger.logger.error", "results[].append", "len", "len", "dataset.ApplyResultException", "_logger.logger.error", "dataset.ApplyResultException"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet._inner_iter", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet._add_apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "def", "apply_more", "(", "self", ",", "func", ",", "modify_fields", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06 ``DataSet`` \u4e2d\u6bcf\u4e2a ``Instance`` \u4f20\u5165\u5230func\u4e2d\uff0c\u5e76\u83b7\u53d6\u5b83\u7684\u8fd4\u56de\u503c\u3002func\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u6216\u591a\u4e2a field \u4e0a\u7684\u7ed3\u679c\u3002\n        \n        .. note::\n            ``apply_more`` \u4e0e ``apply`` \u7684\u533a\u522b\uff1a\n            \n            1. ``apply_more`` \u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a field \u7684\u7ed3\u679c\uff0c ``apply`` \u53ea\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2afield \u7684\u7ed3\u679c\uff1b\n            \n            2. ``apply_more`` \u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u6bcf\u4e2a key-value \u5bf9\u4e2d\u7684 key \u8868\u793a field \u7684\u540d\u5b57\uff0cvalue \u8868\u793a\u8ba1\u7b97\u7ed3\u679c\uff1b\n            \n            3. ``apply_more`` \u9ed8\u8ba4\u4fee\u6539 ``DataSet`` \u4e2d\u7684 field \uff0c``apply`` \u9ed8\u8ba4\u4e0d\u4fee\u6539\u3002\n\n        :param callable func: \u53c2\u6570\u662f ``DataSet`` \u4e2d\u7684 ``Instance`` \uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5b57\u5178\uff0ckey \u662ffield \u7684\u540d\u5b57\uff0cvalue \u662f\u5bf9\u5e94\u7684\u7ed3\u679c\n        :param bool modify_fields: \u662f\u5426\u7528\u7ed3\u679c\u4fee\u6539 ``DataSet`` \u4e2d\u7684 ``Field`` \uff0c \u9ed8\u8ba4\u4e3a True\n        :param optional kwargs: \u652f\u6301\u8f93\u5165is_input,is_target,ignore_type\n\n            1. is_input: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u88ab\u4fee\u6539\u7684\u7684field\u8bbe\u7f6e\u4e3ainput\n\n            2. is_target: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u88ab\u4fee\u6539\u7684\u7684field\u8bbe\u7f6e\u4e3atarget\n\n            3. ignore_type: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06\u88ab\u4fee\u6539\u7684\u7684field\u7684ignore_type\u8bbe\u7f6e\u4e3atrue, \u5ffd\u7565\u5176\u7c7b\u578b\n\n        :return Dict[str:Field]: \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\n        \"\"\"", "\n", "# \u8fd4\u56de dict , \u68c0\u67e5\u662f\u5426\u4e00\u76f4\u76f8\u540c", "\n", "assert", "callable", "(", "func", ")", ",", "\"The func you provide is not callable.\"", "\n", "assert", "len", "(", "self", ")", "!=", "0", ",", "\"Null DataSet cannot use apply().\"", "\n", "idx", "=", "-", "1", "\n", "try", ":", "\n", "            ", "results", "=", "{", "}", "\n", "for", "idx", ",", "ins", "in", "enumerate", "(", "self", ".", "_inner_iter", "(", ")", ")", ":", "\n", "                ", "if", "\"_apply_field\"", "in", "kwargs", ":", "\n", "                    ", "res", "=", "func", "(", "ins", "[", "kwargs", "[", "\"_apply_field\"", "]", "]", ")", "\n", "", "else", ":", "\n", "                    ", "res", "=", "func", "(", "ins", ")", "\n", "", "if", "not", "isinstance", "(", "res", ",", "dict", ")", ":", "\n", "                    ", "raise", "ApplyResultException", "(", "\"The result of func is not a dict\"", ",", "idx", ")", "\n", "", "if", "idx", "==", "0", ":", "\n", "                    ", "for", "key", ",", "value", "in", "res", ".", "items", "(", ")", ":", "\n", "                        ", "results", "[", "key", "]", "=", "[", "value", "]", "\n", "", "", "else", ":", "\n", "                    ", "for", "key", ",", "value", "in", "res", ".", "items", "(", ")", ":", "\n", "                        ", "if", "key", "not", "in", "results", ":", "\n", "                            ", "raise", "ApplyResultException", "(", "\"apply results have different fields\"", ",", "idx", ")", "\n", "", "results", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "", "if", "len", "(", "res", ")", "!=", "len", "(", "results", ")", ":", "\n", "                        ", "raise", "ApplyResultException", "(", "\"apply results have different fields\"", ",", "idx", ")", "\n", "", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "if", "idx", "!=", "-", "1", ":", "\n", "                ", "if", "isinstance", "(", "e", ",", "ApplyResultException", ")", ":", "\n", "                    ", "logger", ".", "error", "(", "e", ".", "msg", ")", "\n", "", "logger", ".", "error", "(", "\"Exception happens at the `{}`th instance.\"", ".", "format", "(", "idx", ")", ")", "\n", "", "raise", "e", "\n", "\n", "", "if", "modify_fields", "is", "True", ":", "\n", "            ", "for", "field", ",", "result", "in", "results", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_add_apply_field", "(", "result", ",", "field", ",", "kwargs", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply": [[982, 1018], ["callable", "len", "enumerate", "dataset.DataSet._add_apply_field", "dataset.DataSet._inner_iter", "results.append", "results.append", "_logger.logger.error", "func", "func"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet._add_apply_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet._inner_iter", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "apply", "(", "self", ",", "func", ",", "new_field_name", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06DataSet\u4e2d\u6bcf\u4e2ainstance\u4f20\u5165\u5230func\u4e2d\uff0c\u5e76\u83b7\u53d6\u5b83\u7684\u8fd4\u56de\u503c.\n\n        :param callable func: \u53c2\u6570\u662f ``DataSet`` \u4e2d\u7684 ``Instance``\n        :param None,str new_field_name: \u5c06func\u8fd4\u56de\u7684\u5185\u5bb9\u653e\u5165\u5230 `new_field_name` \u8fd9\u4e2afield\u4e2d\uff0c\u5982\u679c\u540d\u79f0\u4e0e\u5df2\u6709\u7684field\u76f8\u540c\uff0c\u5219\u8986\n            \u76d6\u4e4b\u524d\u7684field\u3002\u5982\u679c\u4e3aNone\u5219\u4e0d\u521b\u5efa\u65b0\u7684field\u3002\n        :param optional kwargs: \u652f\u6301\u8f93\u5165is_input,is_target,ignore_type\n\n            1. is_input: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06 `new_field_name` \u7684field\u8bbe\u7f6e\u4e3ainput\n\n            2. is_target: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06 `new_field_name` \u7684field\u8bbe\u7f6e\u4e3atarget\n\n            3. ignore_type: bool, \u5982\u679c\u4e3aTrue\u5219\u5c06 `new_field_name` \u7684field\u7684ignore_type\u8bbe\u7f6e\u4e3atrue, \u5ffd\u7565\u5176\u7c7b\u578b\n\n        :return List[Any]: \u91cc\u9762\u7684\u5143\u7d20\u4e3afunc\u7684\u8fd4\u56de\u503c\uff0c\u6240\u4ee5list\u957f\u5ea6\u4e3aDataSet\u7684\u957f\u5ea6\n        \"\"\"", "\n", "assert", "callable", "(", "func", ")", ",", "\"The func you provide is not callable.\"", "\n", "assert", "len", "(", "self", ")", "!=", "0", ",", "\"Null DataSet cannot use apply().\"", "\n", "idx", "=", "-", "1", "\n", "try", ":", "\n", "            ", "results", "=", "[", "]", "\n", "for", "idx", ",", "ins", "in", "enumerate", "(", "self", ".", "_inner_iter", "(", ")", ")", ":", "\n", "                ", "if", "\"_apply_field\"", "in", "kwargs", ":", "\n", "                    ", "results", ".", "append", "(", "func", "(", "ins", "[", "kwargs", "[", "\"_apply_field\"", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "results", ".", "append", "(", "func", "(", "ins", ")", ")", "\n", "", "", "", "except", "BaseException", "as", "e", ":", "\n", "            ", "if", "idx", "!=", "-", "1", ":", "\n", "                ", "logger", ".", "error", "(", "\"Exception happens at the `{}`th instance.\"", ".", "format", "(", "idx", ")", ")", "\n", "", "raise", "e", "\n", "\n", "", "if", "new_field_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "_add_apply_field", "(", "results", ",", "new_field_name", ",", "kwargs", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_seq_len": [[1019, 1032], ["dataset.DataSet.has_field", "dataset.DataSet.apply_field", "KeyError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.has_field", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.apply_field"], ["", "def", "add_seq_len", "(", "self", ",", "field_name", ":", "str", ",", "new_field_name", "=", "Const", ".", "INPUT_LEN", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06\u4f7f\u7528len()\u76f4\u63a5\u5bf9field_name\u4e2d\u6bcf\u4e2a\u5143\u7d20\u4f5c\u7528\uff0c\u5c06\u5176\u7ed3\u679c\u4f5c\u4e3asequence length, \u5e76\u653e\u5165seq_len\u8fd9\u4e2afield\u3002\n\n        :param field_name: str.\n        :param new_field_name: str. \u65b0\u7684field_name\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "has_field", "(", "field_name", "=", "field_name", ")", ":", "\n", "            ", "self", ".", "apply_field", "(", "len", ",", "field_name", ",", "new_field_name", "=", "new_field_name", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "f\"Field:{field_name} not found.\"", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.drop": [[1033, 1056], ["DataSet.DataSet.field_arrays.items", "len", "DataSet.DataSet", "DataSet.DataSet.field_arrays.items", "DataSet.DataSet", "DataSet.DataSet._inner_iter", "DataSet.field_arrays[].to", "func", "func"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet._inner_iter", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], ["", "def", "drop", "(", "self", ",", "func", ",", "inplace", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        func\u63a5\u53d7\u4e00\u4e2aInstance\uff0c\u8fd4\u56debool\u503c\u3002\u8fd4\u56de\u503c\u4e3aTrue\u65f6\uff0c\u8be5Instance\u4f1a\u88ab\u79fb\u9664\u6216\u8005\u4e0d\u4f1a\u5305\u542b\u5728\u8fd4\u56de\u7684DataSet\u4e2d\u3002\n\n        :param callable func: \u63a5\u53d7\u4e00\u4e2aInstance\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd4\u56debool\u503c\u3002\u4e3aTrue\u65f6\u5220\u9664\u8be5instance\n        :param bool inplace: \u662f\u5426\u5728\u5f53\u524dDataSet\u4e2d\u76f4\u63a5\u5220\u9664instance\uff1b\u5982\u679c\u4e3aFalse\uff0c\u5c06\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684DataSet\u3002\n\n        :return: DataSet\n        \"\"\"", "\n", "if", "inplace", ":", "\n", "            ", "results", "=", "[", "ins", "for", "ins", "in", "self", ".", "_inner_iter", "(", ")", "if", "not", "func", "(", "ins", ")", "]", "\n", "for", "name", ",", "old_field", "in", "self", ".", "field_arrays", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "field_arrays", "[", "name", "]", ".", "content", "=", "[", "ins", "[", "name", "]", "for", "ins", "in", "results", "]", "\n", "", "return", "self", "\n", "", "else", ":", "\n", "            ", "results", "=", "[", "ins", "for", "ins", "in", "self", "if", "not", "func", "(", "ins", ")", "]", "\n", "if", "len", "(", "results", ")", "!=", "0", ":", "\n", "                ", "dataset", "=", "DataSet", "(", "results", ")", "\n", "for", "field_name", ",", "field", "in", "self", ".", "field_arrays", ".", "items", "(", ")", ":", "\n", "                    ", "dataset", ".", "field_arrays", "[", "field_name", "]", ".", "to", "(", "field", ")", "\n", "", "return", "dataset", "\n", "", "else", ":", "\n", "                ", "return", "DataSet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split": [[1057, 1091], ["isinstance", "int", "dataset.DataSet", "dataset.DataSet", "dataset.DataSet.collater", "dataset.DataSet.collater", "len", "numpy.random.shuffle", "_logger.logger.error", "IndexError", "dataset.DataSet.append", "dataset.DataSet.append", "DataSet.field_arrays[].to", "DataSet.field_arrays[].to", "len", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.collater", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.collater", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], ["", "", "", "def", "split", "(", "self", ",", "ratio", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06DataSet\u6309\u7167ratio\u7684\u6bd4\u4f8b\u62c6\u5206\uff0c\u8fd4\u56de\u4e24\u4e2aDataSet\n\n        :param float ratio: 0<ratio<1, \u8fd4\u56de\u7684\u7b2c\u4e00\u4e2aDataSet\u62e5\u6709 `(1-ratio)` \u8fd9\u4e48\u591a\u6570\u636e\uff0c\u7b2c\u4e8c\u4e2aDataSet\u62e5\u6709`ratio`\u8fd9\u4e48\u591a\u6570\u636e\n        :param bool shuffle: \u5728split\u524d\u662f\u5426shuffle\u4e00\u4e0b\n        :return: [ :class:`~fastNLP.\u8bfb\u53d6\u540e\u7684DataSet` , :class:`~fastNLP.\u8bfb\u53d6\u540e\u7684DataSet` ]\n        \"\"\"", "\n", "assert", "len", "(", "self", ")", ">", "1", ",", "f'DataSet with {len(self)} instance cannot be split.'", "\n", "assert", "isinstance", "(", "ratio", ",", "float", ")", "\n", "assert", "0", "<", "ratio", "<", "1", "\n", "all_indices", "=", "[", "_", "for", "_", "in", "range", "(", "len", "(", "self", ")", ")", "]", "\n", "if", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "all_indices", ")", "\n", "", "split", "=", "int", "(", "ratio", "*", "len", "(", "self", ")", ")", "\n", "if", "split", "==", "0", ":", "\n", "            ", "error_msg", "=", "f'Dev DataSet has {split} instance after split.'", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "IndexError", "(", "error_msg", ")", "\n", "", "dev_indices", "=", "all_indices", "[", ":", "split", "]", "\n", "train_indices", "=", "all_indices", "[", "split", ":", "]", "\n", "dev_set", "=", "DataSet", "(", ")", "\n", "train_set", "=", "DataSet", "(", ")", "\n", "for", "idx", "in", "dev_indices", ":", "\n", "            ", "dev_set", ".", "append", "(", "self", "[", "idx", "]", ")", "\n", "", "for", "idx", "in", "train_indices", ":", "\n", "            ", "train_set", ".", "append", "(", "self", "[", "idx", "]", ")", "\n", "", "for", "field_name", "in", "self", ".", "field_arrays", ":", "\n", "            ", "train_set", ".", "field_arrays", "[", "field_name", "]", ".", "to", "(", "self", ".", "field_arrays", "[", "field_name", "]", ")", "\n", "dev_set", ".", "field_arrays", "[", "field_name", "]", ".", "to", "(", "self", ".", "field_arrays", "[", "field_name", "]", ")", "\n", "\n", "", "train_set", ".", "collater", ".", "copy_from", "(", "self", ".", "collater", ")", "\n", "dev_set", ".", "collater", ".", "copy_from", "(", "self", ".", "collater", ")", "\n", "return", "train_set", ",", "dev_set", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save": [[1092, 1100], ["open", "_pickle.dump"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "r\"\"\"\n        \u4fdd\u5b58DataSet.\n\n        :param str path: \u5c06DataSet\u5b58\u5728\u54ea\u4e2a\u8def\u5f84\n        \"\"\"", "\n", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load": [[1101, 1113], ["open", "_pickle.load", "isinstance", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["", "", "@", "staticmethod", "\n", "def", "load", "(", "path", ")", ":", "\n", "        ", "r\"\"\"\n        \u4ece\u4fdd\u5b58\u7684DataSet pickle\u6587\u4ef6\u7684\u8def\u5f84\u4e2d\u8bfb\u53d6DataSet\n\n        :param str path: \u4ece\u54ea\u91cc\u8bfb\u53d6DataSet\n        :return: \u8bfb\u53d6\u540e\u7684 :class:`~fastNLP.\u8bfb\u53d6\u540e\u7684DataSet`\u3002\n        \"\"\"", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "d", "=", "pickle", ".", "load", "(", "f", ")", "\n", "assert", "isinstance", "(", "d", ",", "DataSet", ")", ",", "\"The object is not DataSet, but {}.\"", ".", "format", "(", "type", "(", "d", ")", ")", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.add_collate_fn": [[1114, 1129], ["callable", "dataset.DataSet.collater.add_fn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.add_fn"], ["", "def", "add_collate_fn", "(", "self", ",", "fn", ",", "name", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u6dfb\u52a0 CollateFn\uff0ccollate_fn\u5141\u8bb8\u5728\u751f\u6210\u7684batch\u7684\u8fc7\u7a0b\u4e2d\u52a8\u6001\u751f\u6210\u4e00\u4e9b\u6570\u636e(\u5728DataSetIter\u4f5c\u4e3a\u8fed\u4ee3\u5668\u7684\u60c5\u51b5\u4e0b\u6709\u6548\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c31\u662f\u7528\u7684\n        \u8fd9\u4e2a)\u3002\u652f\u6301\u4f9d\u6b21\u6dfb\u52a0\u591a\u4e2acollate_fn, \u5982\u679c\u76f8\u540c\u7684key\uff0c\u540e\u9762\u7684collate_fn\u7684\u7ed3\u679c\u8986\u76d6\u524d\u9762\u7684collate_fn\u7684\u7ed3\u679c\u3002\n\n        :param callable fn: \u4f20\u5165\u4e00\u4e2a\u53ef\u8c03\u7528\u7684function, \u8be5function\u53ef\u63a5\u53d7\u7684\u53c2\u6570\u4e3aList[(ind1, instance1), (ind2, instance2)]\n            (\u67d0\u4e2abatch\u88ab\u9009\u4e2d\u7684\u6240\u6709\u7684indice\u4ee5\u53cainstance),\u5176\u4e2dind1/ind2\u662f\u8be5instance\u5728dataset\u4e2d\u7684index\uff0cinstance1/instance2\u662f\n            \u8fd9\u6b21batch\u53d6\u51fa\u6765\u7684\u6570\u636e\uff0c\u5305\u542b\u4e86\u6240\u6709\u7684field\u3002\u8fd4\u56de\u503c\u9700\u8981\u4e3a\u4e24\u4e2adict\uff0c\u7b2c\u4e00\u4e2adict\u7684\u503c\u5c06\u88ab\u8ba4\u4e3a\u662finput\uff0c\u7b2c\u4e8c\u4e2adict\u7684\u503c\u88ab\u8ba4\u4e3a\u662f\n            target\uff0c\u8fd4\u56de\u7684\u503c\u81f3\u591a\u5141\u8bb8\u4e00\u4e2a\u7a7adict\u3002\u82e5\u8fd4\u56de\u7684dict\u4e2d\u5305\u542b\u4e86\u88ab\u8bbe\u7f6e\u4e3ainput\u6216target\u7684field\u7684\u540d\u79f0\uff0c\u5c06\u8986\u76d6dataset\u4e2d\u7684field\u3002\n            fastNLP\u4e0d\u4f1a\u5c06collate_fn\u7684\u8fd4\u56de\u7ed3\u679cpad\u548c\u8f6c\u6362\u4e3atensor\uff0c\u9700\u8981\u5728collate_fn\u4e2d\u5b8c\u6210pad\u548c\u8f6c\u6362\u4e3atensor\uff08\u4e0d\u9700\u8981\u5c06tensor\u79fb\u52a8\u5230\n            gpu\u4e2d\uff0cfastNLP\u4f1a\u81ea\u52a8\u5c06\u5176\u79fb\u52a8\u5230\u7279\u5b9agpu\uff09\u3002\u4e0d\u8981\u4fee\u6539\u4f20\u5165collate_fn\u4e2d\u7684\u6570\u636e\uff0c\u5426\u5219\u53ef\u80fd\u5bfc\u81f4\u672a\u77e5\u95ee\u9898\u3002\n        :param str,int name: collate_fn\u7684\u540d\u79f0\uff0c\u5982\u679c\u4e0d\u4f20\u5165\uff0c\u9ed8\u8ba4\u4f7f\u7528\u81ea\u589e\u957f\u7684\u6570\u5b57\u4f5c\u4e3akey\u3002\u76f8\u540c\u7684name\u4f1a\u8986\u76d6\u4e4b\u524d\u7684collate_fn\u3002\n        \"\"\"", "\n", "assert", "callable", "(", "fn", ")", ",", "\"You must pass in a callable object.\"", "\n", "self", ".", "collater", ".", "add_fn", "(", "fn", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.delete_collate_fn": [[1130, 1138], ["dataset.DataSet.collater.delete_fn"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.delete_fn"], ["", "def", "delete_collate_fn", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u5220\u9664\u67d0\u4e2acollate_fn\n\n        :param str,int name: \u5982\u679c\u4e3aNone\uff0c\u5219\u5220\u9664\u6700\u8fd1\u52a0\u5165\u7684collate_fn\n        :return:\n        \"\"\"", "\n", "self", ".", "collater", ".", "delete_fn", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet._collate_batch": [[1139, 1141], ["dataset.DataSet.collater.collate_batch"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.collate_batch"], ["", "def", "_collate_batch", "(", "self", ",", "ins_list", ")", ":", "\n", "        ", "return", "self", ".", "collater", ".", "collate_batch", "(", "ins_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.Sampler.__call__": [[25, 31], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "data_set", ")", ":", "\n", "        ", "r\"\"\"\n        :param DataSet data_set: `DataSet` \u5bf9\u8c61, \u9700\u8981Sample\u7684\u6570\u636e\n        :return result: list(int) \u5176\u4e2d\u5143\u7d20\u7684\u4e0b\u6807\u5e8f\u5217, ``data_set`` \u4e2d\u5143\u7d20\u4f1a\u6309 ``result`` \u4e2d\u987a\u5e8f\u53d6\u51fa\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.SequentialSampler.__call__": [[39, 41], ["list", "range", "len"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "data_set", ")", ":", "\n", "        ", "return", "list", "(", "range", "(", "len", "(", "data_set", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.RandomSampler.__call__": [[49, 51], ["list", "numpy.random.permutation", "len"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "data_set", ")", ":", "\n", "        ", "return", "list", "(", "np", ".", "random", ".", "permutation", "(", "len", "(", "data_set", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.BucketSampler.__init__": [[57, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_buckets", "=", "10", ",", "batch_size", "=", "None", ",", "seq_len_field_name", "=", "'seq_len'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param int num_buckets: bucket\u7684\u6570\u91cf\n        :param int batch_size: batch\u7684\u5927\u5c0f. \u9ed8\u8ba4\u4e3aNone\uff0cTrainer/Tester\u5728\u8c03\u7528BucketSampler\u65f6\uff0c\u4f1a\u5c06\u8be5\u503c\u6b63\u786e\u8bbe\u7f6e\uff0c\u5982\u679c\u662f\u975e\n            Trainer/Tester\u573a\u666f\u4f7f\u7528\uff0c\u9700\u8981\u663e\u793a\u4f20\u9012\u8be5\u503c\n        :param str seq_len_field_name: \u5bf9\u5e94\u5e8f\u5217\u957f\u5ea6\u7684 `field` \u7684\u540d\u5b57\n        \"\"\"", "\n", "self", ".", "num_buckets", "=", "num_buckets", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "seq_len_field_name", "=", "seq_len_field_name", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.BucketSampler.set_batch_size": [[69, 76], ["None"], "methods", ["None"], ["", "def", "set_batch_size", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param int batch_size: \u6bcf\u4e2abatch\u7684\u5927\u5c0f\n        :return:\n        \"\"\"", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.BucketSampler.__call__": [[77, 112], ["len", "range", "list", "range", "numpy.random.shuffle", "list", "RuntimeError", "bucket_indexes.append", "sorted", "left_init_indexes.extend", "numpy.random.shuffle", "range", "batchs.append", "itertools.chain", "data_set.get_all_fields", "len", "batchs.append", "zip", "range"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_all_fields", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "__call__", "(", "self", ",", "data_set", ")", ":", "\n", "        ", "if", "self", ".", "batch_size", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"batch_size is None.\"", ")", "\n", "", "seq_lens", "=", "data_set", ".", "get_all_fields", "(", ")", "[", "self", ".", "seq_len_field_name", "]", ".", "content", "\n", "total_sample_num", "=", "len", "(", "seq_lens", ")", "\n", "\n", "bucket_indexes", "=", "[", "]", "\n", "assert", "total_sample_num", ">=", "self", ".", "num_buckets", ",", "\"The number of samples is smaller than the number of buckets.\"", "\n", "num_sample_per_bucket", "=", "total_sample_num", "//", "self", ".", "num_buckets", "\n", "for", "i", "in", "range", "(", "self", ".", "num_buckets", ")", ":", "\n", "            ", "bucket_indexes", ".", "append", "(", "[", "num_sample_per_bucket", "*", "i", ",", "num_sample_per_bucket", "*", "(", "i", "+", "1", ")", "]", ")", "\n", "", "bucket_indexes", "[", "-", "1", "]", "[", "1", "]", "=", "total_sample_num", "\n", "\n", "sorted_seq_lens", "=", "list", "(", "sorted", "(", "[", "(", "idx", ",", "seq_len", ")", "for", "\n", "idx", ",", "seq_len", "in", "zip", "(", "range", "(", "total_sample_num", ")", ",", "seq_lens", ")", "]", ",", "\n", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", ")", "\n", "\n", "batchs", "=", "[", "]", "\n", "\n", "left_init_indexes", "=", "[", "]", "\n", "for", "b_idx", "in", "range", "(", "self", ".", "num_buckets", ")", ":", "\n", "            ", "start_idx", "=", "bucket_indexes", "[", "b_idx", "]", "[", "0", "]", "\n", "end_idx", "=", "bucket_indexes", "[", "b_idx", "]", "[", "1", "]", "\n", "sorted_bucket_seq_lens", "=", "sorted_seq_lens", "[", "start_idx", ":", "end_idx", "]", "\n", "left_init_indexes", ".", "extend", "(", "[", "tup", "[", "0", "]", "for", "tup", "in", "sorted_bucket_seq_lens", "]", ")", "\n", "num_batch_per_bucket", "=", "len", "(", "left_init_indexes", ")", "//", "self", ".", "batch_size", "\n", "np", ".", "random", ".", "shuffle", "(", "left_init_indexes", ")", "\n", "for", "i", "in", "range", "(", "num_batch_per_bucket", ")", ":", "\n", "                ", "batchs", ".", "append", "(", "left_init_indexes", "[", "i", "*", "self", ".", "batch_size", ":", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", "]", ")", "\n", "", "left_init_indexes", "=", "left_init_indexes", "[", "num_batch_per_bucket", "*", "self", ".", "batch_size", ":", "]", "\n", "", "if", "(", "left_init_indexes", ")", "!=", "0", ":", "\n", "            ", "batchs", ".", "append", "(", "left_init_indexes", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "batchs", ")", "\n", "\n", "return", "list", "(", "chain", "(", "*", "batchs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.ConstantTokenNumSampler.__init__": [[132, 160], ["seq_len_indice.sort", "sampler.ConstantTokenNumSampler.get_new_order", "len", "enumerate", "len", "len", "len", "indice_in_buckets.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.ConstantTokenNumSampler.get_new_order", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["def", "__init__", "(", "self", ",", "seq_len", ",", "max_token", "=", "4096", ",", "max_sentence", "=", "-", "1", ",", "need_be_multiple_of", "=", "1", ",", "num_bucket", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"\n\n        :param List[int] seq_len: list[int], \u662f\u6bcf\u4e2asample\u7684\u957f\u5ea6\u3002\u4e00\u822c\u53ef\u4ee5\u901a\u8fc7dataset.get_field('seq_len').content\u4f20\u5165\n        :param int max_token: \u6bcf\u4e2abatch\u7684\u6700\u5927\u7684token\u6570\u91cf\n        :param int max_sentence: \u6bcf\u4e2abatch\u6700\u591a\u591a\u5c11\u4e2ainstance, -1\u8868\u793a\u6839\u636emax_token\u51b3\u5b9a\n        :param int need_be_multiple_of: \u751f\u6210\u7684batch\u7684instance\u7684\u6570\u91cf\u9700\u8981\u662f\u51e0\u7684\u500d\u6570\uff0c\u5728DataParallel\u573a\u666f\u4e0b\u4f1a\u7528\u5230\n        :param int num_bucket: \u5c06\u6570\u636e\u6309\u957f\u5ea6\u62c6\u5206\u4e3anum_bucket\u4e2abucket\uff0cbatch\u4e2d\u7684sample\u5c3d\u91cf\u5728bucket\u4e4b\u4e2d\u8fdb\u884c\u7ec4\u5408\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11padding\u3002\n        \"\"\"", "\n", "assert", "(", "max_sentence", "!=", "-", "1", "and", "max_sentence", ">=", "need_be_multiple_of", ")", "or", "max_sentence", "<", "1", "\n", "assert", "len", "(", "seq_len", ")", ">", "num_bucket", ",", "\"The number of samples should be larger than buckets.\"", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "max_token", "=", "max_token", "\n", "self", ".", "_max_sentence", "=", "max_sentence", "\n", "self", ".", "need_be_multiple_of", "=", "need_be_multiple_of", "\n", "seq_len_indice", "=", "[", "(", "length", ",", "i", ")", "for", "i", ",", "length", "in", "enumerate", "(", "seq_len", ")", "]", "\n", "seq_len_indice", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "indice_in_buckets", "=", "[", "]", "\n", "if", "num_bucket", ">", "0", ":", "\n", "            ", "sample_per_bucket", "=", "len", "(", "seq_len_indice", ")", "//", "num_bucket", "\n", "i", "=", "0", "\n", "while", "len", "(", "indice_in_buckets", ")", "<", "len", "(", "seq_len_indice", ")", ":", "\n", "                ", "indice_in_buckets", ".", "append", "(", "seq_len_indice", "[", "i", "*", "sample_per_bucket", ":", "(", "i", "+", "1", ")", "*", "sample_per_bucket", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "indice_in_buckets", "=", "[", "seq_len_indice", "]", "\n", "", "self", ".", "indice_in_buckets", "=", "indice_in_buckets", "\n", "self", ".", "get_new_order", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.ConstantTokenNumSampler.max_sentence": [[167, 170], ["None"], "methods", ["None"], ["", "@", "max_sentence", ".", "setter", "\n", "def", "max_sentence", "(", "self", ",", "max_sentence", ")", ":", "\n", "        ", "self", ".", "_max_sentence", "=", "max_sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.ConstantTokenNumSampler.get_new_order": [[171, 206], ["numpy.random.shuffle", "list", "numpy.random.shuffle", "numpy.random.shuffle", "itertools.chain", "max", "batch.append", "batch.copy", "batch.copy", "batches.append", "len", "add_samples[].copy", "batches.append", "len", "len", "max", "len", "RuntimeError", "max", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "get_new_order", "(", "self", ")", ":", "\n", "        ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indice_in_buckets", ")", "\n", "for", "bucket", "in", "self", ".", "indice_in_buckets", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "bucket", ")", "\n", "", "indices", "=", "list", "(", "chain", "(", "*", "self", ".", "indice_in_buckets", ")", ")", "\n", "batches", "=", "[", "]", "\n", "cur_max_len", "=", "0", "\n", "batch", "=", "[", "]", "\n", "for", "length", ",", "i", "in", "indices", ":", "\n", "            ", "max_len", "=", "max", "(", "length", ",", "cur_max_len", ")", "\n", "if", "max_len", "*", "(", "len", "(", "batch", ")", "+", "1", ")", ">", "self", ".", "max_token", "or", "len", "(", "batch", ")", ">=", "self", ".", "max_sentence", ":", "\n", "                ", "left_sample", "=", "len", "(", "batch", ")", "%", "self", ".", "need_be_multiple_of", "\n", "add_samples", "=", "batch", ".", "copy", "(", ")", "\n", "cur_max_len", "=", "length", "\n", "if", "left_sample", "!=", "0", ":", "\n", "                    ", "add_samples", "=", "add_samples", "[", ":", "-", "left_sample", "]", "\n", "batch", "=", "batch", "[", "-", "left_sample", ":", "]", "\n", "cur_max_len", "=", "max", "(", "cur_max_len", ",", "max", "(", "batch", ")", ")", "\n", "", "else", ":", "\n", "                    ", "batch", "=", "[", "]", "\n", "", "if", "len", "(", "add_samples", ")", "==", "0", ":", "\n", "                    ", "raise", "RuntimeError", "(", "f\"The sample `{i}` is too long to make a batch with {self.need_be_multiple_of} samples.\"", ")", "\n", "", "batches", ".", "append", "(", "add_samples", ")", "\n", "", "else", ":", "\n", "                ", "cur_max_len", "=", "max_len", "\n", "", "batch", ".", "append", "(", "i", ")", "\n", "", "if", "batch", ":", "\n", "            ", "left_sample", "=", "len", "(", "batch", ")", "%", "self", ".", "need_be_multiple_of", "\n", "add_samples", "=", "batch", ".", "copy", "(", ")", "\n", "if", "left_sample", "!=", "0", ":", "\n", "                ", "add_samples", "=", "add_samples", "[", ":", "-", "left_sample", "]", ".", "copy", "(", ")", "\n", "", "if", "add_samples", ":", "\n", "                ", "batches", ".", "append", "(", "add_samples", ")", "\n", "", "", "np", ".", "random", ".", "shuffle", "(", "batches", ")", "\n", "self", ".", "batches", "=", "batches", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.ConstantTokenNumSampler.__iter__": [[207, 211], ["sampler.ConstantTokenNumSampler.get_new_order"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.ConstantTokenNumSampler.get_new_order"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "batch", "in", "self", ".", "batches", ":", "\n", "            ", "yield", "batch", "\n", "", "self", ".", "get_new_order", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.ConstantTokenNumSampler.__len__": [[212, 214], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.SortedSampler.__init__": [[220, 228], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "seq_len_field_name", "=", "'seq_len'", ",", "descending", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n\n        :param str seq_len_field_name: \u5bf9\u5e94\u5e8f\u5217\u957f\u5ea6\u7684 `field` \u7684\u540d\u5b57\n        :param bool descending: \u662f\u5426\u964d\u5e8f\u6392\u5217\n        \"\"\"", "\n", "self", ".", "seq_len_field_name", "=", "seq_len_field_name", "\n", "self", ".", "descending", "=", "descending", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.SortedSampler.__call__": [[229, 235], ["numpy.argsort().tolist", "data_set.get_field", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.get_field"], ["", "def", "__call__", "(", "self", ",", "data_set", ")", ":", "\n", "        ", "seq_lens", "=", "data_set", ".", "get_field", "(", "self", ".", "seq_len_field_name", ")", ".", "content", "\n", "orders", "=", "np", ".", "argsort", "(", "seq_lens", ")", ".", "tolist", "(", ")", "# \u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f", "\n", "if", "self", ".", "descending", ":", "\n", "            ", "orders", "=", "orders", "[", ":", ":", "-", "1", "]", "\n", "", "return", "orders", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.simple_sort_bucketing": [[237, 255], ["sorted", "enumerate"], "function", ["None"], ["", "", "def", "simple_sort_bucketing", "(", "lengths", ")", ":", "\n", "    ", "r\"\"\"\n\n    :param lengths: list of int, the lengths of all examples.\n    :return data: 2-level list\n            ::\n\n                [\n                    [index_11, index_12, ...],  # bucket 1\n                    [index_21, index_22, ...],  # bucket 2\n                    ...\n                ]\n\n    \"\"\"", "\n", "lengths_mapping", "=", "[", "(", "idx", ",", "length", ")", "for", "idx", ",", "length", "in", "enumerate", "(", "lengths", ")", "]", "\n", "sorted_lengths", "=", "sorted", "(", "lengths_mapping", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "# TODO: need to return buckets", "\n", "return", "[", "idx", "for", "idx", ",", "_", "in", "sorted_lengths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.k_means_1d": [[257, 285], ["sorted", "numpy.array", "numpy.array", "range", "list", "len", "ValueError", "len", "numpy.array", "numpy.array", "numpy.array", "set", "range", "numpy.argmin", "x[].mean", "int", "range", "numpy.absolute"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "def", "k_means_1d", "(", "x", ",", "k", ",", "max_iter", "=", "100", ")", ":", "\n", "    ", "r\"\"\"Perform k-means on 1-D data.\n\n    :param x: list of int, representing points in 1-D.\n    :param k: the number of clusters required.\n    :param max_iter: maximum iteration\n    :return centroids: numpy array, centroids of the k clusters\n            assignment: numpy array, 1-D, the bucket id assigned to each example.\n    \"\"\"", "\n", "sorted_x", "=", "sorted", "(", "list", "(", "set", "(", "x", ")", ")", ")", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "if", "len", "(", "sorted_x", ")", "<", "k", ":", "\n", "        ", "raise", "ValueError", "(", "\"too few buckets\"", ")", "\n", "", "gap", "=", "len", "(", "sorted_x", ")", "/", "k", "\n", "\n", "centroids", "=", "np", ".", "array", "(", "[", "sorted_x", "[", "int", "(", "x", "*", "gap", ")", "]", "for", "x", "in", "range", "(", "k", ")", "]", ")", "\n", "assign", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "max_iter", ")", ":", "\n", "# Cluster Assignment step", "\n", "        ", "assign", "=", "np", ".", "array", "(", "[", "np", ".", "argmin", "(", "[", "np", ".", "absolute", "(", "x_i", "-", "x", ")", "for", "x", "in", "centroids", "]", ")", "for", "x_i", "in", "x", "]", ")", "\n", "# Move centroids step", "\n", "new_centroids", "=", "np", ".", "array", "(", "[", "x", "[", "assign", "==", "k", "]", ".", "mean", "(", ")", "for", "k", "in", "range", "(", "k", ")", "]", ")", "\n", "if", "(", "new_centroids", "==", "centroids", ")", ".", "all", "(", ")", ":", "\n", "            ", "centroids", "=", "new_centroids", "\n", "break", "\n", "", "centroids", "=", "new_centroids", "\n", "", "return", "np", ".", "array", "(", "centroids", ")", ",", "assign", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.k_means_bucketing": [[287, 311], ["len", "sampler.k_means_1d", "enumerate", "bucket_data[].append"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.k_means_1d", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "def", "k_means_bucketing", "(", "lengths", ",", "buckets", ")", ":", "\n", "    ", "r\"\"\"Assign all instances into possible buckets using k-means, such that instances in the same bucket have similar lengths.\n\n    :param lengths: list of int, the length of all samples.\n    :param buckets: list of int. The length of the list is the number of buckets. Each integer is the maximum length\n        threshold for each bucket (This is usually None.).\n    :return data: 2-level list\n            ::\n\n                [\n                    [index_11, index_12, ...],  # bucket 1\n                    [index_21, index_22, ...],  # bucket 2\n                    ...\n                ]\n\n    \"\"\"", "\n", "bucket_data", "=", "[", "[", "]", "for", "_", "in", "buckets", "]", "\n", "num_buckets", "=", "len", "(", "buckets", ")", "\n", "_", ",", "assignments", "=", "k_means_1d", "(", "lengths", ",", "num_buckets", ")", "\n", "\n", "for", "idx", ",", "bucket_id", "in", "enumerate", "(", "assignments", ")", ":", "\n", "        ", "if", "buckets", "[", "bucket_id", "]", "is", "None", "or", "lengths", "[", "idx", "]", "<=", "buckets", "[", "bucket_id", "]", ":", "\n", "            ", "bucket_data", "[", "bucket_id", "]", ".", "append", "(", "idx", ")", "\n", "", "", "return", "bucket_data", "\n", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUTS": [[38, 43], ["int", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["@", "staticmethod", "\n", "def", "INPUTS", "(", "i", ")", ":", "\n", "        ", "r\"\"\"\u5f97\u5230\u7b2c i \u4e2a ``INPUT`` \u7684\u547d\u540d\"\"\"", "\n", "i", "=", "int", "(", "i", ")", "+", "1", "\n", "return", "Const", ".", "INPUT", "+", "str", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.CHAR_INPUTS": [[44, 49], ["int", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "@", "staticmethod", "\n", "def", "CHAR_INPUTS", "(", "i", ")", ":", "\n", "        ", "r\"\"\"\u5f97\u5230\u7b2c i \u4e2a ``CHAR_INPUT`` \u7684\u547d\u540d\"\"\"", "\n", "i", "=", "int", "(", "i", ")", "+", "1", "\n", "return", "Const", ".", "CHAR_INPUT", "+", "str", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_WORDS": [[50, 55], ["int", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "@", "staticmethod", "\n", "def", "RAW_WORDS", "(", "i", ")", ":", "\n", "        ", "r\"\"\"\u5f97\u5230\u7b2c i \u4e2a ``RAW_WORDS`` \u7684\u547d\u540d\"\"\"", "\n", "i", "=", "int", "(", "i", ")", "+", "1", "\n", "return", "Const", ".", "RAW_WORD", "+", "str", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.RAW_CHARS": [[56, 61], ["int", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "@", "staticmethod", "\n", "def", "RAW_CHARS", "(", "i", ")", ":", "\n", "        ", "r\"\"\"\u5f97\u5230\u7b2c i \u4e2a ``RAW_CHARS`` \u7684\u547d\u540d\"\"\"", "\n", "i", "=", "int", "(", "i", ")", "+", "1", "\n", "return", "Const", ".", "RAW_CHAR", "+", "str", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.INPUT_LENS": [[62, 67], ["int", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "@", "staticmethod", "\n", "def", "INPUT_LENS", "(", "i", ")", ":", "\n", "        ", "r\"\"\"\u5f97\u5230\u7b2c i \u4e2a ``INPUT_LEN`` \u7684\u547d\u540d\"\"\"", "\n", "i", "=", "int", "(", "i", ")", "+", "1", "\n", "return", "Const", ".", "INPUT_LEN", "+", "str", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.OUTPUTS": [[68, 73], ["int", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "@", "staticmethod", "\n", "def", "OUTPUTS", "(", "i", ")", ":", "\n", "        ", "r\"\"\"\u5f97\u5230\u7b2c i \u4e2a ``OUTPUT`` \u7684\u547d\u540d\"\"\"", "\n", "i", "=", "int", "(", "i", ")", "+", "1", "\n", "return", "Const", ".", "OUTPUT", "+", "str", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.TARGETS": [[74, 79], ["int", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "@", "staticmethod", "\n", "def", "TARGETS", "(", "i", ")", ":", "\n", "        ", "r\"\"\"\u5f97\u5230\u7b2c i \u4e2a ``TARGET`` \u7684\u547d\u540d\"\"\"", "\n", "i", "=", "int", "(", "i", ")", "+", "1", "\n", "return", "Const", ".", "TARGET", "+", "str", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.const.Const.LOSSES": [[80, 85], ["int", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "@", "staticmethod", "\n", "def", "LOSSES", "(", "i", ")", ":", "\n", "        ", "r\"\"\"\u5f97\u5230\u7b2c i \u4e2a ``LOSS`` \u7684\u547d\u540d\"\"\"", "\n", "i", "=", "int", "(", "i", ")", "+", "1", "\n", "return", "Const", ".", "LOSS", "+", "str", "(", "i", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.__init__": [[44, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "collate_fns", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.add_fn": [[47, 60], ["utils.logger.warn", "len"], "methods", ["None"], ["", "def", "add_fn", "(", "self", ",", "fn", ",", "name", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u5411collater\u65b0\u589e\u4e00\u4e2acollate_fn\u51fd\u6570\n\n        :param callable fn:\n        :param str,int name:\n        :return:\n        \"\"\"", "\n", "if", "name", "in", "self", ".", "collate_fns", ":", "\n", "            ", "logger", ".", "warn", "(", "f\"collate_fn:{name} will be overwritten.\"", ")", "\n", "", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "len", "(", "self", ".", "collate_fns", ")", "\n", "", "self", ".", "collate_fns", "[", "name", "]", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.is_empty": [[61, 68], ["len"], "methods", ["None"], ["", "def", "is_empty", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8fd4\u56de\u662f\u5426\u5305\u542bcollate_fn\n\n        :return:\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "collate_fns", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.delete_fn": [[69, 82], ["collate_fn.Collater.is_empty", "collate_fn.Collater.collate_fns.pop", "collate_fn.Collater.collate_fns.pop", "list", "collate_fn.Collater.collate_fns.keys"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.is_empty", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "def", "delete_fn", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \u5220\u9664collate_fn\n\n        :param str,int name: \u5982\u679c\u4e3aNone\u5c31\u5220\u9664\u6700\u8fd1\u52a0\u5165\u7684collate_fn\n        :return:\n        \"\"\"", "\n", "if", "not", "self", ".", "is_empty", "(", ")", ":", "\n", "            ", "if", "name", "in", "self", ".", "collate_fns", ":", "\n", "                ", "self", ".", "collate_fns", ".", "pop", "(", "name", ")", "\n", "", "elif", "name", "is", "None", ":", "\n", "                ", "last_key", "=", "list", "(", "self", ".", "collate_fns", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "self", ".", "collate_fns", ".", "pop", "(", "last_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.collate_batch": [[83, 94], ["collate_fn.Collater.collate_fns.items", "bx.update", "by.update", "fn", "utils.logger.error"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update"], ["", "", "", "def", "collate_batch", "(", "self", ",", "ins_list", ")", ":", "\n", "        ", "bx", ",", "by", "=", "{", "}", ",", "{", "}", "\n", "for", "name", ",", "fn", "in", "self", ".", "collate_fns", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "batch_x", ",", "batch_y", "=", "fn", "(", "ins_list", ")", "\n", "", "except", "BaseException", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"Exception:`{e}` happens when call collate_fn:`{name}`.\"", ")", "\n", "raise", "e", "\n", "", "bx", ".", "update", "(", "batch_x", ")", "\n", "by", ".", "update", "(", "batch_y", ")", "\n", "", "return", "bx", ",", "by", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.copy_from": [[95, 100], ["isinstance", "collate_fn.Collater", "copy.deepcopy"], "methods", ["None"], ["", "def", "copy_from", "(", "self", ",", "col", ")", ":", "\n", "        ", "assert", "isinstance", "(", "col", ",", "Collater", ")", "\n", "new_col", "=", "Collater", "(", ")", "\n", "new_col", ".", "collate_fns", "=", "deepcopy", "(", "col", ".", "collate_fns", ")", "\n", "return", "new_col", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.ConcatCollateFn.__init__": [[114, 123], ["super().__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "inputs", ",", "output", ",", "pad_val", "=", "0", ",", "max_len", "=", "0", ",", "is_input", "=", "True", ",", "is_target", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "inputs", ",", "list", ")", "\n", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "output", "=", "output", "\n", "self", ".", "pad_val", "=", "pad_val", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "is_input", "=", "is_input", "\n", "self", ".", "is_target", "=", "is_target", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.ConcatCollateFn._to_numpy": [[124, 130], ["torch.is_tensor", "seq.numpy", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_to_numpy", "(", "seq", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "seq", ")", ":", "\n", "            ", "return", "seq", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "array", "(", "seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.ConcatCollateFn.__call__": [[131, 146], ["collate_fn.batching", "samples.append", "sample.append", "numpy.concatenate", "collate_fn.ConcatCollateFn._to_numpy"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.batching", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.ConcatCollateFn._to_numpy"], ["", "", "def", "__call__", "(", "self", ",", "ins_list", ")", ":", "\n", "        ", "samples", "=", "[", "]", "\n", "for", "i", ",", "ins", "in", "ins_list", ":", "\n", "            ", "sample", "=", "[", "]", "\n", "for", "input_name", "in", "self", ".", "inputs", ":", "\n", "                ", "sample", ".", "append", "(", "self", ".", "_to_numpy", "(", "ins", "[", "input_name", "]", ")", ")", "\n", "", "samples", ".", "append", "(", "np", ".", "concatenate", "(", "sample", ",", "axis", "=", "0", ")", ")", "\n", "", "batch", "=", "batching", "(", "samples", ",", "max_len", "=", "self", ".", "max_len", ",", "padding_val", "=", "self", ".", "pad_val", ")", "\n", "b_x", ",", "b_y", "=", "{", "}", ",", "{", "}", "\n", "if", "self", ".", "is_input", ":", "\n", "            ", "b_x", "[", "self", ".", "output", "]", "=", "batch", "\n", "", "if", "self", ".", "is_target", ":", "\n", "            ", "b_y", "[", "self", ".", "output", "]", "=", "batch", "\n", "\n", "", "return", "b_x", ",", "b_y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn._check_type": [[11, 25], ["set", "set", "len", "field._get_ele_type_and_dim", "types.append", "dims.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field._get_ele_type_and_dim", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["def", "_check_type", "(", "batch_dict", ",", "fields", ")", ":", "\n", "    ", "if", "len", "(", "fields", ")", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "\n", "", "types", "=", "[", "]", "\n", "dims", "=", "[", "]", "\n", "for", "f", "in", "fields", ":", "\n", "        ", "t", ",", "d", "=", "_get_ele_type_and_dim", "(", "batch_dict", "[", "f", "]", ")", "\n", "types", ".", "append", "(", "t", ")", "\n", "dims", ".", "append", "(", "d", ")", "\n", "", "diff_types", "=", "set", "(", "types", ")", "\n", "diff_dims", "=", "set", "(", "dims", ")", "\n", "if", "len", "(", "diff_types", ")", ">", "1", "or", "len", "(", "diff_dims", ")", ">", "1", ":", "\n", "        ", "raise", "ValueError", "\n", "", "return", "types", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.batching": [[27, 37], ["numpy.full", "enumerate", "len", "max", "min", "len"], "function", ["None"], ["", "def", "batching", "(", "samples", ",", "max_len", "=", "0", ",", "padding_val", "=", "0", ")", ":", "\n", "    ", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "        ", "return", "samples", "\n", "", "if", "max_len", "<=", "0", ":", "\n", "        ", "max_len", "=", "max", "(", "s", ".", "shape", "[", "0", "]", "for", "s", "in", "samples", ")", "\n", "", "batch", "=", "np", ".", "full", "(", "(", "len", "(", "samples", ")", ",", "max_len", ")", ",", "fill_value", "=", "padding_val", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "samples", ")", ":", "\n", "        ", "slen", "=", "min", "(", "s", ".", "shape", "[", "0", "]", ",", "max_len", ")", "\n", "batch", "[", "i", "]", "[", ":", "slen", "]", "=", "s", "[", ":", "slen", "]", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester.__init__": [[72, 150], ["object.__init__", "metrics._prepare_metrics", "utils._move_model_to_device", "isinstance", "isinstance", "TypeError", "kwargs.get", "hasattr", "batch.DataSetIter", "isinstance", "isinstance", "_parallel_utils._model_contains_inner_module", "sampler.SequentialSampler.SequentialSampler", "sampler.SequentialSampler.SequentialSampler.set_batch_size", "TypeError", "hasattr", "callable", "_parallel_utils._model_contains_inner_module", "hasattr", "callable", "functools.partial", "isinstance", "isinstance", "ValueError", "_parallel_utils._data_parallel_wrapper", "type", "type", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics._prepare_metrics", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._move_model_to_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils._model_contains_inner_module", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.sampler.BucketSampler.set_batch_size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils._model_contains_inner_module", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils._data_parallel_wrapper"], ["def", "__init__", "(", "self", ",", "data", ",", "model", ",", "metrics", ",", "batch_size", "=", "16", ",", "num_workers", "=", "0", ",", "device", "=", "None", ",", "verbose", "=", "1", ",", "use_tqdm", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param ~fastNLP.DataSet,~fastNLP.BatchIter data: \u9700\u8981\u6d4b\u8bd5\u7684\u6570\u636e\u96c6\n        :param torch.nn.Module model: \u4f7f\u7528\u7684\u6a21\u578b\n        :param ~fastNLP.core.metrics.MetricBase,List[~fastNLP.core.metrics.MetricBase] metrics: \u6d4b\u8bd5\u65f6\u4f7f\u7528\u7684metrics\n        :param int batch_size: evaluation\u65f6\u4f7f\u7528\u7684batch_size\u6709\u591a\u5927\u3002\n        :param str,int,torch.device,list(int) device: \u5c06\u6a21\u578bload\u5230\u54ea\u4e2a\u8bbe\u5907\u3002\u9ed8\u8ba4\u4e3aNone\uff0c\u5373Trainer\u4e0d\u5bf9\u6a21\u578b\n            \u7684\u8ba1\u7b97\u4f4d\u7f6e\u8fdb\u884c\u7ba1\u7406\u3002\u652f\u6301\u4ee5\u4e0b\u7684\u8f93\u5165:\n    \n            1. str: ['cpu', 'cuda', 'cuda:0', 'cuda:1', ...] \u4f9d\u6b21\u4e3a'cpu'\u4e2d, \u53ef\u89c1\u7684\u7b2c\u4e00\u4e2aGPU\u4e2d,\u53ef\u89c1\u7684\u7b2c\u4e00\u4e2aGPU\u4e2d,\u53ef\u89c1\u7684\u7b2c\u4e8c\u4e2aGPU\u4e2d;\n    \n            2. torch.device\uff1a\u5c06\u6a21\u578b\u88c5\u8f7d\u5230torch.device\u4e0a\u3002\n    \n            3. int: \u5c06\u4f7f\u7528device_id\u4e3a\u8be5\u503c\u7684gpu\u8fdb\u884c\u8bad\u7ec3\n    \n            4. list(int)\uff1a\u5982\u679c\u591a\u4e8e1\u4e2adevice\uff0c\u5c06\u4f7f\u7528torch.nn.DataParallel\u5305\u88f9model, \u5e76\u4f7f\u7528\u4f20\u5165\u7684device\u3002\n    \n            5. None. \u4e3aNone\u5219\u4e0d\u5bf9\u6a21\u578b\u8fdb\u884c\u4efb\u4f55\u5904\u7406\uff0c\u5982\u679c\u4f20\u5165\u7684model\u4e3atorch.nn.DataParallel\u8be5\u503c\u5fc5\u987b\u4e3aNone\u3002\n    \n            \u5982\u679c\u6a21\u578b\u662f\u901a\u8fc7predict()\u8fdb\u884c\u9884\u6d4b\u7684\u8bdd\uff0c\u90a3\u4e48\u5c06\u4e0d\u80fd\u4f7f\u7528\u591a\u5361(DataParallel)\u8fdb\u884c\u9a8c\u8bc1\uff0c\u53ea\u4f1a\u4f7f\u7528\u7b2c\u4e00\u5f20\u5361\u4e0a\u7684\u6a21\u578b\u3002\n        :param int verbose: \u5982\u679c\u4e3a0\u4e0d\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f; \u5982\u679c\u4e3a1\uff0c\u6253\u5370\u51fa\u9a8c\u8bc1\u7ed3\u679c\u3002\n        :param bool use_tqdm: \u662f\u5426\u4f7f\u7528tqdm\u6765\u663e\u793a\u6d4b\u8bd5\u8fdb\u5ea6; \u5982\u679c\u4e3aFalse\uff0c\u5219\u4e0d\u4f1a\u663e\u793a\u4efb\u4f55\u5185\u5bb9\u3002\n        :param kwargs: \u652f\u6301\u4f20\u5165sampler\u63a7\u5236\u6d4b\u8bd5\u987a\u5e8f\n        \"\"\"", "\n", "super", "(", "Tester", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"The type of model must be `torch.nn.Module`, got `{type(model)}`.\"", ")", "\n", "\n", "", "self", ".", "metrics", "=", "_prepare_metrics", "(", "metrics", ")", "\n", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "_model", "=", "_move_model_to_device", "(", "model", ",", "device", "=", "device", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "use_tqdm", "=", "use_tqdm", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "if", "isinstance", "(", "data", ",", "DataSet", ")", ":", "\n", "            ", "sampler", "=", "kwargs", ".", "get", "(", "'sampler'", ",", "None", ")", "\n", "if", "sampler", "is", "None", ":", "\n", "                ", "sampler", "=", "SequentialSampler", "(", ")", "\n", "", "elif", "not", "isinstance", "(", "sampler", ",", "(", "Sampler", ",", "torch", ".", "utils", ".", "data", ".", "Sampler", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "f\"The type of sampler should be fastNLP.BaseSampler or pytorch's Sampler, got {type(sampler)}\"", ")", "\n", "", "if", "hasattr", "(", "sampler", ",", "'set_batch_size'", ")", ":", "\n", "                ", "sampler", ".", "set_batch_size", "(", "batch_size", ")", "\n", "", "self", ".", "data_iterator", "=", "DataSetIter", "(", "dataset", "=", "data", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "BatchIter", ")", ":", "\n", "            ", "self", ".", "data_iterator", "=", "data", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"data type {} not support\"", ".", "format", "(", "type", "(", "data", ")", ")", ")", "\n", "\n", "# check predict", "\n", "", "if", "(", "hasattr", "(", "self", ".", "_model", ",", "'predict'", ")", "and", "callable", "(", "self", ".", "_model", ".", "predict", ")", ")", "or", "(", "_model_contains_inner_module", "(", "self", ".", "_model", ")", "and", "hasattr", "(", "self", ".", "_model", ".", "module", ",", "'predict'", ")", "and", "\n", "callable", "(", "self", ".", "_model", ".", "module", ".", "predict", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "_model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "                ", "self", ".", "_predict_func_wrapper", "=", "partial", "(", "_data_parallel_wrapper", "(", "'predict'", ",", "\n", "self", ".", "_model", ".", "device_ids", ",", "\n", "self", ".", "_model", ".", "output_device", ")", ",", "\n", "network", "=", "self", ".", "_model", ".", "module", ")", "\n", "self", ".", "_predict_func", "=", "self", ".", "_model", ".", "module", ".", "predict", "# \u7528\u4e8e\u5339\u914d\u53c2\u6570", "\n", "", "elif", "isinstance", "(", "self", ".", "_model", ",", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "                ", "self", ".", "_predict_func", "=", "self", ".", "_model", ".", "module", ".", "predict", "\n", "self", ".", "_predict_func_wrapper", "=", "self", ".", "_model", ".", "module", ".", "predict", "# \u7528\u4e8e\u8c03\u7528", "\n", "", "else", ":", "\n", "                ", "self", ".", "_predict_func", "=", "self", ".", "_model", ".", "predict", "\n", "self", ".", "_predict_func_wrapper", "=", "self", ".", "_model", ".", "predict", "\n", "", "", "else", ":", "\n", "            ", "if", "_model_contains_inner_module", "(", "model", ")", ":", "\n", "                ", "self", ".", "_predict_func_wrapper", "=", "self", ".", "_model", ".", "forward", "\n", "self", ".", "_predict_func", "=", "self", ".", "_model", ".", "module", ".", "forward", "\n", "", "else", ":", "\n", "                ", "self", ".", "_predict_func", "=", "self", ".", "_model", ".", "forward", "\n", "self", ".", "_predict_func_wrapper", "=", "self", ".", "_model", ".", "forward", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester.test": [[151, 207], ["utils._get_model_device", "tester.Tester._mode", "tester.Tester._mode", "_logger.logger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils._get_func_signature", "utils._check_loss_evaluate", "inner_tqdm", "pbar.set_description_str", "time.time", "pbar.close", "time.time", "tester.Tester._format_eval_results", "utils._move_dict_value_to_device", "tester.Tester._data_forward", "metric.get_metric", "metric.get_metric_name", "tester.Tester.logger.info", "len", "isinstance", "TypeError", "metric", "pbar.update", "isinstance", "TypeError", "round", "utils._get_func_signature", "type", "utils._get_func_signature", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_model_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._mode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._mode", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_loss_evaluate", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.close", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._format_eval_results", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._move_dict_value_to_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._data_forward", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.CMRC2018Metric.get_metric", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.metrics.MetricBase.get_metric_name", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature"], ["", "", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\u5f00\u59cb\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5e76\u8fd4\u56de\u9a8c\u8bc1\u7ed3\u679c\u3002\n\n        :return Dict[Dict]: dict\u7684\u4e8c\u5c42\u5d4c\u5957\u7ed3\u6784\uff0cdict\u7684\u7b2c\u4e00\u5c42\u662fmetric\u7684\u540d\u79f0; \u7b2c\u4e8c\u5c42\u662f\u8fd9\u4e2ametric\u7684\u6307\u6807\u3002\u4e00\u4e2aAccuracyMetric\u7684\u4f8b\u5b50\u4e3a{'AccuracyMetric': {'acc': 1.0}}\u3002\n        \"\"\"", "\n", "# turn on the testing mode; clean up the history", "\n", "self", ".", "_model_device", "=", "_get_model_device", "(", "self", ".", "_model", ")", "\n", "network", "=", "self", ".", "_model", "\n", "self", ".", "_mode", "(", "network", ",", "is_test", "=", "True", ")", "\n", "data_iterator", "=", "self", ".", "data_iterator", "\n", "eval_results", "=", "{", "}", "\n", "try", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "not", "self", ".", "use_tqdm", ":", "\n", "                    ", "from", ".", "utils", "import", "_pseudo_tqdm", "as", "inner_tqdm", "\n", "", "else", ":", "\n", "                    ", "inner_tqdm", "=", "tqdm", "\n", "", "with", "inner_tqdm", "(", "total", "=", "len", "(", "data_iterator", ")", ",", "leave", "=", "False", ",", "dynamic_ncols", "=", "True", ")", "as", "pbar", ":", "\n", "                    ", "pbar", ".", "set_description_str", "(", "desc", "=", "\"Test\"", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_x", ",", "batch_y", "in", "data_iterator", ":", "\n", "                        ", "_move_dict_value_to_device", "(", "batch_x", ",", "batch_y", ",", "device", "=", "self", ".", "_model_device", ")", "\n", "pred_dict", "=", "self", ".", "_data_forward", "(", "self", ".", "_predict_func", ",", "batch_x", ")", "\n", "if", "not", "isinstance", "(", "pred_dict", ",", "dict", ")", ":", "\n", "                            ", "raise", "TypeError", "(", "f\"The return value of {_get_func_signature(self._predict_func)} \"", "\n", "f\"must be `dict`, got {type(pred_dict)}.\"", ")", "\n", "", "for", "metric", "in", "self", ".", "metrics", ":", "\n", "                            ", "metric", "(", "pred_dict", ",", "batch_y", ")", "\n", "\n", "", "if", "self", ".", "use_tqdm", ":", "\n", "                            ", "pbar", ".", "update", "(", ")", "\n", "\n", "", "", "for", "metric", "in", "self", ".", "metrics", ":", "\n", "                        ", "eval_result", "=", "metric", ".", "get_metric", "(", ")", "\n", "if", "not", "isinstance", "(", "eval_result", ",", "dict", ")", ":", "\n", "                            ", "raise", "TypeError", "(", "f\"The return value of {_get_func_signature(metric.get_metric)} must be \"", "\n", "f\"`dict`, got {type(eval_result)}\"", ")", "\n", "", "metric_name", "=", "metric", ".", "get_metric_name", "(", ")", "\n", "eval_results", "[", "metric_name", "]", "=", "eval_result", "\n", "", "pbar", ".", "close", "(", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "test_str", "=", "f'Evaluate data in {round(end_time - start_time, 2)} seconds!'", "\n", "if", "self", ".", "verbose", ">=", "0", ":", "\n", "                        ", "self", ".", "logger", ".", "info", "(", "test_str", ")", "\n", "", "", "", "", "except", "_CheckError", "as", "e", ":", "\n", "            ", "prev_func_signature", "=", "_get_func_signature", "(", "self", ".", "_predict_func", ")", "\n", "_check_loss_evaluate", "(", "prev_func_signature", "=", "prev_func_signature", ",", "func_signature", "=", "e", ".", "func_signature", ",", "\n", "check_res", "=", "e", ".", "check_res", ",", "pred_dict", "=", "pred_dict", ",", "target_dict", "=", "batch_y", ",", "\n", "dataset", "=", "self", ".", "data", ",", "check_level", "=", "0", ")", "\n", "", "finally", ":", "\n", "            ", "self", ".", "_mode", "(", "network", ",", "is_test", "=", "False", ")", "\n", "", "if", "self", ".", "verbose", ">=", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\"[tester] \\n{}\"", ".", "format", "(", "self", ".", "_format_eval_results", "(", "eval_results", ")", ")", ")", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._mode": [[208, 219], ["model.eval", "model.train"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.trainer.Trainer.train"], ["", "def", "_mode", "(", "self", ",", "model", ",", "is_test", "=", "False", ")", ":", "\n", "        ", "r\"\"\"Train mode or Test mode. This is for PyTorch currently.\n\n        :param model: a PyTorch model\n        :param is_test: bool, whether in test mode or not.\n\n        \"\"\"", "\n", "if", "is_test", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._data_forward": [[220, 225], ["utils._build_args", "tester.Tester._predict_func_wrapper"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._build_args"], ["", "", "def", "_data_forward", "(", "self", ",", "func", ",", "x", ")", ":", "\n", "        ", "r\"\"\"A forward pass of the model. \"\"\"", "\n", "x", "=", "_build_args", "(", "func", ",", "**", "x", ")", "\n", "y", "=", "self", ".", "_predict_func_wrapper", "(", "**", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._format_eval_results": [[226, 238], ["results.items", "str", "metric_result.items", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "def", "_format_eval_results", "(", "self", ",", "results", ")", ":", "\n", "        ", "r\"\"\"Override this method to support more print formats.\n\n        :param results: dict, (str: float) is (metrics name: value)\n\n        \"\"\"", "\n", "_str", "=", "''", "\n", "for", "metric_name", ",", "metric_result", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "_str", "+=", "metric_name", "+", "': '", "\n", "_str", "+=", "\", \"", ".", "join", "(", "[", "str", "(", "key", ")", "+", "\"=\"", "+", "str", "(", "value", ")", "for", "key", ",", "value", "in", "metric_result", ".", "items", "(", ")", "]", ")", "\n", "_str", "+=", "'\\n'", "\n", "", "return", "_str", "[", ":", "-", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils.parallel_apply": [[14, 74], ["threading.Lock", "torch.is_grad_enabled", "range", "len", "len", "torch.set_grad_enabled", "len", "_parallel_utils.parallel_apply._worker"], "function", ["None"], ["def", "parallel_apply", "(", "modules", ",", "func_name", ",", "inputs", ",", "kwargs_tup", "=", "None", ",", "devices", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Applies each `module` in :attr:`modules` in parallel on arguments\n    contained in :attr:`inputs` (positional) and :attr:`kwargs_tup` (keyword)\n    on each of :attr:`devices`.\n\n    :attr:`modules`, :attr:`inputs`, :attr:`kwargs_tup` (if given), and\n    :attr:`devices` (if given) should all have same length. Moreover, each\n    element of :attr:`inputs` can either be a single object as the only argument\n    to a module, or a collection of positional arguments.\n    \"\"\"", "\n", "assert", "len", "(", "modules", ")", "==", "len", "(", "inputs", ")", "\n", "if", "kwargs_tup", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "kwargs_tup", ")", "\n", "", "else", ":", "\n", "        ", "kwargs_tup", "=", "(", "{", "}", ",", ")", "*", "len", "(", "modules", ")", "\n", "", "if", "devices", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "modules", ")", "==", "len", "(", "devices", ")", "\n", "", "else", ":", "\n", "        ", "devices", "=", "[", "None", "]", "*", "len", "(", "modules", ")", "\n", "\n", "", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "results", "=", "{", "}", "\n", "grad_enabled", "=", "torch", ".", "is_grad_enabled", "(", ")", "\n", "\n", "def", "_worker", "(", "i", ",", "module", ",", "input", ",", "kwargs", ",", "device", "=", "None", ")", ":", "\n", "        ", "torch", ".", "set_grad_enabled", "(", "grad_enabled", ")", "\n", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "get_a_var", "(", "input", ")", ".", "get_device", "(", ")", "\n", "", "try", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "device", ")", ":", "\n", "# this also avoids accidental slicing of `input` if it is a Tensor", "\n", "                ", "if", "not", "isinstance", "(", "input", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                    ", "input", "=", "(", "input", ",", ")", "\n", "", "output", "=", "getattr", "(", "module", ",", "func_name", ")", "(", "*", "input", ",", "**", "kwargs", ")", "\n", "", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "output", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "with", "lock", ":", "\n", "                ", "results", "[", "i", "]", "=", "e", "\n", "\n", "", "", "", "if", "len", "(", "modules", ")", ">", "1", ":", "\n", "        ", "threads", "=", "[", "threading", ".", "Thread", "(", "target", "=", "_worker", ",", "\n", "args", "=", "(", "i", ",", "module", ",", "input", ",", "kwargs", ",", "device", ")", ")", "\n", "for", "i", ",", "(", "module", ",", "input", ",", "kwargs", ",", "device", ")", "in", "\n", "enumerate", "(", "zip", "(", "modules", ",", "inputs", ",", "kwargs_tup", ",", "devices", ")", ")", "]", "\n", "\n", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "start", "(", ")", "\n", "", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "join", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "_worker", "(", "0", ",", "modules", "[", "0", "]", ",", "inputs", "[", "0", "]", ",", "kwargs_tup", "[", "0", "]", ",", "devices", "[", "0", "]", ")", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "        ", "output", "=", "results", "[", "i", "]", "\n", "if", "isinstance", "(", "output", ",", "Exception", ")", ":", "\n", "            ", "raise", "output", "\n", "", "outputs", ".", "append", "(", "output", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils._data_parallel_wrapper": [[76, 95], ["torch.nn.parallel.scatter_gather.scatter_kwargs", "torch.nn.parallel.replicate.replicate", "_parallel_utils.parallel_apply", "torch.nn.parallel.scatter_gather.gather", "len", "getattr", "len", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils.parallel_apply"], ["", "def", "_data_parallel_wrapper", "(", "func_name", ",", "device_ids", ",", "output_device", ")", ":", "\n", "    ", "r\"\"\"\n    \u8fd9\u4e2a\u51fd\u6570\u662f\u7528\u4e8e\u5bf9\u9700\u8981\u591a\u5361\u6267\u884c\u7684\u51fd\u6570\u7684wrapper\u51fd\u6570\u3002\u53c2\u8003\u7684nn.DataParallel\u7684forward\u51fd\u6570\n\n    :param str, func_name: \u5bf9network\u4e2d\u7684\u8fd9\u4e2a\u51fd\u6570\u8fdb\u884c\u591a\u5361\u8fd0\u884c\n    :param device_ids: nn.DataParallel\u4e2d\u7684device_ids\n    :param output_device: nn.DataParallel\u4e2d\u7684output_device\n    :return:\n    \"\"\"", "\n", "\n", "def", "wrapper", "(", "network", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "inputs", ",", "kwargs", "=", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "0", ")", "\n", "if", "len", "(", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "getattr", "(", "network", ",", "func_name", ")", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "replicas", "=", "replicate", "(", "network", ",", "device_ids", "[", ":", "len", "(", "inputs", ")", "]", ")", "\n", "outputs", "=", "parallel_apply", "(", "replicas", ",", "func_name", ",", "inputs", ",", "kwargs", ",", "device_ids", "[", ":", "len", "(", "replicas", ")", "]", ")", "\n", "return", "gather", "(", "outputs", ",", "output_device", ")", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils._model_contains_inner_module": [[97, 108], ["isinstance", "isinstance"], "function", ["None"], ["", "def", "_model_contains_inner_module", "(", "model", ")", ":", "\n", "    ", "r\"\"\"\n\n    :param nn.Module model: \u6a21\u578b\u6587\u4ef6\uff0c\u5224\u65ad\u662f\u5426\u5185\u90e8\u5305\u542bmodel.module, \u591a\u7528\u4e8echeck\u6a21\u578b\u662f\u5426\u662fnn.DataParallel,\n        nn.parallel.DistributedDataParallel\u3002\u4e3b\u8981\u662f\u5728\u505a\u5f62\u53c2\u5339\u914d\u7684\u65f6\u5019\u9700\u8981\u4f7f\u7528\u6700\u5185\u90e8\u7684model\u7684function\u3002\n    :return: bool\n    \"\"\"", "\n", "if", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "if", "isinstance", "(", "model", ",", "(", "nn", ".", "DataParallel", ",", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.__init__": [[27, 30], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "fields", ")", ":", "\n", "\n", "        ", "self", ".", "fields", "=", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field": [[31, 39], ["None"], "methods", ["None"], ["", "def", "add_field", "(", "self", ",", "field_name", ",", "field", ")", ":", "\n", "        ", "r\"\"\"\n        \u5411Instance\u4e2d\u589e\u52a0\u4e00\u4e2afield\n\n        :param str field_name: \u65b0\u589efield\u7684\u540d\u79f0\n        :param Any field: \u65b0\u589efield\u7684\u5185\u5bb9\n        \"\"\"", "\n", "self", ".", "fields", "[", "field_name", "]", "=", "field", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items": [[40, 47], ["instance.Instance.fields.items"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u8fd4\u56de\u4e24\u4e2a\u5185\u5bb9\uff0c\u7b2c\u4e00\u4e2a\u5185\u5bb9\u662ffield_name, \u7b2c\u4e8c\u4e2a\u5185\u5bb9\u662ffield_value\n        \n        :return: \u4e00\u4e2a\u8fed\u4ee3\u5668\n        \"\"\"", "\n", "return", "self", ".", "fields", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.__contains__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "item", "in", "self", ".", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.__getitem__": [[51, 57], ["print", "KeyError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "fields", ":", "\n", "            ", "return", "self", ".", "fields", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "name", ")", "\n", "raise", "KeyError", "(", "\"{} not found\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.__setitem__": [[58, 60], ["instance.Instance.add_field"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.add_field"], ["", "", "def", "__setitem__", "(", "self", ",", "name", ",", "field", ")", ":", "\n", "        ", "return", "self", ".", "add_field", "(", "name", ",", "field", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.__repr__": [[61, 63], ["str", "utils.pretty_table_printer"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.pretty_table_printer"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "pretty_table_printer", "(", "self", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.__init__": [[112, 116], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Callback", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_trainer", "=", "None", "# \u5728Trainer\u5185\u90e8\u88ab\u91cd\u65b0\u8d4b\u503c", "\n", "self", ".", "_disabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.__repr__": [[117, 119], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.trainer": [[120, 126], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainer", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8be5\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7self.trainer\u83b7\u53d6\u5230\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u4f7f\u7528\u8fd9\u4e2a\u5c5e\u6027\u3002\n        \"\"\"", "\n", "return", "self", ".", "_trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.step": [[127, 131], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "step", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\u5f53\u524d\u8fd0\u884c\u5230\u7684step, \u8303\u56f4\u4e3a[1, self.n_steps+1)\"\"\"", "\n", "return", "self", ".", "_trainer", ".", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.n_steps": [[132, 136], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_steps", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Trainer\u4e00\u5171\u4f1a\u91c7\u591a\u5c11\u4e2abatch\u3002\u5f53Trainer\u4e2dupdate_every\u8bbe\u7f6e\u4e3a\u975e1\u7684\u503c\u65f6\uff0c\u8be5\u503c\u4e0d\u7b49\u4e8eupdate\u7684\u6b21\u6570\"\"\"", "\n", "return", "self", ".", "_trainer", ".", "n_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.batch_size": [[137, 141], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "        ", "r\"\"\"train\u548cevaluate\u65f6\u7684batch_size\u4e3a\u591a\u5927\"\"\"", "\n", "return", "self", ".", "_trainer", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.epoch": [[142, 146], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "epoch", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\u5f53\u524d\u8fd0\u884c\u7684epoch\u6570\uff0c\u8303\u56f4\u662f[1, self.n_epochs+1)\"\"\"", "\n", "return", "self", ".", "_trainer", ".", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.n_epochs": [[147, 151], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_epochs", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\u4e00\u5171\u4f1a\u8fd0\u884c\u591a\u5c11\u4e2aepoch\"\"\"", "\n", "return", "self", ".", "_trainer", ".", "n_epochs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.optimizer": [[152, 156], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\u521d\u59cb\u5316Trainer\u65f6\u4f20\u9012\u7684Optimizer\"\"\"", "\n", "return", "self", ".", "_trainer", ".", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.model": [[157, 161], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\u6b63\u5728\u88abTrainer\u8bad\u7ec3\u7684\u6a21\u578b\"\"\"", "\n", "return", "self", ".", "_trainer", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.pbar": [[162, 167], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pbar", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\u5982\u679c\u5728Callback\u4e2d\u9700\u8981\u6253\u5370\u5185\u5bb9\uff0c\u8bf7\u4f7f\u7528self.pbar.write(str)\u3002\u5426\u5219\u53ef\u80fd\u51fa\u73b0\u547d\u4ee4\u884c\u663e\u793a\u6548\u679c\u4e0d\u592a\u597d\u7684\u95ee\u9898\u3002\u5728\n        on_train_begin(), on_train_end(), on_exception()\u4e2d\u8bf7\u4e0d\u8981\u4f7f\u7528\u8be5\u5c5e\u6027\uff0c\u901a\u8fc7print\u8f93\u51fa\u5373\u53ef\u3002\"\"\"", "\n", "return", "self", ".", "_trainer", ".", "pbar", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.update_every": [[168, 172], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "update_every", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Trainer\u4e2d\u7684\u6a21\u578b\u591a\u5c11\u6b21\u53cd\u5411\u4f20\u64ad\u624d\u8fdb\u884c\u4e00\u6b21\u68af\u5ea6\u66f4\u65b0\uff0c\u5728Trainer\u521d\u59cb\u5316\u65f6\u4f20\u5165\u7684\u3002\"\"\"", "\n", "return", "self", ".", "_trainer", ".", "update_every", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.batch_per_epoch": [[173, 177], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_per_epoch", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\u6bcf\u4e2aepoch\u4e00\u5171\u6709\u591a\u5c11\u4e2abatch\uff0c\u53ea\u6709\u5728on_epoch_begin\u4e4b\u540e\u624d\u80fd\u8c03\u7528\u8be5\u5c5e\u6027\u3002\"\"\"", "\n", "return", "self", ".", "_trainer", ".", "batch_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.is_master": [[178, 181], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_master", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_trainer", ".", "is_master", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.disabled": [[182, 185], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "disabled", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_disabled", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.logger": [[186, 189], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "logger", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_trainer", ",", "'logger'", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_train_begin": [[190, 197], ["None"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u5728Train\u8fc7\u7a0b\u5f00\u59cb\u4e4b\u524d\u8c03\u7528\u3002\n\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_epoch_begin": [[198, 205], ["None"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u5728\u6bcf\u4e2aepoch\u5f00\u59cb\u4e4b\u524d\u8c03\u7528\u4e00\u6b21\n\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_batch_begin": [[206, 218], ["None"], "methods", ["None"], ["", "def", "on_batch_begin", "(", "self", ",", "batch_x", ",", "batch_y", ",", "indices", ")", ":", "\n", "        ", "r\"\"\"\n        \u6bcf\u6b21\u91c7\u96c6\u5230\u4e00\u4e2abatch\u7684\u6570\u636e\u5219\u8c03\u7528\u4e00\u6b21\u3002\u8fd9\u91cc\u5bf9batch_x\u6216batch_y\u5220\u9664\u6dfb\u52a0\u5185\u5bb9\u662f\u53ef\u4ee5\u5f71\u54cd\u5230Trainer\u4e2d\u5185\u5bb9\u7684\u3002\u6240\u4ee5\u5728\u8fd9\u4e00\u6b65\n        \u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u8d1f\u91c7\u6837\u4e4b\u7c7b\u7684\u64cd\u4f5c\n\n        :param dict batch_x: DataSet\u4e2d\u88ab\u8bbe\u7f6e\u4e3ainput\u7684field\u7684batch\u3002\n        :param dict batch_y: DataSet\u4e2d\u88ab\u8bbe\u7f6e\u4e3atarget\u7684field\u7684batch\u3002\n        :param list(int) indices: \u8fd9\u6b21\u91c7\u6837\u4f7f\u7528\u5230\u7684indices\uff0c\u53ef\u4ee5\u901a\u8fc7DataSet[indices]\u83b7\u53d6\u51fa\u8fd9\u4e2abatch\u91c7\u51fa\u7684Instance\uff0c\u5728\u4e00\u4e9b\n            \u60c5\u51b5\u4e0b\u53ef\u4ee5\u5e2e\u52a9\u5b9a\u4f4d\u662f\u54ea\u4e2aSample\u5bfc\u81f4\u4e86\u9519\u8bef\u3002\u4ec5\u5f53num_workers=0\u65f6\u6709\u6548\u3002\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_loss_begin": [[219, 228], ["None"], "methods", ["None"], ["", "def", "on_loss_begin", "(", "self", ",", "batch_y", ",", "predict_y", ")", ":", "\n", "        ", "r\"\"\"\n        \u5728\u8ba1\u7b97loss\u524d\u8c03\u7528\uff0c\u5373\u8fd9\u91cc\u4fee\u6539batch_y\u6216predict_y\u7684\u503c\u662f\u53ef\u4ee5\u5f71\u54cd\u5230loss\u8ba1\u7b97\u7684\u3002\n\n        :param dict batch_y: \u5728DataSet\u4e2d\u88ab\u8bbe\u7f6e\u4e3atarget\u7684field\u7684batch\u96c6\u5408\u3002\n        :param dict predict_y: \u6a21\u578b\u7684forward()\u8fd4\u56de\u7684\u7ed3\u679c\u3002\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_backward_begin": [[229, 237], ["None"], "methods", ["None"], ["", "def", "on_backward_begin", "(", "self", ",", "loss", ")", ":", "\n", "        ", "r\"\"\"\n        \u5728loss\u5f97\u5230\u4e4b\u540e\uff0c\u4f46\u5728\u53cd\u5411\u4f20\u64ad\u4e4b\u524d\u3002\u53ef\u80fd\u53ef\u4ee5\u8fdb\u884closs\u662f\u5426\u4e3aNaN\u7684\u68c0\u67e5\u3002\n\n        :param torch.Tensor loss: \u8ba1\u7b97\u5f97\u5230\u7684loss\u503c\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_backward_end": [[238, 245], ["None"], "methods", ["None"], ["", "def", "on_backward_end", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u53cd\u5411\u68af\u5ea6\u4f20\u64ad\u5df2\u5b8c\u6210\uff0c\u4f46\u7531\u4e8eupdate_every\u7684\u8bbe\u7f6e\uff0c\u53ef\u80fd\u5e76\u4e0d\u662f\u6bcf\u4e00\u6b21\u8c03\u7528\u90fd\u6709\u68af\u5ea6\u3002\u5230\u8fd9\u4e00\u6b65\uff0c\u8fd8\u6ca1\u6709\u66f4\u65b0\u53c2\u6570\u3002\n\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_step_end": [[246, 253], ["None"], "methods", ["None"], ["", "def", "on_step_end", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u5230\u8fd9\u91cc\u6a21\u578b\u7684\u53c2\u6570\u5df2\u7ecf\u6309\u7167\u68af\u5ea6\u66f4\u65b0\u3002\u4f46\u53ef\u80fd\u53d7update_every\u5f71\u54cd\uff0c\u5e76\u4e0d\u662f\u6bcf\u6b21\u90fd\u66f4\u65b0\u4e86\u3002\n\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_batch_end": [[254, 260], ["None"], "methods", ["None"], ["", "def", "on_batch_end", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8fd9\u4e00\u6b65\u4e0eon_step_end\u662f\u7d27\u63a5\u7740\u7684\u3002\u53ea\u662f\u4e3a\u4e86\u5bf9\u79f0\u6027\u52a0\u4e0a\u4e86\u8fd9\u4e00\u6b65\u3002\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_valid_begin": [[261, 268], ["None"], "methods", ["None"], ["", "def", "on_valid_begin", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u5982\u679cTrainer\u4e2d\u8bbe\u7f6e\u4e86\u9a8c\u8bc1\uff0c\u5219\u53d1\u751f\u9a8c\u8bc1\u524d\u4f1a\u8c03\u7528\u8be5\u51fd\u6570\n\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_valid_end": [[269, 281], ["None"], "methods", ["None"], ["", "def", "on_valid_end", "(", "self", ",", "eval_result", ",", "metric_key", ",", "optimizer", ",", "is_better_eval", ")", ":", "\n", "        ", "r\"\"\"\n        \u6bcf\u6b21\u6267\u884c\u9a8c\u8bc1\u96c6\u7684evaluation\u540e\u4f1a\u8c03\u7528\u3002\n\n        :param Dict[str: Dict[str: float]] eval_result: , evaluation\u7684\u7ed3\u679c\u3002\u4e00\u4e2a\u4f8b\u5b50\u4e3a{'AccuracyMetric':{'acc':1.0}}\uff0c\u5373\n            \u4f20\u5165\u7684dict\u662f\u6709\u4e24\u5c42\uff0c\u7b2c\u4e00\u5c42\u662fmetric\u7684\u540d\u79f0\uff0c\u7b2c\u4e8c\u5c42\u662fmetric\u7684\u5177\u4f53\u6307\u6807\u3002\n        :param str metric_key: \u521d\u59cb\u5316Trainer\u65f6\u4f20\u5165\u7684metric_key\u3002\n        :param torch.Optimizer optimizer: Trainer\u4e2d\u4f7f\u7528\u7684\u4f18\u5316\u5668\u3002\n        :param bool is_better_eval: \u5f53\u524ddev\u7ed3\u679c\u662f\u5426\u6bd4\u4e4b\u524d\u7684\u597d\u3002\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_epoch_end": [[282, 287], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u6bcf\u4e2aepoch\u7ed3\u675f\u5c06\u4f1a\u8c03\u7528\u8be5\u65b9\u6cd5\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_train_end": [[288, 293], ["None"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u8bad\u7ec3\u7ed3\u675f\uff0c\u8c03\u7528\u8be5\u65b9\u6cd5\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.Callback.on_exception": [[294, 300], ["None"], "methods", ["None"], ["", "def", "on_exception", "(", "self", ",", "exception", ")", ":", "\n", "        ", "r\"\"\"\n        \u5f53\u8bad\u7ec3\u8fc7\u7a0b\u51fa\u73b0\u5f02\u5e38\uff0c\u4f1a\u89e6\u53d1\u8be5\u65b9\u6cd5\n        :param exception: \u67d0\u79cd\u7c7b\u578b\u7684Exception\uff0c\u6bd4\u5982KeyboardInterrupt\u7b49\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.__init__": [[324, 336], ["callback.Callback.__init__", "callback.CallbackManager.prepare_callbacks"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.prepare_callbacks"], ["def", "__init__", "(", "self", ",", "env", ",", "callbacks", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param dict env: The key is the name of the Trainer attribute(str). The value is the attribute itself.\n        :param List[Callback] callbacks:\n        \"\"\"", "\n", "super", "(", "CallbackManager", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# set attribute of trainer environment", "\n", "self", ".", "_env", "=", "env", "\n", "self", ".", "callbacks", "=", "[", "]", "\n", "if", "callbacks", ":", "\n", "            ", "self", ".", "callbacks", "=", "self", ".", "prepare_callbacks", "(", "callbacks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.prepare_callbacks": [[337, 353], ["isinstance", "callback.CallbackManager._env.items", "TypeError", "all", "TypeError", "setattr", "isinstance", "type", "isinstance", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "", "def", "prepare_callbacks", "(", "self", ",", "callbacks", ")", ":", "\n", "        ", "if", "not", "callbacks", ":", "\n", "            ", "return", "[", "]", "\n", "", "if", "isinstance", "(", "callbacks", ",", "list", ")", ":", "\n", "            ", "if", "all", "(", "[", "isinstance", "(", "cb", ",", "Callback", ")", "for", "cb", "in", "callbacks", "]", ")", "is", "True", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "obj", "=", "[", "not", "isinstance", "(", "cb", ",", "Callback", ")", "for", "cb", "in", "callbacks", "]", "[", "0", "]", "\n", "raise", "TypeError", "(", "f\"Expect sub-classes of Callback. Got {type(obj)}\"", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "f\"Expect callbacks in CallbackManager(callbacks) to be list. Got {type(callbacks)}.\"", ")", "\n", "\n", "", "for", "env_name", ",", "env_val", "in", "self", ".", "_env", ".", "items", "(", ")", ":", "\n", "            ", "for", "callback", "in", "callbacks", ":", "\n", "                ", "setattr", "(", "callback", ",", "'_'", "+", "env_name", ",", "env_val", ")", "# Callback.trainer", "\n", "", "", "return", "callbacks", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_train_begin": [[354, 357], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_epoch_begin": [[358, 361], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_epoch_begin", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_batch_begin": [[362, 365], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_batch_begin", "(", "self", ",", "batch_x", ",", "batch_y", ",", "indices", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_loss_begin": [[366, 369], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_loss_begin", "(", "self", ",", "batch_y", ",", "predict_y", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_backward_begin": [[370, 373], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_backward_begin", "(", "self", ",", "loss", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_backward_end": [[374, 377], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_backward_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_step_end": [[378, 381], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_step_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_batch_end": [[382, 385], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_batch_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_valid_begin": [[386, 389], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_valid_begin", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_valid_end": [[390, 393], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_valid_end", "(", "self", ",", "eval_result", ",", "metric_key", ",", "optimizer", ",", "is_better_eval", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_validation": [[394, 397], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_validation", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_epoch_end": [[398, 401], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_train_end": [[402, 405], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_train_end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.on_exception": [[406, 409], ["None"], "methods", ["None"], ["", "@", "_transfer", "\n", "def", "on_exception", "(", "self", ",", "exception", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.DistCallbackManager.__init__": [[412, 420], ["callback.CallbackManager.__init__", "callback.DistCallbackManager.add_callback", "callback.DistCallbackManager.add_callback"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.DistCallbackManager.add_callback", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.DistCallbackManager.add_callback"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "callbacks_all", "=", "None", ",", "callbacks_master", "=", "None", ")", ":", "\n", "        ", "super", "(", "DistCallbackManager", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "assert", "'trainer'", "in", "env", "\n", "self", ".", "_trainer", "=", "env", "[", "'trainer'", "]", "\n", "self", ".", "callbacks_master", "=", "[", "]", "\n", "self", ".", "callbacks_all", "=", "[", "]", "\n", "self", ".", "add_callback", "(", "callbacks_all", ",", "master", "=", "False", ")", "\n", "self", ".", "add_callback", "(", "callbacks_master", ",", "master", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.DistCallbackManager.patch_callback": [[421, 428], ["isinstance"], "methods", ["None"], ["", "def", "patch_callback", "(", "self", ",", "callbacks", ",", "disabled", ")", ":", "\n", "        ", "if", "not", "callbacks", ":", "\n", "            ", "return", "\n", "", "if", "not", "isinstance", "(", "callbacks", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "callbacks", "=", "[", "callbacks", "]", "\n", "", "for", "cb", "in", "callbacks", ":", "\n", "            ", "cb", ".", "_disabled", "=", "disabled", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.DistCallbackManager.add_callback": [[429, 436], ["callback.DistCallbackManager.patch_callback", "callback.DistCallbackManager.prepare_callbacks", "callback.DistCallbackManager.prepare_callbacks"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.DistCallbackManager.patch_callback", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.prepare_callbacks", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackManager.prepare_callbacks"], ["", "", "def", "add_callback", "(", "self", ",", "cb", ",", "master", "=", "False", ")", ":", "\n", "        ", "if", "master", ":", "\n", "            ", "self", ".", "patch_callback", "(", "cb", ",", "not", "self", ".", "is_master", ")", "\n", "self", ".", "callbacks_master", "+=", "self", ".", "prepare_callbacks", "(", "cb", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "callbacks_all", "+=", "self", ".", "prepare_callbacks", "(", "cb", ")", "\n", "", "self", ".", "callbacks", "=", "self", ".", "callbacks_all", "+", "self", ".", "callbacks_master", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.GradientClipCallback.__init__": [[443, 472], ["callback.Callback.__init__", "list", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "parameters", "=", "None", ",", "clip_value", "=", "1", ",", "clip_type", "=", "'norm'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param None,torch.Tensor,List[torch.Tensor] parameters: \u4e00\u822c\u901a\u8fc7model.parameters()\u83b7\u5f97\u3002\n            \u5982\u679c\u4e3aNone\u5219\u9ed8\u8ba4\u5bf9Trainer\u7684model\u4e2d\u6240\u6709\u53c2\u6570\u8fdb\u884cclip\n        :param float clip_value: \u5c06gradient \u9650\u5236\u5230[-clip_value, clip_value]\u3002clip_value\u5e94\u8be5\u4e3a\u6b63\u6570\n        :param str clip_type: \u652f\u6301'norm', 'value'\n            \u4e24\u79cd::\n    \n                1 'norm', \u5c06gradient\u7684norm rescale\u5230[-clip_value, clip_value]\n            \n                2 'value', \u5c06gradient\u9650\u5236\u5728[-clip_value, clip_value],\n                    \u5c0f\u4e8e-clip_value\u7684gradient\u88ab\u8d4b\u503c\u4e3a-clip_value;\n                    \u5927\u4e8eclip_value\u7684gradient\u88ab\u8d4b\u503c\u4e3aclip_value.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "from", "torch", "import", "nn", "\n", "if", "clip_type", "==", "'norm'", ":", "\n", "            ", "self", ".", "clip_fun", "=", "nn", ".", "utils", ".", "clip_grad_norm_", "\n", "", "elif", "clip_type", "==", "'value'", ":", "\n", "            ", "self", ".", "clip_fun", "=", "nn", ".", "utils", ".", "clip_grad_value_", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only supports `norm` or `value` right now.\"", ")", "\n", "", "if", "parameters", "is", "not", "None", ":", "\n", "            ", "self", ".", "parameters", "=", "list", "(", "parameters", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "parameters", "=", "None", "\n", "", "self", ".", "clip_value", "=", "clip_value", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.GradientClipCallback.on_backward_end": [[473, 483], ["getattr", "callback.GradientClipCallback.clip_fun", "utils._check_fp16", "callback.GradientClipCallback.clip_fun", "callback.GradientClipCallback.clip_fun", "amp.master_params", "callback.GradientClipCallback.model.parameters"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_fp16"], ["", "def", "on_backward_end", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "step", "%", "self", ".", "update_every", "==", "0", ":", "\n", "            ", "if", "self", ".", "parameters", "is", "None", ":", "\n", "                ", "if", "getattr", "(", "self", ".", "trainer", ",", "'fp16'", ",", "''", ")", ":", "\n", "                    ", "_check_fp16", "(", ")", "\n", "self", ".", "clip_fun", "(", "amp", ".", "master_params", "(", "self", ".", "optimizer", ")", ",", "self", ".", "clip_value", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "clip_fun", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "clip_value", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "clip_fun", "(", "self", ".", "parameters", ",", "self", ".", "clip_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.EarlyStopCallback.__init__": [[490, 498], ["callback.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "patience", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param int patience: epoch\u7684\u6570\u91cf\n        \"\"\"", "\n", "super", "(", "EarlyStopCallback", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "wait", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.EarlyStopCallback.on_valid_end": [[499, 508], ["callback.EarlyStopError"], "methods", ["None"], ["", "def", "on_valid_end", "(", "self", ",", "eval_result", ",", "metric_key", ",", "optimizer", ",", "is_better_eval", ")", ":", "\n", "        ", "if", "not", "is_better_eval", ":", "\n", "# current result is getting worse", "\n", "            ", "if", "self", ".", "wait", "==", "self", ".", "patience", ":", "\n", "                ", "raise", "EarlyStopError", "(", "\"Early stopping raised.\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "wait", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "wait", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.EarlyStopCallback.on_exception": [[509, 514], ["isinstance", "_logger.logger.info"], "methods", ["None"], ["", "", "def", "on_exception", "(", "self", ",", "exception", ")", ":", "\n", "        ", "if", "isinstance", "(", "exception", ",", "EarlyStopError", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Early Stopping triggered in epoch {}!\"", ".", "format", "(", "self", ".", "epoch", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "exception", "# \u629b\u51fa\u964c\u751fError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.FitlogCallback.__init__": [[524, 564], ["callback.Callback.__init__", "isinstance", "isinstance", "isinstance", "isinstance", "callback.FitlogCallback.testers.values", "data.items", "data.items", "isinstance", "tester.items", "setattr", "isinstance", "TypeError", "isinstance", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["def", "__init__", "(", "self", ",", "data", "=", "None", ",", "tester", "=", "None", ",", "log_loss_every", "=", "0", ",", "verbose", "=", "1", ",", "log_exception", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param ~fastNLP.DataSet,Dict[~fastNLP.DataSet] data: \u4f20\u5165DataSet\u5bf9\u8c61\uff0c\u4f1a\u4f7f\u7528\u591a\u4e2aTrainer\u4e2d\u7684metric\u5bf9\u6570\u636e\u8fdb\u884c\u9a8c\u8bc1\u3002\u5982\u679c\u9700\u8981\n            \u4f20\u5165\u591a\u4e2aDataSet\u8bf7\u901a\u8fc7dict\u7684\u65b9\u5f0f\u4f20\u5165\uff0cdict\u7684key\u5c06\u4f5c\u4e3a\u5bf9\u5e94dataset\u7684name\u4f20\u9012\u7ed9fitlog\u3002data\u7684\u7ed3\u679c\u7684\u540d\u79f0\u4ee5'data'\u5f00\u5934\u3002\n        :param ~fastNLP.Tester,Dict[~fastNLP.Tester] tester: Tester\u5bf9\u8c61\uff0c\u5c06\u5728on_valid_end\u65f6\u8c03\u7528\u3002tester\u7684\u7ed3\u679c\u7684\u540d\u79f0\u4ee5'tester'\u5f00\u5934\n        :param int log_loss_every: \u591a\u5c11\u4e2astep\u8bb0\u5f55\u4e00\u6b21loss(\u8bb0\u5f55\u7684\u662f\u8fd9\u51e0\u4e2abatch\u7684loss\u5e73\u5747\u503c)\uff0c\u5982\u679c\u6570\u636e\u96c6\u8f83\u5927\u5efa\u8bae\u5c06\u8be5\u503c\u8bbe\u7f6e\u5f97\n            \u5927\u4e00\u4e9b\uff0c\u4e0d\u7136\u4f1a\u5bfc\u81f4log\u6587\u4ef6\u5de8\u5927\u3002\u9ed8\u8ba4\u4e3a0, \u5373\u4e0d\u8981\u8bb0\u5f55loss\u3002\n        :param int verbose: \u662f\u5426\u5728\u7ec8\u7aef\u6253\u5370evaluation\u7684\u7ed3\u679c\uff0c0\u4e0d\u6253\u5370\u3002\n        :param bool log_exception: fitlog\u662f\u5426\u8bb0\u5f55\u53d1\u751f\u7684exception\u4fe1\u606f\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "datasets", "=", "{", "}", "\n", "self", ".", "testers", "=", "{", "}", "\n", "self", ".", "_log_exception", "=", "log_exception", "\n", "assert", "isinstance", "(", "log_loss_every", ",", "int", ")", "and", "log_loss_every", ">=", "0", "\n", "if", "tester", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "tester", ",", "dict", ")", ":", "\n", "                ", "for", "name", ",", "test", "in", "tester", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "isinstance", "(", "test", ",", "Tester", ")", ":", "\n", "                        ", "raise", "TypeError", "(", "f\"{name} in tester is not a valid fastNLP.Tester.\"", ")", "\n", "", "self", ".", "testers", "[", "'tester-'", "+", "name", "]", "=", "test", "\n", "", "", "if", "isinstance", "(", "tester", ",", "Tester", ")", ":", "\n", "                ", "self", ".", "testers", "[", "'tester-test'", "]", "=", "tester", "\n", "", "for", "tester", "in", "self", ".", "testers", ".", "values", "(", ")", ":", "\n", "                ", "setattr", "(", "tester", ",", "'verbose'", ",", "0", ")", "\n", "\n", "", "", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "assert", "isinstance", "(", "value", ",", "DataSet", ")", ",", "f\"Only DataSet object is allowed, not {type(value)}.\"", "\n", "", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "datasets", "[", "'data-'", "+", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "data", ",", "DataSet", ")", ":", "\n", "            ", "self", ".", "datasets", "[", "'data-test'", "]", "=", "data", "\n", "", "elif", "data", "is", "not", "None", ":", "\n", "            ", "raise", "TypeError", "(", "\"data receives dict[DataSet] or DataSet object.\"", ")", "\n", "\n", "", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "_log_loss_every", "=", "log_loss_every", "\n", "self", ".", "_avg_loss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.FitlogCallback.on_train_begin": [[565, 579], ["fitlog.add_progress", "RuntimeError", "len", "callback.FitlogCallback.datasets.items", "tester.Tester.Tester", "len", "len", "callback.FitlogCallback.trainer.kwargs.get", "callback.FitlogCallback.trainer.kwargs.get"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "if", "(", "len", "(", "self", ".", "datasets", ")", ">", "0", "or", "len", "(", "self", ".", "testers", ")", ">", "0", ")", "and", "self", ".", "trainer", ".", "dev_data", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Trainer has no dev data, you cannot pass extra data to do evaluation.\"", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "datasets", ")", ">", "0", ":", "\n", "            ", "for", "key", ",", "data", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "tester", "=", "Tester", "(", "data", "=", "data", ",", "model", "=", "self", ".", "model", ",", "\n", "batch_size", "=", "self", ".", "trainer", ".", "kwargs", ".", "get", "(", "'dev_batch_size'", ",", "self", ".", "batch_size", ")", ",", "\n", "metrics", "=", "self", ".", "trainer", ".", "metrics", ",", "\n", "verbose", "=", "0", ",", "\n", "use_tqdm", "=", "self", ".", "trainer", ".", "test_use_tqdm", ",", "\n", "sampler", "=", "self", ".", "trainer", ".", "kwargs", ".", "get", "(", "'test_sampler'", ",", "None", ")", ")", "\n", "self", ".", "testers", "[", "key", "]", "=", "tester", "\n", "", "", "fitlog", ".", "add_progress", "(", "total_steps", "=", "self", ".", "n_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.FitlogCallback.on_backward_begin": [[580, 586], ["loss.item", "fitlog.add_loss"], "methods", ["None"], ["", "def", "on_backward_begin", "(", "self", ",", "loss", ")", ":", "\n", "        ", "if", "self", ".", "_log_loss_every", ">", "0", ":", "\n", "            ", "self", ".", "_avg_loss", "+=", "loss", ".", "item", "(", ")", "\n", "if", "self", ".", "step", "%", "self", ".", "_log_loss_every", "==", "0", ":", "\n", "                ", "fitlog", ".", "add_loss", "(", "self", ".", "_avg_loss", "/", "self", ".", "_log_loss_every", "*", "self", ".", "update_every", ",", "name", "=", "'loss'", ",", "step", "=", "self", ".", "step", ",", "epoch", "=", "self", ".", "epoch", ")", "\n", "self", ".", "_avg_loss", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.FitlogCallback.on_valid_end": [[587, 607], ["fitlog.add_metric", "copy.deepcopy", "fitlog.add_best_metric", "len", "callback.FitlogCallback.testers.items", "tester.test", "fitlog.add_metric", "callback.FitlogCallback.pbar.write", "callback.FitlogCallback.pbar.write", "fitlog.add_best_metric", "callback.FitlogCallback.pbar.write", "tester._format_eval_results"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester.test", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._format_eval_results"], ["", "", "", "def", "on_valid_end", "(", "self", ",", "eval_result", ",", "metric_key", ",", "optimizer", ",", "better_result", ")", ":", "\n", "        ", "if", "better_result", ":", "\n", "            ", "eval_result", "=", "deepcopy", "(", "eval_result", ")", "\n", "eval_result", "[", "'step'", "]", "=", "self", ".", "step", "\n", "eval_result", "[", "'epoch'", "]", "=", "self", ".", "epoch", "\n", "fitlog", ".", "add_best_metric", "(", "eval_result", ")", "\n", "", "fitlog", ".", "add_metric", "(", "eval_result", ",", "step", "=", "self", ".", "step", ",", "epoch", "=", "self", ".", "epoch", ")", "\n", "if", "len", "(", "self", ".", "testers", ")", ">", "0", ":", "\n", "            ", "for", "key", ",", "tester", "in", "self", ".", "testers", ".", "items", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "eval_result", "=", "tester", ".", "test", "(", ")", "\n", "if", "self", ".", "verbose", "!=", "0", ":", "\n", "                        ", "self", ".", "pbar", ".", "write", "(", "\"FitlogCallback evaluation on {}:\"", ".", "format", "(", "key", ")", ")", "\n", "self", ".", "pbar", ".", "write", "(", "tester", ".", "_format_eval_results", "(", "eval_result", ")", ")", "\n", "", "fitlog", ".", "add_metric", "(", "eval_result", ",", "name", "=", "key", ",", "step", "=", "self", ".", "step", ",", "epoch", "=", "self", ".", "epoch", ")", "\n", "if", "better_result", ":", "\n", "                        ", "fitlog", ".", "add_best_metric", "(", "eval_result", ",", "name", "=", "key", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "self", ".", "pbar", ".", "write", "(", "\"Exception happens when evaluate on DataSet named `{}`.\"", ".", "format", "(", "key", ")", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.FitlogCallback.on_train_end": [[608, 610], ["fitlog.finish"], "methods", ["None"], ["", "", "", "", "def", "on_train_end", "(", "self", ")", ":", "\n", "        ", "fitlog", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.FitlogCallback.on_exception": [[611, 615], ["fitlog.finish", "fitlog.add_other", "repr"], "methods", ["None"], ["", "def", "on_exception", "(", "self", ",", "exception", ")", ":", "\n", "        ", "fitlog", ".", "finish", "(", "status", "=", "1", ")", "\n", "if", "self", ".", "_log_exception", ":", "\n", "            ", "fitlog", ".", "add_other", "(", "repr", "(", "exception", ")", ",", "name", "=", "'except_info'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.EvaluateCallback.__init__": [[623, 653], ["callback.Callback.__init__", "isinstance", "isinstance", "isinstance", "callback.EvaluateCallback.testers.values", "data.items", "data.items", "isinstance", "tester.items", "setattr", "isinstance", "TypeError", "isinstance", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["def", "__init__", "(", "self", ",", "data", "=", "None", ",", "tester", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param ~fastNLP.DataSet,Dict[~fastNLP.DataSet] data: \u4f20\u5165DataSet\u5bf9\u8c61\uff0c\u4f1a\u4f7f\u7528Trainer\u4e2d\u7684metric\u5bf9\u6570\u636e\u8fdb\u884c\u9a8c\u8bc1\u3002\u5982\u679c\u9700\u8981\u4f20\u5165\u591a\u4e2a\n            DataSet\u8bf7\u901a\u8fc7dict\u7684\u65b9\u5f0f\u4f20\u5165\u3002\n        :param ~fastNLP.Tester,Dict[~fastNLP.DataSet] tester: Tester\u5bf9\u8c61, \u901a\u8fc7\u4f7f\u7528Tester\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u5f97\u9a8c\u8bc1\u7684metric\u4e0eTrainer\u4e2d\n            \u7684metric\u4e0d\u4e00\u6837\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "datasets", "=", "{", "}", "\n", "self", ".", "testers", "=", "{", "}", "\n", "if", "tester", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "tester", ",", "dict", ")", ":", "\n", "                ", "for", "name", ",", "test", "in", "tester", ".", "items", "(", ")", ":", "\n", "                    ", "if", "not", "isinstance", "(", "test", ",", "Tester", ")", ":", "\n", "                        ", "raise", "TypeError", "(", "f\"{name} in tester is not a valid fastNLP.Tester.\"", ")", "\n", "", "self", ".", "testers", "[", "'tester-'", "+", "name", "]", "=", "test", "\n", "", "", "if", "isinstance", "(", "tester", ",", "Tester", ")", ":", "\n", "                ", "self", ".", "testers", "[", "'tester-test'", "]", "=", "tester", "\n", "", "for", "tester", "in", "self", ".", "testers", ".", "values", "(", ")", ":", "\n", "                ", "setattr", "(", "tester", ",", "'verbose'", ",", "0", ")", "\n", "\n", "", "", "if", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "assert", "isinstance", "(", "value", ",", "DataSet", ")", ",", "f\"Only DataSet object is allowed, not {type(value)}.\"", "\n", "", "for", "key", ",", "value", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "datasets", "[", "'data-'", "+", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "data", ",", "DataSet", ")", ":", "\n", "            ", "self", ".", "datasets", "[", "'data-test'", "]", "=", "data", "\n", "", "elif", "data", "is", "not", "None", ":", "\n", "            ", "raise", "TypeError", "(", "\"data receives dict[DataSet] or DataSet object.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.EvaluateCallback.on_train_begin": [[654, 665], ["RuntimeError", "len", "callback.EvaluateCallback.datasets.items", "len", "tester.Tester.Tester", "callback.EvaluateCallback.trainer.kwargs.get"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["", "", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "datasets", ")", ">", "0", "and", "self", ".", "trainer", ".", "dev_data", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Trainer has no dev data, you cannot pass extra DataSet to do evaluation.\"", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "datasets", ")", ">", "0", ":", "\n", "            ", "for", "key", ",", "data", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "                ", "tester", "=", "Tester", "(", "data", "=", "data", ",", "model", "=", "self", ".", "model", ",", "\n", "batch_size", "=", "self", ".", "trainer", ".", "kwargs", ".", "get", "(", "'dev_batch_size'", ",", "self", ".", "batch_size", ")", ",", "\n", "metrics", "=", "self", ".", "trainer", ".", "metrics", ",", "verbose", "=", "0", ",", "\n", "use_tqdm", "=", "self", ".", "trainer", ".", "test_use_tqdm", ")", "\n", "self", ".", "testers", "[", "key", "]", "=", "tester", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.EvaluateCallback.on_valid_end": [[666, 676], ["len", "callback.EvaluateCallback.testers.items", "tester.test", "callback.EvaluateCallback.logger.info", "callback.EvaluateCallback.logger.info", "tester._format_eval_results", "callback.EvaluateCallback.logger.error"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester.test", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._format_eval_results"], ["", "", "", "def", "on_valid_end", "(", "self", ",", "eval_result", ",", "metric_key", ",", "optimizer", ",", "better_result", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "testers", ")", ">", "0", ":", "\n", "            ", "for", "key", ",", "tester", "in", "self", ".", "testers", ".", "items", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "eval_result", "=", "tester", ".", "test", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"EvaluateCallback evaluation on {}:\"", ".", "format", "(", "key", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "tester", ".", "_format_eval_results", "(", "eval_result", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "self", ".", "logger", ".", "error", "(", "\"Exception happens when evaluate on DataSet named `{}`.\"", ".", "format", "(", "key", ")", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRScheduler.__init__": [[682, 692], ["callback.Callback.__init__", "isinstance", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "lr_scheduler", ")", ":", "\n", "        ", "r\"\"\"\n        :param torch.optim.lr_scheduler._LRScheduler lr_scheduler: PyTorch\u7684lr_scheduler\n        \"\"\"", "\n", "super", "(", "LRScheduler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "import", "torch", ".", "optim", "\n", "if", "isinstance", "(", "lr_scheduler", ",", "torch", ".", "optim", ".", "lr_scheduler", ".", "_LRScheduler", ")", ":", "\n", "            ", "self", ".", "scheduler", "=", "lr_scheduler", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Expect torch.optim.lr_scheduler for LRScheduler. Got {type(lr_scheduler)}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRScheduler.on_epoch_end": [[693, 695], ["callback.LRScheduler.scheduler.step"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.AdamW.step"], ["", "", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "self", ".", "scheduler", ".", "step", "(", "self", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.ControlC.quit_all": [[702, 706], ["sys.exit"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "quit_all", "(", ")", ":", "\n", "        ", "import", "sys", "\n", "sys", ".", "exit", "(", "0", ")", "# \u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.ControlC.__init__": [[707, 717], ["callback.Callback.__init__", "type", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["", "def", "__init__", "(", "self", ",", "quit_and_do", ",", "action", "=", "quit_all", ")", ":", "\n", "        ", "r\"\"\"\n        :param bool quit_and_do: \u82e5\u4e3aTrue,\u5219\u68c0\u6d4b\u5230control+C \u8fdb\u884c\u540e\u7eed\u64cd\u4f5c\uff08\u9ed8\u8ba4\u503c\u4e3a\uff1a\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f\uff09\uff1b\u5426\u5219\u53ea\u9000\u51faTrainer\u3002\n        \"\"\"", "\n", "\n", "super", "(", "ControlC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "quit_and_do", ")", "!=", "bool", ":", "\n", "            ", "raise", "ValueError", "(", "\"In KeyBoardInterrupt, quit_and_do arguemnt must be a bool.\"", ")", "\n", "", "self", ".", "quit_and_do", "=", "quit_and_do", "\n", "self", ".", "action", "=", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.ControlC.on_exception": [[718, 726], ["isinstance", "callback.ControlC.action"], "methods", ["None"], ["", "def", "on_exception", "(", "self", ",", "exception", ")", ":", "\n", "        ", "if", "isinstance", "(", "exception", ",", "KeyboardInterrupt", ")", ":", "\n", "            ", "if", "self", ".", "quit_and_do", "is", "True", ":", "\n", "                ", "self", ".", "action", "(", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "raise", "exception", "# \u629b\u51fa\u964c\u751fError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SmoothValue.__init__": [[731, 734], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "beta", ":", "float", ")", ":", "\n", "        ", "self", ".", "beta", ",", "self", ".", "n", ",", "self", ".", "mov_avg", "=", "beta", ",", "0", ",", "0", "\n", "self", ".", "smooth", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SmoothValue.add_value": [[735, 740], ["None"], "methods", ["None"], ["", "def", "add_value", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "r\"\"\"Add `val` to calculate updated smoothed value.\"\"\"", "\n", "self", ".", "n", "+=", "1", "\n", "self", ".", "mov_avg", "=", "self", ".", "beta", "*", "self", ".", "mov_avg", "+", "(", "1", "-", "self", ".", "beta", ")", "*", "val", "\n", "self", ".", "smooth", "=", "self", ".", "mov_avg", "/", "(", "1", "-", "self", ".", "beta", "**", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRFinder.__init__": [[747, 763], ["callback.Callback.__init__", "callback.SmoothValue"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "start_lr", "=", "1e-6", ",", "end_lr", "=", "10", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param float start_lr: \u5b66\u4e60\u7387\u4e0b\u754c\n        :param float end_lr: \u5b66\u4e60\u7387\u4e0a\u754c\n        \"\"\"", "\n", "super", "(", "LRFinder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_lr", ",", "self", ".", "end_lr", "=", "start_lr", ",", "end_lr", "\n", "\n", "self", ".", "stop", "=", "False", "\n", "self", ".", "best_loss", "=", "0.", "\n", "self", ".", "best_lr", "=", "None", "\n", "self", ".", "loss_history", "=", "[", "]", "\n", "self", ".", "smooth_value", "=", "SmoothValue", "(", "0.8", ")", "\n", "self", ".", "opt", "=", "None", "\n", "self", ".", "find", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRFinder.lr_gen": [[764, 768], ["range"], "methods", ["None"], ["", "@", "property", "\n", "def", "lr_gen", "(", "self", ")", ":", "\n", "        ", "scale", "=", "(", "self", ".", "end_lr", "-", "self", ".", "start_lr", ")", "/", "self", ".", "batch_per_epoch", "\n", "return", "(", "self", ".", "start_lr", "+", "scale", "*", "(", "step", "+", "1", ")", "for", "step", "in", "range", "(", "self", ".", "batch_per_epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRFinder.num_it": [[769, 772], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_it", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch_per_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRFinder.on_epoch_begin": [[773, 780], ["torch.save", "callback.LRFinder.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save"], ["", "def", "on_epoch_begin", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "epoch", "==", "1", ":", "# first epoch", "\n", "            ", "self", ".", "opt", "=", "self", ".", "trainer", ".", "optimizer", "# pytorch optimizer", "\n", "self", ".", "opt", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "=", "self", ".", "start_lr", "\n", "# save model", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "'tmp'", ")", "\n", "self", ".", "find", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRFinder.on_backward_begin": [[781, 792], ["loss.detach().mean().item", "callback.LRFinder.loss_history.append", "callback.LRFinder.smooth_value.add_value", "torch.isnan", "loss.detach().mean", "loss.detach"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SmoothValue.add_value"], ["", "", "def", "on_backward_begin", "(", "self", ",", "loss", ")", ":", "\n", "        ", "if", "self", ".", "find", ":", "\n", "            ", "if", "torch", ".", "isnan", "(", "loss", ")", "or", "self", ".", "stop", "is", "True", ":", "\n", "                ", "self", ".", "stop", "=", "True", "\n", "return", "\n", "", "loss_val", "=", "loss", ".", "detach", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "loss_history", ".", "append", "(", "loss_val", ")", "\n", "self", ".", "smooth_value", ".", "add_value", "(", "loss_val", ")", "\n", "if", "self", ".", "best_loss", "==", "0.", "or", "self", ".", "smooth_value", ".", "smooth", "<", "self", ".", "best_loss", ":", "\n", "                ", "self", ".", "best_loss", "=", "self", ".", "smooth_value", ".", "smooth", "\n", "self", ".", "best_lr", "=", "self", ".", "opt", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRFinder.on_batch_end": [[793, 800], ["next"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.helper.loader_wrapper.DataPrefetcher.next"], ["", "", "", "def", "on_batch_end", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "self", ".", "find", ":", "\n", "            ", "lr", "=", "next", "(", "self", ".", "lr_gen", ",", "None", ")", "\n", "if", "lr", "is", "None", "or", "self", ".", "stop", "is", "True", "or", "self", ".", "loss_history", "[", "-", "1", "]", ">", "4", "*", "self", ".", "best_loss", ":", "\n", "                ", "self", ".", "stop", "=", "True", "\n", "return", "\n", "", "self", ".", "opt", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "=", "lr", "\n", "# self.loader.load_pytorch(self.trainer.model, \"tmp\")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.LRFinder.on_epoch_end": [[802, 811], ["torch.load", "callback.LRFinder.model.load_state_dict", "os.remove", "callback.LRFinder.pbar.write"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write"], ["", "", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "epoch", "==", "1", ":", "# first epoch", "\n", "            ", "self", ".", "opt", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "=", "self", ".", "best_lr", "\n", "self", ".", "find", "=", "False", "\n", "# reset model", "\n", "states", "=", "torch", ".", "load", "(", "'tmp'", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "states", ")", "\n", "os", ".", "remove", "(", "'tmp'", ")", "\n", "self", ".", "pbar", ".", "write", "(", "\"Model reset. \\nFind best lr={}\"", ".", "format", "(", "self", ".", "best_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.TensorboardCallback.__init__": [[826, 835], ["callback.Callback.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "*", "options", ")", ":", "\n", "        ", "super", "(", "TensorboardCallback", ",", "self", ")", ".", "__init__", "(", ")", "\n", "args", "=", "{", "\"model\"", ",", "\"loss\"", ",", "\"metric\"", "}", "\n", "for", "opt", "in", "options", ":", "\n", "            ", "if", "opt", "not", "in", "args", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unrecognized argument {}. Expect one of {}\"", ".", "format", "(", "opt", ",", "args", ")", ")", "\n", "", "", "self", ".", "options", "=", "options", "\n", "self", ".", "_summary_writer", "=", "None", "\n", "self", ".", "graph_added", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.TensorboardCallback.on_train_begin": [[836, 846], ["os.path.join", "os.path.join", "SummaryWriter"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "save_dir", "=", "self", ".", "trainer", ".", "save_path", "\n", "if", "save_dir", "is", "None", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "\"./\"", ",", "'tensorboard_logs_{}'", ".", "format", "(", "self", ".", "trainer", ".", "start_time", ")", ")", "\n", "", "else", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'tensorboard_logs_{}'", ".", "format", "(", "self", ".", "trainer", ".", "start_time", ")", ")", "\n", "", "if", "tensorboardX_flag", ":", "\n", "            ", "self", ".", "_summary_writer", "=", "SummaryWriter", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_summary_writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.TensorboardCallback.on_batch_begin": [[847, 856], ["None"], "methods", ["None"], ["", "", "def", "on_batch_begin", "(", "self", ",", "batch_x", ",", "batch_y", ",", "indices", ")", ":", "\n", "        ", "if", "\"model\"", "in", "self", ".", "options", "and", "self", ".", "graph_added", "is", "False", ":", "\n", "# tesorboardX \u8fd9\u91cc\u6709\u5927bug\uff0c\u6682\u65f6\u6ca1\u6cd5\u753b\u6a21\u578b\u56fe", "\n", "# from fastNLP.core.utils import _build_args", "\n", "# inputs = _build_args(self.trainer.model, **batch_x)", "\n", "# args = tuple([value for value in inputs.values()])", "\n", "# args = args[0] if len(args) == 1 else args", "\n", "# self._summary_writer.add_graph(self.trainer.model, torch.zeros(32, 2))", "\n", "            ", "self", ".", "graph_added", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.TensorboardCallback.on_backward_begin": [[857, 868], ["callback.TensorboardCallback._summary_writer.add_scalar", "callback.TensorboardCallback.trainer.model.named_parameters", "loss.item", "callback.TensorboardCallback._summary_writer.add_scalar", "callback.TensorboardCallback._summary_writer.add_scalar", "param.mean", "param.grad.mean"], "methods", ["None"], ["", "", "def", "on_backward_begin", "(", "self", ",", "loss", ")", ":", "\n", "        ", "if", "\"loss\"", "in", "self", ".", "options", "and", "self", ".", "_summary_writer", ":", "\n", "            ", "self", ".", "_summary_writer", ".", "add_scalar", "(", "\"loss\"", ",", "loss", ".", "item", "(", ")", ",", "global_step", "=", "self", ".", "trainer", ".", "step", ")", "\n", "\n", "", "if", "\"model\"", "in", "self", ".", "options", "and", "self", ".", "_summary_writer", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "trainer", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "param", ".", "requires_grad", ":", "\n", "                    ", "self", ".", "_summary_writer", ".", "add_scalar", "(", "name", "+", "\"_mean\"", ",", "param", ".", "mean", "(", ")", ",", "global_step", "=", "self", ".", "trainer", ".", "step", ")", "\n", "# self._summary_writer.add_scalar(name + \"_std\", param.std(), global_step=self.trainer.step)", "\n", "self", ".", "_summary_writer", ".", "add_scalar", "(", "name", "+", "\"_grad_mean\"", ",", "param", ".", "grad", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "self", ".", "trainer", ".", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.TensorboardCallback.on_valid_end": [[869, 875], ["eval_result.items", "metric.items", "callback.TensorboardCallback._summary_writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "", "", "", "def", "on_valid_end", "(", "self", ",", "eval_result", ",", "metric_key", ",", "optimizer", ",", "is_better_eval", ")", ":", "\n", "        ", "if", "\"metric\"", "in", "self", ".", "options", "and", "self", ".", "_summary_writer", ":", "\n", "            ", "for", "name", ",", "metric", "in", "eval_result", ".", "items", "(", ")", ":", "\n", "                ", "for", "metric_key", ",", "metric_val", "in", "metric", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "_summary_writer", ".", "add_scalar", "(", "\"valid_{}_{}\"", ".", "format", "(", "name", ",", "metric_key", ")", ",", "metric_val", ",", "\n", "global_step", "=", "self", ".", "trainer", ".", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.TensorboardCallback.on_train_end": [[876, 880], ["callback.TensorboardCallback._summary_writer.close"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.close"], ["", "", "", "", "def", "on_train_end", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_summary_writer", ":", "\n", "            ", "self", ".", "_summary_writer", ".", "close", "(", ")", "\n", "del", "self", ".", "_summary_writer", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.TensorboardCallback.on_exception": [[881, 885], ["hasattr", "callback.TensorboardCallback._summary_writer.close"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dist_trainer.DistTrainer.close"], ["", "", "def", "on_exception", "(", "self", ",", "exception", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"_summary_writer\"", ")", ":", "\n", "            ", "self", ".", "_summary_writer", ".", "close", "(", ")", "\n", "del", "self", ".", "_summary_writer", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CheckPointCallback.__init__": [[888, 932], ["callback.Callback.__init__", "os.path.abspath", "os.path.exists", "os.path.expanduser", "os.path.expanduser", "_logger.logger.info", "torch.load", "fitlog.set_log_dir", "_logger.logger.error"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], ["    ", "def", "__init__", "(", "self", ",", "save_path", ",", "delete_when_train_finish", "=", "True", ",", "recovery_fitlog", "=", "True", ")", ":", "\n", "        ", "r\"\"\"\n        \u7528\u4e8e\u5728\u6bcf\u4e2aepoch\u7ed3\u675f\u7684\u65f6\u5019\u4fdd\u5b58\u4e00\u4e0b\u5f53\u524d\u7684Trainer\u72b6\u6001\uff0c\u53ef\u4ee5\u7528\u4e8e\u6062\u590d\u4e4b\u524d\u7684\u8fd0\u884c\u3002\u4f7f\u7528\u6700\u8fd1\u7684\u4e00\u4e2aepoch\u7ee7\u7eed\u8bad\u7ec3\n        \u4e00\u6bb5\u793a\u4f8b\u4ee3\u7801\n        Example1::\n\n            >>> callback = CheckPointCallback('chkp.pt')\n            >>> trainer = Trainer(xxx, callback=callback)\n            >>> trainer.train()  # \u5982\u679c\u8bad\u7ec3\u8fc7\u7a0b\u6ca1\u7ed3\u675f\u5c31fail\uff0c\u8bf7\u76f4\u63a5\u518d\u6b21\u8fd0\u884c\u5373\u53ef\uff08\u8bf7\u52a1\u5fc5\u4fdd\u8bc1\u4e0e\u4e0a\u6b21\u4f7f\u7528\u4e86\u5b8c\u5168\u76f8\u540c\u7684\u6570\u636e\u4e0e\u8d85\u53c2\u6570\uff09\n\n        Example2::\n\n            >>> fitlog.set_log_dir('xxx')\n            >>> callback = CheckPointCallback('chkp.pt')  # \u4e00\u5b9a\u8981\u5728set_log_dir\u4e0b\u4e00\u884c\u5c31\u63a5\u7740CheckPointCallback\n            >>> trainer = Trainer(xxx, callback=callback)\n            >>> trainer.train()  # \u5982\u679c\u8bad\u7ec3\u8fc7\u7a0b\u6ca1\u7ed3\u675f\u5c31fail\uff0c\u8bf7\u76f4\u63a5\u518d\u6b21\u8fd0\u884c\u5373\u53ef\uff08\u8bf7\u52a1\u5fc5\u4fdd\u8bc1\u4e0e\u4e0a\u6b21\u4f7f\u7528\u4e86\u5b8c\u5168\u76f8\u540c\u7684\u6570\u636e\u4e0e\u8d85\u53c2\u6570\uff09\n\n        :param str save_path: \u5c06\u72b6\u6001\u4fdd\u5b58\u5230\u54ea\u4e2a\u4f4d\u7f6e\u3002\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u5177\u4f53\u7684\u8def\u5f84\uff0c\u6bd4\u5982'checkpoints/chtp.pt'\u3002\u5982\u679c\u68c0\u67e5\u5230\u8be5\u6587\u4ef6\u5b58\u5728\uff0c\u5c06\u5728\n            Trainer\u5f00\u59cb\u8bad\u7ec3\u7684\u65f6\u5019\u81ea\u52a8\u4ece\u8fd9\u4e2aCheckpoint\u5904\u5f00\u59cb\u8fd0\u884c\u3002\n        :param bool delete_when_train_finish: \u5982\u679cTrain\u6b63\u5e38\u8fd0\u884c\u5b8c\u6bd5\uff0c\u662f\u5426\u81ea\u52a8\u5220\u9664\u3002\u5220\u9664\u8be5\u6587\u4ef6\u53ef\u4ee5\u4f7f\u5f97\u8def\u5f84\u81ea\u52a8\u590d\u7528\u3002\n        :param bool recovery_fitlog: \u662f\u5426\u6062\u590dfitlog\u4e3a\u5bf9\u5e94\u7684log\uff0c\u5982\u679c\u4e3aTrue\u8bf7\u5c06\u672cCallback\u653e\u5728fitlog.set_log_dir\u540e\u9762\u4e00\u884c\u521d\u59cb\u5316\u3002\n            \u5982\u679c\u4e3aFalse\uff0c\u5c06\u65b0\u5efa\u4e00\u4e2alog folder\u5426\u5219\u7ee7\u7eed\u4f7f\u7528\u4e4b\u524d\u7684\u3002\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "save_path", ")", ")", "\n", "self", ".", "delete_when_train_finish", "=", "delete_when_train_finish", "\n", "self", ".", "recover_fitlog", "=", "recovery_fitlog", "\n", "try", ":", "\n", "            ", "import", "fitlog", "\n", "", "except", ":", "\n", "            ", "self", ".", "recover_fitlog", "=", "False", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "expanduser", "(", "self", ".", "save_path", ")", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"The train will start from the checkpoint saved in {}.\"", ".", "format", "(", "self", ".", "save_path", ")", ")", "\n", "if", "self", ".", "recover_fitlog", ":", "\n", "                ", "states", "=", "torch", ".", "load", "(", "self", ".", "save_path", ")", "\n", "if", "'fitlog_log_dir'", "in", "states", ":", "\n", "                    ", "try", ":", "\n", "                        ", "import", "fitlog", "\n", "log_dir", "=", "states", "[", "'fitlog_log_dir'", "]", "\n", "if", "'fitlog_save_log_dir'", "in", "states", ":", "\n", "                            ", "log_dir", "=", "states", "[", "'fitlog_save_log_dir'", "]", "\n", "", "fitlog", ".", "set_log_dir", "(", "log_dir", ",", "new_log", "=", "True", ")", "\n", "", "except", ":", "\n", "                        ", "logger", ".", "error", "(", "\"Fail to recovery the fitlog states.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CheckPointCallback.on_train_begin": [[933, 959], ["os.path.exists", "os.path.expanduser", "torch.load", "_parallel_utils._model_contains_inner_module", "model.load_state_dict", "callback.CheckPointCallback.optimizer.load_state_dict", "_logger.logger.info", "os.path.expanduser"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils._model_contains_inner_module"], ["", "", "", "", "", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u5f53train\u5f00\u59cb\u65f6\uff0c\u4e14\u9700\u8981\u6062\u590d\u4e0a\u6b21\u8bad\u7ec3\u65f6\uff0c\u4f1a\u505a\u4ee5\u4e0b\u7684\u64cd\u4f5c\n            (1) \u91cd\u65b0\u52a0\u8f7dmodel\u6743\u91cd\n            (2) \u91cd\u65b0\u52a0\u8f7doptimizer\u7684\u72b6\u6001\n            (3) \u52a0\u8f7d\u5f53\u524depoch\u6570\n            (4) \u52a0\u8f7d\u5f53\u524d\u6700\u4f73evaluate\u7684\u6027\u80fd\n            (5) (optional) \u81ea\u52a8\u5c06fitlog\u8bbe\u7f6e\u5230\u4e0a\u6b21log\u51fa\u7ee7\u7eed\n\n        :return:\n        \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "expanduser", "(", "self", ".", "save_path", ")", ")", ":", "\n", "            ", "states", "=", "torch", ".", "load", "(", "self", ".", "save_path", ")", "\n", "model", "=", "self", ".", "model", "\n", "if", "_model_contains_inner_module", "(", "model", ")", ":", "\n", "                ", "model", "=", "model", ".", "module", "\n", "", "model", ".", "load_state_dict", "(", "states", "[", "'model'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "states", "[", "'optimizer'", "]", ")", "\n", "self", ".", "trainer", ".", "epoch", "=", "states", "[", "'epoch'", "]", "+", "1", "# \u56e0\u4e3a\u662f\u7ed3\u675f\u50a8\u5b58\u7684\uff0c\u6240\u4ee5\u9700\u8981\u4ece\u4e0b\u4e00\u4e2aepoch\u5f00\u59cb", "\n", "self", ".", "trainer", ".", "step", "=", "states", "[", "'step'", "]", "\n", "if", "'best_dev_epoch'", "in", "states", ":", "\n", "                ", "self", ".", "trainer", ".", "best_dev_perf", "=", "states", "[", "'best_dev_perf'", "]", "\n", "self", ".", "trainer", ".", "best_dev_epoch", "=", "states", "[", "'best_dev_epoch'", "]", "\n", "self", ".", "trainer", ".", "best_dev_step", "=", "states", "[", "'best_dev_step'", "]", "\n", "self", ".", "trainer", ".", "best_metric_indicator", "=", "states", "[", "'best_metric_indicator'", "]", "\n", "", "logger", ".", "info", "(", "\"Load checkpoint from {}\"", ".", "format", "(", "os", ".", "path", ".", "expanduser", "(", "self", ".", "save_path", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CheckPointCallback.on_epoch_end": [[960, 991], ["_parallel_utils._model_contains_inner_module", "callback.CheckPointCallback.optimizer.state_dict", "torch.save", "_logger.logger.debug", "param.cpu", "model.state_dict().items", "model.state_dict"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils._model_contains_inner_module", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], ["", "", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "r\"\"\"\n        \u4fdd\u5b58\u72b6\u6001\uff0c\u4f7f\u5f97\u7ed3\u679c\u53ef\u4ee5\u88ab\u6062\u590d\n\n        :param self:\n        :return:\n        \"\"\"", "\n", "states", "=", "{", "}", "\n", "model", "=", "self", ".", "model", "\n", "if", "_model_contains_inner_module", "(", "model", ")", ":", "\n", "            ", "model", "=", "model", ".", "module", "\n", "", "states", "[", "'model'", "]", "=", "{", "name", ":", "param", ".", "cpu", "(", ")", "for", "name", ",", "param", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "}", "\n", "states", "[", "'optimizer'", "]", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "states", "[", "'epoch'", "]", "=", "self", ".", "epoch", "\n", "states", "[", "'step'", "]", "=", "self", ".", "step", "\n", "if", "self", ".", "trainer", ".", "best_dev_epoch", "is", "not", "None", ":", "\n", "            ", "states", "[", "'best_dev_epoch'", "]", "=", "self", ".", "trainer", ".", "best_dev_epoch", "\n", "states", "[", "'best_dev_perf'", "]", "=", "self", ".", "trainer", ".", "best_dev_perf", "\n", "states", "[", "'best_dev_step'", "]", "=", "self", ".", "trainer", ".", "best_dev_step", "\n", "states", "[", "'best_metric_indicator'", "]", "=", "self", ".", "trainer", ".", "best_metric_indicator", "\n", "", "if", "self", ".", "recover_fitlog", ":", "\n", "            ", "try", ":", "\n", "                ", "import", "fitlog", "\n", "if", "fitlog", ".", "_logger", ".", "_log_dir", "is", "not", "None", ":", "\n", "                    ", "states", "[", "'fitlog_log_dir'", "]", "=", "fitlog", ".", "_logger", ".", "_log_dir", "\n", "", "if", "fitlog", ".", "_logger", ".", "_save_log_dir", "is", "not", "None", ":", "\n", "                    ", "states", "[", "'fitlog_save_log_dir'", "]", "=", "fitlog", ".", "_logger", ".", "_save_log_dir", "\n", "", "", "except", ":", "\n", "                ", "pass", "\n", "", "", "torch", ".", "save", "(", "states", ",", "self", ".", "save_path", ")", "\n", "logger", ".", "debug", "(", "\"Checkpoint:{} has been saved in epoch:{}.\"", ".", "format", "(", "self", ".", "save_path", ",", "self", ".", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CheckPointCallback.on_train_end": [[992, 998], ["os.path.exists", "os.remove", "_logger.logger.debug"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ")", ":", "\n", "# \u8bad\u7ec3\u7ed3\u675f\uff0c\u6839\u636e\u60c5\u51b5\u5220\u9664\u4fdd\u5b58\u7684\u5185\u5bb9", "\n", "        ", "if", "self", ".", "delete_when_train_finish", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "save_path", ")", ":", "\n", "                ", "os", ".", "remove", "(", "self", ".", "save_path", ")", "\n", "logger", ".", "debug", "(", "\"Checkpoint:{} has been removed.\"", ".", "format", "(", "self", ".", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.WarmupCallback.__init__": [[1004, 1023], ["callback.Callback.__init__", "max", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "warmup", "=", "0.1", ",", "schedule", "=", "'constant'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param int,float warmup: \u5982\u679cwarmup\u4e3aint\uff0c\u5219\u5728\u8be5step\u4e4b\u524d\uff0clearning rate\u6839\u636eschedule\u7684\u7b56\u7565\u53d8\u5316; \u5982\u679cwarmup\u4e3afloat\uff0c\n            \u59820.1, \u5219\u524d10%\u7684step\u662f\u6309\u7167schedule\u7b56\u7565\u8c03\u6574learning rate\u3002\n        :param str schedule: \u4ee5\u54ea\u79cd\u65b9\u5f0f\u8c03\u6574\u3002\n            linear: \u524dwarmup\u7684step\u4e0a\u5347\u5230\u6307\u5b9a\u7684learning rate(\u4eceTrainer\u4e2d\u7684optimizer\u5904\u83b7\u53d6\u7684), \u540ewarmup\u7684step\u4e0b\u964d\u52300\uff1b\n            constant\u524dwarmup\u7684step\u4e0a\u5347\u5230\u6307\u5b9alearning rate\uff0c\u540e\u9762\u7684step\u4fdd\u6301learning rate.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "warmup", "=", "max", "(", "warmup", ",", "0.", ")", "\n", "\n", "self", ".", "initial_lrs", "=", "[", "]", "# \u5b58\u653eparam_group\u7684learning rate", "\n", "if", "schedule", "==", "'constant'", ":", "\n", "            ", "self", ".", "get_lr", "=", "self", ".", "_get_constant_lr", "\n", "", "elif", "schedule", "==", "'linear'", ":", "\n", "            ", "self", ".", "get_lr", "=", "self", ".", "_get_linear_lr", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Only support 'linear', 'constant'.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.WarmupCallback._get_constant_lr": [[1024, 1028], ["None"], "methods", ["None"], ["", "", "def", "_get_constant_lr", "(", "self", ",", "progress", ")", ":", "\n", "        ", "if", "progress", "<", "self", ".", "warmup", ":", "\n", "            ", "return", "progress", "/", "self", ".", "warmup", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.WarmupCallback._get_linear_lr": [[1029, 1033], ["max"], "methods", ["None"], ["", "def", "_get_linear_lr", "(", "self", ",", "progress", ")", ":", "\n", "        ", "if", "progress", "<", "self", ".", "warmup", ":", "\n", "            ", "return", "progress", "/", "self", ".", "warmup", "\n", "", "return", "max", "(", "(", "progress", "-", "1.", ")", "/", "(", "self", ".", "warmup", "-", "1.", ")", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.WarmupCallback.on_train_begin": [[1034, 1043], ["max", "callback.WarmupCallback.initial_lrs.append", "int", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], ["", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "self", ".", "t_steps", "=", "(", "len", "(", "self", ".", "trainer", ".", "train_data", ")", "//", "(", "self", ".", "batch_size", "*", "self", ".", "update_every", ")", "+", "\n", "int", "(", "len", "(", "self", ".", "trainer", ".", "train_data", ")", "%", "(", "self", ".", "batch_size", "*", "self", ".", "update_every", ")", "!=", "0", ")", ")", "*", "self", ".", "n_epochs", "\n", "if", "self", ".", "warmup", ">", "1", ":", "\n", "            ", "self", ".", "warmup", "=", "self", ".", "warmup", "/", "self", ".", "t_steps", "\n", "", "self", ".", "t_steps", "=", "max", "(", "2", ",", "self", ".", "t_steps", ")", "# \u4e0d\u80fd\u5c0f\u4e8e2", "\n", "# \u83b7\u53d6param_group\u7684\u521d\u59cblearning rate", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "self", ".", "initial_lrs", ".", "append", "(", "group", "[", "'lr'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.WarmupCallback.on_backward_end": [[1044, 1049], ["zip", "callback.WarmupCallback.get_lr"], "methods", ["None"], ["", "", "def", "on_backward_end", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "step", "%", "self", ".", "update_every", "==", "0", ":", "\n", "            ", "progress", "=", "(", "self", ".", "step", "/", "self", ".", "update_every", ")", "/", "self", ".", "t_steps", "\n", "for", "lr", ",", "group", "in", "zip", "(", "self", ".", "initial_lrs", ",", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "group", "[", "'lr'", "]", "=", "lr", "*", "self", ".", "get_lr", "(", "progress", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback.__init__": [[1063, 1083], ["callback.Callback.__init__", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "save_dir", ",", "top", "=", "3", ",", "only_param", "=", "False", ",", "save_on_exception", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param str save_dir: \u5c06\u6a21\u578b\u5b58\u653e\u5728\u54ea\u4e2a\u76ee\u5f55\u4e0b\uff0c\u4f1a\u5728\u8be5\u76ee\u5f55\u4e0b\u521b\u5efa\u4ee5\u65f6\u95f4\u6233\u547d\u540d\u7684\u76ee\u5f55\uff0c\u5e76\u5b58\u653e\u6a21\u578b\u3002\u5982\u679csave_dir\u4e0d\u5b58\u5728\u5c06\u81ea\u52a8\u521b\u5efa\n        :param int top: \u4fdd\u5b58dev\u8868\u73b0top\u591a\u5c11\u6a21\u578b\u3002-1\u4e3a\u4fdd\u5b58\u6240\u6709\u6a21\u578b\u3002\n        :param bool only_param: \u662f\u5426\u53ea\u4fdd\u5b58\u6a21\u578b\u7684\u6743\u91cd\u3002\n        :param save_on_exception: \u53d1\u751fexception\u65f6\uff0c\u662f\u5426\u4fdd\u5b58\u4e00\u4efd\u53d1\u751fexception\u7684\u6a21\u578b\u3002\u6a21\u578b\u540d\u79f0\u4e3aepoch:x_step:x_Exception:{exception_name}.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "if", "top", "<", "0", ":", "\n", "            ", "self", ".", "top", "=", "sys", ".", "maxsize", "\n", "", "else", ":", "\n", "            ", "self", ".", "top", "=", "top", "\n", "", "self", ".", "_ordered_save_models", "=", "[", "]", "# List[Tuple], Tuple[0]\u662fmetric\uff0c Tuple[1]\u662fpath\u3002metric\u662f\u4f9d\u6b21\u53d8\u597d\u7684\uff0c\u6240\u4ee5\u4ece\u5934\u5220", "\n", "\n", "self", ".", "only_param", "=", "only_param", "\n", "self", ".", "save_on_exception", "=", "save_on_exception", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback.on_train_begin": [[1084, 1086], ["os.path.join"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ")", ":", "\n", "        ", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "self", ".", "trainer", ".", "start_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback.on_valid_end": [[1087, 1090], ["callback.SaveModelCallback._save_this_model", "list", "eval_result.values"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback._save_this_model"], ["", "def", "on_valid_end", "(", "self", ",", "eval_result", ",", "metric_key", ",", "optimizer", ",", "is_better_eval", ")", ":", "\n", "        ", "metric_value", "=", "list", "(", "eval_result", ".", "values", "(", ")", ")", "[", "0", "]", "[", "metric_key", "]", "\n", "self", ".", "_save_this_model", "(", "metric_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback._insert_into_ordered_save_models": [[1091, 1109], ["callback.SaveModelCallback._ordered_save_models.insert", "len", "callback.SaveModelCallback._ordered_save_models.pop", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], ["", "def", "_insert_into_ordered_save_models", "(", "self", ",", "pair", ")", ":", "\n", "# pair:(metric_value, model_name)", "\n", "# \u8fd4\u56desave\u7684\u6a21\u578bpair\u4e0e\u5220\u9664\u7684\u6a21\u578bpair. pair\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u662fmetric\u7684\u503c\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u6a21\u578b\u7684\u540d\u79f0", "\n", "        ", "index", "=", "-", "1", "\n", "for", "_pair", "in", "self", ".", "_ordered_save_models", ":", "\n", "            ", "if", "_pair", "[", "0", "]", ">=", "pair", "[", "0", "]", "and", "self", ".", "trainer", ".", "increase_better", ":", "\n", "                ", "break", "\n", "", "if", "not", "self", ".", "trainer", ".", "increase_better", "and", "_pair", "[", "0", "]", "<=", "pair", "[", "0", "]", ":", "\n", "                ", "break", "\n", "", "index", "+=", "1", "\n", "", "save_pair", "=", "None", "\n", "if", "len", "(", "self", ".", "_ordered_save_models", ")", "<", "self", ".", "top", "or", "(", "len", "(", "self", ".", "_ordered_save_models", ")", ">=", "self", ".", "top", "and", "index", "!=", "-", "1", ")", ":", "\n", "            ", "save_pair", "=", "pair", "\n", "self", ".", "_ordered_save_models", ".", "insert", "(", "index", "+", "1", ",", "pair", ")", "\n", "", "delete_pair", "=", "None", "\n", "if", "len", "(", "self", ".", "_ordered_save_models", ")", ">", "self", ".", "top", ":", "\n", "            ", "delete_pair", "=", "self", ".", "_ordered_save_models", ".", "pop", "(", "0", ")", "\n", "", "return", "save_pair", ",", "delete_pair", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback._save_this_model": [[1110, 1125], ["callback.SaveModelCallback._insert_into_ordered_save_models", "utils._save_model", "os.path.join", "os.path.exists", "_logger.logger.error", "os.remove", "_logger.logger.error"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback._insert_into_ordered_save_models", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._save_model"], ["", "def", "_save_this_model", "(", "self", ",", "metric_value", ")", ":", "\n", "        ", "name", "=", "\"epoch-{}_step-{}_{}-{:.6f}.pt\"", ".", "format", "(", "self", ".", "epoch", ",", "self", ".", "step", ",", "self", ".", "trainer", ".", "metric_key", ",", "metric_value", ")", "\n", "save_pair", ",", "delete_pair", "=", "self", ".", "_insert_into_ordered_save_models", "(", "(", "metric_value", ",", "name", ")", ")", "\n", "if", "save_pair", ":", "\n", "            ", "try", ":", "\n", "                ", "_save_model", "(", "self", ".", "model", ",", "model_name", "=", "name", ",", "save_dir", "=", "self", ".", "save_dir", ",", "only_param", "=", "self", ".", "only_param", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"The following exception:{e} happens when save model to {self.save_dir}.\"", ")", "\n", "", "", "if", "delete_pair", ":", "\n", "            ", "try", ":", "\n", "                ", "delete_model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "delete_pair", "[", "1", "]", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "delete_model_path", ")", ":", "\n", "                    ", "os", ".", "remove", "(", "delete_model_path", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "f\"Fail to delete model {name} at {self.save_dir} caused by exception:{e}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.SaveModelCallback.on_exception": [[1126, 1130], ["utils._save_model"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._save_model"], ["", "", "", "def", "on_exception", "(", "self", ",", "exception", ")", ":", "\n", "        ", "if", "self", ".", "save_on_exception", ":", "\n", "            ", "name", "=", "\"epoch-{}_step-{}_Exception-{}.pt\"", ".", "format", "(", "self", ".", "epoch", ",", "self", ".", "step", ",", "exception", ".", "__class__", ".", "__name__", ")", "\n", "_save_model", "(", "self", ".", "model", ",", "model_name", "=", "name", ",", "save_dir", "=", "self", ".", "save_dir", ",", "only_param", "=", "self", ".", "only_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.CallbackException.__init__": [[1137, 1143], ["BaseException.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "msg", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param str msg: Exception\u7684\u4fe1\u606f\u3002\n        \"\"\"", "\n", "super", "(", "CallbackException", ",", "self", ")", ".", "__init__", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.EarlyStopError.__init__": [[1151, 1153], ["callback.CallbackException.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "msg", ")", ":", "\n", "        ", "super", "(", "EarlyStopError", ",", "self", ")", ".", "__init__", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.EchoCallback.__init__": [[1160, 1164], ["callback.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "out", "=", "sys", ".", "stdout", ")", ":", "\n", "        ", "super", "(", "EchoCallback", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "out", "=", "out", "# deprecated", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.EchoCallback.__getattribute__": [[1165, 1169], ["item.startswith", "object.__getattribute__", "_logger.logger.info", "os.getpid"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback.EchoCallback.__getattribute__"], ["", "def", "__getattribute__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "item", ".", "startswith", "(", "'on_'", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'{}.{} has been called at pid: {}'", ".", "format", "(", "self", ".", "name", ",", "item", ",", "os", ".", "getpid", "(", ")", ")", ")", "\n", "", "return", "super", "(", "EchoCallback", ",", "self", ")", ".", "__getattribute__", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback.__init__": [[1172, 1183], ["callback.Callback.__init__", "tester.Tester", "callback._TesterCallback._parse_metric_key"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback._parse_metric_key"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "model", ",", "metrics", ",", "metric_key", "=", "None", ",", "batch_size", "=", "16", ",", "num_workers", "=", "None", ")", ":", "\n", "        ", "super", "(", "_TesterCallback", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tester", "=", "Tester", "(", "data", ",", "model", ",", "\n", "metrics", "=", "metrics", ",", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "verbose", "=", "0", ")", "\n", "if", "metric_key", "is", "not", "None", ":", "\n", "            ", "self", ".", "metric_key", ",", "self", ".", "increase_better", "=", "self", ".", "_parse_metric_key", "(", "metric_key", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "metric_key", "=", "None", "\n", "self", ".", "increase_better", "=", "True", "\n", "", "self", ".", "score", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback.on_valid_begin": [[1184, 1194], ["callback._TesterCallback.tester.test", "callback._TesterCallback.logger.info", "callback._TesterCallback.compare_better", "callback._TesterCallback.tester._format_eval_results"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester.test", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback.compare_better", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.tester.Tester._format_eval_results"], ["", "def", "on_valid_begin", "(", "self", ")", ":", "\n", "        ", "cur_score", "=", "self", ".", "tester", ".", "test", "(", ")", "\n", "eval_str", "=", "\"Evaluation at Epoch {}/{}. Step:{}/{}. - {}\"", ".", "format", "(", "\n", "self", ".", "epoch", ",", "self", ".", "n_epochs", ",", "self", ".", "step", ",", "self", ".", "n_steps", ",", "\n", "self", ".", "tester", ".", "_format_eval_results", "(", "cur_score", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "eval_str", ")", "\n", "is_better", "=", "self", ".", "compare_better", "(", "cur_score", ")", "\n", "if", "is_better", ":", "\n", "            ", "self", ".", "score", "=", "cur_score", "\n", "", "return", "cur_score", ",", "is_better", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback._get_score": [[1195, 1201], ["metric_dict.values"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_score", "(", "metric_dict", ",", "key", ")", ":", "\n", "        ", "for", "metric", "in", "metric_dict", ".", "values", "(", ")", ":", "\n", "            ", "if", "key", "in", "metric", ":", "\n", "                ", "return", "metric", "[", "key", "]", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback._parse_metric_key": [[1202, 1210], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_parse_metric_key", "(", "metric_key", ")", ":", "\n", "# parse metric_key", "\n", "# increase_better is True. It means the exp result gets better if the indicator increases.", "\n", "# It is true by default.", "\n", "        ", "increase_better", "=", "False", "if", "metric_key", "[", "0", "]", "==", "\"-\"", "else", "True", "\n", "metric_key", "=", "metric_key", "[", "1", ":", "]", "if", "metric_key", "[", "0", "]", "==", "\"+\"", "or", "metric_key", "[", "0", "]", "==", "\"-\"", "else", "metric_key", "\n", "return", "metric_key", ",", "increase_better", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback.compare_better": [[1211, 1226], ["callback._TesterCallback._get_score", "callback._TesterCallback._get_score", "callback._TesterCallback._parse_metric_key", "list", "[].keys", "list", "callback._TesterCallback.score.values"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback._get_score", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback._get_score", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._TesterCallback._parse_metric_key"], ["", "def", "compare_better", "(", "self", ",", "a", ")", ":", "\n", "        ", "if", "self", ".", "score", "is", "None", ":", "\n", "            ", "return", "True", "\n", "", "if", "self", ".", "metric_key", "is", "None", ":", "\n", "            ", "metric_key", "=", "list", "(", "list", "(", "self", ".", "score", ".", "values", "(", ")", ")", "[", "0", "]", ".", "keys", "(", ")", ")", "[", "0", "]", "\n", "self", ".", "metric_key", ",", "self", ".", "increase_better", "=", "self", ".", "_parse_metric_key", "(", "metric_key", ")", "\n", "", "k", "=", "self", ".", "metric_key", "\n", "score", "=", "self", ".", "_get_score", "(", "self", ".", "score", ",", "k", ")", "\n", "new_score", "=", "self", ".", "_get_score", "(", "a", ",", "k", ")", "\n", "if", "score", "is", "None", "or", "new_score", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "increase_better", ":", "\n", "            ", "return", "score", "<=", "new_score", "\n", "", "else", ":", "\n", "            ", "return", "score", ">=", "new_score", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.callback._transfer": [[302, 318], ["returns.append", "getattr"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], ["", "", "def", "_transfer", "(", "func", ")", ":", "\n", "    ", "r\"\"\"\u88c5\u9970\u5668\uff0c\u5c06\u5bf9CallbackManager\u7684\u8c03\u7528\u8f6c\u53d1\u5230\u5404\u4e2aCallback\u5b50\u7c7b.\n    \n    :param func:\n    :return:\n    \"\"\"", "\n", "\n", "def", "wrapper", "(", "manager", ",", "*", "arg", ")", ":", "\n", "        ", "returns", "=", "[", "]", "\n", "for", "callback", "in", "manager", ".", "callbacks", ":", "\n", "            ", "if", "callback", ".", "disabled", ":", "\n", "                ", "continue", "\n", "", "returns", ".", "append", "(", "getattr", "(", "callback", ",", "func", ".", "__name__", ")", "(", "*", "arg", ")", ")", "\n", "", "return", "returns", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.Optimizer.__init__": [[23, 33], ["RuntimeError", "hasattr", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model_params", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param model_params: a generator. E.g. ``model.parameters()`` for PyTorch models.\n        :param kwargs: additional parameters.\n        \"\"\"", "\n", "if", "model_params", "is", "not", "None", "and", "not", "hasattr", "(", "model_params", ",", "\"__next__\"", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"model parameters should be a generator, rather than {}.\"", ".", "format", "(", "type", "(", "model_params", ")", ")", ")", "\n", "", "self", ".", "model_params", "=", "model_params", "\n", "self", ".", "settings", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.Optimizer.construct_from_pytorch": [[34, 36], ["None"], "methods", ["None"], ["", "def", "construct_from_pytorch", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.Optimizer._get_require_grads_param": [[37, 46], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_require_grads_param", "(", "params", ")", ":", "\n", "        ", "r\"\"\"\n        \u5c06params\u4e2d\u4e0d\u9700\u8981gradient\u7684\u5220\u9664\n        \n        :param iterable params: parameters\n        :return: list(nn.Parameters)\n        \"\"\"", "\n", "return", "[", "param", "for", "param", "in", "params", "if", "param", ".", "requires_grad", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.NullOptimizer.__init__": [[53, 55], ["optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.NullOptimizer.construct_from_pytorch": [[56, 58], ["None"], "methods", ["None"], ["", "def", "construct_from_pytorch", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.NullOptimizer.__getattr__": [[59, 64], ["None"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "def", "pass_func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "return", "pass_func", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.SGD.__init__": [[71, 80], ["optimizer.Optimizer.__init__", "isinstance", "TypeError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "lr", "=", "0.001", ",", "momentum", "=", "0", ",", "model_params", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        :param float lr: learning rate. Default: 0.01\n        :param float momentum: momentum. Default: 0\n        :param model_params: a generator. E.g. ``model.parameters()`` for PyTorch models.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "lr", ",", "float", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"learning rate has to be float.\"", ")", "\n", "", "super", "(", "SGD", ",", "self", ")", ".", "__init__", "(", "model_params", ",", "lr", "=", "lr", ",", "momentum", "=", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.SGD.construct_from_pytorch": [[81, 87], ["torch.optim.SGD", "torch.optim.SGD", "optimizer.SGD._get_require_grads_param", "optimizer.SGD._get_require_grads_param"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.Optimizer._get_require_grads_param", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.Optimizer._get_require_grads_param"], ["", "def", "construct_from_pytorch", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "if", "self", ".", "model_params", "is", "None", ":", "\n", "# careful! generator cannot be assigned.", "\n", "            ", "return", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "_get_require_grads_param", "(", "model_params", ")", ",", "**", "self", ".", "settings", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "_get_require_grads_param", "(", "self", ".", "model_params", ")", ",", "**", "self", ".", "settings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.Adam.__init__": [[94, 107], ["optimizer.Optimizer.__init__", "isinstance", "TypeError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "lr", "=", "0.001", ",", "weight_decay", "=", "0", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "amsgrad", "=", "False", ",", "model_params", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param float lr: learning rate\n        :param float weight_decay:\n        :param eps:\n        :param amsgrad:\n        :param model_params: a generator. E.g. ``model.parameters()`` for PyTorch models.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "lr", ",", "float", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"learning rate has to be float.\"", ")", "\n", "", "super", "(", "Adam", ",", "self", ")", ".", "__init__", "(", "model_params", ",", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "amsgrad", "=", "amsgrad", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.Adam.construct_from_pytorch": [[108, 114], ["torch.optim.Adam", "torch.optim.Adam", "optimizer.Adam._get_require_grads_param", "optimizer.Adam._get_require_grads_param"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.Optimizer._get_require_grads_param", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.Optimizer._get_require_grads_param"], ["", "def", "construct_from_pytorch", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "if", "self", ".", "model_params", "is", "None", ":", "\n", "# careful! generator cannot be assigned.", "\n", "            ", "return", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "_get_require_grads_param", "(", "model_params", ")", ",", "**", "self", ".", "settings", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "_get_require_grads_param", "(", "self", ".", "model_params", ")", ",", "**", "self", ".", "settings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.AdamW.__init__": [[134, 160], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "1e-2", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        :param lr (float, optional): learning rate (default: 1e-3)\n        :param betas (Tuple[float, float], optional): coefficients used for computing\n            running averages of gradient and its square (default: (0.9, 0.99))\n        :param eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-8)\n        :param weight_decay (float, optional): weight decay coefficient (default: 1e-2)\n            algorithm from the paper `On the Convergence of Adam and Beyond`_\n            (default: False)\n        \"\"\"", "\n", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.AdamW.__setstate__": [[161, 165], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.Option.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'amsgrad'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.optimizer.AdamW.step": [[166, 228], ["closure", "p.data.mul_", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "r\"\"\"Performs a single optimization step.\n\n        :param closure: (callable, optional) A closure that reevaluates the model\n            and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "# Perform stepweight decay", "\n", "", "p", ".", "data", ".", "mul_", "(", "1", "-", "group", "[", "'lr'", "]", "*", "group", "[", "'weight_decay'", "]", ")", "\n", "\n", "# Perform optimization step", "\n", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.__init__": [[39, 55], ["TypeError", "hasattr", "utils._get_func_signature", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature"], ["\n", "if", "isinstance", "(", "init_embed", ",", "tuple", ")", ":", "\n", "        ", "res", "=", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "init_embed", "[", "0", "]", ",", "embedding_dim", "=", "init_embed", "[", "1", "]", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "res", ".", "weight", ".", "data", ",", "a", "=", "-", "np", ".", "sqrt", "(", "3", "/", "res", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ")", ",", "\n", "b", "=", "np", ".", "sqrt", "(", "3", "/", "res", ".", "weight", ".", "data", ".", "size", "(", "1", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "res", "=", "init_embed", "\n", "", "elif", "isinstance", "(", "init_embed", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "res", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "init_embed", ",", "freeze", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.add_pred_target": [[56, 84], ["zip", "utils.ConfusionMatrix.predcount.get", "utils.ConfusionMatrix.targetcount.get", "utils.ConfusionMatrix.confusiondict[].get"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], ["", "elif", "isinstance", "(", "init_embed", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "init_embed", "=", "torch", ".", "tensor", "(", "init_embed", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "res", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "init_embed", ",", "freeze", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'invalid init_embed type: {}'", ".", "format", "(", "(", "type", "(", "init_embed", ")", ")", ")", ")", "\n", "", "return", "res", "\n", "\n", "\n", "", "def", "get_sinusoid_encoding_table", "(", "n_position", ",", "d_hid", ",", "padding_idx", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    sinusoid\u7684embedding\uff0c\u5176\u4e2dposition\u7684\u8868\u793a\u4e2d\uff0c\u5076\u6570\u7ef4(0,2,4,...)\u662fsin, \u5947\u6570(1,3,5...)\u662fcos\n\n    :param int n_position: \u4e00\u5171\u591a\u5c11\u4e2aposition\n    :param int d_hid: \u591a\u5c11\u7ef4\u5ea6\uff0c\u9700\u8981\u4e3a\u5076\u6570\n    :param padding_idx:\n    :return: torch.FloatTensor, shape\u4e3an_position x d_hid\n    \"\"\"", "\n", "\n", "def", "cal_angle", "(", "position", ",", "hid_idx", ")", ":", "\n", "        ", "return", "position", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_idx", "//", "2", ")", "/", "d_hid", ")", "\n", "\n", "", "def", "get_posi_angle_vec", "(", "position", ")", ":", "\n", "        ", "return", "[", "cal_angle", "(", "position", ",", "hid_j", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "[", "get_posi_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_position", ")", "]", ")", "\n", "\n", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "sinusoid_table", "[", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "sinusoid_table", "[", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.clear": [[85, 93], ["None"], "methods", ["None"], ["\n", "if", "padding_idx", "is", "not", "None", ":", "\n", "# zero vector for padding dimension", "\n", "        ", "sinusoid_table", "[", "padding_idx", "]", "=", "0.", "\n", "\n", "", "return", "torch", ".", "FloatTensor", "(", "sinusoid_table", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.get_result": [[94, 125], ["sorted", "len", "zip", "row2idx.keys", "output.append", "list", "range", "utils.ConfusionMatrix.confusiondict.get", "output.append", "utils.ConfusionMatrix.targetcount.get", "sum", "set().union", "utils.ConfusionMatrix.confusiondict[].items", "row2idx.keys", "set", "range", "sum", "set", "utils.ConfusionMatrix.predcount.keys", "utils.ConfusionMatrix.targetcount.keys"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.get_percent": [[126, 143], ["utils.ConfusionMatrix.get_result", "numpy.around", "numpy.array.tolist", "numpy.array", "tmp[].reshape", "numpy.isnan", "numpy.array", "len", "tmp[].reshape", "len"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.get_result"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.get_aligned_table": [[144, 213], ["sorted", "len", "dict", "zip", "str", "output.append", "output.append", "row2idx.keys", "output.append", "list", "range", "len", "output.append", "max", "range", "set().union", "max", "range", "print", "output.insert", "len", "set", "str", "str", "range", "len", "set", "utils.ConfusionMatrix.predcount.keys", "row2idx.keys", "len", "str", "len", "utils.ConfusionMatrix.targetcount.keys", "utils.ConfusionMatrix.vocab.to_word", "str", "len", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.to_word"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.__repr__": [[214, 233], ["utils.ConfusionMatrix.get_result", "utils.ConfusionMatrix.get_aligned_table", "str", "utils.ConfusionMatrix.get_percent", "utils.ConfusionMatrix.get_percent", "utils.ConfusionMatrix.get_aligned_table", "utils.ConfusionMatrix.get_aligned_table"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.get_result", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.get_aligned_table", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.get_percent", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.get_percent", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.get_aligned_table", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.ConfusionMatrix.get_aligned_table"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.Option.__getattr__": [[239, 244], ["utils.Option.__getitem__", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.__getitem__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.Option.__setattr__": [[245, 249], ["utils.Option.__setitem__", "key.startswith", "key.endswith", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.__setitem__"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.Option.__delattr__": [[250, 255], ["utils.Option.pop", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.Option.__getstate__": [[256, 258], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.Option.__setstate__": [[259, 261], ["utils.Option.update"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._CheckError.__init__": [[657, 673], ["Exception.__init__", "errs.append", "errs.append", "errs.append", "errs.append"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.__init__": [[874, 876], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.write": [[877, 879], ["utils._pseudo_tqdm.logger.info"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.set_postfix_str": [[880, 882], ["utils._pseudo_tqdm.logger.info"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.__getattr__": [[883, 888], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.__enter__": [[889, 891], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._pseudo_tqdm.__exit__": [[892, 894], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._prepare_cache_filepath": [[263, 275], ["os.path.abspath", "os.path.isdir", "os.path.dirname", "RuntimeError", "os.path.exists", "os.makedirs"], "function", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.cache_results": [[277, 371], ["inspect.signature", "inspect.signature.parameters.items", "RuntimeError", "kwargs.pop", "isinstance", "kwargs.pop", "isinstance", "kwargs.pop", "isinstance", "os.path.exists", "func", "utils._prepare_cache_filepath", "_logger.logger.info", "open", "_pickle.load", "_logger.logger.info", "RuntimeError", "open", "_pickle.dump"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.pop", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._prepare_cache_filepath", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.load"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._save_model": [[373, 396], ["os.path.join", "_parallel_utils._model_contains_inner_module", "os.path.isdir", "os.makedirs", "model.state_dict", "torch.save", "torch.save", "utils._get_model_device", "model.cpu", "torch.save", "torch.save", "model.to", "state_dict[].cpu"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core._parallel_utils._model_contains_inner_module", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_model_device", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.save", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._move_model_to_device": [[398, 467], ["isinstance", "isinstance", "nn.DataParallel.to", "isinstance", "RuntimeError", "torch.device", "torch.device", "isinstance", "nn.DataParallel.cuda", "ValueError", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.device", "torch.device", "isinstance", "torch.cuda.is_available", "torch.cuda.is_available", "isinstance", "isinstance", "isinstance", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "set", "torch.device", "torch.device", "TypeError", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "len", "len", "len", "len", "torch.DataParallel", "type", "list", "set"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_model_device": [[469, 484], ["isinstance", "list", "model.parameters", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._build_args": [[486, 505], ["inspect.getfullargspec", "set", "output.update", "len", "len", "zip", "kwargs.items"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._map_args": [[507, 520], ["kwargs.items", "maps.keys", "isinstance", "output.update", "output.update", "output.keys"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_arg_list": [[522, 536], ["callable", "inspect.getfullargspec", "len", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_arg_dict_list": [[539, 568], ["isinstance", "inspect.getfullargspec", "set", "set", "collections.Counter", "set", "list", "list", "_CheckRes", "callable", "isinstance", "isinstance", "len", "len", "collections.Counter.update", "collections.Counter.keys", "len", "arg_dict.keys", "collections.Counter.items", "list", "list"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.update", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature": [[570, 609], ["inspect.ismethod", "inspect.signature", "str", "inspect.isfunction", "len", "inspect.signature", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._is_function_or_method": [[611, 620], ["inspect.ismethod", "inspect.isfunction"], "function", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_function_or_method": [[622, 625], ["utils._is_function_or_method", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._is_function_or_method"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._move_dict_value_to_device": [[627, 649], ["isinstance", "TypeError", "isinstance", "torch.cuda.is_available", "torch.cuda.is_available", "arg.items", "TypeError", "isinstance", "type", "value.to"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_loss_evaluate": [[680, 769], ["func_signature.split", "errs.append", "errs.append", "suggestions.append", "len", "errs.extend", "len", "errs.insert", "errs.append", "errs.append", "NameError", "unuseds.append", "unuseds.append", "re.findall", "errs.extend", "len", "enumerate", "warnings.warn", "_unused_field.append", "_unused_param.append", "_miss_.split", "len", "unmapped_missing.append", "suggestions.append", "suggestions.append", "unmapped_missing.append", "mapped_missing.append", "dataset.collater.is_empty", "list", "list", "func_signature.split", "target_dict.keys", "pred_dict.keys", "input_func_map.get"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.is_empty", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.get"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_forward_error": [[771, 823], ["utils._check_arg_dict_list", "utils._get_func_signature", "errs.append", "len", "errs.insert", "NameError", "suggestions.append", "suggestions.append", "len", "errs.extend", "len", "enumerate", "len", "warnings.warn", "_miss_in_dataset.append", "_miss_out_dataset.append", "dataset.collater.is_empty", "errs.extend"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_arg_dict_list", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.collate_fn.Collater.is_empty"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask": [[825, 867], ["isinstance", "numpy.tile", "isinstance", "len", "int", "int", "numpy.arange", "seq_len.reshape", "seq_len.size", "torch.arange().expand().to", "torch.arange().expand().to", "torch.arange().expand().to.lt", "TypeError", "numpy.shape", "len", "seq_len.max", "len", "seq_len.dim", "int", "seq_len.max().long", "seq_len.unsqueeze", "numpy.shape", "torch.arange().expand", "torch.arange().expand", "seq_len.dim", "seq_len.max", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.to", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.iob2": [[896, 918], ["enumerate", "tag.split", "TypeError", "len"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.iob2bioes": [[920, 945], ["enumerate", "new_tags.append", "tag.split", "new_tags.append", "new_tags.append", "TypeError", "len", "tag.replace", "new_tags.append", "new_tags.append", "tags[].split", "len", "tag.replace", "tags[].split"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.split"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._is_iterable": [[947, 954], ["iter"], "function", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.get_seq_len": [[956, 965], ["words.ne", "words.ne.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.pretty_table_printer": [[967, 1006], ["prettytable.PrettyTable", "os.get_terminal_size", "list", "len", "type", "dataset_or_ins.field_arrays.keys", "prettytable.PrettyTable.add_row", "list", "len", "prettytable.PrettyTable.add_row", "Exception", "prettytable.PrettyTable.add_row", "type", "dataset_or_ins.fields.keys", "utils.sub_column", "utils.sub_column", "range"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.sub_column", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.sub_column"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.sub_column": [[1008, 1030], ["max", "str", "int", "len", "ord"], "function", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.int"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_fp16": [[1032, 1037], ["ImportError", "RuntimeError"], "function", ["None"], []], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase.__init__": [[42, 45], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_param_map", "=", "{", "}", "# key\u662ffun\u7684\u53c2\u6570\uff0cvalue\u662f\u4ee5\u8be5\u503c\u4ece\u4f20\u5165\u7684dict\u53d6\u51favalue", "\n", "self", ".", "_checked", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase.param_map": [[46, 54], ["len", "inspect.getfullargspec"], "methods", ["None"], ["", "@", "property", "\n", "def", "param_map", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_param_map", ")", "==", "0", ":", "# \u5982\u679c\u4e3a\u7a7a\u8bf4\u660e\u8fd8\u6ca1\u6709\u521d\u59cb\u5316", "\n", "            ", "func_spect", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "get_loss", ")", "\n", "func_args", "=", "[", "arg", "for", "arg", "in", "func_spect", ".", "args", "if", "arg", "!=", "'self'", "]", "\n", "for", "arg", "in", "func_args", ":", "\n", "                ", "self", ".", "_param_map", "[", "arg", "]", "=", "arg", "\n", "", "", "return", "self", ".", "_param_map", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase.get_loss": [[55, 63], ["None"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\n        :param args:\n        :param kwargs:\n        :return: torch.Tensor\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map": [[64, 104], ["collections.defaultdict", "kwargs.items", "collections.defaultdict.items", "inspect.getfullargspec", "losses.LossBase._param_map.items", "key_map.items", "value_counter[].add", "isinstance", "TypeError", "value_counter[].add", "isinstance", "TypeError", "len", "ValueError", "NameError", "isinstance", "TypeError", "isinstance", "TypeError", "type", "type", "utils._get_func_signature", "type", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.vocabulary.Vocabulary.add", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature"], ["", "def", "_init_param_map", "(", "self", ",", "key_map", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\u68c0\u67e5key_map\u548c\u5176\u4ed6\u53c2\u6570map\uff0c\u5e76\u5c06\u8fd9\u4e9b\u6620\u5c04\u5173\u7cfb\u6dfb\u52a0\u5230self._param_map\n\n        :param dict key_map: \u8868\u793akey\u7684\u6620\u5c04\u5173\u7cfb\n        :param kwargs: key word args\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a\u7684\u952e-\u503c\u5bf9\u90fd\u4f1a\u88ab\u6784\u9020\u6210\u6620\u5c04\u5173\u7cfb\n        :return: None\n        \"\"\"", "\n", "value_counter", "=", "defaultdict", "(", "set", ")", "\n", "if", "key_map", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "key_map", ",", "dict", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"key_map must be `dict`, got {}.\"", ".", "format", "(", "type", "(", "key_map", ")", ")", ")", "\n", "", "for", "key", ",", "value", "in", "key_map", ".", "items", "(", ")", ":", "\n", "                ", "if", "value", "is", "None", ":", "\n", "                    ", "self", ".", "_param_map", "[", "key", "]", "=", "key", "\n", "continue", "\n", "", "if", "not", "isinstance", "(", "key", ",", "str", ")", ":", "\n", "                    ", "raise", "TypeError", "(", "f\"key in key_map must be `str`, not `{type(key)}`.\"", ")", "\n", "", "if", "not", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "                    ", "raise", "TypeError", "(", "f\"value in key_map must be `str`, not `{type(value)}`.\"", ")", "\n", "", "self", ".", "_param_map", "[", "key", "]", "=", "value", "\n", "value_counter", "[", "value", "]", ".", "add", "(", "key", ")", "\n", "", "", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "value", "is", "None", ":", "\n", "                ", "self", ".", "_param_map", "[", "key", "]", "=", "key", "\n", "continue", "\n", "", "if", "not", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "                ", "raise", "TypeError", "(", "f\"in {key}={value}, value must be `str`, not `{type(value)}`.\"", ")", "\n", "", "self", ".", "_param_map", "[", "key", "]", "=", "value", "\n", "value_counter", "[", "value", "]", ".", "add", "(", "key", ")", "\n", "", "for", "value", ",", "key_set", "in", "value_counter", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "key_set", ")", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "f\"Several parameters:{key_set} are provided with one output {value}.\"", ")", "\n", "\n", "# check consistence between signature and _param_map", "\n", "", "", "func_spect", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "get_loss", ")", "\n", "func_args", "=", "[", "arg", "for", "arg", "in", "func_spect", ".", "args", "if", "arg", "!=", "'self'", "]", "\n", "for", "func_param", ",", "input_param", "in", "self", ".", "_param_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "func_param", "not", "in", "func_args", ":", "\n", "                ", "raise", "NameError", "(", "\n", "f\"Parameter `{func_param}` is not in {_get_func_signature(self.get_loss)}. Please check the \"", "\n", "f\"initialization parameters, or change its signature.\"", ")", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase.__call__": [[111, 175], ["losses.LossBase._reverse_param_map.items", "utils._build_args", "losses.LossBase.get_loss", "inspect.getfullargspec", "set", "losses.LossBase._param_map.items", "losses.LossBase._reverse_param_map.items", "utils._check_arg_dict_list", "list", "enumerate", "utils._CheckRes", "utils._CheckError", "NameError", "losses.LossBase._param_map.items", "duplicated.append", "utils._get_func_signature", "utils._get_func_signature"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._build_args", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.get_loss", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_arg_dict_list", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.instance.Instance.items", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.dataset.DataSet.append", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature"], ["", "", "", "def", "__call__", "(", "self", ",", "pred_dict", ",", "target_dict", ",", "check", "=", "False", ")", ":", "\n", "        ", "r\"\"\"\n        :param dict pred_dict: \u6a21\u578b\u7684forward\u51fd\u6570\u8fd4\u56de\u7684dict\n        :param dict target_dict: DataSet.batch_y\u91cc\u7684\u952e-\u503c\u5bf9\u6240\u7ec4\u6210\u7684dict\n        :param Boolean check: \u6bcf\u4e00\u6b21\u6267\u884c\u6620\u5c04\u51fd\u6570\u7684\u65f6\u5019\u662f\u5426\u68c0\u67e5\u6620\u5c04\u8868\uff0c\u9ed8\u8ba4\u4e3a\u4e0d\u68c0\u67e5\n        :return:\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "_checked", ":", "\n", "# 1. check consistence between signature and _param_map", "\n", "            ", "func_spect", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "get_loss", ")", "\n", "func_args", "=", "set", "(", "[", "arg", "for", "arg", "in", "func_spect", ".", "args", "if", "arg", "!=", "'self'", "]", ")", "\n", "for", "func_arg", ",", "input_arg", "in", "self", ".", "_param_map", ".", "items", "(", ")", ":", "\n", "                ", "if", "func_arg", "not", "in", "func_args", ":", "\n", "                    ", "raise", "NameError", "(", "f\"`{func_arg}` not in {_get_func_signature(self.get_loss)}.\"", ")", "\n", "\n", "# 2. only part of the _param_map are passed, left are not", "\n", "", "", "for", "arg", "in", "func_args", ":", "\n", "                ", "if", "arg", "not", "in", "self", ".", "_param_map", ":", "\n", "                    ", "self", ".", "_param_map", "[", "arg", "]", "=", "arg", "# This param does not need mapping.", "\n", "", "", "self", ".", "_evaluate_args", "=", "func_args", "\n", "self", ".", "_reverse_param_map", "=", "{", "input_arg", ":", "func_arg", "for", "func_arg", ",", "input_arg", "in", "self", ".", "_param_map", ".", "items", "(", ")", "}", "\n", "\n", "", "mapped_pred_dict", "=", "{", "}", "\n", "mapped_target_dict", "=", "{", "}", "\n", "for", "input_arg", ",", "mapped_arg", "in", "self", ".", "_reverse_param_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "input_arg", "in", "pred_dict", ":", "\n", "                ", "mapped_pred_dict", "[", "mapped_arg", "]", "=", "pred_dict", "[", "input_arg", "]", "\n", "", "if", "input_arg", "in", "target_dict", ":", "\n", "                ", "mapped_target_dict", "[", "mapped_arg", "]", "=", "target_dict", "[", "input_arg", "]", "\n", "\n", "# missing", "\n", "", "", "if", "not", "self", ".", "_checked", ":", "\n", "            ", "duplicated", "=", "[", "]", "\n", "for", "input_arg", ",", "mapped_arg", "in", "self", ".", "_reverse_param_map", ".", "items", "(", ")", ":", "\n", "                ", "if", "input_arg", "in", "pred_dict", "and", "input_arg", "in", "target_dict", ":", "\n", "                    ", "duplicated", ".", "append", "(", "input_arg", ")", "\n", "", "", "check_res", "=", "_check_arg_dict_list", "(", "self", ".", "get_loss", ",", "[", "mapped_pred_dict", ",", "mapped_target_dict", "]", ")", "\n", "# replace missing.", "\n", "missing", "=", "check_res", ".", "missing", "\n", "replaced_missing", "=", "list", "(", "missing", ")", "\n", "for", "idx", ",", "func_arg", "in", "enumerate", "(", "missing", ")", ":", "\n", "# Don't delete `` in this information, nor add ``", "\n", "                ", "replaced_missing", "[", "idx", "]", "=", "f\"{self._param_map[func_arg]}\"", "+", "f\"(assign to `{func_arg}` \"", "f\"in `{self.__class__.__name__}`)\"", "\n", "\n", "", "check_res", "=", "_CheckRes", "(", "missing", "=", "replaced_missing", ",", "\n", "unused", "=", "check_res", ".", "unused", ",", "\n", "duplicated", "=", "duplicated", ",", "\n", "required", "=", "check_res", ".", "required", ",", "\n", "all_needed", "=", "check_res", ".", "all_needed", ",", "\n", "varargs", "=", "check_res", ".", "varargs", ")", "\n", "\n", "if", "check_res", ".", "missing", "or", "check_res", ".", "duplicated", ":", "\n", "                ", "raise", "_CheckError", "(", "check_res", "=", "check_res", ",", "\n", "func_signature", "=", "_get_func_signature", "(", "self", ".", "get_loss", ")", ")", "\n", "", "self", ".", "_checked", "=", "True", "\n", "\n", "", "refined_args", "=", "_build_args", "(", "self", ".", "get_loss", ",", "**", "mapped_pred_dict", ",", "**", "mapped_target_dict", ")", "\n", "\n", "loss", "=", "self", ".", "get_loss", "(", "**", "refined_args", ")", "\n", "self", ".", "_checked", "=", "True", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossFunc.__init__": [[197, 206], ["losses.LossBase.__init__", "utils._check_function_or_method", "losses.LossFunc._init_param_map", "isinstance", "RuntimeError", "type", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._check_function_or_method", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map"], ["def", "__init__", "(", "self", ",", "func", ",", "key_map", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "LossFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "_check_function_or_method", "(", "func", ")", "\n", "self", ".", "get_loss", "=", "func", "\n", "if", "key_map", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "key_map", ",", "dict", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Loss error: key_map except a {type({})} but got a {type(key_map)}\"", ")", "\n", "", "", "self", ".", "_init_param_map", "(", "key_map", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CrossEntropyLoss.__init__": [[229, 236], ["losses.LossBase.__init__", "losses.CrossEntropyLoss._init_param_map"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map"], ["def", "__init__", "(", "self", ",", "pred", "=", "None", ",", "target", "=", "None", ",", "seq_len", "=", "None", ",", "class_in_dim", "=", "-", "1", ",", "padding_idx", "=", "-", "100", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_param_map", "(", "pred", "=", "pred", ",", "target", "=", "target", ",", "seq_len", "=", "seq_len", ")", "\n", "self", ".", "padding_idx", "=", "padding_idx", "\n", "assert", "reduction", "in", "(", "'mean'", ",", "'sum'", ",", "'none'", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "class_in_dim", "=", "class_in_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CrossEntropyLoss.get_loss": [[237, 253], ["torch.cross_entropy", "torch.cross_entropy", "utils.seq_len_to_mask().eq", "target.reshape.reshape.masked_fill", "pred.transpose.transpose.dim", "pred.transpose.transpose.reshape", "target.reshape.reshape.reshape", "target.reshape.reshape.dim", "pred.transpose.transpose.transpose", "pred.transpose.transpose.size", "utils.seq_len_to_mask", "pred.transpose.transpose.size", "target.reshape.reshape.size", "pred.transpose.transpose.transpose", "target.reshape.reshape.size"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "get_loss", "(", "self", ",", "pred", ",", "target", ",", "seq_len", "=", "None", ")", ":", "\n", "        ", "if", "seq_len", "is", "not", "None", "and", "target", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "mask", "=", "seq_len_to_mask", "(", "seq_len", ",", "max_len", "=", "target", ".", "size", "(", "1", ")", ")", ".", "eq", "(", "False", ")", "\n", "target", "=", "target", ".", "masked_fill", "(", "mask", ",", "self", ".", "padding_idx", ")", "\n", "\n", "", "if", "pred", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "if", "self", ".", "class_in_dim", "==", "-", "1", ":", "\n", "                ", "if", "pred", ".", "size", "(", "1", ")", "!=", "target", ".", "size", "(", "1", ")", ":", "# \u6709\u53ef\u80fd\u987a\u5e8f\u66ff\u6362\u4e86", "\n", "                    ", "pred", "=", "pred", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "", "else", ":", "\n", "                ", "pred", "=", "pred", ".", "transpose", "(", "-", "1", ",", "self", ".", "class_in_dim", ")", "\n", "", "pred", "=", "pred", ".", "reshape", "(", "-", "1", ",", "pred", ".", "size", "(", "-", "1", ")", ")", "\n", "target", "=", "target", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "", "return", "F", ".", "cross_entropy", "(", "input", "=", "pred", ",", "target", "=", "target", ",", "\n", "ignore_index", "=", "self", ".", "padding_idx", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.L1Loss.__init__": [[265, 270], ["losses.LossBase.__init__", "losses.L1Loss._init_param_map"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map"], ["def", "__init__", "(", "self", ",", "pred", "=", "None", ",", "target", "=", "None", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "L1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_param_map", "(", "pred", "=", "pred", ",", "target", "=", "target", ")", "\n", "assert", "reduction", "in", "(", "'mean'", ",", "'sum'", ",", "'none'", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.L1Loss.get_loss": [[271, 273], ["torch.l1_loss", "torch.l1_loss"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "l1_loss", "(", "input", "=", "pred", ",", "target", "=", "target", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.MSELoss.__init__": [[285, 290], ["losses.LossBase.__init__", "losses.MSELoss._init_param_map"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map"], ["def", "__init__", "(", "self", ",", "pred", "=", "None", ",", "target", "=", "None", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "MSELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_param_map", "(", "pred", "=", "pred", ",", "target", "=", "target", ")", "\n", "assert", "reduction", "in", "(", "'mean'", ",", "'sum'", ",", "'none'", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.MSELoss.get_loss": [[291, 293], ["torch.mse_loss", "torch.mse_loss"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "mse_loss", "(", "input", "=", "pred", ",", "target", "=", "target", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.BCELoss.__init__": [[304, 309], ["losses.LossBase.__init__", "losses.BCELoss._init_param_map"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map"], ["def", "__init__", "(", "self", ",", "pred", "=", "None", ",", "target", "=", "None", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "BCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_param_map", "(", "pred", "=", "pred", ",", "target", "=", "target", ")", "\n", "assert", "reduction", "in", "(", "'mean'", ",", "'sum'", ",", "'none'", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.BCELoss.get_loss": [[310, 312], ["torch.binary_cross_entropy", "torch.binary_cross_entropy"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "binary_cross_entropy", "(", "input", "=", "pred", ",", "target", "=", "target", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.NLLLoss.__init__": [[319, 333], ["losses.LossBase.__init__", "losses.NLLLoss._init_param_map"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map"], ["def", "__init__", "(", "self", ",", "pred", "=", "None", ",", "target", "=", "None", ",", "ignore_idx", "=", "-", "100", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param pred: \u53c2\u6570\u6620\u5c04\u8868\u4e2d `pred` \u7684\u6620\u5c04\u5173\u7cfb\uff0cNone\u8868\u793a\u6620\u5c04\u5173\u7cfb\u4e3a `pred` -> `pred`\n        :param target: \u53c2\u6570\u6620\u5c04\u8868\u4e2d `target` \u7684\u6620\u5c04\u5173\u7cfb\uff0cNone\u8868\u793a\u6620\u5c04\u5173\u7cfb\u4e3a `target` -> `target`\n        :param ignore_idx: ignore\u7684index\uff0c\u5728\u8ba1\u7b97loss\u65f6\u5c06\u5ffd\u7565target\u4e2d\u6807\u53f7\u4e3aignore_idx\u7684\u5185\u5bb9, \u53ef\u4ee5\u901a\u8fc7\u8be5\u503c\u4ee3\u66ff\n            \u4f20\u5165seq_len.\n        :param str reduction: \u652f\u6301 `mean` \uff0c`sum` \u548c `none` .\n        \"\"\"", "\n", "super", "(", "NLLLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_param_map", "(", "pred", "=", "pred", ",", "target", "=", "target", ")", "\n", "assert", "reduction", "in", "(", "'mean'", ",", "'sum'", ",", "'none'", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "ignore_idx", "=", "ignore_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.NLLLoss.get_loss": [[334, 336], ["torch.nll_loss", "torch.nll_loss"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "nll_loss", "(", "input", "=", "pred", ",", "target", "=", "target", ",", "ignore_index", "=", "self", ".", "ignore_idx", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossInForward.__init__": [[343, 352], ["losses.LossBase.__init__", "isinstance", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__"], ["def", "__init__", "(", "self", ",", "loss_key", "=", "Const", ".", "LOSS", ")", ":", "\n", "        ", "r\"\"\"\n        \n        :param str loss_key: \u5728forward\u51fd\u6570\u4e2dloss\u7684\u952e\u540d\uff0c\u9ed8\u8ba4\u4e3aloss\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "loss_key", ",", "str", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f\"Only str allowed for loss_key, got {type(loss_key)}.\"", ")", "\n", "", "self", ".", "loss_key", "=", "loss_key", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossInForward.get_loss": [[353, 364], ["utils._CheckRes", "utils._CheckError", "utils._get_func_signature"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils._get_func_signature"], ["", "def", "get_loss", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "loss_key", "not", "in", "kwargs", ":", "\n", "            ", "check_res", "=", "_CheckRes", "(", "\n", "missing", "=", "[", "self", ".", "loss_key", "+", "f\"(assign to `{self.loss_key}` in `{self.__class__.__name__}`\"", "]", ",", "\n", "unused", "=", "[", "]", ",", "\n", "duplicated", "=", "[", "]", ",", "\n", "required", "=", "[", "]", ",", "\n", "all_needed", "=", "[", "]", ",", "\n", "varargs", "=", "[", "]", ")", "\n", "raise", "_CheckError", "(", "check_res", "=", "check_res", ",", "func_signature", "=", "_get_func_signature", "(", "self", ".", "get_loss", ")", ")", "\n", "", "return", "kwargs", "[", "self", ".", "loss_key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossInForward.__call__": [[365, 376], ["losses.LossInForward.get_loss", "isinstance", "isinstance", "TypeError", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "losses.LossInForward.view().size", "len", "losses.LossInForward.size", "losses.LossInForward.view", "type"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.get_loss", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size"], ["", "def", "__call__", "(", "self", ",", "pred_dict", ",", "target_dict", ",", "check", "=", "False", ")", ":", "\n", "\n", "        ", "loss", "=", "self", ".", "get_loss", "(", "**", "pred_dict", ")", "\n", "\n", "if", "not", "(", "isinstance", "(", "loss", ",", "torch", ".", "Tensor", ")", "and", "len", "(", "loss", ".", "size", "(", ")", ")", "==", "0", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "loss", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "raise", "TypeError", "(", "f\"Loss excepted to be a torch.Tensor, got {type(loss)}\"", ")", "\n", "", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "(", "loss", ".", "view", "(", "-", "1", ")", ")", ".", "size", "(", "0", ")", "\n", "# raise RuntimeError(f\"The size of loss excepts to be torch.Size([]), got {loss.size()}\")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__": [[383, 392], ["losses.LossBase.__init__", "losses.CMRC2018Loss._init_param_map"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.__init__", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.LossBase._init_param_map"], ["def", "__init__", "(", "self", ",", "target_start", "=", "None", ",", "target_end", "=", "None", ",", "context_len", "=", "None", ",", "pred_start", "=", "None", ",", "pred_end", "=", "None", ",", "\n", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "reduction", "in", "(", "'mean'", ",", "'sum'", ")", "\n", "\n", "self", ".", "_init_param_map", "(", "target_start", "=", "target_start", ",", "target_end", "=", "target_end", ",", "context_len", "=", "context_len", ",", "\n", "pred_start", "=", "pred_start", ",", "pred_end", "=", "pred_end", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses.CMRC2018Loss.get_loss": [[393, 418], ["pred_end.masked_fill.masked_fill.size", "utils.seq_len_to_mask().eq", "pred_start.masked_fill.masked_fill.masked_fill", "pred_end.masked_fill.masked_fill.masked_fill", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "float", "float", "utils.seq_len_to_mask"], "methods", ["home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.embeddings.embedding.TokenEmbedding.size", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.field.FieldArray.float", "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.utils.seq_len_to_mask"], ["", "def", "get_loss", "(", "self", ",", "target_start", ",", "target_end", ",", "context_len", ",", "pred_start", ",", "pred_end", ")", ":", "\n", "        ", "r\"\"\"\n\n        :param target_start: batch_size\n        :param target_end: batch_size\n        :param context_len: batch_size\n        :param pred_start: batch_size x max_len\n        :param pred_end: batch_size x max_len\n        :return:\n        \"\"\"", "\n", "batch_size", ",", "max_len", "=", "pred_end", ".", "size", "(", ")", "\n", "mask", "=", "seq_len_to_mask", "(", "context_len", ",", "max_len", ")", ".", "eq", "(", "False", ")", "\n", "\n", "pred_start", "=", "pred_start", ".", "masked_fill", "(", "mask", ",", "float", "(", "'-inf'", ")", ")", "\n", "pred_end", "=", "pred_end", ".", "masked_fill", "(", "mask", ",", "float", "(", "'-inf'", ")", ")", "\n", "\n", "start_loss", "=", "F", ".", "cross_entropy", "(", "pred_start", ",", "target_start", ",", "reduction", "=", "'sum'", ")", "\n", "end_loss", "=", "F", ".", "cross_entropy", "(", "pred_end", ",", "target_end", ",", "reduction", "=", "'sum'", ")", "\n", "\n", "loss", "=", "start_loss", "+", "end_loss", "\n", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "loss", "=", "loss", "/", "batch_size", "\n", "\n", "", "return", "loss", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.sustcsonglin_TN-PCFG.core.losses._prepare_losser": [[419, 427], ["losses.LossInForward", "isinstance", "TypeError", "type"], "function", ["None"], ["", "", "def", "_prepare_losser", "(", "losser", ")", ":", "\n", "    ", "if", "losser", "is", "None", ":", "\n", "        ", "losser", "=", "LossInForward", "(", ")", "\n", "return", "losser", "\n", "", "elif", "isinstance", "(", "losser", ",", "LossBase", ")", ":", "\n", "        ", "return", "losser", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f\"Type of loss should be `fastNLP.LossBase`, got {type(losser)}\"", ")", "\n", "", "", ""]]}