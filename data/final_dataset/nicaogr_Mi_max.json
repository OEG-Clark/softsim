{"home.repos.pwc.inspect_result.nicaogr_Mi_max.None.IMDB.download_url": [[15, 33], ["urllib.request.urlretrieve", "tqdm.tqdm", "urllib.request.urlretrieve", "t.update", "IMDB.download_url.my_hook"], "function", ["None"], ["def", "download_url", "(", "url", ",", "destination", "=", "None", ",", "progress_bar", "=", "True", ")", ":", "\n", "    ", "def", "my_hook", "(", "t", ")", ":", "\n", "        ", "last_b", "=", "[", "0", "]", "\n", "\n", "def", "inner", "(", "b", "=", "1", ",", "bsize", "=", "1", ",", "tsize", "=", "None", ")", ":", "\n", "            ", "if", "tsize", "is", "not", "None", ":", "\n", "                ", "t", ".", "total", "=", "tsize", "\n", "", "if", "b", ">", "0", ":", "\n", "                ", "t", ".", "update", "(", "(", "b", "-", "last_b", "[", "0", "]", ")", "*", "bsize", ")", "\n", "", "last_b", "[", "0", "]", "=", "b", "\n", "\n", "", "return", "inner", "\n", "\n", "", "if", "progress_bar", ":", "\n", "        ", "with", "tqdm", "(", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ",", "miniters", "=", "1", ",", "desc", "=", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "as", "t", ":", "\n", "            ", "filename", ",", "_", "=", "urlretrieve", "(", "url", ",", "filename", "=", "destination", ",", "reporthook", "=", "my_hook", "(", "t", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "filename", ",", "_", "=", "urlretrieve", "(", "url", ",", "filename", "=", "destination", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.IMDB.get_database": [[34, 146], ["len", "os.path.join", "os.path.join", "pandas.read_csv", "os.path.join", "os.path.join", "os.path.exists", "print", "IMDB.download_url", "os.remove", "os.path.join", "os.path.join", "os.path.exists", "IMDB.download_url", "df_label[].apply", "os.path.join", "os.path.join", "zipfile.ZipFile", "zipObj.extractall", "os.path.exists", "IMDB.download_url", "os.path.join", "os.rename", "os.path.exists", "os.mkdir", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.None.IMDB.download_url", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.IMDB.download_url", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.IMDB.download_url"], ["", "", "def", "get_database", "(", "database", ",", "default_path_imdb", "=", "'data'", ")", ":", "\n", "    ", "\"\"\"\n    This function download the needed dataset and return some useful information\n    such as the ground truth image level label\n    clipart have not been tested\n    \"\"\"", "\n", "\n", "if", "database", "==", "'watercolor'", ":", "\n", "        ", "ext", "=", "'.csv'", "\n", "item_name", "=", "'name_img'", "\n", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "default_path_imdb", ",", "'watercolor'", ")", "\n", "path_to_img", "=", "os", ".", "path", ".", "join", "(", "path_tmp", ",", "'JPEGImages'", ")", "\n", "classes", "=", "[", "\"bicycle\"", ",", "\"bird\"", ",", "\"car\"", ",", "\"cat\"", ",", "\"dog\"", ",", "\"person\"", "]", "\n", "url_dataset", "=", "'http://www.hal.t.u-tokyo.ac.jp/~inoue/projects/cross_domain_detection/datasets/watercolor.zip'", "\n", "url_file", "=", "'https://wsoda.telecom-paristech.fr/downloads/dataset/watercolor.csv'", "\n", "", "elif", "database", "==", "'PeopleArt'", ":", "\n", "        ", "ext", "=", "'.csv'", "\n", "item_name", "=", "'name_img'", "\n", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "default_path_imdb", ",", "'PeopleArt'", ")", "\n", "path_to_img", "=", "os", ".", "path", ".", "join", "(", "path_tmp", ",", "'JPEGImages'", ")", "\n", "classes", "=", "[", "\"person\"", "]", "\n", "url_dataset", "=", "'https://codeload.github.com/BathVisArtData/PeopleArt/zip/master'", "\n", "url_file", "=", "'https://wsoda.telecom-paristech.fr/downloads/dataset/PeopleArt.csv'", "\n", "", "elif", "'IconArt_v1'", "in", "database", ":", "\n", "        ", "ext", "=", "'.csv'", "\n", "item_name", "=", "'item'", "\n", "classes", "=", "[", "'angel'", ",", "'Child_Jesus'", ",", "'crucifixion_of_Jesus'", ",", "\n", "'Mary'", ",", "'nudity'", ",", "'ruins'", ",", "'Saint_Sebastien'", "]", "\n", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "default_path_imdb", ",", "'IconArt_v1'", ")", "\n", "path_to_img", "=", "os", ".", "path", ".", "join", "(", "path_tmp", ",", "'JPEGImages'", ")", "\n", "url_dataset", "=", "'https://wsoda.telecom-paristech.fr/downloads/dataset/IconArt_v1.zip'", "\n", "", "elif", "database", "==", "'CASPApaintings'", ":", "\n", "        ", "ext", "=", "'.csv'", "\n", "item_name", "=", "'name_img'", "\n", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "default_path_imdb", ",", "'CASPApaintings'", ")", "\n", "path_to_img", "=", "os", ".", "path", ".", "join", "(", "path_tmp", ",", "'JPEGImages'", ")", "\n", "classes", "=", "[", "\"bear\"", ",", "\"bird\"", ",", "\"cat\"", ",", "\"cow\"", ",", "\"dog\"", ",", "\"elephant\"", ",", "\"horse\"", ",", "\"sheep\"", "]", "\n", "url_file", "=", "'https://wsoda.telecom-paristech.fr/downloads/dataset/CASPApaintings.csv'", "\n", "# This dataset is a subset of the one provide by Thomas et al. 2018", "\n", "# Here https://people.cs.pitt.edu/~chris/artistic_objects/", "\n", "# We extract only the paintings and the bounding boxes of the animals", "\n", "url_dataset", "=", "'https://wsoda.telecom-paristech.fr/downloads/dataset/CASPApaintings.zip'", "\n", "", "elif", "database", "==", "'clipart'", ":", "\n", "        ", "ext", "=", "'.csv'", "\n", "item_name", "=", "'name_img'", "\n", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "default_path_imdb", ",", "'clipart'", ")", "\n", "path_to_img", "=", "os", ".", "path", ".", "join", "(", "path_tmp", ",", "'JPEGImages'", ")", "\n", "classes", "=", "[", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "\n", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "\n", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", "]", "\n", "url_file", "=", "'https://wsoda.telecom-paristech.fr/downloads/dataset/clipart.csv'", "\n", "url_dataset", "=", "'http://www.hal.t.u-tokyo.ac.jp/~inoue/projects/cross_domain_detection/datasets/clipart.zip'", "\n", "", "elif", "database", "==", "'comic'", ":", "\n", "        ", "ext", "=", "'.csv'", "\n", "item_name", "=", "'name_img'", "\n", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "default_path_imdb", ",", "'comic'", ")", "\n", "path_to_img", "=", "os", ".", "path", ".", "join", "(", "path_tmp", ",", "'JPEGImages'", ")", "\n", "classes", "=", "[", "'bicycle'", ",", "'bird'", ",", "'car'", ",", "'cat'", ",", "'dog'", ",", "'person'", "]", "\n", "url_file", "=", "'https://wsoda.telecom-paristech.fr/downloads/dataset/comic.csv'", "\n", "url_dataset", "=", "'http://www.hal.t.u-tokyo.ac.jp/~inoue/projects/cross_domain_detection/datasets/comic.zip'", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'This database don t exist :'", ",", "database", ")", "\n", "raise", "NotImplementedError", "\n", "", "num_classes", "=", "len", "(", "classes", ")", "\n", "\n", "path_data_csvfile", "=", "os", ".", "path", ".", "join", "(", "path_tmp", ",", "'ImageSets'", ",", "'Main'", ")", "\n", "databasetxt", "=", "os", ".", "path", ".", "join", "(", "path_data_csvfile", ",", "database", "+", "ext", ")", "\n", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "path_to_img", ")", ")", ":", "\n", "        ", "tmp_zip", "=", "'sampleDir.zip'", "\n", "print", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "url_dataset", ",", "tmp_zip", ")", ")", "\n", "download_url", "(", "url_dataset", ",", "tmp_zip", ")", "\n", "with", "ZipFile", "(", "tmp_zip", ",", "'r'", ")", "as", "zipObj", ":", "\n", "# Extract all the contents of zip file in current directory", "\n", "            ", "zipObj", ".", "extractall", "(", "default_path_imdb", ")", "\n", "", "os", ".", "remove", "(", "tmp_zip", ")", "\n", "", "if", "database", "in", "[", "'watercolor'", ",", "'clipart'", ",", "'CASPApaintings'", ",", "'comic'", ",", "'PeopleArt'", "]", ":", "\n", "        ", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "databasetxt", ")", ")", ":", "\n", "# We also need to download the image level annotations file at the right format", "\n", "            ", "download_url", "(", "url_file", ",", "databasetxt", ")", "\n", "\n", "", "", "if", "database", "==", "'PeopleArt'", ":", "\n", "        ", "peopleArtpath", "=", "os", ".", "path", ".", "join", "(", "default_path_imdb", ",", "'PeopleArt'", ")", "\n", "peopleArtpath_full", "=", "os", ".", "path", ".", "join", "(", "default_path_imdb", ",", "'PeopleArt'", ",", "'ImageSets'", ",", "'Main'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "default_path_imdb", ",", "'PeopleArt-master'", ")", ")", ":", "\n", "            ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "default_path_imdb", ",", "'PeopleArt-master'", ")", ",", "peopleArtpath", ")", "\n", "", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "peopleArtpath_full", ")", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "peopleArtpath", ",", "'ImageSets'", ")", ")", "\n", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "peopleArtpath", ",", "'ImageSets'", ",", "'Main'", ")", ")", "\n", "# We also need to download the image level annotations file at the right format", "\n", "", "download_url", "(", "url_file", ",", "databasetxt", ")", "\n", "\n", "", "if", "'IconArt_v1'", "in", "database", "or", "'IconArt_v1'", "==", "database", ":", "\n", "        ", "dtypes", "=", "{", "0", ":", "str", ",", "'item'", ":", "str", ",", "'angel'", ":", "int", ",", "'Child_Jesus'", ":", "int", ",", "'crucifixion_of_Jesus'", ":", "int", ",", "'Mary'", ":", "int", ",", "'nudity'", ":", "int", ",", "'ruins'", ":", "int", ",", "'Saint_Sebastien'", ":", "int", ",", "'set'", ":", "str", ",", "'Anno'", ":", "int", "}", "\n", "", "else", ":", "\n", "        ", "dtypes", "=", "{", "}", "\n", "dtypes", "[", "item_name", "]", "=", "str", "\n", "for", "c", "in", "classes", ":", "\n", "            ", "dtypes", "[", "c", "]", "=", "int", "\n", "", "", "df_label", "=", "pd", ".", "read_csv", "(", "databasetxt", ",", "sep", "=", "\",\"", ",", "dtype", "=", "dtypes", ")", "\n", "str_val", "=", "'val'", "\n", "if", "database", "in", "[", "'watercolor'", ",", "'clipart'", ",", "'PeopleArt'", ",", "'comic'", ",", "'CASPApaintings'", "]", ":", "\n", "        ", "str_val", "=", "'val'", "\n", "df_label", "[", "classes", "]", "=", "df_label", "[", "classes", "]", ".", "apply", "(", "lambda", "x", ":", "(", "x", "+", "1.0", ")", "/", "2.0", ")", "\n", "\n", "", "return", "(", "item_name", ",", "path_to_img", ",", "classes", ",", "ext", ",", "num_classes", ",", "str_val", ",", "df_label", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.__init__": [[49, 130], ["numpy.arange", "print", "print"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "LR", "=", "0.01", ",", "C", "=", "1.0", ",", "restarts", "=", "0", ",", "max_iters", "=", "300", ",", "\n", "verbose", "=", "True", ",", "Optimizer", "=", "'GradientDescent'", ",", "mini_batch_size", "=", "200", ",", "\n", "buffer_size", "=", "10000", ",", "num_features", "=", "2048", ",", "\n", "num_rois", "=", "300", ",", "num_classes", "=", "10", ",", "loss_type", "=", "''", ",", "\n", "is_betweenMinus1and1", "=", "False", ",", "CV_Mode", "=", "None", ",", "num_split", "=", "2", ",", "with_scores", "=", "False", ",", "\n", "epsilon", "=", "0.0", ",", "usecache", "=", "True", ",", "normalizeW", "=", "False", ",", "\n", "Polyhedral", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        @param LR : Learning rate : pas de gradient de descente [default: 0.01]\n        @param C : the loss/regularization tradeoff constant [default: 1.0]\n        @param C_finalSVM : the loss/regularization  term fo the final SVM training [default: 1.0]\n        @param restarts : the number of random restarts [default: 0]\n        @param max_iters : the maximum number of iterations in the inter loop of\n                           the optimization procedure [default: 300]\n        @param symway : If positive and negative bag are treated as the same way \n            or not [default: True]\n        @param all_notpos_inNeg : All the element of the positive bag that are \n            not positive element are put in the negative class [default: True]\n        @param gridSearch :GridSearch of the final SVC classifier [default: False]\n        @param n_jobs : number of parallel jobs during the gridsearch -1 means = \n            number of cores  [default: -1]\n        @param final_clf : final classifier used after the determination of the \n            element [choice : defaultSGD, linearSVC] [default : linearSVC]\n        @param verbose : print optimization status messages [default: True]\n        @param Optimizer : possible : 'GradientDescent','Momentum','Adam','Adagrad','lbfgs'\n        @param mini_batch_size : taille des mini_batch_size\n        @param buffer_size : taille du buffer\n        @param loss_type : Type of the loss :\n            '' or None : the original loss function from our work, a kind of hinge loss but with a prediction between -1 and 1\n            'MSE' : Mean squared error\n            'hinge_tanh' : hinge loss on the tanh output (it seems to be the same as the original loss)\n            'hinge': hinge loss without the tanh : normal way to use it\n            'log' : the classification log loss : kind of crossentropy loss\n        @param num_features : pnumbre de features\n        @param num_rois : nombre de regions d interet\n        @param num_classes : numbre de classes dans la base\n        @param max_iters_sgdc : Nombre d iterations pour la descente de gradient stochastique classification\n        @param debug : default False : if we want to debug \n        @param is_betweenMinus1and1 : default False : if we have the label value alreaddy between -1 and 1\n        @param CV_Mode : default None : cross validation mode in the MI_max : \n            Choice : None, 'CV' in k split \n        @param num_split : default 2 : the number of split/fold used in the cross validation method\n        @param with_scores : default False : Multiply the scalar product before the max by the objectness score from the FasterRCNN\n        @param epsilon : default 0. : The term we add to the object score\n        @param normalizeW : normalize the W vectors before optimization\n        @param : Polyhedral use the max of the max of product and keep all the (W,b) learnt\n            in order to have a polyhedral model\n            (default False)\n        \"\"\"", "\n", "self", ".", "LR", "=", "LR", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "restarts", "=", "restarts", "\n", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "Optimizer", "=", "Optimizer", "\n", "self", ".", "mini_batch_size", "=", "mini_batch_size", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_rois", "=", "num_rois", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "is_betweenMinus1and1", "=", "is_betweenMinus1and1", "\n", "self", ".", "np_pos_value", "=", "1", "\n", "self", ".", "np_neg_value", "=", "1", "# Those elements will be replace by matrix if the dataset contains several classes", "\n", "self", ".", "CV_Mode", "=", "CV_Mode", "\n", "if", "not", "(", "CV_Mode", "is", "None", ")", ":", "\n", "            ", "if", "not", "(", "CV_Mode", "in", "[", "'CV'", ",", "''", "]", ")", ":", "\n", "                ", "print", "(", "CV_Mode", ",", "' is unknwonw'", ")", "\n", "raise", "(", "NotImplementedError", ")", "\n", "", "assert", "(", "num_split", ">", "1", ")", "# Il faut plus d un folder pour separer", "\n", "self", ".", "num_split", "=", "num_split", "# Only useful if CrossVal==True", "\n", "if", "num_split", ">", "2", ":", "\n", "                ", "print", "(", "'The use of more that 2 spits seem to slow a lot the computation with the use of shard'", ")", "\n", "", "", "self", ".", "with_scores", "=", "with_scores", "\n", "self", ".", "epsilon", "=", "epsilon", "# Used to avoid having a zero score", "\n", "self", ".", "Cbest", "=", "None", "\n", "# case of Cvalue", "\n", "self", ".", "C_values", "=", "np", ".", "arange", "(", "0.5", ",", "1.5", ",", "0.1", ",", "dtype", "=", "np", ".", "float32", ")", "# Case used in VISART2018", "\n", "self", ".", "usecache", "=", "usecache", "\n", "self", ".", "normalizeW", "=", "normalizeW", "\n", "self", ".", "Polyhedral", "=", "Polyhedral", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.parser": [[131, 148], ["tensorflow.parse_single_example", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.reshape", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "methods", ["None"], ["", "def", "parser", "(", "self", ",", "record", ")", ":", "\n", "\n", "        ", "keys_to_features", "=", "{", "\n", "'num_regions'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'num_features'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'fc7'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_rois", "*", "self", ".", "num_features", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_classes", "]", ",", "tf", ".", "float32", ")", "}", "\n", "parsed", "=", "tf", ".", "parse_single_example", "(", "record", ",", "keys_to_features", ")", "\n", "\n", "# Cast label data into int32", "\n", "label", "=", "parsed", "[", "'label'", "]", "\n", "#tf.Print(label,[label])", "\n", "label", "=", "tf", ".", "slice", "(", "label", ",", "[", "self", ".", "class_indice", "]", ",", "[", "1", "]", ")", "\n", "label", "=", "tf", ".", "squeeze", "(", "label", ")", "# To get a vector one dimension", "\n", "fc7", "=", "parsed", "[", "'fc7'", "]", "\n", "fc7", "=", "tf", ".", "reshape", "(", "fc7", ",", "[", "self", ".", "num_rois", ",", "self", ".", "num_features", "]", ")", "\n", "return", "fc7", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.parser_wRoiScore": [[149, 166], ["tensorflow.parse_single_example", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.reshape", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "methods", ["None"], ["", "def", "parser_wRoiScore", "(", "self", ",", "record", ")", ":", "\n", "        ", "keys_to_features", "=", "{", "\n", "'num_regions'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'num_features'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'roi_scores'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_rois", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'fc7'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_rois", "*", "self", ".", "num_features", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_classes", "]", ",", "tf", ".", "float32", ")", "}", "\n", "parsed", "=", "tf", ".", "parse_single_example", "(", "record", ",", "keys_to_features", ")", "\n", "\n", "# Cast label data into int32", "\n", "label", "=", "parsed", "[", "'label'", "]", "\n", "roi_scores", "=", "parsed", "[", "'roi_scores'", "]", "\n", "label", "=", "tf", ".", "slice", "(", "label", ",", "[", "self", ".", "class_indice", "]", ",", "[", "1", "]", ")", "\n", "label", "=", "tf", ".", "squeeze", "(", "label", ")", "# To get a vector one dimension", "\n", "fc7", "=", "parsed", "[", "'fc7'", "]", "\n", "fc7", "=", "tf", ".", "reshape", "(", "fc7", ",", "[", "self", ".", "num_rois", ",", "self", ".", "num_features", "]", ")", "\n", "return", "fc7", ",", "roi_scores", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.parser_all_classes": [[167, 178], ["tensorflow.parse_single_example", "tensorflow.reshape", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "methods", ["None"], ["", "def", "parser_all_classes", "(", "self", ",", "record", ")", ":", "\n", "        ", "keys_to_features", "=", "{", "\n", "'fc7'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_rois", "*", "self", ".", "num_features", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_classes", "]", ",", "tf", ".", "float32", ")", "}", "\n", "parsed", "=", "tf", ".", "parse_single_example", "(", "record", ",", "keys_to_features", ")", "\n", "\n", "# Cast label data into int32", "\n", "label", "=", "parsed", "[", "'label'", "]", "\n", "fc7", "=", "parsed", "[", "'fc7'", "]", "\n", "fc7", "=", "tf", ".", "reshape", "(", "fc7", ",", "[", "self", ".", "num_rois", ",", "self", ".", "num_features", "]", ")", "\n", "return", "fc7", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.parser_all_classes_wRoiScore": [[179, 191], ["tensorflow.parse_single_example", "tensorflow.reshape", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "methods", ["None"], ["", "def", "parser_all_classes_wRoiScore", "(", "self", ",", "record", ")", ":", "\n", "        ", "keys_to_features", "=", "{", "\n", "'fc7'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_rois", "*", "self", ".", "num_features", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'roi_scores'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_rois", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_classes", "]", ",", "tf", ".", "float32", ")", "}", "\n", "parsed", "=", "tf", ".", "parse_single_example", "(", "record", ",", "keys_to_features", ")", "\n", "\n", "label", "=", "parsed", "[", "'label'", "]", "\n", "roi_scores", "=", "parsed", "[", "'roi_scores'", "]", "\n", "fc7", "=", "parsed", "[", "'fc7'", "]", "\n", "fc7", "=", "tf", ".", "reshape", "(", "fc7", ",", "[", "self", ".", "num_rois", ",", "self", ".", "num_features", "]", ")", "\n", "return", "fc7", ",", "roi_scores", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.parser_w_rois": [[192, 214], ["tensorflow.parse_single_example", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "methods", ["None"], ["", "def", "parser_w_rois", "(", "self", ",", "record", ")", ":", "\n", "# Perform additional preprocessing on the parsed data.", "\n", "        ", "keys_to_features", "=", "{", "\n", "'num_regions'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'num_features'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'rois'", ":", "tf", ".", "FixedLenFeature", "(", "[", "5", "*", "self", ".", "num_rois", "]", ",", "tf", ".", "float32", ")", ",", "# Here we can have a problem if the rois is not size 5", "\n", "'roi_scores'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_rois", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'fc7'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_rois", "*", "self", ".", "num_features", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "self", ".", "num_classes", "]", ",", "tf", ".", "float32", ")", "\n", "}", "\n", "parsed", "=", "tf", ".", "parse_single_example", "(", "record", ",", "keys_to_features", ")", "\n", "\n", "# Cast label data into int32", "\n", "label", "=", "parsed", "[", "'label'", "]", "\n", "name_img", "=", "parsed", "[", "'name_img'", "]", "\n", "label", "=", "tf", ".", "slice", "(", "label", ",", "[", "self", ".", "class_indice", "]", ",", "[", "1", "]", ")", "\n", "label", "=", "tf", ".", "squeeze", "(", "label", ")", "# To get a vector one dimension", "\n", "fc7", "=", "parsed", "[", "'fc7'", "]", "\n", "fc7", "=", "tf", ".", "reshape", "(", "fc7", ",", "[", "self", ".", "num_rois", ",", "self", ".", "num_features", "]", ")", "\n", "rois", "=", "parsed", "[", "'rois'", "]", "\n", "rois", "=", "tf", ".", "reshape", "(", "rois", ",", "[", "self", ".", "num_rois", ",", "5", "]", ")", "\n", "return", "fc7", ",", "rois", ",", "label", ",", "name_img", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.tf_dataset_use_per_batch": [[215, 229], ["dataset_batch.cache.cache.prefetch", "dataset_batch.cache.cache.make_initializable_iterator", "Mimax_model.test_version_sup", "train_dataset.map.map.apply", "train_dataset.map.map.map", "train_dataset.map.map.batch", "dataset_batch.cache.cache.cache", "tensorflow.contrib.data.map_and_batch"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.test_version_sup"], ["", "def", "tf_dataset_use_per_batch", "(", "self", ",", "train_dataset", ",", "performance", "=", "False", ")", ":", "\n", "\n", "        ", "if", "test_version_sup", "(", "'1.6'", ")", "and", "performance", ":", "\n", "            ", "dataset_batch", "=", "train_dataset", ".", "apply", "(", "tf", ".", "contrib", ".", "data", ".", "map_and_batch", "(", "\n", "map_func", "=", "self", ".", "first_parser", ",", "batch_size", "=", "self", ".", "mini_batch_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "train_dataset", "=", "train_dataset", ".", "map", "(", "self", ".", "first_parser", ",", "\n", "num_parallel_calls", "=", "self", ".", "cpu_count", ")", "\n", "dataset_batch", "=", "train_dataset", ".", "batch", "(", "self", ".", "mini_batch_size", ")", "\n", "", "if", "self", ".", "usecache", ":", "\n", "            ", "dataset_batch", "=", "dataset_batch", ".", "cache", "(", ")", "\n", "", "dataset_batch", "=", "dataset_batch", ".", "prefetch", "(", "self", ".", "mini_batch_size", ")", "\n", "iterator_batch", "=", "dataset_batch", ".", "make_initializable_iterator", "(", ")", "\n", "return", "(", "iterator_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.eval_loss": [[230, 249], ["sess.run", "numpy.zeros", "numpy.zeros", "sess.run", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "eval_loss", "(", "self", ",", "sess", ",", "iterator_batch", ",", "loss_batch", ")", ":", "\n", "        ", "if", "self", ".", "class_indice", "==", "-", "1", ":", "\n", "            ", "if", "self", ".", "restarts_paral_V2", ":", "\n", "                ", "loss_value", "=", "np", ".", "zeros", "(", "(", "self", ".", "paral_number_W", "*", "self", ".", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "self", ".", "Polyhedral", ":", "\n", "                    ", "loss_value", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "elif", "self", ".", "restarts_paral_Dim", ":", "\n", "                ", "loss_value", "=", "np", ".", "zeros", "(", "(", "self", ".", "paral_number_W", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "else", ":", "\n", "            ", "loss_value", "=", "np", ".", "zeros", "(", "(", "self", ".", "paral_number_W", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "sess", ".", "run", "(", "iterator_batch", ".", "initializer", ")", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "loss_value_tmp", "=", "sess", ".", "run", "(", "loss_batch", ")", "\n", "loss_value", "+=", "loss_value_tmp", "\n", "break", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "                ", "break", "\n", "", "", "return", "(", "loss_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.fit_MI_max_tfrecords": [[250, 595], ["multiprocessing.cpu_count", "tensorflow.data.TFRecordDataset", "Mimax_model.tf_MI_max.tf_dataset_use_per_batch", "tensorflow.ConfigProto", "tensorflow.constant", "tensorflow.placeholder", "numpy.zeros", "numpy.zeros", "tensorflow.data.TFRecordDataset.map", "dataset_shuffle.cache.cache.batch", "dataset_shuffle.cache.cache.repeat", "dataset_shuffle.cache.cache.prefetch", "dataset_shuffle.cache.cache.make_initializable_iterator", "tensorflow.Variable", "tensorflow.Variable", "Mimax_model.test_version_sup", "tensorflow.einsum", "tensorflow.add", "tensorflow.reduce_max", "tensorflow.tanh", "tensorflow.einsum", "tensorflow.add", "tensorflow.reduce_max", "tensorflow.Session", "tensorflow.group", "tensorflow.Session.run", "tensorflow.Session.run", "tensorflow.Session.run", "numpy.zeros", "numpy.zeros", "tensorflow.train.Saver", "tensorflow.identity", "tensorflow.identity", "os.path.split", "os.path.join", "pathlib.Path().mkdir", "os.path.join", "os.path.join", "tensorflow.train.Saver.save", "tensorflow.Session.close", "numpy.zeros", "numpy.repeat", "len", "tensorflow.data.TFRecordDataset.shard", "range", "Mimax_model.tf_MI_max.get_next", "Mimax_model.tf_MI_max.get_next", "tensorflow.divide", "tensorflow.divide", "tensorflow.reduce_sum", "tensorflow.Session", "tensorflow.Session.run", "tensorflow.Session.run", "tensorflow.Session.run", "print", "tensorflow.data.TFRecordDataset.shard", "range", "tensorflow.data.TFRecordDataset.shard", "Mimax_model.tf_MI_max.tf_dataset_use_per_batch", "tensorflow.data.TFRecordDataset", "tensorflow.data.TFRecordDataset.shuffle", "dataset_shuffle.cache.cache.cache", "dataset_shuffle.cache.make_initializable_iterator.get_next", "dataset_shuffle.cache.make_initializable_iterator.get_next", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.Variable.assign", "tensorflow.Variable.assign", "tensorflow.multiply", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.tile", "tensorflow.tile", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.add", "tensorflow.add", "tensorflow.multiply", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.tile", "tensorflow.tile", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.AdagradOptimizer.minimize", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "print", "time.time", "tensorflow.Session.run", "range", "numpy.zeros", "numpy.zeros", "tensorflow.Session.run", "tensorflow.Session.run", "range", "tensorflow.Session.run", "tensorflow.Session.run", "tensorflow.identity", "tensorflow.add", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.add", "tensorflow.multiply", "str", "print", "print", "print", "tensorflow.data.TFRecordDataset.shard", "train_dataset_tmp.concatenate.concatenate.concatenate", "tensorflow.reduce_sum", "tensorflow.constant", "tensorflow.reduce_sum", "tensorflow.constant", "tensorflow.reduce_sum", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tf.data.TFRecordDataset.shard.shard", "train_dataset_tmp.concatenate.concatenate.concatenate", "Mimax_model.tf_MI_max.get_next", "Mimax_model.tf_MI_max.get_next", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "print", "tensorflow.add", "tensorflow.divide", "tensorflow.divide", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.add", "tensorflow.multiply", "tensorflow.maximum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.add", "tensorflow.divide", "tensorflow.divide", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.add", "tensorflow.multiply", "tensorflow.maximum", "tensorflow.reduce_sum", "tensorflow.Session.run", "tensorflow.contrib.opt.ScipyOptimizerInterface", "tensorflow.train.AdagradOptimizer.minimize", "print", "tensorflow.Session.run", "numpy.argmin", "numpy.min", "print", "time.time", "print", "print", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.add", "pathlib.Path", "time.time", "len", "tensorflow.add", "tensorflow.add", "tensorflow.add", "tensorflow.Session.run", "tensorflow.Session.run", "tensorflow.Session.run", "tensorflow.divide", "tensorflow.add", "tensorflow.multiply", "tensorflow.divide", "tensorflow.add", "tensorflow.multiply", "print", "tensorflow.add", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.pow", "tensorflow.divide", "tensorflow.add", "tensorflow.multiply", "tensorflow.divide", "tensorflow.add", "tensorflow.multiply", "tensorflow.add", "tensorflow.multiply", "tensorflow.train.MomentumOptimizer", "tensorflow.train.MomentumOptimizer", "print", "str", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.constant", "tensorflow.add", "tensorflow.multiply", "tensorflow.add", "tensorflow.multiply", "tensorflow.abs", "tensorflow.pow", "tensorflow.pow", "tensorflow.add", "tensorflow.multiply", "tensorflow.add", "tensorflow.multiply", "tensorflow.abs", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdagradOptimizer", "tensorflow.multiply", "tensorflow.multiply", "print"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.tf_dataset_use_per_batch", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.test_version_sup", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.tf_dataset_use_per_batch"], ["", "def", "fit_MI_max_tfrecords", "(", "self", ",", "data_path", ",", "C_Searching", "=", "False", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "\"\"\"\" \n        This function run per batch on the tfrecords data folder the training \n        of the MIMax model of the Polyhedral MIMAX\n        @param : data_path : \n        @param : choose of the class to run the optimisation on, if == -1 , then \n        run all the class at once\n        @param : shuffle or not the dataset \n        \"\"\"", "\n", "\n", "\n", "self", ".", "C_Searching", "=", "C_Searching", "\n", "\n", "if", "self", ".", "C_Searching", ":", "\n", "            ", "C_values", "=", "self", ".", "C_values", "\n", "self", ".", "Cbest", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", ")", ")", "\n", "self", ".", "paral_number_W", "=", "self", ".", "restarts", "+", "1", "\n", "C_value_repeat", "=", "np", ".", "repeat", "(", "C_values", ",", "repeats", "=", "(", "self", ".", "paral_number_W", "*", "self", ".", "num_classes", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "paral_number_W", "*=", "len", "(", "C_values", ")", "\n", "if", "self", ".", "verbose", ":", "print", "(", "'We will compute :'", ",", "len", "(", "C_value_repeat", ")", ",", "'W vectors due to the C searching'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "paral_number_W", "=", "self", ".", "restarts", "+", "1", "\n", "\n", "## Debut de la fonction        ", "\n", "", "self", ".", "cpu_count", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "train_dataset_init", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "data_path", ")", "\n", "\n", "if", "self", ".", "CV_Mode", "==", "'CV'", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "print", "(", "'Use of the Cross Validation with '", ",", "self", ".", "num_split", ",", "' splits'", ")", "\n", "train_dataset_tmp", "=", "train_dataset_init", ".", "shard", "(", "self", ".", "num_split", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_split", "-", "1", ")", ":", "\n", "                ", "train_dataset_tmp2", "=", "train_dataset_init", ".", "shard", "(", "self", ".", "num_split", ",", "i", ")", "\n", "train_dataset_tmp", "=", "train_dataset_tmp", ".", "concatenate", "(", "train_dataset_tmp2", ")", "\n", "", "train_dataset", "=", "train_dataset_tmp", "\n", "", "else", ":", "\n", "            ", "train_dataset", "=", "train_dataset_init", "\n", "# The second argument is the index of the subset used", "\n", "", "if", "self", ".", "with_scores", ":", "\n", "            ", "self", ".", "first_parser", "=", "self", ".", "parser_all_classes_wRoiScore", "\n", "", "else", ":", "\n", "            ", "self", ".", "first_parser", "=", "self", ".", "parser_all_classes", "\n", "\n", "", "iterator_batch", "=", "self", ".", "tf_dataset_use_per_batch", "(", "train_dataset", ")", "\n", "\n", "if", "self", ".", "with_scores", ":", "\n", "            ", "X_batch", ",", "scores_batch", ",", "label_batch", "=", "iterator_batch", ".", "get_next", "(", ")", "\n", "", "else", ":", "\n", "            ", "X_batch", ",", "label_batch", "=", "iterator_batch", ".", "get_next", "(", ")", "\n", "# Calcul preliminaire a la definition de la fonction de cout ", "\n", "", "self", ".", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "self", ".", "config", ".", "intra_op_parallelism_threads", "=", "16", "\n", "self", ".", "config", ".", "inter_op_parallelism_threads", "=", "16", "\n", "self", ".", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "minus_1", "=", "tf", ".", "constant", "(", "-", "1.", ")", "\n", "\n", "label_vector", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "self", ".", "num_classes", ")", ")", "\n", "if", "self", ".", "is_betweenMinus1and1", ":", "\n", "            ", "add_np_pos", "=", "tf", ".", "divide", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "add", "(", "label_vector", ",", "tf", ".", "constant", "(", "1.", ")", ")", ")", ",", "tf", ".", "constant", "(", "2.", ")", ")", "\n", "add_np_neg", "=", "tf", ".", "divide", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "add", "(", "label_vector", ",", "minus_1", ")", ")", ",", "tf", ".", "constant", "(", "-", "2.", ")", ")", "\n", "", "else", ":", "\n", "            ", "add_np_pos", "=", "tf", ".", "reduce_sum", "(", "label_vector", ",", "axis", "=", "0", ")", "\n", "add_np_neg", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "add", "(", "label_vector", ",", "minus_1", ")", ",", "axis", "=", "0", ")", "\n", "", "np_pos_value", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "np_neg_value", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "self", ".", "config", ")", "as", "sess", ":", "\n", "            ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "iterator_batch", ".", "initializer", ")", "\n", "while", "True", ":", "\n", "              ", "try", ":", "\n", "# Attention a chaque fois que l on appelle la fonction iterator on avance", "\n", "                  ", "label_batch_value", "=", "sess", ".", "run", "(", "label_batch", ")", "\n", "np_pos_value", "+=", "sess", ".", "run", "(", "add_np_pos", ",", "feed_dict", "=", "{", "label_vector", ":", "label_batch_value", "}", ")", "\n", "np_neg_value", "+=", "sess", ".", "run", "(", "add_np_neg", ",", "feed_dict", "=", "{", "label_vector", ":", "label_batch_value", "}", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "self", ".", "np_pos_value", "=", "np_pos_value", "\n", "self", ".", "np_neg_value", "=", "np_neg_value", "\n", "if", "self", ".", "verbose", ":", "print", "(", "\"Finished to compute the proportion of each label :\"", ",", "np_pos_value", ",", "np_neg_value", ")", "\n", "\n", "if", "self", ".", "CV_Mode", "==", "'CV'", ":", "\n", "            ", "train_dataset_tmp", "=", "train_dataset_init", ".", "shard", "(", "self", ".", "num_split", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_split", "-", "1", ")", ":", "\n", "                ", "train_dataset_tmp2", "=", "train_dataset", ".", "shard", "(", "self", ".", "num_split", ",", "i", ")", "\n", "train_dataset_tmp", "=", "train_dataset_tmp", ".", "concatenate", "(", "train_dataset_tmp2", ")", "\n", "", "train_dataset2", "=", "train_dataset_tmp", "\n", "train_dataset", "=", "train_dataset_init", ".", "shard", "(", "self", ".", "num_split", ",", "self", ".", "num_split", "-", "1", ")", "\n", "# The last fold is keep for doing the cross validation", "\n", "iterator_batch", "=", "self", ".", "tf_dataset_use_per_batch", "(", "train_dataset", ")", "\n", "if", "self", ".", "with_scores", "or", "self", ".", "seuillage_by_score", "or", "self", ".", "obj_score_add_tanh", "or", "self", ".", "obj_score_mul_tanh", ":", "\n", "                ", "X_batch", ",", "scores_batch", ",", "label_batch", "=", "iterator_batch", ".", "get_next", "(", ")", "\n", "", "else", ":", "\n", "                ", "X_batch", ",", "label_batch", "=", "iterator_batch", ".", "get_next", "(", ")", "\n", "", "", "else", ":", "\n", "# TODO test !", "\n", "            ", "train_dataset2", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "data_path", ")", "# train_dataset_init ?  A tester", "\n", "\n", "", "train_dataset2", "=", "train_dataset2", ".", "map", "(", "self", ".", "first_parser", ",", "\n", "num_parallel_calls", "=", "self", ".", "cpu_count", ")", "\n", "if", "shuffle", ":", "\n", "            ", "dataset_shuffle", "=", "train_dataset2", ".", "shuffle", "(", "buffer_size", "=", "self", ".", "buffer_size", ",", "\n", "reshuffle_each_iteration", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "dataset_shuffle", "=", "train_dataset2", "\n", "", "dataset_shuffle", "=", "dataset_shuffle", ".", "batch", "(", "self", ".", "mini_batch_size", ")", "\n", "if", "self", ".", "usecache", ":", "\n", "            ", "dataset_shuffle", "=", "dataset_shuffle", ".", "cache", "(", ")", "\n", "", "dataset_shuffle", "=", "dataset_shuffle", ".", "repeat", "(", ")", "\n", "dataset_shuffle", "=", "dataset_shuffle", ".", "prefetch", "(", "self", ".", "mini_batch_size", ")", "\n", "shuffle_iterator", "=", "dataset_shuffle", ".", "make_initializable_iterator", "(", ")", "\n", "if", "self", ".", "with_scores", ":", "\n", "            ", "X_", ",", "scores_", ",", "y_", "=", "shuffle_iterator", ".", "get_next", "(", ")", "\n", "", "else", ":", "\n", "            ", "X_", ",", "y_", "=", "shuffle_iterator", ".", "get_next", "(", ")", "\n", "\n", "# Definition of the graph ", "\n", "", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "paral_number_W", "*", "self", ".", "num_classes", ",", "self", ".", "num_features", "]", ",", "stddev", "=", "1.", ")", ",", "name", "=", "\"weights\"", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "paral_number_W", "*", "self", ".", "num_classes", ",", "1", ",", "1", "]", ",", "stddev", "=", "1.", ")", ",", "name", "=", "\"bias\"", ")", "\n", "if", "test_version_sup", "(", "'1.8'", ")", ":", "\n", "            ", "normalize_W", "=", "W", ".", "assign", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "W", ",", "axis", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "normalize_W", "=", "W", ".", "assign", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "W", ",", "dim", "=", "0", ")", ")", "\n", "", "W_r", "=", "W", "\n", "\n", "Prod", "=", "tf", ".", "einsum", "(", "'ak,ijk->aij'", ",", "W_r", ",", "X_", ")", "\n", "Prod", "=", "tf", ".", "add", "(", "Prod", ",", "b", ")", "\n", "\n", "if", "self", ".", "with_scores", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "print", "(", "'With score multiplication'", ")", "\n", "Prod", "=", "tf", ".", "multiply", "(", "Prod", ",", "tf", ".", "add", "(", "scores_", ",", "self", ".", "epsilon", ")", ")", "\n", "\n", "", "Max", "=", "tf", ".", "reduce_max", "(", "Prod", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "Polyhedral", ":", "\n", "            ", "Max_reshaped", "=", "tf", ".", "reshape", "(", "Max", ",", "(", "self", ".", "num_classes", ",", "self", ".", "paral_number_W", ",", "-", "1", ")", ")", "\n", "MaxOfMax", "=", "tf", ".", "reduce_max", "(", "Max_reshaped", ",", "axis", "=", "1", ")", "\n", "# We take the max on the scalar product of the same class", "\n", "Max", "=", "MaxOfMax", "\n", "\n", "", "if", "self", ".", "is_betweenMinus1and1", ":", "\n", "            ", "weights_bags_ratio", "=", "-", "tf", ".", "divide", "(", "tf", ".", "add", "(", "y_", ",", "1.", ")", ",", "tf", ".", "multiply", "(", "2.", ",", "np_pos_value", ")", ")", "+", "tf", ".", "divide", "(", "tf", ".", "add", "(", "y_", ",", "-", "1.", ")", ",", "tf", ".", "multiply", "(", "-", "2.", ",", "np_neg_value", ")", ")", "\n", "# Need to add 1 to avoid the case ", "\n", "# The wieght are negative for the positive exemple and positive for the negative ones !!!", "\n", "", "else", ":", "\n", "            ", "weights_bags_ratio", "=", "-", "tf", ".", "divide", "(", "y_", ",", "np_pos_value", ")", "+", "tf", ".", "divide", "(", "-", "tf", ".", "add", "(", "y_", ",", "-", "1", ")", ",", "np_neg_value", ")", "\n", "\n", "", "if", "not", "(", "self", ".", "Polyhedral", ")", ":", "\n", "            ", "weights_bags_ratio", "=", "tf", ".", "tile", "(", "tf", ".", "transpose", "(", "weights_bags_ratio", ",", "[", "1", ",", "0", "]", ")", ",", "[", "self", ".", "paral_number_W", ",", "1", "]", ")", "\n", "y_long_pm1", "=", "tf", ".", "tile", "(", "tf", ".", "transpose", "(", "tf", ".", "add", "(", "tf", ".", "multiply", "(", "y_", ",", "2", ")", ",", "-", "1", ")", ",", "[", "1", ",", "0", "]", ")", ",", "[", "self", ".", "paral_number_W", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "weights_bags_ratio", "=", "tf", ".", "transpose", "(", "weights_bags_ratio", ",", "[", "1", ",", "0", "]", ")", "\n", "y_long_pm1", "=", "tf", ".", "transpose", "(", "tf", ".", "add", "(", "tf", ".", "multiply", "(", "y_", ",", "2", ")", ",", "-", "1", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "\n", "", "y_tilde_i", "=", "tf", ".", "tanh", "(", "Max", ")", "\n", "if", "self", ".", "loss_type", "==", "''", "or", "self", ".", "loss_type", "is", "None", ":", "\n", "            ", "Tan", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "y_tilde_i", ",", "weights_bags_ratio", ")", ",", "axis", "=", "-", "1", ")", "# Sum on all the positive exemples ", "\n", "", "elif", "self", ".", "loss_type", "==", "'hinge'", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "print", "(", "'Used of the hinge loss without tanh'", ")", "\n", "hinge", "=", "tf", ".", "maximum", "(", "tf", ".", "add", "(", "-", "tf", ".", "multiply", "(", "Max", ",", "y_long_pm1", ")", ",", "1.", ")", ",", "0.", ")", "\n", "Tan", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "hinge", ",", "tf", ".", "abs", "(", "weights_bags_ratio", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "C_Searching", ":", "\n", "            ", "loss", "=", "tf", ".", "add", "(", "Tan", ",", "tf", ".", "multiply", "(", "C_value_repeat", ",", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "W_r", ",", "2", ")", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "\n", "            ", "if", "self", ".", "Polyhedral", ":", "\n", "                ", "W_r_reduce", "=", "tf", ".", "reshape", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "W_r", ",", "2", ")", ",", "axis", "=", "-", "1", ")", ",", "(", "self", ".", "num_classes", ",", "self", ".", "paral_number_W", ")", ")", "\n", "W_r_reduce", "=", "tf", ".", "reduce_mean", "(", "W_r_reduce", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "W_r_reduce", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "W_r", ",", "2", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "loss", "=", "tf", ".", "add", "(", "Tan", ",", "tf", ".", "multiply", "(", "self", ".", "C", ",", "W_r_reduce", ")", ")", "\n", "\n", "#Definition on batch", "\n", "", "Prod_batch", "=", "tf", ".", "einsum", "(", "'ak,ijk->aij'", ",", "W_r", ",", "X_batch", ")", "\n", "Prod_batch", "=", "tf", ".", "add", "(", "Prod_batch", ",", "b", ")", "\n", "\n", "if", "self", ".", "with_scores", ":", "\n", "            ", "Prod_batch", "=", "tf", ".", "multiply", "(", "Prod_batch", ",", "tf", ".", "add", "(", "scores_batch", ",", "self", ".", "epsilon", ")", ")", "\n", "\n", "", "Max_batch", "=", "tf", ".", "reduce_max", "(", "Prod_batch", ",", "axis", "=", "-", "1", ")", "# Case normal", "\n", "\n", "if", "self", ".", "Polyhedral", ":", "# Case Polyhderal ", "\n", "            ", "Max_batch_reshaped", "=", "tf", ".", "reshape", "(", "Max_batch", ",", "(", "self", ".", "num_classes", ",", "self", ".", "paral_number_W", ",", "-", "1", ")", ")", "\n", "MaxOfMax_batch", "=", "tf", ".", "reduce_max", "(", "Max_batch_reshaped", ",", "axis", "=", "1", ")", "# We take the max on the scalar product of the same class", "\n", "Max_batch", "=", "MaxOfMax_batch", "\n", "\n", "# We take the max because we have at least one element of the bag that is positive", "\n", "\n", "", "if", "self", ".", "is_betweenMinus1and1", ":", "\n", "            ", "weights_bags_ratio_batch", "=", "-", "tf", ".", "divide", "(", "tf", ".", "add", "(", "label_batch", ",", "1.", ")", ",", "tf", ".", "multiply", "(", "2.", ",", "np_pos_value", ")", ")", "+", "tf", ".", "divide", "(", "tf", ".", "add", "(", "label_batch", ",", "-", "1.", ")", ",", "tf", ".", "multiply", "(", "-", "2.", ",", "np_neg_value", ")", ")", "\n", "# Need to add 1 to avoid the case ", "\n", "# The wieght are negative for the positive exemple and positive for the negative ones !!!", "\n", "", "else", ":", "\n", "            ", "weights_bags_ratio_batch", "=", "-", "tf", ".", "divide", "(", "label_batch", ",", "np_pos_value", ")", "+", "tf", ".", "divide", "(", "-", "tf", ".", "add", "(", "label_batch", ",", "-", "1", ")", ",", "np_neg_value", ")", "# Need to add 1 to avoid the case ", "\n", "\n", "", "if", "not", "(", "self", ".", "Polyhedral", ")", ":", "# Case MImax linear", "\n", "            ", "weights_bags_ratio_batch", "=", "tf", ".", "tile", "(", "tf", ".", "transpose", "(", "weights_bags_ratio_batch", ",", "[", "1", ",", "0", "]", ")", ",", "[", "self", ".", "paral_number_W", ",", "1", "]", ")", "\n", "y_long_pm1_batch", "=", "tf", ".", "tile", "(", "tf", ".", "transpose", "(", "tf", ".", "add", "(", "tf", ".", "multiply", "(", "label_batch", ",", "2", ")", ",", "-", "1", ")", ",", "[", "1", ",", "0", "]", ")", ",", "[", "self", ".", "paral_number_W", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "weights_bags_ratio_batch", "=", "tf", ".", "transpose", "(", "weights_bags_ratio_batch", ",", "[", "1", ",", "0", "]", ")", "\n", "y_long_pm1_batch", "=", "tf", ".", "transpose", "(", "tf", ".", "add", "(", "tf", ".", "multiply", "(", "label_batch", ",", "2", ")", ",", "-", "1", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "\n", "", "y_tilde_i_batch", "=", "Max_batch", "\n", "\n", "if", "self", ".", "loss_type", "==", "''", "or", "self", ".", "loss_type", "is", "None", ":", "\n", "            ", "Tan_batch", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "y_tilde_i_batch", ",", "weights_bags_ratio_batch", ")", ",", "axis", "=", "-", "1", ")", "# Sum on all the positive exemples ", "\n", "", "elif", "self", ".", "loss_type", "==", "'hinge'", ":", "\n", "            ", "hinge_batch", "=", "tf", ".", "maximum", "(", "tf", ".", "add", "(", "-", "tf", ".", "multiply", "(", "Max_batch", ",", "y_long_pm1_batch", ")", ",", "1.", ")", ",", "0.", ")", "\n", "Tan_batch", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "hinge_batch", ",", "tf", ".", "abs", "(", "weights_bags_ratio_batch", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "loss_batch", "=", "Tan_batch", "\n", "\n", "if", "(", "self", ".", "Optimizer", "==", "'GradientDescent'", ")", ":", "\n", "            ", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "LR", ")", "\n", "", "elif", "(", "self", ".", "Optimizer", "==", "'Momentum'", ")", ":", "\n", "            ", "if", "self", ".", "optimArg", "is", "None", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "self", ".", "LR", ",", "0.9", ")", "\n", "", "else", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "self", ".", "optimArg", "[", "'learning_rate'", "]", ",", "self", ".", "optimArg", "[", "'momentum'", "]", ")", "\n", "", "", "elif", "(", "self", ".", "Optimizer", "==", "'Adam'", ")", ":", "\n", "            ", "if", "self", ".", "optimArg", "is", "None", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "LR", ")", "\n", "# Default value  : beta1=0.9,beta2=0.999,epsilon=1e-08, ", "\n", "# maybe epsilon should be 0.1 or 1 cf https://www.tensorflow.org/api_docs/python/tf/train/AdamOptimizer", "\n", "", "else", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "optimArg", "[", "'learning_rate'", "]", ",", "beta1", "=", "self", ".", "optimArg", "[", "'beta1'", "]", ",", "beta2", "=", "self", ".", "optimArg", "[", "'beta2'", "]", ",", "epsilon", "=", "self", ".", "optimArg", "[", "'epsilon'", "]", ")", "\n", "", "", "elif", "(", "self", ".", "Optimizer", "==", "'Adagrad'", ")", ":", "\n", "            ", "optimizer", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "self", ".", "LR", ")", "\n", "", "elif", "not", "(", "self", ".", "Optimizer", "==", "'lbfgs'", ")", ":", "\n", "            ", "print", "(", "\"The optimizer is unknown\"", ",", "self", ".", "Optimizer", ")", "\n", "raise", "(", "NotImplementedError", ")", "\n", "\n", "", "if", "self", ".", "Optimizer", "in", "[", "'GradientDescent'", ",", "'Momentum'", ",", "'Adam'", ",", "'Adagrad'", "]", ":", "\n", "            ", "train", "=", "optimizer", ".", "minimize", "(", "loss", ")", "\n", "\n", "", "sess", "=", "tf", ".", "Session", "(", "config", "=", "self", ".", "config", ")", "\n", "init_op", "=", "tf", ".", "group", "(", "tf", ".", "global_variables_initializer", "(", ")", ",", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'Start with the restarts'", ",", "self", ".", "restarts", ",", "' in parallel'", ")", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "sess", ".", "run", "(", "init_op", ")", "\n", "sess", ".", "run", "(", "shuffle_iterator", ".", "initializer", ")", "\n", "if", "self", ".", "normalizeW", ":", "\n", "            ", "sess", ".", "run", "(", "normalize_W", ")", "# Normalize the W vector", "\n", "\n", "# Running the optimization process", "\n", "", "if", "self", ".", "Optimizer", "in", "[", "'GradientDescent'", ",", "'Momentum'", ",", "'Adam'", "]", ":", "\n", "            ", "for", "step", "in", "range", "(", "self", ".", "max_iters", ")", ":", "\n", "                ", "sess", ".", "run", "(", "train", ")", "\n", "\n", "", "", "elif", "self", ".", "Optimizer", "==", "'lbfgs'", ":", "\n", "            ", "maxcor", "=", "30", "\n", "optimizer_kwargs", "=", "{", "'maxiter'", ":", "self", ".", "max_iters", ",", "'maxcor'", ":", "maxcor", "}", "\n", "optimizer", "=", "tf", ".", "contrib", ".", "opt", ".", "ScipyOptimizerInterface", "(", "loss", ",", "method", "=", "'L-BFGS-B'", ",", "\n", "options", "=", "optimizer_kwargs", ")", "\n", "optimizer", ".", "minimize", "(", "sess", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"The optimizer is unknown\"", ",", "self", ".", "Optimizer", ")", "\n", "raise", "(", "NotImplementedError", ")", "\n", "\n", "# Initialization of the loss fct for computing the best couple (W,b) ", "\n", "", "if", "not", "(", "self", ".", "Polyhedral", ")", ":", "# Normal case (linear)            ", "\n", "            ", "loss_value", "=", "np", ".", "zeros", "(", "(", "self", ".", "paral_number_W", "*", "self", ".", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "loss_value", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "sess", ".", "run", "(", "iterator_batch", ".", "initializer", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "loss_value", "+=", "sess", ".", "run", "(", "loss_batch", ")", "\n", "break", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "                ", "break", "\n", "\n", "\n", "", "", "loss_value_min", "=", "[", "]", "\n", "W_best", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "self", ".", "num_features", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "b_best", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "1", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "not", "(", "self", ".", "Polyhedral", ")", "and", "self", ".", "restarts", ">", "0", ":", "\n", "            ", "W_tmp", "=", "sess", ".", "run", "(", "W", ")", "\n", "b_tmp", "=", "sess", ".", "run", "(", "b", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "loss_value_j", "=", "loss_value", "[", "j", ":", ":", "self", ".", "num_classes", "]", "\n", "#                                print('loss_value_j',loss_value_j)", "\n", "argmin", "=", "np", ".", "argmin", "(", "loss_value_j", ",", "axis", "=", "0", ")", "\n", "loss_value_j_min", "=", "np", ".", "min", "(", "loss_value_j", ",", "axis", "=", "0", ")", "\n", "W_best", "[", "j", ",", ":", "]", "=", "W_tmp", "[", "j", "+", "argmin", "*", "self", ".", "num_classes", ",", ":", "]", "\n", "b_best", "[", "j", ",", ":", ",", ":", "]", "=", "b_tmp", "[", "j", "+", "argmin", "*", "self", ".", "num_classes", "]", "\n", "loss_value_min", "+=", "[", "loss_value_j_min", "]", "\n", "if", "(", "self", ".", "C_Searching", ")", "and", "self", ".", "verbose", ":", "\n", "                    ", "print", "(", "'Best C values : '", ",", "C_value_repeat", "[", "j", "+", "argmin", "*", "self", ".", "num_classes", "]", ",", "'class '", ",", "j", ")", "\n", "", "if", "(", "self", ".", "C_Searching", ")", ":", "self", ".", "Cbest", "[", "j", "]", "=", "C_value_repeat", "[", "j", "+", "argmin", "*", "self", ".", "num_classes", "]", "\n", "", "self", ".", "bestloss", "=", "loss_value_min", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\"bestloss\"", ",", "loss_value_min", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"durations after simple training :\"", ",", "str", "(", "t1", "-", "t0", ")", ",", "' s'", ")", "\n", "", "", "else", ":", "\n", "# In the Polyhedral case : we keep all the vectors", "\n", "            ", "W_best", "=", "sess", ".", "run", "(", "W", ")", "\n", "b_best", "=", "sess", ".", "run", "(", "b", ")", "\n", "if", "self", ".", "verbose", ":", "print", "(", "\"loss\"", ",", "loss_value", ")", "\n", "self", ".", "bestloss", "=", "loss_value", "\n", "\n", "## End we save the best w", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "X_", "=", "tf", ".", "identity", "(", "X_", ",", "name", "=", "\"X\"", ")", "\n", "y_", "=", "tf", ".", "identity", "(", "y_", ",", "name", "=", "\"y\"", ")", "\n", "if", "self", ".", "with_scores", ":", "\n", "            ", "scores_", "=", "tf", ".", "identity", "(", "scores_", ",", "name", "=", "\"scores\"", ")", "\n", "\n", "", "if", "self", ".", "Polyhedral", ":", "\n", "            ", "Product", "=", "tf", ".", "add", "(", "tf", ".", "einsum", "(", "'ak,ijk->aij'", ",", "tf", ".", "convert_to_tensor", "(", "W_best", ")", ",", "X_", ")", ",", "b_best", ")", "\n", "Product", "=", "tf", ".", "reshape", "(", "Product", ",", "(", "self", ".", "num_classes", ",", "self", ".", "paral_number_W", ",", "-", "1", ",", "self", ".", "num_rois", ")", ")", "\n", "Prod_best", "=", "tf", ".", "reduce_max", "(", "Product", ",", "axis", "=", "1", ",", "name", "=", "'Prod'", ")", "\n", "\n", "", "else", ":", "# Linear case", "\n", "            ", "Prod_best", "=", "tf", ".", "add", "(", "tf", ".", "einsum", "(", "'ak,ijk->aij'", ",", "tf", ".", "convert_to_tensor", "(", "W_best", ")", ",", "X_", ")", ",", "b_best", ",", "name", "=", "'Prod'", ")", "\n", "\n", "#Integration du score dans ce qui est retourner a la fin", "\n", "", "if", "self", ".", "with_scores", ":", "\n", "            ", "Prod_score", "=", "tf", ".", "multiply", "(", "Prod_best", ",", "tf", ".", "add", "(", "scores_", ",", "self", ".", "epsilon", ")", ",", "name", "=", "'ProdScore'", ")", "\n", "\n", "", "head", ",", "tail", "=", "os", ".", "path", ".", "split", "(", "data_path", ")", "\n", "export_dir_folder", "=", "os", ".", "path", ".", "join", "(", "head", ",", "'MI_max'", ")", "\n", "pathlib", ".", "Path", "(", "export_dir_folder", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "export_dir", "=", "os", ".", "path", ".", "join", "(", "export_dir_folder", ",", "str", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "name_model", "=", "os", ".", "path", ".", "join", "(", "export_dir", ",", "'model'", ")", "\n", "saver", ".", "save", "(", "sess", ",", "name_model", ")", "\n", "\n", "sess", ".", "close", "(", ")", "\n", "if", "self", ".", "verbose", ":", "print", "(", "\"Return MI_max weights\"", ")", "\n", "return", "(", "name_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.get_PositiveRegions": [[597, 599], ["Mimax_model.tf_MI_max.PositiveRegions.copy"], "methods", ["None"], ["", "def", "get_PositiveRegions", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "PositiveRegions", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.get_PositiveRegionsScore": [[600, 602], ["Mimax_model.tf_MI_max.PositiveRegionsScore.copy"], "methods", ["None"], ["", "def", "get_PositiveRegionsScore", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "PositiveRegionsScore", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.get_PositiveExScoreAll": [[603, 605], ["Mimax_model.tf_MI_max.PositiveExScoreAll.copy"], "methods", ["None"], ["", "def", "get_PositiveExScoreAll", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "PositiveExScoreAll", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.get_NegativeRegions": [[606, 608], ["Mimax_model.tf_MI_max.NegativeRegions.copy"], "methods", ["None"], ["", "def", "get_NegativeRegions", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "NegativeRegions", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.get_NegativeRegionsScore": [[609, 611], ["Mimax_model.tf_MI_max.NegativeRegionsScore.copy"], "methods", ["None"], ["", "def", "get_NegativeRegionsScore", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "NegativeRegionsScore", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.get_porportions": [[612, 614], ["None"], "methods", ["None"], ["", "def", "get_porportions", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "np_pos_value", ",", "self", ".", "np_neg_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.get_Cbest": [[615, 617], ["None"], "methods", ["None"], ["", "def", "get_Cbest", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "Cbest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.set_CV_Mode": [[618, 620], ["None"], "methods", ["None"], ["", "def", "set_CV_Mode", "(", "self", ",", "new_CV_Mode", ")", ":", "\n", "        ", "self", ".", "CV_Mode", "=", "new_CV_Mode", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.set_C": [[621, 623], ["None"], "methods", ["None"], ["", "def", "set_C", "(", "self", ",", "new_C", ")", ":", "\n", "        ", "self", ".", "C", "=", "new_C", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.get_bestloss": [[624, 626], ["None"], "methods", ["None"], ["", "def", "get_bestloss", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "bestloss", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model._bytes_feature": [[18, 20], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["def", "_bytes_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model._int64_feature": [[21, 23], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "def", "_int64_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model._int64_feature_reshape": [[24, 26], ["tensorflow.train.Feature", "tensorflow.train.Int64List", "value.reshape"], "function", ["None"], ["", "def", "_int64_feature_reshape", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "value", ".", "reshape", "(", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model._floats_feature": [[27, 29], ["tensorflow.train.Feature", "tensorflow.train.FloatList", "value.reshape"], "function", ["None"], ["", "def", "_floats_feature", "(", "value", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "value", ".", "reshape", "(", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.test_version_sup": [[30, 38], ["version_str.split", "tensorflow.__version__.split", "zip", "float", "float"], "function", ["None"], ["", "def", "test_version_sup", "(", "version_str", ")", ":", "\n", "    ", "version_str_tab", "=", "version_str", ".", "split", "(", "'.'", ")", "\n", "tf_version_teb", "=", "tf", ".", "__version__", ".", "split", "(", "'.'", ")", "\n", "status", "=", "False", "\n", "for", "a", ",", "b", "in", "zip", "(", "tf_version_teb", ",", "version_str_tab", ")", ":", "\n", "        ", "if", "float", "(", "a", ")", ">=", "float", "(", "b", ")", ":", "\n", "            ", "status", "=", "True", "\n", "", "", "return", "(", "status", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.LatexOuput.arrayToLatex": [[11, 34], ["range", "len", "range", "len", "numpy.mean", "numpy.mean"], "function", ["None"], ["def", "arrayToLatex", "(", "a", ",", "per", "=", "False", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "if", "dtype", "==", "np", ".", "float32", ":", "\n", "        ", "if", "per", ":", "\n", "            ", "multi", "=", "100.", "\n", "", "else", ":", "\n", "            ", "multi", "=", "1.", "\n", "", "stra", "=", "' & '", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "            ", "if", "per", ":", "\n", "                ", "stra", "+=", "\"{0:.1f} & \"", ".", "format", "(", "a", "[", "i", "]", "*", "multi", ")", "\n", "", "else", ":", "\n", "                ", "stra", "+=", "\"{0:.3f} & \"", ".", "format", "(", "a", "[", "i", "]", "*", "multi", ")", "\n", "", "", "if", "per", ":", "\n", "            ", "stra", "+=", "\"{0:.1f} \\\\\\ \\hline\"", ".", "format", "(", "np", ".", "mean", "(", "a", ")", "*", "multi", ")", "\n", "", "else", ":", "\n", "            ", "stra", "+=", "\"{0:.3f} \\\\\\ \\hline\"", ".", "format", "(", "np", ".", "mean", "(", "a", ")", "*", "multi", ")", "\n", "", "return", "(", "stra", ")", "\n", "", "elif", "dtype", "==", "str", ":", "\n", "        ", "stra", "=", "' & '", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "            ", "stra", "+=", "a", "[", "i", "]", "+", "\" & \"", "\n", "", "stra", "+=", "\"mean \\\\\\ \\hline\"", "\n", "return", "(", "stra", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.tool_on_Regions.reduce_to_k_regions": [[11, 59], ["numpy.where", "numpy.where", "range", "len", "len", "len", "numpy.hstack", "tf_faster_rcnn.lib.model.nms_wrapper.nms", "numpy.setdiff1d", "numpy.union1d", "len", "numpy.union1d().astype", "roi_scores.reshape", "len", "numpy.union1d", "len"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.nms_wrapper.nms"], ["def", "reduce_to_k_regions", "(", "k", ",", "rois", ",", "roi_scores", ",", "fc7", ",", "new_nms_thresh", ",", "score_threshold", ",", "minimal_surface", ")", ":", "\n", "    ", "\"\"\" Reduce the number of region to k or less \n    but it can even return more than k regions if we go out of the loop on new_nms_thresh\n    \"\"\"", "\n", "\n", "if", "(", "len", "(", "fc7", ")", "<=", "k", ")", ":", "\n", "        ", "return", "(", "rois", ",", "roi_scores", ",", "fc7", ")", "\n", "\n", "", "keep", "=", "np", ".", "where", "(", "roi_scores", ">", "score_threshold", ")", "\n", "rois", "=", "rois", "[", "keep", "[", "0", "]", ",", ":", "]", "\n", "roi_scores", "=", "roi_scores", "[", "keep", "]", "\n", "fc7", "=", "fc7", "[", "keep", "[", "0", "]", ",", ":", "]", "\n", "if", "(", "len", "(", "fc7", ")", "<=", "k", ")", ":", "\n", "        ", "return", "(", "rois", ",", "roi_scores", ",", "fc7", ")", "\n", "\n", "", "width", "=", "rois", "[", ":", ",", "2", "]", "-", "rois", "[", ":", ",", "0", "]", "+", "1", "\n", "height", "=", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", "+", "1", "\n", "surface", "=", "width", "*", "height", "\n", "keep", "=", "np", ".", "where", "(", "surface", ">", "minimal_surface", ")", "\n", "rois", "=", "rois", "[", "keep", "[", "0", "]", ",", ":", "]", "\n", "roi_scores", "=", "roi_scores", "[", "keep", "]", "\n", "fc7", "=", "fc7", "[", "keep", "[", "0", "]", ",", ":", "]", "\n", "if", "(", "len", "(", "fc7", ")", "<=", "k", ")", ":", "\n", "        ", "return", "(", "rois", ",", "roi_scores", ",", "fc7", ")", "\n", "\n", "#new_nms_thresh = 0.0", "\n", "", "keep_all", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "7", ")", ":", "\n", "        ", "rois_plus_scores", "=", "np", ".", "hstack", "(", "(", "rois", "[", ":", ",", "1", ":", "5", "]", ",", "roi_scores", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "tmp_keep", "=", "nms", "(", "rois_plus_scores", ",", "new_nms_thresh", ")", "\n", "\n", "keep_new", "=", "np", ".", "setdiff1d", "(", "tmp_keep", ",", "keep_all", ")", "# Nouveau index", "\n", "\n", "keep_all2", "=", "np", ".", "union1d", "(", "keep_all", ",", "tmp_keep", ")", "# sorted ", "\n", "if", "len", "(", "keep_all2", ")", ">", "k", ":", "\n", "            ", "keep", "=", "np", ".", "union1d", "(", "keep_all", ",", "keep_new", "[", "0", ":", "k", "-", "len", "(", "keep_all", ")", "]", ")", ".", "astype", "(", "int", ")", "\n", "assert", "(", "len", "(", "keep", ")", "==", "k", ")", "\n", "rois", "=", "rois", "[", "keep", ",", ":", "]", "\n", "roi_scores", "=", "roi_scores", "[", "keep", "]", "\n", "fc7", "=", "fc7", "[", "keep", ",", ":", "]", "\n", "assert", "(", "0", "in", "keep", ")", "\n", "return", "(", "rois", ",", "roi_scores", ",", "fc7", ")", "\n", "", "else", ":", "\n", "            ", "keep_all", "=", "keep_all2", "\n", "\n", "", "new_nms_thresh", "+=", "0.1", "\n", "\n", "", "return", "(", "rois", ",", "roi_scores", ",", "fc7", ")", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Custom_Metrics.VOCevalaction": [[11, 28], ["numpy.cumsum", "numpy.cumsum", "numpy.argsort", "numpy.sum"], "function", ["None"], ["def", "VOCevalaction", "(", "y_true", ",", "y_score", ")", ":", "\n", "\n", "    ", "si", "=", "np", ".", "argsort", "(", "y_score", ")", "[", ":", ":", "-", "1", "]", "\n", "tp", "=", "y_true", "[", "si", "]", ">", "0", "\n", "fp", "=", "y_true", "[", "si", "]", "<=", "0", "\n", "\n", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "\n", "#print(fp,tp)", "\n", "\n", "rec", "=", "tp", "/", "np", ".", "sum", "(", "y_true", ">", "0", ")", "\n", "prec", "=", "tp", "/", "(", "fp", "+", "tp", ")", "\n", "\n", "#print(rec,prec)", "\n", "\n", "return", "(", "rec", ",", "prec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Custom_Metrics.ranking_precision_score": [[30, 59], ["numpy.unique", "numpy.sum", "numpy.take", "numpy.sum", "len", "ValueError", "numpy.argsort", "float", "min"], "function", ["None"], ["", "def", "ranking_precision_score", "(", "y_true", ",", "y_score", ",", "k", "=", "10", ")", ":", "\n", "    ", "\"\"\"Precision at rank k\n    Parameters\n    ----------\n    y_true : array-like, shape = [n_samples]\n        Ground truth (true relevance labels).\n    y_score : array-like, shape = [n_samples]\n        Predicted scores.\n    k : int\n        Rank.\n    Returns\n    -------\n    precision @k : float\n    From https://gist.github.com/mblondel/7337391\n    \"\"\"", "\n", "unique_y", "=", "np", ".", "unique", "(", "y_true", ")", "\n", "\n", "if", "len", "(", "unique_y", ")", ">", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Only supported for two relevance levels.\"", ")", "\n", "\n", "", "pos_label", "=", "unique_y", "[", "1", "]", "\n", "n_pos", "=", "np", ".", "sum", "(", "y_true", "==", "pos_label", ")", "\n", "\n", "order", "=", "np", ".", "argsort", "(", "y_score", ")", "[", ":", ":", "-", "1", "]", "\n", "y_true", "=", "np", ".", "take", "(", "y_true", ",", "order", "[", ":", "k", "]", ")", "\n", "n_relevant", "=", "np", ".", "sum", "(", "y_true", "==", "pos_label", ")", "\n", "\n", "# Divide by min(n_pos, k) such that the best achievable score is always 1.0.", "\n", "return", "float", "(", "n_relevant", ")", "/", "min", "(", "n_pos", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Custom_Metrics.computeAveragePrecision": [[60, 93], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "computeAveragePrecision", "(", "recalls", ",", "precisions", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(recalls, precisions, [use_07_metric])\n    Compute VOC AP given precision and recall.\n    If use_07_metric is true, uses the\n    VOC 07 11 point method (default:False).\n    From https://github.com/Azure/ObjectDetectionUsingCntk/blob/34c73c254dd6925a8c09911415d8427d4f02a8e0/helpers.py\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "recalls", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "precisions", "[", "recalls", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrecalls", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "recalls", ",", "[", "1.", "]", ")", ")", "\n", "mprecisions", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "precisions", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mprecisions", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mprecisions", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mprecisions", "[", "i", "-", "1", "]", ",", "mprecisions", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrecalls", "[", "1", ":", "]", "!=", "mrecalls", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrecalls", "[", "i", "+", "1", "]", "-", "mrecalls", "[", "i", "]", ")", "*", "mprecisions", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._bytes_feature": [[70, 72], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["def", "_bytes_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._int64_feature": [[73, 75], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "def", "_int64_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._int64_feature_reshape": [[76, 78], ["tensorflow.train.Feature", "tensorflow.train.Int64List", "value.reshape"], "function", ["None"], ["", "def", "_int64_feature_reshape", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "value", ".", "reshape", "(", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._floats_feature": [[79, 81], ["tensorflow.train.Feature", "tensorflow.train.FloatList", "value.reshape"], "function", ["None"], ["", "def", "_floats_feature", "(", "value", ")", ":", "\n", "  ", "return", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "value", ".", "reshape", "(", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN.vis_detections": [[82, 115], ["matplotlib.subplots", "ax.imshow", "matplotlib.axis", "matplotlib.tight_layout", "numpy.where", "len", "ax.add_patch", "ax.text", "ax.set_title", "matplotlib.draw", "matplotlib.Rectangle", "dict"], "function", ["None"], ["", "def", "vis_detections", "(", "im", ",", "class_name", ",", "dets", ",", "thresh", "=", "0.5", ",", "with_title", "=", "True", ",", "draw", "=", "True", ")", ":", "\n", "    ", "\"\"\"Draw detected bounding boxes.\"\"\"", "\n", "inds", "=", "np", ".", "where", "(", "dets", "[", ":", ",", "-", "1", "]", ">=", "thresh", ")", "[", "0", "]", "\n", "if", "len", "(", "inds", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "", "im", "=", "im", "[", ":", ",", ":", ",", "(", "2", ",", "1", ",", "0", ")", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "ax", ".", "imshow", "(", "im", ",", "aspect", "=", "'equal'", ")", "\n", "for", "i", "in", "inds", ":", "\n", "        ", "bbox", "=", "dets", "[", "i", ",", ":", "4", "]", "\n", "score", "=", "dets", "[", "i", ",", "-", "1", "]", "\n", "\n", "ax", ".", "add_patch", "(", "\n", "plt", ".", "Rectangle", "(", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "\n", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "\n", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ",", "fill", "=", "False", ",", "\n", "edgecolor", "=", "'red'", ",", "linewidth", "=", "3.5", ")", "\n", ")", "\n", "ax", ".", "text", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ",", "\n", "'{:s} {:.3f}'", ".", "format", "(", "class_name", ",", "score", ")", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "'blue'", ",", "alpha", "=", "0.5", ")", ",", "\n", "fontsize", "=", "14", ",", "color", "=", "'white'", ")", "\n", "\n", "", "if", "with_title", ":", "\n", "        ", "ax", ".", "set_title", "(", "(", "'{} detections with '", "\n", "'p({} | box) >= {:.1f}'", ")", ".", "format", "(", "class_name", ",", "class_name", ",", "\n", "thresh", ")", ",", "\n", "fontsize", "=", "14", ")", "\n", "", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "draw", ":", "\n", "        ", "plt", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN.vis_detections_list": [[116, 172], ["matplotlib.subplots", "ax.imshow", "zip", "matplotlib.axis", "matplotlib.tight_layout", "matplotlib.draw", "print", "ax.add_patch", "numpy.where", "matplotlib.Rectangle", "len", "ax.add_patch", "ax.text", "len", "len", "matplotlib.Rectangle", "dict", "numpy.where", "numpy.array"], "function", ["None"], ["", "", "def", "vis_detections_list", "(", "im", ",", "class_name_list", ",", "dets_list", ",", "thresh", "=", "0.5", ",", "list_class", "=", "None", ",", "Correct", "=", "None", ")", ":", "\n", "    ", "\"\"\"Draw detected bounding boxes.\"\"\"", "\n", "\n", "list_colors", "=", "[", "'#e6194b'", ",", "'#3cb44b'", ",", "'#ffe119'", ",", "'#0082c8'", ",", "'#f58231'", ",", "'#911eb4'", ",", "'#46f0f0'", ",", "'#f032e6'", ",", "\n", "'#d2f53c'", ",", "'#fabebe'", ",", "'#008080'", ",", "'#e6beff'", ",", "'#aa6e28'", ",", "'#fffac8'", ",", "'#800000'", ",", "\n", "'#aaffc3'", ",", "'#808000'", ",", "'#ffd8b1'", ",", "'#000080'", ",", "'#808080'", ",", "'#FFFFFF'", ",", "'#000000'", "]", "\n", "i_color", "=", "0", "\n", "im", "=", "im", "[", ":", ",", ":", ",", "(", "2", ",", "1", ",", "0", ")", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "ax", ".", "imshow", "(", "im", ",", "aspect", "=", "'equal'", ")", "\n", "\n", "for", "class_name", ",", "dets", "in", "zip", "(", "class_name_list", ",", "dets_list", ")", ":", "\n", "#        print(class_name,np.array(dets).shape)", "\n", "        ", "inds", "=", "np", ".", "where", "(", "dets", "[", ":", ",", "-", "1", "]", ">=", "thresh", ")", "[", "0", "]", "\n", "if", "not", "(", "len", "(", "inds", ")", "==", "0", ")", ":", "\n", "            ", "if", "list_class", "is", "None", ":", "\n", "                ", "color", "=", "list_colors", "[", "i_color", "]", "\n", "i_color", "=", "(", "(", "i_color", "+", "1", ")", "%", "len", "(", "list_colors", ")", ")", "\n", "", "else", ":", "\n", "                ", "i_color", "=", "np", ".", "where", "(", "np", ".", "array", "(", "list_class", ")", "==", "class_name", ")", "[", "0", "]", "[", "0", "]", "%", "len", "(", "list_colors", ")", "\n", "color", "=", "list_colors", "[", "i_color", "]", "\n", "", "for", "i", "in", "inds", ":", "\n", "                ", "bbox", "=", "dets", "[", "i", ",", ":", "4", "]", "# Boxes are score, x1,y1,x2,y2", "\n", "score", "=", "dets", "[", "i", ",", "-", "1", "]", "\n", "ax", ".", "add_patch", "(", "\n", "plt", ".", "Rectangle", "(", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "\n", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "\n", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ",", "fill", "=", "False", ",", "\n", "edgecolor", "=", "color", ",", "linewidth", "=", "3.5", ")", "# Need (x,y) lower corner then width, height", "\n", ")", "\n", "ax", ".", "text", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ",", "\n", "'{:s} {:.3f}'", ".", "format", "(", "class_name", ",", "score", ")", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "color", ",", "alpha", "=", "0.5", ")", ",", "\n", "fontsize", "=", "14", ",", "color", "=", "'white'", ")", "\n", "\n", "", "", "", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "not", "(", "Correct", "is", "None", ")", ":", "\n", "        ", "print", "(", "\"This have never been tested\"", ")", "\n", "# In this case, we will draw a rectangle green or red around the image", "\n", "if", "Correct", "==", "'Correct'", ":", "\n", "            ", "color", "=", "'g'", "\n", "", "elif", "Correct", "==", "'Incorrect'", ":", "\n", "            ", "color", "=", "'r'", "\n", "", "elif", "Correct", "==", "'Missing'", ":", "\n", "            ", "color", "=", "'o'", "\n", "", "elif", "Correct", "==", "'MultipleDetect'", ":", "\n", "            ", "color", "=", "'p'", "\n", "", "linewidth", "=", "10", "\n", "x", "=", "linewidth", "\n", "y", "=", "linewidth", "\n", "h", "=", "im", ".", "shape", "[", "0", "]", "-", "x", "\n", "w", "=", "im", ".", "shape", "[", "1", "]", "-", "y", "\n", "ax", ".", "add_patch", "(", "plt", ".", "Rectangle", "(", "(", "x", ",", "y", ")", ",", "h", ",", "w", ",", "fill", "=", "False", ",", "\n", "edgecolor", "=", "color", ",", "linewidth", "=", "linewidth", ")", ")", "\n", "", "plt", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN.Compute_Faster_RCNN_features": [[175, 347], ["IMDB.get_database", "tensorflow.reset_default_graph", "len", "pathlib.Path().mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tensorflow.ConfigProto", "tensorflow.Session", "tf_faster_rcnn.lib.nets.resnet_v1.resnetv1.create_architecture", "tensorflow.train.Saver", "tf.train.Saver.restore", "pathlib.Path().mkdir", "enumerate", "print", "NETS_Pretrained[].replace", "os.path.exists", "os.path.exists", "print", "Exception", "tf_faster_rcnn.lib.nets.vgg16.vgg16", "os.path.join", "os.path.join", "tensorflow.python_io.TFRecordWriter", "tf_faster_rcnn.lib.model.test.TL_im_detect", "tensorflow.train.Features", "tensorflow.train.Example", "dict_writers[].close", "pathlib.Path", "tf_faster_rcnn.lib.nets.resnet_v1.resnetv1", "str", "pathlib.Path", "os.path.join", "os.path.join", "cv2.imread", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "tool_on_Regions.reduce_to_k_regions", "range", "range", "tf_faster_rcnn.lib.nets.resnet_v1.resnetv1", "print", "os.path.join", "os.path.join", "print", "len", "numpy.repeat", "numpy.repeat", "numpy.repeat", "int", "int", "dict_writers[].write", "dict_writers[].write", "os.path.splitext", "os.path.splitext", "FasterRCNN._int64_feature", "FasterRCNN._int64_feature", "FasterRCNN._int64_feature", "FasterRCNN._int64_feature", "FasterRCNN._int64_feature", "FasterRCNN._floats_feature", "FasterRCNN._floats_feature", "FasterRCNN._floats_feature", "FasterRCNN._floats_feature", "FasterRCNN._bytes_feature", "tf.train.Example.SerializeToString", "dict_writers[].write", "tf.train.Example.SerializeToString", "dict_writers[].write", "len", "str.encode", "tf.train.Example.SerializeToString", "dict_writers[].write", "tf.train.Example.SerializeToString", "int", "tf.train.Example.SerializeToString", "str", "str"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.None.IMDB.get_database", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.create_architecture", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.TL_im_detect", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.tool_on_Regions.reduce_to_k_regions", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._int64_feature", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._int64_feature", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._int64_feature", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._int64_feature", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._int64_feature", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._floats_feature", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._floats_feature", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._floats_feature", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._floats_feature", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN._bytes_feature"], ["", "def", "Compute_Faster_RCNN_features", "(", "demonet", "=", "'res152_COCO'", ",", "nms_thresh", "=", "0.7", ",", "database", "=", "'IconArt_v1'", "\n", ",", "verbose", "=", "True", ",", "k_regions", "=", "300", "\n", ",", "path_data", "=", "'data'", ",", "path_output", "=", "'output'", ",", "path_to_model", "=", "'models'", ")", ":", "\n", "    ", "\"\"\"\n    @param : demonet : the backbone net used it can be 'vgg16_VOC07',\n        'vgg16_VOC12','vgg16_COCO','res101_VOC12','res101_COCO','res152_COCO'\n    @param : nms_thresh : the nms threshold on the Region Proposal Network\n    @param : database name of the dataset\n    @param : k_regions : number of region per image\n    @param : path_data path to the dataset\n    @param : path_output path to the output model \n    @param : path_to_model path to the pretarined model\n    \"\"\"", "\n", "\n", "item_name", ",", "path_to_img", ",", "classes", ",", "ext", ",", "num_classes", ",", "str_val", ",", "df_label", "=", "get_database", "(", "database", ",", "default_path_imdb", "=", "path_data", ")", "\n", "\n", "\n", "N", "=", "1", "\n", "extL2", "=", "''", "\n", "savedstr", "=", "'_all'", "\n", "layer", "=", "'fc7'", "\n", "tf", ".", "reset_default_graph", "(", ")", "# Needed to use different nets one after the other", "\n", "if", "verbose", ":", "print", "(", "demonet", ")", "\n", "if", "'VOC'", "in", "demonet", ":", "\n", "        ", "CLASSES", "=", "CLASSES_SET", "[", "'VOC'", "]", "\n", "anchor_scales", "=", "[", "8", ",", "16", ",", "32", "]", "# It is needed for the right net architecture !! ", "\n", "", "elif", "'COCO'", "in", "demonet", ":", "\n", "        ", "CLASSES", "=", "CLASSES_SET", "[", "'COCO'", "]", "\n", "anchor_scales", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", "# we  use  3  aspect  ratios  and  4  scales (adding 64**2)", "\n", "", "nbClassesDemoNet", "=", "len", "(", "CLASSES", ")", "\n", "pathlib", ".", "Path", "(", "path_to_model", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "tfmodelpkl", "=", "os", ".", "path", ".", "join", "(", "path_to_model", ",", "NETS_Pretrained", "[", "demonet", "]", ".", "replace", "(", "'ckpt'", ",", "'pkl'", ")", ")", "\n", "tfmodel", "=", "os", ".", "path", ".", "join", "(", "path_to_model", ",", "NETS_Pretrained", "[", "demonet", "]", ")", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "tfmodelpkl", ")", ")", ":", "\n", "        ", "print", "(", "\"You have to download the Faster RCNN pretrained, see the README file. The code will failed\"", ")", "\n", "raise", "Exception", "(", "'Model not found.'", ")", "\n", "\n", "", "tfconfig", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "tfconfig", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "# init session", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "tfconfig", ")", "\n", "\n", "# load network", "\n", "if", "'vgg16'", "in", "demonet", ":", "\n", "      ", "net", "=", "vgg16", "(", ")", "\n", "size_output", "=", "4096", "\n", "", "elif", "'res101'", "in", "demonet", ":", "\n", "      ", "net", "=", "resnetv1", "(", "num_layers", "=", "101", ")", "\n", "size_output", "=", "2048", "\n", "", "elif", "'res152'", "in", "demonet", ":", "\n", "      ", "net", "=", "resnetv1", "(", "num_layers", "=", "152", ")", "\n", "size_output", "=", "2048", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "\n", "\n", "", "net", ".", "create_architecture", "(", "\"TEST\"", ",", "nbClassesDemoNet", ",", "\n", "tag", "=", "'default'", ",", "anchor_scales", "=", "anchor_scales", ",", "\n", "modeTL", "=", "True", ",", "nms_thresh", "=", "nms_thresh", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "tfmodel", ")", "\n", "features_resnet_dict", "=", "{", "}", "\n", "\n", "sets", "=", "[", "'trainval'", ",", "'test'", "]", "\n", "\n", "if", "k_regions", "==", "300", ":", "\n", "        ", "k_per_bag_str", "=", "''", "\n", "", "else", ":", "\n", "        ", "k_per_bag_str", "=", "'_k'", "+", "str", "(", "k_regions", ")", "\n", "", "dict_writers", "=", "{", "}", "\n", "pathlib", ".", "Path", "(", "path_output", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "for", "set_str", "in", "sets", ":", "\n", "        ", "name_pkl_all_features", "=", "os", ".", "path", ".", "join", "(", "path_output", ",", "'FasterRCNN_'", "+", "demonet", "+", "'_'", "+", "database", "+", "'_N'", "+", "str", "(", "N", ")", "+", "extL2", "+", "'_TLforMIL_nms_'", "+", "str", "(", "nms_thresh", ")", "+", "savedstr", "+", "k_per_bag_str", "+", "'_'", "+", "set_str", "+", "'.tfrecords'", ")", "\n", "dict_writers", "[", "set_str", "]", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "name_pkl_all_features", ")", "\n", "\n", "", "Itera", "=", "1000", "\n", "for", "i", ",", "name_img", "in", "enumerate", "(", "df_label", "[", "item_name", "]", ")", ":", "\n", "\n", "        ", "if", "i", "%", "Itera", "==", "0", ":", "\n", "            ", "if", "verbose", ":", "print", "(", "i", ",", "name_img", ")", "\n", "", "if", "database", "in", "[", "'IconArt_v1'", ",", "'watercolor'", ",", "'comic'", ",", "'clipart'", ",", "'CASPApaintings'", "]", ":", "\n", "            ", "complet_name", "=", "os", ".", "path", ".", "join", "(", "path_to_img", ",", "name_img", "+", "'.jpg'", ")", "\n", "name_sans_ext", "=", "name_img", "\n", "", "elif", "database", "==", "'PeopleArt'", ":", "\n", "            ", "complet_name", "=", "os", ".", "path", ".", "join", "(", "path_to_img", ",", "name_img", ")", "\n", "name_sans_ext", "=", "os", ".", "path", ".", "splitext", "(", "name_img", ")", "[", "0", "]", "\n", "", "try", ":", "\n", "            ", "im", "=", "cv2", ".", "imread", "(", "complet_name", ")", "\n", "height", "=", "im", ".", "shape", "[", "0", "]", "\n", "width", "=", "im", ".", "shape", "[", "1", "]", "\n", "", "except", "AttributeError", ":", "\n", "            ", "print", "(", "complet_name", ",", "'is missing'", ")", "\n", "continue", "\n", "", "cls_score", ",", "cls_prob", ",", "bbox_pred", ",", "rois", ",", "roi_scores", ",", "fc7", ",", "pool5", "=", "TL_im_detect", "(", "sess", ",", "net", ",", "im", ")", "# Arguments: im (ndarray): a color image in BGR order", "\n", "\n", "if", "k_regions", "==", "300", ":", "\n", "            ", "num_regions", "=", "fc7", ".", "shape", "[", "0", "]", "\n", "num_features", "=", "fc7", ".", "shape", "[", "1", "]", "\n", "dim1_rois", "=", "rois", ".", "shape", "[", "1", "]", "\n", "classes_vectors", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "1", ")", ")", "\n", "rois_tmp", "=", "np", ".", "zeros", "(", "(", "k_regions", ",", "5", ")", ")", "\n", "roi_scores_tmp", "=", "np", ".", "zeros", "(", "(", "k_regions", ",", "1", ")", ")", "\n", "fc7_tmp", "=", "np", ".", "zeros", "(", "(", "k_regions", ",", "size_output", ")", ")", "\n", "rois_tmp", "[", "0", ":", "rois", ".", "shape", "[", "0", "]", ",", "0", ":", "rois", ".", "shape", "[", "1", "]", "]", "=", "rois", "\n", "roi_scores_tmp", "[", "0", ":", "roi_scores", ".", "shape", "[", "0", "]", ",", "0", ":", "roi_scores", ".", "shape", "[", "1", "]", "]", "=", "roi_scores", "\n", "fc7_tmp", "[", "0", ":", "fc7", ".", "shape", "[", "0", "]", ",", "0", ":", "fc7", ".", "shape", "[", "1", "]", "]", "=", "fc7", "\n", "rois", "=", "rois_tmp", "\n", "roi_scores", "=", "roi_scores_tmp", "\n", "fc7", "=", "fc7_tmp", "\n", "", "else", ":", "\n", "# We will select only k_regions ", "\n", "            ", "new_nms_thresh", "=", "0.0", "\n", "score_threshold", "=", "0.1", "\n", "minimal_surface", "=", "36", "*", "36", "\n", "\n", "num_regions", "=", "k_regions", "\n", "num_features", "=", "fc7", ".", "shape", "[", "1", "]", "\n", "dim1_rois", "=", "rois", ".", "shape", "[", "1", "]", "\n", "classes_vectors", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "1", ")", ")", "\n", "rois_reduce", ",", "roi_scores_reduce", ",", "fc7_reduce", "=", "reduce_to_k_regions", "(", "k_regions", ",", "rois", ",", "roi_scores", ",", "fc7", ",", "new_nms_thresh", ",", "score_threshold", ",", "minimal_surface", ")", "\n", "if", "(", "len", "(", "fc7_reduce", ")", ">=", "k_regions", ")", ":", "\n", "                ", "rois", "=", "rois_reduce", "[", "0", ":", "k_regions", ",", ":", "]", "\n", "roi_scores", "=", "roi_scores_reduce", "[", "0", ":", "k_regions", ",", "]", "\n", "fc7", "=", "fc7_reduce", "[", "0", ":", "k_regions", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "number_repeat", "=", "k_regions", "//", "len", "(", "fc7_reduce", ")", "+", "1", "\n", "f_repeat", "=", "np", ".", "repeat", "(", "fc7_reduce", ",", "number_repeat", ",", "axis", "=", "0", ")", "\n", "roi_scores_repeat", "=", "np", ".", "repeat", "(", "roi_scores_reduce", ",", "number_repeat", ",", "axis", "=", "0", ")", "\n", "rois_reduce_repeat", "=", "np", ".", "repeat", "(", "rois_reduce", ",", "number_repeat", ",", "axis", "=", "0", ")", "\n", "rois", "=", "rois_reduce_repeat", "[", "0", ":", "k_regions", ",", ":", "]", "\n", "roi_scores", "=", "roi_scores_repeat", "[", "0", ":", "k_regions", ",", "]", "\n", "fc7", "=", "f_repeat", "[", "0", ":", "k_regions", ",", ":", "]", "\n", "\n", "", "", "if", "database", "in", "[", "'PeopleArt'", ",", "'watercolor'", ",", "'comic'", ",", "'clipart'", ",", "'CASPApaintings'", "]", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "value", "=", "int", "(", "(", "int", "(", "df_label", "[", "classes", "[", "j", "]", "]", "[", "i", "]", ")", "+", "1.", ")", "/", "2.", ")", "\n", "#print(value)", "\n", "classes_vectors", "[", "j", "]", "=", "value", "\n", "", "", "if", "database", "in", "[", "'IconArt_v1'", "]", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "value", "=", "int", "(", "df_label", "[", "classes", "[", "j", "]", "]", "[", "i", "]", ")", "\n", "classes_vectors", "[", "j", "]", "=", "value", "\n", "", "", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "{", "\n", "'height'", ":", "_int64_feature", "(", "height", ")", ",", "\n", "'width'", ":", "_int64_feature", "(", "width", ")", ",", "\n", "'num_regions'", ":", "_int64_feature", "(", "num_regions", ")", ",", "\n", "'num_features'", ":", "_int64_feature", "(", "num_features", ")", ",", "\n", "'dim1_rois'", ":", "_int64_feature", "(", "dim1_rois", ")", ",", "\n", "'rois'", ":", "_floats_feature", "(", "rois", ")", ",", "\n", "'roi_scores'", ":", "_floats_feature", "(", "roi_scores", ")", ",", "\n", "'fc7'", ":", "_floats_feature", "(", "fc7", ")", ",", "\n", "'label'", ":", "_floats_feature", "(", "classes_vectors", ")", ",", "\n", "'name_img'", ":", "_bytes_feature", "(", "str", ".", "encode", "(", "name_sans_ext", ")", ")", "}", ")", "\n", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "features", ")", "\n", "\n", "if", "database", "==", "'PeopleArt'", ":", "\n", "            ", "if", "(", "df_label", ".", "loc", "[", "df_label", "[", "item_name", "]", "==", "name_img", "]", "[", "'set'", "]", "==", "'train'", ")", ".", "any", "(", ")", ":", "\n", "                ", "dict_writers", "[", "'trainval'", "]", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "", "elif", "(", "df_label", ".", "loc", "[", "df_label", "[", "item_name", "]", "==", "name_img", "]", "[", "'set'", "]", "==", "'val'", ")", ".", "any", "(", ")", ":", "\n", "                ", "dict_writers", "[", "'trainval'", "]", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "", "elif", "(", "df_label", ".", "loc", "[", "df_label", "[", "item_name", "]", "==", "name_img", "]", "[", "'set'", "]", "==", "'test'", ")", ".", "any", "(", ")", ":", "\n", "                ", "dict_writers", "[", "'test'", "]", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "", "", "if", "database", "in", "[", "'watercolor'", ",", "'IconArt_v1'", ",", "'comic'", ",", "'clipart'", ",", "'CASPApaintings'", "]", "or", "'IconArt'", "in", "database", ":", "\n", "            ", "if", "(", "df_label", ".", "loc", "[", "df_label", "[", "item_name", "]", "==", "name_img", "]", "[", "'set'", "]", "==", "'train'", ")", ".", "any", "(", ")", ":", "\n", "                ", "dict_writers", "[", "'trainval'", "]", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "", "elif", "(", "df_label", ".", "loc", "[", "df_label", "[", "item_name", "]", "==", "name_img", "]", "[", "'set'", "]", "==", "'test'", ")", ".", "any", "(", ")", ":", "\n", "                ", "dict_writers", "[", "'test'", "]", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "\n", "", "", "", "for", "set_str", "in", "sets", ":", "\n", "        ", "dict_writers", "[", "set_str", "]", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.parser_w_mei_reduce": [[77, 95], ["tensorflow.parse_single_example", "tensorflow.tile", "tensorflow.reshape", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "function", ["None"], ["def", "parser_w_mei_reduce", "(", "record", ",", "num_rois", "=", "300", ",", "num_features", "=", "2048", ")", ":", "\n", "# Perform additional preprocessing on the parsed data.", "\n", "    ", "keys_to_features", "=", "{", "\n", "'score_mei'", ":", "tf", ".", "FixedLenFeature", "(", "[", "1", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'mei'", ":", "tf", ".", "FixedLenFeature", "(", "[", "1", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'rois'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "*", "5", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'fc7'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "*", "num_features", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'fc7_selected'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "*", "num_features", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "1", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'name_img'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "}", "\n", "parsed", "=", "tf", ".", "parse_single_example", "(", "record", ",", "keys_to_features", ")", "\n", "\n", "# Cast label data into int32", "\n", "label", "=", "parsed", "[", "'label'", "]", "\n", "label_300", "=", "tf", ".", "tile", "(", "label", ",", "[", "num_rois", "]", ")", "\n", "fc7_selected", "=", "parsed", "[", "'fc7_selected'", "]", "\n", "fc7_selected", "=", "tf", ".", "reshape", "(", "fc7_selected", ",", "[", "num_rois", ",", "num_features", "]", ")", "\n", "return", "fc7_selected", ",", "label_300", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.parser_w_rois": [[96, 122], ["tensorflow.parse_single_example", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "function", ["None"], ["", "def", "parser_w_rois", "(", "record", ",", "classe_index", "=", "0", ",", "num_classes", "=", "10", ",", "num_rois", "=", "300", ",", "num_features", "=", "2048", ",", "\n", "dim_rois", "=", "5", ")", ":", "\n", "# Perform additional preprocessing on the parsed data.", "\n", "    ", "keys_to_features", "=", "{", "\n", "'height'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'width'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'num_regions'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'num_features'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'dim1_rois'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'rois'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "*", "dim_rois", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'roi_scores'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'fc7'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "*", "num_features", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_classes", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'name_img'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "}", "\n", "parsed", "=", "tf", ".", "parse_single_example", "(", "record", ",", "keys_to_features", ")", "\n", "\n", "# Cast label data into int32", "\n", "label", "=", "parsed", "[", "'label'", "]", "\n", "name_img", "=", "parsed", "[", "'name_img'", "]", "\n", "label", "=", "tf", ".", "slice", "(", "label", ",", "[", "classe_index", "]", ",", "[", "1", "]", ")", "\n", "label", "=", "tf", ".", "squeeze", "(", "label", ")", "# To get a vector one dimension", "\n", "fc7", "=", "parsed", "[", "'fc7'", "]", "\n", "fc7", "=", "tf", ".", "reshape", "(", "fc7", ",", "[", "num_rois", ",", "num_features", "]", ")", "\n", "rois", "=", "parsed", "[", "'rois'", "]", "\n", "rois", "=", "tf", ".", "reshape", "(", "rois", ",", "[", "num_rois", ",", "dim_rois", "]", ")", "\n", "return", "fc7", ",", "rois", ",", "label", ",", "name_img", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.parser_w_rois_all_class": [[123, 164], ["tensorflow.parse_single_example", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "function", ["None"], ["", "def", "parser_w_rois_all_class", "(", "record", ",", "num_classes", "=", "10", ",", "num_rois", "=", "300", ",", "num_features", "=", "2048", ",", "\n", "with_rois_scores", "=", "False", ",", "dim_rois", "=", "5", ")", ":", "\n", "# Perform additional preprocessing on the parsed data.", "\n", "        ", "if", "not", "(", "with_rois_scores", ")", ":", "\n", "            ", "keys_to_features", "=", "{", "\n", "'rois'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "*", "dim_rois", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'fc7'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "*", "num_features", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_classes", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'name_img'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "}", "\n", "", "else", ":", "\n", "            ", "keys_to_features", "=", "{", "\n", "'roi_scores'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'rois'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "*", "dim_rois", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'fc7'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "*", "num_features", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_classes", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'name_img'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "}", "\n", "#        keys_to_features={", "\n", "#                    'height': tf.FixedLenFeature([], tf.int64),", "\n", "#                    'width': tf.FixedLenFeature([], tf.int64),", "\n", "#                    'num_regions':  tf.FixedLenFeature([], tf.int64),", "\n", "#                    'num_features':  tf.FixedLenFeature([], tf.int64),", "\n", "#                    'dim1_rois':  tf.FixedLenFeature([], tf.int64),", "\n", "#                    'rois': tf.FixedLenFeature([5*num_rois],tf.float32),", "\n", "#                    'roi_scores':tf.FixedLenFeature([num_rois],tf.float32),", "\n", "#                    'fc7': tf.FixedLenFeature([num_rois*num_features],tf.float32),", "\n", "#                    'label' : tf.FixedLenFeature([num_classes],tf.float32),", "\n", "#                    'name_img' : tf.FixedLenFeature([],tf.string)}", "\n", "\n", "", "parsed", "=", "tf", ".", "parse_single_example", "(", "record", ",", "keys_to_features", ")", "\n", "# Cast label data into int32", "\n", "label", "=", "parsed", "[", "'label'", "]", "\n", "name_img", "=", "parsed", "[", "'name_img'", "]", "\n", "fc7", "=", "parsed", "[", "'fc7'", "]", "\n", "fc7", "=", "tf", ".", "reshape", "(", "fc7", ",", "[", "num_rois", ",", "num_features", "]", ")", "\n", "rois", "=", "parsed", "[", "'rois'", "]", "\n", "rois", "=", "tf", ".", "reshape", "(", "rois", ",", "[", "num_rois", ",", "dim_rois", "]", ")", "\n", "if", "not", "(", "with_rois_scores", ")", ":", "\n", "            ", "return", "fc7", ",", "rois", ",", "label", ",", "name_img", "\n", "", "else", ":", "\n", "            ", "roi_scores", "=", "parsed", "[", "'roi_scores'", "]", "\n", "return", "fc7", ",", "rois", ",", "roi_scores", ",", "label", ",", "name_img", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.parser_all_elt_all_class": [[165, 189], ["tensorflow.parse_single_example", "keys_to_features.keys", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.reshape", "tensorflow.reshape"], "function", ["None"], ["", "", "def", "parser_all_elt_all_class", "(", "record", ",", "num_classes", "=", "10", ",", "num_rois", "=", "300", ",", "num_features", "=", "2048", ",", "\n", "dim_rois", "=", "5", ",", "noReshape", "=", "True", ")", ":", "\n", "    ", "keys_to_features", "=", "{", "\n", "'height'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'width'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'num_regions'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'num_features'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'dim1_rois'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'rois'", ":", "tf", ".", "FixedLenFeature", "(", "[", "dim_rois", "*", "num_rois", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'roi_scores'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'fc7'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "*", "num_features", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_classes", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'name_img'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "}", "\n", "\n", "parsed", "=", "tf", ".", "parse_single_example", "(", "record", ",", "keys_to_features", ")", "\n", "# Cast label data into int32", "\n", "list_elt", "=", "[", "]", "\n", "for", "key", "in", "keys_to_features", ".", "keys", "(", ")", ":", "\n", "          ", "list_elt", "+=", "[", "parsed", "[", "key", "]", "]", "\n", "", "if", "not", "(", "noReshape", ")", ":", "\n", "            ", "list_elt", "[", "7", "]", "=", "tf", ".", "reshape", "(", "list_elt", "[", "7", "]", ",", "[", "num_rois", ",", "num_features", "]", ")", "\n", "list_elt", "[", "5", "]", "=", "tf", ".", "reshape", "(", "list_elt", "[", "5", "]", ",", "[", "num_rois", ",", "dim_rois", "]", ")", "\n", "\n", "", "return", "(", "list_elt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.parser_minimal_elt_all_class": [[190, 209], ["tensorflow.parse_single_example", "keys_to_features.keys", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.reshape", "tensorflow.reshape"], "function", ["None"], ["", "def", "parser_minimal_elt_all_class", "(", "record", ",", "num_classes", "=", "10", ",", "num_rois", "=", "300", ",", "num_features", "=", "2048", ",", "\n", "dim_rois", "=", "5", ",", "noReshape", "=", "True", ")", ":", "\n", "    ", "keys_to_features", "=", "{", "\n", "'rois'", ":", "tf", ".", "FixedLenFeature", "(", "[", "dim_rois", "*", "num_rois", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'roi_scores'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'fc7'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_rois", "*", "num_features", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'label'", ":", "tf", ".", "FixedLenFeature", "(", "[", "num_classes", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'name_img'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "}", "\n", "\n", "parsed", "=", "tf", ".", "parse_single_example", "(", "record", ",", "keys_to_features", ")", "\n", "# Cast label data into int32", "\n", "list_elt", "=", "[", "]", "\n", "for", "key", "in", "keys_to_features", ".", "keys", "(", ")", ":", "\n", "          ", "list_elt", "+=", "[", "parsed", "[", "key", "]", "]", "\n", "", "if", "not", "(", "noReshape", ")", ":", "\n", "            ", "list_elt", "[", "7", "]", "=", "tf", ".", "reshape", "(", "list_elt", "[", "2", "]", ",", "[", "num_rois", ",", "num_features", "]", ")", "\n", "list_elt", "[", "5", "]", "=", "tf", ".", "reshape", "(", "list_elt", "[", "0", "]", ",", "[", "num_rois", ",", "dim_rois", "]", ")", "\n", "\n", "", "return", "(", "list_elt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.run_and_eval_MImax": [[211, 570], ["IMDB.get_database", "tensorflow.ConfigProto", "os.path.join", "os.path.join", "pathlib.Path().mkdir", "os.path.join", "os.path.join", "TL_MIL.tfR_evaluation_parall", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "len", "len", "print", "os.path.join", "os.path.join", "min", "print", "tf_faster_rcnn.lib.datasets.factory.get_imdb", "tf_faster_rcnn.lib.datasets.factory.get_imdb.set_force_dont_use_07_metric", "len", "Mimax_model.tf_MI_max", "Mimax_model.tf_MI_max.fit_MI_max_tfrecords", "Mimax_model.tf_MI_max.get_porportions", "sklearn.metrics.average_precision_score", "print", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score", "print", "Custom_Metrics.ranking_precision_score", "open", "pickle.dump", "os.path.join", "os.path.join", "len", "name_all_test.astype.astype", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tf_faster_rcnn.lib.datasets.factory.get_imdb.evaluate_detections", "print", "print", "LatexOuput.arrayToLatex", "str", "os.path.isfile", "os.path.isfile", "print", "FasterRCNN.Compute_Faster_RCNN_features", "numpy.sign", "str", "str", "str", "str", "str().replace", "pathlib.Path", "os.path.isfile", "os.path.isfile", "print", "open", "pickle.load", "tf_faster_rcnn.lib.datasets.factory.get_imdb", "tf_faster_rcnn.lib.datasets.factory.get_imdb.set_force_dont_use_07_metric", "len", "range", "os.path.isfile", "os.path.isfile", "time.time", "time.time", "print", "open", "pickle.dump", "print", "numpy.array", "open", "pickle.dump", "tf_faster_rcnn.lib.datasets.factory.get_imdb.image_path_at", "range", "open", "pickle.dump", "LatexOuput.arrayToLatex", "tf_faster_rcnn.lib.datasets.factory.get_imdb.evaluate_localisation_ovthresh", "print", "print", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "str().replace", "print", "tf_faster_rcnn.lib.datasets.factory.get_imdb", "tf_faster_rcnn.lib.datasets.factory.get_imdb.set_force_dont_use_07_metric", "len", "range", "str", "range", "name_img_wt_ext.split", "numpy.where", "len", "print", "print", "numpy.hstack", "LatexOuput.arrayToLatex", "str", "tf_faster_rcnn.lib.datasets.factory.get_imdb", "tf_faster_rcnn.lib.datasets.factory.get_imdb.set_force_dont_use_07_metric", "len", "range", "imdb.image_path_at.split", "name_img_wt_ext.split", "len", "range", "str", "tf_faster_rcnn.lib.datasets.factory.get_imdb", "tf_faster_rcnn.lib.datasets.factory.get_imdb.set_force_dont_use_07_metric", "len", "imdb.image_path_at.split", "numpy.array", "numpy.sort", "tf_faster_rcnn.lib.datasets.factory.get_imdb", "tf_faster_rcnn.lib.datasets.factory.get_imdb.set_force_dont_use_07_metric", "len", "len", "imdb.image_path_at.split", "range", "numpy.where", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.None.IMDB.get_database", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.tfR_evaluation_parall", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_imdb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.set_force_dont_use_07_metric", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.fit_MI_max_tfrecords", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Mimax_model.tf_MI_max.get_porportions", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Custom_Metrics.ranking_precision_score", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.evaluate_detections", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.LatexOuput.arrayToLatex", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN.Compute_Faster_RCNN_features", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_imdb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.set_force_dont_use_07_metric", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.image_path_at", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.LatexOuput.arrayToLatex", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.evaluate_localisation_ovthresh", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_imdb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.set_force_dont_use_07_metric", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.LatexOuput.arrayToLatex", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_imdb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.set_force_dont_use_07_metric", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_imdb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.set_force_dont_use_07_metric", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_imdb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.set_force_dont_use_07_metric"], ["", "def", "run_and_eval_MImax", "(", "demonet", "=", "'res152_COCO'", ",", "database", "=", "'IconArt_v1'", ",", "ReDo", "=", "True", ",", "PlotRegions", "=", "False", ",", "\n", "verbose", "=", "True", ",", "k_per_bag", "=", "300", ",", "\n", "CV_Mode", "=", "None", ",", "num_split", "=", "2", ",", "\n", "restarts", "=", "11", ",", "max_iters_all_base", "=", "300", ",", "LR", "=", "0.01", ",", "\n", "C", "=", "1.0", ",", "Optimizer", "=", "'GradientDescent'", ",", "\n", "with_scores", "=", "False", ",", "epsilon", "=", "0.0", ",", "\n", "C_Searching", "=", "False", ",", "\n", "thresh_evaluation", "=", "0.05", ",", "TEST_NMS", "=", "0.3", ",", "\n", "mini_batch_size", "=", "None", ",", "loss_type", "=", "''", ",", "\n", "path_data", "=", "'data'", ",", "path_output", "=", "'output'", ",", "path_to_model", "=", "'models'", ",", "\n", "Polyhedral", "=", "False", ")", ":", "\n", "    ", "\"\"\" \n    This function used TFrecords file \n    \n    Classifier based on CNN features with Transfer Learning on Faster RCNN output\n    for weakly supervised object detection\n    \n    Note : with a features maps of 2048, k_bag =300 and a batchsize of 1000 we can \n    train up to 1200 W vectors in parallel at the same time on a NVIDIA 1080 Ti\n    \n    @param : demonet : the kind of inside network used it can be 'vgg16_VOC07',\n        'vgg16_VOC12','vgg16_COCO','res101_VOC12','res101_COCO','res152_COCO'\n    @param : database : the database used for the weakly supervised detection task\n    @param : verbose : Verbose option classical\n    @param : ReDo = False : Erase the former computation, if True and the model already exists\n        : only do the evaluation\n    @param : PlotRegions : plot the regions used for learn and the regions in \n        the positive output response\n    @param : k_per_bag : number of element per batch in the slection phase [defaut : 300] \n    @param : CV_Mode : cross validation mode in the MI_max : possibility ; \n        None, CV in k split \n    @param : num_split  : Number of split for the CV \n    @param : restarts  :  number of restarts / reinitialisation in the MI_max [default=11]\n    @param : max_iters_all_base  :  number of maximum iteration on the going on \n        the full database \n    @param : LR  :  Learning rate for the optimizer in the MI_max \n    @param : C  :  Regularisation term for the optimizer in the MI_max \n    @param : Optimizer  : Optimizer for the MI_max GradientDescent or Adam\n    @param : thresh_evaluation : 0.05 : seuillage avant de fournir les boites a l evaluation de detections\n    @param : TEST_NMS : 0.3 : recouvrement autorise avant le NMS avant l evaluation de detections\n    @param : mini_batch_size if None or 0 an automatic adhoc mini batch size is set\n    @param : Polyhedral consider the polyhedral model \n    @param : HL hidden layer model \n    @param : num_features_hidden = 256 number of hidden units in the hidden layer\n        model\n    \n    This function output AP for different dataset for the weakly supervised task \n    \n    \"\"\"", "\n", "item_name", ",", "path_to_img", ",", "classes", ",", "ext", ",", "num_classes", ",", "str_val", ",", "df_label", "=", "get_database", "(", "database", ")", "\n", "num_trainval_im", "=", "len", "(", "df_label", "[", "df_label", "[", "'set'", "]", "==", "'train'", "]", "[", "item_name", "]", ")", "+", "len", "(", "df_label", "[", "df_label", "[", "'set'", "]", "==", "str_val", "]", "[", "item_name", "]", ")", "\n", "\n", "if", "verbose", ":", "print", "(", "'Training on '", ",", "database", ",", "'with '", ",", "num_trainval_im", ",", "' images in the trainval set'", ")", "\n", "N", "=", "1", "\n", "extL2", "=", "''", "\n", "nms_thresh", "=", "0.7", "\n", "savedstr", "=", "'_all'", "\n", "metamodel", "=", "'FasterRCNN'", "\n", "\n", "sets", "=", "[", "'trainval'", ",", "'test'", "]", "\n", "dict_name_file", "=", "{", "}", "\n", "data_precomputeed", "=", "True", "\n", "if", "k_per_bag", "==", "300", ":", "\n", "        ", "k_per_bag_str", "=", "''", "\n", "", "else", ":", "\n", "        ", "k_per_bag_str", "=", "'_k'", "+", "str", "(", "k_per_bag", ")", "\n", "", "for", "set_str", "in", "sets", ":", "\n", "        ", "name_pkl_all_features", "=", "os", ".", "path", ".", "join", "(", "path_output", ",", "metamodel", "+", "'_'", "+", "demonet", "+", "'_'", "+", "database", "+", "'_N'", "+", "str", "(", "N", ")", "+", "extL2", "+", "'_TLforMIL_nms_'", "+", "str", "(", "nms_thresh", ")", "+", "savedstr", "+", "k_per_bag_str", "+", "'_'", "+", "set_str", "+", "'.tfrecords'", ")", "\n", "dict_name_file", "[", "set_str", "]", "=", "name_pkl_all_features", "\n", "if", "not", "(", "os", ".", "path", ".", "isfile", "(", "name_pkl_all_features", ")", ")", ":", "\n", "            ", "data_precomputeed", "=", "False", "\n", "\n", "", "", "if", "demonet", "in", "[", "'vgg16_COCO'", ",", "'vgg16_VOC07'", ",", "'vgg16_VOC12'", "]", ":", "\n", "        ", "num_features", "=", "4096", "\n", "", "elif", "demonet", "in", "[", "'res101_COCO'", ",", "'res152_COCO'", ",", "'res101_VOC07'", ",", "'res152'", "]", ":", "\n", "        ", "num_features", "=", "2048", "\n", "\n", "", "if", "not", "(", "data_precomputeed", ")", ":", "\n", "# Compute the features", "\n", "        ", "if", "verbose", ":", "print", "(", "\"We will use a Faster RCNN as feature extractor and region proposals\"", ")", "\n", "if", "metamodel", "==", "'FasterRCNN'", ":", "\n", "            ", "Compute_Faster_RCNN_features", "(", "demonet", "=", "demonet", ",", "nms_thresh", "=", "nms_thresh", ",", "\n", "database", "=", "database", ",", "verbose", "=", "verbose", ",", "\n", "k_regions", "=", "k_per_bag", ",", "path_data", "=", "path_data", ",", "\n", "path_output", "=", "path_output", ",", "\n", "path_to_model", "=", "path_to_model", ")", "\n", "", "else", ":", "\n", "            ", "raise", "(", "NotImplementedError", ")", "\n", "\n", "# Config param for TF session ", "\n", "", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "# Data for the MI_max Latent SVM", "\n", "# All those parameter are design for a GPU 1080 Ti memory size  ie 11GB", "\n", "performance", "=", "False", "\n", "\n", "sizeMax", "=", "30", "*", "200000", "//", "(", "k_per_bag", "*", "20", ")", "\n", "if", "not", "(", "CV_Mode", "==", "'CV'", "and", "num_split", "==", "2", ")", ":", "\n", "        ", "sizeMax", "//=", "2", "\n", "", "if", "num_features", ">", "2048", ":", "\n", "        ", "sizeMax", "//=", "(", "num_features", "//", "2048", ")", "\n", "\n", "", "model_str", "=", "'MI_max'", "\n", "if", "k_per_bag", "==", "300", ":", "\n", "        ", "buffer_size", "=", "10000", "\n", "", "else", ":", "\n", "        ", "buffer_size", "=", "5000", "*", "300", "//", "k_per_bag", "\n", "\n", "", "if", "(", "k_per_bag", ">", "300", "or", "num_trainval_im", ">", "5000", ")", ":", "\n", "        ", "usecache", "=", "False", "\n", "", "else", ":", "\n", "        ", "usecache", "=", "True", "\n", "\n", "", "if", "mini_batch_size", "is", "None", "or", "mini_batch_size", "==", "0", ":", "\n", "        ", "mini_batch_size", "=", "min", "(", "sizeMax", ",", "num_trainval_im", ")", "\n", "\n", "", "max_iters", "=", "(", "(", "num_trainval_im", "//", "mini_batch_size", ")", "+", "np", ".", "sign", "(", "num_trainval_im", "%", "mini_batch_size", ")", ")", "*", "max_iters_all_base", "\n", "\n", "AP_per_class", "=", "[", "]", "\n", "P_per_class", "=", "[", "]", "\n", "R_per_class", "=", "[", "]", "\n", "P20_per_class", "=", "[", "]", "\n", "AP_per_classbS", "=", "[", "]", "\n", "final_clf", "=", "None", "\n", "\n", "if", "C", "==", "1.0", ":", "\n", "        ", "C_str", "=", "''", "\n", "", "else", ":", "\n", "        ", "C_str", "=", "'_C'", "+", "str", "(", "C", ")", "# regularisation term ", "\n", "", "if", "with_scores", ":", "\n", "        ", "with_scores_str", "=", "'_WRC'", "+", "str", "(", "epsilon", ")", "\n", "", "else", ":", "\n", "        ", "with_scores_str", "=", "''", "\n", "\n", "", "extPar", "=", "'_p'", "\n", "if", "CV_Mode", "==", "'CV'", ":", "\n", "        ", "max_iters", "=", "(", "max_iters", "*", "(", "num_split", "-", "1", ")", "//", "num_split", ")", "# Modification d iteration max par rapport au nombre de split", "\n", "extCV", "=", "'_cv'", "+", "str", "(", "num_split", ")", "\n", "", "elif", "CV_Mode", "is", "None", "or", "CV_Mode", "==", "''", ":", "\n", "        ", "extCV", "=", "''", "\n", "", "else", ":", "\n", "        ", "raise", "(", "NotImplementedError", ")", "\n", "ext_num_feat", "=", "''", "\n", "", "extCV", "+=", "'_wr'", "\n", "\n", "if", "Optimizer", "==", "'Adam'", ":", "\n", "        ", "opti_str", "=", "''", "\n", "", "elif", "Optimizer", "==", "'GradientDescent'", ":", "\n", "        ", "opti_str", "=", "'_gd'", "\n", "", "elif", "Optimizer", "==", "'lbfgs'", ":", "\n", "        ", "opti_str", "=", "'_lbfgs'", "\n", "", "else", ":", "\n", "        ", "raise", "(", "NotImplementedError", ")", "\n", "\n", "", "if", "loss_type", "is", "None", "or", "loss_type", "==", "''", ":", "\n", "        ", "loss_type_str", "=", "''", "\n", "", "elif", "loss_type", "==", "'hinge'", ":", "\n", "        ", "loss_type_str", "=", "'Losshinge'", "\n", "\n", "", "if", "LR", "==", "0.01", ":", "\n", "        ", "LR_str", "=", "''", "\n", "", "else", ":", "\n", "        ", "LR_str", "=", "'_LR'", "+", "str", "(", "LR", ")", "\n", "\n", "", "optimArg", "=", "None", "\n", "if", "optimArg", "==", "None", "or", "Optimizer", "==", "'GradientDescent'", ":", "\n", "        ", "optimArg_str", "=", "''", "\n", "", "else", ":", "\n", "        ", "if", "Optimizer", "==", "'Adam'", "and", "str", "(", "optimArg", ")", ".", "replace", "(", "' '", ",", "'_'", ")", "==", "\"{'learning_rate':_0.01,_'beta1':_0.9,_'beta2':_0.999,_'epsilon':_1e-08}\"", ":", "\n", "            ", "optimArg_str", "=", "''", "\n", "", "else", ":", "\n", "            ", "optimArg_str", "=", "str", "(", "optimArg", ")", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "", "", "verboseMI_max", "=", "verbose", "\n", "shuffle", "=", "True", "\n", "if", "num_trainval_im", "==", "mini_batch_size", ":", "\n", "        ", "shuffle", "=", "False", "\n", "\n", "", "number_zone", "=", "k_per_bag", "\n", "\n", "dont_use_07_metric", "=", "True", "\n", "\n", "dim_rois", "=", "5", "\n", "\n", "cachefilefolder", "=", "os", ".", "path", ".", "join", "(", "path_output", ",", "'cachefile'", ")", "\n", "\n", "if", "Polyhedral", ":", "\n", "        ", "poly_str", "=", "'_Poly'", "\n", "", "else", ":", "\n", "        ", "poly_str", "=", "''", "\n", "\n", "", "cachefile_model_base", "=", "'WLS_'", "+", "database", "+", "'_'", "+", "demonet", "+", "'_r'", "+", "str", "(", "restarts", ")", "+", "'_s'", "+", "str", "(", "mini_batch_size", ")", "+", "'_k'", "+", "str", "(", "k_per_bag", ")", "+", "'_m'", "+", "str", "(", "max_iters", ")", "+", "extPar", "+", "extCV", "+", "opti_str", "+", "LR_str", "+", "C_str", "+", "with_scores_str", "+", "loss_type_str", "+", "poly_str", "\n", "pathlib", ".", "Path", "(", "cachefilefolder", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "cachefile_model", "=", "os", ".", "path", ".", "join", "(", "cachefilefolder", ",", "cachefile_model_base", "+", "'_'", "+", "model_str", "+", "'.pkl'", ")", "\n", "\n", "if", "verbose", ":", "print", "(", "\"cachefile name\"", ",", "cachefile_model", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cachefile_model", ")", "or", "ReDo", ":", "\n", "        ", "name_milsvm", "=", "{", "}", "\n", "if", "verbose", ":", "print", "(", "\"The cachefile doesn t exist or we will erase it.\"", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "cachefile_model", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "name_milsvm", "=", "pickle", ".", "load", "(", "f", ")", "\n", "if", "verbose", ":", "print", "(", "\"The cachefile exists\"", ")", "\n", "\n", "", "", "usecache_eval", "=", "True", "\n", "\n", "if", "database", "==", "'watercolor'", ":", "\n", "        ", "imdb", "=", "get_imdb", "(", "'watercolor_test'", ")", "\n", "imdb", ".", "set_force_dont_use_07_metric", "(", "dont_use_07_metric", ")", "\n", "num_images", "=", "len", "(", "imdb", ".", "image_index", ")", "\n", "", "elif", "database", "==", "'PeopleArt'", ":", "\n", "        ", "imdb", "=", "get_imdb", "(", "'PeopleArt_test'", ")", "\n", "imdb", ".", "set_force_dont_use_07_metric", "(", "dont_use_07_metric", ")", "\n", "num_images", "=", "len", "(", "imdb", ".", "image_index", ")", "\n", "", "elif", "database", "==", "'clipart'", ":", "\n", "        ", "imdb", "=", "get_imdb", "(", "'clipart_test'", ")", "\n", "imdb", ".", "set_force_dont_use_07_metric", "(", "dont_use_07_metric", ")", "\n", "num_images", "=", "len", "(", "imdb", ".", "image_index", ")", "\n", "", "elif", "database", "==", "'comic'", ":", "\n", "        ", "imdb", "=", "get_imdb", "(", "'comic_test'", ")", "\n", "imdb", ".", "set_force_dont_use_07_metric", "(", "dont_use_07_metric", ")", "\n", "num_images", "=", "len", "(", "imdb", ".", "image_index", ")", "\n", "", "elif", "database", "==", "'comic'", ":", "\n", "        ", "imdb", "=", "get_imdb", "(", "'CASPApaintings_test'", ")", "\n", "imdb", ".", "set_force_dont_use_07_metric", "(", "dont_use_07_metric", ")", "\n", "num_images", "=", "len", "(", "imdb", ".", "image_index", ")", "\n", "", "elif", "database", "==", "'IconArt_v1'", ":", "\n", "        ", "imdb", "=", "get_imdb", "(", "'IconArt_v1_test'", ")", "\n", "imdb", ".", "set_force_dont_use_07_metric", "(", "dont_use_07_metric", ")", "\n", "num_images", "=", "len", "(", "df_label", "[", "df_label", "[", "'set'", "]", "==", "'test'", "]", "[", "item_name", "]", ")", "\n", "\n", "", "else", ":", "\n", "        ", "num_images", "=", "len", "(", "df_label", "[", "df_label", "[", "'set'", "]", "==", "'test'", "]", "[", "item_name", "]", ")", "\n", "", "all_boxes", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "\n", "data_path_train", "=", "dict_name_file", "[", "'trainval'", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cachefile_model", ")", "or", "ReDo", ":", "\n", "         ", "if", "verbose", ":", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "classifierMI_max", "=", "tf_MI_max", "(", "LR", "=", "LR", ",", "C", "=", "C", ",", "restarts", "=", "restarts", ",", "num_rois", "=", "k_per_bag", ",", "\n", "max_iters", "=", "max_iters", ",", "buffer_size", "=", "buffer_size", ",", "\n", "verbose", "=", "verboseMI_max", ",", "Optimizer", "=", "Optimizer", ",", "\n", "mini_batch_size", "=", "mini_batch_size", ",", "num_features", "=", "num_features", ",", "\n", "num_classes", "=", "num_classes", ",", "num_split", "=", "num_split", ",", "CV_Mode", "=", "CV_Mode", ",", "with_scores", "=", "with_scores", ",", "\n", "epsilon", "=", "epsilon", ",", "loss_type", "=", "loss_type", ",", "usecache", "=", "usecache", ",", "Polyhedral", "=", "Polyhedral", ")", "\n", "# Normal calse MIMax or Polyhedral MImax", "\n", "export_dir", "=", "classifierMI_max", ".", "fit_MI_max_tfrecords", "(", "data_path", "=", "data_path_train", ",", "shuffle", "=", "shuffle", ",", "C_Searching", "=", "C_Searching", ")", "\n", "\n", "if", "verbose", ":", "\n", "             ", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Total duration training part :'", ",", "str", "(", "t1", "-", "t0", ")", ")", "\n", "\n", "", "np_pos_value", ",", "np_neg_value", "=", "classifierMI_max", ".", "get_porportions", "(", ")", "\n", "name_milsvm", "=", "export_dir", ",", "np_pos_value", ",", "np_neg_value", "\n", "with", "open", "(", "cachefile_model", ",", "'wb'", ")", "as", "f", ":", "\n", "             ", "pickle", ".", "dump", "(", "name_milsvm", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "verbose", ":", "print", "(", "\"We will load the existing model\"", ")", "\n", "export_dir", ",", "np_pos_value", ",", "np_neg_value", "=", "name_milsvm", "\n", "\n", "", "true_label_all_test", ",", "predict_label_all_test", ",", "name_all_test", ",", "labels_test_predited", ",", "all_boxes", "=", "tfR_evaluation_parall", "(", "database", "=", "database", ",", "num_classes", "=", "num_classes", ",", "\n", "export_dir", "=", "export_dir", ",", "dict_name_file", "=", "dict_name_file", ",", "mini_batch_size", "=", "mini_batch_size", "\n", ",", "config", "=", "config", ",", "scoreInMI_max", "=", "with_scores", ",", "\n", "path_to_img", "=", "path_to_img", ",", "path_data", "=", "path_data", ",", "classes", "=", "classes", ",", "\n", "verbose", "=", "verbose", ",", "thresh_evaluation", "=", "thresh_evaluation", ",", "TEST_NMS", "=", "TEST_NMS", ",", "all_boxes", "=", "all_boxes", "\n", ",", "PlotRegions", "=", "PlotRegions", ",", "cachefile_model_base", "=", "cachefile_model_base", ",", "number_im", "=", "np", ".", "inf", ",", "dim_rois", "=", "dim_rois", ",", "\n", "usecache", "=", "usecache_eval", ",", "k_per_bag", "=", "k_per_bag", ",", "num_features", "=", "num_features", ")", "\n", "\n", "for", "j", ",", "classe", "in", "enumerate", "(", "classes", ")", ":", "\n", "        ", "AP", "=", "average_precision_score", "(", "true_label_all_test", "[", ":", ",", "j", "]", ",", "predict_label_all_test", "[", ":", ",", "j", "]", ",", "average", "=", "None", ")", "\n", "print", "(", "\"MI_Max version Average Precision for\"", ",", "classes", "[", "j", "]", ",", "\" = \"", ",", "AP", ")", "\n", "test_precision", "=", "precision_score", "(", "true_label_all_test", "[", ":", ",", "j", "]", ",", "labels_test_predited", "[", ":", ",", "j", "]", ",", ")", "\n", "test_recall", "=", "recall_score", "(", "true_label_all_test", "[", ":", ",", "j", "]", ",", "labels_test_predited", "[", ":", ",", "j", "]", ",", ")", "\n", "F1", "=", "f1_score", "(", "true_label_all_test", "[", ":", ",", "j", "]", ",", "labels_test_predited", "[", ":", ",", "j", "]", ",", ")", "\n", "print", "(", "\"Test on all the data precision = {0:.2f}, recall = {1:.2f},F1 = {2:.2f}\"", ".", "format", "(", "test_precision", ",", "test_recall", ",", "F1", ")", ")", "\n", "precision_at_k", "=", "ranking_precision_score", "(", "np", ".", "array", "(", "true_label_all_test", "[", ":", ",", "j", "]", ")", ",", "predict_label_all_test", "[", ":", ",", "j", "]", ",", "20", ")", "\n", "P20_per_class", "+=", "[", "precision_at_k", "]", "\n", "AP_per_class", "+=", "[", "AP", "]", "\n", "R_per_class", "+=", "[", "test_recall", "]", "\n", "P_per_class", "+=", "[", "test_precision", "]", "\n", "\n", "\n", "", "with", "open", "(", "cachefile_model", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "name_milsvm", ",", "f", ")", "\n", "\n", "# Detection evaluation", "\n", "", "if", "database", "in", "[", "'watercolor'", ",", "'clipart'", ",", "'PeopleArt'", ",", "'IconArt_v1'", ",", "'comic'", ",", "'CASPApaintings'", "]", ":", "\n", "        ", "det_file", "=", "os", ".", "path", ".", "join", "(", "cachefilefolder", ",", "'detections_aux.pkl'", ")", "\n", "with", "open", "(", "det_file", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_boxes", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "max_per_image", "=", "100", "\n", "num_images_detect", "=", "len", "(", "imdb", ".", "image_index", ")", "# We do not have the same number of images in the IconArt_v1 case", "\n", "all_boxes_order", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "num_images_detect", ")", "]", "for", "_", "in", "range", "(", "imdb", ".", "num_classes", ")", "]", "\n", "number_im", "=", "0", "\n", "name_all_test", "=", "name_all_test", ".", "astype", "(", "str", ")", "\n", "for", "i", "in", "range", "(", "num_images_detect", ")", ":", "\n", "            ", "name_img", "=", "imdb", ".", "image_path_at", "(", "i", ")", "\n", "if", "database", "==", "'PeopleArt'", ":", "\n", "                ", "name_img_wt_ext", "=", "name_img", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "+", "'/'", "+", "name_img", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "name_img_wt_ext_tab", "=", "name_img_wt_ext", ".", "split", "(", "'.'", ")", "\n", "name_img_wt_ext", "=", "'.'", ".", "join", "(", "name_img_wt_ext_tab", "[", "0", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "name_img_wt_ext", "=", "name_img", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "name_img_wt_ext", "=", "name_img_wt_ext", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "name_img_ind", "=", "np", ".", "where", "(", "np", ".", "array", "(", "name_all_test", ")", "==", "name_img_wt_ext", ")", "[", "0", "]", "\n", "\n", "if", "len", "(", "name_img_ind", ")", "==", "0", ":", "\n", "                ", "print", "(", "'len(name_img_ind), images not found in the all_boxes'", ")", "\n", "print", "(", "name_img_wt_ext", ")", "\n", "raise", "(", "Exception", ")", "\n", "", "else", ":", "\n", "                ", "number_im", "+=", "1", "\n", "#print(name_img_ind[0])", "\n", "", "for", "j", "in", "range", "(", "1", ",", "imdb", ".", "num_classes", ")", ":", "\n", "                ", "j_minus_1", "=", "j", "-", "1", "\n", "all_boxes_order", "[", "j", "]", "[", "i", "]", "=", "all_boxes", "[", "j_minus_1", "]", "[", "name_img_ind", "[", "0", "]", "]", "\n", "", "if", "max_per_image", ">", "0", ":", "\n", "                ", "image_scores", "=", "np", ".", "hstack", "(", "[", "all_boxes_order", "[", "j", "]", "[", "i", "]", "[", ":", ",", "-", "1", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "imdb", ".", "num_classes", ")", "]", ")", "\n", "if", "len", "(", "image_scores", ")", ">", "max_per_image", ":", "\n", "                    ", "image_thresh", "=", "np", ".", "sort", "(", "image_scores", ")", "[", "-", "max_per_image", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "imdb", ".", "num_classes", ")", ":", "\n", "                        ", "keep", "=", "np", ".", "where", "(", "all_boxes_order", "[", "j", "]", "[", "i", "]", "[", ":", ",", "-", "1", "]", ">=", "image_thresh", ")", "[", "0", "]", "\n", "all_boxes_order", "[", "j", "]", "[", "i", "]", "=", "all_boxes_order", "[", "j", "]", "[", "i", "]", "[", "keep", ",", ":", "]", "\n", "", "", "", "", "assert", "(", "number_im", "==", "num_images_detect", ")", "# To check that we have the all the images in the detection prediction", "\n", "det_file", "=", "os", ".", "path", ".", "join", "(", "cachefilefolder", ",", "'detections.pkl'", ")", "\n", "with", "open", "(", "det_file", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_boxes_order", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "output_dir", "=", "os", ".", "path", ".", "join", "(", "cachefilefolder", ",", "'tmp'", ",", "database", "+", "'_mAP.txt'", ")", "\n", "aps", "=", "imdb", ".", "evaluate_detections", "(", "all_boxes_order", ",", "output_dir", ")", "\n", "apsAt05", "=", "aps", "\n", "print", "(", "\"Detection score (thres = 0.5): \"", ",", "database", ",", "'with MI_Max with score ='", ",", "with_scores", ")", "\n", "print", "(", "arrayToLatex", "(", "aps", ",", "per", "=", "True", ")", ")", "\n", "ovthresh_tab", "=", "[", "0.3", ",", "0.1", ",", "0.", "]", "\n", "for", "ovthresh", "in", "ovthresh_tab", ":", "\n", "            ", "aps", "=", "imdb", ".", "evaluate_localisation_ovthresh", "(", "all_boxes_order", ",", "output_dir", ",", "ovthresh", ")", "\n", "if", "ovthresh", "==", "0.1", ":", "\n", "                ", "apsAt01", "=", "aps", "\n", "", "print", "(", "\"Detection score with thres at \"", ",", "ovthresh", ",", "'with MI_Max with score ='", ",", "with_scores", ")", "\n", "print", "(", "arrayToLatex", "(", "aps", ",", "per", "=", "True", ")", ")", "\n", "\n", "", "", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "\"mean Average Precision Classification for all the data = {0:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "AP_per_class", ")", ")", ")", "\n", "print", "(", "\"mean Precision Classification for all the data = {0:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "P_per_class", ")", ")", ")", "\n", "print", "(", "\"mean Recall Classification for all the data = {0:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "R_per_class", ")", ")", ")", "\n", "print", "(", "\"mean Precision Classification @ 20 for all the data = {0:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "P20_per_class", ")", ")", ")", "\n", "print", "(", "'Mean Average Precision Classification with MI_Max with score ='", ",", "with_scores", ",", "' : '", ")", "\n", "print", "(", "AP_per_class", ")", "\n", "print", "(", "arrayToLatex", "(", "AP_per_class", ",", "per", "=", "True", ")", ")", "\n", "\n", "return", "(", "apsAt05", ",", "apsAt01", ",", "AP_per_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.get_tensor_by_nameDescendant": [[571, 587], ["graph.get_tensor_by_name", "range", "print", "graph.get_tensor_by_name", "str"], "function", ["None"], ["", "def", "get_tensor_by_nameDescendant", "(", "graph", ",", "name", ")", ":", "\n", "    ", "\"\"\"\n    This function is a very bad way to get the tensor by name from the graph\n    because it will test the different possibility in a ascending way starting \n    by none and stop when it get the highest\n    \"\"\"", "\n", "complet_name", "=", "name", "+", "':0'", "\n", "tensor", "=", "graph", ".", "get_tensor_by_name", "(", "complet_name", ")", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "complet_name", "=", "name", "+", "'_'", "+", "str", "(", "i", "+", "1", ")", "+", "':0'", "\n", "tensor", "=", "graph", ".", "get_tensor_by_name", "(", "complet_name", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "(", "tensor", ")", "\n", "", "", "print", "(", "\"We only test the 100 possible tensor, we will return the 101st tensor\"", ")", "\n", "return", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.tfR_evaluation_parall": [[588, 897], ["os.path.join", "os.path.join", "tensorflow.data.TFRecordDataset", "train_dataset.map.map", "train_dataset.map.batch", "train_dataset.batch.make_one_shot_iterator", "dataset_batch.make_one_shot_iterator.get_next", "tensorflow.reset_default_graph", "numpy.concatenate", "numpy.transpose", "numpy.concatenate", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pathlib.Path().mkdir", "pathlib.Path().mkdir", "export_dir.split", "tensorflow.data.TFRecordDataset", "train_dataset.map.map", "train_dataset.map.batch", "train_dataset.batch.make_one_shot_iterator", "dataset_batch.make_one_shot_iterator.get_next", "print", "train_dataset.batch.cache", "tensorflow.Session", "numpy.concatenate", "print", "train_dataset.batch.cache", "tensorflow.Session", "tensorflow.train.import_meta_graph", "tf.train.import_meta_graph.restore", "tensorflow.get_default_graph", "TL_MIL.get_tensor_by_nameDescendant", "TL_MIL.get_tensor_by_nameDescendant", "sess.run", "sess.run", "TL_MIL.parser_w_rois_all_class", "tensorflow.train.import_meta_graph", "tf.train.import_meta_graph.restore", "tensorflow.get_default_graph", "TL_MIL.get_tensor_by_nameDescendant", "TL_MIL.get_tensor_by_nameDescendant", "sess.run", "sess.run", "numpy.sign", "numpy.where", "pathlib.Path", "pathlib.Path", "TL_MIL.parser_w_rois_all_class", "tensorflow.train.latest_checkpoint", "TL_MIL.get_tensor_by_nameDescendant", "TL_MIL.get_tensor_by_nameDescendant", "TL_MIL.get_tensor_by_nameDescendant", "tensorflow.tanh", "tensorflow.argmax", "tensorflow.reduce_max", "tensorflow.argmax", "tensorflow.reduce_max", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.train.latest_checkpoint", "TL_MIL.get_tensor_by_nameDescendant", "TL_MIL.get_tensor_by_nameDescendant", "TL_MIL.get_tensor_by_nameDescendant", "tensorflow.tanh", "tensorflow.argmax", "tensorflow.reduce_max", "tensorflow.argmax", "tensorflow.reduce_max", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "range", "range", "print", "sess.run", "print", "range", "print", "sess.run", "sess.run", "sess.run", "len", "cv2.imread", "tf_faster_rcnn.lib.model.test.get_blobs", "range", "len", "range", "sess.run", "sess.run", "len", "cv2.imread", "tf_faster_rcnn.lib.model.test.get_blobs", "range", "FasterRCNN.vis_detections_list", "os.path.join", "os.path.join", "matplotlib.savefig", "matplotlib.close", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.hstack().astype", "tf_faster_rcnn.lib.model.nms_wrapper.nms", "print", "print", "len", "cv2.imread", "tf_faster_rcnn.lib.model.test.get_blobs", "range", "FasterRCNN.vis_detections_list", "os.path.join", "os.path.join", "matplotlib.savefig", "matplotlib.close", "FasterRCNN.vis_detections_list", "os.path.join", "os.path.join", "matplotlib.savefig", "matplotlib.close", "FasterRCNN.vis_detections_list", "os.path.join", "os.path.join", "matplotlib.savefig", "matplotlib.close", "FasterRCNN.vis_detections_list", "os.path.join", "os.path.join", "matplotlib.savefig", "matplotlib.close", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pathlib.Path().mkdir", "numpy.where", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pathlib.Path().mkdir", "name_imgs[].decode", "os.path.splitext", "os.path.splitext", "numpy.expand_dims", "os.path.join.split", "str", "numpy.hstack", "str", "name_imgs[].decode", "os.path.join", "os.path.join", "len", "os.path.join.split", "len", "numpy.expand_dims", "numpy.vstack", "pathlib.Path", "name_imgs[].decode", "name_imgs[].decode", "os.path.splitext", "os.path.splitext", "pathlib.Path", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.get_tensor_by_nameDescendant", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.get_tensor_by_nameDescendant", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.parser_w_rois_all_class", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.get_tensor_by_nameDescendant", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.get_tensor_by_nameDescendant", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.parser_w_rois_all_class", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.get_tensor_by_nameDescendant", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.get_tensor_by_nameDescendant", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.get_tensor_by_nameDescendant", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.get_tensor_by_nameDescendant", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.get_tensor_by_nameDescendant", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.TL_MIL.get_tensor_by_nameDescendant", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.get_blobs", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.get_blobs", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN.vis_detections_list", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.nms_wrapper.nms", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.get_blobs", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN.vis_detections_list", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN.vis_detections_list", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN.vis_detections_list", "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.FasterRCNN.vis_detections_list"], ["", "def", "tfR_evaluation_parall", "(", "database", ",", "num_classes", ",", "\n", "export_dir", ",", "dict_name_file", ",", "mini_batch_size", ",", "config", ",", "scoreInMI_max", ",", "\n", "path_to_img", ",", "path_data", ",", "classes", ",", "verbose", ",", "\n", "thresh_evaluation", ",", "TEST_NMS", ",", "all_boxes", "=", "None", ",", "PlotRegions", "=", "False", ",", "\n", "cachefile_model_base", "=", "''", ",", "number_im", "=", "np", ".", "inf", ",", "dim_rois", "=", "5", ",", "\n", "usecache", "=", "True", ",", "k_per_bag", "=", "300", ",", "num_features", "=", "2048", ")", ":", "\n", "     ", "\"\"\"\n     @param : number_im : number of image plot at maximum\n\n     \"\"\"", "\n", "\n", "if", "verbose", ":", "print", "(", "'thresh_evaluation'", ",", "thresh_evaluation", ",", "'TEST_NMS'", ",", "TEST_NMS", ")", "\n", "\n", "thresh", "=", "thresh_evaluation", "# Threshold score or distance MI_max", "\n", "#TEST_NMS = 0.7 # Recouvrement entre les classes", "\n", "load_model", "=", "False", "\n", "with_tanh", "=", "True", "\n", "\n", "if", "PlotRegions", ":", "\n", "         ", "extensionStocha", "=", "os", ".", "path", ".", "join", "(", "cachefile_model_base", ",", "'ForIllustraion'", ")", "\n", "path_to_output2", "=", "os", ".", "path", ".", "join", "(", "path_data", ",", "'tfMI_maxRegion'", ",", "database", ",", "extensionStocha", ")", "\n", "path_to_output2_bis", "=", "os", ".", "path", ".", "join", "(", "path_to_output2", ",", "'Train'", ")", "\n", "path_to_output2_ter", "=", "os", ".", "path", ".", "join", "(", "path_to_output2", ",", "'Test'", ")", "\n", "pathlib", ".", "Path", "(", "path_to_output2_bis", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "pathlib", ".", "Path", "(", "path_to_output2_ter", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "listexportsplit", "=", "export_dir", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", "\n", "export_dir_path", "=", "os", ".", "path", ".", "join", "(", "*", "listexportsplit", ")", "\n", "name_model_meta", "=", "export_dir", "+", "'.meta'", "\n", "\n", "get_roisScore", "=", "scoreInMI_max", "\n", "\n", "if", "PlotRegions", ":", "\n", "        ", "index_im", "=", "0", "\n", "if", "verbose", ":", "print", "(", "\"Start ploting Regions selected by the MI_max in training phase\"", ")", "\n", "train_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "dict_name_file", "[", "'trainval'", "]", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "lambda", "r", ":", "parser_w_rois_all_class", "(", "r", ",", "num_classes", "=", "num_classes", ",", "with_rois_scores", "=", "get_roisScore", ",", "num_features", "=", "num_features", ",", "num_rois", "=", "k_per_bag", ",", "dim_rois", "=", "dim_rois", ")", ")", "\n", "dataset_batch", "=", "train_dataset", ".", "batch", "(", "mini_batch_size", ")", "\n", "if", "usecache", ":", "\n", "            ", "dataset_batch", ".", "cache", "(", ")", "\n", "", "iterator", "=", "dataset_batch", ".", "make_one_shot_iterator", "(", ")", "\n", "next_element", "=", "iterator", ".", "get_next", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "            ", "new_saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "name_model_meta", ")", "\n", "new_saver", ".", "restore", "(", "sess", ",", "tf", ".", "train", ".", "latest_checkpoint", "(", "export_dir_path", ")", ")", "\n", "load_model", "=", "True", "\n", "graph", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "X", "=", "get_tensor_by_nameDescendant", "(", "graph", ",", "\"X\"", ")", "\n", "y", "=", "get_tensor_by_nameDescendant", "(", "graph", ",", "\"y\"", ")", "\n", "if", "scoreInMI_max", ":", "\n", "                ", "scores_tf", "=", "get_tensor_by_nameDescendant", "(", "graph", ",", "\"scores\"", ")", "\n", "Prod_best", "=", "get_tensor_by_nameDescendant", "(", "graph", ",", "\"ProdScore\"", ")", "\n", "", "else", ":", "\n", "                ", "Prod_best", "=", "get_tensor_by_nameDescendant", "(", "graph", ",", "\"Prod\"", ")", "\n", "", "if", "with_tanh", ":", "\n", "                ", "if", "verbose", ":", "print", "(", "'use of tanh'", ")", "\n", "Tanh", "=", "tf", ".", "tanh", "(", "Prod_best", ")", "\n", "mei", "=", "tf", ".", "argmax", "(", "Tanh", ",", "axis", "=", "2", ")", "\n", "score_mei", "=", "tf", ".", "reduce_max", "(", "Tanh", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "mei", "=", "tf", ".", "argmax", "(", "Prod_best", ",", "axis", "=", "2", ")", "\n", "score_mei", "=", "tf", ".", "reduce_max", "(", "Prod_best", ",", "axis", "=", "2", ")", "\n", "", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "while", "True", ":", "\n", "                ", "try", ":", "\n", "                    ", "next_element_value", "=", "sess", ".", "run", "(", "next_element", ")", "\n", "if", "not", "(", "scoreInMI_max", ")", ":", "\n", "                        ", "fc7s", ",", "roiss", ",", "labels", ",", "name_imgs", "=", "next_element_value", "\n", "", "else", ":", "\n", "                        ", "fc7s", ",", "roiss", ",", "rois_scores", ",", "labels", ",", "name_imgs", "=", "next_element_value", "\n", "", "if", "scoreInMI_max", ":", "\n", "                        ", "feed_dict_value", "=", "{", "X", ":", "fc7s", ",", "scores_tf", ":", "rois_scores", ",", "y", ":", "labels", "}", "\n", "", "else", ":", "\n", "                        ", "feed_dict_value", "=", "{", "X", ":", "fc7s", ",", "y", ":", "labels", "}", "\n", "", "if", "with_tanh", ":", "\n", "                        ", "PositiveRegions", ",", "get_PositiveRegionsScore", ",", "PositiveExScoreAll", "=", "sess", ".", "run", "(", "[", "mei", ",", "score_mei", ",", "Tanh", "]", ",", "feed_dict", "=", "feed_dict_value", ")", "\n", "", "else", ":", "\n", "                        ", "PositiveRegions", ",", "get_PositiveRegionsScore", ",", "PositiveExScoreAll", "=", "sess", ".", "run", "(", "[", "mei", ",", "score_mei", ",", "Prod_best", "]", ",", "feed_dict", "=", "feed_dict_value", ")", "\n", "\n", "", "print", "(", "'Start plotting Training exemples'", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "                        ", "if", "index_im", ">", "number_im", ":", "\n", "                            ", "continue", "\n", "", "if", "database", "in", "[", "'IconArt_v1'", ",", "'clipart'", ",", "'watercolor'", ",", "'PeopleArt'", ",", "'comic'", ",", "'CASPApaintings'", "]", ":", "\n", "                            ", "name_img", "=", "str", "(", "name_imgs", "[", "k", "]", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "", "else", ":", "\n", "                            ", "name_img", "=", "name_imgs", "[", "k", "]", "\n", "", "rois", "=", "roiss", "[", "k", ",", ":", "]", "\n", "#if verbose: print(name_img)", "\n", "if", "database", "in", "[", "'IconArt_v1'", ",", "'clipart'", ",", "'watercolor'", ",", "'PeopleArt'", ",", "'comic'", ",", "'CASPApaintings'", "]", ":", "\n", "                            ", "complet_name", "=", "os", ".", "path", ".", "join", "(", "path_to_img", ",", "name_img", "+", "'.jpg'", ")", "\n", "name_sans_ext", "=", "name_img", "\n", "", "else", ":", "\n", "                            ", "name_sans_ext", "=", "os", ".", "path", ".", "splitext", "(", "name_img", ")", "[", "0", "]", "\n", "complet_name", "=", "os", ".", "path", ".", "join", "(", "path_to_img", ",", "name_sans_ext", "+", "'.jpg'", ")", "\n", "", "im", "=", "cv2", ".", "imread", "(", "complet_name", ")", "\n", "blobs", ",", "im_scales", "=", "get_blobs", "(", "im", ")", "\n", "scores_all", "=", "PositiveExScoreAll", "[", ":", ",", "k", ",", ":", "]", "\n", "roi", "=", "roiss", "[", "k", ",", ":", "]", "\n", "if", "dim_rois", "==", "5", ":", "\n", "                            ", "roi_boxes", "=", "roi", "[", ":", ",", "1", ":", "5", "]", "/", "im_scales", "[", "0", "]", "\n", "", "else", ":", "\n", "                            ", "roi_boxes", "=", "roi", "/", "im_scales", "[", "0", "]", "\n", "", "roi_boxes_and_score", "=", "None", "\n", "local_cls", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                            ", "if", "labels", "[", "k", ",", "j", "]", "==", "1", ":", "\n", "                                ", "local_cls", "+=", "[", "classes", "[", "j", "]", "]", "\n", "roi_with_object_of_the_class", "=", "PositiveRegions", "[", "j", ",", "k", "]", "%", "len", "(", "rois", ")", "# Because we have repeated some rois", "\n", "roi", "=", "rois", "[", "roi_with_object_of_the_class", ",", ":", "]", "\n", "roi_scores", "=", "[", "get_PositiveRegionsScore", "[", "j", ",", "k", "]", "]", "\n", "if", "dim_rois", "==", "5", ":", "\n", "                                    ", "roi_boxes", "=", "roi", "[", "1", ":", "5", "]", "/", "im_scales", "[", "0", "]", "\n", "", "else", ":", "\n", "                                    ", "roi_boxes", "=", "roi", "/", "im_scales", "[", "0", "]", "\n", "", "roi_boxes_score", "=", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "np", ".", "concatenate", "(", "(", "roi_boxes", ",", "roi_scores", ")", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "if", "roi_boxes_and_score", "is", "None", ":", "\n", "                                    ", "roi_boxes_and_score", "=", "roi_boxes_score", "\n", "", "else", ":", "\n", "                                    ", "roi_boxes_and_score", "=", "np", ".", "vstack", "(", "(", "roi_boxes_and_score", ",", "roi_boxes_score", ")", ")", "\n", "\n", "", "", "", "cls", "=", "local_cls", "\n", "if", "roi_boxes_and_score", "is", "None", ":", "\n", "                            ", "roi_boxes_and_score", "=", "[", "]", "\n", "\n", "", "vis_detections_list", "(", "im", ",", "cls", ",", "roi_boxes_and_score", ",", "thresh", "=", "-", "np", ".", "inf", ")", "\n", "name_output", "=", "os", ".", "path", ".", "join", "(", "path_to_output2", ",", "'Train'", ",", "name_sans_ext", "+", "'_Regions.jpg'", ")", "\n", "if", "database", "==", "'PeopleArt'", ":", "\n", "                            ", "list_split", "=", "name_output", ".", "split", "(", "'/'", ")", "[", "0", ":", "-", "1", "]", "\n", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "*", "list_split", ")", "\n", "pathlib", ".", "Path", "(", "path_tmp", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "plt", ".", "savefig", "(", "name_output", ")", "\n", "plt", ".", "close", "(", ")", "\n", "index_im", "+=", "1", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "", "if", "verbose", ":", "print", "(", "\"Testing Time\"", ")", "\n", "# Testing time !", "\n", "train_dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "dict_name_file", "[", "'test'", "]", ")", "\n", "train_dataset", "=", "train_dataset", ".", "map", "(", "lambda", "r", ":", "parser_w_rois_all_class", "(", "r", ",", "num_classes", "=", "num_classes", ",", "with_rois_scores", "=", "get_roisScore", ",", "num_features", "=", "num_features", ",", "\n", "num_rois", "=", "k_per_bag", ",", "dim_rois", "=", "dim_rois", ")", ")", "\n", "dataset_batch", "=", "train_dataset", ".", "batch", "(", "mini_batch_size", ")", "\n", "if", "usecache", ":", "\n", "         ", "dataset_batch", ".", "cache", "(", ")", "\n", "", "iterator", "=", "dataset_batch", ".", "make_one_shot_iterator", "(", ")", "\n", "next_element", "=", "iterator", ".", "get_next", "(", ")", "\n", "true_label_all_test", "=", "[", "]", "\n", "predict_label_all_test", "=", "[", "]", "\n", "name_all_test", "=", "[", "]", "\n", "FirstTime", "=", "True", "\n", "i", "=", "0", "\n", "ii", "=", "0", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "if", "load_model", "==", "False", ":", "\n", "            ", "new_saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "name_model_meta", ")", "\n", "new_saver", ".", "restore", "(", "sess", ",", "tf", ".", "train", ".", "latest_checkpoint", "(", "export_dir_path", ")", ")", "\n", "graph", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "X", "=", "get_tensor_by_nameDescendant", "(", "graph", ",", "\"X\"", ")", "\n", "y", "=", "get_tensor_by_nameDescendant", "(", "graph", ",", "\"y\"", ")", "\n", "if", "scoreInMI_max", ":", "\n", "                ", "scores_tf", "=", "get_tensor_by_nameDescendant", "(", "graph", ",", "\"scores\"", ")", "\n", "Prod_best", "=", "get_tensor_by_nameDescendant", "(", "graph", ",", "\"ProdScore\"", ")", "\n", "", "else", ":", "\n", "                ", "Prod_best", "=", "get_tensor_by_nameDescendant", "(", "graph", ",", "\"Prod\"", ")", "\n", "", "if", "with_tanh", ":", "\n", "                ", "if", "verbose", ":", "print", "(", "'We add the tanh in the test fct to get score between -1 and 1.'", ")", "\n", "Tanh", "=", "tf", ".", "tanh", "(", "Prod_best", ")", "\n", "mei", "=", "tf", ".", "argmax", "(", "Tanh", ",", "axis", "=", "2", ")", "\n", "score_mei", "=", "tf", ".", "reduce_max", "(", "Tanh", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "mei", "=", "tf", ".", "argmax", "(", "Prod_best", ",", "axis", "=", "-", "1", ")", "\n", "score_mei", "=", "tf", ".", "reduce_max", "(", "Prod_best", ",", "axis", "=", "-", "1", ")", "\n", "", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "# Evaluation Test : Probleme ici souvent ", "\n", "", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "not", "(", "scoreInMI_max", ")", ":", "\n", "                    ", "fc7s", ",", "roiss", ",", "labels", ",", "name_imgs", "=", "sess", ".", "run", "(", "next_element", ")", "\n", "", "else", ":", "\n", "                    ", "fc7s", ",", "roiss", ",", "rois_scores", ",", "labels", ",", "name_imgs", "=", "sess", ".", "run", "(", "next_element", ")", "\n", "", "if", "scoreInMI_max", ":", "\n", "                    ", "feed_dict_value", "=", "{", "X", ":", "fc7s", ",", "scores_tf", ":", "rois_scores", ",", "y", ":", "labels", "}", "\n", "", "else", ":", "\n", "                    ", "feed_dict_value", "=", "{", "X", ":", "fc7s", ",", "y", ":", "labels", "}", "\n", "", "if", "with_tanh", ":", "\n", "                    ", "PositiveRegions", ",", "get_RegionsScore", ",", "PositiveExScoreAll", "=", "sess", ".", "run", "(", "[", "mei", ",", "score_mei", ",", "Tanh", "]", ",", "feed_dict", "=", "feed_dict_value", ")", "\n", "\n", "", "true_label_all_test", "+=", "[", "labels", "]", "\n", "predict_label_all_test", "+=", "[", "get_RegionsScore", "]", "# For the classification task", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "                    ", "if", "database", "in", "[", "'IconArt_v1'", ",", "'watercolor'", ",", "'clipart'", ",", "'PeopleArt'", ",", "'comic'", ",", "'CASPApaintings'", "]", ":", "\n", "                        ", "complet_name", "=", "os", ".", "path", ".", "join", "(", "path_to_img", ",", "str", "(", "name_imgs", "[", "k", "]", ".", "decode", "(", "\"utf-8\"", ")", ")", "+", "'.jpg'", ")", "\n", "", "else", ":", "\n", "                        ", "complet_name", "=", "os", ".", "path", ".", "join", "(", "path_to_img", ",", "name_imgs", "[", "k", "]", "+", "'.jpg'", ")", "\n", "", "im", "=", "cv2", ".", "imread", "(", "complet_name", ")", "\n", "blobs", ",", "im_scales", "=", "get_blobs", "(", "im", ")", "\n", "scores_all", "=", "PositiveExScoreAll", "[", ":", ",", "k", ",", ":", "]", "\n", "\n", "roi", "=", "roiss", "[", "k", ",", ":", "]", "\n", "if", "dim_rois", "==", "5", ":", "\n", "                        ", "roi_boxes", "=", "roi", "[", ":", ",", "1", ":", "5", "]", "/", "im_scales", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "roi_boxes", "=", "roi", "/", "im_scales", "[", "0", "]", "\n", "\n", "", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                        ", "scores", "=", "scores_all", "[", "j", ",", ":", "]", "\n", "inds", "=", "np", ".", "where", "(", "scores", ">", "thresh", ")", "[", "0", "]", "\n", "cls_scores", "=", "scores", "[", "inds", "]", "\n", "cls_boxes", "=", "roi_boxes", "[", "inds", ",", ":", "]", "\n", "cls_dets", "=", "np", ".", "hstack", "(", "(", "cls_boxes", ",", "cls_scores", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "\n", "keep", "=", "nms", "(", "cls_dets", ",", "TEST_NMS", ")", "\n", "cls_dets", "=", "cls_dets", "[", "keep", ",", ":", "]", "\n", "\n", "all_boxes", "[", "j", "]", "[", "i", "]", "=", "cls_dets", "\n", "", "i", "+=", "1", "\n", "\n", "", "for", "l", "in", "range", "(", "len", "(", "name_imgs", ")", ")", ":", "\n", "                    ", "if", "database", "in", "[", "'IconArt_v1'", ",", "'watercolor'", ",", "'clipart'", ",", "'PeopleArt'", ",", "'comic'", ",", "'CASPApaintings'", "]", ":", "\n", "                        ", "name_all_test", "+=", "[", "[", "str", "(", "name_imgs", "[", "l", "]", ".", "decode", "(", "\"utf-8\"", ")", ")", "]", "]", "\n", "", "else", ":", "\n", "                        ", "name_all_test", "+=", "[", "[", "name_imgs", "[", "l", "]", "]", "]", "\n", "\n", "", "", "if", "PlotRegions", ":", "\n", "                    ", "if", "verbose", "and", "(", "ii", "%", "1000", "==", "0", ")", ":", "\n", "                        ", "print", "(", "\"Plot the images :\"", ",", "ii", ")", "\n", "", "if", "verbose", "and", "FirstTime", ":", "\n", "                        ", "FirstTime", "=", "False", "\n", "print", "(", "\"Start ploting Regions on test set\"", ")", "\n", "", "for", "k", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "                        ", "if", "ii", ">", "number_im", ":", "\n", "                            ", "continue", "\n", "", "if", "database", "in", "[", "'IconArt_v1'", ",", "'watercolor'", ",", "'clipart'", ",", "'PeopleArt'", ",", "'comic'", ",", "'CASPApaintings'", "]", ":", "\n", "                            ", "name_img", "=", "str", "(", "name_imgs", "[", "k", "]", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "", "else", ":", "\n", "                            ", "name_img", "=", "name_imgs", "[", "k", "]", "\n", "", "rois", "=", "roiss", "[", "k", ",", ":", "]", "\n", "if", "database", "in", "[", "'IconArt_v1'", ",", "'watercolor'", ",", "'clipart'", ",", "'PeopleArt'", ",", "'comic'", ",", "'CASPApaintings'", "]", ":", "\n", "                            ", "complet_name", "=", "os", ".", "path", ".", "join", "(", "path_to_img", ",", "name_img", "+", "'.jpg'", ")", "\n", "name_sans_ext", "=", "name_img", "\n", "", "elif", "(", "database", "==", "'Wikidata_Paintings'", ")", "or", "(", "database", "==", "'Wikidata_Paintings_miniset_verif'", ")", ":", "\n", "                            ", "name_sans_ext", "=", "os", ".", "path", ".", "splitext", "(", "name_img", ")", "[", "0", "]", "\n", "complet_name", "=", "os", ".", "path", ".", "join", "(", "path_to_img", ",", "name_sans_ext", "+", "'.jpg'", ")", "\n", "\n", "", "im", "=", "cv2", ".", "imread", "(", "complet_name", ")", "\n", "blobs", ",", "im_scales", "=", "get_blobs", "(", "im", ")", "\n", "roi_boxes_and_score", "=", "[", "]", "\n", "local_cls", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "\n", "                            ", "cls_dets", "=", "all_boxes", "[", "j", "]", "[", "ii", "]", "# Here we have #classe x box dim + score", "\n", "if", "len", "(", "cls_dets", ")", ">", "0", ":", "\n", "                                ", "local_cls", "+=", "[", "classes", "[", "j", "]", "]", "\n", "roi_boxes_score", "=", "cls_dets", "\n", "if", "roi_boxes_and_score", "is", "None", ":", "\n", "                                    ", "roi_boxes_and_score", "=", "[", "roi_boxes_score", "]", "\n", "", "else", ":", "\n", "                                    ", "roi_boxes_and_score", "+=", "[", "roi_boxes_score", "]", "\n", "\n", "", "", "", "if", "roi_boxes_and_score", "is", "None", ":", "roi_boxes_and_score", "=", "[", "[", "]", "]", "\n", "ii", "+=", "1", "\n", "cls", "=", "local_cls", "\n", "# In this case we will plot several version of the image", "\n", "vis_detections_list", "(", "im", ",", "cls", ",", "roi_boxes_and_score", ",", "thresh", "=", "-", "np", ".", "inf", ")", "\n", "name_output", "=", "os", ".", "path", ".", "join", "(", "path_to_output2", ",", "'Test'", ",", "name_sans_ext", "+", "'_Regions.jpg'", ")", "\n", "if", "database", "==", "'PeopleArt'", ":", "\n", "                            ", "list_split", "=", "name_output", ".", "split", "(", "'/'", ")", "[", "0", ":", "-", "1", "]", "\n", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "*", "list_split", ")", "\n", "pathlib", ".", "Path", "(", "path_tmp", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "plt", ".", "savefig", "(", "name_output", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "vis_detections_list", "(", "im", ",", "cls", ",", "roi_boxes_and_score", ",", "thresh", "=", "0.25", ")", "\n", "name_output", "=", "os", ".", "path", ".", "join", "(", "path_to_output2", ",", "'Test'", ",", "name_sans_ext", "+", "'_Regions_over025.jpg'", ")", "\n", "plt", ".", "savefig", "(", "name_output", ")", "\n", "plt", ".", "close", "(", ")", "\n", "vis_detections_list", "(", "im", ",", "cls", ",", "roi_boxes_and_score", ",", "thresh", "=", "0.5", ")", "\n", "name_output", "=", "os", ".", "path", ".", "join", "(", "path_to_output2", ",", "'Test'", ",", "name_sans_ext", "+", "'_Regions_over05.jpg'", ")", "\n", "plt", ".", "savefig", "(", "name_output", ")", "\n", "plt", ".", "close", "(", ")", "\n", "vis_detections_list", "(", "im", ",", "cls", ",", "roi_boxes_and_score", ",", "thresh", "=", "0.75", ")", "\n", "name_output", "=", "os", ".", "path", ".", "join", "(", "path_to_output2", ",", "'Test'", ",", "name_sans_ext", "+", "'_Regions_over075.jpg'", ")", "\n", "plt", ".", "savefig", "(", "name_output", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "                ", "break", "\n", "", "", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "true_label_all_test", "=", "np", ".", "concatenate", "(", "true_label_all_test", ")", "\n", "predict_label_all_test", "=", "np", ".", "transpose", "(", "np", ".", "concatenate", "(", "predict_label_all_test", ",", "axis", "=", "1", ")", ")", "\n", "name_all_test", "=", "np", ".", "concatenate", "(", "name_all_test", ")", "\n", "labels_test_predited", "=", "(", "np", ".", "sign", "(", "predict_label_all_test", ")", "+", "1.", ")", "/", "2", "\n", "labels_test_predited", "[", "np", ".", "where", "(", "labels_test_predited", "==", "0.5", ")", "]", "=", "0", "# To deal with the case where predict_label_all_test == 0 ", "\n", "return", "(", "true_label_all_test", ",", "predict_label_all_test", ",", "name_all_test", ",", "\n", "labels_test_predited", ",", "all_boxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.None.Run_MImax.parse_args": [[12, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.convert_from_depre.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "  ", "\"\"\"\n  Parse input arguments\n  \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a Weakly Supervised MI_Max model'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "dest", "=", "'dataset'", ",", "\n", "help", "=", "'training dataset'", ",", "\n", "default", "=", "'IconArt_v1'", ",", "type", "=", "str", ")", "# IconArt_v1  comic watercolor CASPApaintings", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "dest", "=", "'net'", ",", "\n", "help", "=", "'res152_COCO'", ",", "\n", "default", "=", "'res152_COCO'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--path_data'", ",", "dest", "=", "'path_data'", ",", "\n", "help", "=", "'directory to data'", ",", "default", "=", "\"data\"", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--path_output'", ",", "dest", "=", "'path_output'", ",", "\n", "help", "=", "'directory to output'", ",", "default", "=", "\"output\"", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--path_to_model'", ",", "dest", "=", "'path_to_model'", ",", "\n", "help", "=", "'directory to pretrained model'", ",", "default", "=", "\"model\"", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--Optimizer'", ",", "dest", "=", "'Optimizer'", ",", "\n", "help", "=", "'directory to load models'", ",", "default", "=", "\"GradientDescent\"", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_type'", ",", "dest", "=", "'loss_type'", ",", "\n", "help", "=", "'type of the loss : '", "' or hinge'", ",", "default", "=", "''", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--CV_Mode'", ",", "dest", "=", "'CV_Mode'", ",", "\n", "help", "=", "'set to CV if one want to use the CV mode'", ",", "default", "=", "''", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--k_per_bag'", ",", "dest", "=", "'k_per_bag'", ",", "\n", "help", "=", "'number of region considered per image'", ",", "\n", "default", "=", "300", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--LR'", ",", "dest", "=", "'LR'", ",", "\n", "help", "=", "'learning rate'", ",", "\n", "default", "=", "0.01", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "dest", "=", "'epsilon'", ",", "\n", "help", "=", "'epsilon when using score'", ",", "\n", "default", "=", "0.01", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--C'", ",", "dest", "=", "'C'", ",", "\n", "help", "=", "'regularization term'", ",", "\n", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--mini_batch_size'", ",", "dest", "=", "'mini_batch_size'", ",", "\n", "help", "=", "'mini batch size if 0 then it will be 1000'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_split'", ",", "dest", "=", "'num_split'", ",", "\n", "help", "=", "'number of split for the cross validation split'", ",", "\n", "default", "=", "2", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--restarts'", ",", "dest", "=", "'restarts'", ",", "\n", "help", "=", "'Number of reinitialization'", ",", "\n", "default", "=", "11", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--Polyhedral'", ",", "dest", "=", "'Polyhedral'", ",", "\n", "help", "=", "'Consider the polyhedral Mimax model.'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_iters_all_base'", ",", "dest", "=", "'max_iters_all_base'", ",", "\n", "help", "=", "'Number of iterations'", ",", "\n", "default", "=", "300", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--PlotRegions'", ",", "dest", "=", "'PlotRegions'", ",", "\n", "help", "=", "'plot regions on the train and test images'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "dest", "=", "'verbose'", ",", "\n", "help", "=", "'verbose mode'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--with_scores'", ",", "dest", "=", "'with_scores'", ",", "\n", "help", "=", "'use the score'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--C_Searching'", ",", "dest", "=", "'C_Searching'", ",", "\n", "help", "=", "'use different C values'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.lib.setup.custom_build_ext.build_extensions": [[103, 106], ["setup.customize_compiler_for_nvcc", "Cython.Distutils.build_ext.build_extensions"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.lib.setup.customize_compiler_for_nvcc", "home.repos.pwc.inspect_result.nicaogr_Mi_max.lib.setup.custom_build_ext.build_extensions"], ["    ", "def", "build_extensions", "(", "self", ")", ":", "\n", "        ", "customize_compiler_for_nvcc", "(", "self", ".", "compiler", ")", "\n", "build_ext", ".", "build_extensions", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.lib.setup.find_in_path": [[15, 23], ["path.split", "os.path.join", "os.path.exists", "os.path.abspath"], "function", ["None"], ["def", "find_in_path", "(", "name", ",", "path", ")", ":", "\n", "    ", "\"Find a file in a search path\"", "\n", "#adapted fom http://code.activestate.com/recipes/52224-find-a-file-given-a-search-path/", "\n", "for", "dir", "in", "path", ".", "split", "(", "os", ".", "pathsep", ")", ":", "\n", "        ", "binpath", "=", "pjoin", "(", "dir", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "binpath", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "abspath", "(", "binpath", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.lib.setup.locate_cuda": [[24, 55], ["cudaconfig.items", "os.path.join", "os.path.join", "setup.find_in_path", "os.path.dirname", "os.path.join", "os.path.join", "EnvironmentError", "os.path.dirname", "os.path.exists", "EnvironmentError"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.lib.setup.find_in_path"], ["", "def", "locate_cuda", "(", ")", ":", "\n", "    ", "\"\"\"Locate the CUDA environment on the system\n\n    Returns a dict with keys 'home', 'nvcc', 'include', and 'lib64'\n    and values giving the absolute path to each directory.\n\n    Starts by looking for the CUDAHOME env variable. If not found, everything\n    is based on finding 'nvcc' in the PATH.\n    \"\"\"", "\n", "\n", "# first check if the CUDAHOME env variable is in use", "\n", "if", "'CUDAHOME'", "in", "os", ".", "environ", ":", "\n", "        ", "home", "=", "os", ".", "environ", "[", "'CUDAHOME'", "]", "\n", "nvcc", "=", "pjoin", "(", "home", ",", "'bin'", ",", "'nvcc'", ")", "\n", "", "else", ":", "\n", "# otherwise, search the PATH for NVCC", "\n", "        ", "default_path", "=", "pjoin", "(", "os", ".", "sep", ",", "'usr'", ",", "'local'", ",", "'cuda'", ",", "'bin'", ")", "\n", "nvcc", "=", "find_in_path", "(", "'nvcc'", ",", "os", ".", "environ", "[", "'PATH'", "]", "+", "os", ".", "pathsep", "+", "default_path", ")", "\n", "if", "nvcc", "is", "None", ":", "\n", "            ", "raise", "EnvironmentError", "(", "'The nvcc binary could not be '", "\n", "'located in your $PATH. Either add it to your path, or set $CUDAHOME'", ")", "\n", "", "home", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "nvcc", ")", ")", "\n", "\n", "", "cudaconfig", "=", "{", "'home'", ":", "home", ",", "'nvcc'", ":", "nvcc", ",", "\n", "'include'", ":", "pjoin", "(", "home", ",", "'include'", ")", ",", "\n", "'lib64'", ":", "pjoin", "(", "home", ",", "'lib64'", ")", "}", "\n", "for", "k", ",", "v", "in", "cudaconfig", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "v", ")", ":", "\n", "            ", "raise", "EnvironmentError", "(", "'The CUDA %s path could not be located in %s'", "%", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "", "return", "cudaconfig", "\n", "", "CUDA", "=", "locate_cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.lib.setup.customize_compiler_for_nvcc": [[63, 100], ["setup..src_extensions.append", "print", "setup..set_executable", "os.path.splitext"], "function", ["None"], ["", "def", "customize_compiler_for_nvcc", "(", "self", ")", ":", "\n", "    ", "\"\"\"inject deep into distutils to customize how the dispatch\n    to gcc/nvcc works.\n\n    If you subclass UnixCCompiler, it's not trivial to get your subclass\n    injected in, and still have the right customizations (i.e.\n    distutils.sysconfig.customize_compiler) run on it. So instead of going\n    the OO route, I have this. Note, it's kindof like a wierd functional\n    subclassing going on.\"\"\"", "\n", "\n", "# tell the compiler it can processes .cu", "\n", "self", ".", "src_extensions", ".", "append", "(", "'.cu'", ")", "\n", "\n", "# save references to the default compiler_so and _comple methods", "\n", "default_compiler_so", "=", "self", ".", "compiler_so", "\n", "super", "=", "self", ".", "_compile", "\n", "\n", "# now redefine the _compile method. This gets executed for each", "\n", "# object but distutils doesn't have the ability to change compilers", "\n", "# based on source extension: we add it.", "\n", "def", "_compile", "(", "obj", ",", "src", ",", "ext", ",", "cc_args", ",", "extra_postargs", ",", "pp_opts", ")", ":", "\n", "        ", "print", "(", "extra_postargs", ")", "\n", "if", "os", ".", "path", ".", "splitext", "(", "src", ")", "[", "1", "]", "==", "'.cu'", ":", "\n", "# use the cuda for .cu files", "\n", "            ", "self", ".", "set_executable", "(", "'compiler_so'", ",", "CUDA", "[", "'nvcc'", "]", ")", "\n", "# use only a subset of the extra_postargs, which are 1-1 translated", "\n", "# from the extra_compile_args in the Extension class", "\n", "postargs", "=", "extra_postargs", "[", "'nvcc'", "]", "\n", "", "else", ":", "\n", "            ", "postargs", "=", "extra_postargs", "[", "'gcc'", "]", "\n", "\n", "", "super", "(", "obj", ",", "src", ",", "ext", ",", "cc_args", ",", "postargs", ",", "pp_opts", ")", "\n", "# reset the default compiler_so, which we might have changed for cuda", "\n", "self", ".", "compiler_so", "=", "default_compiler_so", "\n", "\n", "# inject our redefined _compile method into the class", "\n", "", "self", ".", "_compile", "=", "_compile", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer.__init__": [[24, 31], ["layer.RoIDataLayer._shuffle_roidb_inds"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer._shuffle_roidb_inds"], ["def", "__init__", "(", "self", ",", "roidb", ",", "num_classes", ",", "random", "=", "False", ")", ":", "\n", "    ", "\"\"\"Set the roidb to be used by this layer during training.\"\"\"", "\n", "self", ".", "_roidb", "=", "roidb", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "# Also set a random flag", "\n", "self", ".", "_random", "=", "random", "\n", "self", ".", "_shuffle_roidb_inds", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer._shuffle_roidb_inds": [[32, 63], ["numpy.random.get_state", "numpy.random.seed", "numpy.array", "numpy.array", "numpy.logical_not", "numpy.hstack", "numpy.reshape", "numpy.random.permutation", "numpy.reshape", "numpy.random.permutation", "numpy.random.set_state", "int", "numpy.where", "numpy.where", "numpy.arange", "numpy.arange", "round", "numpy.random.permutation", "numpy.random.permutation", "len", "time.time"], "methods", ["None"], ["", "def", "_shuffle_roidb_inds", "(", "self", ")", ":", "\n", "    ", "\"\"\"Randomly permute the training roidb.\"\"\"", "\n", "# If the random flag is set, ", "\n", "# then the database is shuffled according to system time", "\n", "# Useful for the validation set", "\n", "if", "self", ".", "_random", ":", "\n", "      ", "st0", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "millis", "=", "int", "(", "round", "(", "time", ".", "time", "(", ")", "*", "1000", ")", ")", "%", "4294967295", "\n", "np", ".", "random", ".", "seed", "(", "millis", ")", "\n", "\n", "", "if", "cfg", ".", "TRAIN", ".", "ASPECT_GROUPING", ":", "\n", "      ", "widths", "=", "np", ".", "array", "(", "[", "r", "[", "'width'", "]", "for", "r", "in", "self", ".", "_roidb", "]", ")", "\n", "heights", "=", "np", ".", "array", "(", "[", "r", "[", "'height'", "]", "for", "r", "in", "self", ".", "_roidb", "]", ")", "\n", "horz", "=", "(", "widths", ">=", "heights", ")", "\n", "vert", "=", "np", ".", "logical_not", "(", "horz", ")", "\n", "horz_inds", "=", "np", ".", "where", "(", "horz", ")", "[", "0", "]", "\n", "vert_inds", "=", "np", ".", "where", "(", "vert", ")", "[", "0", "]", "\n", "inds", "=", "np", ".", "hstack", "(", "(", "\n", "np", ".", "random", ".", "permutation", "(", "horz_inds", ")", ",", "\n", "np", ".", "random", ".", "permutation", "(", "vert_inds", ")", ")", ")", "\n", "inds", "=", "np", ".", "reshape", "(", "inds", ",", "(", "-", "1", ",", "2", ")", ")", "\n", "row_perm", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "inds", ".", "shape", "[", "0", "]", ")", ")", "\n", "inds", "=", "np", ".", "reshape", "(", "inds", "[", "row_perm", ",", ":", "]", ",", "(", "-", "1", ",", ")", ")", "\n", "self", ".", "_perm", "=", "inds", "\n", "", "else", ":", "\n", "      ", "self", ".", "_perm", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "self", ".", "_roidb", ")", ")", ")", "\n", "# Restore the random state", "\n", "", "if", "self", ".", "_random", ":", "\n", "      ", "np", ".", "random", ".", "set_state", "(", "st0", ")", "\n", "\n", "", "self", ".", "_cur", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer._get_next_minibatch_inds": [[64, 74], ["len", "layer.RoIDataLayer._shuffle_roidb_inds"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer._shuffle_roidb_inds"], ["", "def", "_get_next_minibatch_inds", "(", "self", ")", ":", "\n", "    ", "\"\"\"Return the roidb indices for the next minibatch.\"\"\"", "\n", "\n", "if", "self", ".", "_cur", "+", "cfg", ".", "TRAIN", ".", "IMS_PER_BATCH", ">=", "len", "(", "self", ".", "_roidb", ")", ":", "\n", "      ", "self", ".", "_shuffle_roidb_inds", "(", ")", "\n", "\n", "", "db_inds", "=", "self", ".", "_perm", "[", "self", ".", "_cur", ":", "self", ".", "_cur", "+", "cfg", ".", "TRAIN", ".", "IMS_PER_BATCH", "]", "\n", "self", ".", "_cur", "+=", "cfg", ".", "TRAIN", ".", "IMS_PER_BATCH", "\n", "\n", "return", "db_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer._get_next_minibatch": [[75, 84], ["layer.RoIDataLayer._get_next_minibatch_inds", "roi_data_layer.minibatch.get_minibatch"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer._get_next_minibatch_inds", "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.minibatch.get_minibatch"], ["", "def", "_get_next_minibatch", "(", "self", ")", ":", "\n", "    ", "\"\"\"Return the blobs to be used for the next minibatch.\n\n    If cfg.TRAIN.USE_PREFETCH is True, then blobs will be computed in a\n    separate process and made available through self._blob_queue.\n    \"\"\"", "\n", "db_inds", "=", "self", ".", "_get_next_minibatch_inds", "(", ")", "\n", "minibatch_db", "=", "[", "self", ".", "_roidb", "[", "i", "]", "for", "i", "in", "db_inds", "]", "\n", "return", "get_minibatch", "(", "minibatch_db", ",", "self", ".", "_num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer.forward": [[85, 89], ["layer.RoIDataLayer._get_next_minibatch"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer._get_next_minibatch"], ["", "def", "forward", "(", "self", ")", ":", "\n", "    ", "\"\"\"Get blobs and copy them into this layer's top blob vector.\"\"\"", "\n", "blobs", "=", "self", ".", "_get_next_minibatch", "(", ")", "\n", "return", "blobs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.minibatch.get_minibatch": [[19, 53], ["len", "numpy.randint", "minibatch._get_image_blob", "numpy.empty", "numpy.array", "len", "len", "len", "numpy.where", "numpy.where", "len", "numpy.all", "[].toarray"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test._get_image_blob"], ["def", "get_minibatch", "(", "roidb", ",", "num_classes", ")", ":", "\n", "  ", "\"\"\"Given a roidb, construct a minibatch sampled from it.\"\"\"", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "# Sample random scales to use for each image in this batch", "\n", "random_scale_inds", "=", "npr", ".", "randint", "(", "0", ",", "high", "=", "len", "(", "cfg", ".", "TRAIN", ".", "SCALES", ")", ",", "\n", "size", "=", "num_images", ")", "\n", "assert", "(", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "%", "num_images", "==", "0", ")", ",", "'num_images ({}) must divide BATCH_SIZE ({})'", ".", "format", "(", "num_images", ",", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ")", "\n", "\n", "# Get the input image blob, formatted for caffe", "\n", "im_blob", ",", "im_scales", "=", "_get_image_blob", "(", "roidb", ",", "random_scale_inds", ")", "\n", "\n", "blobs", "=", "{", "'data'", ":", "im_blob", "}", "\n", "\n", "assert", "len", "(", "im_scales", ")", "==", "1", ",", "\"Single batch only\"", "\n", "assert", "len", "(", "roidb", ")", "==", "1", ",", "\"Single batch only\"", "\n", "\n", "# gt boxes: (x1, y1, x2, y2, cls)", "\n", "if", "cfg", ".", "TRAIN", ".", "USE_ALL_GT", ":", "\n", "# Include all ground truth boxes", "\n", "    ", "gt_inds", "=", "np", ".", "where", "(", "roidb", "[", "0", "]", "[", "'gt_classes'", "]", "!=", "0", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# For the COCO ground truth boxes, exclude the ones that are ''iscrowd'' ", "\n", "    ", "gt_inds", "=", "np", ".", "where", "(", "roidb", "[", "0", "]", "[", "'gt_classes'", "]", "!=", "0", "&", "np", ".", "all", "(", "roidb", "[", "0", "]", "[", "'gt_overlaps'", "]", ".", "toarray", "(", ")", ">", "-", "1.0", ",", "axis", "=", "1", ")", ")", "[", "0", "]", "\n", "", "gt_boxes", "=", "np", ".", "empty", "(", "(", "len", "(", "gt_inds", ")", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_boxes", "[", ":", ",", "0", ":", "4", "]", "=", "roidb", "[", "0", "]", "[", "'boxes'", "]", "[", "gt_inds", ",", ":", "]", "*", "im_scales", "[", "0", "]", "\n", "gt_boxes", "[", ":", ",", "4", "]", "=", "roidb", "[", "0", "]", "[", "'gt_classes'", "]", "[", "gt_inds", "]", "\n", "blobs", "[", "'gt_boxes'", "]", "=", "gt_boxes", "\n", "blobs", "[", "'im_info'", "]", "=", "np", ".", "array", "(", "\n", "[", "im_blob", ".", "shape", "[", "1", "]", ",", "im_blob", ".", "shape", "[", "2", "]", ",", "im_scales", "[", "0", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "blobs", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.minibatch._get_image_blob": [[54, 75], ["len", "range", "utils.blob.im_list_to_blob", "cv2.imread", "utils.blob.prep_im_for_blob", "im_scales.append", "processed_ims.append"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.blob.im_list_to_blob", "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.blob.prep_im_for_blob"], ["", "def", "_get_image_blob", "(", "roidb", ",", "scale_inds", ")", ":", "\n", "  ", "\"\"\"Builds an input blob from the images in the roidb at the specified\n  scales.\n  \"\"\"", "\n", "num_images", "=", "len", "(", "roidb", ")", "\n", "processed_ims", "=", "[", "]", "\n", "im_scales", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "    ", "im", "=", "cv2", ".", "imread", "(", "roidb", "[", "i", "]", "[", "'image'", "]", ")", "\n", "if", "roidb", "[", "i", "]", "[", "'flipped'", "]", ":", "\n", "      ", "im", "=", "im", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "target_size", "=", "cfg", ".", "TRAIN", ".", "SCALES", "[", "scale_inds", "[", "i", "]", "]", "\n", "im", ",", "im_scale", "=", "prep_im_for_blob", "(", "im", ",", "cfg", ".", "PIXEL_MEANS", ",", "target_size", ",", "\n", "cfg", ".", "TRAIN", ".", "MAX_SIZE", ")", "\n", "im_scales", ".", "append", "(", "im_scale", ")", "\n", "processed_ims", ".", "append", "(", "im", ")", "\n", "\n", "# Create a blob to hold the input images", "\n", "", "blob", "=", "im_list_to_blob", "(", "processed_ims", ")", "\n", "\n", "return", "blob", ",", "im_scales", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.roidb.prepare_roidb": [[19, 50], ["range", "imdb.name.startswith", "len", "imdb.image_path_at", "[].toarray", "[].toarray.max", "[].toarray.argmax", "all", "all", "imdb.name.startswith", "numpy.where", "numpy.where", "PIL.Image.open", "range", "imdb.image_path_at"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.image_path_at", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.image_path_at"], ["def", "prepare_roidb", "(", "imdb", ")", ":", "\n", "  ", "\"\"\"Enrich the imdb's roidb by adding some derived quantities that\n  are useful for training. This function precomputes the maximum\n  overlap, taken over ground-truth boxes, between each ROI and\n  each ground-truth box. The class with maximum overlap is also\n  recorded.\n  \"\"\"", "\n", "roidb", "=", "imdb", ".", "roidb", "\n", "if", "not", "(", "imdb", ".", "name", ".", "startswith", "(", "'coco'", ")", ")", ":", "\n", "    ", "sizes", "=", "[", "PIL", ".", "Image", ".", "open", "(", "imdb", ".", "image_path_at", "(", "i", ")", ")", ".", "size", "\n", "for", "i", "in", "range", "(", "imdb", ".", "num_images", ")", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "imdb", ".", "image_index", ")", ")", ":", "\n", "    ", "roidb", "[", "i", "]", "[", "'image'", "]", "=", "imdb", ".", "image_path_at", "(", "i", ")", "\n", "if", "not", "(", "imdb", ".", "name", ".", "startswith", "(", "'coco'", ")", ")", ":", "\n", "      ", "roidb", "[", "i", "]", "[", "'width'", "]", "=", "sizes", "[", "i", "]", "[", "0", "]", "\n", "roidb", "[", "i", "]", "[", "'height'", "]", "=", "sizes", "[", "i", "]", "[", "1", "]", "\n", "# need gt_overlaps as a dense array for argmax", "\n", "", "gt_overlaps", "=", "roidb", "[", "i", "]", "[", "'gt_overlaps'", "]", ".", "toarray", "(", ")", "\n", "# max overlap with gt over classes (columns)", "\n", "max_overlaps", "=", "gt_overlaps", ".", "max", "(", "axis", "=", "1", ")", "\n", "# gt class that had the max overlap", "\n", "max_classes", "=", "gt_overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "roidb", "[", "i", "]", "[", "'max_classes'", "]", "=", "max_classes", "\n", "roidb", "[", "i", "]", "[", "'max_overlaps'", "]", "=", "max_overlaps", "\n", "# sanity checks", "\n", "# max overlap of 0 => class should be zero (background)", "\n", "zero_inds", "=", "np", ".", "where", "(", "max_overlaps", "==", "0", ")", "[", "0", "]", "\n", "assert", "all", "(", "max_classes", "[", "zero_inds", "]", "==", "0", ")", "\n", "# max overlap > 0 => class should not be zero (must be a fg class)", "\n", "nonzero_inds", "=", "np", ".", "where", "(", "max_overlaps", ">", "0", ")", "[", "0", "]", "\n", "assert", "all", "(", "max_classes", "[", "nonzero_inds", "]", "!=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.__init__": [[12, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.", "\n", "self", ".", "diff", "=", "0.", "\n", "self", ".", "average_time", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.tic": [[19, 23], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.toc": [[24, 33], ["time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "        ", "self", ".", "diff", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "self", ".", "average_time", "=", "self", ".", "total_time", "/", "self", ".", "calls", "\n", "if", "average", ":", "\n", "            ", "return", "self", ".", "average_time", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "diff", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.visualization._draw_single_box": [[50, 70], ["PIL.Draw", "ImageDraw.Draw.line", "font.getsize", "numpy.ceil", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text"], "function", ["None"], ["", "def", "_draw_single_box", "(", "image", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ",", "display_str", ",", "font", ",", "color", "=", "'black'", ",", "thickness", "=", "4", ")", ":", "\n", "  ", "draw", "=", "ImageDraw", ".", "Draw", "(", "image", ")", "\n", "(", "left", ",", "right", ",", "top", ",", "bottom", ")", "=", "(", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", ")", "\n", "draw", ".", "line", "(", "[", "(", "left", ",", "top", ")", ",", "(", "left", ",", "bottom", ")", ",", "(", "right", ",", "bottom", ")", ",", "\n", "(", "right", ",", "top", ")", ",", "(", "left", ",", "top", ")", "]", ",", "width", "=", "thickness", ",", "fill", "=", "color", ")", "\n", "text_bottom", "=", "bottom", "\n", "# Reverse list and print from bottom to top.", "\n", "text_width", ",", "text_height", "=", "font", ".", "getsize", "(", "display_str", ")", "\n", "margin", "=", "np", ".", "ceil", "(", "0.05", "*", "text_height", ")", "\n", "draw", ".", "rectangle", "(", "\n", "[", "(", "left", ",", "text_bottom", "-", "text_height", "-", "2", "*", "margin", ")", ",", "(", "left", "+", "text_width", ",", "\n", "text_bottom", ")", "]", ",", "\n", "fill", "=", "color", ")", "\n", "draw", ".", "text", "(", "\n", "(", "left", "+", "margin", ",", "text_bottom", "-", "text_height", "-", "margin", ")", ",", "\n", "display_str", ",", "\n", "fill", "=", "'black'", ",", "\n", "font", "=", "font", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.visualization.draw_bounding_boxes": [[71, 90], ["gt_boxes.copy", "numpy.round", "PIL.fromarray", "six.moves.range", "numpy.array", "numpy.uint8", "int", "visualization._draw_single_box", "gt_boxes_new[].copy"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.visualization._draw_single_box"], ["", "def", "draw_bounding_boxes", "(", "image", ",", "gt_boxes", ",", "im_info", ")", ":", "\n", "  ", "num_boxes", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "gt_boxes_new", "=", "gt_boxes", ".", "copy", "(", ")", "\n", "gt_boxes_new", "[", ":", ",", ":", "4", "]", "=", "np", ".", "round", "(", "gt_boxes_new", "[", ":", ",", ":", "4", "]", ".", "copy", "(", ")", "/", "im_info", "[", "2", "]", ")", "\n", "disp_image", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", "[", "0", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_boxes", ")", ":", "\n", "    ", "this_class", "=", "int", "(", "gt_boxes_new", "[", "i", ",", "4", "]", ")", "\n", "disp_image", "=", "_draw_single_box", "(", "disp_image", ",", "\n", "gt_boxes_new", "[", "i", ",", "0", "]", ",", "\n", "gt_boxes_new", "[", "i", ",", "1", "]", ",", "\n", "gt_boxes_new", "[", "i", ",", "2", "]", ",", "\n", "gt_boxes_new", "[", "i", ",", "3", "]", ",", "\n", "'N%02d-C%02d'", "%", "(", "i", ",", "this_class", ")", ",", "\n", "FONT", ",", "\n", "color", "=", "STANDARD_COLORS", "[", "this_class", "%", "NUM_COLORS", "]", ")", "\n", "\n", "", "image", "[", "0", ",", ":", "]", "=", "np", ".", "array", "(", "disp_image", ")", "\n", "return", "image", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.bbox.bbox_overlaps": [[12, 45], ["range", "range", "min", "max", "float", "min", "max"], "function", ["None"], ["def", "bbox_overlaps", "(", "boxes", ",", "query_boxes", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    boxes: (N, 4) ndarray of float\n    query_boxes: (K, 4) ndarray of float\n    Returns\n    -------\n    overlaps: (N, K) ndarray of overlap between boxes and query_boxes\n    \"\"\"", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "box_area", "=", "(", "\n", "(", "query_boxes", "[", "k", ",", "2", "]", "-", "query_boxes", "[", "k", ",", "0", "]", "+", "1", ")", "*", "\n", "(", "query_boxes", "[", "k", ",", "3", "]", "-", "query_boxes", "[", "k", ",", "1", "]", "+", "1", ")", "\n", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "iw", "=", "(", "\n", "min", "(", "boxes", "[", "n", ",", "2", "]", ",", "query_boxes", "[", "k", ",", "2", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "0", "]", ",", "query_boxes", "[", "k", ",", "0", "]", ")", "+", "1", "\n", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "\n", "min", "(", "boxes", "[", "n", ",", "3", "]", ",", "query_boxes", "[", "k", ",", "3", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "1", "]", ",", "query_boxes", "[", "k", ",", "1", "]", ")", "+", "1", "\n", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "ua", "=", "float", "(", "\n", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", "+", "1", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", "+", "1", ")", "+", "\n", "box_area", "-", "iw", "*", "ih", "\n", ")", "\n", "overlaps", "[", "n", ",", "k", "]", "=", "iw", "*", "ih", "/", "ua", "\n", "", "", "", "", "return", "overlaps", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.blob.im_list_to_blob": [[17, 31], ["numpy.array().max", "len", "numpy.zeros", "range", "numpy.array"], "function", ["None"], ["def", "im_list_to_blob", "(", "ims", ")", ":", "\n", "  ", "\"\"\"Convert a list of images into a network input.\n\n  Assumes images are already prepared (means subtracted, BGR order, ...).\n  \"\"\"", "\n", "max_shape", "=", "np", ".", "array", "(", "[", "im", ".", "shape", "for", "im", "in", "ims", "]", ")", ".", "max", "(", "axis", "=", "0", ")", "\n", "num_images", "=", "len", "(", "ims", ")", "\n", "blob", "=", "np", ".", "zeros", "(", "(", "num_images", ",", "max_shape", "[", "0", "]", ",", "max_shape", "[", "1", "]", ",", "3", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "    ", "im", "=", "ims", "[", "i", "]", "\n", "blob", "[", "i", ",", "0", ":", "im", ".", "shape", "[", "0", "]", ",", "0", ":", "im", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "im", "\n", "\n", "", "return", "blob", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.blob.prep_im_for_blob": [[33, 48], ["cv2.resize.astype", "numpy.min", "numpy.max", "cv2.resize", "float", "float", "numpy.round", "float", "float"], "function", ["None"], ["", "def", "prep_im_for_blob", "(", "im", ",", "pixel_means", ",", "target_size", ",", "max_size", ")", ":", "\n", "  ", "\"\"\"Mean subtract and scale an image for use in a blob.\"\"\"", "\n", "im", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "im", "-=", "pixel_means", "\n", "im_shape", "=", "im", ".", "shape", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "max", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_scale", "=", "float", "(", "target_size", ")", "/", "float", "(", "im_size_min", ")", "\n", "# Prevent the biggest axis from being more than MAX_SIZE", "\n", "if", "np", ".", "round", "(", "im_scale", "*", "im_size_max", ")", ">", "max_size", ":", "\n", "    ", "im_scale", "=", "float", "(", "max_size", ")", "/", "float", "(", "im_size_max", ")", "\n", "", "im", "=", "cv2", ".", "resize", "(", "im", ",", "None", ",", "None", ",", "fx", "=", "im_scale", ",", "fy", "=", "im_scale", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "im", ",", "im_scale", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.ds_utils.unique_boxes": [[13, 19], ["numpy.array", "numpy.round().dot", "numpy.unique", "numpy.sort", "numpy.round"], "function", ["None"], ["def", "unique_boxes", "(", "boxes", ",", "scale", "=", "1.0", ")", ":", "\n", "  ", "\"\"\"Return indices of unique boxes.\"\"\"", "\n", "v", "=", "np", ".", "array", "(", "[", "1", ",", "1e3", ",", "1e6", ",", "1e9", "]", ")", "\n", "hashes", "=", "np", ".", "round", "(", "boxes", "*", "scale", ")", ".", "dot", "(", "v", ")", "\n", "_", ",", "index", "=", "np", ".", "unique", "(", "hashes", ",", "return_index", "=", "True", ")", "\n", "return", "np", ".", "sort", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.ds_utils.xywh_to_xyxy": [[21, 24], ["numpy.hstack"], "function", ["None"], ["", "def", "xywh_to_xyxy", "(", "boxes", ")", ":", "\n", "  ", "\"\"\"Convert [x y w h] box format to [x1 y1 x2 y2] format.\"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "boxes", "[", ":", ",", "0", ":", "2", "]", ",", "boxes", "[", ":", ",", "0", ":", "2", "]", "+", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.ds_utils.xyxy_to_xywh": [[26, 29], ["numpy.hstack"], "function", ["None"], ["", "def", "xyxy_to_xywh", "(", "boxes", ")", ":", "\n", "  ", "\"\"\"Convert [x1 y1 x2 y2] box format to [x y w h] format.\"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "boxes", "[", ":", ",", "0", ":", "2", "]", ",", "boxes", "[", ":", ",", "2", ":", "4", "]", "-", "boxes", "[", ":", ",", "0", ":", "2", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.ds_utils.validate_boxes": [[31, 43], ["None"], "function", ["None"], ["", "def", "validate_boxes", "(", "boxes", ",", "width", "=", "0", ",", "height", "=", "0", ")", ":", "\n", "  ", "\"\"\"Check that a set of boxes are valid.\"\"\"", "\n", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "assert", "(", "x1", ">=", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "y1", ">=", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "x2", ">=", "x1", ")", ".", "all", "(", ")", "\n", "assert", "(", "y2", ">=", "y1", ")", ".", "all", "(", ")", "\n", "assert", "(", "x2", "<", "width", ")", ".", "all", "(", ")", "\n", "assert", "(", "y2", "<", "height", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.ds_utils.filter_small_boxes": [[45, 50], ["numpy.where"], "function", ["None"], ["", "def", "filter_small_boxes", "(", "boxes", ",", "min_size", ")", ":", "\n", "  ", "w", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "\n", "h", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "\n", "keep", "=", "np", ".", "where", "(", "(", "w", ">=", "min_size", ")", "&", "(", "h", ">", "min_size", ")", ")", "[", "0", "]", "\n", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db.__init__": [[27, 68], ["datasets.imdb.imdb.__init__", "os.path.join", "dict", "WikiTenLabels_db.WikiTenLabels_db._load_image_set_index", "str", "os.path.exists", "os.path.exists", "WikiTenLabels_db.WikiTenLabels_db._get_default_path", "list", "uuid.uuid4", "zip", "list", "range"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.__init__", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_image_set_index", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_default_path"], ["  ", "def", "__init__", "(", "self", ",", "_image_db", ",", "image_set", ",", "use_diff", "=", "False", ",", "devkit_path", "=", "None", ",", "test_ext", "=", "False", ",", "\n", "force_dont_use_07_metric", "=", "False", ")", ":", "\n", "    ", "name", "=", "image_set", "\n", "if", "use_diff", ":", "\n", "      ", "name", "+=", "'_diff'", "\n", "", "imdb", ".", "__init__", "(", "self", ",", "name", ")", "\n", "self", ".", "_year", "=", "None", "\n", "self", ".", "_image_db", "=", "_image_db", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "if", "devkit_path", "is", "None", ":", "\n", "        ", "self", ".", "_devkit_path", "=", "self", ".", "_get_default_path", "(", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "_devkit_path", "=", "devkit_path", "\n", "", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "self", ".", "_image_db", ")", "\n", "#    print(self._data_path)", "\n", "if", "self", ".", "_image_db", "==", "'WikiTenLabels'", ":", "\n", "        ", "self", ".", "_classes", "=", "(", "'__background__'", ",", "'angel'", ",", "'beard'", ",", "'capital'", ",", "'Child_Jesus'", ",", "\n", "'crucifixion_of_Jesus'", ",", "\n", "'Mary'", ",", "'nudity'", ",", "'ruins'", ",", "'Saint_Sebastien'", ",", "'turban'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "NotImplemented", ")", "\n", "", "self", ".", "_class_to_ind", "=", "dict", "(", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", ")", "\n", "self", ".", "_image_ext", "=", "'.jpg'", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "'comp4'", "\n", "self", ".", "force_dont_use_07_metric", "=", "force_dont_use_07_metric", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "'cleanup'", ":", "True", ",", "\n", "'use_salt'", ":", "True", ",", "\n", "'use_diff'", ":", "use_diff", ",", "\n", "'matlab_eval'", ":", "False", ",", "\n", "'rpn_file'", ":", "None", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_devkit_path", ")", ",", "'CrossDomain path does not exist: {}'", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "self", ".", "_data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db.image_path_at": [[69, 74], ["WikiTenLabels_db.WikiTenLabels_db.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db.image_path_from_index": [[75, 84], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'JPEGImages'", ",", "\n", "index", "+", "self", ".", "_image_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db._load_image_set_index": [[85, 99], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Load the indexes listed in this dataset's image set file.\n    \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_set_file", ")", "\n", "#    print(image_set_file)", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "      ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db._get_default_path": [[100, 105], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the default path where PASCAL VOC is expected to be installed.\n    \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'VOCdevkit'", "+", "self", ".", "_year", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db.gt_roidb": [[106, 129], ["os.path.join", "os.path.exists", "print", "print", "WikiTenLabels_db.WikiTenLabels_db._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "'_gt_roidb.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "      ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "try", ":", "\n", "          ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "except", ":", "\n", "          ", "roidb", "=", "pickle", ".", "load", "(", "fid", ",", "encoding", "=", "'bytes'", ")", "\n", "", "", "print", "(", "'{} gt roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "\n", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "      ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote gt roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db.rpn_roidb": [[130, 140], ["print", "WikiTenLabels_db.WikiTenLabels_db.gt_roidb", "WikiTenLabels_db.WikiTenLabels_db._load_rpn_roidb", "datasets.imdb.imdb.merge_roidbs", "WikiTenLabels_db.WikiTenLabels_db._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.gt_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_rpn_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "    ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "'test'", "or", "True", ":", "\n", "      ", "print", "(", "\"You are here and I don't know why :)\"", ")", "\n", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "      ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db._load_rpn_roidb": [[141, 149], ["print", "os.path.exists", "WikiTenLabels_db.WikiTenLabels_db.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "    ", "filename", "=", "self", ".", "config", "[", "'rpn_file'", "]", "\n", "print", "(", "'loading {}'", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "'rpn data not found at: {}'", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db._load_pascal_annotation": [[150, 196], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "float", "float", "float", "float", "obj.find().text.strip", "int", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Load image and bounding boxes info from XML file in the PASCAL VOC\n    format.\n    \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'Annotations'", ",", "index", "+", "'.xml'", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "'object'", ")", "\n", "if", "not", "self", ".", "config", "[", "'use_diff'", "]", ":", "\n", "# Exclude the samples labeled as difficult", "\n", "      ", "non_diff_objs", "=", "[", "\n", "obj", "for", "obj", "in", "objs", "if", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "==", "0", "]", "\n", "# if len(non_diff_objs) != len(objs):", "\n", "#     print 'Removed {} difficult objects'.format(", "\n", "#         len(objs) - len(non_diff_objs))", "\n", "objs", "=", "non_diff_objs", "\n", "", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "-", "1", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "'name'", ")", ".", "text", ".", "strip", "(", ")", "]", "\n", "#cls = self._class_to_ind[obj.find('name').text.lower().strip()]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "gt_classes", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "seg_areas", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db._get_comp_id": [[197, 201], ["None"], "methods", ["None"], ["", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "    ", "comp_id", "=", "(", "self", ".", "_comp_id", "+", "'_'", "+", "self", ".", "_salt", "if", "self", ".", "config", "[", "'use_salt'", "]", "\n", "else", "self", ".", "_comp_id", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db._get_voc_results_file_template": [[202, 212], ["os.path.join", "WikiTenLabels_db.WikiTenLabels_db._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "    ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "'_det_'", "+", "self", ".", "_image_set", "+", "'_{:s}.txt'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'results'", ",", "\n", "self", ".", "_image_db", ",", "\n", "'Main'", ",", "\n", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db._write_voc_results_file": [[213, 232], ["enumerate", "print", "WikiTenLabels_db.WikiTenLabels_db._get_voc_results_file_template().format", "os.path.split", "pathlib.Path().mkdir", "open", "enumerate", "WikiTenLabels_db.WikiTenLabels_db._get_voc_results_file_template", "pathlib.Path", "range", "f.write"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "    ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "print", "(", "'Writing {} VOC results file'", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "head", ",", "tail", "=", "os", ".", "path", ".", "split", "(", "filename", ")", "\n", "pathlib", ".", "Path", "(", "head", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "filename", ",", "'wt'", ")", "as", "f", ":", "\n", "        ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "          ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "            ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "f", ".", "write", "(", "'{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'", ".", "\n", "format", "(", "index", ",", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "dets", "[", "k", ",", "3", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db.set_use_diff": [[233, 235], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "set_use_diff", "(", "self", ",", "boolean", ")", ":", "\n", "      ", "self", ".", "config", "[", "'use_diff'", "]", "=", "boolean", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db.set_force_dont_use_07_metric": [[236, 238], ["None"], "methods", ["None"], ["", "def", "set_force_dont_use_07_metric", "(", "self", ",", "boolean", ")", ":", "\n", "      ", "self", ".", "force_dont_use_07_metric", "=", "boolean", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db._do_python_eval": [[239, 285], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "pathlib.Path().mkdir", "WikiTenLabels_db.WikiTenLabels_db._get_voc_results_file_template().format", "datasets.voc_eval.voc_eval", "print", "print", "open", "pickle.dump", "numpy.mean", "numpy.mean", "int", "pathlib.Path", "WikiTenLabels_db.WikiTenLabels_db._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "'output'", ")", ":", "\n", "    ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "self", ".", "_image_db", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "self", ".", "_image_db", ",", "\n", "'ImageSets'", ",", "\n", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "(", "self", ".", "_year", "is", "None", ")", "or", "(", "int", "(", "self", ".", "_year", ")", "<", "2010", ")", "else", "False", "\n", "if", "self", ".", "force_dont_use_07_metric", "==", "True", ":", "use_07_metric", "=", "False", "\n", "print", "(", "'VOC07 metric? '", "+", "(", "'Yes'", "if", "use_07_metric", "else", "'No'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "      ", "pathlib", ".", "Path", "(", "output_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "use_diff", "=", "self", ".", "config", "[", "'use_diff'", "]", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "'Results:'", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "      ", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "ap", ")", ")", ")", "\n", "", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'--------------------------------------------------------------'", ")", "\n", "print", "(", "'Results computed with the **unofficial** Python eval code.'", ")", "\n", "print", "(", "'Results should be very close to the official MATLAB eval code.'", ")", "\n", "print", "(", "'Recompute with `./tools/reval.py --matlab ...` for your paper.'", ")", "\n", "print", "(", "'-- Thanks, The Management'", ")", "\n", "print", "(", "'--------------------------------------------------------------'", ")", "\n", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db._do_matlab_eval": [[286, 300], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "WikiTenLabels_db.WikiTenLabels_db._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "'output'", ")", ":", "\n", "    ", "print", "(", "'-----------------------------------------------------'", ")", "\n", "print", "(", "'Computing results with the official MATLAB eval code.'", ")", "\n", "print", "(", "'-----------------------------------------------------'", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'lib'", ",", "'datasets'", ",", "\n", "'VOCdevkit-matlab-wrapper'", ")", "\n", "cmd", "=", "'cd {} && '", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "'{:s} -nodisplay -nodesktop '", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "'voc_eval(\\'{:s}\\',\\'{:s}\\',\\'{:s}\\',\\'{:s}\\'); quit;\"'", ".", "format", "(", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "\n", "self", ".", "_image_set", ",", "output_dir", ")", "\n", "print", "(", "(", "'Running:\\n{}'", ".", "format", "(", "cmd", ")", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db.evaluate_localisation_ovthresh": [[301, 351], ["WikiTenLabels_db.WikiTenLabels_db._write_voc_results_file", "os.path.join", "os.path.join", "os.path.join", "enumerate", "print", "os.path.isdir", "pathlib.Path().mkdir", "WikiTenLabels_db.WikiTenLabels_db._get_voc_results_file_template().format", "datasets.voc_eval.voc_eval", "print", "open", "pickle.dump", "numpy.mean", "pathlib.Path", "WikiTenLabels_db.WikiTenLabels_db._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "evaluate_localisation_ovthresh", "(", "self", ",", "all_boxes", ",", "output_dir", ",", "ovthresh", ")", ":", "\n", "    ", "\"\"\"\n    Ajout par Nicolas Gonthier pour calculer des metrics un peu plus facile\n    \"\"\"", "\n", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "self", ".", "_image_db", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "self", ".", "_image_db", ",", "\n", "'ImageSets'", ",", "\n", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "self", ".", "force_dont_use_07_metric", "==", "False", "else", "False", "\n", "if", "self", ".", "force_dont_use_07_metric", "==", "True", ":", "use_07_metric", "=", "False", "\n", "#    print('VOC07 metric? ' + ('Yes' if use_07_metric else 'No'))", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "      ", "pathlib", ".", "Path", "(", "output_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "ovthresh", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "use_diff", "=", "self", ".", "config", "[", "'use_diff'", "]", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "#    print('~~~~~~~~')", "\n", "#    print('Results:')", "\n", "#    for ap in aps:", "\n", "#      print(('{:.3f}'.format(ap)))", "\n", "#    print(('{:.3f}'.format(np.mean(aps))))", "\n", "#    print('~~~~~~~~')", "\n", "##    print('')", "\n", "##    print('--------------------------------------------------------------')", "\n", "#    print('Results computed with the **unofficial** Python eval code.')", "\n", "##    print('Results should be very close to the official MATLAB eval code.')", "\n", "##    print('Recompute with `./tools/reval.py --matlab ...` for your paper.')", "\n", "##    print('-- Thanks, The Management')", "\n", "##    print('--------------------------------------------------------------')", "\n", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db.evaluate_detections": [[352, 364], ["WikiTenLabels_db.WikiTenLabels_db._write_voc_results_file", "WikiTenLabels_db.WikiTenLabels_db._do_python_eval", "WikiTenLabels_db.WikiTenLabels_db._do_matlab_eval", "WikiTenLabels_db.WikiTenLabels_db._get_voc_results_file_template().format", "os.remove", "WikiTenLabels_db.WikiTenLabels_db._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._do_python_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._do_matlab_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "    ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "aps", "=", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "'matlab_eval'", "]", ":", "\n", "      ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "'cleanup'", "]", ":", "\n", "      ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "        ", "if", "cls", "==", "'__background__'", ":", "\n", "          ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "", "", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.WikiTenLabels_db.WikiTenLabels_db.competition_mode": [[365, 372], ["None"], "methods", ["None"], ["", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "    ", "if", "on", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "False", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "False", "\n", "", "else", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "True", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco.__init__": [[28, 64], ["datasets.imdb.imdb.__init__", "os.join", "os.join", "pycocotools.coco.COCO", "coco.coco._COCO.loadCats", "tuple", "dict", "dict", "coco.coco._load_image_set_index", "coco.coco.set_proposal_method", "coco.coco.competition_mode", "coco.coco._get_ann_file", "coco.coco._COCO.getCatIds", "list", "list", "zip", "zip", "list", "coco.coco._COCO.getCatIds", "range"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.__init__", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_image_set_index", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.set_proposal_method", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.competition_mode", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._get_ann_file"], ["  ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ")", ":", "\n", "    ", "imdb", ".", "__init__", "(", "self", ",", "'coco_'", "+", "year", "+", "'_'", "+", "image_set", ")", "\n", "# COCO specific config options", "\n", "self", ".", "config", "=", "{", "'use_salt'", ":", "True", ",", "\n", "'cleanup'", ":", "True", "}", "\n", "# name, paths", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "self", ".", "_data_path", "=", "osp", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'coco'", ")", "\n", "# load COCO API, classes, class <-> id mappings", "\n", "self", ".", "_COCO", "=", "COCO", "(", "self", ".", "_get_ann_file", "(", ")", ")", "\n", "cats", "=", "self", ".", "_COCO", ".", "loadCats", "(", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", "\n", "self", ".", "_classes", "=", "tuple", "(", "[", "'__background__'", "]", "+", "[", "c", "[", "'name'", "]", "for", "c", "in", "cats", "]", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", ")", "\n", "self", ".", "_class_to_coco_cat_id", "=", "dict", "(", "list", "(", "zip", "(", "[", "c", "[", "'name'", "]", "for", "c", "in", "cats", "]", ",", "\n", "self", ".", "_COCO", ".", "getCatIds", "(", ")", ")", ")", ")", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "set_proposal_method", "(", "'gt'", ")", "\n", "self", ".", "competition_mode", "(", "False", ")", "\n", "\n", "# Some image sets are \"views\" (i.e. subsets) into others.", "\n", "# For example, minival2014 is a random 5000 image subset of val2014.", "\n", "# This mapping tells us where the view's images and proposals come from.", "\n", "self", ".", "_view_map", "=", "{", "\n", "'minival2014'", ":", "'val2014'", ",", "# 5k val2014 subset", "\n", "'valminusminival2014'", ":", "'val2014'", ",", "# val2014 \\setminus minival2014", "\n", "'test-dev2015'", ":", "'test2015'", ",", "\n", "}", "\n", "coco_name", "=", "image_set", "+", "year", "# e.g., \"val2014\"", "\n", "self", ".", "_data_name", "=", "(", "self", ".", "_view_map", "[", "coco_name", "]", "\n", "if", "coco_name", "in", "self", ".", "_view_map", "\n", "else", "coco_name", ")", "\n", "# Dataset splits that have ground-truth annotations (test splits", "\n", "# do not have gt annotations)", "\n", "self", ".", "_gt_splits", "=", "(", "'train'", ",", "'val'", ",", "'minival'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._get_ann_file": [[65, 70], ["os.join", "os.join", "coco.coco._image_set.find"], "methods", ["None"], ["", "def", "_get_ann_file", "(", "self", ")", ":", "\n", "    ", "prefix", "=", "'instances'", "if", "self", ".", "_image_set", ".", "find", "(", "'test'", ")", "==", "-", "1", "else", "'image_info'", "\n", "return", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "'annotations'", ",", "\n", "prefix", "+", "'_'", "+", "self", ".", "_image_set", "+", "self", ".", "_year", "+", "'.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._load_image_set_index": [[71, 77], ["coco.coco._COCO.getImgIds"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Load image ids.\n    \"\"\"", "\n", "image_ids", "=", "self", ".", "_COCO", ".", "getImgIds", "(", ")", "\n", "return", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._get_widths": [[181, 183], ["None"], "methods", ["None"], ["", "def", "_get_widths", "(", "self", ")", ":", "\n", "    ", "return", "[", "r", "[", "'width'", "]", "for", "r", "in", "self", ".", "roidb", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco.image_path_at": [[83, 88], ["coco.coco.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco.image_path_from_index": [[89, 102], ["os.join", "os.join", "os.exists", "os.exists", "str().zfill", "str"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "# Example image path for index=119993:", "\n", "#   images/train2014/COCO_train2014_000000119993.jpg", "\n", "file_name", "=", "(", "'COCO_'", "+", "self", ".", "_data_name", "+", "'_'", "+", "\n", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "'.jpg'", ")", "\n", "image_path", "=", "osp", ".", "join", "(", "self", ".", "_data_path", ",", "'images'", ",", "\n", "self", ".", "_data_name", ",", "file_name", ")", "\n", "assert", "osp", ".", "exists", "(", "image_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco.gt_roidb": [[103, 122], ["os.join", "os.join", "os.exists", "os.exists", "print", "print", "coco.coco._load_coco_annotation", "open", "pickle.dump", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._load_coco_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "osp", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "'_gt_roidb.pkl'", ")", "\n", "if", "osp", ".", "exists", "(", "cache_file", ")", ":", "\n", "      ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "print", "(", "'{} gt roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_coco_annotation", "(", "index", ")", "\n", "for", "index", "in", "self", ".", "_image_index", "]", "\n", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "      ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote gt roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._load_coco_annotation": [[123, 180], ["coco.coco._COCO.getAnnIds", "coco.coco._COCO.loadAnns", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "dict", "enumerate", "datasets.ds_utils.validate_boxes", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "coco.coco._COCO.loadImgs", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "valid_objs.append", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.ds_utils.validate_boxes"], ["", "def", "_load_coco_annotation", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Loads COCO bounding-box instance annotations. Crowd instances are\n    handled by marking their overlaps (with all categories) to -1. This\n    overlap value means that crowd \"instances\" are excluded from training.\n    \"\"\"", "\n", "im_ann", "=", "self", ".", "_COCO", ".", "loadImgs", "(", "index", ")", "[", "0", "]", "\n", "width", "=", "im_ann", "[", "'width'", "]", "\n", "height", "=", "im_ann", "[", "'height'", "]", "\n", "\n", "annIds", "=", "self", ".", "_COCO", ".", "getAnnIds", "(", "imgIds", "=", "index", ",", "iscrowd", "=", "None", ")", "\n", "objs", "=", "self", ".", "_COCO", ".", "loadAnns", "(", "annIds", ")", "\n", "# Sanitize bboxes -- some are invalid", "\n", "valid_objs", "=", "[", "]", "\n", "for", "obj", "in", "objs", ":", "\n", "      ", "x1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "'bbox'", "]", "[", "0", "]", ")", ")", "\n", "y1", "=", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "'bbox'", "]", "[", "1", "]", ")", ")", "\n", "x2", "=", "np", ".", "min", "(", "(", "width", "-", "1", ",", "x1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "'bbox'", "]", "[", "2", "]", "-", "1", ")", ")", ")", ")", "\n", "y2", "=", "np", ".", "min", "(", "(", "height", "-", "1", ",", "y1", "+", "np", ".", "max", "(", "(", "0", ",", "obj", "[", "'bbox'", "]", "[", "3", "]", "-", "1", ")", ")", ")", ")", "\n", "if", "obj", "[", "'area'", "]", ">", "0", "and", "x2", ">=", "x1", "and", "y2", ">=", "y1", ":", "\n", "        ", "obj", "[", "'clean_bbox'", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "valid_objs", ".", "append", "(", "obj", ")", "\n", "", "", "objs", "=", "valid_objs", "\n", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Lookup table to map from COCO category ids to our internal class", "\n", "# indices", "\n", "coco_cat_id_to_class_ind", "=", "dict", "(", "[", "(", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", ",", "\n", "self", ".", "_class_to_ind", "[", "cls", "]", ")", "\n", "for", "cls", "in", "self", ".", "_classes", "[", "1", ":", "]", "]", ")", "\n", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "cls", "=", "coco_cat_id_to_class_ind", "[", "obj", "[", "'category_id'", "]", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "obj", "[", "'clean_bbox'", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "seg_areas", "[", "ix", "]", "=", "obj", "[", "'area'", "]", "\n", "if", "obj", "[", "'iscrowd'", "]", ":", "\n", "# Set overlap to -1 for all classes for crowd objects", "\n", "# so they will be excluded during training", "\n", "        ", "overlaps", "[", "ix", ",", ":", "]", "=", "-", "1.0", "\n", "", "else", ":", "\n", "        ", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "\n", "", "", "validate_boxes", "(", "boxes", ",", "width", "=", "width", ",", "height", "=", "height", ")", "\n", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "return", "{", "'width'", ":", "width", ",", "\n", "'height'", ":", "height", ",", "\n", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "gt_classes", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "seg_areas", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco.append_flipped_images": [[184, 204], ["coco.coco._get_widths", "range", "[].copy", "boxes[].copy", "boxes[].copy", "coco.coco.roidb.append"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb._get_widths"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "    ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "      ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "'width'", ":", "widths", "[", "i", "]", ",", "\n", "'height'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'height'", "]", ",", "\n", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'gt_classes'", "]", ",", "\n", "'gt_overlaps'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'gt_overlaps'", "]", ",", "\n", "'flipped'", ":", "True", ",", "\n", "'seg_areas'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'seg_areas'", "]", "}", "\n", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._get_box_file": [[205, 211], ["os.join", "os.join", "str().zfill", "str"], "methods", ["None"], ["", "def", "_get_box_file", "(", "self", ",", "index", ")", ":", "\n", "# first 14 chars / first 22 chars / all chars + .mat", "\n", "# COCO_val2014_0/COCO_val2014_000000447/COCO_val2014_000000447991.mat", "\n", "    ", "file_name", "=", "(", "'COCO_'", "+", "self", ".", "_data_name", "+", "\n", "'_'", "+", "str", "(", "index", ")", ".", "zfill", "(", "12", ")", "+", "'.mat'", ")", "\n", "return", "osp", ".", "join", "(", "file_name", "[", ":", "14", "]", ",", "file_name", "[", ":", "22", "]", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._print_detection_eval_metrics": [[212, 244], ["coco.coco._print_detection_eval_metrics._get_thr_ind"], "methods", ["None"], ["", "def", "_print_detection_eval_metrics", "(", "self", ",", "coco_eval", ")", ":", "\n", "    ", "IoU_lo_thresh", "=", "0.5", "\n", "IoU_hi_thresh", "=", "0.95", "\n", "\n", "def", "_get_thr_ind", "(", "coco_eval", ",", "thr", ")", ":", "\n", "      ", "ind", "=", "np", ".", "where", "(", "(", "coco_eval", ".", "params", ".", "iouThrs", ">", "thr", "-", "1e-5", ")", "&", "\n", "(", "coco_eval", ".", "params", ".", "iouThrs", "<", "thr", "+", "1e-5", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "iou_thr", "=", "coco_eval", ".", "params", ".", "iouThrs", "[", "ind", "]", "\n", "assert", "np", ".", "isclose", "(", "iou_thr", ",", "thr", ")", "\n", "return", "ind", "\n", "\n", "", "ind_lo", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_lo_thresh", ")", "\n", "ind_hi", "=", "_get_thr_ind", "(", "coco_eval", ",", "IoU_hi_thresh", ")", "\n", "# precision has dims (iou, recall, cls, area range, max dets)", "\n", "# area range index 0: all area ranges", "\n", "# max dets index 2: 100 per image", "\n", "precision", "=", "coco_eval", ".", "eval", "[", "'precision'", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", ":", ",", "0", ",", "2", "]", "\n", "ap_default", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "(", "'~~~~ Mean and per-category AP @ IoU=[{:.2f},{:.2f}] '", "\n", "'~~~~'", ")", ".", "format", "(", "IoU_lo_thresh", ",", "IoU_hi_thresh", ")", ")", "\n", "print", "(", "'{:.1f}'", ".", "format", "(", "100", "*", "ap_default", ")", ")", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "# minus 1 because of __background__", "\n", "", "precision", "=", "coco_eval", ".", "eval", "[", "'precision'", "]", "[", "ind_lo", ":", "(", "ind_hi", "+", "1", ")", ",", ":", ",", "cls_ind", "-", "1", ",", "0", ",", "2", "]", "\n", "ap", "=", "np", ".", "mean", "(", "precision", "[", "precision", ">", "-", "1", "]", ")", "\n", "print", "(", "'{:.1f}'", ".", "format", "(", "100", "*", "ap", ")", ")", "\n", "\n", "", "print", "(", "'~~~~ Summary metrics ~~~~'", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._do_detection_eval": [[245, 257], ["coco.coco._COCO.loadRes", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "coco.coco._print_detection_eval_metrics", "os.join", "os.join", "print", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._print_detection_eval_metrics"], ["", "def", "_do_detection_eval", "(", "self", ",", "res_file", ",", "output_dir", ")", ":", "\n", "    ", "ann_type", "=", "'bbox'", "\n", "coco_dt", "=", "self", ".", "_COCO", ".", "loadRes", "(", "res_file", ")", "\n", "coco_eval", "=", "COCOeval", "(", "self", ".", "_COCO", ",", "coco_dt", ")", "\n", "coco_eval", ".", "params", ".", "useSegm", "=", "(", "ann_type", "==", "'segm'", ")", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "self", ".", "_print_detection_eval_metrics", "(", "coco_eval", ")", "\n", "eval_file", "=", "osp", ".", "join", "(", "output_dir", ",", "'detection_results.pkl'", ")", "\n", "with", "open", "(", "eval_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "      ", "pickle", ".", "dump", "(", "coco_eval", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'Wrote COCO eval results to: {}'", ".", "format", "(", "eval_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._coco_results_one_category": [[258, 275], ["enumerate", "boxes[].astype", "results.extend", "range"], "methods", ["None"], ["", "def", "_coco_results_one_category", "(", "self", ",", "boxes", ",", "cat_id", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "      ", "dets", "=", "boxes", "[", "im_ind", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "dets", "==", "[", "]", ":", "\n", "        ", "continue", "\n", "", "scores", "=", "dets", "[", ":", ",", "-", "1", "]", "\n", "xs", "=", "dets", "[", ":", ",", "0", "]", "\n", "ys", "=", "dets", "[", ":", ",", "1", "]", "\n", "ws", "=", "dets", "[", ":", ",", "2", "]", "-", "xs", "+", "1", "\n", "hs", "=", "dets", "[", ":", ",", "3", "]", "-", "ys", "+", "1", "\n", "results", ".", "extend", "(", "\n", "[", "{", "'image_id'", ":", "index", ",", "\n", "'category_id'", ":", "cat_id", ",", "\n", "'bbox'", ":", "[", "xs", "[", "k", "]", ",", "ys", "[", "k", "]", ",", "ws", "[", "k", "]", ",", "hs", "[", "k", "]", "]", ",", "\n", "'score'", ":", "scores", "[", "k", "]", "}", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._write_coco_results_file": [[276, 293], ["enumerate", "print", "print", "results.extend", "open", "json.dump", "coco.coco._coco_results_one_category"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._coco_results_one_category"], ["", "def", "_write_coco_results_file", "(", "self", ",", "all_boxes", ",", "res_file", ")", ":", "\n", "# [{\"image_id\": 42,", "\n", "#   \"category_id\": 18,", "\n", "#   \"bbox\": [258.15,41.29,348.26,243.78],", "\n", "#   \"score\": 0.236}, ...]", "\n", "    ", "results", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "print", "(", "'Collecting {} results ({:d}/{:d})'", ".", "format", "(", "cls", ",", "cls_ind", ",", "\n", "self", ".", "num_classes", "-", "1", ")", ")", "\n", "coco_cat_id", "=", "self", ".", "_class_to_coco_cat_id", "[", "cls", "]", "\n", "results", ".", "extend", "(", "self", ".", "_coco_results_one_category", "(", "all_boxes", "[", "cls_ind", "]", ",", "\n", "coco_cat_id", ")", ")", "\n", "", "print", "(", "'Writing results json to {}'", ".", "format", "(", "res_file", ")", ")", "\n", "with", "open", "(", "res_file", ",", "'w'", ")", "as", "fid", ":", "\n", "      ", "json", ".", "dump", "(", "results", ",", "fid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco.evaluate_detections": [[294, 309], ["os.join", "os.join", "coco.coco._write_coco_results_file", "coco.coco._image_set.find", "coco.coco._do_detection_eval", "os.remove", "os.remove", "os.remove", "os.remove", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._write_coco_results_file", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco._do_detection_eval"], ["", "", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "    ", "res_file", "=", "osp", ".", "join", "(", "output_dir", ",", "(", "'detections_'", "+", "\n", "self", ".", "_image_set", "+", "\n", "self", ".", "_year", "+", "\n", "'_results'", ")", ")", "\n", "if", "self", ".", "config", "[", "'use_salt'", "]", ":", "\n", "      ", "res_file", "+=", "'_{}'", ".", "format", "(", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", ")", "\n", "", "res_file", "+=", "'.json'", "\n", "self", ".", "_write_coco_results_file", "(", "all_boxes", ",", "res_file", ")", "\n", "# Only do evaluation on non-test sets", "\n", "if", "self", ".", "_image_set", ".", "find", "(", "'test'", ")", "==", "-", "1", ":", "\n", "      ", "self", ".", "_do_detection_eval", "(", "res_file", ",", "output_dir", ")", "\n", "# Optionally cleanup results json file", "\n", "", "if", "self", ".", "config", "[", "'cleanup'", "]", ":", "\n", "      ", "os", ".", "remove", "(", "res_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.coco.coco.competition_mode": [[310, 317], ["None"], "methods", ["None"], ["", "", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "    ", "if", "on", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "False", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "False", "\n", "", "else", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "True", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.parse_rec": [[16, 34], ["xml.parse", "ET.parse.findall", "int", "int", "obj.find", "objects.append", "obj.find", "obj.find", "int", "int", "int", "int", "obj.find", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["None"], ["def", "parse_rec", "(", "filename", ")", ":", "\n", "  ", "\"\"\" Parse a PASCAL VOC xml file \"\"\"", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objects", "=", "[", "]", "\n", "for", "obj", "in", "tree", ".", "findall", "(", "'object'", ")", ":", "\n", "    ", "obj_struct", "=", "{", "}", "\n", "obj_struct", "[", "'name'", "]", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "obj_struct", "[", "'pose'", "]", "=", "obj", ".", "find", "(", "'pose'", ")", ".", "text", "\n", "obj_struct", "[", "'truncated'", "]", "=", "int", "(", "obj", ".", "find", "(", "'truncated'", ")", ".", "text", ")", "\n", "obj_struct", "[", "'difficult'", "]", "=", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "\n", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "obj_struct", "[", "'bbox'", "]", "=", "[", "int", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ",", "\n", "int", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "]", "\n", "objects", ".", "append", "(", "obj_struct", ")", "\n", "\n", "", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_ap": [[36, 68], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "  ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n  Compute VOC AP given precision and recall.\n  If use_07_metric is true, uses the\n  VOC 07 11 point method (default:False).\n  \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "    ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "      ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "        ", "p", "=", "0", "\n", "", "else", ":", "\n", "        ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "    ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "      ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_eval": [[70, 221], ["os.path.join", "detpath.format", "numpy.array", "numpy.array", "len", "numpy.zeros", "numpy.zeros", "numpy.cumsum", "numpy.cumsum", "voc_eval.voc_ap", "os.path.isdir", "os.mkdir", "open", "f.readlines", "x.strip", "os.path.isfile", "enumerate", "os.path.split", "pathlib.Path().mkdir", "numpy.array", "open", "f.readlines", "x.strip().split", "numpy.argsort", "numpy.sort", "range", "float", "numpy.maximum", "voc_eval.parse_rec", "print", "open", "pickle.dump", "open", "numpy.array().astype", "numpy.array().astype", "len", "sum", "float", "BB[].astype", "R[].astype", "annopath.format", "pathlib.Path", "pickle.load", "x.strip", "float", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "numpy.finfo", "print", "pickle.load", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_ap", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.parse_rec"], ["", "def", "voc_eval", "(", "detpath", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "classname", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "False", ",", "\n", "use_diff", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "\"\"\"rec, prec, ap = voc_eval(detpath,\n                              annopath,\n                              imagesetfile,\n                              classname,\n                              [ovthresh],\n                              [use_07_metric])\n\n  Top level function that does the PASCAL VOC evaluation.\n\n  detpath: Path to detections\n      detpath.format(classname) should produce the detection results file.\n  annopath: Path to annotations\n      annopath.format(imagename) should be the xml annotations file.\n  imagesetfile: Text file containing the list of images, one image per line.\n  classname: Category name (duh)\n  cachedir: Directory for caching the annotations\n  [ovthresh]: Overlap threshold (default = 0.5)\n  [use_07_metric]: Whether to use VOC07's 11 point AP computation\n      (default False)\n  \"\"\"", "\n", "# assumes detections are in detpath.format(classname)", "\n", "# assumes annotations are in annopath.format(imagename)", "\n", "# assumes imagesetfile is a text file with each line an image name", "\n", "# cachedir caches the annotations in a pickle file", "\n", "\n", "# first load gt", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cachedir", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "cachedir", ")", "\n", "", "cachefile", "=", "os", ".", "path", ".", "join", "(", "cachedir", ",", "'%s_annots.pkl'", "%", "imagesetfile", ")", "\n", "# read list of images", "\n", "#print(imagesetfile)", "\n", "with", "open", "(", "imagesetfile", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "imagenames", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "lines", "]", "\n", "#print(annopath)", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cachefile", ")", ":", "\n", "# load annotations", "\n", "    ", "recs", "=", "{", "}", "\n", "for", "i", ",", "imagename", "in", "enumerate", "(", "imagenames", ")", ":", "\n", "      ", "recs", "[", "imagename", "]", "=", "parse_rec", "(", "annopath", ".", "format", "(", "imagename", ")", ")", "\n", "#      if i % 100 == 0:", "\n", "#        if verbose: print('Reading annotation for {:d}/{:d}'.format(", "\n", "#          i + 1, len(imagenames)))", "\n", "# save", "\n", "", "if", "verbose", ":", "print", "(", "'Saving cached annotations to {:s}'", ".", "format", "(", "cachefile", ")", ")", "\n", "head", ",", "tail", "=", "os", ".", "path", ".", "split", "(", "cachefile", ")", "\n", "pathlib", ".", "Path", "(", "head", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "cachefile", ",", "'wb'", ")", "as", "f", ":", "\n", "      ", "pickle", ".", "dump", "(", "recs", ",", "f", ")", "\n", "", "", "else", ":", "\n", "# load", "\n", "    ", "with", "open", "(", "cachefile", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "try", ":", "\n", "        ", "recs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "f", ")", "\n", "recs", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "\n", "# extract gt objects for this class", "\n", "", "", "", "class_recs", "=", "{", "}", "\n", "npos", "=", "0", "\n", "for", "imagename", "in", "imagenames", ":", "\n", "    ", "R", "=", "[", "obj", "for", "obj", "in", "recs", "[", "imagename", "]", "if", "obj", "[", "'name'", "]", "==", "classname", "]", "\n", "bbox", "=", "np", ".", "array", "(", "[", "x", "[", "'bbox'", "]", "for", "x", "in", "R", "]", ")", "\n", "if", "use_diff", ":", "\n", "      ", "difficult", "=", "np", ".", "array", "(", "[", "False", "for", "x", "in", "R", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "", "else", ":", "\n", "      ", "difficult", "=", "np", ".", "array", "(", "[", "x", "[", "'difficult'", "]", "for", "x", "in", "R", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "", "det", "=", "[", "False", "]", "*", "len", "(", "R", ")", "\n", "npos", "=", "npos", "+", "sum", "(", "~", "difficult", ")", "\n", "class_recs", "[", "imagename", "]", "=", "{", "'bbox'", ":", "bbox", ",", "\n", "'difficult'", ":", "difficult", ",", "\n", "'det'", ":", "det", "}", "\n", "\n", "\n", "# read dets", "\n", "", "detfile", "=", "detpath", ".", "format", "(", "classname", ")", "\n", "with", "open", "(", "detfile", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "splitlines", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "x", "in", "lines", "]", "\n", "image_ids", "=", "[", "x", "[", "0", "]", "for", "x", "in", "splitlines", "]", "\n", "confidence", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "splitlines", "]", ")", "\n", "BB", "=", "np", ".", "array", "(", "[", "[", "float", "(", "z", ")", "for", "z", "in", "x", "[", "2", ":", "]", "]", "for", "x", "in", "splitlines", "]", ")", "\n", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "\n", "if", "BB", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# sort by confidence", "\n", "    ", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", ":", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "      ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", ":", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "'bbox'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "# intersection", "\n", "        ", "ixmin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "0", "]", ",", "bb", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "1", "]", ",", "bb", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "2", "]", ",", "bb", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "3", "]", ",", "bb", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "bb", "[", "2", "]", "-", "bb", "[", "0", "]", "+", "1.", ")", "*", "(", "bb", "[", "3", "]", "-", "bb", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "BBGT", "[", ":", ",", "2", "]", "-", "BBGT", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "\n", "(", "BBGT", "[", ":", ",", "3", "]", "-", "BBGT", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "        ", "if", "not", "R", "[", "'difficult'", "]", "[", "jmax", "]", ":", "\n", "          ", "if", "not", "R", "[", "'det'", "]", "[", "jmax", "]", ":", "\n", "            ", "tp", "[", "d", "]", "=", "1.", "\n", "R", "[", "'det'", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "", "else", ":", "\n", "        ", "fp", "[", "d", "]", "=", "1.", "\n", "\n", "# compute precision recall", "\n", "", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.loc_metric": [[222, 348], ["os.path.join", "detpath.format", "numpy.array", "numpy.array", "len", "numpy.zeros", "numpy.zeros", "numpy.cumsum", "numpy.cumsum", "voc_eval.voc_ap", "os.path.isdir", "os.mkdir", "open", "f.readlines", "x.strip", "os.path.isfile", "enumerate", "numpy.array", "open", "f.readlines", "x.strip().split", "numpy.argsort", "numpy.sort", "range", "float", "numpy.maximum", "voc_eval.parse_rec", "open", "pickle.dump", "open", "numpy.array().astype", "numpy.array().astype", "len", "sum", "float", "BB[].astype", "R[].astype", "annopath.format", "pickle.load", "x.strip", "float", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "numpy.finfo", "print", "pickle.load", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_ap", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.parse_rec"], ["", "def", "loc_metric", "(", "detpath", ",", "\n", "annopath", ",", "\n", "imagesetfile", ",", "\n", "classname", ",", "\n", "cachedir", ",", "\n", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "False", ",", "\n", "use_diff", "=", "False", ")", ":", "\n", "  ", "\"\"\" Fonction commencee a etre ecrite par nicolas mais jamais fini \"\"\"", "\n", "raise", "(", "NotImplemented", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cachedir", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "cachedir", ")", "\n", "", "cachefile", "=", "os", ".", "path", ".", "join", "(", "cachedir", ",", "'%s_annots.pkl'", "%", "imagesetfile", ")", "\n", "# read list of images", "\n", "#print(imagesetfile)", "\n", "with", "open", "(", "imagesetfile", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "imagenames", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "lines", "]", "\n", "#print(annopath)", "\n", "#print(cachefile)", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cachefile", ")", ":", "\n", "# load annotations", "\n", "    ", "recs", "=", "{", "}", "\n", "for", "i", ",", "imagename", "in", "enumerate", "(", "imagenames", ")", ":", "\n", "      ", "recs", "[", "imagename", "]", "=", "parse_rec", "(", "annopath", ".", "format", "(", "imagename", ")", ")", "\n", "#if i % 100 == 0:", "\n", "#print('Reading annotation for {:d}/{:d}'.format(", "\n", "# i + 1, len(imagenames)))", "\n", "# save", "\n", "#print('Saving cached annotations to {:s}'.format(cachefile))", "\n", "", "with", "open", "(", "cachefile", ",", "'wb'", ")", "as", "f", ":", "\n", "      ", "pickle", ".", "dump", "(", "recs", ",", "f", ")", "\n", "", "", "else", ":", "\n", "# load", "\n", "    ", "with", "open", "(", "cachefile", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "try", ":", "\n", "        ", "recs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "f", ")", "\n", "recs", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "\n", "\n", "# extract gt objects for this class", "\n", "", "", "", "class_recs", "=", "{", "}", "\n", "npos", "=", "0", "\n", "for", "imagename", "in", "imagenames", ":", "\n", "    ", "R", "=", "[", "obj", "for", "obj", "in", "recs", "[", "imagename", "]", "if", "obj", "[", "'name'", "]", "==", "classname", "]", "\n", "bbox", "=", "np", ".", "array", "(", "[", "x", "[", "'bbox'", "]", "for", "x", "in", "R", "]", ")", "\n", "if", "use_diff", ":", "\n", "      ", "difficult", "=", "np", ".", "array", "(", "[", "False", "for", "x", "in", "R", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "", "else", ":", "\n", "      ", "difficult", "=", "np", ".", "array", "(", "[", "x", "[", "'difficult'", "]", "for", "x", "in", "R", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "", "det", "=", "[", "False", "]", "*", "len", "(", "R", ")", "\n", "npos", "=", "npos", "+", "sum", "(", "~", "difficult", ")", "\n", "class_recs", "[", "imagename", "]", "=", "{", "'bbox'", ":", "bbox", ",", "\n", "'difficult'", ":", "difficult", ",", "\n", "'det'", ":", "det", "}", "\n", "\n", "# read dets", "\n", "", "detfile", "=", "detpath", ".", "format", "(", "classname", ")", "\n", "with", "open", "(", "detfile", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "splitlines", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "x", "in", "lines", "]", "\n", "image_ids", "=", "[", "x", "[", "0", "]", "for", "x", "in", "splitlines", "]", "\n", "confidence", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "splitlines", "]", ")", "\n", "BB", "=", "np", ".", "array", "(", "[", "[", "float", "(", "z", ")", "for", "z", "in", "x", "[", "2", ":", "]", "]", "for", "x", "in", "splitlines", "]", ")", "\n", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "\n", "if", "BB", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# sort by confidence", "\n", "    ", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", ":", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "      ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", ":", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "'bbox'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "# intersection", "\n", "        ", "ixmin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "0", "]", ",", "bb", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "BBGT", "[", ":", ",", "1", "]", ",", "bb", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "2", "]", ",", "bb", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "BBGT", "[", ":", ",", "3", "]", ",", "bb", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "\n", "# union", "\n", "uni", "=", "(", "(", "bb", "[", "2", "]", "-", "bb", "[", "0", "]", "+", "1.", ")", "*", "(", "bb", "[", "3", "]", "-", "bb", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "BBGT", "[", ":", ",", "2", "]", "-", "BBGT", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "\n", "(", "BBGT", "[", ":", ",", "3", "]", "-", "BBGT", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "        ", "if", "not", "R", "[", "'difficult'", "]", "[", "jmax", "]", ":", "\n", "          ", "if", "not", "R", "[", "'det'", "]", "[", "jmax", "]", ":", "\n", "            ", "tp", "[", "d", "]", "=", "1.", "\n", "R", "[", "'det'", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "", "else", ":", "\n", "        ", "fp", "[", "d", "]", "=", "1.", "\n", "\n", "# compute precision recall", "\n", "", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db.__init__": [[27, 81], ["datasets.imdb.imdb.__init__", "os.path.join", "dict", "CrossMod_db.CrossMod_db._load_image_set_index", "str", "os.path.exists", "os.path.exists", "CrossMod_db.CrossMod_db._get_default_path", "list", "uuid.uuid4", "zip", "list", "range"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.__init__", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_image_set_index", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_default_path"], ["  ", "def", "__init__", "(", "self", ",", "_image_db", ",", "image_set", ",", "use_diff", "=", "False", ",", "devkit_path", "=", "None", ",", "test_ext", "=", "False", ",", "\n", "force_dont_use_07_metric", "=", "False", ")", ":", "\n", "    ", "name", "=", "image_set", "\n", "if", "use_diff", ":", "\n", "      ", "name", "+=", "'_diff'", "\n", "", "imdb", ".", "__init__", "(", "self", ",", "name", ")", "\n", "self", ".", "_year", "=", "None", "\n", "self", ".", "_image_db", "=", "_image_db", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "if", "devkit_path", "is", "None", ":", "\n", "        ", "self", ".", "_devkit_path", "=", "self", ".", "_get_default_path", "(", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "_devkit_path", "=", "devkit_path", "\n", "", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "self", ".", "_image_db", ")", "\n", "#    print(self._data_path)", "\n", "if", "self", ".", "_image_db", "==", "'watercolor'", "or", "self", ".", "_image_db", "==", "'comic'", ":", "\n", "        ", "self", ".", "_classes", "=", "(", "'__background__'", ",", "\"bicycle\"", ",", "\"bird\"", ",", "\"car\"", ",", "\"cat\"", ",", "\"dog\"", ",", "\"person\"", ")", "\n", "", "elif", "self", ".", "_image_db", "==", "'PeopleArt'", ":", "\n", "        ", "self", ".", "_classes", "=", "(", "'__background__'", ",", "\"person\"", ")", "\n", "", "elif", "self", ".", "_image_db", "==", "'clipart'", ":", "# In the clipart case", "\n", "        ", "self", ".", "_classes", "=", "(", "'__background__'", ",", "# always index 0", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "\n", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "\n", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", ")", "\n", "", "elif", "self", ".", "_image_db", "==", "'comic'", ":", "# In the clipart case", "\n", "        ", "self", ".", "_classes", "=", "(", "'__background__'", ",", "# always index 0", "\n", "'bike'", ",", "'bird'", ",", "'car'", ",", "'cat'", ",", "'dog'", ",", "'person'", ")", "\n", "", "elif", "self", ".", "_image_db", "==", "'CASPApaintings'", ":", "# In the clipart case", "\n", "        ", "self", ".", "_classes", "=", "(", "'__background__'", ",", "# always index 0", "\n", "\"bear\"", ",", "\"bird\"", ",", "\"cat\"", ",", "\"cow\"", ",", "\"dog\"", ",", "\"elephant\"", ",", "\"horse\"", ",", "\"sheep\"", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "NotImplemented", ")", "\n", "", "self", ".", "_class_to_ind", "=", "dict", "(", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", ")", "\n", "self", ".", "_image_ext", "=", "'.jpg'", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "'comp4'", "\n", "self", ".", "force_dont_use_07_metric", "=", "force_dont_use_07_metric", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "'cleanup'", ":", "True", ",", "\n", "'use_salt'", ":", "True", ",", "\n", "'use_diff'", ":", "use_diff", ",", "\n", "'matlab_eval'", ":", "False", ",", "\n", "'rpn_file'", ":", "None", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_devkit_path", ")", ",", "'CrossDomain path does not exist: {}'", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "self", ".", "_data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db.image_path_at": [[82, 87], ["CrossMod_db.CrossMod_db.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db.image_path_from_index": [[88, 97], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'JPEGImages'", ",", "\n", "index", "+", "self", ".", "_image_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db._load_image_set_index": [[98, 112], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Load the indexes listed in this dataset's image set file.\n    \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_set_file", ")", "\n", "#    print(image_set_file)", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "      ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db._get_default_path": [[113, 118], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the default path where PASCAL VOC is expected to be installed.\n    \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'VOCdevkit'", "+", "self", ".", "_year", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db.gt_roidb": [[119, 142], ["os.path.join", "os.path.exists", "print", "print", "CrossMod_db.CrossMod_db._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "'_gt_roidb.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "      ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "try", ":", "\n", "          ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "except", ":", "\n", "          ", "roidb", "=", "pickle", ".", "load", "(", "fid", ",", "encoding", "=", "'bytes'", ")", "\n", "", "", "print", "(", "'{} gt roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "\n", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "      ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote gt roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db.rpn_roidb": [[143, 153], ["print", "CrossMod_db.CrossMod_db.gt_roidb", "CrossMod_db.CrossMod_db._load_rpn_roidb", "datasets.imdb.imdb.merge_roidbs", "CrossMod_db.CrossMod_db._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.gt_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_rpn_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "    ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "'test'", "or", "True", ":", "\n", "      ", "print", "(", "\"You are here and I don't know why :)\"", ")", "\n", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "      ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db._load_rpn_roidb": [[154, 162], ["print", "os.path.exists", "CrossMod_db.CrossMod_db.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "    ", "filename", "=", "self", ".", "config", "[", "'rpn_file'", "]", "\n", "print", "(", "'loading {}'", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "'rpn data not found at: {}'", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db._load_pascal_annotation": [[163, 208], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "float", "float", "float", "float", "obj.find().text.lower().strip", "int", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Load image and bounding boxes info from XML file in the PASCAL VOC\n    format.\n    \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'Annotations'", ",", "index", "+", "'.xml'", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "'object'", ")", "\n", "if", "not", "self", ".", "config", "[", "'use_diff'", "]", ":", "\n", "# Exclude the samples labeled as difficult", "\n", "      ", "non_diff_objs", "=", "[", "\n", "obj", "for", "obj", "in", "objs", "if", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "==", "0", "]", "\n", "# if len(non_diff_objs) != len(objs):", "\n", "#     print 'Removed {} difficult objects'.format(", "\n", "#         len(objs) - len(non_diff_objs))", "\n", "objs", "=", "non_diff_objs", "\n", "", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "-", "1", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "'name'", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "gt_classes", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "seg_areas", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db._get_comp_id": [[209, 213], ["None"], "methods", ["None"], ["", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "    ", "comp_id", "=", "(", "self", ".", "_comp_id", "+", "'_'", "+", "self", ".", "_salt", "if", "self", ".", "config", "[", "'use_salt'", "]", "\n", "else", "self", ".", "_comp_id", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db._get_voc_results_file_template": [[214, 224], ["os.path.join", "CrossMod_db.CrossMod_db._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "    ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "'_det_'", "+", "self", ".", "_image_set", "+", "'_{:s}.txt'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'results'", ",", "\n", "self", ".", "_image_db", ",", "\n", "'Main'", ",", "\n", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db._write_voc_results_file": [[225, 244], ["enumerate", "print", "CrossMod_db.CrossMod_db._get_voc_results_file_template().format", "os.path.split", "pathlib.Path().mkdir", "open", "enumerate", "CrossMod_db.CrossMod_db._get_voc_results_file_template", "pathlib.Path", "range", "f.write"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "    ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "print", "(", "'Writing {} VOC results file'", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "head", ",", "tail", "=", "os", ".", "path", ".", "split", "(", "filename", ")", "\n", "pathlib", ".", "Path", "(", "head", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "filename", ",", "'wt'", ")", "as", "f", ":", "\n", "        ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "          ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "            ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "f", ".", "write", "(", "'{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'", ".", "\n", "format", "(", "index", ",", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "dets", "[", "k", ",", "3", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db.set_use_diff": [[245, 247], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "set_use_diff", "(", "self", ",", "boolean", ")", ":", "\n", "      ", "self", ".", "config", "[", "'use_diff'", "]", "=", "boolean", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db.set_force_dont_use_07_metric": [[248, 250], ["None"], "methods", ["None"], ["", "def", "set_force_dont_use_07_metric", "(", "self", ",", "boolean", ")", ":", "\n", "      ", "self", ".", "force_dont_use_07_metric", "=", "boolean", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db._do_python_eval": [[251, 297], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "pathlib.Path().mkdir", "CrossMod_db.CrossMod_db._get_voc_results_file_template().format", "datasets.voc_eval.voc_eval", "print", "print", "open", "pickle.dump", "numpy.mean", "numpy.mean", "int", "pathlib.Path", "CrossMod_db.CrossMod_db._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "'output'", ")", ":", "\n", "    ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "self", ".", "_image_db", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "self", ".", "_image_db", ",", "\n", "'ImageSets'", ",", "\n", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "(", "self", ".", "_year", "is", "None", ")", "or", "(", "int", "(", "self", ".", "_year", ")", "<", "2010", ")", "else", "False", "\n", "if", "self", ".", "force_dont_use_07_metric", "==", "True", ":", "use_07_metric", "=", "False", "\n", "print", "(", "'VOC07 metric? '", "+", "(", "'Yes'", "if", "use_07_metric", "else", "'No'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "      ", "pathlib", ".", "Path", "(", "output_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "use_diff", "=", "self", ".", "config", "[", "'use_diff'", "]", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "'Results:'", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "      ", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "ap", ")", ")", ")", "\n", "", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'--------------------------------------------------------------'", ")", "\n", "print", "(", "'Results computed with the **unofficial** Python eval code.'", ")", "\n", "print", "(", "'Results should be very close to the official MATLAB eval code.'", ")", "\n", "print", "(", "'Recompute with `./tools/reval.py --matlab ...` for your paper.'", ")", "\n", "print", "(", "'-- Thanks, The Management'", ")", "\n", "print", "(", "'--------------------------------------------------------------'", ")", "\n", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db._do_matlab_eval": [[298, 312], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "CrossMod_db.CrossMod_db._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "'output'", ")", ":", "\n", "    ", "print", "(", "'-----------------------------------------------------'", ")", "\n", "print", "(", "'Computing results with the official MATLAB eval code.'", ")", "\n", "print", "(", "'-----------------------------------------------------'", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'lib'", ",", "'datasets'", ",", "\n", "'VOCdevkit-matlab-wrapper'", ")", "\n", "cmd", "=", "'cd {} && '", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "'{:s} -nodisplay -nodesktop '", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "'voc_eval(\\'{:s}\\',\\'{:s}\\',\\'{:s}\\',\\'{:s}\\'); quit;\"'", ".", "format", "(", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "\n", "self", ".", "_image_set", ",", "output_dir", ")", "\n", "print", "(", "(", "'Running:\\n{}'", ".", "format", "(", "cmd", ")", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db.evaluate_localisation_ovthresh": [[313, 363], ["CrossMod_db.CrossMod_db._write_voc_results_file", "os.path.join", "os.path.join", "os.path.join", "enumerate", "print", "os.path.isdir", "pathlib.Path().mkdir", "CrossMod_db.CrossMod_db._get_voc_results_file_template().format", "datasets.voc_eval.voc_eval", "print", "open", "pickle.dump", "numpy.mean", "pathlib.Path", "CrossMod_db.CrossMod_db._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "evaluate_localisation_ovthresh", "(", "self", ",", "all_boxes", ",", "output_dir", ",", "ovthresh", ")", ":", "\n", "    ", "\"\"\"\n    Ajout par Nicolas Gonthier pour calculer des metrics un peu plus facile\n    \"\"\"", "\n", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "self", ".", "_image_db", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "self", ".", "_image_db", ",", "\n", "'ImageSets'", ",", "\n", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "self", ".", "force_dont_use_07_metric", "==", "False", "else", "False", "\n", "if", "self", ".", "force_dont_use_07_metric", "==", "True", ":", "use_07_metric", "=", "False", "\n", "#    print('VOC07 metric? ' + ('Yes' if use_07_metric else 'No'))", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "      ", "pathlib", ".", "Path", "(", "output_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "ovthresh", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "use_diff", "=", "self", ".", "config", "[", "'use_diff'", "]", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "#    print('~~~~~~~~')", "\n", "#    print('Results:')", "\n", "#    for ap in aps:", "\n", "#      print(('{:.3f}'.format(ap)))", "\n", "#    print(('{:.3f}'.format(np.mean(aps))))", "\n", "#    print('~~~~~~~~')", "\n", "##    print('')", "\n", "##    print('--------------------------------------------------------------')", "\n", "#    print('Results computed with the **unofficial** Python eval code.')", "\n", "##    print('Results should be very close to the official MATLAB eval code.')", "\n", "##    print('Recompute with `./tools/reval.py --matlab ...` for your paper.')", "\n", "##    print('-- Thanks, The Management')", "\n", "##    print('--------------------------------------------------------------')", "\n", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db.evaluate_detections": [[364, 376], ["CrossMod_db.CrossMod_db._write_voc_results_file", "CrossMod_db.CrossMod_db._do_python_eval", "CrossMod_db.CrossMod_db._do_matlab_eval", "CrossMod_db.CrossMod_db._get_voc_results_file_template().format", "os.remove", "CrossMod_db.CrossMod_db._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._do_python_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._do_matlab_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "    ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "aps", "=", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "'matlab_eval'", "]", ":", "\n", "      ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "'cleanup'", "]", ":", "\n", "      ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "        ", "if", "cls", "==", "'__background__'", ":", "\n", "          ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "", "", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.CrossMod_db.CrossMod_db.competition_mode": [[377, 384], ["None"], "methods", ["None"], ["", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "    ", "if", "on", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "False", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "False", "\n", "", "else", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "True", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.__init__": [[31, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "classes", "=", "None", ")", ":", "\n", "    ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_num_classes", "=", "0", "\n", "if", "not", "classes", ":", "\n", "      ", "self", ".", "_classes", "=", "[", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "_classes", "=", "classes", "\n", "", "self", ".", "_image_index", "=", "[", "]", "\n", "self", ".", "_obj_proposer", "=", "'gt'", "\n", "self", ".", "_roidb", "=", "None", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "default_roidb", "\n", "# Use this dict for storing dataset specific config options", "\n", "self", ".", "config", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.name": [[45, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.num_classes": [[49, 52], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.classes": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.image_index": [[57, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "image_index", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.roidb_handler": [[65, 68], ["None"], "methods", ["None"], ["", "@", "roidb_handler", ".", "setter", "\n", "def", "roidb_handler", "(", "self", ",", "val", ")", ":", "\n", "    ", "self", ".", "_roidb_handler", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.set_proposal_method": [[69, 72], ["eval"], "methods", ["None"], ["", "def", "set_proposal_method", "(", "self", ",", "method", ")", ":", "\n", "    ", "method", "=", "eval", "(", "'self.'", "+", "method", "+", "'_roidb'", ")", "\n", "self", ".", "roidb_handler", "=", "method", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.roidb": [[73, 84], ["imdb.imdb.roidb_handler"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.roidb_handler"], ["", "@", "property", "\n", "def", "roidb", "(", "self", ")", ":", "\n", "# A roidb is a list of dictionaries, each with the following keys:", "\n", "#   boxes", "\n", "#   gt_overlaps", "\n", "#   gt_classes", "\n", "#   flipped", "\n", "    ", "if", "self", ".", "_roidb", "is", "not", "None", ":", "\n", "      ", "return", "self", ".", "_roidb", "\n", "", "self", ".", "_roidb", "=", "self", ".", "roidb_handler", "(", ")", "\n", "return", "self", ".", "_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.cache_path": [[85, 91], ["os.abspath", "os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["", "@", "property", "\n", "def", "cache_path", "(", "self", ")", ":", "\n", "    ", "cache_path", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'cache'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "cache_path", ")", "\n", "", "return", "cache_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.num_images": [[92, 95], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_images", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "image_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.image_path_at": [[96, 98], ["None"], "methods", ["None"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.default_roidb": [[99, 101], ["None"], "methods", ["None"], ["", "def", "default_roidb", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.evaluate_detections": [[102, 112], ["None"], "methods", ["None"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    all_boxes is a list of length number-of-classes.\n    Each list element is a list of length number-of-images.\n    Each of those list elements is either an empty list []\n    or a numpy array of detection.\n\n    all_boxes[class][image] = [] or np.array of shape #dets x 5\n    \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb._get_widths": [[113, 116], ["range", "PIL.Image.open", "imdb.imdb.image_path_at"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.image_path_at"], ["", "def", "_get_widths", "(", "self", ")", ":", "\n", "    ", "return", "[", "PIL", ".", "Image", ".", "open", "(", "self", ".", "image_path_at", "(", "i", ")", ")", ".", "size", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_images", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.append_flipped_images": [[117, 133], ["imdb.imdb._get_widths", "range", "[].copy", "boxes[].copy", "boxes[].copy", "imdb.imdb.roidb.append"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb._get_widths"], ["", "def", "append_flipped_images", "(", "self", ")", ":", "\n", "    ", "num_images", "=", "self", ".", "num_images", "\n", "widths", "=", "self", ".", "_get_widths", "(", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "      ", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", ".", "copy", "(", ")", "\n", "oldx1", "=", "boxes", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "oldx2", "=", "boxes", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "0", "]", "=", "widths", "[", "i", "]", "-", "oldx2", "-", "1", "\n", "boxes", "[", ":", ",", "2", "]", "=", "widths", "[", "i", "]", "-", "oldx1", "-", "1", "\n", "assert", "(", "boxes", "[", ":", ",", "2", "]", ">=", "boxes", "[", ":", ",", "0", "]", ")", ".", "all", "(", ")", "\n", "entry", "=", "{", "'boxes'", ":", "boxes", ",", "\n", "'gt_overlaps'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'gt_overlaps'", "]", ",", "\n", "'gt_classes'", ":", "self", ".", "roidb", "[", "i", "]", "[", "'gt_classes'", "]", ",", "\n", "'flipped'", ":", "True", "}", "\n", "self", ".", "roidb", ".", "append", "(", "entry", ")", "\n", "", "self", ".", "_image_index", "=", "self", ".", "_image_index", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.evaluate_recall": [[134, 223], ["numpy.zeros", "range", "numpy.sort", "numpy.zeros_like", "enumerate", "numpy.zeros_like.mean", "[].toarray().max", "len", "bbox_overlaps", "numpy.zeros", "range", "numpy.hstack", "numpy.arange", "numpy.where", "numpy.where", "boxes.astype", "gt_boxes.astype", "bbox_overlaps.argmax", "bbox_overlaps.max", "bbox_overlaps.max.argmax", "bbox_overlaps.max.max", "float", "[].toarray", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.bbox.bbox_overlaps"], ["", "def", "evaluate_recall", "(", "self", ",", "candidate_boxes", "=", "None", ",", "thresholds", "=", "None", ",", "\n", "area", "=", "'all'", ",", "limit", "=", "None", ")", ":", "\n", "    ", "\"\"\"Evaluate detection proposal recall metrics.\n\n    Returns:\n        results: dictionary of results with keys\n            'ar': average recall\n            'recalls': vector recalls at each IoU overlap threshold\n            'thresholds': vector of IoU overlap thresholds\n            'gt_overlaps': vector of all ground-truth overlaps\n    \"\"\"", "\n", "# Record max overlap value for each gt box", "\n", "# Return vector of overlap values", "\n", "areas", "=", "{", "'all'", ":", "0", ",", "'small'", ":", "1", ",", "'medium'", ":", "2", ",", "'large'", ":", "3", ",", "\n", "'96-128'", ":", "4", ",", "'128-256'", ":", "5", ",", "'256-512'", ":", "6", ",", "'512-inf'", ":", "7", "}", "\n", "area_ranges", "=", "[", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "# all", "\n", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "# small", "\n", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "# medium", "\n", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", ",", "# large", "\n", "[", "96", "**", "2", ",", "128", "**", "2", "]", ",", "# 96-128", "\n", "[", "128", "**", "2", ",", "256", "**", "2", "]", ",", "# 128-256", "\n", "[", "256", "**", "2", ",", "512", "**", "2", "]", ",", "# 256-512", "\n", "[", "512", "**", "2", ",", "1e5", "**", "2", "]", ",", "# 512-inf", "\n", "]", "\n", "assert", "area", "in", "areas", ",", "'unknown area range: {}'", ".", "format", "(", "area", ")", "\n", "area_range", "=", "area_ranges", "[", "areas", "[", "area", "]", "]", "\n", "gt_overlaps", "=", "np", ".", "zeros", "(", "0", ")", "\n", "num_pos", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "num_images", ")", ":", "\n", "# Checking for max_overlaps == 1 avoids including crowd annotations", "\n", "# (...pretty hacking :/)", "\n", "      ", "max_gt_overlaps", "=", "self", ".", "roidb", "[", "i", "]", "[", "'gt_overlaps'", "]", ".", "toarray", "(", ")", ".", "max", "(", "axis", "=", "1", ")", "\n", "gt_inds", "=", "np", ".", "where", "(", "(", "self", ".", "roidb", "[", "i", "]", "[", "'gt_classes'", "]", ">", "0", ")", "&", "\n", "(", "max_gt_overlaps", "==", "1", ")", ")", "[", "0", "]", "\n", "gt_boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", "[", "gt_inds", ",", ":", "]", "\n", "gt_areas", "=", "self", ".", "roidb", "[", "i", "]", "[", "'seg_areas'", "]", "[", "gt_inds", "]", "\n", "valid_gt_inds", "=", "np", ".", "where", "(", "(", "gt_areas", ">=", "area_range", "[", "0", "]", ")", "&", "\n", "(", "gt_areas", "<=", "area_range", "[", "1", "]", ")", ")", "[", "0", "]", "\n", "gt_boxes", "=", "gt_boxes", "[", "valid_gt_inds", ",", ":", "]", "\n", "num_pos", "+=", "len", "(", "valid_gt_inds", ")", "\n", "\n", "if", "candidate_boxes", "is", "None", ":", "\n", "# If candidate_boxes is not supplied, the default is to use the", "\n", "# non-ground-truth boxes from this roidb", "\n", "        ", "non_gt_inds", "=", "np", ".", "where", "(", "self", ".", "roidb", "[", "i", "]", "[", "'gt_classes'", "]", "==", "0", ")", "[", "0", "]", "\n", "boxes", "=", "self", ".", "roidb", "[", "i", "]", "[", "'boxes'", "]", "[", "non_gt_inds", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "boxes", "=", "candidate_boxes", "[", "i", "]", "\n", "", "if", "boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "continue", "\n", "", "if", "limit", "is", "not", "None", "and", "boxes", ".", "shape", "[", "0", "]", ">", "limit", ":", "\n", "        ", "boxes", "=", "boxes", "[", ":", "limit", ",", ":", "]", "\n", "\n", "", "overlaps", "=", "bbox_overlaps", "(", "boxes", ".", "astype", "(", "np", ".", "float", ")", ",", "\n", "gt_boxes", ".", "astype", "(", "np", ".", "float", ")", ")", "\n", "\n", "_gt_overlaps", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "j", "in", "range", "(", "gt_boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "# find which proposal box maximally covers each gt box", "\n", "        ", "argmax_overlaps", "=", "overlaps", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "# and get the iou amount of coverage for each gt box", "\n", "max_overlaps", "=", "overlaps", ".", "max", "(", "axis", "=", "0", ")", "\n", "# find which gt box is 'best' covered (i.e. 'best' = most iou)", "\n", "gt_ind", "=", "max_overlaps", ".", "argmax", "(", ")", "\n", "gt_ovr", "=", "max_overlaps", ".", "max", "(", ")", "\n", "assert", "(", "gt_ovr", ">=", "0", ")", "\n", "# find the proposal box that covers the best covered gt box", "\n", "box_ind", "=", "argmax_overlaps", "[", "gt_ind", "]", "\n", "# record the iou coverage of this gt box", "\n", "_gt_overlaps", "[", "j", "]", "=", "overlaps", "[", "box_ind", ",", "gt_ind", "]", "\n", "assert", "(", "_gt_overlaps", "[", "j", "]", "==", "gt_ovr", ")", "\n", "# mark the proposal box and the gt box as used", "\n", "overlaps", "[", "box_ind", ",", ":", "]", "=", "-", "1", "\n", "overlaps", "[", ":", ",", "gt_ind", "]", "=", "-", "1", "\n", "# append recorded iou coverage level", "\n", "", "gt_overlaps", "=", "np", ".", "hstack", "(", "(", "gt_overlaps", ",", "_gt_overlaps", ")", ")", "\n", "\n", "", "gt_overlaps", "=", "np", ".", "sort", "(", "gt_overlaps", ")", "\n", "if", "thresholds", "is", "None", ":", "\n", "      ", "step", "=", "0.05", "\n", "thresholds", "=", "np", ".", "arange", "(", "0.5", ",", "0.95", "+", "1e-5", ",", "step", ")", "\n", "", "recalls", "=", "np", ".", "zeros_like", "(", "thresholds", ")", "\n", "# compute recall for each iou threshold", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "      ", "recalls", "[", "i", "]", "=", "(", "gt_overlaps", ">=", "t", ")", ".", "sum", "(", ")", "/", "float", "(", "num_pos", ")", "\n", "# ar = 2 * np.trapz(recalls, thresholds)", "\n", "", "ar", "=", "recalls", ".", "mean", "(", ")", "\n", "return", "{", "'ar'", ":", "ar", ",", "'recalls'", ":", "recalls", ",", "'thresholds'", ":", "thresholds", ",", "\n", "'gt_overlaps'", ":", "gt_overlaps", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.create_roidb_from_box_list": [[224, 252], ["range", "len", "numpy.zeros", "scipy.sparse.csr_matrix", "roidb.append", "bbox_overlaps", "bbox_overlaps.argmax", "bbox_overlaps.max", "boxes.astype", "gt_boxes.astype", "numpy.where", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.bbox.bbox_overlaps"], ["", "def", "create_roidb_from_box_list", "(", "self", ",", "box_list", ",", "gt_roidb", ")", ":", "\n", "    ", "assert", "len", "(", "box_list", ")", "==", "self", ".", "num_images", ",", "'Number of boxes must match number of ground-truth images'", "\n", "roidb", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_images", ")", ":", "\n", "      ", "boxes", "=", "box_list", "[", "i", "]", "\n", "num_boxes", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_boxes", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "gt_roidb", "is", "not", "None", "and", "gt_roidb", "[", "i", "]", "[", "'boxes'", "]", ".", "size", ">", "0", ":", "\n", "        ", "gt_boxes", "=", "gt_roidb", "[", "i", "]", "[", "'boxes'", "]", "\n", "gt_classes", "=", "gt_roidb", "[", "i", "]", "[", "'gt_classes'", "]", "\n", "gt_overlaps", "=", "bbox_overlaps", "(", "boxes", ".", "astype", "(", "np", ".", "float", ")", ",", "\n", "gt_boxes", ".", "astype", "(", "np", ".", "float", ")", ")", "\n", "argmaxes", "=", "gt_overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "maxes", "=", "gt_overlaps", ".", "max", "(", "axis", "=", "1", ")", "\n", "I", "=", "np", ".", "where", "(", "maxes", ">", "0", ")", "[", "0", "]", "\n", "overlaps", "[", "I", ",", "gt_classes", "[", "argmaxes", "[", "I", "]", "]", "]", "=", "maxes", "[", "I", "]", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "roidb", ".", "append", "(", "{", "\n", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "np", ".", "zeros", "(", "(", "num_boxes", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "np", ".", "zeros", "(", "(", "num_boxes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "}", ")", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.merge_roidbs": [[253, 265], ["range", "len", "len", "len", "numpy.vstack", "numpy.hstack", "scipy.sparse.vstack", "numpy.hstack"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "merge_roidbs", "(", "a", ",", "b", ")", ":", "\n", "    ", "assert", "len", "(", "a", ")", "==", "len", "(", "b", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "      ", "a", "[", "i", "]", "[", "'boxes'", "]", "=", "np", ".", "vstack", "(", "(", "a", "[", "i", "]", "[", "'boxes'", "]", ",", "b", "[", "i", "]", "[", "'boxes'", "]", ")", ")", "\n", "a", "[", "i", "]", "[", "'gt_classes'", "]", "=", "np", ".", "hstack", "(", "(", "a", "[", "i", "]", "[", "'gt_classes'", "]", ",", "\n", "b", "[", "i", "]", "[", "'gt_classes'", "]", ")", ")", "\n", "a", "[", "i", "]", "[", "'gt_overlaps'", "]", "=", "scipy", ".", "sparse", ".", "vstack", "(", "[", "a", "[", "i", "]", "[", "'gt_overlaps'", "]", ",", "\n", "b", "[", "i", "]", "[", "'gt_overlaps'", "]", "]", ")", "\n", "a", "[", "i", "]", "[", "'seg_areas'", "]", "=", "np", ".", "hstack", "(", "(", "a", "[", "i", "]", "[", "'seg_areas'", "]", ",", "\n", "b", "[", "i", "]", "[", "'seg_areas'", "]", ")", ")", "\n", "", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.competition_mode": [[266, 269], ["None"], "methods", ["None"], ["", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "    ", "\"\"\"Turn competition mode on or off.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_sets": [[21, 73], ["datasets.pascal_voc.pascal_voc", "datasets.pascal_voc.pascal_voc", "datasets.CrossMod_db.CrossMod_db", "datasets.CrossMod_db.CrossMod_db", "datasets.CrossMod_db.CrossMod_db", "datasets.IconArt.IconArt_v1", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "get_sets", "(", "data_path", "=", "'/data/'", ")", ":", "\n", "  ", "__sets", "=", "{", "}", "\n", "\"\"\"Get an imdb (image database) by name.\n  @param : data_path : localisation of the dataset\n  \"\"\"", "\n", "__sets", "=", "{", "}", "\n", "# Set up voc_<year>_<split> ", "\n", "for", "year", "in", "[", "'2007'", ",", "'2012'", "]", ":", "\n", "    ", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'trainval'", ",", "'test'", "]", ":", "\n", "      ", "name", "=", "'voc_{}_{}'", ".", "format", "(", "year", ",", "split", ")", "\n", "__sets", "[", "name", "]", "=", "(", "lambda", "split", "=", "split", ",", "year", "=", "year", ":", "pascal_voc", "(", "split", ",", "year", ",", "devkit_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'VOCdevkit'", ")", ",", "test_ext", "=", "True", ")", ")", "\n", "\n", "", "", "for", "year", "in", "[", "'2007'", ",", "'2012'", "]", ":", "\n", "    ", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'trainval'", ",", "'test'", "]", ":", "\n", "      ", "name", "=", "'voc_{}_{}_diff'", ".", "format", "(", "year", ",", "split", ")", "\n", "__sets", "[", "name", "]", "=", "(", "lambda", "split", "=", "split", ",", "year", "=", "year", ":", "pascal_voc", "(", "split", ",", "year", ",", "use_diff", "=", "True", ")", ")", "\n", "\n", "", "", "for", "db", "in", "[", "'watercolor'", ",", "'comic'", ",", "'clipart'", "]", ":", "\n", "    ", "for", "split", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "        ", "name", "=", "'{}_{}'", ".", "format", "(", "db", ",", "split", ")", "\n", "__sets", "[", "name", "]", "=", "(", "lambda", "split", "=", "split", ",", "db", "=", "db", ":", "CrossMod_db", "(", "db", ",", "split", ",", "devkit_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ")", ",", "test_ext", "=", "True", ")", ")", "\n", "# Maybe this can be needed depending on your way to download the dataset", "\n", "#__sets[name] = (lambda split=split, db=db: CrossMod_db(db,split,devkit_path=os.path.join(data_path,'cross-domain-detection','datasets'),test_ext=True))", "\n", "\n", "", "", "for", "db", "in", "[", "'PeopleArt'", "]", ":", "\n", "    ", "for", "split", "in", "[", "'train'", ",", "'test'", ",", "'trainval'", ",", "'val'", "]", ":", "\n", "        ", "name", "=", "'{}_{}'", ".", "format", "(", "db", ",", "split", ")", "\n", "__sets", "[", "name", "]", "=", "(", "lambda", "split", "=", "split", ",", "db", "=", "db", ":", "CrossMod_db", "(", "db", ",", "split", ",", "devkit_path", "=", "data_path", ",", "test_ext", "=", "True", ")", ")", "\n", "\n", "", "", "for", "db", "in", "[", "'CASPApaintings'", "]", ":", "\n", "    ", "for", "split", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "        ", "name", "=", "'{}_{}'", ".", "format", "(", "db", ",", "split", ")", "\n", "__sets", "[", "name", "]", "=", "(", "lambda", "split", "=", "split", ",", "db", "=", "db", ":", "CrossMod_db", "(", "db", ",", "split", ",", "devkit_path", "=", "data_path", ",", "test_ext", "=", "True", ")", ")", "\n", "\n", "", "", "for", "db", "in", "[", "'IconArt_v1'", "]", ":", "\n", "    ", "for", "split", "in", "[", "'test'", ",", "'train'", "]", ":", "\n", "        ", "name", "=", "'{}_{}'", ".", "format", "(", "db", ",", "split", ")", "\n", "__sets", "[", "name", "]", "=", "(", "lambda", "split", "=", "split", ",", "db", "=", "db", ":", "IconArt_v1", "(", "db", ",", "split", ",", "devkit_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ")", ",", "test_ext", "=", "True", ")", ")", "\n", "\n", "## Set up coco_2014_<split>", "\n", "#for year in ['2014']:", "\n", "#for split in ['train', 'val', 'minival', 'valminusminival', 'trainval']:", "\n", "#name = 'coco_{}_{}'.format(year, split)", "\n", "#__sets[name] = (lambda split=split, year=year: coco(split, year))", "\n", "\n", "## Set up coco_2015_<split>", "\n", "#for year in ['2015']:", "\n", "#for split in ['test', 'test-dev']:", "\n", "#name = 'coco_{}_{}'.format(year, split)", "\n", "#__sets[name] = (lambda split=split, year=year: coco(split, year))", "\n", "\n", "", "", "return", "(", "__sets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_imdb": [[74, 90], ["factory.get_sets", "os.path.exists", "KeyError", "datasets.IconArt.IconArt_v1", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_sets"], ["", "def", "get_imdb", "(", "name", ",", "data_path", "=", "'data/'", ",", "ext", "=", "None", ")", ":", "\n", "  ", "\"\"\"Get an imdb (image database) by name.\n  @param : data_path : localisation of the dataset\n  \"\"\"", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "data_path", ")", ")", ":", "\n", "    ", "data_path", "=", "'data/'", "\n", "", "__sets", "=", "get_sets", "(", "data_path", "=", "data_path", ")", "\n", "\n", "if", "name", "not", "in", "__sets", "or", "not", "(", "ext", "is", "None", ")", ":", "\n", "    ", "if", "not", "(", "ext", "is", "None", ")", "and", "'IconArt_v1'", "in", "name", ":", "\n", "      ", "for", "split", "in", "[", "'test'", "]", ":", "\n", "        ", "name", "=", "'{}_{}'", ".", "format", "(", "'IconArt_v1'", ",", "split", ")", "\n", "__sets", "[", "name", "]", "=", "(", "lambda", "split", "=", "split", ",", "db", "=", "'IconArt_v1'", ":", "IconArt_v1", "(", "'IconArt_v1'", ",", "split", ",", "devkit_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'Wikidata_Paintings'", ")", ",", "test_ext", "=", "True", ",", "ext", "=", "ext", ")", ")", "\n", "", "", "if", "name", "not", "in", "__sets", ":", "\n", "        ", "raise", "KeyError", "(", "'Unknown dataset: {}'", ".", "format", "(", "name", ")", ")", "\n", "", "", "return", "__sets", "[", "name", "]", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.list_imdbs": [[92, 96], ["factory.get_sets", "list", "get_sets.keys"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_sets"], ["", "def", "list_imdbs", "(", ")", ":", "\n", "  ", "\"\"\"List all registered imdbs.\"\"\"", "\n", "__sets", "=", "get_sets", "(", ")", "\n", "return", "list", "(", "__sets", ".", "keys", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1.__init__": [[27, 72], ["datasets.imdb.imdb.__init__", "os.path.join", "dict", "IconArt.IconArt_v1._load_image_set_index", "str", "os.path.exists", "os.path.exists", "IconArt.IconArt_v1._get_default_path", "list", "uuid.uuid4", "zip", "list", "range"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.__init__", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_image_set_index", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_default_path"], ["  ", "def", "__init__", "(", "self", ",", "_image_db", ",", "image_set", ",", "use_diff", "=", "False", ",", "devkit_path", "=", "None", ",", "test_ext", "=", "False", ",", "\n", "force_dont_use_07_metric", "=", "True", ",", "ext", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    @param ext : extension to the dataset it is a subset\n    \"\"\"", "\n", "name", "=", "image_set", "\n", "if", "use_diff", ":", "\n", "      ", "name", "+=", "'_diff'", "\n", "", "imdb", ".", "__init__", "(", "self", ",", "name", ")", "\n", "self", ".", "ext", "=", "ext", "\n", "self", ".", "_year", "=", "None", "\n", "self", ".", "_image_db", "=", "_image_db", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "if", "devkit_path", "is", "None", ":", "\n", "        ", "self", ".", "_devkit_path", "=", "self", ".", "_get_default_path", "(", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "_devkit_path", "=", "devkit_path", "\n", "", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "self", ".", "_image_db", ")", "\n", "#    print(self._data_path)", "\n", "if", "self", ".", "_image_db", "==", "'IconArt_v1'", ":", "\n", "        ", "self", ".", "_classes", "=", "(", "'__background__'", ",", "'angel'", ",", "'Child_Jesus'", ",", "\n", "'crucifixion_of_Jesus'", ",", "\n", "'Mary'", ",", "'nudity'", ",", "'ruins'", ",", "'Saint_Sebastien'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "(", "NotImplemented", ")", "\n", "", "self", ".", "_class_to_ind", "=", "dict", "(", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", ")", "\n", "self", ".", "_image_ext", "=", "'.jpg'", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "'comp4'", "\n", "self", ".", "force_dont_use_07_metric", "=", "force_dont_use_07_metric", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "'cleanup'", ":", "True", ",", "\n", "'use_salt'", ":", "True", ",", "\n", "'use_diff'", ":", "use_diff", ",", "\n", "'matlab_eval'", ":", "False", ",", "\n", "'rpn_file'", ":", "None", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_devkit_path", ")", ",", "'CrossDomain path does not exist: {}'", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "self", ".", "_data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1.image_path_at": [[73, 78], ["IconArt.IconArt_v1.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1.image_path_from_index": [[79, 88], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'JPEGImages'", ",", "\n", "index", "+", "self", ".", "_image_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1._load_image_set_index": [[89, 107], ["os.path.exists", "os.path.join", "os.path.join", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Load the indexes listed in this dataset's image set file.\n    \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "if", "self", ".", "ext", "is", "None", ":", "\n", "        ", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "", "else", ":", "\n", "        ", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'_'", "+", "self", ".", "ext", "+", "'.txt'", ")", "\n", "", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_set_file", ")", "\n", "#    print(image_set_file)", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "      ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1._get_default_path": [[108, 113], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the default path where PASCAL VOC is expected to be installed.\n    \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'VOCdevkit'", "+", "self", ".", "_year", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1.gt_roidb": [[114, 137], ["os.path.join", "os.path.exists", "print", "print", "IconArt.IconArt_v1._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "'_gt_roidb.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "      ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "try", ":", "\n", "          ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "except", ":", "\n", "          ", "roidb", "=", "pickle", ".", "load", "(", "fid", ",", "encoding", "=", "'bytes'", ")", "\n", "", "", "print", "(", "'{} gt roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "\n", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "      ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote gt roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1.rpn_roidb": [[138, 148], ["print", "IconArt.IconArt_v1.gt_roidb", "IconArt.IconArt_v1._load_rpn_roidb", "datasets.imdb.imdb.merge_roidbs", "IconArt.IconArt_v1._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.gt_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_rpn_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "    ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "'test'", "or", "True", ":", "\n", "      ", "print", "(", "\"You are here and I don't know why :)\"", ")", "\n", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "      ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1._load_rpn_roidb": [[149, 157], ["print", "os.path.exists", "IconArt.IconArt_v1.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "    ", "filename", "=", "self", ".", "config", "[", "'rpn_file'", "]", "\n", "print", "(", "'loading {}'", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "'rpn data not found at: {}'", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1._load_pascal_annotation": [[158, 204], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "float", "float", "float", "float", "obj.find().text.strip", "int", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Load image and bounding boxes info from XML file in the PASCAL VOC\n    format.\n    \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'Annotations'", ",", "index", "+", "'.xml'", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "'object'", ")", "\n", "if", "not", "self", ".", "config", "[", "'use_diff'", "]", ":", "\n", "# Exclude the samples labeled as difficult", "\n", "      ", "non_diff_objs", "=", "[", "\n", "obj", "for", "obj", "in", "objs", "if", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "==", "0", "]", "\n", "# if len(non_diff_objs) != len(objs):", "\n", "#     print 'Removed {} difficult objects'.format(", "\n", "#         len(objs) - len(non_diff_objs))", "\n", "objs", "=", "non_diff_objs", "\n", "", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "-", "1", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "'name'", ")", ".", "text", ".", "strip", "(", ")", "]", "\n", "#cls = self._class_to_ind[obj.find('name').text.lower().strip()]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "gt_classes", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "seg_areas", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1._get_comp_id": [[205, 209], ["None"], "methods", ["None"], ["", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "    ", "comp_id", "=", "(", "self", ".", "_comp_id", "+", "'_'", "+", "self", ".", "_salt", "if", "self", ".", "config", "[", "'use_salt'", "]", "\n", "else", "self", ".", "_comp_id", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1._get_voc_results_file_template": [[210, 220], ["os.path.join", "IconArt.IconArt_v1._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "    ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "'_det_'", "+", "self", ".", "_image_set", "+", "'_{:s}.txt'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'results'", ",", "\n", "self", ".", "_image_db", ",", "\n", "'Main'", ",", "\n", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1._write_voc_results_file": [[221, 240], ["enumerate", "print", "IconArt.IconArt_v1._get_voc_results_file_template().format", "os.path.split", "pathlib.Path().mkdir", "open", "enumerate", "IconArt.IconArt_v1._get_voc_results_file_template", "pathlib.Path", "range", "f.write"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "    ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "print", "(", "'Writing {} IconArt Results results file'", ".", "format", "(", "cls", ")", ")", "\n", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "head", ",", "tail", "=", "os", ".", "path", ".", "split", "(", "filename", ")", "\n", "pathlib", ".", "Path", "(", "head", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "filename", ",", "'wt'", ")", "as", "f", ":", "\n", "        ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "          ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "            ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "f", ".", "write", "(", "'{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'", ".", "\n", "format", "(", "index", ",", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "dets", "[", "k", ",", "3", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1.set_use_diff": [[241, 243], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "set_use_diff", "(", "self", ",", "boolean", ")", ":", "\n", "      ", "self", ".", "config", "[", "'use_diff'", "]", "=", "boolean", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1.set_force_dont_use_07_metric": [[244, 246], ["None"], "methods", ["None"], ["", "def", "set_force_dont_use_07_metric", "(", "self", ",", "boolean", ")", ":", "\n", "      ", "self", ".", "force_dont_use_07_metric", "=", "boolean", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1._do_python_eval": [[247, 293], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.isdir", "pathlib.Path().mkdir", "IconArt.IconArt_v1._get_voc_results_file_template().format", "datasets.voc_eval.voc_eval", "print", "print", "open", "pickle.dump", "numpy.mean", "numpy.mean", "int", "pathlib.Path", "IconArt.IconArt_v1._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "'output'", ")", ":", "\n", "    ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "self", ".", "_image_db", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "self", ".", "_image_db", ",", "\n", "'ImageSets'", ",", "\n", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "(", "self", ".", "_year", "is", "None", ")", "or", "(", "int", "(", "self", ".", "_year", ")", "<", "2010", ")", "else", "False", "\n", "if", "self", ".", "force_dont_use_07_metric", "==", "True", ":", "use_07_metric", "=", "False", "\n", "print", "(", "'VOC07 metric? '", "+", "(", "'Yes'", "if", "use_07_metric", "else", "'No'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "      ", "pathlib", ".", "Path", "(", "output_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "use_diff", "=", "self", ".", "config", "[", "'use_diff'", "]", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "'Results:'", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "      ", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "ap", ")", ")", ")", "\n", "", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'--------------------------------------------------------------'", ")", "\n", "print", "(", "'Results computed with the **unofficial** Python eval code.'", ")", "\n", "print", "(", "'Results should be very close to the official MATLAB eval code.'", ")", "\n", "print", "(", "'Recompute with `./tools/reval.py --matlab ...` for your paper.'", ")", "\n", "print", "(", "'-- Thanks, The Management'", ")", "\n", "print", "(", "'--------------------------------------------------------------'", ")", "\n", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1._do_matlab_eval": [[294, 308], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "IconArt.IconArt_v1._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "'output'", ")", ":", "\n", "    ", "print", "(", "'-----------------------------------------------------'", ")", "\n", "print", "(", "'Computing results with the official MATLAB eval code.'", ")", "\n", "print", "(", "'-----------------------------------------------------'", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'lib'", ",", "'datasets'", ",", "\n", "'VOCdevkit-matlab-wrapper'", ")", "\n", "cmd", "=", "'cd {} && '", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "'{:s} -nodisplay -nodesktop '", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "'voc_eval(\\'{:s}\\',\\'{:s}\\',\\'{:s}\\',\\'{:s}\\'); quit;\"'", ".", "format", "(", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "\n", "self", ".", "_image_set", ",", "output_dir", ")", "\n", "print", "(", "(", "'Running:\\n{}'", ".", "format", "(", "cmd", ")", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1.evaluate_localisation_ovthresh": [[309, 359], ["IconArt.IconArt_v1._write_voc_results_file", "os.path.join", "os.path.join", "os.path.join", "enumerate", "print", "os.path.isdir", "pathlib.Path().mkdir", "IconArt.IconArt_v1._get_voc_results_file_template().format", "datasets.voc_eval.voc_eval", "print", "open", "pickle.dump", "numpy.mean", "pathlib.Path", "IconArt.IconArt_v1._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "evaluate_localisation_ovthresh", "(", "self", ",", "all_boxes", ",", "output_dir", ",", "ovthresh", ")", ":", "\n", "    ", "\"\"\"\n    Ajout par Nicolas Gonthier pour calculer des metrics un peu plus facile\n    \"\"\"", "\n", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "self", ".", "_image_db", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "self", ".", "_image_db", ",", "\n", "'ImageSets'", ",", "\n", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "self", ".", "force_dont_use_07_metric", "==", "False", "else", "False", "\n", "if", "self", ".", "force_dont_use_07_metric", "==", "True", ":", "use_07_metric", "=", "False", "\n", "#    print('VOC07 metric? ' + ('Yes' if use_07_metric else 'No'))", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "      ", "pathlib", ".", "Path", "(", "output_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "ovthresh", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "use_diff", "=", "self", ".", "config", "[", "'use_diff'", "]", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "#    print('~~~~~~~~')", "\n", "#    print('Results:')", "\n", "#    for ap in aps:", "\n", "#      print(('{:.3f}'.format(ap)))", "\n", "#    print(('{:.3f}'.format(np.mean(aps))))", "\n", "#    print('~~~~~~~~')", "\n", "##    print('')", "\n", "##    print('--------------------------------------------------------------')", "\n", "#    print('Results computed with the **unofficial** Python eval code.')", "\n", "##    print('Results should be very close to the official MATLAB eval code.')", "\n", "##    print('Recompute with `./tools/reval.py --matlab ...` for your paper.')", "\n", "##    print('-- Thanks, The Management')", "\n", "##    print('--------------------------------------------------------------')", "\n", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1.evaluate_detections": [[360, 372], ["IconArt.IconArt_v1._write_voc_results_file", "IconArt.IconArt_v1._do_python_eval", "IconArt.IconArt_v1._do_matlab_eval", "IconArt.IconArt_v1._get_voc_results_file_template().format", "os.remove", "IconArt.IconArt_v1._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._do_python_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._do_matlab_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "    ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "aps", "=", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "'matlab_eval'", "]", ":", "\n", "      ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "'cleanup'", "]", ":", "\n", "      ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "        ", "if", "cls", "==", "'__background__'", ":", "\n", "          ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "", "", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.IconArt.IconArt_v1.competition_mode": [[373, 380], ["None"], "methods", ["None"], ["", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "    ", "if", "on", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "False", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "False", "\n", "", "else", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "True", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.__init__": [[27, 69], ["datasets.imdb.imdb.__init__", "dict", "pascal_voc.pascal_voc._load_image_set_index", "str", "os.path.exists", "os.path.exists", "pascal_voc.pascal_voc._get_default_path", "os.path.join", "os.path.join", "list", "uuid.uuid4", "zip", "list", "range"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.__init__", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_image_set_index", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_default_path"], ["  ", "def", "__init__", "(", "self", ",", "image_set", ",", "year", ",", "use_diff", "=", "False", ",", "devkit_path", "=", "None", ",", "test_ext", "=", "False", ",", "\n", "force_dont_use_07_metric", "=", "False", ")", ":", "\n", "    ", "name", "=", "'voc_'", "+", "year", "+", "'_'", "+", "image_set", "\n", "if", "use_diff", ":", "\n", "      ", "name", "+=", "'_diff'", "\n", "", "imdb", ".", "__init__", "(", "self", ",", "name", ")", "\n", "self", ".", "_year", "=", "year", "\n", "self", ".", "_image_set", "=", "image_set", "\n", "if", "devkit_path", "is", "None", ":", "\n", "        ", "self", ".", "_devkit_path", "=", "self", ".", "_get_default_path", "(", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "_devkit_path", "=", "devkit_path", "\n", "", "if", "test_ext", ":", "\n", "        ", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'VOC'", "+", "self", ".", "_year", "+", "'test'", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "_data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'VOC'", "+", "self", ".", "_year", ")", "\n", "", "self", ".", "_classes", "=", "(", "'__background__'", ",", "# always index 0", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "\n", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "\n", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", ")", "\n", "self", ".", "_class_to_ind", "=", "dict", "(", "list", "(", "zip", "(", "self", ".", "classes", ",", "list", "(", "range", "(", "self", ".", "num_classes", ")", ")", ")", ")", ")", "\n", "self", ".", "_image_ext", "=", "'.jpg'", "\n", "self", ".", "_image_index", "=", "self", ".", "_load_image_set_index", "(", ")", "\n", "# Default to roidb handler", "\n", "self", ".", "_roidb_handler", "=", "self", ".", "gt_roidb", "\n", "self", ".", "_salt", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "self", ".", "_comp_id", "=", "'comp4'", "\n", "self", ".", "force_dont_use_07_metric", "=", "force_dont_use_07_metric", "\n", "\n", "# PASCAL specific config options", "\n", "self", ".", "config", "=", "{", "'cleanup'", ":", "True", ",", "\n", "'use_salt'", ":", "True", ",", "\n", "'use_diff'", ":", "use_diff", ",", "\n", "'matlab_eval'", ":", "False", ",", "\n", "'rpn_file'", ":", "None", "}", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_devkit_path", ")", ",", "'VOCdevkit path does not exist: {}'", ".", "format", "(", "self", ".", "_devkit_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "_data_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "self", ".", "_data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.image_path_at": [[70, 75], ["pascal_voc.pascal_voc.image_path_from_index"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.image_path_from_index"], ["", "def", "image_path_at", "(", "self", ",", "i", ")", ":", "\n", "    ", "\"\"\"\n    Return the absolute path to image i in the image sequence.\n    \"\"\"", "\n", "return", "self", ".", "image_path_from_index", "(", "self", ".", "_image_index", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.image_path_from_index": [[76, 85], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "image_path_from_index", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Construct an image path from the image's \"index\" identifier.\n    \"\"\"", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'JPEGImages'", ",", "\n", "index", "+", "self", ".", "_image_ext", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_path", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_path", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_image_set_index": [[86, 99], ["os.path.join", "os.path.exists", "open", "x.strip", "f.readlines"], "methods", ["None"], ["", "def", "_load_image_set_index", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Load the indexes listed in this dataset's image set file.\n    \"\"\"", "\n", "# Example path to image set file:", "\n", "# self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt", "\n", "image_set_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'ImageSets'", ",", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "image_set_file", ")", ",", "'Path does not exist: {}'", ".", "format", "(", "image_set_file", ")", "\n", "with", "open", "(", "image_set_file", ")", "as", "f", ":", "\n", "      ", "image_index", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "image_index", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_default_path": [[100, 105], ["os.path.join"], "methods", ["None"], ["", "def", "_get_default_path", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the default path where PASCAL VOC is expected to be installed.\n    \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'VOCdevkit'", "+", "self", ".", "_year", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.gt_roidb": [[106, 129], ["os.path.join", "os.path.exists", "print", "print", "pascal_voc.pascal_voc._load_pascal_annotation", "open", "pickle.dump", "open", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_pascal_annotation"], ["", "def", "gt_roidb", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Return the database of ground-truth regions of interest.\n\n    This function loads/saves from/to a cache file to speed up future calls.\n    \"\"\"", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cache_path", ",", "self", ".", "name", "+", "'_gt_roidb.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "      ", "with", "open", "(", "cache_file", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "try", ":", "\n", "          ", "roidb", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "except", ":", "\n", "          ", "roidb", "=", "pickle", ".", "load", "(", "fid", ",", "encoding", "=", "'bytes'", ")", "\n", "", "", "print", "(", "'{} gt roidb loaded from {}'", ".", "format", "(", "self", ".", "name", ",", "cache_file", ")", ")", "\n", "return", "roidb", "\n", "\n", "", "gt_roidb", "=", "[", "self", ".", "_load_pascal_annotation", "(", "index", ")", "\n", "for", "index", "in", "self", ".", "image_index", "]", "\n", "with", "open", "(", "cache_file", ",", "'wb'", ")", "as", "fid", ":", "\n", "      ", "pickle", ".", "dump", "(", "gt_roidb", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'wrote gt roidb to {}'", ".", "format", "(", "cache_file", ")", ")", "\n", "\n", "return", "gt_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.rpn_roidb": [[130, 139], ["pascal_voc.pascal_voc.gt_roidb", "pascal_voc.pascal_voc._load_rpn_roidb", "datasets.imdb.imdb.merge_roidbs", "pascal_voc.pascal_voc._load_rpn_roidb", "int"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.gt_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_rpn_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.merge_roidbs", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_rpn_roidb"], ["", "def", "rpn_roidb", "(", "self", ")", ":", "\n", "    ", "if", "int", "(", "self", ".", "_year", ")", "==", "2007", "or", "self", ".", "_image_set", "!=", "'test'", ":", "\n", "      ", "gt_roidb", "=", "self", ".", "gt_roidb", "(", ")", "\n", "rpn_roidb", "=", "self", ".", "_load_rpn_roidb", "(", "gt_roidb", ")", "\n", "roidb", "=", "imdb", ".", "merge_roidbs", "(", "gt_roidb", ",", "rpn_roidb", ")", "\n", "", "else", ":", "\n", "      ", "roidb", "=", "self", ".", "_load_rpn_roidb", "(", "None", ")", "\n", "\n", "", "return", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_rpn_roidb": [[140, 148], ["print", "os.path.exists", "pascal_voc.pascal_voc.create_roidb_from_box_list", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.create_roidb_from_box_list"], ["", "def", "_load_rpn_roidb", "(", "self", ",", "gt_roidb", ")", ":", "\n", "    ", "filename", "=", "self", ".", "config", "[", "'rpn_file'", "]", "\n", "print", "(", "'loading {}'", ".", "format", "(", "filename", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "filename", ")", ",", "'rpn data not found at: {}'", ".", "format", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "box_list", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "self", ".", "create_roidb_from_box_list", "(", "box_list", ",", "gt_roidb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._load_pascal_annotation": [[149, 194], ["os.path.join", "xml.parse", "xml.parse.findall", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "obj.find", "float", "float", "float", "float", "obj.find().text.lower().strip", "int", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find().text.lower", "obj.find", "obj.find"], "methods", ["None"], ["", "def", "_load_pascal_annotation", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Load image and bounding boxes info from XML file in the PASCAL VOC\n    format.\n    \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_data_path", ",", "'Annotations'", ",", "index", "+", "'.xml'", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "objs", "=", "tree", ".", "findall", "(", "'object'", ")", "\n", "if", "not", "self", ".", "config", "[", "'use_diff'", "]", ":", "\n", "# Exclude the samples labeled as difficult", "\n", "      ", "non_diff_objs", "=", "[", "\n", "obj", "for", "obj", "in", "objs", "if", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "==", "0", "]", "\n", "# if len(non_diff_objs) != len(objs):", "\n", "#     print 'Removed {} difficult objects'.format(", "\n", "#         len(objs) - len(non_diff_objs))", "\n", "objs", "=", "non_diff_objs", "\n", "", "num_objs", "=", "len", "(", "objs", ")", "\n", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "4", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "gt_classes", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "num_objs", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# \"Seg\" area for pascal is just the box area", "\n", "seg_areas", "=", "np", ".", "zeros", "(", "(", "num_objs", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Load object bounding boxes into a data frame.", "\n", "for", "ix", ",", "obj", "in", "enumerate", "(", "objs", ")", ":", "\n", "      ", "bbox", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "# Make pixel indexes 0-based", "\n", "x1", "=", "float", "(", "bbox", ".", "find", "(", "'xmin'", ")", ".", "text", ")", "-", "1", "\n", "y1", "=", "float", "(", "bbox", ".", "find", "(", "'ymin'", ")", ".", "text", ")", "-", "1", "\n", "x2", "=", "float", "(", "bbox", ".", "find", "(", "'xmax'", ")", ".", "text", ")", "-", "1", "\n", "y2", "=", "float", "(", "bbox", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "-", "1", "\n", "cls", "=", "self", ".", "_class_to_ind", "[", "obj", ".", "find", "(", "'name'", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "]", "\n", "boxes", "[", "ix", ",", ":", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "gt_classes", "[", "ix", "]", "=", "cls", "\n", "overlaps", "[", "ix", ",", "cls", "]", "=", "1.0", "\n", "seg_areas", "[", "ix", "]", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "\n", "", "overlaps", "=", "scipy", ".", "sparse", ".", "csr_matrix", "(", "overlaps", ")", "\n", "\n", "return", "{", "'boxes'", ":", "boxes", ",", "\n", "'gt_classes'", ":", "gt_classes", ",", "\n", "'gt_overlaps'", ":", "overlaps", ",", "\n", "'flipped'", ":", "False", ",", "\n", "'seg_areas'", ":", "seg_areas", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_comp_id": [[195, 199], ["None"], "methods", ["None"], ["", "def", "_get_comp_id", "(", "self", ")", ":", "\n", "    ", "comp_id", "=", "(", "self", ".", "_comp_id", "+", "'_'", "+", "self", ".", "_salt", "if", "self", ".", "config", "[", "'use_salt'", "]", "\n", "else", "self", ".", "_comp_id", ")", "\n", "return", "comp_id", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template": [[200, 210], ["os.path.join", "pascal_voc.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_get_voc_results_file_template", "(", "self", ")", ":", "\n", "# VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt", "\n", "    ", "filename", "=", "self", ".", "_get_comp_id", "(", ")", "+", "'_det_'", "+", "self", ".", "_image_set", "+", "'_{:s}.txt'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'results'", ",", "\n", "'VOC'", "+", "self", ".", "_year", ",", "\n", "'Main'", ",", "\n", "filename", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._write_voc_results_file": [[211, 230], ["enumerate", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "os.path.split", "pathlib.Path().mkdir", "open", "enumerate", "pascal_voc.pascal_voc._get_voc_results_file_template", "pathlib.Path", "range", "f.write"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "_write_voc_results_file", "(", "self", ",", "all_boxes", ")", ":", "\n", "    ", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "#      print('Writing {} VOC results file'.format(cls))", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "head", ",", "tail", "=", "os", ".", "path", ".", "split", "(", "filename", ")", "\n", "pathlib", ".", "Path", "(", "head", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "filename", ",", "'wt'", ")", "as", "f", ":", "\n", "        ", "for", "im_ind", ",", "index", "in", "enumerate", "(", "self", ".", "image_index", ")", ":", "\n", "          ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "            ", "continue", "\n", "# the VOCdevkit expects 1-based indices", "\n", "", "for", "k", "in", "range", "(", "dets", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "f", ".", "write", "(", "'{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'", ".", "\n", "format", "(", "index", ",", "dets", "[", "k", ",", "-", "1", "]", ",", "\n", "dets", "[", "k", ",", "0", "]", "+", "1", ",", "dets", "[", "k", ",", "1", "]", "+", "1", ",", "\n", "dets", "[", "k", ",", "2", "]", "+", "1", ",", "dets", "[", "k", ",", "3", "]", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.set_use_diff": [[231, 234], ["print"], "methods", ["None"], ["", "", "", "", "", "def", "set_use_diff", "(", "self", ",", "boolean", ")", ":", "\n", "      ", "print", "(", "'Modification'", ")", "\n", "self", ".", "config", "[", "'use_diff'", "]", "=", "boolean", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.set_force_dont_use_07_metric": [[235, 237], ["None"], "methods", ["None"], ["", "def", "set_force_dont_use_07_metric", "(", "self", ",", "boolean", ")", ":", "\n", "      ", "self", ".", "force_dont_use_07_metric", "=", "boolean", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._do_python_eval": [[238, 284], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "os.path.isdir", "pathlib.Path().mkdir", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "datasets.voc_eval.voc_eval", "print", "print", "int", "open", "pickle.dump", "numpy.mean", "numpy.mean", "pathlib.Path", "pascal_voc.pascal_voc._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "_do_python_eval", "(", "self", ",", "output_dir", "=", "'output'", ")", ":", "\n", "    ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'VOC'", "+", "self", ".", "_year", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'VOC'", "+", "self", ".", "_year", ",", "\n", "'ImageSets'", ",", "\n", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "if", "self", ".", "force_dont_use_07_metric", "==", "True", ":", "use_07_metric", "=", "False", "\n", "print", "(", "'VOC07 metric? '", "+", "(", "'Yes'", "if", "use_07_metric", "else", "'No'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "      ", "pathlib", ".", "Path", "(", "output_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "use_diff", "=", "self", ".", "config", "[", "'use_diff'", "]", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "'Results:'", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "      ", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "ap", ")", ")", ")", "\n", "", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "#    print('')", "\n", "#    print('--------------------------------------------------------------')", "\n", "print", "(", "'Results computed with the **unofficial** Python eval code.'", ")", "\n", "#    print('Results should be very close to the official MATLAB eval code.')", "\n", "#    print('Recompute with `./tools/reval.py --matlab ...` for your paper.')", "\n", "#    print('-- Thanks, The Management')", "\n", "#    print('--------------------------------------------------------------')", "\n", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._do_matlab_eval": [[285, 299], ["print", "print", "print", "os.path.join", "print", "subprocess.call", "pascal_voc.pascal_voc._get_comp_id"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_comp_id"], ["", "def", "_do_matlab_eval", "(", "self", ",", "output_dir", "=", "'output'", ")", ":", "\n", "    ", "print", "(", "'-----------------------------------------------------'", ")", "\n", "print", "(", "'Computing results with the official MATLAB eval code.'", ")", "\n", "print", "(", "'-----------------------------------------------------'", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ROOT_DIR", ",", "'lib'", ",", "'datasets'", ",", "\n", "'VOCdevkit-matlab-wrapper'", ")", "\n", "cmd", "=", "'cd {} && '", ".", "format", "(", "path", ")", "\n", "cmd", "+=", "'{:s} -nodisplay -nodesktop '", ".", "format", "(", "cfg", ".", "MATLAB", ")", "\n", "cmd", "+=", "'-r \"dbstop if error; '", "\n", "cmd", "+=", "'voc_eval(\\'{:s}\\',\\'{:s}\\',\\'{:s}\\',\\'{:s}\\'); quit;\"'", ".", "format", "(", "self", ".", "_devkit_path", ",", "self", ".", "_get_comp_id", "(", ")", ",", "\n", "self", ".", "_image_set", ",", "output_dir", ")", "\n", "print", "(", "(", "'Running:\\n{}'", ".", "format", "(", "cmd", ")", ")", ")", "\n", "status", "=", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.evaluate_detections": [[300, 312], ["pascal_voc.pascal_voc._write_voc_results_file", "pascal_voc.pascal_voc._do_python_eval", "pascal_voc.pascal_voc._do_matlab_eval", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "os.remove", "pascal_voc.pascal_voc._get_voc_results_file_template"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._do_python_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._do_matlab_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "evaluate_detections", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "    ", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "aps", "=", "self", ".", "_do_python_eval", "(", "output_dir", ")", "\n", "if", "self", ".", "config", "[", "'matlab_eval'", "]", ":", "\n", "      ", "self", ".", "_do_matlab_eval", "(", "output_dir", ")", "\n", "", "if", "self", ".", "config", "[", "'cleanup'", "]", ":", "\n", "      ", "for", "cls", "in", "self", ".", "_classes", ":", "\n", "        ", "if", "cls", "==", "'__background__'", ":", "\n", "          ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "", "", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.evaluate_localisation": [[313, 359], ["os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "os.path.isdir", "pathlib.Path().mkdir", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "datasets.voc_eval.voc_eval", "print", "print", "int", "open", "pickle.dump", "numpy.mean", "numpy.mean", "pathlib.Path", "pascal_voc.pascal_voc._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "evaluate_localisation", "(", "self", ",", "all_boxes", ",", "output_dir", ")", ":", "\n", "    ", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'VOC'", "+", "self", ".", "_year", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'VOC'", "+", "self", ".", "_year", ",", "\n", "'ImageSets'", ",", "\n", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "if", "self", ".", "force_dont_use_07_metric", "==", "True", ":", "use_07_metric", "=", "False", "\n", "print", "(", "'VOC07 metric? '", "+", "(", "'Yes'", "if", "use_07_metric", "else", "'No'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "      ", "pathlib", ".", "Path", "(", "output_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "use_diff", "=", "self", ".", "config", "[", "'use_diff'", "]", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "'Results:'", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "      ", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "ap", ")", ")", ")", "\n", "", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "#    print('')", "\n", "#    print('--------------------------------------------------------------')", "\n", "print", "(", "'Results computed with the **unofficial** Python eval code.'", ")", "\n", "#    print('Results should be very close to the official MATLAB eval code.')", "\n", "#    print('Recompute with `./tools/reval.py --matlab ...` for your paper.')", "\n", "#    print('-- Thanks, The Management')", "\n", "#    print('--------------------------------------------------------------')", "\n", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.evaluate_localisation_ovthresh": [[361, 411], ["pascal_voc.pascal_voc._write_voc_results_file", "os.path.join", "os.path.join", "os.path.join", "print", "enumerate", "print", "print", "print", "print", "print", "print", "os.path.isdir", "os.mkdir", "pascal_voc.pascal_voc._get_voc_results_file_template().format", "datasets.voc_eval.voc_eval", "print", "print", "int", "open", "pickle.dump", "numpy.mean", "numpy.mean", "pascal_voc.pascal_voc._get_voc_results_file_template", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._write_voc_results_file", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.voc_eval.voc_eval", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc._get_voc_results_file_template"], ["", "def", "evaluate_localisation_ovthresh", "(", "self", ",", "all_boxes", ",", "output_dir", ",", "ovthresh", ")", ":", "\n", "    ", "\"\"\"\n    Ajout par Nicolas Gonthier pour calculer des metrics un peu plus facile\n    \"\"\"", "\n", "self", ".", "_write_voc_results_file", "(", "all_boxes", ")", "\n", "annopath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'VOC'", "+", "self", ".", "_year", ",", "\n", "'Annotations'", ",", "\n", "'{:s}.xml'", ")", "\n", "imagesetfile", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "_devkit_path", ",", "\n", "'VOC'", "+", "self", ".", "_year", ",", "\n", "'ImageSets'", ",", "\n", "'Main'", ",", "\n", "self", ".", "_image_set", "+", "'.txt'", ")", "\n", "cachedir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_devkit_path", ",", "'annotations_cache'", ")", "\n", "aps", "=", "[", "]", "\n", "# The PASCAL VOC metric changed in 2010", "\n", "use_07_metric", "=", "True", "if", "int", "(", "self", ".", "_year", ")", "<", "2010", "else", "False", "\n", "if", "self", ".", "force_dont_use_07_metric", "==", "True", ":", "use_07_metric", "=", "False", "\n", "print", "(", "'VOC07 metric? '", "+", "(", "'Yes'", "if", "use_07_metric", "else", "'No'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "      ", "os", ".", "mkdir", "(", "output_dir", ")", "\n", "", "for", "i", ",", "cls", "in", "enumerate", "(", "self", ".", "_classes", ")", ":", "\n", "      ", "if", "cls", "==", "'__background__'", ":", "\n", "        ", "continue", "\n", "", "filename", "=", "self", ".", "_get_voc_results_file_template", "(", ")", ".", "format", "(", "cls", ")", "\n", "rec", ",", "prec", ",", "ap", "=", "voc_eval", "(", "\n", "filename", ",", "annopath", ",", "imagesetfile", ",", "cls", ",", "cachedir", ",", "ovthresh", "=", "ovthresh", ",", "\n", "use_07_metric", "=", "use_07_metric", ",", "use_diff", "=", "self", ".", "config", "[", "'use_diff'", "]", ")", "\n", "aps", "+=", "[", "ap", "]", "\n", "print", "(", "(", "'AP for {} = {:.4f}'", ".", "format", "(", "cls", ",", "ap", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "cls", "+", "'_pr.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "'rec'", ":", "rec", ",", "'prec'", ":", "prec", ",", "'ap'", ":", "ap", "}", ",", "f", ")", "\n", "", "", "print", "(", "(", "'Mean AP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "print", "(", "'Results:'", ")", "\n", "for", "ap", "in", "aps", ":", "\n", "      ", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "ap", ")", ")", ")", "\n", "", "print", "(", "(", "'{:.3f}'", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", ")", "\n", "print", "(", "'~~~~~~~~'", ")", "\n", "#    print('')", "\n", "#    print('--------------------------------------------------------------')", "\n", "print", "(", "'Results computed with the **unofficial** Python eval code.'", ")", "\n", "#    print('Results should be very close to the official MATLAB eval code.')", "\n", "#    print('Recompute with `./tools/reval.py --matlab ...` for your paper.')", "\n", "#    print('-- Thanks, The Management')", "\n", "#    print('--------------------------------------------------------------')", "\n", "return", "(", "aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.competition_mode": [[412, 419], ["None"], "methods", ["None"], ["", "def", "competition_mode", "(", "self", ",", "on", ")", ":", "\n", "    ", "if", "on", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "False", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "False", "\n", "", "else", ":", "\n", "      ", "self", ".", "config", "[", "'use_salt'", "]", "=", "True", "\n", "self", ".", "config", "[", "'cleanup'", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.mcg_munge.munge": [[15, 33], ["os.listdir", "os.path.splitext", "os.path.join", "os.path.join", "os.path.join", "print", "os.rename", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "munge", "(", "src_dir", ")", ":", "\n", "# stored as: ./MCG-COCO-val2014-boxes/COCO_val2014_000000193401.mat", "\n", "# want:      ./MCG/mat/COCO_val2014_0/COCO_val2014_000000141/COCO_val2014_000000141334.mat", "\n", "\n", "    ", "files", "=", "os", ".", "listdir", "(", "src_dir", ")", "\n", "for", "fn", "in", "files", ":", "\n", "        ", "base", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "fn", ")", "\n", "# first 14 chars / first 22 chars / all chars + .mat", "\n", "# COCO_val2014_0/COCO_val2014_000000447/COCO_val2014_000000447991.mat", "\n", "first", "=", "base", "[", ":", "14", "]", "\n", "second", "=", "base", "[", ":", "22", "]", "\n", "dst_dir", "=", "os", ".", "path", ".", "join", "(", "'MCG'", ",", "'mat'", ",", "first", ",", "second", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dst_dir", ")", "\n", "", "src", "=", "os", ".", "path", ".", "join", "(", "src_dir", ",", "fn", ")", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "dst_dir", ",", "fn", ")", "\n", "print", "(", "'MV: {} -> {}'", ".", "format", "(", "src", ",", "dst", ")", ")", "\n", "os", ".", "rename", "(", "src", ",", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.demo.vis_detections": [[43, 74], ["matplotlib.subplots", "ax.imshow", "ax.set_title", "matplotlib.axis", "matplotlib.tight_layout", "matplotlib.draw", "numpy.where", "len", "ax.add_patch", "ax.text", "matplotlib.Rectangle", "dict"], "function", ["None"], ["def", "vis_detections", "(", "im", ",", "class_name", ",", "dets", ",", "thresh", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Draw detected bounding boxes.\"\"\"", "\n", "inds", "=", "np", ".", "where", "(", "dets", "[", ":", ",", "-", "1", "]", ">=", "thresh", ")", "[", "0", "]", "\n", "if", "len", "(", "inds", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "", "im", "=", "im", "[", ":", ",", ":", ",", "(", "2", ",", "1", ",", "0", ")", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "ax", ".", "imshow", "(", "im", ",", "aspect", "=", "'equal'", ")", "\n", "for", "i", "in", "inds", ":", "\n", "        ", "bbox", "=", "dets", "[", "i", ",", ":", "4", "]", "\n", "score", "=", "dets", "[", "i", ",", "-", "1", "]", "\n", "\n", "ax", ".", "add_patch", "(", "\n", "plt", ".", "Rectangle", "(", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "\n", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "\n", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ",", "fill", "=", "False", ",", "\n", "edgecolor", "=", "'red'", ",", "linewidth", "=", "3.5", ")", "\n", ")", "\n", "ax", ".", "text", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "-", "2", ",", "\n", "'{:s} {:.3f}'", ".", "format", "(", "class_name", ",", "score", ")", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "'blue'", ",", "alpha", "=", "0.5", ")", ",", "\n", "fontsize", "=", "14", ",", "color", "=", "'white'", ")", "\n", "\n", "", "ax", ".", "set_title", "(", "(", "'{} detections with '", "\n", "'p({} | box) >= {:.1f}'", ")", ".", "format", "(", "class_name", ",", "class_name", ",", "\n", "thresh", ")", ",", "\n", "fontsize", "=", "14", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.demo.demo": [[75, 101], ["os.path.join", "cv2.imread", "lib.utils.timer.Timer", "lib.utils.timer.Timer.tic", "lib.model.test.im_detect", "lib.utils.timer.Timer.toc", "print", "enumerate", "numpy.hstack().astype", "lib.model.nms_wrapper.nms", "demo.vis_detections", "numpy.hstack"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.im_detect", "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.nms_wrapper.nms", "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.demo.vis_detections"], ["", "def", "demo", "(", "sess", ",", "net", ",", "image_name", ")", ":", "\n", "    ", "\"\"\"Detect object classes in an image using pre-computed object proposals.\"\"\"", "\n", "\n", "# Load the demo image", "\n", "im_file", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "DATA_DIR", ",", "'demo'", ",", "image_name", ")", "\n", "im", "=", "cv2", ".", "imread", "(", "im_file", ")", "\n", "\n", "# Detect all object classes and regress object bounds", "\n", "timer", "=", "Timer", "(", ")", "\n", "timer", ".", "tic", "(", ")", "\n", "scores", ",", "boxes", "=", "im_detect", "(", "sess", ",", "net", ",", "im", ")", "\n", "timer", ".", "toc", "(", ")", "\n", "print", "(", "'Detection took {:.3f}s for {:d} object proposals'", ".", "format", "(", "timer", ".", "total_time", ",", "boxes", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "# Visualize detections for each class", "\n", "CONF_THRESH", "=", "0.8", "\n", "NMS_THRESH", "=", "0.3", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "CLASSES", "[", "1", ":", "]", ")", ":", "\n", "        ", "cls_ind", "+=", "1", "# because we skipped background", "\n", "cls_boxes", "=", "boxes", "[", ":", ",", "4", "*", "cls_ind", ":", "4", "*", "(", "cls_ind", "+", "1", ")", "]", "\n", "cls_scores", "=", "scores", "[", ":", ",", "cls_ind", "]", "\n", "dets", "=", "np", ".", "hstack", "(", "(", "cls_boxes", ",", "\n", "cls_scores", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "keep", "=", "nms", "(", "dets", ",", "NMS_THRESH", ")", "\n", "dets", "=", "dets", "[", "keep", ",", ":", "]", "\n", "vis_detections", "(", "im", ",", "cls", ",", "dets", ",", "thresh", "=", "CONF_THRESH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.demo.parse_args": [[102, 112], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "NETS.keys", "DATASETS.keys"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.convert_from_depre.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"Parse input arguments.\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Tensorflow Faster R-CNN demo'", ")", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "dest", "=", "'demo_net'", ",", "help", "=", "'Network to use [vgg16 res101]'", ",", "\n", "choices", "=", "NETS", ".", "keys", "(", ")", ",", "default", "=", "'res101'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "dest", "=", "'dataset'", ",", "help", "=", "'Trained dataset [pascal_voc pascal_voc_0712]'", ",", "\n", "choices", "=", "DATASETS", ".", "keys", "(", ")", ",", "default", "=", "'pascal_voc_0712'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.reval.parse_args": [[24, 48], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.convert_from_depre.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "  ", "\"\"\"\n  Parse input arguments\n  \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Re-evaluate results'", ")", "\n", "parser", ".", "add_argument", "(", "'output_dir'", ",", "nargs", "=", "1", ",", "help", "=", "'results directory'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--imdb'", ",", "dest", "=", "'imdb_name'", ",", "\n", "help", "=", "'dataset to re-evaluate'", ",", "\n", "default", "=", "'voc_2007_test'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--matlab'", ",", "dest", "=", "'matlab_eval'", ",", "\n", "help", "=", "'use matlab for evaluation'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--comp'", ",", "dest", "=", "'comp_mode'", ",", "help", "=", "'competition mode'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--nms'", ",", "dest", "=", "'apply_nms'", ",", "help", "=", "'apply nms'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "    ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.reval.from_dets": [[50, 65], ["datasets.factory.get_imdb", "datasets.factory.get_imdb.competition_mode", "print", "datasets.factory.get_imdb.evaluate_detections", "open", "pickle.load", "print", "model.test.apply_nms", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_imdb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.competition_mode", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.evaluate_detections", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.apply_nms"], ["", "def", "from_dets", "(", "imdb_name", ",", "output_dir", ",", "args", ")", ":", "\n", "  ", "imdb", "=", "get_imdb", "(", "imdb_name", ")", "\n", "imdb", ".", "competition_mode", "(", "args", ".", "comp_mode", ")", "\n", "imdb", ".", "config", "[", "'matlab_eval'", "]", "=", "args", ".", "matlab_eval", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'detections.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "if", "args", ".", "apply_nms", ":", "\n", "    ", "print", "(", "'Applying NMS to all detections'", ")", "\n", "nms_dets", "=", "apply_nms", "(", "dets", ",", "cfg", ".", "TEST", ".", "NMS", ")", "\n", "", "else", ":", "\n", "    ", "nms_dets", "=", "dets", "\n", "\n", "", "print", "(", "'Evaluating detections'", ")", "\n", "imdb", ".", "evaluate_detections", "(", "nms_dets", ",", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.test_net.parse_args": [[23, 57], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.convert_from_depre.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "  ", "\"\"\"\n  Parse input arguments\n  \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test a Fast R-CNN network'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'optional config file'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "dest", "=", "'model'", ",", "\n", "help", "=", "'model to test'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--imdb'", ",", "dest", "=", "'imdb_name'", ",", "\n", "help", "=", "'dataset to test'", ",", "\n", "default", "=", "'voc_2007_test'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--comp'", ",", "dest", "=", "'comp_mode'", ",", "help", "=", "'competition mode'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_dets'", ",", "dest", "=", "'max_per_image'", ",", "\n", "help", "=", "'max number of detections per image'", ",", "\n", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--tag'", ",", "dest", "=", "'tag'", ",", "\n", "help", "=", "'tag of the model'", ",", "\n", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "dest", "=", "'net'", ",", "\n", "help", "=", "'vgg16, res50, res101, res152, mobile'", ",", "\n", "default", "=", "'res50'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--set'", ",", "dest", "=", "'set_cfgs'", ",", "\n", "help", "=", "'set config keys'", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "    ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools._init_paths.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.trainval_net.parse_args": [[25, 61], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.convert_from_depre.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "  ", "\"\"\"\n  Parse input arguments\n  \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a Fast R-CNN network'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'optional config file'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--weight'", ",", "dest", "=", "'weight'", ",", "\n", "help", "=", "'initialize with pretrained model weights'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--imdb'", ",", "dest", "=", "'imdb_name'", ",", "\n", "help", "=", "'dataset to train on'", ",", "\n", "default", "=", "'voc_2007_trainval'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--imdbval'", ",", "dest", "=", "'imdbval_name'", ",", "\n", "help", "=", "'dataset to validate on'", ",", "\n", "default", "=", "'voc_2007_test'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--iters'", ",", "dest", "=", "'max_iters'", ",", "\n", "help", "=", "'number of iterations to train'", ",", "\n", "default", "=", "70000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--tag'", ",", "dest", "=", "'tag'", ",", "\n", "help", "=", "'tag of the model'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--net'", ",", "dest", "=", "'net'", ",", "\n", "help", "=", "'vgg16, res50, res101, res152, mobile'", ",", "\n", "default", "=", "'res50'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--set'", ",", "dest", "=", "'set_cfgs'", ",", "\n", "help", "=", "'set config keys'", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "    ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.trainval_net.combined_roidb": [[63, 86], ["datasets.factory.get_imdb", "print", "datasets.factory.get_imdb.set_proposal_method", "print", "model.train_val.get_training_roidb", "trainval_net.combined_roidb.get_roidb"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_imdb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.set_proposal_method", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.get_training_roidb"], ["", "def", "combined_roidb", "(", "imdb_names", ")", ":", "\n", "  ", "\"\"\"\n  Combine multiple roidbs\n  \"\"\"", "\n", "\n", "def", "get_roidb", "(", "imdb_name", ")", ":", "\n", "    ", "imdb", "=", "get_imdb", "(", "imdb_name", ")", "\n", "print", "(", "'Loaded dataset `{:s}` for training'", ".", "format", "(", "imdb", ".", "name", ")", ")", "\n", "imdb", ".", "set_proposal_method", "(", "cfg", ".", "TRAIN", ".", "PROPOSAL_METHOD", ")", "\n", "print", "(", "'Set proposal method: {:s}'", ".", "format", "(", "cfg", ".", "TRAIN", ".", "PROPOSAL_METHOD", ")", ")", "\n", "roidb", "=", "get_training_roidb", "(", "imdb", ")", "\n", "return", "roidb", "\n", "\n", "", "roidbs", "=", "[", "get_roidb", "(", "s", ")", "for", "s", "in", "imdb_names", ".", "split", "(", "'+'", ")", "]", "\n", "roidb", "=", "roidbs", "[", "0", "]", "\n", "if", "len", "(", "roidbs", ")", ">", "1", ":", "\n", "    ", "for", "r", "in", "roidbs", "[", "1", ":", "]", ":", "\n", "      ", "roidb", ".", "extend", "(", "r", ")", "\n", "", "tmp", "=", "get_imdb", "(", "imdb_names", ".", "split", "(", "'+'", ")", "[", "1", "]", ")", "\n", "imdb", "=", "datasets", ".", "imdb", ".", "imdb", "(", "imdb_names", ",", "tmp", ".", "classes", ")", "\n", "", "else", ":", "\n", "    ", "imdb", "=", "get_imdb", "(", "imdb_names", ")", "\n", "", "return", "imdb", ",", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.convert_from_depre.parse_args": [[39, 69], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.convert_from_depre.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "  ", "\"\"\"\n  Parse input arguments\n  \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Convert an old VGG16 snapshot to new format'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg'", ",", "dest", "=", "'cfg_file'", ",", "\n", "help", "=", "'optional config file'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot'", ",", "dest", "=", "'snapshot'", ",", "\n", "help", "=", "'vgg snapshot prefix'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--imdb'", ",", "dest", "=", "'imdb_name'", ",", "\n", "help", "=", "'dataset to train on'", ",", "\n", "default", "=", "'voc_2007_trainval'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--iters'", ",", "dest", "=", "'max_iters'", ",", "\n", "help", "=", "'number of iterations to train'", ",", "\n", "default", "=", "70000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--tag'", ",", "dest", "=", "'tag'", ",", "\n", "help", "=", "'tag of the model'", ",", "\n", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--set'", ",", "dest", "=", "'set_cfgs'", ",", "\n", "help", "=", "'set config keys'", ",", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "    ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.convert_from_depre.combined_roidb": [[70, 93], ["datasets.factory.get_imdb", "print", "datasets.factory.get_imdb.set_proposal_method", "print", "model.train_val.get_training_roidb", "convert_from_depre.combined_roidb.get_roidb"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.factory.get_imdb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.set_proposal_method", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.get_training_roidb"], ["", "def", "combined_roidb", "(", "imdb_names", ")", ":", "\n", "  ", "\"\"\"\n  Combine multiple roidbs\n  \"\"\"", "\n", "\n", "def", "get_roidb", "(", "imdb_name", ")", ":", "\n", "    ", "imdb", "=", "get_imdb", "(", "imdb_name", ")", "\n", "print", "(", "'Loaded dataset `{:s}` for training'", ".", "format", "(", "imdb", ".", "name", ")", ")", "\n", "imdb", ".", "set_proposal_method", "(", "cfg", ".", "TRAIN", ".", "PROPOSAL_METHOD", ")", "\n", "print", "(", "'Set proposal method: {:s}'", ".", "format", "(", "cfg", ".", "TRAIN", ".", "PROPOSAL_METHOD", ")", ")", "\n", "roidb", "=", "get_training_roidb", "(", "imdb", ")", "\n", "return", "roidb", "\n", "\n", "", "roidbs", "=", "[", "get_roidb", "(", "s", ")", "for", "s", "in", "imdb_names", ".", "split", "(", "'+'", ")", "]", "\n", "roidb", "=", "roidbs", "[", "0", "]", "\n", "if", "len", "(", "roidbs", ")", ">", "1", ":", "\n", "    ", "for", "r", "in", "roidbs", "[", "1", ":", "]", ":", "\n", "      ", "roidb", ".", "extend", "(", "r", ")", "\n", "", "tmp", "=", "get_imdb", "(", "imdb_names", ".", "split", "(", "'+'", ")", "[", "1", "]", ")", "\n", "imdb", "=", "datasets", ".", "imdb", ".", "imdb", "(", "imdb_names", ",", "tmp", ".", "classes", ")", "\n", "", "else", ":", "\n", "    ", "imdb", "=", "get_imdb", "(", "imdb_names", ")", "\n", "", "return", "imdb", ",", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.convert_from_depre.get_variables_in_checkpoint_file": [[94, 103], ["tensorflow.python.pywrap_tensorflow.NewCheckpointReader", "pywrap_tensorflow.NewCheckpointReader.get_variable_to_shape_map", "print", "str", "str", "print"], "function", ["None"], ["", "def", "get_variables_in_checkpoint_file", "(", "file_name", ")", ":", "\n", "  ", "try", ":", "\n", "    ", "reader", "=", "pywrap_tensorflow", ".", "NewCheckpointReader", "(", "file_name", ")", "\n", "var_to_shape_map", "=", "reader", ".", "get_variable_to_shape_map", "(", ")", "\n", "return", "var_to_shape_map", "\n", "", "except", "Exception", "as", "e", ":", "# pylint: disable=broad-except", "\n", "    ", "print", "(", "str", "(", "e", ")", ")", "\n", "if", "\"corrupted compressed block contents\"", "in", "str", "(", "e", ")", ":", "\n", "      ", "print", "(", "\"It's likely that your checkpoint file has been compressed \"", "\n", "\"with SNAPPY.\"", ")", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.convert_from_depre.convert_names": [[105, 119], ["name.replace.replace", "name.replace.replace", "name.replace.replace", "name.replace.replace", "name.replace.replace", "name.replace.replace", "name.replace.replace", "name.replace.replace", "name.replace.replace"], "function", ["None"], ["", "", "", "def", "convert_names", "(", "name", ")", ":", "\n", "# removing :0", "\n", "  ", "name", "=", "name", ".", "replace", "(", "':0'", ",", "''", ")", "\n", "# replace", "\n", "name", "=", "name", ".", "replace", "(", "'vgg_16/'", ",", "'vgg16_default/'", ")", "\n", "name", "=", "name", ".", "replace", "(", "'/biases'", ",", "'/bias'", ")", "\n", "name", "=", "name", ".", "replace", "(", "'/weights'", ",", "'/weight'", ")", "\n", "name", "=", "name", ".", "replace", "(", "'/conv1/'", ",", "'/'", ")", "\n", "name", "=", "name", ".", "replace", "(", "'/conv2/'", ",", "'/'", ")", "\n", "name", "=", "name", ".", "replace", "(", "'/conv3/'", ",", "'/'", ")", "\n", "name", "=", "name", ".", "replace", "(", "'/conv4/'", ",", "'/'", ")", "\n", "name", "=", "name", ".", "replace", "(", "'/conv5/'", ",", "'/'", ")", "\n", "\n", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.convert_from_depre.convert_from_depre": [[121, 174], ["tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.close", "os.exists", "os.makedirs", "os.makedirs", "tf.Session.graph.as_default", "tensorflow.set_random_seed", "net.create_architecture", "tensorflow.Variable", "tensorflow.train.MomentumOptimizer", "tf.train.MomentumOptimizer.compute_gradients", "os.join", "tensorflow.global_variables", "convert_from_depre.get_variables_in_checkpoint_file", "tensorflow.train.Saver", "tensorflow.train.Saver", "print", "tf.train.Saver.restore", "os.join", "print", "tf.train.Saver.save", "os.join", "os.join", "shutil.copy", "tf.train.MomentumOptimizer.apply_gradients", "tf.train.MomentumOptimizer.apply_gradients", "convert_from_depre.convert_names", "tensorflow.variable_scope", "final_gvs.append", "numpy.allclose", "tensorflow.multiply"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.create_architecture", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.get_variables_in_checkpoint_file", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore", "home.repos.pwc.inspect_result.nicaogr_Mi_max.tools.convert_from_depre.convert_names"], ["", "def", "convert_from_depre", "(", "net", ",", "imdb", ",", "input_dir", ",", "output_dir", ",", "snapshot", ",", "max_iters", ")", ":", "\n", "  ", "if", "not", "osp", ".", "exists", "(", "output_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "tfconfig", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "tfconfig", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "tfconfig", ")", "\n", "\n", "num_classes", "=", "imdb", ".", "num_classes", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "    ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "layers", "=", "net", ".", "create_architecture", "(", "sess", ",", "'TRAIN'", ",", "num_classes", ",", "tag", "=", "'default'", ",", "\n", "anchor_scales", "=", "cfg", ".", "ANCHOR_SCALES", ",", "\n", "anchor_ratios", "=", "cfg", ".", "ANCHOR_RATIOS", ")", "\n", "loss", "=", "layers", "[", "'total_loss'", "]", "\n", "# Learning rate should be reduced already", "\n", "lr", "=", "tf", ".", "Variable", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", "*", "cfg", ".", "TRAIN", ".", "GAMMA", ",", "trainable", "=", "False", ")", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", "\n", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "momentum", ")", "\n", "gvs", "=", "optimizer", ".", "compute_gradients", "(", "loss", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "DOUBLE_BIAS", ":", "\n", "      ", "final_gvs", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'Gradient_Mult'", ")", "as", "scope", ":", "\n", "        ", "for", "grad", ",", "var", "in", "gvs", ":", "\n", "          ", "scale", "=", "1.", "\n", "if", "cfg", ".", "TRAIN", ".", "DOUBLE_BIAS", "and", "'/biases:'", "in", "var", ".", "name", ":", "\n", "            ", "scale", "*=", "2.", "\n", "", "if", "not", "np", ".", "allclose", "(", "scale", ",", "1.0", ")", ":", "\n", "            ", "grad", "=", "tf", ".", "multiply", "(", "grad", ",", "scale", ")", "\n", "", "final_gvs", ".", "append", "(", "(", "grad", ",", "var", ")", ")", "\n", "", "", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "final_gvs", ")", "\n", "", "else", ":", "\n", "      ", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "gvs", ")", "\n", "\n", "", "checkpoint", "=", "osp", ".", "join", "(", "input_dir", ",", "snapshot", "+", "'.ckpt'", ")", "\n", "variables", "=", "tf", ".", "global_variables", "(", ")", "\n", "name2var", "=", "{", "convert_names", "(", "v", ".", "name", ")", ":", "v", "for", "v", "in", "variables", "}", "\n", "target_names", "=", "get_variables_in_checkpoint_file", "(", "checkpoint", ")", "\n", "restorer", "=", "tf", ".", "train", ".", "Saver", "(", "name2var", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "print", "(", "'Importing...'", ")", "\n", "restorer", ".", "restore", "(", "sess", ",", "checkpoint", ")", "\n", "checkpoint", "=", "osp", ".", "join", "(", "output_dir", ",", "snapshot", "+", "'.ckpt'", ")", "\n", "print", "(", "'Exporting...'", ")", "\n", "saver", ".", "save", "(", "sess", ",", "checkpoint", ")", "\n", "\n", "# also copy the pkl file", "\n", "index", "=", "osp", ".", "join", "(", "input_dir", ",", "snapshot", "+", "'.pkl'", ")", "\n", "outdex", "=", "osp", ".", "join", "(", "output_dir", ",", "snapshot", "+", "'.pkl'", ")", "\n", "shutil", ".", "copy", "(", "index", ",", "outdex", ")", "\n", "\n", "", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nms.py_cpu_nms.py_cpu_nms": [[10, 40], ["scores.argsort", "keep.append", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.where"], "function", ["None"], ["def", "py_cpu_nms", "(", "dets", ",", "thresh", ")", ":", "\n", "\t", "\"\"\"Pure Python NMS baseline.\"\"\"", "\n", "x1", "=", "dets", "[", ":", ",", "0", "]", "\n", "y1", "=", "dets", "[", ":", ",", "1", "]", "\n", "x2", "=", "dets", "[", ":", ",", "2", "]", "\n", "y2", "=", "dets", "[", ":", ",", "3", "]", "\n", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "\n", "areas", "=", "(", "x2", "-", "x1", "+", "1", ")", "*", "(", "y2", "-", "y1", "+", "1", ")", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "\t\t", "i", "=", "order", "[", "0", "]", "\n", "keep", ".", "append", "(", "i", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", "+", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy2", "-", "yy1", "+", "1", ")", "\n", "inter", "=", "w", "*", "h", "\n", "ovr", "=", "inter", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "order", "[", "1", ":", "]", "]", "-", "inter", ")", "\n", "\n", "inds", "=", "np", ".", "where", "(", "ovr", "<=", "thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "\n", "", "return", "keep", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.SolverWrapper.__init__": [[32, 44], ["os.path.exists", "os.makedirs"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sess", ",", "network", ",", "imdb", ",", "valroidb", ",", "output_dir", ",", "tbdir", ",", "pretrained_model", "=", "None", ")", ":", "\n", "    ", "self", ".", "net", "=", "network", "\n", "self", ".", "imdb", "=", "imdb", "\n", "#    self.train_labels = train_labels", "\n", "self", ".", "valroidb", "=", "valroidb", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "tbdir", "=", "tbdir", "\n", "# Simply put '_val' at the end to save the summaries from the validation set", "\n", "self", ".", "tbvaldir", "=", "tbdir", "+", "'_val'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "tbvaldir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "self", ".", "tbvaldir", ")", "\n", "", "self", ".", "pretrained_model", "=", "pretrained_model", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.SolverWrapper.snapshot": [[45, 81], ["os.path.join", "WS_train_val.SolverWrapper.saver.save", "print", "os.path.join", "numpy.random.get_state", "os.path.exists", "os.makedirs", "open", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump"], "methods", ["None"], ["", "def", "snapshot", "(", "self", ",", "sess", ",", "iter", ")", ":", "\n", "    ", "net", "=", "self", ".", "net", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_dir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "self", ".", "output_dir", ")", "\n", "\n", "# Store the model snapshot", "\n", "", "filename", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_PREFIX", "+", "'_iter_{:d}'", ".", "format", "(", "iter", ")", "+", "'.ckpt'", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "filename", ")", "\n", "self", ".", "saver", ".", "save", "(", "sess", ",", "filename", ")", "\n", "print", "(", "'Wrote snapshot to: {:s}'", ".", "format", "(", "filename", ")", ")", "\n", "\n", "# Also store some meta information, random state, etc.", "\n", "nfilename", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_PREFIX", "+", "'_iter_{:d}'", ".", "format", "(", "iter", ")", "+", "'.pkl'", "\n", "nfilename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "nfilename", ")", "\n", "# current state of numpy random", "\n", "st0", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "# current position in the database", "\n", "cur", "=", "self", ".", "data_layer", ".", "_cur", "\n", "# current shuffled indexes of the database", "\n", "perm", "=", "self", ".", "data_layer", ".", "_perm", "\n", "# current position in the validation database", "\n", "cur_val", "=", "self", ".", "data_layer_val", ".", "_cur", "\n", "# current shuffled indexes of the validation database", "\n", "perm_val", "=", "self", ".", "data_layer_val", ".", "_perm", "\n", "\n", "# Dump the meta info", "\n", "with", "open", "(", "nfilename", ",", "'wb'", ")", "as", "fid", ":", "\n", "      ", "pickle", ".", "dump", "(", "st0", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "pickle", ".", "dump", "(", "cur", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "pickle", ".", "dump", "(", "perm", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "pickle", ".", "dump", "(", "cur_val", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "pickle", ".", "dump", "(", "perm_val", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "pickle", ".", "dump", "(", "iter", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "filename", ",", "nfilename", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.SolverWrapper.from_snapshot": [[82, 104], ["print", "WS_train_val.SolverWrapper.saver.restore", "print", "open", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "numpy.random.set_state"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore"], ["", "def", "from_snapshot", "(", "self", ",", "sess", ",", "sfile", ",", "nfile", ")", ":", "\n", "    ", "print", "(", "'Restoring model snapshots from {:s}'", ".", "format", "(", "sfile", ")", ")", "\n", "self", ".", "saver", ".", "restore", "(", "sess", ",", "sfile", ")", "\n", "print", "(", "'Restored.'", ")", "\n", "# Needs to restore the other hyper-parameters/states for training, (TODO xinlei) I have", "\n", "# tried my best to find the random states so that it can be recovered exactly", "\n", "# However the Tensorflow state is currently not available", "\n", "with", "open", "(", "nfile", ",", "'rb'", ")", "as", "fid", ":", "\n", "      ", "st0", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "cur", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "perm", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "cur_val", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "perm_val", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "last_snapshot_iter", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "\n", "np", ".", "random", ".", "set_state", "(", "st0", ")", "\n", "self", ".", "data_layer", ".", "_cur", "=", "cur", "\n", "self", ".", "data_layer", ".", "_perm", "=", "perm", "\n", "self", ".", "data_layer_val", ".", "_cur", "=", "cur_val", "\n", "self", ".", "data_layer_val", ".", "_perm", "=", "perm_val", "\n", "\n", "", "return", "last_snapshot_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.SolverWrapper.get_variables_in_checkpoint_file": [[105, 114], ["tensorflow.python.pywrap_tensorflow.NewCheckpointReader", "tensorflow.python.pywrap_tensorflow.NewCheckpointReader.get_variable_to_shape_map", "print", "str", "str", "print"], "methods", ["None"], ["", "def", "get_variables_in_checkpoint_file", "(", "self", ",", "file_name", ")", ":", "\n", "    ", "try", ":", "\n", "      ", "reader", "=", "pywrap_tensorflow", ".", "NewCheckpointReader", "(", "file_name", ")", "\n", "var_to_shape_map", "=", "reader", ".", "get_variable_to_shape_map", "(", ")", "\n", "return", "var_to_shape_map", "\n", "", "except", "Exception", "as", "e", ":", "# pylint: disable=broad-except", "\n", "      ", "print", "(", "str", "(", "e", ")", ")", "\n", "if", "\"corrupted compressed block contents\"", "in", "str", "(", "e", ")", ":", "\n", "        ", "print", "(", "\"It's likely that your checkpoint file has been compressed \"", "\n", "\"with SNAPPY.\"", ")", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.SolverWrapper.construct_graph": [[116, 154], ["sess.graph.as_default", "tensorflow.set_random_seed", "WS_train_val.SolverWrapper.net.create_architecture", "tensorflow.Variable", "tensorflow.train.MomentumOptimizer", "WS_train_val.SolverWrapper.optimizer.compute_gradients", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "WS_train_val.SolverWrapper.optimizer.apply_gradients", "WS_train_val.SolverWrapper.optimizer.apply_gradients", "tensorflow.variable_scope", "final_gvs.append", "numpy.allclose", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.create_architecture"], ["", "", "", "def", "construct_graph", "(", "self", ",", "sess", ")", ":", "\n", "    ", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "# Set the random seed for tensorflow", "\n", "      ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "# Build the main computation graph", "\n", "layers", "=", "self", ".", "net", ".", "create_architecture", "(", "'TRAIN'", ",", "self", ".", "imdb", ".", "num_classes", ",", "tag", "=", "'default'", ",", "\n", "anchor_scales", "=", "cfg", ".", "ANCHOR_SCALES", ",", "\n", "anchor_ratios", "=", "cfg", ".", "ANCHOR_RATIOS", ")", "\n", "# Define the loss", "\n", "loss", "=", "layers", "[", "'total_loss'", "]", "\n", "# Set learning rate and momentum", "\n", "lr", "=", "tf", ".", "Variable", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "trainable", "=", "False", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "cfg", ".", "TRAIN", ".", "MOMENTUM", ")", "\n", "\n", "# Compute the gradients with regard to the loss", "\n", "gvs", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "loss", ")", "\n", "# Double the gradient of the bias if set", "\n", "if", "cfg", ".", "TRAIN", ".", "DOUBLE_BIAS", ":", "\n", "        ", "final_gvs", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'Gradient_Mult'", ")", "as", "scope", ":", "\n", "          ", "for", "grad", ",", "var", "in", "gvs", ":", "\n", "            ", "scale", "=", "1.", "\n", "if", "cfg", ".", "TRAIN", ".", "DOUBLE_BIAS", "and", "'/biases:'", "in", "var", ".", "name", ":", "\n", "              ", "scale", "*=", "2.", "\n", "", "if", "not", "np", ".", "allclose", "(", "scale", ",", "1.0", ")", ":", "\n", "              ", "grad", "=", "tf", ".", "multiply", "(", "grad", ",", "scale", ")", "\n", "", "final_gvs", ".", "append", "(", "(", "grad", ",", "var", ")", ")", "\n", "", "", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "final_gvs", ")", "\n", "", "else", ":", "\n", "        ", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "gvs", ")", "\n", "\n", "# We will handle the snapshots ourselves", "\n", "", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "100000", ")", "\n", "# Write the train and validation information to tensorboard", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "tbdir", ",", "sess", ".", "graph", ")", "\n", "self", ".", "valwriter", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "tbvaldir", ")", "\n", "\n", "", "return", "lr", ",", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.SolverWrapper.find_previous": [[155, 176], ["os.path.join", "glob.glob", "glob.glob.sort", "os.path.join", "glob.glob", "glob.glob.sort", "len", "redfiles.append", "ss.replace", "redfile.replace", "len", "os.path.join"], "methods", ["None"], ["", "def", "find_previous", "(", "self", ")", ":", "\n", "    ", "sfiles", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_PREFIX", "+", "'_iter_*.ckpt.meta'", ")", "\n", "sfiles", "=", "glob", ".", "glob", "(", "sfiles", ")", "\n", "sfiles", ".", "sort", "(", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "# Get the snapshot name in TensorFlow", "\n", "redfiles", "=", "[", "]", "\n", "for", "stepsize", "in", "cfg", ".", "TRAIN", ".", "STEPSIZE", ":", "\n", "      ", "redfiles", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\n", "cfg", ".", "TRAIN", ".", "SNAPSHOT_PREFIX", "+", "'_iter_{:d}.ckpt.meta'", ".", "format", "(", "stepsize", "+", "1", ")", ")", ")", "\n", "", "sfiles", "=", "[", "ss", ".", "replace", "(", "'.meta'", ",", "''", ")", "for", "ss", "in", "sfiles", "if", "ss", "not", "in", "redfiles", "]", "\n", "\n", "nfiles", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_PREFIX", "+", "'_iter_*.pkl'", ")", "\n", "nfiles", "=", "glob", ".", "glob", "(", "nfiles", ")", "\n", "nfiles", ".", "sort", "(", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "redfiles", "=", "[", "redfile", ".", "replace", "(", "'.ckpt.meta'", ",", "'.pkl'", ")", "for", "redfile", "in", "redfiles", "]", "\n", "nfiles", "=", "[", "nn", "for", "nn", "in", "nfiles", "if", "nn", "not", "in", "redfiles", "]", "\n", "\n", "lsf", "=", "len", "(", "sfiles", ")", "\n", "assert", "len", "(", "nfiles", ")", "==", "lsf", "\n", "\n", "return", "lsf", ",", "nfiles", ",", "sfiles", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.SolverWrapper.initialize": [[177, 203], ["print", "tensorflow.global_variables", "sess.run", "WS_train_val.SolverWrapper.get_variables_in_checkpoint_file", "WS_train_val.SolverWrapper.net.get_variables_to_restore", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print", "WS_train_val.SolverWrapper.net.fix_variables", "print", "list", "tensorflow.variables_initializer"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.get_variables_in_checkpoint_file", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.get_variables_to_restore", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.fix_variables"], ["", "def", "initialize", "(", "self", ",", "sess", ")", ":", "\n", "# Initial file lists are empty", "\n", "    ", "np_paths", "=", "[", "]", "\n", "ss_paths", "=", "[", "]", "\n", "# Fresh train directly from ImageNet weights", "\n", "print", "(", "'Loading initial model weights from {:s}'", ".", "format", "(", "self", ".", "pretrained_model", ")", ")", "\n", "variables", "=", "tf", ".", "global_variables", "(", ")", "\n", "# Initialize all variables first", "\n", "sess", ".", "run", "(", "tf", ".", "variables_initializer", "(", "variables", ",", "name", "=", "'init'", ")", ")", "\n", "var_keep_dic", "=", "self", ".", "get_variables_in_checkpoint_file", "(", "self", ".", "pretrained_model", ")", "\n", "# Get the variables to restore, ignoring the variables to fix", "\n", "variables_to_restore", "=", "self", ".", "net", ".", "get_variables_to_restore", "(", "variables", ",", "var_keep_dic", ")", "\n", "\n", "restorer", "=", "tf", ".", "train", ".", "Saver", "(", "variables_to_restore", ")", "\n", "restorer", ".", "restore", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "print", "(", "'Loaded.'", ")", "\n", "# Need to fix the variables before loading, so that the RGB weights are changed to BGR", "\n", "# For VGG16 it also changes the convolutional weights fc6 and fc7 to", "\n", "# fully connected weights", "\n", "self", ".", "net", ".", "fix_variables", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "print", "(", "'Fixed.'", ")", "\n", "last_snapshot_iter", "=", "0", "\n", "rate", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", "\n", "stepsizes", "=", "list", "(", "cfg", ".", "TRAIN", ".", "STEPSIZE", ")", "\n", "\n", "return", "rate", ",", "last_snapshot_iter", ",", "stepsizes", ",", "np_paths", ",", "ss_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.SolverWrapper.restore": [[204, 220], ["WS_train_val.SolverWrapper.from_snapshot", "stepsizes.append"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.from_snapshot"], ["", "def", "restore", "(", "self", ",", "sess", ",", "sfile", ",", "nfile", ")", ":", "\n", "# Get the most recent snapshot and restore", "\n", "    ", "np_paths", "=", "[", "nfile", "]", "\n", "ss_paths", "=", "[", "sfile", "]", "\n", "# Restore model from snapshots", "\n", "last_snapshot_iter", "=", "self", ".", "from_snapshot", "(", "sess", ",", "sfile", ",", "nfile", ")", "\n", "# Set the learning rate", "\n", "rate", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", "\n", "stepsizes", "=", "[", "]", "\n", "for", "stepsize", "in", "cfg", ".", "TRAIN", ".", "STEPSIZE", ":", "\n", "      ", "if", "last_snapshot_iter", ">", "stepsize", ":", "\n", "        ", "rate", "*=", "cfg", ".", "TRAIN", ".", "GAMMA", "\n", "", "else", ":", "\n", "        ", "stepsizes", ".", "append", "(", "stepsize", ")", "\n", "\n", "", "", "return", "rate", ",", "last_snapshot_iter", ",", "stepsizes", ",", "np_paths", ",", "ss_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.SolverWrapper.remove_snapshot": [[221, 241], ["range", "range", "len", "os.remove", "np_paths.remove", "len", "os.path.exists", "os.remove", "ss_paths.remove", "str", "str", "os.remove", "os.remove", "os.remove", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "remove_snapshot", "(", "self", ",", "np_paths", ",", "ss_paths", ")", ":", "\n", "    ", "to_remove", "=", "len", "(", "np_paths", ")", "-", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", "\n", "for", "c", "in", "range", "(", "to_remove", ")", ":", "\n", "      ", "nfile", "=", "np_paths", "[", "0", "]", "\n", "os", ".", "remove", "(", "str", "(", "nfile", ")", ")", "\n", "np_paths", ".", "remove", "(", "nfile", ")", "\n", "\n", "", "to_remove", "=", "len", "(", "ss_paths", ")", "-", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", "\n", "for", "c", "in", "range", "(", "to_remove", ")", ":", "\n", "      ", "sfile", "=", "ss_paths", "[", "0", "]", "\n", "# To make the code compatible to earlier versions of Tensorflow,", "\n", "# where the naming tradition for checkpoints are different", "\n", "if", "os", ".", "path", ".", "exists", "(", "str", "(", "sfile", ")", ")", ":", "\n", "        ", "os", ".", "remove", "(", "str", "(", "sfile", ")", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "remove", "(", "str", "(", "sfile", "+", "'.data-00000-of-00001'", ")", ")", "\n", "os", ".", "remove", "(", "str", "(", "sfile", "+", "'.index'", ")", ")", "\n", "", "sfile_meta", "=", "sfile", "+", "'.meta'", "\n", "os", ".", "remove", "(", "str", "(", "sfile_meta", ")", ")", "\n", "ss_paths", ".", "remove", "(", "sfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.SolverWrapper.train_model": [[242, 322], ["roi_data_layer.layer.RoIDataLayer", "roi_data_layer.layer.RoIDataLayer", "WS_train_val.SolverWrapper.construct_graph", "WS_train_val.SolverWrapper.find_previous", "utils.timer.Timer", "time.time", "stepsizes.append", "stepsizes.reverse", "stepsizes.pop", "WS_train_val.SolverWrapper.writer.close", "WS_train_val.SolverWrapper.valwriter.close", "WS_train_val.SolverWrapper.initialize", "WS_train_val.SolverWrapper.restore", "utils.timer.Timer.tic", "WS_train_val.SolverWrapper.data_layer.forward", "time.time", "utils.timer.Timer.toc", "WS_train_val.SolverWrapper.snapshot", "str", "str", "WS_train_val.SolverWrapper.snapshot", "sess.run", "stepsizes.pop", "WS_train_val.SolverWrapper.net.train_step_with_summary", "WS_train_val.SolverWrapper.writer.add_summary", "WS_train_val.SolverWrapper.data_layer_val.forward", "WS_train_val.SolverWrapper.net.get_summary", "WS_train_val.SolverWrapper.valwriter.add_summary", "WS_train_val.SolverWrapper.net.train_step", "print", "print", "WS_train_val.SolverWrapper.snapshot", "np_paths.append", "ss_paths.append", "tensorflow.assign", "float", "float", "len", "WS_train_val.SolverWrapper.remove_snapshot", "lr.eval"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.find_previous", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.initialize", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore", "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer.forward", "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.snapshot", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.snapshot", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.train_step_with_summary", "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer.forward", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.get_summary", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.train_step", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.snapshot", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.remove_snapshot"], ["", "", "def", "train_model", "(", "self", ",", "sess", ",", "max_iters", ")", ":", "\n", "# Build data layers for both training and validation set", "\n", "    ", "self", ".", "data_layer", "=", "RoIDataLayer", "(", "self", ".", "roidb", ",", "self", ".", "imdb", ".", "num_classes", ")", "\n", "self", ".", "data_layer_val", "=", "RoIDataLayer", "(", "self", ".", "valroidb", ",", "self", ".", "imdb", ".", "num_classes", ",", "random", "=", "True", ")", "\n", "\n", "# Construct the computation graph", "\n", "lr", ",", "train_op", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "\n", "# Find previous snapshots if there is any to restore from", "\n", "lsf", ",", "nfiles", ",", "sfiles", "=", "self", ".", "find_previous", "(", ")", "\n", "\n", "# Initialize the variables or restore them from the last snapshot", "\n", "if", "lsf", "==", "0", ":", "\n", "      ", "rate", ",", "last_snapshot_iter", ",", "stepsizes", ",", "np_paths", ",", "ss_paths", "=", "self", ".", "initialize", "(", "sess", ")", "\n", "", "else", ":", "\n", "      ", "rate", ",", "last_snapshot_iter", ",", "stepsizes", ",", "np_paths", ",", "ss_paths", "=", "self", ".", "restore", "(", "sess", ",", "\n", "str", "(", "sfiles", "[", "-", "1", "]", ")", ",", "\n", "str", "(", "nfiles", "[", "-", "1", "]", ")", ")", "\n", "", "timer", "=", "Timer", "(", ")", "\n", "iter", "=", "last_snapshot_iter", "+", "1", "\n", "last_summary_time", "=", "time", ".", "time", "(", ")", "\n", "# Make sure the lists are not empty", "\n", "stepsizes", ".", "append", "(", "max_iters", ")", "\n", "stepsizes", ".", "reverse", "(", ")", "\n", "next_stepsize", "=", "stepsizes", ".", "pop", "(", ")", "\n", "while", "iter", "<", "max_iters", "+", "1", ":", "\n", "# Learning rate", "\n", "      ", "if", "iter", "==", "next_stepsize", "+", "1", ":", "\n", "# Add snapshot here before reducing the learning rate", "\n", "        ", "self", ".", "snapshot", "(", "sess", ",", "iter", ")", "\n", "rate", "*=", "cfg", ".", "TRAIN", ".", "GAMMA", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "lr", ",", "rate", ")", ")", "\n", "next_stepsize", "=", "stepsizes", ".", "pop", "(", ")", "\n", "\n", "", "timer", ".", "tic", "(", ")", "\n", "# Get training data, one batch at a time", "\n", "blobs", "=", "self", ".", "data_layer", ".", "forward", "(", ")", "\n", "\n", "now", "=", "time", ".", "time", "(", ")", "\n", "if", "iter", "==", "1", "or", "now", "-", "last_summary_time", ">", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", ":", "\n", "# Compute the graph with summary", "\n", "        ", "rpn_loss_cls", ",", "rpn_loss_box", ",", "loss_cls", ",", "loss_box", ",", "total_loss", ",", "summary", "=", "self", ".", "net", ".", "train_step_with_summary", "(", "sess", ",", "blobs", ",", "train_op", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "# Also check the summary on the validation set", "\n", "blobs_val", "=", "self", ".", "data_layer_val", ".", "forward", "(", ")", "\n", "summary_val", "=", "self", ".", "net", ".", "get_summary", "(", "sess", ",", "blobs_val", ")", "\n", "self", ".", "valwriter", ".", "add_summary", "(", "summary_val", ",", "float", "(", "iter", ")", ")", "\n", "last_summary_time", "=", "now", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "        ", "rpn_loss_cls", ",", "rpn_loss_box", ",", "loss_cls", ",", "loss_box", ",", "total_loss", "=", "self", ".", "net", ".", "train_step", "(", "sess", ",", "blobs", ",", "train_op", ")", "\n", "", "timer", ".", "toc", "(", ")", "\n", "\n", "# Display training information", "\n", "if", "iter", "%", "(", "cfg", ".", "TRAIN", ".", "DISPLAY", ")", "==", "0", ":", "\n", "        ", "print", "(", "'iter: %d / %d, total loss: %.6f\\n >>> rpn_loss_cls: %.6f\\n '", "\n", "'>>> rpn_loss_box: %.6f\\n >>> loss_cls: %.6f\\n >>> loss_box: %.6f\\n >>> lr: %f'", "%", "(", "iter", ",", "max_iters", ",", "total_loss", ",", "rpn_loss_cls", ",", "rpn_loss_box", ",", "loss_cls", ",", "loss_box", ",", "lr", ".", "eval", "(", ")", ")", ")", "\n", "print", "(", "'speed: {:.3f}s / iter'", ".", "format", "(", "timer", ".", "average_time", ")", ")", "\n", "\n", "# Snapshotting", "\n", "", "if", "iter", "%", "cfg", ".", "TRAIN", ".", "SNAPSHOT_ITERS", "==", "0", ":", "\n", "        ", "last_snapshot_iter", "=", "iter", "\n", "ss_path", ",", "np_path", "=", "self", ".", "snapshot", "(", "sess", ",", "iter", ")", "\n", "np_paths", ".", "append", "(", "np_path", ")", "\n", "ss_paths", ".", "append", "(", "ss_path", ")", "\n", "\n", "# Remove the old snapshots if there are too many", "\n", "if", "len", "(", "np_paths", ")", ">", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", ":", "\n", "          ", "self", ".", "remove_snapshot", "(", "np_paths", ",", "ss_paths", ")", "\n", "\n", "", "", "iter", "+=", "1", "\n", "\n", "", "if", "last_snapshot_iter", "!=", "iter", "-", "1", ":", "\n", "      ", "self", ".", "snapshot", "(", "sess", ",", "iter", "-", "1", ")", "\n", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "self", ".", "valwriter", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.get_training_roidb": [[324, 336], ["print", "roi_data_layer.roidb.prepare_roidb", "print", "print", "imdb.append_flipped_images", "print"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.roidb.prepare_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.append_flipped_images"], ["", "", "def", "get_training_roidb", "(", "imdb", ")", ":", "\n", "  ", "\"\"\"Returns a roidb (Region of Interest database) for use in training.\"\"\"", "\n", "if", "cfg", ".", "TRAIN", ".", "USE_FLIPPED", ":", "\n", "    ", "print", "(", "'Appending horizontally-flipped training examples...'", ")", "\n", "imdb", ".", "append_flipped_images", "(", ")", "\n", "print", "(", "'done'", ")", "\n", "\n", "", "print", "(", "'Preparing training data...'", ")", "\n", "rdl_roidb", ".", "prepare_roidb", "(", "imdb", ")", "\n", "print", "(", "'done'", ")", "\n", "\n", "return", "imdb", ".", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.filter_roidb": [[338, 361], ["len", "len", "print", "numpy.where", "numpy.where", "WS_train_val.filter_roidb.is_valid"], "function", ["None"], ["", "def", "filter_roidb", "(", "roidb", ")", ":", "\n", "  ", "\"\"\"Remove roidb entries that have no usable RoIs.\"\"\"", "\n", "\n", "def", "is_valid", "(", "entry", ")", ":", "\n", "# Valid images have:", "\n", "#   (1) At least one foreground RoI OR", "\n", "#   (2) At least one background RoI", "\n", "    ", "overlaps", "=", "entry", "[", "'max_overlaps'", "]", "\n", "# find boxes with sufficient overlap", "\n", "fg_inds", "=", "np", ".", "where", "(", "overlaps", ">=", "cfg", ".", "TRAIN", ".", "FG_THRESH", ")", "[", "0", "]", "\n", "# Select background RoIs as those within [BG_THRESH_LO, BG_THRESH_HI)", "\n", "bg_inds", "=", "np", ".", "where", "(", "(", "overlaps", "<", "cfg", ".", "TRAIN", ".", "BG_THRESH_HI", ")", "&", "\n", "(", "overlaps", ">=", "cfg", ".", "TRAIN", ".", "BG_THRESH_LO", ")", ")", "[", "0", "]", "\n", "# image is only valid if such boxes exist", "\n", "valid", "=", "len", "(", "fg_inds", ")", ">", "0", "or", "len", "(", "bg_inds", ")", ">", "0", "\n", "return", "valid", "\n", "\n", "", "num", "=", "len", "(", "roidb", ")", "\n", "filtered_roidb", "=", "[", "entry", "for", "entry", "in", "roidb", "if", "is_valid", "(", "entry", ")", "]", "\n", "num_after", "=", "len", "(", "filtered_roidb", ")", "\n", "print", "(", "'Filtered {} roidb entries: {} -> {}'", ".", "format", "(", "num", "-", "num_after", ",", "\n", "num", ",", "num_after", ")", ")", "\n", "return", "filtered_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.WS_train_val.trainWS_net": [[363, 381], ["WS_train_val.filter_roidb", "tensorflow.ConfigProto", "tensorflow.Session", "WS_train_val.SolverWrapper", "print", "WS_train_val.SolverWrapper.train_model", "print"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.filter_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.train_model"], ["", "def", "trainWS_net", "(", "network", ",", "imdb", ",", "valroidb", ",", "output_dir", ",", "tb_dir", ",", "\n", "pretrained_model", "=", "None", ",", "\n", "max_iters", "=", "40000", ")", ":", "\n", "  ", "\"\"\"Train a Faster R-CNN network in a weakly supervised way.\"\"\"", "\n", "#roidb = filter_roidb(roidb)", "\n", "valroidb", "=", "filter_roidb", "(", "valroidb", ")", "\n", "\n", "tfconfig", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "tfconfig", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "tfconfig", ")", "as", "sess", ":", "\n", "    ", "sw", "=", "SolverWrapper", "(", "sess", ",", "network", ",", "imdb", ",", "valroidb", ",", "output_dir", ",", "tb_dir", ",", "\n", "pretrained_model", "=", "pretrained_model", ")", "\n", "#    sw = SolverWrapper(sess, network, imdb, train_labels, valroidb, output_dir, tb_dir,", "\n", "#                       pretrained_model=pretrained_model)", "\n", "print", "(", "'Solving...'", ")", "\n", "sw", ".", "train_model", "(", "sess", ",", "max_iters", ")", "\n", "print", "(", "'done solving'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.__init__": [[32, 44], ["os.path.exists", "os.makedirs"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sess", ",", "network", ",", "imdb", ",", "roidb", ",", "valroidb", ",", "output_dir", ",", "tbdir", ",", "pretrained_model", "=", "None", ")", ":", "\n", "    ", "self", ".", "net", "=", "network", "\n", "self", ".", "imdb", "=", "imdb", "\n", "self", ".", "roidb", "=", "roidb", "\n", "self", ".", "valroidb", "=", "valroidb", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "tbdir", "=", "tbdir", "\n", "# Simply put '_val' at the end to save the summaries from the validation set", "\n", "self", ".", "tbvaldir", "=", "tbdir", "+", "'_val'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "tbvaldir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "self", ".", "tbvaldir", ")", "\n", "", "self", ".", "pretrained_model", "=", "pretrained_model", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.snapshot": [[45, 81], ["os.path.join", "train_val.SolverWrapper.saver.save", "print", "os.path.join", "numpy.random.get_state", "os.path.exists", "os.makedirs", "open", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump", "pickle.dump"], "methods", ["None"], ["", "def", "snapshot", "(", "self", ",", "sess", ",", "iter", ")", ":", "\n", "    ", "net", "=", "self", ".", "net", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_dir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "self", ".", "output_dir", ")", "\n", "\n", "# Store the model snapshot", "\n", "", "filename", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_PREFIX", "+", "'_iter_{:d}'", ".", "format", "(", "iter", ")", "+", "'.ckpt'", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "filename", ")", "\n", "self", ".", "saver", ".", "save", "(", "sess", ",", "filename", ")", "\n", "print", "(", "'Wrote snapshot to: {:s}'", ".", "format", "(", "filename", ")", ")", "\n", "\n", "# Also store some meta information, random state, etc.", "\n", "nfilename", "=", "cfg", ".", "TRAIN", ".", "SNAPSHOT_PREFIX", "+", "'_iter_{:d}'", ".", "format", "(", "iter", ")", "+", "'.pkl'", "\n", "nfilename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "nfilename", ")", "\n", "# current state of numpy random", "\n", "st0", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "# current position in the database", "\n", "cur", "=", "self", ".", "data_layer", ".", "_cur", "\n", "# current shuffled indexes of the database", "\n", "perm", "=", "self", ".", "data_layer", ".", "_perm", "\n", "# current position in the validation database", "\n", "cur_val", "=", "self", ".", "data_layer_val", ".", "_cur", "\n", "# current shuffled indexes of the validation database", "\n", "perm_val", "=", "self", ".", "data_layer_val", ".", "_perm", "\n", "\n", "# Dump the meta info", "\n", "with", "open", "(", "nfilename", ",", "'wb'", ")", "as", "fid", ":", "\n", "      ", "pickle", ".", "dump", "(", "st0", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "pickle", ".", "dump", "(", "cur", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "pickle", ".", "dump", "(", "perm", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "pickle", ".", "dump", "(", "cur_val", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "pickle", ".", "dump", "(", "perm_val", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "pickle", ".", "dump", "(", "iter", ",", "fid", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "filename", ",", "nfilename", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.from_snapshot": [[82, 104], ["print", "train_val.SolverWrapper.saver.restore", "print", "open", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "numpy.random.set_state"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore"], ["", "def", "from_snapshot", "(", "self", ",", "sess", ",", "sfile", ",", "nfile", ")", ":", "\n", "    ", "print", "(", "'Restoring model snapshots from {:s}'", ".", "format", "(", "sfile", ")", ")", "\n", "self", ".", "saver", ".", "restore", "(", "sess", ",", "sfile", ")", "\n", "print", "(", "'Restored.'", ")", "\n", "# Needs to restore the other hyper-parameters/states for training, (TODO xinlei) I have", "\n", "# tried my best to find the random states so that it can be recovered exactly", "\n", "# However the Tensorflow state is currently not available", "\n", "with", "open", "(", "nfile", ",", "'rb'", ")", "as", "fid", ":", "\n", "      ", "st0", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "cur", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "perm", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "cur_val", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "perm_val", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "last_snapshot_iter", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "\n", "np", ".", "random", ".", "set_state", "(", "st0", ")", "\n", "self", ".", "data_layer", ".", "_cur", "=", "cur", "\n", "self", ".", "data_layer", ".", "_perm", "=", "perm", "\n", "self", ".", "data_layer_val", ".", "_cur", "=", "cur_val", "\n", "self", ".", "data_layer_val", ".", "_perm", "=", "perm_val", "\n", "\n", "", "return", "last_snapshot_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.get_variables_in_checkpoint_file": [[105, 114], ["tensorflow.python.pywrap_tensorflow.NewCheckpointReader", "tensorflow.python.pywrap_tensorflow.NewCheckpointReader.get_variable_to_shape_map", "print", "str", "str", "print"], "methods", ["None"], ["", "def", "get_variables_in_checkpoint_file", "(", "self", ",", "file_name", ")", ":", "\n", "    ", "try", ":", "\n", "      ", "reader", "=", "pywrap_tensorflow", ".", "NewCheckpointReader", "(", "file_name", ")", "\n", "var_to_shape_map", "=", "reader", ".", "get_variable_to_shape_map", "(", ")", "\n", "return", "var_to_shape_map", "\n", "", "except", "Exception", "as", "e", ":", "# pylint: disable=broad-except", "\n", "      ", "print", "(", "str", "(", "e", ")", ")", "\n", "if", "\"corrupted compressed block contents\"", "in", "str", "(", "e", ")", ":", "\n", "        ", "print", "(", "\"It's likely that your checkpoint file has been compressed \"", "\n", "\"with SNAPPY.\"", ")", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.construct_graph": [[116, 154], ["sess.graph.as_default", "tensorflow.set_random_seed", "train_val.SolverWrapper.net.create_architecture", "tensorflow.Variable", "tensorflow.train.MomentumOptimizer", "train_val.SolverWrapper.optimizer.compute_gradients", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "train_val.SolverWrapper.optimizer.apply_gradients", "train_val.SolverWrapper.optimizer.apply_gradients", "tensorflow.variable_scope", "final_gvs.append", "numpy.allclose", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.create_architecture"], ["", "", "", "def", "construct_graph", "(", "self", ",", "sess", ")", ":", "\n", "    ", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "# Set the random seed for tensorflow", "\n", "      ", "tf", ".", "set_random_seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "# Build the main computation graph", "\n", "layers", "=", "self", ".", "net", ".", "create_architecture", "(", "'TRAIN'", ",", "self", ".", "imdb", ".", "num_classes", ",", "tag", "=", "'default'", ",", "\n", "anchor_scales", "=", "cfg", ".", "ANCHOR_SCALES", ",", "\n", "anchor_ratios", "=", "cfg", ".", "ANCHOR_RATIOS", ")", "\n", "# Define the loss", "\n", "loss", "=", "layers", "[", "'total_loss'", "]", "\n", "# Set learning rate and momentum", "\n", "lr", "=", "tf", ".", "Variable", "(", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", ",", "trainable", "=", "False", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "lr", ",", "cfg", ".", "TRAIN", ".", "MOMENTUM", ")", "\n", "\n", "# Compute the gradients with regard to the loss", "\n", "gvs", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "loss", ")", "\n", "# Double the gradient of the bias if set", "\n", "if", "cfg", ".", "TRAIN", ".", "DOUBLE_BIAS", ":", "\n", "        ", "final_gvs", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'Gradient_Mult'", ")", "as", "scope", ":", "\n", "          ", "for", "grad", ",", "var", "in", "gvs", ":", "\n", "            ", "scale", "=", "1.", "\n", "if", "cfg", ".", "TRAIN", ".", "DOUBLE_BIAS", "and", "'/biases:'", "in", "var", ".", "name", ":", "\n", "              ", "scale", "*=", "2.", "\n", "", "if", "not", "np", ".", "allclose", "(", "scale", ",", "1.0", ")", ":", "\n", "              ", "grad", "=", "tf", ".", "multiply", "(", "grad", ",", "scale", ")", "\n", "", "final_gvs", ".", "append", "(", "(", "grad", ",", "var", ")", ")", "\n", "", "", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "final_gvs", ")", "\n", "", "else", ":", "\n", "        ", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "gvs", ")", "\n", "\n", "# We will handle the snapshots ourselves", "\n", "", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "100000", ")", "\n", "# Write the train and validation information to tensorboard", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "tbdir", ",", "sess", ".", "graph", ")", "\n", "self", ".", "valwriter", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "tbvaldir", ")", "\n", "\n", "", "return", "lr", ",", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.find_previous": [[155, 176], ["os.path.join", "glob.glob", "glob.glob.sort", "os.path.join", "glob.glob", "glob.glob.sort", "len", "redfiles.append", "ss.replace", "redfile.replace", "len", "os.path.join"], "methods", ["None"], ["", "def", "find_previous", "(", "self", ")", ":", "\n", "    ", "sfiles", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_PREFIX", "+", "'_iter_*.ckpt.meta'", ")", "\n", "sfiles", "=", "glob", ".", "glob", "(", "sfiles", ")", "\n", "sfiles", ".", "sort", "(", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "# Get the snapshot name in TensorFlow", "\n", "redfiles", "=", "[", "]", "\n", "for", "stepsize", "in", "cfg", ".", "TRAIN", ".", "STEPSIZE", ":", "\n", "      ", "redfiles", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "\n", "cfg", ".", "TRAIN", ".", "SNAPSHOT_PREFIX", "+", "'_iter_{:d}.ckpt.meta'", ".", "format", "(", "stepsize", "+", "1", ")", ")", ")", "\n", "", "sfiles", "=", "[", "ss", ".", "replace", "(", "'.meta'", ",", "''", ")", "for", "ss", "in", "sfiles", "if", "ss", "not", "in", "redfiles", "]", "\n", "\n", "nfiles", "=", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "cfg", ".", "TRAIN", ".", "SNAPSHOT_PREFIX", "+", "'_iter_*.pkl'", ")", "\n", "nfiles", "=", "glob", ".", "glob", "(", "nfiles", ")", "\n", "nfiles", ".", "sort", "(", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "redfiles", "=", "[", "redfile", ".", "replace", "(", "'.ckpt.meta'", ",", "'.pkl'", ")", "for", "redfile", "in", "redfiles", "]", "\n", "nfiles", "=", "[", "nn", "for", "nn", "in", "nfiles", "if", "nn", "not", "in", "redfiles", "]", "\n", "\n", "lsf", "=", "len", "(", "sfiles", ")", "\n", "assert", "len", "(", "nfiles", ")", "==", "lsf", "\n", "\n", "return", "lsf", ",", "nfiles", ",", "sfiles", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.initialize": [[177, 203], ["print", "tensorflow.global_variables", "sess.run", "train_val.SolverWrapper.get_variables_in_checkpoint_file", "train_val.SolverWrapper.net.get_variables_to_restore", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "print", "train_val.SolverWrapper.net.fix_variables", "print", "list", "tensorflow.variables_initializer"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.get_variables_in_checkpoint_file", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.get_variables_to_restore", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.fix_variables"], ["", "def", "initialize", "(", "self", ",", "sess", ")", ":", "\n", "# Initial file lists are empty", "\n", "    ", "np_paths", "=", "[", "]", "\n", "ss_paths", "=", "[", "]", "\n", "# Fresh train directly from ImageNet weights", "\n", "print", "(", "'Loading initial model weights from {:s}'", ".", "format", "(", "self", ".", "pretrained_model", ")", ")", "\n", "variables", "=", "tf", ".", "global_variables", "(", ")", "\n", "# Initialize all variables first", "\n", "sess", ".", "run", "(", "tf", ".", "variables_initializer", "(", "variables", ",", "name", "=", "'init'", ")", ")", "\n", "var_keep_dic", "=", "self", ".", "get_variables_in_checkpoint_file", "(", "self", ".", "pretrained_model", ")", "\n", "# Get the variables to restore, ignoring the variables to fix", "\n", "variables_to_restore", "=", "self", ".", "net", ".", "get_variables_to_restore", "(", "variables", ",", "var_keep_dic", ")", "\n", "\n", "restorer", "=", "tf", ".", "train", ".", "Saver", "(", "variables_to_restore", ")", "\n", "restorer", ".", "restore", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "print", "(", "'Loaded.'", ")", "\n", "# Need to fix the variables before loading, so that the RGB weights are changed to BGR", "\n", "# For VGG16 it also changes the convolutional weights fc6 and fc7 to", "\n", "# fully connected weights", "\n", "self", ".", "net", ".", "fix_variables", "(", "sess", ",", "self", ".", "pretrained_model", ")", "\n", "print", "(", "'Fixed.'", ")", "\n", "last_snapshot_iter", "=", "0", "\n", "rate", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", "\n", "stepsizes", "=", "list", "(", "cfg", ".", "TRAIN", ".", "STEPSIZE", ")", "\n", "\n", "return", "rate", ",", "last_snapshot_iter", ",", "stepsizes", ",", "np_paths", ",", "ss_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore": [[204, 220], ["train_val.SolverWrapper.from_snapshot", "stepsizes.append"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.from_snapshot"], ["", "def", "restore", "(", "self", ",", "sess", ",", "sfile", ",", "nfile", ")", ":", "\n", "# Get the most recent snapshot and restore", "\n", "    ", "np_paths", "=", "[", "nfile", "]", "\n", "ss_paths", "=", "[", "sfile", "]", "\n", "# Restore model from snapshots", "\n", "last_snapshot_iter", "=", "self", ".", "from_snapshot", "(", "sess", ",", "sfile", ",", "nfile", ")", "\n", "# Set the learning rate", "\n", "rate", "=", "cfg", ".", "TRAIN", ".", "LEARNING_RATE", "\n", "stepsizes", "=", "[", "]", "\n", "for", "stepsize", "in", "cfg", ".", "TRAIN", ".", "STEPSIZE", ":", "\n", "      ", "if", "last_snapshot_iter", ">", "stepsize", ":", "\n", "        ", "rate", "*=", "cfg", ".", "TRAIN", ".", "GAMMA", "\n", "", "else", ":", "\n", "        ", "stepsizes", ".", "append", "(", "stepsize", ")", "\n", "\n", "", "", "return", "rate", ",", "last_snapshot_iter", ",", "stepsizes", ",", "np_paths", ",", "ss_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.remove_snapshot": [[221, 241], ["range", "range", "len", "os.remove", "np_paths.remove", "len", "os.path.exists", "os.remove", "ss_paths.remove", "str", "str", "os.remove", "os.remove", "os.remove", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "remove_snapshot", "(", "self", ",", "np_paths", ",", "ss_paths", ")", ":", "\n", "    ", "to_remove", "=", "len", "(", "np_paths", ")", "-", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", "\n", "for", "c", "in", "range", "(", "to_remove", ")", ":", "\n", "      ", "nfile", "=", "np_paths", "[", "0", "]", "\n", "os", ".", "remove", "(", "str", "(", "nfile", ")", ")", "\n", "np_paths", ".", "remove", "(", "nfile", ")", "\n", "\n", "", "to_remove", "=", "len", "(", "ss_paths", ")", "-", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", "\n", "for", "c", "in", "range", "(", "to_remove", ")", ":", "\n", "      ", "sfile", "=", "ss_paths", "[", "0", "]", "\n", "# To make the code compatible to earlier versions of Tensorflow,", "\n", "# where the naming tradition for checkpoints are different", "\n", "if", "os", ".", "path", ".", "exists", "(", "str", "(", "sfile", ")", ")", ":", "\n", "        ", "os", ".", "remove", "(", "str", "(", "sfile", ")", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "remove", "(", "str", "(", "sfile", "+", "'.data-00000-of-00001'", ")", ")", "\n", "os", ".", "remove", "(", "str", "(", "sfile", "+", "'.index'", ")", ")", "\n", "", "sfile_meta", "=", "sfile", "+", "'.meta'", "\n", "os", ".", "remove", "(", "str", "(", "sfile_meta", ")", ")", "\n", "ss_paths", ".", "remove", "(", "sfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.train_model": [[242, 322], ["roi_data_layer.layer.RoIDataLayer", "roi_data_layer.layer.RoIDataLayer", "train_val.SolverWrapper.construct_graph", "train_val.SolverWrapper.find_previous", "utils.timer.Timer", "time.time", "stepsizes.append", "stepsizes.reverse", "stepsizes.pop", "train_val.SolverWrapper.writer.close", "train_val.SolverWrapper.valwriter.close", "train_val.SolverWrapper.initialize", "train_val.SolverWrapper.restore", "utils.timer.Timer.tic", "train_val.SolverWrapper.data_layer.forward", "time.time", "utils.timer.Timer.toc", "train_val.SolverWrapper.snapshot", "str", "str", "train_val.SolverWrapper.snapshot", "sess.run", "stepsizes.pop", "train_val.SolverWrapper.net.train_step_with_summary", "train_val.SolverWrapper.writer.add_summary", "train_val.SolverWrapper.data_layer_val.forward", "train_val.SolverWrapper.net.get_summary", "train_val.SolverWrapper.valwriter.add_summary", "train_val.SolverWrapper.net.train_step", "print", "print", "train_val.SolverWrapper.snapshot", "np_paths.append", "ss_paths.append", "tensorflow.assign", "float", "float", "len", "train_val.SolverWrapper.remove_snapshot", "lr.eval"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.construct_graph", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.find_previous", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.initialize", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore", "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer.forward", "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.snapshot", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.snapshot", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.train_step_with_summary", "home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.layer.RoIDataLayer.forward", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.get_summary", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.train_step", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.snapshot", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.remove_snapshot"], ["", "", "def", "train_model", "(", "self", ",", "sess", ",", "max_iters", ")", ":", "\n", "# Build data layers for both training and validation set", "\n", "    ", "self", ".", "data_layer", "=", "RoIDataLayer", "(", "self", ".", "roidb", ",", "self", ".", "imdb", ".", "num_classes", ")", "\n", "self", ".", "data_layer_val", "=", "RoIDataLayer", "(", "self", ".", "valroidb", ",", "self", ".", "imdb", ".", "num_classes", ",", "random", "=", "True", ")", "\n", "\n", "# Construct the computation graph", "\n", "lr", ",", "train_op", "=", "self", ".", "construct_graph", "(", "sess", ")", "\n", "\n", "# Find previous snapshots if there is any to restore from", "\n", "lsf", ",", "nfiles", ",", "sfiles", "=", "self", ".", "find_previous", "(", ")", "\n", "\n", "# Initialize the variables or restore them from the last snapshot", "\n", "if", "lsf", "==", "0", ":", "\n", "      ", "rate", ",", "last_snapshot_iter", ",", "stepsizes", ",", "np_paths", ",", "ss_paths", "=", "self", ".", "initialize", "(", "sess", ")", "\n", "", "else", ":", "\n", "      ", "rate", ",", "last_snapshot_iter", ",", "stepsizes", ",", "np_paths", ",", "ss_paths", "=", "self", ".", "restore", "(", "sess", ",", "\n", "str", "(", "sfiles", "[", "-", "1", "]", ")", ",", "\n", "str", "(", "nfiles", "[", "-", "1", "]", ")", ")", "\n", "", "timer", "=", "Timer", "(", ")", "\n", "iter", "=", "last_snapshot_iter", "+", "1", "\n", "last_summary_time", "=", "time", ".", "time", "(", ")", "\n", "# Make sure the lists are not empty", "\n", "stepsizes", ".", "append", "(", "max_iters", ")", "\n", "stepsizes", ".", "reverse", "(", ")", "\n", "next_stepsize", "=", "stepsizes", ".", "pop", "(", ")", "\n", "while", "iter", "<", "max_iters", "+", "1", ":", "\n", "# Learning rate", "\n", "      ", "if", "iter", "==", "next_stepsize", "+", "1", ":", "\n", "# Add snapshot here before reducing the learning rate", "\n", "        ", "self", ".", "snapshot", "(", "sess", ",", "iter", ")", "\n", "rate", "*=", "cfg", ".", "TRAIN", ".", "GAMMA", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "lr", ",", "rate", ")", ")", "\n", "next_stepsize", "=", "stepsizes", ".", "pop", "(", ")", "\n", "\n", "", "timer", ".", "tic", "(", ")", "\n", "# Get training data, one batch at a time", "\n", "blobs", "=", "self", ".", "data_layer", ".", "forward", "(", ")", "\n", "\n", "now", "=", "time", ".", "time", "(", ")", "\n", "if", "iter", "==", "1", "or", "now", "-", "last_summary_time", ">", "cfg", ".", "TRAIN", ".", "SUMMARY_INTERVAL", ":", "\n", "# Compute the graph with summary", "\n", "        ", "rpn_loss_cls", ",", "rpn_loss_box", ",", "loss_cls", ",", "loss_box", ",", "total_loss", ",", "summary", "=", "self", ".", "net", ".", "train_step_with_summary", "(", "sess", ",", "blobs", ",", "train_op", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "float", "(", "iter", ")", ")", "\n", "# Also check the summary on the validation set", "\n", "blobs_val", "=", "self", ".", "data_layer_val", ".", "forward", "(", ")", "\n", "summary_val", "=", "self", ".", "net", ".", "get_summary", "(", "sess", ",", "blobs_val", ")", "\n", "self", ".", "valwriter", ".", "add_summary", "(", "summary_val", ",", "float", "(", "iter", ")", ")", "\n", "last_summary_time", "=", "now", "\n", "", "else", ":", "\n", "# Compute the graph without summary", "\n", "        ", "rpn_loss_cls", ",", "rpn_loss_box", ",", "loss_cls", ",", "loss_box", ",", "total_loss", "=", "self", ".", "net", ".", "train_step", "(", "sess", ",", "blobs", ",", "train_op", ")", "\n", "", "timer", ".", "toc", "(", ")", "\n", "\n", "# Display training information", "\n", "if", "iter", "%", "(", "cfg", ".", "TRAIN", ".", "DISPLAY", ")", "==", "0", ":", "\n", "        ", "print", "(", "'iter: %d / %d, total loss: %.6f\\n >>> rpn_loss_cls: %.6f\\n '", "\n", "'>>> rpn_loss_box: %.6f\\n >>> loss_cls: %.6f\\n >>> loss_box: %.6f\\n >>> lr: %f'", "%", "(", "iter", ",", "max_iters", ",", "total_loss", ",", "rpn_loss_cls", ",", "rpn_loss_box", ",", "loss_cls", ",", "loss_box", ",", "lr", ".", "eval", "(", ")", ")", ")", "\n", "print", "(", "'speed: {:.3f}s / iter'", ".", "format", "(", "timer", ".", "average_time", ")", ")", "\n", "\n", "# Snapshotting", "\n", "", "if", "iter", "%", "cfg", ".", "TRAIN", ".", "SNAPSHOT_ITERS", "==", "0", ":", "\n", "        ", "last_snapshot_iter", "=", "iter", "\n", "ss_path", ",", "np_path", "=", "self", ".", "snapshot", "(", "sess", ",", "iter", ")", "\n", "np_paths", ".", "append", "(", "np_path", ")", "\n", "ss_paths", ".", "append", "(", "ss_path", ")", "\n", "\n", "# Remove the old snapshots if there are too many", "\n", "if", "len", "(", "np_paths", ")", ">", "cfg", ".", "TRAIN", ".", "SNAPSHOT_KEPT", ":", "\n", "          ", "self", ".", "remove_snapshot", "(", "np_paths", ",", "ss_paths", ")", "\n", "\n", "", "", "iter", "+=", "1", "\n", "\n", "", "if", "last_snapshot_iter", "!=", "iter", "-", "1", ":", "\n", "      ", "self", ".", "snapshot", "(", "sess", ",", "iter", "-", "1", ")", "\n", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "self", ".", "valwriter", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.get_training_roidb": [[324, 336], ["print", "roi_data_layer.roidb.prepare_roidb", "print", "print", "imdb.append_flipped_images", "print"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.roi_data_layer.roidb.prepare_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.append_flipped_images"], ["", "", "def", "get_training_roidb", "(", "imdb", ")", ":", "\n", "  ", "\"\"\"Returns a roidb (Region of Interest database) for use in training.\"\"\"", "\n", "if", "cfg", ".", "TRAIN", ".", "USE_FLIPPED", ":", "\n", "    ", "print", "(", "'Appending horizontally-flipped training examples...'", ")", "\n", "imdb", ".", "append_flipped_images", "(", ")", "\n", "print", "(", "'done'", ")", "\n", "\n", "", "print", "(", "'Preparing training data...'", ")", "\n", "rdl_roidb", ".", "prepare_roidb", "(", "imdb", ")", "\n", "print", "(", "'done'", ")", "\n", "\n", "return", "imdb", ".", "roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.filter_roidb": [[338, 361], ["len", "len", "print", "numpy.where", "numpy.where", "train_val.filter_roidb.is_valid", "roi_data_layer.roidb"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.imdb.imdb.roidb"], ["", "def", "filter_roidb", "(", "roidb", ")", ":", "\n", "  ", "\"\"\"Remove roidb entries that have no usable RoIs.\"\"\"", "\n", "\n", "def", "is_valid", "(", "entry", ")", ":", "\n", "# Valid images have:", "\n", "#   (1) At least one foreground RoI OR", "\n", "#   (2) At least one background RoI", "\n", "    ", "overlaps", "=", "entry", "[", "'max_overlaps'", "]", "\n", "# find boxes with sufficient overlap", "\n", "fg_inds", "=", "np", ".", "where", "(", "overlaps", ">=", "cfg", ".", "TRAIN", ".", "FG_THRESH", ")", "[", "0", "]", "\n", "# Select background RoIs as those within [BG_THRESH_LO, BG_THRESH_HI)", "\n", "bg_inds", "=", "np", ".", "where", "(", "(", "overlaps", "<", "cfg", ".", "TRAIN", ".", "BG_THRESH_HI", ")", "&", "\n", "(", "overlaps", ">=", "cfg", ".", "TRAIN", ".", "BG_THRESH_LO", ")", ")", "[", "0", "]", "\n", "# image is only valid if such boxes exist", "\n", "valid", "=", "len", "(", "fg_inds", ")", ">", "0", "or", "len", "(", "bg_inds", ")", ">", "0", "\n", "return", "valid", "\n", "\n", "", "num", "=", "len", "(", "roidb", ")", "\n", "filtered_roidb", "=", "[", "entry", "for", "entry", "in", "roidb", "if", "is_valid", "(", "entry", ")", "]", "\n", "num_after", "=", "len", "(", "filtered_roidb", ")", "\n", "print", "(", "'Filtered {} roidb entries: {} -> {}'", ".", "format", "(", "num", "-", "num_after", ",", "\n", "num", ",", "num_after", ")", ")", "\n", "return", "filtered_roidb", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.train_net": [[363, 379], ["train_val.filter_roidb", "train_val.filter_roidb", "tensorflow.ConfigProto", "tensorflow.Session", "train_val.SolverWrapper", "print", "train_val.SolverWrapper.train_model", "print"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.filter_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.filter_roidb", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.train_model"], ["", "def", "train_net", "(", "network", ",", "imdb", ",", "roidb", ",", "valroidb", ",", "output_dir", ",", "tb_dir", ",", "\n", "pretrained_model", "=", "None", ",", "\n", "max_iters", "=", "40000", ")", ":", "\n", "  ", "\"\"\"Train a Faster R-CNN network.\"\"\"", "\n", "roidb", "=", "filter_roidb", "(", "roidb", ")", "\n", "valroidb", "=", "filter_roidb", "(", "valroidb", ")", "\n", "\n", "tfconfig", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "tfconfig", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "tfconfig", ")", "as", "sess", ":", "\n", "    ", "sw", "=", "SolverWrapper", "(", "sess", ",", "network", ",", "imdb", ",", "roidb", ",", "valroidb", ",", "output_dir", ",", "tb_dir", ",", "\n", "pretrained_model", "=", "pretrained_model", ")", "\n", "print", "(", "'Solving...'", ")", "\n", "sw", ".", "train_model", "(", "sess", ",", "max_iters", ")", "\n", "print", "(", "'done solving'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.config.get_output_dir": [[288, 302], ["os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "get_output_dir", "(", "imdb", ",", "weights_filename", ")", ":", "\n", "  ", "\"\"\"Return the directory where experimental artifacts are placed.\n  If the directory does not exist, it is created.\n\n  A canonical path is built using the name from an imdb and a network\n  (if not None).\n  \"\"\"", "\n", "outdir", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "__C", ".", "ROOT_DIR", ",", "'output'", ",", "__C", ".", "EXP_DIR", ",", "imdb", ".", "name", ")", ")", "\n", "if", "weights_filename", "is", "None", ":", "\n", "    ", "weights_filename", "=", "'default'", "\n", "", "outdir", "=", "osp", ".", "join", "(", "outdir", ",", "weights_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.config.get_output_tb_dir": [[304, 318], ["os.abspath", "os.join", "os.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "get_output_tb_dir", "(", "imdb", ",", "weights_filename", ")", ":", "\n", "  ", "\"\"\"Return the directory where tensorflow summaries are placed.\n  If the directory does not exist, it is created.\n\n  A canonical path is built using the name from an imdb and a network\n  (if not None).\n  \"\"\"", "\n", "outdir", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "__C", ".", "ROOT_DIR", ",", "'tensorboard'", ",", "__C", ".", "EXP_DIR", ",", "imdb", ".", "name", ")", ")", "\n", "if", "weights_filename", "is", "None", ":", "\n", "    ", "weights_filename", "=", "'default'", "\n", "", "outdir", "=", "osp", ".", "join", "(", "outdir", ",", "weights_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.config._merge_a_into_b": [[320, 351], ["a.items", "type", "type", "KeyError", "type", "isinstance", "type", "numpy.array", "ValueError", "config._merge_a_into_b", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.config._merge_a_into_b"], ["", "def", "_merge_a_into_b", "(", "a", ",", "b", ")", ":", "\n", "  ", "\"\"\"Merge config dictionary a into config dictionary b, clobbering the\n  options in b whenever they are also specified in a.\n  \"\"\"", "\n", "if", "type", "(", "a", ")", "is", "not", "edict", ":", "\n", "    ", "return", "\n", "\n", "", "for", "k", ",", "v", "in", "a", ".", "items", "(", ")", ":", "\n", "# a must specify keys that are in b", "\n", "    ", "if", "k", "not", "in", "b", ":", "\n", "      ", "raise", "KeyError", "(", "'{} is not a valid config key'", ".", "format", "(", "k", ")", ")", "\n", "\n", "# the types must match, too", "\n", "", "old_type", "=", "type", "(", "b", "[", "k", "]", ")", "\n", "if", "old_type", "is", "not", "type", "(", "v", ")", ":", "\n", "      ", "if", "isinstance", "(", "b", "[", "k", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "v", "=", "np", ".", "array", "(", "v", ",", "dtype", "=", "b", "[", "k", "]", ".", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "(", "'Type mismatch ({} vs. {}) '", "\n", "'for config key: {}'", ")", ".", "format", "(", "type", "(", "b", "[", "k", "]", ")", ",", "\n", "type", "(", "v", ")", ",", "k", ")", ")", "\n", "\n", "# recursively merge dicts", "\n", "", "", "if", "type", "(", "v", ")", "is", "edict", ":", "\n", "      ", "try", ":", "\n", "        ", "_merge_a_into_b", "(", "a", "[", "k", "]", ",", "b", "[", "k", "]", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "(", "'Error under config key: {}'", ".", "format", "(", "k", ")", ")", ")", "\n", "raise", "\n", "", "", "else", ":", "\n", "      ", "b", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.config.cfg_from_file": [[353, 360], ["config._merge_a_into_b", "open", "easydict.EasyDict", "yaml.load"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.config._merge_a_into_b"], ["", "", "", "def", "cfg_from_file", "(", "filename", ")", ":", "\n", "  ", "\"\"\"Load a config file and merge it into the default options.\"\"\"", "\n", "import", "yaml", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "yaml_cfg", "=", "edict", "(", "yaml", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "_merge_a_into_b", "(", "yaml_cfg", ",", "__C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.config.cfg_from_list": [[362, 383], ["zip", "k.split", "len", "literal_eval", "type", "type", "type", "type"], "function", ["None"], ["", "def", "cfg_from_list", "(", "cfg_list", ")", ":", "\n", "  ", "\"\"\"Set config keys via list (e.g., from command line).\"\"\"", "\n", "from", "ast", "import", "literal_eval", "\n", "assert", "len", "(", "cfg_list", ")", "%", "2", "==", "0", "\n", "for", "k", ",", "v", "in", "zip", "(", "cfg_list", "[", "0", ":", ":", "2", "]", ",", "cfg_list", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "    ", "key_list", "=", "k", ".", "split", "(", "'.'", ")", "\n", "d", "=", "__C", "\n", "for", "subkey", "in", "key_list", "[", ":", "-", "1", "]", ":", "\n", "      ", "assert", "subkey", "in", "d", "\n", "d", "=", "d", "[", "subkey", "]", "\n", "", "subkey", "=", "key_list", "[", "-", "1", "]", "\n", "assert", "subkey", "in", "d", "\n", "try", ":", "\n", "      ", "value", "=", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "# handle the case when v is a string literal", "\n", "      ", "value", "=", "v", "\n", "", "assert", "type", "(", "value", ")", "==", "type", "(", "d", "[", "subkey", "]", ")", ",", "'type {} does not match original type {}'", ".", "format", "(", "\n", "type", "(", "value", ")", ",", "type", "(", "d", "[", "subkey", "]", ")", ")", "\n", "d", "[", "subkey", "]", "=", "value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.bbox_transform": [[13, 32], ["numpy.log", "numpy.log", "numpy.vstack().transpose", "numpy.vstack"], "function", ["None"], ["def", "bbox_transform", "(", "ex_rois", ",", "gt_rois", ")", ":", "\n", "  ", "ex_widths", "=", "ex_rois", "[", ":", ",", "2", "]", "-", "ex_rois", "[", ":", ",", "0", "]", "+", "1.0", "\n", "ex_heights", "=", "ex_rois", "[", ":", ",", "3", "]", "-", "ex_rois", "[", ":", ",", "1", "]", "+", "1.0", "\n", "ex_ctr_x", "=", "ex_rois", "[", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "ex_rois", "[", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "gt_rois", "[", ":", ",", "2", "]", "-", "gt_rois", "[", ":", ",", "0", "]", "+", "1.0", "\n", "gt_heights", "=", "gt_rois", "[", ":", ",", "3", "]", "-", "gt_rois", "[", ":", ",", "1", "]", "+", "1.0", "\n", "gt_ctr_x", "=", "gt_rois", "[", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "gt_rois", "[", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "targets_dx", "=", "(", "gt_ctr_x", "-", "ex_ctr_x", ")", "/", "ex_widths", "\n", "targets_dy", "=", "(", "gt_ctr_y", "-", "ex_ctr_y", ")", "/", "ex_heights", "\n", "targets_dw", "=", "np", ".", "log", "(", "gt_widths", "/", "ex_widths", ")", "\n", "targets_dh", "=", "np", ".", "log", "(", "gt_heights", "/", "ex_heights", ")", "\n", "\n", "targets", "=", "np", ".", "vstack", "(", "\n", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "targets_dh", ")", ")", ".", "transpose", "(", ")", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.bbox_transform_inv": [[34, 70], ["boxes.astype.astype", "numpy.zeros", "numpy.zeros", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "def", "bbox_transform_inv", "(", "boxes", ",", "deltas", ")", ":", "\n", "  ", "\"\"\"\n    Convertion of the boxes predicted at the RPN level to regions for the final image\n    boxes = coordinate of the center of the sliding windows\n    deltas = 4k coordinates for the k possible anchor boxes\n  \"\"\"", "\n", "if", "boxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "    ", "return", "np", ".", "zeros", "(", "(", "0", ",", "deltas", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "deltas", ".", "dtype", ")", "\n", "\n", "", "boxes", "=", "boxes", ".", "astype", "(", "deltas", ".", "dtype", ",", "copy", "=", "False", ")", "\n", "widths", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.0", "\n", "heights", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.0", "\n", "ctr_x", "=", "boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "widths", "\n", "ctr_y", "=", "boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "heights", "\n", "\n", "dx", "=", "deltas", "[", ":", ",", "0", ":", ":", "4", "]", "\n", "dy", "=", "deltas", "[", ":", ",", "1", ":", ":", "4", "]", "\n", "dw", "=", "deltas", "[", ":", ",", "2", ":", ":", "4", "]", "\n", "dh", "=", "deltas", "[", ":", ",", "3", ":", ":", "4", "]", "\n", "\n", "pred_ctr_x", "=", "dx", "*", "widths", "[", ":", ",", "np", ".", "newaxis", "]", "+", "ctr_x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pred_ctr_y", "=", "dy", "*", "heights", "[", ":", ",", "np", ".", "newaxis", "]", "+", "ctr_y", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pred_w", "=", "np", ".", "exp", "(", "dw", ")", "*", "widths", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "pred_h", "=", "np", ".", "exp", "(", "dh", ")", "*", "heights", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "pred_boxes", "=", "np", ".", "zeros", "(", "deltas", ".", "shape", ",", "dtype", "=", "deltas", ".", "dtype", ")", "\n", "# x1", "\n", "pred_boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "pred_ctr_x", "-", "0.5", "*", "pred_w", "\n", "# y1", "\n", "pred_boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "pred_ctr_y", "-", "0.5", "*", "pred_h", "\n", "# x2", "\n", "pred_boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "pred_ctr_x", "+", "0.5", "*", "pred_w", "\n", "# y2", "\n", "pred_boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "pred_ctr_y", "+", "0.5", "*", "pred_h", "\n", "\n", "return", "pred_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.clip_boxes": [[72, 86], ["numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.minimum"], "function", ["None"], ["", "def", "clip_boxes", "(", "boxes", ",", "im_shape", ")", ":", "\n", "  ", "\"\"\"\n  Clip boxes to image boundaries.\n  \"\"\"", "\n", "\n", "# x1 >= 0", "\n", "boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "0", ":", ":", "4", "]", ",", "im_shape", "[", "1", "]", "-", "1", ")", ",", "0", ")", "\n", "# y1 >= 0", "\n", "boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "1", ":", ":", "4", "]", ",", "im_shape", "[", "0", "]", "-", "1", ")", ",", "0", ")", "\n", "# x2 < im_shape[1]", "\n", "boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "2", ":", ":", "4", "]", ",", "im_shape", "[", "1", "]", "-", "1", ")", ",", "0", ")", "\n", "# y2 < im_shape[0]", "\n", "boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "3", ":", ":", "4", "]", ",", "im_shape", "[", "0", "]", "-", "1", ")", ",", "0", ")", "\n", "return", "boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test._get_image_blob": [[26, 59], ["cv2.resize.astype", "numpy.min", "numpy.max", "utils.blob.im_list_to_blob", "cv2.resize", "im_scale_factors.append", "processed_ims.append", "numpy.array", "float", "float", "numpy.round", "float", "float"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.blob.im_list_to_blob"], ["def", "_get_image_blob", "(", "im", ")", ":", "\n", "  ", "\"\"\"Converts an image into a network input.\n  Arguments:\n    im (ndarray): a color image in BGR order\n  Returns:\n    blob (ndarray): a data blob holding an image pyramid\n    im_scale_factors (list): list of image scales (relative to im) used\n      in the image pyramid\n  \"\"\"", "\n", "im_orig", "=", "im", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "True", ")", "\n", "im_orig", "-=", "cfg", ".", "PIXEL_MEANS", "\n", "\n", "im_shape", "=", "im_orig", ".", "shape", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "max", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "\n", "processed_ims", "=", "[", "]", "\n", "im_scale_factors", "=", "[", "]", "\n", "\n", "for", "target_size", "in", "cfg", ".", "TEST", ".", "SCALES", ":", "\n", "    ", "im_scale", "=", "float", "(", "target_size", ")", "/", "float", "(", "im_size_min", ")", "\n", "# Prevent the biggest axis from being more than MAX_SIZE", "\n", "if", "np", ".", "round", "(", "im_scale", "*", "im_size_max", ")", ">", "cfg", ".", "TEST", ".", "MAX_SIZE", ":", "\n", "      ", "im_scale", "=", "float", "(", "cfg", ".", "TEST", ".", "MAX_SIZE", ")", "/", "float", "(", "im_size_max", ")", "\n", "", "im", "=", "cv2", ".", "resize", "(", "im_orig", ",", "None", ",", "None", ",", "fx", "=", "im_scale", ",", "fy", "=", "im_scale", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "im_scale_factors", ".", "append", "(", "im_scale", ")", "\n", "processed_ims", ".", "append", "(", "im", ")", "\n", "\n", "# Create a blob to hold the input images", "\n", "", "blob", "=", "im_list_to_blob", "(", "processed_ims", ")", "\n", "\n", "return", "blob", ",", "np", ".", "array", "(", "im_scale_factors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.get_blobs": [[60, 66], ["test._get_image_blob"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test._get_image_blob"], ["", "def", "get_blobs", "(", "im", ")", ":", "\n", "  ", "\"\"\"Convert an image and RoIs within that image into network inputs.\"\"\"", "\n", "blobs", "=", "{", "}", "\n", "blobs", "[", "'data'", "]", ",", "im_scale_factors", "=", "_get_image_blob", "(", "im", ")", "\n", "\n", "return", "blobs", ",", "im_scale_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test._get_blobs": [[67, 73], ["test._get_image_blob"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test._get_image_blob"], ["", "def", "_get_blobs", "(", "im", ")", ":", "\n", "  ", "\"\"\"Convert an image and RoIs within that image into network inputs.\"\"\"", "\n", "blobs", "=", "{", "}", "\n", "blobs", "[", "'data'", "]", ",", "im_scale_factors", "=", "_get_image_blob", "(", "im", ")", "\n", "\n", "return", "blobs", ",", "im_scale_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test._clip_boxes": [[74, 85], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum"], "function", ["None"], ["", "def", "_clip_boxes", "(", "boxes", ",", "im_shape", ")", ":", "\n", "  ", "\"\"\"Clip boxes to image boundaries.\"\"\"", "\n", "# x1 >= 0", "\n", "boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "0", ":", ":", "4", "]", ",", "0", ")", "\n", "# y1 >= 0", "\n", "boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "np", ".", "maximum", "(", "boxes", "[", ":", ",", "1", ":", ":", "4", "]", ",", "0", ")", "\n", "# x2 < im_shape[1]", "\n", "boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "2", ":", ":", "4", "]", ",", "im_shape", "[", "1", "]", "-", "1", ")", "\n", "# y2 < im_shape[0]", "\n", "boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "np", ".", "minimum", "(", "boxes", "[", ":", ",", "3", ":", ":", "4", "]", ",", "im_shape", "[", "0", "]", "-", "1", ")", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test._rescale_boxes": [[86, 92], ["range", "int"], "function", ["None"], ["", "def", "_rescale_boxes", "(", "boxes", ",", "inds", ",", "scales", ")", ":", "\n", "  ", "\"\"\"Rescale boxes according to image rescaling.\"\"\"", "\n", "for", "i", "in", "range", "(", "boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "boxes", "[", "i", ",", ":", "]", "=", "boxes", "[", "i", ",", ":", "]", "/", "scales", "[", "int", "(", "inds", "[", "i", "]", ")", "]", "\n", "\n", "", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.im_detect": [[93, 140], ["test._get_blobs", "numpy.array", "net.test_image", "numpy.reshape", "numpy.reshape", "len", "model.bbox_transform.bbox_transform_inv", "test._clip_boxes", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test._get_blobs", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.test_image", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.bbox_transform_inv", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test._clip_boxes"], ["", "def", "im_detect", "(", "sess", ",", "net", ",", "im", ",", "max_per_image", "=", "100", ")", ":", "\n", "  ", "\"\"\"\n    Doc come from https://github.com/rbgirshick/py-faster-rcnn/blob/master/tools/demo.py\n    Detect all object classes and regress object bounds\n    Arguments:\n        net : Fast R-CNN network to use\n        im (ndarray): color image to test (in BGR order ????)\n        boxes (ndarray): R x 4 array of object proposals or None (for RPN) \n    Returns:\n        scores (ndarray): R x K array of object class scores (K includes\n            background as object category 0)\n        boxes (ndarray): R x (4*K) array of predicted bounding boxes\n  \"\"\"", "\n", "\n", "blobs", ",", "im_scales", "=", "_get_blobs", "(", "im", ")", "\n", "#  print(im_scales.shape)", "\n", "assert", "len", "(", "im_scales", ")", "==", "1", ",", "\"Only single-image batch implemented\"", "\n", "\n", "im_blob", "=", "blobs", "[", "'data'", "]", "# Images with smaller dim equal to 600 pixels", "\n", "# All the images are rescaled to 600 max dimension ", "\n", "#  print(im_blob.shape)", "\n", "blobs", "[", "'im_info'", "]", "=", "np", ".", "array", "(", "[", "im_blob", ".", "shape", "[", "1", "]", ",", "im_blob", ".", "shape", "[", "2", "]", ",", "im_scales", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "#  print(blobs['im_info'] )", "\n", "_", ",", "scores", ",", "bbox_pred", ",", "rois", "=", "net", ".", "test_image", "(", "sess", ",", "blobs", "[", "'data'", "]", ",", "blobs", "[", "'im_info'", "]", ")", "\n", "# Info on the 300 region proposal selected : cls_score, cls_prob, bbox_pred, rois", "\n", "# a  box-regression  layer  (reg)  and  a box-classification  layer  (cls)", "\n", "# reg layer has 4k outputs encoding the  coordinates  of k boxes,  and  the cls layer  outputs 2k scores  that  estimate  probability  of  object  or  not object for each proposal", "\n", "# Shapes (300, 81) (300, 81) (300, 324) (300, 5) ", "\n", "# cls_prob = self._softmax_layer(cls_score)", "\n", "# 81 because 80 classe for COCO + background", "\n", "# 324 : bbox_pred = slim.fully_connected(fc7, self._num_classes * 4 pour COCO _num_classes = 81", "\n", "# rois, roi_scores = self._proposal_layer(rpn_cls_prob, rpn_bbox_pred , rios provide after nms or top selection ", "\n", "# 5 for the ", "\n", "\n", "boxes", "=", "rois", "[", ":", ",", "1", ":", "5", "]", "/", "im_scales", "[", "0", "]", "\n", "scores", "=", "np", ".", "reshape", "(", "scores", ",", "[", "scores", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", "\n", "bbox_pred", "=", "np", ".", "reshape", "(", "bbox_pred", ",", "[", "bbox_pred", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", "\n", "if", "cfg", ".", "TEST", ".", "BBOX_REG", "and", "False", ":", "\n", "# Apply bounding-box regression deltas", "\n", "    ", "box_deltas", "=", "bbox_pred", "\n", "pred_boxes", "=", "bbox_transform_inv", "(", "boxes", ",", "box_deltas", ")", "\n", "pred_boxes", "=", "_clip_boxes", "(", "pred_boxes", ",", "im", ".", "shape", ")", "\n", "", "else", ":", "\n", "# Simply repeat the boxes, once for each class", "\n", "    ", "pred_boxes", "=", "np", ".", "tile", "(", "boxes", ",", "(", "1", ",", "scores", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "return", "scores", ",", "pred_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.TL_im_detect": [[141, 167], ["test._get_blobs", "numpy.array", "net.TL_image", "len"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test._get_blobs", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.TL_image"], ["", "def", "TL_im_detect", "(", "sess", ",", "net", ",", "im", ",", "max_per_image", "=", "100", ")", ":", "\n", "  ", "\"\"\"\n    Doc come from https://github.com/rbgirshick/py-faster-rcnn/blob/master/tools/demo.py\n    Detect all object classes and regress object bounds\n    Arguments:\n        net : Fast R-CNN network to use\n        im (ndarray): color image to test (in BGR order ????)\n        boxes (ndarray): R x 4 array of object proposals or None (for RPN) \n    Returns:\n        scores (ndarray): R x K array of object class scores (K includes\n            background as object category 0)\n        boxes (ndarray): R x (4*K) array of predicted bounding boxes\n  \"\"\"", "\n", "\n", "blobs", ",", "im_scales", "=", "_get_blobs", "(", "im", ")", "\n", "assert", "len", "(", "im_scales", ")", "==", "1", ",", "\"Only single-image batch implemented\"", "\n", "# All the images are rescaled to 600 max dimension ", "\n", "im_blob", "=", "blobs", "[", "'data'", "]", "# Images with smaller dim equal to 600 pixels", "\n", "blobs", "[", "'im_info'", "]", "=", "np", ".", "array", "(", "[", "im_blob", ".", "shape", "[", "1", "]", ",", "im_blob", ".", "shape", "[", "2", "]", ",", "im_scales", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "#  print(im_scales.shape)", "\n", "#  print(blobs['im_info'].shape)", "\n", "#  print(blobs['data'].shape)", "\n", "output", "=", "net", ".", "TL_image", "(", "sess", ",", "blobs", "[", "'data'", "]", ",", "blobs", "[", "'im_info'", "]", ")", "\n", "# cls_score, cls_prob, bbox_pred, rois,roi_scores, fc7,pool5 if fc7", "\n", "# cls_score, cls_prob, bbox_pred, rois,roi_scores, fc6, fc7, pool5 if get_fc6", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.TL_im_detect_end": [[168, 187], ["test._get_blobs", "numpy.reshape", "numpy.reshape", "len", "model.bbox_transform.bbox_transform_inv", "test._clip_boxes", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test._get_blobs", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.bbox_transform_inv", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test._clip_boxes"], ["", "def", "TL_im_detect_end", "(", "scores", ",", "bbox_pred", ",", "rois", ",", "im", ")", ":", "\n", "  ", "\"\"\"\n   To get the box\n   Need to provide cls_prob, bbox_pred, rois provide by the function TL_im_detect\n  \"\"\"", "\n", "blobs", ",", "im_scales", "=", "_get_blobs", "(", "im", ")", "\n", "assert", "len", "(", "im_scales", ")", "==", "1", ",", "\"Only single-image batch implemented\"", "\n", "boxes", "=", "rois", "[", ":", ",", "1", ":", "5", "]", "/", "im_scales", "[", "0", "]", "\n", "scores", "=", "np", ".", "reshape", "(", "scores", ",", "[", "scores", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", "\n", "bbox_pred", "=", "np", ".", "reshape", "(", "bbox_pred", ",", "[", "bbox_pred", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", "\n", "if", "cfg", ".", "TEST", ".", "BBOX_REG", ":", "\n", "# Apply bounding-box regression deltas", "\n", "    ", "box_deltas", "=", "bbox_pred", "\n", "pred_boxes", "=", "bbox_transform_inv", "(", "boxes", ",", "box_deltas", ")", "\n", "pred_boxes", "=", "_clip_boxes", "(", "pred_boxes", ",", "im", ".", "shape", ")", "\n", "", "else", ":", "\n", "# Simply repeat the boxes, once for each class", "\n", "    ", "pred_boxes", "=", "np", ".", "tile", "(", "boxes", ",", "(", "1", ",", "scores", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "return", "scores", ",", "pred_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.apply_nms": [[188, 216], ["len", "len", "range", "range", "range", "model.nms_wrapper.nms", "dets[].copy", "range", "numpy.where", "len"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.nms_wrapper.nms"], ["", "def", "apply_nms", "(", "all_boxes", ",", "thresh", ")", ":", "\n", "  ", "\"\"\"Apply non-maximum suppression to all predicted boxes output by the\n  test_net method.\n  \"\"\"", "\n", "num_classes", "=", "len", "(", "all_boxes", ")", "\n", "num_images", "=", "len", "(", "all_boxes", "[", "0", "]", ")", "\n", "nms_boxes", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "cls_ind", "in", "range", "(", "num_classes", ")", ":", "\n", "    ", "for", "im_ind", "in", "range", "(", "num_images", ")", ":", "\n", "      ", "dets", "=", "all_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "        ", "continue", "\n", "\n", "", "x1", "=", "dets", "[", ":", ",", "0", "]", "\n", "y1", "=", "dets", "[", ":", ",", "1", "]", "\n", "x2", "=", "dets", "[", ":", ",", "2", "]", "\n", "y2", "=", "dets", "[", ":", ",", "3", "]", "\n", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "inds", "=", "np", ".", "where", "(", "(", "x2", ">", "x1", ")", "&", "(", "y2", ">", "y1", ")", ")", "[", "0", "]", "\n", "dets", "=", "dets", "[", "inds", ",", ":", "]", "\n", "if", "dets", "==", "[", "]", ":", "\n", "        ", "continue", "\n", "\n", "", "keep", "=", "nms", "(", "dets", ",", "thresh", ")", "\n", "if", "len", "(", "keep", ")", "==", "0", ":", "\n", "        ", "continue", "\n", "", "nms_boxes", "[", "cls_ind", "]", "[", "im_ind", "]", "=", "dets", "[", "keep", ",", ":", "]", ".", "copy", "(", ")", "\n", "", "", "return", "nms_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.test_net": [[217, 272], ["numpy.random.seed", "len", "model.config.get_output_dir", "range", "os.path.join", "print", "imdb.evaluate_detections", "utils.timer.Timer", "utils.timer.Timer", "cv2.imread", "_t[].tic", "test.im_detect", "_t[].toc", "_t[].tic", "range", "_t[].toc", "print", "open", "pickle.dump", "range", "imdb.image_path_at", "numpy.hstack().astype", "model.nms_wrapper.nms", "numpy.hstack", "range", "numpy.where", "len", "range", "numpy.hstack", "numpy.sort", "range", "numpy.where"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.config.get_output_dir", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.evaluate_detections", "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.test.im_detect", "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.nicaogr_Mi_max.datasets.pascal_voc.pascal_voc.image_path_at", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.nms_wrapper.nms"], ["", "def", "test_net", "(", "sess", ",", "net", ",", "imdb", ",", "weights_filename", ",", "max_per_image", "=", "100", ",", "thresh", "=", "0.", ")", ":", "\n", "  ", "np", ".", "random", ".", "seed", "(", "cfg", ".", "RNG_SEED", ")", "\n", "\"\"\"Test a Fast R-CNN network on an image database.\"\"\"", "\n", "num_images", "=", "len", "(", "imdb", ".", "image_index", ")", "\n", "# all detections are collected into:", "\n", "#  all_boxes[cls][image] = N x 5 array of detections in", "\n", "#  (x1, y1, x2, y2, score)", "\n", "all_boxes", "=", "[", "[", "[", "]", "for", "_", "in", "range", "(", "num_images", ")", "]", "\n", "for", "_", "in", "range", "(", "imdb", ".", "num_classes", ")", "]", "\n", "\n", "output_dir", "=", "get_output_dir", "(", "imdb", ",", "weights_filename", ")", "\n", "# timers", "\n", "_t", "=", "{", "'im_detect'", ":", "Timer", "(", ")", ",", "'misc'", ":", "Timer", "(", ")", "}", "\n", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "    ", "im", "=", "cv2", ".", "imread", "(", "imdb", ".", "image_path_at", "(", "i", ")", ")", "\n", "\n", "_t", "[", "'im_detect'", "]", ".", "tic", "(", ")", "\n", "scores", ",", "boxes", "=", "im_detect", "(", "sess", ",", "net", ",", "im", ")", "\n", "_t", "[", "'im_detect'", "]", ".", "toc", "(", ")", "\n", "\n", "_t", "[", "'misc'", "]", ".", "tic", "(", ")", "\n", "\n", "# skip j = 0, because it's the background class", "\n", "for", "j", "in", "range", "(", "1", ",", "imdb", ".", "num_classes", ")", ":", "\n", "      ", "inds", "=", "np", ".", "where", "(", "scores", "[", ":", ",", "j", "]", ">", "thresh", ")", "[", "0", "]", "\n", "cls_scores", "=", "scores", "[", "inds", ",", "j", "]", "\n", "cls_boxes", "=", "boxes", "[", "inds", ",", "j", "*", "4", ":", "(", "j", "+", "1", ")", "*", "4", "]", "\n", "cls_dets", "=", "np", ".", "hstack", "(", "(", "cls_boxes", ",", "cls_scores", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "keep", "=", "nms", "(", "cls_dets", ",", "cfg", ".", "TEST", ".", "NMS", ")", "\n", "cls_dets", "=", "cls_dets", "[", "keep", ",", ":", "]", "\n", "all_boxes", "[", "j", "]", "[", "i", "]", "=", "cls_dets", "\n", "\n", "# Limit to max_per_image detections *over all classes*", "\n", "", "if", "max_per_image", ">", "0", ":", "\n", "      ", "image_scores", "=", "np", ".", "hstack", "(", "[", "all_boxes", "[", "j", "]", "[", "i", "]", "[", ":", ",", "-", "1", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "imdb", ".", "num_classes", ")", "]", ")", "\n", "if", "len", "(", "image_scores", ")", ">", "max_per_image", ":", "\n", "        ", "image_thresh", "=", "np", ".", "sort", "(", "image_scores", ")", "[", "-", "max_per_image", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "imdb", ".", "num_classes", ")", ":", "\n", "          ", "keep", "=", "np", ".", "where", "(", "all_boxes", "[", "j", "]", "[", "i", "]", "[", ":", ",", "-", "1", "]", ">=", "image_thresh", ")", "[", "0", "]", "\n", "all_boxes", "[", "j", "]", "[", "i", "]", "=", "all_boxes", "[", "j", "]", "[", "i", "]", "[", "keep", ",", ":", "]", "\n", "", "", "", "_t", "[", "'misc'", "]", ".", "toc", "(", ")", "\n", "\n", "print", "(", "'im_detect: {:d}/{:d} {:.3f}s {:.3f}s'", ".", "format", "(", "i", "+", "1", ",", "num_images", ",", "_t", "[", "'im_detect'", "]", ".", "average_time", ",", "\n", "_t", "[", "'misc'", "]", ".", "average_time", ")", ")", "\n", "\n", "", "det_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'detections.pkl'", ")", "\n", "with", "open", "(", "det_file", ",", "'wb'", ")", "as", "f", ":", "\n", "    ", "pickle", ".", "dump", "(", "all_boxes", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "print", "(", "'Evaluating detections'", ")", "\n", "imdb", ".", "evaluate_detections", "(", "all_boxes", ",", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.nms_wrapper.nms": [[23, 32], ["gpu_nms", "cpu_nms"], "function", ["None"], ["", "def", "nms", "(", "dets", ",", "thresh", ",", "force_cpu", "=", "False", ")", ":", "\n", "  ", "\"\"\"Dispatch to either CPU or GPU NMS implementations.\"\"\"", "\n", "\n", "if", "dets", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "    ", "return", "[", "]", "\n", "", "if", "cfg", ".", "USE_GPU_NMS", "and", "not", "force_cpu", ":", "\n", "    ", "return", "gpu_nms", "(", "dets", ",", "thresh", ",", "device_id", "=", "0", ")", "\n", "", "else", ":", "\n", "    ", "return", "cpu_nms", "(", "dets", ",", "thresh", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.anchor_target_layer.anchor_target_layer": [[25, 146], ["numpy.empty", "labels.reshape.fill", "bbox_overlaps", "bbox_overlaps.argmax", "bbox_overlaps.argmax", "int", "numpy.zeros", "anchor_target_layer._compute_targets", "numpy.zeros", "numpy.array", "numpy.zeros", "anchor_target_layer._unmap", "anchor_target_layer._unmap", "anchor_target_layer._unmap", "anchor_target_layer._unmap", "labels.reshape.reshape().transpose", "labels.reshape.reshape", "bbox_targets.reshape.reshape", "bbox_inside_weights.reshape.reshape", "bbox_outside_weights.reshape.reshape", "numpy.where", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.where", "numpy.where", "len", "numpy.choice", "numpy.sum", "numpy.where", "len", "numpy.choice", "numpy.sum", "len", "len", "len", "len", "numpy.sum", "numpy.sum", "labels.reshape.reshape", "numpy.arange", "numpy.arange", "numpy.ones", "numpy.ones", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.bbox.bbox_overlaps", "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.proposal_target_layer._compute_targets", "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.anchor_target_layer._unmap", "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.anchor_target_layer._unmap", "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.anchor_target_layer._unmap", "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.anchor_target_layer._unmap"], ["def", "anchor_target_layer", "(", "rpn_cls_score", ",", "gt_boxes", ",", "im_info", ",", "_feat_stride", ",", "all_anchors", ",", "num_anchors", ")", ":", "\n", "  ", "\"\"\"Same as the anchor target layer in original Fast/er RCNN \"\"\"", "\n", "A", "=", "num_anchors", "\n", "total_anchors", "=", "all_anchors", ".", "shape", "[", "0", "]", "\n", "K", "=", "total_anchors", "/", "num_anchors", "\n", "\n", "# allow boxes to sit over the edge by a small amount", "\n", "_allowed_border", "=", "0", "\n", "\n", "# map of shape (..., H, W)", "\n", "height", ",", "width", "=", "rpn_cls_score", ".", "shape", "[", "1", ":", "3", "]", "\n", "\n", "# only keep anchors inside the image", "\n", "inds_inside", "=", "np", ".", "where", "(", "\n", "(", "all_anchors", "[", ":", ",", "0", "]", ">=", "-", "_allowed_border", ")", "&", "\n", "(", "all_anchors", "[", ":", ",", "1", "]", ">=", "-", "_allowed_border", ")", "&", "\n", "(", "all_anchors", "[", ":", ",", "2", "]", "<", "im_info", "[", "1", "]", "+", "_allowed_border", ")", "&", "# width", "\n", "(", "all_anchors", "[", ":", ",", "3", "]", "<", "im_info", "[", "0", "]", "+", "_allowed_border", ")", "# height", "\n", ")", "[", "0", "]", "\n", "\n", "# keep only inside anchors", "\n", "anchors", "=", "all_anchors", "[", "inds_inside", ",", ":", "]", "\n", "\n", "# label: 1 is positive, 0 is negative, -1 is dont care", "\n", "labels", "=", "np", ".", "empty", "(", "(", "len", "(", "inds_inside", ")", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", ".", "fill", "(", "-", "1", ")", "\n", "\n", "# overlaps between the anchors and the gt boxes", "\n", "# overlaps (ex, gt)", "\n", "overlaps", "=", "bbox_overlaps", "(", "\n", "np", ".", "ascontiguousarray", "(", "anchors", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "gt_boxes", ",", "dtype", "=", "np", ".", "float", ")", ")", "\n", "argmax_overlaps", "=", "overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "max_overlaps", "=", "overlaps", "[", "np", ".", "arange", "(", "len", "(", "inds_inside", ")", ")", ",", "argmax_overlaps", "]", "\n", "gt_argmax_overlaps", "=", "overlaps", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "gt_max_overlaps", "=", "overlaps", "[", "gt_argmax_overlaps", ",", "\n", "np", ".", "arange", "(", "overlaps", ".", "shape", "[", "1", "]", ")", "]", "\n", "gt_argmax_overlaps", "=", "np", ".", "where", "(", "overlaps", "==", "gt_max_overlaps", ")", "[", "0", "]", "\n", "\n", "if", "not", "cfg", ".", "TRAIN", ".", "RPN_CLOBBER_POSITIVES", ":", "\n", "# assign bg labels first so that positive labels can clobber them", "\n", "# first set the negatives", "\n", "    ", "labels", "[", "max_overlaps", "<", "cfg", ".", "TRAIN", ".", "RPN_NEGATIVE_OVERLAP", "]", "=", "0", "\n", "\n", "# fg label: for each gt, anchor with highest overlap", "\n", "", "labels", "[", "gt_argmax_overlaps", "]", "=", "1", "\n", "\n", "# fg label: above threshold IOU", "\n", "labels", "[", "max_overlaps", ">=", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_OVERLAP", "]", "=", "1", "\n", "\n", "if", "cfg", ".", "TRAIN", ".", "RPN_CLOBBER_POSITIVES", ":", "\n", "# assign bg labels last so that negative labels can clobber positives", "\n", "    ", "labels", "[", "max_overlaps", "<", "cfg", ".", "TRAIN", ".", "RPN_NEGATIVE_OVERLAP", "]", "=", "0", "\n", "\n", "# subsample positive labels if we have too many", "\n", "", "num_fg", "=", "int", "(", "cfg", ".", "TRAIN", ".", "RPN_FG_FRACTION", "*", "cfg", ".", "TRAIN", ".", "RPN_BATCHSIZE", ")", "\n", "fg_inds", "=", "np", ".", "where", "(", "labels", "==", "1", ")", "[", "0", "]", "\n", "if", "len", "(", "fg_inds", ")", ">", "num_fg", ":", "\n", "    ", "disable_inds", "=", "npr", ".", "choice", "(", "\n", "fg_inds", ",", "size", "=", "(", "len", "(", "fg_inds", ")", "-", "num_fg", ")", ",", "replace", "=", "False", ")", "\n", "labels", "[", "disable_inds", "]", "=", "-", "1", "\n", "\n", "# subsample negative labels if we have too many", "\n", "", "num_bg", "=", "cfg", ".", "TRAIN", ".", "RPN_BATCHSIZE", "-", "np", ".", "sum", "(", "labels", "==", "1", ")", "\n", "bg_inds", "=", "np", ".", "where", "(", "labels", "==", "0", ")", "[", "0", "]", "\n", "if", "len", "(", "bg_inds", ")", ">", "num_bg", ":", "\n", "    ", "disable_inds", "=", "npr", ".", "choice", "(", "\n", "bg_inds", ",", "size", "=", "(", "len", "(", "bg_inds", ")", "-", "num_bg", ")", ",", "replace", "=", "False", ")", "\n", "labels", "[", "disable_inds", "]", "=", "-", "1", "\n", "\n", "", "bbox_targets", "=", "np", ".", "zeros", "(", "(", "len", "(", "inds_inside", ")", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bbox_targets", "=", "_compute_targets", "(", "anchors", ",", "gt_boxes", "[", "argmax_overlaps", ",", ":", "]", ")", "\n", "\n", "bbox_inside_weights", "=", "np", ".", "zeros", "(", "(", "len", "(", "inds_inside", ")", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# only the positive ones have regression targets", "\n", "bbox_inside_weights", "[", "labels", "==", "1", ",", ":", "]", "=", "np", ".", "array", "(", "cfg", ".", "TRAIN", ".", "RPN_BBOX_INSIDE_WEIGHTS", ")", "\n", "\n", "bbox_outside_weights", "=", "np", ".", "zeros", "(", "(", "len", "(", "inds_inside", ")", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_WEIGHT", "<", "0", ":", "\n", "# uniform weighting of examples (given non-uniform sampling)", "\n", "    ", "num_examples", "=", "np", ".", "sum", "(", "labels", ">=", "0", ")", "\n", "positive_weights", "=", "np", ".", "ones", "(", "(", "1", ",", "4", ")", ")", "*", "1.0", "/", "num_examples", "\n", "negative_weights", "=", "np", ".", "ones", "(", "(", "1", ",", "4", ")", ")", "*", "1.0", "/", "num_examples", "\n", "", "else", ":", "\n", "    ", "assert", "(", "(", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_WEIGHT", ">", "0", ")", "&", "\n", "(", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_WEIGHT", "<", "1", ")", ")", "\n", "positive_weights", "=", "(", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_WEIGHT", "/", "\n", "np", ".", "sum", "(", "labels", "==", "1", ")", ")", "\n", "negative_weights", "=", "(", "(", "1.0", "-", "cfg", ".", "TRAIN", ".", "RPN_POSITIVE_WEIGHT", ")", "/", "\n", "np", ".", "sum", "(", "labels", "==", "0", ")", ")", "\n", "", "bbox_outside_weights", "[", "labels", "==", "1", ",", ":", "]", "=", "positive_weights", "\n", "bbox_outside_weights", "[", "labels", "==", "0", ",", ":", "]", "=", "negative_weights", "\n", "\n", "# map up to original set of anchors", "\n", "labels", "=", "_unmap", "(", "labels", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "-", "1", ")", "\n", "bbox_targets", "=", "_unmap", "(", "bbox_targets", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "0", ")", "\n", "bbox_inside_weights", "=", "_unmap", "(", "bbox_inside_weights", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "0", ")", "\n", "bbox_outside_weights", "=", "_unmap", "(", "bbox_outside_weights", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "0", ")", "\n", "\n", "# labels", "\n", "labels", "=", "labels", ".", "reshape", "(", "(", "1", ",", "height", ",", "width", ",", "A", ")", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "labels", "=", "labels", ".", "reshape", "(", "(", "1", ",", "1", ",", "A", "*", "height", ",", "width", ")", ")", "\n", "rpn_labels", "=", "labels", "\n", "\n", "# bbox_targets", "\n", "bbox_targets", "=", "bbox_targets", ".", "reshape", "(", "(", "1", ",", "height", ",", "width", ",", "A", "*", "4", ")", ")", "\n", "\n", "rpn_bbox_targets", "=", "bbox_targets", "\n", "# bbox_inside_weights", "\n", "bbox_inside_weights", "=", "bbox_inside_weights", ".", "reshape", "(", "(", "1", ",", "height", ",", "width", ",", "A", "*", "4", ")", ")", "\n", "\n", "rpn_bbox_inside_weights", "=", "bbox_inside_weights", "\n", "\n", "# bbox_outside_weights", "\n", "bbox_outside_weights", "=", "bbox_outside_weights", ".", "reshape", "(", "(", "1", ",", "height", ",", "width", ",", "A", "*", "4", ")", ")", "\n", "\n", "rpn_bbox_outside_weights", "=", "bbox_outside_weights", "\n", "return", "rpn_labels", ",", "rpn_bbox_targets", ",", "rpn_bbox_inside_weights", ",", "rpn_bbox_outside_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.anchor_target_layer._unmap": [[148, 160], ["len", "numpy.empty", "np.empty.fill", "numpy.empty", "np.empty.fill"], "function", ["None"], ["", "def", "_unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "  ", "\"\"\" Unmap a subset of item (data) back to the original set of items (of\n  size count) \"\"\"", "\n", "if", "len", "(", "data", ".", "shape", ")", "==", "1", ":", "\n", "    ", "ret", "=", "np", ".", "empty", "(", "(", "count", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ret", ".", "fill", "(", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "    ", "ret", "=", "np", ".", "empty", "(", "(", "count", ",", ")", "+", "data", ".", "shape", "[", "1", ":", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ret", ".", "fill", "(", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.anchor_target_layer._compute_targets": [[162, 170], ["model.bbox_transform.bbox_transform().astype", "model.bbox_transform.bbox_transform"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.bbox_transform"], ["", "def", "_compute_targets", "(", "ex_rois", ",", "gt_rois", ")", ":", "\n", "  ", "\"\"\"Compute bounding-box regression targets for an image.\"\"\"", "\n", "\n", "assert", "ex_rois", ".", "shape", "[", "0", "]", "==", "gt_rois", ".", "shape", "[", "0", "]", "\n", "assert", "ex_rois", ".", "shape", "[", "1", "]", "==", "4", "\n", "assert", "gt_rois", ".", "shape", "[", "1", "]", "==", "5", "\n", "\n", "return", "bbox_transform", "(", "ex_rois", ",", "gt_rois", "[", ":", ",", ":", "4", "]", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.proposal_layer.proposal_layer": [[16, 57], ["rpn_bbox_pred.reshape.reshape", "scores.reshape.reshape", "model.bbox_transform.bbox_transform_inv", "model.bbox_transform.clip_boxes", "model.nms_wrapper.nms", "numpy.zeros", "numpy.hstack", "type", "cfg_key.decode.decode", "scores.reshape.ravel().argsort", "numpy.hstack", "model.bbox_transform.clip_boxes.astype", "scores.reshape.ravel"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.bbox_transform_inv", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.clip_boxes", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.nms_wrapper.nms"], ["def", "proposal_layer", "(", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "im_info", ",", "cfg_key", ",", "_feat_stride", ",", "anchors", ",", "num_anchors", ")", ":", "\n", "  ", "\"\"\"A simplified version compared to fast/er RCNN\n     For details please see the technical report\n  \"\"\"", "\n", "if", "type", "(", "cfg_key", ")", "==", "bytes", ":", "\n", "      ", "cfg_key", "=", "cfg_key", ".", "decode", "(", "'utf-8'", ")", "\n", "", "pre_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_PRE_NMS_TOP_N", "\n", "post_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_POST_NMS_TOP_N", "\n", "nms_thresh", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_NMS_THRESH", "\n", "\n", "# Get the scores and bounding boxes", "\n", "scores", "=", "rpn_cls_prob", "[", ":", ",", ":", ",", ":", ",", "num_anchors", ":", "]", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "scores", "=", "scores", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "proposals", "=", "bbox_transform_inv", "(", "anchors", ",", "rpn_bbox_pred", ")", "\n", "proposals", "=", "clip_boxes", "(", "proposals", ",", "im_info", "[", ":", "2", "]", ")", "\n", "\n", "# Pick the top region proposals", "\n", "order", "=", "scores", ".", "ravel", "(", ")", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "if", "pre_nms_topN", ">", "0", ":", "\n", "    ", "order", "=", "order", "[", ":", "pre_nms_topN", "]", "\n", "", "proposals", "=", "proposals", "[", "order", ",", ":", "]", "\n", "scores", "=", "scores", "[", "order", "]", "\n", "\n", "# Non-maximal suppression", "\n", "nms_thresh", "=", "0.7", "#by default", "\n", "#print(\"nms_thresh = 0.01 # by Nicolas for the moment for TL testing\")", "\n", "#nms_thresh = 0.0 # by Nicolas for the moment for TL testing", "\n", "keep", "=", "nms", "(", "np", ".", "hstack", "(", "(", "proposals", ",", "scores", ")", ")", ",", "nms_thresh", ")", "\n", "\n", "# Pick th top region proposals after NMS", "\n", "if", "post_nms_topN", ">", "0", ":", "\n", "    ", "keep", "=", "keep", "[", ":", "post_nms_topN", "]", "\n", "", "proposals", "=", "proposals", "[", "keep", ",", ":", "]", "\n", "scores", "=", "scores", "[", "keep", "]", "\n", "\n", "# Only support single image as input", "\n", "batch_inds", "=", "np", ".", "zeros", "(", "(", "proposals", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blob", "=", "np", ".", "hstack", "(", "(", "batch_inds", ",", "proposals", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", ")", "\n", "\n", "return", "blob", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.proposal_layer.proposal_layerTL": [[58, 103], ["rpn_bbox_pred.reshape.reshape", "scores.reshape.reshape", "model.bbox_transform.bbox_transform_inv", "model.bbox_transform.clip_boxes", "model.nms_wrapper.nms", "numpy.zeros", "numpy.hstack", "type", "cfg_key.decode.decode", "scores.reshape.ravel().argsort", "numpy.hstack", "float", "model.bbox_transform.clip_boxes.astype", "scores.reshape.ravel"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.bbox_transform_inv", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.clip_boxes", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.nms_wrapper.nms"], ["", "def", "proposal_layerTL", "(", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "im_info", ",", "cfg_key", ",", "_feat_stride", ",", "anchors", ",", "num_anchors", ",", "nms_thresh", ")", ":", "\n", "  ", "\"\"\"\n     A simplified version compared to fast/er RCNN\n     For details please see the technical report\n     It return the blob : the proposal regions rescale to the standard size \n     (default is 600 pixel for the smaller dimension)\n  \"\"\"", "\n", "if", "type", "(", "cfg_key", ")", "==", "bytes", ":", "\n", "      ", "cfg_key", "=", "cfg_key", ".", "decode", "(", "'utf-8'", ")", "\n", "", "pre_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_PRE_NMS_TOP_N", "\n", "post_nms_topN", "=", "cfg", "[", "cfg_key", "]", ".", "RPN_POST_NMS_TOP_N", "\n", "#nms_thresh = cfg[cfg_key].RPN_NMS_THRESH", "\n", "\n", "# Get the scores and bounding boxes", "\n", "scores", "=", "rpn_cls_prob", "[", ":", ",", ":", ",", ":", ",", "num_anchors", ":", "]", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "scores", "=", "scores", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "proposals", "=", "bbox_transform_inv", "(", "anchors", ",", "rpn_bbox_pred", ")", "\n", "proposals", "=", "clip_boxes", "(", "proposals", ",", "im_info", "[", ":", "2", "]", ")", "\n", "\n", "# Pick the top region proposals", "\n", "order", "=", "scores", ".", "ravel", "(", ")", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "if", "pre_nms_topN", ">", "0", ":", "\n", "    ", "order", "=", "order", "[", ":", "pre_nms_topN", "]", "\n", "", "proposals", "=", "proposals", "[", "order", ",", ":", "]", "\n", "scores", "=", "scores", "[", "order", "]", "\n", "\n", "# Non-maximal suppression", "\n", "# nms_thresh = 0.7 by default", "\n", "#print(\"nms_thresh = 0.01 # by Nicolas for the moment for TL testing\")", "\n", "#nms_thresh = 0.7 # by Nicolas for the moment for TL testing", "\n", "#print(float(nms_thresh))", "\n", "keep", "=", "nms", "(", "np", ".", "hstack", "(", "(", "proposals", ",", "scores", ")", ")", ",", "float", "(", "nms_thresh", ")", ")", "\n", "\n", "# Pick th top region proposals after NMS", "\n", "if", "post_nms_topN", ">", "0", ":", "\n", "    ", "keep", "=", "keep", "[", ":", "post_nms_topN", "]", "\n", "", "proposals", "=", "proposals", "[", "keep", ",", ":", "]", "\n", "scores", "=", "scores", "[", "keep", "]", "\n", "\n", "# Only support single image as input", "\n", "batch_inds", "=", "np", ".", "zeros", "(", "(", "proposals", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blob", "=", "np", ".", "hstack", "(", "(", "batch_inds", ",", "proposals", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", ")", "\n", "\n", "return", "blob", ",", "scores", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.generate_anchors.generate_anchors": [[41, 53], ["generate_anchors._ratio_enum", "numpy.vstack", "numpy.arange", "numpy.array", "generate_anchors._scale_enum", "range"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.generate_anchors._ratio_enum", "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.generate_anchors._scale_enum"], ["def", "generate_anchors", "(", "base_size", "=", "16", ",", "ratios", "=", "[", "0.5", ",", "1", ",", "2", "]", ",", "\n", "scales", "=", "2", "**", "np", ".", "arange", "(", "3", ",", "6", ")", ")", ":", "\n", "  ", "\"\"\"\n  Generate anchor (reference) windows by enumerating aspect ratios X\n  scales wrt a reference (0, 0, 15, 15) window.\n  \"\"\"", "\n", "\n", "base_anchor", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "base_size", ",", "base_size", "]", ")", "-", "1", "\n", "ratio_anchors", "=", "_ratio_enum", "(", "base_anchor", ",", "ratios", ")", "\n", "anchors", "=", "np", ".", "vstack", "(", "[", "_scale_enum", "(", "ratio_anchors", "[", "i", ",", ":", "]", ",", "scales", ")", "\n", "for", "i", "in", "range", "(", "ratio_anchors", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.generate_anchors._whctrs": [[55, 65], ["None"], "function", ["None"], ["", "def", "_whctrs", "(", "anchor", ")", ":", "\n", "  ", "\"\"\"\n  Return width, height, x center, and y center for an anchor (window).\n  \"\"\"", "\n", "\n", "w", "=", "anchor", "[", "2", "]", "-", "anchor", "[", "0", "]", "+", "1", "\n", "h", "=", "anchor", "[", "3", "]", "-", "anchor", "[", "1", "]", "+", "1", "\n", "x_ctr", "=", "anchor", "[", "0", "]", "+", "0.5", "*", "(", "w", "-", "1", ")", "\n", "y_ctr", "=", "anchor", "[", "1", "]", "+", "0.5", "*", "(", "h", "-", "1", ")", "\n", "return", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.generate_anchors._mkanchors": [[67, 80], ["numpy.hstack"], "function", ["None"], ["", "def", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", ":", "\n", "  ", "\"\"\"\n  Given a vector of widths (ws) and heights (hs) around a center\n  (x_ctr, y_ctr), output a set of anchors (windows).\n  \"\"\"", "\n", "\n", "ws", "=", "ws", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "hs", "=", "hs", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "anchors", "=", "np", ".", "hstack", "(", "(", "x_ctr", "-", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "-", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", "x_ctr", "+", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "+", "0.5", "*", "(", "hs", "-", "1", ")", ")", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.generate_anchors._ratio_enum": [[82, 94], ["generate_anchors._whctrs", "numpy.round", "numpy.round", "generate_anchors._mkanchors", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.generate_anchors._whctrs", "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.generate_anchors._mkanchors"], ["", "def", "_ratio_enum", "(", "anchor", ",", "ratios", ")", ":", "\n", "  ", "\"\"\"\n  Enumerate a set of anchors for each aspect ratio wrt an anchor.\n  \"\"\"", "\n", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "size", "=", "w", "*", "h", "\n", "size_ratios", "=", "size", "/", "ratios", "\n", "ws", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "size_ratios", ")", ")", "\n", "hs", "=", "np", ".", "round", "(", "ws", "*", "ratios", ")", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.generate_anchors._scale_enum": [[96, 106], ["generate_anchors._whctrs", "generate_anchors._mkanchors"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.generate_anchors._whctrs", "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.generate_anchors._mkanchors"], ["", "def", "_scale_enum", "(", "anchor", ",", "scales", ")", ":", "\n", "  ", "\"\"\"\n  Enumerate a set of anchors for each scale wrt an anchor.\n  \"\"\"", "\n", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "ws", "=", "w", "*", "scales", "\n", "hs", "=", "h", "*", "scales", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.proposal_top_layer.proposal_top_layer": [[15, 54], ["rpn_bbox_pred.reshape.reshape", "scores.reshape.reshape", "model.bbox_transform.bbox_transform_inv", "model.bbox_transform.clip_boxes", "numpy.zeros", "numpy.hstack", "numpy.choice", "top_inds.reshape.reshape", "scores.reshape.argsort", "model.bbox_transform.clip_boxes.astype"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.bbox_transform_inv", "home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.clip_boxes"], ["def", "proposal_top_layer", "(", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "im_info", ",", "_feat_stride", ",", "anchors", ",", "num_anchors", ")", ":", "\n", "  ", "\"\"\"A layer that just selects the top region proposals\n     without using non-maximal suppression,\n     For details please see the technical report\n  \"\"\"", "\n", "rpn_top_n", "=", "cfg", ".", "TEST", ".", "RPN_TOP_N", "\n", "\n", "scores", "=", "rpn_cls_prob", "[", ":", ",", ":", ",", ":", ",", "num_anchors", ":", "]", "\n", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "scores", "=", "scores", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "length", "=", "scores", ".", "shape", "[", "0", "]", "\n", "if", "length", "<", "rpn_top_n", ":", "\n", "# Random selection, maybe unnecessary and loses good proposals", "\n", "# But such case rarely happens", "\n", "    ", "top_inds", "=", "npr", ".", "choice", "(", "length", ",", "size", "=", "rpn_top_n", ",", "replace", "=", "True", ")", "\n", "", "else", ":", "\n", "    ", "top_inds", "=", "scores", ".", "argsort", "(", "0", ")", "[", ":", ":", "-", "1", "]", "\n", "top_inds", "=", "top_inds", "[", ":", "rpn_top_n", "]", "\n", "top_inds", "=", "top_inds", ".", "reshape", "(", "rpn_top_n", ",", ")", "\n", "\n", "# Do the selection here", "\n", "", "anchors", "=", "anchors", "[", "top_inds", ",", ":", "]", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", "[", "top_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "top_inds", "]", "\n", "\n", "# Convert anchors into proposals via bbox transformations", "\n", "proposals", "=", "bbox_transform_inv", "(", "anchors", ",", "rpn_bbox_pred", ")", "\n", "\n", "# Clip predicted boxes to image", "\n", "proposals", "=", "clip_boxes", "(", "proposals", ",", "im_info", "[", ":", "2", "]", ")", "\n", "\n", "# Output rois blob", "\n", "# Our RPN implementation only supports a single input image, so all", "\n", "# batch inds are 0", "\n", "batch_inds", "=", "np", ".", "zeros", "(", "(", "proposals", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blob", "=", "np", ".", "hstack", "(", "(", "batch_inds", ",", "proposals", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", ")", "\n", "return", "blob", ",", "scores", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.snippets.generate_anchors_pre": [[13, 30], ["layer_utils.generate_anchors.generate_anchors", "numpy.meshgrid", "numpy.vstack().transpose", "anchors.reshape().astype.reshape().astype", "numpy.int32", "numpy.arange", "numpy.arange", "anchors.reshape().astype.reshape", "np.vstack().transpose.reshape().transpose", "numpy.array", "numpy.array", "numpy.vstack", "anchors.reshape().astype.reshape", "np.vstack().transpose.reshape", "shift_x.ravel", "shift_y.ravel", "shift_x.ravel", "shift_y.ravel"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.generate_anchors.generate_anchors"], ["def", "generate_anchors_pre", "(", "height", ",", "width", ",", "feat_stride", ",", "anchor_scales", "=", "(", "8", ",", "16", ",", "32", ")", ",", "anchor_ratios", "=", "(", "0.5", ",", "1", ",", "2", ")", ")", ":", "\n", "  ", "\"\"\" A wrapper function to generate anchors given different scales\n    Also return the number of anchors in variable 'length'\n  \"\"\"", "\n", "anchors", "=", "generate_anchors", "(", "ratios", "=", "np", ".", "array", "(", "anchor_ratios", ")", ",", "scales", "=", "np", ".", "array", "(", "anchor_scales", ")", ")", "\n", "A", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "shift_x", "=", "np", ".", "arange", "(", "0", ",", "width", ")", "*", "feat_stride", "\n", "shift_y", "=", "np", ".", "arange", "(", "0", ",", "height", ")", "*", "feat_stride", "\n", "shift_x", ",", "shift_y", "=", "np", ".", "meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "shifts", "=", "np", ".", "vstack", "(", "(", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ",", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ")", ")", ".", "transpose", "(", ")", "\n", "K", "=", "shifts", ".", "shape", "[", "0", "]", "\n", "# width changes faster, so here it is H, W, C", "\n", "anchors", "=", "anchors", ".", "reshape", "(", "(", "1", ",", "A", ",", "4", ")", ")", "+", "shifts", ".", "reshape", "(", "(", "1", ",", "K", ",", "4", ")", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "anchors", "=", "anchors", ".", "reshape", "(", "(", "K", "*", "A", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "length", "=", "np", ".", "int32", "(", "anchors", ".", "shape", "[", "0", "]", ")", "\n", "\n", "return", "anchors", ",", "length", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.proposal_target_layer.proposal_target_layer": [[25, 63], ["numpy.round", "proposal_target_layer._sample_rois", "rois.reshape.reshape", "roi_scores.reshape.reshape", "labels.reshape.reshape", "bbox_targets.reshape.reshape", "bbox_inside_weights.reshape.reshape", "numpy.array().astype", "numpy.zeros", "numpy.vstack", "numpy.vstack", "numpy.array", "numpy.hstack"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.proposal_target_layer._sample_rois"], ["", "", "def", "proposal_target_layer", "(", "rpn_rois", ",", "rpn_scores", ",", "gt_boxes", ",", "_num_classes", ")", ":", "\n", "  ", "\"\"\"\n  Assign object detection proposals to ground-truth targets. Produces proposal\n  classification labels and bounding-box regression targets.\n  \"\"\"", "\n", "\n", "# Proposal ROIs (0, x1, y1, x2, y2) coming from RPN", "\n", "# (i.e., rpn.proposal_layer.ProposalLayer), or any other source", "\n", "all_rois", "=", "rpn_rois", "\n", "all_scores", "=", "rpn_scores", "\n", "\n", "# Include ground-truth boxes in the set of candidate rois", "\n", "if", "cfg", ".", "TRAIN", ".", "USE_GT", ":", "\n", "    ", "zeros", "=", "np", ".", "zeros", "(", "(", "gt_boxes", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "gt_boxes", ".", "dtype", ")", "\n", "all_rois", "=", "np", ".", "vstack", "(", "\n", "(", "all_rois", ",", "np", ".", "hstack", "(", "(", "zeros", ",", "gt_boxes", "[", ":", ",", ":", "-", "1", "]", ")", ")", ")", "\n", ")", "\n", "# not sure if it a wise appending, but anyway i am not using it", "\n", "all_scores", "=", "np", ".", "vstack", "(", "(", "all_scores", ",", "zeros", ")", ")", "\n", "\n", "", "num_images", "=", "1", "\n", "rois_per_image", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "/", "num_images", "\n", "fg_rois_per_image", "=", "np", ".", "round", "(", "cfg", ".", "TRAIN", ".", "FG_FRACTION", "*", "rois_per_image", ")", "\n", "\n", "# Sample rois with classification labels and bounding box regression", "\n", "# targets", "\n", "labels", ",", "rois", ",", "roi_scores", ",", "bbox_targets", ",", "bbox_inside_weights", "=", "_sample_rois", "(", "\n", "all_rois", ",", "all_scores", ",", "gt_boxes", ",", "fg_rois_per_image", ",", "\n", "rois_per_image", ",", "_num_classes", ")", "\n", "\n", "rois", "=", "rois", ".", "reshape", "(", "-", "1", ",", "5", ")", "\n", "roi_scores", "=", "roi_scores", ".", "reshape", "(", "-", "1", ")", "\n", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "bbox_targets", "=", "bbox_targets", ".", "reshape", "(", "-", "1", ",", "_num_classes", "*", "4", ")", "\n", "bbox_inside_weights", "=", "bbox_inside_weights", ".", "reshape", "(", "-", "1", ",", "_num_classes", "*", "4", ")", "\n", "bbox_outside_weights", "=", "np", ".", "array", "(", "bbox_inside_weights", ">", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "rois", ",", "roi_scores", ",", "labels", ",", "bbox_targets", ",", "bbox_inside_weights", ",", "bbox_outside_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.proposal_target_layer._get_bbox_regression_labels": [[65, 88], ["numpy.zeros", "numpy.zeros", "numpy.where", "int"], "function", ["None"], ["", "def", "_get_bbox_regression_labels", "(", "bbox_target_data", ",", "num_classes", ")", ":", "\n", "  ", "\"\"\"Bounding-box regression targets (bbox_target_data) are stored in a\n  compact form N x (class, tx, ty, tw, th)\n\n  This function expands those targets into the 4-of-4*K representation used\n  by the network (i.e. only one class has non-zero targets).\n\n  Returns:\n      bbox_target (ndarray): N x 4K blob of regression targets\n      bbox_inside_weights (ndarray): N x 4K blob of loss weights\n  \"\"\"", "\n", "\n", "clss", "=", "bbox_target_data", "[", ":", ",", "0", "]", "\n", "bbox_targets", "=", "np", ".", "zeros", "(", "(", "clss", ".", "size", ",", "4", "*", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bbox_inside_weights", "=", "np", ".", "zeros", "(", "bbox_targets", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "inds", "=", "np", ".", "where", "(", "clss", ">", "0", ")", "[", "0", "]", "\n", "for", "ind", "in", "inds", ":", "\n", "    ", "cls", "=", "clss", "[", "ind", "]", "\n", "start", "=", "int", "(", "4", "*", "cls", ")", "\n", "end", "=", "start", "+", "4", "\n", "bbox_targets", "[", "ind", ",", "start", ":", "end", "]", "=", "bbox_target_data", "[", "ind", ",", "1", ":", "]", "\n", "bbox_inside_weights", "[", "ind", ",", "start", ":", "end", "]", "=", "cfg", ".", "TRAIN", ".", "BBOX_INSIDE_WEIGHTS", "\n", "", "return", "bbox_targets", ",", "bbox_inside_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.proposal_target_layer._compute_targets": [[90, 104], ["model.bbox_transform.bbox_transform", "numpy.hstack().astype", "numpy.array", "numpy.hstack", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.bbox_transform.bbox_transform"], ["", "def", "_compute_targets", "(", "ex_rois", ",", "gt_rois", ",", "labels", ")", ":", "\n", "  ", "\"\"\"Compute bounding-box regression targets for an image.\"\"\"", "\n", "\n", "assert", "ex_rois", ".", "shape", "[", "0", "]", "==", "gt_rois", ".", "shape", "[", "0", "]", "\n", "assert", "ex_rois", ".", "shape", "[", "1", "]", "==", "4", "\n", "assert", "gt_rois", ".", "shape", "[", "1", "]", "==", "4", "\n", "\n", "targets", "=", "bbox_transform", "(", "ex_rois", ",", "gt_rois", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_TARGETS_PRECOMPUTED", ":", "\n", "# Optionally normalize targets by a precomputed mean and stdev", "\n", "    ", "targets", "=", "(", "(", "targets", "-", "np", ".", "array", "(", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_MEANS", ")", ")", "\n", "/", "np", ".", "array", "(", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_STDS", ")", ")", "\n", "", "return", "np", ".", "hstack", "(", "\n", "(", "labels", "[", ":", ",", "np", ".", "newaxis", "]", ",", "targets", ")", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.proposal_target_layer._sample_rois": [[106, 160], ["bbox_overlaps", "bbox_overlaps.argmax", "bbox_overlaps.max", "numpy.append", "proposal_target_layer._compute_targets", "proposal_target_layer._get_bbox_regression_labels", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.where", "numpy.where", "min", "numpy.choice", "numpy.choice", "numpy.choice", "int", "int", "int", "numpy.choice", "pdb.set_trace", "int", "int"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.utils.bbox.bbox_overlaps", "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.proposal_target_layer._compute_targets", "home.repos.pwc.inspect_result.nicaogr_Mi_max.layer_utils.proposal_target_layer._get_bbox_regression_labels"], ["", "def", "_sample_rois", "(", "all_rois", ",", "all_scores", ",", "gt_boxes", ",", "fg_rois_per_image", ",", "rois_per_image", ",", "num_classes", ")", ":", "\n", "  ", "\"\"\"Generate a random sample of RoIs comprising foreground and background\n  examples.\n  \"\"\"", "\n", "# overlaps: (rois x gt_boxes)", "\n", "overlaps", "=", "bbox_overlaps", "(", "\n", "np", ".", "ascontiguousarray", "(", "all_rois", "[", ":", ",", "1", ":", "5", "]", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", "np", ".", "ascontiguousarray", "(", "gt_boxes", "[", ":", ",", ":", "4", "]", ",", "dtype", "=", "np", ".", "float", ")", ")", "\n", "gt_assignment", "=", "overlaps", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "max_overlaps", "=", "overlaps", ".", "max", "(", "axis", "=", "1", ")", "\n", "labels", "=", "gt_boxes", "[", "gt_assignment", ",", "4", "]", "\n", "\n", "# Select foreground RoIs as those with >= FG_THRESH overlap", "\n", "fg_inds", "=", "np", ".", "where", "(", "max_overlaps", ">=", "cfg", ".", "TRAIN", ".", "FG_THRESH", ")", "[", "0", "]", "\n", "# Guard against the case when an image has fewer than fg_rois_per_image", "\n", "# Select background RoIs as those within [BG_THRESH_LO, BG_THRESH_HI)", "\n", "bg_inds", "=", "np", ".", "where", "(", "(", "max_overlaps", "<", "cfg", ".", "TRAIN", ".", "BG_THRESH_HI", ")", "&", "\n", "(", "max_overlaps", ">=", "cfg", ".", "TRAIN", ".", "BG_THRESH_LO", ")", ")", "[", "0", "]", "\n", "\n", "# Small modification to the original version where we ensure a fixed number of regions are sampled", "\n", "if", "fg_inds", ".", "size", ">", "0", "and", "bg_inds", ".", "size", ">", "0", ":", "\n", "    ", "fg_rois_per_image", "=", "min", "(", "fg_rois_per_image", ",", "fg_inds", ".", "size", ")", "\n", "fg_inds", "=", "npr", ".", "choice", "(", "fg_inds", ",", "size", "=", "int", "(", "fg_rois_per_image", ")", ",", "replace", "=", "False", ")", "\n", "bg_rois_per_image", "=", "rois_per_image", "-", "fg_rois_per_image", "\n", "to_replace", "=", "bg_inds", ".", "size", "<", "bg_rois_per_image", "\n", "bg_inds", "=", "npr", ".", "choice", "(", "bg_inds", ",", "size", "=", "int", "(", "bg_rois_per_image", ")", ",", "replace", "=", "to_replace", ")", "\n", "", "elif", "fg_inds", ".", "size", ">", "0", ":", "\n", "    ", "to_replace", "=", "fg_inds", ".", "size", "<", "rois_per_image", "\n", "fg_inds", "=", "npr", ".", "choice", "(", "fg_inds", ",", "size", "=", "int", "(", "rois_per_image", ")", ",", "replace", "=", "to_replace", ")", "\n", "fg_rois_per_image", "=", "rois_per_image", "\n", "", "elif", "bg_inds", ".", "size", ">", "0", ":", "\n", "    ", "to_replace", "=", "bg_inds", ".", "size", "<", "rois_per_image", "\n", "bg_inds", "=", "npr", ".", "choice", "(", "bg_inds", ",", "size", "=", "int", "(", "rois_per_image", ")", ",", "replace", "=", "to_replace", ")", "\n", "fg_rois_per_image", "=", "0", "\n", "", "else", ":", "\n", "    ", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "# The indices that we're selecting (both fg and bg)", "\n", "", "keep_inds", "=", "np", ".", "append", "(", "fg_inds", ",", "bg_inds", ")", "\n", "# Select sampled values from various arrays:", "\n", "labels", "=", "labels", "[", "keep_inds", "]", "\n", "# Clamp labels for the background RoIs to 0", "\n", "labels", "[", "int", "(", "fg_rois_per_image", ")", ":", "]", "=", "0", "\n", "rois", "=", "all_rois", "[", "keep_inds", "]", "\n", "roi_scores", "=", "all_scores", "[", "keep_inds", "]", "\n", "\n", "bbox_target_data", "=", "_compute_targets", "(", "\n", "rois", "[", ":", ",", "1", ":", "5", "]", ",", "gt_boxes", "[", "gt_assignment", "[", "keep_inds", "]", ",", ":", "4", "]", ",", "labels", ")", "\n", "\n", "bbox_targets", ",", "bbox_inside_weights", "=", "_get_bbox_regression_labels", "(", "bbox_target_data", ",", "num_classes", ")", "\n", "\n", "return", "labels", ",", "rois", ",", "roi_scores", ",", "bbox_targets", ",", "bbox_inside_weights", "\n", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.vgg16.vgg16.__init__": [[20, 26], ["nets.network.Network.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.__init__"], ["  ", "def", "__init__", "(", "self", ",", "get_fc6", "=", "False", ")", ":", "\n", "    ", "Network", ".", "__init__", "(", "self", ")", "\n", "self", ".", "_feat_stride", "=", "[", "16", ",", "]", "\n", "self", ".", "_feat_compress", "=", "[", "1.", "/", "float", "(", "self", ".", "_feat_stride", "[", "0", "]", ")", ",", "]", "\n", "self", ".", "_scope", "=", "'vgg_16'", "\n", "self", ".", "get_fc6", "=", "get_fc6", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.vgg16.vgg16._image_to_head": [[27, 48], ["vgg16.vgg16._act_summaries.append", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.repeat", "tensorflow.repeat", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.repeat", "tensorflow.repeat", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.repeat", "tensorflow.repeat", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.repeat", "tensorflow.repeat", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.repeat", "tensorflow.repeat"], "methods", ["None"], ["", "def", "_image_to_head", "(", "self", ",", "is_training", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "self", ".", "_scope", ",", "self", ".", "_scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "      ", "net", "=", "slim", ".", "repeat", "(", "self", ".", "_image", ",", "2", ",", "slim", ".", "conv2d", ",", "64", ",", "[", "3", ",", "3", "]", ",", "\n", "trainable", "=", "False", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "scope", "=", "'pool1'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "2", ",", "slim", ".", "conv2d", ",", "128", ",", "[", "3", ",", "3", "]", ",", "\n", "trainable", "=", "False", ",", "scope", "=", "'conv2'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "scope", "=", "'pool2'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "3", ",", "slim", ".", "conv2d", ",", "256", ",", "[", "3", ",", "3", "]", ",", "\n", "trainable", "=", "is_training", ",", "scope", "=", "'conv3'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "scope", "=", "'pool3'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "3", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "\n", "trainable", "=", "is_training", ",", "scope", "=", "'conv4'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "scope", "=", "'pool4'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "3", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "\n", "trainable", "=", "is_training", ",", "scope", "=", "'conv5'", ")", "\n", "\n", "", "self", ".", "_act_summaries", ".", "append", "(", "net", ")", "\n", "self", ".", "_layers", "[", "'head'", "]", "=", "net", "\n", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.vgg16.vgg16._head_to_tail": [[49, 65], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.flatten", "tensorflow.flatten", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.dropout", "tensorflow.dropout"], "methods", ["None"], ["", "def", "_head_to_tail", "(", "self", ",", "pool5", ",", "is_training", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "self", ".", "_scope", ",", "self", ".", "_scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "      ", "pool5_flat", "=", "slim", ".", "flatten", "(", "pool5", ",", "scope", "=", "'flatten'", ")", "\n", "fc6", "=", "slim", ".", "fully_connected", "(", "pool5_flat", ",", "4096", ",", "scope", "=", "'fc6'", ")", "\n", "if", "is_training", ":", "\n", "        ", "fc6", "=", "slim", ".", "dropout", "(", "fc6", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "True", ",", "\n", "scope", "=", "'dropout6'", ")", "\n", "", "fc7", "=", "slim", ".", "fully_connected", "(", "fc6", ",", "4096", ",", "scope", "=", "'fc7'", ")", "\n", "if", "is_training", ":", "\n", "        ", "fc7", "=", "slim", ".", "dropout", "(", "fc7", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "True", ",", "\n", "scope", "=", "'dropout7'", ")", "\n", "\n", "", "", "if", "self", ".", "get_fc6", ":", "\n", "      ", "return", "fc7", ",", "fc6", "\n", "", "else", ":", "\n", "      ", "return", "fc7", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.vgg16.vgg16.get_variables_to_restore": [[66, 84], ["print", "variables_to_restore.append", "v.name.split"], "methods", ["None"], ["", "", "def", "get_variables_to_restore", "(", "self", ",", "variables", ",", "var_keep_dic", ")", ":", "\n", "    ", "variables_to_restore", "=", "[", "]", "\n", "\n", "for", "v", "in", "variables", ":", "\n", "# exclude the conv weights that are fc weights in vgg16", "\n", "      ", "if", "v", ".", "name", "==", "(", "self", ".", "_scope", "+", "'/fc6/weights:0'", ")", "or", "v", ".", "name", "==", "(", "self", ".", "_scope", "+", "'/fc7/weights:0'", ")", ":", "\n", "        ", "self", ".", "_variables_to_fix", "[", "v", ".", "name", "]", "=", "v", "\n", "continue", "\n", "# exclude the first conv layer to swap RGB to BGR", "\n", "", "if", "v", ".", "name", "==", "(", "self", ".", "_scope", "+", "'/conv1/conv1_1/weights:0'", ")", ":", "\n", "        ", "self", ".", "_variables_to_fix", "[", "v", ".", "name", "]", "=", "v", "\n", "continue", "\n", "", "if", "v", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", "in", "var_keep_dic", ":", "\n", "        ", "print", "(", "'Variables restored: %s'", "%", "v", ".", "name", ")", "\n", "variables_to_restore", ".", "append", "(", "v", ")", "\n", "\n", "", "", "return", "variables_to_restore", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.vgg16.vgg16.fix_variables": [[85, 105], ["print", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.device", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "sess.run", "sess.run", "sess.run", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reverse", "tensorflow.reverse", "vgg16.vgg16._variables_to_fix[].get_shape", "vgg16.vgg16._variables_to_fix[].get_shape"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore"], ["", "def", "fix_variables", "(", "self", ",", "sess", ",", "pretrained_model", ")", ":", "\n", "    ", "print", "(", "'Fix VGG16 layers..'", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Fix_VGG16'", ")", "as", "scope", ":", "\n", "      ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "# fix the vgg16 issue from conv weights to fc weights", "\n", "# fix RGB to BGR", "\n", "        ", "fc6_conv", "=", "tf", ".", "get_variable", "(", "\"fc6_conv\"", ",", "[", "7", ",", "7", ",", "512", ",", "4096", "]", ",", "trainable", "=", "False", ")", "\n", "fc7_conv", "=", "tf", ".", "get_variable", "(", "\"fc7_conv\"", ",", "[", "1", ",", "1", ",", "4096", ",", "4096", "]", ",", "trainable", "=", "False", ")", "\n", "conv1_rgb", "=", "tf", ".", "get_variable", "(", "\"conv1_rgb\"", ",", "[", "3", ",", "3", ",", "3", ",", "64", "]", ",", "trainable", "=", "False", ")", "\n", "restorer_fc", "=", "tf", ".", "train", ".", "Saver", "(", "{", "self", ".", "_scope", "+", "\"/fc6/weights\"", ":", "fc6_conv", ",", "\n", "self", ".", "_scope", "+", "\"/fc7/weights\"", ":", "fc7_conv", ",", "\n", "self", ".", "_scope", "+", "\"/conv1/conv1_1/weights\"", ":", "conv1_rgb", "}", ")", "\n", "restorer_fc", ".", "restore", "(", "sess", ",", "pretrained_model", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "_variables_to_fix", "[", "self", ".", "_scope", "+", "'/fc6/weights:0'", "]", ",", "tf", ".", "reshape", "(", "fc6_conv", ",", "\n", "self", ".", "_variables_to_fix", "[", "self", ".", "_scope", "+", "'/fc6/weights:0'", "]", ".", "get_shape", "(", ")", ")", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "_variables_to_fix", "[", "self", ".", "_scope", "+", "'/fc7/weights:0'", "]", ",", "tf", ".", "reshape", "(", "fc7_conv", ",", "\n", "self", ".", "_variables_to_fix", "[", "self", ".", "_scope", "+", "'/fc7/weights:0'", "]", ".", "get_shape", "(", ")", ")", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "_variables_to_fix", "[", "self", ".", "_scope", "+", "'/conv1/conv1_1/weights:0'", "]", ",", "\n", "tf", ".", "reverse", "(", "conv1_rgb", ",", "[", "2", "]", ")", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnetv1.__init__": [[47, 55], ["nets.network.Network.__init__", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnetv1._decide_blocks", "float"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.__init__", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnetv1._decide_blocks"], ["  ", "def", "__init__", "(", "self", ",", "num_layers", "=", "50", ")", ":", "\n", "    ", "Network", ".", "__init__", "(", "self", ")", "\n", "self", ".", "_feat_stride", "=", "[", "16", ",", "]", "\n", "self", ".", "_feat_compress", "=", "[", "1.", "/", "float", "(", "self", ".", "_feat_stride", "[", "0", "]", ")", ",", "]", "\n", "self", ".", "_num_layers", "=", "num_layers", "\n", "self", ".", "_scope", "=", "'resnet_v1_%d'", "%", "num_layers", "\n", "self", ".", "_decide_blocks", "(", ")", "\n", "self", ".", "get_fc6", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnetv1._crop_pool_layer": [[56, 78], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.shape", "tensorflow.shape", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.slice", "tensorflow.slice", "numpy.float32", "numpy.float32", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32"], "methods", ["None"], ["", "def", "_crop_pool_layer", "(", "self", ",", "bottom", ",", "rois", ",", "name", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "      ", "batch_ids", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"batch_id\"", ")", ",", "[", "1", "]", ")", "\n", "# Get the normalized coordinates of bboxes", "\n", "bottom_shape", "=", "tf", ".", "shape", "(", "bottom", ")", "\n", "height", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "1", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "_feat_stride", "[", "0", "]", ")", "\n", "width", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "2", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "_feat_stride", "[", "0", "]", ")", "\n", "x1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x1\"", ")", "/", "width", "\n", "y1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "2", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y1\"", ")", "/", "height", "\n", "x2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "3", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x2\"", ")", "/", "width", "\n", "y2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "4", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y2\"", ")", "/", "height", "\n", "# Won't be back-propagated to rois anyway, but to save time", "\n", "bboxes", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "concat", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", "]", ",", "1", ")", ")", "\n", "if", "cfg", ".", "RESNET", ".", "MAX_POOL", ":", "\n", "        ", "pre_pool_size", "=", "cfg", ".", "POOLING_SIZE", "*", "2", "\n", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "pre_pool_size", ",", "pre_pool_size", "]", ",", "\n", "name", "=", "\"crops\"", ")", "\n", "crops", "=", "slim", ".", "max_pool2d", "(", "crops", ",", "[", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ")", "\n", "", "else", ":", "\n", "        ", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "cfg", ".", "POOLING_SIZE", ",", "cfg", ".", "POOLING_SIZE", "]", ",", "\n", "name", "=", "\"crops\"", ")", "\n", "", "", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnetv1._build_base": [[81, 88], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "tensorflow.pad", "tensorflow.pad", "tensorflow.max_pool2d", "tensorflow.max_pool2d"], "methods", ["None"], ["", "def", "_build_base", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "self", ".", "_scope", ",", "self", ".", "_scope", ")", ":", "\n", "      ", "net", "=", "resnet_utils", ".", "conv2d_same", "(", "self", ".", "_image", ",", "64", ",", "7", ",", "stride", "=", "2", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "tf", ".", "pad", "(", "net", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "scope", "=", "'pool1'", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnetv1._image_to_head": [[89, 115], ["tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnetv1._act_summaries.append", "tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnetv1._build_base", "resnet_v1.resnet_arg_scope", "tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "resnet_v1.resnet_arg_scope", "resnet_v1.resnet_arg_scope"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnetv1._build_base", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnet_arg_scope", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnet_arg_scope", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnet_arg_scope"], ["", "def", "_image_to_head", "(", "self", ",", "is_training", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "assert", "(", "0", "<=", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", "<=", "3", ")", "\n", "# Now the base is always fixed during training", "\n", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "False", ")", ")", ":", "\n", "      ", "net_conv", "=", "self", ".", "_build_base", "(", ")", "\n", "", "if", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ">", "0", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "False", ")", ")", ":", "\n", "        ", "net_conv", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "net_conv", ",", "\n", "self", ".", "_blocks", "[", "0", ":", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "reuse", ",", "\n", "scope", "=", "self", ".", "_scope", ")", "\n", "", "", "if", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", "<", "3", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "        ", "net_conv", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "net_conv", ",", "\n", "self", ".", "_blocks", "[", "cfg", ".", "RESNET", ".", "FIXED_BLOCKS", ":", "-", "1", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "reuse", ",", "\n", "scope", "=", "self", ".", "_scope", ")", "\n", "\n", "", "", "self", ".", "_act_summaries", ".", "append", "(", "net_conv", ")", "\n", "self", ".", "_layers", "[", "'head'", "]", "=", "net_conv", "\n", "\n", "return", "net_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnetv1._head_to_tail": [[116, 127], ["tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "resnet_v1.resnet_arg_scope"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnet_arg_scope"], ["", "def", "_head_to_tail", "(", "self", ",", "pool5", ",", "is_training", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "resnet_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "      ", "fc7", ",", "_", "=", "resnet_v1", ".", "resnet_v1", "(", "pool5", ",", "\n", "self", ".", "_blocks", "[", "-", "1", ":", "]", ",", "\n", "global_pool", "=", "False", ",", "\n", "include_root_block", "=", "False", ",", "\n", "reuse", "=", "reuse", ",", "\n", "scope", "=", "self", ".", "_scope", ")", "\n", "# average pooling done by reduce_mean", "\n", "fc7", "=", "tf", ".", "reduce_mean", "(", "fc7", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "", "return", "fc7", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnetv1._decide_blocks": [[128, 154], ["tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block", "tensorflow.contrib.slim.python.slim.nets.resnet_v1.resnet_v1_block"], "methods", ["None"], ["", "def", "_decide_blocks", "(", "self", ")", ":", "\n", "# choose different blocks for different number of layers", "\n", "    ", "if", "self", ".", "_num_layers", "==", "50", ":", "\n", "      ", "self", ".", "_blocks", "=", "[", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "# use stride 1 for the last conv4 layer", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "6", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", "]", "\n", "\n", "", "elif", "self", ".", "_num_layers", "==", "101", ":", "\n", "      ", "self", ".", "_blocks", "=", "[", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "# use stride 1 for the last conv4 layer", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "23", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", "]", "\n", "\n", "", "elif", "self", ".", "_num_layers", "==", "152", ":", "\n", "      ", "self", ".", "_blocks", "=", "[", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "8", ",", "stride", "=", "2", ")", ",", "\n", "# use stride 1 for the last conv4 layer", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "36", ",", "stride", "=", "1", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", "]", "\n", "\n", "", "else", ":", "\n", "# other numbers are not supported", "\n", "      ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnetv1.get_variables_to_restore": [[155, 168], ["print", "variables_to_restore.append", "v.name.split"], "methods", ["None"], ["", "", "def", "get_variables_to_restore", "(", "self", ",", "variables", ",", "var_keep_dic", ")", ":", "\n", "    ", "variables_to_restore", "=", "[", "]", "\n", "\n", "for", "v", "in", "variables", ":", "\n", "# exclude the first conv layer to swap RGB to BGR", "\n", "      ", "if", "v", ".", "name", "==", "(", "self", ".", "_scope", "+", "'/conv1/weights:0'", ")", ":", "\n", "        ", "self", ".", "_variables_to_fix", "[", "v", ".", "name", "]", "=", "v", "\n", "continue", "\n", "", "if", "v", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", "in", "var_keep_dic", ":", "\n", "        ", "print", "(", "'Variables restored: %s'", "%", "v", ".", "name", ")", "\n", "variables_to_restore", ".", "append", "(", "v", ")", "\n", "\n", "", "", "return", "variables_to_restore", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnetv1.fix_variables": [[169, 180], ["print", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.device", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "sess.run", "tensorflow.assign", "tensorflow.assign", "tensorflow.reverse", "tensorflow.reverse"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore"], ["", "def", "fix_variables", "(", "self", ",", "sess", ",", "pretrained_model", ")", ":", "\n", "    ", "print", "(", "'Fix Resnet V1 layers..'", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Fix_Resnet_V1'", ")", "as", "scope", ":", "\n", "      ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "# fix RGB to BGR", "\n", "        ", "conv1_rgb", "=", "tf", ".", "get_variable", "(", "\"conv1_rgb\"", ",", "[", "7", ",", "7", ",", "3", ",", "64", "]", ",", "trainable", "=", "False", ")", "\n", "restorer_fc", "=", "tf", ".", "train", ".", "Saver", "(", "{", "self", ".", "_scope", "+", "\"/conv1/weights\"", ":", "conv1_rgb", "}", ")", "\n", "restorer_fc", ".", "restore", "(", "sess", ",", "pretrained_model", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "_variables_to_fix", "[", "self", ".", "_scope", "+", "'/conv1/weights:0'", "]", ",", "\n", "tf", ".", "reverse", "(", "conv1_rgb", ",", "[", "2", "]", ")", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.resnet_v1.resnet_arg_scope": [[22, 45], ["tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "tensorflow.l2_regularizer", "tensorflow.variance_scaling_initializer"], "function", ["None"], ["def", "resnet_arg_scope", "(", "is_training", "=", "True", ",", "\n", "batch_norm_decay", "=", "0.997", ",", "\n", "batch_norm_epsilon", "=", "1e-5", ",", "\n", "batch_norm_scale", "=", "True", ")", ":", "\n", "  ", "batch_norm_params", "=", "{", "\n", "'is_training'", ":", "False", ",", "\n", "'decay'", ":", "batch_norm_decay", ",", "\n", "'epsilon'", ":", "batch_norm_epsilon", ",", "\n", "'scale'", ":", "batch_norm_scale", ",", "\n", "'trainable'", ":", "False", ",", "\n", "'updates_collections'", ":", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", "\n", "}", "\n", "\n", "with", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", "]", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", ",", "\n", "weights_initializer", "=", "slim", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "normalizer_params", "=", "batch_norm_params", ")", ":", "\n", "    ", "with", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", "as", "arg_sc", ":", "\n", "      ", "return", "arg_sc", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.__init__": [[28, 41], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "_predictions", "=", "{", "}", "\n", "self", ".", "_losses", "=", "{", "}", "\n", "self", ".", "_anchor_targets", "=", "{", "}", "\n", "self", ".", "_proposal_targets", "=", "{", "}", "\n", "self", ".", "_layers", "=", "{", "}", "\n", "self", ".", "_gt_image", "=", "None", "\n", "self", ".", "_act_summaries", "=", "[", "]", "\n", "self", ".", "_score_summaries", "=", "{", "}", "\n", "self", ".", "_train_summaries", "=", "[", "]", "\n", "self", ".", "_event_summaries", "=", "{", "}", "\n", "self", ".", "_variables_to_fix", "=", "{", "}", "\n", "self", ".", "get_fc6", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_gt_image": [[42, 48], ["tensorflow.image.resize_bilinear", "tensorflow.image.resize_bilinear", "tensorflow.reverse", "tensorflow.reverse", "tensorflow.to_int32", "tensorflow.to_int32"], "methods", ["None"], ["", "def", "_add_gt_image", "(", "self", ")", ":", "\n", "# add back mean", "\n", "    ", "image", "=", "self", ".", "_image", "+", "cfg", ".", "PIXEL_MEANS", "\n", "# BGR to RGB (opencv uses BGR)", "\n", "resized", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "image", ",", "tf", ".", "to_int32", "(", "self", ".", "_im_info", "[", ":", "2", "]", "/", "self", ".", "_im_info", "[", "2", "]", ")", ")", "\n", "self", ".", "_gt_image", "=", "tf", ".", "reverse", "(", "resized", ",", "axis", "=", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_gt_image_summary": [[49, 58], ["tensorflow.py_func", "tensorflow.py_func", "tensorflow.summary.image", "tensorflow.summary.image", "network.Network._add_gt_image"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_gt_image"], ["", "def", "_add_gt_image_summary", "(", "self", ")", ":", "\n", "# use a customized visualization function to visualize the boxes", "\n", "    ", "if", "self", ".", "_gt_image", "is", "None", ":", "\n", "      ", "self", ".", "_add_gt_image", "(", ")", "\n", "", "image", "=", "tf", ".", "py_func", "(", "draw_bounding_boxes", ",", "\n", "[", "self", ".", "_gt_image", ",", "self", ".", "_gt_boxes", ",", "self", ".", "_im_info", "]", ",", "\n", "tf", ".", "float32", ",", "name", "=", "\"gt_boxes\"", ")", "\n", "\n", "return", "tf", ".", "summary", ".", "image", "(", "'GROUND_TRUTH'", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_act_summary": [[59, 63], ["tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.nn.zero_fraction", "tensorflow.nn.zero_fraction"], "methods", ["None"], ["", "def", "_add_act_summary", "(", "self", ",", "tensor", ")", ":", "\n", "    ", "tf", ".", "summary", ".", "histogram", "(", "'ACT/'", "+", "tensor", ".", "op", ".", "name", "+", "'/activations'", ",", "tensor", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'ACT/'", "+", "tensor", ".", "op", ".", "name", "+", "'/zero_fraction'", ",", "\n", "tf", ".", "nn", ".", "zero_fraction", "(", "tensor", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_score_summary": [[64, 66], ["tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["None"], ["", "def", "_add_score_summary", "(", "self", ",", "key", ",", "tensor", ")", ":", "\n", "    ", "tf", ".", "summary", ".", "histogram", "(", "'SCORE/'", "+", "tensor", ".", "op", ".", "name", "+", "'/'", "+", "key", "+", "'/scores'", ",", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_train_summary": [[67, 69], ["tensorflow.summary.histogram", "tensorflow.summary.histogram"], "methods", ["None"], ["", "def", "_add_train_summary", "(", "self", ",", "var", ")", ":", "\n", "    ", "tf", ".", "summary", ".", "histogram", "(", "'TRAIN/'", "+", "var", ".", "op", ".", "name", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._reshape_layer": [[70, 81], ["tensorflow.shape", "tensorflow.shape", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.concat", "tensorflow.concat"], "methods", ["None"], ["", "def", "_reshape_layer", "(", "self", ",", "bottom", ",", "num_dim", ",", "name", ")", ":", "\n", "    ", "input_shape", "=", "tf", ".", "shape", "(", "bottom", ")", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "# change the channel to the caffe format", "\n", "      ", "to_caffe", "=", "tf", ".", "transpose", "(", "bottom", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "# then force it to have channel 2", "\n", "reshaped", "=", "tf", ".", "reshape", "(", "to_caffe", ",", "\n", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "[", "1", ",", "num_dim", ",", "-", "1", "]", ",", "[", "input_shape", "[", "2", "]", "]", "]", ")", ")", "\n", "# then swap the channel back", "\n", "to_tf", "=", "tf", ".", "transpose", "(", "reshaped", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "return", "to_tf", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._softmax_layer": [[82, 89], ["name.startswith", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.shape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["None"], ["", "", "def", "_softmax_layer", "(", "self", ",", "bottom", ",", "name", ")", ":", "\n", "    ", "if", "name", ".", "startswith", "(", "'rpn_cls_prob_reshape'", ")", ":", "\n", "      ", "input_shape", "=", "tf", ".", "shape", "(", "bottom", ")", "\n", "bottom_reshaped", "=", "tf", ".", "reshape", "(", "bottom", ",", "[", "-", "1", ",", "input_shape", "[", "-", "1", "]", "]", ")", "\n", "reshaped_score", "=", "tf", ".", "nn", ".", "softmax", "(", "bottom_reshaped", ",", "name", "=", "name", ")", "\n", "return", "tf", ".", "reshape", "(", "reshaped_score", ",", "input_shape", ")", "\n", "", "return", "tf", ".", "nn", ".", "softmax", "(", "bottom", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._proposal_top_layer": [[90, 100], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.py_func", "tensorflow.py_func", "rois.set_shape", "rpn_scores.set_shape"], "methods", ["None"], ["", "def", "_proposal_top_layer", "(", "self", ",", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "name", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "      ", "rois", ",", "rpn_scores", "=", "tf", ".", "py_func", "(", "proposal_top_layer", ",", "\n", "[", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "self", ".", "_im_info", ",", "\n", "self", ".", "_feat_stride", ",", "self", ".", "_anchors", ",", "self", ".", "_num_anchors", "]", ",", "\n", "[", "tf", ".", "float32", ",", "tf", ".", "float32", "]", ",", "name", "=", "\"proposal_top\"", ")", "\n", "rois", ".", "set_shape", "(", "[", "cfg", ".", "TEST", ".", "RPN_TOP_N", ",", "5", "]", ")", "\n", "rpn_scores", ".", "set_shape", "(", "[", "cfg", ".", "TEST", ".", "RPN_TOP_N", ",", "1", "]", ")", "\n", "\n", "", "return", "rois", ",", "rpn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._proposal_layer": [[101, 111], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.py_func", "tensorflow.py_func", "rois.set_shape", "rpn_scores.set_shape"], "methods", ["None"], ["", "def", "_proposal_layer", "(", "self", ",", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "name", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "      ", "rois", ",", "rpn_scores", "=", "tf", ".", "py_func", "(", "proposal_layer", ",", "\n", "[", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "self", ".", "_im_info", ",", "self", ".", "_mode", ",", "\n", "self", ".", "_feat_stride", ",", "self", ".", "_anchors", ",", "self", ".", "_num_anchors", "]", ",", "\n", "[", "tf", ".", "float32", ",", "tf", ".", "float32", "]", ",", "name", "=", "\"proposal\"", ")", "# cfg_key = self._mode", "\n", "rois", ".", "set_shape", "(", "[", "None", ",", "5", "]", ")", "\n", "rpn_scores", ".", "set_shape", "(", "[", "None", ",", "1", "]", ")", "\n", "\n", "", "return", "rois", ",", "rpn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._proposal_layerTL": [[112, 122], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.py_func", "tensorflow.py_func", "rois.set_shape", "rpn_scores.set_shape"], "methods", ["None"], ["", "def", "_proposal_layerTL", "(", "self", ",", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "name", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "      ", "rois", ",", "rpn_scores", "=", "tf", ".", "py_func", "(", "proposal_layerTL", ",", "\n", "[", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "self", ".", "_im_info", ",", "self", ".", "_mode", ",", "\n", "self", ".", "_feat_stride", ",", "self", ".", "_anchors", ",", "self", ".", "_num_anchors", ",", "self", ".", "_nms_thresh", "]", ",", "\n", "[", "tf", ".", "float32", ",", "tf", ".", "float32", "]", ",", "name", "=", "\"proposal\"", ")", "# cfg_key = self._mode", "\n", "rois", ".", "set_shape", "(", "[", "None", ",", "5", "]", ")", "\n", "rpn_scores", ".", "set_shape", "(", "[", "None", ",", "1", "]", ")", "\n", "\n", "", "return", "rois", ",", "rpn_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._roi_pool_layer": [[124, 130], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.image.roi_pooling", "tensorflow.image.roi_pooling"], "methods", ["None"], ["", "def", "_roi_pool_layer", "(", "self", ",", "bootom", ",", "rois", ",", "name", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "      ", "return", "tf", ".", "image", ".", "roi_pooling", "(", "bootom", ",", "rois", ",", "\n", "pooled_height", "=", "cfg", ".", "POOLING_SIZE", ",", "\n", "pooled_width", "=", "cfg", ".", "POOLING_SIZE", ",", "\n", "spatial_scale", "=", "1.", "/", "16.", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._crop_pool_layer": [[131, 148], ["tensorflow.max_pool2d", "tensorflow.max_pool2d", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.shape", "tensorflow.shape", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.image.crop_and_resize", "tensorflow.image.crop_and_resize", "tensorflow.slice", "tensorflow.slice", "numpy.float32", "numpy.float32", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float"], "methods", ["None"], ["", "", "def", "_crop_pool_layer", "(", "self", ",", "bottom", ",", "rois", ",", "name", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "      ", "batch_ids", "=", "tf", ".", "squeeze", "(", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"batch_id\"", ")", ",", "[", "1", "]", ")", "\n", "# Get the normalized coordinates of bounding boxes", "\n", "bottom_shape", "=", "tf", ".", "shape", "(", "bottom", ")", "\n", "height", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "1", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "_feat_stride", "[", "0", "]", ")", "\n", "width", "=", "(", "tf", ".", "to_float", "(", "bottom_shape", "[", "2", "]", ")", "-", "1.", ")", "*", "np", ".", "float32", "(", "self", ".", "_feat_stride", "[", "0", "]", ")", "\n", "x1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x1\"", ")", "/", "width", "\n", "y1", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "2", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y1\"", ")", "/", "height", "\n", "x2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "3", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"x2\"", ")", "/", "width", "\n", "y2", "=", "tf", ".", "slice", "(", "rois", ",", "[", "0", ",", "4", "]", ",", "[", "-", "1", ",", "1", "]", ",", "name", "=", "\"y2\"", ")", "/", "height", "\n", "# Won't be back-propagated to rois anyway, but to save time", "\n", "bboxes", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "concat", "(", "[", "y1", ",", "x1", ",", "y2", ",", "x2", "]", ",", "axis", "=", "1", ")", ")", "\n", "pre_pool_size", "=", "cfg", ".", "POOLING_SIZE", "*", "2", "\n", "crops", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "bottom", ",", "bboxes", ",", "tf", ".", "to_int32", "(", "batch_ids", ")", ",", "[", "pre_pool_size", ",", "pre_pool_size", "]", ",", "name", "=", "\"crops\"", ")", "\n", "\n", "", "return", "slim", ".", "max_pool2d", "(", "crops", ",", "[", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._dropout_layer": [[149, 151], ["tensorflow.nn.dropout", "tensorflow.nn.dropout"], "methods", ["None"], ["", "def", "_dropout_layer", "(", "self", ",", "bottom", ",", "name", ",", "ratio", "=", "0.5", ")", ":", "\n", "    ", "return", "tf", ".", "nn", ".", "dropout", "(", "bottom", ",", "ratio", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._anchor_target_layer": [[152, 174], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.py_func", "tensorflow.py_func", "tensorflow.to_int32.set_shape", "rpn_bbox_targets.set_shape", "rpn_bbox_inside_weights.set_shape", "rpn_bbox_outside_weights.set_shape", "tensorflow.to_int32", "tensorflow.to_int32", "network.Network._score_summaries.update"], "methods", ["None"], ["", "def", "_anchor_target_layer", "(", "self", ",", "rpn_cls_score", ",", "name", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "      ", "rpn_labels", ",", "rpn_bbox_targets", ",", "rpn_bbox_inside_weights", ",", "rpn_bbox_outside_weights", "=", "tf", ".", "py_func", "(", "\n", "anchor_target_layer", ",", "\n", "[", "rpn_cls_score", ",", "self", ".", "_gt_boxes", ",", "self", ".", "_im_info", ",", "self", ".", "_feat_stride", ",", "self", ".", "_anchors", ",", "self", ".", "_num_anchors", "]", ",", "\n", "[", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", "]", ",", "\n", "name", "=", "\"anchor_target\"", ")", "\n", "\n", "rpn_labels", ".", "set_shape", "(", "[", "1", ",", "1", ",", "None", ",", "None", "]", ")", "\n", "rpn_bbox_targets", ".", "set_shape", "(", "[", "1", ",", "None", ",", "None", ",", "self", ".", "_num_anchors", "*", "4", "]", ")", "\n", "rpn_bbox_inside_weights", ".", "set_shape", "(", "[", "1", ",", "None", ",", "None", ",", "self", ".", "_num_anchors", "*", "4", "]", ")", "\n", "rpn_bbox_outside_weights", ".", "set_shape", "(", "[", "1", ",", "None", ",", "None", ",", "self", ".", "_num_anchors", "*", "4", "]", ")", "\n", "\n", "rpn_labels", "=", "tf", ".", "to_int32", "(", "rpn_labels", ",", "name", "=", "\"to_int32\"", ")", "\n", "self", ".", "_anchor_targets", "[", "'rpn_labels'", "]", "=", "rpn_labels", "\n", "self", ".", "_anchor_targets", "[", "'rpn_bbox_targets'", "]", "=", "rpn_bbox_targets", "\n", "self", ".", "_anchor_targets", "[", "'rpn_bbox_inside_weights'", "]", "=", "rpn_bbox_inside_weights", "\n", "self", ".", "_anchor_targets", "[", "'rpn_bbox_outside_weights'", "]", "=", "rpn_bbox_outside_weights", "\n", "\n", "self", ".", "_score_summaries", ".", "update", "(", "self", ".", "_anchor_targets", ")", "\n", "\n", "", "return", "rpn_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._proposal_target_layer": [[175, 199], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.py_func", "tensorflow.py_func", "rois.set_shape", "roi_scores.set_shape", "labels.set_shape", "bbox_targets.set_shape", "bbox_inside_weights.set_shape", "bbox_outside_weights.set_shape", "tensorflow.to_int32", "tensorflow.to_int32", "network.Network._score_summaries.update"], "methods", ["None"], ["", "def", "_proposal_target_layer", "(", "self", ",", "rois", ",", "roi_scores", ",", "name", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "      ", "rois", ",", "roi_scores", ",", "labels", ",", "bbox_targets", ",", "bbox_inside_weights", ",", "bbox_outside_weights", "=", "tf", ".", "py_func", "(", "\n", "proposal_target_layer", ",", "\n", "[", "rois", ",", "roi_scores", ",", "self", ".", "_gt_boxes", ",", "self", ".", "_num_classes", "]", ",", "\n", "[", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", "]", ",", "\n", "name", "=", "\"proposal_target\"", ")", "\n", "\n", "rois", ".", "set_shape", "(", "[", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "5", "]", ")", "\n", "roi_scores", ".", "set_shape", "(", "[", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "]", ")", "\n", "labels", ".", "set_shape", "(", "[", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "1", "]", ")", "\n", "bbox_targets", ".", "set_shape", "(", "[", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "self", ".", "_num_classes", "*", "4", "]", ")", "\n", "bbox_inside_weights", ".", "set_shape", "(", "[", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "self", ".", "_num_classes", "*", "4", "]", ")", "\n", "bbox_outside_weights", ".", "set_shape", "(", "[", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "self", ".", "_num_classes", "*", "4", "]", ")", "\n", "\n", "self", ".", "_proposal_targets", "[", "'rois'", "]", "=", "rois", "\n", "self", ".", "_proposal_targets", "[", "'labels'", "]", "=", "tf", ".", "to_int32", "(", "labels", ",", "name", "=", "\"to_int32\"", ")", "\n", "self", ".", "_proposal_targets", "[", "'bbox_targets'", "]", "=", "bbox_targets", "\n", "self", ".", "_proposal_targets", "[", "'bbox_inside_weights'", "]", "=", "bbox_inside_weights", "\n", "self", ".", "_proposal_targets", "[", "'bbox_outside_weights'", "]", "=", "bbox_outside_weights", "\n", "\n", "self", ".", "_score_summaries", ".", "update", "(", "self", ".", "_proposal_targets", ")", "\n", "\n", "return", "rois", ",", "roi_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._anchor_component": [[200, 213], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.py_func", "tensorflow.py_func", "anchors.set_shape", "anchor_length.set_shape", "tensorflow.ceil", "tensorflow.ceil", "tensorflow.ceil", "tensorflow.ceil", "numpy.float32", "numpy.float32"], "methods", ["None"], ["", "", "def", "_anchor_component", "(", "self", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'ANCHOR_'", "+", "self", ".", "_tag", ")", "as", "scope", ":", "\n", "# just to get the shape right", "\n", "      ", "height", "=", "tf", ".", "to_int32", "(", "tf", ".", "ceil", "(", "self", ".", "_im_info", "[", "0", "]", "/", "np", ".", "float32", "(", "self", ".", "_feat_stride", "[", "0", "]", ")", ")", ")", "\n", "width", "=", "tf", ".", "to_int32", "(", "tf", ".", "ceil", "(", "self", ".", "_im_info", "[", "1", "]", "/", "np", ".", "float32", "(", "self", ".", "_feat_stride", "[", "0", "]", ")", ")", ")", "\n", "anchors", ",", "anchor_length", "=", "tf", ".", "py_func", "(", "generate_anchors_pre", ",", "\n", "[", "height", ",", "width", ",", "\n", "self", ".", "_feat_stride", ",", "self", ".", "_anchor_scales", ",", "self", ".", "_anchor_ratios", "]", ",", "\n", "[", "tf", ".", "float32", ",", "tf", ".", "int32", "]", ",", "name", "=", "\"generate_anchors\"", ")", "\n", "anchors", ".", "set_shape", "(", "[", "None", ",", "4", "]", ")", "\n", "anchor_length", ".", "set_shape", "(", "[", "]", ")", "\n", "self", ".", "_anchors", "=", "anchors", "\n", "self", ".", "_anchor_length", "=", "anchor_length", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._build_network_TL": [[214, 255], ["network.Network._image_to_head", "network.Network._score_summaries.update", "tensorflow.truncated_normal_initializer", "tensorflow.truncated_normal_initializer", "tensorflow.truncated_normal_initializer", "tensorflow.truncated_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.variable_scope", "tensorflow.variable_scope", "network.Network._anchor_component", "network.Network._region_proposal_TL", "network.Network._head_to_tail", "network.Network._head_to_tail", "tensorflow.variable_scope", "tensorflow.variable_scope", "network.Network._region_classification", "network.Network._crop_pool_layer"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1._image_to_head", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._anchor_component", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._region_proposal_TL", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1._head_to_tail", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1._head_to_tail", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._region_classification", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._crop_pool_layer"], ["", "", "def", "_build_network_TL", "(", "self", ",", "is_training", ",", "get_fc6", "=", "False", ")", ":", "\n", "# select initializers", "\n", "    ", "if", "cfg", ".", "TRAIN", ".", "TRUNCATED", ":", "\n", "      ", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ")", "\n", "initializer_bbox", "=", "tf", ".", "truncated_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.001", ")", "\n", "", "else", ":", "\n", "      ", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ")", "\n", "initializer_bbox", "=", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.001", ")", "\n", "\n", "", "net_conv", "=", "self", ".", "_image_to_head", "(", "is_training", ")", "# Convolutional network ", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "_scope", ",", "self", ".", "_scope", ")", ":", "\n", "# build the anchors for the image", "\n", "      ", "self", ".", "_anchor_component", "(", ")", "\n", "#      print('net_conv',net_conv.shape)", "\n", "# region proposal network", "\n", "rois", ",", "roi_scores", "=", "self", ".", "_region_proposal_TL", "(", "net_conv", ",", "is_training", ",", "initializer", ")", "\n", "#      print('rois',rois.shape)", "\n", "# region of interest pooling", "\n", "if", "cfg", ".", "POOLING_MODE", "==", "'crop'", ":", "\n", "        ", "pool5", "=", "self", ".", "_crop_pool_layer", "(", "net_conv", ",", "rois", ",", "\"pool5\"", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "", "if", "self", ".", "get_fc6", ":", "\n", "      ", "fc7", ",", "fc6", "=", "self", ".", "_head_to_tail", "(", "pool5", ",", "is_training", ")", "\n", "", "else", ":", "\n", "      ", "fc7", "=", "self", ".", "_head_to_tail", "(", "pool5", ",", "is_training", ")", "\n", "#    print('fc7',fc7.shape)", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "_scope", ",", "self", ".", "_scope", ")", ":", "\n", "# region classification", "\n", "      ", "cls_prob", ",", "bbox_pred", "=", "self", ".", "_region_classification", "(", "fc7", ",", "is_training", ",", "\n", "initializer", ",", "initializer_bbox", ")", "\n", "# This function predict the class of the rois and the dimension of the box", "\n", "# cls_score = slim.fully_connected(fc7", "\n", "\n", "", "self", ".", "_score_summaries", ".", "update", "(", "self", ".", "_predictions", ")", "\n", "\n", "if", "self", ".", "get_fc6", ":", "\n", "      ", "return", "rois", ",", "roi_scores", ",", "pool5", ",", "fc7", ",", "fc6", ",", "cls_prob", ",", "bbox_pred", "\n", "", "else", ":", "\n", "      ", "return", "rois", ",", "roi_scores", ",", "pool5", ",", "fc7", ",", "cls_prob", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._build_network": [[256, 289], ["network.Network._image_to_head", "network.Network._head_to_tail", "network.Network._score_summaries.update", "tensorflow.truncated_normal_initializer", "tensorflow.truncated_normal_initializer", "tensorflow.truncated_normal_initializer", "tensorflow.truncated_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.variable_scope", "tensorflow.variable_scope", "network.Network._anchor_component", "network.Network._region_proposal", "tensorflow.variable_scope", "tensorflow.variable_scope", "network.Network._region_classification", "network.Network._crop_pool_layer"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1._image_to_head", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1._head_to_tail", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._anchor_component", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._region_proposal", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._region_classification", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._crop_pool_layer"], ["", "", "def", "_build_network", "(", "self", ",", "is_training", "=", "True", ")", ":", "\n", "# select initializers", "\n", "    ", "if", "cfg", ".", "TRAIN", ".", "TRUNCATED", ":", "\n", "      ", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ")", "\n", "initializer_bbox", "=", "tf", ".", "truncated_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.001", ")", "\n", "", "else", ":", "\n", "      ", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ")", "\n", "initializer_bbox", "=", "tf", ".", "random_normal_initializer", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.001", ")", "\n", "\n", "", "net_conv", "=", "self", ".", "_image_to_head", "(", "is_training", ")", "# Convolutional network ", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "_scope", ",", "self", ".", "_scope", ")", ":", "\n", "# build the anchors for the image", "\n", "      ", "self", ".", "_anchor_component", "(", ")", "\n", "# region proposal network", "\n", "rois", "=", "self", ".", "_region_proposal", "(", "net_conv", ",", "is_training", ",", "initializer", ")", "\n", "# region of interest pooling", "\n", "if", "cfg", ".", "POOLING_MODE", "==", "'crop'", ":", "\n", "        ", "pool5", "=", "self", ".", "_crop_pool_layer", "(", "net_conv", ",", "rois", ",", "\"pool5\"", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "", "fc7", "=", "self", ".", "_head_to_tail", "(", "pool5", ",", "is_training", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "_scope", ",", "self", ".", "_scope", ")", ":", "\n", "# region classification", "\n", "      ", "cls_prob", ",", "bbox_pred", "=", "self", ".", "_region_classification", "(", "fc7", ",", "is_training", ",", "\n", "initializer", ",", "initializer_bbox", ")", "\n", "# This function predict the class of the rois and the dimension of the box", "\n", "# cls_score = slim.fully_connected(fc7", "\n", "\n", "", "self", ".", "_score_summaries", ".", "update", "(", "self", ".", "_predictions", ")", "\n", "\n", "return", "rois", ",", "cls_prob", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._smooth_l1_loss": [[290, 304], ["tensorflow.abs", "tensorflow.abs", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.less", "tensorflow.less", "tensorflow.pow", "tensorflow.pow"], "methods", ["None"], ["", "def", "_smooth_l1_loss", "(", "self", ",", "bbox_pred", ",", "bbox_targets", ",", "bbox_inside_weights", ",", "bbox_outside_weights", ",", "sigma", "=", "1.0", ",", "dim", "=", "[", "1", "]", ")", ":", "\n", "    ", "sigma_2", "=", "sigma", "**", "2", "\n", "box_diff", "=", "bbox_pred", "-", "bbox_targets", "\n", "in_box_diff", "=", "bbox_inside_weights", "*", "box_diff", "\n", "abs_in_box_diff", "=", "tf", ".", "abs", "(", "in_box_diff", ")", "\n", "smoothL1_sign", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "to_float", "(", "tf", ".", "less", "(", "abs_in_box_diff", ",", "1.", "/", "sigma_2", ")", ")", ")", "\n", "in_loss_box", "=", "tf", ".", "pow", "(", "in_box_diff", ",", "2", ")", "*", "(", "sigma_2", "/", "2.", ")", "*", "smoothL1_sign", "+", "(", "abs_in_box_diff", "-", "(", "0.5", "/", "sigma_2", ")", ")", "*", "(", "1.", "-", "smoothL1_sign", ")", "\n", "out_loss_box", "=", "bbox_outside_weights", "*", "in_loss_box", "\n", "loss_box", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "\n", "out_loss_box", ",", "\n", "axis", "=", "dim", "\n", ")", ")", "\n", "return", "loss_box", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_losses": [[305, 348], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.where", "tensorflow.where", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "network.Network._smooth_l1_loss", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "network.Network._smooth_l1_loss", "tensorflow.add_n", "tensorflow.add_n", "network.Network._event_summaries.update", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.losses.get_regularization_losses", "tensorflow.losses.get_regularization_losses"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._smooth_l1_loss", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._smooth_l1_loss"], ["", "def", "_add_losses", "(", "self", ",", "sigma_rpn", "=", "3.0", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'LOSS_'", "+", "self", ".", "_tag", ")", "as", "scope", ":", "\n", "# RPN, class loss", "\n", "      ", "rpn_cls_score", "=", "tf", ".", "reshape", "(", "self", ".", "_predictions", "[", "'rpn_cls_score_reshape'", "]", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "rpn_label", "=", "tf", ".", "reshape", "(", "self", ".", "_anchor_targets", "[", "'rpn_labels'", "]", ",", "[", "-", "1", "]", ")", "\n", "rpn_select", "=", "tf", ".", "where", "(", "tf", ".", "not_equal", "(", "rpn_label", ",", "-", "1", ")", ")", "\n", "rpn_cls_score", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "rpn_cls_score", ",", "rpn_select", ")", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "rpn_label", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "rpn_label", ",", "rpn_select", ")", ",", "[", "-", "1", "]", ")", "\n", "rpn_cross_entropy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "rpn_cls_score", ",", "labels", "=", "rpn_label", ")", ")", "\n", "\n", "# RPN, bbox loss", "\n", "rpn_bbox_pred", "=", "self", ".", "_predictions", "[", "'rpn_bbox_pred'", "]", "\n", "rpn_bbox_targets", "=", "self", ".", "_anchor_targets", "[", "'rpn_bbox_targets'", "]", "\n", "rpn_bbox_inside_weights", "=", "self", ".", "_anchor_targets", "[", "'rpn_bbox_inside_weights'", "]", "\n", "rpn_bbox_outside_weights", "=", "self", ".", "_anchor_targets", "[", "'rpn_bbox_outside_weights'", "]", "\n", "rpn_loss_box", "=", "self", ".", "_smooth_l1_loss", "(", "rpn_bbox_pred", ",", "rpn_bbox_targets", ",", "rpn_bbox_inside_weights", ",", "\n", "rpn_bbox_outside_weights", ",", "sigma", "=", "sigma_rpn", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "# RCNN, class loss", "\n", "cls_score", "=", "self", ".", "_predictions", "[", "\"cls_score\"", "]", "\n", "label", "=", "tf", ".", "reshape", "(", "self", ".", "_proposal_targets", "[", "\"labels\"", "]", ",", "[", "-", "1", "]", ")", "\n", "cross_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "cls_score", ",", "labels", "=", "label", ")", ")", "\n", "\n", "# RCNN, bbox loss", "\n", "bbox_pred", "=", "self", ".", "_predictions", "[", "'bbox_pred'", "]", "\n", "bbox_targets", "=", "self", ".", "_proposal_targets", "[", "'bbox_targets'", "]", "\n", "bbox_inside_weights", "=", "self", ".", "_proposal_targets", "[", "'bbox_inside_weights'", "]", "\n", "bbox_outside_weights", "=", "self", ".", "_proposal_targets", "[", "'bbox_outside_weights'", "]", "\n", "loss_box", "=", "self", ".", "_smooth_l1_loss", "(", "bbox_pred", ",", "bbox_targets", ",", "bbox_inside_weights", ",", "bbox_outside_weights", ")", "\n", "\n", "self", ".", "_losses", "[", "'cross_entropy'", "]", "=", "cross_entropy", "\n", "self", ".", "_losses", "[", "'loss_box'", "]", "=", "loss_box", "\n", "self", ".", "_losses", "[", "'rpn_cross_entropy'", "]", "=", "rpn_cross_entropy", "\n", "self", ".", "_losses", "[", "'rpn_loss_box'", "]", "=", "rpn_loss_box", "\n", "\n", "loss", "=", "cross_entropy", "+", "loss_box", "+", "rpn_cross_entropy", "+", "rpn_loss_box", "\n", "regularization_loss", "=", "tf", ".", "add_n", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", ",", "'regu'", ")", "\n", "self", ".", "_losses", "[", "'total_loss'", "]", "=", "loss", "+", "regularization_loss", "\n", "\n", "self", ".", "_event_summaries", ".", "update", "(", "self", ".", "_losses", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._region_proposal": [[349, 387], ["tensorflow.conv2d", "tensorflow.conv2d", "network.Network._act_summaries.append", "tensorflow.conv2d", "tensorflow.conv2d", "network.Network._reshape_layer", "network.Network._softmax_layer", "tensorflow.argmax", "tensorflow.argmax", "network.Network._reshape_layer", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.reshape", "tensorflow.reshape", "network.Network._proposal_layer", "network.Network._anchor_target_layer", "tensorflow.control_dependencies", "tensorflow.control_dependencies", "network.Network._proposal_target_layer", "network.Network._proposal_layer", "network.Network._proposal_top_layer"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._reshape_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._softmax_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._reshape_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._proposal_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._anchor_target_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._proposal_target_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._proposal_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._proposal_top_layer"], ["", "def", "_region_proposal", "(", "self", ",", "net_conv", ",", "is_training", ",", "initializer", ")", ":", "\n", "    ", "rpn", "=", "slim", ".", "conv2d", "(", "net_conv", ",", "cfg", ".", "RPN_CHANNELS", ",", "[", "3", ",", "3", "]", ",", "trainable", "=", "is_training", ",", "weights_initializer", "=", "initializer", ",", "\n", "scope", "=", "\"rpn_conv/3x3\"", ")", "\n", "self", ".", "_act_summaries", ".", "append", "(", "rpn", ")", "\n", "# rpn_cls_score object or not", "\n", "rpn_cls_score", "=", "slim", ".", "conv2d", "(", "rpn", ",", "self", ".", "_num_anchors", "*", "2", ",", "[", "1", ",", "1", "]", ",", "trainable", "=", "is_training", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'rpn_cls_score'", ")", "\n", "# change it so that the score has 2 as its channel size", "\n", "rpn_cls_score_reshape", "=", "self", ".", "_reshape_layer", "(", "rpn_cls_score", ",", "2", ",", "'rpn_cls_score_reshape'", ")", "\n", "rpn_cls_prob_reshape", "=", "self", ".", "_softmax_layer", "(", "rpn_cls_score_reshape", ",", "\"rpn_cls_prob_reshape\"", ")", "\n", "rpn_cls_pred", "=", "tf", ".", "argmax", "(", "tf", ".", "reshape", "(", "rpn_cls_score_reshape", ",", "[", "-", "1", ",", "2", "]", ")", ",", "axis", "=", "1", ",", "name", "=", "\"rpn_cls_pred\"", ")", "\n", "rpn_cls_prob", "=", "self", ".", "_reshape_layer", "(", "rpn_cls_prob_reshape", ",", "self", ".", "_num_anchors", "*", "2", ",", "\"rpn_cls_prob\"", ")", "\n", "rpn_bbox_pred", "=", "slim", ".", "conv2d", "(", "rpn", ",", "self", ".", "_num_anchors", "*", "4", ",", "[", "1", ",", "1", "]", ",", "trainable", "=", "is_training", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'rpn_bbox_pred'", ")", "\n", "if", "is_training", ":", "\n", "      ", "rois", ",", "roi_scores", "=", "self", ".", "_proposal_layer", "(", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "\"rois\"", ")", "\n", "rpn_labels", "=", "self", ".", "_anchor_target_layer", "(", "rpn_cls_score", ",", "\"anchor\"", ")", "\n", "# Try to have a deterministic order for the computing graph, for reproducibility", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "rpn_labels", "]", ")", ":", "\n", "        ", "rois", ",", "roi_scores", "=", "self", ".", "_proposal_target_layer", "(", "rois", ",", "roi_scores", ",", "\"rpn_rois\"", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "cfg", ".", "TEST", ".", "MODE", "==", "'nms'", ":", "\n", "        ", "rois", ",", "roi_scores", "=", "self", ".", "_proposal_layer", "(", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "\"rois\"", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "MODE", "==", "'top'", ":", "\n", "        ", "rois", ",", "roi_scores", "=", "self", ".", "_proposal_top_layer", "(", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "\"rois\"", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "", "self", ".", "_predictions", "[", "\"rpn_cls_score\"", "]", "=", "rpn_cls_score", "\n", "self", ".", "_predictions", "[", "\"rpn_cls_score_reshape\"", "]", "=", "rpn_cls_score_reshape", "\n", "self", ".", "_predictions", "[", "\"rpn_cls_prob\"", "]", "=", "rpn_cls_prob", "\n", "self", ".", "_predictions", "[", "\"rpn_cls_pred\"", "]", "=", "rpn_cls_pred", "\n", "self", ".", "_predictions", "[", "\"rpn_bbox_pred\"", "]", "=", "rpn_bbox_pred", "\n", "self", ".", "_predictions", "[", "\"rois\"", "]", "=", "rois", "\n", "\n", "return", "rois", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._region_proposal_TL": [[388, 428], ["tensorflow.conv2d", "tensorflow.conv2d", "network.Network._act_summaries.append", "tensorflow.conv2d", "tensorflow.conv2d", "network.Network._reshape_layer", "network.Network._softmax_layer", "tensorflow.argmax", "tensorflow.argmax", "network.Network._reshape_layer", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.reshape", "tensorflow.reshape", "network.Network._proposal_layer", "network.Network._anchor_target_layer", "tensorflow.control_dependencies", "tensorflow.control_dependencies", "network.Network._proposal_target_layer", "network.Network._proposal_layerTL", "network.Network._proposal_top_layer"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._reshape_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._softmax_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._reshape_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._proposal_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._anchor_target_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._proposal_target_layer", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._proposal_layerTL", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._proposal_top_layer"], ["", "def", "_region_proposal_TL", "(", "self", ",", "net_conv", ",", "is_training", ",", "initializer", ")", ":", "\n", "# Here ! print('net_conv',tf.shape(net_conv))", "\n", "    ", "rpn", "=", "slim", ".", "conv2d", "(", "net_conv", ",", "cfg", ".", "RPN_CHANNELS", ",", "[", "3", ",", "3", "]", ",", "trainable", "=", "is_training", ",", "weights_initializer", "=", "initializer", ",", "\n", "scope", "=", "\"rpn_conv/3x3\"", ")", "\n", "self", ".", "_act_summaries", ".", "append", "(", "rpn", ")", "\n", "# rpn_cls_score object or not", "\n", "rpn_cls_score", "=", "slim", ".", "conv2d", "(", "rpn", ",", "self", ".", "_num_anchors", "*", "2", ",", "[", "1", ",", "1", "]", ",", "trainable", "=", "is_training", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'rpn_cls_score'", ")", "\n", "# change it so that the score has 2 as its channel size", "\n", "rpn_cls_score_reshape", "=", "self", ".", "_reshape_layer", "(", "rpn_cls_score", ",", "2", ",", "'rpn_cls_score_reshape'", ")", "\n", "rpn_cls_prob_reshape", "=", "self", ".", "_softmax_layer", "(", "rpn_cls_score_reshape", ",", "\"rpn_cls_prob_reshape\"", ")", "\n", "rpn_cls_pred", "=", "tf", ".", "argmax", "(", "tf", ".", "reshape", "(", "rpn_cls_score_reshape", ",", "[", "-", "1", ",", "2", "]", ")", ",", "axis", "=", "1", ",", "name", "=", "\"rpn_cls_pred\"", ")", "\n", "rpn_cls_prob", "=", "self", ".", "_reshape_layer", "(", "rpn_cls_prob_reshape", ",", "self", ".", "_num_anchors", "*", "2", ",", "\"rpn_cls_prob\"", ")", "\n", "rpn_bbox_pred", "=", "slim", ".", "conv2d", "(", "rpn", ",", "self", ".", "_num_anchors", "*", "4", ",", "[", "1", ",", "1", "]", ",", "trainable", "=", "is_training", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'rpn_bbox_pred'", ")", "\n", "if", "is_training", ":", "\n", "      ", "rois", ",", "roi_scores", "=", "self", ".", "_proposal_layer", "(", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "\"rois\"", ")", "\n", "rpn_labels", "=", "self", ".", "_anchor_target_layer", "(", "rpn_cls_score", ",", "\"anchor\"", ")", "\n", "# Try to have a deterministic order for the computing graph, for reproducibility", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "rpn_labels", "]", ")", ":", "\n", "        ", "rois", ",", "roi_scores", "=", "self", ".", "_proposal_target_layer", "(", "rois", ",", "roi_scores", ",", "\"rpn_rois\"", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "cfg", ".", "TEST", ".", "MODE", "==", "'nms'", ":", "\n", "        ", "rois", ",", "roi_scores", "=", "self", ".", "_proposal_layerTL", "(", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "\"rois\"", ")", "\n", "", "elif", "cfg", ".", "TEST", ".", "MODE", "==", "'top'", ":", "\n", "        ", "rois", ",", "roi_scores", "=", "self", ".", "_proposal_top_layer", "(", "rpn_cls_prob", ",", "rpn_bbox_pred", ",", "\"rois\"", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "", "self", ".", "_predictions", "[", "\"rpn_cls_score\"", "]", "=", "rpn_cls_score", "\n", "self", ".", "_predictions", "[", "\"rpn_cls_score_reshape\"", "]", "=", "rpn_cls_score_reshape", "\n", "self", ".", "_predictions", "[", "\"rpn_cls_prob\"", "]", "=", "rpn_cls_prob", "\n", "self", ".", "_predictions", "[", "\"rpn_cls_pred\"", "]", "=", "rpn_cls_pred", "\n", "self", ".", "_predictions", "[", "\"rpn_bbox_pred\"", "]", "=", "rpn_bbox_pred", "\n", "self", ".", "_predictions", "[", "\"rois\"", "]", "=", "rois", "\n", "self", ".", "_predictions", "[", "\"roi_scores\"", "]", "=", "roi_scores", "\n", "\n", "return", "rois", ",", "roi_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._region_classification": [[429, 447], ["tensorflow.fully_connected", "tensorflow.fully_connected", "network.Network._softmax_layer", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.fully_connected", "tensorflow.fully_connected"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._softmax_layer"], ["", "def", "_region_classification", "(", "self", ",", "fc7", ",", "is_training", ",", "initializer", ",", "initializer_bbox", ")", ":", "\n", "    ", "cls_score", "=", "slim", ".", "fully_connected", "(", "fc7", ",", "self", ".", "_num_classes", ",", "\n", "weights_initializer", "=", "initializer", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'cls_score'", ")", "\n", "cls_prob", "=", "self", ".", "_softmax_layer", "(", "cls_score", ",", "\"cls_prob\"", ")", "\n", "cls_pred", "=", "tf", ".", "argmax", "(", "cls_score", ",", "axis", "=", "1", ",", "name", "=", "\"cls_pred\"", ")", "\n", "bbox_pred", "=", "slim", ".", "fully_connected", "(", "fc7", ",", "self", ".", "_num_classes", "*", "4", ",", "\n", "weights_initializer", "=", "initializer_bbox", ",", "\n", "trainable", "=", "is_training", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'bbox_pred'", ")", "\n", "\n", "self", ".", "_predictions", "[", "\"cls_score\"", "]", "=", "cls_score", "\n", "self", ".", "_predictions", "[", "\"cls_pred\"", "]", "=", "cls_pred", "\n", "self", ".", "_predictions", "[", "\"cls_prob\"", "]", "=", "cls_prob", "\n", "self", ".", "_predictions", "[", "\"bbox_pred\"", "]", "=", "bbox_pred", "\n", "\n", "return", "cls_prob", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._image_to_head": [[448, 450], ["None"], "methods", ["None"], ["", "def", "_image_to_head", "(", "self", ",", "is_training", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._head_to_tail": [[451, 454], ["print"], "methods", ["None"], ["", "def", "_head_to_tail", "(", "self", ",", "pool5", ",", "is_training", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "print", "(", "'In head to tail'", ")", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.create_architecture": [[455, 569], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "len", "len", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "layers_to_output.update", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "layers_to_output.update", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "network.Network._build_network", "network.Network._train_summaries.append", "numpy.tile", "numpy.tile", "network.Network._add_losses", "layers_to_output.update", "tensorflow.summary.merge_all", "tensorflow.summary.merge_all", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.contrib.slim.arg_scope", "tensorflow.contrib.slim.arg_scope", "network.Network._build_network_TL", "network.Network._train_summaries.append", "numpy.tile", "numpy.tile", "network.Network._add_losses", "layers_to_output.update", "tensorflow.summary.merge_all", "tensorflow.summary.merge_all", "tensorflow.summary.merge", "tensorflow.summary.merge", "numpy.array", "numpy.array", "tensorflow.device", "tensorflow.device", "val_summaries.append", "network.Network._event_summaries.items", "network.Network._score_summaries.items", "numpy.array", "numpy.array", "tensorflow.device", "tensorflow.device", "val_summaries.append", "network.Network._event_summaries.items", "network.Network._score_summaries.items", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "network.Network._add_gt_image_summary", "val_summaries.append", "network.Network._add_score_summary", "network.Network._add_act_summary", "network.Network._add_train_summary", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "network.Network._add_gt_image_summary", "val_summaries.append", "network.Network._add_score_summary", "network.Network._add_act_summary", "network.Network._add_train_summary", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._build_network", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_losses", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._build_network_TL", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_losses", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_gt_image_summary", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_score_summary", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_act_summary", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_train_summary", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_gt_image_summary", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_score_summary", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_act_summary", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network._add_train_summary"], ["", "def", "create_architecture", "(", "self", ",", "mode", ",", "num_classes", ",", "tag", "=", "None", ",", "\n", "anchor_scales", "=", "(", "8", ",", "16", ",", "32", ")", ",", "anchor_ratios", "=", "(", "0.5", ",", "1", ",", "2", ")", ",", "modeTL", "=", "False", ",", "nms_thresh", "=", "0.7", ")", ":", "\n", "    ", "self", ".", "_image", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "1", ",", "None", ",", "None", ",", "3", "]", ")", "\n", "self", ".", "_im_info", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "3", "]", ")", "\n", "self", ".", "_gt_boxes", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "5", "]", ")", "\n", "self", ".", "_tag", "=", "tag", "\n", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "_mode", "=", "mode", "\n", "self", ".", "_anchor_scales", "=", "anchor_scales", "\n", "self", ".", "_num_scales", "=", "len", "(", "anchor_scales", ")", "\n", "\n", "self", ".", "_anchor_ratios", "=", "anchor_ratios", "\n", "self", ".", "_num_ratios", "=", "len", "(", "anchor_ratios", ")", "\n", "\n", "self", ".", "_num_anchors", "=", "self", ".", "_num_scales", "*", "self", ".", "_num_ratios", "\n", "\n", "training", "=", "mode", "==", "'TRAIN'", "\n", "testing", "=", "mode", "==", "'TEST'", "\n", "\n", "assert", "tag", "!=", "None", "\n", "\n", "# handle most of the regularizers here", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "if", "cfg", ".", "TRAIN", ".", "BIAS_DECAY", ":", "\n", "      ", "biases_regularizer", "=", "weights_regularizer", "\n", "", "else", ":", "\n", "      ", "biases_regularizer", "=", "tf", ".", "no_regularizer", "\n", "\n", "# list as many types of layers as possible, even if they are not used now", "\n", "", "if", "not", "(", "modeTL", ")", ":", "\n", "        ", "with", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "conv2d_in_plane", ",", "slim", ".", "conv2d_transpose", ",", "slim", ".", "separable_conv2d", ",", "slim", ".", "fully_connected", "]", ",", "\n", "weights_regularizer", "=", "weights_regularizer", ",", "\n", "biases_regularizer", "=", "biases_regularizer", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", ":", "\n", "          ", "rois", ",", "cls_prob", ",", "bbox_pred", "=", "self", ".", "_build_network", "(", "training", ")", "\n", "\n", "", "layers_to_output", "=", "{", "'rois'", ":", "rois", "}", "\n", "\n", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "          ", "self", ".", "_train_summaries", ".", "append", "(", "var", ")", "\n", "\n", "", "if", "testing", ":", "\n", "          ", "stds", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_STDS", ")", ",", "(", "self", ".", "_num_classes", ")", ")", "\n", "means", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_MEANS", ")", ",", "(", "self", ".", "_num_classes", ")", ")", "\n", "self", ".", "_predictions", "[", "\"bbox_pred\"", "]", "*=", "stds", "\n", "self", ".", "_predictions", "[", "\"bbox_pred\"", "]", "+=", "means", "\n", "", "else", ":", "\n", "          ", "self", ".", "_add_losses", "(", ")", "\n", "layers_to_output", ".", "update", "(", "self", ".", "_losses", ")", "\n", "\n", "val_summaries", "=", "[", "]", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "            ", "val_summaries", ".", "append", "(", "self", ".", "_add_gt_image_summary", "(", ")", ")", "\n", "for", "key", ",", "var", "in", "self", ".", "_event_summaries", ".", "items", "(", ")", ":", "\n", "              ", "val_summaries", ".", "append", "(", "tf", ".", "summary", ".", "scalar", "(", "key", ",", "var", ")", ")", "\n", "", "for", "key", ",", "var", "in", "self", ".", "_score_summaries", ".", "items", "(", ")", ":", "\n", "              ", "self", ".", "_add_score_summary", "(", "key", ",", "var", ")", "\n", "", "for", "var", "in", "self", ".", "_act_summaries", ":", "\n", "              ", "self", ".", "_add_act_summary", "(", "var", ")", "\n", "", "for", "var", "in", "self", ".", "_train_summaries", ":", "\n", "              ", "self", ".", "_add_train_summary", "(", "var", ")", "\n", "\n", "", "", "self", ".", "_summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "_summary_op_val", "=", "tf", ".", "summary", ".", "merge", "(", "val_summaries", ")", "\n", "\n", "", "layers_to_output", ".", "update", "(", "self", ".", "_predictions", ")", "\n", "", "else", ":", "\n", "# Transfer Learning case", "\n", "        ", "testing", "=", "True", "\n", "with", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "conv2d_in_plane", ",", "slim", ".", "conv2d_transpose", ",", "slim", ".", "separable_conv2d", ",", "slim", ".", "fully_connected", "]", ",", "\n", "weights_regularizer", "=", "weights_regularizer", ",", "\n", "biases_regularizer", "=", "biases_regularizer", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", ":", "\n", "          ", "self", ".", "_nms_thresh", "=", "nms_thresh", "\n", "rois", ",", "roi_scores", ",", "pool5", ",", "fc7", ",", "cls_prob", ",", "bbox_pred", "=", "self", ".", "_build_network_TL", "(", "training", ")", "\n", "\n", "", "layers_to_output", "=", "{", "'rois'", ":", "rois", ",", "'pool5'", ":", "pool5", ",", "'fc7'", ":", "fc7", "}", "\n", "self", ".", "_predictions", "[", "'roi_scores'", "]", "=", "roi_scores", "\n", "self", ".", "_predictions", "[", "'pool5'", "]", "=", "pool5", "\n", "self", ".", "_predictions", "[", "'fc7'", "]", "=", "fc7", "\n", "\n", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "          ", "self", ".", "_train_summaries", ".", "append", "(", "var", ")", "\n", "\n", "", "if", "testing", ":", "\n", "          ", "stds", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_STDS", ")", ",", "(", "self", ".", "_num_classes", ")", ")", "\n", "means", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "cfg", ".", "TRAIN", ".", "BBOX_NORMALIZE_MEANS", ")", ",", "(", "self", ".", "_num_classes", ")", ")", "\n", "self", ".", "_predictions", "[", "\"bbox_pred\"", "]", "*=", "stds", "\n", "self", ".", "_predictions", "[", "\"bbox_pred\"", "]", "+=", "means", "\n", "", "else", ":", "\n", "          ", "self", ".", "_add_losses", "(", ")", "\n", "layers_to_output", ".", "update", "(", "self", ".", "_losses", ")", "\n", "\n", "val_summaries", "=", "[", "]", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "            ", "val_summaries", ".", "append", "(", "self", ".", "_add_gt_image_summary", "(", ")", ")", "\n", "for", "key", ",", "var", "in", "self", ".", "_event_summaries", ".", "items", "(", ")", ":", "\n", "              ", "val_summaries", ".", "append", "(", "tf", ".", "summary", ".", "scalar", "(", "key", ",", "var", ")", ")", "\n", "", "for", "key", ",", "var", "in", "self", ".", "_score_summaries", ".", "items", "(", ")", ":", "\n", "              ", "self", ".", "_add_score_summary", "(", "key", ",", "var", ")", "\n", "", "for", "var", "in", "self", ".", "_act_summaries", ":", "\n", "              ", "self", ".", "_add_act_summary", "(", "var", ")", "\n", "", "for", "var", "in", "self", ".", "_train_summaries", ":", "\n", "              ", "self", ".", "_add_train_summary", "(", "var", ")", "\n", "\n", "", "", "self", ".", "_summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "_summary_op_val", "=", "tf", ".", "summary", ".", "merge", "(", "val_summaries", ")", "\n", "\n", "", "layers_to_output", ".", "update", "(", "self", ".", "_predictions", ")", "\n", "\n", "", "return", "layers_to_output", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.get_variables_to_restore": [[570, 572], ["None"], "methods", ["None"], ["", "def", "get_variables_to_restore", "(", "self", ",", "variables", ",", "var_keep_dic", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.fix_variables": [[573, 575], ["None"], "methods", ["None"], ["", "def", "fix_variables", "(", "self", ",", "sess", ",", "pretrained_model", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.extract_head": [[579, 588], ["sess.run"], "methods", ["None"], ["", "def", "extract_head", "(", "self", ",", "sess", ",", "image", ")", ":", "\n", "    ", "\"\"\"\n    Extract the head feature maps, for example for vgg16 it is conv5_3\n    only useful during testing mode\n    For ResNet it is conv5_3 aussi dont les deux dimensions ont ete divise par 16 \n    \"\"\"", "\n", "feed_dict", "=", "{", "self", ".", "_image", ":", "image", "}", "\n", "feat", "=", "sess", ".", "run", "(", "self", ".", "_layers", "[", "\"head\"", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.test_image": [[590, 607], ["sess.run"], "methods", ["None"], ["", "def", "test_image", "(", "self", ",", "sess", ",", "image", ",", "im_info", ")", ":", "\n", "    ", "\"\"\"\n    Doc come from https://github.com/rbgirshick/py-faster-rcnn/blob/master/lib/fast_rcnn/test.py\n    cls_score = use the raw scores before softmax under the assumption they were trained as linear SVMs ??? \n    cls_prob  = use softmax estimated probabilities\n    \n    \"\"\"", "\n", "feed_dict", "=", "{", "self", ".", "_image", ":", "image", ",", "\n", "self", ".", "_im_info", ":", "im_info", "}", "\n", "\n", "\n", "cls_score", ",", "cls_prob", ",", "bbox_pred", ",", "rois", "=", "sess", ".", "run", "(", "[", "self", ".", "_predictions", "[", "\"cls_score\"", "]", ",", "\n", "self", ".", "_predictions", "[", "'cls_prob'", "]", ",", "\n", "self", ".", "_predictions", "[", "'bbox_pred'", "]", ",", "\n", "self", ".", "_predictions", "[", "'rois'", "]", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "cls_score", ",", "cls_prob", ",", "bbox_pred", ",", "rois", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.TL_image": [[608, 635], ["sess.run", "sess.run"], "methods", ["None"], ["", "def", "TL_image", "(", "self", ",", "sess", ",", "image", ",", "im_info", ")", ":", "\n", "    ", "\"\"\"   \n    \"\"\"", "\n", "feed_dict", "=", "{", "self", ".", "_image", ":", "image", ",", "\n", "self", ".", "_im_info", ":", "im_info", "}", "\n", "\n", "if", "not", "self", ".", "get_fc6", ":", "\n", "        ", "cls_score", ",", "cls_prob", ",", "bbox_pred", ",", "rois", ",", "roi_scores", ",", "fc7", ",", "pool5", "=", "sess", ".", "run", "(", "[", "self", ".", "_predictions", "[", "\"cls_score\"", "]", ",", "\n", "self", ".", "_predictions", "[", "'cls_prob'", "]", ",", "\n", "self", ".", "_predictions", "[", "'bbox_pred'", "]", ",", "\n", "self", ".", "_predictions", "[", "'rois'", "]", ",", "\n", "self", ".", "_predictions", "[", "'roi_scores'", "]", ",", "\n", "self", ".", "_predictions", "[", "'fc7'", "]", ",", "\n", "self", ".", "_predictions", "[", "'pool5'", "]", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "cls_score", ",", "cls_prob", ",", "bbox_pred", ",", "rois", ",", "roi_scores", ",", "fc7", ",", "pool5", "\n", "", "else", ":", "\n", "        ", "cls_score", ",", "cls_prob", ",", "bbox_pred", ",", "rois", ",", "roi_scores", ",", "fc7", ",", "pool5", ",", "fc6", "=", "sess", ".", "run", "(", "[", "self", ".", "_predictions", "[", "\"cls_score\"", "]", ",", "\n", "self", ".", "_predictions", "[", "'cls_prob'", "]", ",", "\n", "self", ".", "_predictions", "[", "'bbox_pred'", "]", ",", "\n", "self", ".", "_predictions", "[", "'rois'", "]", ",", "\n", "self", ".", "_predictions", "[", "'roi_scores'", "]", ",", "\n", "self", ".", "_predictions", "[", "'fc7'", "]", ",", "\n", "self", ".", "_predictions", "[", "'pool5'", "]", ",", "\n", "self", ".", "_predictions", "[", "'fc6'", "]", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "cls_score", ",", "cls_prob", ",", "bbox_pred", ",", "rois", ",", "roi_scores", ",", "fc7", ",", "pool5", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.get_summary": [[636, 642], ["sess.run"], "methods", ["None"], ["", "", "def", "get_summary", "(", "self", ",", "sess", ",", "blobs", ")", ":", "\n", "    ", "feed_dict", "=", "{", "self", ".", "_image", ":", "blobs", "[", "'data'", "]", ",", "self", ".", "_im_info", ":", "blobs", "[", "'im_info'", "]", ",", "\n", "self", ".", "_gt_boxes", ":", "blobs", "[", "'gt_boxes'", "]", "}", "\n", "summary", "=", "sess", ".", "run", "(", "self", ".", "_summary_op_val", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.train_step": [[643, 654], ["sess.run"], "methods", ["None"], ["", "def", "train_step", "(", "self", ",", "sess", ",", "blobs", ",", "train_op", ")", ":", "\n", "    ", "feed_dict", "=", "{", "self", ".", "_image", ":", "blobs", "[", "'data'", "]", ",", "self", ".", "_im_info", ":", "blobs", "[", "'im_info'", "]", ",", "\n", "self", ".", "_gt_boxes", ":", "blobs", "[", "'gt_boxes'", "]", "}", "\n", "rpn_loss_cls", ",", "rpn_loss_box", ",", "loss_cls", ",", "loss_box", ",", "loss", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "_losses", "[", "\"rpn_cross_entropy\"", "]", ",", "\n", "self", ".", "_losses", "[", "'rpn_loss_box'", "]", ",", "\n", "self", ".", "_losses", "[", "'cross_entropy'", "]", ",", "\n", "self", ".", "_losses", "[", "'loss_box'", "]", ",", "\n", "self", ".", "_losses", "[", "'total_loss'", "]", ",", "\n", "train_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "rpn_loss_cls", ",", "rpn_loss_box", ",", "loss_cls", ",", "loss_box", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.train_step_with_summary": [[655, 667], ["sess.run"], "methods", ["None"], ["", "def", "train_step_with_summary", "(", "self", ",", "sess", ",", "blobs", ",", "train_op", ")", ":", "\n", "    ", "feed_dict", "=", "{", "self", ".", "_image", ":", "blobs", "[", "'data'", "]", ",", "self", ".", "_im_info", ":", "blobs", "[", "'im_info'", "]", ",", "\n", "self", ".", "_gt_boxes", ":", "blobs", "[", "'gt_boxes'", "]", "}", "\n", "rpn_loss_cls", ",", "rpn_loss_box", ",", "loss_cls", ",", "loss_box", ",", "loss", ",", "summary", ",", "_", "=", "sess", ".", "run", "(", "[", "self", ".", "_losses", "[", "\"rpn_cross_entropy\"", "]", ",", "\n", "self", ".", "_losses", "[", "'rpn_loss_box'", "]", ",", "\n", "self", ".", "_losses", "[", "'cross_entropy'", "]", ",", "\n", "self", ".", "_losses", "[", "'loss_box'", "]", ",", "\n", "self", ".", "_losses", "[", "'total_loss'", "]", ",", "\n", "self", ".", "_summary_op", ",", "\n", "train_op", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "return", "rpn_loss_cls", ",", "rpn_loss_box", ",", "loss_cls", ",", "loss_box", ",", "loss", ",", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.network.Network.train_step_no_return": [[668, 672], ["sess.run"], "methods", ["None"], ["", "def", "train_step_no_return", "(", "self", ",", "sess", ",", "blobs", ",", "train_op", ")", ":", "\n", "    ", "feed_dict", "=", "{", "self", ".", "_image", ":", "blobs", "[", "'data'", "]", ",", "self", ".", "_im_info", ":", "blobs", "[", "'im_info'", "]", ",", "\n", "self", ".", "_gt_boxes", ":", "blobs", "[", "'gt_boxes'", "]", "}", "\n", "sess", ".", "run", "(", "[", "train_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.__init__": [[207, 213], ["nets.network.Network.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "Network", ".", "__init__", "(", "self", ")", "\n", "self", ".", "_feat_stride", "=", "[", "16", ",", "]", "\n", "self", ".", "_feat_compress", "=", "[", "1.", "/", "float", "(", "self", ".", "_feat_stride", "[", "0", "]", ")", ",", "]", "\n", "self", ".", "_depth_multiplier", "=", "cfg", ".", "MOBILENET", ".", "DEPTH_MULTIPLIER", "\n", "self", ".", "_scope", "=", "'MobilenetV1'", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1._image_to_head": [[214, 239], ["mobilenet_v1.mobilenetv1._act_summaries.append", "tensorflow.arg_scope", "tensorflow.arg_scope", "mobilenet_v1.mobilenet_v1_base", "tensorflow.arg_scope", "tensorflow.arg_scope", "mobilenet_v1.mobilenet_v1_base", "mobilenet_v1.mobilenet_v1_arg_scope", "mobilenet_v1.mobilenet_v1_arg_scope"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenet_v1_base", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenet_v1_base", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenet_v1_arg_scope", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenet_v1_arg_scope"], ["", "def", "_image_to_head", "(", "self", ",", "is_training", ",", "reuse", "=", "None", ")", ":", "\n", "# Base bottleneck", "\n", "    ", "assert", "(", "0", "<=", "cfg", ".", "MOBILENET", ".", "FIXED_LAYERS", "<=", "12", ")", "\n", "net_conv", "=", "self", ".", "_image", "\n", "if", "cfg", ".", "MOBILENET", ".", "FIXED_LAYERS", ">", "0", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "mobilenet_v1_arg_scope", "(", "is_training", "=", "False", ")", ")", ":", "\n", "        ", "net_conv", "=", "mobilenet_v1_base", "(", "net_conv", ",", "\n", "_CONV_DEFS", "[", ":", "cfg", ".", "MOBILENET", ".", "FIXED_LAYERS", "]", ",", "\n", "starting_layer", "=", "0", ",", "\n", "depth_multiplier", "=", "self", ".", "_depth_multiplier", ",", "\n", "reuse", "=", "reuse", ",", "\n", "scope", "=", "self", ".", "_scope", ")", "\n", "", "", "if", "cfg", ".", "MOBILENET", ".", "FIXED_LAYERS", "<", "12", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "mobilenet_v1_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "        ", "net_conv", "=", "mobilenet_v1_base", "(", "net_conv", ",", "\n", "_CONV_DEFS", "[", "cfg", ".", "MOBILENET", ".", "FIXED_LAYERS", ":", "12", "]", ",", "\n", "starting_layer", "=", "cfg", ".", "MOBILENET", ".", "FIXED_LAYERS", ",", "\n", "depth_multiplier", "=", "self", ".", "_depth_multiplier", ",", "\n", "reuse", "=", "reuse", ",", "\n", "scope", "=", "self", ".", "_scope", ")", "\n", "\n", "", "", "self", ".", "_act_summaries", ".", "append", "(", "net_conv", ")", "\n", "self", ".", "_layers", "[", "'head'", "]", "=", "net_conv", "\n", "\n", "return", "net_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1._head_to_tail": [[240, 251], ["tensorflow.arg_scope", "tensorflow.arg_scope", "mobilenet_v1.mobilenet_v1_base", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "mobilenet_v1.mobilenet_v1_arg_scope"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenet_v1_base", "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenet_v1_arg_scope"], ["", "def", "_head_to_tail", "(", "self", ",", "pool5", ",", "is_training", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "mobilenet_v1_arg_scope", "(", "is_training", "=", "is_training", ")", ")", ":", "\n", "      ", "fc7", "=", "mobilenet_v1_base", "(", "pool5", ",", "\n", "_CONV_DEFS", "[", "12", ":", "]", ",", "\n", "starting_layer", "=", "12", ",", "\n", "depth_multiplier", "=", "self", ".", "_depth_multiplier", ",", "\n", "reuse", "=", "reuse", ",", "\n", "scope", "=", "self", ".", "_scope", ")", "\n", "# average pooling done by reduce_mean", "\n", "fc7", "=", "tf", ".", "reduce_mean", "(", "fc7", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "", "return", "fc7", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.get_variables_to_restore": [[252, 265], ["print", "variables_to_restore.append", "v.name.split"], "methods", ["None"], ["", "def", "get_variables_to_restore", "(", "self", ",", "variables", ",", "var_keep_dic", ")", ":", "\n", "    ", "variables_to_restore", "=", "[", "]", "\n", "\n", "for", "v", "in", "variables", ":", "\n", "# exclude the first conv layer to swap RGB to BGR", "\n", "      ", "if", "v", ".", "name", "==", "(", "self", ".", "_scope", "+", "'/Conv2d_0/weights:0'", ")", ":", "\n", "        ", "self", ".", "_variables_to_fix", "[", "v", ".", "name", "]", "=", "v", "\n", "continue", "\n", "", "if", "v", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", "in", "var_keep_dic", ":", "\n", "        ", "print", "(", "'Variables restored: %s'", "%", "v", ".", "name", ")", "\n", "variables_to_restore", ".", "append", "(", "v", ")", "\n", "\n", "", "", "return", "variables_to_restore", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenetv1.fix_variables": [[266, 279], ["print", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.device", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "sess.run", "tensorflow.assign", "tensorflow.assign", "max", "tensorflow.reverse", "tensorflow.reverse", "int"], "methods", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.model.train_val.SolverWrapper.restore"], ["", "def", "fix_variables", "(", "self", ",", "sess", ",", "pretrained_model", ")", ":", "\n", "    ", "print", "(", "'Fix MobileNet V1 layers..'", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Fix_MobileNet_V1'", ")", "as", "scope", ":", "\n", "      ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "# fix RGB to BGR, and match the scale by (255.0 / 2.0)", "\n", "        ", "Conv2d_0_rgb", "=", "tf", ".", "get_variable", "(", "\"Conv2d_0_rgb\"", ",", "\n", "[", "3", ",", "3", ",", "3", ",", "max", "(", "int", "(", "32", "*", "self", ".", "_depth_multiplier", ")", ",", "8", ")", "]", ",", "\n", "trainable", "=", "False", ")", "\n", "restorer_fc", "=", "tf", ".", "train", ".", "Saver", "(", "{", "self", ".", "_scope", "+", "\"/Conv2d_0/weights\"", ":", "Conv2d_0_rgb", "}", ")", "\n", "restorer_fc", ".", "restore", "(", "sess", ",", "pretrained_model", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "_variables_to_fix", "[", "self", ".", "_scope", "+", "\"/Conv2d_0/weights:0\"", "]", ",", "\n", "tf", ".", "reverse", "(", "Conv2d_0_rgb", "/", "(", "255.0", "/", "2.0", ")", ",", "[", "2", "]", ")", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.separable_conv2d_same": [[21, 50], ["tensorflow.separable_conv2d", "tensorflow.pad", "tensorflow.separable_conv2d"], "function", ["None"], ["def", "separable_conv2d_same", "(", "inputs", ",", "kernel_size", ",", "stride", ",", "rate", "=", "1", ",", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Strided 2-D separable convolution with 'SAME' padding.\n  Args:\n    inputs: A 4-D tensor of size [batch, height_in, width_in, channels].\n    kernel_size: An int with the kernel_size of the filters.\n    stride: An integer, the output stride.\n    rate: An integer, rate for atrous convolution.\n    scope: Scope.\n  Returns:\n    output: A 4-D tensor of size [batch, height_out, width_out, channels] with\n      the convolution output.\n  \"\"\"", "\n", "\n", "# By passing filters=None", "\n", "# separable_conv2d produces only a depth-wise convolution layer", "\n", "if", "stride", "==", "1", ":", "\n", "    ", "return", "slim", ".", "separable_conv2d", "(", "inputs", ",", "None", ",", "kernel_size", ",", "\n", "depth_multiplier", "=", "1", ",", "stride", "=", "1", ",", "rate", "=", "rate", ",", "\n", "padding", "=", "'SAME'", ",", "scope", "=", "scope", ")", "\n", "", "else", ":", "\n", "    ", "kernel_size_effective", "=", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "rate", "-", "1", ")", "\n", "pad_total", "=", "kernel_size_effective", "-", "1", "\n", "pad_beg", "=", "pad_total", "//", "2", "\n", "pad_end", "=", "pad_total", "-", "pad_beg", "\n", "inputs", "=", "tf", ".", "pad", "(", "inputs", ",", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "pad_beg", ",", "pad_end", "]", ",", "[", "pad_beg", ",", "pad_end", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "return", "slim", ".", "separable_conv2d", "(", "inputs", ",", "None", ",", "kernel_size", ",", "\n", "depth_multiplier", "=", "1", ",", "stride", "=", "stride", ",", "rate", "=", "rate", ",", "\n", "padding", "=", "'VALID'", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenet_v1_base": [[82, 173], ["max", "ValueError", "tensorflow.variable_scope", "enumerate", "int", "isinstance", "tensorflow.contrib.slim.python.slim.nets.resnet_utils.conv2d_same", "isinstance", "depth", "mobilenet_v1.separable_conv2d_same", "tensorflow.conv2d", "ValueError", "depth"], "function", ["home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.separable_conv2d_same"], ["def", "mobilenet_v1_base", "(", "inputs", ",", "\n", "conv_defs", ",", "\n", "starting_layer", "=", "0", ",", "\n", "min_depth", "=", "8", ",", "\n", "depth_multiplier", "=", "1.0", ",", "\n", "output_stride", "=", "None", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Mobilenet v1.\n  Constructs a Mobilenet v1 network from inputs to the given final endpoint.\n  Args:\n    inputs: a tensor of shape [batch_size, height, width, channels].\n    starting_layer: specifies the current starting layer. For region proposal \n      network it is 0, for region classification it is 12 by default.\n    min_depth: Minimum depth value (number of channels) for all convolution ops.\n      Enforced when depth_multiplier < 1, and not an active constraint when\n      depth_multiplier >= 1.\n    depth_multiplier: Float multiplier for the depth (number of channels)\n      for all convolution ops. The value must be greater than zero. Typical\n      usage will be to set this value in (0, 1) to reduce the number of\n      parameters or computation cost of the model.\n    conv_defs: A list of ConvDef named tuples specifying the net architecture.\n    output_stride: An integer that specifies the requested ratio of input to\n      output spatial resolution. If not None, then we invoke atrous convolution\n      if necessary to prevent the network from reducing the spatial resolution\n      of the activation maps. \n    scope: Optional variable_scope.\n  Returns:\n    tensor_out: output tensor corresponding to the final_endpoint.\n  Raises:\n    ValueError: if depth_multiplier <= 0, or convolution type is not defined.\n  \"\"\"", "\n", "depth", "=", "lambda", "d", ":", "max", "(", "int", "(", "d", "*", "depth_multiplier", ")", ",", "min_depth", ")", "\n", "end_points", "=", "{", "}", "\n", "\n", "# Used to find thinned depths for each layer.", "\n", "if", "depth_multiplier", "<=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "'depth_multiplier is not greater than zero.'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'MobilenetV1'", ",", "[", "inputs", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "# The current_stride variable keeps track of the output stride of the", "\n", "# activations, i.e., the running product of convolution strides up to the", "\n", "# current network layer. This allows us to invoke atrous convolution", "\n", "# whenever applying the next convolution would result in the activations", "\n", "# having output stride larger than the target output_stride.", "\n", "    ", "current_stride", "=", "1", "\n", "\n", "# The atrous convolution rate parameter.", "\n", "rate", "=", "1", "\n", "\n", "net", "=", "inputs", "\n", "for", "i", ",", "conv_def", "in", "enumerate", "(", "conv_defs", ")", ":", "\n", "      ", "end_point_base", "=", "'Conv2d_%d'", "%", "(", "i", "+", "starting_layer", ")", "\n", "\n", "if", "output_stride", "is", "not", "None", "and", "current_stride", "==", "output_stride", ":", "\n", "# If we have reached the target output_stride, then we need to employ", "\n", "# atrous convolution with stride=1 and multiply the atrous rate by the", "\n", "# current unit's stride for use in subsequent layers.", "\n", "        ", "layer_stride", "=", "1", "\n", "layer_rate", "=", "rate", "\n", "rate", "*=", "conv_def", ".", "stride", "\n", "", "else", ":", "\n", "        ", "layer_stride", "=", "conv_def", ".", "stride", "\n", "layer_rate", "=", "1", "\n", "current_stride", "*=", "conv_def", ".", "stride", "\n", "\n", "", "if", "isinstance", "(", "conv_def", ",", "Conv", ")", ":", "\n", "        ", "end_point", "=", "end_point_base", "\n", "net", "=", "resnet_utils", ".", "conv2d_same", "(", "net", ",", "depth", "(", "conv_def", ".", "depth", ")", ",", "conv_def", ".", "kernel", ",", "\n", "stride", "=", "conv_def", ".", "stride", ",", "\n", "scope", "=", "end_point", ")", "\n", "\n", "", "elif", "isinstance", "(", "conv_def", ",", "DepthSepConv", ")", ":", "\n", "        ", "end_point", "=", "end_point_base", "+", "'_depthwise'", "\n", "\n", "net", "=", "separable_conv2d_same", "(", "net", ",", "conv_def", ".", "kernel", ",", "\n", "stride", "=", "layer_stride", ",", "\n", "rate", "=", "layer_rate", ",", "\n", "scope", "=", "end_point", ")", "\n", "\n", "end_point", "=", "end_point_base", "+", "'_pointwise'", "\n", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "depth", "(", "conv_def", ".", "depth", ")", ",", "[", "1", ",", "1", "]", ",", "\n", "stride", "=", "1", ",", "\n", "scope", "=", "end_point", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown convolution type %s for layer %d'", "\n", "%", "(", "conv_def", ".", "ltype", ",", "i", ")", ")", "\n", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.nicaogr_Mi_max.nets.mobilenet_v1.mobilenet_v1_arg_scope": [[175, 205], ["tensorflow.truncated_normal_initializer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.arg_scope"], "function", ["None"], ["", "", "def", "mobilenet_v1_arg_scope", "(", "is_training", "=", "True", ",", "\n", "stddev", "=", "0.09", ")", ":", "\n", "  ", "batch_norm_params", "=", "{", "\n", "'is_training'", ":", "False", ",", "\n", "'center'", ":", "True", ",", "\n", "'scale'", ":", "True", ",", "\n", "'decay'", ":", "0.9997", ",", "\n", "'epsilon'", ":", "0.001", ",", "\n", "'trainable'", ":", "False", ",", "\n", "}", "\n", "\n", "# Set weight_decay for weights in Conv and DepthSepConv layers.", "\n", "weights_init", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "cfg", ".", "MOBILENET", ".", "WEIGHT_DECAY", ")", "\n", "if", "cfg", ".", "MOBILENET", ".", "REGU_DEPTH", ":", "\n", "    ", "depthwise_regularizer", "=", "regularizer", "\n", "", "else", ":", "\n", "    ", "depthwise_regularizer", "=", "None", "\n", "\n", "", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "separable_conv2d", "]", ",", "\n", "trainable", "=", "is_training", ",", "\n", "weights_initializer", "=", "weights_init", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu6", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "padding", "=", "'SAME'", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", "]", ",", "weights_regularizer", "=", "regularizer", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "separable_conv2d", "]", ",", "\n", "weights_regularizer", "=", "depthwise_regularizer", ")", "as", "sc", ":", "\n", "          ", "return", "sc", "\n", "\n"]]}