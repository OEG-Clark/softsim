{"home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.test_models.AverageMeter.__init__": [[56, 58], ["test_models.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.test_models.AverageMeter.reset": [[59, 64], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.test_models.AverageMeter.update": [[65, 70], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.test_models.accuracy": [[72, 84], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "         ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.test_models.parse_shift_option_from_log_name": [[86, 95], ["log_name.split", "enumerate", "int", "strings[].replace"], "function", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.tools.vid2img_sthv2.split"], ["", "def", "parse_shift_option_from_log_name", "(", "log_name", ")", ":", "\n", "    ", "if", "'shift'", "in", "log_name", ":", "\n", "        ", "strings", "=", "log_name", ".", "split", "(", "'_'", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "strings", ")", ":", "\n", "            ", "if", "'shift'", "in", "s", ":", "\n", "                ", "break", "\n", "", "", "return", "True", ",", "int", "(", "strings", "[", "i", "]", ".", "replace", "(", "'shift'", ",", "''", ")", ")", ",", "strings", "[", "i", "+", "1", "]", "\n", "", "else", ":", "\n", "        ", "return", "False", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.test_models.eval_video": [[224, 270], ["net.eval", "torch.no_grad", "torch.no_grad", "label.numel", "data.view", "net", "rst.reshape().mean().reshape.reshape().mean", "rst.reshape().mean().reshape.data.cpu().numpy().copy", "data.size", "data.size", "data_in.view.view", "torch.nn.functional.softmax", "rst.reshape().mean().reshape.reshape", "rst.reshape().mean().reshape.reshape().mean().reshape", "data_in.view.size", "data_in.view.size", "rst.reshape().mean().reshape.reshape", "rst.reshape().mean().reshape.data.cpu().numpy", "rst.reshape().mean().reshape.reshape().mean", "ValueError", "rst.reshape().mean().reshape.data.cpu", "rst.reshape().mean().reshape.reshape"], "function", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.softmax"], ["def", "eval_video", "(", "video_data", ",", "net", ",", "this_test_segments", ",", "modality", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "i", ",", "data", ",", "label", "=", "video_data", "\n", "batch_size", "=", "label", ".", "numel", "(", ")", "\n", "num_crop", "=", "args", ".", "test_crops", "\n", "if", "args", ".", "dense_sample", ":", "\n", "            ", "num_crop", "*=", "10", "# 10 clips for testing when using dense sample", "\n", "\n", "", "if", "args", ".", "twice_sample", ":", "\n", "            ", "num_crop", "*=", "2", "\n", "\n", "", "if", "modality", "==", "'RGB'", ":", "\n", "            ", "length", "=", "3", "\n", "", "elif", "modality", "in", "[", "'PA'", ",", "'Lite'", "]", ":", "\n", "            ", "length", "=", "12", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "            ", "length", "=", "10", "\n", "", "elif", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "length", "=", "18", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown modality \"", "+", "modality", ")", "\n", "\n", "", "if", "modality", "in", "[", "'PA'", ",", "'Lite'", "]", ":", "\n", "            ", "PA_length", "=", "4", "\n", "", "else", ":", "\n", "            ", "PA_length", "=", "1", "\n", "\n", "", "data_in", "=", "data", ".", "view", "(", "-", "1", ",", "length", ",", "data", ".", "size", "(", "2", ")", ",", "data", ".", "size", "(", "3", ")", ")", "\n", "if", "is_shift", ":", "\n", "            ", "data_in", "=", "data_in", ".", "view", "(", "batch_size", "*", "num_crop", ",", "this_test_segments", ",", "length", ",", "data_in", ".", "size", "(", "2", ")", ",", "data_in", ".", "size", "(", "3", ")", ")", "\n", "", "rst", "=", "net", "(", "data_in", ")", "\n", "rst", "=", "rst", ".", "reshape", "(", "batch_size", ",", "num_crop", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n", "if", "args", ".", "softmax", ":", "\n", "# take the softmax to normalize the output to probability", "\n", "            ", "rst", "=", "F", ".", "softmax", "(", "rst", ",", "dim", "=", "1", ")", "\n", "\n", "", "rst", "=", "rst", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "\n", "if", "net", ".", "module", ".", "is_shift", ":", "\n", "            ", "rst", "=", "rst", ".", "reshape", "(", "batch_size", ",", "num_class", ")", "\n", "", "else", ":", "\n", "            ", "rst", "=", "rst", ".", "reshape", "(", "(", "batch_size", ",", "-", "1", ",", "num_class", ")", ")", ".", "mean", "(", "axis", "=", "1", ")", ".", "reshape", "(", "(", "batch_size", ",", "num_class", ")", ")", "\n", "\n", "", "return", "i", ",", "rst", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.main.main": [[27, 242], ["opts.parser.parse_args", "ops.dataset_config.return_dataset", "print", "main.check_rootfolders", "print", "print", "print", "print", "print", "print", "print", "print", "print", "ops.models.PAN", "torch.nn.DataParallel().cuda.get_optim_policies", "torch.nn.DataParallel().cuda.get_augmentation", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "open", "tensorboardX.SummaryWriter", "range", "os.path.isfile", "print", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.state_dict", "torch.load.items", "model.state_dict.items", "set", "set", "print", "model.state_dict.update", "torch.nn.DataParallel().cuda.load_state_dict", "ops.temporal_shift.make_temporal_pool", "ops.transforms.GroupNormalize", "ops.transforms.IdentityTransform", "ops.dataset.PANDataSet", "ops.dataset.PANDataSet", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "torch.nn.CrossEntropyLoss().cuda", "ValueError", "print", "main.validate", "os.path.join", "open", "f.write", "main.adjust_learning_rate", "main.train", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "ops.temporal_shift.make_temporal_pool", "print", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "torch.load.pop", "list", "list", "print", "os.path.join", "str", "os.path.join", "main.validate", "max", "tensorboardX.SummaryWriter.add_scalar", "print", "open.write", "open.flush", "main.save_checkpoint", "print", "replace_dict.append", "print", "replace_dict.append", "torch.load.keys", "model.state_dict.keys", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "len", "k.replace", "k.replace", "torch.load.items", "torch.load.items", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "k.replace", "k.replace", "ops.transforms.Stack", "ops.transforms.ToTorchFormatTensor", "ops.transforms.GroupScale", "ops.transforms.GroupCenterCrop", "ops.transforms.Stack", "ops.transforms.ToTorchFormatTensor", "int"], "function", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset_config.return_dataset", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.main.check_rootfolders", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.get_optim_policies", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.get_augmentation", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.make_temporal_pool", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.main.validate", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.main.adjust_learning_rate", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.train", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.make_temporal_pool", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.main.validate", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.main.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "base", "==", "'TSM'", ":", "\n", "        ", "args", ".", "shift", "=", "True", "\n", "args", ".", "shift_div", "=", "8", "\n", "args", ".", "shift_place", "=", "'blockres'", "\n", "\n", "", "num_class", ",", "args", ".", "train_list", ",", "args", ".", "val_list", ",", "args", ".", "root_path", ",", "prefix", "=", "dataset_config", ".", "return_dataset", "(", "args", ".", "dataset", ",", "\n", "args", ".", "modality", ")", "\n", "\n", "full_arch_name", "=", "args", ".", "arch", "\n", "if", "args", ".", "shift", ":", "\n", "        ", "full_arch_name", "+=", "'_shift{}_{}'", ".", "format", "(", "args", ".", "shift_div", ",", "args", ".", "shift_place", ")", "\n", "", "if", "args", ".", "temporal_pool", ":", "\n", "        ", "full_arch_name", "+=", "'_tpool'", "\n", "", "args", ".", "store_name", "=", "'_'", ".", "join", "(", "\n", "[", "'PAN'", ",", "args", ".", "modality", ",", "args", ".", "dataset", ",", "full_arch_name", ",", "args", ".", "consensus_type", ",", "'segment%d'", "%", "args", ".", "num_segments", ",", "\n", "'e{}'", ".", "format", "(", "args", ".", "epochs", ")", "]", ")", "\n", "if", "args", ".", "pretrain", "!=", "'imagenet'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "pretrain", ")", "\n", "", "if", "args", ".", "lr_type", "!=", "'step'", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "lr_type", ")", "\n", "", "if", "args", ".", "dense_sample", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_dense'", "\n", "", "if", "args", ".", "non_local", ">", "0", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_nl'", "\n", "", "if", "args", ".", "suffix", "is", "not", "None", ":", "\n", "        ", "args", ".", "store_name", "+=", "'_{}'", ".", "format", "(", "args", ".", "suffix", ")", "\n", "", "print", "(", "'- storing name: '", "+", "args", ".", "store_name", ")", "\n", "\n", "check_rootfolders", "(", ")", "\n", "\n", "if", "args", ".", "modality", "==", "'RGB'", ":", "\n", "        ", "data_length", "=", "1", "\n", "", "elif", "args", ".", "modality", "in", "[", "'PA'", ",", "'Lite'", "]", ":", "\n", "        ", "data_length", "=", "4", "\n", "", "elif", "args", ".", "modality", "in", "[", "'Flow'", ",", "'RGBDiff'", "]", ":", "\n", "        ", "data_length", "=", "5", "\n", "\n", "", "print", "(", "\"-\"", "*", "30", ")", "\n", "print", "(", "\"Environment Versions:\"", ")", "\n", "print", "(", "\"- Python: {}\"", ".", "format", "(", "sys", ".", "version", ")", ")", "\n", "print", "(", "\"- PyTorch: {}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "print", "(", "\"- TorchVison: {}\"", ".", "format", "(", "torchvision", ".", "__version__", ")", ")", "\n", "\n", "args_dict", "=", "args", ".", "__dict__", "\n", "print", "(", "\"-\"", "*", "30", ")", "\n", "print", "(", "\"PAN Configurations:\"", ")", "\n", "print", "(", "args_dict", ")", "\n", "print", "(", "\"-\"", "*", "30", ")", "\n", "\n", "model", "=", "PAN", "(", "num_class", ",", "args", ".", "num_segments", ",", "args", ".", "modality", ",", "\n", "base_model", "=", "args", ".", "arch", ",", "\n", "consensus_type", "=", "args", ".", "consensus_type", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "img_feature_dim", "=", "args", ".", "img_feature_dim", ",", "\n", "partial_bn", "=", "not", "args", ".", "no_partialbn", ",", "\n", "pretrain", "=", "args", ".", "pretrain", ",", "\n", "is_shift", "=", "args", ".", "shift", ",", "shift_div", "=", "args", ".", "shift_div", ",", "shift_place", "=", "args", ".", "shift_place", ",", "\n", "fc_lr5", "=", "not", "(", "args", ".", "tune_from", "and", "args", ".", "dataset", "in", "args", ".", "tune_from", ")", ",", "\n", "temporal_pool", "=", "args", ".", "temporal_pool", ",", "\n", "non_local", "=", "args", ".", "non_local", ",", "data_length", "=", "data_length", ",", "has_VAP", "=", "args", ".", "VAP", ")", "\n", "\n", "#print(model)", "\n", "\n", "crop_size", "=", "model", ".", "crop_size", "\n", "scale_size", "=", "model", ".", "scale_size", "\n", "input_mean", "=", "model", ".", "input_mean", "\n", "input_std", "=", "model", ".", "input_std", "\n", "policies", "=", "model", ".", "get_optim_policies", "(", ")", "\n", "train_augmentation", "=", "model", ".", "get_augmentation", "(", "flip", "=", "False", "if", "'something'", "in", "args", ".", "dataset", "or", "'jester'", "in", "args", ".", "dataset", "else", "True", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "args", ".", "gpus", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "policies", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "args", ".", "temporal_pool", ":", "# early temporal pool so that we can load the state_dict", "\n", "            ", "make_temporal_pool", "(", "model", ".", "module", ".", "base_model", ",", "args", ".", "num_segments", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "evaluate", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", ")", "\n", "\n", "", "", "if", "args", ".", "tune_from", ":", "\n", "        ", "print", "(", "(", "\"=> fine-tuning from '{}'\"", ".", "format", "(", "args", ".", "tune_from", ")", ")", ")", "\n", "sd", "=", "torch", ".", "load", "(", "args", ".", "tune_from", ")", "\n", "sd", "=", "sd", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "replace_dict", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "model_dict", "and", "k", ".", "replace", "(", "'.net'", ",", "''", ")", "in", "model_dict", ":", "\n", "                ", "print", "(", "'=> Load after remove .net: '", ",", "k", ")", "\n", "replace_dict", ".", "append", "(", "(", "k", ",", "k", ".", "replace", "(", "'.net'", ",", "''", ")", ")", ")", "\n", "", "", "for", "k", ",", "v", "in", "model_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "sd", "and", "k", ".", "replace", "(", "'.net'", ",", "''", ")", "in", "sd", ":", "\n", "                ", "print", "(", "'=> Load after adding .net: '", ",", "k", ")", "\n", "replace_dict", ".", "append", "(", "(", "k", ".", "replace", "(", "'.net'", ",", "''", ")", ",", "k", ")", ")", "\n", "\n", "", "", "for", "k", ",", "k_new", "in", "replace_dict", ":", "\n", "            ", "sd", "[", "k_new", "]", "=", "sd", ".", "pop", "(", "k", ")", "\n", "", "keys1", "=", "set", "(", "list", "(", "sd", ".", "keys", "(", ")", ")", ")", "\n", "keys2", "=", "set", "(", "list", "(", "model_dict", ".", "keys", "(", ")", ")", ")", "\n", "set_diff", "=", "(", "keys1", "-", "keys2", ")", "|", "(", "keys2", "-", "keys1", ")", "\n", "print", "(", "'#### Notice: keys that failed to load: {}'", ".", "format", "(", "set_diff", ")", ")", "\n", "if", "args", ".", "dataset", "not", "in", "args", ".", "tune_from", ":", "# new dataset", "\n", "            ", "print", "(", "'=> New dataset, do not load fc weights'", ")", "\n", "sd", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", "if", "'fc'", "not", "in", "k", "}", "\n", "", "if", "args", ".", "modality", "==", "'Flow'", "and", "'Flow'", "not", "in", "args", ".", "tune_from", ":", "\n", "            ", "sd", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", "if", "'conv1.weight'", "not", "in", "k", "}", "\n", "", "model_dict", ".", "update", "(", "sd", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "if", "args", ".", "temporal_pool", "and", "not", "args", ".", "resume", ":", "\n", "        ", "make_temporal_pool", "(", "model", ".", "module", ".", "base_model", ",", "args", ".", "num_segments", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "if", "args", ".", "modality", "!=", "'RGBDiff'", ":", "\n", "        ", "normalize", "=", "GroupNormalize", "(", "input_mean", ",", "input_std", ")", "\n", "", "else", ":", "\n", "        ", "normalize", "=", "IdentityTransform", "(", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "PANDataSet", "(", "args", ".", "root_path", ",", "args", ".", "train_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "train_augmentation", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ",", "is_lmdb", "=", "args", ".", "lmdb", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "# prevent something not % n_GPU", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "PANDataSet", "(", "args", ".", "root_path", ",", "args", ".", "val_list", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "prefix", ",", "\n", "random_shift", "=", "False", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "int", "(", "scale_size", ")", ")", ",", "\n", "GroupCenterCrop", "(", "crop_size", ")", ",", "\n", "Stack", "(", "roll", "=", "(", "args", ".", "arch", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "(", "args", ".", "arch", "not", "in", "[", "'BNInception'", ",", "'InceptionV3'", "]", ")", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ",", "dense_sample", "=", "args", ".", "dense_sample", ",", "is_lmdb", "=", "args", ".", "lmdb", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "if", "args", ".", "loss_type", "==", "'nll'", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown loss type\"", ")", "\n", "\n", "", "print", "(", "\"-\"", "*", "30", ")", "\n", "for", "group", "in", "policies", ":", "\n", "        ", "print", "(", "(", "'group: {} has {} params, lr_mult: {}, decay_mult: {}'", ".", "format", "(", "\n", "group", "[", "'name'", "]", ",", "len", "(", "group", "[", "'params'", "]", ")", ",", "group", "[", "'lr_mult'", "]", ",", "group", "[", "'decay_mult'", "]", ")", ")", ")", "\n", "", "print", "(", "\"-\"", "*", "30", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "0", ")", "\n", "return", "\n", "\n", "", "log_training", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'log.csv'", ")", ",", "'w'", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ",", "'args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "args", ")", ")", "\n", "", "tf_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ".", "lr_type", ",", "args", ".", "lr_steps", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log_training", ",", "tf_writer", ")", "\n", "\n", "# evaluate on validation set", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_freq", "==", "0", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "            ", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log_training", ",", "tf_writer", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top1_best'", ",", "best_prec1", ",", "epoch", ")", "\n", "\n", "output_best", "=", "'Best Prec@1: %.3f\\n'", "%", "(", "best_prec1", ")", "\n", "print", "(", "output_best", ")", "\n", "log_training", ".", "write", "(", "output_best", "+", "'\\n'", ")", "\n", "log_training", ".", "flush", "(", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "}", ",", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.main.train": [[243, 325], ["ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "model.train", "time.time", "enumerate", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "model.module.partialBN", "model.module.partialBN", "ops.utils.AverageMeter.update", "target.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion", "ops.utils.accuracy", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "criterion.backward", "ops.utils.AverageMeter.update", "time.time", "os.system", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "optimizer.step", "optimizer.zero_grad", "print", "log.write", "log.flush", "time.time", "torch.nn.utils.clip_grad_norm_", "time.time", "len", "model.parameters", "isinstance"], "function", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.train", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.partialBN", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.partialBN", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.accuracy", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.InplaceShift.backward", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.update"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "log", ",", "tf_writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "args", ".", "no_partialbn", ":", "\n", "        ", "model", ".", "module", ".", "partialBN", "(", "False", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "module", ".", "partialBN", "(", "True", ")", "\n", "\n", "# switch to train mode", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "==", "20", ":", "\n", "            ", "os", ".", "system", "(", "\"gpustat\"", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "target_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "no_grad_cnt", "=", "0", "\n", "\n", "if", "i", "%", "args", ".", "iter_size", "==", "0", ":", "\n", "# scale down gradients when iter size is functioning", "\n", "            ", "if", "args", ".", "iter_size", "!=", "1", ":", "\n", "                ", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "for", "p", "in", "g", "[", "'params'", "]", ":", "\n", "                        ", "if", "isinstance", "(", "p", ".", "grad", ",", "torch", ".", "Tensor", ")", ":", "\n", "                            ", "p", ".", "grad", "/=", "args", ".", "iter_size", "\n", "", "else", ":", "\n", "                            ", "no_grad_cnt", "=", "no_grad_cnt", "+", "1", "\n", "\n", "", "", "", "", "if", "args", ".", "clip_gradient", "is", "not", "None", ":", "\n", "                ", "total_norm", "=", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip_gradient", ")", "\n", "", "else", ":", "\n", "                ", "total_norm", "=", "0", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#if i == 0:", "\n", "#    print(\"{}\\nWARNING: There are {} params without gradient!!!!!\\n{}\".format(\"*\"*50, no_grad_cnt, \"*\"*50))", "\n", "\n", "# measure elapsed time", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "output", "=", "(", "'Epoch: [{0}][{1}/{2}], lr: {lr:.5f}\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "lr", "=", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", "*", "0.1", ")", ")", "# TODO", "\n", "print", "(", "output", ")", "\n", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "tf_writer", ".", "add_scalar", "(", "'loss/train'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/train_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.main.validate": [[327, 382], ["ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "ops.utils.AverageMeter", "model.eval", "time.time", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "log.write", "log.flush", "tf_writer.add_scalar", "tf_writer.add_scalar", "tf_writer.add_scalar", "target.cuda.cuda", "model", "criterion", "ops.utils.accuracy", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "ops.utils.AverageMeter.update", "time.time", "criterion.item", "input.size", "prec1.item", "input.size", "prec5.item", "input.size", "print", "time.time", "len", "log.write", "log.flush"], "function", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.accuracy", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.update", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.update"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "log", "=", "None", ",", "tf_writer", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "output", "=", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "                    ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "", "", "", "output", "=", "(", "'Testing Results: Prec@1 {top1.avg:.3f} Prec@5 {top5.avg:.3f} Loss {loss.avg:.5f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "loss", "=", "losses", ")", ")", "\n", "print", "(", "output", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "        ", "log", ".", "write", "(", "output", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "\n", "", "if", "tf_writer", "is", "not", "None", ":", "\n", "        ", "tf_writer", ".", "add_scalar", "(", "'loss/test'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top1'", ",", "top1", ".", "avg", ",", "epoch", ")", "\n", "tf_writer", ".", "add_scalar", "(", "'acc/test_top5'", ",", "top5", ".", "avg", ",", "epoch", ")", "\n", "\n", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.main.save_checkpoint": [[384, 389], ["torch.save", "torch.save", "torch.save", "shutil.copyfile", "filename.replace"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ")", ":", "\n", "    ", "filename", "=", "'%s/%s/ckpt.pth.tar'", "%", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "filename", ".", "replace", "(", "'pth.tar'", ",", "'best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.main.adjust_learning_rate": [[391, 406], ["sum", "np.array", "math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr_type", ",", "lr_steps", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "lr_type", "==", "'step'", ":", "\n", "        ", "decay", "=", "0.1", "**", "(", "sum", "(", "epoch", ">=", "np", ".", "array", "(", "lr_steps", ")", ")", ")", "\n", "lr", "=", "args", ".", "lr", "*", "decay", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "elif", "lr_type", "==", "'cos'", ":", "\n", "        ", "import", "math", "\n", "lr", "=", "0.5", "*", "args", ".", "lr", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "decay", "=", "args", ".", "weight_decay", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "*", "param_group", "[", "'lr_mult'", "]", "\n", "param_group", "[", "'weight_decay'", "]", "=", "decay", "*", "param_group", "[", "'decay_mult'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.None.main.check_rootfolders": [[408, 417], ["os.path.join", "os.path.join", "os.path.exists", "print", "os.mkdir"], "function", ["None"], ["", "", "def", "check_rootfolders", "(", ")", ":", "\n", "    ", "\"\"\"Create log and model folder\"\"\"", "\n", "folders_util", "=", "[", "args", ".", "root_log", ",", "args", ".", "root_model", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_log", ",", "args", ".", "store_name", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "root_model", ",", "args", ".", "store_name", ")", "]", "\n", "for", "folder", "in", "folders_util", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "print", "(", "'creating folder '", "+", "folder", ")", "\n", "os", ".", "mkdir", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.tools.vid2img_kinetics.vid2jpg": [[16, 41], ["os.path.splitext", "os.path.join", "os.path.join", "subprocess.call", "os.path.exists", "os.mkdir", "print", "os.path.exists", "subprocess.call", "print", "os.mkdir", "print", "os.path.join"], "function", ["None"], ["def", "vid2jpg", "(", "file_name", ",", "class_path", ",", "dst_class_path", ")", ":", "\n", "    ", "if", "'.mp4'", "not", "in", "file_name", ":", "\n", "        ", "return", "\n", "", "name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "file_name", ")", "\n", "dst_directory_path", "=", "os", ".", "path", ".", "join", "(", "dst_class_path", ",", "name", ")", "\n", "\n", "video_file_path", "=", "os", ".", "path", ".", "join", "(", "class_path", ",", "file_name", ")", "\n", "try", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "dst_directory_path", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "dst_directory_path", ",", "'img_00001.jpg'", ")", ")", ":", "\n", "                ", "subprocess", ".", "call", "(", "'rm -r \\\"{}\\\"'", ".", "format", "(", "dst_directory_path", ")", ",", "shell", "=", "True", ")", "\n", "print", "(", "'remove {}'", ".", "format", "(", "dst_directory_path", ")", ")", "\n", "os", ".", "mkdir", "(", "dst_directory_path", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'*** convert has been done: {}'", ".", "format", "(", "dst_directory_path", ")", ")", "\n", "return", "\n", "", "", "else", ":", "\n", "            ", "os", ".", "mkdir", "(", "dst_directory_path", ")", "\n", "", "", "except", ":", "\n", "        ", "print", "(", "dst_directory_path", ")", "\n", "return", "\n", "", "cmd", "=", "'ffmpeg -i \\\"{}\\\" -threads 1 -vf scale=-1:331 -q:v 0 \\\"{}/img_%05d.jpg\\\"'", ".", "format", "(", "video_file_path", ",", "dst_directory_path", ")", "\n", "# print(cmd)", "\n", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ",", "\n", "stdout", "=", "subprocess", ".", "DEVNULL", ",", "stderr", "=", "subprocess", ".", "DEVNULL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.tools.vid2img_kinetics.class_process": [[43, 66], ["print", "os.path.join", "os.path.join", "os.listdir", "os.listdir.sort", "multiprocessing.Pool", "partial", "tqdm.tqdm", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "print", "os.path.isdir", "print", "os.path.exists", "os.mkdir", "multiprocessing.Pool.imap_unordered", "len"], "function", ["None"], ["", "def", "class_process", "(", "dir_path", ",", "dst_dir_path", ",", "class_name", ")", ":", "\n", "    ", "print", "(", "'*'", "*", "20", ",", "class_name", ",", "'*'", "*", "20", ")", "\n", "class_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "class_path", ")", ":", "\n", "        ", "print", "(", "'*** is not a dir {}'", ".", "format", "(", "class_path", ")", ")", "\n", "return", "\n", "\n", "", "dst_class_path", "=", "os", ".", "path", ".", "join", "(", "dst_dir_path", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_class_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dst_class_path", ")", "\n", "\n", "", "vid_list", "=", "os", ".", "listdir", "(", "class_path", ")", "\n", "vid_list", ".", "sort", "(", ")", "\n", "p", "=", "Pool", "(", "n_thread", ")", "\n", "from", "functools", "import", "partial", "\n", "worker", "=", "partial", "(", "vid2jpg", ",", "class_path", "=", "class_path", ",", "dst_class_path", "=", "dst_class_path", ")", "\n", "for", "_", "in", "tqdm", "(", "p", ".", "imap_unordered", "(", "worker", ",", "vid_list", ")", ",", "total", "=", "len", "(", "vid_list", ")", ")", ":", "\n", "        ", "pass", "\n", "# p.map(worker, vid_list)", "\n", "", "p", ".", "close", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.tools.vid2img_sthv2.split": [[14, 18], ["range", "len"], "function", ["None"], ["def", "split", "(", "l", ",", "n", ")", ":", "\n", "    ", "\"\"\"Yield successive n-sized chunks from l.\"\"\"", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", ":", "\n", "        ", "yield", "l", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.tools.vid2img_sthv2.extract": [[20, 26], ["os.system"], "function", ["None"], ["", "", "def", "extract", "(", "video", ",", "tmpl", "=", "'%06d.jpg'", ")", ":", "\n", "# os.system(f'ffmpeg -i {VIDEO_ROOT}/{video} -vf -threads 1 -vf scale=-1:256 -q:v 0 '", "\n", "#           f'{FRAME_ROOT}/{video[:-5]}/{tmpl}')", "\n", "    ", "cmd", "=", "'ffmpeg -i \\\"{}/{}\\\" -threads 1 -vf scale=-1:256 -q:v 0 \\\"{}/{}/%06d.jpg\\\"'", ".", "format", "(", "VIDEO_ROOT", ",", "video", ",", "\n", "FRAME_ROOT", ",", "video", "[", ":", "-", "5", "]", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.tools.vid2img_sthv2.target": [[28, 32], ["os.makedirs", "vid2img_sthv2.extract", "os.path.join"], "function", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.tools.vid2img_sthv2.extract"], ["", "def", "target", "(", "video_list", ")", ":", "\n", "    ", "for", "video", "in", "video_list", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "FRAME_ROOT", ",", "video", "[", ":", "-", "5", "]", ")", ")", "\n", "extract", "(", "video", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupRandomCrop.__init__": [[16, 21], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupRandomCrop.__call__": [[22, 40], ["list", "random.randint", "random.randint", "list.append", "list.append", "img.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "w", ",", "h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "\n", "out_images", "=", "list", "(", ")", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "for", "img", "in", "img_group", ":", "\n", "            ", "assert", "(", "img", ".", "size", "[", "0", "]", "==", "w", "and", "img", ".", "size", "[", "1", "]", "==", "h", ")", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ")", "\n", "\n", "", "", "return", "out_images", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupCenterCrop.__init__": [[43, 45], ["torchvision.transforms.CenterCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "worker", "=", "torchvision", ".", "transforms", ".", "CenterCrop", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupCenterCrop.__call__": [[46, 48], ["transforms.GroupCenterCrop.worker"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "return", "[", "self", ".", "worker", "(", "img", ")", "for", "img", "in", "img_group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupRandomHorizontalFlip.__init__": [[53, 55], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "is_flow", "=", "False", ")", ":", "\n", "        ", "self", ".", "is_flow", "=", "is_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupRandomHorizontalFlip.__call__": [[56, 66], ["random.random", "img.transpose", "range", "len", "PIL.ImageOps.invert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ",", "is_flow", "=", "False", ")", ":", "\n", "        ", "v", "=", "random", ".", "random", "(", ")", "\n", "if", "v", "<", "0.5", ":", "\n", "            ", "ret", "=", "[", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "for", "img", "in", "img_group", "]", "\n", "if", "self", ".", "is_flow", ":", "\n", "                ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "ret", ")", ",", "2", ")", ":", "\n", "                    ", "ret", "[", "i", "]", "=", "ImageOps", ".", "invert", "(", "ret", "[", "i", "]", ")", "# invert flow pixel values when flipping", "\n", "", "", "return", "ret", "\n", "", "else", ":", "\n", "            ", "return", "img_group", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupNormalize.__init__": [[69, 72], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupNormalize.__call__": [[73, 82], ["zip", "t.sub_().div_", "len", "len", "tensor.size", "tensor.size", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "rep_mean", "=", "self", ".", "mean", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "mean", ")", ")", "\n", "rep_std", "=", "self", ".", "std", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "std", ")", ")", "\n", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "rep_mean", ",", "rep_std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupScale.__init__": [[93, 95], ["torchvision.transforms.Resize"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "worker", "=", "torchvision", ".", "transforms", ".", "Resize", "(", "size", ",", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupScale.__call__": [[96, 98], ["transforms.GroupScale.worker"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "return", "[", "self", ".", "worker", "(", "img", ")", "for", "img", "in", "img_group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupOverSample.__init__": [[101, 109], ["transforms.GroupScale", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "scale_size", "=", "None", ",", "flip", "=", "True", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "if", "not", "isinstance", "(", "crop_size", ",", "int", ")", "else", "(", "crop_size", ",", "crop_size", ")", "\n", "\n", "if", "scale_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "scale_worker", "=", "GroupScale", "(", "scale_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_worker", "=", "None", "\n", "", "self", ".", "flip", "=", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupOverSample.__call__": [[110, 137], ["transforms.GroupMultiScaleCrop.fill_fix_offset", "list", "transforms.GroupOverSample.scale_worker", "list", "list", "enumerate", "list.extend", "img.crop", "list.append", "img.crop.copy().transpose", "list.extend", "list.append", "list.append", "img.crop.copy", "PIL.ImageOps.invert"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "if", "self", ".", "scale_worker", "is", "not", "None", ":", "\n", "            ", "img_group", "=", "self", ".", "scale_worker", "(", "img_group", ")", "\n", "\n", "", "image_w", ",", "image_h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "offsets", "=", "GroupMultiScaleCrop", ".", "fill_fix_offset", "(", "False", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n", "flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "img", ".", "crop", "(", "(", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", ",", "o_h", "+", "crop_h", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "flip_crop", "=", "crop", ".", "copy", "(", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "if", "img", ".", "mode", "==", "'L'", "and", "i", "%", "2", "==", "0", ":", "\n", "                    ", "flip_group", ".", "append", "(", "ImageOps", ".", "invert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                    ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "if", "self", ".", "flip", ":", "\n", "                ", "oversample_group", ".", "extend", "(", "flip_group", ")", "\n", "", "", "return", "oversample_group", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupFullResSample.__init__": [[140, 148], ["transforms.GroupScale", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "scale_size", "=", "None", ",", "flip", "=", "True", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "if", "not", "isinstance", "(", "crop_size", ",", "int", ")", "else", "(", "crop_size", ",", "crop_size", ")", "\n", "\n", "if", "scale_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "scale_worker", "=", "GroupScale", "(", "scale_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_worker", "=", "None", "\n", "", "self", ".", "flip", "=", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupFullResSample.__call__": [[149, 183], ["list", "list.append", "list.append", "list.append", "list", "transforms.GroupFullResSample.scale_worker", "list", "list", "enumerate", "list.extend", "list.extend", "img.crop", "list.append", "img.crop.copy().transpose", "list.append", "list.append", "img.crop.copy", "PIL.ImageOps.invert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "if", "self", ".", "scale_worker", "is", "not", "None", ":", "\n", "            ", "img_group", "=", "self", ".", "scale_worker", "(", "img_group", ")", "\n", "\n", "", "image_w", ",", "image_h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "offsets", "=", "list", "(", ")", "\n", "offsets", ".", "append", "(", "(", "0", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# left", "\n", "offsets", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# right", "\n", "offsets", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n", "flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "img", ".", "crop", "(", "(", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", ",", "o_h", "+", "crop_h", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "if", "self", ".", "flip", ":", "\n", "                    ", "flip_crop", "=", "crop", ".", "copy", "(", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "if", "img", ".", "mode", "==", "'L'", "and", "i", "%", "2", "==", "0", ":", "\n", "                        ", "flip_group", ".", "append", "(", "ImageOps", ".", "invert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                        ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "oversample_group", ".", "extend", "(", "flip_group", ")", "\n", "", "return", "oversample_group", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupMultiScaleCrop.__init__": [[187, 194], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "scales", "=", "None", ",", "max_distort", "=", "1", ",", "fix_crop", "=", "True", ",", "more_fix_crop", "=", "True", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "if", "scales", "is", "not", "None", "else", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", "\n", "self", ".", "max_distort", "=", "max_distort", "\n", "self", ".", "fix_crop", "=", "fix_crop", "\n", "self", ".", "more_fix_crop", "=", "more_fix_crop", "\n", "self", ".", "input_size", "=", "input_size", "if", "not", "isinstance", "(", "input_size", ",", "int", ")", "else", "[", "input_size", ",", "input_size", "]", "\n", "self", ".", "interpolation", "=", "Image", ".", "BILINEAR", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupMultiScaleCrop.__call__": [[195, 204], ["transforms.GroupMultiScaleCrop._sample_crop_size", "img.crop", "img.resize"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupMultiScaleCrop._sample_crop_size"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "im_size", "=", "img_group", "[", "0", "]", ".", "size", "\n", "\n", "crop_w", ",", "crop_h", ",", "offset_w", ",", "offset_h", "=", "self", ".", "_sample_crop_size", "(", "im_size", ")", "\n", "crop_img_group", "=", "[", "img", ".", "crop", "(", "(", "offset_w", ",", "offset_h", ",", "offset_w", "+", "crop_w", ",", "offset_h", "+", "crop_h", ")", ")", "for", "img", "in", "img_group", "]", "\n", "ret_img_group", "=", "[", "img", ".", "resize", "(", "(", "self", ".", "input_size", "[", "0", "]", ",", "self", ".", "input_size", "[", "1", "]", ")", ",", "self", ".", "interpolation", ")", "\n", "for", "img", "in", "crop_img_group", "]", "\n", "return", "ret_img_group", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupMultiScaleCrop._sample_crop_size": [[205, 228], ["min", "enumerate", "random.choice", "int", "enumerate", "random.randint", "random.randint", "transforms.GroupMultiScaleCrop._sample_fix_offset", "abs", "abs", "abs", "pairs.append"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupMultiScaleCrop._sample_fix_offset"], ["", "def", "_sample_crop_size", "(", "self", ",", "im_size", ")", ":", "\n", "        ", "image_w", ",", "image_h", "=", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", "\n", "\n", "# find a crop size", "\n", "base_size", "=", "min", "(", "image_w", ",", "image_h", ")", "\n", "crop_sizes", "=", "[", "int", "(", "base_size", "*", "x", ")", "for", "x", "in", "self", ".", "scales", "]", "\n", "crop_h", "=", "[", "self", ".", "input_size", "[", "1", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "1", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "crop_w", "=", "[", "self", ".", "input_size", "[", "0", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "0", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "\n", "pairs", "=", "[", "]", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "crop_h", ")", ":", "\n", "            ", "for", "j", ",", "w", "in", "enumerate", "(", "crop_w", ")", ":", "\n", "                ", "if", "abs", "(", "i", "-", "j", ")", "<=", "self", ".", "max_distort", ":", "\n", "                    ", "pairs", ".", "append", "(", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "", "", "crop_pair", "=", "random", ".", "choice", "(", "pairs", ")", "\n", "if", "not", "self", ".", "fix_crop", ":", "\n", "            ", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "image_w", "-", "crop_pair", "[", "0", "]", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "image_h", "-", "crop_pair", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "w_offset", ",", "h_offset", "=", "self", ".", "_sample_fix_offset", "(", "image_w", ",", "image_h", ",", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ")", "\n", "\n", "", "return", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ",", "w_offset", ",", "h_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupMultiScaleCrop._sample_fix_offset": [[229, 232], ["transforms.GroupMultiScaleCrop.fill_fix_offset", "random.choice"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["", "def", "_sample_fix_offset", "(", "self", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "offsets", "=", "self", ".", "fill_fix_offset", "(", "self", ".", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "return", "random", ".", "choice", "(", "offsets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupMultiScaleCrop.fill_fix_offset": [[233, 257], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fill_fix_offset", "(", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "ret", "=", "list", "(", ")", "\n", "ret", ".", "append", "(", "(", "0", ",", "0", ")", ")", "# upper left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "0", ")", ")", "# upper right", "\n", "ret", ".", "append", "(", "(", "0", ",", "4", "*", "h_step", ")", ")", "# lower left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "if", "more_fix_crop", ":", "\n", "            ", "ret", ".", "append", "(", "(", "0", ",", "2", "*", "h_step", ")", ")", "# center left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower center", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "0", "*", "h_step", ")", ")", "# upper center", "\n", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper right quarter", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower righ quarter", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupRandomSizedCrop.__init__": [[266, 269], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.GroupRandomSizedCrop.__call__": [[270, 304], ["range", "random.uniform", "int", "int", "list", "transforms.GroupScale", "transforms.GroupRandomCrop", "GroupRandomCrop.", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "list.append", "GroupScale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "*", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.08", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "and", "h", "<=", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "found", "=", "False", "\n", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "\n", "", "if", "found", ":", "\n", "            ", "out_group", "=", "list", "(", ")", "\n", "for", "img", "in", "img_group", ":", "\n", "                ", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "out_group", ".", "append", "(", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", ")", "\n", "", "return", "out_group", "\n", "", "else", ":", "\n", "# Fallback", "\n", "            ", "scale", "=", "GroupScale", "(", "self", ".", "size", ",", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "crop", "=", "GroupRandomCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "scale", "(", "img_group", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.Stack.__init__": [[308, 310], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "roll", "=", "False", ")", ":", "\n", "        ", "self", ".", "roll", "=", "roll", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.Stack.__call__": [[311, 319], ["numpy.concatenate", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "if", "img_group", "[", "0", "]", ".", "mode", "==", "'L'", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "x", ",", "2", ")", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", "\n", "", "elif", "img_group", "[", "0", "]", ".", "mode", "==", "'RGB'", ":", "\n", "            ", "if", "self", ".", "roll", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "x", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "img_group", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.ToTorchFormatTensor.__init__": [[324, 326], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "div", "=", "True", ")", ":", "\n", "        ", "self", ".", "div", "=", "div", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.ToTorchFormatTensor.__call__": [[327, 339], ["isinstance", "torch.from_numpy().permute().contiguous", "torch.ByteTensor", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float().div", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.ByteStorage.from_buffer", "len", "torch.from_numpy().permute", "pic.tobytes", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.from_numpy", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "# handle PIL Image", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "len", "(", "pic", ".", "mode", ")", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "if", "self", ".", "div", "else", "img", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.transforms.IdentityTransform.__call__": [[343, 345], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.__init__": [[14, 92], ["torch.nn.Module.__init__", "models.PAN._prepare_base_model", "ValueError", "print", "setattr", "models.PAN._prepare_tsn", "print", "models.PAN._construct_flow_model", "print", "ops.basic_ops.ConsensusModule", "torch.nn.Softmax", "models.PAN.partialBN", "getattr", "ops.PAN_modules.VAP", "print", "models.PAN._construct_pa_model", "print", "print", "models.PAN._construct_diff_model", "print"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN._prepare_base_model", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN._prepare_tsn", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN._construct_flow_model", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.partialBN", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN._construct_pa_model", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN._construct_diff_model"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_segments", ",", "modality", ",", "\n", "base_model", "=", "'resnet101'", ",", "new_length", "=", "None", ",", "\n", "consensus_type", "=", "'avg'", ",", "before_softmax", "=", "True", ",", "\n", "dropout", "=", "0.8", ",", "img_feature_dim", "=", "256", ",", "\n", "crop_num", "=", "1", ",", "partial_bn", "=", "True", ",", "print_spec", "=", "False", ",", "pretrain", "=", "'imagenet'", ",", "\n", "is_shift", "=", "False", ",", "shift_div", "=", "8", ",", "shift_place", "=", "'blockres'", ",", "fc_lr5", "=", "False", ",", "\n", "temporal_pool", "=", "False", ",", "non_local", "=", "False", ",", "data_length", "=", "1", ",", "has_VAP", "=", "False", ")", ":", "\n", "        ", "super", "(", "PAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "reshape", "=", "True", "\n", "self", ".", "before_softmax", "=", "before_softmax", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "crop_num", "=", "crop_num", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "img_feature_dim", "=", "img_feature_dim", "# the dimension of the CNN feature to represent each frame", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "\n", "self", ".", "is_shift", "=", "is_shift", "\n", "self", ".", "shift_div", "=", "shift_div", "\n", "self", ".", "shift_place", "=", "shift_place", "\n", "self", ".", "base_model_name", "=", "base_model", "\n", "self", ".", "fc_lr5", "=", "fc_lr5", "\n", "self", ".", "temporal_pool", "=", "temporal_pool", "\n", "self", ".", "non_local", "=", "non_local", "\n", "self", ".", "data_length", "=", "data_length", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "has_VIP", "=", "has_VAP", "\n", "\n", "if", "not", "before_softmax", "and", "consensus_type", "!=", "'avg'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only avg consensus can be used after Softmax\"", ")", "\n", "\n", "", "if", "new_length", "is", "None", ":", "\n", "            ", "self", ".", "new_length", "=", "1", "if", "modality", "==", "\"RGB\"", "or", "modality", "in", "[", "\"PA\"", ",", "\"Lite\"", "]", "else", "5", "\n", "", "else", ":", "\n", "            ", "self", ".", "new_length", "=", "new_length", "\n", "", "if", "print_spec", ":", "\n", "            ", "print", "(", "(", "\"\"\"\n    Initializing PAN with base model: {}.\n    PAN Configurations:\n        input_modality:     {}\n        num_segments:       {}\n        new_length:         {}\n        consensus_module:   {}\n        dropout_ratio:      {}\n        img_feature_dim:    {}\n            \"\"\"", ".", "format", "(", "base_model", ",", "self", ".", "modality", ",", "self", ".", "num_segments", ",", "self", ".", "new_length", ",", "consensus_type", ",", "self", ".", "dropout", ",", "self", ".", "img_feature_dim", ")", ")", ")", "\n", "\n", "", "self", ".", "_prepare_base_model", "(", "base_model", ")", "\n", "\n", "if", "self", ".", "has_VIP", ":", "\n", "            ", "feature_dim", "=", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "in_features", "\n", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "VAP", "(", "self", ".", "num_segments", ",", "feature_dim", ",", "self", ".", "num_class", ",", "self", ".", "dropout", ")", ")", "\n", "", "else", ":", "\n", "            ", "feature_dim", "=", "self", ".", "_prepare_tsn", "(", "num_class", ")", "\n", "\n", "", "if", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "print", "(", "\"Converting the ImageNet model to a flow init model\"", ")", "\n", "self", ".", "base_model", "=", "self", ".", "_construct_flow_model", "(", "self", ".", "base_model", ")", "\n", "print", "(", "\"Done. Flow model ready...\"", ")", "\n", "", "elif", "self", ".", "modality", "==", "'Lite'", ":", "\n", "            ", "print", "(", "\"=> Converting the ImageNet model to a PAN_Lite init model\"", ")", "\n", "self", ".", "base_model", "=", "self", ".", "_construct_pa_model", "(", "self", ".", "base_model", ")", "\n", "print", "(", "\"=> Done. PAN_lite model ready...\"", ")", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "print", "(", "\"Converting the ImageNet model to RGB+Diff init model\"", ")", "\n", "self", ".", "base_model", "=", "self", ".", "_construct_diff_model", "(", "self", ".", "base_model", ")", "\n", "print", "(", "\"Done. RGBDiff model ready.\"", ")", "\n", "\n", "", "if", "not", "self", ".", "has_VIP", ":", "\n", "            ", "self", ".", "consensus", "=", "ConsensusModule", "(", "consensus_type", ")", "\n", "\n", "", "if", "not", "self", ".", "before_softmax", ":", "\n", "            ", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "\n", "", "self", ".", "_enable_pbn", "=", "partial_bn", "\n", "if", "partial_bn", ":", "\n", "            ", "self", ".", "partialBN", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN._prepare_tsn": [[93, 111], ["getattr", "setattr", "setattr", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.constant_", "hasattr", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.init.normal_", "torch.nn.init.constant_", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "_prepare_tsn", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "feature_dim", "=", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "in_features", "\n", "if", "self", ".", "dropout", "==", "0", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Linear", "(", "feature_dim", ",", "num_class", ")", ")", "\n", "self", ".", "new_fc", "=", "None", "\n", "", "else", ":", "\n", "            ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ")", "\n", "self", ".", "new_fc", "=", "nn", ".", "Linear", "(", "feature_dim", ",", "num_class", ")", "\n", "\n", "", "std", "=", "0.001", "\n", "if", "self", ".", "new_fc", "is", "None", ":", "\n", "            ", "normal_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "new_fc", ",", "'weight'", ")", ":", "\n", "                ", "normal_", "(", "self", ".", "new_fc", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant_", "(", "self", ".", "new_fc", ".", "bias", ",", "0", ")", "\n", "", "", "return", "feature_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN._prepare_base_model": [[112, 185], ["print", "torch.nn.AdaptiveAvgPool2d", "ops.PAN_modules.PA", "getattr", "print", "make_temporal_shift", "print", "make_non_local", "mobilenet_v2", "torch.nn.AdaptiveAvgPool2d", "np.mean", "models.PAN.base_model.modules", "bninception", "ValueError", "np.mean", "print", "models.PAN.base_model.build_temporal_ops", "isinstance", "TemporalShift", "len", "print", "np.mean", "np.mean"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.make_temporal_shift", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.non_local.make_non_local", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.mobilenet_v2", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.bninception", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.build_temporal_ops"], ["", "def", "_prepare_base_model", "(", "self", ",", "base_model", ")", ":", "\n", "        ", "print", "(", "'=> base model: {}'", ".", "format", "(", "base_model", ")", ")", "\n", "\n", "if", "'resnet'", "in", "base_model", ":", "\n", "            ", "if", "self", ".", "modality", "in", "[", "\"PA\"", ",", "\"Lite\"", "]", ":", "\n", "                ", "self", ".", "PA", "=", "PA", "(", "self", ".", "data_length", ")", "\n", "", "self", ".", "base_model", "=", "getattr", "(", "torchvision", ".", "models", ",", "base_model", ")", "(", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ")", "\n", "if", "self", ".", "is_shift", ":", "\n", "                ", "print", "(", "'=> Adding temporal shift...'", ")", "\n", "from", "ops", ".", "temporal_shift", "import", "make_temporal_shift", "\n", "make_temporal_shift", "(", "self", ".", "base_model", ",", "self", ".", "num_segments", ",", "\n", "n_div", "=", "self", ".", "shift_div", ",", "place", "=", "self", ".", "shift_place", ",", "temporal_pool", "=", "self", ".", "temporal_pool", ")", "\n", "\n", "", "if", "self", ".", "non_local", ":", "\n", "                ", "print", "(", "'=> Adding non-local module...'", ")", "\n", "from", "ops", ".", "non_local", "import", "make_non_local", "\n", "make_non_local", "(", "self", ".", "base_model", ",", "self", ".", "num_segments", ")", "\n", "\n", "", "self", ".", "base_model", ".", "last_layer_name", "=", "'fc'", "\n", "self", ".", "input_size", "=", "224", "\n", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "input_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "self", ".", "base_model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "self", ".", "modality", "==", "'Flow'", ":", "\n", "                ", "self", ".", "input_mean", "=", "[", "0.5", "]", "\n", "self", ".", "input_std", "=", "[", "np", ".", "mean", "(", "self", ".", "input_std", ")", "]", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "                ", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "+", "[", "0", "]", "*", "3", "*", "self", ".", "new_length", "\n", "self", ".", "input_std", "=", "self", ".", "input_std", "+", "[", "np", ".", "mean", "(", "self", ".", "input_std", ")", "*", "2", "]", "*", "3", "*", "self", ".", "new_length", "\n", "\n", "", "", "elif", "base_model", "==", "'mobilenetv2'", ":", "\n", "            ", "from", "archs", ".", "mobilenet_v2", "import", "mobilenet_v2", ",", "InvertedResidual", "\n", "self", ".", "base_model", "=", "mobilenet_v2", "(", "True", "if", "self", ".", "pretrain", "==", "'imagenet'", "else", "False", ")", "\n", "\n", "self", ".", "base_model", ".", "last_layer_name", "=", "'classifier'", "\n", "self", ".", "input_size", "=", "224", "\n", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "input_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "self", ".", "base_model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "if", "self", ".", "is_shift", ":", "\n", "                ", "from", "ops", ".", "temporal_shift", "import", "TemporalShift", "\n", "for", "m", "in", "self", ".", "base_model", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "InvertedResidual", ")", "and", "len", "(", "m", ".", "conv", ")", "==", "8", "and", "m", ".", "use_res_connect", ":", "\n", "                        ", "if", "self", ".", "print_spec", ":", "\n", "                            ", "print", "(", "'Adding temporal shift... {}'", ".", "format", "(", "m", ".", "use_res_connect", ")", ")", "\n", "", "m", ".", "conv", "[", "0", "]", "=", "TemporalShift", "(", "m", ".", "conv", "[", "0", "]", ",", "n_segment", "=", "self", ".", "num_segments", ",", "n_div", "=", "self", ".", "shift_div", ")", "\n", "", "", "", "if", "self", ".", "modality", "==", "'Flow'", ":", "\n", "                ", "self", ".", "input_mean", "=", "[", "0.5", "]", "\n", "self", ".", "input_std", "=", "[", "np", ".", "mean", "(", "self", ".", "input_std", ")", "]", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "                ", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "+", "[", "0", "]", "*", "3", "*", "self", ".", "new_length", "\n", "self", ".", "input_std", "=", "self", ".", "input_std", "+", "[", "np", ".", "mean", "(", "self", ".", "input_std", ")", "*", "2", "]", "*", "3", "*", "self", ".", "new_length", "\n", "\n", "", "", "elif", "base_model", "==", "'BNInception'", ":", "\n", "            ", "from", "archs", ".", "bn_inception", "import", "bninception", "\n", "self", ".", "base_model", "=", "bninception", "(", "pretrained", "=", "self", ".", "pretrain", ")", "\n", "self", ".", "input_size", "=", "self", ".", "base_model", ".", "input_size", "\n", "self", ".", "input_mean", "=", "self", ".", "base_model", ".", "mean", "\n", "self", ".", "input_std", "=", "self", ".", "base_model", ".", "std", "\n", "self", ".", "base_model", ".", "last_layer_name", "=", "'fc'", "\n", "if", "self", ".", "modality", "==", "'Flow'", ":", "\n", "                ", "self", ".", "input_mean", "=", "[", "128", "]", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "                ", "self", ".", "input_mean", "=", "self", ".", "input_mean", "*", "(", "1", "+", "self", ".", "new_length", ")", "\n", "", "if", "self", ".", "is_shift", ":", "\n", "                ", "print", "(", "'Adding temporal shift...'", ")", "\n", "self", ".", "base_model", ".", "build_temporal_ops", "(", "\n", "self", ".", "num_segments", ",", "is_temporal_shift", "=", "self", ".", "shift_place", ",", "shift_div", "=", "self", ".", "shift_div", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown base model: {}'", ".", "format", "(", "base_model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.train": [[186, 203], ["super().train", "print", "models.PAN.base_model.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Override the default train() to freeze the BN parameters\n        :return:\n        \"\"\"", "\n", "super", "(", "PAN", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "count", "=", "0", "\n", "if", "self", ".", "_enable_pbn", "and", "mode", ":", "\n", "            ", "print", "(", "\"Freezing BatchNorm2D except the first one.\"", ")", "\n", "for", "m", "in", "self", ".", "base_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "if", "count", ">=", "(", "2", "if", "self", ".", "_enable_pbn", "else", "1", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "# shutdown update in frozen mode", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.partialBN": [[204, 206], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "partialBN", "(", "self", ",", "enable", ")", ":", "\n", "        ", "self", ".", "_enable_pbn", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.get_optim_policies": [[207, 275], ["models.PAN.modules", "isinstance", "isinstance", "isinstance", "list", "isinstance", "m.parameters", "first_conv_weight.append", "normal_weight.append", "list", "isinstance", "len", "first_conv_bias.append", "len", "normal_bias.append", "m.parameters", "lr5_weight.append", "normal_weight.append", "len", "isinstance", "lr10_bias.append", "normal_bias.append", "bn.extend", "list", "bn.extend", "len", "m.parameters", "list", "len", "ValueError", "m.parameters", "list", "m.parameters", "type"], "methods", ["None"], ["", "def", "get_optim_policies", "(", "self", ")", ":", "\n", "        ", "first_conv_weight", "=", "[", "]", "\n", "first_conv_bias", "=", "[", "]", "\n", "normal_weight", "=", "[", "]", "\n", "normal_bias", "=", "[", "]", "\n", "lr5_weight", "=", "[", "]", "\n", "lr10_bias", "=", "[", "]", "\n", "bn", "=", "[", "]", "\n", "custom_ops", "=", "[", "]", "\n", "\n", "conv_cnt", "=", "0", "\n", "bn_cnt", "=", "0", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "conv_cnt", "+=", "1", "\n", "if", "conv_cnt", "==", "1", ":", "\n", "                    ", "first_conv_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                        ", "first_conv_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                        ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                ", "ps", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "if", "self", ".", "fc_lr5", ":", "\n", "                    ", "lr5_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "normal_weight", ".", "append", "(", "ps", "[", "0", "]", ")", "\n", "", "if", "len", "(", "ps", ")", "==", "2", ":", "\n", "                    ", "if", "self", ".", "fc_lr5", ":", "\n", "                        ", "lr10_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                        ", "normal_bias", ".", "append", "(", "ps", "[", "1", "]", ")", "\n", "\n", "", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                    ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "bn_cnt", "+=", "1", "\n", "# later BN's are frozen", "\n", "if", "not", "self", ".", "_enable_pbn", "or", "bn_cnt", "==", "1", ":", "\n", "                    ", "bn", ".", "extend", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", "\n", "", "", "elif", "len", "(", "m", ".", "_modules", ")", "==", "0", ":", "\n", "                ", "if", "len", "(", "list", "(", "m", ".", "parameters", "(", ")", ")", ")", ">", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"New atomic module type: {}. Need to give it a learning policy\"", ".", "format", "(", "type", "(", "m", ")", ")", ")", "\n", "\n", "", "", "", "return", "[", "\n", "{", "'params'", ":", "first_conv_weight", ",", "'lr_mult'", ":", "5", "if", "self", ".", "modality", "==", "'Flow'", "or", "self", ".", "modality", "in", "[", "'PA'", ",", "'Lite'", "]", "else", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"first_conv_weight\"", "}", ",", "\n", "{", "'params'", ":", "first_conv_bias", ",", "'lr_mult'", ":", "10", "if", "self", ".", "modality", "==", "'Flow'", "or", "self", ".", "modality", "in", "[", "'PA'", ",", "'Lite'", "]", "else", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"first_conv_bias\"", "}", ",", "\n", "{", "'params'", ":", "normal_weight", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"normal_weight\"", "}", ",", "\n", "{", "'params'", ":", "normal_bias", ",", "'lr_mult'", ":", "2", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"normal_bias\"", "}", ",", "\n", "{", "'params'", ":", "bn", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"BN scale/shift\"", "}", ",", "\n", "{", "'params'", ":", "custom_ops", ",", "'lr_mult'", ":", "1", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"custom_ops\"", "}", ",", "\n", "# for fc", "\n", "{", "'params'", ":", "lr5_weight", ",", "'lr_mult'", ":", "5", ",", "'decay_mult'", ":", "1", ",", "\n", "'name'", ":", "\"lr5_weight\"", "}", ",", "\n", "{", "'params'", ":", "lr10_bias", ",", "'lr_mult'", ":", "10", ",", "'decay_mult'", ":", "0", ",", "\n", "'name'", ":", "\"lr10_bias\"", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.forward": [[277, 315], ["models.PAN.base_model", "models.PAN.new_fc", "models.PAN.softmax", "models.PAN.consensus", "models.PAN.squeeze", "models.PAN._get_diff", "models.PAN.PA", "models.PAN.base_model", "models.PAN.view", "models.PAN.view", "input.view.view.view", "input.view.view.view", "models.PAN.PA", "torch.cat", "models.PAN.base_model", "models.PAN.base_model", "input.view.view.view", "input.view.view.view", "models.PAN.size", "models.PAN.size", "input.view.view.size", "input.view.view.size", "input.view.view.size", "input.view.view.size"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.softmax", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN._get_diff"], ["", "def", "forward", "(", "self", ",", "input", ",", "no_reshape", "=", "False", ")", ":", "\n", "        ", "if", "not", "no_reshape", ":", "\n", "            ", "sample_len", "=", "(", "3", "if", "self", ".", "modality", "in", "[", "'RGB'", ",", "'PA'", ",", "'Lite'", "]", "else", "2", ")", "*", "self", ".", "new_length", "\n", "\n", "if", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "                ", "sample_len", "=", "3", "*", "self", ".", "new_length", "\n", "input", "=", "self", ".", "_get_diff", "(", "input", ")", "\n", "\n", "", "if", "self", ".", "modality", "==", "'PA'", ":", "\n", "                ", "base_out", "=", "self", ".", "PA", "(", "input", ".", "view", "(", "(", "-", "1", ",", "sample_len", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", ")", "\n", "base_out", "=", "self", ".", "base_model", "(", "base_out", ")", "\n", "", "elif", "self", ".", "modality", "==", "'Lite'", ":", "\n", "                ", "input", "=", "input", ".", "view", "(", "(", "-", "1", ",", "sample_len", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "PA", "=", "self", ".", "PA", "(", "input", ")", "\n", "RGB", "=", "input", ".", "view", "(", "(", "-", "1", ",", "self", ".", "data_length", ",", "sample_len", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", "\n", "base_out", "=", "torch", ".", "cat", "(", "(", "RGB", ",", "PA", ")", ",", "1", ")", "\n", "base_out", "=", "self", ".", "base_model", "(", "base_out", ")", "\n", "", "else", ":", "\n", "                ", "base_out", "=", "self", ".", "base_model", "(", "input", ".", "view", "(", "(", "-", "1", ",", "sample_len", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "base_out", "=", "self", ".", "base_model", "(", "input", ")", "\n", "\n", "", "if", "self", ".", "has_VIP", ":", "\n", "            ", "return", "base_out", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "base_out", "=", "self", ".", "new_fc", "(", "base_out", ")", "\n", "\n", "", "if", "not", "self", ".", "before_softmax", ":", "\n", "            ", "base_out", "=", "self", ".", "softmax", "(", "base_out", ")", "\n", "\n", "", "if", "self", ".", "reshape", ":", "\n", "            ", "if", "self", ".", "is_shift", "and", "self", ".", "temporal_pool", ":", "\n", "                ", "base_out", "=", "base_out", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", "//", "2", ")", "+", "base_out", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "base_out", "=", "base_out", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ")", "+", "base_out", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "", "output", "=", "self", ".", "consensus", "(", "base_out", ")", "\n", "return", "output", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN._get_diff": [[316, 331], ["input.view", "reversed", "input.view.clone", "input_view[].clone", "list", "range", "input.size"], "methods", ["None"], ["", "", "def", "_get_diff", "(", "self", ",", "input", ",", "keep_rgb", "=", "False", ")", ":", "\n", "        ", "input_c", "=", "3", "if", "self", ".", "modality", "in", "[", "\"RGB\"", ",", "\"PA\"", ",", "\"Lite\"", ",", "\"RGBDiff\"", "]", "else", "2", "\n", "input_view", "=", "input", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ",", "self", ".", "new_length", "+", "1", ",", "input_c", ",", ")", "+", "input", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "if", "keep_rgb", ":", "\n", "            ", "new_data", "=", "input_view", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "new_data", "=", "input_view", "[", ":", ",", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "\n", "", "for", "x", "in", "reversed", "(", "list", "(", "range", "(", "1", ",", "self", ".", "new_length", "+", "1", ")", ")", ")", ":", "\n", "            ", "if", "keep_rgb", ":", "\n", "                ", "new_data", "[", ":", ",", ":", ",", "x", ",", ":", ",", ":", ",", ":", "]", "=", "input_view", "[", ":", ",", ":", ",", "x", ",", ":", ",", ":", ",", ":", "]", "-", "input_view", "[", ":", ",", ":", ",", "x", "-", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "new_data", "[", ":", ",", ":", ",", "x", "-", "1", ",", ":", ",", ":", ",", ":", "]", "=", "input_view", "[", ":", ",", ":", ",", "x", ",", ":", ",", ":", ",", ":", "]", "-", "input_view", "[", ":", ",", ":", ",", "x", "-", "1", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN._construct_pa_model": [[332, 364], ["list", "params[].size", "params[].data.mean().expand().contiguous", "torch.nn.Conv2d", "setattr", "models.PAN.base_model.modules", "list", "x.clone", "len", "model_zoo.load_url", "base_model.load_state_dict", "print", "filter", "conv_layer.parameters", "params[].data.mean().expand", "list", "list", "container.state_dict().keys", "isinstance", "range", "params[].data.mean", "len", "len", "container.state_dict"], "methods", ["None"], ["", "def", "_construct_pa_model", "(", "self", ",", "base_model", ")", ":", "\n", "# modify the convolution layers", "\n", "# Torch models are usually defined in a hierarchical way.", "\n", "# nn.modules.children() return all sub modules in a DFS manner", "\n", "        ", "modules", "=", "list", "(", "self", ".", "base_model", ".", "modules", "(", ")", ")", "\n", "first_conv_idx", "=", "list", "(", "filter", "(", "lambda", "x", ":", "isinstance", "(", "modules", "[", "x", "]", ",", "nn", ".", "Conv2d", ")", ",", "list", "(", "range", "(", "len", "(", "modules", ")", ")", ")", ")", ")", "[", "0", "]", "\n", "conv_layer", "=", "modules", "[", "first_conv_idx", "]", "\n", "container", "=", "modules", "[", "first_conv_idx", "-", "1", "]", "\n", "\n", "# modify parameters, assume the first blob contains the convolution kernels", "\n", "params", "=", "[", "x", ".", "clone", "(", ")", "for", "x", "in", "conv_layer", ".", "parameters", "(", ")", "]", "\n", "kernel_size", "=", "params", "[", "0", "]", ".", "size", "(", ")", "\n", "new_kernel_size", "=", "kernel_size", "[", ":", "1", "]", "+", "(", "6", ",", ")", "+", "kernel_size", "[", "2", ":", "]", "\n", "new_kernels", "=", "params", "[", "0", "]", ".", "data", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "new_kernel_size", ")", ".", "contiguous", "(", ")", "\n", "\n", "new_conv", "=", "nn", ".", "Conv2d", "(", "6", ",", "conv_layer", ".", "out_channels", ",", "\n", "conv_layer", ".", "kernel_size", ",", "conv_layer", ".", "stride", ",", "conv_layer", ".", "padding", ",", "\n", "bias", "=", "True", "if", "len", "(", "params", ")", "==", "2", "else", "False", ")", "\n", "new_conv", ".", "weight", ".", "data", "=", "new_kernels", "\n", "if", "len", "(", "params", ")", "==", "2", ":", "\n", "            ", "new_conv", ".", "bias", ".", "data", "=", "params", "[", "1", "]", ".", "data", "# add bias if neccessary", "\n", "", "layer_name", "=", "list", "(", "container", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "[", "0", "]", "[", ":", "-", "7", "]", "# remove .weight suffix to get the layer name", "\n", "\n", "# replace the first convlution layer", "\n", "setattr", "(", "container", ",", "layer_name", ",", "new_conv", ")", "\n", "\n", "if", "self", ".", "base_model_name", "==", "'BNInception'", ":", "\n", "            ", "import", "torch", ".", "utils", ".", "model_zoo", "as", "model_zoo", "\n", "sd", "=", "model_zoo", ".", "load_url", "(", "'https://www.dropbox.com/s/35ftw2t4mxxgjae/BNInceptionFlow-ef652051.pth.tar?dl=1'", ")", "\n", "base_model", ".", "load_state_dict", "(", "sd", ")", "\n", "print", "(", "'=> Loading pretrained Flow weight done...'", ")", "\n", "", "return", "base_model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN._construct_flow_model": [[365, 399], ["list", "params[].size", "params[].data.mean().expand().contiguous", "torch.nn.Conv2d", "setattr", "models.PAN.base_model.modules", "list", "x.clone", "len", "model_zoo.load_url", "base_model.load_state_dict", "print", "print", "filter", "conv_layer.parameters", "params[].data.mean().expand", "list", "list", "container.state_dict().keys", "isinstance", "range", "params[].data.mean", "len", "len", "container.state_dict"], "methods", ["None"], ["", "def", "_construct_flow_model", "(", "self", ",", "base_model", ")", ":", "\n", "# modify the convolution layers", "\n", "# Torch models are usually defined in a hierarchical way.", "\n", "# nn.modules.children() return all sub modules in a DFS manner", "\n", "        ", "modules", "=", "list", "(", "self", ".", "base_model", ".", "modules", "(", ")", ")", "\n", "first_conv_idx", "=", "list", "(", "filter", "(", "lambda", "x", ":", "isinstance", "(", "modules", "[", "x", "]", ",", "nn", ".", "Conv2d", ")", ",", "list", "(", "range", "(", "len", "(", "modules", ")", ")", ")", ")", ")", "[", "0", "]", "\n", "conv_layer", "=", "modules", "[", "first_conv_idx", "]", "\n", "container", "=", "modules", "[", "first_conv_idx", "-", "1", "]", "\n", "\n", "# modify parameters, assume the first blob contains the convolution kernels", "\n", "params", "=", "[", "x", ".", "clone", "(", ")", "for", "x", "in", "conv_layer", ".", "parameters", "(", ")", "]", "\n", "kernel_size", "=", "params", "[", "0", "]", ".", "size", "(", ")", "\n", "new_kernel_size", "=", "kernel_size", "[", ":", "1", "]", "+", "(", "2", "*", "self", ".", "new_length", ",", ")", "+", "kernel_size", "[", "2", ":", "]", "\n", "new_kernels", "=", "params", "[", "0", "]", ".", "data", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "new_kernel_size", ")", ".", "contiguous", "(", ")", "\n", "\n", "new_conv", "=", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "new_length", ",", "conv_layer", ".", "out_channels", ",", "\n", "conv_layer", ".", "kernel_size", ",", "conv_layer", ".", "stride", ",", "conv_layer", ".", "padding", ",", "\n", "bias", "=", "True", "if", "len", "(", "params", ")", "==", "2", "else", "False", ")", "\n", "new_conv", ".", "weight", ".", "data", "=", "new_kernels", "\n", "if", "len", "(", "params", ")", "==", "2", ":", "\n", "            ", "new_conv", ".", "bias", ".", "data", "=", "params", "[", "1", "]", ".", "data", "# add bias if neccessary", "\n", "", "layer_name", "=", "list", "(", "container", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "[", "0", "]", "[", ":", "-", "7", "]", "# remove .weight suffix to get the layer name", "\n", "\n", "# replace the first convlution layer", "\n", "setattr", "(", "container", ",", "layer_name", ",", "new_conv", ")", "\n", "\n", "if", "self", ".", "base_model_name", "==", "'BNInception'", ":", "\n", "            ", "import", "torch", ".", "utils", ".", "model_zoo", "as", "model_zoo", "\n", "sd", "=", "model_zoo", ".", "load_url", "(", "'https://www.dropbox.com/s/35ftw2t4mxxgjae/BNInceptionFlow-ef652051.pth.tar?dl=1'", ")", "\n", "base_model", ".", "load_state_dict", "(", "sd", ")", "\n", "print", "(", "'=> Loading pretrained Flow weight done...'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'#'", "*", "30", ",", "'Warning! No Flow pretrained model is found'", ")", "\n", "", "return", "base_model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN._construct_diff_model": [[400, 432], ["list", "params[].size", "torch.nn.Conv2d", "setattr", "models.PAN.base_model.modules", "filter", "x.clone", "params[].data.mean().expand().contiguous", "torch.cat", "len", "list", "conv_layer.parameters", "list", "isinstance", "range", "params[].data.mean().expand", "params[].data.mean().expand().contiguous", "container.state_dict().keys", "len", "len", "params[].data.mean", "params[].data.mean().expand", "container.state_dict", "params[].data.mean"], "methods", ["None"], ["", "def", "_construct_diff_model", "(", "self", ",", "base_model", ",", "keep_rgb", "=", "False", ")", ":", "\n", "# modify the convolution layers", "\n", "# Torch models are usually defined in a hierarchical way.", "\n", "# nn.modules.children() return all sub modules in a DFS manner", "\n", "        ", "modules", "=", "list", "(", "self", ".", "base_model", ".", "modules", "(", ")", ")", "\n", "first_conv_idx", "=", "filter", "(", "lambda", "x", ":", "isinstance", "(", "modules", "[", "x", "]", ",", "nn", ".", "Conv2d", ")", ",", "list", "(", "range", "(", "len", "(", "modules", ")", ")", ")", ")", "[", "0", "]", "\n", "conv_layer", "=", "modules", "[", "first_conv_idx", "]", "\n", "container", "=", "modules", "[", "first_conv_idx", "-", "1", "]", "\n", "\n", "# modify parameters, assume the first blob contains the convolution kernels", "\n", "params", "=", "[", "x", ".", "clone", "(", ")", "for", "x", "in", "conv_layer", ".", "parameters", "(", ")", "]", "\n", "kernel_size", "=", "params", "[", "0", "]", ".", "size", "(", ")", "\n", "if", "not", "keep_rgb", ":", "\n", "            ", "new_kernel_size", "=", "kernel_size", "[", ":", "1", "]", "+", "(", "3", "*", "self", ".", "new_length", ",", ")", "+", "kernel_size", "[", "2", ":", "]", "\n", "new_kernels", "=", "params", "[", "0", "]", ".", "data", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "new_kernel_size", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "new_kernel_size", "=", "kernel_size", "[", ":", "1", "]", "+", "(", "3", "*", "self", ".", "new_length", ",", ")", "+", "kernel_size", "[", "2", ":", "]", "\n", "new_kernels", "=", "torch", ".", "cat", "(", "(", "params", "[", "0", "]", ".", "data", ",", "params", "[", "0", "]", ".", "data", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "new_kernel_size", ")", ".", "contiguous", "(", ")", ")", ",", "\n", "1", ")", "\n", "new_kernel_size", "=", "kernel_size", "[", ":", "1", "]", "+", "(", "3", "+", "3", "*", "self", ".", "new_length", ",", ")", "+", "kernel_size", "[", "2", ":", "]", "\n", "\n", "", "new_conv", "=", "nn", ".", "Conv2d", "(", "new_kernel_size", "[", "1", "]", ",", "conv_layer", ".", "out_channels", ",", "\n", "conv_layer", ".", "kernel_size", ",", "conv_layer", ".", "stride", ",", "conv_layer", ".", "padding", ",", "\n", "bias", "=", "True", "if", "len", "(", "params", ")", "==", "2", "else", "False", ")", "\n", "new_conv", ".", "weight", ".", "data", "=", "new_kernels", "\n", "if", "len", "(", "params", ")", "==", "2", ":", "\n", "            ", "new_conv", ".", "bias", ".", "data", "=", "params", "[", "1", "]", ".", "data", "# add bias if neccessary", "\n", "", "layer_name", "=", "list", "(", "container", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "[", "0", "]", "[", ":", "-", "7", "]", "# remove .weight suffix to get the layer name", "\n", "\n", "# replace the first convolution layer", "\n", "setattr", "(", "container", ",", "layer_name", ",", "new_conv", ")", "\n", "return", "base_model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.crop_size": [[433, 436], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "crop_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.scale_size": [[437, 440], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_size", "*", "256", "//", "224", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.models.PAN.get_augmentation": [[441, 455], ["torchvision.transforms.Compose", "print", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip", "GroupMultiScaleCrop", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip", "GroupMultiScaleCrop", "GroupRandomHorizontalFlip"], "methods", ["None"], ["", "def", "get_augmentation", "(", "self", ",", "flip", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "modality", "in", "[", "'RGB'", ",", "'PA'", ",", "'Lite'", "]", ":", "\n", "            ", "if", "flip", ":", "\n", "                ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "False", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'=> NO FLIP!!!'", ")", "\n", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", ")", "]", ")", "\n", "", "", "elif", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "True", ")", "]", ")", "\n", "", "elif", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "return", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "GroupMultiScaleCrop", "(", "self", ".", "input_size", ",", "[", "1", ",", ".875", ",", ".75", "]", ")", ",", "\n", "GroupRandomHorizontalFlip", "(", "is_flow", "=", "False", ")", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.PAN_modules.PA.__init__": [[11, 19], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "PAN_modules.PA.modules", "isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_length", ")", ":", "\n", "        ", "super", "(", "PA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shallow_conv", "=", "nn", ".", "Conv2d", "(", "3", ",", "8", ",", "7", ",", "1", ",", "3", ")", "\n", "self", ".", "n_length", "=", "n_length", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.PAN_modules.PA.forward": [[20, 30], ["x.view.view.view", "PAN_modules.PA.shallow_conv", "x.view.view.view", "range", "d.view", "x.view.view.size", "x.view.view.size", "x.view.view.size", "x.view.view.size", "x.view.view.size", "torch.cat", "x.view.view.size", "torch.nn.PairwiseDistance"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", ",", "w", "=", "x", ".", "size", "(", "-", "2", ")", ",", "x", ".", "size", "(", "-", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "(", "-", "1", ",", "3", ")", "+", "x", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "x", "=", "self", ".", "shallow_conv", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "n_length", ",", "x", ".", "size", "(", "-", "3", ")", ",", "x", ".", "size", "(", "-", "2", ")", "*", "x", ".", "size", "(", "-", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_length", "-", "1", ")", ":", "\n", "            ", "d_i", "=", "nn", ".", "PairwiseDistance", "(", "p", "=", "2", ")", "(", "x", "[", ":", ",", "i", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "i", "+", "1", ",", ":", ",", ":", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "d", "=", "d_i", "if", "i", "==", "0", "else", "torch", ".", "cat", "(", "(", "d", ",", "d_i", ")", ",", "1", ")", "\n", "", "PA", "=", "d", ".", "view", "(", "-", "1", ",", "1", "*", "(", "self", ".", "n_length", "-", "1", ")", ",", "h", ",", "w", ")", "\n", "return", "PA", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.PAN_modules.VAP.__init__": [[32, 59], ["torch.nn.Module.__init__", "int", "print", "range", "torch.nn.AdaptiveAvgPool1d", "torch.nn.Sequential", "torch.nn.Softmax", "torch.nn.Dropout", "torch.nn.Linear", "PAN_modules.VAP.modules", "math.log", "setattr", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "isinstance", "torch.nn.MaxPool3d", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_segment", ",", "feature_dim", ",", "num_class", ",", "dropout_ratio", ")", ":", "\n", "        ", "super", "(", "VAP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "VAP_level", "=", "int", "(", "math", ".", "log", "(", "n_segment", ",", "2", ")", ")", "\n", "print", "(", "\"=> Using {}-level VAP\"", ".", "format", "(", "VAP_level", ")", ")", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "self", ".", "VAP_level", "=", "VAP_level", "\n", "total_timescale", "=", "0", "\n", "for", "i", "in", "range", "(", "VAP_level", ")", ":", "\n", "           ", "timescale", "=", "2", "**", "i", "\n", "total_timescale", "+=", "timescale", "\n", "setattr", "(", "self", ",", "\"VAP_{}\"", ".", "format", "(", "timescale", ")", ",", "nn", ".", "MaxPool3d", "(", "(", "n_segment", "//", "timescale", ",", "1", ",", "1", ")", ",", "1", ",", "0", ",", "(", "timescale", ",", "1", ",", "1", ")", ")", ")", "\n", "", "self", ".", "GAP", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "TES", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "total_timescale", ",", "total_timescale", "*", "4", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "total_timescale", "*", "4", ",", "total_timescale", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_ratio", ")", "\n", "self", ".", "pred", "=", "nn", ".", "Linear", "(", "feature_dim", ",", "num_class", ")", "\n", "\n", "# fc init", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.001", ")", "\n", "if", "hasattr", "(", "m", ".", "bias", ",", "'data'", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.PAN_modules.VAP.forward": [[60, 71], ["PAN_modules.VAP.size", "PAN_modules.VAP.view().permute", "torch.cat().squeeze().squeeze().permute", "PAN_modules.VAP.GAP().squeeze", "PAN_modules.VAP.softmax", "PAN_modules.VAP.sum", "PAN_modules.VAP.dropout", "PAN_modules.VAP.pred", "PAN_modules.VAP.TES", "PAN_modules.VAP.unsqueeze", "PAN_modules.VAP.view", "PAN_modules.VAP.view", "torch.cat().squeeze().squeeze", "PAN_modules.VAP.GAP", "torch.cat().squeeze", "torch.cat", "tuple", "getattr", "range"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.softmax"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "d", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "n_segment", ",", "d", ",", "1", ",", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", "x", "=", "torch", ".", "cat", "(", "tuple", "(", "[", "getattr", "(", "self", ",", "\"VAP_{}\"", ".", "format", "(", "2", "**", "i", ")", ")", "(", "x", ")", "for", "i", "in", "range", "(", "self", ".", "VAP_level", ")", "]", ")", ",", "2", ")", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "3", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "w", "=", "self", ".", "GAP", "(", "x", ")", ".", "squeeze", "(", "2", ")", "\n", "w", "=", "self", ".", "softmax", "(", "self", ".", "TES", "(", "w", ")", ")", "\n", "x", "=", "x", "*", "w", ".", "unsqueeze", "(", "2", ")", "\n", "x", "=", "x", ".", "sum", "(", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "pred", "(", "x", ".", "view", "(", "-", "1", ",", "d", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.non_local._NonLocalBlockND.__init__": [[11, 65], ["torch.nn.Module.__init__", "conv_nd", "conv_nd", "conv_nd", "torch.nn.MaxPool3d", "torch.nn.Sequential", "torch.nn.init.constant_", "torch.nn.init.constant_", "conv_nd", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool1d", "conv_nd", "bn"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "dimension", "=", "3", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "_NonLocalBlockND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "dimension", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "sub_sample", "=", "sub_sample", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "            ", "self", ".", "inter_channels", "=", "in_channels", "//", "2", "\n", "if", "self", ".", "inter_channels", "==", "0", ":", "\n", "                ", "self", ".", "inter_channels", "=", "1", "\n", "\n", "", "", "if", "dimension", "==", "3", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv3d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm3d", "\n", "", "elif", "dimension", "==", "2", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "", "else", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv1d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "(", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "\n", "\n", "", "self", ".", "g", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "bn_layer", ":", "\n", "            ", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "bn", "(", "self", ".", "in_channels", ")", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "theta", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "phi", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "sub_sample", ":", "\n", "            ", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "self", ".", "g", ",", "max_pool_layer", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Sequential", "(", "self", ".", "phi", ",", "max_pool_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.non_local._NonLocalBlockND.forward": [[66, 90], ["x.size", "non_local._NonLocalBlockND.g().view", "g_x.permute.permute.permute", "non_local._NonLocalBlockND.theta().view", "theta_x.permute.permute.permute", "non_local._NonLocalBlockND.phi().view", "torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "non_local._NonLocalBlockND.W", "non_local._NonLocalBlockND.g", "non_local._NonLocalBlockND.theta", "non_local._NonLocalBlockND.phi", "y.view.view.permute", "x.size"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.softmax"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n        :param x: (b, c, t, h, w)\n        :return:\n        '''", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "f_div_C", "=", "F", ".", "softmax", "(", "f", ",", "dim", "=", "-", "1", ")", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.non_local.NONLocalBlock1D.__init__": [[93, 98], ["non_local._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock1D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "1", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.non_local.NONLocalBlock2D.__init__": [[101, 106], ["non_local._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "2", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.non_local.NONLocalBlock3D.__init__": [[109, 114], ["non_local._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock3D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "3", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.non_local.NL3DWrapper.__init__": [[117, 122], ["torch.nn.Module.__init__", "non_local.NONLocalBlock3D"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "n_segment", ")", ":", "\n", "        ", "super", "(", "NL3DWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "block", "\n", "self", ".", "nl", "=", "NONLocalBlock3D", "(", "block", ".", "bn3", ".", "num_features", ")", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.non_local.NL3DWrapper.forward": [[123, 131], ["non_local.NL3DWrapper.block", "x.transpose().contiguous().view.transpose().contiguous().view.size", "x.transpose().contiguous().view.transpose().contiguous().view.view().transpose", "non_local.NL3DWrapper.nl", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "x.transpose().contiguous().view.transpose().contiguous().view.view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "x.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block", "(", "x", ")", "\n", "\n", "nt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "nt", "//", "self", ".", "n_segment", ",", "self", ".", "n_segment", ",", "c", ",", "h", ",", "w", ")", ".", "transpose", "(", "1", ",", "2", ")", "# n, c, t, h, w", "\n", "x", "=", "self", ".", "nl", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nt", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.non_local.make_non_local": [[133, 153], ["isinstance", "torch.nn.Sequential", "torch.nn.Sequential", "non_local.NL3DWrapper", "non_local.NL3DWrapper", "non_local.NL3DWrapper", "non_local.NL3DWrapper", "non_local.NL3DWrapper"], "function", ["None"], ["", "", "def", "make_non_local", "(", "net", ",", "n_segment", ")", ":", "\n", "    ", "import", "torchvision", "\n", "import", "archs", "\n", "if", "isinstance", "(", "net", ",", "torchvision", ".", "models", ".", "ResNet", ")", ":", "\n", "        ", "net", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "NL3DWrapper", "(", "net", ".", "layer2", "[", "0", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer2", "[", "1", "]", ",", "\n", "NL3DWrapper", "(", "net", ".", "layer2", "[", "2", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer2", "[", "3", "]", ",", "\n", ")", "\n", "net", ".", "layer3", "=", "nn", ".", "Sequential", "(", "\n", "NL3DWrapper", "(", "net", ".", "layer3", "[", "0", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer3", "[", "1", "]", ",", "\n", "NL3DWrapper", "(", "net", ".", "layer3", "[", "2", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer3", "[", "3", "]", ",", "\n", "NL3DWrapper", "(", "net", ".", "layer3", "[", "4", "]", ",", "n_segment", ")", ",", "\n", "net", ".", "layer3", "[", "5", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset_config.return_ucf101": [[11, 26], ["NotImplementedError"], "function", ["None"], ["def", "return_ucf101", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "101", "\n", "if", "modality", "in", "[", "'RGB'", ",", "'PA'", ",", "'Lite'", "]", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'ucf101_frames'", "\n", "filename_imglist_train", "=", "'/data/zhangcan/file_lists/ucf101/split1/train.txt'", "\n", "filename_imglist_val", "=", "'/data/zhangcan/file_lists/ucf101/split1/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'UCF101/jpg'", "\n", "filename_imglist_train", "=", "'UCF101/file_list/ucf101_flow_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'UCF101/file_list/ucf101_flow_val_split_1.txt'", "\n", "prefix", "=", "'flow_{}_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset_config.return_hmdb51": [[28, 43], ["NotImplementedError"], "function", ["None"], ["", "def", "return_hmdb51", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "51", "\n", "if", "modality", "in", "[", "'RGB'", ",", "'PA'", ",", "'Lite'", "]", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'hmdb51_frames'", "\n", "filename_imglist_train", "=", "'/data/zhangcan/file_lists/hmdb51/split1/train.txt'", "\n", "filename_imglist_val", "=", "'/data/zhangcan/file_lists/hmdb51/split1/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'HMDB51/images'", "\n", "filename_imglist_train", "=", "'HMDB51/splits/hmdb51_flow_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'HMDB51/splits/hmdb51_flow_val_split_1.txt'", "\n", "prefix", "=", "'flow_{}_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset_config.return_something": [[45, 61], ["print"], "function", ["None"], ["", "def", "return_something", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "174", "\n", "if", "modality", "in", "[", "'RGB'", ",", "'PA'", ",", "'Lite'", "]", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'sthv1_frames'", "\n", "filename_imglist_train", "=", "'/data/zhangcan/file_lists/sthv1/split/train.txt'", "\n", "filename_imglist_val", "=", "'/data/zhangcan/file_lists/sthv1/split/val.txt'", "\n", "prefix", "=", "'{:05d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'something/v1/20bn-something-something-v1-flow'", "\n", "filename_imglist_train", "=", "'something/v1/train_videofolder_flow.txt'", "\n", "filename_imglist_val", "=", "'something/v1/val_videofolder_flow.txt'", "\n", "prefix", "=", "'{:06d}-{}_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'no such modality:'", "+", "modality", ")", "\n", "raise", "NotImplementedError", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset_config.return_somethingv2": [[63, 78], ["NotImplementedError"], "function", ["None"], ["", "def", "return_somethingv2", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "174", "\n", "if", "modality", "in", "[", "'RGB'", ",", "'PA'", ",", "'Lite'", "]", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'sthv2_frames'", "\n", "filename_imglist_train", "=", "'/data/zhangcan/file_lists/sthv2/split/train.txt'", "\n", "filename_imglist_val", "=", "'/data/zhangcan/file_lists/sthv2/split/val.txt'", "\n", "prefix", "=", "'{:06d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'something/v2/20bn-something-something-v2-flow'", "\n", "filename_imglist_train", "=", "'something/v2/train_videofolder_flow.txt'", "\n", "filename_imglist_val", "=", "'something/v2/val_videofolder_flow.txt'", "\n", "prefix", "=", "'{:06d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset_config.return_jester": [[80, 90], ["NotImplementedError"], "function", ["None"], ["", "def", "return_jester", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "27", "\n", "if", "modality", "in", "[", "'RGB'", ",", "'PA'", ",", "'Lite'", "]", ":", "\n", "        ", "prefix", "=", "'{:05d}.jpg'", "\n", "root_data", "=", "ROOT_DATASET", "+", "'jester_frames'", "\n", "filename_imglist_train", "=", "'/data/zhangcan/file_lists/jester/split/train.txt'", "\n", "filename_imglist_val", "=", "'/data/zhangcan/file_lists/jester/split/val.txt'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset_config.return_kinetics": [[92, 102], ["NotImplementedError"], "function", ["None"], ["", "def", "return_kinetics", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "400", "\n", "if", "modality", "in", "[", "'RGB'", ",", "'PA'", ",", "'Lite'", "]", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'kinetics400_frames'", "\n", "filename_imglist_train", "=", "'/data/zhangcan/file_lists/kin400/split/train.txt'", "\n", "filename_imglist_val", "=", "'/data/zhangcan/file_lists/kin400/split/val.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset_config.return_dataset": [[104, 125], ["os.path.join", "os.path.join", "isinstance", "len", "print", "ValueError", "os.path.join", "open", "f.readlines", "item.rstrip"], "function", ["None"], ["", "def", "return_dataset", "(", "dataset", ",", "modality", ")", ":", "\n", "    ", "dict_single", "=", "{", "'jester'", ":", "return_jester", ",", "'something'", ":", "return_something", ",", "'somethingv2'", ":", "return_somethingv2", ",", "\n", "'ucf101'", ":", "return_ucf101", ",", "'hmdb51'", ":", "return_hmdb51", ",", "\n", "'kinetics'", ":", "return_kinetics", "}", "\n", "if", "dataset", "in", "dict_single", ":", "\n", "        ", "file_categories", ",", "file_imglist_train", ",", "file_imglist_val", ",", "root_data", ",", "prefix", "=", "dict_single", "[", "dataset", "]", "(", "modality", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown dataset '", "+", "dataset", ")", "\n", "\n", "", "file_imglist_train", "=", "os", ".", "path", ".", "join", "(", "ROOT_DATASET", ",", "file_imglist_train", ")", "\n", "file_imglist_val", "=", "os", ".", "path", ".", "join", "(", "ROOT_DATASET", ",", "file_imglist_val", ")", "\n", "if", "isinstance", "(", "file_categories", ",", "str", ")", ":", "\n", "        ", "file_categories", "=", "os", ".", "path", ".", "join", "(", "ROOT_DATASET", ",", "file_categories", ")", "\n", "with", "open", "(", "file_categories", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "categories", "=", "[", "item", ".", "rstrip", "(", ")", "for", "item", "in", "lines", "]", "\n", "", "else", ":", "# number of categories", "\n", "        ", "categories", "=", "[", "None", "]", "*", "file_categories", "\n", "", "n_class", "=", "len", "(", "categories", ")", "\n", "print", "(", "'{}: {} classes'", ".", "format", "(", "dataset", ",", "n_class", ")", ")", "\n", "return", "n_class", ",", "file_imglist_train", ",", "file_imglist_val", ",", "root_data", ",", "prefix", "\n", "", ""]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.VideoRecord.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "row", ")", ":", "\n", "        ", "self", ".", "_data", "=", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.VideoRecord.path": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.VideoRecord.num_frames": [[23, 26], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_frames", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.VideoRecord.label": [[27, 30], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "label", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet.__init__": [[33, 65], ["dataset.PANDataSet._parse_list", "print", "print", "print", "lmdb.open().begin().cursor", "lmdb.open().begin", "lmdb.open"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet._parse_list"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "list_file", ",", "\n", "num_segments", "=", "3", ",", "new_length", "=", "1", ",", "modality", "=", "'RGB'", ",", "\n", "image_tmpl", "=", "'img_{:05d}.jpg'", ",", "transform", "=", "None", ",", "\n", "random_shift", "=", "True", ",", "test_mode", "=", "False", ",", "\n", "remove_missing", "=", "False", ",", "dense_sample", "=", "False", ",", "twice_sample", "=", "False", ",", "is_lmdb", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "list_file", "=", "list_file", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "new_length", "=", "new_length", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "image_tmpl", "=", "image_tmpl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "random_shift", "=", "random_shift", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "remove_missing", "=", "remove_missing", "\n", "self", ".", "dense_sample", "=", "dense_sample", "# using dense sample as I3D", "\n", "self", ".", "twice_sample", "=", "twice_sample", "# twice sample for more validation", "\n", "if", "self", ".", "dense_sample", ":", "\n", "            ", "print", "(", "'=> Using dense sample for the dataset...'", ")", "\n", "", "if", "self", ".", "twice_sample", ":", "\n", "            ", "print", "(", "'=> Using twice sample for the dataset...'", ")", "\n", "\n", "", "self", ".", "is_lmdb", "=", "is_lmdb", "\n", "if", "self", ".", "is_lmdb", ":", "\n", "            ", "print", "(", "'=> Loading lmdb dataset from: {}'", ".", "format", "(", "self", ".", "root_path", ")", ")", "\n", "self", ".", "database", "=", "lmdb", ".", "open", "(", "self", ".", "root_path", ",", "readonly", "=", "True", ")", ".", "begin", "(", ")", ".", "cursor", "(", ")", "\n", "\n", "", "if", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "            ", "self", ".", "new_length", "+=", "1", "# Diff needs one more image to calculate diff", "\n", "\n", "", "self", ".", "_parse_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet._load_image": [[66, 108], ["PIL.Image.open", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "io.BytesIO", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert.split", "flow_x.convert", "flow_y.convert", "dataset.PANDataSet.database.get", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open().convert", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open", "PIL.Image.open", "print", "PIL.Image.open().convert", "dataset.PANDataSet.image_tmpl.format", "dataset.PANDataSet.image_tmpl.format", "dataset.PANDataSet.image_tmpl.format", "os.path.join", "os.path.join", "PIL.Image.open", "os.path.join", "dataset.PANDataSet.image_tmpl.format", "dataset.PANDataSet.image_tmpl.format", "os.path.join", "dataset.PANDataSet.image_tmpl.format", "PIL.Image.open", "int", "int", "int", "int", "dataset.PANDataSet.image_tmpl.format", "os.path.join", "dataset.PANDataSet.image_tmpl.format"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.tools.vid2img_sthv2.split", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet.get"], ["", "def", "_load_image", "(", "self", ",", "directory", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "modality", "in", "[", "'RGB'", ",", "'PA'", ",", "'Lite'", ",", "'RGBDiff'", "]", ":", "\n", "            ", "if", "self", ".", "is_lmdb", ":", "\n", "                ", "return", "[", "Image", ".", "open", "(", "BytesIO", "(", "self", ".", "database", ".", "get", "(", "\"{}/{:03d}/{:08d}\"", ".", "format", "(", "directory", ",", "0", ",", "idx", "-", "1", ")", ".", "encode", "(", ")", ")", ")", ")", "]", "\n", "", "else", ":", "\n", "                ", "return", "[", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "]", "\n", "", "'''\n            try:\n                if self.is_lmdb:\n                    return [Image.open(BytesIO(self.database.get(\"{}/{:03d}/{:08d}\".format(directory, 0, idx-1).encode())))]\n                else:\n                    return [Image.open(os.path.join(self.root_path, directory, self.image_tmpl.format(idx))).convert('RGB')]\n            except Exception:\n                print('error loading image:', os.path.join(self.root_path, directory, self.image_tmpl.format(idx)))\n                return [Image.open(os.path.join(self.root_path, directory, self.image_tmpl.format(1))).convert('RGB')]\n            '''", "\n", "", "elif", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "if", "self", ".", "image_tmpl", "==", "'flow_{}_{:05d}.jpg'", ":", "# ucf", "\n", "                ", "x_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "'x'", ",", "idx", ")", ")", ")", ".", "convert", "(", "\n", "'L'", ")", "\n", "y_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "'y'", ",", "idx", ")", ")", ")", ".", "convert", "(", "\n", "'L'", ")", "\n", "", "elif", "self", ".", "image_tmpl", "==", "'{:06d}-{}_{:05d}.jpg'", ":", "# something v1 flow", "\n", "                ", "x_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "'{:06d}'", ".", "format", "(", "int", "(", "directory", ")", ")", ",", "self", ".", "image_tmpl", ".", "\n", "format", "(", "int", "(", "directory", ")", ",", "'x'", ",", "idx", ")", ")", ")", ".", "convert", "(", "'L'", ")", "\n", "y_img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "'{:06d}'", ".", "format", "(", "int", "(", "directory", ")", ")", ",", "self", ".", "image_tmpl", ".", "\n", "format", "(", "int", "(", "directory", ")", ",", "'y'", ",", "idx", ")", ")", ")", ".", "convert", "(", "'L'", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "# idx_skip = 1 + (idx-1)*5", "\n", "                    ", "flow", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", ".", "convert", "(", "\n", "'RGB'", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "print", "(", "'error loading flow file:'", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", "\n", "flow", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "1", ")", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "# the input flow file is RGB image with (flow_x, flow_y, blank) for each channel", "\n", "", "flow_x", ",", "flow_y", ",", "_", "=", "flow", ".", "split", "(", ")", "\n", "x_img", "=", "flow_x", ".", "convert", "(", "'L'", ")", "\n", "y_img", "=", "flow_y", ".", "convert", "(", "'L'", ")", "\n", "\n", "", "return", "[", "x_img", ",", "y_img", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet._parse_list": [[109, 120], ["print", "x.strip().split", "dataset.VideoRecord", "open", "len", "x.strip", "int", "int"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.tools.vid2img_sthv2.split"], ["", "", "def", "_parse_list", "(", "self", ")", ":", "\n", "# check the frame number is large >3:", "\n", "        ", "tmp", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "x", "in", "open", "(", "self", ".", "list_file", ")", "]", "\n", "if", "not", "self", ".", "test_mode", "or", "self", ".", "remove_missing", ":", "\n", "            ", "tmp", "=", "[", "item", "for", "item", "in", "tmp", "if", "int", "(", "item", "[", "1", "]", ")", ">=", "3", "]", "\n", "", "self", ".", "video_list", "=", "[", "VideoRecord", "(", "item", ")", "for", "item", "in", "tmp", "]", "\n", "\n", "if", "self", ".", "image_tmpl", "==", "'{:06d}-{}_{:05d}.jpg'", ":", "\n", "            ", "for", "v", "in", "self", ".", "video_list", ":", "\n", "                ", "v", ".", "_data", "[", "1", "]", "=", "int", "(", "v", ".", "_data", "[", "1", "]", ")", "/", "2", "\n", "", "", "print", "(", "'video number:%d'", "%", "(", "len", "(", "self", ".", "video_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet._sample_indices": [[121, 143], ["max", "numpy.random.randint", "numpy.array", "range", "numpy.multiply", "numpy.random.randint", "numpy.sort", "numpy.zeros", "list", "numpy.random.randint", "range"], "methods", ["None"], ["", "def", "_sample_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "\"\"\"\n\n        :param record: VideoRecord\n        :return: list\n        \"\"\"", "\n", "if", "self", ".", "dense_sample", ":", "# i3d dense sample", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "record", ".", "num_frames", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "record", ".", "num_frames", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "else", ":", "# normal sample", "\n", "            ", "average_duration", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "//", "self", ".", "num_segments", "\n", "if", "average_duration", ">", "0", ":", "\n", "                ", "offsets", "=", "np", ".", "multiply", "(", "list", "(", "range", "(", "self", ".", "num_segments", ")", ")", ",", "average_duration", ")", "+", "randint", "(", "average_duration", ",", "\n", "size", "=", "self", ".", "num_segments", ")", "\n", "", "elif", "record", ".", "num_frames", ">", "self", ".", "num_segments", ":", "\n", "                ", "offsets", "=", "np", ".", "sort", "(", "randint", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ",", "size", "=", "self", ".", "num_segments", ")", ")", "\n", "", "else", ":", "\n", "                ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet._get_val_indices": [[144, 158], ["max", "numpy.random.randint", "numpy.array", "numpy.array", "numpy.zeros", "range", "float", "int", "range"], "methods", ["None"], ["", "", "def", "_get_val_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "if", "self", ".", "dense_sample", ":", "# i3d dense sample", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "record", ".", "num_frames", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_idx", "=", "0", "if", "sample_pos", "==", "1", "else", "np", ".", "random", ".", "randint", "(", "0", ",", "sample_pos", "-", "1", ")", "\n", "offsets", "=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "record", ".", "num_frames", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "if", "record", ".", "num_frames", ">", "self", ".", "num_segments", "+", "self", ".", "new_length", "-", "1", ":", "\n", "                ", "tick", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet._get_test_indices": [[159, 179], ["max", "numpy.linspace", "numpy.linspace.tolist", "numpy.array", "numpy.array", "numpy.array", "float", "float", "range", "int", "int", "int", "range", "range", "range"], "methods", ["None"], ["", "", "def", "_get_test_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "if", "self", ".", "dense_sample", ":", "\n", "            ", "sample_pos", "=", "max", "(", "1", ",", "1", "+", "record", ".", "num_frames", "-", "64", ")", "\n", "t_stride", "=", "64", "//", "self", ".", "num_segments", "\n", "start_list", "=", "np", ".", "linspace", "(", "0", ",", "sample_pos", "-", "1", ",", "num", "=", "10", ",", "dtype", "=", "int", ")", "\n", "offsets", "=", "[", "]", "\n", "for", "start_idx", "in", "start_list", ".", "tolist", "(", ")", ":", "\n", "                ", "offsets", "+=", "[", "(", "idx", "*", "t_stride", "+", "start_idx", ")", "%", "record", ".", "num_frames", "for", "idx", "in", "range", "(", "self", ".", "num_segments", ")", "]", "\n", "", "return", "np", ".", "array", "(", "offsets", ")", "+", "1", "\n", "", "elif", "self", ".", "twice_sample", ":", "\n", "            ", "tick", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", "+", "\n", "[", "int", "(", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "\n", "return", "offsets", "+", "1", "\n", "", "else", ":", "\n", "            ", "tick", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet.__getitem__": [[180, 215], ["dataset.PANDataSet.get", "dataset.PANDataSet.image_tmpl.format", "os.path.join", "dataset.PANDataSet._get_test_indices", "dataset.PANDataSet.image_tmpl.format", "os.path.join", "dataset.PANDataSet.image_tmpl.format", "os.path.join", "dataset.PANDataSet._sample_indices", "dataset.PANDataSet._get_val_indices", "int", "int"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet.get", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet._get_test_indices", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet._sample_indices", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet._get_val_indices"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "record", "=", "self", ".", "video_list", "[", "index", "]", "\n", "# check this is a legit video folder", "\n", "\n", "if", "self", ".", "image_tmpl", "==", "'flow_{}_{:05d}.jpg'", ":", "\n", "            ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "'x'", ",", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "record", ".", "path", ",", "file_name", ")", "\n", "", "elif", "self", ".", "image_tmpl", "==", "'{:06d}-{}_{:05d}.jpg'", ":", "\n", "            ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "int", "(", "record", ".", "path", ")", ",", "'x'", ",", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "'{:06d}'", ".", "format", "(", "int", "(", "record", ".", "path", ")", ")", ",", "file_name", ")", "\n", "", "else", ":", "\n", "            ", "file_name", "=", "self", ".", "image_tmpl", ".", "format", "(", "1", ")", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "record", ".", "path", ",", "file_name", ")", "\n", "\n", "", "'''\n        while not os.path.exists(full_path):\n            print('################## Not Found:', os.path.join(self.root_path, record.path, file_name))\n            index = np.random.randint(len(self.video_list))\n            record = self.video_list[index]\n            if self.image_tmpl == 'flow_{}_{:05d}.jpg':\n                file_name = self.image_tmpl.format('x', 1)\n                full_path = os.path.join(self.root_path, record.path, file_name)\n            elif self.image_tmpl == '{:06d}-{}_{:05d}.jpg':\n                file_name = self.image_tmpl.format(int(record.path), 'x', 1)\n                full_path = os.path.join(self.root_path, '{:06d}'.format(int(record.path)), file_name)\n            else:\n                file_name = self.image_tmpl.format(1)\n                full_path = os.path.join(self.root_path, record.path, file_name)\n        '''", "\n", "\n", "if", "not", "self", ".", "test_mode", ":", "\n", "            ", "segment_indices", "=", "self", ".", "_sample_indices", "(", "record", ")", "if", "self", ".", "random_shift", "else", "self", ".", "_get_val_indices", "(", "record", ")", "\n", "", "else", ":", "\n", "            ", "segment_indices", "=", "self", ".", "_get_test_indices", "(", "record", ")", "\n", "", "return", "self", ".", "get", "(", "record", ",", "segment_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet.get": [[216, 229], ["list", "dataset.PANDataSet.transform", "int", "range", "dataset.PANDataSet._load_image", "list.extend"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet._load_image"], ["", "def", "get", "(", "self", ",", "record", ",", "indices", ")", ":", "\n", "\n", "        ", "images", "=", "list", "(", ")", "\n", "for", "seg_ind", "in", "indices", ":", "\n", "            ", "p", "=", "int", "(", "seg_ind", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "new_length", ")", ":", "\n", "                ", "seg_imgs", "=", "self", ".", "_load_image", "(", "record", ".", "path", ",", "p", ")", "\n", "images", ".", "extend", "(", "seg_imgs", ")", "\n", "if", "p", "<", "record", ".", "num_frames", ":", "\n", "                    ", "p", "+=", "1", "\n", "\n", "", "", "", "process_data", "=", "self", ".", "transform", "(", "images", ")", "\n", "return", "process_data", ",", "record", ".", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.dataset.PANDataSet.__len__": [[230, 232], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.basic_ops.Identity.forward": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.basic_ops.SegmentConsensus.__init__": [[16, 21], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "SegmentConsensus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "shape", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.basic_ops.SegmentConsensus.forward": [[22, 32], ["input_tensor.size", "input_tensor.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "self", ".", "shape", "=", "input_tensor", ".", "size", "(", ")", "\n", "if", "self", ".", "consensus_type", "==", "'avg'", ":", "\n", "            ", "output", "=", "input_tensor", ".", "mean", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "self", ".", "consensus_type", "==", "'identity'", ":", "\n", "            ", "output", "=", "input_tensor", "\n", "", "else", ":", "\n", "            ", "output", "=", "None", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.basic_ops.ConsensusModule.__init__": [[36, 40], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConsensusModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "consensus_type", "=", "consensus_type", "if", "consensus_type", "!=", "'rnn'", "else", "'identity'", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.basic_ops.ConsensusModule.forward": [[41, 43], ["basic_ops.SegmentConsensus"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "SegmentConsensus", "(", "self", ".", "consensus_type", ",", "self", ".", "dim", ")", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.TemporalShift.__init__": [[10, 18], ["torch.Module.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "n_segment", "=", "3", ",", "n_div", "=", "8", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "TemporalShift", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "self", ".", "fold_div", "=", "n_div", "\n", "self", ".", "inplace", "=", "inplace", "\n", "if", "inplace", ":", "\n", "            ", "print", "(", "'=> Using in-place shift...'", ")", "\n", "#print('=> Using fold div: {}'.format(self.fold_div))", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.TemporalShift.forward": [[20, 23], ["temporal_shift.TemporalShift.shift", "temporal_shift.TemporalShift.net"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.TemporalShift.shift"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "shift", "(", "x", ",", "self", ".", "n_segment", ",", "fold_div", "=", "self", ".", "fold_div", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.TemporalShift.shift": [[24, 43], ["x.view.view.size", "x.view.view.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "shift", "(", "x", ",", "n_segment", ",", "fold_div", "=", "3", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "nt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "n_batch", "=", "nt", "//", "n_segment", "\n", "x", "=", "x", ".", "view", "(", "n_batch", ",", "n_segment", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "fold", "=", "c", "//", "fold_div", "\n", "if", "inplace", ":", "\n", "# Due to some out of order error when performing parallel computing. ", "\n", "# May need to write a CUDA kernel.", "\n", "            ", "raise", "NotImplementedError", "\n", "# out = InplaceShift.apply(x, fold)", "\n", "", "else", ":", "\n", "            ", "out", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "out", "[", ":", ",", ":", "-", "1", ",", ":", "fold", "]", "=", "x", "[", ":", ",", "1", ":", ",", ":", "fold", "]", "# shift left", "\n", "out", "[", ":", ",", "1", ":", ",", "fold", ":", "2", "*", "fold", "]", "=", "x", "[", ":", ",", ":", "-", "1", ",", "fold", ":", "2", "*", "fold", "]", "# shift right", "\n", "out", "[", ":", ",", ":", ",", "2", "*", "fold", ":", "]", "=", "x", "[", ":", ",", ":", ",", "2", "*", "fold", ":", "]", "# not shift", "\n", "\n", "", "return", "out", ".", "view", "(", "nt", ",", "c", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.InplaceShift.forward": [[47, 60], ["input.size", "input.data.new().zero_", "input.data.new().zero_.zero_", "input.data.new"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "fold", ")", ":", "\n", "# not support higher order gradient", "\n", "# input = input.detach_()", "\n", "        ", "ctx", ".", "fold_", "=", "fold", "\n", "n", ",", "t", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "buffer", "=", "input", ".", "data", ".", "new", "(", "n", ",", "t", ",", "fold", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", "\n", "buffer", "[", ":", ",", ":", "-", "1", "]", "=", "input", ".", "data", "[", ":", ",", "1", ":", ",", ":", "fold", "]", "\n", "input", ".", "data", "[", ":", ",", ":", ",", ":", "fold", "]", "=", "buffer", "\n", "buffer", ".", "zero_", "(", ")", "\n", "buffer", "[", ":", ",", "1", ":", "]", "=", "input", ".", "data", "[", ":", ",", ":", "-", "1", ",", "fold", ":", "2", "*", "fold", "]", "\n", "input", ".", "data", "[", ":", ",", ":", ",", "fold", ":", "2", "*", "fold", "]", "=", "buffer", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.InplaceShift.backward": [[61, 73], ["grad_output.size", "grad_output.data.new().zero_", "grad_output.data.new().zero_.zero_", "grad_output.data.new"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# grad_output = grad_output.detach_()", "\n", "        ", "fold", "=", "ctx", ".", "fold_", "\n", "n", ",", "t", ",", "c", ",", "h", ",", "w", "=", "grad_output", ".", "size", "(", ")", "\n", "buffer", "=", "grad_output", ".", "data", ".", "new", "(", "n", ",", "t", ",", "fold", ",", "h", ",", "w", ")", ".", "zero_", "(", ")", "\n", "buffer", "[", ":", ",", "1", ":", "]", "=", "grad_output", ".", "data", "[", ":", ",", ":", "-", "1", ",", ":", "fold", "]", "\n", "grad_output", ".", "data", "[", ":", ",", ":", ",", ":", "fold", "]", "=", "buffer", "\n", "buffer", ".", "zero_", "(", ")", "\n", "buffer", "[", ":", ",", ":", "-", "1", "]", "=", "grad_output", ".", "data", "[", ":", ",", "1", ":", ",", "fold", ":", "2", "*", "fold", "]", "\n", "grad_output", ".", "data", "[", ":", ",", ":", ",", "fold", ":", "2", "*", "fold", "]", "=", "buffer", "\n", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.TemporalPool.__init__": [[76, 80], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "net", ",", "n_segment", ")", ":", "\n", "        ", "super", "(", "TemporalPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "n_segment", "=", "n_segment", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.TemporalPool.forward": [[81, 84], ["temporal_shift.TemporalPool.temporal_pool", "temporal_shift.TemporalPool.net"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.TemporalPool.temporal_pool"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "temporal_pool", "(", "x", ",", "n_segment", "=", "self", ".", "n_segment", ")", "\n", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.TemporalPool.temporal_pool": [[85, 93], ["x.transpose().contiguous().view.transpose().contiguous().view.size", "x.transpose().contiguous().view.transpose().contiguous().view.view().transpose", "torch.max_pool3d", "torch.max_pool3d", "torch.max_pool3d", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "x.transpose().contiguous().view.transpose().contiguous().view.view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "x.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "temporal_pool", "(", "x", ",", "n_segment", ")", ":", "\n", "        ", "nt", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "n_batch", "=", "nt", "//", "n_segment", "\n", "x", "=", "x", ".", "view", "(", "n_batch", ",", "n_segment", ",", "c", ",", "h", ",", "w", ")", ".", "transpose", "(", "1", ",", "2", ")", "# n, c, t, h, w", "\n", "x", "=", "F", ".", "max_pool3d", "(", "x", ",", "kernel_size", "=", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nt", "//", "2", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.make_temporal_shift": [[95, 138], ["isinstance", "NotImplementedError", "temporal_shift.make_temporal_shift.make_block_temporal"], "function", ["None"], ["", "", "def", "make_temporal_shift", "(", "net", ",", "n_segment", ",", "n_div", "=", "8", ",", "place", "=", "'blockres'", ",", "temporal_pool", "=", "False", ")", ":", "\n", "    ", "if", "temporal_pool", ":", "\n", "        ", "n_segment_list", "=", "[", "n_segment", ",", "n_segment", "//", "2", ",", "n_segment", "//", "2", ",", "n_segment", "//", "2", "]", "\n", "", "else", ":", "\n", "        ", "n_segment_list", "=", "[", "n_segment", "]", "*", "4", "\n", "", "assert", "n_segment_list", "[", "-", "1", "]", ">", "0", "\n", "#print('=> n_segment per stage: {}'.format(n_segment_list))", "\n", "\n", "import", "torchvision", "\n", "if", "isinstance", "(", "net", ",", "torchvision", ".", "models", ".", "ResNet", ")", ":", "\n", "        ", "if", "place", "==", "'block'", ":", "\n", "            ", "def", "make_block_temporal", "(", "stage", ",", "this_segment", ")", ":", "\n", "                ", "blocks", "=", "list", "(", "stage", ".", "children", "(", ")", ")", "\n", "#print('=> Processing stage with {} blocks'.format(len(blocks)))", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "blocks", ")", ":", "\n", "                    ", "blocks", "[", "i", "]", "=", "TemporalShift", "(", "b", ",", "n_segment", "=", "this_segment", ",", "n_div", "=", "n_div", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "(", "blocks", ")", ")", "\n", "\n", "", "net", ".", "layer1", "=", "make_block_temporal", "(", "net", ".", "layer1", ",", "n_segment_list", "[", "0", "]", ")", "\n", "net", ".", "layer2", "=", "make_block_temporal", "(", "net", ".", "layer2", ",", "n_segment_list", "[", "1", "]", ")", "\n", "net", ".", "layer3", "=", "make_block_temporal", "(", "net", ".", "layer3", ",", "n_segment_list", "[", "2", "]", ")", "\n", "net", ".", "layer4", "=", "make_block_temporal", "(", "net", ".", "layer4", ",", "n_segment_list", "[", "3", "]", ")", "\n", "\n", "", "elif", "'blockres'", "in", "place", ":", "\n", "            ", "n_round", "=", "1", "\n", "if", "len", "(", "list", "(", "net", ".", "layer3", ".", "children", "(", ")", ")", ")", ">=", "23", ":", "\n", "                ", "n_round", "=", "2", "\n", "#print('=> Using n_round {} to insert temporal shift'.format(n_round))", "\n", "\n", "", "def", "make_block_temporal", "(", "stage", ",", "this_segment", ")", ":", "\n", "                ", "blocks", "=", "list", "(", "stage", ".", "children", "(", ")", ")", "\n", "#print('=> Processing stage with {} blocks residual'.format(len(blocks)))", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "blocks", ")", ":", "\n", "                    ", "if", "i", "%", "n_round", "==", "0", ":", "\n", "                        ", "blocks", "[", "i", "]", ".", "conv1", "=", "TemporalShift", "(", "b", ".", "conv1", ",", "n_segment", "=", "this_segment", ",", "n_div", "=", "n_div", ")", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "", "net", ".", "layer1", "=", "make_block_temporal", "(", "net", ".", "layer1", ",", "n_segment_list", "[", "0", "]", ")", "\n", "net", ".", "layer2", "=", "make_block_temporal", "(", "net", ".", "layer2", ",", "n_segment_list", "[", "1", "]", ")", "\n", "net", ".", "layer3", "=", "make_block_temporal", "(", "net", ".", "layer3", ",", "n_segment_list", "[", "2", "]", ")", "\n", "net", ".", "layer4", "=", "make_block_temporal", "(", "net", ".", "layer4", ",", "n_segment_list", "[", "3", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "place", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.make_temporal_pool": [[140, 147], ["isinstance", "print", "temporal_shift.TemporalPool"], "function", ["None"], ["", "", "def", "make_temporal_pool", "(", "net", ",", "n_segment", ")", ":", "\n", "    ", "import", "torchvision", "\n", "if", "isinstance", "(", "net", ",", "torchvision", ".", "models", ".", "ResNet", ")", ":", "\n", "        ", "print", "(", "'=> Injecting nonlocal pooling'", ")", "\n", "net", ".", "layer2", "=", "TemporalPool", "(", "net", ".", "layer2", ",", "n_segment", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.__init__": [[17, 19], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.reset": [[20, 25], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.AverageMeter.update": [[26, 31], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.softmax": [[9, 12], ["numpy.exp", "np.exp.sum", "scores.max"], "function", ["None"], ["def", "softmax", "(", "scores", ")", ":", "\n", "    ", "es", "=", "np", ".", "exp", "(", "scores", "-", "scores", ".", "max", "(", "axis", "=", "-", "1", ")", "[", "...", ",", "None", "]", ")", "\n", "return", "es", "/", "es", ".", "sum", "(", "axis", "=", "-", "1", ")", "[", "...", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.utils.accuracy": [[33, 47], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.InvertedResidual.__init__": [[29, 60], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.Conv2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6", "torch.Conv2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "int", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.InvertedResidual.forward": [[62, 67], ["mobilenet_v2.InvertedResidual.conv", "mobilenet_v2.InvertedResidual.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.MobileNetV2.__init__": [[70, 109], ["torch.Module.__init__", "mobilenet_v2.MobileNetV2.features.append", "torch.Sequential", "torch.Linear", "mobilenet_v2.MobileNetV2._initialize_weights", "mobilenet_v2.make_divisible", "mobilenet_v2.conv_bn", "range", "mobilenet_v2.conv_1x1_bn", "mobilenet_v2.make_divisible", "mobilenet_v2.MobileNetV2.features.append", "mobilenet_v2.MobileNetV2.features.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.make_divisible", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.conv_bn", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.conv_1x1_bn", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.make_divisible"], ["    ", "def", "__init__", "(", "self", ",", "n_class", "=", "1000", ",", "input_size", "=", "224", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "assert", "input_size", "%", "32", "==", "0", "\n", "# input_channel = make_divisible(input_channel * width_mult)  # first channel is always 32!", "\n", "self", ".", "last_channel", "=", "make_divisible", "(", "last_channel", "*", "width_mult", ")", "if", "width_mult", ">", "1.0", "else", "last_channel", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "make_divisible", "(", "c", "*", "width_mult", ")", "if", "t", ">", "1", "else", "c", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "s", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "1", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "self", ".", "features", ".", "append", "(", "conv_1x1_bn", "(", "input_channel", ",", "self", ".", "last_channel", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "n_class", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.MobileNetV2.forward": [[110, 115], ["mobilenet_v2.MobileNetV2.features", "mobilenet_v2.MobileNetV2.mean().mean", "mobilenet_v2.MobileNetV2.classifier", "mobilenet_v2.MobileNetV2.mean"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.MobileNetV2._initialize_weights": [[116, 130], ["mobilenet_v2.MobileNetV2.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.conv_bn": [[7, 12], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.conv_1x1_bn": [[15, 20], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU6"], "function", ["None"], ["", "def", "conv_1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.make_divisible": [[23, 26], ["int", "np.ceil"], "function", ["None"], ["", "def", "make_divisible", "(", "x", ",", "divisible_by", "=", "8", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "return", "int", "(", "np", ".", "ceil", "(", "x", "*", "1.", "/", "divisible_by", ")", "*", "divisible_by", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.mobilenet_v2.mobilenet_v2": [[132, 144], ["mobilenet_v2.MobileNetV2", "load_state_dict_from_url", "MobileNetV2.load_state_dict"], "function", ["None"], ["", "", "", "", "def", "mobilenet_v2", "(", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "MobileNetV2", "(", "width_mult", "=", "1", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "torch", ".", "hub", "import", "load_state_dict_from_url", "\n", "", "except", "ImportError", ":", "\n", "            ", "from", "torch", ".", "utils", ".", "model_zoo", "import", "load_url", "as", "load_state_dict_from_url", "\n", "", "state_dict", "=", "load_state_dict_from_url", "(", "\n", "'https://www.dropbox.com/s/47tyzpofuuyyv1b/mobilenetv2_1.0-f2a8633.pth.tar?dl=1'", ",", "progress", "=", "True", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__": [[35, 39], ["torch.Module.__init__", "bn_inception.BNInception._build_features"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.__init__", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._build_features"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "BNInception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inplace", "=", "True", "\n", "self", ".", "_build_features", "(", "inplace", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.forward": [[40, 47], ["bn_inception.BNInception.features", "bn_inception.BNInception.logits"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.features", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.logits"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# if self.input_space == 'BGR':", "\n", "#     assert len(x.size()) == 4", "\n", "#     x = x[:, (2, 1, 0)]", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "logits", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.features": [[48, 69], ["bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap", "bn_inception.BNInception._temporal_forward_wrap"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap"], ["", "def", "features", "(", "self", ",", "x", ")", ":", "\n", "# stage1", "\n", "        ", "pool1_3x3_s2_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_1", ",", "0", ")", "(", "x", ")", "\n", "# stage2", "\n", "pool2_3x3_s2_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_2", ",", "1", ")", "(", "pool1_3x3_s2_out", ")", "\n", "\n", "# stage3", "\n", "inception_3a_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_3a", ",", "2", ")", "(", "pool2_3x3_s2_out", ")", "\n", "inception_3b_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_3b", ",", "3", ")", "(", "inception_3a_output_out", ")", "\n", "inception_3c_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_3c", ",", "4", ")", "(", "inception_3b_output_out", ")", "\n", "\n", "inception_4a_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_4a", ",", "5", ")", "(", "inception_3c_output_out", ")", "\n", "inception_4b_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_4b", ",", "6", ")", "(", "inception_4a_output_out", ")", "\n", "inception_4c_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_4c", ",", "7", ")", "(", "inception_4b_output_out", ")", "\n", "inception_4d_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_4d", ",", "8", ")", "(", "inception_4c_output_out", ")", "\n", "inception_4e_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_4e", ",", "9", ")", "(", "inception_4d_output_out", ")", "\n", "\n", "inception_5a_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_5a", ",", "10", ")", "(", "inception_4e_output_out", ")", "\n", "inception_5b_output_out", "=", "self", ".", "_temporal_forward_wrap", "(", "self", ".", "_block_5b", ",", "11", ")", "(", "inception_5a_output_out", ")", "\n", "\n", "return", "inception_5b_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.logits": [[70, 75], ["bn_inception.BNInception.global_pool", "bn_inception.BNInception.view", "bn_inception.BNInception.fc", "bn_inception.BNInception.size"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "self", ".", "global_pool", "(", "features", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception.build_temporal_ops": [[76, 93], ["print", "print", "print", "len"], "methods", ["None"], ["", "def", "build_temporal_ops", "(", "self", ",", "n_segment", ",", "is_temporal_shift", "=", "'0'", "*", "12", ",", "shift_div", "=", "8", ")", ":", "\n", "# must call after loading weights", "\n", "        ", "self", ".", "n_segment", "=", "n_segment", "\n", "self", ".", "residual", "=", "'res'", "in", "is_temporal_shift", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "print", "(", "'=> Using residual shift functions...'", ")", "\n", "", "if", "is_temporal_shift", "in", "[", "'block'", ",", "'blockres'", "]", ":", "\n", "            ", "self", ".", "is_temporal_shift", "=", "'1'", "*", "12", "\n", "", "else", ":", "\n", "            ", "self", ".", "is_temporal_shift", "=", "is_temporal_shift", "\n", "", "self", ".", "is_temporal_shift", "=", "'0'", "+", "self", ".", "is_temporal_shift", "[", "1", ":", "]", "# image input does not shift", "\n", "\n", "assert", "len", "(", "self", ".", "is_temporal_shift", ")", "==", "12", "\n", "\n", "print", "(", "'=> Injecting temporal shift with mask {}'", ".", "format", "(", "self", ".", "is_temporal_shift", ")", ")", "\n", "self", ".", "fold_div", "=", "shift_div", "\n", "print", "(", "'=> Using fold div: {}'", ".", "format", "(", "self", ".", "fold_div", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._temporal_forward_wrap": [[94, 109], ["hasattr", "partial", "TemporalShift.shift", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "TemporalShift.shift", "layer_func", "layer_func"], "methods", ["home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.TemporalShift.shift", "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.ops.temporal_shift.TemporalShift.shift"], ["", "def", "_temporal_forward_wrap", "(", "self", ",", "layer_func", ",", "index", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'is_temporal_shift'", ")", "and", "self", ".", "is_temporal_shift", "[", "index", "]", "==", "'1'", ":", "# run temporal shuffling", "\n", "            ", "from", "ops", ".", "temporal_shift", "import", "TemporalShift", "\n", "def", "wrapped_func", "(", "x", ",", "is_residual", ",", "n_segment", ",", "fold_div", ")", ":", "\n", "                ", "if", "is_residual", ":", "\n", "                    ", "x_shift", "=", "TemporalShift", ".", "shift", "(", "x", ",", "n_segment", ",", "fold_div", "=", "fold_div", ")", "\n", "return", "F", ".", "relu", "(", "x", "+", "layer_func", "(", "x_shift", ")", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "TemporalShift", ".", "shift", "(", "x", ",", "n_segment", ",", "fold_div", "=", "fold_div", ")", "\n", "return", "layer_func", "(", "x", ")", "\n", "", "", "from", "functools", "import", "partial", "\n", "return", "partial", "(", "wrapped_func", ",", "is_residual", "=", "self", ".", "residual", ",", "n_segment", "=", "self", ".", "n_segment", ",", "\n", "fold_div", "=", "self", ".", "fold_div", ")", "\n", "", "else", ":", "\n", "            ", "return", "layer_func", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._block_1": [[110, 116], ["bn_inception.BNInception.conv1_7x7_s2", "bn_inception.BNInception.conv1_7x7_s2_bn", "bn_inception.BNInception.conv1_relu_7x7", "bn_inception.BNInception.pool1_3x3_s2"], "methods", ["None"], ["", "", "def", "_block_1", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1_7x7_s2_out", "=", "self", ".", "conv1_7x7_s2", "(", "x", ")", "\n", "conv1_7x7_s2_bn_out", "=", "self", ".", "conv1_7x7_s2_bn", "(", "conv1_7x7_s2_out", ")", "\n", "conv1_relu_7x7_out", "=", "self", ".", "conv1_relu_7x7", "(", "conv1_7x7_s2_bn_out", ")", "\n", "pool1_3x3_s2_out", "=", "self", ".", "pool1_3x3_s2", "(", "conv1_7x7_s2_bn_out", ")", "\n", "return", "pool1_3x3_s2_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._block_2": [[117, 126], ["bn_inception.BNInception.conv2_3x3_reduce", "bn_inception.BNInception.conv2_3x3_reduce_bn", "bn_inception.BNInception.conv2_relu_3x3_reduce", "bn_inception.BNInception.conv2_3x3", "bn_inception.BNInception.conv2_3x3_bn", "bn_inception.BNInception.conv2_relu_3x3", "bn_inception.BNInception.pool2_3x3_s2"], "methods", ["None"], ["", "def", "_block_2", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv2_3x3_reduce_out", "=", "self", ".", "conv2_3x3_reduce", "(", "x", ")", "\n", "conv2_3x3_reduce_bn_out", "=", "self", ".", "conv2_3x3_reduce_bn", "(", "conv2_3x3_reduce_out", ")", "\n", "conv2_relu_3x3_reduce_out", "=", "self", ".", "conv2_relu_3x3_reduce", "(", "conv2_3x3_reduce_bn_out", ")", "\n", "conv2_3x3_out", "=", "self", ".", "conv2_3x3", "(", "conv2_3x3_reduce_bn_out", ")", "\n", "conv2_3x3_bn_out", "=", "self", ".", "conv2_3x3_bn", "(", "conv2_3x3_out", ")", "\n", "conv2_relu_3x3_out", "=", "self", ".", "conv2_relu_3x3", "(", "conv2_3x3_bn_out", ")", "\n", "pool2_3x3_s2_out", "=", "self", ".", "pool2_3x3_s2", "(", "conv2_3x3_bn_out", ")", "\n", "return", "pool2_3x3_s2_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._block_3a": [[127, 156], ["bn_inception.BNInception.inception_3a_1x1", "bn_inception.BNInception.inception_3a_1x1_bn", "bn_inception.BNInception.inception_3a_relu_1x1", "bn_inception.BNInception.inception_3a_3x3_reduce", "bn_inception.BNInception.inception_3a_3x3_reduce_bn", "bn_inception.BNInception.inception_3a_relu_3x3_reduce", "bn_inception.BNInception.inception_3a_3x3", "bn_inception.BNInception.inception_3a_3x3_bn", "bn_inception.BNInception.inception_3a_relu_3x3", "bn_inception.BNInception.inception_3a_double_3x3_reduce", "bn_inception.BNInception.inception_3a_double_3x3_reduce_bn", "bn_inception.BNInception.inception_3a_relu_double_3x3_reduce", "bn_inception.BNInception.inception_3a_double_3x3_1", "bn_inception.BNInception.inception_3a_double_3x3_1_bn", "bn_inception.BNInception.inception_3a_relu_double_3x3_1", "bn_inception.BNInception.inception_3a_double_3x3_2", "bn_inception.BNInception.inception_3a_double_3x3_2_bn", "bn_inception.BNInception.inception_3a_relu_double_3x3_2", "bn_inception.BNInception.inception_3a_pool", "bn_inception.BNInception.inception_3a_pool_proj", "bn_inception.BNInception.inception_3a_pool_proj_bn", "bn_inception.BNInception.inception_3a_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_3a", "(", "self", ",", "pool2_3x3_s2_out", ")", ":", "\n", "        ", "inception_3a_1x1_out", "=", "self", ".", "inception_3a_1x1", "(", "pool2_3x3_s2_out", ")", "\n", "inception_3a_1x1_bn_out", "=", "self", ".", "inception_3a_1x1_bn", "(", "inception_3a_1x1_out", ")", "\n", "inception_3a_relu_1x1_out", "=", "self", ".", "inception_3a_relu_1x1", "(", "inception_3a_1x1_bn_out", ")", "\n", "inception_3a_3x3_reduce_out", "=", "self", ".", "inception_3a_3x3_reduce", "(", "pool2_3x3_s2_out", ")", "\n", "inception_3a_3x3_reduce_bn_out", "=", "self", ".", "inception_3a_3x3_reduce_bn", "(", "inception_3a_3x3_reduce_out", ")", "\n", "inception_3a_relu_3x3_reduce_out", "=", "self", ".", "inception_3a_relu_3x3_reduce", "(", "inception_3a_3x3_reduce_bn_out", ")", "\n", "inception_3a_3x3_out", "=", "self", ".", "inception_3a_3x3", "(", "inception_3a_3x3_reduce_bn_out", ")", "\n", "inception_3a_3x3_bn_out", "=", "self", ".", "inception_3a_3x3_bn", "(", "inception_3a_3x3_out", ")", "\n", "inception_3a_relu_3x3_out", "=", "self", ".", "inception_3a_relu_3x3", "(", "inception_3a_3x3_bn_out", ")", "\n", "inception_3a_double_3x3_reduce_out", "=", "self", ".", "inception_3a_double_3x3_reduce", "(", "pool2_3x3_s2_out", ")", "\n", "inception_3a_double_3x3_reduce_bn_out", "=", "self", ".", "inception_3a_double_3x3_reduce_bn", "(", "\n", "inception_3a_double_3x3_reduce_out", ")", "\n", "inception_3a_relu_double_3x3_reduce_out", "=", "self", ".", "inception_3a_relu_double_3x3_reduce", "(", "\n", "inception_3a_double_3x3_reduce_bn_out", ")", "\n", "inception_3a_double_3x3_1_out", "=", "self", ".", "inception_3a_double_3x3_1", "(", "inception_3a_double_3x3_reduce_bn_out", ")", "\n", "inception_3a_double_3x3_1_bn_out", "=", "self", ".", "inception_3a_double_3x3_1_bn", "(", "inception_3a_double_3x3_1_out", ")", "\n", "inception_3a_relu_double_3x3_1_out", "=", "self", ".", "inception_3a_relu_double_3x3_1", "(", "inception_3a_double_3x3_1_bn_out", ")", "\n", "inception_3a_double_3x3_2_out", "=", "self", ".", "inception_3a_double_3x3_2", "(", "inception_3a_double_3x3_1_bn_out", ")", "\n", "inception_3a_double_3x3_2_bn_out", "=", "self", ".", "inception_3a_double_3x3_2_bn", "(", "inception_3a_double_3x3_2_out", ")", "\n", "inception_3a_relu_double_3x3_2_out", "=", "self", ".", "inception_3a_relu_double_3x3_2", "(", "inception_3a_double_3x3_2_bn_out", ")", "\n", "inception_3a_pool_out", "=", "self", ".", "inception_3a_pool", "(", "pool2_3x3_s2_out", ")", "\n", "inception_3a_pool_proj_out", "=", "self", ".", "inception_3a_pool_proj", "(", "inception_3a_pool_out", ")", "\n", "inception_3a_pool_proj_bn_out", "=", "self", ".", "inception_3a_pool_proj_bn", "(", "inception_3a_pool_proj_out", ")", "\n", "inception_3a_relu_pool_proj_out", "=", "self", ".", "inception_3a_relu_pool_proj", "(", "inception_3a_pool_proj_bn_out", ")", "\n", "inception_3a_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_3a_1x1_bn_out", ",", "inception_3a_3x3_bn_out", ",", "inception_3a_double_3x3_2_bn_out", ",", "\n", "inception_3a_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_3a_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._block_3b": [[157, 186], ["bn_inception.BNInception.inception_3b_1x1", "bn_inception.BNInception.inception_3b_1x1_bn", "bn_inception.BNInception.inception_3b_relu_1x1", "bn_inception.BNInception.inception_3b_3x3_reduce", "bn_inception.BNInception.inception_3b_3x3_reduce_bn", "bn_inception.BNInception.inception_3b_relu_3x3_reduce", "bn_inception.BNInception.inception_3b_3x3", "bn_inception.BNInception.inception_3b_3x3_bn", "bn_inception.BNInception.inception_3b_relu_3x3", "bn_inception.BNInception.inception_3b_double_3x3_reduce", "bn_inception.BNInception.inception_3b_double_3x3_reduce_bn", "bn_inception.BNInception.inception_3b_relu_double_3x3_reduce", "bn_inception.BNInception.inception_3b_double_3x3_1", "bn_inception.BNInception.inception_3b_double_3x3_1_bn", "bn_inception.BNInception.inception_3b_relu_double_3x3_1", "bn_inception.BNInception.inception_3b_double_3x3_2", "bn_inception.BNInception.inception_3b_double_3x3_2_bn", "bn_inception.BNInception.inception_3b_relu_double_3x3_2", "bn_inception.BNInception.inception_3b_pool", "bn_inception.BNInception.inception_3b_pool_proj", "bn_inception.BNInception.inception_3b_pool_proj_bn", "bn_inception.BNInception.inception_3b_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_3b", "(", "self", ",", "inception_3a_output_out", ")", ":", "\n", "        ", "inception_3b_1x1_out", "=", "self", ".", "inception_3b_1x1", "(", "inception_3a_output_out", ")", "\n", "inception_3b_1x1_bn_out", "=", "self", ".", "inception_3b_1x1_bn", "(", "inception_3b_1x1_out", ")", "\n", "inception_3b_relu_1x1_out", "=", "self", ".", "inception_3b_relu_1x1", "(", "inception_3b_1x1_bn_out", ")", "\n", "inception_3b_3x3_reduce_out", "=", "self", ".", "inception_3b_3x3_reduce", "(", "inception_3a_output_out", ")", "\n", "inception_3b_3x3_reduce_bn_out", "=", "self", ".", "inception_3b_3x3_reduce_bn", "(", "inception_3b_3x3_reduce_out", ")", "\n", "inception_3b_relu_3x3_reduce_out", "=", "self", ".", "inception_3b_relu_3x3_reduce", "(", "inception_3b_3x3_reduce_bn_out", ")", "\n", "inception_3b_3x3_out", "=", "self", ".", "inception_3b_3x3", "(", "inception_3b_3x3_reduce_bn_out", ")", "\n", "inception_3b_3x3_bn_out", "=", "self", ".", "inception_3b_3x3_bn", "(", "inception_3b_3x3_out", ")", "\n", "inception_3b_relu_3x3_out", "=", "self", ".", "inception_3b_relu_3x3", "(", "inception_3b_3x3_bn_out", ")", "\n", "inception_3b_double_3x3_reduce_out", "=", "self", ".", "inception_3b_double_3x3_reduce", "(", "inception_3a_output_out", ")", "\n", "inception_3b_double_3x3_reduce_bn_out", "=", "self", ".", "inception_3b_double_3x3_reduce_bn", "(", "\n", "inception_3b_double_3x3_reduce_out", ")", "\n", "inception_3b_relu_double_3x3_reduce_out", "=", "self", ".", "inception_3b_relu_double_3x3_reduce", "(", "\n", "inception_3b_double_3x3_reduce_bn_out", ")", "\n", "inception_3b_double_3x3_1_out", "=", "self", ".", "inception_3b_double_3x3_1", "(", "inception_3b_double_3x3_reduce_bn_out", ")", "\n", "inception_3b_double_3x3_1_bn_out", "=", "self", ".", "inception_3b_double_3x3_1_bn", "(", "inception_3b_double_3x3_1_out", ")", "\n", "inception_3b_relu_double_3x3_1_out", "=", "self", ".", "inception_3b_relu_double_3x3_1", "(", "inception_3b_double_3x3_1_bn_out", ")", "\n", "inception_3b_double_3x3_2_out", "=", "self", ".", "inception_3b_double_3x3_2", "(", "inception_3b_double_3x3_1_bn_out", ")", "\n", "inception_3b_double_3x3_2_bn_out", "=", "self", ".", "inception_3b_double_3x3_2_bn", "(", "inception_3b_double_3x3_2_out", ")", "\n", "inception_3b_relu_double_3x3_2_out", "=", "self", ".", "inception_3b_relu_double_3x3_2", "(", "inception_3b_double_3x3_2_bn_out", ")", "\n", "inception_3b_pool_out", "=", "self", ".", "inception_3b_pool", "(", "inception_3a_output_out", ")", "\n", "inception_3b_pool_proj_out", "=", "self", ".", "inception_3b_pool_proj", "(", "inception_3b_pool_out", ")", "\n", "inception_3b_pool_proj_bn_out", "=", "self", ".", "inception_3b_pool_proj_bn", "(", "inception_3b_pool_proj_out", ")", "\n", "inception_3b_relu_pool_proj_out", "=", "self", ".", "inception_3b_relu_pool_proj", "(", "inception_3b_pool_proj_bn_out", ")", "\n", "inception_3b_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_3b_1x1_bn_out", ",", "inception_3b_3x3_bn_out", ",", "inception_3b_double_3x3_2_bn_out", ",", "\n", "inception_3b_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_3b_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._block_3c": [[187, 209], ["bn_inception.BNInception.inception_3c_3x3_reduce", "bn_inception.BNInception.inception_3c_3x3_reduce_bn", "bn_inception.BNInception.inception_3c_relu_3x3_reduce", "bn_inception.BNInception.inception_3c_3x3", "bn_inception.BNInception.inception_3c_3x3_bn", "bn_inception.BNInception.inception_3c_relu_3x3", "bn_inception.BNInception.inception_3c_double_3x3_reduce", "bn_inception.BNInception.inception_3c_double_3x3_reduce_bn", "bn_inception.BNInception.inception_3c_relu_double_3x3_reduce", "bn_inception.BNInception.inception_3c_double_3x3_1", "bn_inception.BNInception.inception_3c_double_3x3_1_bn", "bn_inception.BNInception.inception_3c_relu_double_3x3_1", "bn_inception.BNInception.inception_3c_double_3x3_2", "bn_inception.BNInception.inception_3c_double_3x3_2_bn", "bn_inception.BNInception.inception_3c_relu_double_3x3_2", "bn_inception.BNInception.inception_3c_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_3c", "(", "self", ",", "inception_3b_output_out", ")", ":", "\n", "        ", "inception_3c_3x3_reduce_out", "=", "self", ".", "inception_3c_3x3_reduce", "(", "inception_3b_output_out", ")", "\n", "inception_3c_3x3_reduce_bn_out", "=", "self", ".", "inception_3c_3x3_reduce_bn", "(", "inception_3c_3x3_reduce_out", ")", "\n", "inception_3c_relu_3x3_reduce_out", "=", "self", ".", "inception_3c_relu_3x3_reduce", "(", "inception_3c_3x3_reduce_bn_out", ")", "\n", "inception_3c_3x3_out", "=", "self", ".", "inception_3c_3x3", "(", "inception_3c_3x3_reduce_bn_out", ")", "\n", "inception_3c_3x3_bn_out", "=", "self", ".", "inception_3c_3x3_bn", "(", "inception_3c_3x3_out", ")", "\n", "inception_3c_relu_3x3_out", "=", "self", ".", "inception_3c_relu_3x3", "(", "inception_3c_3x3_bn_out", ")", "\n", "inception_3c_double_3x3_reduce_out", "=", "self", ".", "inception_3c_double_3x3_reduce", "(", "inception_3b_output_out", ")", "\n", "inception_3c_double_3x3_reduce_bn_out", "=", "self", ".", "inception_3c_double_3x3_reduce_bn", "(", "\n", "inception_3c_double_3x3_reduce_out", ")", "\n", "inception_3c_relu_double_3x3_reduce_out", "=", "self", ".", "inception_3c_relu_double_3x3_reduce", "(", "\n", "inception_3c_double_3x3_reduce_bn_out", ")", "\n", "inception_3c_double_3x3_1_out", "=", "self", ".", "inception_3c_double_3x3_1", "(", "inception_3c_double_3x3_reduce_bn_out", ")", "\n", "inception_3c_double_3x3_1_bn_out", "=", "self", ".", "inception_3c_double_3x3_1_bn", "(", "inception_3c_double_3x3_1_out", ")", "\n", "inception_3c_relu_double_3x3_1_out", "=", "self", ".", "inception_3c_relu_double_3x3_1", "(", "inception_3c_double_3x3_1_bn_out", ")", "\n", "inception_3c_double_3x3_2_out", "=", "self", ".", "inception_3c_double_3x3_2", "(", "inception_3c_double_3x3_1_bn_out", ")", "\n", "inception_3c_double_3x3_2_bn_out", "=", "self", ".", "inception_3c_double_3x3_2_bn", "(", "inception_3c_double_3x3_2_out", ")", "\n", "inception_3c_relu_double_3x3_2_out", "=", "self", ".", "inception_3c_relu_double_3x3_2", "(", "inception_3c_double_3x3_2_bn_out", ")", "\n", "inception_3c_pool_out", "=", "self", ".", "inception_3c_pool", "(", "inception_3b_output_out", ")", "\n", "inception_3c_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_3c_3x3_bn_out", ",", "inception_3c_double_3x3_2_bn_out", ",", "inception_3c_pool_out", "]", ",", "1", ")", "\n", "return", "inception_3c_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._block_4a": [[210, 239], ["bn_inception.BNInception.inception_4a_1x1", "bn_inception.BNInception.inception_4a_1x1_bn", "bn_inception.BNInception.inception_4a_relu_1x1", "bn_inception.BNInception.inception_4a_3x3_reduce", "bn_inception.BNInception.inception_4a_3x3_reduce_bn", "bn_inception.BNInception.inception_4a_relu_3x3_reduce", "bn_inception.BNInception.inception_4a_3x3", "bn_inception.BNInception.inception_4a_3x3_bn", "bn_inception.BNInception.inception_4a_relu_3x3", "bn_inception.BNInception.inception_4a_double_3x3_reduce", "bn_inception.BNInception.inception_4a_double_3x3_reduce_bn", "bn_inception.BNInception.inception_4a_relu_double_3x3_reduce", "bn_inception.BNInception.inception_4a_double_3x3_1", "bn_inception.BNInception.inception_4a_double_3x3_1_bn", "bn_inception.BNInception.inception_4a_relu_double_3x3_1", "bn_inception.BNInception.inception_4a_double_3x3_2", "bn_inception.BNInception.inception_4a_double_3x3_2_bn", "bn_inception.BNInception.inception_4a_relu_double_3x3_2", "bn_inception.BNInception.inception_4a_pool", "bn_inception.BNInception.inception_4a_pool_proj", "bn_inception.BNInception.inception_4a_pool_proj_bn", "bn_inception.BNInception.inception_4a_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_4a", "(", "self", ",", "inception_3c_output_out", ")", ":", "\n", "        ", "inception_4a_1x1_out", "=", "self", ".", "inception_4a_1x1", "(", "inception_3c_output_out", ")", "\n", "inception_4a_1x1_bn_out", "=", "self", ".", "inception_4a_1x1_bn", "(", "inception_4a_1x1_out", ")", "\n", "inception_4a_relu_1x1_out", "=", "self", ".", "inception_4a_relu_1x1", "(", "inception_4a_1x1_bn_out", ")", "\n", "inception_4a_3x3_reduce_out", "=", "self", ".", "inception_4a_3x3_reduce", "(", "inception_3c_output_out", ")", "\n", "inception_4a_3x3_reduce_bn_out", "=", "self", ".", "inception_4a_3x3_reduce_bn", "(", "inception_4a_3x3_reduce_out", ")", "\n", "inception_4a_relu_3x3_reduce_out", "=", "self", ".", "inception_4a_relu_3x3_reduce", "(", "inception_4a_3x3_reduce_bn_out", ")", "\n", "inception_4a_3x3_out", "=", "self", ".", "inception_4a_3x3", "(", "inception_4a_3x3_reduce_bn_out", ")", "\n", "inception_4a_3x3_bn_out", "=", "self", ".", "inception_4a_3x3_bn", "(", "inception_4a_3x3_out", ")", "\n", "inception_4a_relu_3x3_out", "=", "self", ".", "inception_4a_relu_3x3", "(", "inception_4a_3x3_bn_out", ")", "\n", "inception_4a_double_3x3_reduce_out", "=", "self", ".", "inception_4a_double_3x3_reduce", "(", "inception_3c_output_out", ")", "\n", "inception_4a_double_3x3_reduce_bn_out", "=", "self", ".", "inception_4a_double_3x3_reduce_bn", "(", "\n", "inception_4a_double_3x3_reduce_out", ")", "\n", "inception_4a_relu_double_3x3_reduce_out", "=", "self", ".", "inception_4a_relu_double_3x3_reduce", "(", "\n", "inception_4a_double_3x3_reduce_bn_out", ")", "\n", "inception_4a_double_3x3_1_out", "=", "self", ".", "inception_4a_double_3x3_1", "(", "inception_4a_double_3x3_reduce_bn_out", ")", "\n", "inception_4a_double_3x3_1_bn_out", "=", "self", ".", "inception_4a_double_3x3_1_bn", "(", "inception_4a_double_3x3_1_out", ")", "\n", "inception_4a_relu_double_3x3_1_out", "=", "self", ".", "inception_4a_relu_double_3x3_1", "(", "inception_4a_double_3x3_1_bn_out", ")", "\n", "inception_4a_double_3x3_2_out", "=", "self", ".", "inception_4a_double_3x3_2", "(", "inception_4a_double_3x3_1_bn_out", ")", "\n", "inception_4a_double_3x3_2_bn_out", "=", "self", ".", "inception_4a_double_3x3_2_bn", "(", "inception_4a_double_3x3_2_out", ")", "\n", "inception_4a_relu_double_3x3_2_out", "=", "self", ".", "inception_4a_relu_double_3x3_2", "(", "inception_4a_double_3x3_2_bn_out", ")", "\n", "inception_4a_pool_out", "=", "self", ".", "inception_4a_pool", "(", "inception_3c_output_out", ")", "\n", "inception_4a_pool_proj_out", "=", "self", ".", "inception_4a_pool_proj", "(", "inception_4a_pool_out", ")", "\n", "inception_4a_pool_proj_bn_out", "=", "self", ".", "inception_4a_pool_proj_bn", "(", "inception_4a_pool_proj_out", ")", "\n", "inception_4a_relu_pool_proj_out", "=", "self", ".", "inception_4a_relu_pool_proj", "(", "inception_4a_pool_proj_bn_out", ")", "\n", "inception_4a_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_4a_1x1_bn_out", ",", "inception_4a_3x3_bn_out", ",", "inception_4a_double_3x3_2_bn_out", ",", "\n", "inception_4a_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_4a_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._block_4b": [[240, 269], ["bn_inception.BNInception.inception_4b_1x1", "bn_inception.BNInception.inception_4b_1x1_bn", "bn_inception.BNInception.inception_4b_relu_1x1", "bn_inception.BNInception.inception_4b_3x3_reduce", "bn_inception.BNInception.inception_4b_3x3_reduce_bn", "bn_inception.BNInception.inception_4b_relu_3x3_reduce", "bn_inception.BNInception.inception_4b_3x3", "bn_inception.BNInception.inception_4b_3x3_bn", "bn_inception.BNInception.inception_4b_relu_3x3", "bn_inception.BNInception.inception_4b_double_3x3_reduce", "bn_inception.BNInception.inception_4b_double_3x3_reduce_bn", "bn_inception.BNInception.inception_4b_relu_double_3x3_reduce", "bn_inception.BNInception.inception_4b_double_3x3_1", "bn_inception.BNInception.inception_4b_double_3x3_1_bn", "bn_inception.BNInception.inception_4b_relu_double_3x3_1", "bn_inception.BNInception.inception_4b_double_3x3_2", "bn_inception.BNInception.inception_4b_double_3x3_2_bn", "bn_inception.BNInception.inception_4b_relu_double_3x3_2", "bn_inception.BNInception.inception_4b_pool", "bn_inception.BNInception.inception_4b_pool_proj", "bn_inception.BNInception.inception_4b_pool_proj_bn", "bn_inception.BNInception.inception_4b_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_4b", "(", "self", ",", "inception_4a_output_out", ")", ":", "\n", "        ", "inception_4b_1x1_out", "=", "self", ".", "inception_4b_1x1", "(", "inception_4a_output_out", ")", "\n", "inception_4b_1x1_bn_out", "=", "self", ".", "inception_4b_1x1_bn", "(", "inception_4b_1x1_out", ")", "\n", "inception_4b_relu_1x1_out", "=", "self", ".", "inception_4b_relu_1x1", "(", "inception_4b_1x1_bn_out", ")", "\n", "inception_4b_3x3_reduce_out", "=", "self", ".", "inception_4b_3x3_reduce", "(", "inception_4a_output_out", ")", "\n", "inception_4b_3x3_reduce_bn_out", "=", "self", ".", "inception_4b_3x3_reduce_bn", "(", "inception_4b_3x3_reduce_out", ")", "\n", "inception_4b_relu_3x3_reduce_out", "=", "self", ".", "inception_4b_relu_3x3_reduce", "(", "inception_4b_3x3_reduce_bn_out", ")", "\n", "inception_4b_3x3_out", "=", "self", ".", "inception_4b_3x3", "(", "inception_4b_3x3_reduce_bn_out", ")", "\n", "inception_4b_3x3_bn_out", "=", "self", ".", "inception_4b_3x3_bn", "(", "inception_4b_3x3_out", ")", "\n", "inception_4b_relu_3x3_out", "=", "self", ".", "inception_4b_relu_3x3", "(", "inception_4b_3x3_bn_out", ")", "\n", "inception_4b_double_3x3_reduce_out", "=", "self", ".", "inception_4b_double_3x3_reduce", "(", "inception_4a_output_out", ")", "\n", "inception_4b_double_3x3_reduce_bn_out", "=", "self", ".", "inception_4b_double_3x3_reduce_bn", "(", "\n", "inception_4b_double_3x3_reduce_out", ")", "\n", "inception_4b_relu_double_3x3_reduce_out", "=", "self", ".", "inception_4b_relu_double_3x3_reduce", "(", "\n", "inception_4b_double_3x3_reduce_bn_out", ")", "\n", "inception_4b_double_3x3_1_out", "=", "self", ".", "inception_4b_double_3x3_1", "(", "inception_4b_double_3x3_reduce_bn_out", ")", "\n", "inception_4b_double_3x3_1_bn_out", "=", "self", ".", "inception_4b_double_3x3_1_bn", "(", "inception_4b_double_3x3_1_out", ")", "\n", "inception_4b_relu_double_3x3_1_out", "=", "self", ".", "inception_4b_relu_double_3x3_1", "(", "inception_4b_double_3x3_1_bn_out", ")", "\n", "inception_4b_double_3x3_2_out", "=", "self", ".", "inception_4b_double_3x3_2", "(", "inception_4b_double_3x3_1_bn_out", ")", "\n", "inception_4b_double_3x3_2_bn_out", "=", "self", ".", "inception_4b_double_3x3_2_bn", "(", "inception_4b_double_3x3_2_out", ")", "\n", "inception_4b_relu_double_3x3_2_out", "=", "self", ".", "inception_4b_relu_double_3x3_2", "(", "inception_4b_double_3x3_2_bn_out", ")", "\n", "inception_4b_pool_out", "=", "self", ".", "inception_4b_pool", "(", "inception_4a_output_out", ")", "\n", "inception_4b_pool_proj_out", "=", "self", ".", "inception_4b_pool_proj", "(", "inception_4b_pool_out", ")", "\n", "inception_4b_pool_proj_bn_out", "=", "self", ".", "inception_4b_pool_proj_bn", "(", "inception_4b_pool_proj_out", ")", "\n", "inception_4b_relu_pool_proj_out", "=", "self", ".", "inception_4b_relu_pool_proj", "(", "inception_4b_pool_proj_bn_out", ")", "\n", "inception_4b_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_4b_1x1_bn_out", ",", "inception_4b_3x3_bn_out", ",", "inception_4b_double_3x3_2_bn_out", ",", "\n", "inception_4b_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_4b_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._block_4c": [[270, 299], ["bn_inception.BNInception.inception_4c_1x1", "bn_inception.BNInception.inception_4c_1x1_bn", "bn_inception.BNInception.inception_4c_relu_1x1", "bn_inception.BNInception.inception_4c_3x3_reduce", "bn_inception.BNInception.inception_4c_3x3_reduce_bn", "bn_inception.BNInception.inception_4c_relu_3x3_reduce", "bn_inception.BNInception.inception_4c_3x3", "bn_inception.BNInception.inception_4c_3x3_bn", "bn_inception.BNInception.inception_4c_relu_3x3", "bn_inception.BNInception.inception_4c_double_3x3_reduce", "bn_inception.BNInception.inception_4c_double_3x3_reduce_bn", "bn_inception.BNInception.inception_4c_relu_double_3x3_reduce", "bn_inception.BNInception.inception_4c_double_3x3_1", "bn_inception.BNInception.inception_4c_double_3x3_1_bn", "bn_inception.BNInception.inception_4c_relu_double_3x3_1", "bn_inception.BNInception.inception_4c_double_3x3_2", "bn_inception.BNInception.inception_4c_double_3x3_2_bn", "bn_inception.BNInception.inception_4c_relu_double_3x3_2", "bn_inception.BNInception.inception_4c_pool", "bn_inception.BNInception.inception_4c_pool_proj", "bn_inception.BNInception.inception_4c_pool_proj_bn", "bn_inception.BNInception.inception_4c_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_4c", "(", "self", ",", "inception_4b_output_out", ")", ":", "\n", "        ", "inception_4c_1x1_out", "=", "self", ".", "inception_4c_1x1", "(", "inception_4b_output_out", ")", "\n", "inception_4c_1x1_bn_out", "=", "self", ".", "inception_4c_1x1_bn", "(", "inception_4c_1x1_out", ")", "\n", "inception_4c_relu_1x1_out", "=", "self", ".", "inception_4c_relu_1x1", "(", "inception_4c_1x1_bn_out", ")", "\n", "inception_4c_3x3_reduce_out", "=", "self", ".", "inception_4c_3x3_reduce", "(", "inception_4b_output_out", ")", "\n", "inception_4c_3x3_reduce_bn_out", "=", "self", ".", "inception_4c_3x3_reduce_bn", "(", "inception_4c_3x3_reduce_out", ")", "\n", "inception_4c_relu_3x3_reduce_out", "=", "self", ".", "inception_4c_relu_3x3_reduce", "(", "inception_4c_3x3_reduce_bn_out", ")", "\n", "inception_4c_3x3_out", "=", "self", ".", "inception_4c_3x3", "(", "inception_4c_3x3_reduce_bn_out", ")", "\n", "inception_4c_3x3_bn_out", "=", "self", ".", "inception_4c_3x3_bn", "(", "inception_4c_3x3_out", ")", "\n", "inception_4c_relu_3x3_out", "=", "self", ".", "inception_4c_relu_3x3", "(", "inception_4c_3x3_bn_out", ")", "\n", "inception_4c_double_3x3_reduce_out", "=", "self", ".", "inception_4c_double_3x3_reduce", "(", "inception_4b_output_out", ")", "\n", "inception_4c_double_3x3_reduce_bn_out", "=", "self", ".", "inception_4c_double_3x3_reduce_bn", "(", "\n", "inception_4c_double_3x3_reduce_out", ")", "\n", "inception_4c_relu_double_3x3_reduce_out", "=", "self", ".", "inception_4c_relu_double_3x3_reduce", "(", "\n", "inception_4c_double_3x3_reduce_bn_out", ")", "\n", "inception_4c_double_3x3_1_out", "=", "self", ".", "inception_4c_double_3x3_1", "(", "inception_4c_double_3x3_reduce_bn_out", ")", "\n", "inception_4c_double_3x3_1_bn_out", "=", "self", ".", "inception_4c_double_3x3_1_bn", "(", "inception_4c_double_3x3_1_out", ")", "\n", "inception_4c_relu_double_3x3_1_out", "=", "self", ".", "inception_4c_relu_double_3x3_1", "(", "inception_4c_double_3x3_1_bn_out", ")", "\n", "inception_4c_double_3x3_2_out", "=", "self", ".", "inception_4c_double_3x3_2", "(", "inception_4c_double_3x3_1_bn_out", ")", "\n", "inception_4c_double_3x3_2_bn_out", "=", "self", ".", "inception_4c_double_3x3_2_bn", "(", "inception_4c_double_3x3_2_out", ")", "\n", "inception_4c_relu_double_3x3_2_out", "=", "self", ".", "inception_4c_relu_double_3x3_2", "(", "inception_4c_double_3x3_2_bn_out", ")", "\n", "inception_4c_pool_out", "=", "self", ".", "inception_4c_pool", "(", "inception_4b_output_out", ")", "\n", "inception_4c_pool_proj_out", "=", "self", ".", "inception_4c_pool_proj", "(", "inception_4c_pool_out", ")", "\n", "inception_4c_pool_proj_bn_out", "=", "self", ".", "inception_4c_pool_proj_bn", "(", "inception_4c_pool_proj_out", ")", "\n", "inception_4c_relu_pool_proj_out", "=", "self", ".", "inception_4c_relu_pool_proj", "(", "inception_4c_pool_proj_bn_out", ")", "\n", "inception_4c_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_4c_1x1_bn_out", ",", "inception_4c_3x3_bn_out", ",", "inception_4c_double_3x3_2_bn_out", ",", "\n", "inception_4c_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_4c_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._block_4d": [[300, 329], ["bn_inception.BNInception.inception_4d_1x1", "bn_inception.BNInception.inception_4d_1x1_bn", "bn_inception.BNInception.inception_4d_relu_1x1", "bn_inception.BNInception.inception_4d_3x3_reduce", "bn_inception.BNInception.inception_4d_3x3_reduce_bn", "bn_inception.BNInception.inception_4d_relu_3x3_reduce", "bn_inception.BNInception.inception_4d_3x3", "bn_inception.BNInception.inception_4d_3x3_bn", "bn_inception.BNInception.inception_4d_relu_3x3", "bn_inception.BNInception.inception_4d_double_3x3_reduce", "bn_inception.BNInception.inception_4d_double_3x3_reduce_bn", "bn_inception.BNInception.inception_4d_relu_double_3x3_reduce", "bn_inception.BNInception.inception_4d_double_3x3_1", "bn_inception.BNInception.inception_4d_double_3x3_1_bn", "bn_inception.BNInception.inception_4d_relu_double_3x3_1", "bn_inception.BNInception.inception_4d_double_3x3_2", "bn_inception.BNInception.inception_4d_double_3x3_2_bn", "bn_inception.BNInception.inception_4d_relu_double_3x3_2", "bn_inception.BNInception.inception_4d_pool", "bn_inception.BNInception.inception_4d_pool_proj", "bn_inception.BNInception.inception_4d_pool_proj_bn", "bn_inception.BNInception.inception_4d_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_4d", "(", "self", ",", "inception_4c_output_out", ")", ":", "\n", "        ", "inception_4d_1x1_out", "=", "self", ".", "inception_4d_1x1", "(", "inception_4c_output_out", ")", "\n", "inception_4d_1x1_bn_out", "=", "self", ".", "inception_4d_1x1_bn", "(", "inception_4d_1x1_out", ")", "\n", "inception_4d_relu_1x1_out", "=", "self", ".", "inception_4d_relu_1x1", "(", "inception_4d_1x1_bn_out", ")", "\n", "inception_4d_3x3_reduce_out", "=", "self", ".", "inception_4d_3x3_reduce", "(", "inception_4c_output_out", ")", "\n", "inception_4d_3x3_reduce_bn_out", "=", "self", ".", "inception_4d_3x3_reduce_bn", "(", "inception_4d_3x3_reduce_out", ")", "\n", "inception_4d_relu_3x3_reduce_out", "=", "self", ".", "inception_4d_relu_3x3_reduce", "(", "inception_4d_3x3_reduce_bn_out", ")", "\n", "inception_4d_3x3_out", "=", "self", ".", "inception_4d_3x3", "(", "inception_4d_3x3_reduce_bn_out", ")", "\n", "inception_4d_3x3_bn_out", "=", "self", ".", "inception_4d_3x3_bn", "(", "inception_4d_3x3_out", ")", "\n", "inception_4d_relu_3x3_out", "=", "self", ".", "inception_4d_relu_3x3", "(", "inception_4d_3x3_bn_out", ")", "\n", "inception_4d_double_3x3_reduce_out", "=", "self", ".", "inception_4d_double_3x3_reduce", "(", "inception_4c_output_out", ")", "\n", "inception_4d_double_3x3_reduce_bn_out", "=", "self", ".", "inception_4d_double_3x3_reduce_bn", "(", "\n", "inception_4d_double_3x3_reduce_out", ")", "\n", "inception_4d_relu_double_3x3_reduce_out", "=", "self", ".", "inception_4d_relu_double_3x3_reduce", "(", "\n", "inception_4d_double_3x3_reduce_bn_out", ")", "\n", "inception_4d_double_3x3_1_out", "=", "self", ".", "inception_4d_double_3x3_1", "(", "inception_4d_double_3x3_reduce_bn_out", ")", "\n", "inception_4d_double_3x3_1_bn_out", "=", "self", ".", "inception_4d_double_3x3_1_bn", "(", "inception_4d_double_3x3_1_out", ")", "\n", "inception_4d_relu_double_3x3_1_out", "=", "self", ".", "inception_4d_relu_double_3x3_1", "(", "inception_4d_double_3x3_1_bn_out", ")", "\n", "inception_4d_double_3x3_2_out", "=", "self", ".", "inception_4d_double_3x3_2", "(", "inception_4d_double_3x3_1_bn_out", ")", "\n", "inception_4d_double_3x3_2_bn_out", "=", "self", ".", "inception_4d_double_3x3_2_bn", "(", "inception_4d_double_3x3_2_out", ")", "\n", "inception_4d_relu_double_3x3_2_out", "=", "self", ".", "inception_4d_relu_double_3x3_2", "(", "inception_4d_double_3x3_2_bn_out", ")", "\n", "inception_4d_pool_out", "=", "self", ".", "inception_4d_pool", "(", "inception_4c_output_out", ")", "\n", "inception_4d_pool_proj_out", "=", "self", ".", "inception_4d_pool_proj", "(", "inception_4d_pool_out", ")", "\n", "inception_4d_pool_proj_bn_out", "=", "self", ".", "inception_4d_pool_proj_bn", "(", "inception_4d_pool_proj_out", ")", "\n", "inception_4d_relu_pool_proj_out", "=", "self", ".", "inception_4d_relu_pool_proj", "(", "inception_4d_pool_proj_bn_out", ")", "\n", "inception_4d_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_4d_1x1_bn_out", ",", "inception_4d_3x3_bn_out", ",", "inception_4d_double_3x3_2_bn_out", ",", "\n", "inception_4d_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_4d_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._block_4e": [[330, 352], ["bn_inception.BNInception.inception_4e_3x3_reduce", "bn_inception.BNInception.inception_4e_3x3_reduce_bn", "bn_inception.BNInception.inception_4e_relu_3x3_reduce", "bn_inception.BNInception.inception_4e_3x3", "bn_inception.BNInception.inception_4e_3x3_bn", "bn_inception.BNInception.inception_4e_relu_3x3", "bn_inception.BNInception.inception_4e_double_3x3_reduce", "bn_inception.BNInception.inception_4e_double_3x3_reduce_bn", "bn_inception.BNInception.inception_4e_relu_double_3x3_reduce", "bn_inception.BNInception.inception_4e_double_3x3_1", "bn_inception.BNInception.inception_4e_double_3x3_1_bn", "bn_inception.BNInception.inception_4e_relu_double_3x3_1", "bn_inception.BNInception.inception_4e_double_3x3_2", "bn_inception.BNInception.inception_4e_double_3x3_2_bn", "bn_inception.BNInception.inception_4e_relu_double_3x3_2", "bn_inception.BNInception.inception_4e_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_4e", "(", "self", ",", "inception_4d_output_out", ")", ":", "\n", "        ", "inception_4e_3x3_reduce_out", "=", "self", ".", "inception_4e_3x3_reduce", "(", "inception_4d_output_out", ")", "\n", "inception_4e_3x3_reduce_bn_out", "=", "self", ".", "inception_4e_3x3_reduce_bn", "(", "inception_4e_3x3_reduce_out", ")", "\n", "inception_4e_relu_3x3_reduce_out", "=", "self", ".", "inception_4e_relu_3x3_reduce", "(", "inception_4e_3x3_reduce_bn_out", ")", "\n", "inception_4e_3x3_out", "=", "self", ".", "inception_4e_3x3", "(", "inception_4e_3x3_reduce_bn_out", ")", "\n", "inception_4e_3x3_bn_out", "=", "self", ".", "inception_4e_3x3_bn", "(", "inception_4e_3x3_out", ")", "\n", "inception_4e_relu_3x3_out", "=", "self", ".", "inception_4e_relu_3x3", "(", "inception_4e_3x3_bn_out", ")", "\n", "inception_4e_double_3x3_reduce_out", "=", "self", ".", "inception_4e_double_3x3_reduce", "(", "inception_4d_output_out", ")", "\n", "inception_4e_double_3x3_reduce_bn_out", "=", "self", ".", "inception_4e_double_3x3_reduce_bn", "(", "\n", "inception_4e_double_3x3_reduce_out", ")", "\n", "inception_4e_relu_double_3x3_reduce_out", "=", "self", ".", "inception_4e_relu_double_3x3_reduce", "(", "\n", "inception_4e_double_3x3_reduce_bn_out", ")", "\n", "inception_4e_double_3x3_1_out", "=", "self", ".", "inception_4e_double_3x3_1", "(", "inception_4e_double_3x3_reduce_bn_out", ")", "\n", "inception_4e_double_3x3_1_bn_out", "=", "self", ".", "inception_4e_double_3x3_1_bn", "(", "inception_4e_double_3x3_1_out", ")", "\n", "inception_4e_relu_double_3x3_1_out", "=", "self", ".", "inception_4e_relu_double_3x3_1", "(", "inception_4e_double_3x3_1_bn_out", ")", "\n", "inception_4e_double_3x3_2_out", "=", "self", ".", "inception_4e_double_3x3_2", "(", "inception_4e_double_3x3_1_bn_out", ")", "\n", "inception_4e_double_3x3_2_bn_out", "=", "self", ".", "inception_4e_double_3x3_2_bn", "(", "inception_4e_double_3x3_2_out", ")", "\n", "inception_4e_relu_double_3x3_2_out", "=", "self", ".", "inception_4e_relu_double_3x3_2", "(", "inception_4e_double_3x3_2_bn_out", ")", "\n", "inception_4e_pool_out", "=", "self", ".", "inception_4e_pool", "(", "inception_4d_output_out", ")", "\n", "inception_4e_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_4e_3x3_bn_out", ",", "inception_4e_double_3x3_2_bn_out", ",", "inception_4e_pool_out", "]", ",", "1", ")", "\n", "return", "inception_4e_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._block_5a": [[353, 382], ["bn_inception.BNInception.inception_5a_1x1", "bn_inception.BNInception.inception_5a_1x1_bn", "bn_inception.BNInception.inception_5a_relu_1x1", "bn_inception.BNInception.inception_5a_3x3_reduce", "bn_inception.BNInception.inception_5a_3x3_reduce_bn", "bn_inception.BNInception.inception_5a_relu_3x3_reduce", "bn_inception.BNInception.inception_5a_3x3", "bn_inception.BNInception.inception_5a_3x3_bn", "bn_inception.BNInception.inception_5a_relu_3x3", "bn_inception.BNInception.inception_5a_double_3x3_reduce", "bn_inception.BNInception.inception_5a_double_3x3_reduce_bn", "bn_inception.BNInception.inception_5a_relu_double_3x3_reduce", "bn_inception.BNInception.inception_5a_double_3x3_1", "bn_inception.BNInception.inception_5a_double_3x3_1_bn", "bn_inception.BNInception.inception_5a_relu_double_3x3_1", "bn_inception.BNInception.inception_5a_double_3x3_2", "bn_inception.BNInception.inception_5a_double_3x3_2_bn", "bn_inception.BNInception.inception_5a_relu_double_3x3_2", "bn_inception.BNInception.inception_5a_pool", "bn_inception.BNInception.inception_5a_pool_proj", "bn_inception.BNInception.inception_5a_pool_proj_bn", "bn_inception.BNInception.inception_5a_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_5a", "(", "self", ",", "inception_4e_output_out", ")", ":", "\n", "        ", "inception_5a_1x1_out", "=", "self", ".", "inception_5a_1x1", "(", "inception_4e_output_out", ")", "\n", "inception_5a_1x1_bn_out", "=", "self", ".", "inception_5a_1x1_bn", "(", "inception_5a_1x1_out", ")", "\n", "inception_5a_relu_1x1_out", "=", "self", ".", "inception_5a_relu_1x1", "(", "inception_5a_1x1_bn_out", ")", "\n", "inception_5a_3x3_reduce_out", "=", "self", ".", "inception_5a_3x3_reduce", "(", "inception_4e_output_out", ")", "\n", "inception_5a_3x3_reduce_bn_out", "=", "self", ".", "inception_5a_3x3_reduce_bn", "(", "inception_5a_3x3_reduce_out", ")", "\n", "inception_5a_relu_3x3_reduce_out", "=", "self", ".", "inception_5a_relu_3x3_reduce", "(", "inception_5a_3x3_reduce_bn_out", ")", "\n", "inception_5a_3x3_out", "=", "self", ".", "inception_5a_3x3", "(", "inception_5a_3x3_reduce_bn_out", ")", "\n", "inception_5a_3x3_bn_out", "=", "self", ".", "inception_5a_3x3_bn", "(", "inception_5a_3x3_out", ")", "\n", "inception_5a_relu_3x3_out", "=", "self", ".", "inception_5a_relu_3x3", "(", "inception_5a_3x3_bn_out", ")", "\n", "inception_5a_double_3x3_reduce_out", "=", "self", ".", "inception_5a_double_3x3_reduce", "(", "inception_4e_output_out", ")", "\n", "inception_5a_double_3x3_reduce_bn_out", "=", "self", ".", "inception_5a_double_3x3_reduce_bn", "(", "\n", "inception_5a_double_3x3_reduce_out", ")", "\n", "inception_5a_relu_double_3x3_reduce_out", "=", "self", ".", "inception_5a_relu_double_3x3_reduce", "(", "\n", "inception_5a_double_3x3_reduce_bn_out", ")", "\n", "inception_5a_double_3x3_1_out", "=", "self", ".", "inception_5a_double_3x3_1", "(", "inception_5a_double_3x3_reduce_bn_out", ")", "\n", "inception_5a_double_3x3_1_bn_out", "=", "self", ".", "inception_5a_double_3x3_1_bn", "(", "inception_5a_double_3x3_1_out", ")", "\n", "inception_5a_relu_double_3x3_1_out", "=", "self", ".", "inception_5a_relu_double_3x3_1", "(", "inception_5a_double_3x3_1_bn_out", ")", "\n", "inception_5a_double_3x3_2_out", "=", "self", ".", "inception_5a_double_3x3_2", "(", "inception_5a_double_3x3_1_bn_out", ")", "\n", "inception_5a_double_3x3_2_bn_out", "=", "self", ".", "inception_5a_double_3x3_2_bn", "(", "inception_5a_double_3x3_2_out", ")", "\n", "inception_5a_relu_double_3x3_2_out", "=", "self", ".", "inception_5a_relu_double_3x3_2", "(", "inception_5a_double_3x3_2_bn_out", ")", "\n", "inception_5a_pool_out", "=", "self", ".", "inception_5a_pool", "(", "inception_4e_output_out", ")", "\n", "inception_5a_pool_proj_out", "=", "self", ".", "inception_5a_pool_proj", "(", "inception_5a_pool_out", ")", "\n", "inception_5a_pool_proj_bn_out", "=", "self", ".", "inception_5a_pool_proj_bn", "(", "inception_5a_pool_proj_out", ")", "\n", "inception_5a_relu_pool_proj_out", "=", "self", ".", "inception_5a_relu_pool_proj", "(", "inception_5a_pool_proj_bn_out", ")", "\n", "inception_5a_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_5a_1x1_bn_out", ",", "inception_5a_3x3_bn_out", ",", "inception_5a_double_3x3_2_bn_out", ",", "\n", "inception_5a_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_5a_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._block_5b": [[383, 412], ["bn_inception.BNInception.inception_5b_1x1", "bn_inception.BNInception.inception_5b_1x1_bn", "bn_inception.BNInception.inception_5b_relu_1x1", "bn_inception.BNInception.inception_5b_3x3_reduce", "bn_inception.BNInception.inception_5b_3x3_reduce_bn", "bn_inception.BNInception.inception_5b_relu_3x3_reduce", "bn_inception.BNInception.inception_5b_3x3", "bn_inception.BNInception.inception_5b_3x3_bn", "bn_inception.BNInception.inception_5b_relu_3x3", "bn_inception.BNInception.inception_5b_double_3x3_reduce", "bn_inception.BNInception.inception_5b_double_3x3_reduce_bn", "bn_inception.BNInception.inception_5b_relu_double_3x3_reduce", "bn_inception.BNInception.inception_5b_double_3x3_1", "bn_inception.BNInception.inception_5b_double_3x3_1_bn", "bn_inception.BNInception.inception_5b_relu_double_3x3_1", "bn_inception.BNInception.inception_5b_double_3x3_2", "bn_inception.BNInception.inception_5b_double_3x3_2_bn", "bn_inception.BNInception.inception_5b_relu_double_3x3_2", "bn_inception.BNInception.inception_5b_pool", "bn_inception.BNInception.inception_5b_pool_proj", "bn_inception.BNInception.inception_5b_pool_proj_bn", "bn_inception.BNInception.inception_5b_relu_pool_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_block_5b", "(", "self", ",", "inception_5a_output_out", ")", ":", "\n", "        ", "inception_5b_1x1_out", "=", "self", ".", "inception_5b_1x1", "(", "inception_5a_output_out", ")", "\n", "inception_5b_1x1_bn_out", "=", "self", ".", "inception_5b_1x1_bn", "(", "inception_5b_1x1_out", ")", "\n", "inception_5b_relu_1x1_out", "=", "self", ".", "inception_5b_relu_1x1", "(", "inception_5b_1x1_bn_out", ")", "\n", "inception_5b_3x3_reduce_out", "=", "self", ".", "inception_5b_3x3_reduce", "(", "inception_5a_output_out", ")", "\n", "inception_5b_3x3_reduce_bn_out", "=", "self", ".", "inception_5b_3x3_reduce_bn", "(", "inception_5b_3x3_reduce_out", ")", "\n", "inception_5b_relu_3x3_reduce_out", "=", "self", ".", "inception_5b_relu_3x3_reduce", "(", "inception_5b_3x3_reduce_bn_out", ")", "\n", "inception_5b_3x3_out", "=", "self", ".", "inception_5b_3x3", "(", "inception_5b_3x3_reduce_bn_out", ")", "\n", "inception_5b_3x3_bn_out", "=", "self", ".", "inception_5b_3x3_bn", "(", "inception_5b_3x3_out", ")", "\n", "inception_5b_relu_3x3_out", "=", "self", ".", "inception_5b_relu_3x3", "(", "inception_5b_3x3_bn_out", ")", "\n", "inception_5b_double_3x3_reduce_out", "=", "self", ".", "inception_5b_double_3x3_reduce", "(", "inception_5a_output_out", ")", "\n", "inception_5b_double_3x3_reduce_bn_out", "=", "self", ".", "inception_5b_double_3x3_reduce_bn", "(", "\n", "inception_5b_double_3x3_reduce_out", ")", "\n", "inception_5b_relu_double_3x3_reduce_out", "=", "self", ".", "inception_5b_relu_double_3x3_reduce", "(", "\n", "inception_5b_double_3x3_reduce_bn_out", ")", "\n", "inception_5b_double_3x3_1_out", "=", "self", ".", "inception_5b_double_3x3_1", "(", "inception_5b_double_3x3_reduce_bn_out", ")", "\n", "inception_5b_double_3x3_1_bn_out", "=", "self", ".", "inception_5b_double_3x3_1_bn", "(", "inception_5b_double_3x3_1_out", ")", "\n", "inception_5b_relu_double_3x3_1_out", "=", "self", ".", "inception_5b_relu_double_3x3_1", "(", "inception_5b_double_3x3_1_bn_out", ")", "\n", "inception_5b_double_3x3_2_out", "=", "self", ".", "inception_5b_double_3x3_2", "(", "inception_5b_double_3x3_1_bn_out", ")", "\n", "inception_5b_double_3x3_2_bn_out", "=", "self", ".", "inception_5b_double_3x3_2_bn", "(", "inception_5b_double_3x3_2_out", ")", "\n", "inception_5b_relu_double_3x3_2_out", "=", "self", ".", "inception_5b_relu_double_3x3_2", "(", "inception_5b_double_3x3_2_bn_out", ")", "\n", "inception_5b_pool_out", "=", "self", ".", "inception_5b_pool", "(", "inception_5a_output_out", ")", "\n", "inception_5b_pool_proj_out", "=", "self", ".", "inception_5b_pool_proj", "(", "inception_5b_pool_out", ")", "\n", "inception_5b_pool_proj_bn_out", "=", "self", ".", "inception_5b_pool_proj_bn", "(", "inception_5b_pool_proj_out", ")", "\n", "inception_5b_relu_pool_proj_out", "=", "self", ".", "inception_5b_relu_pool_proj", "(", "inception_5b_pool_proj_bn_out", ")", "\n", "inception_5b_output_out", "=", "torch", ".", "cat", "(", "\n", "[", "inception_5b_1x1_bn_out", ",", "inception_5b_3x3_bn_out", ",", "inception_5b_double_3x3_2_bn_out", ",", "\n", "inception_5b_pool_proj_bn_out", "]", ",", "1", ")", "\n", "return", "inception_5b_output_out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.BNInception._build_features": [[413, 635], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "_build_features", "(", "self", ",", "inplace", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "conv1_7x7_s2", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "3", ",", "3", ")", ")", "\n", "self", ".", "conv1_7x7_s2_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv1_relu_7x7", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "pool1_3x3_s2", "=", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "conv2_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv2_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "conv2_3x3", "=", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "conv2_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv2_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "pool2_3x3_s2", "=", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "inception_3a_1x1", "=", "nn", ".", "Conv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3a_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3a_3x3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3a_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "192", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3a_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3a_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3a_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_3a_pool_proj", "=", "nn", ".", "Conv2d", "(", "192", ",", "32", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3a_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "32", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3a_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_1x1", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_3x3", "=", "nn", ".", "Conv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3b_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_3b_pool_proj", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3b_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3b_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3c_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "320", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3c_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3c_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3c_3x3", "=", "nn", ".", "Conv2d", "(", "128", ",", "160", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3c_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3c_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3c_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "320", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3c_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3c_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3c_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3c_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3c_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3c_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "96", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_3c_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_3c_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_3c_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "inception_4a_1x1", "=", "nn", ".", "Conv2d", "(", "576", ",", "224", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "224", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4a_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "576", ",", "64", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4a_3x3", "=", "nn", ".", "Conv2d", "(", "64", ",", "96", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4a_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "576", ",", "96", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4a_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "96", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4a_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4a_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_4a_pool_proj", "=", "nn", ".", "Conv2d", "(", "576", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4a_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4a_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_1x1", "=", "nn", ".", "Conv2d", "(", "576", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "576", ",", "96", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_3x3", "=", "nn", ".", "Conv2d", "(", "96", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "576", ",", "96", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "96", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4b_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_4b_pool_proj", "=", "nn", ".", "Conv2d", "(", "576", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4b_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4b_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_1x1", "=", "nn", ".", "Conv2d", "(", "576", ",", "160", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "576", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_3x3", "=", "nn", ".", "Conv2d", "(", "128", ",", "160", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "576", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "160", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "160", ",", "160", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4c_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_4c_pool_proj", "=", "nn", ".", "Conv2d", "(", "576", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4c_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4c_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_1x1", "=", "nn", ".", "Conv2d", "(", "608", ",", "96", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "96", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "608", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_3x3", "=", "nn", ".", "Conv2d", "(", "128", ",", "192", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "608", ",", "160", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "160", ",", "192", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "192", ",", "192", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4d_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_4d_pool_proj", "=", "nn", ".", "Conv2d", "(", "608", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4d_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4d_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4e_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "608", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4e_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4e_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4e_3x3", "=", "nn", ".", "Conv2d", "(", "128", ",", "192", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4e_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4e_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4e_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "608", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4e_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4e_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4e_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "192", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4e_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4e_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4e_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_4e_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "256", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_4e_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_4e_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "inception_5a_1x1", "=", "nn", ".", "Conv2d", "(", "1056", ",", "352", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "352", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5a_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "1056", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5a_3x3", "=", "nn", ".", "Conv2d", "(", "192", ",", "320", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "320", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5a_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "1056", ",", "160", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "160", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5a_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "160", ",", "224", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "224", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5a_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "224", ",", "224", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "224", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5a_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "inception_5a_pool_proj", "=", "nn", ".", "Conv2d", "(", "1056", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5a_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5a_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_1x1", "=", "nn", ".", "Conv2d", "(", "1024", ",", "352", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_1x1_bn", "=", "nn", ".", "BatchNorm2d", "(", "352", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_1x1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "1024", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_3x3", "=", "nn", ".", "Conv2d", "(", "192", ",", "320", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_3x3_bn", "=", "nn", ".", "BatchNorm2d", "(", "320", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_3x3", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_double_3x3_reduce", "=", "nn", ".", "Conv2d", "(", "1024", ",", "192", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_double_3x3_reduce_bn", "=", "nn", ".", "BatchNorm2d", "(", "192", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_double_3x3_reduce", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_double_3x3_1", "=", "nn", ".", "Conv2d", "(", "192", ",", "224", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_double_3x3_1_bn", "=", "nn", ".", "BatchNorm2d", "(", "224", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_double_3x3_1", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_double_3x3_2", "=", "nn", ".", "Conv2d", "(", "224", ",", "224", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_double_3x3_2_bn", "=", "nn", ".", "BatchNorm2d", "(", "224", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_double_3x3_2", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "inception_5b_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "inception_5b_pool_proj", "=", "nn", ".", "Conv2d", "(", "1024", ",", "128", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "inception_5b_pool_proj_bn", "=", "nn", ".", "BatchNorm2d", "(", "128", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.9", ",", "affine", "=", "True", ")", "\n", "self", ".", "inception_5b_relu_pool_proj", "=", "nn", ".", "ReLU", "(", "inplace", ")", "\n", "self", ".", "global_pool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "ceil_mode", "=", "True", ",", "count_include_pad", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhang-can_PAN-PyTorch.archs.bn_inception.bninception": [[637, 654], ["print", "bn_inception.BNInception", "BNInception.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "bninception", "(", "pretrained", "=", "'imagenet'", ")", ":", "\n", "    ", "r\"\"\"BNInception model architecture from <https://arxiv.org/pdf/1502.03167.pdf>`_ paper.\n    \"\"\"", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "        ", "print", "(", "'=> Loading from pretrained model: {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "settings", "=", "pretrained_settings", "[", "'bninception'", "]", "[", "pretrained", "]", "\n", "num_classes", "=", "settings", "[", "'num_classes'", "]", "\n", "model", "=", "BNInception", "(", "num_classes", "=", "num_classes", ")", "\n", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "settings", "[", "'url'", "]", ")", ")", "\n", "model", ".", "input_space", "=", "settings", "[", "'input_space'", "]", "\n", "model", ".", "input_size", "=", "settings", "[", "'input_size'", "]", "\n", "model", ".", "input_range", "=", "settings", "[", "'input_range'", "]", "\n", "model", ".", "mean", "=", "settings", "[", "'mean'", "]", "\n", "model", ".", "std", "=", "settings", "[", "'std'", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "model", "\n", "\n"]]}