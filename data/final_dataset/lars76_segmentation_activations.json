{"home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.DiceLoss.__init__": [[95, 97], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "__call__", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.DiceLoss.__call__": [[97, 101], ["y_pred.sum", "y_true.sum"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "y_pred", ",", "y_true", ")", ":", "\n", "        ", "numerator", "=", "(", "y_pred", "*", "y_true", ")", ".", "sum", "(", ")", "\n", "denominator", "=", "y_pred", ".", "sum", "(", ")", "+", "y_true", ".", "sum", "(", ")", "\n", "return", "1", "-", "(", "2", "*", "numerator", ")", "/", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.Dataset.__init__": [[364, 371], ["train.Dataset.input_images.extend", "glob.glob", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_images", ",", "preprocessing", ",", "augmentation", ",", "classes", ")", ":", "\n", "        ", "self", ".", "input_images", "=", "[", "]", "\n", "for", "patient", "in", "input_images", ":", "\n", "            ", "self", ".", "input_images", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "patient", ",", "\"processed_*.npy\"", ")", ")", ")", "\n", "", "self", ".", "augmentation", "=", "augmentation", "\n", "self", ".", "preprocess_fn", "=", "preprocessing", "\n", "self", ".", "classes", "=", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.Dataset.__getitem__": [[372, 397], ["numpy.load", "train.Dataset.augmentation", "image.transpose.transpose.transpose", "numpy.zeros.transpose", "numpy.zeros", "range", "train.Dataset.preprocess_fn", "image.transpose.transpose.astype", "numpy.zeros.astype", "train.Dataset.preprocess_fn"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "files", "=", "self", ".", "input_images", "[", "i", "]", "\n", "loaded_npy", "=", "np", ".", "load", "(", "self", ".", "input_images", "[", "i", "]", ")", "\n", "\n", "image", "=", "loaded_npy", "[", "...", ",", ":", "-", "1", "]", "\n", "\n", "if", "self", ".", "classes", ">", "1", ":", "\n", "            ", "mask", "=", "np", ".", "zeros", "(", "(", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ",", "self", ".", "classes", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "classes", "+", "1", ")", ":", "\n", "                ", "mask", "[", "...", ",", "i", "-", "1", "]", "=", "loaded_npy", "[", "...", ",", "-", "1", "]", "==", "i", "\n", "", "", "else", ":", "\n", "            ", "mask", "=", "loaded_npy", "[", "...", ",", "-", "1", ":", "]", "\n", "\n", "", "sample", "=", "self", ".", "augmentation", "(", "image", "=", "image", ",", "mask", "=", "mask", ")", "\n", "image", ",", "mask", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'mask'", "]", "\n", "\n", "if", "image", ".", "shape", "[", "-", "1", "]", ">=", "3", ":", "\n", "            ", "image", "[", "...", ",", ":", "3", "]", "=", "self", ".", "preprocess_fn", "(", "image", "[", "...", ",", ":", "3", "]", ")", "\n", "if", "image", ".", "shape", "[", "-", "1", "]", "==", "6", ":", "\n", "                ", "image", "[", "...", ",", "3", ":", "]", "=", "self", ".", "preprocess_fn", "(", "image", "[", "...", ",", "3", ":", "]", ")", "\n", "\n", "", "", "image", "=", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "image", ".", "astype", "(", "'float32'", ")", ",", "mask", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.Dataset.__len__": [[398, 400], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "input_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.seed_all": [[23, 33], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "seed_all", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "# might not be needed", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.seed_worker": [[38, 42], ["numpy.random.seed", "random.seed", "torch.initial_seed", "torch.initial_seed"], "function", ["None"], ["def", "seed_worker", "(", "worker_id", ")", ":", "\n", "    ", "worker_seed", "=", "torch", ".", "initial_seed", "(", ")", "%", "2", "**", "32", "\n", "np", ".", "random", ".", "seed", "(", "worker_seed", ")", "\n", "random", ".", "seed", "(", "worker_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.softsign_with_logits": [[43, 50], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "softsign_with_logits", "(", "y_hat", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ",", "epsilon", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "z", "=", "1", "+", "torch", ".", "abs", "(", "y_hat", ")", "\n", "output1", "=", "torch", ".", "log", "(", "z", "+", "y_hat", ")", "\n", "output2", "=", "torch", ".", "log", "(", "z", "-", "y_hat", ")", "\n", "\n", "return", "torch", ".", "mean", "(", "-", "torch", ".", "log", "(", "0.5", ")", "-", "y_true", "*", "output1", "-", "(", "1", "-", "y_true", ")", "*", "output2", "+", "torch", ".", "log", "(", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.inv_square_with_logits": [[51, 58], ["torch.sqrt", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.log", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "inv_square_with_logits", "(", "y_hat", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ",", "epsilon", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "z", "=", "1", "+", "y_hat", "**", "2", "\n", "z_sqrt", "=", "torch", ".", "sqrt", "(", "z", ")", "\n", "output1", "=", "torch", ".", "log", "(", "z", "+", "z_sqrt", ")", "\n", "output2", "=", "torch", ".", "log", "(", "z", "-", "y_hat", "*", "z_sqrt", ")", "\n", "return", "torch", ".", "mean", "(", "-", "torch", ".", "log", "(", "0.5", ")", "-", "y_true", "*", "output1", "-", "(", "1", "-", "y_true", ")", "*", "output2", "+", "torch", ".", "log", "(", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.bce_with_logits": [[59, 62], ["torch.nn.functional.binary_cross_entropy_with_logits"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "bce_with_logits", "(", "y_hat", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ",", "epsilon", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "y_hat", ",", "y_true", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.arctan_activation": [[63, 66], ["torch.arctan", "torch.arctan", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "arctan_activation", "(", "x", ":", "torch", ".", "Tensor", ",", "epsilon", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "epsilon", "+", "(", "1", "-", "2", "*", "epsilon", ")", "*", "(", "0.5", "+", "torch", ".", "arctan", "(", "x", ")", "/", "torch", ".", "tensor", "(", "np", ".", "pi", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.softsign_activation": [[67, 70], ["torch.nn.functional.softsign"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "softsign_activation", "(", "x", ":", "torch", ".", "Tensor", ",", "epsilon", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "(", "0.5", "-", "epsilon", ")", "*", "F", ".", "softsign", "(", "x", ")", "+", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.sigmoid_activation": [[71, 74], ["torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "sigmoid_activation", "(", "x", ":", "torch", ".", "Tensor", ",", "epsilon", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.linear_activation": [[75, 78], ["x.max", "x.min", "x.min"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "linear_activation", "(", "x", ":", "torch", ".", "Tensor", ",", "epsilon", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "epsilon", "+", "(", "1", "-", "2", "*", "epsilon", ")", "*", "(", "x", "-", "x", ".", "min", "(", ")", ")", "/", "(", "x", ".", "max", "(", ")", "-", "x", ".", "min", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.inv_square_root_activation": [[79, 82], ["torch.rsqrt", "torch.rsqrt"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "inv_square_root_activation", "(", "x", ":", "torch", ".", "Tensor", ",", "epsilon", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "(", "0.5", "-", "epsilon", ")", "*", "x", "*", "torch", ".", "rsqrt", "(", "1", "+", "x", "**", "2", ")", "+", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.cdf_activation": [[83, 89], ["torch.erf", "torch.erf", "torch.sqrt", "torch.sqrt", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "cdf_activation", "(", "x", ":", "torch", ".", "Tensor", ",", "epsilon", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "# https://github.com/IraKorshunova/pytorch/blob/master/torch/autograd/_functions/pointwise.py#L274", "\n", "# https://github.com/IraKorshunova/pytorch/blob/master/torch/lib/THC/THCNumerics.cuh#L441", "\n", "# https://docs.nvidia.com/cuda/cuda-math-api/group__CUDA__MATH__SINGLE.html#group__CUDA__MATH__SINGLE_1g3b8115ff34a107f4608152fd943dbf81", "\n", "    ", "return", "(", "0.5", "-", "epsilon", ")", "*", "torch", ".", "erf", "(", "x", "/", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "2", ")", ")", ")", "+", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.hardtanh_activation": [[90, 93], ["torch.nn.functional.hardtanh"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "hardtanh_activation", "(", "x", ":", "torch", ".", "Tensor", ",", "epsilon", ":", "float", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "F", ".", "hardtanh", "(", "x", ",", "epsilon", ",", "1.0", "-", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.metrics": [[102, 152], ["numpy.clip", "range", "numpy.sum", "max", "numpy.log", "numpy.log", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "pred_masked.sum", "y_true_class.sum"], "function", ["None"], ["", "", "def", "metrics", "(", "y_true", ",", "y_pred", ",", "epoch", ")", ":", "\n", "    ", "row", "=", "{", "\"epoch\"", ":", "epoch", ",", "\"nll\"", ":", "0", ",", "\"avg_total_dice\"", ":", "0", "}", "\n", "\n", "y_pred", "=", "np", ".", "clip", "(", "y_pred", ",", "EPSILON", ",", "1", "-", "EPSILON", ")", "\n", "div", "=", "0", "\n", "nll", "=", "-", "(", "y_true", "*", "np", ".", "log", "(", "y_pred", ")", "+", "(", "1", "-", "y_true", ")", "*", "np", ".", "log", "(", "1", "-", "y_pred", ")", ")", "\n", "for", "class_", "in", "range", "(", "y_pred", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "nll_class", "=", "nll", "[", ":", ",", "class_", "]", "\n", "y_true_class", "=", "y_true", "[", ":", ",", "class_", "]", "\n", "y_pred_class", "=", "y_pred", "[", ":", ",", "class_", "]", "\n", "\n", "row", "[", "f\"nll_class_{class_}\"", "]", "=", "np", ".", "sum", "(", "nll_class", ")", "/", "y_pred_class", ".", "shape", "[", "0", "]", "\n", "row", "[", "\"nll\"", "]", "+=", "row", "[", "f\"nll_class_{class_}\"", "]", "\n", "row", "[", "f\"best_dice_class_{class_}\"", "]", "=", "0", "\n", "\n", "for", "th", "in", "[", "0.0", ",", "0.05", ",", "0.1", ",", "0.15", ",", "0.2", ",", "0.25", ",", "0.3", ",", "\n", "0.35", ",", "0.4", ",", "0.45", ",", "0.5", ",", "0.55", ",", "0.6", ",", "0.65", ",", "\n", "0.7", ",", "0.75", ",", "0.8", ",", "0.85", ",", "0.9", ",", "0.95", ",", "1.0", "]", ":", "\n", "            ", "tp_mask", "=", "(", "y_true_class", "==", "1", ")", "&", "(", "y_pred_class", ">=", "th", ")", "\n", "fp_mask", "=", "(", "y_true_class", "==", "0", ")", "&", "(", "y_pred_class", ">=", "th", ")", "\n", "tn_mask", "=", "(", "y_true_class", "==", "0", ")", "&", "(", "y_pred_class", "<", "th", ")", "\n", "fn_mask", "=", "(", "y_true_class", "==", "1", ")", "&", "(", "y_pred_class", "<", "th", ")", "\n", "\n", "tp", "=", "np", ".", "sum", "(", "nll_class", "[", "tp_mask", "]", ")", "/", "y_pred_class", ".", "shape", "[", "0", "]", "\n", "fp", "=", "np", ".", "sum", "(", "nll_class", "[", "fp_mask", "]", ")", "/", "y_pred_class", ".", "shape", "[", "0", "]", "\n", "tn", "=", "np", ".", "sum", "(", "nll_class", "[", "tn_mask", "]", ")", "/", "y_pred_class", ".", "shape", "[", "0", "]", "\n", "fn", "=", "np", ".", "sum", "(", "nll_class", "[", "fn_mask", "]", ")", "/", "y_pred_class", ".", "shape", "[", "0", "]", "\n", "\n", "pred_masked", "=", "(", "y_pred_class", ">", "th", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "numerator", "=", "(", "pred_masked", "*", "y_true_class", ")", ".", "sum", "(", ")", "\n", "denominator", "=", "pred_masked", ".", "sum", "(", ")", "+", "y_true_class", ".", "sum", "(", ")", "\n", "dice", "=", "(", "2", "*", "numerator", ")", "/", "denominator", "\n", "row", "[", "f\"best_dice_class_{class_}\"", "]", "=", "max", "(", "dice", ",", "row", "[", "f\"best_dice_class_{class_}\"", "]", ")", "\n", "\n", "numerator2", "=", "(", "(", "1", "-", "pred_masked", ")", "*", "(", "1", "-", "y_true_class", ")", ")", ".", "sum", "(", ")", "\n", "denominator2", "=", "(", "1", "-", "pred_masked", ")", ".", "sum", "(", ")", "+", "(", "1", "-", "y_true_class", ")", ".", "sum", "(", ")", "\n", "neg_dice", "=", "(", "2", "*", "numerator2", ")", "/", "denominator2", "\n", "\n", "row", "[", "f\"dice_{th}_class_{class_}\"", "]", "=", "dice", "\n", "row", "[", "f\"neg_dice_{th}_class_{class_}\"", "]", "=", "neg_dice", "\n", "row", "[", "f\"tp_{th}_class_{class_}\"", "]", "=", "tp", "\n", "row", "[", "f\"fp_{th}_class_{class_}\"", "]", "=", "fp", "\n", "row", "[", "f\"tn_{th}_class_{class_}\"", "]", "=", "tn", "\n", "row", "[", "f\"fn_{th}_class_{class_}\"", "]", "=", "fn", "\n", "row", "[", "\"avg_total_dice\"", "]", "+=", "dice", "\n", "div", "+=", "1", "\n", "\n", "", "", "row", "[", "\"avg_total_dice\"", "]", "/=", "div", "\n", "\n", "return", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.train": [[153, 320], ["getattr", "segmentation_models_pytorch.encoders.get_preprocessing_fn", "train.create_loaders", "enumerate", "print", "print", "print", "print", "print", "print", "globals", "globals", "torch.nn.BCELoss.", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.join", "print", "train.seed_all", "getattr.", "model.to.to", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "print", "os.path.exists", "os.makedirs", "model.to.parameters", "print", "model.to.train", "tqdm.tqdm", "model.to.eval", "numpy.zeros", "numpy.zeros", "train.metrics", "range", "print", "print", "print", "progress.append", "max", "min", "optim.lr_scheduler.ReduceLROnPlateau.step", "print", "optim.Adam.zero_grad", "criterion.backward", "optim.Adam.step", "torch.no_grad", "torch.no_grad", "print", "model.to.state_dict", "os.path.join", "torch.save", "torch.save", "print", "print", "print", "print", "print", "os.path.join", "pandas.DataFrame().to_csv", "print", "dice_total_all_folds.append", "nll_all_folds.append", "dice_all_folds.append", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "print", "print", "torch.nn.BCELoss", "inputs.to", "targets.to", "model.to.", "criterion", "activation_func", "criterion", "torch.isnan", "torch.isnan", "print", "activation_func().view().cpu().numpy", "targets.view().cpu().numpy", "print", "print", "os.path.join", "torch.save", "torch.save", "print", "model.to.", "criterion.item", "len", "len", "inputs.to", "targets.to", "pandas.DataFrame", "activation_func().view().cpu", "targets.view().cpu", "activation_func().view", "targets.view", "activation_func", "model.to."], "function", ["home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.create_loaders", "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.seed_all", "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.train", "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.metrics"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "loss_func", "=", "globals", "(", ")", "[", "args", ".", "loss", "]", "\n", "activation_func", "=", "globals", "(", ")", "[", "args", ".", "activation", "]", "\n", "feature_extractor", "=", "args", ".", "encoder", "\n", "architecture", "=", "getattr", "(", "smp", ",", "args", ".", "model", ")", "\n", "\n", "data_path", "=", "args", ".", "path", "\n", "image_size", "=", "args", ".", "image_size", "\n", "classes", "=", "args", ".", "classes", "\n", "save_only_best", "=", "args", ".", "save_only_best", "\n", "channels", "=", "args", ".", "channels", "\n", "\n", "numerical_stable_loss", "=", "False", "\n", "if", "args", ".", "loss", "==", "\"BCELoss\"", ":", "\n", "        ", "if", "args", ".", "activation", "==", "\"sigmoid_activation\"", ":", "\n", "            ", "print", "(", "\"Using bce_with_logits (numerical stable)\"", ")", "\n", "numerical_stable_loss", "=", "True", "\n", "loss_func", "=", "bce_with_logits", "\n", "", "elif", "args", ".", "activation", "==", "\"softsign_activation\"", ":", "\n", "            ", "print", "(", "\"Using softsign_with_logits (numerical stable)\"", ")", "\n", "loss_func", "=", "softsign_with_logits", "\n", "numerical_stable_loss", "=", "True", "\n", "", "elif", "args", ".", "activation", "==", "\"inv_square_root_activation\"", ":", "\n", "            ", "print", "(", "\"Using inv_square_with_logits (numerical stable)\"", ")", "\n", "loss_func", "=", "inv_square_with_logits", "\n", "numerical_stable_loss", "=", "True", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Using BCELoss (not necessarily numerical stable)\"", ")", "\n", "loss_func", "=", "BCELoss", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "loss_func", "=", "loss_func", "(", ")", "\n", "\n", "", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "preprocess_input", "=", "get_preprocessing_fn", "(", "feature_extractor", ",", "\n", "pretrained", "=", "'imagenet'", ")", "\n", "loaders", "=", "create_loaders", "(", "preprocess_input", ",", "data_path", ",", "image_size", ",", "classes", ",", "BATCH_SIZE", ")", "\n", "\n", "base_path", "=", "f\"{args.prefix}-{args.loss}-{args.activation}-{args.encoder}-{args.model}\"", "\n", "\n", "criterion", "=", "loss_func", "\n", "dice_total_all_folds", "=", "[", "]", "\n", "dice_all_folds", "=", "[", "]", "\n", "nll_all_folds", "=", "[", "]", "\n", "for", "fold", ",", "(", "train_loader", ",", "val_loader", ")", "in", "enumerate", "(", "loaders", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "f\"fold-{fold}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "print", "(", "f\"\\nFold: {fold}\"", ")", "\n", "\n", "seed_all", "(", "fold", ")", "\n", "\n", "model", "=", "architecture", "(", "feature_extractor", ",", "classes", "=", "classes", ",", "\n", "encoder_weights", "=", "\"imagenet\"", ",", "\n", "in_channels", "=", "channels", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "\n", "patience", "=", "LR_REDUCE", ",", "\n", "verbose", "=", "True", ")", "\n", "best_dice_total", "=", "-", "1e9", "\n", "best_dice", "=", "-", "1e9", "\n", "best_nll", "=", "1e9", "\n", "\n", "stop", "=", "0", "\n", "epoch", "=", "0", "\n", "progress", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "print", "(", "f\"Epoch: {epoch}\"", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "inputs", ",", "targets", "in", "tqdm", "(", "train_loader", ")", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "numerical_stable_loss", ":", "\n", "                    ", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ",", "EPSILON", ")", "\n", "", "else", ":", "\n", "                    ", "outputs", "=", "activation_func", "(", "model", "(", "inputs", ")", ",", "EPSILON", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "loss", ".", "item", "(", ")", "<", "0", "or", "torch", ".", "isnan", "(", "loss", ")", ":", "\n", "                    ", "print", "(", "f\"ERROR Loss is {loss}\"", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "\n", "val_target", "=", "np", ".", "zeros", "(", "(", "len", "(", "val_loader", ".", "dataset", ")", "*", "image_size", "**", "2", ",", "classes", ")", ")", "\n", "val_pred", "=", "np", ".", "zeros", "(", "(", "len", "(", "val_loader", ".", "dataset", ")", "*", "image_size", "**", "2", ",", "classes", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "j", "=", "0", "\n", "for", "inputs", ",", "targets", "in", "val_loader", ":", "\n", "                    ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "flattened", "=", "activation_func", "(", "model", "(", "inputs", ")", ",", "EPSILON", ")", ".", "view", "(", "-", "1", ",", "classes", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "val_pred", "[", "j", ":", "j", "+", "flattened", ".", "shape", "[", "0", "]", "]", "=", "flattened", "\n", "val_target", "[", "j", ":", "j", "+", "flattened", ".", "shape", "[", "0", "]", "]", "=", "targets", ".", "view", "(", "-", "1", ",", "classes", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "j", "+=", "flattened", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "row", "=", "metrics", "(", "val_target", ",", "val_pred", ",", "epoch", ")", "\n", "\n", "avg_dice", "=", "0", "\n", "for", "class_", "in", "range", "(", "val_pred", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "val_pred", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "                    ", "print", "(", "f\"Best dice class {class_}:\"", ",", "row", "[", "f\"best_dice_class_{class_}\"", "]", ")", "\n", "", "avg_dice", "+=", "row", "[", "f\"best_dice_class_{class_}\"", "]", "\n", "", "avg_dice", "/=", "val_pred", ".", "shape", "[", "1", "]", "\n", "print", "(", "f\"Avg dice (best threshold): {avg_dice}\"", ")", "\n", "print", "(", "f\"Avg dice (all thresholds): {row['avg_total_dice']}\"", ")", "\n", "print", "(", "f\"NLL: {row['nll']}\"", ")", "\n", "\n", "progress", ".", "append", "(", "row", ")", "\n", "\n", "best_dice", "=", "max", "(", "avg_dice", ",", "best_dice", ")", "\n", "best_nll", "=", "min", "(", "row", "[", "\"nll\"", "]", ",", "best_nll", ")", "\n", "\n", "improvement", "=", "False", "\n", "if", "row", "[", "\"avg_total_dice\"", "]", ">", "best_dice_total", ":", "\n", "                ", "improvement", "=", "True", "\n", "best_dice_total", "=", "row", "[", "\"avg_total_dice\"", "]", "\n", "stop", "=", "0", "\n", "print", "(", "f\"---> New best total dice {best_dice_total}\"", ")", "\n", "", "else", ":", "\n", "                ", "stop", "+=", "1", "\n", "\n", "", "state", "=", "{", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", "\n", "}", "\n", "try", ":", "\n", "                ", "state", "|=", "row", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"Warning: Python < 3.9, no support for joining dicts by '|'\"", ")", "\n", "\n", "", "if", "save_only_best", "and", "improvement", ":", "\n", "                ", "p", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'best.pt'", ")", "\n", "torch", ".", "save", "(", "state", ",", "p", ")", "\n", "print", "(", "f\"Saved model to {p}\"", ")", "\n", "", "elif", "not", "save_only_best", ":", "\n", "                ", "p", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f'epoch-{epoch}.pt'", ")", "\n", "torch", ".", "save", "(", "state", ",", "p", ")", "\n", "print", "(", "f\"Saved model to {p}\"", ")", "\n", "\n", "", "if", "stop", ">", "STOP", ":", "\n", "                ", "print", "(", "\"\\n------\\n\"", ")", "\n", "print", "(", "f\"Fold best avg total dice: {best_dice_total}\"", ")", "\n", "print", "(", "f\"Fold best dice: {best_dice}\"", ")", "\n", "print", "(", "f\"Fold best nll: {best_nll}\\n\"", ")", "\n", "p", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f\"fold-{fold}-log.csv\"", ")", "\n", "pd", ".", "DataFrame", "(", "progress", ")", ".", "to_csv", "(", "p", ",", "index", "=", "False", ")", "\n", "print", "(", "f\"Saved training log to {p}\"", ")", "\n", "dice_total_all_folds", ".", "append", "(", "best_dice_total", ")", "\n", "nll_all_folds", ".", "append", "(", "best_nll", ")", "\n", "dice_all_folds", ".", "append", "(", "best_dice", ")", "\n", "break", "\n", "\n", "", "epoch", "+=", "1", "\n", "\n", "scheduler", ".", "step", "(", "1", "-", "row", "[", "'avg_total_dice'", "]", ")", "\n", "\n", "", "", "print", "(", "f\"\\nAvg dice (all folds): {dice_all_folds}\"", ")", "\n", "print", "(", "f\"Avg total dice (all folds): {dice_total_all_folds}\"", ")", "\n", "print", "(", "f\"Avg nll: {nll_all_folds}\\n\"", ")", "\n", "\n", "print", "(", "f\"Avg dice (all folds): {np.mean(dice_all_folds)} (+- {np.std(dice_all_folds)})\"", ")", "\n", "print", "(", "f\"Avg total dice (all folds): {np.mean(dice_total_all_folds)} (+- {np.std(dice_total_all_folds)})\"", ")", "\n", "print", "(", "f\"Avg nll: {np.mean(nll_all_folds)} (+- {np.std(nll_all_folds)})\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.None.train.create_loaders": [[321, 362], ["numpy.array", "enumerate", "sorted", "sklearn.model_selection.KFold().split", "albumentations.Compose", "train.Dataset", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train.Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "loaders.append", "glob.glob", "range", "os.path.join", "sklearn.model_selection.KFold", "len", "torch.cuda.is_available", "torch.cuda.is_available", "albumentations.Compose", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["None"], ["", "def", "create_loaders", "(", "preprocessing", ",", "data_path", ",", "image_size", ",", "classes", ",", "batch_size", ")", ":", "\n", "# sort to make sure that files are always in the same order", "\n", "    ", "folders", "=", "np", ".", "array", "(", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"*\"", ")", ")", ")", ")", "\n", "loaders", "=", "[", "]", "\n", "for", "fold", ",", "(", "train_index", ",", "test_index", ")", "in", "enumerate", "(", "KFold", "(", "n_splits", "=", "5", ")", ".", "split", "(", "range", "(", "len", "(", "folders", ")", ")", ")", ")", ":", "\n", "        ", "train_X", ",", "val_X", "=", "folders", "[", "train_index", "]", ",", "folders", "[", "test_index", "]", "\n", "#print(f\"Fold {fold}\")", "\n", "#print(f\"Patients (train): {train_X}\")", "\n", "#print(f\"Patients (val): {val_X}\")", "\n", "# optionally enable augmentations", "\n", "augmentation", "=", "A", ".", "Compose", "(", "[", "]", ")", "#A.HorizontalFlip(p=0.5),", "\n", "#A.VerticalFlip(p=0.5),", "\n", "#A.ShiftScaleRotate(shift_limit=0.1, scale_limit=0.1, rotate_limit=30, p=0.5),", "\n", "#A.RandomCrop(image_size, image_size, p=0.5),", "\n", "#A.Cutout(num_holes=2, max_h_size=32, max_w_size=32, fill_value=0, p=0.5)])", "\n", "train_dataset", "=", "Dataset", "(", "train_X", ",", "preprocessing", "=", "preprocessing", ",", "augmentation", "=", "augmentation", ",", "\n", "classes", "=", "classes", ")", "\n", "\n", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "fold", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "pin_memory", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\n", "shuffle", "=", "True", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "1", ",", "\n", "worker_init_fn", "=", "seed_worker", ",", "\n", "generator", "=", "g", ")", "\n", "\n", "val_dataset", "=", "Dataset", "(", "val_X", ",", "preprocessing", "=", "preprocessing", ",", "augmentation", "=", "A", ".", "Compose", "(", "[", "]", ")", ",", "\n", "classes", "=", "classes", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "\n", "pin_memory", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "1", ",", "\n", "worker_init_fn", "=", "seed_worker", ",", "\n", "generator", "=", "g", ")", "\n", "loaders", ".", "append", "(", "(", "train_loader", ",", "val_loader", ")", ")", "\n", "\n", "", "return", "loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.ISLES.preprocess1.window_image": [[17, 22], ["numpy.clip"], "function", ["None"], ["def", "window_image", "(", "img", ",", "window_width", ",", "window_center", ")", ":", "\n", "    ", "lower", "=", "window_center", "-", "window_width", "//", "2", "\n", "upper", "=", "window_center", "+", "window_width", "//", "2", "\n", "\n", "return", "np", ".", "clip", "(", "img", ",", "lower", ",", "upper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess1.ROI.__init__": [[14, 22], ["None"], "methods", ["None"], ["# Brain window (W:80, L:40)", "\n", "# Subdural window (W:200, L:80)", "\n", "# Bone window (W:2800, L:600)", "\n", "def", "window_image", "(", "img", ",", "window_width", ",", "window_center", ")", ":", "\n", "    ", "lower", "=", "window_center", "-", "window_width", "//", "2", "\n", "upper", "=", "window_center", "+", "window_width", "//", "2", "\n", "\n", "return", "np", ".", "clip", "(", "img", ",", "lower", ",", "upper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess1.ROI.load_nii": [[23, 26], ["nibabel.load", "nibabel.load.get_data"], "methods", ["None"], ["", "out", "=", "defaultdict", "(", "list", ")", "\n", "for", "f", "in", "glob", ".", "glob", "(", "\"TRAINING/**/**/*.nii\"", ")", ":", "\n", "    ", "if", "\"CT_4DPWI\"", "in", "f", ":", "\n", "        ", "continue", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess1.ROI.extract_roi_fft": [[27, 105], ["int", "int", "numpy.tile", "numpy.zeros", "range", "numpy.unravel_index", "range", "numpy.tile", "range", "scipy.fftpack.fftn", "numpy.absolute", "skimage.feature.canny", "numpy.arange", "skimage.transform.hough_circle", "skimage.transform.hough_circle.any", "numpy.zeros.max", "numpy.zeros.argmax", "len", "numpy.abs", "numpy.abs", "range", "scipy.fftpack.ifftn", "numpy.max", "zip", "numpy.max", "numpy.max", "skimage.feature.peak_local_max", "centers.extend", "accums.extend", "radii.extend", "allcenters.append", "allradii.append", "allaccums.append", "range", "numpy.argsort", "numpy.max", "numpy.exp"], "methods", ["None"], ["", "start", "=", "f", ".", "find", "(", "\"case_\"", ")", "\n", "patient", "=", "f", "[", "start", ":", "f", ".", "find", "(", "\"/\"", ",", "start", ")", "]", "\n", "out", "[", "patient", "]", ".", "append", "(", "f", ")", "\n", "", "out", "=", "[", "tuple", "(", "sorted", "(", "v", ")", ")", "for", "v", "in", "out", ".", "values", "(", ")", "]", "\n", "\n", "\n", "# compute stats of dataset", "\n", "nans", "=", "0", "\n", "gt_errors", "=", "0", "\n", "stats", "=", "[", "[", "1e10", ",", "-", "1e10", "]", "for", "k", "in", "range", "(", "len", "(", "out", "[", "0", "]", ")", "+", "3", ")", "]", "\n", "image_size", "=", "[", "1e10", ",", "1e10", "]", "\n", "slices", "=", "[", "]", "\n", "for", "images", "in", "tqdm", "(", "out", ")", ":", "\n", "# 4x CT scan", "\n", "    ", "images", "=", "[", "images", "[", "0", "]", ",", "images", "[", "0", "]", ",", "images", "[", "0", "]", "]", "+", "list", "(", "images", ")", "\n", "for", "feat_map", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "img", "=", "nib", ".", "load", "(", "image", ")", ".", "get_fdata", "(", ")", "\n", "slices", ".", "append", "(", "img", ".", "shape", "[", "-", "1", "]", ")", "\n", "image_size", "[", "0", "]", "=", "min", "(", "img", ".", "shape", "[", "0", "]", ",", "image_size", "[", "0", "]", ")", "\n", "image_size", "[", "1", "]", "=", "min", "(", "img", ".", "shape", "[", "1", "]", ",", "image_size", "[", "1", "]", ")", "\n", "nans", "+=", "np", ".", "isnan", "(", "img", ")", ".", "sum", "(", ")", "\n", "img", "=", "np", ".", "nan_to_num", "(", "img", ")", "\n", "# Stroke", "\n", "if", "feat_map", "==", "0", ":", "\n", "            ", "img", "=", "window_image", "(", "img", ",", "40", ",", "40", ")", "\n", "# Brain", "\n", "", "elif", "feat_map", "==", "1", ":", "\n", "            ", "img", "=", "window_image", "(", "img", ",", "80", ",", "40", ")", "\n", "# Subdural", "\n", "", "elif", "feat_map", "==", "2", ":", "\n", "            ", "img", "=", "window_image", "(", "img", ",", "200", ",", "80", ")", "\n", "# Bone", "\n", "", "elif", "feat_map", "==", "3", ":", "\n", "            ", "img", "=", "window_image", "(", "img", ",", "2800", ",", "600", ")", "\n", "", "stats", "[", "feat_map", "]", "[", "0", "]", "=", "min", "(", "img", ".", "min", "(", ")", ",", "stats", "[", "feat_map", "]", "[", "0", "]", ")", "\n", "stats", "[", "feat_map", "]", "[", "1", "]", "=", "max", "(", "img", ".", "max", "(", ")", ",", "stats", "[", "feat_map", "]", "[", "1", "]", ")", "\n", "\n", "", "", "print", "(", "\"Stats:\"", ",", "stats", ")", "\n", "print", "(", "\"Nans:\"", ",", "nans", ")", "\n", "print", "(", "\"Image size:\"", ",", "image_size", ")", "\n", "print", "(", "\"Slices:\"", ",", "np", ".", "mean", "(", "slices", ")", ",", "\"with std\"", ",", "np", ".", "std", "(", "slices", ")", ",", "\"and min\"", ",", "np", ".", "min", "(", "slices", ")", ",", "\"and max\"", ",", "np", ".", "max", "(", "slices", ")", ")", "\n", "\n", "for", "patient", ",", "images", "in", "enumerate", "(", "tqdm", "(", "out", ")", ")", ":", "\n", "    ", "images", "=", "[", "images", "[", "0", "]", ",", "images", "[", "0", "]", ",", "images", "[", "0", "]", "]", "+", "list", "(", "images", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_PATH", ",", "\"processed_training\"", ",", "f\"{patient}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "", "gt", "=", "nib", ".", "load", "(", "images", "[", "-", "1", "]", ")", ".", "get_fdata", "(", ")", "\n", "# only images where ground truth has some marked pixels + 2 empty maps", "\n", "mask", "=", "np", ".", "sum", "(", "gt", ",", "axis", "=", "(", "0", ",", "1", ")", ")", ">", "0", "\n", "flat", "=", "np", ".", "flatnonzero", "(", "mask", ")", "\n", "if", "flat", ".", "size", "==", "0", ":", "\n", "        ", "continue", "\n", "", "mask", "[", "max", "(", "flat", "[", "0", "]", "-", "1", ",", "0", ")", "]", "=", "True", "\n", "mask", "[", "min", "(", "flat", "[", "-", "1", "]", "+", "1", ",", "len", "(", "mask", ")", "-", "1", ")", "]", "=", "True", "\n", "\n", "for", "feat_map", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "img", "=", "nib", ".", "load", "(", "image", ")", ".", "get_fdata", "(", ")", "\n", "img", "=", "np", ".", "nan_to_num", "(", "img", ")", "\n", "img", "=", "img", "[", "...", ",", "mask", "]", "\n", "if", "feat_map", "==", "0", ":", "\n", "            ", "img", "=", "window_image", "(", "img", ",", "40", ",", "40", ")", "\n", "", "elif", "feat_map", "==", "1", ":", "\n", "            ", "img", "=", "window_image", "(", "img", ",", "80", ",", "40", ")", "\n", "", "elif", "feat_map", "==", "2", ":", "\n", "            ", "img", "=", "window_image", "(", "img", ",", "200", ",", "80", ")", "\n", "", "elif", "feat_map", "==", "3", ":", "\n", "            ", "img", "=", "window_image", "(", "img", ",", "2800", ",", "600", ")", "\n", "", "img", "=", "255", "*", "(", "img", "-", "stats", "[", "feat_map", "]", "[", "0", "]", ")", "/", "(", "stats", "[", "feat_map", "]", "[", "1", "]", "-", "stats", "[", "feat_map", "]", "[", "0", "]", ")", "\n", "\n", "for", "z", "in", "range", "(", "img", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "train_img", "=", "Image", ".", "fromarray", "(", "img", "[", "...", ",", "z", "]", ".", "astype", "(", "np", ".", "int8", ")", ",", "mode", "=", "\"L\"", ")", "\n", "train_img", "=", "np", ".", "array", "(", "train_img", ".", "resize", "(", "(", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", ",", "resample", "=", "Image", ".", "NEAREST", ")", ")", "\n", "# ground truth, make sure there are only zeros or ones", "\n", "if", "feat_map", "==", "len", "(", "images", ")", "-", "1", ":", "\n", "                ", "train_img", "[", "train_img", ">", "0.2", "]", "=", "1", "\n", "train_img", "[", "train_img", "!=", "1", "]", "=", "0", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess1.ROI.extract_roi_stddev": [[107, 183], ["int", "int", "numpy.tile", "numpy.zeros", "range", "numpy.unravel_index", "range", "numpy.tile", "range", "numpy.array", "numpy.std", "skimage.feature.canny", "numpy.arange", "skimage.transform.hough_circle", "skimage.transform.hough_circle.any", "numpy.zeros.max", "numpy.zeros.argmax", "len", "numpy.abs", "numpy.abs", "range", "numpy.max", "zip", "numpy.max", "numpy.max", "skimage.feature.peak_local_max", "centers.extend", "accums.extend", "radii.extend", "allcenters.append", "allradii.append", "allaccums.append", "range", "numpy.argsort", "numpy.max", "numpy.exp"], "methods", ["None"], ["", "file_t", "=", "os", ".", "path", ".", "join", "(", "path", ",", "f\"map_{feat_map}_z_{z}.npy\"", ")", "\n", "np", ".", "save", "(", "file_t", ",", "train_img", ")", "\n", "\n", "q", "=", "Image", ".", "fromarray", "(", "train_img", ".", "astype", "(", "np", ".", "int8", ")", ",", "mode", "=", "\"L\"", ")", "\n", "q", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f\"map_{feat_map}_z_{z}.png\"", ")", ")", "\n", "\n", "# channels = [(channel, z-axis)]", "\n", "# z-axis: z = 0 (z-1), z = 1 (z), z = 2 (z + 1)", "\n", "# channels: 0 - 8", "\n", "# 0. CT Stroke window (W:40, L:40) or (W: 8, L:32)", "\n", "# 1. CT Brain window (W:80, L:40)", "\n", "# 2. CT Subdural window (W:200, L:80)", "\n", "# 3. CT Bone window (W:2800, L:600)", "\n", "# 4. CBF", "\n", "# 5. CBV", "\n", "# 6. MTT", "\n", "# 7. Tmax", "\n", "# 8. ground truth", "\n", "", "", "", "channels", "=", "[", "(", "0", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "2", ",", "1", ")", ",", "(", "4", ",", "1", ")", ",", "(", "5", ",", "1", ")", ",", "(", "6", ",", "1", ")", ",", "(", "7", ",", "1", ")", ",", "(", "8", ",", "1", ")", "]", "\n", "for", "patient", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "\"processed_training\"", ",", "\"**\"", ")", ")", ":", "\n", "    ", "z_axis", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "patient", ",", "\"map_0_z_*.npy\"", ")", ")", "\n", "z_axis", "=", "sorted", "(", "[", "z", ".", "replace", "(", "\"map_0_z_\"", ",", "\"\"", ")", ".", "replace", "(", "\".npy\"", ",", "\"\"", ")", "[", "z", ".", "rfind", "(", "\"/\"", ")", "+", "1", ":", "]", "for", "z", "in", "z_axis", "]", ")", "\n", "for", "z", "in", "z_axis", ":", "\n", "        ", "files", "=", "[", "os", ".", "path", ".", "join", "(", "patient", ",", "f\"map_{ch}_z_{z}.npy\"", ")", "for", "ch", ",", "_", "in", "channels", "]", "\n", "\n", "processed", "=", "np", ".", "zeros", "(", "(", "256", ",", "256", ",", "8", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "j", ",", "ch", "in", "enumerate", "(", "files", ")", ":", "\n", "            ", "processed", "[", "...", ",", "j", "]", "=", "np", ".", "load", "(", "ch", ")", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "patient", ",", "f\"processed_{z}.npy\"", ")", ",", "processed", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess1.ROI.save_csv": [[184, 201], ["range", "os.path.join", "preprocess1.ROI.load_nii", "preprocess1.ROI.extract_roi_fft", "print", "rows.append", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "hdr.get_zooms"], "methods", ["home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess1.ROI.load_nii", "home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess1.ROI.extract_roi_fft"], []], "home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess2.DataPreprocess.__init__": [[14, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "roi_x", ",", "roi_y", ",", "result_z", ")", ":", "\n", "        ", "self", ".", "roi_x", "=", "roi_x", "\n", "self", ".", "roi_y", "=", "roi_y", "\n", "self", ".", "result_z", "=", "result_z", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess2.DataPreprocess.get_center_point": [[19, 30], ["open", "csv.reader", "f.close", "re.findall"], "methods", ["None"], ["", "def", "get_center_point", "(", "self", ",", "csv_path", "=", "'./train_center_radii.csv'", ")", ":", "\n", "        ", "result", "=", "{", "}", "\n", "with", "open", "(", "csv_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "f_csv", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "item", "in", "f_csv", ":", "\n", "                ", "if", "f_csv", ".", "line_num", "==", "1", ":", "\n", "                    ", "continue", "\n", "", "key", "=", "re", ".", "findall", "(", "'\\d+'", ",", "item", "[", "0", "]", ")", "\n", "result", "[", "key", "[", "0", "]", "]", "=", "item", "[", "1", "]", "+", "item", "[", "2", "]", "\n", "", "f", ".", "close", "(", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess2.DataPreprocess.get_roi_image": [[32, 82], ["sorted", "preprocess2.DataPreprocess.get_center_point", "numpy.zeros", "enumerate", "os.path.join", "re.findall", "next", "os.walk", "len", "os.listdir", "f.startswith", "re.findall", "nibabel.load", "nibabel.load.get_fdata", "range", "re.findall", "os.path.join", "int", "int", "int", "int", "numpy.uint8", "cv2.equalizeHist", "int", "int", "int", "int", "int", "int", "int", "int", "cv2.resize", "cv2.normalize", "cv2.copyMakeBorder"], "methods", ["home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess2.DataPreprocess.get_center_point"], ["", "def", "get_roi_image", "(", "self", ",", "from_path", "=", "'../data/training'", ",", "center_point_csv_path", "=", "'./train_center_radii.csv'", ")", ":", "\n", "        ", "cases", "=", "sorted", "(", "next", "(", "os", ".", "walk", "(", "from_path", ")", ")", "[", "1", "]", ")", "\n", "center_points", "=", "self", ".", "get_center_point", "(", "csv_path", "=", "center_point_csv_path", ")", "\n", "result", "=", "np", ".", "zeros", "(", "[", "len", "(", "cases", ")", "*", "2", ",", "self", ".", "result_z", ",", "self", ".", "roi_x", ",", "self", ".", "roi_y", "]", ")", "\n", "for", "i", ",", "case", "in", "enumerate", "(", "cases", ")", ":", "\n", "            ", "current_path", "=", "os", ".", "path", ".", "join", "(", "from_path", ",", "case", ")", "\n", "center_str_val", "=", "center_points", "[", "re", ".", "findall", "(", "'\\d+'", ",", "case", ")", "[", "0", "]", "]", "\n", "center_and_radii", "=", "re", ".", "findall", "(", "'\\d+'", ",", "center_str_val", ")", "\n", "\n", "for", "f_name", "in", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "current_path", ")", "if", "f", ".", "startswith", "(", "'patient'", ")", "]", ":", "\n", "                ", "if", "'4d'", "not", "in", "f_name", "and", "'gt'", "not", "in", "f_name", ":", "\n", "                    ", "num", "=", "re", ".", "findall", "(", "'\\d+'", ",", "f_name", ")", "\n", "nimg", "=", "nib", ".", "load", "(", "os", ".", "path", ".", "join", "(", "current_path", ",", "f_name", ")", ")", "\n", "img", "=", "nimg", ".", "get_fdata", "(", ")", "\n", "for", "z", "in", "range", "(", "img", ".", "shape", "[", "2", "]", ")", ":", "\n", "\n", "                        ", "center_point_x", ",", "center_point_y", "=", "int", "(", "center_and_radii", "[", "0", "]", ")", ",", "int", "(", "center_and_radii", "[", "1", "]", ")", "\n", "radii_x", ",", "radii_y", "=", "int", "(", "center_and_radii", "[", "2", "]", ")", ",", "int", "(", "center_and_radii", "[", "3", "]", ")", "\n", "\n", "x_left", "=", "int", "(", "center_point_x", "-", "self", ".", "roi_x", "/", "2", ")", "\n", "x_right", "=", "int", "(", "center_point_x", "+", "self", ".", "roi_x", "/", "2", ")", "\n", "y_left", "=", "int", "(", "center_point_y", "-", "self", ".", "roi_y", "/", "2", ")", "\n", "y_right", "=", "int", "(", "center_point_y", "+", "self", ".", "roi_y", "/", "2", ")", "\n", "if", "x_left", "<", "0", ":", "x_left", "=", "0", "\n", "if", "x_right", ">", "img", ".", "shape", "[", "0", "]", ":", "x_right", "=", "img", ".", "shape", "[", "0", "]", "\n", "if", "y_left", "<", "0", ":", "y_left", "=", "0", "\n", "if", "y_right", ">", "img", ".", "shape", "[", "1", "]", ":", "y_right", "=", "img", ".", "shape", "[", "1", "]", "\n", "roi_image", "=", "img", "[", "x_left", ":", "x_right", ",", "y_left", ":", "y_right", ",", "z", "]", "\n", "\n", "if", "radii_x", ">", "40", "or", "radii_y", ">", "40", ":", "\n", "                            ", "x_left", "=", "int", "(", "center_point_x", "-", "self", ".", "roi_x", ")", "\n", "x_right", "=", "int", "(", "center_point_x", "+", "self", ".", "roi_x", ")", "\n", "y_left", "=", "int", "(", "center_point_y", "-", "self", ".", "roi_y", ")", "\n", "y_right", "=", "int", "(", "center_point_y", "+", "self", ".", "roi_y", ")", "\n", "if", "x_left", "<", "0", ":", "x_left", "=", "0", "\n", "if", "x_right", ">", "img", ".", "shape", "[", "0", "]", ":", "x_right", "=", "img", ".", "shape", "[", "0", "]", "\n", "if", "y_left", "<", "0", ":", "y_left", "=", "0", "\n", "if", "y_right", ">", "img", ".", "shape", "[", "1", "]", ":", "y_right", "=", "img", ".", "shape", "[", "1", "]", "\n", "roi_image", "=", "img", "[", "x_left", ":", "x_right", ",", "y_left", ":", "y_right", ",", "z", "]", "\n", "roi_image", "=", "cv2", ".", "resize", "(", "roi_image", ",", "(", "self", ".", "roi_x", ",", "self", ".", "roi_y", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "", "norm", "=", "np", ".", "uint8", "(", "cv2", ".", "normalize", "(", "roi_image", ",", "None", ",", "0", ",", "255", ",", "cv2", ".", "NORM_MINMAX", ")", ")", "\n", "norm", "=", "cv2", ".", "equalizeHist", "(", "norm", ")", "\n", "if", "norm", ".", "shape", "[", "0", "]", "<", "self", ".", "roi_x", "or", "norm", ".", "shape", "[", "1", "]", "<", "self", ".", "roi_y", ":", "\n", "                            ", "norm", "=", "cv2", ".", "copyMakeBorder", "(", "norm", ",", "self", ".", "roi_x", "-", "norm", ".", "shape", "[", "0", "]", ",", "0", ",", "self", ".", "roi_y", "-", "norm", ".", "shape", "[", "1", "]", ",", "0", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "", "if", "num", "[", "1", "]", "==", "'01'", ":", "\n", "                            ", "result", "[", "i", "*", "2", ",", "z", ",", ":", ":", ",", ":", ":", "]", "=", "norm", "\n", "", "else", ":", "\n", "                            ", "result", "[", "i", "*", "2", "+", "1", ",", "z", ",", ":", ":", ",", ":", ":", "]", "=", "norm", "\n", "", "", "", "", "", "return", "result", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess2.DataPreprocess.get_roi_label": [[83, 131], ["sorted", "preprocess2.DataPreprocess.get_center_point", "numpy.zeros", "enumerate", "os.path.join", "re.findall", "next", "os.walk", "len", "os.listdir", "f.startswith", "re.findall", "nibabel.load", "nibabel.load.get_fdata", "range", "re.findall", "os.path.join", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "cv2.resize", "cv2.copyMakeBorder"], "methods", ["home.repos.pwc.inspect_result.lars76_segmentation_activations.ACDC.preprocess2.DataPreprocess.get_center_point"], ["", "def", "get_roi_label", "(", "self", ",", "from_path", "=", "'../data/training'", ",", "center_point_csv_path", "=", "'./train_center_radii.csv'", ")", ":", "\n", "        ", "cases", "=", "sorted", "(", "next", "(", "os", ".", "walk", "(", "from_path", ")", ")", "[", "1", "]", ")", "\n", "center_points", "=", "self", ".", "get_center_point", "(", "csv_path", "=", "center_point_csv_path", ")", "\n", "result", "=", "np", ".", "zeros", "(", "[", "len", "(", "cases", ")", "*", "2", ",", "self", ".", "result_z", ",", "self", ".", "roi_x", ",", "self", ".", "roi_y", "]", ")", "\n", "for", "i", ",", "case", "in", "enumerate", "(", "cases", ")", ":", "\n", "            ", "current_path", "=", "os", ".", "path", ".", "join", "(", "from_path", ",", "case", ")", "\n", "center_str_val", "=", "center_points", "[", "re", ".", "findall", "(", "'\\d+'", ",", "case", ")", "[", "0", "]", "]", "\n", "center_and_radii", "=", "re", ".", "findall", "(", "'\\d+'", ",", "center_str_val", ")", "\n", "\n", "for", "f_name", "in", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "current_path", ")", "if", "f", ".", "startswith", "(", "'patient'", ")", "]", ":", "\n", "                ", "if", "'gt'", "in", "f_name", ":", "\n", "                    ", "num", "=", "re", ".", "findall", "(", "'\\d+'", ",", "f_name", ")", "\n", "nimg", "=", "nib", ".", "load", "(", "os", ".", "path", ".", "join", "(", "current_path", ",", "f_name", ")", ")", "\n", "img", "=", "nimg", ".", "get_fdata", "(", ")", "\n", "for", "z", "in", "range", "(", "img", ".", "shape", "[", "2", "]", ")", ":", "\n", "\n", "                        ", "center_point_x", ",", "center_point_y", "=", "int", "(", "center_and_radii", "[", "0", "]", ")", ",", "int", "(", "center_and_radii", "[", "1", "]", ")", "\n", "radii_x", ",", "radii_y", "=", "int", "(", "center_and_radii", "[", "2", "]", ")", ",", "int", "(", "center_and_radii", "[", "3", "]", ")", "\n", "\n", "x_left", "=", "int", "(", "center_point_x", "-", "self", ".", "roi_x", "/", "2", ")", "\n", "x_right", "=", "int", "(", "center_point_x", "+", "self", ".", "roi_x", "/", "2", ")", "\n", "y_left", "=", "int", "(", "center_point_y", "-", "self", ".", "roi_y", "/", "2", ")", "\n", "y_right", "=", "int", "(", "center_point_y", "+", "self", ".", "roi_y", "/", "2", ")", "\n", "if", "x_left", "<", "0", ":", "x_left", "=", "0", "\n", "if", "x_right", ">", "img", ".", "shape", "[", "0", "]", ":", "x_right", "=", "img", ".", "shape", "[", "0", "]", "\n", "if", "y_left", "<", "0", ":", "y_left", "=", "0", "\n", "if", "y_right", ">", "img", ".", "shape", "[", "1", "]", ":", "y_right", "=", "img", ".", "shape", "[", "1", "]", "\n", "roi_label", "=", "img", "[", "x_left", ":", "x_right", ",", "y_left", ":", "y_right", ",", "z", "]", "\n", "\n", "if", "radii_x", ">", "40", "or", "radii_y", ">", "40", ":", "\n", "                            ", "x_left", "=", "int", "(", "center_point_x", "-", "self", ".", "roi_x", ")", "\n", "x_right", "=", "int", "(", "center_point_x", "+", "self", ".", "roi_x", ")", "\n", "y_left", "=", "int", "(", "center_point_y", "-", "self", ".", "roi_y", ")", "\n", "y_right", "=", "int", "(", "center_point_y", "+", "self", ".", "roi_y", ")", "\n", "if", "x_left", "<", "0", ":", "x_left", "=", "0", "\n", "if", "x_right", ">", "img", ".", "shape", "[", "0", "]", ":", "x_right", "=", "img", ".", "shape", "[", "0", "]", "\n", "if", "y_left", "<", "0", ":", "y_left", "=", "0", "\n", "if", "y_right", ">", "img", ".", "shape", "[", "1", "]", ":", "y_right", "=", "img", ".", "shape", "[", "1", "]", "\n", "roi_label", "=", "img", "[", "x_left", ":", "x_right", ",", "y_left", ":", "y_right", ",", "z", "]", "\n", "roi_label", "=", "cv2", ".", "resize", "(", "roi_label", ",", "(", "self", ".", "roi_x", ",", "self", ".", "roi_y", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "", "if", "roi_label", ".", "shape", "[", "0", "]", "<", "self", ".", "roi_x", "or", "roi_label", ".", "shape", "[", "1", "]", "<", "self", ".", "roi_y", ":", "\n", "                            ", "roi_label", "=", "cv2", ".", "copyMakeBorder", "(", "roi_label", ",", "self", ".", "roi_x", "-", "roi_label", ".", "shape", "[", "0", "]", ",", "0", ",", "self", ".", "roi_y", "-", "roi_label", ".", "shape", "[", "1", "]", ",", "0", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "", "if", "num", "[", "1", "]", "==", "'01'", ":", "\n", "                            ", "result", "[", "i", "*", "2", ",", "z", ",", ":", ":", ",", ":", ":", "]", "=", "roi_label", "\n", "", "else", ":", "\n", "                            ", "result", "[", "i", "*", "2", "+", "1", ",", "z", ",", ":", ":", ",", ":", ":", "]", "=", "roi_label", "\n", "", "", "", "", "", "return", "result", "\n", "\n"]]}