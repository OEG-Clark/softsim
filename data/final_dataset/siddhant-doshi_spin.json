{"home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.SPIN.__init__": [[15, 39], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.SPIN.conv_layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "models.SPIN.att_layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset_split_class.__init__"], ["  ", "def", "__init__", "(", "self", ",", "d", ",", "d_", ",", "num_classes", ",", "r", ",", "dim1", ",", "dropout_p", "=", "0.5", ",", "agg", "=", "'concat'", ",", "attention", "=", "True", ")", ":", "\n", "    ", "super", "(", "SPIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "d_", "=", "d_", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "agg", "=", "agg", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "att_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "branches", "=", "r", "+", "1", "\n", "self", ".", "attention", "=", "attention", "\n", "for", "i", "in", "range", "(", "self", ".", "branches", ")", ":", "\n", "#l = nn.Sequential(nn.Linear(self.d,dim1),nn.Dropout(p=dropout_p),nn.LeakyReLU(),nn.Linear(dim1,dim1),nn.Dropout(p=dropout_p),nn.LeakyReLU(),nn.Linear(dim1,dim1),nn.Dropout(p=dropout_p),nn.LeakyReLU(),nn.Linear(dim1,self.d_),nn.LeakyReLU())", "\n", "      ", "l", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "d", ",", "dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "dim1", ",", "dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "dim1", ",", "self", ".", "d_", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "self", ".", "conv_layers", ".", "append", "(", "l", ")", "\n", "", "if", "(", "attention", ")", ":", "\n", "      ", "for", "i", "in", "range", "(", "self", ".", "branches", ")", ":", "\n", "        ", "a", "=", "nn", ".", "Linear", "(", "self", ".", "d_", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "att_layers", ".", "append", "(", "a", ")", "\n", "\n", "", "", "cl_dim1", "=", "32", "\n", "if", "(", "agg", "==", "'concat'", ")", ":", "\n", "      ", "self", ".", "classify", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "branches", "*", "d_", ",", "cl_dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "cl_dim1", ",", "cl_dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "cl_dim1", ",", "self", ".", "num_classes", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "classify", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "d_", ",", "cl_dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "cl_dim1", ",", "cl_dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "cl_dim1", ",", "self", ".", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.SPIN.attend_nodes": [[40, 45], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "alpha_mat[].reshape"], "methods", ["None"], ["", "", "def", "attend_nodes", "(", "self", ",", "alpha_mat", ",", "Y", ")", ":", "\n", "    ", "S", "=", "torch", ".", "empty", "(", "(", "self", ".", "d_", ",", "self", ".", "branches", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "branches", ")", ":", "\n", "      ", "S", "[", ":", ",", "i", "]", "=", "(", "alpha_mat", "[", ":", ",", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "*", "Y", "[", "i", "]", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "return", "S", "\n", "#return alpha.reshape(-1,1)*Y", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.SPIN.get_attention_scores": [[47, 53], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "torch.softmax().squeeze", "torch.softmax().squeeze", "torch.softmax().squeeze", "len", "torch.softmax", "torch.softmax", "torch.softmax", "Relu"], "methods", ["None"], ["", "def", "get_attention_scores", "(", "self", ",", "Y", ")", ":", "\n", "    ", "w", "=", "torch", ".", "empty", "(", "(", "len", "(", "Y", "[", "0", "]", ")", ",", "self", ".", "branches", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "branches", ")", ":", "\n", "      ", "w", "[", ":", ",", "i", "]", "=", "F", ".", "softmax", "(", "Relu", "(", "self", ".", "att_layers", "[", "i", "]", "(", "Y", "[", "i", "]", ")", ")", ",", "dim", "=", "0", ")", ".", "squeeze", "(", ")", "\n", "", "self", ".", "weights", "=", "w", "\n", "return", "self", ".", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.SPIN.get_S": [[54, 59], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "Y[].sum().squeeze", "Y[].sum"], "methods", ["None"], ["", "def", "get_S", "(", "self", ",", "Y", ")", ":", "\n", "    ", "S", "=", "torch", ".", "empty", "(", "(", "self", ".", "d_", ",", "self", ".", "branches", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "branches", ")", ":", "\n", "      ", "S", "[", ":", ",", "i", "]", "=", "Y", "[", "i", "]", ".", "sum", "(", "dim", "=", "0", ")", ".", "squeeze", "(", ")", "\n", "", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.SPIN.forward": [[60, 80], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "len", "range", "models.SPIN.classify", "len", "Y.append", "models.SPIN.get_attention_scores", "models.SPIN.attend_nodes", "models.SPIN.get_S", "models.SPIN.reshape", "models.SPIN.sum().reshape", "models.SPIN.sum"], "methods", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.SPIN.get_attention_scores", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.SPIN.attend_nodes", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.SPIN.get_S"], ["", "def", "forward", "(", "self", ",", "l", ")", ":", "#l = [X_list,AX_list,A2X_list,...,label_batches,graph_batches]", "\n", "    ", "l", "=", "l", "[", ":", "-", "3", "]", "#dont need the labels and the actual graphs and last added summation nodes", "\n", "C", "=", "torch", ".", "empty", "(", "(", "len", "(", "l", "[", "0", "]", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "l", "[", "0", "]", ")", ")", ":", "\n", "      ", "Y", "=", "[", "]", "#Y = [Y0,Y1,...]", "\n", "for", "j", "in", "range", "(", "self", ".", "branches", ")", ":", "\n", "        ", "Y", ".", "append", "(", "self", ".", "conv_layers", "[", "j", "]", "(", "l", "[", "j", "]", "[", "i", "]", ")", ")", "\n", "\n", "", "if", "(", "self", ".", "attention", ")", ":", "\n", "        ", "alpha_mat", "=", "self", ".", "get_attention_scores", "(", "Y", ")", "\n", "S", "=", "self", ".", "attend_nodes", "(", "alpha_mat", ",", "Y", ")", "\n", "", "else", ":", "\n", "        ", "S", "=", "self", ".", "get_S", "(", "Y", ")", "\n", "\n", "", "if", "(", "self", ".", "agg", "==", "'concat'", ")", ":", "em", "=", "S", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "else", ":", "em", "=", "S", ".", "sum", "(", "dim", "=", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "cl", "=", "self", ".", "classify", "(", "em", ")", "\n", "C", "[", "i", "]", "=", "cl", "\n", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.GraphSage.__init__": [[82, 93], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dgl.nn.pytorch.SAGEConv", "dgl.nn.pytorch.SAGEConv", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset_split_class.__init__"], ["  ", "def", "__init__", "(", "self", ",", "d", ",", "dim1", ",", "r", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "GraphSage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "dim1", "=", "dim1", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "layers", "=", "[", "SAGEConv", "(", "d", ",", "self", ".", "dim1", ",", "'mean'", ")", "]", "\n", "self", ".", "layers", "+=", "[", "SAGEConv", "(", "self", ".", "dim1", ",", "self", ".", "dim1", ",", "'mean'", ")", "for", "_", "in", "range", "(", "r", "-", "1", ")", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "layers", ")", "\n", "\n", "self", ".", "classify", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "self", ".", "dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.GraphSage.forward": [[94, 108], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "len", "range", "L_Relu.sum().reshape", "models.GraphSage.classify", "len", "L_Relu", "L_Relu.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "l", ")", ":", "#l = [X_list,AX_list,A2X_list,...,label_batches,graph_batches,_]", "\n", "    ", "X_list", "=", "l", "[", "0", "]", "\n", "graph_list", "=", "l", "[", "-", "2", "]", "\n", "C", "=", "torch", ".", "empty", "(", "(", "len", "(", "X_list", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X_list", ")", ")", ":", "\n", "      ", "Y", "=", "X_list", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "r", ")", ":", "\n", "        ", "Y", "=", "L_Relu", "(", "self", ".", "layers", "[", "j", "]", "(", "graph_list", "[", "i", "]", ",", "Y", ")", ")", "\n", "\n", "", "em", "=", "Y", ".", "sum", "(", "dim", "=", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "cl", "=", "self", ".", "classify", "(", "em", ")", "\n", "\n", "C", "[", "i", "]", "=", "cl", "\n", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.GIN.__init__": [[110, 124], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dgl.nn.pytorch.GINConv", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "range", "range"], "methods", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset_split_class.__init__"], ["  ", "def", "__init__", "(", "self", ",", "d", ",", "dim1", ",", "r", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "GIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "dim1", "=", "dim1", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "MLP_layers", "=", "[", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "d", ",", "self", ".", "dim1", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "self", ".", "dim1", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "]", "\n", "self", ".", "MLP_layers", "+=", "[", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "self", ".", "dim1", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "self", ".", "dim1", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "for", "_", "in", "range", "(", "r", "-", "1", ")", "]", "\n", "self", ".", "MLP_layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "MLP_layers", ")", "\n", "\n", "self", ".", "GIN_layers", "=", "[", "GINConv", "(", "self", ".", "MLP_layers", "[", "i", "]", ",", "'sum'", ",", "init_eps", "=", "0.1", ")", "for", "i", "in", "range", "(", "r", ")", "]", "\n", "self", ".", "GIN_layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "GIN_layers", ")", "\n", "\n", "self", ".", "classify", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "r", "*", "self", ".", "dim1", ",", "self", ".", "dim1", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.GIN.forward": [[125, 142], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "len", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "torch.empty.reshape", "torch.empty.reshape", "torch.empty.reshape", "models.GIN.classify", "len", "tanh", "tanh.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "l", ")", ":", "#l = [X_list,AX_list,A2X_list,...,label_batches,graph_batches,_]", "\n", "    ", "X_list", "=", "l", "[", "0", "]", "\n", "graph_list", "=", "l", "[", "-", "2", "]", "\n", "C", "=", "torch", ".", "empty", "(", "(", "len", "(", "X_list", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X_list", ")", ")", ":", "\n", "      ", "Y", "=", "X_list", "[", "i", "]", "\n", "out", "=", "torch", ".", "empty", "(", "self", ".", "dim1", ",", "self", ".", "r", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "r", ")", ":", "\n", "        ", "Y", "=", "tanh", "(", "self", ".", "GIN_layers", "[", "j", "]", "(", "graph_list", "[", "i", "]", ",", "Y", ")", ")", "\n", "out", "[", ":", ",", "j", "]", "=", "Y", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "#em = Y.sum(dim=0).reshape(1,-1)", "\n", "", "em", "=", "out", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "cl", "=", "self", ".", "classify", "(", "em", ")", "\n", "\n", "C", "[", "i", "]", "=", "cl", "\n", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.MLP_classifier.__init__": [[144, 154], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "range"], "methods", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset_split_class.__init__"], ["  ", "def", "__init__", "(", "self", ",", "d", ",", "num_layers", ",", "dim1", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "MLP_classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "dim1", "=", "dim1", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "MLP_layers", "=", "[", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "d", ",", "self", ".", "dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ")", "]", "\n", "self", ".", "MLP_layers", "+=", "[", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "self", ".", "dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ")", "for", "_", "in", "range", "(", "num_layers", ")", "]", "\n", "self", ".", "MLP_layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "MLP_layers", ")", "\n", "\n", "self", ".", "classify", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "self", ".", "dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.MLP_classifier.forward": [[155, 163], ["models.MLP_classifier.classify", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "l", ")", ":", "#l = [X_list,AX_list,A2X_list,...,label_batches,graph_batches,_]", "\n", "    ", "X", "=", "l", "[", "-", "1", "]", "\n", "for", "layer", "in", "self", ".", "MLP_layers", ":", "\n", "      ", "X", "=", "layer", "(", "X", ")", "\n", "\n", "", "cl", "=", "self", ".", "classify", "(", "X", ")", "\n", "\n", "return", "cl", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.DGCNN.__init__": [[165, 178], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dgl.nn.pytorch.SAGEConv", "dgl.nn.pytorch.SAGEConv", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset_split_class.__init__"], ["  ", "def", "__init__", "(", "self", ",", "d", ",", "dim1", ",", "r", ",", "num_classes", ",", "k", ")", ":", "\n", "    ", "super", "(", "DGCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "dim1", "=", "dim1", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "layers", "=", "[", "SAGEConv", "(", "d", ",", "self", ".", "dim1", ",", "'mean'", ")", "]", "\n", "layers", "+=", "[", "SAGEConv", "(", "self", ".", "dim1", ",", "self", ".", "dim1", ",", "'mean'", ")", "for", "_", "in", "range", "(", "r", "-", "1", ")", "]", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "self", ".", "k", "=", "k", "#tune this manually - will be dataset specific", "\n", "self", ".", "conv1d", "=", "torch", ".", "nn", ".", "Conv1d", "(", "1", ",", "8", ",", "5", ")", "#hardcoded", "\n", "#kd-4", "\n", "self", ".", "classify", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "8", "*", "(", "self", ".", "k", "*", "self", ".", "dim1", "-", "4", ")", ",", "self", ".", "dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.DGCNN.forward": [[179, 197], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "len", "range", "torch_geometric.nn.global_sort_pool", "models.DGCNN.conv1d", "models.DGCNN.reshape", "models.DGCNN.classify", "len", "L_Relu", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.tensor().type", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "l", ")", ":", "#l = [X_list,AX_list,A2X_list,...,label_batches,graph_batches,_]", "\n", "    ", "X_list", "=", "l", "[", "0", "]", "\n", "graph_list", "=", "l", "[", "-", "2", "]", "\n", "C", "=", "torch", ".", "empty", "(", "(", "len", "(", "X_list", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X_list", ")", ")", ":", "#iterating over graphs in a batch", "\n", "      ", "Y", "=", "X_list", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "r", ")", ":", "#pass through the convolutional layers", "\n", "        ", "Y", "=", "L_Relu", "(", "self", ".", "conv_layers", "[", "j", "]", "(", "graph_list", "[", "i", "]", ",", "Y", ")", ")", "\n", "#Y is Nxdim1 matrix", "\n", "", "sort_pooled", "=", "global_sort_pool", "(", "Y", ",", "torch", ".", "tensor", "(", "[", "0", "for", "_", "in", "range", "(", "len", "(", "Y", ")", ")", "]", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", ",", "self", ".", "k", ")", "\n", "#sort_pooled will be 1x(k.dim1) vector", "\n", "c", "=", "self", ".", "conv1d", "(", "torch", ".", "unsqueeze", "(", "sort_pooled", ",", "dim", "=", "1", ")", ")", "\n", "\n", "em", "=", "c", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "cl", "=", "self", ".", "classify", "(", "em", ")", "\n", "\n", "C", "[", "i", "]", "=", "cl", "\n", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.ECC.__init__": [[199, 214], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "NNConv", "NNConv", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "range", "range"], "methods", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset_split_class.__init__"], ["  ", "def", "__init__", "(", "self", ",", "d", ",", "dim1", ",", "r", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "ECC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "dim1", "=", "dim1", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "e_fncs", "=", "[", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "self", ".", "d", "*", "self", ".", "dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ")", "]", "\n", "e_fncs", "+=", "[", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "self", ".", "dim1", "*", "self", ".", "dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ")", "for", "_", "in", "range", "(", "r", "-", "1", ")", "]", "\n", "self", ".", "edge_functions", "=", "nn", ".", "ModuleList", "(", "e_fncs", ")", "\n", "\n", "layers", "=", "[", "NNConv", "(", "self", ".", "d", ",", "self", ".", "dim1", ",", "self", ".", "edge_functions", "[", "0", "]", ",", "'sum'", ")", "]", "\n", "layers", "+=", "[", "NNConv", "(", "self", ".", "dim1", ",", "self", ".", "dim1", ",", "self", ".", "edge_functions", "[", "i", "]", ",", "'sum'", ")", "for", "i", "in", "range", "(", "1", ",", "r", ")", "]", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "\n", "self", ".", "classify", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "self", ".", "dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.ECC.forward": [[215, 229], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "len", "range", "L_Relu.sum().reshape", "models.ECC.classify", "len", "L_Relu", "L_Relu.sum", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "graph_list[].num_edges"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "l", ")", ":", "#l = [X_list,AX_list,A2X_list,...,label_batches,graph_batches,_]", "\n", "    ", "X_list", "=", "l", "[", "0", "]", "\n", "graph_list", "=", "l", "[", "-", "2", "]", "\n", "C", "=", "torch", ".", "empty", "(", "(", "len", "(", "X_list", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X_list", ")", ")", ":", "#iterating over graphs in a batch", "\n", "      ", "Y", "=", "X_list", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "r", ")", ":", "#pass through the convolutional layers", "\n", "        ", "Y", "=", "L_Relu", "(", "self", ".", "conv_layers", "[", "j", "]", "(", "graph_list", "[", "i", "]", ",", "Y", ",", "0.01", "*", "torch", ".", "ones", "(", "graph_list", "[", "i", "]", ".", "num_edges", "(", ")", ",", "1", ")", ")", ")", "\n", "\n", "", "em", "=", "Y", ".", "sum", "(", "dim", "=", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "cl", "=", "self", ".", "classify", "(", "em", ")", "\n", "\n", "C", "[", "i", "]", "=", "cl", "\n", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.DiffPool_block.__init__": [[231, 242], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset_split_class.__init__"], ["  ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "r", ",", "max_nodes", ",", "cluster_factor", "=", "0.5", ")", ":", "\n", "    ", "super", "(", "DiffPool_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#this will take in {A,X} to give {A',X'}", "\n", "#each diffpool block has 2 GNNs", "\n", "#GNN1 - gives Z, and GNN2 - gives S (cluster assignment)", "\n", "self", ".", "inp_dim", "=", "input_dim", "#input dimension", "\n", "self", ".", "r", "=", "r", "#number of convolutions in each layer", "\n", "self", ".", "out_dim", "=", "output_dim", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "embedding_GNN", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "inp_dim", ",", "self", ".", "out_dim", "//", "2", ")", ",", "nn", ".", "Linear", "(", "self", ".", "out_dim", "//", "2", ",", "self", ".", "out_dim", ")", "]", ")", "\n", "self", ".", "cluster_GNN", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "inp_dim", ",", "self", ".", "max_nodes", "//", "2", ")", ",", "nn", ".", "Linear", "(", "self", ".", "max_nodes", "//", "2", ",", "self", ".", "max_nodes", "//", "2", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.DiffPool_block.forward": [[243, 252], ["L_Relu", "L_Relu", "L_Relu", "sft_row", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A", ",", "X", ")", ":", "\n", "    ", "z", "=", "L_Relu", "(", "self", ".", "embedding_GNN", "[", "0", "]", "(", "A", "@", "X", ")", ")", "\n", "z", "=", "L_Relu", "(", "self", ".", "embedding_GNN", "[", "1", "]", "(", "A", "@", "z", ")", ")", "\n", "s", "=", "L_Relu", "(", "self", ".", "cluster_GNN", "[", "0", "]", "(", "A", "@", "X", ")", ")", "\n", "s", "=", "sft_row", "(", "self", ".", "cluster_GNN", "[", "1", "]", "(", "A", "@", "s", ")", ")", "\n", "X_", "=", "torch", ".", "transpose", "(", "s", ",", "0", ",", "1", ")", "@", "z", "\n", "A_", "=", "torch", ".", "transpose", "(", "s", ",", "0", ",", "1", ")", "@", "A", "@", "s", "\n", "\n", "return", "A_", ",", "X_", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.DiffPool.__init__": [[254, 263], ["torch.Module.__init__", "models.DiffPool_block", "models.DiffPool_block", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset_split_class.__init__"], ["  ", "def", "__init__", "(", "self", ",", "d", ",", "dim1", ",", "r", ",", "num_classes", ",", "max_nodes", ",", "cluster_factor", "=", "0.25", ")", ":", "\n", "    ", "super", "(", "DiffPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim1", "=", "dim1", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "block1", "=", "DiffPool_block", "(", "d", ",", "dim1", ",", "r", ",", "max_nodes", ",", "cluster_factor", "=", "0.5", ")", "\n", "self", ".", "block2", "=", "DiffPool_block", "(", "dim1", ",", "dim1", ",", "r", ",", "max_nodes", ",", "cluster_factor", "=", "0.5", ")", "\n", "\n", "self", ".", "classify", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "self", ".", "dim1", ")", ",", "nn", ".", "LeakyReLU", "(", ")", ",", "nn", ".", "Linear", "(", "self", ".", "dim1", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.models.DiffPool.forward": [[264, 279], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "range", "len", "graph_list[].adjacency_matrix().to_dense", "models.DiffPool.block1", "models.DiffPool.block2", "X_.sum().reshape", "models.DiffPool.classify", "len", "graph_list[].adjacency_matrix", "X_.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "l", ")", ":", "\n", "    ", "X_list", "=", "l", "[", "0", "]", "\n", "graph_list", "=", "l", "[", "-", "2", "]", "\n", "C", "=", "torch", ".", "empty", "(", "(", "len", "(", "X_list", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X_list", ")", ")", ":", "#iterating over graphs in a batch", "\n", "      ", "A", "=", "graph_list", "[", "i", "]", ".", "adjacency_matrix", "(", ")", ".", "to_dense", "(", ")", "\n", "X", "=", "X_list", "[", "i", "]", "\n", "A_", ",", "X_", "=", "self", ".", "block1", "(", "A", ",", "X", ")", "\n", "A_", ",", "X_", "=", "self", ".", "block2", "(", "A_", ",", "X_", ")", "\n", "\n", "em", "=", "X_", ".", "sum", "(", "dim", "=", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "cl", "=", "self", ".", "classify", "(", "em", ")", "\n", "\n", "C", "[", "i", "]", "=", "cl", "\n", "", "return", "C", "\n", "", "", ""]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.train.evaluate": [[9, 18], ["sklearn.metrics.accuracy_score", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "sft", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "range", "torch.argmax", "torch.argmax", "torch.argmax", "len", "sg[].detach"], "function", ["None"], ["def", "evaluate", "(", "logits", ",", "labels", ",", "metric", "=", "'accuracy'", ")", ":", "\n", "  ", "if", "(", "metric", "==", "'accuracy'", ")", ":", "\n", "    ", "pred_train", "=", "[", "torch", ".", "argmax", "(", "logits", "[", "j", "]", ")", ".", "item", "(", ")", "for", "j", "in", "range", "(", "len", "(", "logits", ")", ")", "]", "\n", "return", "accuracy_score", "(", "labels", ",", "pred_train", ")", "\n", "", "elif", "(", "metric", "==", "'auroc'", ")", ":", "\n", "    ", "sg", "=", "sft", "(", "logits", ")", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "y_true", "=", "labels", ",", "y_score", "=", "sg", "[", ":", ",", "1", "]", ".", "detach", "(", ")", ",", "pos_label", "=", "1", ")", "#positive class is 1; negative class is 0", "\n", "auroc", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "return", "auroc", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.train.train_model": [[19, 76], ["torch.CrossEntropyLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "net.train", "range", "net.eval", "net", "nn.CrossEntropyLoss.", "train.evaluate", "net", "train.evaluate", "avg_epochwise_loss.append", "epochwise_val_loss.append", "avg_epochwise_train_acc.append", "avg_epochwise_val_acc.append", "print", "print", "print", "net.parameters", "net.parameters", "net", "nn.CrossEntropyLoss.", "torch.optim.Adam.zero_grad", "CE_loss.backward", "torch.optim.Adam.step", "train.evaluate", "print", "CE_loss.item", "range", "range", "range", "CE_loss.item", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.train.evaluate", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.train.evaluate", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.train.evaluate"], ["", "", "def", "train_model", "(", "dataFold", ",", "net", ",", "patience_factor", ",", "num_epochs", ",", "loss", "=", "\"Cross_entropy\"", ",", "optimizer", "=", "\"Adam\"", ",", "L2", "=", "0", ",", "learning_rate", "=", "1e-3", ",", "metric", "=", "'accuracy'", ")", ":", "\n", "  ", "avg_epochwise_loss", ",", "epochwise_val_loss", ",", "avg_epochwise_train_acc", ",", "avg_epochwise_val_acc", ",", "avg_epochwise_test_acc", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "best_model", "=", "{", "\"Epoch_index\"", ":", "0", ",", "\"model\"", ":", "net", ",", "\"train_accuracy\"", ":", "0.0", ",", "\"val_accuracy\"", ":", "0.0", ",", "\"test_accuracy\"", ":", "0.0", "}", "\n", "if", "(", "loss", "==", "\"Cross_entropy\"", ")", ":", "CE_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "(", "optimizer", "==", "\"Adam\"", ")", ":", "\n", "    ", "if", "(", "L2", ")", ":", "\n", "      ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ",", "weight_decay", "=", "L2", ")", "\n", "", "else", ":", "\n", "      ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ")", "\n", "", "", "epoch_num", "=", "0", "\n", "p", "=", "0", "\n", "try", ":", "\n", "    ", "while", "(", "epoch_num", "<=", "num_epochs", "and", "p", "<", "patience_factor", ")", ":", "\n", "      ", "l", ",", "t_acc", "=", "0", ",", "0", "\n", "net", ".", "train", "(", ")", "\n", "for", "i", "in", "range", "(", "dataFold", ".", "num_batches", ")", ":", "\n", "        ", "logits", "=", "net", "(", "[", "dataFold", ".", "train_batches", "[", "j", "]", "[", "i", "]", "for", "j", "in", "range", "(", "len", "(", "dataFold", ".", "train_batches", ")", ")", "]", ")", "\n", "loss", "=", "CE_loss", "(", "logits", ",", "dataFold", ".", "train_batches", "[", "-", "3", "]", "[", "i", "]", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "b_acc", "=", "evaluate", "(", "logits", ",", "dataFold", ".", "train_batches", "[", "-", "3", "]", "[", "i", "]", ",", "metric", "=", "metric", ")", "\n", "print", "(", "\"epoch = %d | batch = %d | loss = %f | batch_accuracy = %f \"", "%", "(", "epoch_num", ",", "i", ",", "loss", ".", "item", "(", ")", ",", "b_acc", ")", ")", "\n", "l", "+=", "loss", ".", "item", "(", ")", "\n", "t_acc", "+=", "b_acc", "\n", "\n", "", "net", ".", "eval", "(", ")", "\n", "logits_val", "=", "net", "(", "[", "dataFold", ".", "val_batches", "[", "j", "]", "[", "0", "]", "for", "j", "in", "range", "(", "len", "(", "dataFold", ".", "val_batches", ")", ")", "]", ")", "\n", "val_loss", "=", "CE_loss", "(", "logits_val", ",", "dataFold", ".", "val_batches", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "acc_val", "=", "evaluate", "(", "logits_val", ",", "dataFold", ".", "val_batches", "[", "-", "3", "]", "[", "0", "]", ",", "metric", "=", "metric", ")", "\n", "\n", "logits_test", "=", "net", "(", "[", "dataFold", ".", "test_batches", "[", "j", "]", "[", "0", "]", "for", "j", "in", "range", "(", "len", "(", "dataFold", ".", "test_batches", ")", ")", "]", ")", "\n", "acc_test", "=", "evaluate", "(", "logits_test", ",", "dataFold", ".", "test_batches", "[", "-", "3", "]", "[", "0", "]", ",", "metric", "=", "metric", ")", "\n", "\n", "avg_epochwise_loss", ".", "append", "(", "l", "/", "dataFold", ".", "num_batches", ")", "\n", "epochwise_val_loss", ".", "append", "(", "val_loss", ")", "\n", "avg_epochwise_train_acc", ".", "append", "(", "t_acc", "/", "dataFold", ".", "num_batches", ")", "\n", "avg_epochwise_val_acc", ".", "append", "(", "acc_val", ")", "\n", "print", "(", "\"-----------epoch = %d | avg_loss = %f | avg_epoch_accuracy = %f | val_acc = %f\"", "%", "(", "epoch_num", ",", "l", "/", "dataFold", ".", "num_batches", ",", "t_acc", "/", "dataFold", ".", "num_batches", ",", "acc_val", ")", ")", "\n", "\n", "if", "(", "best_model", "[", "\"val_accuracy\"", "]", "<", "acc_val", ")", ":", "\n", "        ", "best_model", "[", "\"Epoch_index\"", "]", "=", "epoch_num", "\n", "best_model", "[", "\"model\"", "]", "=", "net", "\n", "best_model", "[", "\"train_accuracy\"", "]", "=", "t_acc", "/", "dataFold", ".", "num_batches", "\n", "best_model", "[", "\"val_accuracy\"", "]", "=", "acc_val", "\n", "best_model", "[", "\"test_accuracy\"", "]", "=", "acc_test", "\n", "p", "=", "0", "\n", "", "else", ":", "\n", "        ", "p", "+=", "1", "\n", "", "epoch_num", "+=", "1", "\n", "training_specs", "=", "{", "\"epochwise_loss\"", ":", "avg_epochwise_loss", ",", "\"epochwise_train_acc\"", ":", "avg_epochwise_train_acc", ",", "\"epochwise_val_acc\"", ":", "avg_epochwise_val_acc", "}", "\n", "\n", "", "if", "(", "p", ">=", "patience_factor", ")", ":", "print", "(", "\"Patience factor termination\"", ")", "\n", "return", "best_model", ",", "training_specs", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "    ", "print", "(", "\"KeyboardInterrupt. Need to stop the training. Obeying the orders!\"", ")", "\n", "return", "best_model", ",", "training_specs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset.__init__": [[121, 154], ["max", "datasets.construct_dataset", "list", "datasets.dataset.load_splits_from_json", "datasets.dataset.get_stratification_ratios().values", "ogb.graphproppred.DglGraphPropPredDataset", "dgl.data.TUDataset", "list", "g.num_nodes", "datasets.create_5_fold_splits", "datasets.create_10_fold_splits", "x[].item", "lab.item", "datasets.dataset.get_stratification_ratios().values", "datasets.dataset.get_stratification_ratios", "datasets.dataset.num_atoms", "datasets.dataset.get_stratification_ratios"], "methods", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.construct_dataset", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset.load_splits_from_json", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.create_5_fold_splits", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.create_10_fold_splits", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset.get_stratification_ratios", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset.num_atoms", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset.get_stratification_ratios"], ["  ", "def", "__init__", "(", "self", ",", "name", ",", "category", ",", "num_classes", ",", "load_splits", "=", "False", ",", "predefined_splits_filepath", "=", "''", ")", ":", "\n", "#json_filename: provide the predefined data splits json filepath", "\n", "    ", "self", ".", "name", "=", "name", "\n", "self", ".", "category", "=", "category", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "(", "self", ".", "category", "==", "'brain'", ")", ":", "\n", "      ", "self", ".", "graphs", ",", "self", ".", "labels", "=", "construct_dataset", "(", "predefined_splits_filepath", ")", "\n", "self", ".", "input_feat_dim", "=", "1", "#using the degree information", "\n", "self", ".", "stratification_ratios", "=", "list", "(", "self", ".", "get_stratification_ratios", "(", "self", ".", "labels", ")", ".", "values", "(", ")", ")", "\n", "", "elif", "(", "self", ".", "category", "==", "'ogb'", ")", ":", "\n", "      ", "self", ".", "data", "=", "DglGraphPropPredDataset", "(", "name", "=", "name", ")", "\n", "self", ".", "graphs", "=", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "data", "]", "\n", "self", ".", "labels", "=", "[", "x", "[", "1", "]", ".", "item", "(", ")", "for", "x", "in", "self", ".", "data", "]", "\n", "self", ".", "input_feat_dim", "=", "9", "\n", "self", ".", "stratification_ratios", "=", "[", "0.7", ",", "0.3", "]", "#hardcoded this one", "\n", "", "else", ":", "#it is a TU dataset", "\n", "      ", "data", "=", "dgl", ".", "data", ".", "TUDataset", "(", "self", ".", "name", ")", "\n", "self", ".", "labels", "=", "[", "lab", ".", "item", "(", ")", "for", "lab", "in", "data", ".", "graph_labels", "]", "\n", "self", ".", "graphs", "=", "data", ".", "graph_lists", "\n", "if", "(", "category", "==", "\"social\"", ")", ":", "\n", "        ", "self", ".", "input_feat_dim", "=", "1", "\n", "", "else", ":", "\n", "        ", "self", ".", "input_feat_dim", "=", "21", "if", "(", "name", "==", "\"ENZYMES\"", ")", "else", "self", ".", "num_atoms", "(", ")", "+", "1", "\n", "", "self", ".", "stratification_ratios", "=", "list", "(", "self", ".", "get_stratification_ratios", "(", "self", ".", "labels", ")", ".", "values", "(", ")", ")", "\n", "", "self", ".", "max_nodes", "=", "max", "(", "[", "g", ".", "num_nodes", "(", ")", "for", "g", "in", "self", ".", "graphs", "]", ")", "\n", "self", ".", "load_splits", "=", "load_splits", "\n", "if", "(", "load_splits", ")", ":", "\n", "      ", "self", ".", "graph_sets", ",", "self", ".", "label_sets", "=", "self", ".", "load_splits_from_json", "(", "predefined_splits_filepath", ")", "\n", "", "else", ":", "\n", "      ", "if", "(", "category", "==", "'brain'", ")", ":", "\n", "        ", "self", ".", "graph_sets", ",", "self", ".", "label_sets", "=", "create_5_fold_splits", "(", "self", ".", "graphs", ",", "self", ".", "labels", ",", "random_seed", "=", "17", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "graph_sets", ",", "self", ".", "label_sets", "=", "create_10_fold_splits", "(", "self", ".", "graphs", ",", "self", ".", "labels", ",", "random_seed", "=", "17", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset.get_stratification_ratios": [[155, 161], ["collections.OrderedDict", "len", "collections.OrderedDict.keys", "collections.Counter"], "methods", ["None"], ["", "", "", "def", "get_stratification_ratios", "(", "self", ",", "lst", ")", ":", "\n", "    ", "x", "=", "OrderedDict", "(", "Counter", "(", "lst", ")", ")", "\n", "ln", "=", "len", "(", "lst", ")", "\n", "for", "key", "in", "x", ".", "keys", "(", ")", ":", "\n", "      ", "x", "[", "key", "]", "=", "x", "[", "key", "]", "/", "ln", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset.load_splits_from_json": [[162, 173], ["open", "json.loads", "graph_sets.append", "lab_sets.append", "j.read"], "methods", ["None"], ["", "def", "load_splits_from_json", "(", "self", ",", "json_filename", ")", ":", "\n", "#loads all the fold splits from the predefined JSON file", "\n", "    ", "with", "open", "(", "json_filename", ",", "'r'", ")", "as", "j", ":", "\n", "      ", "self", ".", "content", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "#list of dict corresponding to each fold", "\n", "", "graph_sets", "=", "[", "]", "\n", "lab_sets", "=", "[", "]", "\n", "for", "fold", "in", "self", ".", "content", ":", "\n", "      ", "indices", "=", "fold", "[", "'test'", "]", "\n", "graph_sets", ".", "append", "(", "[", "self", ".", "graphs", "[", "indx", "]", "for", "indx", "in", "indices", "]", ")", "\n", "lab_sets", ".", "append", "(", "[", "self", ".", "labels", "[", "indx", "]", "for", "indx", "in", "indices", "]", ")", "\n", "", "return", "graph_sets", ",", "lab_sets", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset.num_atoms": [[174, 176], ["max", "max"], "methods", ["None"], ["", "def", "num_atoms", "(", "self", ")", ":", "\n", "    ", "return", "max", "(", "max", "(", "g", ".", "ndata", "[", "'node_labels'", "]", ")", "for", "g", "in", "self", ".", "graphs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset_split_class.__init__": [[178, 211], ["datasetObj.data.get_idx_split", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "x[].item", "x[].item", "x[].item", "sklearn.model_selection.train_test_split", "datasets.dataset_split_class.graphs_train.append", "datasets.dataset_split_class.lab_train.append"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "datasetObj", ",", "fold_index_k", "=", "0", ",", "val_split", "=", "0.1", ",", "validation_split_seed", "=", "17", ")", ":", "\n", "    ", "if", "(", "datasetObj", ".", "category", "==", "'ogb'", ")", ":", "\n", "      ", "split_idx", "=", "datasetObj", ".", "data", ".", "get_idx_split", "(", ")", "\n", "train_loader", "=", "DataLoader", "(", "datasetObj", ".", "data", "[", "split_idx", "[", "\"train\"", "]", "]", ",", "batch_size", "=", "32", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "collate_dgl", ")", "\n", "valid_loader", "=", "DataLoader", "(", "datasetObj", ".", "data", "[", "split_idx", "[", "\"valid\"", "]", "]", ",", "batch_size", "=", "32", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_dgl", ")", "\n", "test_loader", "=", "DataLoader", "(", "datasetObj", ".", "data", "[", "split_idx", "[", "\"test\"", "]", "]", ",", "batch_size", "=", "32", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate_dgl", ")", "\n", "self", ".", "graphs_train", "=", "[", "x", "[", "0", "]", "for", "x", "in", "train_loader", ".", "dataset", "]", "\n", "self", ".", "lab_train", "=", "[", "x", "[", "1", "]", ".", "item", "(", ")", "for", "x", "in", "train_loader", ".", "dataset", "]", "\n", "self", ".", "graphs_val", "=", "[", "x", "[", "0", "]", "for", "x", "in", "valid_loader", ".", "dataset", "]", "\n", "self", ".", "lab_val", "=", "[", "x", "[", "1", "]", ".", "item", "(", ")", "for", "x", "in", "valid_loader", ".", "dataset", "]", "\n", "self", ".", "graphs_test", "=", "[", "x", "[", "0", "]", "for", "x", "in", "test_loader", ".", "dataset", "]", "\n", "self", ".", "lab_test", "=", "[", "x", "[", "1", "]", ".", "item", "(", ")", "for", "x", "in", "test_loader", ".", "dataset", "]", "\n", "", "elif", "(", "datasetObj", ".", "load_splits", ")", ":", "\n", "      ", "train_indices", "=", "datasetObj", ".", "content", "[", "fold_index_k", "]", "[", "'model_selection'", "]", "[", "0", "]", "[", "'train'", "]", "\n", "val_indices", "=", "datasetObj", ".", "content", "[", "fold_index_k", "]", "[", "'model_selection'", "]", "[", "0", "]", "[", "'validation'", "]", "\n", "test_indices", "=", "datasetObj", ".", "content", "[", "fold_index_k", "]", "[", "'test'", "]", "\n", "self", ".", "graphs_train", "=", "[", "datasetObj", ".", "graphs", "[", "indx", "]", "for", "indx", "in", "train_indices", "]", "\n", "self", ".", "lab_train", "=", "[", "datasetObj", ".", "labels", "[", "indx", "]", "for", "indx", "in", "train_indices", "]", "\n", "self", ".", "graphs_val", "=", "[", "datasetObj", ".", "graphs", "[", "indx", "]", "for", "indx", "in", "val_indices", "]", "\n", "self", ".", "lab_val", "=", "[", "datasetObj", ".", "labels", "[", "indx", "]", "for", "indx", "in", "val_indices", "]", "\n", "self", ".", "graphs_test", "=", "[", "datasetObj", ".", "graphs", "[", "indx", "]", "for", "indx", "in", "test_indices", "]", "\n", "self", ".", "lab_test", "=", "[", "datasetObj", ".", "labels", "[", "indx", "]", "for", "indx", "in", "test_indices", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "graphs_test", "=", "datasetObj", ".", "graph_sets", "[", "fold_index_k", "]", "\n", "self", ".", "lab_test", "=", "datasetObj", ".", "label_sets", "[", "fold_index_k", "]", "\n", "self", ".", "graphs_train", ",", "self", ".", "lab_train", "=", "[", "]", ",", "[", "]", "\n", "for", "st", "in", "datasetObj", ".", "graph_sets", "[", ":", "fold_index_k", "]", "+", "datasetObj", ".", "graph_sets", "[", "fold_index_k", "+", "1", ":", "]", ":", "\n", "        ", "for", "graph", "in", "st", ":", "\n", "          ", "self", ".", "graphs_train", ".", "append", "(", "graph", ")", "\n", "", "", "for", "st", "in", "datasetObj", ".", "label_sets", "[", ":", "fold_index_k", "]", "+", "datasetObj", ".", "label_sets", "[", "fold_index_k", "+", "1", ":", "]", ":", "\n", "        ", "for", "label", "in", "st", ":", "\n", "          ", "self", ".", "lab_train", ".", "append", "(", "label", ")", "\n", "", "", "self", ".", "graphs_train", ",", "self", ".", "graphs_val", ",", "self", ".", "lab_train", ",", "self", ".", "lab_val", "=", "train_test_split", "(", "self", ".", "graphs_train", ",", "self", ".", "lab_train", ",", "test_size", "=", "val_split", ",", "random_state", "=", "validation_split_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.dataset_split_class.create_batches": [[212, 218], ["datasets.batch", "datasets.batch", "datasets.batch", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.batch", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.batch", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.batch"], ["", "", "def", "create_batches", "(", "self", ",", "datasetObj", ",", "r_hop", "=", "2", ",", "batch_size", "=", "32", ",", "save_batches", "=", "False", ",", "path", "=", "''", ")", ":", "\n", "#batches = [X_batches,AX_batches,...,ArX_batches,label_batches,graph_batches]", "\n", "    ", "self", ".", "train_batches", "=", "batch", "(", "self", ".", "graphs_train", ",", "self", ".", "lab_train", ",", "batch_size", ",", "datasetObj", ".", "category", ",", "datasetObj", ".", "num_classes", ",", "r_hop", ",", "datasetObj", ".", "input_feat_dim", ",", "stratification_ratios", "=", "datasetObj", ".", "stratification_ratios", ",", "save_batches", "=", "False", ",", "path", "=", "''", ")", "\n", "self", ".", "val_batches", "=", "batch", "(", "self", ".", "graphs_val", ",", "self", ".", "lab_val", ",", "len", "(", "self", ".", "lab_val", ")", ",", "datasetObj", ".", "category", ",", "datasetObj", ".", "num_classes", ",", "r_hop", ",", "datasetObj", ".", "input_feat_dim", ",", "save_batches", "=", "save_batches", ",", "path", "=", "''", ")", "\n", "self", ".", "test_batches", "=", "batch", "(", "self", ".", "graphs_test", ",", "self", ".", "lab_test", ",", "len", "(", "self", ".", "lab_test", ")", ",", "datasetObj", ".", "category", ",", "datasetObj", ".", "num_classes", ",", "r_hop", ",", "datasetObj", ".", "input_feat_dim", ",", "save_batches", "=", "save_batches", ",", "path", "=", "''", ")", "\n", "self", ".", "num_batches", "=", "len", "(", "self", ".", "train_batches", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.get_sparse_tensor_from_scipy_coo": [[13, 20], ["numpy.vstack", "torch.LongTensor", "torch.FloatTensor", "torch.sparse.FloatTensor", "torch.Size"], "function", ["None"], ["def", "get_sparse_tensor_from_scipy_coo", "(", "coo", ")", ":", "\n", "  ", "values", "=", "coo", ".", "data", "\n", "indices", "=", "np", ".", "vstack", "(", "(", "coo", ".", "row", ",", "coo", ".", "col", ")", ")", "\n", "i", "=", "torch", ".", "LongTensor", "(", "indices", ")", "\n", "v", "=", "torch", ".", "FloatTensor", "(", "values", ")", "\n", "shape", "=", "coo", ".", "shape", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "i", ",", "v", ",", "torch", ".", "Size", "(", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.batch": [[219, 253], ["collections.defaultdict", "range", "range", "sample_size.append", "range", "len", "len", "indices_dict[].append", "round", "graph_batches.append", "X_batches.append", "datasets.add_node_features", "datasets.get_precomputions", "all_batches[].append", "range", "label_batches.append", "all_batches[].append", "all_batches[].append", "all_batches[].append", "save_variable", "range", "sum", "len", "range", "torch.Tensor", "all_batches[].append", "torch.tensor", "torch.Tensor", "random.sample", "datasets.get_embed_X", "range"], "function", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.add_node_features", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.get_precomputions", "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.get_embed_X"], ["", "", "def", "batch", "(", "graphs_list", ",", "labels", ",", "batch_size", ",", "category", ",", "num_classes", ",", "r", ",", "input_feat_dim", ",", "stratification_ratios", "=", "[", "]", ",", "save_batches", "=", "False", ",", "path", "=", "''", ")", ":", "\n", "  ", "num_batches", "=", "len", "(", "graphs_list", ")", "//", "batch_size", "\n", "X_batches", ",", "label_batches", ",", "graph_batches", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "all_batches", "=", "[", "[", "]", "for", "_", "in", "range", "(", "r", "+", "4", ")", "]", "\n", "indices_dict", "=", "defaultdict", "(", ")", "\n", "#len of stratification_ratios will give me the num_classes", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "    ", "indices_dict", "[", "i", "]", "=", "[", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "    ", "indices_dict", "[", "labels", "[", "i", "]", "]", ".", "append", "(", "i", ")", "\n", "", "sample_size", "=", "[", "round", "(", "ratio", "*", "batch_size", ")", "for", "ratio", "in", "stratification_ratios", "[", ":", "num_classes", "-", "1", "]", "]", "\n", "sample_size", ".", "append", "(", "batch_size", "-", "sum", "(", "sample_size", ")", ")", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "    ", "if", "(", "batch_size", "==", "len", "(", "labels", ")", ")", ":", "\n", "      ", "indices", "=", "[", "i", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "", "else", ":", "\n", "      ", "indices", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "indices", "+=", "random", ".", "sample", "(", "indices_dict", "[", "j", "]", ",", "sample_size", "[", "j", "]", ")", "\n", "", "", "graph_batches", ".", "append", "(", "[", "graphs_list", "[", "index", "]", "for", "index", "in", "indices", "]", ")", "\n", "X_batches", ".", "append", "(", "[", "get_embed_X", "(", "graphs_list", "[", "index", "]", ",", "category", ",", "input_feat_dim", ")", "for", "index", "in", "indices", "]", ")", "\n", "Z", "=", "add_node_features", "(", "X_batches", "[", "i", "]", ",", "category", ")", "\n", "c", "=", "get_precomputions", "(", "[", "graphs_list", "[", "index", "]", "for", "index", "in", "indices", "]", ",", "X_batches", "[", "i", "]", ",", "r", ",", "category", ")", "\n", "#f = [torch.Tensor(t) for t in X_batches[i]] if (category == \"social\" or category == 'brain') else [get_sparse_tensor_from_scipy_coo(t) for t in X_batches[i]]", "\n", "f", "=", "[", "torch", ".", "Tensor", "(", "t", ")", "for", "t", "in", "X_batches", "[", "i", "]", "]", "\n", "all_batches", "[", "0", "]", ".", "append", "(", "f", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "r", "+", "1", ")", ":", "\n", "      ", "all_batches", "[", "j", "]", ".", "append", "(", "c", "[", "j", "-", "1", "]", ")", "\n", "", "label_batches", ".", "append", "(", "torch", ".", "tensor", "(", "[", "labels", "[", "index", "]", "for", "index", "in", "indices", "]", ")", ")", "\n", "all_batches", "[", "r", "+", "1", "]", ".", "append", "(", "label_batches", "[", "i", "]", ")", "\n", "all_batches", "[", "r", "+", "2", "]", ".", "append", "(", "graph_batches", "[", "i", "]", ")", "\n", "all_batches", "[", "r", "+", "3", "]", ".", "append", "(", "torch", ".", "Tensor", "(", "Z", ")", ")", "\n", "", "if", "(", "save_batches", ")", ":", "save_variable", "(", "all_batches", ",", "path", ")", "\n", "return", "all_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.add_node_features": [[254, 257], ["numpy.array", "sum"], "function", ["None"], ["", "def", "add_node_features", "(", "X_list", ",", "category", ")", ":", "\n", "  ", "z", "=", "np", ".", "array", "(", "[", "sum", "(", "x", ")", "for", "x", "in", "X_list", "]", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.get_precomputions": [[258, 271], ["range", "len", "datasets.get_adjacency", "range", "range", "range", "c.append", "torch.Tensor", "all_list[].append"], "function", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.get_adjacency"], ["", "def", "get_precomputions", "(", "graphs", ",", "X", ",", "r", ",", "category", ")", ":", "\n", "  ", "all_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "r", ")", "]", "#it should be like a list [AX_list,A2X_list,A3X_list,A4X_list]", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "    ", "A", "=", "get_adjacency", "(", "graphs", "[", "i", "]", ")", "#this is the normalized adjacency", "\n", "c", "=", "[", "]", "\n", "x", "=", "X", "[", "i", "]", "\n", "for", "_", "in", "range", "(", "r", ")", ":", "\n", "      ", "x", "=", "A", "@", "x", "\n", "c", ".", "append", "(", "x", ")", "#c is like [ax,a2x,a3x]", "\n", "", "c", "=", "[", "torch", ".", "Tensor", "(", "t", ")", "for", "t", "in", "c", "]", "\n", "for", "j", "in", "range", "(", "r", ")", ":", "\n", "      ", "all_list", "[", "j", "]", ".", "append", "(", "c", "[", "j", "]", ")", "\n", "", "", "return", "all_list", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.get_adjacency": [[272, 282], ["graph.adjacency_matrix().toarray", "numpy.zeros", "graph.in_degrees", "range", "numpy.matmul", "len", "numpy.matmul", "graph.adjacency_matrix", "graph.num_nodes", "graph.num_nodes"], "function", ["None"], ["", "def", "get_adjacency", "(", "graph", ")", ":", "#input = DGL hetero graph", "\n", "  ", "A", "=", "graph", ".", "adjacency_matrix", "(", "False", ",", "scipy_fmt", "=", "\"csr\"", ")", ".", "toarray", "(", ")", "\n", "D", "=", "np", ".", "zeros", "(", "(", "graph", ".", "num_nodes", "(", ")", ",", "graph", ".", "num_nodes", "(", ")", ")", ")", "#this is d_inverse_1/2", "\n", "degrees", "=", "graph", ".", "in_degrees", "(", ")", "\n", "#if (0 in degrees): print (\"Found zero degree node\")", "\n", "for", "i", "in", "range", "(", "len", "(", "degrees", ")", ")", ":", "\n", "    ", "D", "[", "i", ",", "i", "]", "=", "(", "1", "/", "degrees", "[", "i", "]", ")", "**", "0.5", "if", "(", "degrees", "[", "i", "]", "!=", "0", ")", "else", "0", "\n", "", "A_tilde", "=", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "D", ",", "A", ")", ",", "D", ")", "\n", "#A_tilde += A #use this to avoid some rare occuring cases where A_tilde would fail", "\n", "return", "A_tilde", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.get_embed_X": [[283, 298], ["numpy.array", "graph.in_degrees", "numpy.array().reshape", "numpy.zeros", "range", "graph.num_nodes", "graph.num_nodes", "numpy.array", "numpy.concatenate", "numpy.array", "graph.num_nodes"], "function", ["None"], ["", "def", "get_embed_X", "(", "graph", ",", "category", ",", "input_feat_dim", ")", ":", "\n", "  ", "if", "(", "category", "==", "'ogb'", ")", ":", "\n", "    ", "X", "=", "np", ".", "array", "(", "graph", ".", "ndata", "[", "'feat'", "]", ")", "\n", "", "elif", "(", "category", "==", "'social'", "or", "category", "==", "'brain'", ")", ":", "#for social and brain dataset, endcoding the degree info", "\n", "    ", "degrees", "=", "graph", ".", "in_degrees", "(", ")", "\n", "X", "=", "np", ".", "array", "(", "degrees", ")", ".", "reshape", "(", "graph", ".", "num_nodes", "(", ")", ",", "1", ")", "\n", "", "else", ":", "#for bioinformatics dataset, encoding the atom type", "\n", "    ", "X", "=", "np", ".", "zeros", "(", "(", "graph", ".", "num_nodes", "(", ")", ",", "input_feat_dim", ")", ")", "\n", "atoms", "=", "graph", ".", "ndata", "[", "'node_labels'", "]", "\n", "for", "i", "in", "range", "(", "graph", ".", "num_nodes", "(", ")", ")", ":", "\n", "      ", "X", "[", "i", ",", "atoms", "[", "i", "]", "]", "=", "1", "\n", "", "if", "(", "input_feat_dim", "==", "21", ")", ":", "#special case for ENZYMES", "\n", "      ", "X1", "=", "np", ".", "array", "(", "graph", ".", "ndata", "[", "\"node_attr\"", "]", ")", "#nx18 matrix", "\n", "X", "=", "np", ".", "concatenate", "(", "(", "X1", ",", "X", "[", ":", ",", ":", "3", "]", ")", ",", "axis", "=", "1", ")", "#converting it to nx21", "\n", "", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.create_10_fold_splits": [[299, 320], ["sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split"], "function", ["None"], ["", "def", "create_10_fold_splits", "(", "graphs", ",", "labels", ",", "random_seed", "=", "17", ")", ":", "\n", "#create the k-fold splits and save them, so that we can even use the same anytime", "\n", "#using the unconventional train-test split method for creating 10 folds as it has the \"random seed\" that could help us reproduce this randomness", "\n", "  ", "graphs_80", ",", "graphs_20", ",", "lab_80", ",", "lab_20", "=", "train_test_split", "(", "graphs", ",", "labels", ",", "test_size", "=", "0.2", ",", "random_state", "=", "random_seed", ")", "\n", "\n", "graphs_set_1", ",", "graphs_set_2", ",", "lab_set_1", ",", "lab_set_2", "=", "train_test_split", "(", "graphs_20", ",", "lab_20", ",", "test_size", "=", "0.5", ",", "random_state", "=", "random_seed", ")", "\n", "\n", "graphs_40_1", ",", "graphs_40_2", ",", "lab_40_1", ",", "lab_40_2", "=", "train_test_split", "(", "graphs_80", ",", "lab_80", ",", "test_size", "=", "0.5", ",", "random_state", "=", "random_seed", ")", "\n", "\n", "graphs_20_1", ",", "graphs_20_2", ",", "lab_20_1", ",", "lab_20_2", "=", "train_test_split", "(", "graphs_40_1", ",", "lab_40_1", ",", "test_size", "=", "0.5", ",", "random_state", "=", "random_seed", ")", "\n", "graphs_set_3", ",", "graphs_set_4", ",", "lab_set_3", ",", "lab_set_4", "=", "train_test_split", "(", "graphs_20_1", ",", "lab_20_1", ",", "test_size", "=", "0.5", ",", "random_state", "=", "random_seed", ")", "\n", "graphs_set_5", ",", "graphs_set_6", ",", "lab_set_5", ",", "lab_set_6", "=", "train_test_split", "(", "graphs_20_2", ",", "lab_20_2", ",", "test_size", "=", "0.5", ",", "random_state", "=", "random_seed", ")", "\n", "\n", "graphs_20_1", ",", "graphs_20_2", ",", "lab_20_1", ",", "lab_20_2", "=", "train_test_split", "(", "graphs_40_2", ",", "lab_40_2", ",", "test_size", "=", "0.5", ",", "random_state", "=", "random_seed", ")", "\n", "graphs_set_7", ",", "graphs_set_8", ",", "lab_set_7", ",", "lab_set_8", "=", "train_test_split", "(", "graphs_20_1", ",", "lab_20_1", ",", "test_size", "=", "0.5", ",", "random_state", "=", "random_seed", ")", "\n", "graphs_set_9", ",", "graphs_set_10", ",", "lab_set_9", ",", "lab_set_10", "=", "train_test_split", "(", "graphs_20_2", ",", "lab_20_2", ",", "test_size", "=", "0.5", ",", "random_state", "=", "random_seed", ")", "\n", "\n", "graph_sets", "=", "[", "graphs_set_1", ",", "graphs_set_2", ",", "graphs_set_3", ",", "graphs_set_4", ",", "graphs_set_5", ",", "graphs_set_6", ",", "graphs_set_7", ",", "graphs_set_8", ",", "graphs_set_9", ",", "graphs_set_10", "]", "\n", "label_sets", "=", "[", "lab_set_1", ",", "lab_set_2", ",", "lab_set_3", ",", "lab_set_4", ",", "lab_set_5", ",", "lab_set_6", ",", "lab_set_7", ",", "lab_set_8", ",", "lab_set_9", ",", "lab_set_10", "]", "\n", "\n", "return", "graph_sets", ",", "label_sets", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.create_5_fold_splits": [[321, 335], ["sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split"], "function", ["None"], ["", "def", "create_5_fold_splits", "(", "graphs", ",", "labels", ",", "random_seed", "=", "17", ")", ":", "\n", "#create the k-fold splits and save them, so that we can even use the same anytime", "\n", "#using the unconventional train-test split method for creating 5 folds as it has the \"random seed\" that could help us reproduce this randomness", "\n", "  ", "graphs_80", ",", "graphs_set_1", ",", "lab_80", ",", "lab_set_1", "=", "train_test_split", "(", "graphs", ",", "labels", ",", "test_size", "=", "0.2", ",", "random_state", "=", "random_seed", ")", "\n", "\n", "graphs_40_1", ",", "graphs_40_2", ",", "lab_40_1", ",", "lab_40_2", "=", "train_test_split", "(", "graphs_80", ",", "lab_80", ",", "test_size", "=", "0.5", ",", "random_state", "=", "random_seed", ")", "\n", "\n", "graphs_set_2", ",", "graphs_set_3", ",", "lab_set_2", ",", "lab_set_3", "=", "train_test_split", "(", "graphs_40_1", ",", "lab_40_1", ",", "test_size", "=", "0.5", ",", "random_state", "=", "random_seed", ")", "\n", "graphs_set_4", ",", "graphs_set_5", ",", "lab_set_4", ",", "lab_set_5", "=", "train_test_split", "(", "graphs_40_2", ",", "lab_40_2", ",", "test_size", "=", "0.5", ",", "random_state", "=", "random_seed", ")", "\n", "\n", "graph_sets", "=", "[", "graphs_set_1", ",", "graphs_set_2", ",", "graphs_set_3", ",", "graphs_set_4", ",", "graphs_set_5", "]", "\n", "label_sets", "=", "[", "lab_set_1", ",", "lab_set_2", ",", "lab_set_3", ",", "lab_set_4", ",", "lab_set_5", "]", "\n", "\n", "return", "graph_sets", ",", "label_sets", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.load_dataset": [[337, 341], ["datasets.dataset"], "function", ["None"], ["", "def", "load_dataset", "(", "dataset_name", ",", "load_datasplits", "=", "False", ",", "predefined_splits_filepath", "=", "''", ")", ":", "\n", "  ", "data_dct", "=", "dataset_dict", "[", "dataset_name", "]", "\n", "data_obj", "=", "dataset", "(", "dataset_name", ",", "data_dct", "[", "'category'", "]", ",", "data_dct", "[", "'num_classes'", "]", ",", "load_splits", "=", "load_datasplits", ",", "predefined_splits_filepath", "=", "predefined_splits_filepath", ")", "\n", "return", "data_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.split_data": [[342, 347], ["datasets.dataset_split_class"], "function", ["None"], ["", "def", "split_data", "(", "datasetObj", ",", "fold_index_k", "=", "0", ",", "val_split", "=", "0.1", ",", "validation_split_seed", "=", "17", ")", ":", "\n", "#fold_index_k = 2 #index between [0,10)", "\n", "#gets us the desired fold as testing set", "\n", "  ", "dataFold", "=", "dataset_split_class", "(", "datasetObj", ",", "fold_index_k", "=", "fold_index_k", ",", "val_split", "=", "val_split", ",", "validation_split_seed", "=", "17", ")", "\n", "return", "dataFold", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.construct_graph": [[349, 375], ["dict", "dgl.graph", "torch.tensor", "int", "src_nodes.append", "dest_nodes.append", "src_nodes.append", "dest_nodes.append", "re.findall", "int", "re.findall", "range", "int", "int", "int", "int", "len"], "function", ["None"], ["", "def", "construct_graph", "(", "lines", ":", "list", ")", "->", "'DGL graph'", ":", "\n", "  ", "'''\n  Given a graph represented using strings as given in format @ https://github.com/GRAND-Lab/graph_datasets, \n  the func returns the DGL graph for it\n  '''", "\n", "node_attr", "=", "dict", "(", ")", "\n", "src_nodes", "=", "[", "]", "\n", "dest_nodes", "=", "[", "]", "\n", "for", "line", "in", "lines", "[", ":", "-", "3", "]", ":", "\n", "    ", "if", "(", "line", "[", "0", "]", "==", "'n'", ")", ":", "\n", "      ", "node_id", ",", "node_attr_value", "=", "re", ".", "findall", "(", "r'n\\s(\\d+)\\sn_(\\d+)'", ",", "line", ")", "[", "0", "]", "\n", "node_id", "=", "int", "(", "node_id", ")", "-", "1", "#to start the node indexing with zero", "\n", "node_attr", "[", "node_id", "]", "=", "int", "(", "node_attr_value", ")", "\n", "", "else", ":", "\n", "      ", "src_id", ",", "dest_id", "=", "re", ".", "findall", "(", "r'e\\s(\\d+)\\s(\\d+)'", ",", "line", ")", "[", "0", "]", "\n", "#fwd edge", "\n", "src_nodes", ".", "append", "(", "int", "(", "src_id", ")", "-", "1", ")", "\n", "dest_nodes", ".", "append", "(", "int", "(", "dest_id", ")", "-", "1", ")", "\n", "#bck edge", "\n", "src_nodes", ".", "append", "(", "int", "(", "dest_id", ")", "-", "1", ")", "\n", "dest_nodes", ".", "append", "(", "int", "(", "src_id", ")", "-", "1", ")", "\n", "", "", "graph", "=", "dgl", ".", "graph", "(", "(", "src_nodes", ",", "dest_nodes", ")", ")", "\n", "graph", ".", "ndata", "[", "'feat'", "]", "=", "torch", ".", "tensor", "(", "[", "node_attr", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "node_attr", ")", ")", "]", ")", "\n", "#label = lines[-2][2]", "\n", "#graph.ndata['label'] = torch.tensor([1]) if(label == '1') else torch.tensor([0])", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.construct_dataset": [[376, 393], ["open", "open.readline", "open.close", "graphs.append", "labels.append", "open.readline", "open.readline", "lines.append", "datasets.construct_graph"], "function", ["home.repos.pwc.inspect_result.siddhant-doshi_spin.None.datasets.construct_graph"], ["", "def", "construct_dataset", "(", "filename", ")", ":", "\n", "  ", "file", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "graphs", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "x", "=", "file", ".", "readline", "(", ")", "\n", "lines", "=", "[", "x", "]", "\n", "while", "(", "x", "!=", "''", ")", ":", "\n", "    ", "while", "(", "x", "!=", "'\\n'", ")", ":", "\n", "      ", "x", "=", "file", ".", "readline", "(", ")", "\n", "lines", ".", "append", "(", "x", ")", "\n", "", "graphs", ".", "append", "(", "construct_graph", "(", "lines", ")", ")", "\n", "label", "=", "lines", "[", "-", "2", "]", "[", "2", "]", "\n", "labels", ".", "append", "(", "1", "if", "(", "label", "==", "'1'", ")", "else", "0", ")", "\n", "x", "=", "file", ".", "readline", "(", ")", "\n", "lines", "=", "[", "x", "]", "\n", "", "file", ".", "close", "(", ")", "\n", "return", "graphs", ",", "labels", "\n", "", ""]]}