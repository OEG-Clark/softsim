{"home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.fcn.fcn_festa": [[4, 20], ["backbone.VGG16", "Model", "backbone.VGG16.get_layer", "Lambda", "backbone.VGG16.get_layer", "Lambda", "Add", "Conv2D", "Model", "tensorflow.image.resize_bilinear", "tensorflow.image.resize_bilinear"], "function", ["home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.VGG16"], ["def", "fcn_festa", "(", "patch_size", ",", "test", "=", "True", ",", "noclutter", "=", "True", ")", ":", "\n", "\n", "    ", "nb_classes", "=", "5", "if", "noclutter", "else", "6", "\n", "base_model", "=", "VGG16", "(", "patch_size", ",", "True", ")", "\n", "x4", "=", "base_model", ".", "get_layer", "(", "'block4_pool'", ")", ".", "output", "\n", "x4", "=", "Lambda", "(", "lambda", "image", ":", "tf", ".", "image", ".", "resize_bilinear", "(", "image", ",", "[", "patch_size", ",", "patch_size", "]", ")", ",", "name", "=", "'x4_up'", ")", "(", "x4", ")", "\n", "x5", "=", "base_model", ".", "get_layer", "(", "'block5_pool'", ")", ".", "output", "\n", "x5", "=", "Lambda", "(", "lambda", "image", ":", "tf", ".", "image", ".", "resize_bilinear", "(", "image", ",", "[", "patch_size", ",", "patch_size", "]", ")", ",", "name", "=", "'x5_up'", ")", "(", "x5", ")", "\n", "\n", "x", "=", "Add", "(", "name", "=", "'final_feat'", ")", "(", "[", "x4", ",", "x5", "]", ")", "\n", "x_out", "=", "Conv2D", "(", "nb_classes", ",", "(", "1", ",", "1", ")", ",", "activation", "=", "'softmax'", ",", "padding", "=", "'same'", ",", "name", "=", "'final_out'", ")", "(", "x", ")", "\n", "\n", "if", "test", "==", "True", ":", "\n", "        ", "return", "Model", "(", "base_model", ".", "inputs", ",", "x_out", ",", "name", "=", "'vgg16'", ")", "#fcn_festa')", "\n", "\n", "", "return", "Model", "(", "base_model", ".", "inputs", ",", "[", "x", ",", "x_out", "]", ",", "name", "=", "'vgg16'", ")", "#fcn_festa')", "\n", "\n"]], "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.loss.L_festa": [[6, 65], ["keras.int_shape", "keras.reshape", "tensorflow.gather", "tensorflow.matmul", "tensorflow.reduce_min", "keras.cast", "tensorflow.tile", "keras.reshape", "tensorflow.reduce_min", "keras.cast", "keras.cast", "keras.cast", "keras.cast", "keras.cast", "keras.cast", "keras.cast", "keras.cast", "tensorflow.concat", "tensorflow.sparse_to_dense", "tensorflow.multiply", "tensorflow.reduce_min", "tensorflow.reduce_mean", "keras.shape", "tensorflow.random_shuffle", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.stack", "tensorflow.sparse_to_dense", "keras.flatten", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "keras.repeat_elements", "tensorflow.range", "int", "tensorflow.expand_dims", "tensorflow.square", "keras.repeat_elements", "tensorflow.reduce_max", "int", "int", "tensorflow.constant", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.square", "tensorflow.norm", "tensorflow.range", "int", "tensorflow.constant", "int", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.range", "int", "tensorflow.norm", "tensorflow.norm", "tensorflow.norm", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "L_festa", "(", "_", ",", "y_pred", ")", ":", "\n", "\n", "    ", "alpha", "=", "0.5", "# weight of neighbour in the feature space", "\n", "beta", "=", "1.5", "# weight of neighbour in the image space", "\n", "gamma", "=", "1", "# weight of far-away in the feature space", "\n", "\n", "sample_ratio", "=", "0.01", "# measure only sample_ratio % samples for computational efficiency", "\n", "\n", "_", ",", "h", ",", "w", ",", "c", "=", "K", ".", "int_shape", "(", "y_pred", ")", "\n", "batch_size", "=", "K", ".", "shape", "(", "y_pred", ")", "[", "0", "]", "\n", "# randomly sampling sample_ratio % feature samples", "\n", "y_pred_all_reshape", "=", "K", ".", "reshape", "(", "y_pred", ",", "(", "batch_size", ",", "-", "1", ",", "c", ")", ")", "\n", "random_idxs", "=", "tf", ".", "random_shuffle", "(", "tf", ".", "range", "(", "(", "h", "-", "2", ")", "*", "(", "w", "-", "2", ")", ")", ")", "[", ":", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", "]", "\n", "random_idxs", "=", "random_idxs", "+", "257", "\n", "y_pred_reshape", "=", "tf", ".", "gather", "(", "y_pred_all_reshape", ",", "random_idxs", ",", "axis", "=", "1", ")", "\n", "\n", "# ***************************** cosine similarity ***************************", "\n", "# calculating distance in the feature space", "\n", "xixj", "=", "tf", ".", "matmul", "(", "y_pred_reshape", ",", "tf", ".", "transpose", "(", "y_pred_all_reshape", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "\n", "similarity", "=", "xixj", "/", "(", "tf", ".", "expand_dims", "(", "tf", ".", "norm", "(", "y_pred_reshape", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "*", "tf", ".", "expand_dims", "(", "tf", ".", "norm", "(", "y_pred_all_reshape", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "1", ")", "+", "1e-8", ")", "\n", "faraway_feature", "=", "tf", ".", "reduce_min", "(", "similarity", ",", "axis", "=", "-", "1", ")", "# feature with minimum similarity in the feaure space", "\n", "\n", "# ***************************** euclidean distance ***************************", "\n", "distance", "=", "tf", ".", "expand_dims", "(", "tf", ".", "square", "(", "tf", ".", "norm", "(", "y_pred_reshape", ",", "axis", "=", "-", "1", ")", ")", ",", "axis", "=", "-", "1", ")", "-", "2", "*", "xixj", "+", "tf", ".", "expand_dims", "(", "tf", ".", "square", "(", "tf", ".", "norm", "(", "y_pred_all_reshape", ",", "axis", "=", "-", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "ind_diag", "=", "K", ".", "cast", "(", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ")", ",", "random_idxs", "]", ",", "axis", "=", "1", ")", ",", "'int64'", ")", "\n", "no_diag", "=", "tf", ".", "sparse_to_dense", "(", "ind_diag", ",", "[", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ",", "h", "*", "w", "]", ",", "K", ".", "repeat_elements", "(", "tf", ".", "constant", "(", "[", "1.0", "]", ")", ",", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ",", "0", ")", ",", "validate_indices", "=", "False", ")", "*", "(", "tf", ".", "reduce_max", "(", "distance", ")", "+", "1", ")", "\n", "no_diag", "=", "tf", ".", "tile", "(", "K", ".", "flatten", "(", "no_diag", ")", ",", "(", "batch_size", ",", ")", ")", "\n", "no_diag", "=", "K", ".", "reshape", "(", "no_diag", ",", "(", "batch_size", ",", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ",", "h", "*", "w", ")", ")", "\n", "\n", "neighbour_feature", "=", "tf", ".", "reduce_min", "(", "distance", "+", "no_diag", ",", "axis", "=", "-", "1", ")", "# feature with minimum distance in the feature space", "\n", "\n", "# get indexes of 8-neighbouring pixels of the center pixel", "\n", "random_idxs_L", "=", "random_idxs", "-", "1", "\n", "random_idxs_R", "=", "random_idxs", "+", "1", "\n", "random_idxs_TL", "=", "random_idxs", "-", "h", "-", "1", "\n", "random_idxs_T", "=", "random_idxs", "-", "h", "\n", "random_idxs_TR", "=", "random_idxs", "-", "h", "+", "1", "\n", "random_idxs_BL", "=", "random_idxs", "+", "h", "-", "1", "\n", "random_idxs_B", "=", "random_idxs", "+", "h", "\n", "random_idxs_BR", "=", "random_idxs", "+", "h", "+", "1", "\n", "\n", "ind_L", "=", "K", ".", "cast", "(", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ")", ",", "random_idxs_L", "]", ",", "axis", "=", "1", ")", ",", "'int64'", ")", "\n", "ind_R", "=", "K", ".", "cast", "(", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ")", ",", "random_idxs_R", "]", ",", "axis", "=", "1", ")", ",", "'int64'", ")", "\n", "ind_TL", "=", "K", ".", "cast", "(", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ")", ",", "random_idxs_TL", "]", ",", "axis", "=", "1", ")", ",", "'int64'", ")", "\n", "ind_T", "=", "K", ".", "cast", "(", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ")", ",", "random_idxs_T", "]", ",", "axis", "=", "1", ")", ",", "'int64'", ")", "\n", "ind_TR", "=", "K", ".", "cast", "(", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ")", ",", "random_idxs_TR", "]", ",", "axis", "=", "1", ")", ",", "'int64'", ")", "\n", "ind_BL", "=", "K", ".", "cast", "(", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ")", ",", "random_idxs_BL", "]", ",", "axis", "=", "1", ")", ",", "'int64'", ")", "\n", "ind_B", "=", "K", ".", "cast", "(", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ")", ",", "random_idxs_B", "]", ",", "axis", "=", "1", ")", ",", "'int64'", ")", "\n", "ind_BR", "=", "K", ".", "cast", "(", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ")", ",", "random_idxs_BR", "]", ",", "axis", "=", "1", ")", ",", "'int64'", ")", "\n", "ind", "=", "tf", ".", "concat", "(", "[", "ind_L", ",", "ind_R", ",", "ind_TL", ",", "ind_T", ",", "ind_TR", ",", "ind_BL", ",", "ind_B", ",", "ind_BR", "]", ",", "axis", "=", "0", ")", "\n", "mask", "=", "tf", ".", "sparse_to_dense", "(", "ind", ",", "[", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", ",", "h", "*", "w", "]", ",", "K", ".", "repeat_elements", "(", "tf", ".", "constant", "(", "[", "1.0", "]", ")", ",", "int", "(", "h", "*", "w", "*", "sample_ratio", ")", "*", "8", ",", "0", ")", ",", "validate_indices", "=", "False", ")", "\n", "distance_mask", "=", "tf", ".", "multiply", "(", "distance", "+", "no_diag", ",", "mask", ")", "# calculate distances between 8-neighbouring pixels and the center pixel", "\n", "neighbour_spatial", "=", "tf", ".", "reduce_min", "(", "distance_mask", ",", "axis", "=", "-", "1", ")", "# feature with minimum distance in the image space", "\n", "\n", "delta", "=", "alpha", "*", "neighbour_feature", "+", "+", "beta", "*", "neighbour_spatial", "+", "gamma", "*", "faraway_feature", "\n", "\n", "loss_reg", "=", "tf", ".", "reduce_mean", "(", "delta", ")", "\n", "return", "loss_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.dataloader": [[15, 40], ["range", "range", "numpy.float32", "numpy.uint8", "numpy.float32", "numpy.uint8", "print", "len", "print", "utils.img2patch", "len", "print", "utils.img2patch", "numpy.shape", "str", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.img2patch", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.img2patch"], ["def", "dataloader", "(", "patch_size", "=", "256", ",", "stride_size", "=", "64", ",", "an_type", "=", "'polygon'", ",", "an_id", "=", "1", ",", "noclutter", "=", "True", ",", "remove_null", "=", "True", ")", ":", "\n", "\n", "# path of sparse label", "\n", "    ", "sparse_label_path", "=", "folder_path", "+", "an_type", "+", "'/an'", "+", "str", "(", "an_id", ")", "+", "'/mask_'", "\n", "\n", "# crop images to patches", "\n", "for", "fid", "in", "range", "(", "len", "(", "trainval_set", ")", ")", ":", "\n", "        ", "print", "(", "im_header", "+", "str", "(", "trainval_set", "[", "fid", "]", ")", "+", "'.png'", ")", "\n", "X", ",", "y", "=", "img2patch", "(", "im_header", "+", "str", "(", "trainval_set", "[", "fid", "]", ")", "+", "'.png'", ",", "sparse_label_path", ",", "patch_size", ",", "stride_size", ",", "noclutter", ",", "remove_null", ")", "\n", "X_tra", "=", "np", ".", "concatenate", "(", "[", "X_tra", ",", "X", "]", ",", "axis", "=", "0", ")", "if", "fid", ">", "0", "else", "X", "\n", "y_tra", "=", "np", ".", "concatenate", "(", "[", "y_tra", ",", "y", "]", ",", "axis", "=", "0", ")", "if", "fid", ">", "0", "else", "y", "\n", "\n", "", "for", "fid", "in", "range", "(", "len", "(", "test_set", ")", ")", ":", "\n", "        ", "print", "(", "im_header", "+", "str", "(", "test_set", "[", "fid", "]", ")", "+", "'.tif'", ")", "\n", "X", ",", "y", "=", "img2patch", "(", "im_header", "+", "str", "(", "test_set", "[", "fid", "]", ")", "+", "'.tif'", ",", "gt_path", ",", "patch_size", ",", "stride_size", ",", "noclutter", ",", "remove_null", ")", "\n", "X_test", "=", "np", ".", "concatenate", "(", "[", "X_test", ",", "X", "]", ",", "axis", "=", "0", ")", "if", "fid", ">", "0", "else", "X", "\n", "y_test", "=", "np", ".", "concatenate", "(", "[", "y_test", ",", "y", "]", ",", "axis", "=", "0", ")", "if", "fid", ">", "0", "else", "y", "\n", "\n", "", "X_tra", "=", "np", ".", "float32", "(", "X_tra", ")", "\n", "y_tra", "=", "np", ".", "uint8", "(", "y_tra", ")", "\n", "X_test", "=", "np", ".", "float32", "(", "X_test", ")", "\n", "y_test", "=", "np", ".", "uint8", "(", "y_test", ")", "\n", "print", "(", "'the size of training data:'", ",", "np", ".", "shape", "(", "X_tra", ")", ")", "\n", "\n", "return", "X_tra", ",", "y_tra", ",", "X_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.img2patch": [[42, 80], ["cv2.imread", "utils.bgr2index", "numpy.shape", "int", "int", "range", "numpy.float32", "numpy.uint8", "cv2.imread", "numpy.floor", "numpy.floor", "range", "np.float32.append", "np.uint8.append", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.bgr2index"], ["", "def", "img2patch", "(", "filename", ",", "label_path", ",", "patch_size", "=", "256", ",", "stride_size", "=", "256", ",", "noclutter", "=", "True", ",", "remove_null", "=", "True", ")", ":", "\n", "\n", "    ", "im", "=", "cv2", ".", "imread", "(", "im_path", "+", "filename", "[", ":", "-", "4", "]", "+", "'.tif'", ")", "\n", "gt", "=", "bgr2index", "(", "cv2", ".", "imread", "(", "label_path", "+", "filename", ")", ")", "\n", "gt", "=", "gt", "[", ":", ",", ":", ",", "0", ":", "5", "]", "if", "noclutter", "else", "gt", "\n", "\n", "# crop an image/mask to patches", "\n", "X", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "im_row", ",", "im_col", ",", "_", "=", "np", ".", "shape", "(", "im", ")", "\n", "steps_row", "=", "int", "(", "np", ".", "floor", "(", "(", "im_row", "-", "(", "patch_size", "-", "stride_size", ")", ")", "/", "stride_size", ")", ")", "\n", "steps_col", "=", "int", "(", "np", ".", "floor", "(", "(", "im_col", "-", "(", "patch_size", "-", "stride_size", ")", ")", "/", "stride_size", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "steps_row", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "steps_col", "+", "1", ")", ":", "\n", "            ", "if", "i", "==", "steps_row", ":", "\n", "                ", "if", "j", "==", "steps_col", ":", "\n", "                    ", "X_patch", "=", "im", "[", "-", "patch_size", ":", "im_row", ",", "-", "patch_size", ":", "im_col", ",", ":", "]", "\n", "y_patch", "=", "gt", "[", "-", "patch_size", ":", "im_row", ",", "-", "patch_size", ":", "im_col", ",", ":", "]", "\n", "", "else", ":", "\n", "                    ", "X_patch", "=", "im", "[", "-", "patch_size", ":", "im_row", ",", "(", "j", "*", "stride_size", ")", ":", "(", "j", "*", "stride_size", "+", "patch_size", ")", ",", ":", "]", "\n", "y_patch", "=", "gt", "[", "-", "patch_size", ":", "im_row", ",", "(", "j", "*", "stride_size", ")", ":", "(", "j", "*", "stride_size", "+", "patch_size", ")", ",", ":", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "j", "==", "steps_col", ":", "\n", "                    ", "X_patch", "=", "im", "[", "(", "i", "*", "stride_size", ")", ":", "(", "i", "*", "stride_size", "+", "patch_size", ")", ",", "-", "patch_size", ":", "im_col", ",", ":", "]", "\n", "y_patch", "=", "gt", "[", "(", "i", "*", "stride_size", ")", ":", "(", "i", "*", "stride_size", "+", "patch_size", ")", ",", "-", "patch_size", ":", "im_col", ",", ":", "]", "\n", "", "else", ":", "\n", "                    ", "X_patch", "=", "im", "[", "(", "i", "*", "stride_size", ")", ":", "(", "i", "*", "stride_size", "+", "patch_size", ")", ",", "(", "j", "*", "stride_size", ")", ":", "(", "j", "*", "stride_size", "+", "patch_size", ")", ",", ":", "]", "\n", "y_patch", "=", "gt", "[", "(", "i", "*", "stride_size", ")", ":", "(", "i", "*", "stride_size", "+", "patch_size", ")", ",", "(", "j", "*", "stride_size", ")", ":", "(", "j", "*", "stride_size", "+", "patch_size", ")", ",", ":", "]", "\n", "\n", "", "", "if", "remove_null", "and", "np", ".", "sum", "(", "y_patch", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "X", ".", "append", "(", "X_patch", ")", "\n", "y", ".", "append", "(", "y_patch", ")", "\n", "\n", "", "", "X", "=", "np", ".", "float32", "(", "X", ")", "\n", "y", "=", "np", ".", "uint8", "(", "y", ")", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.bgr2index": [[81, 96], ["numpy.shape", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "bgr2index", "(", "gt_bgr", ",", "eroded", "=", "False", ")", ":", "\n", "# mapping BGR W x H x 3 image to W x H x C class index", "\n", "# opencv read image to BGR format", "\n", "    ", "im_col", ",", "im_row", ",", "_", "=", "np", ".", "shape", "(", "gt_bgr", ")", "\n", "gt", "=", "np", ".", "zeros", "(", "(", "im_col", ",", "im_row", ",", "6", ")", ")", "if", "not", "eroded", "else", "np", ".", "zeros", "(", "(", "im_col", ",", "im_row", ",", "7", ")", ")", "\n", "gt", "[", "(", "gt_bgr", "[", ":", ",", ":", ",", "2", "]", "==", "255", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "1", "]", "==", "255", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "0", "]", "==", "255", ")", ",", "0", "]", "=", "1", "\n", "gt", "[", "(", "gt_bgr", "[", ":", ",", ":", ",", "2", "]", "==", "0", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "1", "]", "==", "0", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "0", "]", "==", "255", ")", ",", "1", "]", "=", "1", "\n", "gt", "[", "(", "gt_bgr", "[", ":", ",", ":", ",", "2", "]", "==", "0", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "1", "]", "==", "255", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "0", "]", "==", "255", ")", ",", "2", "]", "=", "1", "\n", "gt", "[", "(", "gt_bgr", "[", ":", ",", ":", ",", "2", "]", "==", "0", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "1", "]", "==", "255", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "0", "]", "==", "0", ")", ",", "3", "]", "=", "1", "\n", "gt", "[", "(", "gt_bgr", "[", ":", ",", ":", ",", "2", "]", "==", "255", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "1", "]", "==", "255", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "0", "]", "==", "0", ")", ",", "4", "]", "=", "1", "\n", "gt", "[", "(", "gt_bgr", "[", ":", ",", ":", ",", "2", "]", "==", "255", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "1", "]", "==", "0", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "0", "]", "==", "0", ")", ",", "5", "]", "=", "1", "\n", "if", "eroded", ":", "\n", "        ", "gt", "[", "(", "gt_bgr", "[", ":", ",", ":", ",", "2", "]", "==", "0", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "1", "]", "==", "0", ")", "&", "(", "gt_bgr", "[", ":", ",", ":", ",", "0", "]", "==", "0", ")", ",", "6", "]", "=", "1", "\n", "\n", "", "return", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.index2bgr": [[97, 128], ["numpy.shape", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "index2bgr", "(", "c_map", ",", "bgr", "=", "True", ")", ":", "\n", "\n", "# mapping W x H x 1 class index to W x H x 3 BGR image", "\n", "    ", "im_col", ",", "im_row", "=", "np", ".", "shape", "(", "c_map", ")", "\n", "c_map_r", "=", "np", ".", "zeros", "(", "(", "im_col", ",", "im_row", ")", ",", "'uint8'", ")", "\n", "c_map_g", "=", "np", ".", "zeros", "(", "(", "im_col", ",", "im_row", ")", ",", "'uint8'", ")", "\n", "c_map_b", "=", "np", ".", "zeros", "(", "(", "im_col", ",", "im_row", ")", ",", "'uint8'", ")", "\n", "c_map_r", "[", "c_map", "==", "0", "]", "=", "255", "\n", "c_map_r", "[", "c_map", "==", "1", "]", "=", "0", "\n", "c_map_r", "[", "c_map", "==", "2", "]", "=", "0", "\n", "c_map_r", "[", "c_map", "==", "3", "]", "=", "0", "\n", "c_map_r", "[", "c_map", "==", "4", "]", "=", "255", "\n", "c_map_r", "[", "c_map", "==", "5", "]", "=", "255", "\n", "c_map_g", "[", "c_map", "==", "0", "]", "=", "255", "\n", "c_map_g", "[", "c_map", "==", "1", "]", "=", "0", "\n", "c_map_g", "[", "c_map", "==", "2", "]", "=", "255", "\n", "c_map_g", "[", "c_map", "==", "3", "]", "=", "255", "\n", "c_map_g", "[", "c_map", "==", "4", "]", "=", "255", "\n", "c_map_g", "[", "c_map", "==", "5", "]", "=", "0", "\n", "c_map_b", "[", "c_map", "==", "0", "]", "=", "255", "\n", "c_map_b", "[", "c_map", "==", "1", "]", "=", "255", "\n", "c_map_b", "[", "c_map", "==", "2", "]", "=", "255", "\n", "c_map_b", "[", "c_map", "==", "3", "]", "=", "0", "\n", "c_map_b", "[", "c_map", "==", "4", "]", "=", "0", "\n", "c_map_b", "[", "c_map", "==", "5", "]", "=", "0", "\n", "c_map_rgb", "=", "np", ".", "zeros", "(", "(", "im_col", ",", "im_row", ",", "3", ")", ",", "'uint8'", ")", ";", "\n", "c_map_rgb", "[", ":", ",", ":", ",", "0", "]", "=", "c_map_b", "if", "bgr", "else", "c_map_r", "\n", "c_map_rgb", "[", ":", ",", ":", ",", "1", "]", "=", "c_map_g", "\n", "c_map_rgb", "[", ":", ",", ":", ",", "2", "]", "=", "c_map_r", "if", "bgr", "else", "c_map_b", "\n", "\n", "return", "c_map_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.eval_image": [[131, 161], ["numpy.shape", "numpy.reshape", "numpy.reshape", "numpy.delete", "numpy.delete", "sklearn.metrics.confusion_matrix", "range", "numpy.float32", "numpy.float32", "len", "len", "numpy.where", "numpy.float32", "len", "numpy.sum", "numpy.sum", "len", "len", "len", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["None"], ["", "def", "eval_image", "(", "gt", ",", "pred", ",", "acc1", ",", "acc2", ",", "acc3", ",", "acc4", ",", "acc5", ",", "noclutter", "=", "True", ")", ":", "\n", "\n", "    ", "im_row", ",", "im_col", "=", "np", ".", "shape", "(", "pred", ")", "\n", "cal_classes", "=", "5", "if", "noclutter", "else", "6", "# no. of classes to calculate scores", "\n", "\n", "if", "noclutter", ":", "\n", "        ", "gt", "[", "gt", "==", "5", "]", "=", "6", "# pixels in clutter are not considered (regarding them as boundary)", "\n", "\n", "", "pred", "[", "gt", "==", "6", "]", "=", "6", "# pixels on the boundary are not considered for calculating scores", "\n", "OA", "=", "np", ".", "float32", "(", "len", "(", "np", ".", "where", "(", "(", "np", ".", "float32", "(", "pred", ")", "-", "np", ".", "float32", "(", "gt", ")", ")", "==", "0", ")", "[", "0", "]", ")", "-", "len", "(", "np", ".", "where", "(", "gt", "==", "6", ")", "[", "0", "]", ")", ")", "/", "np", ".", "float32", "(", "im_col", "*", "im_row", "-", "len", "(", "np", ".", "where", "(", "gt", "==", "6", ")", "[", "0", "]", ")", ")", "\n", "acc1", "=", "acc1", "+", "len", "(", "np", ".", "where", "(", "(", "np", ".", "float32", "(", "pred", ")", "-", "np", ".", "float32", "(", "gt", ")", ")", "==", "0", ")", "[", "0", "]", ")", "-", "len", "(", "np", ".", "where", "(", "gt", "==", "6", ")", "[", "0", "]", ")", "\n", "acc2", "=", "acc2", "+", "im_col", "*", "im_row", "-", "len", "(", "np", ".", "where", "(", "gt", "==", "6", ")", "[", "0", "]", ")", "\n", "pred1", "=", "np", ".", "reshape", "(", "pred", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "gt1", "=", "np", ".", "reshape", "(", "gt", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "idx", "=", "np", ".", "where", "(", "gt1", "==", "6", ")", "[", "0", "]", "\n", "pred1", "=", "np", ".", "delete", "(", "pred1", ",", "idx", ")", "\n", "gt1", "=", "np", ".", "delete", "(", "gt1", ",", "idx", ")", "\n", "CM", "=", "confusion_matrix", "(", "pred1", ",", "gt1", ")", "\n", "for", "i", "in", "range", "(", "cal_classes", ")", ":", "\n", "        ", "tp", "=", "np", ".", "float32", "(", "CM", "[", "i", ",", "i", "]", ")", "\n", "acc3", "[", "i", "]", "=", "acc3", "[", "i", "]", "+", "tp", "\n", "fp", "=", "np", ".", "sum", "(", "CM", "[", ":", ",", "i", "]", ")", "-", "tp", "\n", "acc4", "[", "i", "]", "=", "acc4", "[", "i", "]", "+", "fp", "\n", "fn", "=", "np", ".", "sum", "(", "CM", "[", "i", ",", ":", "]", ")", "-", "tp", "\n", "acc5", "[", "i", "]", "=", "acc5", "[", "i", "]", "+", "fn", "\n", "P", "=", "tp", "/", "(", "tp", "+", "fp", "+", "eps", ")", "\n", "R", "=", "tp", "/", "(", "tp", "+", "fn", "+", "eps", ")", "\n", "f1", "=", "2", "*", "(", "P", "*", "R", ")", "/", "(", "P", "+", "R", "+", "eps", ")", "\n", "\n", "", "return", "acc1", ",", "acc2", ",", "acc3", ",", "acc4", ",", "acc5", "\n", "\n"]], "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.pred_image": [[163, 197], ["utils.img2patch", "model.predict", "numpy.shape", "int", "int", "numpy.zeros", "numpy.zeros", "range", "cv2.imread", "numpy.floor", "numpy.floor", "range", "numpy.shape", "numpy.shape", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape"], "function", ["home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.img2patch"], ["", "def", "pred_image", "(", "filename", ",", "model", ",", "patch_size", ",", "stride_size", ")", ":", "\n", "\n", "# croppping an image into patches for prediction    ", "\n", "    ", "X", ",", "_", "=", "img2patch", "(", "filename", ",", "gt_path", ",", "patch_size", ",", "stride_size", ",", "True", ",", "False", ")", "\n", "pred_patches", "=", "model", ".", "predict", "(", "X", ")", "\n", "\n", "# rearranging patchess into an image", "\n", "# For pixels with multiple predictions, we take their averages", "\n", "im_row", ",", "im_col", ",", "_", "=", "np", ".", "shape", "(", "cv2", ".", "imread", "(", "im_path", "+", "filename", ")", ")", "\n", "steps_col", "=", "int", "(", "np", ".", "floor", "(", "(", "im_col", "-", "(", "patch_size", "-", "stride_size", ")", ")", "/", "stride_size", ")", ")", "\n", "steps_row", "=", "int", "(", "np", ".", "floor", "(", "(", "im_row", "-", "(", "patch_size", "-", "stride_size", ")", ")", "/", "stride_size", ")", ")", "\n", "im_out", "=", "np", ".", "zeros", "(", "(", "im_row", ",", "im_col", ",", "np", ".", "shape", "(", "pred_patches", ")", "[", "-", "1", "]", ")", ")", "\n", "im_index", "=", "np", ".", "zeros", "(", "(", "im_row", ",", "im_col", ",", "np", ".", "shape", "(", "pred_patches", ")", "[", "-", "1", "]", ")", ")", "# counting the number of predictions for each pixel", "\n", "\n", "patch_id", "=", "0", "\n", "for", "i", "in", "range", "(", "steps_row", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "steps_col", "+", "1", ")", ":", "\n", "            ", "if", "i", "==", "steps_row", ":", "\n", "                ", "if", "j", "==", "steps_col", ":", "\n", "                    ", "im_out", "[", "-", "patch_size", ":", "im_row", ",", "-", "patch_size", ":", "im_col", ",", ":", "]", "+=", "pred_patches", "[", "patch_id", "]", "\n", "im_index", "[", "-", "patch_size", ":", "im_row", ",", "-", "patch_size", ":", "im_col", ",", ":", "]", "+=", "np", ".", "ones", "(", "(", "patch_size", ",", "patch_size", ",", "np", ".", "shape", "(", "pred_patches", ")", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "im_out", "[", "-", "patch_size", ":", "im_row", ",", "(", "j", "*", "stride_size", ")", ":", "(", "j", "*", "stride_size", "+", "patch_size", ")", ",", ":", "]", "+=", "pred_patches", "[", "patch_id", "]", "\n", "im_index", "[", "-", "patch_size", ":", "im_row", ",", "(", "j", "*", "stride_size", ")", ":", "(", "j", "*", "stride_size", "+", "patch_size", ")", ",", ":", "]", "+=", "np", ".", "ones", "(", "(", "patch_size", ",", "patch_size", ",", "np", ".", "shape", "(", "pred_patches", ")", "[", "-", "1", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "j", "==", "steps_col", ":", "\n", "                    ", "im_out", "[", "(", "i", "*", "stride_size", ")", ":", "(", "i", "*", "stride_size", "+", "patch_size", ")", ",", "-", "patch_size", ":", "im_col", ",", ":", "]", "+=", "pred_patches", "[", "patch_id", "]", "\n", "im_index", "[", "(", "i", "*", "stride_size", ")", ":", "(", "i", "*", "stride_size", "+", "patch_size", ")", ",", "-", "patch_size", ":", "im_col", ",", ":", "]", "+=", "np", ".", "ones", "(", "(", "patch_size", ",", "patch_size", ",", "np", ".", "shape", "(", "pred_patches", ")", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "im_out", "[", "(", "i", "*", "stride_size", ")", ":", "(", "i", "*", "stride_size", "+", "patch_size", ")", ",", "(", "j", "*", "stride_size", ")", ":", "(", "j", "*", "stride_size", "+", "patch_size", ")", ",", ":", "]", "+=", "pred_patches", "[", "patch_id", "]", "\n", "im_index", "[", "(", "i", "*", "stride_size", ")", ":", "(", "i", "*", "stride_size", "+", "patch_size", ")", ",", "(", "j", "*", "stride_size", ")", ":", "(", "j", "*", "stride_size", "+", "patch_size", ")", ",", ":", "]", "+=", "np", ".", "ones", "(", "(", "patch_size", ",", "patch_size", ",", "np", ".", "shape", "(", "pred_patches", ")", "[", "-", "1", "]", ")", ")", "\n", "", "", "patch_id", "+=", "1", "\n", "\n", "", "", "return", "im_out", "/", "im_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.TestModel": [[198, 247], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.zeros", "numpy.zeros", "range", "numpy.mean", "numpy.mean", "print", "os.path.isdir", "print", "os.mkdir", "len", "print", "utils.bgr2index", "utils.pred_image", "numpy.argmax", "numpy.argmax", "utils.eval_image", "cv2.imwrite", "print", "len", "cv2.imread", "utils.index2bgr", "str"], "function", ["home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.bgr2index", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.pred_image", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.eval_image", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.utils.index2bgr"], ["", "def", "TestModel", "(", "model", ",", "output_folder", "=", "'model'", ",", "patch_size", "=", "256", ",", "stride_size", "=", "128", ",", "noclutter", "=", "True", ")", ":", "\n", "\n", "# path for saving output", "\n", "    ", "output_path", "=", "folder_path", "+", "'outputs/'", "+", "output_folder", "+", "'/'", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_path", ")", ":", "\n", "        ", "print", "(", "'The target folder is created.'", ")", "\n", "os", ".", "mkdir", "(", "output_path", ")", "\n", "\n", "", "nb_classes", "=", "5", "if", "noclutter", "else", "6", "\n", "acc1", "=", "0.0", "# accumulator for correctly classified pixels", "\n", "acc2", "=", "0.0", "# accumulator for all valid pixels (not including label 0 and 6)", "\n", "acc3", "=", "np", ".", "zeros", "(", "(", "nb_classes", ",", "1", ")", ")", "# accumulator for true positives", "\n", "acc4", "=", "np", ".", "zeros", "(", "(", "nb_classes", ",", "1", ")", ")", "# accumulator for false positives", "\n", "acc5", "=", "np", ".", "zeros", "(", "(", "nb_classes", ",", "1", ")", ")", "# accumulator for false negatives", "\n", "\n", "# predicting and measuring all images", "\n", "for", "im_id", "in", "range", "(", "len", "(", "test_set", ")", ")", ":", "\n", "        ", "filename", "=", "im_header", "+", "str", "(", "test_set", "[", "im_id", "]", ")", "+", "'.tif'", "\n", "print", "(", "im_id", "+", "1", ",", "'/'", ",", "len", "(", "test_set", ")", ",", "': predicting '", ",", "filename", ")", "\n", "gt", "=", "bgr2index", "(", "cv2", ".", "imread", "(", "gt_path", "+", "filename", ")", ",", "True", ")", "\n", "\n", "# predict one image", "\n", "pred", "=", "pred_image", "(", "filename", ",", "model", ",", "patch_size", ",", "stride_size", ")", "\n", "pred", "=", "np", ".", "argmax", "(", "pred", ",", "-", "1", ")", "\n", "gt", "=", "np", ".", "argmax", "(", "gt", ",", "-", "1", ")", "\n", "\n", "# evaluate one image", "\n", "acc1", ",", "acc2", ",", "acc3", ",", "acc4", ",", "acc5", "=", "eval_image", "(", "gt", ",", "pred", ",", "acc1", ",", "acc2", ",", "acc3", ",", "acc4", ",", "acc5", ",", "noclutter", ")", "\n", "cv2", ".", "imwrite", "(", "output_path", "+", "filename", ",", "index2bgr", "(", "pred", ",", "True", ")", ")", "\n", "print", "(", "'Prediction is done. The output is saved in '", ",", "output_path", ")", "\n", "\n", "", "OA", "=", "acc1", "/", "acc2", "\n", "\n", "f1", "=", "np", ".", "zeros", "(", "(", "nb_classes", ",", "1", ")", ")", ";", "\n", "iou", "=", "np", ".", "zeros", "(", "(", "nb_classes", ",", "1", ")", ")", ";", "\n", "#ca = np.zeros((nb_classes, 1));", "\n", "for", "i", "in", "range", "(", "nb_classes", ")", ":", "\n", "        ", "P", "=", "acc3", "[", "i", "]", "/", "(", "acc3", "[", "i", "]", "+", "acc4", "[", "i", "]", ")", "\n", "R", "=", "acc3", "[", "i", "]", "/", "(", "acc3", "[", "i", "]", "+", "acc5", "[", "i", "]", ")", "\n", "f1", "[", "i", "]", "=", "2", "*", "(", "P", "*", "R", ")", "/", "(", "P", "+", "R", ")", "\n", "iou", "[", "i", "]", "=", "acc3", "[", "i", "]", "/", "(", "acc3", "[", "i", "]", "+", "acc4", "[", "i", "]", "+", "acc5", "[", "i", "]", ")", "\n", "#ca[i] =  acc3[i]/(acc3[i]+acc4[i])", "\n", "\n", "", "f1_mean", "=", "np", ".", "mean", "(", "f1", ")", "\n", "iou_mean", "=", "np", ".", "mean", "(", "iou", ")", "\n", "#ca_mean = np.mean(ca)", "\n", "print", "(", "'mean f1:'", ",", "f1_mean", ",", "'\\nmean iou:'", ",", "iou_mean", ",", "'\\nOA:'", ",", "OA", ")", "\n", "\n", "return", "'All predicitions are done, and output images are saved.'", "\n", "\n"]], "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.VGG16": [[7, 40], ["keras.layers.Input", "backbone.conv2d", "backbone.conv2d", "backbone.conv2d", "backbone.conv2d", "backbone.conv2d", "backbone.conv2d", "backbone.conv2d", "backbone.conv2d", "backbone.conv2d", "backbone.conv2d", "backbone.conv2d", "backbone.conv2d", "backbone.conv2d", "keras.models.Model", "keras.layers.pooling.MaxPooling2D", "keras.layers.pooling.MaxPooling2D", "keras.layers.pooling.MaxPooling2D", "keras.layers.pooling.MaxPooling2D", "keras.layers.pooling.MaxPooling2D"], "function", ["home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d", "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d"], ["def", "VGG16", "(", "patch_size", ",", "bn", "=", "False", ")", ":", "\n", "\n", "    ", "img_input", "=", "Input", "(", "shape", "=", "(", "patch_size", ",", "patch_size", ",", "3", ")", ",", "name", "=", "'input1'", ")", "\n", "x", "=", "conv2d", "(", "img_input", ",", "64", ",", "3", ",", "'same'", ",", "'block1_conv1'", ",", "bn", ")", "\n", "x", "=", "conv2d", "(", "x", ",", "64", ",", "3", ",", "'same'", ",", "'block1_conv2'", ",", "bn", ")", "\n", "x", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block1_pool'", ")", "(", "x", ")", "\n", "\n", "# Block 2", "\n", "x", "=", "conv2d", "(", "x", ",", "128", ",", "3", ",", "'same'", ",", "'block2_conv1'", ",", "bn", ")", "\n", "x", "=", "conv2d", "(", "x", ",", "128", ",", "3", ",", "'same'", ",", "'block2_conv2'", ",", "bn", ")", "\n", "x", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block2_pool'", ")", "(", "x", ")", "\n", "\n", "# Block 3", "\n", "x", "=", "conv2d", "(", "x", ",", "256", ",", "3", ",", "'same'", ",", "'block3_conv1'", ",", "bn", ")", "\n", "x", "=", "conv2d", "(", "x", ",", "256", ",", "3", ",", "'same'", ",", "'block3_conv2'", ",", "bn", ")", "\n", "x", "=", "conv2d", "(", "x", ",", "256", ",", "3", ",", "'same'", ",", "'block3_conv3'", ",", "bn", ")", "\n", "x", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block3_pool'", ")", "(", "x", ")", "\n", "\n", "# Block 4", "\n", "x", "=", "conv2d", "(", "x", ",", "512", ",", "3", ",", "'same'", ",", "'block4_conv1'", ",", "bn", ")", "\n", "x", "=", "conv2d", "(", "x", ",", "512", ",", "3", ",", "'same'", ",", "'block4_conv2'", ",", "bn", ")", "\n", "x", "=", "conv2d", "(", "x", ",", "512", ",", "3", ",", "'same'", ",", "'block4_conv3'", ",", "bn", ")", "\n", "x", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block4_pool'", ")", "(", "x", ")", "\n", "\n", "# Block 5", "\n", "x", "=", "conv2d", "(", "x", ",", "512", ",", "3", ",", "'same'", ",", "'block5_conv1'", ",", "bn", ")", "\n", "x", "=", "conv2d", "(", "x", ",", "512", ",", "3", ",", "'same'", ",", "'block5_conv2'", ",", "bn", ")", "\n", "x", "=", "conv2d", "(", "x", ",", "512", ",", "3", ",", "'same'", ",", "'block5_conv3'", ",", "bn", ")", "\n", "x", "=", "MaxPooling2D", "(", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block5_pool'", ")", "(", "x", ")", "\n", "\n", "model", "=", "Model", "(", "img_input", ",", "x", ",", "name", "=", "'vgg16'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Hua-YS_Semantic-Segmentation-with-Sparse-Labels.None.backbone.conv2d": [[41, 47], ["keras.layers.convolutional.Conv2D", "keras.layers.Activation", "keras.layers.BatchNormalization"], "function", ["None"], ["", "def", "conv2d", "(", "x", ",", "nb_filters", ",", "filter_size", ",", "padding", ",", "name", ",", "bn", "=", "False", ")", ":", "\n", "    ", "x", "=", "Conv2D", "(", "nb_filters", ",", "(", "filter_size", ",", "filter_size", ")", ",", "padding", "=", "padding", ",", "name", "=", "name", ")", "(", "x", ")", "\n", "if", "bn", "==", "True", ":", "\n", "        ", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "", "x", "=", "Activation", "(", "'relu'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]]}