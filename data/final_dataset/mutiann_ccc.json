{"home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.__init__": [[51, 78], ["pbconcept.ProbaseConcept", "set().union", "tqdm.tqdm", "concept_freqs.sort", "inst_freqs.sort", "entity_freqs.sort", "dict", "dict", "dict", "set", "conceptualize_proposer.Proposer._probase.get_concept_freq", "conceptualize_proposer.Proposer._probase.get_instance_freq", "concept_freqs.append", "inst_freqs.append", "entity_freqs.append", "set", "conceptualize_proposer.Proposer._probase.instance2idx.keys", "conceptualize_proposer.Proposer._probase.concept2idx.keys"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_probase", "is", "not", "None", ":", "\n", "            ", "return", "\n", "", "Proposer", ".", "_probase", "=", "ProbaseConcept", "(", "probase_path", ")", "\n", "all_entities", "=", "set", "(", "self", ".", "_probase", ".", "concept2idx", ".", "keys", "(", ")", ")", ".", "union", "(", "set", "(", "self", ".", "_probase", ".", "instance2idx", ".", "keys", "(", ")", ")", ")", "\n", "entity_freqs", "=", "[", "]", "\n", "concept_freqs", "=", "[", "]", "\n", "inst_freqs", "=", "[", "]", "\n", "for", "entity", "in", "tqdm", ".", "tqdm", "(", "all_entities", ")", ":", "\n", "            ", "c_freq", "=", "self", ".", "_probase", ".", "get_concept_freq", "(", "entity", ")", "\n", "i_freq", "=", "self", ".", "_probase", ".", "get_instance_freq", "(", "entity", ")", "\n", "e_freq", "=", "c_freq", "+", "i_freq", "\n", "concept_freqs", ".", "append", "(", "(", "entity", ",", "c_freq", ")", ")", "\n", "inst_freqs", ".", "append", "(", "(", "entity", ",", "i_freq", ")", ")", "\n", "entity_freqs", ".", "append", "(", "(", "entity", ",", "e_freq", ")", ")", "\n", "\n", "", "concept_freqs", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ",", "reverse", "=", "True", ")", "\n", "inst_freqs", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ",", "reverse", "=", "True", ")", "\n", "entity_freqs", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "Proposer", ".", "concept_freqs", "=", "concept_freqs", "\n", "Proposer", ".", "inst_freqs", "=", "inst_freqs", "\n", "Proposer", ".", "entity_freqs", "=", "entity_freqs", "\n", "\n", "Proposer", ".", "concept_freq_map", "=", "dict", "(", "concept_freqs", ")", "\n", "Proposer", ".", "inst_freq_map", "=", "dict", "(", "inst_freqs", ")", "\n", "Proposer", ".", "entity_freq_map", "=", "dict", "(", "entity_freqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.is_a": [[79, 86], ["any"], "methods", ["None"], ["", "def", "is_a", "(", "self", ",", "x", ":", "str", ",", "y", ":", "str", ")", ":", "\n", "        ", "if", "x", "not", "in", "self", ".", "_probase", ".", "instance2idx", "or", "y", "not", "in", "self", ".", "_probase", ".", "concept2idx", ":", "\n", "            ", "return", "False", "\n", "", "x_id", "=", "self", ".", "_probase", ".", "instance2idx", "[", "x", "]", "\n", "y_id", "=", "self", ".", "_probase", ".", "concept2idx", "[", "y", "]", "\n", "concept_inverted_list", "=", "self", ".", "_probase", ".", "concept_inverted_list", "[", "y_id", "]", "\n", "return", "any", "(", "[", "t", "[", "0", "]", "==", "x_id", "for", "t", "in", "concept_inverted_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.collect_substitution": [[87, 100], ["enumerate", "candidate_gen", "conceptualize_proposer.remove_det", "conceptualize_proposer.substitute", "results.append", "conceptualize_proposer.Substitution"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.remove_det", "home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.substitute", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["", "def", "collect_substitution", "(", "self", ",", "text", ":", "str", ",", "concepts", ":", "List", "[", "EntityMention", "]", ",", "\n", "candidate_gen", ":", "Callable", "[", "[", "Any", "]", ",", "List", "[", "Tuple", "[", "str", ",", "float", "]", "]", "]", "\n", ",", "try_alt_dets", ")", "->", "List", "[", "Substitution", "]", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "i", ",", "mention", "in", "enumerate", "(", "concepts", ")", ":", "\n", "            ", "candidates", "=", "candidate_gen", "(", "mention", ".", "base_concept", ")", "\n", "pre_text", "=", "text", "[", ":", "mention", ".", "l", "]", "\n", "post_text", "=", "text", "[", "mention", ".", "r", ":", "]", "\n", "for", "cand", ",", "w", "in", "candidates", ":", "\n", "                ", "cand", "=", "remove_det", "(", "cand", ")", "\n", "for", "_text", "in", "substitute", "(", "pre_text", ",", "cand", ",", "post_text", ",", "mention", ".", "det_idx", ",", "mention", ".", "det_text", ",", "try_alt_dets", ")", ":", "\n", "                    ", "results", ".", "append", "(", "Substitution", "(", "_text", ",", "mention", ".", "l", ",", "mention", ".", "base_concept", ",", "cand", ",", "i", ",", "w", ")", ")", "\n", "", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.entity_abstract": [[101, 124], ["rst_list.sort", "rst_list.append", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["", "def", "entity_abstract", "(", "self", ",", "instance", ",", "score_method", "=", "\"frequency\"", ")", ":", "\n", "        ", "pb", "=", "self", ".", "_probase", "\n", "if", "instance", "not", "in", "pb", ".", "instance2idx", ":", "\n", "            ", "return", "[", "]", "\n", "", "instance_idx", "=", "pb", ".", "instance2idx", "[", "instance", "]", "\n", "instance_freq", "=", "self", ".", "inst_freq_map", "[", "instance", "]", "\n", "concept_list", "=", "pb", ".", "instance_inverted_list", "[", "instance_idx", "]", "\n", "rst_list", "=", "[", "]", "\n", "for", "concept_idx", ",", "co_occurrence", "in", "concept_list", ":", "\n", "            ", "if", "co_occurrence", "<=", "3", ":", "\n", "                ", "continue", "\n", "", "concept", "=", "pb", ".", "idx2concept", "[", "concept_idx", "]", "\n", "if", "score_method", "==", "\"pmi\"", ":", "\n", "                ", "score", "=", "co_occurrence", "/", "self", ".", "concept_freq_map", "[", "concept", "]", "/", "instance_freq", "\n", "", "elif", "score_method", "==", "\"likelihood\"", ":", "\n", "                ", "score", "=", "co_occurrence", "/", "instance_freq", "\n", "", "elif", "score_method", "==", "\"frequency\"", ":", "\n", "                ", "score", "=", "co_occurrence", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "score_method", ")", "\n", "", "rst_list", ".", "append", "(", "(", "concept", ",", "score", ")", ")", "\n", "", "rst_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "return", "rst_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.entity_instantiate": [[125, 148], ["rst_list.sort", "rst_list.append", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["", "def", "entity_instantiate", "(", "self", ",", "concept", ",", "score_method", "=", "'frequency'", ")", ":", "\n", "        ", "pb", "=", "self", ".", "_probase", "\n", "if", "concept", "not", "in", "pb", ".", "concept2idx", ":", "\n", "            ", "return", "[", "]", "\n", "", "concept_idx", "=", "pb", ".", "concept2idx", "[", "concept", "]", "\n", "concept_freq", "=", "self", ".", "concept_freq_map", "[", "concept", "]", "\n", "inst_list", "=", "pb", ".", "concept_inverted_list", "[", "concept_idx", "]", "\n", "rst_list", "=", "[", "]", "\n", "for", "inst_idx", ",", "co_occurrence", "in", "inst_list", ":", "\n", "            ", "if", "co_occurrence", "<=", "3", ":", "\n", "                ", "continue", "\n", "", "inst", "=", "pb", ".", "idx2instance", "[", "inst_idx", "]", "\n", "if", "score_method", "==", "\"pmi\"", ":", "\n", "                ", "score", "=", "co_occurrence", "/", "self", ".", "inst_freq_map", "[", "inst", "]", "/", "concept_freq", "\n", "", "elif", "score_method", "==", "\"likelihood\"", ":", "\n", "                ", "score", "=", "co_occurrence", "/", "concept_freq", "\n", "", "elif", "score_method", "==", "\"frequency\"", ":", "\n", "                ", "score", "=", "co_occurrence", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "score_method", ")", "\n", "", "rst_list", ".", "append", "(", "(", "inst", ",", "score", ")", ")", "\n", "", "rst_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "return", "rst_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.conceptualize": [[149, 162], ["conceptualize_proposer.Proposer.collect_substitution", "len", "conceptualize_proposer.Proposer.entity_abstract", "conceptualize_proposer.Proposer.entity_instantiate", "subs.sort", "entity.split", "len", "len", "c.split", "c.split"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.collect_substitution", "home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.entity_abstract", "home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.entity_instantiate", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split"], ["", "def", "conceptualize", "(", "self", ",", "text", ",", "concepts", ",", "try_alt_dets", ",", "score_method", "=", "'likelihood'", ",", "\n", "top_k", "=", "40", ",", "abs_rate", "=", "0.5", ",", "max_entity_word_inc", "=", "2", ")", ":", "\n", "        ", "def", "produce", "(", "entity", ")", ":", "\n", "            ", "n_words", "=", "len", "(", "entity", ".", "split", "(", "' '", ")", ")", "\n", "abs", "=", "self", ".", "entity_abstract", "(", "entity", ",", "score_method", "=", "score_method", ")", "\n", "abs", "=", "[", "(", "c", ",", "s", ")", "for", "c", ",", "s", "in", "abs", "if", "len", "(", "c", ".", "split", "(", "' '", ")", ")", "<=", "n_words", "+", "max_entity_word_inc", "]", "\n", "inst", "=", "self", ".", "entity_instantiate", "(", "entity", ",", "score_method", "=", "score_method", ")", "\n", "inst", "=", "[", "(", "c", ",", "s", ")", "for", "c", ",", "s", "in", "inst", "if", "len", "(", "c", ".", "split", "(", "' '", ")", ")", "<=", "n_words", "+", "max_entity_word_inc", "]", "\n", "subs", "=", "abs", "+", "inst", "\n", "subs", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "subs", "=", "subs", "[", ":", "top_k", "]", "\n", "return", "subs", "\n", "", "return", "self", ".", "collect_substitution", "(", "text", ",", "concepts", ",", "produce", ",", "try_alt_dets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.random_substitution": [[163, 187], ["min", "len", "conceptualize_proposer.Proposer.collect_substitution", "list", "numpy.random.choice().tolist", "numpy.random.choice().tolist", "text.split", "numpy.asarray", "sum", "range", "ValueError", "len", "numpy.random.choice", "numpy.random.choice", "len", "c.split", "str"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.collect_substitution", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split"], ["", "def", "random_substitution", "(", "self", ",", "text", ",", "concepts", ",", "mode", ":", "str", ",", "top_k", "=", "10000", ",", "n_pre_roll", "=", "100", ",", "\n", "weighted", "=", "True", ",", "max_entity_word_inc", "=", "2", ")", ":", "\n", "        ", "candidates", "=", "[", "]", "\n", "if", "mode", "==", "'entity'", ":", "\n", "            ", "candidates", "=", "self", ".", "entity_freqs", "[", ":", "top_k", "]", "\n", "", "elif", "mode", "==", "'concept'", ":", "\n", "            ", "candidates", "=", "self", ".", "concept_freqs", "[", ":", "top_k", "]", "\n", "", "elif", "mode", "==", "'instance'", ":", "\n", "            ", "candidates", "=", "self", ".", "inst_freqs", "[", ":", "top_k", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported mode: \"", "+", "str", "(", "mode", ")", ")", "\n", "", "n_pre_roll", "=", "min", "(", "n_pre_roll", ",", "top_k", ")", "\n", "if", "weighted", ":", "\n", "            ", "weights", "=", "[", "c", "[", "1", "]", "for", "c", "in", "candidates", "]", "\n", "weights", "=", "np", ".", "asarray", "(", "weights", ")", "/", "sum", "(", "weights", ")", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "candidates", ")", ")", ")", "\n", "indices", "=", "np", ".", "random", ".", "choice", "(", "indices", ",", "size", "=", "n_pre_roll", ",", "replace", "=", "False", ",", "p", "=", "weights", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "choice", "(", "candidates", ",", "size", "=", "n_pre_roll", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "", "candidates", "=", "[", "candidates", "[", "c", "]", "for", "c", "in", "indices", "]", "\n", "n_words", "=", "len", "(", "text", ".", "split", "(", "' '", ")", ")", "\n", "candidates", "=", "[", "(", "c", ",", "s", ")", "for", "c", ",", "s", "in", "abs", "if", "len", "(", "c", ".", "split", "(", "' '", ")", ")", "<=", "n_words", "+", "max_entity_word_inc", "]", "\n", "results", "=", "self", ".", "collect_substitution", "(", "text", ",", "concepts", ",", "lambda", "_", ":", "candidates", ",", "False", ")", "\n", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.remove_det": [[24, 33], ["x.startswith", "x.startswith", "x.startswith"], "function", ["None"], ["", "def", "remove_det", "(", "x", ":", "str", ")", ":", "\n", "    ", "if", "x", ".", "startswith", "(", "'a '", ")", ":", "\n", "        ", "return", "x", "[", "2", ":", "]", "\n", "", "elif", "x", ".", "startswith", "(", "'an '", ")", ":", "\n", "        ", "return", "x", "[", "3", ":", "]", "\n", "", "elif", "x", ".", "startswith", "(", "'the '", ")", ":", "\n", "        ", "return", "x", "[", "4", ":", "]", "\n", "", "else", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.substitute": [[34, 47], ["_infl.an().split", "len", "_infl.an", "len"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split"], ["", "", "def", "substitute", "(", "pre_text", ",", "cand", ",", "post_text", ",", "det_idx", ",", "det_text", ",", "alt_dets", ")", ":", "\n", "    ", "if", "not", "alt_dets", ":", "\n", "        ", "if", "det_text", "in", "[", "'a'", ",", "'an'", "]", "and", "hparams", ".", "expr", "!=", "'aser'", ":", "\n", "            ", "possible_dets", "=", "[", "_infl", ".", "an", "(", "pre_text", "[", "det_idx", "+", "len", "(", "det_text", ")", "+", "1", ":", "]", "+", "cand", "+", "post_text", ")", ".", "split", "(", "' '", ")", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "            ", "possible_dets", "=", "[", "det_text", "]", "\n", "", "", "else", ":", "\n", "        ", "possible_dets", "=", "[", "'a'", ",", "'an'", ",", "'the'", ",", "''", "]", "\n", "", "for", "d", "in", "possible_dets", ":", "\n", "        ", "if", "det_text", "==", "''", "and", "d", "!=", "''", ":", "\n", "            ", "d", "+=", "' '", "\n", "", "_pre_text", "=", "pre_text", "[", ":", "det_idx", "]", "+", "d", "+", "pre_text", "[", "det_idx", "+", "len", "(", "det_text", ")", ":", "]", "\n", "yield", "_pre_text", "+", "cand", "+", "post_text", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.generate.run": [[26, 96], ["os.path.join", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.basicConfig", "logging.info", "hparams.hparams.parse", "logging.info", "logging.info", "model.from_pretrained.from_pretrained", "step.isnumeric", "transformers.BertTokenizer.from_pretrained", "datafeeder.FullGenerationFeeder", "model.from_pretrained.to", "model.from_pretrained.eval", "logging.info", "pickle.dump", "pickle.dump", "os.path.exists", "os.makedirs", "os.path.join", "logging.info", "torch.device", "hparams.hparams_debug_string", "args.model_path.split", "int", "logging.info", "print", "int", "print", "len", "datafeeder.FullGenerationFeeder.next_batch", "range", "numpy.sum", "print", "open", "open", "open", "datetime.datetime.now().strftime", "torch.no_grad", "model.from_pretrained.", "len", "collected.append", "os.path.join", "os.path.join", "os.path.join", "outputs[].detach().cpu().numpy", "fw.write", "datetime.datetime.now", "gen_feeder.next_batch.input_ids.to", "gen_feeder.next_batch.input_mask.to", "gen_feeder.next_batch.token_type_ids.to", "gen_feeder.next_batch.labels.to", "len", "len", "outputs[].detach().cpu", "len", "outputs[].detach"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.hparams.hparams_debug_string", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.FullGenerationFeeder.next_batch", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["def", "run", "(", "args", ")", ":", "\n", "    ", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args", ".", "run_name", "+", "'_'", "+", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%m%d_%H%M'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "fmt", "=", "logging", ".", "Formatter", "(", "\"[%(levelname)s %(asctime)s] %(message)s\"", ")", "\n", "h", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'outputs.log'", ")", ")", "\n", "h", ".", "setFormatter", "(", "fmt", ")", "\n", "h_", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "h_", ".", "setFormatter", "(", "fmt", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "h", ",", "h_", "]", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "if", "args", ".", "device", "is", "not", "None", ":", "\n", "        ", "global", "device", "\n", "logging", ".", "info", "(", "'Setting device to '", "+", "args", ".", "device", ")", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Setting up...'", ")", "\n", "hparams", ".", "parse", "(", "args", ".", "hparams", ")", "\n", "logging", ".", "info", "(", "hparams_debug_string", "(", ")", ")", "\n", "logging", ".", "info", "(", "'Load saved model from %s ...'", "%", "(", "args", ".", "model_path", ")", ")", "\n", "model", "=", "EdgeClassification", "\n", "model", "=", "model", ".", "from_pretrained", "(", "args", ".", "model_path", ",", "hparams", "=", "hparams", ")", "\n", "step", "=", "args", ".", "model_path", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "if", "step", ".", "isnumeric", "(", ")", ":", "\n", "        ", "global", "current_step_shift", "\n", "current_step_shift", "=", "int", "(", "step", ")", "\n", "logging", ".", "info", "(", "'Initial step=%d'", "%", "current_step_shift", ")", "\n", "\n", "", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "gen_feeder", "=", "FullGenerationFeeder", "(", "args", ".", "data_dir", ",", "hparams", ",", "tokenizer", ",", "'test'", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "logging", ".", "info", "(", "'Start training...'", ")", "\n", "\n", "if", "args", ".", "n_generate", "is", "None", ":", "\n", "        ", "n_generate", "=", "1e9", "\n", "print", "(", "'Infinite generations'", ")", "\n", "", "else", ":", "\n", "        ", "n_generate", "=", "int", "(", "args", ".", "n_generate", ")", "\n", "print", "(", "'Generate %d'", "%", "n_generate", ")", "\n", "\n", "", "collected", "=", "[", "]", "\n", "thrs", "=", "args", ".", "score_threshold", "\n", "n_accepted", "=", "0", "\n", "\n", "while", "len", "(", "collected", ")", "<", "n_generate", ":", "\n", "        ", "batch", "=", "gen_feeder", ".", "next_batch", "(", ")", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "break", "\n", "", "samples", "=", "gen_feeder", ".", "_last_samples", "\n", "base_samples", "=", "gen_feeder", ".", "_base_sample_ids", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "model", "(", "input_ids", "=", "batch", ".", "input_ids", ".", "to", "(", "device", ")", ",", "\n", "attention_mask", "=", "batch", ".", "input_mask", ".", "to", "(", "device", ")", ",", "\n", "token_type_ids", "=", "batch", ".", "token_type_ids", ".", "to", "(", "device", ")", ",", "\n", "labels", "=", "batch", ".", "labels", ".", "to", "(", "device", ")", ")", "\n", "probs", "=", "outputs", "[", "'probs'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "1", "]", "# prob of \"positive\"", "\n", "", "for", "i", "in", "range", "(", "len", "(", "samples", ")", ")", ":", "\n", "            ", "collected", ".", "append", "(", "(", "base_samples", "[", "i", "]", ",", "samples", "[", "i", "]", ",", "probs", "[", "i", "]", ")", ")", "\n", "", "n_accepted", "+=", "np", ".", "sum", "(", "probs", ">", "thrs", ")", "\n", "print", "(", "'[%d/%d] %d collected, %d accepted, moving rate=%.2f'", "%", "(", "\n", "gen_feeder", ".", "_offset", ",", "len", "(", "gen_feeder", ".", "_indices", ")", ",", "len", "(", "collected", ")", ",", "n_accepted", ",", "n_accepted", "/", "len", "(", "collected", ")", ")", ")", "\n", "\n", "", "pickle", ".", "dump", "(", "collected", ",", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'generations.pickle'", ")", ",", "'wb'", ")", ")", "\n", "pickle", ".", "dump", "(", "gen_feeder", ".", "_proposed_samples", ",", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'proposed_samples.pickle'", ")", ",", "'wb'", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'generations.txt'", ")", ",", "'w'", ")", "as", "fw", ":", "\n", "        ", "for", "bs", ",", "sample", ",", "prob", "in", "collected", ":", "\n", "            ", "if", "prob", ">", "thrs", ":", "\n", "                ", "fw", ".", "write", "(", "'%s\\t%s\\t%s\\t%.4f\\n'", "%", "(", "sample", "[", "0", "]", ",", "sample", "[", "1", "]", ",", "sample", "[", "2", "]", ",", "prob", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.atomic_util.normalize": [[6, 22], ["re.sub.lower", "unidecode.unidecode_expect_ascii", "re.sub.replace", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.endswith"], "function", ["None"], ["def", "normalize", "(", "text", ":", "str", ")", ":", "\n", "    ", "text", "=", "text", ".", "lower", "(", ")", "\n", "text", "=", "unidecode", ".", "unidecode_expect_ascii", "(", "text", ")", "\n", "if", "text", "==", "'none'", ":", "\n", "        ", "return", "''", "\n", "", "text", "=", "text", ".", "replace", "(", "'___'", ",", "'_'", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\b(a )+'", ",", "'a '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\b(an )+'", ",", "'an '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\b(the )+'", ",", "'the '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\b(person( |)|)x(?!-)\\b'", ",", "'Alex'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\b(person( |)|)y(?!-)\\b'", ",", "'Bob'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\b(person( |)|)z(?!-)\\b'", ",", "'Charlie'", ",", "text", ")", "\n", "if", "not", "text", ".", "endswith", "(", "'.'", ")", ":", "\n", "        ", "text", "+=", "'.'", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.atomic_util.collect_words": [[23, 29], ["re.finditer", "indices.append", "m.start", "m.group", "len"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["", "def", "collect_words", "(", "text", ")", ":", "\n", "    ", "indices", "=", "[", "]", "\n", "for", "m", "in", "re", ".", "finditer", "(", "r'\\w+'", ",", "text", ")", ":", "\n", "        ", "index", ",", "item", "=", "m", ".", "start", "(", ")", ",", "m", ".", "group", "(", ")", "\n", "indices", ".", "append", "(", "[", "index", ",", "index", "+", "len", "(", "item", ")", "]", ")", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.atomic_util.identify_concepts": [[30, 97], ["any", "atomic_util.identify_concepts.part_of_subtok"], "function", ["None"], ["", "def", "identify_concepts", "(", "sent", ",", "doc", ",", "logs", "=", "None", ",", "concept_set", "=", "None", ")", ":", "\n", "    ", "if", "logs", "is", "None", ":", "\n", "        ", "logs", "=", "[", "]", "\n", "\n", "", "np_labels", "=", "[", "'nsubj'", ",", "'nsubjpass'", ",", "'dobj'", ",", "'pobj'", "]", "\n", "extra_np_labels", "=", "[", "'iobj'", ",", "'poss'", ",", "'dative'", ",", "'npadvmod'", ",", "'appos'", ",", "'oprd'", ",", "'attr'", ",", "\n", "'compound'", ",", "'nmod'", ",", "'conj'", ",", "'ccomp'", ",", "'acomp'", ",", "'xcomp'", ",", "'relcl'", ",", "'ROOT'", "]", "\n", "np_labels", "+=", "extra_np_labels", "\n", "pos_labels", "=", "[", "'NOUN'", ",", "'PROPN'", "]", "\n", "\n", "def", "part_of_subtok", "(", "tok", ")", ":", "\n", "        ", "anc", "=", "tok", ".", "ancestors", "\n", "return", "any", "(", "[", "a", ".", "dep_", "==", "'subtok'", "for", "a", "in", "anc", "]", ")", "\n", "\n", "", "entities", "=", "[", "tok", "for", "tok", "in", "doc", "if", "(", "tok", ".", "dep_", "in", "np_labels", "and", "tok", ".", "pos_", "in", "pos_labels", ")", "]", "\n", "concepts", "=", "[", "]", "\n", "for", "tok", "in", "entities", ":", "\n", "        ", "if", "part_of_subtok", "(", "tok", ")", ":", "\n", "            ", "continue", "\n", "", "if", "tok", ".", "text", "in", "[", "'Alex'", ",", "'Bob'", ",", "'Charlie'", "]", ":", "\n", "            ", "continue", "\n", "", "sign_to_ban", "=", "[", "'prt'", ",", "'aux'", ",", "'auxpass'", "]", "\n", "if", "any", "(", "[", "t", ".", "dep_", "in", "sign_to_ban", "for", "t", "in", "tok", ".", "children", "]", ")", ":", "\n", "            ", "continue", "\n", "", "left_child", "=", "list", "(", "tok", ".", "lefts", ")", "+", "[", "tok", "]", "\n", "right_child", "=", "[", "tok", "]", "+", "list", "(", "tok", ".", "rights", ")", "\n", "\n", "noun_phrase_spec", "=", "[", "'det'", ",", "'amod'", ",", "'prep'", ",", "'compound'", ",", "'nmod'", ",", "'punct'", ",", "'poss'", ",", "'advmod'", ",", "\n", "'cc'", ",", "'conj'", ",", "'dep'", ",", "'agent'", ",", "'intj'", "]", "\n", "noun_phrase_seps", "=", "[", "'relcl'", ",", "'acl'", ",", "'advcl'", ",", "'nsubj'", ",", "'dobj'", ",", "'pobj'", ",", "'iobj'", ",", "'csubj'", ",", "'nsubjpass'", ",", "\n", "'ccomp'", ",", "'appos'", ",", "'xcomp'", ",", "'acomp'", ",", "'case'", ",", "'nummod'", ",", "'predet'", ",", "'oprd'", ",", "'npadvmod'", ",", "\n", "'neg'", ",", "'mark'", ",", "'preconj'", ",", "'dative'", ",", "'expl'", "]", "\n", "seps", "=", "[", "t", "for", "t", "in", "tok", ".", "children", "if", "t", ".", "dep_", "in", "noun_phrase_seps", "]", "\n", "for", "s", "in", "seps", ":", "\n", "            ", "if", "s", ".", "i", "<", "tok", ".", "i", ":", "\n", "                ", "left_child", "=", "[", "l", "for", "l", "in", "left_child", "if", "l", ".", "i", ">", "s", ".", "right_edge", ".", "i", "]", "\n", "", "if", "s", ".", "i", ">", "tok", ".", "i", ":", "\n", "                ", "right_child", "=", "[", "l", "for", "l", "in", "right_child", "if", "l", ".", "i", "<", "s", ".", "left_edge", ".", "i", "]", "\n", "# if len(seps) > 0:", "\n", "#     print('Original: ', sent, '|', tok, ' -> ', list(tok.children))", "\n", "#     print(list(tok.subtree))", "\n", "#     print('Seps: ', seps)", "\n", "#     print('Cleaned: ', left_child, right_child)", "\n", "\n", "", "", "det", "=", "[", "t", "for", "t", "in", "tok", ".", "lefts", "if", "t", ".", "dep_", "==", "'det'", "and", "t", ".", "text", "in", "[", "'a'", ",", "'an'", ",", "'the'", "]", "and", "\n", "(", "t", ".", "i", "+", "1", "<", "len", "(", "doc", ")", "and", "doc", ".", "text", "[", "doc", "[", "t", ".", "i", "+", "1", "]", ".", "idx", "-", "1", "]", "==", "' '", ")", "]", "\n", "if", "len", "(", "det", ")", "==", "1", ":", "\n", "            ", "det", "=", "det", "[", "0", "]", "\n", "left_child", "=", "[", "l", "for", "l", "in", "left_child", "if", "l", ".", "idx", ">", "det", ".", "idx", "]", "\n", "", "elif", "len", "(", "det", ")", ">", "1", ":", "\n", "            ", "print", "(", "sent", ",", "'|'", ",", "det", ",", "'|'", ",", "tok", ".", "text", ")", "\n", "det", "=", "det", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "det", "=", "None", "\n", "", "for", "l", "in", "left_child", ":", "\n", "            ", "for", "r", "in", "right_child", ":", "\n", "                ", "text", "=", "sent", "[", "l", ".", "idx", ":", "tok", ".", "idx", "]", "+", "tok", ".", "lemma_", "+", "sent", "[", "tok", ".", "idx", "+", "len", "(", "tok", ")", ":", "r", ".", "idx", "+", "len", "(", "r", ")", "]", "\n", "if", "concept_set", "is", "None", "or", "(", "text", "in", "concept_set", ")", ":", "\n", "                    ", "if", "det", "is", "None", ":", "\n", "                        ", "det_idx", "=", "l", ".", "idx", "\n", "det_text", "=", "''", "\n", "", "else", ":", "\n", "                        ", "det_idx", "=", "det", ".", "idx", "\n", "det_text", "=", "det", ".", "text", "\n", "", "concepts", ".", "append", "(", "[", "l", ".", "i", ",", "l", ".", "idx", ",", "r", ".", "i", ",", "r", ".", "idx", "+", "len", "(", "r", ")", ",", "det_idx", ",", "det_text", ",", "tok", ".", "i", ",", "tok", ".", "idx", ",", "text", "]", ")", "\n", "logs", ".", "append", "(", "det_text", "+", "' | '", "+", "text", "+", "'\\n'", ")", "\n", "", "", "", "", "return", "concepts", "", "", ""]], "home.repos.pwc.inspect_result.mutiann_ccc.None.atomic_build_graph.build_graph": [[13, 96], ["os.makedirs", "pandas.read_csv", "open", "open", "pd.read_csv.iloc[].apply", "open.write", "open.write", "dict", "dict", "atomic_build_graph.build_graph.build_node"], "function", ["None"], ["def", "build_graph", "(", ")", ":", "\n", "# Schema:", "\n", "# Node: id, text, words, concepts, event_ids, annotation_ids", "\n", "# Edge: x_id, y_id, type, inter_text, count", "\n", "\n", "    ", "base_path", "=", "r'data/atomic/tmp/'", "\n", "in_path", "=", "r\"data/atomic/atomic_data/v4_atomic_all_agg.csv\"", "\n", "out_node", "=", "r'nodes_s1.tsv'", "\n", "out_edges", "=", "r'edges.tsv'", "\n", "os", ".", "makedirs", "(", "base_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "df", "=", "pd", ".", "read_csv", "(", "in_path", ")", "\n", "out_node", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "out_node", ")", ",", "'w'", ")", "\n", "out_edges", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "out_edges", ")", ",", "'w'", ")", "\n", "df", ".", "iloc", "[", ":", ",", "1", ":", "10", "]", "=", "df", ".", "iloc", "[", ":", ",", "1", ":", "10", "]", ".", "apply", "(", "lambda", "col", ":", "col", ".", "apply", "(", "json", ".", "loads", ")", ")", "\n", "\n", "out_node", ".", "write", "(", "'\\t'", ".", "join", "(", "Node", ".", "_fields", ")", "+", "'\\n'", ")", "\n", "out_edges", ".", "write", "(", "'\\t'", ".", "join", "(", "Edge", ".", "_fields", ")", "+", "'\\n'", ")", "\n", "\n", "nodes_dict", "=", "dict", "(", ")", "\n", "edges_dict", "=", "dict", "(", ")", "\n", "\n", "nodes", "=", "[", "]", "\n", "edges", "=", "[", "]", "\n", "\n", "\n", "\n", "def", "build_node", "(", "text", ",", "event_id", "=", "None", ",", "annotation_id", "=", "None", ")", ":", "\n", "        ", "text", "=", "normalize", "(", "text", ")", "\n", "if", "text", "not", "in", "nodes_dict", ":", "\n", "            ", "id", "=", "len", "(", "nodes", ")", "\n", "nodes_dict", "[", "text", "]", "=", "id", "\n", "event_ids", "=", "[", "]", "\n", "annotation_ids", "=", "[", "]", "\n", "node", "=", "Node", "(", "id", ",", "text", ",", "[", "]", ",", "[", "]", ",", "event_ids", ",", "annotation_ids", ")", "\n", "nodes", ".", "append", "(", "node", ")", "\n", "", "else", ":", "\n", "            ", "id", "=", "nodes_dict", "[", "text", "]", "\n", "", "if", "event_id", "is", "not", "None", ":", "\n", "            ", "nodes", "[", "id", "]", ".", "event_ids", ".", "append", "(", "event_id", ")", "\n", "", "if", "annotation_id", "is", "not", "None", ":", "\n", "            ", "nodes", "[", "id", "]", ".", "annotation_ids", ".", "append", "(", "annotation_id", ")", "\n", "", "return", "id", "\n", "\n", "\n", "", "def", "build_edge", "(", "head", ",", "tail", ",", "type", ")", ":", "\n", "        ", "if", "(", "head", ",", "tail", ",", "type", ")", "not", "in", "edges_dict", ":", "\n", "            ", "id", "=", "len", "(", "edges", ")", "\n", "edges_dict", "[", "(", "head", ",", "tail", ",", "type", ")", "]", "=", "id", "\n", "inter_text", "=", "''", "\n", "edge", "=", "Edge", "(", "head", ",", "tail", ",", "type", ",", "inter_text", ",", "1", ",", "''", ")", "\n", "edges", ".", "append", "(", "edge", ")", "\n", "", "else", ":", "\n", "            ", "id", "=", "edges_dict", "[", "(", "head", ",", "tail", ",", "type", ")", "]", "\n", "edges", "[", "id", "]", "=", "edges", "[", "id", "]", ".", "_replace", "(", "count", "=", "edges", "[", "id", "]", ".", "count", "+", "1", ")", "\n", "", "return", "id", "\n", "\n", "\n", "", "build_node", "(", "'none'", ")", "\n", "\n", "n_annotation", "=", "0", "\n", "\n", "for", "idx", ",", "line", "in", "tqdm", ".", "tqdm", "(", "df", ".", "iterrows", "(", ")", ")", ":", "\n", "        ", "head", "=", "build_node", "(", "line", "[", "0", "]", ",", "event_id", "=", "idx", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "item", "=", "line", "[", "i", "]", "\n", "tails", "=", "[", "]", "\n", "for", "t", "in", "item", ":", "\n", "                ", "tail", "=", "build_node", "(", "t", ",", "annotation_id", "=", "n_annotation", ")", "\n", "n_annotation", "+=", "1", "\n", "build_edge", "(", "head", ",", "tail", ",", "df", ".", "columns", "[", "i", "]", ")", "\n", "\n", "", "", "", "for", "e", "in", "edges", ":", "\n", "        ", "out_edges", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "json", ".", "dumps", "(", "t", ")", "if", "t", "is", "list", "else", "str", "(", "t", ")", "for", "t", "in", "e", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "for", "n", "in", "tqdm", ".", "tqdm", "(", "nodes", ")", ":", "\n", "        ", "doc", "=", "nlp", "(", "n", ".", "text", ")", "\n", "docs", ".", "append", "(", "doc", ")", "\n", "", "pickle", ".", "dump", "(", "docs", ",", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'parsed_nodes'", ")", ",", "'wb'", ")", ")", "\n", "\n", "for", "n", "in", "nodes", ":", "\n", "        ", "out_node", ".", "write", "(", "'\\t'", ".", "join", "(", "list", "(", "[", "json", ".", "dumps", "(", "t", ")", "if", "t", "is", "list", "else", "str", "(", "t", ")", "for", "t", "in", "n", "]", ")", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.atomic_build_graph.collect_concepts": [[97, 133], ["pickle.load", "pickle.load", "open", "open().read().splitlines", "print", "print", "print", "tqdm.tqdm", "open.write", "open.writelines", "open", "open", "os.path.join", "print", "enumerate", "line.split.split", "json.dumps", "atomic_util.identify_concepts", "json.dumps", "results.append", "os.path.join", "open().read", "open", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.atomic_util.identify_concepts", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["", "", "def", "collect_concepts", "(", ")", ":", "\n", "# Schema:", "\n", "# Node: id, text, words, concepts, event_ids, annotation_ids, tokens", "\n", "    ", "base_path", "=", "r'data/atomic/tmp'", "\n", "in_path", "=", "r'nodes_s1.tsv'", "\n", "out_path", "=", "r'nodes_s2.tsv'", "\n", "concept_path", "=", "r'data/probase/concepts'", "\n", "concept_set", "=", "pickle", ".", "load", "(", "open", "(", "concept_path", ",", "'rb'", ")", ")", "\n", "docs", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'parsed_nodes'", ")", ",", "'rb'", ")", ")", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "out_path", ")", ",", "'w'", ")", "\n", "\n", "lines", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "in_path", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "head", ",", "lines", "=", "lines", "[", "0", "]", ",", "lines", "[", "1", ":", "]", "\n", "print", "(", "'Doc sample: '", ")", "\n", "print", "(", "lines", "[", "-", "10", "]", ")", "\n", "for", "tok", "in", "docs", "[", "-", "10", "]", ":", "\n", "        ", "print", "(", "tok", ".", "text", ",", "tok", ".", "dep_", ",", "tok", ".", "pos_", ",", "tok", ".", "head", ".", "text", ")", "\n", "\n", "", "print", "(", "'Start checking...'", ")", "\n", "results", "=", "[", "]", "\n", "\n", "for", "i", ",", "line", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "lines", ")", ")", ":", "\n", "        ", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "sent", "=", "line", "[", "1", "]", "\n", "logs", "=", "[", "]", "\n", "doc", "=", "docs", "[", "i", "]", "\n", "words", "=", "[", "[", "t", ".", "idx", ",", "t", ".", "idx", "+", "len", "(", "t", ")", "]", "for", "t", "in", "doc", "]", "\n", "line", "[", "2", "]", "=", "json", ".", "dumps", "(", "words", ")", "\n", "concepts", "=", "identify_concepts", "(", "sent", ",", "doc", ",", "logs", ",", "concept_set", ")", "\n", "line", "[", "3", "]", "=", "json", ".", "dumps", "(", "concepts", ")", "\n", "line", "=", "'\\t'", ".", "join", "(", "line", ")", "\n", "results", ".", "append", "(", "line", "+", "'\\n'", ")", "\n", "\n", "", "fw", ".", "write", "(", "head", "+", "'\\n'", ")", "\n", "\n", "fw", ".", "writelines", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.atomic_build_graph.collect_skeletons": [[134, 202], ["open().read().splitlines", "pickle.load", "open", "collections.defaultdict", "print", "print", "tqdm.tqdm", "list", "print", "open", "open.writelines", "open", "os.path.join", "print", "enumerate", "item.split.split", "json.loads", "enumerate", "json.dumps", "u_lines.append", "collections.defaultdict.items", "open.write", "os.path.join", "open().read", "os.path.join", "skeleton_text.startswith", "skeletons[].append", "mentions.append", "len", "skeleton_text.startswith", "len", "len", "open", "json.dumps", "os.path.join", "len", "len"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["", "def", "collect_skeletons", "(", ")", ":", "\n", "# Schema:", "\n", "# Node: id, text, words, concepts, event_ids, annotation_ids", "\n", "# Edge: x_id, y_id, type, inter_text, count", "\n", "# Dev: x_id, y_id", "\n", "\n", "    ", "base_path", "=", "r'data/atomic/tmp'", "\n", "in_path", "=", "r'nodes_s2.tsv'", "\n", "out_dev", "=", "r'skeletons.tsv'", "\n", "\n", "lines", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "in_path", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "line_head", ",", "lines", "=", "lines", "[", "0", "]", ",", "lines", "[", "1", ":", "]", "\n", "docs", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'parsed_nodes'", ")", ",", "'rb'", ")", ")", "\n", "\n", "out_dev", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "out_dev", ")", ",", "'w'", ")", "\n", "\n", "skeletons", "=", "defaultdict", "(", "list", ")", "\n", "skeleton_ids", "=", "{", "}", "\n", "\n", "print", "(", "'Doc sample: '", ")", "\n", "print", "(", "lines", "[", "-", "10", "]", ")", "\n", "for", "tok", "in", "docs", "[", "-", "10", "]", ":", "\n", "        ", "print", "(", "tok", ".", "text", ",", "tok", ".", "dep_", ",", "tok", ".", "pos_", ",", "tok", ".", "tag_", ",", "tok", ".", "head", ".", "text", ")", "\n", "\n", "", "u_lines", "=", "[", "line_head", "+", "'\\n'", "]", "\n", "\n", "for", "i", ",", "item", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "lines", ")", ")", ":", "\n", "        ", "item", "=", "item", ".", "split", "(", "'\\t'", ")", "\n", "concepts", "=", "json", ".", "loads", "(", "item", "[", "3", "]", ")", "\n", "text", "=", "item", "[", "1", "]", "\n", "mentions", "=", "[", "]", "\n", "for", "j", ",", "(", "l_i", ",", "l", ",", "r_i", ",", "r", ",", "det_idx", ",", "det_text", ",", "cent_i", ",", "cent_idx", ",", "base_concept", ")", "in", "enumerate", "(", "concepts", ")", ":", "\n", "            ", "if", "len", "(", "det_text", ")", "==", "0", ":", "\n", "                ", "skeleton_text", "=", "text", "[", ":", "l", "]", "+", "'[SEP]'", "+", "text", "[", "r", ":", "]", "\n", "", "else", ":", "\n", "                ", "skeleton_text", "=", "text", "[", ":", "det_idx", "]", "+", "text", "[", "det_idx", "+", "len", "(", "det_text", ")", "+", "1", ":", "l", "]", "+", "'[SEP]'", "+", "text", "[", "r", ":", "]", "\n", "", "if", "skeleton_text", ".", "startswith", "(", "'to '", ")", ":", "\n", "                ", "skeleton_text", "=", "skeleton_text", "[", "3", ":", "]", "\n", "first_ess", "=", "1", "\n", "", "elif", "skeleton_text", "[", ":", "5", "]", "in", "[", "'Alex '", ",", "'they '", "]", "and", "docs", "[", "i", "]", "[", "1", "]", ".", "pos_", "in", "[", "'VERB'", ",", "'AUX'", "]", ":", "\n", "                ", "skeleton_text", "=", "skeleton_text", "[", "5", ":", "]", "\n", "first_ess", "=", "1", "\n", "", "elif", "skeleton_text", "[", ":", "4", "]", "in", "[", "'Bob '", ",", "'she '", "]", "and", "docs", "[", "i", "]", "[", "1", "]", ".", "pos_", "in", "[", "'VERB'", ",", "'AUX'", "]", ":", "\n", "                ", "skeleton_text", "=", "skeleton_text", "[", "4", ":", "]", "\n", "first_ess", "=", "1", "\n", "", "elif", "skeleton_text", "[", ":", "3", "]", "in", "[", "'he '", ",", "]", "and", "docs", "[", "i", "]", "[", "1", "]", ".", "pos_", "in", "[", "'VERB'", ",", "'AUX'", "]", ":", "\n", "                ", "skeleton_text", "=", "skeleton_text", "[", "3", ":", "]", "\n", "first_ess", "=", "1", "\n", "", "else", ":", "\n", "                ", "first_ess", "=", "0", "\n", "", "if", "skeleton_text", ".", "startswith", "(", "docs", "[", "i", "]", "[", "first_ess", "]", ".", "text", ")", "and", "docs", "[", "i", "]", "[", "first_ess", "]", ".", "tag_", "in", "[", "'VBZ'", ",", "'VBD'", ",", "'VBG'", ",", "\n", "'NNS'", "]", ":", "\n", "                ", "skeleton_text", "=", "docs", "[", "i", "]", "[", "first_ess", "]", ".", "lemma_", "+", "skeleton_text", "[", "len", "(", "docs", "[", "i", "]", "[", "first_ess", "]", ")", ":", "]", "\n", "", "skeletons", "[", "skeleton_text", "]", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "if", "skeleton_text", "not", "in", "skeleton_ids", ":", "\n", "                ", "skeleton_ids", "[", "skeleton_text", "]", "=", "len", "(", "skeleton_ids", ")", "\n", "", "mentions", ".", "append", "(", "[", "l_i", ",", "l", ",", "r_i", ",", "r", ",", "det_idx", ",", "det_text", ",", "cent_i", ",", "cent_idx", ",", "\n", "base_concept", ",", "skeleton_ids", "[", "skeleton_text", "]", "]", ")", "\n", "", "item", "[", "3", "]", "=", "json", ".", "dumps", "(", "mentions", ")", "\n", "u_lines", ".", "append", "(", "'\\t'", ".", "join", "(", "item", ")", "+", "'\\n'", ")", "\n", "\n", "", "items", "=", "list", "(", "skeletons", ".", "items", "(", ")", ")", "\n", "print", "(", "'Total %d skeletons, e.g. %s'", "%", "(", "len", "(", "skeletons", ")", ",", "items", "[", "10", "]", "[", "0", "]", ")", ")", "\n", "for", "text", ",", "branches", "in", "items", ":", "\n", "        ", "out_dev", ".", "write", "(", "'%s\\t%s\\n'", "%", "(", "text", ",", "json", ".", "dumps", "(", "branches", ")", ")", ")", "\n", "\n", "", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'nodes.tsv'", ")", ",", "'w'", ")", "\n", "fw", ".", "writelines", "(", "u_lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.atomic_build_graph.split_o_hr": [[204, 336], ["pandas.read_csv", "set", "set", "enumerate", "Graph", "set", "range", "print", "set", "range", "print", "enumerate", "print", "EdgeComponentProposer", "ConceptualizeProposer", "tqdm.tqdm", "print", "cc_dev_cands.sort", "open", "cc_tst_cands.sort", "open", "print", "ec_dev_cands.sort", "open", "ec_tst_cands.sort", "open", "print", "open().read().splitlines", "open", "open.write", "enumerate", "print", "len", "len", "len", "range", "EdgeComponentProposer.propose", "ec_cands.append", "shutil.copy", "os.path.join", "open.write", "open.write", "os.path.join", "open.write", "open.write", "os.path.join", "open.write", "open.write", "os.path.join", "open.write", "open.write", "os.path.join", "l.split.split", "open.write", "set.add", "len", "print", "len", "len", "print", "len", "len", "ConceptualizeProposer.propose", "cc_cands.append", "os.path.join", "os.path.join", "open().read", "set.add", "set.add", "set.add", "len", "len", "len", "len", "open", "str", "str", "str", "str", "str", "str", "str", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.EdgeComponentProposer.propose", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.EdgeComponentProposer.propose", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["", "def", "split_o_hr", "(", ")", ":", "\n", "    ", "from", "datafeeder", "import", "Graph", ",", "EdgeComponentProposer", ",", "ConceptualizeProposer", ",", "ProposeFailError", "\n", "from", "hparams", "import", "hparams", "\n", "in_path", "=", "r'data/atomic/tmp'", "\n", "agg_path", "=", "r\"data/atomic/atomic_data/v4_atomic_all_agg.csv\"", "\n", "base_path", "=", "r'data/atomic'", "\n", "df", "=", "pd", ".", "read_csv", "(", "agg_path", ")", "\n", "train_ev", "=", "set", "(", ")", "\n", "dev_ev", "=", "set", "(", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "df", "[", "'split'", "]", ")", ":", "\n", "        ", "if", "s", "==", "'trn'", ":", "\n", "            ", "train_ev", ".", "add", "(", "i", ")", "\n", "", "elif", "s", "==", "'dev'", ":", "\n", "            ", "dev_ev", ".", "add", "(", "i", ")", "\n", "\n", "", "", "G", "=", "Graph", "(", "in_path", ",", "hparams", ")", "\n", "\n", "train_head", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "G", ".", "nodes", ")", ")", ":", "\n", "        ", "for", "h", "in", "G", ".", "nodes", "[", "i", "]", ".", "event_ids", ":", "\n", "            ", "if", "h", "in", "train_ev", ":", "\n", "                ", "train_head", ".", "add", "(", "i", ")", "\n", "break", "\n", "", "", "if", "len", "(", "G", ".", "nodes", "[", "i", "]", ".", "event_ids", ")", ">", "1", ":", "\n", "            ", "print", "(", "G", ".", "nodes", "[", "i", "]", ")", "\n", "\n", "", "", "print", "(", "'Collected %d train heads'", "%", "len", "(", "train_head", ")", ")", "\n", "\n", "dev_head", "=", "set", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "G", ".", "nodes", ")", ")", ":", "\n", "        ", "for", "h", "in", "G", ".", "nodes", "[", "i", "]", ".", "event_ids", ":", "\n", "            ", "if", "h", "in", "dev_ev", ":", "\n", "                ", "dev_head", ".", "add", "(", "i", ")", "\n", "break", "\n", "", "", "if", "len", "(", "G", ".", "nodes", "[", "i", "]", ".", "event_ids", ")", ">", "1", ":", "\n", "            ", "print", "(", "G", ".", "nodes", "[", "i", "]", ")", "\n", "\n", "", "", "print", "(", "'Collected %d dev heads'", "%", "len", "(", "dev_head", ")", ")", "\n", "\n", "splits", "=", "[", "None", "]", "*", "len", "(", "G", ".", "edges", ")", "\n", "n_tr", "=", "n_dev", "=", "n_test", "=", "0", "\n", "for", "i", ",", "e", "in", "enumerate", "(", "G", ".", "edges", ")", ":", "\n", "        ", "if", "e", ".", "head_id", "in", "train_head", ":", "\n", "            ", "splits", "[", "i", "]", "=", "'train'", "\n", "n_tr", "+=", "1", "\n", "", "elif", "e", ".", "head_id", "in", "dev_head", ":", "\n", "            ", "splits", "[", "i", "]", "=", "'dev'", "\n", "n_dev", "+=", "1", "\n", "", "else", ":", "\n", "            ", "splits", "[", "i", "]", "=", "'test'", "\n", "n_test", "+=", "1", "\n", "\n", "", "", "print", "(", "'%d trains %d dev %d test'", "%", "(", "n_tr", ",", "n_dev", ",", "n_test", ")", ")", "\n", "\n", "cc_dev_cands", "=", "[", "]", "\n", "ec_dev_cands", "=", "[", "]", "\n", "cc_tst_cands", "=", "[", "]", "\n", "ec_tst_cands", "=", "[", "]", "\n", "\n", "hparams", ".", "conceptualize_rate", "=", "1.0", "\n", "EP", "=", "EdgeComponentProposer", "(", "G", ",", "hparams", ")", "\n", "CP", "=", "ConceptualizeProposer", "(", "G", ",", "hparams", ")", "\n", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "len", "(", "splits", ")", ")", ")", ":", "\n", "        ", "if", "splits", "[", "i", "]", "==", "'train'", ":", "\n", "            ", "continue", "\n", "", "if", "splits", "[", "i", "]", "==", "'dev'", ":", "\n", "            ", "ec_cands", "=", "ec_dev_cands", "\n", "cc_cands", "=", "cc_dev_cands", "\n", "", "else", ":", "\n", "            ", "ec_cands", "=", "ec_tst_cands", "\n", "cc_cands", "=", "cc_tst_cands", "\n", "", "p", "=", "EP", ".", "propose", "(", "G", ".", "edges", "[", "i", "]", ")", "\n", "ec_cands", ".", "append", "(", "[", "i", ",", "p", "]", ")", "\n", "try", ":", "\n", "            ", "p", "=", "CP", ".", "propose", "(", "G", ".", "edges", "[", "i", "]", ")", "\n", "cc_cands", ".", "append", "(", "[", "i", ",", "p", "]", ")", "\n", "", "except", "ProposeFailError", "as", "e", ":", "\n", "            ", "continue", "\n", "", "", "print", "(", "'EC devs: %d, tests: %d; NS devs: %d, tests: %d'", "%", "\n", "(", "len", "(", "cc_dev_cands", ")", ",", "len", "(", "cc_tst_cands", ")", ",", "len", "(", "ec_dev_cands", ")", ",", "len", "(", "ec_tst_cands", ")", ")", ")", "\n", "\n", "files", "=", "[", "'nodes.tsv'", ",", "'skeletons.tsv'", "]", "\n", "for", "f", "in", "files", ":", "\n", "        ", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "in_path", ",", "f", ")", ",", "os", ".", "path", ".", "join", "(", "base_path", ")", ")", "\n", "\n", "", "cc_dev_cands", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'concept_contrastive_dev.tsv'", ")", ",", "'w'", ")", "\n", "for", "i", ",", "p", "in", "cc_dev_cands", ":", "\n", "        ", "e", "=", "G", ".", "edges", "[", "i", "]", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "G", ".", "nodes", "[", "e", ".", "head_id", "]", ".", "text", ",", "e", ".", "label", ",", "G", ".", "nodes", "[", "e", ".", "tail_id", "]", ".", "text", ",", "\n", "str", "(", "e", ".", "head_id", ")", ",", "str", "(", "e", ".", "tail_id", ")", ",", "'1'", "]", ")", "+", "'\\n'", ")", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "p", "[", "2", "]", ",", "''", ",", "''", ",", "'0'", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "cc_tst_cands", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'concept_contrastive_test.tsv'", ")", ",", "'w'", ")", "\n", "for", "i", ",", "p", "in", "cc_tst_cands", ":", "\n", "        ", "e", "=", "G", ".", "edges", "[", "i", "]", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "G", ".", "nodes", "[", "e", ".", "head_id", "]", ".", "text", ",", "e", ".", "label", ",", "G", ".", "nodes", "[", "e", ".", "tail_id", "]", ".", "text", ",", "\n", "str", "(", "e", ".", "head_id", ")", ",", "str", "(", "e", ".", "tail_id", ")", ",", "'1'", "]", ")", "+", "'\\n'", ")", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "p", "[", "2", "]", ",", "''", ",", "''", ",", "'0'", "]", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "'Finished concept_contrastive'", ")", "\n", "\n", "ec_dev_cands", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'node_contrastive_dev.tsv'", ")", ",", "'w'", ")", "\n", "for", "i", ",", "p", "in", "ec_dev_cands", ":", "\n", "        ", "e", "=", "G", ".", "edges", "[", "i", "]", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "G", ".", "nodes", "[", "e", ".", "head_id", "]", ".", "text", ",", "e", ".", "label", ",", "G", ".", "nodes", "[", "e", ".", "tail_id", "]", ".", "text", ",", "\n", "str", "(", "e", ".", "head_id", ")", ",", "str", "(", "e", ".", "tail_id", ")", ",", "'1'", "]", ")", "+", "'\\n'", ")", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "p", "[", "2", "]", ",", "''", ",", "''", ",", "'0'", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "ec_tst_cands", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'node_contrastive_test.tsv'", ")", ",", "'w'", ")", "\n", "for", "i", ",", "p", "in", "ec_tst_cands", ":", "\n", "        ", "e", "=", "G", ".", "edges", "[", "i", "]", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "G", ".", "nodes", "[", "e", ".", "head_id", "]", ".", "text", ",", "e", ".", "label", ",", "G", ".", "nodes", "[", "e", ".", "tail_id", "]", ".", "text", ",", "\n", "str", "(", "e", ".", "head_id", ")", ",", "str", "(", "e", ".", "tail_id", ")", ",", "'1'", "]", ")", "+", "'\\n'", ")", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "p", "[", "2", "]", ",", "''", ",", "''", ",", "'0'", "]", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "'Finished node_contrastive'", ")", "\n", "\n", "lines", "=", "open", "(", "os", ".", "path", ".", "join", "(", "in_path", ",", "'edges.tsv'", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'edges.tsv'", ")", ",", "'w'", ")", "\n", "edge_head", ",", "lines", "=", "lines", "[", "0", "]", ",", "lines", "[", "1", ":", "]", "\n", "fw", ".", "write", "(", "edge_head", "+", "'\\n'", ")", "\n", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "l", "=", "l", ".", "split", "(", "'\\t'", ")", "\n", "l", "[", "-", "1", "]", "=", "splits", "[", "i", "]", "\n", "l", "=", "'\\t'", ".", "join", "(", "l", ")", "\n", "fw", ".", "write", "(", "l", "+", "'\\n'", ")", "\n", "\n", "", "print", "(", "'Finished edges'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.normalize": [[22, 27], ["re.sub", "re.sub"], "function", ["None"], ["def", "normalize", "(", "text", ")", ":", "\n", "    ", "text", "=", "re", ".", "sub", "(", "r'((http(\\S)*)|(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,}))'", ",", "\n", "'[URL]'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'[0-9][0-9\\-\\.,]{3,}[0-9]'", ",", "r'#'", ",", "text", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.KG_retrieve": [[28, 113], ["sqlite3.connect", "os.makedirs", "sqlite3.connect.cursor", "conn.cursor.execute", "tqdm.tqdm", "print", "conn.cursor.execute", "collections.defaultdict", "tqdm.tqdm", "node_samples.sort", "enumerate", "print", "list", "list.sort", "print", "open", "open.write", "edge_samples.sort", "open.close", "open", "open.write", "open.close", "enumerate", "all", "range", "enumerate", "list", "str", "range", "aser_build_graph.normalize", "aser_build_graph.normalize", "aser_build_graph.normalize", "len", "node_samples.append", "list.items", "print", "re_edge_samples.append", "os.path.join", "open.write", "os.path.join", "str", "open.write", "list", "len", "len", "len", "int", "len", "int", "unidecode.unidecode", "tk.tokenize", "print", "len", "len", "edge_samples.append", "int", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.normalize", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.normalize", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.normalize", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["", "def", "KG_retrieve", "(", "in_path", ",", "output_path", ")", ":", "\n", "    ", "conn", "=", "sqlite3", ".", "connect", "(", "in_path", ")", "\n", "os", ".", "makedirs", "(", "output_path", ",", "exist_ok", "=", "True", ")", "\n", "cur", "=", "conn", ".", "cursor", "(", ")", "\n", "\n", "node_present", "=", "{", "}", "\n", "\n", "cur", ".", "execute", "(", "'select * from Relations'", ")", "\n", "edge_samples", "=", "[", "]", "\n", "for", "i", ",", "e", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "cur", ")", ")", ":", "\n", "        ", "l", "=", "list", "(", "e", ")", "[", "1", ":", "]", "\n", "counts", "=", "l", "[", "2", ":", "-", "1", "]", "# CoOccurrence ignored", "\n", "if", "all", "(", "[", "int", "(", "c", ")", "==", "0", "for", "c", "in", "counts", "]", ")", ":", "\n", "            ", "continue", "\n", "", "if", "l", "[", "0", "]", "not", "in", "node_present", ":", "\n", "            ", "node_present", "[", "l", "[", "0", "]", "]", "=", "len", "(", "node_present", ")", "\n", "", "l", "[", "0", "]", "=", "node_present", "[", "l", "[", "0", "]", "]", "\n", "if", "l", "[", "1", "]", "not", "in", "node_present", ":", "\n", "            ", "node_present", "[", "l", "[", "1", "]", "]", "=", "len", "(", "node_present", ")", "\n", "", "l", "[", "1", "]", "=", "node_present", "[", "l", "[", "1", "]", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "counts", ")", ")", ":", "\n", "            ", "c", "=", "int", "(", "counts", "[", "j", "]", ")", "\n", "if", "c", ">", "0", ":", "\n", "                ", "edge_samples", ".", "append", "(", "[", "l", "[", "0", "]", ",", "l", "[", "1", "]", ",", "j", ",", "c", "]", ")", "# nodeid_v1", "\n", "\n", "", "", "", "print", "(", "'%d edge collected'", "%", "len", "(", "edge_samples", ")", ")", "\n", "\n", "cur", ".", "execute", "(", "'select * from Eventualities'", ")", "\n", "node_samples", "=", "[", "]", "\n", "# _id verbs skeleton_words_clean skeleton_words words pattern frequency", "\n", "lengths", "=", "defaultdict", "(", "int", ")", "\n", "for", "i", ",", "e", "in", "tqdm", ".", "tqdm", "(", "enumerate", "(", "cur", ")", ")", ":", "\n", "        ", "l", "=", "list", "(", "e", ")", "\n", "if", "l", "[", "0", "]", "not", "in", "node_present", ":", "\n", "            ", "continue", "\n", "", "l", "[", "0", "]", "=", "node_present", "[", "l", "[", "0", "]", "]", "# nodeid_v1", "\n", "l", "[", "-", "1", "]", "=", "str", "(", "int", "(", "l", "[", "-", "1", "]", ")", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "            ", "l", "[", "j", "]", "=", "unidecode", ".", "unidecode", "(", "l", "[", "j", "]", ")", "\n", "", "l", "[", "2", "]", "=", "normalize", "(", "l", "[", "2", "]", ")", "\n", "l", "[", "3", "]", "=", "normalize", "(", "l", "[", "3", "]", ")", "\n", "l", "[", "4", "]", "=", "normalize", "(", "l", "[", "4", "]", ")", "\n", "tlen", "=", "len", "(", "tk", ".", "tokenize", "(", "l", "[", "4", "]", ")", ")", "\n", "if", "tlen", ">", "20", ":", "\n", "            ", "print", "(", "tlen", ",", "l", "[", "4", "]", ")", "\n", "continue", "\n", "", "lengths", "[", "tlen", "]", "+=", "1", "\n", "node_samples", ".", "append", "(", "l", ")", "\n", "", "node_samples", ".", "sort", "(", ")", "\n", "\n", "node_mapping", "=", "{", "}", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "node_samples", ")", ":", "\n", "        ", "node_mapping", "[", "n", "[", "0", "]", "]", "=", "i", "# nodeid_v1 -> nodeid_v2", "\n", "n", "[", "0", "]", "=", "i", "\n", "\n", "", "print", "(", "'%d nodes'", "%", "len", "(", "node_samples", ")", ")", "\n", "lengths", "=", "list", "(", "lengths", ".", "items", "(", ")", ")", "\n", "lengths", ".", "sort", "(", ")", "\n", "for", "k", ",", "v", "in", "lengths", ":", "\n", "        ", "print", "(", "k", ",", "v", ")", "\n", "\n", "", "re_edge_samples", "=", "[", "]", "\n", "for", "e", "in", "edge_samples", ":", "\n", "        ", "if", "e", "[", "0", "]", "not", "in", "node_mapping", "or", "e", "[", "1", "]", "not", "in", "node_mapping", ":", "\n", "            ", "continue", "\n", "", "e", "[", "0", "]", "=", "node_mapping", "[", "e", "[", "0", "]", "]", "\n", "e", "[", "1", "]", "=", "node_mapping", "[", "e", "[", "1", "]", "]", "\n", "re_edge_samples", ".", "append", "(", "e", ")", "\n", "", "edge_samples", "=", "re_edge_samples", "\n", "print", "(", "'Rescanned: %d edges'", "%", "len", "(", "edge_samples", ")", ")", "\n", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'edges.tsv'", ")", ",", "'w'", ")", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "'head_id'", ",", "'tail_id'", ",", "'label'", ",", "'count'", "]", ")", "+", "'\\n'", ")", "\n", "edge_samples", ".", "sort", "(", ")", "\n", "for", "head_id", ",", "tail_id", ",", "label", ",", "count", "in", "edge_samples", ":", "\n", "        ", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "str", "(", "head_id", ")", ",", "str", "(", "tail_id", ")", ",", "types", "[", "label", "]", ",", "str", "(", "count", ")", "]", ")", "+", "'\\n'", ")", "\n", "", "fw", ".", "close", "(", ")", "\n", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'nodes.tsv'", ")", ",", "'w'", ")", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "'verbs'", ",", "'skeleton_words_clean'", ",", "'skeleton_words'", ",", "'words'", ",", "'pattern'", ",", "'count'", "]", ")", "+", "'\\n'", ")", "\n", "for", "l", "in", "node_samples", ":", "\n", "        ", "l", "=", "l", "[", "1", ":", "]", "\n", "l", "[", "-", "1", "]", "=", "str", "(", "l", "[", "-", "1", "]", ")", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "l", ")", "+", "'\\n'", ")", "\n", "", "fw", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.build_graph": [[115, 318], ["print", "open().read().splitlines", "node_head.split.split", "tqdm.tqdm", "print", "open().read().splitlines", "dict", "pickle.load", "open", "open.write", "print", "enumerate", "print", "open", "open.write", "enumerate", "print", "open", "range", "nodes[].split", "n[].split", "n[].split", "n[].split", "n[].split", "int", "l.split", "int", "int", "int", "open", "len", "skeletons.append", "range", "enumerate", "aser_build_graph.build_graph.find_entities_normal"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["", "def", "build_graph", "(", "base_path", ",", "out_path", ",", "concept_path", ")", ":", "\n", "    ", "print", "(", "'Loading nodes...'", ")", "\n", "lines", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'nodes.tsv'", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "node_head", ",", "nodes", "=", "lines", "[", "0", "]", ",", "lines", "[", "1", ":", "]", "\n", "node_head", "=", "node_head", ".", "split", "(", "'\\t'", ")", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "len", "(", "nodes", ")", ")", ")", ":", "\n", "        ", "n", "=", "nodes", "[", "i", "]", ".", "split", "(", "'\\t'", ")", "\n", "n", "[", "1", "]", "=", "n", "[", "1", "]", ".", "split", "(", "' '", ")", "\n", "n", "[", "2", "]", "=", "n", "[", "2", "]", ".", "split", "(", "' '", ")", "\n", "n", "[", "3", "]", "=", "n", "[", "3", "]", ".", "split", "(", "' '", ")", "\n", "n", "[", "4", "]", "=", "n", "[", "4", "]", ".", "split", "(", "'-'", ")", "\n", "n", "[", "5", "]", "=", "int", "(", "n", "[", "5", "]", ")", "\n", "nodes", "[", "i", "]", "=", "n", "\n", "\n", "", "print", "(", "'Loading edges...'", ")", "\n", "lines", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'edges.tsv'", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "lines", "=", "[", "l", ".", "split", "(", "'\\t'", ")", "for", "l", "in", "lines", "]", "\n", "edge_head", ",", "edges", "=", "lines", "[", "0", "]", ",", "lines", "[", "1", ":", "]", "\n", "for", "e", "in", "edges", ":", "\n", "        ", "e", "[", "0", "]", "=", "int", "(", "e", "[", "0", "]", ")", "\n", "e", "[", "1", "]", "=", "int", "(", "e", "[", "1", "]", ")", "\n", "e", "[", "-", "1", "]", "=", "int", "(", "e", "[", "-", "1", "]", ")", "\n", "\n", "# What we have:", "\n", "# 'verbs', 'skeleton_words_clean', 'skeleton_words', 'words', 'pattern', 'count'", "\n", "# 'head_id', 'tail_id', 'label', 'count'", "\n", "# What we need:", "\n", "# concepts: List[EntityMention]", "\n", "# EntityMention: l_i, l, r_i, r, det_idx, det_text, cent_i, cent_idx, base_concept, skeleton_id", "\n", "# Skeleton: text, [(node_id, entity_mention_id)]", "\n", "# Node.words/event_ids/annotation_ids & Edge.intertext are unnecessary; Edge.split would be handled later", "\n", "", "sk_text_to_id", "=", "dict", "(", ")", "\n", "skeletons", "=", "[", "]", "\n", "\n", "concept_set", "=", "pickle", ".", "load", "(", "open", "(", "concept_path", ",", "'rb'", ")", ")", "\n", "\n", "def", "get_skeleton", "(", "text", ":", "str", ")", "->", "int", ":", "\n", "        ", "if", "text", "in", "sk_text_to_id", ":", "\n", "            ", "return", "sk_text_to_id", "[", "text", "]", "\n", "", "sk_text_to_id", "[", "text", "]", "=", "len", "(", "skeletons", ")", "\n", "skeletons", ".", "append", "(", "(", "text", ",", "[", "]", ")", ")", "\n", "return", "len", "(", "skeletons", ")", "-", "1", "\n", "\n", "", "def", "list_index", "(", "l", ",", "item", ",", "from_idx", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "from_idx", "+", "1", ",", "len", "(", "l", ")", ")", ":", "\n", "            ", "if", "l", "[", "i", "]", "==", "item", ":", "\n", "                ", "return", "i", "\n", "", "", "return", "None", "\n", "\n", "", "def", "find_entities_normal", "(", "skeleton_words", ",", "words", ":", "list", ",", "pattern", ")", ":", "\n", "        ", "last_i", "=", "-", "1", "\n", "results", "=", "[", "]", "\n", "for", "k", ",", "(", "sk", ",", "p", ")", "in", "enumerate", "(", "zip", "(", "skeleton_words", ",", "pattern", ")", ")", ":", "\n", "            ", "next", "=", "list_index", "(", "words", ",", "sk", ",", "last_i", ")", "\n", "if", "next", "is", "None", ":", "\n", "                ", "if", "p", "==", "'X'", ":", "\n", "                    ", "next", "=", "last_i", "\n", "", "else", ":", "\n", "                    ", "return", "None", "\n", "", "", "last_i", "=", "next", "\n", "results", ".", "append", "(", "last_i", ")", "\n", "", "return", "results", "\n", "\n", "", "dets", "=", "[", "'a'", ",", "'an'", ",", "'the'", ",", "'this'", ",", "'that'", ",", "'some'", "]", "\n", "\n", "def", "find_entities", "(", "skeleton_words", ",", "words", ":", "list", ",", "pattern", ":", "list", ")", ":", "\n", "        ", "results", "=", "find_entities_normal", "(", "skeleton_words", ",", "words", ",", "pattern", ")", "\n", "if", "results", "is", "not", "None", "or", "(", "results", "is", "None", "and", "'X'", "not", "in", "pattern", ")", ":", "\n", "            ", "return", "results", "\n", "# X-o-s-v-...", "\n", "", "a_pattern", "=", "pattern", "[", "-", "2", ":", "]", "+", "pattern", "[", ":", "-", "2", "]", "\n", "results", "=", "find_entities_normal", "(", "skeleton_words", ",", "words", ",", "a_pattern", ")", "\n", "if", "results", "is", "not", "None", ":", "\n", "            ", "if", "results", "[", "0", "]", "==", "-", "1", "and", "words", "[", "0", "]", "!=", "skeleton_words", "[", "0", "]", ":", "\n", "                ", "words", ".", "insert", "(", "0", ",", "skeleton_words", "[", "0", "]", ")", "\n", "results", "=", "find_entities_normal", "(", "skeleton_words", ",", "words", ",", "a_pattern", ")", "\n", "pattern", ".", "clear", "(", ")", "\n", "pattern", ".", "extend", "(", "a_pattern", ")", "\n", "return", "results", "\n", "", "else", ":", "\n", "                ", "return", "None", "\n", "# s-X-o-...", "\n", "", "", "a_pattern", "=", "pattern", "[", ":", "1", "]", "+", "pattern", "[", "-", "2", ":", "]", "+", "pattern", "[", "1", ":", "-", "2", "]", "\n", "results", "=", "find_entities_normal", "(", "skeleton_words", ",", "words", ",", "a_pattern", ")", "\n", "if", "results", "is", "not", "None", ":", "\n", "            ", "if", "results", "[", "1", "]", "==", "results", "[", "0", "]", "and", "words", "[", "results", "[", "0", "]", "+", "1", "]", "!=", "skeleton_words", "[", "1", "]", ":", "\n", "                ", "words", ".", "insert", "(", "results", "[", "0", "]", "+", "1", ",", "skeleton_words", "[", "1", "]", ")", "\n", "results", "=", "find_entities_normal", "(", "skeleton_words", ",", "words", ",", "a_pattern", ")", "\n", "# if not (words[results[0] + 2] != skeleton_words[2] or (results[0] + 3 < len(words) and", "\n", "#         words[results[0] + 2] in dets and words[results[0] + 3] == skeleton_words[2])):", "\n", "#     print(3.5)", "\n", "#     return None", "\n", "pattern", ".", "clear", "(", ")", "\n", "pattern", ".", "extend", "(", "a_pattern", ")", "\n", "return", "results", "\n", "", "else", ":", "\n", "                ", "return", "None", "\n", "# s-v-X-o-...", "\n", "", "", "a_pattern", "=", "pattern", "[", ":", "2", "]", "+", "pattern", "[", "-", "2", ":", "]", "+", "pattern", "[", "2", ":", "-", "2", "]", "\n", "results", "=", "find_entities_normal", "(", "skeleton_words", ",", "words", ",", "a_pattern", ")", "\n", "if", "results", "is", "not", "None", ":", "\n", "            ", "if", "results", "[", "2", "]", "==", "results", "[", "1", "]", "and", "words", "[", "results", "[", "1", "]", "+", "1", "]", "!=", "skeleton_words", "[", "2", "]", ":", "\n", "                ", "words", ".", "insert", "(", "results", "[", "1", "]", "+", "1", ",", "skeleton_words", "[", "2", "]", ")", "\n", "results", "=", "find_entities_normal", "(", "skeleton_words", ",", "words", ",", "a_pattern", ")", "\n", "# if not (words[results[1] + 2] == skeleton_words[3] or (results[1] + 3 < len(words) and", "\n", "#         words[results[1] + 2] in dets and words[results[1] + 3] == skeleton_words[3])):", "\n", "#     print(4.5)", "\n", "#     return None", "\n", "pattern", ".", "clear", "(", ")", "\n", "pattern", ".", "extend", "(", "a_pattern", ")", "\n", "return", "results", "\n", "", "else", ":", "\n", "                ", "return", "None", "\n", "", "", "return", "results", "\n", "\n", "", "def", "build_entity_mention", "(", "sk_positions", ",", "l", ",", "r", ",", "k", ",", "words", ",", "skeleton_id", ",", "offsets", ",", "base_concept", ")", ":", "\n", "# sk_positions: k -> i/l/r (word index); l/r: pos in words; offsets: i -> idx (char offset)", "\n", "        ", "if", "k", "==", "0", ":", "\n", "            ", "low", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "low", "=", "sk_positions", "[", "k", "-", "1", "]", "\n", "", "det_i", "=", "l", "\n", "for", "i", "in", "range", "(", "l", "-", "1", ",", "low", ",", "-", "1", ")", ":", "\n", "            ", "if", "words", "[", "i", "]", "in", "[", "'a'", ",", "'the'", ",", "'an'", "]", ":", "\n", "                ", "det_i", "=", "i", "\n", "break", "\n", "", "", "if", "det_i", "==", "l", ":", "\n", "            ", "det_text", "=", "''", "\n", "", "else", ":", "\n", "            ", "det_text", "=", "words", "[", "det_i", "]", "\n", "", "det_idx", "=", "offsets", "[", "det_i", "]", "\n", "return", "EntityMention", "(", "l_i", "=", "l", ",", "l", "=", "offsets", "[", "l", "]", ",", "r_i", "=", "r", ",", "r", "=", "offsets", "[", "r", "]", "+", "len", "(", "words", "[", "r", "]", ")", ",", "det_idx", "=", "det_idx", ",", "\n", "det_text", "=", "det_text", ",", "cent_i", "=", "r", ",", "cent_idx", "=", "offsets", "[", "r", "]", ",", "base_concept", "=", "base_concept", ",", "\n", "skeleton_id", "=", "skeleton_id", ")", "\n", "\n", "", "def", "build_mentions_skeletons", "(", "node_id", ",", "skeleton_words_clean", ",", "skeleton_words", ",", "words", ",", "pattern", ",", "sk_positions", ")", ":", "\n", "        ", "concepts", "=", "[", "]", "\n", "offsets", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "words", ")", ")", ":", "\n", "            ", "offsets", ".", "append", "(", "offsets", "[", "i", "-", "1", "]", "+", "len", "(", "words", "[", "i", "-", "1", "]", ")", "+", "1", ")", "\n", "", "text", "=", "' '", ".", "join", "(", "words", ")", "\n", "last", "=", "-", "1", "\n", "for", "k", ",", "i", "in", "enumerate", "(", "sk_positions", ")", ":", "\n", "            ", "if", "(", "pattern", "[", "k", "]", "not", "in", "[", "'s'", ",", "'o'", ",", "'spass'", ",", "'a'", "]", ")", "or", "(", "skeleton_words", "[", "k", "]", "not", "in", "skeleton_words_clean", ")", ":", "\n", "                ", "last", "=", "i", "\n", "continue", "\n", "", "l", "=", "r", "=", "i", "\n", "while", "l", ">", "last", ":", "\n", "                ", "if", "words", "[", "l", "]", "in", "dets", ":", "\n", "                    ", "break", "\n", "", "cand", "=", "text", "[", "offsets", "[", "l", "]", ":", "offsets", "[", "r", "]", "+", "len", "(", "words", "[", "r", "]", ")", "]", "\n", "if", "cand", "not", "in", "concept_set", ":", "\n", "                    ", "l", "-=", "1", "\n", "continue", "\n", "", "alt_text", "=", "text", "[", ":", "offsets", "[", "l", "]", "]", "+", "'[SEP]'", "+", "text", "[", "offsets", "[", "r", "]", "+", "len", "(", "words", "[", "r", "]", ")", ":", "]", "\n", "skeleton_id", "=", "get_skeleton", "(", "alt_text", ")", "\n", "skeletons", "[", "skeleton_id", "]", "[", "1", "]", ".", "append", "(", "(", "node_id", ",", "len", "(", "concepts", ")", ")", ")", "\n", "concepts", ".", "append", "(", "build_entity_mention", "(", "sk_positions", ",", "l", ",", "r", ",", "k", ",", "words", ",", "skeleton_id", ",", "offsets", ",", "cand", ")", ")", "\n", "l", "-=", "1", "\n", "", "last", "=", "i", "\n", "", "return", "concepts", "\n", "\n", "", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'nodes.tsv'", ")", ",", "'w'", ")", "\n", "fw", ".", "write", "(", "'id\ttext\twords\tconcepts\tevent_ids\tannotation_ids\\n'", ")", "\n", "\n", "re_node_ids", "=", "[", "]", "\n", "n_node", "=", "0", "\n", "# 'verbs', 'skeleton_words_clean', 'skeleton_words', 'words', 'pattern', 'count'", "\n", "print", "(", "'Start building...'", ")", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "nodes", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "len", "(", "n", "[", "2", "]", ")", "!=", "len", "(", "n", "[", "4", "]", ")", ":", "\n", "                ", "raise", "ValueError", "(", ")", "\n", "", "sk_positions", "=", "find_entities", "(", "n", "[", "2", "]", ",", "n", "[", "3", "]", ",", "n", "[", "4", "]", ")", "\n", "if", "sk_positions", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", ")", "\n", "", "", "except", ":", "\n", "            ", "re_node_ids", ".", "append", "(", "None", ")", "\n", "print", "(", "i", ",", "': '", ",", "n", ")", "\n", "continue", "\n", "", "concepts", "=", "build_mentions_skeletons", "(", "n_node", ",", "n", "[", "1", "]", ",", "n", "[", "2", "]", ",", "n", "[", "3", "]", ",", "n", "[", "4", "]", ",", "sk_positions", ")", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "str", "(", "n_node", ")", ",", "' '", ".", "join", "(", "n", "[", "3", "]", ")", ",", "'[]'", ",", "json", ".", "dumps", "(", "concepts", ")", ",", "'[]'", ",", "'[]'", "]", ")", "+", "'\\n'", ")", "\n", "re_node_ids", ".", "append", "(", "n_node", ")", "\n", "n_node", "+=", "1", "\n", "", "print", "(", "'Total %d nodes, %d disposed'", "%", "(", "len", "(", "re_node_ids", ")", ",", "len", "(", "re_node_ids", ")", "-", "n_node", ")", ")", "\n", "assert", "len", "(", "re_node_ids", ")", "==", "len", "(", "nodes", ")", ",", "'%d %d'", "%", "(", "len", "(", "re_node_ids", ")", ",", "len", "(", "nodes", ")", ")", "\n", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'edges.tsv'", ")", ",", "'w'", ")", "\n", "fw", ".", "write", "(", "'head_id\ttail_id\tlabel\tinter_text\tcount\tsplit\\n'", ")", "\n", "n_fail_edges", "=", "0", "\n", "for", "i", ",", "e", "in", "enumerate", "(", "edges", ")", ":", "\n", "        ", "if", "re_node_ids", "[", "e", "[", "0", "]", "]", "is", "None", "or", "re_node_ids", "[", "e", "[", "1", "]", "]", "is", "None", ":", "\n", "            ", "print", "(", "i", ",", "': '", ",", "'[%d]'", "%", "e", "[", "0", "]", ",", "nodes", "[", "e", "[", "0", "]", "]", ",", "e", "[", "2", "]", ",", "'[%d]'", "%", "e", "[", "1", "]", ",", "nodes", "[", "e", "[", "1", "]", "]", ")", "\n", "n_fail_edges", "+=", "1", "\n", "continue", "\n", "", "e", "[", "0", "]", "=", "re_node_ids", "[", "e", "[", "0", "]", "]", "\n", "e", "[", "1", "]", "=", "re_node_ids", "[", "e", "[", "1", "]", "]", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "str", "(", "e", "[", "0", "]", ")", ",", "str", "(", "e", "[", "1", "]", ")", ",", "e", "[", "2", "]", ",", "''", ",", "str", "(", "e", "[", "3", "]", ")", ",", "''", "]", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "'Total %d edges disposed'", "%", "n_fail_edges", ")", "\n", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'skeletons.tsv'", ")", ",", "'w'", ")", "\n", "for", "text", ",", "sub", "in", "skeletons", ":", "\n", "        ", "fw", ".", "write", "(", "'%s\\t%s\\n'", "%", "(", "text", ",", "json", ".", "dumps", "(", "sub", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split": [[319, 412], ["datafeeder.Graph", "int", "datafeeder.EdgeComponentProposer", "datafeeder.ConceptualizeProposer", "list", "numpy.random.choice", "print", "tqdm.tqdm", "len", "print", "random.shuffle", "enumerate", "cc_dev_cands.sort", "open", "open", "print", "ec_dev_cands.sort", "open", "open", "print", "open().read().splitlines", "open", "open.write", "enumerate", "print", "os.path.exists", "os.makedirs", "shutil.copy", "len", "range", "datafeeder.EdgeComponentProposer.propose", "ec_dev_cands.append", "os.path.join", "open.write", "open.write", "os.path.join", "open.write", "open.write", "os.path.join", "open.write", "open.write", "os.path.join", "open.write", "open.write", "os.path.join", "l.split.split", "open.write", "os.path.join", "os.path.join", "len", "len", "datafeeder.ConceptualizeProposer.propose", "cc_dev_cands.append", "enumerate", "open().read", "len", "open", "str", "str", "str", "str", "str", "str", "str", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.EdgeComponentProposer.propose", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.EdgeComponentProposer.propose", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["", "", "def", "split", "(", "in_path", ",", "base_path", ")", ":", "\n", "    ", "files", "=", "[", "'nodes.tsv'", ",", "'edges.tsv'", ",", "'skeletons.tsv'", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "base_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "base_path", ")", "\n", "\n", "", "for", "f", "in", "files", ":", "\n", "        ", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "in_path", ",", "f", ")", ",", "os", ".", "path", ".", "join", "(", "base_path", ")", ")", "\n", "\n", "", "G", "=", "Graph", "(", "in_path", ",", "hparams", ")", "\n", "splits", "=", "[", "'train'", "]", "*", "len", "(", "G", ".", "edges", ")", "\n", "n_dev", "=", "int", "(", "0.2", "*", "len", "(", "splits", ")", ")", "\n", "# n_dev = 1000", "\n", "cc_dev_cands", "=", "[", "]", "\n", "ec_dev_cands", "=", "[", "]", "\n", "\n", "hparams", ".", "expr", "=", "'aser'", "\n", "hparams", ".", "ht_symmetry", "=", "True", "\n", "EP", "=", "EdgeComponentProposer", "(", "G", ",", "hparams", ")", "\n", "CP", "=", "ConceptualizeProposer", "(", "G", ",", "hparams", ")", "\n", "\n", "all_idx", "=", "list", "(", "range", "(", "len", "(", "splits", ")", ")", ")", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "all_idx", ",", "[", "n_dev", "]", ",", "replace", "=", "False", ")", "\n", "\n", "print", "(", "'Start producing samples..'", ")", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "idx", ")", ":", "\n", "        ", "splits", "[", "i", "]", "=", "'dev'", "\n", "p", "=", "EP", ".", "propose", "(", "G", ".", "edges", "[", "i", "]", ")", "\n", "ec_dev_cands", ".", "append", "(", "[", "i", ",", "p", "]", ")", "\n", "try", ":", "\n", "            ", "p", "=", "CP", ".", "propose", "(", "G", ".", "edges", "[", "i", "]", ")", "\n", "splits", "[", "i", "]", "=", "'test'", "\n", "cc_dev_cands", ".", "append", "(", "[", "i", ",", "p", "]", ")", "\n", "", "except", "ProposeFailError", "as", "e", ":", "\n", "            ", "continue", "\n", "\n", "", "", "total_dev", "=", "len", "(", "[", "c", "for", "c", "in", "splits", "if", "c", "==", "'dev'", "]", ")", "\n", "print", "(", "'Total dev %d, test %d, n_dev=%d'", "%", "(", "total_dev", ",", "len", "(", "cc_dev_cands", ")", ",", "n_dev", ")", ")", "\n", "\n", "ids", "=", "[", "i", "for", "i", ",", "s", "in", "enumerate", "(", "splits", ")", "if", "s", "in", "[", "'dev'", ",", "'test'", "]", "]", "\n", "random", ".", "shuffle", "(", "ids", ")", "\n", "for", "i", ",", "id", "in", "enumerate", "(", "ids", ")", ":", "\n", "        ", "splits", "[", "id", "]", "=", "'dev'", "if", "i", "%", "2", "==", "0", "else", "'test'", "\n", "\n", "", "cc_dev_cands", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'concept_contrastive_dev.tsv'", ")", ",", "'w'", ")", "\n", "for", "i", ",", "p", "in", "cc_dev_cands", ":", "\n", "        ", "if", "splits", "[", "i", "]", "!=", "'dev'", ":", "\n", "            ", "continue", "\n", "", "e", "=", "G", ".", "edges", "[", "i", "]", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "G", ".", "nodes", "[", "e", ".", "head_id", "]", ".", "text", ",", "e", ".", "label", ",", "G", ".", "nodes", "[", "e", ".", "tail_id", "]", ".", "text", ",", "\n", "str", "(", "e", ".", "head_id", ")", ",", "str", "(", "e", ".", "tail_id", ")", ",", "'1'", "]", ")", "+", "'\\n'", ")", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "p", "[", "2", "]", ",", "''", ",", "''", ",", "'0'", "]", ")", "+", "'\\n'", ")", "\n", "", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'concept_contrastive_test.tsv'", ")", ",", "'w'", ")", "\n", "for", "i", ",", "p", "in", "cc_dev_cands", ":", "\n", "        ", "if", "splits", "[", "i", "]", "!=", "'test'", ":", "\n", "            ", "continue", "\n", "", "e", "=", "G", ".", "edges", "[", "i", "]", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "G", ".", "nodes", "[", "e", ".", "head_id", "]", ".", "text", ",", "e", ".", "label", ",", "G", ".", "nodes", "[", "e", ".", "tail_id", "]", ".", "text", ",", "\n", "str", "(", "e", ".", "head_id", ")", ",", "str", "(", "e", ".", "tail_id", ")", ",", "'1'", "]", ")", "+", "'\\n'", ")", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "p", "[", "2", "]", ",", "''", ",", "''", ",", "'0'", "]", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "'Finished concept_contrastive'", ")", "\n", "\n", "ec_dev_cands", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'node_contrastive_dev.tsv'", ")", ",", "'w'", ")", "\n", "for", "i", ",", "p", "in", "ec_dev_cands", ":", "\n", "        ", "if", "splits", "[", "i", "]", "!=", "'dev'", ":", "\n", "            ", "continue", "\n", "", "e", "=", "G", ".", "edges", "[", "i", "]", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "G", ".", "nodes", "[", "e", ".", "head_id", "]", ".", "text", ",", "e", ".", "label", ",", "G", ".", "nodes", "[", "e", ".", "tail_id", "]", ".", "text", ",", "\n", "str", "(", "e", ".", "head_id", ")", ",", "str", "(", "e", ".", "tail_id", ")", ",", "'1'", "]", ")", "+", "'\\n'", ")", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "p", "[", "2", "]", ",", "''", ",", "''", ",", "'0'", "]", ")", "+", "'\\n'", ")", "\n", "", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'node_contrastive_test.tsv'", ")", ",", "'w'", ")", "\n", "for", "i", ",", "p", "in", "ec_dev_cands", ":", "\n", "        ", "if", "splits", "[", "i", "]", "!=", "'test'", ":", "\n", "            ", "continue", "\n", "", "e", "=", "G", ".", "edges", "[", "i", "]", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "G", ".", "nodes", "[", "e", ".", "head_id", "]", ".", "text", ",", "e", ".", "label", ",", "G", ".", "nodes", "[", "e", ".", "tail_id", "]", ".", "text", ",", "\n", "str", "(", "e", ".", "head_id", ")", ",", "str", "(", "e", ".", "tail_id", ")", ",", "'1'", "]", ")", "+", "'\\n'", ")", "\n", "fw", ".", "write", "(", "'\\t'", ".", "join", "(", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", ",", "p", "[", "2", "]", ",", "''", ",", "''", ",", "'0'", "]", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "'Finished node_contrastive'", ")", "\n", "\n", "lines", "=", "open", "(", "os", ".", "path", ".", "join", "(", "in_path", ",", "'edges.tsv'", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "fw", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'edges.tsv'", ")", ",", "'w'", ")", "\n", "edge_head", ",", "lines", "=", "lines", "[", "0", "]", ",", "lines", "[", "1", ":", "]", "\n", "fw", ".", "write", "(", "edge_head", "+", "'\\n'", ")", "\n", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "l", "=", "l", ".", "split", "(", "'\\t'", ")", "\n", "l", "[", "-", "1", "]", "=", "splits", "[", "i", "]", "\n", "l", "=", "'\\t'", ".", "join", "(", "l", ")", "\n", "fw", ".", "write", "(", "l", "+", "'\\n'", ")", "\n", "\n", "", "print", "(", "'Finished edges'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.prepare_for_comet": [[413, 474], ["dict", "datafeeder.Graph", "aser_build_graph.prepare_for_comet.collect_split"], "function", ["None"], ["", "def", "prepare_for_comet", "(", "g_path", ",", "out_path", ")", ":", "\n", "    ", "types", "=", "[", "'Precedence'", ",", "'Succession'", ",", "'Synchronous'", ",", "'Reason'", ",", "'Result'", ",", "'Condition'", ",", "'Contrast'", ",", "'Concession'", ",", "\n", "'Conjunction'", ",", "'Instantiation'", ",", "'Restatement'", ",", "'ChosenAlternative'", ",", "'Alternative'", ",", "'Exception'", "]", "\n", "columns", "=", "[", "'event'", "]", "+", "types", "+", "[", "'split'", "]", "\n", "column_to_pos", "=", "dict", "(", "[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "enumerate", "(", "columns", ")", "]", ")", "\n", "\n", "g", "=", "Graph", "(", "g_path", ",", "None", ")", "\n", "\n", "# Note that this function only collect from G, so the contrastive negative samples are not included", "\n", "def", "collect_split", "(", "split", ",", "alt_split_name", ")", ":", "\n", "        ", "collected_edges", "=", "defaultdict", "(", "list", ")", "\n", "for", "e", "in", "g", ".", "edges", ":", "\n", "            ", "if", "e", ".", "split", "==", "split", ":", "\n", "                ", "collected_edges", "[", "e", ".", "head_id", "]", ".", "append", "(", "e", ")", "\n", "", "", "samples", "=", "[", "]", "\n", "for", "head_id", ",", "edges", "in", "tqdm", ".", "tqdm", "(", "list", "(", "collected_edges", ".", "items", "(", ")", ")", ")", ":", "\n", "            ", "line", "=", "[", "list", "(", ")", "for", "_", "in", "columns", "]", "\n", "line", "[", "0", "]", "=", "g", ".", "nodes", "[", "head_id", "]", ".", "text", "\n", "line", "[", "-", "1", "]", "=", "alt_split_name", "\n", "for", "e", "in", "edges", ":", "\n", "                ", "line", "[", "column_to_pos", "[", "e", ".", "label", "]", "]", ".", "append", "(", "g", ".", "nodes", "[", "e", ".", "tail_id", "]", ".", "text", ")", "\n", "", "samples", ".", "append", "(", "line", ")", "\n", "", "cdf", "=", "pd", ".", "DataFrame", "(", "samples", ",", "columns", "=", "columns", ")", "\n", "cdf", ".", "iloc", "[", ":", ",", "1", ":", "15", "]", "=", "cdf", ".", "iloc", "[", ":", ",", "1", ":", "15", "]", ".", "apply", "(", "lambda", "col", ":", "col", ".", "apply", "(", "json", ".", "dumps", ")", ")", "\n", "return", "cdf", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "out_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_path", ")", "\n", "\n", "", "df_dev", "=", "collect_split", "(", "'train'", ",", "'trn'", ")", "\n", "df_dev", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'v3_aser_trn.csv'", ")", ",", "index", "=", "False", ",", "quotechar", "=", "'\"'", ",", "doublequote", "=", "'\"\"'", ")", "\n", "\n", "df_dev", "=", "collect_split", "(", "'dev'", ",", "'dev'", ")", "\n", "df_dev", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'v3_aser_dev.csv'", ")", ",", "index", "=", "False", ",", "quotechar", "=", "'\"'", ",", "doublequote", "=", "'\"\"'", ")", "\n", "\n", "df_dev", "=", "collect_split", "(", "'test'", ",", "'tst'", ")", "\n", "df_dev", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'v3_aser_tst.csv'", ")", ",", "index", "=", "False", ",", "quotechar", "=", "'\"'", ",", "doublequote", "=", "'\"\"'", ")", "\n", "\n", "def", "prepare_contrastives", "(", "c_path", ",", "alt_split_name", ")", ":", "\n", "        ", "print", "(", "'Build contrastives...'", "+", "alt_split_name", ")", "\n", "lines", "=", "open", "(", "c_path", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "samples", "=", "[", "]", "\n", "for", "l", "in", "tqdm", ".", "tqdm", "(", "lines", ")", ":", "\n", "            ", "sent", "=", "l", ".", "split", "(", "'\\t'", ")", "\n", "line", "=", "[", "list", "(", ")", "for", "_", "in", "columns", "]", "\n", "line", "[", "0", "]", "=", "sent", "[", "0", "]", "\n", "line", "[", "-", "1", "]", "=", "alt_split_name", "\n", "line", "[", "column_to_pos", "[", "sent", "[", "1", "]", "]", "]", ".", "append", "(", "sent", "[", "2", "]", ")", "\n", "samples", ".", "append", "(", "line", ")", "\n", "", "cdf", "=", "pd", ".", "DataFrame", "(", "samples", ",", "columns", "=", "list", "(", "columns", ")", ")", "\n", "cdf", ".", "iloc", "[", ":", ",", "1", ":", "15", "]", "=", "cdf", ".", "iloc", "[", ":", ",", "1", ":", "15", "]", ".", "apply", "(", "lambda", "col", ":", "col", ".", "apply", "(", "json", ".", "dumps", ")", ")", "\n", "return", "cdf", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'scoring'", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'scoring'", ")", ")", "\n", "\n", "", "df_dev", "=", "prepare_contrastives", "(", "os", ".", "path", ".", "join", "(", "g_path", ",", "'node_contrastive_test.tsv'", ")", ",", "'tst'", ")", "\n", "df_dev", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'scoring'", ",", "'v3_aser_node_test.csv'", ")", ",", "index", "=", "False", ",", "quotechar", "=", "'\"'", ",", "doublequote", "=", "'\"\"'", ")", "\n", "\n", "df_dev", "=", "prepare_contrastives", "(", "os", ".", "path", ".", "join", "(", "g_path", ",", "'concept_contrastive_test.tsv'", ")", ",", "'tst'", ")", "\n", "df_dev", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "'scoring'", ",", "'v3_aser_concept_test.csv'", ")", ",", "index", "=", "False", ",", "quotechar", "=", "'\"'", ",", "doublequote", "=", "'\"\"'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.train.evaluate": [[24, 50], ["model.eval", "print", "numpy.mean", "numpy.concatenate", "numpy.concatenate", "torch.no_grad", "numpy.sum", "len", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "len", "feeder.next_batch", "model", "np.mean.append", "np.concatenate.append", "np.concatenate.append", "numpy.logical_and", "numpy.logical_and", "outputs[].item", "outputs[].cpu().detach().numpy", "feeder.next_batch.labels.detach().numpy", "feeder.next_batch.input_ids.to", "feeder.next_batch.input_mask.to", "feeder.next_batch.labels.to", "feeder.next_batch.token_type_ids.to", "outputs[].cpu().detach", "feeder.next_batch.labels.detach", "outputs[].cpu", "hparams.hparams"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.FullGenerationFeeder.next_batch", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["def", "evaluate", "(", "args", ",", "model", ",", "feeder", ",", "hparams", ")", ":", "\n", "    ", "all_preds", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "model", ".", "eval", "(", ")", "\n", "all_labels", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "batch", "=", "feeder", ".", "next_batch", "(", ")", "\n", "if", "batch", "is", "None", ":", "\n", "                ", "break", "\n", "", "outputs", "=", "model", "(", "input_ids", "=", "batch", ".", "input_ids", ".", "to", "(", "device", ")", ",", "\n", "attention_mask", "=", "batch", ".", "input_mask", ".", "to", "(", "device", ")", ",", "\n", "token_type_ids", "=", "None", "if", "batch", ".", "token_type_ids", "is", "None", "else", "batch", ".", "token_type_ids", ".", "to", "(", "device", ")", ",", "\n", "labels", "=", "batch", ".", "labels", ".", "to", "(", "device", ")", ")", "\n", "losses", ".", "append", "(", "outputs", "[", "'loss'", "]", ".", "item", "(", ")", ")", "\n", "all_preds", ".", "append", "(", "outputs", "[", "'preds'", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_labels", ".", "append", "(", "batch", ".", "labels", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "print", "(", "'Finished eval...'", ")", "\n", "losses", "=", "np", ".", "mean", "(", "losses", ")", "\n", "all_preds", "=", "np", ".", "concatenate", "(", "all_preds", ")", "\n", "all_labels", "=", "np", ".", "concatenate", "(", "all_labels", ")", "\n", "acc", "=", "np", ".", "sum", "(", "all_preds", "==", "all_labels", ")", "/", "len", "(", "all_preds", ")", "\n", "t_acc", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "all_preds", "==", "1", ",", "all_labels", "==", "1", ")", ")", "/", "np", ".", "sum", "(", "all_labels", "==", "1", ")", "\n", "f_acc", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "all_preds", "==", "0", ",", "all_labels", "==", "0", ")", ")", "/", "np", ".", "sum", "(", "all_labels", "==", "0", ")", "\n", "binary_acc", "=", "np", ".", "sum", "(", "(", "all_preds", "==", "1", ")", "==", "(", "all_labels", "==", "1", ")", ")", "/", "len", "(", "all_preds", ")", "\n", "return", "{", "'loss'", ":", "losses", ",", "'acc'", ":", "acc", ",", "'binary_acc'", ":", "binary_acc", ",", "'t_acc'", ":", "t_acc", ",", "'f_acc'", ":", "f_acc", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.train.get_linear_schedule_with_warmup": [[52, 60], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max"], "function", ["None"], ["", "def", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "lr_decay_step", ",", "max_lr_decay_rate", ")", ":", "\n", "    ", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "return", "max", "(", "max_lr_decay_rate", ",", "float", "(", "lr_decay_step", "-", "current_step", ")", "\n", "/", "float", "(", "max", "(", "1", ",", "lr_decay_step", "-", "num_warmup_steps", ")", ")", ")", "\n", "\n", "", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.train.run_eval": [[61, 80], ["time.time", "train.evaluate", "evaluate.items", "logging.info", "time.time", "logs.items"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.train.evaluate"], ["", "def", "run_eval", "(", "args", ",", "model", ",", "eval_feeder", ")", ":", "\n", "    ", "logs", "=", "{", "}", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "name", ",", "e", "in", "eval_feeder", ":", "\n", "        ", "results", "=", "evaluate", "(", "args", ",", "model", ",", "e", ",", "hparams", ")", "\n", "if", "name", ":", "\n", "            ", "key_name", "=", "name", "+", "'/'", "\n", "", "else", ":", "\n", "            ", "key_name", "=", "''", "\n", "", "for", "key", ",", "value", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "eval_key", "=", "'eval/'", "+", "key_name", "+", "key", "\n", "logs", "[", "eval_key", "]", "=", "value", "\n", "", "step_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "result_msg", "=", "' '", ".", "join", "(", "[", "'%s=%.04f'", "%", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", "]", ")", "\n", "message", "=", "'Evaluation in %.02f sec: %s'", "%", "(", "step_time", ",", "result_msg", ")", "\n", "if", "name", ":", "\n", "            ", "message", "=", "'[%s] '", "%", "name", "+", "message", "\n", "", "logging", ".", "info", "(", "message", ")", "\n", "", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.train.train": [[81, 285], ["utils.set_logger", "logging.info", "logging.info", "hparams.hparams.parse", "logging.info", "hparams.hparams.parse", "logging.info", "torch.utils.tensorboard.SummaryWriter", "transformers.AdamW", "train.get_linear_schedule_with_warmup", "utils.ValueWindow", "utils.ValueWindow", "utils.ValueWindow", "model.from_pretrained.to", "model.from_pretrained.zero_grad", "time.time", "logging.info", "os.path.join", "os.path.join", "os.path.join", "logging.info", "torch.device", "torch.device", "hparams.hparams_debug_string", "logging.info", "logging.info", "model.from_pretrained.from_pretrained", "step.isnumeric", "transformers.RobertaTokenizer.from_pretrained", "transformers.BertTokenizer.from_pretrained", "hparams.hparams_debug_string", "logging.info", "train.run_eval", "run_eval.items", "datafeeder.PrebuiltTrainFeeder", "datafeeder.DataFeeder", "datafeeder.DataFeeder.next_batch", "model.from_pretrained.train", "model.from_pretrained.", "torch.mean", "preds.cpu().detach().numpy.cpu().detach().numpy", "train_feeder.next_batch.labels.detach().numpy", "loss.item", "torch.mean.item", "loss.backward", "torch.nn.utils.clip_grad_norm_", "transformers.AdamW.step", "get_linear_schedule_with_warmup.step", "model.from_pretrained.zero_grad", "utils.ValueWindow.append", "utils.ValueWindow.append", "utils.ValueWindow.append", "logging.info", "time.time", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.isdir", "print", "os.path.isdir", "print", "logging.info", "logging.info", "model.from_pretrained.", "os.path.isdir", "OSError", "args.model_path.split", "int", "logging.info", "ValueError", "args.eval_text_path.split", "name.endswith", "eval_feeder.append", "os.path.exists", "os.path.exists", "transformers.AdamW.load_state_dict", "transformers.AdamW.load_state_dict", "get_linear_schedule_with_warmup.load_state_dict", "get_linear_schedule_with_warmup.load_state_dict", "logging.warning", "torch.utils.tensorboard.SummaryWriter.add_scalar", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "model.from_pretrained.parameters", "time.time", "os.path.join", "model_to_save.save_pretrained", "torch.save", "torch.save", "torch.save", "logging.info", "train.run_eval", "run_eval.items", "datetime.datetime.now().strftime", "datetime.datetime.now().strftime", "torch.cuda.is_available", "model.from_pretrained.from_pretrained", "model.from_pretrained.from_pretrained", "transformers.BertConfig.from_pretrained", "transformers.RobertaConfig.from_pretrained", "os.path.split", "datafeeder.DataFeeder", "os.path.join", "os.path.join", "torch.load", "transformers.AdamW.state_dict", "torch.load", "get_linear_schedule_with_warmup.state_dict", "train_feeder.next_batch.input_ids.to", "train_feeder.next_batch.input_mask.to", "train_feeder.next_batch.labels.to", "preds.cpu().detach().numpy.cpu().detach", "train_feeder.next_batch.labels.detach", "numpy.logical_and", "numpy.logical_and", "hasattr", "os.path.exists", "os.makedirs", "os.path.join", "transformers.AdamW.state_dict", "os.path.join", "get_linear_schedule_with_warmup.state_dict", "os.path.join", "get_linear_schedule_with_warmup.get_lr", "torch.utils.tensorboard.SummaryWriter.add_scalar", "str", "datafeeder.ExternalTextFeeder", "model.from_pretrained.named_parameters", "model.from_pretrained.named_parameters", "any", "os.path.join", "os.path.join", "train_feeder.next_batch.token_type_ids.to", "datetime.datetime.now", "datetime.datetime.now", "any", "preds.cpu().detach().numpy.cpu", "preds.cpu().detach().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.set_logger", "home.repos.pwc.inspect_result.mutiann_ccc.None.train.get_linear_schedule_with_warmup", "home.repos.pwc.inspect_result.mutiann_ccc.None.hparams.hparams_debug_string", "home.repos.pwc.inspect_result.mutiann_ccc.None.hparams.hparams_debug_string", "home.repos.pwc.inspect_result.mutiann_ccc.None.train.run_eval", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.FullGenerationFeeder.next_batch", "home.repos.pwc.inspect_result.mutiann_ccc.None.train.train", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.train.run_eval", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "model_path", "is", "None", ":", "\n", "        ", "msg", "=", "'Prepare for new run ...'", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "args", ".", "run_name", "+", "'_'", "+", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%m%d_%H%M'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_dir", ",", "args", ".", "run_name", "+", "'_'", "+", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%m%d_%H%M'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "ckpt_dir", ")", "\n", "", "", "else", ":", "\n", "        ", "msg", "=", "'Restart previous run ...\\nlogs to save to %s, ckpt to save to %s, model to load from %s'", "%", "(", "args", ".", "log_dir", ",", "args", ".", "ckpt_dir", ",", "args", ".", "model_path", ")", "\n", "output_dir", "=", "args", ".", "log_dir", "\n", "ckpt_dir", "=", "args", ".", "ckpt_dir", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "            ", "print", "(", "'Invalid log dir: %s'", "%", "output_dir", ")", "\n", "return", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "ckpt_dir", ")", ":", "\n", "            ", "print", "(", "'Invalid ckpt dir: %s'", "%", "ckpt_dir", ")", "\n", "return", "\n", "\n", "", "", "set_logger", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'outputs.log'", ")", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "global", "device", "\n", "if", "args", ".", "device", "is", "not", "None", ":", "\n", "        ", "logging", ".", "info", "(", "'Setting device to '", "+", "args", ".", "device", ")", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Setting up...'", ")", "\n", "hparams", ".", "parse", "(", "args", ".", "hparams", ")", "\n", "logging", ".", "info", "(", "hparams_debug_string", "(", ")", ")", "\n", "\n", "model", "=", "EdgeClassification", "\n", "\n", "if", "hparams", ".", "use_roberta", ":", "\n", "        ", "logging", ".", "info", "(", "'Using Roberta...'", ")", "\n", "model", "=", "RobertaEdgeClassification", "\n", "\n", "", "global_step", "=", "0", "\n", "\n", "if", "args", ".", "model_path", "is", "None", ":", "\n", "        ", "if", "hparams", ".", "load_pretrained", ":", "\n", "            ", "logging", ".", "info", "(", "'Load online pretrained model...'", "+", "\n", "(", "(", "'cached at '", "+", "args", ".", "cache_path", ")", "if", "args", ".", "cache_path", "is", "not", "None", "else", "''", ")", ")", "\n", "if", "hparams", ".", "use_roberta", ":", "\n", "                ", "model", "=", "model", ".", "from_pretrained", "(", "'roberta-base'", ",", "cache_dir", "=", "args", ".", "cache_path", ",", "hparams", "=", "hparams", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "model", ".", "from_pretrained", "(", "'bert-base-uncased'", ",", "cache_dir", "=", "args", ".", "cache_path", ",", "hparams", "=", "hparams", ")", "\n", "", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'Build model from scratch...'", ")", "\n", "if", "hparams", ".", "use_roberta", ":", "\n", "                ", "config", "=", "BertConfig", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "", "else", ":", "\n", "                ", "config", "=", "RobertaConfig", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "", "model", "=", "model", "(", "config", "=", "config", ",", "hparams", "=", "hparams", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "model_path", ")", ":", "\n", "            ", "raise", "OSError", "(", "str", "(", "args", ".", "model_path", ")", "+", "' not found'", ")", "\n", "", "logging", ".", "info", "(", "'Load saved model from %s ...'", "%", "(", "args", ".", "model_path", ")", ")", "\n", "model", "=", "model", ".", "from_pretrained", "(", "args", ".", "model_path", ",", "hparams", "=", "hparams", ")", "\n", "step", "=", "args", ".", "model_path", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "if", "step", ".", "isnumeric", "(", ")", ":", "\n", "            ", "global_step", "=", "int", "(", "step", ")", "\n", "logging", ".", "info", "(", "'Initial step=%d'", "%", "global_step", ")", "\n", "\n", "", "", "if", "hparams", ".", "use_roberta", ":", "\n", "        ", "tokenizer", "=", "RobertaTokenizer", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "", "else", ":", "\n", "        ", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "", "hparams", ".", "parse", "(", "args", ".", "hparams", ")", "\n", "logging", ".", "info", "(", "hparams_debug_string", "(", ")", ")", "\n", "\n", "if", "hparams", ".", "text_sample_eval", ":", "\n", "        ", "if", "args", ".", "eval_text_path", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'eval_text_path not given'", ")", "\n", "", "if", "':'", "not", "in", "args", ".", "eval_text_path", ":", "\n", "            ", "eval_data_paths", "=", "[", "args", ".", "eval_text_path", "]", "\n", "", "else", ":", "\n", "            ", "eval_data_paths", "=", "args", ".", "eval_text_path", ".", "split", "(", "':'", ")", "\n", "", "eval_feeder", "=", "[", "]", "\n", "for", "p", "in", "eval_data_paths", ":", "\n", "            ", "name", "=", "os", ".", "path", ".", "split", "(", "p", ")", "[", "-", "1", "]", "\n", "if", "name", ".", "endswith", "(", "'.tsv'", ")", ":", "\n", "                ", "name", "=", "name", "[", ":", "-", "4", "]", "\n", "", "eval_feeder", ".", "append", "(", "(", "name", ",", "ExternalTextFeeder", "(", "p", ",", "hparams", ",", "tokenizer", ",", "'dev'", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "eval_feeder", "=", "[", "(", "''", ",", "DataFeeder", "(", "args", ".", "data_dir", ",", "hparams", ",", "tokenizer", ",", "'dev'", ")", ")", "]", "\n", "\n", "", "tb_writer", "=", "SummaryWriter", "(", "output_dir", ")", "\n", "\n", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "hparams", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "\n", "optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ",", "lr", "=", "hparams", ".", "learning_rate", ",", "eps", "=", "hparams", ".", "adam_epsilon", ")", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", "=", "hparams", ".", "warmup_steps", ",", "\n", "lr_decay_step", "=", "hparams", ".", "lr_decay_step", ",", "\n", "max_lr_decay_rate", "=", "hparams", ".", "max_lr_decay_rate", ")", "\n", "\n", "acc_step", "=", "global_step", "*", "hparams", ".", "gradient_accumulation_steps", "\n", "time_window", "=", "ValueWindow", "(", ")", "\n", "loss_window", "=", "ValueWindow", "(", ")", "\n", "acc_window", "=", "ValueWindow", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "tr_loss", "=", "tr_acc", "=", "0.0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "model_path", "is", "not", "None", ":", "\n", "        ", "logging", ".", "info", "(", "'Load saved model from %s ...'", "%", "(", "args", ".", "model_path", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'optimizer.pt'", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'scheduler.pt'", ")", ")", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'optimizer.pt'", ")", ")", ")", "\n", "optimizer", ".", "load_state_dict", "(", "optimizer", ".", "state_dict", "(", ")", ")", "\n", "scheduler", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "'scheduler.pt'", ")", ")", ")", "\n", "scheduler", ".", "load_state_dict", "(", "scheduler", ".", "state_dict", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "warning", "(", "'Could not find saved optimizer/scheduler'", ")", "\n", "\n", "", "", "if", "global_step", ">", "0", ":", "\n", "        ", "logs", "=", "run_eval", "(", "args", ",", "model", ",", "eval_feeder", ")", "\n", "for", "key", ",", "value", "in", "logs", ".", "items", "(", ")", ":", "\n", "            ", "tb_writer", ".", "add_scalar", "(", "key", ",", "value", ",", "global_step", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "'Start training...'", ")", "\n", "if", "hparams", ".", "text_sample_train", ":", "\n", "        ", "train_feeder", "=", "PrebuiltTrainFeeder", "(", "args", ".", "train_text_path", ",", "hparams", ",", "tokenizer", ",", "'train'", ")", "\n", "", "else", ":", "\n", "        ", "train_feeder", "=", "DataFeeder", "(", "args", ".", "data_dir", ",", "hparams", ",", "tokenizer", ",", "'train'", ")", "\n", "\n", "", "while", "True", ":", "\n", "        ", "batch", "=", "train_feeder", ".", "next_batch", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "outputs", "=", "model", "(", "input_ids", "=", "batch", ".", "input_ids", ".", "to", "(", "device", ")", ",", "\n", "attention_mask", "=", "batch", ".", "input_mask", ".", "to", "(", "device", ")", ",", "\n", "token_type_ids", "=", "None", "if", "batch", ".", "token_type_ids", "is", "None", "else", "batch", ".", "token_type_ids", ".", "to", "(", "device", ")", ",", "\n", "labels", "=", "batch", ".", "labels", ".", "to", "(", "device", ")", ")", "\n", "loss", "=", "outputs", "[", "'loss'", "]", "\n", "preds", "=", "outputs", "[", "'preds'", "]", "\n", "\n", "acc", "=", "torch", ".", "mean", "(", "(", "preds", ".", "cpu", "(", ")", "==", "batch", ".", "labels", ")", ".", "float", "(", ")", ")", "\n", "preds", "=", "preds", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "batch", ".", "labels", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "t_acc", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "preds", "==", "1", ",", "labels", "==", "1", ")", ")", "/", "np", ".", "sum", "(", "labels", "==", "1", ")", "\n", "f_acc", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "preds", "==", "0", ",", "labels", "==", "0", ")", ")", "/", "np", ".", "sum", "(", "labels", "==", "0", ")", "\n", "\n", "if", "hparams", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "            ", "loss", "=", "loss", "/", "hparams", ".", "gradient_accumulation_steps", "\n", "acc", "=", "acc", "/", "hparams", ".", "gradient_accumulation_steps", "\n", "\n", "", "tr_loss", "+=", "loss", ".", "item", "(", ")", "\n", "tr_acc", "+=", "acc", ".", "item", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "acc_step", "+=", "1", "\n", "\n", "if", "acc_step", "%", "hparams", ".", "gradient_accumulation_steps", "!=", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "hparams", ".", "max_grad_norm", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", "None", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "global_step", "+=", "1", "\n", "\n", "step_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "time_window", ".", "append", "(", "step_time", ")", "\n", "loss_window", ".", "append", "(", "tr_loss", ")", "\n", "acc_window", ".", "append", "(", "tr_acc", ")", "\n", "\n", "if", "global_step", "%", "args", ".", "save_steps", "==", "0", ":", "\n", "# Save model checkpoint", "\n", "            ", "model_to_save", "=", "model", ".", "module", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", "\n", "cur_ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "'checkpoint_%d'", "%", "(", "global_step", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cur_ckpt_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "cur_ckpt_dir", ")", "\n", "", "model_to_save", ".", "save_pretrained", "(", "cur_ckpt_dir", ")", "\n", "torch", ".", "save", "(", "args", ",", "os", ".", "path", ".", "join", "(", "cur_ckpt_dir", ",", "'training_args.bin'", ")", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "cur_ckpt_dir", ",", "'optimizer.pt'", ")", ")", "\n", "torch", ".", "save", "(", "scheduler", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "cur_ckpt_dir", ",", "'scheduler.pt'", ")", ")", "\n", "logging", ".", "info", "(", "\"Saving model checkpoint to %s\"", ",", "cur_ckpt_dir", ")", "\n", "\n", "", "if", "global_step", "%", "args", ".", "logging_steps", "==", "0", ":", "\n", "            ", "logs", "=", "run_eval", "(", "args", ",", "model", ",", "eval_feeder", ")", "\n", "\n", "learning_rate_scalar", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "logs", "[", "'learning_rate'", "]", "=", "learning_rate_scalar", "\n", "logs", "[", "'loss'", "]", "=", "loss_window", ".", "average", "\n", "logs", "[", "'acc'", "]", "=", "acc_window", ".", "average", "\n", "\n", "for", "key", ",", "value", "in", "logs", ".", "items", "(", ")", ":", "\n", "                ", "tb_writer", ".", "add_scalar", "(", "key", ",", "value", ",", "global_step", ")", "\n", "\n", "", "", "message", "=", "'Step %-7d [%.03f sec/step, loss=%.05f, avg_loss=%.05f, acc=%.05f, avg_acc=%.05f, t_acc=%.05f, f_acc=%.05f]'", "%", "(", "\n", "global_step", ",", "step_time", ",", "tr_loss", ",", "loss_window", ".", "average", ",", "tr_acc", ",", "acc_window", ".", "average", ",", "t_acc", ",", "f_acc", ")", "\n", "logging", ".", "info", "(", "message", ")", "\n", "tr_loss", "=", "tr_acc", "=", "0.0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.EdgeSample.__str__": [[34, 36], ["str"], "methods", ["None"], ["def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'\\t'", ".", "join", "(", "[", "self", ".", "head_text", ",", "self", ".", "edge", ",", "self", ".", "tail_text", ",", "str", "(", "self", ".", "type", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.Graph.__init__": [[80, 111], ["tqdm.tqdm", "collections.defaultdict", "tqdm.tqdm", "open().read().splitlines", "tqdm.tqdm", "logging.info", "open().read().splitlines", "range", "lines[].split", "utils.Node", "datafeeder.Graph.nodes.append", "open().read().splitlines", "range", "lines[].split", "utils.Edge", "datafeeder.Graph.edges.append", "range", "lines[].split", "utils.Skeleton", "datafeeder.Graph.skeletons.append", "len", "utils.EntityMention", "len", "open().read", "len", "open().read", "json.loads", "enumerate", "open().read", "json.loads", "enumerate", "json.loads", "enumerate", "len", "len", "len", "open", "open", "open", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["    ", "def", "__init__", "(", "self", ",", "base_path", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "_hparams", "=", "hparams", "\n", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "lines", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'nodes.tsv'", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "[", "1", ":", "]", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "len", "(", "lines", ")", ")", ")", ":", "\n", "            ", "l", "=", "lines", "[", "i", "]", ".", "split", "(", "'\\t'", ")", "\n", "l", "=", "[", "t", "if", "Node", ".", "_field_types", "[", "Node", ".", "_fields", "[", "i", "]", "]", "is", "str", "else", "json", ".", "loads", "(", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "l", ")", "]", "\n", "l", "[", "3", "]", "=", "[", "EntityMention", "(", "*", "e", ")", "for", "e", "in", "l", "[", "3", "]", "]", "\n", "n", "=", "Node", "(", "*", "l", ")", "\n", "self", ".", "nodes", ".", "append", "(", "n", ")", "\n", "\n", "", "self", ".", "edges", "=", "[", "]", "\n", "self", ".", "_graph", "=", "defaultdict", "(", "dict", ")", "\n", "lines", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'edges.tsv'", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "[", "1", ":", "]", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "len", "(", "lines", ")", ")", ")", ":", "\n", "            ", "l", "=", "lines", "[", "i", "]", ".", "split", "(", "'\\t'", ")", "\n", "l", "=", "[", "t", "if", "Edge", ".", "_field_types", "[", "Edge", ".", "_fields", "[", "i", "]", "]", "is", "str", "else", "json", ".", "loads", "(", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "l", ")", "]", "\n", "e", "=", "Edge", "(", "*", "l", ")", "\n", "self", ".", "edges", ".", "append", "(", "e", ")", "\n", "self", ".", "_graph", "[", "(", "e", ".", "head_id", ",", "e", ".", "tail_id", ")", "]", "[", "e", ".", "label", "]", "=", "i", "\n", "\n", "", "self", ".", "skeletons", "=", "[", "]", "\n", "lines", "=", "open", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'skeletons.tsv'", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "len", "(", "lines", ")", ")", ")", ":", "\n", "            ", "l", "=", "lines", "[", "i", "]", ".", "split", "(", "'\\t'", ")", "\n", "l", "=", "[", "t", "if", "Skeleton", ".", "_field_types", "[", "Skeleton", ".", "_fields", "[", "i", "]", "]", "is", "str", "else", "json", ".", "loads", "(", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "l", ")", "]", "\n", "s", "=", "Skeleton", "(", "*", "l", ")", "\n", "self", ".", "skeletons", ".", "append", "(", "s", ")", "\n", "", "logging", ".", "info", "(", "'KG built, with %d nodes, %d edges, %d skeletons'", "%", "\n", "(", "len", "(", "self", ".", "nodes", ")", ",", "len", "(", "self", ".", "edges", ")", ",", "len", "(", "self", ".", "skeletons", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.Graph.find_edge_by_hrt": [[112, 117], ["None"], "methods", ["None"], ["", "def", "find_edge_by_hrt", "(", "self", ",", "head_id", ",", "edge_label", ",", "tail_id", ")", ":", "\n", "        ", "if", "(", "head_id", ",", "tail_id", ")", "in", "self", ".", "_graph", "and", "edge_label", "in", "self", ".", "_graph", "[", "(", "head_id", ",", "tail_id", ")", "]", ":", "\n", "            ", "return", "self", ".", "_graph", "[", "(", "head_id", ",", "tail_id", ")", "]", "[", "edge_label", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.Graph.find_node_by_skeleton_and_concept": [[118, 124], ["None"], "methods", ["None"], ["", "", "def", "find_node_by_skeleton_and_concept", "(", "self", ",", "skeleton_id", ":", "int", ",", "concept", ":", "str", ")", ":", "\n", "        ", "for", "node_id", ",", "entity_mention_id", "in", "self", ".", "skeletons", "[", "skeleton_id", "]", ".", "subs", ":", "\n", "            ", "mention", "=", "self", ".", "nodes", "[", "node_id", "]", ".", "concepts", "[", "entity_mention_id", "]", "\n", "if", "mention", ".", "base_concept", "==", "concept", ":", "\n", "                ", "return", "node_id", ",", "entity_mention_id", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.ConceptualizeProposer.__init__": [[131, 140], ["conceptualize_proposer.Proposer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kg", ":", "Graph", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "_concept_proposer", "=", "Proposer", "(", ")", "\n", "self", ".", "_kg", "=", "kg", "\n", "self", ".", "_sub_mode", "=", "hparams", ".", "entity_sub_mode", "\n", "self", ".", "_concept_score", "=", "hparams", ".", "concept_score", "\n", "self", ".", "_weighted", "=", "hparams", ".", "score_weighted", "\n", "self", ".", "_random_mode", "=", "hparams", ".", "random_select_mode", "\n", "self", ".", "_n_candidates", "=", "hparams", ".", "n_candidates", "\n", "self", ".", "_max_entity_word_inc", "=", "hparams", ".", "max_entity_word_inc", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.ConceptualizeProposer.find_node_from_substitution": [[141, 149], ["datafeeder.ConceptualizeProposer._kg.find_node_by_skeleton_and_concept"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.Graph.find_node_by_skeleton_and_concept"], ["", "def", "find_node_from_substitution", "(", "self", ",", "node", ":", "Node", ",", "sub", ":", "Substitution", ")", ":", "\n", "        ", "entity_mention_id", "=", "sub", ".", "entity_mention_id", "\n", "skeleton_id", "=", "node", ".", "concepts", "[", "entity_mention_id", "]", ".", "skeleton_id", "\n", "result", "=", "self", ".", "_kg", ".", "find_node_by_skeleton_and_concept", "(", "skeleton_id", ",", "sub", ".", "alt_slice", ")", "\n", "if", "result", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "result", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.ConceptualizeProposer.propose_substitutions": [[150, 161], ["datafeeder.ConceptualizeProposer._concept_proposer.conceptualize", "datafeeder.ConceptualizeProposer._concept_proposer.random_substitution", "ValueError"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.conceptualize", "home.repos.pwc.inspect_result.mutiann_ccc.None.conceptualize_proposer.Proposer.random_substitution"], ["", "", "def", "propose_substitutions", "(", "self", ",", "node", ":", "Node", ")", "->", "List", "[", "Substitution", "]", ":", "\n", "        ", "if", "self", ".", "_sub_mode", "==", "'conceptualize'", ":", "\n", "            ", "return", "self", ".", "_concept_proposer", ".", "conceptualize", "(", "\n", "node", ".", "text", ",", "node", ".", "concepts", ",", "False", ",", "score_method", "=", "self", ".", "_concept_score", ",", "\n", "top_k", "=", "self", ".", "_n_candidates", ",", "max_entity_word_inc", "=", "self", ".", "_max_entity_word_inc", ")", "\n", "", "elif", "self", ".", "_sub_mode", "==", "'random_entity'", ":", "\n", "            ", "return", "self", ".", "_concept_proposer", ".", "random_substitution", "(", "\n", "node", ".", "text", ",", "node", ".", "concepts", ",", "mode", "=", "self", ".", "_random_mode", ",", "top_k", "=", "self", ".", "_n_candidates", ",", "weighted", "=", "self", ".", "_weighted", ",", "\n", "max_entity_word_inc", "=", "self", ".", "_max_entity_word_inc", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported substitution mode: '", "+", "self", ".", "_sub_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.ConceptualizeProposer.propose": [[162, 209], ["datafeeder.ConceptualizeProposer.propose_substitutions", "datafeeder.ConceptualizeProposer.propose_substitutions", "range", "range", "datafeeder.ProposeFailError", "datafeeder.ConceptualizeProposer.find_node_from_substitution", "datafeeder.ConceptualizeProposer.find_node_from_substitution", "len", "len", "list", "len", "len", "list", "len", "datafeeder.ProposeFailError", "random.choice", "len", "len", "proposals.append", "list.append", "proposals.append", "list.append", "random.choices", "datafeeder.ConceptualizeProposer._kg.find_edge_by_hrt", "datafeeder.EdgeSample", "len", "datafeeder.ConceptualizeProposer._kg.find_edge_by_hrt", "datafeeder.EdgeSample", "len", "numpy.asarray", "sum", "numpy.asarray", "sum"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.ConceptualizeProposer.propose_substitutions", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.ConceptualizeProposer.propose_substitutions", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.ConceptualizeProposer.find_node_from_substitution", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.ConceptualizeProposer.find_node_from_substitution", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.Graph.find_edge_by_hrt", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.Graph.find_edge_by_hrt", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum"], ["", "", "def", "propose", "(", "self", ",", "e", ":", "Edge", ",", "return_all", "=", "False", ")", "->", "Union", "[", "EdgeSample", ",", "List", "[", "EdgeSample", "]", "]", ":", "\n", "        ", "head", "=", "self", ".", "_kg", ".", "nodes", "[", "e", ".", "head_id", "]", "\n", "tail", "=", "self", ".", "_kg", ".", "nodes", "[", "e", ".", "tail_id", "]", "\n", "if", "len", "(", "head", ".", "concepts", ")", "+", "len", "(", "tail", ".", "concepts", ")", "==", "0", ":", "\n", "            ", "raise", "ProposeFailError", "(", ")", "\n", "\n", "", "head_subs", "=", "self", ".", "propose_substitutions", "(", "head", ")", "\n", "tail_subs", "=", "self", ".", "propose_substitutions", "(", "tail", ")", "\n", "\n", "head_sub_to_nodes", "=", "[", "self", ".", "find_node_from_substitution", "(", "head", ",", "sub", ")", "for", "sub", "in", "head_subs", "]", "\n", "tail_sub_to_nodes", "=", "[", "self", ".", "find_node_from_substitution", "(", "tail", ",", "sub", ")", "for", "sub", "in", "tail_subs", "]", "\n", "\n", "proposals", "=", "[", "]", "\n", "head_weights", "=", "[", "]", "\n", "tail_weights", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "head_subs", ")", ")", ":", "\n", "            ", "if", "head_sub_to_nodes", "[", "i", "]", "is", "None", "or", "self", ".", "_kg", ".", "find_edge_by_hrt", "(", "head_sub_to_nodes", "[", "i", "]", ",", "e", ".", "label", ",", "\n", "e", ".", "tail_id", ")", "is", "None", ":", "\n", "                ", "if", "(", "head_subs", "[", "i", "]", ".", "alt_text", ",", "e", ".", "label", ",", "tail", ".", "text", ")", "in", "exclude_text_samples", ":", "\n", "                    ", "continue", "\n", "", "proposals", ".", "append", "(", "EdgeSample", "(", "head_subs", "[", "i", "]", ".", "alt_text", ",", "e", ".", "label", ",", "tail", ".", "text", ",", "SampleType", ".", "CC", ")", ")", "\n", "head_weights", ".", "append", "(", "head_subs", "[", "i", "]", ".", "weight", ")", "\n", "\n", "", "", "if", "len", "(", "head_weights", ")", ">", "0", ":", "\n", "            ", "head_weights", "=", "list", "(", "np", ".", "asarray", "(", "head_weights", ")", "/", "sum", "(", "head_weights", ")", "/", "len", "(", "head_weights", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "tail_subs", ")", ")", ":", "\n", "            ", "if", "tail_sub_to_nodes", "[", "i", "]", "is", "None", "or", "self", ".", "_kg", ".", "find_edge_by_hrt", "(", "e", ".", "head_id", ",", "e", ".", "label", ",", "\n", "tail_sub_to_nodes", "[", "i", "]", ")", "is", "None", ":", "\n", "                ", "if", "(", "head", ".", "text", ",", "e", ".", "label", ",", "tail_subs", "[", "i", "]", ".", "alt_text", ")", "in", "exclude_text_samples", ":", "\n", "                    ", "continue", "\n", "", "proposals", ".", "append", "(", "EdgeSample", "(", "head", ".", "text", ",", "e", ".", "label", ",", "tail_subs", "[", "i", "]", ".", "alt_text", ",", "SampleType", ".", "CC", ")", ")", "\n", "tail_weights", ".", "append", "(", "tail_subs", "[", "i", "]", ".", "weight", ")", "\n", "\n", "", "", "if", "len", "(", "tail_weights", ")", ">", "0", ":", "\n", "            ", "tail_weights", "=", "list", "(", "np", ".", "asarray", "(", "tail_weights", ")", "/", "sum", "(", "tail_weights", ")", "/", "len", "(", "tail_weights", ")", ")", "\n", "\n", "", "weights", "=", "head_weights", "+", "tail_weights", "\n", "if", "len", "(", "proposals", ")", "==", "0", ":", "\n", "            ", "raise", "ProposeFailError", "(", ")", "\n", "", "if", "return_all", ":", "\n", "            ", "return", "proposals", "\n", "", "if", "self", ".", "_weighted", ":", "\n", "            ", "proposal", "=", "random", ".", "choices", "(", "proposals", ",", "weights", "=", "weights", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "proposal", "=", "random", ".", "choice", "(", "proposals", ")", "\n", "", "return", "proposal", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.EdgeComponentProposer.__init__": [[212, 229], ["list", "set", "collections.defaultdict", "list", "collections.defaultdict.keys", "range", "list.add", "tails_pool[].add", "list", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kg", ":", "Graph", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "_kg", "=", "kg", "\n", "self", ".", "_ht_symmetry", "=", "hparams", ".", "ht_symmetry", "\n", "if", "hparams", ".", "ht_symmetry", ":", "\n", "            ", "self", ".", "_heads_pool", "=", "self", ".", "_tails_pool", "=", "list", "(", "range", "(", "len", "(", "kg", ".", "nodes", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "heads_pool", "=", "set", "(", ")", "\n", "tails_pool", "=", "defaultdict", "(", "set", ")", "\n", "\n", "for", "e", "in", "kg", ".", "edges", ":", "\n", "                ", "heads_pool", ".", "add", "(", "e", ".", "head_id", ")", "\n", "tails_pool", "[", "e", ".", "label", "]", ".", "add", "(", "e", ".", "tail_id", ")", "\n", "", "heads_pool", "=", "list", "(", "heads_pool", ")", "\n", "for", "key", "in", "tails_pool", ".", "keys", "(", ")", ":", "\n", "                ", "tails_pool", "[", "key", "]", "=", "list", "(", "tails_pool", "[", "key", "]", ")", "\n", "", "self", ".", "_heads_pool", "=", "heads_pool", "\n", "self", ".", "_tails_pool", "=", "tails_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.EdgeComponentProposer.propose": [[230, 252], ["random.random", "datafeeder.EdgeSample", "random.choice", "random.choice", "datafeeder.EdgeComponentProposer._kg.find_edge_by_hrt", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.Graph.find_edge_by_hrt"], ["", "", "def", "propose", "(", "self", ",", "e", ":", "Edge", ")", "->", "EdgeSample", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "lot", "=", "random", ".", "random", "(", ")", "\n", "if", "self", ".", "_ht_symmetry", ":", "\n", "                ", "thres", "=", "0.5", "\n", "tails_pool", "=", "self", ".", "_tails_pool", "\n", "", "else", ":", "\n", "                ", "thres", "=", "len", "(", "self", ".", "_heads_pool", ")", "/", "(", "len", "(", "self", ".", "_heads_pool", ")", "+", "len", "(", "self", ".", "_tails_pool", "[", "e", ".", "label", "]", ")", ")", "\n", "tails_pool", "=", "self", ".", "_tails_pool", "[", "e", ".", "label", "]", "\n", "", "if", "lot", "<", "thres", ":", "\n", "                ", "head_id", "=", "random", ".", "choice", "(", "self", ".", "_heads_pool", ")", "\n", "tail_id", "=", "e", ".", "tail_id", "\n", "", "else", ":", "\n", "                ", "head_id", "=", "e", ".", "head_id", "\n", "tail_id", "=", "random", ".", "choice", "(", "tails_pool", ")", "\n", "", "if", "self", ".", "_kg", ".", "find_edge_by_hrt", "(", "head_id", ",", "e", ".", "label", ",", "tail_id", ")", "is", "not", "None", ":", "\n", "                ", "continue", "\n", "", "head", "=", "self", ".", "_kg", ".", "nodes", "[", "head_id", "]", "\n", "tail", "=", "self", ".", "_kg", ".", "nodes", "[", "tail_id", "]", "\n", "if", "(", "head", ".", "text", ",", "e", ".", "label", ",", "tail", ".", "text", ")", "in", "exclude_text_samples", ":", "\n", "                ", "continue", "\n", "", "return", "EdgeSample", "(", "head", ".", "text", ",", "e", ".", "label", ",", "tail", ".", "text", ",", "SampleType", ".", "NODE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.DataFeeder.__init__": [[255, 292], ["logging.info", "datafeeder.Graph", "list", "logging.info", "logging.info", "range", "random.shuffle", "datafeeder.DataFeeder._proposers.append", "datafeeder.DataFeeder._proposer_weights.append", "datafeeder.DataFeeder._proposers.append", "datafeeder.DataFeeder._proposer_weights.append", "len", "datafeeder.ConceptualizeProposer", "datafeeder.EdgeComponentProposer", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["    ", "def", "__init__", "(", "self", ",", "base_path", ",", "hparams", ",", "tokenizer", ":", "tokenization_bert", ".", "PreTrainedTokenizer", ",", "mode", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Initializing DataFeeder [%s]...'", "%", "mode", ")", "\n", "self", ".", "_tokenizer", "=", "tokenizer", "\n", "self", ".", "_hparams", "=", "hparams", "\n", "\n", "self", ".", "_kg", "=", "Graph", "(", "base_path", ",", "hparams", ")", "\n", "\n", "self", ".", "_offset", "=", "0", "\n", "self", ".", "_epoch", "=", "0", "\n", "self", ".", "_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "_kg", ".", "edges", ")", ")", ")", "\n", "self", ".", "_mode", "=", "mode", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "_sampling_rate", "=", "hparams", ".", "sampling_rate", "\n", "self", ".", "_batch_size", "=", "hparams", ".", "train_batch_size", "\n", "", "elif", "mode", "==", "'dev'", ":", "\n", "            ", "self", ".", "_sampling_rate", "=", "hparams", ".", "sampling_rate", "\n", "self", ".", "_batch_size", "=", "hparams", ".", "eval_batch_size", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "_sampling_rate", "=", "0.0", "\n", "self", ".", "_batch_size", "=", "hparams", ".", "eval_batch_size", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported mode'", ")", "\n", "", "self", ".", "_indices", "=", "[", "c", "for", "c", "in", "self", ".", "_indices", "if", "self", ".", "_kg", ".", "edges", "[", "c", "]", ".", "split", "==", "mode", "]", "\n", "if", "mode", "in", "[", "'train'", "]", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "_indices", ")", "\n", "", "logging", ".", "info", "(", "'DataFeeder [%s] collected %d samples'", "%", "(", "mode", ",", "len", "(", "self", ".", "_indices", ")", ")", ")", "\n", "\n", "self", ".", "_proposers", "=", "[", "]", "\n", "self", ".", "_proposer_weights", "=", "[", "]", "\n", "if", "hparams", ".", "conceptualize_rate", ">", "0", ":", "\n", "            ", "self", ".", "_proposers", ".", "append", "(", "ConceptualizeProposer", "(", "self", ".", "_kg", ",", "hparams", ")", ")", "\n", "self", ".", "_proposer_weights", ".", "append", "(", "hparams", ".", "conceptualize_rate", ")", "\n", "", "if", "hparams", ".", "conceptualize_rate", "<", "1", ":", "\n", "            ", "self", ".", "_proposers", ".", "append", "(", "EdgeComponentProposer", "(", "self", ".", "_kg", ",", "hparams", ")", ")", "\n", "self", ".", "_proposer_weights", ".", "append", "(", "1", "-", "hparams", ".", "conceptualize_rate", ")", "\n", "\n", "", "logging", ".", "info", "(", "'DataFeeder [%s] initialized'", "%", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.DataFeeder.produce_sample": [[293, 299], ["datafeeder.EdgeSample", "false_proposer.propose"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.EdgeComponentProposer.propose"], ["", "def", "produce_sample", "(", "self", ",", "base_sample_id", ",", "use_true_sample", ",", "false_proposer", ")", "->", "EdgeSample", ":", "\n", "        ", "e", "=", "self", ".", "_kg", ".", "edges", "[", "base_sample_id", "]", "\n", "if", "use_true_sample", ":", "\n", "            ", "return", "EdgeSample", "(", "self", ".", "_kg", ".", "nodes", "[", "e", ".", "head_id", "]", ".", "text", ",", "e", ".", "label", ",", "self", ".", "_kg", ".", "nodes", "[", "e", ".", "tail_id", "]", ".", "text", ",", "SampleType", ".", "TRUTH", ")", "\n", "", "else", ":", "\n", "            ", "return", "false_proposer", ".", "propose", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.DataFeeder.next_sample": [[300, 318], ["len", "datafeeder.DataFeeder.produce_sample", "datafeeder.DataFeeder._base_sample_ids.append", "random.shuffle", "traceback.print_exc", "isinstance", "datafeeder.DataFeeder.next_sample"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.DataFeeder.produce_sample", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.FullGenerationFeeder.next_sample"], ["", "", "def", "next_sample", "(", "self", ",", "use_true_sample", ",", "false_proposer", ",", "fail_retry", "=", "True", ")", "->", "EdgeSample", ":", "\n", "        ", "if", "self", ".", "_offset", ">=", "len", "(", "self", ".", "_indices", ")", ":", "\n", "            ", "self", ".", "_offset", "=", "0", "\n", "self", ".", "_epoch", "+=", "1", "\n", "if", "self", ".", "_mode", "in", "[", "'train'", "]", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "_indices", ")", "\n", "", "", "sample_id", "=", "self", ".", "_indices", "[", "self", ".", "_offset", "]", "\n", "self", ".", "_offset", "+=", "1", "\n", "e", "=", "self", ".", "_kg", ".", "edges", "[", "sample_id", "]", "\n", "try", ":", "\n", "            ", "s", "=", "self", ".", "produce_sample", "(", "sample_id", ",", "use_true_sample", ",", "false_proposer", ")", "\n", "self", ".", "_base_sample_ids", ".", "append", "(", "sample_id", ")", "\n", "return", "s", "\n", "", "except", "Exception", "as", "exc", ":", "\n", "            ", "if", "fail_retry", "and", "isinstance", "(", "exc", ",", "ProposeFailError", ")", ":", "\n", "                ", "return", "self", ".", "next_sample", "(", "use_true_sample", ",", "false_proposer", ",", "fail_retry", ")", "# Retry", "\n", "", "traceback", ".", "print_exc", "(", ")", "\n", "raise", "exc", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.DataFeeder.next_batch": [[319, 337], ["random.choices", "random.choices", "datafeeder.build_batch_from_edge", "min", "datafeeder.DataFeeder.next_sample", "range", "len"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.build_batch_from_edge", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.FullGenerationFeeder.next_sample"], ["", "", "def", "next_batch", "(", "self", ")", "->", "Optional", "[", "Example", "]", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "self", ".", "_base_sample_ids", "=", "[", "]", "\n", "if", "self", ".", "_mode", "==", "'train'", ":", "\n", "                ", "n_samples", "=", "self", ".", "_batch_size", "\n", "", "else", ":", "\n", "                ", "n_samples", "=", "min", "(", "self", ".", "_batch_size", ",", "len", "(", "self", ".", "_indices", ")", "-", "self", ".", "_offset", ")", "\n", "if", "n_samples", "==", "0", ":", "\n", "                    ", "self", ".", "_offset", "=", "0", "\n", "return", "None", "\n", "", "", "use_true_sample", "=", "random", ".", "choices", "(", "[", "True", ",", "False", "]", ",", "k", "=", "n_samples", ",", "weights", "=", "\n", "[", "self", ".", "_sampling_rate", ",", "1", "-", "self", ".", "_sampling_rate", "]", ")", "\n", "false_proposers", "=", "random", ".", "choices", "(", "self", ".", "_proposers", ",", "k", "=", "n_samples", ",", "weights", "=", "self", ".", "_proposer_weights", ")", "\n", "samples", "=", "[", "self", ".", "next_sample", "(", "use_true_sample", "[", "k", "]", ",", "false_proposers", "[", "k", "]", ")", "for", "k", "in", "range", "(", "n_samples", ")", "]", "\n", "self", ".", "_last_samples", "=", "samples", "\n", "return", "build_batch_from_edge", "(", "\n", "tokenizer", "=", "self", ".", "_tokenizer", ",", "max_seq_length", "=", "self", ".", "_hparams", ".", "max_seq_length", ",", "\n", "samples", "=", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.ExternalTextFeeder.__init__": [[340, 368], ["logging.info", "open().read().splitlines", "list", "logging.info", "l.split", "range", "exclude_text_samples.add", "random.shuffle", "open().read", "len", "ValueError", "len", "open"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "hparams", ",", "tokenizer", ":", "tokenization_bert", ".", "PreTrainedTokenizer", ",", "mode", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Initializing ExternalTextFeeder [%s] from %s...'", "%", "(", "mode", ",", "data_path", ")", ")", "\n", "self", ".", "_tokenizer", "=", "tokenizer", "\n", "self", ".", "_hparams", "=", "hparams", "\n", "\n", "lines", "=", "open", "(", "data_path", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "lines", "=", "[", "l", ".", "split", "(", "'\\t'", ")", "for", "l", "in", "lines", "]", "\n", "self", ".", "_samples", "=", "lines", "\n", "\n", "self", ".", "_offset", "=", "0", "\n", "self", ".", "_epoch", "=", "0", "\n", "self", ".", "_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "_samples", ")", ")", ")", "\n", "self", ".", "_mode", "=", "mode", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "_batch_size", "=", "hparams", ".", "train_batch_size", "\n", "", "elif", "mode", "==", "'dev'", ":", "\n", "            ", "self", ".", "_batch_size", "=", "hparams", ".", "eval_batch_size", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "_batch_size", "=", "hparams", ".", "eval_batch_size", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported mode'", ")", "\n", "\n", "", "for", "line", "in", "lines", ":", "\n", "            ", "exclude_text_samples", ".", "add", "(", "(", "line", "[", "0", "]", ",", "line", "[", "1", "]", ",", "line", "[", "2", "]", ")", ")", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "_indices", ")", "\n", "", "logging", ".", "info", "(", "'DataFeeder [%s] collected %d samples'", "%", "(", "mode", ",", "len", "(", "self", ".", "_indices", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.ExternalTextFeeder.next_sample": [[369, 381], ["int", "datafeeder.EdgeSample", "len", "random.shuffle"], "methods", ["None"], ["", "def", "next_sample", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_offset", ">=", "len", "(", "self", ".", "_indices", ")", ":", "\n", "            ", "self", ".", "_offset", "=", "0", "\n", "self", ".", "_epoch", "+=", "1", "\n", "if", "self", ".", "_mode", "==", "'train'", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "_indices", ")", "\n", "", "", "sample", "=", "self", ".", "_samples", "[", "self", ".", "_indices", "[", "self", ".", "_offset", "]", "]", "\n", "label", "=", "int", "(", "sample", "[", "-", "1", "]", ")", "\n", "e", "=", "EdgeSample", "(", "head_text", "=", "sample", "[", "0", "]", ",", "edge", "=", "sample", "[", "1", "]", ",", "tail_text", "=", "sample", "[", "2", "]", ",", "\n", "type", "=", "(", "SampleType", ".", "TRUTH", "if", "label", "==", "1", "else", "SampleType", ".", "NAT", ")", ")", "\n", "self", ".", "_offset", "+=", "1", "\n", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.ExternalTextFeeder.next_batch": [[382, 397], ["datafeeder.build_batch_from_edge", "min", "datafeeder.ExternalTextFeeder.next_sample", "range", "len"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.build_batch_from_edge", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.FullGenerationFeeder.next_sample"], ["", "def", "next_batch", "(", "self", ")", "->", "Optional", "[", "Example", "]", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "self", ".", "_base_sample_ids", "=", "[", "]", "\n", "if", "self", ".", "_mode", "==", "'train'", ":", "\n", "                ", "n_samples", "=", "self", ".", "_batch_size", "\n", "", "else", ":", "\n", "                ", "n_samples", "=", "min", "(", "self", ".", "_batch_size", ",", "len", "(", "self", ".", "_indices", ")", "-", "self", ".", "_offset", ")", "\n", "if", "n_samples", "==", "0", ":", "\n", "                    ", "self", ".", "_offset", "=", "0", "\n", "return", "None", "\n", "", "", "samples", "=", "[", "self", ".", "next_sample", "(", ")", "for", "k", "in", "range", "(", "n_samples", ")", "]", "\n", "self", ".", "_last_samples", "=", "samples", "\n", "return", "build_batch_from_edge", "(", "\n", "tokenizer", "=", "self", ".", "_tokenizer", ",", "max_seq_length", "=", "self", ".", "_hparams", ".", "max_seq_length", ",", "\n", "samples", "=", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.PrebuiltTrainFeeder.__init__": [[400, 419], ["logging.info", "open().read().splitlines", "list", "random.shuffle", "logging.info", "NotImplementedError", "range", "open().read", "l.split", "range", "len", "len", "len", "len", "open"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.aser_build_graph.split"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "hparams", ",", "tokenizer", ":", "tokenization_bert", ".", "PreTrainedTokenizer", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "!=", "'train'", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "logging", ".", "info", "(", "'Initializing PrebuiltTrainFeeder [%s]...'", "%", "mode", ")", "\n", "self", ".", "_tokenizer", "=", "tokenizer", "\n", "self", ".", "_hparams", "=", "hparams", "\n", "self", ".", "_sampling_rate", "=", "hparams", ".", "sampling_rate", "\n", "self", ".", "_conceptualize_rate", "=", "hparams", ".", "conceptualize_rate", "\n", "\n", "lines", "=", "open", "(", "data_path", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "lines", "=", "[", "None", "if", "len", "(", "l", ")", "==", "0", "else", "l", ".", "split", "(", "'\\t'", ")", "for", "l", "in", "lines", "]", "\n", "self", ".", "_samples", "=", "[", "(", "lines", "[", "i", "]", ",", "lines", "[", "i", "+", "1", "]", ",", "lines", "[", "i", "+", "2", "]", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lines", ")", ",", "3", ")", "]", "\n", "\n", "self", ".", "_offset", "=", "0", "\n", "self", ".", "_epoch", "=", "0", "\n", "self", ".", "_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "_samples", ")", ")", ")", "\n", "self", ".", "_batch_size", "=", "hparams", ".", "train_batch_size", "\n", "random", ".", "shuffle", "(", "self", ".", "_indices", ")", "\n", "logging", ".", "info", "(", "'DataFeeder [%s] collected %d samples'", "%", "(", "mode", ",", "len", "(", "self", ".", "_indices", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.PrebuiltTrainFeeder.next_sample": [[420, 433], ["int", "datafeeder.EdgeSample", "len", "random.shuffle", "datafeeder.PrebuiltTrainFeeder.next_sample"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.FullGenerationFeeder.next_sample"], ["", "def", "next_sample", "(", "self", ",", "choice", ")", ":", "\n", "        ", "if", "self", ".", "_offset", ">=", "len", "(", "self", ".", "_indices", ")", ":", "\n", "            ", "self", ".", "_offset", "=", "0", "\n", "self", ".", "_epoch", "+=", "1", "\n", "random", ".", "shuffle", "(", "self", ".", "_indices", ")", "\n", "", "sample", "=", "self", ".", "_samples", "[", "self", ".", "_indices", "[", "self", ".", "_offset", "]", "]", "[", "choice", "]", "\n", "self", ".", "_offset", "+=", "1", "\n", "if", "sample", "is", "None", ":", "# Retry", "\n", "            ", "return", "self", ".", "next_sample", "(", "choice", ")", "\n", "", "label", "=", "int", "(", "sample", "[", "-", "1", "]", ")", "\n", "e", "=", "EdgeSample", "(", "head_text", "=", "sample", "[", "0", "]", ",", "edge", "=", "sample", "[", "1", "]", ",", "tail_text", "=", "sample", "[", "2", "]", ",", "\n", "type", "=", "(", "SampleType", ".", "TRUTH", "if", "label", "==", "1", "else", "(", "SampleType", ".", "NODE", "if", "choice", "==", "1", "else", "SampleType", ".", "CC", ")", ")", ")", "\n", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.PrebuiltTrainFeeder.next_batch": [[434, 445], ["random.choices", "random.choices", "datafeeder.build_batch_from_edge", "datafeeder.PrebuiltTrainFeeder.next_sample", "range"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.build_batch_from_edge", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.FullGenerationFeeder.next_sample"], ["", "def", "next_batch", "(", "self", ")", "->", "Optional", "[", "Example", "]", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "n_samples", "=", "self", ".", "_batch_size", "\n", "use_true_sample", "=", "random", ".", "choices", "(", "[", "0", ",", "1", "]", ",", "k", "=", "n_samples", ",", "weights", "=", "\n", "[", "self", ".", "_sampling_rate", ",", "1", "-", "self", ".", "_sampling_rate", "]", ")", "\n", "false_proposer", "=", "random", ".", "choices", "(", "[", "1", ",", "2", "]", ",", "k", "=", "n_samples", ",", "weights", "=", "\n", "[", "1", "-", "self", ".", "_conceptualize_rate", ",", "self", ".", "_conceptualize_rate", "]", ")", "\n", "samples", "=", "[", "self", ".", "next_sample", "(", "0", "if", "use_true_sample", "[", "k", "]", "==", "0", "else", "false_proposer", "[", "k", "]", ")", "for", "k", "in", "range", "(", "n_samples", ")", "]", "\n", "return", "build_batch_from_edge", "(", "\n", "tokenizer", "=", "self", ".", "_tokenizer", ",", "max_seq_length", "=", "self", ".", "_hparams", ".", "max_seq_length", ",", "\n", "samples", "=", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.FullGenerationFeeder.__init__": [[449, 469], ["logging.info", "isinstance", "datafeeder.Graph", "list", "datafeeder.ConceptualizeProposer", "logging.info", "range", "list", "len", "range", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_path", ",", "hparams", ",", "tokenizer", ":", "tokenization_bert", ".", "PreTrainedTokenizer", ",", "accept_splits", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'Initializing FullGenerationFeeder'", ")", "\n", "self", ".", "_tokenizer", "=", "tokenizer", "\n", "self", ".", "_hparams", "=", "hparams", "\n", "if", "isinstance", "(", "accept_splits", ",", "str", ")", ":", "\n", "            ", "accept_splits", "=", "[", "accept_splits", "]", "\n", "", "self", ".", "_splits", "=", "accept_splits", "\n", "\n", "self", ".", "_kg", "=", "Graph", "(", "base_path", ",", "hparams", ")", "\n", "\n", "self", ".", "_offset", "=", "0", "\n", "self", ".", "_epoch", "=", "0", "\n", "self", ".", "_indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "_kg", ".", "edges", ")", ")", ")", "\n", "self", ".", "_indices", "=", "[", "c", "for", "c", "in", "self", ".", "_indices", "if", "self", ".", "_kg", ".", "edges", "[", "c", "]", ".", "split", "in", "accept_splits", "]", "\n", "self", ".", "_batch_size", "=", "hparams", ".", "eval_batch_size", "\n", "\n", "self", ".", "_proposers", "=", "ConceptualizeProposer", "(", "self", ".", "_kg", ",", "hparams", ")", "\n", "self", ".", "_proposed_samples", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "len", "(", "self", ".", "_kg", ".", "edges", ")", ")", "]", "\n", "\n", "logging", ".", "info", "(", "'FullGenerationFeeder initialized'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.FullGenerationFeeder.next_sample": [[470, 483], ["len", "datafeeder.FullGenerationFeeder._proposers.propose"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.EdgeComponentProposer.propose"], ["", "def", "next_sample", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_offset", ">=", "len", "(", "self", ".", "_indices", ")", ":", "\n", "            ", "self", ".", "_offset", "=", "0", "\n", "self", ".", "_epoch", "+=", "1", "\n", "", "sample_id", "=", "self", ".", "_indices", "[", "self", ".", "_offset", "]", "\n", "self", ".", "_offset", "+=", "1", "\n", "e", "=", "self", ".", "_kg", ".", "edges", "[", "sample_id", "]", "\n", "try", ":", "\n", "            ", "cands", "=", "self", ".", "_proposers", ".", "propose", "(", "e", ",", "return_all", "=", "True", ")", "\n", "return", "sample_id", ",", "cands", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "return", "None", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.FullGenerationFeeder.next_batch": [[484, 508], ["datafeeder.build_batch_from_edge", "hasattr", "len", "datafeeder.FullGenerationFeeder._proposed_samples[].append", "base_sample_ids.append", "samples.append", "len", "len", "datafeeder.FullGenerationFeeder.next_sample", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.build_batch_from_edge", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.FullGenerationFeeder.next_sample"], ["", "def", "next_batch", "(", "self", ")", "->", "Optional", "[", "Example", "]", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'_rem_cands'", ")", ":", "\n", "            ", "base_sample_id", ",", "cands", "=", "None", ",", "[", "]", "\n", "", "else", ":", "\n", "            ", "base_sample_id", ",", "cands", "=", "self", ".", "_rem_cands", "\n", "", "if", "self", ".", "_offset", "==", "len", "(", "self", ".", "_indices", ")", ":", "\n", "            ", "return", "None", "\n", "", "samples", "=", "[", "]", "\n", "base_sample_ids", "=", "[", "]", "\n", "while", "len", "(", "samples", ")", "<", "self", ".", "_batch_size", "and", "self", ".", "_offset", "<", "len", "(", "self", ".", "_indices", ")", ":", "\n", "            ", "while", "len", "(", "cands", ")", "==", "0", "and", "self", ".", "_offset", "<", "len", "(", "self", ".", "_indices", ")", ":", "\n", "                ", "base_sample_id", ",", "cands", "=", "self", ".", "next_sample", "(", ")", "\n", "", "n_sample", "=", "cands", "[", "-", "1", "]", "\n", "cands", "=", "cands", "[", ":", "-", "1", "]", "\n", "self", ".", "_proposed_samples", "[", "base_sample_id", "]", ".", "append", "(", "n_sample", ")", "\n", "base_sample_ids", ".", "append", "(", "base_sample_id", ")", "\n", "samples", ".", "append", "(", "n_sample", ")", "\n", "\n", "", "self", ".", "_last_samples", "=", "samples", "\n", "self", ".", "_base_sample_ids", "=", "base_sample_ids", "\n", "self", ".", "_rem_cands", "=", "(", "base_sample_id", ",", "cands", ")", "\n", "return", "build_batch_from_edge", "(", "\n", "tokenizer", "=", "self", ".", "_tokenizer", ",", "max_seq_length", "=", "self", ".", "_hparams", ".", "max_seq_length", ",", "\n", "samples", "=", "samples", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mutiann_ccc.None.datafeeder.build_batch_from_edge": [[42, 78], ["zip", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "datafeeder.Example", "isinstance", "torch.LongTensor.append", "torch.LongTensor.append", "torch.LongTensor.append", "utils.label_to_text", "zip", "tokenizer.encode_plus", "tokenizer.encode_plus", "logging.warning", "len", "tokenizer.decode"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.label_to_text"], ["def", "build_batch_from_edge", "(", "tokenizer", ",", "max_seq_length", ",", "samples", ":", "List", "[", "EdgeSample", "]", ")", "->", "Example", ":", "\n", "    ", "inter_texts", "=", "[", "label_to_text", "(", "s", ".", "edge", ")", "+", "':'", "for", "s", "in", "samples", "]", "\n", "sents_0", "=", "[", "s", ".", "head_text", "for", "s", "in", "samples", "]", "\n", "sents_1", "=", "[", "inter_text", "+", "(", "'none'", "if", "s", ".", "tail_text", "==", "''", "else", "s", ".", "tail_text", ")", "\n", "for", "s", ",", "inter_text", "in", "zip", "(", "samples", ",", "inter_texts", ")", "]", "\n", "\n", "sample_ids", "=", "[", "]", "\n", "token_type_ids", "=", "[", "]", "\n", "sample_masks", "=", "[", "]", "\n", "for", "s1", ",", "s2", "in", "zip", "(", "sents_0", ",", "sents_1", ")", ":", "\n", "        ", "if", "isinstance", "(", "tokenizer", ",", "RobertaTokenizer", ")", ":", "\n", "            ", "r", "=", "tokenizer", ".", "encode_plus", "(", "s1", ",", "s2", ",", "max_length", "=", "max_seq_length", ",", "add_prefix_space", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "r", "=", "tokenizer", ".", "encode_plus", "(", "s1", ",", "s2", ",", "max_length", "=", "max_seq_length", ")", "\n", "", "if", "'num_truncated_tokens'", "in", "r", ":", "\n", "            ", "logging", ".", "warning", "(", "'Sample too long, %d tokens truncated (\"%s\"): '", "%", "\n", "(", "r", "[", "'num_truncated_tokens'", "]", ",", "tokenizer", ".", "decode", "(", "r", "[", "'overflowing_tokens'", "]", ")", ")", "+", "s1", "+", "' | '", "+", "s2", ")", "\n", "", "s", "=", "r", "[", "'input_ids'", "]", "\n", "pad_len", "=", "max_seq_length", "-", "len", "(", "s", ")", "\n", "s", "+=", "[", "tokenizer", ".", "pad_token_id", "]", "*", "pad_len", "\n", "sample_ids", ".", "append", "(", "s", ")", "\n", "\n", "s", "=", "r", "[", "'token_type_ids'", "]", "\n", "s", "+=", "[", "tokenizer", ".", "pad_token_id", "]", "*", "pad_len", "\n", "token_type_ids", ".", "append", "(", "s", ")", "\n", "\n", "s", "=", "[", "1", "]", "*", "(", "max_seq_length", "-", "pad_len", ")", "+", "[", "0", "]", "*", "pad_len", "\n", "sample_masks", ".", "append", "(", "s", ")", "\n", "\n", "", "sample_ids", "=", "torch", ".", "LongTensor", "(", "sample_ids", ")", "\n", "token_type_ids", "=", "torch", ".", "LongTensor", "(", "token_type_ids", ")", "\n", "sample_masks", "=", "torch", ".", "LongTensor", "(", "sample_masks", ")", "\n", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "1", "if", "s", ".", "type", "==", "SampleType", ".", "TRUTH", "else", "0", "for", "s", "in", "samples", "]", ")", "\n", "return", "Example", "(", "input_ids", "=", "sample_ids", ",", "input_mask", "=", "sample_masks", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "labels", "=", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.model.EdgeClassification.__init__": [[11, 27], ["transformers.BertPreTrainedModel.__init__", "transformers.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "model.EdgeClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "hparams", ")", ":", "\n", "        ", "config", ".", "hidden_dropout_prob", "=", "hparams", ".", "dropout_rate", "\n", "config", ".", "attention_probs_dropout_prob", "=", "hparams", ".", "dropout_rate", "\n", "super", "(", "EdgeClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n", "if", "hparams", ".", "use_type_classifier", ":", "\n", "            ", "self", ".", "num_labels", "=", "hparams", ".", "n_edge_types", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_labels", "=", "2", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "_hparams", "=", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.model.EdgeClassification.forward": [[28, 48], ["model.EdgeClassification.bert", "model.EdgeClassification.dropout", "model.EdgeClassification.classifier", "torch.softmax", "torch.argmax", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", "=", "None", ",", "labels", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "# [B, C]", "\n", "probs", "=", "torch", ".", "softmax", "(", "logits", ",", "-", "1", ")", "# [B, C]", "\n", "preds", "=", "torch", ".", "argmax", "(", "probs", ",", "-", "1", ")", "# [B]", "\n", "results", "=", "{", "'logits'", ":", "logits", ",", "'probs'", ":", "probs", ",", "'preds'", ":", "preds", "}", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ",", "labels", ")", "\n", "results", "[", "'loss'", "]", "=", "loss", ".", "mean", "(", ")", "\n", "results", "[", "'sample_losses'", "]", "=", "loss", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.model.RobertaEdgeClassification.__init__": [[53, 69], ["transformers.BertPreTrainedModel.__init__", "transformers.RobertaModel", "torch.nn.Dropout", "torch.nn.Linear", "model.RobertaEdgeClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "hparams", ")", ":", "\n", "        ", "config", ".", "hidden_dropout_prob", "=", "hparams", ".", "dropout_rate", "\n", "config", ".", "attention_probs_dropout_prob", "=", "hparams", ".", "dropout_rate", "\n", "super", "(", "RobertaEdgeClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n", "if", "hparams", ".", "use_type_classifier", ":", "\n", "            ", "self", ".", "num_labels", "=", "hparams", ".", "n_edge_types", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_labels", "=", "2", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "_hparams", "=", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.model.RobertaEdgeClassification.forward": [[70, 91], ["model.RobertaEdgeClassification.roberta", "model.RobertaEdgeClassification.dropout", "model.RobertaEdgeClassification.classifier", "torch.softmax", "torch.argmax", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "token_type_ids", "=", "None", ",", "labels", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "token_type_ids", "=", "None", "\n", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "# [B, C]", "\n", "probs", "=", "torch", ".", "softmax", "(", "logits", ",", "-", "1", ")", "# [B, C]", "\n", "preds", "=", "torch", ".", "argmax", "(", "probs", ",", "-", "1", ")", "# [B]", "\n", "results", "=", "{", "'logits'", ":", "logits", ",", "'probs'", ":", "probs", ",", "'preds'", ":", "preds", "}", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ",", "labels", ")", "\n", "results", "[", "'loss'", "]", "=", "loss", ".", "mean", "(", ")", "\n", "results", "[", "'sample_losses'", "]", "=", "loss", "\n", "\n", "", "return", "results", "", "", "", ""]], "home.repos.pwc.inspect_result.mutiann_ccc.None.hparams.hparams_debug_string": [[38, 42], ["hparams.values", "sorted"], "function", ["None"], ["def", "hparams_debug_string", "(", ")", ":", "\n", "    ", "values", "=", "hparams", ".", "values", "(", ")", "\n", "hp", "=", "[", "'  %s: %s'", "%", "(", "name", ",", "values", "[", "name", "]", ")", "for", "name", "in", "sorted", "(", "values", ")", "]", "\n", "return", "'Hyperparameters:\\n'", "+", "'\\n'", ".", "join", "(", "hp", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.__init__": [[85, 88], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "window_size", "=", "100", ")", ":", "\n", "    ", "self", ".", "_window_size", "=", "window_size", "\n", "self", ".", "_values", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append": [[89, 91], ["None"], "methods", ["None"], ["", "def", "append", "(", "self", ",", "x", ")", ":", "\n", "    ", "self", ".", "_values", "=", "self", ".", "_values", "[", "-", "(", "self", ".", "_window_size", "-", "1", ")", ":", "]", "+", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum": [[92, 95], ["utils.ValueWindow.sum"], "methods", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.sum"], ["", "@", "property", "\n", "def", "sum", "(", "self", ")", ":", "\n", "    ", "return", "sum", "(", "self", ".", "_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.count": [[96, 99], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "count", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.average": [[100, 103], ["max"], "methods", ["None"], ["", "@", "property", "\n", "def", "average", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "sum", "/", "max", "(", "1", ",", "self", ".", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.reset": [[104, 106], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "_values", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.label_to_text_atomic": [[42, 66], ["ValueError", "label[].lower", "ValueError"], "function", ["None"], ["", "def", "label_to_text_atomic", "(", "label", ":", "str", ")", "->", "str", ":", "\n", "    ", "if", "label", "[", "0", "]", "==", "'x'", ":", "\n", "        ", "t", "=", "'alex'", "\n", "", "elif", "label", "[", "0", "]", "==", "'o'", ":", "\n", "        ", "t", "=", "'others'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid label: '", "+", "label", ")", "\n", "", "if", "label", "[", "1", ":", "]", "in", "[", "'Effect'", ",", "'React'", ",", "'Need'", ",", "'Want'", "]", ":", "\n", "        ", "t", "+=", "' '", "+", "label", "[", "1", ":", "]", ".", "lower", "(", ")", "\n", "", "elif", "label", "[", "1", ":", "]", "==", "'Attr'", ":", "\n", "        ", "assert", "t", "==", "'alex'", ",", "'Invalid label: '", "+", "label", "\n", "t", "+=", "' attribute'", "\n", "", "elif", "label", "[", "1", ":", "]", "==", "'Intent'", ":", "\n", "        ", "assert", "t", "==", "'alex'", ",", "'Invalid label: '", "+", "label", "\n", "t", "+=", "' intent'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid label: '", "+", "label", ")", "\n", "", "if", "label", "==", "'xNeed'", ":", "\n", "        ", "t", "=", "'before, '", "+", "t", "\n", "", "elif", "label", "==", "'xIntent'", ":", "\n", "        ", "t", "=", "'because, '", "+", "t", "\n", "", "else", ":", "\n", "        ", "t", "=", "'therefore, '", "+", "t", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.label_to_text_aser": [[67, 75], ["dict", "zip"], "function", ["None"], ["", "def", "label_to_text_aser", "(", "label", ":", "str", ")", "->", "str", ":", "\n", "    ", "types", "=", "[", "'Precedence'", ",", "'Succession'", ",", "'Synchronous'", ",", "'Reason'", ",", "'Result'", ",", "'Condition'", ",", "'Contrast'", ",", "'Concession'", ",", "\n", "'Conjunction'", ",", "'Instantiation'", ",", "'Restatement'", ",", "'ChosenAlternative'", ",", "'Alternative'", ",", "'Exception'", ",", "\n", "'Co_Occurrence'", "]", "\n", "texts", "=", "[", "'then'", ",", "'after'", ",", "'meanwhile'", ",", "'because'", ",", "'therefore'", ",", "'if'", ",", "'but'", ",", "'although'", ",", "'and'", ",", "'for instance'", ",", "\n", "'in other words'", ",", "'or'", ",", "'instead'", ",", "'except'", ",", "''", "]", "\n", "mapping", "=", "dict", "(", "zip", "(", "types", ",", "texts", ")", ")", "\n", "return", "mapping", "[", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.label_to_text": [[76, 83], ["utils.label_to_text_atomic", "utils.label_to_text_aser", "ValueError"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.label_to_text_atomic", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.label_to_text_aser"], ["", "def", "label_to_text", "(", "label", ":", "str", ")", "->", "str", ":", "\n", "    ", "if", "hparams", ".", "expr", "==", "'atomic'", ":", "\n", "        ", "return", "label_to_text_atomic", "(", "label", ")", "\n", "", "elif", "hparams", ".", "expr", "==", "'aser'", ":", "\n", "        ", "return", "label_to_text_aser", "(", "label", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.set_logger": [[107, 118], ["logging.Formatter", "logging.StreamHandler", "logging.FileHandler.setFormatter", "handlers.append", "logging.basicConfig", "logging.FileHandler", "logging.FileHandler.setFormatter", "handlers.append"], "function", ["home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append", "home.repos.pwc.inspect_result.mutiann_ccc.None.utils.ValueWindow.append"], ["", "", "def", "set_logger", "(", "output_path", "=", "None", ")", ":", "\n", "    ", "fmt", "=", "logging", ".", "Formatter", "(", "\"[%(levelname)s %(asctime)s] %(message)s\"", ")", "\n", "handlers", "=", "[", "]", "\n", "if", "output_path", "is", "not", "None", ":", "\n", "        ", "h", "=", "logging", ".", "FileHandler", "(", "output_path", ")", "\n", "h", ".", "setFormatter", "(", "fmt", ")", "\n", "handlers", ".", "append", "(", "h", ")", "\n", "", "h", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "h", ".", "setFormatter", "(", "fmt", ")", "\n", "handlers", ".", "append", "(", "h", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "handlers", ",", "level", "=", "logging", ".", "INFO", ")", "", "", ""]]}