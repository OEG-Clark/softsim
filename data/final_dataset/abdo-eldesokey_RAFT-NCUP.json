{"home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.demo.load_image": [[20, 24], ["numpy.array().astype", "torch.from_numpy().permute().float", "numpy.array", "torch.from_numpy().permute", "PIL.Image.open", "torch.from_numpy"], "function", ["None"], ["def", "load_image", "(", "imfile", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "imfile", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.demo.load_image_list": [[26, 36], ["sorted", "torch.stack", "images.to.to", "utils.utils.InputPadder", "images.to.append", "utils.utils.InputPadder.pad", "demo.load_image"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.demo.load_image"], ["", "def", "load_image_list", "(", "image_files", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "imfile", "in", "sorted", "(", "image_files", ")", ":", "\n", "        ", "images", ".", "append", "(", "load_image", "(", "imfile", ")", ")", "\n", "\n", "", "images", "=", "torch", ".", "stack", "(", "images", ",", "dim", "=", "0", ")", "\n", "images", "=", "images", ".", "to", "(", "DEVICE", ")", "\n", "\n", "padder", "=", "InputPadder", "(", "images", ".", "shape", ")", "\n", "return", "padder", ".", "pad", "(", "images", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.demo.viz": [[38, 48], ["img[].permute().cpu().numpy", "flo[].permute().cpu().numpy", "utils.flow_viz.flow_to_image", "numpy.concatenate", "cv2.imshow", "cv2.waitKey", "img[].permute().cpu", "flo[].permute().cpu", "img[].permute", "flo[].permute"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.flow_to_image"], ["", "def", "viz", "(", "img", ",", "flo", ")", ":", "\n", "    ", "img", "=", "img", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "flo", "=", "flo", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# map flow to rgb image", "\n", "flo", "=", "flow_viz", ".", "flow_to_image", "(", "flo", ")", "\n", "img_flo", "=", "np", ".", "concatenate", "(", "[", "img", ",", "flo", "]", ",", "axis", "=", "0", ")", "\n", "\n", "cv2", ".", "imshow", "(", "'image'", ",", "img_flo", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "/", "255.0", ")", "\n", "cv2", ".", "waitKey", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.demo.demo": [[50, 69], ["torch.nn.DataParallel", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.to", "torch.nn.DataParallel.eval", "raft.RAFT", "torch.load", "torch.no_grad", "demo.load_image_list", "range", "glob.glob", "glob.glob", "torch.nn.DataParallel.", "demo.viz", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.demo.load_image_list", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.demo.viz"], ["", "def", "demo", "(", "args", ")", ":", "\n", "    ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "RAFT", "(", "args", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "model", ")", ")", "\n", "\n", "model", "=", "model", ".", "module", "\n", "model", ".", "to", "(", "DEVICE", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "images", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "path", ",", "'*.png'", ")", ")", "+", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "path", ",", "'*.jpg'", ")", ")", "\n", "\n", "images", "=", "load_image_list", "(", "images", ")", "\n", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", "-", "1", ")", ":", "\n", "            ", "image1", "=", "images", "[", "i", ",", "None", "]", "\n", "image2", "=", "images", "[", "i", "+", "1", ",", "None", "]", "\n", "\n", "flow_low", ",", "flow_up", "=", "model", "(", "image1", ",", "image2", ",", "iters", "=", "20", ",", "test_mode", "=", "True", ")", "\n", "viz", "(", "image1", ",", "flow_up", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.evaluate.create_sintel_submission": [[22, 58], ["torch.no_grad", "torch.no_grad", "model.eval", "datasets.MpiSintel", "range", "len", "utils.utils.InputPadder", "utils.utils.InputPadder.pad", "model", "utils.utils.InputPadder.unpad().permute().cpu().numpy", "os.path.join", "os.path.join", "utils.frame_utils.writeFlow", "image1[].cuda", "image2[].cuda", "[].cuda", "os.path.join", "os.path.join", "cv2.imwrite", "os.path.exists", "os.makedirs", "utils.utils.InputPadder.unpad().permute().cpu", "os.path.exists", "os.makedirs", "utils.flow_viz.flow_to_image", "utils.utils.InputPadder.unpad().permute", "utils.utils.forward_interpolate", "utils.utils.InputPadder.unpad"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.writeFlow", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.flow_to_image", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.forward_interpolate", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.unpad"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "create_sintel_submission", "(", "model", ",", "iters", "=", "32", ",", "warm_start", "=", "False", ",", "output_path", "=", "'sintel_submission'", ",", "write_png", "=", "False", ")", ":", "\n", "    ", "\"\"\" Create submission for the Sintel leaderboard \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "for", "dstype", "in", "[", "'clean'", ",", "'final'", "]", ":", "\n", "        ", "test_dataset", "=", "datasets", ".", "MpiSintel", "(", "split", "=", "'test'", ",", "aug_params", "=", "None", ",", "dstype", "=", "dstype", ")", "\n", "\n", "flow_prev", ",", "sequence_prev", "=", "None", ",", "None", "\n", "for", "test_id", "in", "range", "(", "len", "(", "test_dataset", ")", ")", ":", "\n", "            ", "image1", ",", "image2", ",", "(", "sequence", ",", "frame", ")", "=", "test_dataset", "[", "test_id", "]", "\n", "if", "sequence", "!=", "sequence_prev", ":", "\n", "                ", "flow_prev", "=", "None", "\n", "\n", "", "padder", "=", "InputPadder", "(", "image1", ".", "shape", ")", "\n", "image1", ",", "image2", "=", "padder", ".", "pad", "(", "image1", "[", "None", "]", ".", "cuda", "(", ")", ",", "image2", "[", "None", "]", ".", "cuda", "(", ")", ")", "\n", "\n", "flow_low", ",", "flow_pr", "=", "model", "(", "image1", ",", "image2", ",", "iters", "=", "iters", ",", "flow_init", "=", "flow_prev", ",", "test_mode", "=", "True", ")", "\n", "flow", "=", "padder", ".", "unpad", "(", "flow_pr", "[", "0", "]", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "warm_start", ":", "\n", "                ", "flow_prev", "=", "forward_interpolate", "(", "flow_low", "[", "0", "]", ")", "[", "None", "]", ".", "cuda", "(", ")", "\n", "\n", "", "output_dir", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "dstype", ",", "sequence", ")", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'frame%04d.flo'", "%", "(", "frame", "+", "1", ")", ")", "\n", "if", "write_png", ":", "\n", "                ", "output_dir_png", "=", "os", ".", "path", ".", "join", "(", "output_path", "+", "'_png'", ",", "dstype", ",", "sequence", ")", "\n", "output_file_png", "=", "os", ".", "path", ".", "join", "(", "output_dir_png", ",", "'frame%04d.png'", "%", "(", "frame", "+", "1", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir_png", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "output_dir_png", ")", "\n", "", "cv2", ".", "imwrite", "(", "output_file_png", ",", "flow_viz", ".", "flow_to_image", "(", "flow", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "frame_utils", ".", "writeFlow", "(", "output_file", ",", "flow", ")", "\n", "sequence_prev", "=", "sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.evaluate.create_kitti_submission": [[60, 88], ["torch.no_grad", "torch.no_grad", "model.eval", "datasets.KITTI", "range", "os.path.exists", "os.makedirs", "len", "utils.utils.InputPadder", "utils.utils.InputPadder.pad", "model", "utils.utils.InputPadder.unpad().permute().cpu().numpy", "os.path.join", "utils.frame_utils.writeFlowKITTI", "os.path.exists", "os.makedirs", "image1[].cuda", "image2[].cuda", "os.path.join", "cv2.imwrite", "utils.utils.InputPadder.unpad().permute().cpu", "utils.flow_viz.flow_to_image", "utils.utils.InputPadder.unpad().permute", "utils.utils.InputPadder.unpad"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.writeFlowKITTI", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.flow_to_image", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.unpad"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "create_kitti_submission", "(", "model", ",", "iters", "=", "24", ",", "output_path", "=", "'kitti_submission'", ",", "write_png", "=", "False", ")", ":", "\n", "    ", "\"\"\" Create submission for the Sintel leaderboard \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "test_dataset", "=", "datasets", ".", "KITTI", "(", "split", "=", "'testing'", ",", "aug_params", "=", "None", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "\n", "", "if", "write_png", ":", "\n", "        ", "out_path_png", "=", "output_path", "+", "'_png'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_path_png", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "out_path_png", ")", "\n", "\n", "", "", "for", "test_id", "in", "range", "(", "len", "(", "test_dataset", ")", ")", ":", "\n", "        ", "image1", ",", "image2", ",", "(", "frame_id", ",", ")", "=", "test_dataset", "[", "test_id", "]", "\n", "padder", "=", "InputPadder", "(", "image1", ".", "shape", ",", "mode", "=", "'kitti'", ")", "\n", "image1", ",", "image2", "=", "padder", ".", "pad", "(", "image1", "[", "None", "]", ".", "cuda", "(", ")", ",", "image2", "[", "None", "]", ".", "cuda", "(", ")", ")", "\n", "\n", "_", ",", "flow_pr", "=", "model", "(", "image1", ",", "image2", ",", "iters", "=", "iters", ",", "test_mode", "=", "True", ")", "\n", "flow", "=", "padder", ".", "unpad", "(", "flow_pr", "[", "0", "]", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "write_png", ":", "\n", "            ", "output_filename_png", "=", "os", ".", "path", ".", "join", "(", "out_path_png", ",", "frame_id", "+", "'.png'", ")", "\n", "cv2", ".", "imwrite", "(", "output_filename_png", ",", "flow_viz", ".", "flow_to_image", "(", "flow", ")", ")", "\n", "\n", "", "output_filename", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "frame_id", ")", "\n", "frame_utils", ".", "writeFlowKITTI", "(", "output_filename", ",", "flow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.evaluate.validate_chairs": [[90, 109], ["torch.no_grad", "torch.no_grad", "model.eval", "datasets.FlyingChairs", "range", "numpy.mean", "print", "len", "image1[].cuda", "image2[].cuda", "model", "torch.sum().sqrt", "torch.sum().sqrt", "epe_list.append", "numpy.concatenate", "torch.sum().sqrt.view().numpy", "torch.sum", "torch.sum", "torch.sum().sqrt.view", "flow_pr[].cpu"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_chairs", "(", "model", ",", "iters", "=", "24", ")", ":", "\n", "    ", "\"\"\" Perform evaluation on the FlyingChairs (test) split \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "epe_list", "=", "[", "]", "\n", "\n", "val_dataset", "=", "datasets", ".", "FlyingChairs", "(", "split", "=", "'validation'", ")", "\n", "for", "val_id", "in", "range", "(", "len", "(", "val_dataset", ")", ")", ":", "\n", "        ", "image1", ",", "image2", ",", "flow_gt", ",", "_", "=", "val_dataset", "[", "val_id", "]", "\n", "image1", "=", "image1", "[", "None", "]", ".", "cuda", "(", ")", "\n", "image2", "=", "image2", "[", "None", "]", ".", "cuda", "(", ")", "\n", "\n", "_", ",", "flow_pr", "=", "model", "(", "image1", ",", "image2", ",", "iters", "=", "iters", ",", "test_mode", "=", "True", ")", "\n", "epe", "=", "torch", ".", "sum", "(", "(", "flow_pr", "[", "0", "]", ".", "cpu", "(", ")", "-", "flow_gt", ")", "**", "2", ",", "dim", "=", "0", ")", ".", "sqrt", "(", ")", "\n", "epe_list", ".", "append", "(", "epe", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "epe", "=", "np", ".", "mean", "(", "np", ".", "concatenate", "(", "epe_list", ")", ")", "\n", "print", "(", "\"Validation Chairs EPE: %f\"", "%", "epe", ")", "\n", "return", "{", "'chairs'", ":", "epe", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.evaluate.validate_sintel": [[111, 144], ["torch.no_grad", "torch.no_grad", "model.eval", "datasets.MpiSintel", "range", "numpy.concatenate", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "print", "numpy.mean", "len", "image1[].cuda", "image2[].cuda", "utils.utils.InputPadder", "utils.utils.InputPadder.pad", "model", "utils.utils.InputPadder.unpad().cpu", "torch.sum().sqrt", "torch.sum().sqrt", "epe_list.append", "torch.sum().sqrt.view().numpy", "utils.utils.InputPadder.unpad", "torch.sum", "torch.sum", "torch.sum().sqrt.view"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.unpad"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_sintel", "(", "model", ",", "iters", "=", "32", ")", ":", "\n", "    ", "\"\"\" Peform validation using the Sintel (train) split \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "{", "}", "\n", "for", "dstype", "in", "[", "'clean'", ",", "'final'", "]", ":", "\n", "        ", "val_dataset", "=", "datasets", ".", "MpiSintel", "(", "split", "=", "'training'", ",", "dstype", "=", "dstype", ")", "\n", "epe_list", "=", "[", "]", "\n", "\n", "for", "val_id", "in", "range", "(", "len", "(", "val_dataset", ")", ")", ":", "\n", "            ", "image1", ",", "image2", ",", "flow_gt", ",", "_", "=", "val_dataset", "[", "val_id", "]", "\n", "image1", "=", "image1", "[", "None", "]", ".", "cuda", "(", ")", "\n", "image2", "=", "image2", "[", "None", "]", ".", "cuda", "(", ")", "\n", "\n", "padder", "=", "InputPadder", "(", "image1", ".", "shape", ")", "\n", "image1", ",", "image2", "=", "padder", ".", "pad", "(", "image1", ",", "image2", ")", "\n", "\n", "flow_low", ",", "flow_pr", "=", "model", "(", "image1", ",", "image2", ",", "iters", "=", "iters", ",", "test_mode", "=", "True", ")", "\n", "flow", "=", "padder", ".", "unpad", "(", "flow_pr", "[", "0", "]", ")", ".", "cpu", "(", ")", "\n", "\n", "epe", "=", "torch", ".", "sum", "(", "(", "flow", "-", "flow_gt", ")", "**", "2", ",", "dim", "=", "0", ")", ".", "sqrt", "(", ")", "\n", "epe_list", ".", "append", "(", "epe", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "epe_all", "=", "np", ".", "concatenate", "(", "epe_list", ")", "\n", "epe", "=", "np", ".", "mean", "(", "epe_all", ")", "\n", "px1", "=", "np", ".", "mean", "(", "epe_all", "<", "1", ")", "\n", "px3", "=", "np", ".", "mean", "(", "epe_all", "<", "3", ")", "\n", "px5", "=", "np", ".", "mean", "(", "epe_all", "<", "5", ")", "\n", "\n", "print", "(", "\"Validation (%s) EPE: %f, 1px: %f, 3px: %f, 5px: %f\"", "%", "(", "dstype", ",", "epe", ",", "px1", ",", "px3", ",", "px5", ")", ")", "\n", "results", "[", "dstype", "]", "=", "np", ".", "mean", "(", "epe_list", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.evaluate.validate_kitti": [[146, 183], ["torch.no_grad", "torch.no_grad", "model.eval", "datasets.KITTI", "range", "numpy.array", "numpy.concatenate", "numpy.mean", "print", "len", "image1[].cuda", "image2[].cuda", "utils.utils.InputPadder", "utils.utils.InputPadder.pad", "model", "utils.utils.InputPadder.unpad().cpu", "torch.sum().sqrt", "torch.sum().sqrt", "torch.sum().sqrt", "torch.sum().sqrt", "epe.view.view", "mag.view.view", "np.array.append", "np.concatenate.append", "numpy.mean", "valid_gt.view", "epe[].mean().item", "out[].cpu().numpy", "utils.utils.InputPadder.unpad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "epe[].mean", "out[].cpu"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.unpad"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate_kitti", "(", "model", ",", "iters", "=", "24", ")", ":", "\n", "    ", "\"\"\" Peform validation using the KITTI-2015 (train) split \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "val_dataset", "=", "datasets", ".", "KITTI", "(", "split", "=", "'training'", ")", "\n", "\n", "out_list", ",", "epe_list", "=", "[", "]", ",", "[", "]", "\n", "for", "val_id", "in", "range", "(", "len", "(", "val_dataset", ")", ")", ":", "\n", "        ", "image1", ",", "image2", ",", "flow_gt", ",", "valid_gt", "=", "val_dataset", "[", "val_id", "]", "\n", "image1", "=", "image1", "[", "None", "]", ".", "cuda", "(", ")", "\n", "image2", "=", "image2", "[", "None", "]", ".", "cuda", "(", ")", "\n", "\n", "padder", "=", "InputPadder", "(", "image1", ".", "shape", ",", "mode", "=", "'kitti'", ")", "\n", "image1", ",", "image2", "=", "padder", ".", "pad", "(", "image1", ",", "image2", ")", "\n", "\n", "flow_low", ",", "flow_pr", "=", "model", "(", "image1", ",", "image2", ",", "iters", "=", "iters", ",", "test_mode", "=", "True", ")", "\n", "flow", "=", "padder", ".", "unpad", "(", "flow_pr", "[", "0", "]", ")", ".", "cpu", "(", ")", "\n", "\n", "epe", "=", "torch", ".", "sum", "(", "(", "flow", "-", "flow_gt", ")", "**", "2", ",", "dim", "=", "0", ")", ".", "sqrt", "(", ")", "\n", "mag", "=", "torch", ".", "sum", "(", "flow_gt", "**", "2", ",", "dim", "=", "0", ")", ".", "sqrt", "(", ")", "\n", "\n", "epe", "=", "epe", ".", "view", "(", "-", "1", ")", "\n", "mag", "=", "mag", ".", "view", "(", "-", "1", ")", "\n", "val", "=", "valid_gt", ".", "view", "(", "-", "1", ")", ">=", "0.5", "\n", "\n", "out", "=", "(", "(", "epe", ">", "3.0", ")", "&", "(", "(", "epe", "/", "mag", ")", ">", "0.05", ")", ")", ".", "float", "(", ")", "\n", "epe_list", ".", "append", "(", "epe", "[", "val", "]", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "out_list", ".", "append", "(", "out", "[", "val", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "epe_list", "=", "np", ".", "array", "(", "epe_list", ")", "\n", "out_list", "=", "np", ".", "concatenate", "(", "out_list", ")", "\n", "\n", "epe", "=", "np", ".", "mean", "(", "epe_list", ")", "\n", "f1", "=", "100", "*", "np", ".", "mean", "(", "out_list", ")", "\n", "\n", "print", "(", "\"Validation KITTI: %f, %f\"", "%", "(", "epe", ",", "f1", ")", ")", "\n", "return", "{", "'kitti-epe'", ":", "epe", ",", "'kitti-f1'", ":", "f1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger.__init__": [[103, 115], ["vars", "open", "train.Logger.print_args", "os.path.isdir", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger.print_args"], ["    ", "def", "__init__", "(", "self", ",", "scheduler", ",", "args", ")", ":", "\n", "        ", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "args", "=", "vars", "(", "args", ")", "\n", "self", ".", "total_steps", "=", "0", "\n", "self", ".", "running_loss", "=", "{", "}", "\n", "self", ".", "writer", "=", "None", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoints/'", "+", "args", ".", "name", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'checkpoints/'", "+", "args", ".", "name", ")", "\n", "\n", "", "self", ".", "txt_file", "=", "open", "(", "'checkpoints/'", "+", "args", ".", "name", "+", "'/log.txt'", ",", "'a'", ")", "\n", "self", ".", "print_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger.print_args": [[116, 123], ["print", "train.Logger.txt_file.writelines", "train.Logger.args.items", "train.Logger.txt_file.flush", "print", "train.Logger.txt_file.writelines"], "methods", ["None"], ["", "def", "print_args", "(", "self", ")", ":", "\n", "        ", "print", "(", "'\\n### Experiments Arguments ###'", ")", "\n", "self", ".", "txt_file", ".", "writelines", "(", "'\\n### Experiments Arguments ### \\n'", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "args", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'{}: {}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "self", ".", "txt_file", ".", "writelines", "(", "'{}: {}\\n'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "", "self", ".", "txt_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger._print_training_status": [[124, 140], ["print", "train.Logger.txt_file.writelines", "train.Logger.txt_file.flush", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "train.Logger.writer.add_scalar", "sorted", "train.Logger.scheduler.get_last_lr", "train.Logger.running_loss.keys", "len"], "methods", ["None"], ["", "def", "_print_training_status", "(", "self", ")", ":", "\n", "        ", "metrics_data", "=", "[", "self", ".", "running_loss", "[", "k", "]", "/", "SUM_FREQ", "for", "k", "in", "sorted", "(", "self", ".", "running_loss", ".", "keys", "(", ")", ")", "]", "\n", "training_str", "=", "\"[{:6d}, {:10.7f}] \"", ".", "format", "(", "self", ".", "total_steps", "+", "1", ",", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "metrics_str", "=", "(", "\"{:10.4f}, \"", "*", "len", "(", "metrics_data", ")", ")", ".", "format", "(", "*", "metrics_data", ")", "\n", "\n", "# print the training status", "\n", "print", "(", "training_str", "+", "metrics_str", ")", "\n", "self", ".", "txt_file", ".", "writelines", "(", "training_str", "+", "metrics_str", "+", "'\\n'", ")", "\n", "self", ".", "txt_file", ".", "flush", "(", ")", "\n", "\n", "if", "self", ".", "writer", "is", "None", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "'checkpoints/%s'", "%", "args", ".", "name", ")", "\n", "\n", "", "for", "k", "in", "self", ".", "running_loss", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "k", ",", "self", ".", "running_loss", "[", "k", "]", "/", "SUM_FREQ", ",", "self", ".", "total_steps", ")", "\n", "self", ".", "running_loss", "[", "k", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger.push": [[141, 153], ["train.Logger._print_training_status"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger._print_training_status"], ["", "", "def", "push", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "self", ".", "total_steps", "+=", "1", "\n", "\n", "for", "key", "in", "metrics", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "running_loss", ":", "\n", "                ", "self", ".", "running_loss", "[", "key", "]", "=", "0.0", "\n", "\n", "", "self", ".", "running_loss", "[", "key", "]", "+=", "metrics", "[", "key", "]", "\n", "\n", "", "if", "self", ".", "total_steps", "%", "SUM_FREQ", "==", "SUM_FREQ", "-", "1", ":", "\n", "            ", "self", ".", "_print_training_status", "(", ")", "\n", "self", ".", "running_loss", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger.write_dict": [[154, 162], ["torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "train.Logger.writer.add_scalar", "train.Logger.txt_file.writelines"], "methods", ["None"], ["", "", "def", "write_dict", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "self", ".", "writer", "is", "None", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", ")", "\n", "\n", "", "for", "key", "in", "results", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "key", ",", "results", "[", "key", "]", ",", "self", ".", "total_steps", ")", "\n", "if", "key", "in", "args", ".", "validation", "+", "[", "'clean'", ",", "'final'", ",", "'kitti-epe'", ",", "'kitti-f1'", "]", ":", "\n", "                ", "self", ".", "txt_file", ".", "writelines", "(", "'Validation %s EPE: %f\\n'", "%", "(", "key", ",", "results", "[", "key", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger.close": [[163, 165], ["train.Logger.writer.close"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger.close"], ["", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.sequence_loss": [[46, 72], ["len", "torch.sum().sqrt", "torch.sum().sqrt", "torch.sum().sqrt", "range", "torch.sum().sqrt", "torch.sum().sqrt", "torch.sum().sqrt", "torch.sum().sqrt.view", "torch.sum().sqrt.mean().item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "valid.view", "torch.sum().sqrt.mean"], "function", ["None"], ["def", "sequence_loss", "(", "flow_preds", ",", "flow_gt", ",", "valid", ",", "gamma", "=", "0.8", ",", "max_flow", "=", "MAX_FLOW", ")", ":", "\n", "    ", "\"\"\" Loss function defined over sequence of flow predictions \"\"\"", "\n", "\n", "n_predictions", "=", "len", "(", "flow_preds", ")", "\n", "flow_loss", "=", "0.0", "\n", "\n", "# exlude invalid pixels and extremely large diplacements", "\n", "mag", "=", "torch", ".", "sum", "(", "flow_gt", "**", "2", ",", "dim", "=", "1", ")", ".", "sqrt", "(", ")", "\n", "valid", "=", "(", "valid", ">=", "0.5", ")", "&", "(", "mag", "<", "max_flow", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_predictions", ")", ":", "\n", "        ", "i_weight", "=", "gamma", "**", "(", "n_predictions", "-", "i", "-", "1", ")", "\n", "i_loss", "=", "(", "flow_preds", "[", "i", "]", "-", "flow_gt", ")", ".", "abs", "(", ")", "\n", "flow_loss", "+=", "i_weight", "*", "(", "valid", "[", ":", ",", "None", "]", "*", "i_loss", ")", ".", "mean", "(", ")", "\n", "\n", "", "epe", "=", "torch", ".", "sum", "(", "(", "flow_preds", "[", "-", "1", "]", "-", "flow_gt", ")", "**", "2", ",", "dim", "=", "1", ")", ".", "sqrt", "(", ")", "\n", "epe", "=", "epe", ".", "view", "(", "-", "1", ")", "[", "valid", ".", "view", "(", "-", "1", ")", "]", "\n", "\n", "metrics", "=", "{", "\n", "'epe'", ":", "epe", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "'1px'", ":", "(", "epe", "<", "1", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "'3px'", ":", "(", "epe", "<", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "'5px'", ":", "(", "epe", "<", "5", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "}", "\n", "\n", "return", "flow_loss", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.show_image": [[73, 77], ["img.permute().cpu().numpy.permute().cpu().numpy", "matplotlib.imshow", "matplotlib.show", "img.permute().cpu().numpy.permute().cpu", "img.permute().cpu().numpy.permute"], "function", ["None"], ["", "def", "show_image", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "img", "/", "255.0", ")", "\n", "plt", ".", "show", "(", ")", "\n", "# cv2.imshow('image', img/255.0)", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.count_parameters": [[80, 82], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.fetch_optimizer": [[83, 100], ["args.optimizer.lower", "torch.AdamW", "args.scheduler.lower", "torch.lr_scheduler.OneCycleLR", "model.parameters", "args.optimizer.lower", "torch.Adam", "NotImplementedError", "args.scheduler.lower", "torch.lr_scheduler.StepLR", "NotImplementedError", "model.parameters"], "function", ["None"], ["", "def", "fetch_optimizer", "(", "args", ",", "model", ")", ":", "\n", "    ", "\"\"\" Create the optimizer and learning rate scheduler \"\"\"", "\n", "if", "args", ".", "optimizer", ".", "lower", "(", ")", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wdecay", ",", "eps", "=", "args", ".", "epsilon", ")", "\n", "", "elif", "args", ".", "optimizer", ".", "lower", "(", ")", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wdecay", ",", "eps", "=", "args", ".", "epsilon", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'{} optimizer is not implemented!'", ".", "format", "(", "args", ".", "optimizer", ")", ")", "\n", "\n", "", "if", "args", ".", "scheduler", ".", "lower", "(", ")", "==", "'cyclic'", ":", "\n", "        ", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "OneCycleLR", "(", "optimizer", ",", "args", ".", "lr", ",", "args", ".", "num_steps", "+", "100", ",", "\n", "pct_start", "=", "0.05", ",", "cycle_momentum", "=", "False", ",", "anneal_strategy", "=", "'linear'", ")", "\n", "", "elif", "args", ".", "scheduler", ".", "lower", "(", ")", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "args", ".", "scheduler_step", ",", "gamma", "=", "0.5", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'{} scheduler is not implemented!'", ".", "format", "(", "args", ".", "scheduler", ")", ")", "\n", "", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.train": [[167, 262], ["nn.DataParallel.cuda", "nn.DataParallel.train", "datasets.fetch_dataloader", "train.fetch_optimizer", "GradScaler", "train.Logger", "train.count_parameters", "print", "Logger.txt_file.writelines", "train.Logger.close", "torch.save", "torch.save", "torch.save", "torch.DataParallel", "nn.DataParallel.load_state_dict", "nn.DataParallel.module.freeze_bn", "enumerate", "nn.DataParallel.state_dict", "raft.RAFT", "torch.DataParallel", "torch.load", "torch.load", "torch.load", "optimizer.zero_grad", "nn.DataParallel.", "train.sequence_loss", "GradScaler.scale().backward", "GradScaler.unscale_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "GradScaler.step", "scheduler.step", "GradScaler.update", "train.Logger.push", "raft_nc.RAFT", "torch.DataParallel", "x.cuda", "numpy.random.uniform", "nn.DataParallel.parameters", "torch.save", "torch.save", "torch.save", "train.Logger.write_dict", "nn.DataParallel.train", "raft_nc_sep.RAFT", "torch.DataParallel", "NotImplementedError", "GradScaler.scale", "nn.DataParallel.state_dict", "nn.DataParallel.module.freeze_bn", "raft_nc_dbl.RAFT", "results.update", "results.update", "results.update", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "evaluate.validate_chairs", "evaluate.validate_chairs", "evaluate.validate_sintel", "results.update", "evaluate.validate_kitti", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.train", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.datasets.fetch_dataloader", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.fetch_optimizer", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.count_parameters", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger.close", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft.RAFT.freeze_bn", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.sequence_loss", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacPool2dFn.backward", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger.push", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger.write_dict", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.train", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft.RAFT.freeze_bn", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.evaluate.validate_chairs", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.evaluate.validate_chairs", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.evaluate.validate_sintel", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.evaluate.validate_kitti"], ["", "", "def", "train", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "model", "==", "'raft'", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "RAFT", "(", "args", ")", ",", "device_ids", "=", "args", ".", "gpus", ")", "\n", "", "elif", "args", ".", "model", "==", "'raft_nc'", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "RAFT_NC", "(", "args", ")", ",", "device_ids", "=", "args", ".", "gpus", ")", "\n", "", "elif", "args", ".", "model", "==", "'raft_nc_sep'", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "RAFT_NC_SEP", "(", "args", ")", ",", "device_ids", "=", "args", ".", "gpus", ")", "\n", "", "elif", "args", ".", "model", "==", "'raft_nc_dbl'", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "RAFT_NC_DBL", "(", "args", ")", ",", "device_ids", "=", "args", ".", "gpus", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Model %s not found!'", "%", "args", ".", "model", ")", "\n", "\n", "", "if", "args", ".", "restore_ckpt", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "restore_ckpt", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "model", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "args", ".", "stage", "!=", "'chairs'", ":", "\n", "        ", "model", ".", "module", ".", "freeze_bn", "(", ")", "\n", "\n", "", "train_loader", "=", "datasets", ".", "fetch_dataloader", "(", "args", ")", "\n", "optimizer", ",", "scheduler", "=", "fetch_optimizer", "(", "args", ",", "model", ")", "\n", "\n", "total_steps", "=", "0", "\n", "scaler", "=", "GradScaler", "(", "enabled", "=", "args", ".", "mixed_precision", ")", "\n", "logger", "=", "Logger", "(", "scheduler", ",", "args", ")", "\n", "\n", "num_params", "=", "count_parameters", "(", "model", ")", "\n", "print", "(", "\"Parameter Count: %d\"", "%", "num_params", ")", "\n", "logger", ".", "txt_file", ".", "writelines", "(", "\"Parameter Count: %d\\n\"", "%", "num_params", ")", "\n", "\n", "VAL_FREQ", "=", "5000", "\n", "should_keep_training", "=", "True", "\n", "while", "should_keep_training", ":", "\n", "\n", "        ", "for", "i_batch", ",", "data_blob", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "image1", ",", "image2", ",", "flow", ",", "valid", "=", "[", "x", ".", "cuda", "(", ")", "for", "x", "in", "data_blob", "]", "\n", "\n", "# show_image(image1[0])", "\n", "# show_image(image2[0])", "\n", "\n", "if", "args", ".", "add_noise", ":", "\n", "                ", "stdv", "=", "np", ".", "random", ".", "uniform", "(", "0.0", ",", "5.0", ")", "\n", "image1", "=", "(", "image1", "+", "stdv", "*", "torch", ".", "randn", "(", "*", "image1", ".", "shape", ")", ".", "to", "(", "image1", ".", "device", ")", ")", ".", "clamp", "(", "0.0", ",", "255.0", ")", "\n", "image2", "=", "(", "image2", "+", "stdv", "*", "torch", ".", "randn", "(", "*", "image2", ".", "shape", ")", ".", "to", "(", "image2", ".", "device", ")", ")", ".", "clamp", "(", "0.0", ",", "255.0", ")", "\n", "\n", "", "flow_predictions", "=", "model", "(", "image1", ",", "image2", ",", "iters", "=", "args", ".", "iters", ")", "\n", "\n", "loss", ",", "metrics", "=", "sequence_loss", "(", "flow_predictions", ",", "flow", ",", "valid", ",", "args", ".", "gamma", ")", "\n", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "\n", "scaler", ".", "unscale_", "(", "optimizer", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "\n", "logger", ".", "push", "(", "metrics", ")", "\n", "\n", "if", "total_steps", "%", "VAL_FREQ", "==", "VAL_FREQ", "-", "1", ":", "\n", "                ", "PATH", "=", "'checkpoints/%s/%d_%s.pth'", "%", "(", "args", ".", "name", ",", "total_steps", "+", "1", ",", "args", ".", "name", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "PATH", ")", "\n", "\n", "results", "=", "{", "}", "\n", "for", "val_dataset", "in", "args", ".", "validation", ":", "\n", "                    ", "if", "val_dataset", "==", "'chairs'", ":", "\n", "                        ", "if", "args", ".", "model", "==", "'raft_nc_sep'", ":", "\n", "                            ", "results", ".", "update", "(", "evaluate", ".", "validate_chairs", "(", "model", ".", "module", ",", "12", ")", ")", "\n", "", "else", ":", "\n", "                            ", "results", ".", "update", "(", "evaluate", ".", "validate_chairs", "(", "model", ".", "module", ")", ")", "\n", "", "", "elif", "val_dataset", "==", "'sintel'", ":", "\n", "                        ", "results", ".", "update", "(", "evaluate", ".", "validate_sintel", "(", "model", ".", "module", ")", ")", "\n", "", "elif", "val_dataset", "==", "'kitti'", ":", "\n", "                        ", "results", ".", "update", "(", "evaluate", ".", "validate_kitti", "(", "model", ".", "module", ")", ")", "\n", "\n", "", "", "logger", ".", "write_dict", "(", "results", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "if", "args", ".", "stage", "!=", "'chairs'", ":", "\n", "                    ", "model", ".", "module", ".", "freeze_bn", "(", ")", "\n", "\n", "", "", "total_steps", "+=", "1", "\n", "\n", "if", "total_steps", ">", "args", ".", "num_steps", ":", "\n", "                ", "should_keep_training", "=", "False", "\n", "break", "\n", "\n", "", "", "", "logger", ".", "close", "(", ")", "\n", "PATH", "=", "'checkpoints/%s/final_model.pth'", "%", "args", ".", "name", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "PATH", ")", "\n", "\n", "return", "PATH", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.Identity.__init__": [[60, 62], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.Identity.forward": [[63, 65], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.JointBilateral.__init__": [[68, 80], ["torch.Module.__init__", "float", "float", "pac_modules.PacConvTranspose2d", "pac_upsampler.JointBilateral.convt.weight.data.fill_", "range", "int"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "factor", ",", "channels", ",", "kernel_size", ",", "scale_space", ",", "scale_color", ")", ":", "\n", "        ", "super", "(", "JointBilateral", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "scale_space", "=", "float", "(", "scale_space", ")", "\n", "self", ".", "scale_color", "=", "float", "(", "scale_color", ")", "\n", "self", ".", "convt", "=", "PacConvTranspose2d", "(", "in_channels", "=", "channels", ",", "out_channels", "=", "channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "factor", ",", "dilation", "=", "1", ",", "padding", "=", "1", "+", "int", "(", "(", "kernel_size", "-", "factor", "-", "1", ")", "//", "2", ")", ",", "\n", "output_padding", "=", "(", "kernel_size", "-", "factor", ")", "%", "2", ",", "\n", "normalize_kernel", "=", "True", ",", "bias", "=", "None", ")", "\n", "self", ".", "convt", ".", "weight", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "for", "c", "in", "range", "(", "channels", ")", ":", "\n", "            ", "self", ".", "convt", ".", "weight", ".", "data", "[", "c", ",", "c", "]", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.JointBilateral.forward": [[81, 94], ["pac_upsampler.convert_to_single_channel", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "pac_upsampler.repeat_for_channel", "pac_upsampler.JointBilateral.convt", "pac_upsampler.recover_from_single_channel", "torch.arange.view().expand", "torch.arange.expand", "torch.arange.view"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.convert_to_single_channel", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.repeat_for_channel", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.recover_from_single_channel"], ["", "", "def", "forward", "(", "self", ",", "target_low", ",", "guide", ")", ":", "\n", "        ", "target_low", ",", "ch0", "=", "convert_to_single_channel", "(", "target_low", ")", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "guide", ".", "shape", "\n", "hh", "=", "th", ".", "arange", "(", "h", ",", "dtype", "=", "guide", ".", "dtype", ",", "device", "=", "guide", ".", "device", ")", "\n", "ww", "=", "th", ".", "arange", "(", "w", ",", "dtype", "=", "guide", ".", "dtype", ",", "device", "=", "guide", ".", "device", ")", "\n", "guide", "=", "th", ".", "cat", "(", "[", "guide", "*", "self", ".", "scale_color", ",", "\n", "hh", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "bs", ",", "1", ",", "-", "1", ",", "w", ")", "*", "self", ".", "scale_space", ",", "\n", "ww", ".", "expand", "(", "bs", ",", "1", ",", "h", ",", "-", "1", ")", "*", "self", ".", "scale_space", "]", ",", "dim", "=", "1", ")", "\n", "guide", "=", "repeat_for_channel", "(", "guide", ",", "ch0", ")", "\n", "\n", "x", "=", "self", ".", "convt", "(", "target_low", ",", "guide", ")", "\n", "x", "=", "recover_from_single_channel", "(", "x", ",", "ch0", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.Bilinear.__init__": [[97, 100], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "factor", ",", "channels", "=", "None", ",", "guide_channels", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bilinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.Bilinear.forward": [[101, 103], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "target_low", ",", "guide", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "target_low", ",", "scale_factor", "=", "self", ".", "factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.DJIF.__init__": [[106, 134], ["torch.Module.__init__", "tuple", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "sum", "sum", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "factor", ",", "channels", "=", "1", ",", "guide_channels", "=", "3", ",", "fs", "=", "(", "9", ",", "1", ",", "5", ")", ",", "ns_tg", "=", "(", "96", ",", "48", ",", "1", ")", ",", "ns_f", "=", "(", "64", ",", "32", ")", ")", ":", "\n", "        ", "super", "(", "DJIF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "fs", "[", "0", "]", "%", "2", "==", "1", "and", "fs", "[", "1", "]", "%", "2", "==", "1", "and", "fs", "[", "2", "]", "%", "2", "==", "1", "\n", "paddings", "=", "tuple", "(", "f", "//", "2", "for", "f", "in", "fs", ")", "\n", "paddings_tg", "=", "sum", "(", "paddings", ")", "//", "3", ",", "sum", "(", "paddings", ")", "//", "3", ",", "sum", "(", "paddings", ")", "-", "2", "*", "(", "sum", "(", "paddings", ")", "//", "3", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "guide_channels", "=", "guide_channels", "\n", "self", ".", "branch_t", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channels", ",", "ns_tg", "[", "0", "]", ",", "kernel_size", "=", "fs", "[", "0", "]", ",", "padding", "=", "paddings_tg", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ns_tg", "[", "0", "]", ",", "ns_tg", "[", "1", "]", ",", "kernel_size", "=", "fs", "[", "1", "]", ",", "padding", "=", "paddings_tg", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ns_tg", "[", "1", "]", ",", "ns_tg", "[", "2", "]", ",", "kernel_size", "=", "fs", "[", "2", "]", ",", "padding", "=", "paddings_tg", "[", "2", "]", ")", "\n", ")", "\n", "self", ".", "branch_g", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "guide_channels", ",", "ns_tg", "[", "0", "]", ",", "kernel_size", "=", "fs", "[", "0", "]", ",", "padding", "=", "paddings_tg", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ns_tg", "[", "0", "]", ",", "ns_tg", "[", "1", "]", ",", "kernel_size", "=", "fs", "[", "1", "]", ",", "padding", "=", "paddings_tg", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ns_tg", "[", "1", "]", ",", "ns_tg", "[", "2", "]", ",", "kernel_size", "=", "fs", "[", "2", "]", ",", "padding", "=", "paddings_tg", "[", "2", "]", ")", "\n", ")", "\n", "self", ".", "branch_joint", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ns_tg", "[", "2", "]", "*", "2", ",", "ns_f", "[", "0", "]", ",", "kernel_size", "=", "fs", "[", "0", "]", ",", "padding", "=", "paddings", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ns_f", "[", "0", "]", ",", "ns_f", "[", "1", "]", ",", "kernel_size", "=", "fs", "[", "1", "]", ",", "padding", "=", "paddings", "[", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ns_f", "[", "1", "]", ",", "channels", ",", "kernel_size", "=", "fs", "[", "2", "]", ",", "padding", "=", "paddings", "[", "2", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.DJIF.forward": [[136, 146], ["pac_upsampler.convert_to_single_channel", "pac_upsampler.DJIF.branch_t", "pac_upsampler.DJIF.branch_g", "pac_upsampler.repeat_for_channel", "pac_upsampler.DJIF.branch_joint", "pac_upsampler.recover_from_single_channel", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.convert_to_single_channel", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.repeat_for_channel", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.recover_from_single_channel"], ["", "def", "forward", "(", "self", ",", "target_low", ",", "guide", ")", ":", "\n", "        ", "target_low", ",", "ch0", "=", "convert_to_single_channel", "(", "target_low", ")", "\n", "if", "target_low", ".", "shape", "[", "-", "1", "]", "<", "guide", ".", "shape", "[", "-", "1", "]", ":", "\n", "            ", "target_low", "=", "F", ".", "interpolate", "(", "target_low", ",", "scale_factor", "=", "self", ".", "factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", "target_low", "=", "self", ".", "branch_t", "(", "target_low", ")", "\n", "guide", "=", "self", ".", "branch_g", "(", "guide", ")", "\n", "guide", "=", "repeat_for_channel", "(", "guide", ",", "ch0", ")", "\n", "x", "=", "self", ".", "branch_joint", "(", "th", ".", "cat", "(", "(", "target_low", ",", "guide", ")", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "recover_from_single_channel", "(", "x", ",", "ch0", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.DJIFWide.__init__": [[149, 151], ["pac_upsampler.DJIF.__init__"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "factor", ",", "channels", "=", "1", ",", "guide_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "DJIFWide", ",", "self", ")", ".", "__init__", "(", "factor", ",", "channels", ",", "guide_channels", ",", "ns_tg", "=", "(", "256", ",", "128", ",", "1", ")", ",", "ns_f", "=", "(", "256", ",", "128", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.PacJointUpsample.__init__": [[154, 234], ["torch.Module.__init__", "int", "int", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "math.log2", "type", "type", "type", "t_layers.append", "collections.OrderedDict", "g_layers.append", "collections.OrderedDict", "int", "pac_upsampler.PacJointUpsample.up_convts.append", "f_layers.append", "collections.OrderedDict", "math.log2", "len", "len", "len", "t_layers.append", "t_layers.append", "g_layers.append", "g_layers.append", "pac_modules.PacConvTranspose2d", "pac_upsampler.PacJointUpsample.up_bns.append", "f_layers.append", "f_layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "factor", ",", "channels", "=", "1", ",", "guide_channels", "=", "3", ",", "\n", "n_t_layers", "=", "3", ",", "n_g_layers", "=", "3", ",", "n_f_layers", "=", "2", ",", "\n", "n_t_filters", ":", "Union", "[", "int", ",", "tuple", "]", "=", "32", ",", "n_g_filters", ":", "Union", "[", "int", ",", "tuple", "]", "=", "32", ",", "n_f_filters", ":", "Union", "[", "int", ",", "tuple", "]", "=", "32", ",", "\n", "k_ch", "=", "16", ",", "f_sz_1", "=", "5", ",", "f_sz_2", "=", "5", ",", "t_bn", "=", "False", ",", "g_bn", "=", "False", ",", "u_bn", "=", "False", ",", "f_bn", "=", "False", ")", ":", "\n", "        ", "super", "(", "PacJointUpsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "guide_channels", "=", "guide_channels", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "branch_t", "=", "None", "\n", "self", ".", "branch_g", "=", "None", "\n", "self", ".", "branch_f", "=", "None", "\n", "self", ".", "k_ch", "=", "k_ch", "\n", "\n", "assert", "n_g_layers", ">=", "1", ",", "'Guidance branch should have at least one layer'", "\n", "assert", "n_f_layers", ">=", "1", ",", "'Final prediction branch should have at least one layer'", "\n", "assert", "math", ".", "log2", "(", "factor", ")", "%", "1", "==", "0", ",", "'factor needs to be a power of 2'", "\n", "assert", "f_sz_1", "%", "2", "==", "1", ",", "'filter size needs to be an odd number'", "\n", "num_ups", "=", "int", "(", "math", ".", "log2", "(", "factor", ")", ")", "# number of 2x up-sampling operations", "\n", "pad", "=", "int", "(", "f_sz_1", "//", "2", ")", "\n", "\n", "if", "type", "(", "n_t_filters", ")", "==", "int", ":", "\n", "            ", "n_t_filters", "=", "(", "n_t_filters", ",", ")", "*", "n_t_layers", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "n_t_filters", ")", "==", "n_t_layers", "\n", "\n", "", "if", "type", "(", "n_g_filters", ")", "==", "int", ":", "\n", "            ", "n_g_filters", "=", "(", "n_g_filters", ",", ")", "*", "(", "n_g_layers", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "n_g_filters", ")", "==", "n_g_layers", "-", "1", "\n", "\n", "", "if", "type", "(", "n_f_filters", ")", "==", "int", ":", "\n", "            ", "n_f_filters", "=", "(", "n_f_filters", ",", ")", "*", "(", "n_f_layers", "+", "num_ups", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "n_f_filters", ")", "==", "n_f_layers", "+", "num_ups", "-", "1", "\n", "\n", "# target branch", "\n", "", "t_layers", "=", "[", "]", "\n", "n_t_channels", "=", "(", "channels", ",", ")", "+", "n_t_filters", "\n", "for", "l", "in", "range", "(", "n_t_layers", ")", ":", "\n", "            ", "t_layers", ".", "append", "(", "(", "'conv{}'", ".", "format", "(", "l", "+", "1", ")", ",", "nn", ".", "Conv2d", "(", "n_t_channels", "[", "l", "]", ",", "n_t_channels", "[", "l", "+", "1", "]", ",", "\n", "kernel_size", "=", "f_sz_1", ",", "padding", "=", "pad", ")", ")", ")", "\n", "if", "t_bn", ":", "\n", "                ", "t_layers", ".", "append", "(", "(", "'bn{}'", ".", "format", "(", "l", "+", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "n_t_channels", "[", "l", "+", "1", "]", ")", ")", ")", "\n", "", "if", "l", "<", "n_t_layers", "-", "1", ":", "\n", "                ", "t_layers", ".", "append", "(", "(", "'relu{}'", ".", "format", "(", "l", "+", "1", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "", "", "self", ".", "branch_t", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "t_layers", ")", ")", "\n", "\n", "# guidance branch", "\n", "g_layers", "=", "[", "]", "\n", "n_g_channels", "=", "(", "guide_channels", ",", ")", "+", "n_g_filters", "+", "(", "k_ch", "*", "num_ups", ",", ")", "\n", "for", "l", "in", "range", "(", "n_g_layers", ")", ":", "\n", "            ", "g_layers", ".", "append", "(", "(", "'conv{}'", ".", "format", "(", "l", "+", "1", ")", ",", "nn", ".", "Conv2d", "(", "n_g_channels", "[", "l", "]", ",", "n_g_channels", "[", "l", "+", "1", "]", ",", "\n", "kernel_size", "=", "f_sz_1", ",", "padding", "=", "pad", ")", ")", ")", "\n", "if", "g_bn", ":", "\n", "                ", "g_layers", ".", "append", "(", "(", "'bn{}'", ".", "format", "(", "l", "+", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "n_g_channels", "[", "l", "+", "1", "]", ")", ")", ")", "\n", "", "if", "l", "<", "n_g_layers", "-", "1", ":", "\n", "                ", "g_layers", ".", "append", "(", "(", "'relu{}'", ".", "format", "(", "l", "+", "1", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "", "", "self", ".", "branch_g", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "g_layers", ")", ")", "\n", "\n", "# upsampling layers", "\n", "p", ",", "op", "=", "int", "(", "(", "f_sz_2", "-", "1", ")", "//", "2", ")", ",", "(", "f_sz_2", "%", "2", ")", "\n", "self", ".", "up_convts", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "up_bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "n_f_channels", "=", "(", "n_t_channels", "[", "-", "1", "]", ",", ")", "+", "n_f_filters", "+", "(", "channels", ",", ")", "\n", "for", "l", "in", "range", "(", "num_ups", ")", ":", "\n", "            ", "self", ".", "up_convts", ".", "append", "(", "PacConvTranspose2d", "(", "n_f_channels", "[", "l", "]", ",", "n_f_channels", "[", "l", "+", "1", "]", ",", "\n", "kernel_size", "=", "f_sz_2", ",", "stride", "=", "2", ",", "padding", "=", "p", ",", "output_padding", "=", "op", ")", ")", "\n", "if", "u_bn", ":", "\n", "                ", "self", ".", "up_bns", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "n_f_channels", "[", "l", "+", "1", "]", ")", ")", "\n", "\n", "# final prediction branch", "\n", "", "", "f_layers", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "n_f_layers", ")", ":", "\n", "            ", "f_layers", ".", "append", "(", "(", "'conv{}'", ".", "format", "(", "l", "+", "1", ")", ",", "nn", ".", "Conv2d", "(", "n_f_channels", "[", "l", "+", "num_ups", "]", ",", "n_f_channels", "[", "l", "+", "num_ups", "+", "1", "]", ",", "\n", "kernel_size", "=", "f_sz_1", ",", "padding", "=", "pad", ")", ")", ")", "\n", "if", "f_bn", ":", "\n", "                ", "f_layers", ".", "append", "(", "(", "'bn{}'", ".", "format", "(", "l", "+", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "n_f_channels", "[", "l", "+", "num_ups", "+", "1", "]", ")", ")", ")", "\n", "", "if", "l", "<", "n_f_layers", "-", "1", ":", "\n", "                ", "f_layers", ".", "append", "(", "(", "'relu{}'", ".", "format", "(", "l", "+", "1", ")", ",", "nn", ".", "ReLU", "(", ")", ")", ")", "\n", "", "", "self", ".", "branch_f", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "f_layers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.PacJointUpsample.forward": [[235, 252], ["pac_upsampler.convert_to_single_channel", "pac_upsampler.PacJointUpsample.branch_t", "pac_upsampler.PacJointUpsample.branch_g", "range", "pac_upsampler.PacJointUpsample.branch_f", "pac_upsampler.recover_from_single_channel", "len", "pac_upsampler.repeat_for_channel", "torch.relu", "torch.relu", "torch.relu", "math.pow", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.convert_to_single_channel", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.recover_from_single_channel", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.repeat_for_channel"], ["", "def", "forward", "(", "self", ",", "target_low", ",", "guide", ")", ":", "\n", "        ", "target_low", ",", "ch0", "=", "convert_to_single_channel", "(", "target_low", ")", "\n", "x", "=", "self", ".", "branch_t", "(", "target_low", ")", "\n", "guide", "=", "self", ".", "branch_g", "(", "guide", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "up_convts", ")", ")", ":", "\n", "            ", "scale", "=", "math", ".", "pow", "(", "2", ",", "i", "+", "1", ")", "/", "self", ".", "factor", "\n", "guide_cur", "=", "guide", "[", ":", ",", "(", "i", "*", "self", ".", "k_ch", ")", ":", "(", "(", "i", "+", "1", ")", "*", "self", ".", "k_ch", ")", "]", "\n", "if", "scale", "!=", "1", ":", "\n", "                ", "guide_cur", "=", "F", ".", "interpolate", "(", "guide_cur", ",", "scale_factor", "=", "scale", ",", "align_corners", "=", "False", ",", "mode", "=", "'bilinear'", ")", "\n", "", "guide_cur", "=", "repeat_for_channel", "(", "guide_cur", ",", "ch0", ")", "\n", "x", "=", "self", ".", "up_convts", "[", "i", "]", "(", "x", ",", "guide_cur", ")", "\n", "if", "self", ".", "up_bns", ":", "\n", "                ", "x", "=", "self", ".", "up_bns", "[", "i", "]", "(", "x", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "", "x", "=", "self", ".", "branch_f", "(", "x", ")", "\n", "x", "=", "recover_from_single_channel", "(", "x", ",", "ch0", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.PacJointUpsampleLite.__init__": [[255, 265], ["pac_upsampler.PacJointUpsample.__init__", "dict", "dict", "dict", "ValueError"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "factor", ",", "channels", "=", "1", ",", "guide_channels", "=", "3", ")", ":", "\n", "        ", "if", "factor", "==", "4", ":", "\n", "            ", "args", "=", "dict", "(", "n_g_filters", "=", "(", "12", ",", "22", ")", ",", "n_t_filters", "=", "(", "12", ",", "16", ",", "22", ")", ",", "n_f_filters", "=", "(", "12", ",", "16", ",", "22", ")", ",", "k_ch", "=", "12", ")", "\n", "", "elif", "factor", "==", "8", ":", "\n", "            ", "args", "=", "dict", "(", "n_g_filters", "=", "(", "12", ",", "16", ")", ",", "n_t_filters", "=", "(", "12", ",", "16", ",", "16", ")", ",", "n_f_filters", "=", "(", "12", ",", "16", ",", "16", ",", "20", ")", ",", "k_ch", "=", "12", ")", "\n", "", "elif", "factor", "==", "16", ":", "\n", "            ", "args", "=", "dict", "(", "n_g_filters", "=", "(", "8", ",", "16", ")", ",", "n_t_filters", "=", "(", "8", ",", "16", ",", "16", ")", ",", "n_f_filters", "=", "(", "8", ",", "16", ",", "16", ",", "16", ",", "16", ")", ",", "k_ch", "=", "10", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'factor can only be 4, 8, or 16.'", ")", "\n", "", "super", "(", "PacJointUpsampleLite", ",", "self", ")", ".", "__init__", "(", "factor", ",", "channels", ",", "guide_channels", ",", "**", "args", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.convert_to_single_channel": [[16, 21], ["x.reshape.reshape"], "function", ["None"], ["def", "convert_to_single_channel", "(", "x", ")", ":", "\n", "    ", "bs", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "if", "ch", "!=", "1", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "bs", "*", "ch", ",", "1", ",", "h", ",", "w", ")", "\n", "", "return", "x", ",", "ch", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.recover_from_single_channel": [[23, 30], ["x.reshape.reshape"], "function", ["None"], ["", "def", "recover_from_single_channel", "(", "x", ",", "ch", ")", ":", "\n", "    ", "if", "ch", "!=", "1", ":", "\n", "        ", "bs_ch", ",", "_ch", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "assert", "_ch", "==", "1", "\n", "assert", "bs_ch", "%", "ch", "==", "0", "\n", "x", "=", "x", ".", "reshape", "(", "bs_ch", "//", "ch", ",", "ch", ",", "h", ",", "w", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.repeat_for_channel": [[32, 37], ["x.repeat().reshape.repeat().reshape", "x.repeat().reshape.repeat"], "function", ["None"], ["", "def", "repeat_for_channel", "(", "x", ",", "ch", ")", ":", "\n", "    ", "if", "ch", "!=", "1", ":", "\n", "        ", "bs", ",", "_ch", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "ch", ",", "1", ",", "1", ")", ".", "reshape", "(", "bs", "*", "ch", ",", "_ch", ",", "h", ",", "w", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.th_rmse": [[39, 41], ["None"], "function", ["None"], ["", "def", "th_rmse", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "return", "(", "pred", "-", "gt", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "dim", "=", "3", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "sqrt", "(", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_upsampler.th_epe": [[43, 57], ["epe.mean", "pred[].contiguous().view", "pred[].contiguous().view", "gt[].contiguous().view", "gt[].contiguous().view", "gt_u.abs().max", "gt_v.abs().max", "pred[].contiguous", "pred[].contiguous", "gt[].contiguous", "gt[].contiguous", "gt_u.abs().min", "gt_v.abs().min", "gt_u.abs", "gt_v.abs", "gt_u.abs", "gt_v.abs", "gt_u.abs", "gt_v.abs", "gt_u.abs", "gt_v.abs"], "function", ["None"], ["", "def", "th_epe", "(", "pred", ",", "gt", ",", "small_flow", "=", "-", "1.0", ",", "unknown_flow_thresh", "=", "1e7", ")", ":", "\n", "    ", "pred_u", ",", "pred_v", "=", "pred", "[", ":", ",", "0", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ",", "pred", "[", ":", ",", "1", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "gt_u", ",", "gt_v", "=", "gt", "[", ":", ",", "0", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ",", "gt", "[", ":", ",", "1", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "gt_u", ".", "abs", "(", ")", ".", "max", "(", ")", ">", "unknown_flow_thresh", "or", "gt_v", ".", "abs", "(", ")", ".", "max", "(", ")", ">", "unknown_flow_thresh", ":", "\n", "        ", "idx_unknown", "=", "(", "(", "gt_u", ".", "abs", "(", ")", ">", "unknown_flow_thresh", ")", "+", "(", "gt_v", ".", "abs", "(", ")", ">", "unknown_flow_thresh", ")", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "pred_u", "[", "idx_unknown", "]", "=", "0", "\n", "pred_v", "[", "idx_unknown", "]", "=", "0", "\n", "gt_u", "[", "idx_unknown", "]", "=", "0", "\n", "gt_v", "[", "idx_unknown", "]", "=", "0", "\n", "", "epe", "=", "(", "(", "pred_u", "-", "gt_u", ")", ".", "pow", "(", "2", ")", "+", "(", "pred_v", "-", "gt_v", ")", ".", "pow", "(", "2", ")", ")", ".", "sqrt", "(", ")", "\n", "if", "small_flow", ">=", "0.0", "and", "(", "gt_u", ".", "abs", "(", ")", ".", "min", "(", ")", "<=", "small_flow", "or", "gt_v", ".", "abs", "(", ")", ".", "min", "(", ")", "<=", "small_flow", ")", ":", "\n", "        ", "idx_valid", "=", "(", "(", "gt_u", ".", "abs", "(", ")", ">", "small_flow", ")", "+", "(", "gt_v", ".", "abs", "(", ")", ">", "small_flow", ")", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "epe", "=", "epe", "[", "idx_valid", "]", "\n", "", "return", "epe", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.FlowHead.__init__": [[7, 12], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "128", ",", "hidden_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "FlowHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "2", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.FlowHead.forward": [[13, 15], ["update.FlowHead.conv2", "update.FlowHead.relu", "update.FlowHead.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv2", "(", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.ConvGRU.__init__": [[17, 22], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "128", ",", "input_dim", "=", "192", "+", "128", ")", ":", "\n", "        ", "super", "(", "ConvGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convz", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "convr", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "convq", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.ConvGRU.forward": [[23, 32], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "update.ConvGRU.convz", "update.ConvGRU.convr", "update.ConvGRU.convq", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "x", ")", ":", "\n", "        ", "hx", "=", "torch", ".", "cat", "(", "[", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "convz", "(", "hx", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "convr", "(", "hx", ")", ")", "\n", "q", "=", "torch", ".", "tanh", "(", "self", ".", "convq", "(", "torch", ".", "cat", "(", "[", "r", "*", "h", ",", "x", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "\n", "h", "=", "(", "1", "-", "z", ")", "*", "h", "+", "z", "*", "q", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.SepConvGRU.__init__": [[34, 43], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "128", ",", "input_dim", "=", "192", "+", "128", ")", ":", "\n", "        ", "super", "(", "SepConvGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convz1", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "1", ",", "5", ")", ",", "padding", "=", "(", "0", ",", "2", ")", ")", "\n", "self", ".", "convr1", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "1", ",", "5", ")", ",", "padding", "=", "(", "0", ",", "2", ")", ")", "\n", "self", ".", "convq1", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "1", ",", "5", ")", ",", "padding", "=", "(", "0", ",", "2", ")", ")", "\n", "\n", "self", ".", "convz2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "self", ".", "convr2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "self", ".", "convq2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.SepConvGRU.forward": [[45, 61], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "update.SepConvGRU.convz1", "update.SepConvGRU.convr1", "update.SepConvGRU.convq1", "update.SepConvGRU.convz2", "update.SepConvGRU.convr2", "update.SepConvGRU.convq2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "x", ")", ":", "\n", "# horizontal", "\n", "        ", "hx", "=", "torch", ".", "cat", "(", "[", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "convz1", "(", "hx", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "convr1", "(", "hx", ")", ")", "\n", "q", "=", "torch", ".", "tanh", "(", "self", ".", "convq1", "(", "torch", ".", "cat", "(", "[", "r", "*", "h", ",", "x", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "h", "=", "(", "1", "-", "z", ")", "*", "h", "+", "z", "*", "q", "\n", "\n", "# vertical", "\n", "hx", "=", "torch", ".", "cat", "(", "[", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "convz2", "(", "hx", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "convr2", "(", "hx", ")", ")", "\n", "q", "=", "torch", ".", "tanh", "(", "self", ".", "convq2", "(", "torch", ".", "cat", "(", "[", "r", "*", "h", ",", "x", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "h", "=", "(", "1", "-", "z", ")", "*", "h", "+", "z", "*", "q", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.SmallMotionEncoder.__init__": [[63, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SmallMotionEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cor_planes", "=", "args", ".", "corr_levels", "*", "(", "2", "*", "args", ".", "corr_radius", "+", "1", ")", "**", "2", "\n", "self", ".", "convc1", "=", "nn", ".", "Conv2d", "(", "cor_planes", ",", "96", ",", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "convf1", "=", "nn", ".", "Conv2d", "(", "2", ",", "64", ",", "7", ",", "padding", "=", "3", ")", "\n", "self", ".", "convf2", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "128", ",", "80", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.SmallMotionEncoder.forward": [[71, 78], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.SmallMotionEncoder.convc1", "update.SmallMotionEncoder.convf1", "update.SmallMotionEncoder.convf2", "update.SmallMotionEncoder.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "flow", ",", "corr", ")", ":", "\n", "        ", "cor", "=", "F", ".", "relu", "(", "self", ".", "convc1", "(", "corr", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf1", "(", "flow", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf2", "(", "flo", ")", ")", "\n", "cor_flo", "=", "torch", ".", "cat", "(", "[", "cor", ",", "flo", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "cor_flo", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "out", ",", "flow", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.BasicMotionEncoder.__init__": [[80, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "BasicMotionEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cor_planes", "=", "args", ".", "corr_levels", "*", "(", "2", "*", "args", ".", "corr_radius", "+", "1", ")", "**", "2", "\n", "self", ".", "convc1", "=", "nn", ".", "Conv2d", "(", "cor_planes", ",", "256", ",", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "convc2", "=", "nn", ".", "Conv2d", "(", "256", ",", "192", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "convf1", "=", "nn", ".", "Conv2d", "(", "2", ",", "128", ",", "7", ",", "padding", "=", "3", ")", "\n", "self", ".", "convf2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "64", "+", "192", ",", "128", "-", "2", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.BasicMotionEncoder.forward": [[89, 98], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.BasicMotionEncoder.convc1", "update.BasicMotionEncoder.convc2", "update.BasicMotionEncoder.convf1", "update.BasicMotionEncoder.convf2", "update.BasicMotionEncoder.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "flow", ",", "corr", ")", ":", "\n", "        ", "cor", "=", "F", ".", "relu", "(", "self", ".", "convc1", "(", "corr", ")", ")", "\n", "cor", "=", "F", ".", "relu", "(", "self", ".", "convc2", "(", "cor", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf1", "(", "flow", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf2", "(", "flo", ")", ")", "\n", "\n", "cor_flo", "=", "torch", ".", "cat", "(", "[", "cor", ",", "flo", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "cor_flo", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "out", ",", "flow", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.SmallUpdateBlock.__init__": [[100, 105], ["torch.Module.__init__", "update.SmallMotionEncoder", "update.ConvGRU", "update.FlowHead"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "hidden_dim", "=", "96", ")", ":", "\n", "        ", "super", "(", "SmallUpdateBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "SmallMotionEncoder", "(", "args", ")", "\n", "self", ".", "gru", "=", "ConvGRU", "(", "hidden_dim", "=", "hidden_dim", ",", "input_dim", "=", "82", "+", "64", ")", "\n", "self", ".", "flow_head", "=", "FlowHead", "(", "hidden_dim", ",", "hidden_dim", "=", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.SmallUpdateBlock.forward": [[106, 113], ["update.SmallUpdateBlock.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.SmallUpdateBlock.gru", "update.SmallUpdateBlock.flow_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net", ",", "inp", ",", "corr", ",", "flow", ")", ":", "\n", "        ", "motion_features", "=", "self", ".", "encoder", "(", "flow", ",", "corr", ")", "\n", "inp", "=", "torch", ".", "cat", "(", "[", "inp", ",", "motion_features", "]", ",", "dim", "=", "1", ")", "\n", "net", "=", "self", ".", "gru", "(", "net", ",", "inp", ")", "\n", "delta_flow", "=", "self", ".", "flow_head", "(", "net", ")", "\n", "\n", "return", "net", ",", "None", ",", "delta_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.BasicUpdateBlock.__init__": [[115, 129], ["torch.Module.__init__", "update.BasicMotionEncoder", "update.SepConvGRU", "update.FlowHead", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "hidden_dim", "=", "128", ",", "input_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "BasicUpdateBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "encoder", "=", "BasicMotionEncoder", "(", "args", ")", "\n", "self", ".", "gru", "=", "SepConvGRU", "(", "hidden_dim", "=", "hidden_dim", ",", "input_dim", "=", "128", "+", "hidden_dim", ")", "\n", "self", ".", "flow_head", "=", "FlowHead", "(", "hidden_dim", ",", "hidden_dim", "=", "256", ")", "\n", "\n", "#if args.model != 'raft_nc':", "\n", "self", ".", "mask", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "64", "*", "9", ",", "1", ",", "padding", "=", "0", ")", ")", "\n", "\n", "self", ".", "net", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.update.BasicUpdateBlock.forward": [[130, 142], ["update.BasicUpdateBlock.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.BasicUpdateBlock.gru", "update.BasicUpdateBlock.flow_head", "update.BasicUpdateBlock.mask"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net", ",", "inp", ",", "corr", ",", "flow", ",", "upsample", "=", "True", ")", ":", "\n", "        ", "motion_features", "=", "self", ".", "encoder", "(", "flow", ",", "corr", ")", "\n", "inp", "=", "torch", ".", "cat", "(", "[", "inp", ",", "motion_features", "]", ",", "dim", "=", "1", ")", "\n", "\n", "net", "=", "self", ".", "gru", "(", "net", ",", "inp", ")", "\n", "self", ".", "net", "=", "net", "\n", "delta_flow", "=", "self", ".", "flow_head", "(", "net", ")", "\n", "\n", "# scale mask to balence gradients", "\n", "#if self.args.model != 'raft_nc':", "\n", "mask", "=", ".25", "*", "self", ".", "mask", "(", "net", ")", "\n", "return", "net", ",", "mask", ",", "delta_flow", "\n", "#else:", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.corr.CorrBlock.__init__": [[7, 22], ["CorrBlock.corr", "torch.avg_pool2d.reshape", "F.avg_pool2d.CorrBlock.corr_pyramid.append", "range", "torch.avg_pool2d", "torch.avg_pool2d", "F.avg_pool2d.CorrBlock.corr_pyramid.append"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.corr.CorrBlock.corr"], ["    ", "def", "__init__", "(", "self", ",", "fmap1", ",", "fmap2", ",", "num_levels", "=", "4", ",", "radius", "=", "4", ")", ":", "\n", "        ", "self", ".", "num_levels", "=", "num_levels", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "corr_pyramid", "=", "[", "]", "\n", "\n", "# all pairs correlation", "\n", "corr", "=", "CorrBlock", ".", "corr", "(", "fmap1", ",", "fmap2", ")", "\n", "\n", "batch", ",", "h1", ",", "w1", ",", "dim", ",", "h2", ",", "w2", "=", "corr", ".", "shape", "\n", "corr", "=", "corr", ".", "reshape", "(", "batch", "*", "h1", "*", "w1", ",", "dim", ",", "h2", ",", "w2", ")", "\n", "\n", "self", ".", "corr_pyramid", ".", "append", "(", "corr", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", "-", "1", ")", ":", "\n", "            ", "corr", "=", "F", ".", "avg_pool2d", "(", "corr", ",", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "corr_pyramid", ".", "append", "(", "corr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.corr.CorrBlock.__call__": [[23, 45], ["coords.permute.permute.permute", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.permute().contiguous().float", "torch.cat.permute().contiguous().float", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to.view", "torch.stack().to.view", "utils.utils.bilinear_sampler", "corr.view.view.view", "out_pyramid.append", "coords.permute.permute.reshape", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.cat.permute", "torch.cat.permute"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.bilinear_sampler"], ["", "", "def", "__call__", "(", "self", ",", "coords", ")", ":", "\n", "        ", "r", "=", "self", ".", "radius", "\n", "coords", "=", "coords", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "batch", ",", "h1", ",", "w1", ",", "_", "=", "coords", ".", "shape", "\n", "\n", "out_pyramid", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "corr", "=", "self", ".", "corr_pyramid", "[", "i", "]", "\n", "dx", "=", "torch", ".", "linspace", "(", "-", "r", ",", "r", ",", "2", "*", "r", "+", "1", ")", "\n", "dy", "=", "torch", ".", "linspace", "(", "-", "r", ",", "r", ",", "2", "*", "r", "+", "1", ")", "\n", "delta", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "dy", ",", "dx", ")", ",", "axis", "=", "-", "1", ")", ".", "to", "(", "coords", ".", "device", ")", "\n", "\n", "centroid_lvl", "=", "coords", ".", "reshape", "(", "batch", "*", "h1", "*", "w1", ",", "1", ",", "1", ",", "2", ")", "/", "2", "**", "i", "\n", "delta_lvl", "=", "delta", ".", "view", "(", "1", ",", "2", "*", "r", "+", "1", ",", "2", "*", "r", "+", "1", ",", "2", ")", "\n", "coords_lvl", "=", "centroid_lvl", "+", "delta_lvl", "\n", "\n", "corr", "=", "bilinear_sampler", "(", "corr", ",", "coords_lvl", ")", "\n", "corr", "=", "corr", ".", "view", "(", "batch", ",", "h1", ",", "w1", ",", "-", "1", ")", "\n", "out_pyramid", ".", "append", "(", "corr", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "out_pyramid", ",", "dim", "=", "-", "1", ")", "\n", "return", "out", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.corr.CorrBlock.corr": [[47, 56], ["fmap1.view.view.view", "fmap2.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corr.view.view.view", "fmap1.view.view.transpose", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "corr", "(", "fmap1", ",", "fmap2", ")", ":", "\n", "        ", "batch", ",", "dim", ",", "ht", ",", "wd", "=", "fmap1", ".", "shape", "\n", "fmap1", "=", "fmap1", ".", "view", "(", "batch", ",", "dim", ",", "ht", "*", "wd", ")", "\n", "fmap2", "=", "fmap2", ".", "view", "(", "batch", ",", "dim", ",", "ht", "*", "wd", ")", "\n", "\n", "corr", "=", "torch", ".", "matmul", "(", "fmap1", ".", "transpose", "(", "1", ",", "2", ")", ",", "fmap2", ")", "\n", "corr", "=", "corr", ".", "view", "(", "batch", ",", "ht", ",", "wd", ",", "1", ",", "ht", ",", "wd", ")", "\n", "return", "corr", "/", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "dim", ")", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft_nc_dbl.RAFT.__init__": [[27, 77], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "upsampler.get_upsampler", "args._get_kwargs", "extractor.SmallEncoder", "extractor.SmallEncoder", "update.SmallUpdateBlock", "extractor.BasicEncoder", "extractor.BasicEncoder", "update.BasicUpdateBlock", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "OrderedDict", "torch.load.items", "torch.load.items", "torch.load.items", "raft_nc_dbl.RAFT.load_state_dict", "raft_nc_dbl.RAFT.parameters"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.get_upsampler"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "RAFT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "if", "args", ".", "small", ":", "\n", "            ", "self", ".", "hidden_dim", "=", "hdim", "=", "96", "\n", "self", ".", "context_dim", "=", "cdim", "=", "64", "\n", "args", ".", "corr_levels", "=", "4", "\n", "args", ".", "corr_radius", "=", "3", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "hidden_dim", "=", "hdim", "=", "128", "\n", "self", ".", "context_dim", "=", "cdim", "=", "128", "\n", "args", ".", "corr_levels", "=", "4", "\n", "args", ".", "corr_radius", "=", "4", "\n", "\n", "", "if", "'dropout'", "not", "in", "args", ".", "_get_kwargs", "(", ")", ":", "\n", "            ", "args", ".", "dropout", "=", "0", "\n", "\n", "# feature network, context network, and update block", "\n", "", "if", "args", ".", "small", ":", "\n", "            ", "self", ".", "fnet", "=", "SmallEncoder", "(", "output_dim", "=", "128", ",", "norm_fn", "=", "'instance'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "cnet", "=", "SmallEncoder", "(", "output_dim", "=", "hdim", "+", "cdim", ",", "norm_fn", "=", "'none'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "update_block", "=", "SmallUpdateBlock", "(", "self", ".", "args", ",", "hidden_dim", "=", "hdim", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "fnet", "=", "BasicEncoder", "(", "output_dim", "=", "256", ",", "norm_fn", "=", "'instance'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "cnet", "=", "BasicEncoder", "(", "output_dim", "=", "hdim", "+", "cdim", ",", "norm_fn", "=", "'batch'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "update_block", "=", "BasicUpdateBlock", "(", "self", ".", "args", ",", "hidden_dim", "=", "hdim", ")", "\n", "\n", "# Load the pretrained model", "\n", "", "if", "args", ".", "load_pretrained", "is", "not", "None", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "load_pretrained", ")", "\n", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "                ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "# load params", "\n", "", "self", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "\n", "", "self", ".", "update_block", ".", "mask", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "args", ".", "freeze_raft", ":", "\n", "            ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "# Upsampler", "\n", "", "", "self", ".", "upsampler", "=", "get_upsampler", "(", "2", ",", "128", ",", "args", ")", "\n", "self", ".", "data_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft_nc_dbl.RAFT.freeze_bn": [[78, 82], ["raft_nc_dbl.RAFT.modules", "isinstance", "m.eval"], "methods", ["None"], ["", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft_nc_dbl.RAFT.initialize_flow": [[83, 91], ["utils.utils.coords_grid().to", "utils.utils.coords_grid().to", "utils.utils.coords_grid", "utils.utils.coords_grid"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.coords_grid", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.coords_grid"], ["", "", "", "def", "initialize_flow", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\" Flow is represented as difference between two coordinate grids flow = coords1 - coords0\"\"\"", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "img", ".", "shape", "\n", "coords0", "=", "coords_grid", "(", "N", ",", "H", "//", "8", ",", "W", "//", "8", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "coords1", "=", "coords_grid", "(", "N", ",", "H", "//", "8", ",", "W", "//", "8", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "\n", "# optical flow computed as difference: flow = coords1 - coords0", "\n", "return", "coords0", ",", "coords1", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft_nc_dbl.RAFT.upsample_flow": [[107, 113], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "raft_nc_dbl.RAFT.upsampler"], "methods", ["None"], ["def", "upsample_flow", "(", "self", ",", "flow_lr", ",", "guidance", ")", ":", "\n", "        ", "\"\"\" Upsample flow field [H/8, W/8, 2] -> [H, W, 2] using nconv upsampler \"\"\"", "\n", "#guidance_lr = F.interpolate(guidance, flow_lr.size()[2:], mode='area')", "\n", "flow_lr", "=", "F", ".", "interpolate", "(", "flow_lr", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "flow_hr", "=", "self", ".", "upsampler", "(", "flow_lr", ",", "guidance", ")", "\n", "return", "flow_hr", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft_nc_dbl.RAFT.forward": [[115, 174], ["image1.contiguous.contiguous.contiguous", "image2.contiguous.contiguous.contiguous", "fmap1.float.float.float", "fmap2.float.float.float", "corr_fn.CorrBlock", "raft_nc_dbl.RAFT.initialize_flow", "range", "autocast", "raft_nc_dbl.RAFT.fnet", "autocast", "raft_nc_dbl.RAFT.cnet", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "coords1.detach.detach.detach", "corr_fn.CorrBlock.", "flow_predictions.append", "autocast", "raft_nc_dbl.RAFT.update_block", "raft_nc_dbl.RAFT.upsample_flow"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft.RAFT.initialize_flow", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft.RAFT.upsample_flow"], ["", "def", "forward", "(", "self", ",", "image1", ",", "image2", ",", "iters", "=", "12", ",", "flow_init", "=", "None", ",", "upsample", "=", "True", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "\"\"\" Estimate optical flow between pair of frames \"\"\"", "\n", "self", ".", "data_idx", "+=", "1", "\n", "image1", "=", "2", "*", "(", "image1", "/", "255.0", ")", "-", "1.0", "\n", "image2", "=", "2", "*", "(", "image2", "/", "255.0", ")", "-", "1.0", "\n", "\n", "image1", "=", "image1", ".", "contiguous", "(", ")", "\n", "image2", "=", "image2", ".", "contiguous", "(", ")", "\n", "\n", "hdim", "=", "self", ".", "hidden_dim", "\n", "cdim", "=", "self", ".", "context_dim", "\n", "\n", "# run the feature network", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "mixed_precision", ")", ":", "\n", "            ", "fmap1", ",", "fmap2", "=", "self", ".", "fnet", "(", "[", "image1", ",", "image2", "]", ")", "\n", "\n", "", "fmap1", "=", "fmap1", ".", "float", "(", ")", "\n", "fmap2", "=", "fmap2", ".", "float", "(", ")", "\n", "corr_fn", "=", "CorrBlock", "(", "fmap1", ",", "fmap2", ",", "radius", "=", "self", ".", "args", ".", "corr_radius", ")", "\n", "\n", "# run the context network", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "mixed_precision", ")", ":", "\n", "            ", "cnet", "=", "self", ".", "cnet", "(", "image1", ")", "\n", "net", ",", "inp", "=", "torch", ".", "split", "(", "cnet", ",", "[", "hdim", ",", "cdim", "]", ",", "dim", "=", "1", ")", "\n", "net", "=", "torch", ".", "tanh", "(", "net", ")", "\n", "inp", "=", "torch", ".", "relu", "(", "inp", ")", "\n", "\n", "", "coords0", ",", "coords1", "=", "self", ".", "initialize_flow", "(", "image1", ")", "\n", "\n", "if", "flow_init", "is", "not", "None", ":", "\n", "            ", "coords1", "=", "coords1", "+", "flow_init", "\n", "\n", "", "flow_predictions", "=", "[", "]", "\n", "for", "itr", "in", "range", "(", "iters", ")", ":", "\n", "            ", "coords1", "=", "coords1", ".", "detach", "(", ")", "\n", "corr", "=", "corr_fn", "(", "coords1", ")", "# index correlation volume", "\n", "\n", "flow", "=", "coords1", "-", "coords0", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "mixed_precision", ")", ":", "\n", "                ", "net", ",", "up_mask", ",", "delta_flow", "=", "self", ".", "update_block", "(", "net", ",", "inp", ",", "corr", ",", "flow", ")", "\n", "\n", "# F(t+1) = F(t) + \\Delta(t)", "\n", "", "coords1", "=", "coords1", "+", "delta_flow", "\n", "\n", "# upsample predictions", "\n", "#if itr == iters-1:", "\n", "flow_up", "=", "8", "*", "self", ".", "upsample_flow", "(", "coords1", "-", "coords0", ",", "self", ".", "update_block", ".", "net", ")", "\n", "#else:", "\n", "#    flow_up = upflow8(coords1 - coords0, align_corners=self.args.align_corners)", "\n", "\n", "flow_predictions", ".", "append", "(", "flow_up", ")", "\n", "\n", "#if self.itr == 200:", "\n", "#    print('Stop')", "\n", "\n", "", "if", "test_mode", ":", "\n", "            ", "return", "coords1", "-", "coords0", ",", "flow_up", "\n", "\n", "", "return", "flow_predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.ResidualBlock.__init__": [[7, 46], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "norm_fn", "=", "'group'", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "stride", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "num_groups", "=", "planes", "//", "8", "\n", "\n", "if", "norm_fn", "==", "'group'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm3", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'none'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm3", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "", "if", "stride", "==", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "self", ".", "norm3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.ResidualBlock.forward": [[48, 57], ["extractor.ResidualBlock.relu", "extractor.ResidualBlock.relu", "extractor.ResidualBlock.relu", "extractor.ResidualBlock.norm1", "extractor.ResidualBlock.norm2", "extractor.ResidualBlock.downsample", "extractor.ResidualBlock.conv1", "extractor.ResidualBlock.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm1", "(", "self", ".", "conv1", "(", "y", ")", ")", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "relu", "(", "x", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.BottleneckBlock.__init__": [[61, 105], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "norm_fn", "=", "'group'", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", "//", "4", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "4", ",", "planes", "//", "4", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "stride", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "//", "4", ",", "planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "num_groups", "=", "planes", "//", "8", "\n", "\n", "if", "norm_fn", "==", "'group'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", "//", "4", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", "//", "4", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm4", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "planes", "//", "4", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "planes", "//", "4", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm4", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "//", "4", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "//", "4", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'none'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm4", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "", "if", "stride", "==", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "self", ".", "norm4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.BottleneckBlock.forward": [[107, 117], ["extractor.BottleneckBlock.relu", "extractor.BottleneckBlock.relu", "extractor.BottleneckBlock.relu", "extractor.BottleneckBlock.relu", "extractor.BottleneckBlock.norm1", "extractor.BottleneckBlock.norm2", "extractor.BottleneckBlock.norm3", "extractor.BottleneckBlock.downsample", "extractor.BottleneckBlock.conv1", "extractor.BottleneckBlock.conv2", "extractor.BottleneckBlock.conv3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm1", "(", "self", ".", "conv1", "(", "y", ")", ")", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm3", "(", "self", ".", "conv3", "(", "y", ")", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "relu", "(", "x", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.BasicEncoder.__init__": [[119, 158], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "extractor.BasicEncoder._make_layer", "extractor.BasicEncoder._make_layer", "extractor.BasicEncoder._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "extractor.BasicEncoder.modules", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "isinstance", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.SmallEncoder._make_layer", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.SmallEncoder._make_layer", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.SmallEncoder._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "output_dim", "=", "128", ",", "norm_fn", "=", "'batch'", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_fn", "=", "norm_fn", "\n", "\n", "if", "self", ".", "norm_fn", "==", "'group'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "8", ",", "num_channels", "=", "64", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "64", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'none'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "64", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "96", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "128", ",", "stride", "=", "2", ")", "\n", "\n", "# output convolution", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "128", ",", "output_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "dropout", "=", "None", "\n", "if", "dropout", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "dropout", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "InstanceNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.BasicEncoder._make_layer": [[159, 166], ["extractor.ResidualBlock", "extractor.ResidualBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "dim", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layer1", "=", "ResidualBlock", "(", "self", ".", "in_planes", ",", "dim", ",", "self", ".", "norm_fn", ",", "stride", "=", "stride", ")", "\n", "layer2", "=", "ResidualBlock", "(", "dim", ",", "dim", ",", "self", ".", "norm_fn", ",", "stride", "=", "1", ")", "\n", "layers", "=", "(", "layer1", ",", "layer2", ")", "\n", "\n", "self", ".", "in_planes", "=", "dim", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.BasicEncoder.forward": [[168, 193], ["extractor.BasicEncoder.conv1", "extractor.BasicEncoder.norm1", "extractor.BasicEncoder.relu1", "extractor.BasicEncoder.layer1", "extractor.BasicEncoder.layer2", "extractor.BasicEncoder.layer3", "extractor.BasicEncoder.conv2", "isinstance", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "extractor.BasicEncoder.dropout", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# if input is list, combine batch dimension", "\n", "        ", "is_list", "=", "isinstance", "(", "x", ",", "tuple", ")", "or", "isinstance", "(", "x", ",", "list", ")", "\n", "if", "is_list", ":", "\n", "            ", "batch_dim", "=", "x", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "if", "is_list", ":", "\n", "            ", "x", "=", "torch", ".", "split", "(", "x", ",", "[", "batch_dim", ",", "batch_dim", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.SmallEncoder.__init__": [[196, 234], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "extractor.SmallEncoder._make_layer", "extractor.SmallEncoder._make_layer", "extractor.SmallEncoder._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "extractor.SmallEncoder.modules", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "isinstance", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.SmallEncoder._make_layer", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.SmallEncoder._make_layer", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.SmallEncoder._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "output_dim", "=", "128", ",", "norm_fn", "=", "'batch'", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "SmallEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_fn", "=", "norm_fn", "\n", "\n", "if", "self", ".", "norm_fn", "==", "'group'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "8", ",", "num_channels", "=", "32", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "32", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'none'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "in_planes", "=", "32", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "32", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "96", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dropout", "=", "None", "\n", "if", "dropout", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "dropout", ")", "\n", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "96", ",", "output_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "InstanceNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.SmallEncoder._make_layer": [[235, 242], ["extractor.BottleneckBlock", "extractor.BottleneckBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "dim", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layer1", "=", "BottleneckBlock", "(", "self", ".", "in_planes", ",", "dim", ",", "self", ".", "norm_fn", ",", "stride", "=", "stride", ")", "\n", "layer2", "=", "BottleneckBlock", "(", "dim", ",", "dim", ",", "self", ".", "norm_fn", ",", "stride", "=", "1", ")", "\n", "layers", "=", "(", "layer1", ",", "layer2", ")", "\n", "\n", "self", ".", "in_planes", "=", "dim", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.extractor.SmallEncoder.forward": [[244, 268], ["extractor.SmallEncoder.conv1", "extractor.SmallEncoder.norm1", "extractor.SmallEncoder.relu1", "extractor.SmallEncoder.layer1", "extractor.SmallEncoder.layer2", "extractor.SmallEncoder.layer3", "extractor.SmallEncoder.conv2", "isinstance", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "extractor.SmallEncoder.dropout", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# if input is list, combine batch dimension", "\n", "        ", "is_list", "=", "isinstance", "(", "x", ",", "tuple", ")", "or", "isinstance", "(", "x", ",", "list", ")", "\n", "if", "is_list", ":", "\n", "            ", "batch_dim", "=", "x", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "if", "is_list", ":", "\n", "            ", "x", "=", "torch", ".", "split", "(", "x", ",", "[", "batch_dim", ",", "batch_dim", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.Simple.__init__": [[11, 43], ["torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len", "len", "len", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "int", "interp_weights_est.Simple.conv.append", "interp_weights_est.Simple.conv.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch", ",", "out_ch", ",", "filter_sz", ",", "dilation", "=", "None", ",", "final_act", "=", "nn", ".", "Sigmoid", "(", ")", ",", "use_bn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "__name__", "=", "\"Simple\"", "\n", "\n", "assert", "len", "(", "filter_sz", ")", "==", "len", "(", "num_ch", ")", "\n", "\n", "if", "dilation", "is", "None", ":", "\n", "            ", "dilation", "=", "[", "(", "1", ",", "1", ")", "]", "*", "len", "(", "num_ch", ")", "\n", "\n", "", "self", ".", "in_ch", "=", "num_ch", "[", "0", "]", "# Number of Input channels is added at the beginning of num_ch", "\n", "self", ".", "num_layers", "=", "len", "(", "num_ch", ")", "-", "1", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "padding", "=", "_pair", "(", "int", "(", "filter_sz", "[", "i", "]", "//", "2", "+", "(", "(", "filter_sz", "[", "i", "]", "-", "1", ")", "*", "(", "dilation", "[", "i", "]", "-", "1", ")", ")", "/", "2", ")", ")", "\n", "if", "use_bn", ":", "\n", "                ", "self", ".", "conv", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_ch", "[", "i", "]", ",", "num_ch", "[", "i", "+", "1", "]", ",", "filter_sz", "[", "i", "]", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", "[", "i", "]", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_ch", "[", "i", "+", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "conv", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_ch", "[", "i", "]", ",", "num_ch", "[", "i", "+", "1", "]", ",", "filter_sz", "[", "i", "]", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", "[", "i", "]", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "\n", "", "", "padding", "=", "_pair", "(", "int", "(", "filter_sz", "[", "-", "1", "]", "//", "2", "+", "(", "(", "filter_sz", "[", "-", "1", "]", "-", "1", ")", "*", "(", "dilation", "[", "-", "1", "]", "-", "1", ")", ")", "/", "2", ")", ")", "\n", "self", ".", "out", "=", "nn", ".", "Conv2d", "(", "num_ch", "[", "-", "1", "]", ",", "out_ch", ",", "filter_sz", "[", "-", "1", "]", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", "[", "-", "1", "]", ",", "stride", "=", "1", ")", "\n", "\n", "if", "final_act", "is", "None", ":", "\n", "            ", "self", ".", "final_act", "=", "nn", ".", "Sequential", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_act", "=", "final_act", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.Simple.forward": [[44, 48], ["range", "interp_weights_est.Simple.final_act", "interp_weights_est.Simple.out"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv", "[", "i", "]", "(", "x", ")", "\n", "", "return", "self", ".", "final_act", "(", "self", ".", "out", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.UNet.__init__": [[51, 68], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "interp_weights_est.outconv", "len", "interp_weights_est.UNet.encoder.append", "interp_weights_est.inconv", "interp_weights_est.down", "interp_weights_est.up", "range"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch", ",", "out_ch", ",", "final_act", "=", "torch", ".", "sigmoid", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "__name__", "=", "\"UNet\"", "\n", "\n", "self", ".", "in_ch", "=", "num_ch", "[", "0", "]", "\n", "self", ".", "final_act", "=", "final_act", "\n", "\n", "self", ".", "num_downsampling", "=", "len", "(", "num_ch", ")", "-", "2", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "ModuleList", "(", "[", "inconv", "(", "num_ch", "[", "0", "]", ",", "num_ch", "[", "1", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_downsampling", "+", "1", ")", ":", "\n", "            ", "self", ".", "encoder", ".", "append", "(", "down", "(", "in_ch", "=", "num_ch", "[", "i", "]", ",", "out_ch", "=", "num_ch", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "decoder", "=", "nn", ".", "ModuleList", "(", "[", "up", "(", "in_ch1", "=", "num_ch", "[", "-", "i", "-", "1", "]", ",", "in_ch2", "=", "num_ch", "[", "-", "i", "-", "2", "]", ",", "out_ch", "=", "num_ch", "[", "-", "i", "-", "2", "]", ",", "bilinear", "=", "False", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_downsampling", ")", "]", ")", "\n", "\n", "self", ".", "out", "=", "outconv", "(", "num_ch", "[", "1", "]", ",", "out_ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.UNet.forward": [[69, 83], ["range", "range", "interp_weights_est.UNet.final_act", "x_encoder.append", "x_decoder.append", "interp_weights_est.UNet.out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ")", ":", "\n", "        ", "x_encoder", "=", "[", "x0", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_downsampling", "+", "1", ")", ":", "\n", "            ", "x_encoder", ".", "append", "(", "self", ".", "encoder", "[", "i", "]", "(", "x_encoder", "[", "i", "]", ")", ")", "\n", "\n", "", "x_decoder", "=", "[", "x_encoder", "[", "-", "1", "]", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_downsampling", ")", ":", "\n", "            ", "x_decoder", ".", "append", "(", "self", ".", "decoder", "[", "i", "]", "(", "x_decoder", "[", "-", "1", "]", ",", "x_encoder", "[", "-", "i", "-", "2", "]", ")", ")", "\n", "\n", "", "xf", "=", "self", ".", "final_act", "(", "self", ".", "out", "(", "x_decoder", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "xf", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.double_conv.__init__": [[87, 96], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "double_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.double_conv.forward": [[98, 101], ["interp_weights_est.double_conv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.inconv.__init__": [[104, 107], ["torch.Module.__init__", "interp_weights_est.double_conv"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "inconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "double_conv", "(", "in_ch", ",", "out_ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.inconv.forward": [[108, 111], ["interp_weights_est.inconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.down.__init__": [[114, 119], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "interp_weights_est.double_conv"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "down", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mpconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "double_conv", "(", "in_ch", ",", "out_ch", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.down.forward": [[121, 124], ["interp_weights_est.down.mpconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "mpconv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.up.__init__": [[127, 138], ["torch.Module.__init__", "interp_weights_est.double_conv", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch1", ",", "in_ch2", ",", "out_ch", ",", "bilinear", "=", "False", ")", ":", "\n", "        ", "super", "(", "up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#  would be a nice idea if the upsampling could be learned too,", "\n", "#  but my machine do not have enough memory to handle all those weights", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_ch1", ",", "in_ch1", ",", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "self", ".", "conv", "=", "double_conv", "(", "in_ch1", "+", "in_ch2", ",", "out_ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.up.forward": [[139, 156], ["interp_weights_est.up.up", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "interp_weights_est.up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "\n", "# input is CHW", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "(", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", ")", ")", "\n", "\n", "# for padding issues, see ", "\n", "# https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a", "\n", "# https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.outconv.__init__": [[159, 162], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "outconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.interp_weights_est.outconv.forward": [[163, 166], ["interp_weights_est.outconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft.RAFT.__init__": [[25, 54], ["torch.Module.__init__", "args._get_kwargs", "extractor.SmallEncoder", "extractor.SmallEncoder", "update.SmallUpdateBlock", "extractor.BasicEncoder", "extractor.BasicEncoder", "update.BasicUpdateBlock"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "RAFT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "if", "args", ".", "small", ":", "\n", "            ", "self", ".", "hidden_dim", "=", "hdim", "=", "96", "\n", "self", ".", "context_dim", "=", "cdim", "=", "64", "\n", "args", ".", "corr_levels", "=", "4", "\n", "args", ".", "corr_radius", "=", "3", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "hidden_dim", "=", "hdim", "=", "128", "\n", "self", ".", "context_dim", "=", "cdim", "=", "128", "\n", "args", ".", "corr_levels", "=", "4", "\n", "args", ".", "corr_radius", "=", "4", "\n", "\n", "", "if", "'dropout'", "not", "in", "args", ".", "_get_kwargs", "(", ")", ":", "\n", "            ", "args", ".", "dropout", "=", "0", "\n", "\n", "# feature network, context network, and update block", "\n", "", "if", "args", ".", "small", ":", "\n", "            ", "self", ".", "fnet", "=", "SmallEncoder", "(", "output_dim", "=", "128", ",", "norm_fn", "=", "'instance'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "cnet", "=", "SmallEncoder", "(", "output_dim", "=", "hdim", "+", "cdim", ",", "norm_fn", "=", "'none'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "update_block", "=", "SmallUpdateBlock", "(", "self", ".", "args", ",", "hidden_dim", "=", "hdim", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "fnet", "=", "BasicEncoder", "(", "output_dim", "=", "256", ",", "norm_fn", "=", "'instance'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "cnet", "=", "BasicEncoder", "(", "output_dim", "=", "hdim", "+", "cdim", ",", "norm_fn", "=", "'batch'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "update_block", "=", "BasicUpdateBlock", "(", "self", ".", "args", ",", "hidden_dim", "=", "hdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft.RAFT.freeze_bn": [[59, 63], ["raft.RAFT.modules", "isinstance", "m.eval"], "methods", ["None"], ["", "", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft.RAFT.initialize_flow": [[64, 72], ["utils.utils.coords_grid().to", "utils.utils.coords_grid().to", "utils.utils.coords_grid", "utils.utils.coords_grid"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.coords_grid", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.coords_grid"], ["", "", "", "def", "initialize_flow", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\" Flow is represented as difference between two coordinate grids flow = coords1 - coords0\"\"\"", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "img", ".", "shape", "\n", "coords0", "=", "coords_grid", "(", "N", ",", "H", "//", "8", ",", "W", "//", "8", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "coords1", "=", "coords_grid", "(", "N", ",", "H", "//", "8", ",", "W", "//", "8", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "\n", "# optical flow computed as difference: flow = coords1 - coords0", "\n", "return", "coords0", ",", "coords1", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft.RAFT.upsample_flow": [[73, 85], ["torch.softmax.view", "torch.softmax.view", "torch.softmax.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.unfold", "torch.unfold", "torch.unfold", "up_flow.permute.permute.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "up_flow.permute.permute.permute", "up_flow.permute.permute.reshape"], "methods", ["None"], ["", "def", "upsample_flow", "(", "self", ",", "flow", ",", "mask", ")", ":", "\n", "        ", "\"\"\" Upsample flow field [H/8, W/8, 2] -> [H, W, 2] using convex combination \"\"\"", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "flow", ".", "shape", "\n", "mask", "=", "mask", ".", "view", "(", "N", ",", "1", ",", "9", ",", "8", ",", "8", ",", "H", ",", "W", ")", "# N, 1, 3*3, sf, sf, H/sf, W/sf", "\n", "mask", "=", "torch", ".", "softmax", "(", "mask", ",", "dim", "=", "2", ")", "\n", "\n", "up_flow", "=", "F", ".", "unfold", "(", "8", "*", "flow", ",", "[", "3", ",", "3", "]", ",", "padding", "=", "1", ")", "# N, C*3*3, 2852", "\n", "up_flow", "=", "up_flow", ".", "view", "(", "N", ",", "2", ",", "9", ",", "1", ",", "1", ",", "H", ",", "W", ")", "# N, C, 3*3, 1, 1, H/sf, W/sf", "\n", "\n", "up_flow", "=", "torch", ".", "sum", "(", "mask", "*", "up_flow", ",", "dim", "=", "2", ")", "# N, C, sf, sf, H/sf, W/sf", "\n", "up_flow", "=", "up_flow", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "5", ",", "3", ")", "# N, C, H/sf, sf, W/sf, sf", "\n", "return", "up_flow", ".", "reshape", "(", "N", ",", "2", ",", "8", "*", "H", ",", "8", "*", "W", ")", "# N, C, sf*H, sf*W", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft.RAFT.forward": [[87, 144], ["image1.contiguous.contiguous.contiguous", "image2.contiguous.contiguous.contiguous", "fmap1.float.float.float", "fmap2.float.float.float", "corr_fn.CorrBlock", "raft.RAFT.initialize_flow", "range", "autocast", "raft.RAFT.fnet", "autocast", "raft.RAFT.cnet", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "coords1.detach.detach.detach", "corr_fn.CorrBlock.", "flow_predictions.append", "autocast", "raft.RAFT.update_block", "utils.utils.upflow8", "raft.RAFT.upsample_flow"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft.RAFT.initialize_flow", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.upflow8", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.raft.RAFT.upsample_flow"], ["", "def", "forward", "(", "self", ",", "image1", ",", "image2", ",", "iters", "=", "12", ",", "flow_init", "=", "None", ",", "upsample", "=", "True", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "\"\"\" Estimate optical flow between pair of frames \"\"\"", "\n", "\n", "image1", "=", "2", "*", "(", "image1", "/", "255.0", ")", "-", "1.0", "\n", "image2", "=", "2", "*", "(", "image2", "/", "255.0", ")", "-", "1.0", "\n", "\n", "image1", "=", "image1", ".", "contiguous", "(", ")", "\n", "image2", "=", "image2", ".", "contiguous", "(", ")", "\n", "\n", "hdim", "=", "self", ".", "hidden_dim", "\n", "cdim", "=", "self", ".", "context_dim", "\n", "\n", "# run the feature network", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "mixed_precision", ")", ":", "\n", "            ", "fmap1", ",", "fmap2", "=", "self", ".", "fnet", "(", "[", "image1", ",", "image2", "]", ")", "\n", "\n", "", "fmap1", "=", "fmap1", ".", "float", "(", ")", "\n", "fmap2", "=", "fmap2", ".", "float", "(", ")", "\n", "corr_fn", "=", "CorrBlock", "(", "fmap1", ",", "fmap2", ",", "radius", "=", "self", ".", "args", ".", "corr_radius", ")", "\n", "\n", "# run the context network", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "mixed_precision", ")", ":", "\n", "            ", "cnet", "=", "self", ".", "cnet", "(", "image1", ")", "\n", "net", ",", "inp", "=", "torch", ".", "split", "(", "cnet", ",", "[", "hdim", ",", "cdim", "]", ",", "dim", "=", "1", ")", "\n", "net", "=", "torch", ".", "tanh", "(", "net", ")", "\n", "inp", "=", "torch", ".", "relu", "(", "inp", ")", "\n", "\n", "", "coords0", ",", "coords1", "=", "self", ".", "initialize_flow", "(", "image1", ")", "\n", "\n", "if", "flow_init", "is", "not", "None", ":", "\n", "            ", "coords1", "=", "coords1", "+", "flow_init", "\n", "\n", "", "flow_predictions", "=", "[", "]", "\n", "\n", "for", "itr", "in", "range", "(", "iters", ")", ":", "\n", "            ", "coords1", "=", "coords1", ".", "detach", "(", ")", "\n", "corr", "=", "corr_fn", "(", "coords1", ")", "# index correlation volume", "\n", "\n", "flow", "=", "coords1", "-", "coords0", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "mixed_precision", ")", ":", "\n", "                ", "net", ",", "up_mask", ",", "delta_flow", "=", "self", ".", "update_block", "(", "net", ",", "inp", ",", "corr", ",", "flow", ")", "\n", "\n", "# F(t+1) = F(t) + \\Delta(t)", "\n", "", "coords1", "=", "coords1", "+", "delta_flow", "\n", "\n", "# upsample predictions", "\n", "if", "up_mask", "is", "None", ":", "#or self.args.upsampler_bi:", "\n", "                ", "flow_up", "=", "upflow8", "(", "coords1", "-", "coords0", ",", "align_corners", "=", "self", ".", "args", ".", "align_corners", ")", "\n", "", "else", ":", "\n", "                ", "flow_up", "=", "self", ".", "upsample_flow", "(", "coords1", "-", "coords0", ",", "up_mask", ")", "\n", "\n", "", "flow_predictions", ".", "append", "(", "flow_up", ")", "\n", "\n", "", "if", "test_mode", ":", "\n", "            ", "return", "coords1", "-", "coords0", ",", "flow_up", "\n", "\n", "", "return", "flow_predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.NConvUNet.__init__": [[26, 93], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "nconv_modules.NConv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "nconv_modules.NConv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "nconv_modules.NConv2d", "nconv_modules.NConv2d", "nconv_modules.NConv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "nconv_modules.NConvUNet.encoder.append", "nconv_modules.NConvUNet.encoder.append", "nconv_modules.NConv2d", "nconv_modules.NConv2d", "range"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", "=", "1", ",", "channels_multiplier", "=", "2", ",", "num_downsampling", "=", "3", ",", "encoder_filter_sz", "=", "5", ",", "\n", "decoder_filter_sz", "=", "3", ",", "out_filter_sz", "=", "1", ",", "pos_fn", "=", "'SoftPlus'", ",", "groups", "=", "1", ",", "use_bias", "=", "False", ",", "\n", "data_pooling", "=", "'conf_based'", ",", "shared_encoder", "=", "True", ",", "use_double_conv", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_ch: Number of Input channels. Currently on 1 is supported\n            channels_multiplier: Number of channels for intermediate is `in_ch` multiplied by this multiplier\n            num_downsampling: Number of downsampling stages. The sparser the data, the larger this number should be.\n                              In the original paper, they use 3\n            encoder_filter_sz: Filter size for NConv layers in the encoder.\n            decoder_filter_sz: Filter size for NConv layers in the decoder.\n            out_filter_sz: Filter size for NConv layers in output layer.\n            pos_fn: Non-negativity enforcement function. Options=[softplus, sigmoid, exp, softmax]\n            groups: Convolution group. See `torch.nn.Conv2D` documentation\n            use_bias: Convolution bias.\n            data_pooling: How to perfrom pooling on the data stream. For the original paper approach, use `conf_based`\n            shared_encoder: Use same layers at different scaled. For the original paper implementation. set to `True`\n            use_double_conv: Either to use double convolution at each layer or just a single conv.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "__name__", "=", "'NConvUNet'", "\n", "\n", "encoder_filter_sz", "=", "_pair", "(", "encoder_filter_sz", ")", "\n", "decoder_filter_sz", "=", "_pair", "(", "decoder_filter_sz", ")", "\n", "out_filter_sz", "=", "_pair", "(", "out_filter_sz", ")", "\n", "\n", "self", ".", "num_downsampling", "=", "num_downsampling", "\n", "self", ".", "data_pooling", "=", "data_pooling", "\n", "self", ".", "shared_encoder", "=", "shared_encoder", "\n", "self", ".", "use_double_conf", "=", "use_double_conv", "\n", "\n", "# Map from in_channels to in_channels*channels_multiplier", "\n", "self", ".", "nconv_in", "=", "NConv2d", "(", "in_channels", "=", "in_ch", ",", "out_channels", "=", "in_ch", "*", "channels_multiplier", ",", "kernel_size", "=", "encoder_filter_sz", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "pos_fn", "=", "pos_fn", ",", "groups", "=", "groups", ",", "bias", "=", "use_bias", ")", "\n", "\n", "# Two sequential nconv for intermediate layers with  in_channels*channels_multiplier channels", "\n", "if", "self", ".", "use_double_conf", ":", "\n", "            ", "self", ".", "nconv_x2", "=", "nn", ".", "Sequential", "(", "\n", "NConv2d", "(", "in_channels", "=", "in_ch", "*", "channels_multiplier", ",", "out_channels", "=", "in_ch", "*", "channels_multiplier", ",", "\n", "kernel_size", "=", "encoder_filter_sz", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pos_fn", "=", "pos_fn", ",", "groups", "=", "groups", ",", "bias", "=", "use_bias", ")", ",", "\n", "NConv2d", "(", "in_channels", "=", "in_ch", "*", "channels_multiplier", ",", "out_channels", "=", "in_ch", "*", "channels_multiplier", ",", "\n", "kernel_size", "=", "encoder_filter_sz", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pos_fn", "=", "pos_fn", ",", "groups", "=", "groups", ",", "bias", "=", "use_bias", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "nconv_x2", "=", "nn", ".", "Sequential", "(", "\n", "NConv2d", "(", "in_channels", "=", "in_ch", "*", "channels_multiplier", ",", "out_channels", "=", "in_ch", "*", "channels_multiplier", ",", "\n", "kernel_size", "=", "encoder_filter_sz", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "pos_fn", "=", "pos_fn", ",", "groups", "=", "groups", ",", "bias", "=", "use_bias", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "encoder", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Sequential", "(", "self", ".", "nconv_in", ",", "self", ".", "nconv_x2", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_downsampling", ")", ":", "\n", "            ", "if", "self", ".", "shared_encoder", ":", "\n", "                ", "self", ".", "encoder", ".", "append", "(", "self", ".", "nconv_x2", "[", "0", "]", ")", "# Use only the first NConv as the sparsity decreased after downsampling", "\n", "", "else", ":", "# Define a new layer", "\n", "                ", "self", ".", "encoder", ".", "append", "(", "NConv2d", "(", "in_channels", "=", "in_ch", "*", "channels_multiplier", ",", "out_channels", "=", "in_ch", "*", "channels_multiplier", ",", "\n", "kernel_size", "=", "encoder_filter_sz", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pos_fn", "=", "pos_fn", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "use_bias", ")", ")", "\n", "\n", "", "", "self", ".", "decoder", "=", "nn", ".", "ModuleList", "(", "[", "NConv2d", "(", "in_channels", "=", "2", "*", "in_ch", "*", "channels_multiplier", ",", "out_channels", "=", "in_ch", "*", "channels_multiplier", ",", "\n", "kernel_size", "=", "decoder_filter_sz", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pos_fn", "=", "pos_fn", ",", "groups", "=", "groups", ",", "\n", "bias", "=", "use_bias", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_downsampling", ")", "]", ")", "\n", "\n", "# Map from in_channels*channels_multiplier to in_ch", "\n", "self", ".", "nconv_out", "=", "NConv2d", "(", "in_channels", "=", "in_ch", "*", "channels_multiplier", ",", "out_channels", "=", "in_ch", ",", "kernel_size", "=", "out_filter_sz", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "pos_fn", "=", "pos_fn", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.NConvUNet.downsample_data_conf": [[94, 105], ["torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "nconv_modules.retrieve_elements_from_indices", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.retrieve_elements_from_indices"], ["", "@", "staticmethod", "\n", "def", "downsample_data_conf", "(", "data", ",", "conf", ",", "ds_factor", ",", "pooling_type", ")", ":", "\n", "        ", "conf_ds", ",", "idx", "=", "F", ".", "max_pool2d", "(", "conf", ",", "ds_factor", ",", "ds_factor", ",", "return_indices", "=", "True", ")", "\n", "conf_ds", "/=", "4", "# Scale the confidence the determinant of the jackobian of the transformation", "\n", "if", "pooling_type", "==", "'conf_based'", ":", "\n", "            ", "data_ds", "=", "retrieve_elements_from_indices", "(", "data", ",", "idx", ")", "\n", "", "elif", "pooling_type", "==", "'max_pooling'", ":", "\n", "            ", "data_ds", "=", "F", ".", "max_pool2d", "(", "data", ",", "ds_factor", ",", "ds_factor", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Choose `self.data_pooling` from [conf_based, max_pooling]!'", ")", "\n", "", "return", "data_ds", ",", "conf_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.NConvUNet.forward": [[106, 137], ["nconv_modules.NConvUNet.nconv_out", "range", "range", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "nconv_modules.NConvUNet.downsample_data_conf", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.NConvUNet.downsample_data_conf"], ["", "def", "forward", "(", "self", ",", "inpt", ")", ":", "\n", "# Initialize a list for intermediate features", "\n", "        ", "x", "=", "[", "None", "]", "*", "(", "self", ".", "num_downsampling", "*", "2", "+", "1", ")", "\n", "c", "=", "[", "None", "]", "*", "(", "self", ".", "num_downsampling", "*", "2", "+", "1", ")", "\n", "\n", "# Add the input to the list", "\n", "x", "[", "0", "]", "=", "inpt", "[", "0", "]", "\n", "c", "[", "0", "]", "=", "inpt", "[", "1", "]", "\n", "\n", "# The encoder", "\n", "nds", "=", "self", ".", "num_downsampling", "\n", "if", "nds", "==", "0", ":", "\n", "            ", "x", "[", "0", "]", ",", "c", "[", "0", "]", "=", "self", ".", "encoder", "[", "0", "]", "(", "(", "x", "[", "0", "]", ",", "c", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "nds", "+", "1", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "# No downsampling for first scale", "\n", "                    ", "x", "[", "i", "+", "1", "]", ",", "c", "[", "i", "+", "1", "]", "=", "self", ".", "encoder", "[", "i", "]", "(", "(", "x", "[", "i", "]", ",", "c", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "data_ds", ",", "conf_ds", "=", "self", ".", "downsample_data_conf", "(", "data", "=", "x", "[", "i", "]", ",", "conf", "=", "c", "[", "i", "]", ",", "ds_factor", "=", "2", ",", "pooling_type", "=", "self", ".", "data_pooling", ")", "\n", "x", "[", "i", "+", "1", "]", ",", "c", "[", "i", "+", "1", "]", "=", "self", ".", "encoder", "[", "i", "]", "(", "(", "data_ds", ",", "conf_ds", ")", ")", "\n", "\n", "# The decoder", "\n", "", "", "for", "i", "in", "range", "(", "nds", ")", ":", "\n", "                ", "x_up", "=", "F", ".", "interpolate", "(", "x", "[", "i", "+", "nds", "]", ",", "size", "=", "c", "[", "nds", "-", "i", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "c_up", "=", "F", ".", "interpolate", "(", "c", "[", "i", "+", "nds", "]", ",", "size", "=", "c", "[", "nds", "-", "i", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'nearest'", ")", "\n", "x", "[", "i", "+", "nds", "+", "1", "]", ",", "c", "[", "i", "+", "nds", "+", "1", "]", "=", "self", ".", "decoder", "[", "i", "]", "(", "(", "torch", ".", "cat", "(", "(", "x_up", ",", "x", "[", "nds", "-", "i", "]", ")", ",", "1", ")", ",", "torch", ".", "cat", "(", "(", "c_up", ",", "c", "[", "nds", "-", "i", "]", ")", ",", "1", ")", ")", ")", "\n", "\n", "# Map back to in_channels", "\n", "", "", "xout", ",", "cout", "=", "self", ".", "nconv_out", "(", "(", "x", "[", "-", "1", "]", ",", "c", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "xout", ",", "cout", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.NConv2d.__init__": [[141, 163], ["torch.nn.modules.conv._ConvNd.__init__", "nconv_modules.NConv2d.init_parameters", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "nconv_modules.NConv2d.register_parameter", "nconv_modules.EnforcePos.apply", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.NConv2d.init_parameters", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.apply"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "None", ",", "dilation", "=", "(", "1", ",", "1", ")", ",", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "pos_fn", "=", "'softplus'", ",", "prop_conf", "=", "True", ",", "init_method", "=", "'n'", ")", ":", "\n", "        ", "if", "padding", "is", "None", ":", "\n", "            ", "padding", "=", "_pair", "(", "kernel_size", "[", "0", "]", "//", "2", ")", "\n", "", "super", "(", "NConv2d", ",", "self", ")", ".", "__init__", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "transposed", "=", "False", ",", "\n", "output_padding", "=", "_pair", "(", "0", ")", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ",", "padding_mode", "=", "'zeros'", ",", ")", "\n", "self", ".", "eps", "=", "1e-20", "\n", "self", ".", "pos_fn", "=", "pos_fn", "\n", "self", ".", "init_method", "=", "init_method", "\n", "self", ".", "prop_conf", "=", "prop_conf", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "# Initialize weights and bias", "\n", "", "self", ".", "init_parameters", "(", ")", "\n", "\n", "if", "self", ".", "pos_fn", "is", "not", "None", ":", "\n", "            ", "EnforcePos", ".", "apply", "(", "self", ",", "'weight'", ",", "pos_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.NConv2d.forward": [[164, 200], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "nconv_modules.NConv2d.bias.view", "b.expand_as.expand_as.expand_as", "cout.view.view.size", "cout.view.view.view", "k.view.view.size", "k.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "cout.view.view.view", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inpt", ")", ":", "\n", "        ", "data", "=", "inpt", "[", "0", "]", "\n", "conf", "=", "inpt", "[", "1", "]", "\n", "\n", "# Normalized Convolution", "\n", "denom", "=", "F", ".", "conv2d", "(", "conf", ",", "self", ".", "weight", ",", "None", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "nomin", "=", "F", ".", "conv2d", "(", "data", "*", "conf", ",", "self", ".", "weight", ",", "None", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "nconv", "=", "nomin", "/", "(", "denom", "+", "self", ".", "eps", ")", "\n", "\n", "# Add bias", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "b", "=", "self", ".", "bias", ".", "view", "(", "1", ",", "len", "(", "self", ".", "bias", ")", ",", "1", ",", "1", ")", "\n", "b", "=", "b", ".", "expand_as", "(", "nconv", ")", "\n", "nconv", "+=", "b", "\n", "", "if", "self", ".", "prop_conf", ":", "\n", "# Propagate confidence", "\n", "            ", "cout", "=", "denom", "\n", "sz", "=", "cout", ".", "size", "(", ")", "\n", "cout", "=", "cout", ".", "view", "(", "sz", "[", "0", "]", ",", "sz", "[", "1", "]", ",", "-", "1", ")", "\n", "\n", "k", "=", "self", ".", "weight", "\n", "k_sz", "=", "k", ".", "size", "(", ")", "\n", "k", "=", "k", ".", "view", "(", "k_sz", "[", "0", "]", ",", "-", "1", ")", "\n", "s", "=", "torch", ".", "sum", "(", "k", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "#k = k.view(k_sz[0], k_sz[1], -1)", "\n", "#s = torch.sum(k, dim=-1, keepdim=True).squeeze(-1)", "\n", "\n", "cout", "=", "cout", "/", "s", "\n", "cout", "=", "cout", ".", "view", "(", "sz", ")", "\n", "\n", "", "else", ":", "\n", "            ", "cout", "=", "None", "\n", "\n", "", "return", "nconv", ",", "cout", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.NConv2d.init_parameters": [[201, 216], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "math.sqrt", "nconv_modules.NConv2d.weight.data.normal_", "math.sqrt"], "methods", ["None"], ["", "def", "init_parameters", "(", "self", ")", ":", "\n", "# Init weights", "\n", "        ", "if", "self", ".", "init_method", "==", "'x'", ":", "# Xavier", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "", "elif", "self", ".", "init_method", "==", "'k'", ":", "# Kaiming", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ")", "\n", "", "elif", "self", ".", "init_method", "==", "'n'", ":", "# Normal dist", "\n", "            ", "n", "=", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "*", "self", ".", "out_channels", "\n", "self", ".", "weight", ".", "data", ".", "normal_", "(", "2", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n", "# Init bias", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "fan_in", ",", "_", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "self", ".", "weight", ")", "\n", "bound", "=", "1", "/", "math", ".", "sqrt", "(", "fan_in", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "bias", ",", "-", "bound", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.__init__": [[219, 222], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "pos_fn", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "pos_fn", "=", "pos_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.compute_weight": [[223, 225], ["nconv_modules._pos", "getattr"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules._pos"], ["", "def", "compute_weight", "(", "self", ",", "module", ")", ":", "\n", "        ", "return", "_pos", "(", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_p'", ")", ",", "self", ".", "pos_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.apply": [[226, 243], ["nconv_modules.EnforcePos", "getattr", "module.register_parameter", "setattr", "module.register_forward_pre_hook", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "nconv_modules.EnforcePos.compute_weight", "nconv_modules._pos"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.compute_weight", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules._pos"], ["", "@", "staticmethod", "\n", "def", "apply", "(", "module", ",", "name", ",", "pos_fn", ")", ":", "\n", "        ", "fn", "=", "EnforcePos", "(", "name", ",", "pos_fn", ")", "\n", "\n", "weight", "=", "getattr", "(", "module", ",", "name", ")", "\n", "\n", "# remove w from parameter list", "\n", "del", "module", ".", "_parameters", "[", "name", "]", "\n", "\n", "#", "\n", "module", ".", "register_parameter", "(", "name", "+", "'_p'", ",", "Parameter", "(", "_pos", "(", "weight", ",", "pos_fn", ")", ".", "data", ")", ")", "\n", "setattr", "(", "module", ",", "name", ",", "fn", ".", "compute_weight", "(", "module", ")", ")", "\n", "\n", "# recompute weight before every forward()", "\n", "module", ".", "register_forward_pre_hook", "(", "fn", ")", "\n", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.remove": [[244, 249], ["nconv_modules.EnforcePos.compute_weight", "delattr", "module.register_parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.compute_weight"], ["", "def", "remove", "(", "self", ",", "module", ")", ":", "\n", "        ", "weight", "=", "self", ".", "compute_weight", "(", "module", ")", "\n", "delattr", "(", "module", ",", "self", ".", "name", ")", "\n", "del", "module", ".", "_parameters", "[", "self", ".", "name", "+", "'_p'", "]", "\n", "module", ".", "register_parameter", "(", "self", ".", "name", ",", "Parameter", "(", "weight", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.__call__": [[250, 252], ["setattr", "nconv_modules.EnforcePos.compute_weight"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.compute_weight"], ["", "def", "__call__", "(", "self", ",", "module", ",", "inputs", ")", ":", "\n", "        ", "setattr", "(", "module", ",", "self", ".", "name", ",", "self", ".", "compute_weight", "(", "module", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.retrieve_elements_from_indices": [[19, 23], ["tensor.flatten", "tensor.flatten.gather().view_as", "tensor.flatten.gather", "indices.flatten"], "function", ["None"], ["def", "retrieve_elements_from_indices", "(", "tensor", ",", "indices", ")", ":", "\n", "    ", "flattened_tensor", "=", "tensor", ".", "flatten", "(", "start_dim", "=", "2", ")", "\n", "output", "=", "flattened_tensor", ".", "gather", "(", "dim", "=", "2", ",", "index", "=", "indices", ".", "flatten", "(", "start_dim", "=", "2", ")", ")", ".", "view_as", "(", "indices", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules._pos": [[254, 270], ["pos_fn.lower.lower", "F.softmax.size", "F.softmax.view", "torch.softmax", "F.softmax.view", "torch.exp", "torch.exp", "torch.exp", "torch.softplus", "torch.sigmoid", "print"], "function", ["None"], ["", "", "def", "_pos", "(", "p", ",", "pos_fn", ")", ":", "\n", "    ", "pos_fn", "=", "pos_fn", ".", "lower", "(", ")", "\n", "if", "pos_fn", "==", "'softmax'", ":", "\n", "        ", "p_sz", "=", "p", ".", "size", "(", ")", "\n", "p", "=", "p", ".", "view", "(", "p_sz", "[", "0", "]", ",", "p_sz", "[", "1", "]", ",", "-", "1", ")", "\n", "p", "=", "F", ".", "softmax", "(", "p", ",", "-", "1", ")", "\n", "return", "p", ".", "view", "(", "p_sz", ")", "\n", "", "elif", "pos_fn", "==", "'exp'", ":", "\n", "        ", "return", "torch", ".", "exp", "(", "p", ")", "\n", "", "elif", "pos_fn", "==", "'softplus'", ":", "\n", "        ", "return", "F", ".", "softplus", "(", "p", ",", "beta", "=", "10", ")", "\n", "", "elif", "pos_fn", "==", "'sigmoid'", ":", "\n", "        ", "return", "F", ".", "sigmoid", "(", "p", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Undefined positive function!'", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.remove_weight_pos": [[272, 291], ["module._forward_pre_hooks.items", "ValueError", "isinstance", "hook.remove"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.remove"], ["", "", "def", "remove_weight_pos", "(", "module", ",", "name", "=", "'weight'", ")", ":", "\n", "    ", "r\"\"\"Removes the weight normalization reparameterization from a module.\n\n    Args:\n        module (nn.Module): containing module\n        name (str, optional): name of weight parameter\n\n    Example:\n        >>> m = weight_norm(nn.Linear(20, 40))\n        >>> remove_weight_norm(m)\n    \"\"\"", "\n", "for", "k", ",", "hook", "in", "module", ".", "_forward_pre_hooks", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "hook", ",", "EnforcePos", ")", "and", "hook", ".", "name", "==", "name", ":", "\n", "            ", "hook", ".", "remove", "(", "module", ")", "\n", "del", "module", ".", "_forward_pre_hooks", "[", "k", "]", "\n", "return", "module", "\n", "\n", "", "", "raise", "ValueError", "(", "\"weight_norm of '{}' not found in {}\"", "\n", ".", "format", "(", "name", ",", "module", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.GaussKernel2dFn.forward": [[91, 111], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.unfold", "torch.unfold", "torch.unfold", "cols.view.view.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "ctx.save_for_backward", "cols.view.view.contiguous", "diff_sq.sum.sum.sum"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "channel_wise", ")", ":", "\n", "        ", "ctx", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "bs", ",", "ch", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "out_h", "=", "(", "in_h", "+", "2", "*", "ctx", ".", "padding", "[", "0", "]", "-", "ctx", ".", "dilation", "[", "0", "]", "*", "(", "ctx", ".", "kernel_size", "[", "0", "]", "-", "1", ")", "-", "1", ")", "//", "ctx", ".", "stride", "[", "0", "]", "+", "1", "\n", "out_w", "=", "(", "in_w", "+", "2", "*", "ctx", ".", "padding", "[", "1", "]", "-", "ctx", ".", "dilation", "[", "1", "]", "*", "(", "ctx", ".", "kernel_size", "[", "1", "]", "-", "1", ")", "-", "1", ")", "//", "ctx", ".", "stride", "[", "1", "]", "+", "1", "\n", "cols", "=", "F", ".", "unfold", "(", "input", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "cols", "=", "cols", ".", "view", "(", "bs", ",", "ch", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "out_h", ",", "out_w", ")", "\n", "center_y", ",", "center_x", "=", "ctx", ".", "kernel_size", "[", "0", "]", "//", "2", ",", "ctx", ".", "kernel_size", "[", "1", "]", "//", "2", "\n", "feat_0", "=", "cols", ".", "contiguous", "(", ")", "[", ":", ",", ":", ",", "center_y", ":", "center_y", "+", "1", ",", "center_x", ":", "center_x", "+", "1", ",", ":", ",", ":", "]", "\n", "diff_sq", "=", "(", "cols", "-", "feat_0", ")", ".", "pow", "(", "2", ")", "\n", "if", "not", "channel_wise", ":", "\n", "            ", "diff_sq", "=", "diff_sq", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "output", "=", "torch", ".", "exp", "(", "-", "0.5", "*", "diff_sq", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.GaussKernel2dFn.backward": [[112, 132], ["torch.unfold", "torch.unfold", "torch.unfold", "cols.view.view.view", "grad_diff.sum().sum", "torch.fold", "torch.fold", "torch.fold", "cols.view.view.contiguous", "grad.expand_as", "grad_diff.view", "grad_diff.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "output", "=", "ctx", ".", "saved_tensors", "\n", "bs", ",", "ch", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "out_h", ",", "out_w", "=", "output", ".", "shape", "[", "-", "2", ":", "]", "\n", "cols", "=", "F", ".", "unfold", "(", "input", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "cols", "=", "cols", ".", "view", "(", "bs", ",", "ch", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "out_h", ",", "out_w", ")", "\n", "center_y", ",", "center_x", "=", "ctx", ".", "kernel_size", "[", "0", "]", "//", "2", ",", "ctx", ".", "kernel_size", "[", "1", "]", "//", "2", "\n", "feat_0", "=", "cols", ".", "contiguous", "(", ")", "[", ":", ",", ":", ",", "center_y", ":", "center_y", "+", "1", ",", "center_x", ":", "center_x", "+", "1", ",", ":", ",", ":", "]", "\n", "diff", "=", "cols", "-", "feat_0", "\n", "grad", "=", "-", "0.5", "*", "grad_output", "*", "output", "\n", "grad_diff", "=", "grad", ".", "expand_as", "(", "cols", ")", "*", "(", "2", "*", "diff", ")", "\n", "grad_diff", "[", ":", ",", ":", ",", "center_y", ":", "center_y", "+", "1", ",", "center_x", ":", "center_x", "+", "1", ",", ":", ",", ":", "]", "-=", "grad_diff", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "\n", "grad_input", "=", "F", ".", "fold", "(", "grad_diff", ".", "view", "(", "bs", ",", "ch", "*", "ctx", ".", "kernel_size", "[", "0", "]", "*", "ctx", ".", "kernel_size", "[", "1", "]", ",", "-", "1", ")", ",", "\n", "(", "in_h", ",", "in_w", ")", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacConv2dFn.forward": [[135, 165], ["tuple", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "torch.unfold", "torch.unfold", "torch.unfold", "torch.einsum.clone", "torch.einsum.clone", "torch.einsum.clone", "kernel.size", "ValueError", "torch.unfold.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "bias.view"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "kernel", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "shared_filters", "=", "False", ")", ":", "\n", "        ", "(", "bs", ",", "ch", ")", ",", "in_sz", "=", "input", ".", "shape", "[", ":", "2", "]", ",", "input", ".", "shape", "[", "2", ":", "]", "\n", "if", "kernel", ".", "size", "(", "1", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Non-singleton channel is not allowed for kernel.'", ")", "\n", "", "ctx", ".", "input_size", "=", "in_sz", "\n", "ctx", ".", "in_ch", "=", "ch", "\n", "ctx", ".", "kernel_size", "=", "tuple", "(", "weight", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "shared_filters", "=", "shared_filters", "\n", "ctx", ".", "save_for_backward", "(", "input", "if", "(", "ctx", ".", "needs_input_grad", "[", "1", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ")", "else", "None", ",", "\n", "kernel", "if", "(", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ")", "else", "None", ",", "\n", "weight", "if", "(", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ")", "else", "None", ")", "\n", "\n", "cols", "=", "F", ".", "unfold", "(", "input", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "\n", "in_mul_k", "=", "cols", ".", "view", "(", "bs", ",", "ch", ",", "*", "kernel", ".", "shape", "[", "2", ":", "]", ")", "*", "kernel", "\n", "\n", "# matrix multiplication, written as an einsum to avoid repeated view() and permute()", "\n", "if", "shared_filters", ":", "\n", "            ", "output", "=", "torch", ".", "einsum", "(", "'ijklmn,zykl->ijmn'", ",", "(", "in_mul_k", ",", "weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "torch", ".", "einsum", "(", "'ijklmn,ojkl->iomn'", ",", "(", "in_mul_k", ",", "weight", ")", ")", "\n", "\n", "", "if", "bias", "is", "not", "None", ":", "\n", "            ", "output", "+=", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "output", ".", "clone", "(", ")", "# TODO understand why a .clone() is needed here", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacConv2dFn.backward": [[166, 203], ["torch.unfold", "torch.unfold", "torch.unfold", "in_cols.view.view.view", "grad_im2col_output.view.view.view", "torch.fold", "torch.fold", "torch.fold", "grad_kernel.sum.sum.sum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.view().contiguous", "torch.einsum.view().contiguous", "torch.einsum.view().contiguous", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "grad_output.view", "weight.view", "torch.einsum.view", "torch.einsum.view", "torch.einsum.view"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "grad_input", "=", "grad_kernel", "=", "grad_weight", "=", "grad_bias", "=", "None", "\n", "(", "bs", ",", "out_ch", ")", ",", "out_sz", "=", "grad_output", ".", "shape", "[", ":", "2", "]", ",", "grad_output", ".", "shape", "[", "2", ":", "]", "\n", "in_ch", "=", "ctx", ".", "in_ch", "\n", "\n", "input", ",", "kernel", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "if", "ctx", ".", "shared_filters", ":", "\n", "                ", "grad_in_mul_k", "=", "grad_output", ".", "view", "(", "bs", ",", "out_ch", ",", "1", ",", "1", ",", "out_sz", "[", "0", "]", ",", "out_sz", "[", "1", "]", ")", "*", "weight", ".", "view", "(", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "grad_in_mul_k", "=", "torch", ".", "einsum", "(", "'iomn,ojkl->ijklmn'", ",", "(", "grad_output", ",", "weight", ")", ")", "\n", "", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "in_cols", "=", "F", ".", "unfold", "(", "input", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "in_cols", "=", "in_cols", ".", "view", "(", "bs", ",", "in_ch", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "out_sz", "[", "0", "]", ",", "out_sz", "[", "1", "]", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_im2col_output", "=", "grad_in_mul_k", "*", "kernel", "\n", "grad_im2col_output", "=", "grad_im2col_output", ".", "view", "(", "bs", ",", "-", "1", ",", "out_sz", "[", "0", "]", "*", "out_sz", "[", "1", "]", ")", "\n", "\n", "grad_input", "=", "F", ".", "fold", "(", "grad_im2col_output", ",", "\n", "ctx", ".", "input_size", "[", ":", "2", "]", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "grad_kernel", "=", "in_cols", "*", "grad_in_mul_k", "\n", "grad_kernel", "=", "grad_kernel", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "in_mul_k", "=", "in_cols", "*", "kernel", "\n", "if", "ctx", ".", "shared_filters", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "einsum", "(", "'ijmn,ijklmn->kl'", ",", "(", "grad_output", ",", "in_mul_k", ")", ")", "\n", "grad_weight", "=", "grad_weight", ".", "view", "(", "1", ",", "1", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "einsum", "(", "'iomn,ijklmn->ojkl'", ",", "(", "grad_output", ",", "in_mul_k", ")", ")", "\n", "", "", "if", "ctx", ".", "needs_input_grad", "[", "3", "]", ":", "\n", "            ", "grad_bias", "=", "torch", ".", "einsum", "(", "'iomn->o'", ",", "(", "grad_output", ",", ")", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_kernel", ",", "grad_weight", ",", "grad_bias", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacConvTranspose2dFn.forward": [[206, 242], ["tuple", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "input.new_ones", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.pad", "torch.pad", "torch.pad", "torch.unfold", "torch.unfold", "torch.unfold", "torch.einsum.clone", "torch.einsum.clone", "torch.einsum.clone", "kernel.size", "ValueError", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.unfold.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "bias.view", "zip"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "kernel", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "shared_filters", "=", "False", ")", ":", "\n", "        ", "(", "bs", ",", "ch", ")", ",", "in_sz", "=", "input", ".", "shape", "[", ":", "2", "]", ",", "input", ".", "shape", "[", "2", ":", "]", "\n", "if", "kernel", ".", "size", "(", "1", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Non-singleton channel is not allowed for kernel.'", ")", "\n", "", "ctx", ".", "in_ch", "=", "ch", "\n", "ctx", ".", "kernel_size", "=", "tuple", "(", "weight", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "output_padding", "=", "_pair", "(", "output_padding", ")", "\n", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "shared_filters", "=", "shared_filters", "\n", "ctx", ".", "save_for_backward", "(", "input", "if", "(", "ctx", ".", "needs_input_grad", "[", "1", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ")", "else", "None", ",", "\n", "kernel", "if", "(", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ")", "else", "None", ",", "\n", "weight", "if", "(", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ")", "else", "None", ")", "\n", "\n", "w", "=", "input", ".", "new_ones", "(", "(", "ch", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "F", ".", "conv_transpose2d", "(", "input", ",", "w", ",", "stride", "=", "stride", ",", "groups", "=", "ch", ")", "\n", "pad", "=", "[", "(", "k", "-", "1", ")", "*", "d", "-", "p", "for", "(", "k", ",", "d", ",", "p", ")", "in", "zip", "(", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ")", "]", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "pad", "[", "1", "]", ",", "pad", "[", "1", "]", "+", "ctx", ".", "output_padding", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "0", "]", "+", "ctx", ".", "output_padding", "[", "0", "]", ")", ")", "\n", "\n", "cols", "=", "F", ".", "unfold", "(", "x", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "_pair", "(", "0", ")", ",", "_pair", "(", "1", ")", ")", "\n", "\n", "in_mul_k", "=", "cols", ".", "view", "(", "bs", ",", "ch", ",", "*", "kernel", ".", "shape", "[", "2", ":", "]", ")", "*", "kernel", "\n", "\n", "# matrix multiplication, written as an einsum to avoid repeated view() and permute()", "\n", "if", "shared_filters", ":", "\n", "            ", "output", "=", "torch", ".", "einsum", "(", "'ijklmn,jokl->iomn'", ",", "(", "in_mul_k", ",", "weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "torch", ".", "einsum", "(", "'ijklmn,jokl->iomn'", ",", "(", "in_mul_k", ",", "weight", ")", ")", "\n", "\n", "", "if", "bias", "is", "not", "None", ":", "\n", "            ", "output", "+=", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "output", ".", "clone", "(", ")", "# TODO understand why a .clone() is needed here", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacConvTranspose2dFn.backward": [[243, 286], ["input.new_ones", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.pad", "torch.pad", "torch.pad", "torch.unfold", "torch.unfold", "torch.unfold", "in_cols.view.view.view", "grad_im2col_output.view.view.view", "torch.fold", "torch.fold", "torch.fold", "grad_kernel.sum.sum.sum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "zip", "zip", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.view().contiguous", "torch.einsum.view().contiguous", "torch.einsum.view().contiguous", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "grad_output.view", "weight.view", "zip", "torch.einsum.view", "torch.einsum.view", "torch.einsum.view"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "grad_input", "=", "grad_kernel", "=", "grad_weight", "=", "grad_bias", "=", "None", "\n", "(", "bs", ",", "out_ch", ")", ",", "out_sz", "=", "grad_output", ".", "shape", "[", ":", "2", "]", ",", "grad_output", ".", "shape", "[", "2", ":", "]", "\n", "in_ch", "=", "ctx", ".", "in_ch", "\n", "pad", "=", "[", "(", "k", "-", "1", ")", "*", "d", "-", "p", "for", "(", "k", ",", "d", ",", "p", ")", "in", "zip", "(", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ")", "]", "\n", "pad", "=", "[", "(", "p", ",", "p", "+", "op", ")", "for", "(", "p", ",", "op", ")", "in", "zip", "(", "pad", ",", "ctx", ".", "output_padding", ")", "]", "\n", "\n", "input", ",", "kernel", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "if", "ctx", ".", "shared_filters", ":", "\n", "                ", "grad_in_mul_k", "=", "grad_output", ".", "view", "(", "bs", ",", "out_ch", ",", "1", ",", "1", ",", "out_sz", "[", "0", "]", ",", "out_sz", "[", "1", "]", ")", "*", "weight", ".", "view", "(", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "grad_in_mul_k", "=", "torch", ".", "einsum", "(", "'iomn,jokl->ijklmn'", ",", "(", "grad_output", ",", "weight", ")", ")", "\n", "", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", "or", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "w", "=", "input", ".", "new_ones", "(", "(", "in_ch", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "F", ".", "conv_transpose2d", "(", "input", ",", "w", ",", "stride", "=", "ctx", ".", "stride", ",", "groups", "=", "in_ch", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "pad", "[", "1", "]", "[", "0", "]", ",", "pad", "[", "1", "]", "[", "1", "]", ",", "pad", "[", "0", "]", "[", "0", "]", ",", "pad", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "in_cols", "=", "F", ".", "unfold", "(", "x", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "_pair", "(", "0", ")", ",", "_pair", "(", "1", ")", ")", "\n", "in_cols", "=", "in_cols", ".", "view", "(", "bs", ",", "in_ch", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "out_sz", "[", "0", "]", ",", "out_sz", "[", "1", "]", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_im2col_output", "=", "grad_in_mul_k", "*", "kernel", "\n", "grad_im2col_output", "=", "grad_im2col_output", ".", "view", "(", "bs", ",", "-", "1", ",", "out_sz", "[", "0", "]", "*", "out_sz", "[", "1", "]", ")", "\n", "im2col_input_sz", "=", "[", "o", "+", "(", "k", "-", "1", ")", "*", "d", "for", "(", "o", ",", "k", ",", "d", ")", "in", "zip", "(", "out_sz", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ")", "]", "\n", "\n", "grad_input", "=", "F", ".", "fold", "(", "grad_im2col_output", ",", "\n", "im2col_input_sz", "[", ":", "2", "]", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "0", ",", "1", ")", "\n", "grad_input", "=", "grad_input", "[", ":", ",", ":", ",", "pad", "[", "0", "]", "[", "0", "]", ":", "-", "pad", "[", "0", "]", "[", "1", "]", ":", "ctx", ".", "stride", "[", "0", "]", ",", "pad", "[", "1", "]", "[", "0", "]", ":", "-", "pad", "[", "1", "]", "[", "1", "]", ":", "ctx", ".", "stride", "[", "1", "]", "]", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "grad_kernel", "=", "in_cols", "*", "grad_in_mul_k", "\n", "grad_kernel", "=", "grad_kernel", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "            ", "in_mul_k", "=", "in_cols", "*", "kernel", "\n", "if", "ctx", ".", "shared_filters", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "einsum", "(", "'ijmn,ijklmn->kl'", ",", "(", "grad_output", ",", "in_mul_k", ")", ")", "\n", "grad_weight", "=", "grad_weight", ".", "view", "(", "1", ",", "1", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "einsum", "(", "'iomn,ijklmn->jokl'", ",", "(", "grad_output", ",", "in_mul_k", ")", ")", "\n", "", "", "if", "ctx", ".", "needs_input_grad", "[", "3", "]", ":", "\n", "            ", "grad_bias", "=", "torch", ".", "einsum", "(", "'iomn->o'", ",", "(", "grad_output", ",", ")", ")", "\n", "", "return", "grad_input", ",", "grad_kernel", ",", "grad_weight", ",", "grad_bias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacPool2dFn.forward": [[289, 309], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "kernel.size", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "torch.unfold", "torch.unfold", "torch.unfold", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.clone", "torch.einsum.clone", "torch.einsum.clone", "ValueError", "torch.unfold.view", "kernel.size", "kernel.size"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "kernel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "(", "bs", ",", "ch", ")", ",", "in_sz", "=", "input", ".", "shape", "[", ":", "2", "]", ",", "input", ".", "shape", "[", "2", ":", "]", "\n", "if", "kernel", ".", "size", "(", "1", ")", ">", "1", "and", "kernel", ".", "size", "(", "1", ")", "!=", "ch", ":", "\n", "            ", "raise", "ValueError", "(", "'Incompatible input and kernel sizes.'", ")", "\n", "", "ctx", ".", "input_size", "=", "in_sz", "\n", "ctx", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "ctx", ".", "kernel_ch", "=", "kernel", ".", "size", "(", "1", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", "else", "None", ",", "\n", "kernel", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "else", "None", ")", "\n", "\n", "cols", "=", "F", ".", "unfold", "(", "input", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "\n", "output", "=", "cols", ".", "view", "(", "bs", ",", "ch", ",", "*", "kernel", ".", "shape", "[", "2", ":", "]", ")", "*", "kernel", "\n", "output", "=", "torch", ".", "einsum", "(", "'ijklmn->ijmn'", ",", "(", "output", ",", ")", ")", "\n", "\n", "return", "output", ".", "clone", "(", ")", "# TODO check whether a .clone() is needed here", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacPool2dFn.backward": [[310, 330], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "grad_im2col_output.view.view.view", "torch.fold", "torch.fold", "torch.fold", "torch.unfold", "torch.unfold", "torch.unfold", "cols.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "grad_kernel.sum.sum.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "kernel", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "grad_kernel", "=", "None", "\n", "(", "bs", ",", "ch", ")", ",", "out_sz", "=", "grad_output", ".", "shape", "[", ":", "2", "]", ",", "grad_output", ".", "shape", "[", "2", ":", "]", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_im2col_output", "=", "torch", ".", "einsum", "(", "'ijmn,izklmn->ijklmn'", ",", "(", "grad_output", ",", "kernel", ")", ")", "\n", "grad_im2col_output", "=", "grad_im2col_output", ".", "view", "(", "bs", ",", "-", "1", ",", "out_sz", "[", "0", "]", "*", "out_sz", "[", "1", "]", ")", "\n", "\n", "grad_input", "=", "F", ".", "fold", "(", "grad_im2col_output", ",", "\n", "ctx", ".", "input_size", "[", ":", "2", "]", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "cols", "=", "F", ".", "unfold", "(", "input", ",", "ctx", ".", "kernel_size", ",", "ctx", ".", "dilation", ",", "ctx", ".", "padding", ",", "ctx", ".", "stride", ")", "\n", "cols", "=", "cols", ".", "view", "(", "bs", ",", "ch", ",", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "out_sz", "[", "0", "]", ",", "out_sz", "[", "1", "]", ")", "\n", "grad_kernel", "=", "torch", ".", "einsum", "(", "'ijmn,ijklmn->ijklmn'", ",", "(", "grad_output", ",", "cols", ")", ")", "\n", "if", "ctx", ".", "kernel_ch", "==", "1", ":", "\n", "                ", "grad_kernel", "=", "grad_kernel", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "", "return", "grad_input", ",", "grad_kernel", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules._PacConvNd.__init__": [[499, 583], ["torch.Module.__init__", "any", "any", "kernel_type.startswith", "smooth_kernel_type.startswith", "pac_modules._PacConvNd.reset_parameters", "ValueError", "ValueError", "float", "float", "int", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "smooth_kernel_type.find", "pac_modules._PacConvNd.register_buffer", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "pac_modules._PacConvNd.register_parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "kernel_type.find", "pac_modules._PacConvNd.register_parameter", "pac_modules._PacConvNd.register_parameter", "pac_modules._PacConvNd.register_buffer", "pac_modules._PacConvNd.register_buffer", "ValueError", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "pac_modules._PacConvNd.register_buffer", "smooth_kernel_type.startswith", "int", "zip", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "kernel_type.split", "kernel_type.split", "kernel_type.find", "ValueError", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "float", "float", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "smooth_kernel_type.split", "len", "smooth_kernel.unsqueeze().unsqueeze", "int", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "pac_modules._PacConvNd.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "itertools.repeat", "torch.tensor.view", "torch.tensor.view", "torch.tensor.view", "len", "smooth_kernel.unsqueeze().unsqueeze", "ValueError", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "smooth_kernel.unsqueeze", "smooth_kernel_type.split", "torch.tensor.view", "torch.tensor.view", "torch.tensor.view", "tuple", "itertools.repeat", "smooth_kernel.unsqueeze", "smooth_kernel_type.rfind", "itertools.repeat"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules._PacConvNd.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "transposed", ",", "output_padding", ",", "bias", ",", "\n", "pool_only", ",", "kernel_type", ",", "smooth_kernel_type", ",", "\n", "channel_wise", ",", "normalize_kernel", ",", "shared_filters", ",", "filler", ")", ":", "\n", "        ", "super", "(", "_PacConvNd", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "transposed", "=", "transposed", "\n", "self", ".", "output_padding", "=", "output_padding", "\n", "self", ".", "pool_only", "=", "pool_only", "\n", "self", ".", "kernel_type", "=", "kernel_type", "\n", "self", ".", "smooth_kernel_type", "=", "smooth_kernel_type", "\n", "self", ".", "channel_wise", "=", "channel_wise", "\n", "self", ".", "normalize_kernel", "=", "normalize_kernel", "\n", "self", ".", "shared_filters", "=", "shared_filters", "\n", "self", ".", "filler", "=", "filler", "\n", "if", "any", "(", "[", "k", "%", "2", "!=", "1", "for", "k", "in", "kernel_size", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'kernel_size only accept odd numbers'", ")", "\n", "", "if", "smooth_kernel_type", ".", "find", "(", "'_'", ")", ">=", "0", "and", "int", "(", "smooth_kernel_type", "[", "smooth_kernel_type", ".", "rfind", "(", "'_'", ")", "+", "1", ":", "]", ")", "%", "2", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'smooth_kernel_type only accept kernels of odd widths'", ")", "\n", "", "if", "shared_filters", ":", "\n", "            ", "assert", "in_channels", "==", "out_channels", ",", "'when specifying shared_filters, number of channels should not change'", "\n", "", "if", "any", "(", "[", "p", ">", "d", "*", "(", "k", "-", "1", ")", "/", "2", "for", "(", "p", ",", "d", ",", "k", ")", "in", "zip", "(", "padding", ",", "dilation", ",", "kernel_size", ")", "]", ")", ":", "\n", "# raise ValueError('padding ({}) too large'.format(padding))", "\n", "            ", "pass", "# TODO verify that this indeed won't cause issues", "\n", "", "if", "not", "pool_only", ":", "\n", "            ", "if", "self", ".", "filler", "in", "{", "'pool'", ",", "'crf_pool'", "}", ":", "\n", "                ", "assert", "shared_filters", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "*", "kernel_size", ")", ")", "\n", "if", "self", ".", "filler", "==", "'crf_pool'", ":", "\n", "                    ", "self", ".", "weight", "[", "(", "0", ",", "0", ")", "+", "tuple", "(", "k", "//", "2", "for", "k", "in", "kernel_size", ")", "]", "=", "0", "# Eq.5, DenseCRF", "\n", "", "", "elif", "shared_filters", ":", "\n", "                ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "*", "kernel_size", ")", ")", "\n", "", "elif", "transposed", ":", "\n", "                ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "out_channels", ",", "*", "kernel_size", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", ",", "*", "kernel_size", ")", ")", "\n", "", "if", "bias", ":", "\n", "                ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "", "if", "kernel_type", ".", "startswith", "(", "'inv_'", ")", ":", "\n", "            ", "self", ".", "inv_alpha_init", "=", "float", "(", "kernel_type", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "self", ".", "inv_lambda_init", "=", "float", "(", "kernel_type", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "if", "self", ".", "channel_wise", "and", "kernel_type", ".", "find", "(", "'_fixed'", ")", "<", "0", ":", "\n", "                ", "if", "out_channels", "<=", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "'out_channels needed for channel_wise {}'", ".", "format", "(", "kernel_type", ")", ")", "\n", "", "inv_alpha", "=", "self", ".", "inv_alpha_init", "*", "torch", ".", "ones", "(", "out_channels", ")", "\n", "inv_lambda", "=", "self", ".", "inv_lambda_init", "*", "torch", ".", "ones", "(", "out_channels", ")", "\n", "", "else", ":", "\n", "                ", "inv_alpha", "=", "torch", ".", "tensor", "(", "float", "(", "self", ".", "inv_alpha_init", ")", ")", "\n", "inv_lambda", "=", "torch", ".", "tensor", "(", "float", "(", "self", ".", "inv_lambda_init", ")", ")", "\n", "", "if", "kernel_type", ".", "find", "(", "'_fixed'", ")", "<", "0", ":", "\n", "                ", "self", ".", "register_parameter", "(", "'inv_alpha'", ",", "Parameter", "(", "inv_alpha", ")", ")", "\n", "self", ".", "register_parameter", "(", "'inv_lambda'", ",", "Parameter", "(", "inv_lambda", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "register_buffer", "(", "'inv_alpha'", ",", "inv_alpha", ")", "\n", "self", ".", "register_buffer", "(", "'inv_lambda'", ",", "inv_lambda", ")", "\n", "", "", "elif", "kernel_type", "!=", "'gaussian'", ":", "\n", "            ", "raise", "ValueError", "(", "'kernel_type set to invalid value ({})'", ".", "format", "(", "kernel_type", ")", ")", "\n", "", "if", "smooth_kernel_type", ".", "startswith", "(", "'full_'", ")", ":", "\n", "            ", "smooth_kernel_size", "=", "int", "(", "smooth_kernel_type", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "self", ".", "smooth_kernel", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "*", "repeat", "(", "smooth_kernel_size", ",", "len", "(", "kernel_size", ")", ")", ")", ")", "\n", "", "elif", "smooth_kernel_type", "==", "'gaussian'", ":", "\n", "            ", "smooth_1d", "=", "torch", ".", "tensor", "(", "[", ".25", ",", ".5", ",", ".25", "]", ")", "\n", "smooth_kernel", "=", "smooth_1d", "\n", "for", "d", "in", "range", "(", "1", ",", "len", "(", "kernel_size", ")", ")", ":", "\n", "                ", "smooth_kernel", "=", "smooth_kernel", "*", "smooth_1d", ".", "view", "(", "-", "1", ",", "*", "repeat", "(", "1", ",", "d", ")", ")", "\n", "", "self", ".", "register_buffer", "(", "'smooth_kernel'", ",", "smooth_kernel", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "elif", "smooth_kernel_type", ".", "startswith", "(", "'average_'", ")", ":", "\n", "            ", "smooth_kernel_size", "=", "int", "(", "smooth_kernel_type", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "smooth_1d", "=", "torch", ".", "tensor", "(", "(", "1.0", "/", "smooth_kernel_size", ",", ")", "*", "smooth_kernel_size", ")", "\n", "smooth_kernel", "=", "smooth_1d", "\n", "for", "d", "in", "range", "(", "1", ",", "len", "(", "kernel_size", ")", ")", ":", "\n", "                ", "smooth_kernel", "=", "smooth_kernel", "*", "smooth_1d", ".", "view", "(", "-", "1", ",", "*", "repeat", "(", "1", ",", "d", ")", ")", "\n", "", "self", ".", "register_buffer", "(", "'smooth_kernel'", ",", "smooth_kernel", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "elif", "smooth_kernel_type", "!=", "'none'", ":", "\n", "            ", "raise", "ValueError", "(", "'smooth_kernel_type set to invalid value ({})'", ".", "format", "(", "smooth_kernel_type", ")", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules._PacConvNd.reset_parameters": [[584, 637], ["hasattr", "isinstance", "pac_modules._PacConvNd.inv_alpha.data.fill_", "pac_modules._PacConvNd.inv_lambda.data.fill_", "hasattr", "isinstance", "pac_modules._PacConvNd.smooth_kernel.data.fill_", "pac_modules._PacConvNd.weight.data.uniform_", "math.sqrt", "pac_modules._PacConvNd.bias.data.uniform_", "tuple", "tuple", "all", "enumerate", "pac_modules._PacConvNd.weight.data.fill_", "range", "numpy.multiply.reduce", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pac_modules._PacConvNd.bias.data.fill_", "ValueError", "int", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pac_modules._PacConvNd.weight.data.add_", "pac_modules._PacConvNd.bias.data.fill_", "zip", "zip", "len", "numpy.array().reshape", "len", "pac_modules.np_gaussian_2d", "numpy.eye", "compat.reshape", "numpy.array", "numpy.array", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "tuple", "tuple", "tuple", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.np_gaussian_2d"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "not", "(", "self", ".", "pool_only", "or", "self", ".", "filler", "in", "{", "'pool'", ",", "'crf_pool'", "}", ")", ":", "\n", "            ", "if", "self", ".", "filler", "==", "'uniform'", ":", "\n", "                ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "                    ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "if", "self", ".", "shared_filters", ":", "\n", "                    ", "stdv", "*=", "self", ".", "in_channels", "\n", "", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "", "", "elif", "self", ".", "filler", "==", "'linear'", ":", "\n", "                ", "effective_kernel_size", "=", "tuple", "(", "2", "*", "s", "-", "1", "for", "s", "in", "self", ".", "stride", ")", "\n", "pad", "=", "tuple", "(", "int", "(", "(", "k", "-", "ek", ")", "//", "2", ")", "for", "k", ",", "ek", "in", "zip", "(", "self", ".", "kernel_size", ",", "effective_kernel_size", ")", ")", "\n", "assert", "self", ".", "transposed", "and", "self", ".", "in_channels", "==", "self", ".", "out_channels", "\n", "assert", "all", "(", "k", ">=", "ek", "for", "k", ",", "ek", "in", "zip", "(", "self", ".", "kernel_size", ",", "effective_kernel_size", ")", ")", "\n", "w", "=", "1.0", "\n", "for", "i", ",", "(", "p", ",", "s", ",", "k", ")", "in", "enumerate", "(", "zip", "(", "pad", ",", "self", ".", "stride", ",", "self", ".", "kernel_size", ")", ")", ":", "\n", "                    ", "d", "=", "len", "(", "pad", ")", "-", "i", "-", "1", "\n", "w", "=", "w", "*", "(", "np", ".", "array", "(", "(", "0.0", ",", ")", "*", "p", "+", "tuple", "(", "range", "(", "1", ",", "s", ")", ")", "+", "tuple", "(", "range", "(", "s", ",", "0", ",", "-", "1", ")", ")", "+", "(", "0", ",", ")", "*", "p", ")", "/", "s", ")", ".", "reshape", "(", "\n", "(", "-", "1", ",", ")", "+", "(", "1", ",", ")", "*", "d", ")", "\n", "if", "self", ".", "normalize_kernel", ":", "\n", "                        ", "w", "=", "w", "*", "np", ".", "array", "(", "tuple", "(", "(", "(", "k", "-", "j", "-", "1", ")", "//", "s", ")", "+", "(", "j", "//", "s", ")", "+", "1.0", "for", "j", "in", "range", "(", "k", ")", ")", ")", ".", "reshape", "(", "\n", "(", "-", "1", ",", ")", "+", "(", "1", ",", ")", "*", "d", ")", "\n", "", "", "self", ".", "weight", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "for", "c", "in", "range", "(", "1", "if", "self", ".", "shared_filters", "else", "self", ".", "in_channels", ")", ":", "\n", "                    ", "self", ".", "weight", ".", "data", "[", "c", ",", "c", ",", ":", "]", "=", "torch", ".", "tensor", "(", "w", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "self", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "", "elif", "self", ".", "filler", "in", "{", "'crf'", ",", "'crf_perturbed'", "}", ":", "\n", "                ", "assert", "len", "(", "self", ".", "kernel_size", ")", "==", "2", "and", "self", ".", "kernel_size", "[", "0", "]", "==", "self", ".", "kernel_size", "[", "1", "]", "and", "self", ".", "in_channels", "==", "self", ".", "out_channels", "\n", "perturb_range", "=", "0.001", "\n", "n_classes", "=", "self", ".", "in_channels", "\n", "gauss", "=", "np_gaussian_2d", "(", "self", ".", "kernel_size", "[", "0", "]", ")", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "0", "]", "\n", "gauss", "[", "self", ".", "kernel_size", "[", "0", "]", "//", "2", ",", "self", ".", "kernel_size", "[", "1", "]", "//", "2", "]", "=", "0", "\n", "if", "self", ".", "shared_filters", ":", "\n", "                    ", "self", ".", "weight", ".", "data", "[", "0", ",", "0", ",", ":", "]", "=", "torch", ".", "tensor", "(", "gauss", ")", "\n", "", "else", ":", "\n", "                    ", "compat", "=", "1.0", "-", "np", ".", "eye", "(", "n_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "weight", ".", "data", "[", ":", "]", "=", "torch", ".", "tensor", "(", "compat", ".", "reshape", "(", "n_classes", ",", "n_classes", ",", "1", ",", "1", ")", "*", "gauss", ")", "\n", "", "if", "self", ".", "filler", "==", "'crf_perturbed'", ":", "\n", "                    ", "self", ".", "weight", ".", "data", ".", "add_", "(", "(", "torch", ".", "rand_like", "(", "self", ".", "weight", ".", "data", ")", "-", "0.5", ")", "*", "perturb_range", ")", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "self", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Initialization method ({}) not supported.'", ".", "format", "(", "self", ".", "filler", ")", ")", "\n", "", "", "if", "hasattr", "(", "self", ",", "'inv_alpha'", ")", "and", "isinstance", "(", "self", ".", "inv_alpha", ",", "Parameter", ")", ":", "\n", "            ", "self", ".", "inv_alpha", ".", "data", ".", "fill_", "(", "self", ".", "inv_alpha_init", ")", "\n", "self", ".", "inv_lambda", ".", "data", ".", "fill_", "(", "self", ".", "inv_lambda_init", ")", "\n", "", "if", "hasattr", "(", "self", ",", "'smooth_kernel'", ")", "and", "isinstance", "(", "self", ".", "smooth_kernel", ",", "Parameter", ")", ":", "\n", "            ", "self", ".", "smooth_kernel", ".", "data", ".", "fill_", "(", "1.0", "/", "np", ".", "multiply", ".", "reduce", "(", "self", ".", "smooth_kernel", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules._PacConvNd.extra_repr": [[638, 660], ["s.format", "len", "len", "len", "len"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'{in_channels}, {out_channels}, kernel_size={kernel_size}'", "\n", "', kernel_type={kernel_type}'", ")", "\n", "if", "self", ".", "stride", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "stride", ")", ":", "\n", "            ", "s", "+=", "', stride={stride}'", "\n", "", "if", "self", ".", "padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "padding", ")", ":", "\n", "            ", "s", "+=", "', padding={padding}'", "\n", "", "if", "self", ".", "dilation", "!=", "(", "1", ",", ")", "*", "len", "(", "self", ".", "dilation", ")", ":", "\n", "            ", "s", "+=", "', dilation={dilation}'", "\n", "", "if", "self", ".", "output_padding", "!=", "(", "0", ",", ")", "*", "len", "(", "self", ".", "output_padding", ")", ":", "\n", "            ", "s", "+=", "', output_padding={output_padding}'", "\n", "", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "', bias=False'", "\n", "", "if", "self", ".", "smooth_kernel_type", "!=", "'none'", ":", "\n", "            ", "s", "+=", "', smooth_kernel_type={smooth_kernel_type}'", "\n", "", "if", "self", ".", "channel_wise", ":", "\n", "            ", "s", "+=", "', channel_wise=True'", "\n", "", "if", "self", ".", "normalize_kernel", ":", "\n", "            ", "s", "+=", "', normalize_kernel=True'", "\n", "", "if", "self", ".", "shared_filters", ":", "\n", "            ", "s", "+=", "', shared_filters=True'", "\n", "", "return", "s", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacConv2d.__init__": [[676, 689], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "pac_modules._PacConvNd.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "\n", "kernel_type", "=", "'gaussian'", ",", "smooth_kernel_type", "=", "'none'", ",", "normalize_kernel", "=", "False", ",", "shared_filters", "=", "False", ",", "\n", "filler", "=", "'uniform'", ",", "native_impl", "=", "False", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "super", "(", "PacConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "False", ",", "_pair", "(", "0", ")", ",", "bias", ",", "\n", "False", ",", "kernel_type", ",", "smooth_kernel_type", ",", "False", ",", "normalize_kernel", ",", "shared_filters", ",", "filler", ")", "\n", "\n", "self", ".", "native_impl", "=", "native_impl", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacConv2d.compute_kernel": [[690, 700], ["pac_modules.packernel2d", "hasattr", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.packernel2d"], ["", "def", "compute_kernel", "(", "self", ",", "input_for_kernel", ",", "input_mask", "=", "None", ")", ":", "\n", "        ", "return", "packernel2d", "(", "input_for_kernel", ",", "input_mask", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "kernel_type", "=", "self", ".", "kernel_type", ",", "\n", "smooth_kernel_type", "=", "self", ".", "smooth_kernel_type", ",", "\n", "smooth_kernel", "=", "self", ".", "smooth_kernel", "if", "hasattr", "(", "self", ",", "'smooth_kernel'", ")", "else", "None", ",", "\n", "inv_alpha", "=", "self", ".", "inv_alpha", "if", "hasattr", "(", "self", ",", "'inv_alpha'", ")", "else", "None", ",", "\n", "inv_lambda", "=", "self", ".", "inv_lambda", "if", "hasattr", "(", "self", ",", "'inv_lambda'", ")", "else", "None", ",", "\n", "channel_wise", "=", "False", ",", "normalize_kernel", "=", "self", ".", "normalize_kernel", ",", "transposed", "=", "False", ",", "\n", "native_impl", "=", "self", ".", "native_impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacConv2d.forward": [[701, 710], ["pac_modules.pacconv2d", "pac_modules.PacConv2d.compute_kernel"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.pacconv2d", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacPool2d.compute_kernel"], ["", "def", "forward", "(", "self", ",", "input_2d", ",", "input_for_kernel", ",", "kernel", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "output_mask", "=", "None", "\n", "if", "kernel", "is", "None", ":", "\n", "            ", "kernel", ",", "output_mask", "=", "self", ".", "compute_kernel", "(", "input_for_kernel", ",", "mask", ")", "\n", "\n", "", "output", "=", "pacconv2d", "(", "input_2d", ",", "kernel", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "shared_filters", ",", "self", ".", "native_impl", ")", "\n", "\n", "return", "output", "if", "output_mask", "is", "None", "else", "(", "output", ",", "output_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacConvTranspose2d.__init__": [[726, 740], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "pac_modules._PacConvNd.__init__"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ",", "kernel_type", "=", "'gaussian'", ",", "smooth_kernel_type", "=", "'none'", ",", "normalize_kernel", "=", "False", ",", "\n", "shared_filters", "=", "False", ",", "filler", "=", "'uniform'", ",", "native_impl", "=", "False", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "output_padding", "=", "_pair", "(", "output_padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "super", "(", "PacConvTranspose2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "True", ",", "output_padding", ",", "bias", ",", "\n", "False", ",", "kernel_type", ",", "smooth_kernel_type", ",", "False", ",", "normalize_kernel", ",", "shared_filters", ",", "filler", ")", "\n", "\n", "self", ".", "native_impl", "=", "native_impl", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacConvTranspose2d.compute_kernel": [[741, 751], ["pac_modules.packernel2d", "hasattr", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.packernel2d"], ["", "def", "compute_kernel", "(", "self", ",", "input_for_kernel", ",", "input_mask", "=", "None", ")", ":", "\n", "        ", "return", "packernel2d", "(", "input_for_kernel", ",", "input_mask", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "\n", "output_padding", "=", "self", ".", "output_padding", ",", "dilation", "=", "self", ".", "dilation", ",", "kernel_type", "=", "self", ".", "kernel_type", ",", "\n", "smooth_kernel_type", "=", "self", ".", "smooth_kernel_type", ",", "\n", "smooth_kernel", "=", "self", ".", "smooth_kernel", "if", "hasattr", "(", "self", ",", "'smooth_kernel'", ")", "else", "None", ",", "\n", "inv_alpha", "=", "self", ".", "inv_alpha", "if", "hasattr", "(", "self", ",", "'inv_alpha'", ")", "else", "None", ",", "\n", "inv_lambda", "=", "self", ".", "inv_lambda", "if", "hasattr", "(", "self", ",", "'inv_lambda'", ")", "else", "None", ",", "\n", "channel_wise", "=", "False", ",", "normalize_kernel", "=", "self", ".", "normalize_kernel", ",", "transposed", "=", "True", ",", "\n", "native_impl", "=", "self", ".", "native_impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacConvTranspose2d.forward": [[752, 761], ["pac_modules.pacconv_transpose2d", "pac_modules.PacConvTranspose2d.compute_kernel"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.pacconv_transpose2d", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacPool2d.compute_kernel"], ["", "def", "forward", "(", "self", ",", "input_2d", ",", "input_for_kernel", ",", "kernel", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "output_mask", "=", "None", "\n", "if", "kernel", "is", "None", ":", "\n", "            ", "kernel", ",", "output_mask", "=", "self", ".", "compute_kernel", "(", "input_for_kernel", ",", "mask", ")", "\n", "\n", "", "output", "=", "pacconv_transpose2d", "(", "input_2d", ",", "kernel", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "output_padding", ",", "self", ".", "dilation", ",", "self", ".", "shared_filters", ",", "self", ".", "native_impl", ")", "\n", "\n", "return", "output", "if", "output_mask", "is", "None", "else", "(", "output", ",", "output_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacPool2d.__init__": [[778, 791], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "pac_modules._PacConvNd.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["def", "__init__", "(", "self", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "kernel_type", "=", "'gaussian'", ",", "smooth_kernel_type", "=", "'none'", ",", "\n", "channel_wise", "=", "False", ",", "normalize_kernel", "=", "False", ",", "out_channels", "=", "-", "1", ",", "native_impl", "=", "False", ")", ":", "\n", "        ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "super", "(", "PacPool2d", ",", "self", ")", ".", "__init__", "(", "\n", "-", "1", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "False", ",", "_pair", "(", "0", ")", ",", "False", ",", "\n", "True", ",", "kernel_type", ",", "smooth_kernel_type", ",", "channel_wise", ",", "normalize_kernel", ",", "False", ",", "None", ")", "\n", "\n", "self", ".", "native_impl", "=", "native_impl", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacPool2d.compute_kernel": [[792, 802], ["pac_modules.packernel2d", "hasattr", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.packernel2d"], ["", "def", "compute_kernel", "(", "self", ",", "input_for_kernel", ",", "input_mask", "=", "None", ")", ":", "\n", "        ", "return", "packernel2d", "(", "input_for_kernel", ",", "input_mask", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "self", ".", "padding", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "kernel_type", "=", "self", ".", "kernel_type", ",", "\n", "smooth_kernel_type", "=", "self", ".", "smooth_kernel_type", ",", "\n", "smooth_kernel", "=", "self", ".", "smooth_kernel", "if", "hasattr", "(", "self", ",", "'smooth_kernel'", ")", "else", "None", ",", "\n", "inv_alpha", "=", "self", ".", "inv_alpha", "if", "hasattr", "(", "self", ",", "'inv_alpha'", ")", "else", "None", ",", "\n", "inv_lambda", "=", "self", ".", "inv_lambda", "if", "hasattr", "(", "self", ",", "'inv_lambda'", ")", "else", "None", ",", "\n", "channel_wise", "=", "self", ".", "channel_wise", ",", "normalize_kernel", "=", "self", ".", "normalize_kernel", ",", "transposed", "=", "False", ",", "\n", "native_impl", "=", "self", ".", "native_impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacPool2d.forward": [[803, 817], ["pac_modules.pacpool2d", "pac_modules.PacPool2d.compute_kernel", "ValueError"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.pacpool2d", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.PacPool2d.compute_kernel"], ["", "def", "forward", "(", "self", ",", "input_2d", ",", "input_for_kernel", ",", "kernel", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "output_mask", "=", "None", "\n", "if", "kernel", "is", "None", ":", "\n", "            ", "kernel", ",", "output_mask", "=", "self", ".", "compute_kernel", "(", "input_for_kernel", ",", "mask", ")", "\n", "\n", "", "bs", ",", "in_ch", ",", "in_h", ",", "in_w", "=", "input_2d", ".", "shape", "\n", "if", "self", ".", "channel_wise", "and", "(", "kernel", ".", "shape", "[", "1", "]", "!=", "in_ch", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'input and kernel must have the same number of channels when channel_wise=True'", ")", "\n", "", "assert", "self", ".", "out_channels", "<=", "0", "or", "self", ".", "out_channels", "==", "in_ch", "\n", "\n", "output", "=", "pacpool2d", "(", "input_2d", ",", "kernel", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "native_impl", ")", "\n", "\n", "return", "output", "if", "output_mask", "is", "None", "else", "(", "output", ",", "output_mask", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules._neg_idx": [[34, 36], ["None"], "function", ["None"], ["", "def", "_neg_idx", "(", "idx", ")", ":", "\n", "    ", "return", "None", "if", "idx", "==", "0", "else", "-", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.np_gaussian_2d": [[38, 50], ["numpy.arange", "numpy.exp", "gaussian_2d.sum", "np.exp.reshape", "float"], "function", ["None"], ["", "def", "np_gaussian_2d", "(", "width", ",", "sigma", "=", "-", "1", ")", ":", "\n", "    ", "'''Truncated 2D Gaussian filter'''", "\n", "assert", "width", "%", "2", "==", "1", "\n", "if", "sigma", "<=", "0", ":", "\n", "        ", "sigma", "=", "float", "(", "width", ")", "/", "4", "\n", "\n", "", "r", "=", "np", ".", "arange", "(", "-", "(", "width", "//", "2", ")", ",", "(", "width", "//", "2", ")", "+", "1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gaussian_1d", "=", "np", ".", "exp", "(", "-", "0.5", "*", "r", "*", "r", "/", "(", "sigma", "*", "sigma", ")", ")", "\n", "gaussian_2d", "=", "gaussian_1d", ".", "reshape", "(", "-", "1", ",", "1", ")", "*", "gaussian_1d", "\n", "gaussian_2d", "/=", "gaussian_2d", ".", "sum", "(", ")", "\n", "\n", "return", "gaussian_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.nd2col": [[52, 88], ["len", "tuple", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "F.pad.new_ones", "torch.conv_transpose2d", "torch.pad", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "P.im2col", "torch.unfold", "output.view().contiguous.view().contiguous", "zip", "zip", "tuple", "output.view().contiguous.view"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad"], ["", "def", "nd2col", "(", "input_nd", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "transposed", "=", "False", ",", "\n", "use_pyinn_if_possible", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Shape:\n        - Input: :math:`(N, C, L_{in})`\n        - Output: :math:`(N, C, *kernel_size, *L_{out})` where\n          :math:`L_{out} = floor((L_{in} + 2 * padding - dilation * (kernel_size - 1) - 1) / stride + 1)` for non-transposed\n          :math:`L_{out} = (L_{in} - 1) * stride - 2 * padding + dilation * (kernel_size - 1) + 1 + output_padding` for transposed\n    \"\"\"", "\n", "n_dims", "=", "len", "(", "input_nd", ".", "shape", "[", "2", ":", "]", ")", "\n", "kernel_size", "=", "(", "kernel_size", ",", ")", "*", "n_dims", "if", "isinstance", "(", "kernel_size", ",", "Number", ")", "else", "kernel_size", "\n", "stride", "=", "(", "stride", ",", ")", "*", "n_dims", "if", "isinstance", "(", "stride", ",", "Number", ")", "else", "stride", "\n", "padding", "=", "(", "padding", ",", ")", "*", "n_dims", "if", "isinstance", "(", "padding", ",", "Number", ")", "else", "padding", "\n", "output_padding", "=", "(", "output_padding", ",", ")", "*", "n_dims", "if", "isinstance", "(", "output_padding", ",", "Number", ")", "else", "output_padding", "\n", "dilation", "=", "(", "dilation", ",", ")", "*", "n_dims", "if", "isinstance", "(", "dilation", ",", "Number", ")", "else", "dilation", "\n", "\n", "if", "transposed", ":", "\n", "        ", "assert", "n_dims", "==", "2", ",", "'Only 2D is supported for fractional strides.'", "\n", "w_one", "=", "input_nd", ".", "new_ones", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "pad", "=", "[", "(", "k", "-", "1", ")", "*", "d", "-", "p", "for", "(", "k", ",", "d", ",", "p", ")", "in", "zip", "(", "kernel_size", ",", "dilation", ",", "padding", ")", "]", "\n", "input_nd", "=", "F", ".", "conv_transpose2d", "(", "input_nd", ",", "w_one", ",", "stride", "=", "stride", ")", "\n", "input_nd", "=", "F", ".", "pad", "(", "input_nd", ",", "(", "pad", "[", "1", "]", ",", "pad", "[", "1", "]", "+", "output_padding", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "0", "]", "+", "output_padding", "[", "0", "]", ")", ")", "\n", "stride", "=", "_pair", "(", "1", ")", "\n", "padding", "=", "_pair", "(", "0", ")", "\n", "\n", "", "(", "bs", ",", "nch", ")", ",", "in_sz", "=", "input_nd", ".", "shape", "[", ":", "2", "]", ",", "input_nd", ".", "shape", "[", "2", ":", "]", "\n", "out_sz", "=", "tuple", "(", "[", "(", "(", "i", "+", "2", "*", "p", "-", "d", "*", "(", "k", "-", "1", ")", "-", "1", ")", "//", "s", "+", "1", ")", "\n", "for", "(", "i", ",", "k", ",", "d", ",", "p", ",", "s", ")", "in", "zip", "(", "in_sz", ",", "kernel_size", ",", "dilation", ",", "padding", ",", "stride", ")", "]", ")", "\n", "# Use PyINN if possible (about 15% faster) TODO confirm the speed-up", "\n", "if", "n_dims", "==", "2", "and", "dilation", "==", "1", "and", "has_pyinn", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_pyinn_if_possible", ":", "\n", "        ", "output", "=", "P", ".", "im2col", "(", "input_nd", ",", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "F", ".", "unfold", "(", "input_nd", ",", "kernel_size", ",", "dilation", ",", "padding", ",", "stride", ")", "\n", "out_shape", "=", "(", "bs", ",", "nch", ")", "+", "tuple", "(", "kernel_size", ")", "+", "out_sz", "\n", "output", "=", "output", ".", "view", "(", "*", "out_shape", ")", ".", "contiguous", "(", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.packernel2d": [[332, 425], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.tensor", "torch.tensor", "torch.tensor", "tuple", "input.new_ones", "pac_modules.nd2col", "torch.nn.modules.utils._pair", "tuple", "pac_modules.nd2col", "torch.exp_.view().contiguous", "torch.exp_.view().contiguous", "GaussKernel2dFn.apply", "GaussKernel2dFn.apply.sum().sum", "pac_modules.nd2col", "tuple", "torch.conv2d", "F.conv2d.view", "kernel_type.find", "torch.relu", "torch.sum", "torch.sum", "torch.sum", "torch.exp_", "torch.exp_", "torch.exp_", "kernel_type.startswith", "torch.exp_.view", "int", "int", "input.view", "torch.exp_.mul_", "ValueError", "torch.exp_.view", "GaussKernel2dFn.apply.sum", "empty_mask.clone().detach", "int", "zip", "nd2col.sum().sum", "nd2col.sum().sum", "zip", "numpy.minimum", "tuple", "inv_alpha.view", "torch.pow", "torch.pow", "torch.pow", "pac_modules._neg_idx", "pac_modules._neg_idx", "numpy.maximum", "empty_mask.clone", "nd2col.sum", "nd2col.sum", "inv_lambda.view", "tuple"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.nd2col", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.nd2col", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.apply", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.nd2col", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules._neg_idx", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules._neg_idx"], ["", "", "def", "packernel2d", "(", "input", ",", "mask", "=", "None", ",", "kernel_size", "=", "0", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "kernel_type", "=", "'gaussian'", ",", "smooth_kernel_type", "=", "'none'", ",", "smooth_kernel", "=", "None", ",", "inv_alpha", "=", "None", ",", "inv_lambda", "=", "None", ",", "\n", "channel_wise", "=", "False", ",", "normalize_kernel", "=", "False", ",", "transposed", "=", "False", ",", "native_impl", "=", "False", ")", ":", "\n", "    ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "output_padding", "=", "_pair", "(", "output_padding", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "output_mask", "=", "False", "if", "mask", "is", "None", "else", "True", "\n", "norm", "=", "None", "\n", "\n", "if", "mask", "is", "not", "None", "and", "mask", ".", "dtype", "!=", "input", ".", "dtype", ":", "\n", "        ", "mask", "=", "torch", ".", "tensor", "(", "mask", ",", "dtype", "=", "input", ".", "dtype", ",", "device", "=", "input", ".", "device", ")", "\n", "\n", "", "if", "transposed", ":", "\n", "        ", "in_sz", "=", "tuple", "(", "int", "(", "(", "o", "-", "op", "-", "1", "-", "(", "k", "-", "1", ")", "*", "d", "+", "2", "*", "p", ")", "//", "s", ")", "+", "1", "for", "(", "o", ",", "k", ",", "s", ",", "p", ",", "op", ",", "d", ")", "in", "\n", "zip", "(", "input", ".", "shape", "[", "-", "2", ":", "]", ",", "kernel_size", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ")", ")", "\n", "", "else", ":", "\n", "        ", "in_sz", "=", "input", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "", "if", "mask", "is", "not", "None", "or", "normalize_kernel", ":", "\n", "        ", "mask_pattern", "=", "input", ".", "new_ones", "(", "1", ",", "1", ",", "*", "in_sz", ")", "\n", "mask_pattern", "=", "nd2col", "(", "mask_pattern", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "\n", "dilation", "=", "dilation", ",", "transposed", "=", "transposed", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "nd2col", "(", "mask", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "output_padding", "=", "output_padding", ",", "\n", "dilation", "=", "dilation", ",", "transposed", "=", "transposed", ")", "\n", "if", "not", "normalize_kernel", ":", "\n", "                ", "norm", "=", "mask", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "/", "mask_pattern", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "mask", "=", "mask_pattern", "\n", "\n", "", "", "if", "transposed", ":", "\n", "        ", "stride", "=", "_pair", "(", "1", ")", "\n", "padding", "=", "tuple", "(", "(", "k", "-", "1", ")", "*", "d", "//", "2", "for", "(", "k", ",", "d", ")", "in", "zip", "(", "kernel_size", ",", "dilation", ")", ")", "\n", "\n", "", "if", "native_impl", ":", "\n", "        ", "bs", ",", "k_ch", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "\n", "x", "=", "nd2col", "(", "input", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "x", "=", "x", ".", "view", "(", "bs", ",", "k_ch", ",", "-", "1", ",", "*", "x", ".", "shape", "[", "-", "2", ":", "]", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "smooth_kernel_type", "==", "'none'", ":", "\n", "            ", "self_idx", "=", "kernel_size", "[", "0", "]", "*", "kernel_size", "[", "1", "]", "//", "2", "\n", "feat_0", "=", "x", "[", ":", ",", ":", ",", "self_idx", ":", "self_idx", "+", "1", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "smooth_kernel_size", "=", "smooth_kernel", ".", "shape", "[", "2", ":", "]", "\n", "smooth_padding", "=", "(", "int", "(", "padding", "[", "0", "]", "-", "(", "kernel_size", "[", "0", "]", "-", "smooth_kernel_size", "[", "0", "]", ")", "/", "2", ")", ",", "\n", "int", "(", "padding", "[", "1", "]", "-", "(", "kernel_size", "[", "1", "]", "-", "smooth_kernel_size", "[", "1", "]", ")", "/", "2", ")", ")", "\n", "crop", "=", "tuple", "(", "-", "1", "*", "np", ".", "minimum", "(", "0", ",", "smooth_padding", ")", ")", "\n", "input_for_kernel_crop", "=", "input", ".", "view", "(", "-", "1", ",", "1", ",", "in_h", ",", "in_w", ")", "[", ":", ",", ":", ",", "\n", "crop", "[", "0", "]", ":", "_neg_idx", "(", "crop", "[", "0", "]", ")", ",", "crop", "[", "1", "]", ":", "_neg_idx", "(", "crop", "[", "1", "]", ")", "]", "\n", "smoothed", "=", "F", ".", "conv2d", "(", "input_for_kernel_crop", ",", "smooth_kernel", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "tuple", "(", "np", ".", "maximum", "(", "0", ",", "smooth_padding", ")", ")", ")", "\n", "feat_0", "=", "smoothed", ".", "view", "(", "bs", ",", "k_ch", ",", "1", ",", "*", "x", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "x", "=", "x", "-", "feat_0", "\n", "if", "kernel_type", ".", "find", "(", "'_asym'", ")", ">=", "0", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "# x.pow_(2)  # this causes an autograd issue in pytorch>0.4", "\n", "", "x", "=", "x", "*", "x", "\n", "if", "not", "channel_wise", ":", "\n", "            ", "x", "=", "torch", ".", "sum", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "if", "kernel_type", "==", "'gaussian'", ":", "\n", "            ", "x", "=", "torch", ".", "exp_", "(", "x", ".", "mul_", "(", "-", "0.5", ")", ")", "# TODO profiling for identifying the culprit of 5x slow down", "\n", "# x = torch.exp(-0.5 * x)", "\n", "", "elif", "kernel_type", ".", "startswith", "(", "'inv_'", ")", ":", "\n", "            ", "epsilon", "=", "1e-4", "\n", "x", "=", "inv_alpha", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", "+", "torch", ".", "pow", "(", "x", "+", "epsilon", ",", "0.5", "*", "inv_lambda", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "output", "=", "x", ".", "view", "(", "*", "(", "x", ".", "shape", "[", ":", "2", "]", "+", "tuple", "(", "kernel_size", ")", "+", "x", ".", "shape", "[", "-", "2", ":", "]", ")", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "        ", "assert", "(", "smooth_kernel_type", "==", "'none'", "and", "\n", "kernel_type", "==", "'gaussian'", ")", "\n", "output", "=", "GaussKernel2dFn", ".", "apply", "(", "input", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "channel_wise", ")", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "        ", "output", "=", "output", "*", "mask", "# avoid numerical issue on masked positions", "\n", "\n", "", "if", "normalize_kernel", ":", "\n", "        ", "norm", "=", "output", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "sum", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "if", "norm", "is", "not", "None", ":", "\n", "        ", "empty_mask", "=", "(", "norm", "==", "0", ")", "\n", "# output = output / (norm + torch.tensor(empty_mask, dtype=input.dtype, device=input.device))", "\n", "output", "=", "output", "/", "(", "norm", "+", "empty_mask", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", "\n", "output_mask", "=", "(", "1", "-", "empty_mask", ")", "if", "output_mask", "else", "None", "\n", "", "else", ":", "\n", "        ", "output_mask", "=", "None", "\n", "\n", "", "return", "output", ",", "output_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.pacconv2d": [[427, 450], ["tuple", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "pac_modules.nd2col", "PacConv2dFn.apply", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "bias.view"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.nd2col", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.apply"], ["", "def", "pacconv2d", "(", "input", ",", "kernel", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "shared_filters", "=", "False", ",", "\n", "native_impl", "=", "False", ")", ":", "\n", "    ", "kernel_size", "=", "tuple", "(", "weight", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "\n", "if", "native_impl", ":", "\n", "# im2col on input", "\n", "        ", "im_cols", "=", "nd2col", "(", "input", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "\n", "# main computation", "\n", "if", "shared_filters", ":", "\n", "            ", "output", "=", "torch", ".", "einsum", "(", "'ijklmn,zykl->ijmn'", ",", "(", "im_cols", "*", "kernel", ",", "weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "torch", ".", "einsum", "(", "'ijklmn,ojkl->iomn'", ",", "(", "im_cols", "*", "kernel", ",", "weight", ")", ")", "\n", "\n", "", "if", "bias", "is", "not", "None", ":", "\n", "            ", "output", "+=", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "output", "=", "PacConv2dFn", ".", "apply", "(", "input", ",", "kernel", ",", "weight", ",", "bias", ",", "stride", ",", "padding", ",", "dilation", ",", "shared_filters", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.pacconv_transpose2d": [[452, 473], ["tuple", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "input.new_ones", "torch.conv_transpose2d", "torch.pad", "pac_modules.pacconv2d", "PacConvTranspose2dFn.apply", "weight.permute", "range"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.pacconv2d", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.apply"], ["", "def", "pacconv_transpose2d", "(", "input", ",", "kernel", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "output_padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "shared_filters", "=", "False", ",", "native_impl", "=", "False", ")", ":", "\n", "    ", "kernel_size", "=", "tuple", "(", "weight", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "output_padding", "=", "_pair", "(", "output_padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "\n", "if", "native_impl", ":", "\n", "        ", "ch", "=", "input", ".", "shape", "[", "1", "]", "\n", "w", "=", "input", ".", "new_ones", "(", "(", "ch", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "F", ".", "conv_transpose2d", "(", "input", ",", "w", ",", "stride", "=", "stride", ",", "groups", "=", "ch", ")", "\n", "pad", "=", "[", "(", "kernel_size", "[", "i", "]", "-", "1", ")", "*", "dilation", "[", "i", "]", "-", "padding", "[", "i", "]", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "pad", "[", "1", "]", ",", "pad", "[", "1", "]", "+", "output_padding", "[", "1", "]", ",", "pad", "[", "0", "]", ",", "pad", "[", "0", "]", "+", "output_padding", "[", "0", "]", ")", ")", "\n", "output", "=", "pacconv2d", "(", "x", ",", "kernel", ",", "weight", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ",", "bias", ",", "dilation", "=", "dilation", ",", "\n", "shared_filters", "=", "shared_filters", ",", "native_impl", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "PacConvTranspose2dFn", ".", "apply", "(", "input", ",", "kernel", ",", "weight", ",", "bias", ",", "stride", ",", "padding", ",", "output_padding", ",", "dilation", ",", "\n", "shared_filters", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.pacpool2d": [[475, 496], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "pac_modules.nd2col", "nd2col.view().sum", "PacPool2dFn.apply", "nd2col.view"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.pac_modules.nd2col", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.nconv_modules.EnforcePos.apply"], ["", "def", "pacpool2d", "(", "input", ",", "kernel", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "native_impl", "=", "False", ")", ":", "\n", "    ", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "stride", "=", "_pair", "(", "stride", ")", "\n", "padding", "=", "_pair", "(", "padding", ")", "\n", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "\n", "if", "native_impl", ":", "\n", "        ", "bs", ",", "in_ch", ",", "in_h", ",", "in_w", "=", "input", ".", "shape", "\n", "out_h", "=", "(", "in_h", "+", "2", "*", "padding", "[", "0", "]", "-", "dilation", "[", "0", "]", "*", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "-", "1", ")", "//", "stride", "[", "0", "]", "+", "1", "\n", "out_w", "=", "(", "in_w", "+", "2", "*", "padding", "[", "1", "]", "-", "dilation", "[", "1", "]", "*", "(", "kernel_size", "[", "1", "]", "-", "1", ")", "-", "1", ")", "//", "stride", "[", "1", "]", "+", "1", "\n", "\n", "# im2col on input", "\n", "im_cols", "=", "nd2col", "(", "input", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "\n", "# main computation", "\n", "im_cols", "*=", "kernel", "\n", "output", "=", "im_cols", ".", "view", "(", "bs", ",", "in_ch", ",", "-", "1", ",", "out_h", ",", "out_w", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "PacPool2dFn", ".", "apply", "(", "input", ",", "kernel", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.NConvUpsampler.__init__": [[76, 138], ["super().__init__", "ValueError", "ValueError", "ValueError", "isinstance", "float", "float", "isinstance", "isinstance", "float", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "None", ",", "size", "=", "None", ",", "interpolation_net", "=", "None", ",", "weights_est_net", "=", "None", ",", "use_data_for_guidance", "=", "True", ",", "\n", "channels_to_batch", "=", "True", ",", "use_residuals", "=", "False", ",", "est_on_high_res", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        An upsampling layer using Normalized CNN with an input weights estimation network.\n        Either `scale` or `size` needs to be specified.\n\n        Args:\n            scale: The uspampling factor.\n            size: The desired size of the output.\n            interpolation_net: Interpolation network. Needs to be an object of `NConvUNetFull`.\n            weights_est_net: Weights estimation network.\n            use_data_for_guidance: Either to use the low-resolution data as input to the weights estimation network with\n                                   the guidance data.\n            channels_to_batch: Either to reshape data tensor to B*Cx1xHxW before performing interpolation.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "__name__", "=", "'NConvUpsampler'", "\n", "# Check the validity of arguments", "\n", "if", "scale", "is", "None", "and", "size", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Either scale or size needs to be set!'", ")", "\n", "", "elif", "scale", "is", "not", "None", "and", "size", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'You can set either scale or size at a time!'", ")", "\n", "", "elif", "scale", "is", "not", "None", "and", "size", "is", "None", ":", "\n", "            ", "if", "isinstance", "(", "scale", ",", "tuple", ")", ":", "\n", "                ", "self", ".", "scaleW", "=", "float", "(", "scale", "[", "1", "]", ")", "\n", "self", ".", "scaleH", "=", "float", "(", "scale", "[", "0", "]", ")", "\n", "", "elif", "isinstance", "(", "scale", ",", "int", ")", ":", "\n", "                ", "self", ".", "scaleW", "=", "self", ".", "scaleH", "=", "float", "(", "scale", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Scale value can be tuple or integer only!'", ")", "\n", "", "", "elif", "scale", "is", "None", "and", "size", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "size", ",", "tuple", ")", ":", "\n", "                ", "self", ".", "osize", "=", "size", "\n", "self", ".", "scaleW", "=", "self", ".", "scaleH", "=", "None", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Size has to be a tuple!'", ")", "\n", "\n", "# Interpolation network must be provided and from `NConv` family", "\n", "", "", "if", "interpolation_net", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'An interpolation network mush be provided!'", ")", "\n", "", "else", ":", "\n", "            ", "assert", "'NConv'", "in", "interpolation_net", ".", "__name__", ",", "'Only `NConv` interpolaion networks are supported!'", "\n", "self", ".", "interpolation_net", "=", "interpolation_net", "\n", "# Get the number of data input channels", "\n", "self", ".", "data_ich", "=", "self", ".", "interpolation_net", ".", "_modules", "[", "'nconv_in'", "]", ".", "in_channels", "\n", "\n", "", "if", "weights_est_net", "is", "None", ":", "# No weights estimation network provided, use binary weights mask", "\n", "            ", "self", ".", "weights_est_net", "=", "self", ".", "get_binary_weights", "\n", "self", ".", "guidance_ich", "=", "self", ".", "data_ich", "\n", "", "else", ":", "\n", "            ", "self", ".", "weights_est_net", "=", "weights_est_net", "\n", "# Get the number of guidance input channels", "\n", "self", ".", "guidance_ich", "=", "self", ".", "weights_est_net", ".", "in_ch", "\n", "\n", "", "self", ".", "use_data_for_guidance", "=", "use_data_for_guidance", "\n", "self", ".", "channels_to_batch", "=", "channels_to_batch", "\n", "self", ".", "use_residuals", "=", "use_residuals", "\n", "self", ".", "est_on_high_res", "=", "est_on_high_res", "\n", "\n", "# If data is used for guidance, check that the guidance network has the right number of in_channels", "\n", "if", "self", ".", "use_data_for_guidance", ":", "\n", "            ", "assert", "(", "self", ".", "guidance_ich", ">=", "self", ".", "data_ich", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.NConvUpsampler.get_binary_weights": [[139, 142], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_binary_weights", "(", "t", ")", ":", "\n", "        ", "return", "(", "t", ">", "0", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.NConvUpsampler.forward": [[143, 178], ["upsampler.NConvUpsampler.get_out_tensor", "output.view.view.view", "torch.interpolate", "torch.interpolate", "torch.interpolate", "upsampler.NConvUpsampler.weights_est_net", "upsampler.NConvUpsampler.weights_est_net", "upsampler.NConvUpsampler.get_out_tensor", "upsampler.NConvUpsampler.interpolation_net", "upsampler.NConvUpsampler.interpolation_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_lowres.size", "upsampler.NConvUpsampler.view", "upsampler.NConvUpsampler.view"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.NConvUpsampler.get_out_tensor", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.NConvUpsampler.get_out_tensor"], ["", "def", "forward", "(", "self", ",", "x_lowres", ",", "x_guidance", "=", "None", ")", ":", "\n", "        ", "x_highres", "=", "self", ".", "get_out_tensor", "(", "x_lowres", ")", "\n", "\n", "# Prepare guidance data", "\n", "if", "self", ".", "est_on_high_res", ":", "\n", "            ", "x_data_for_guidance", "=", "x_highres", "\n", "", "else", ":", "\n", "            ", "x_guidance", "=", "F", ".", "interpolate", "(", "x_guidance", ",", "x_lowres", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'area'", ")", "# Downsample the guidance", "\n", "x_data_for_guidance", "=", "x_lowres", "\n", "\n", "# Feed guidance data to weights estimation network", "\n", "", "if", "self", ".", "use_data_for_guidance", ":", "\n", "            ", "w_lowres", "=", "self", ".", "weights_est_net", "(", "torch", ".", "cat", "(", "(", "x_data_for_guidance", ",", "x_guidance", ")", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "w_lowres", "=", "self", ".", "weights_est_net", "(", "x_guidance", ")", "\n", "\n", "", "if", "self", ".", "est_on_high_res", ":", "\n", "            ", "w_highres", "=", "w_lowres", "\n", "", "else", ":", "\n", "            ", "w_highres", "=", "self", ".", "get_out_tensor", "(", "w_lowres", ")", "\n", "\n", "", "ib", ",", "ic", ",", "oh", ",", "ow", "=", "x_highres", ".", "shape", "\n", "\n", "# Perform interpolation using NConv", "\n", "if", "self", ".", "channels_to_batch", ":", "\n", "            ", "output", ",", "_", "=", "self", ".", "interpolation_net", "(", "(", "x_highres", ".", "view", "(", "ib", "*", "ic", ",", "1", ",", "oh", ",", "ow", ")", ",", "w_highres", ".", "view", "(", "ib", "*", "ic", ",", "1", ",", "oh", ",", "ow", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", ",", "_", "=", "self", ".", "interpolation_net", "(", "(", "x_highres", ",", "w_highres", ")", ")", "\n", "\n", "", "output", "=", "output", ".", "view", "(", "ib", ",", "ic", ",", "oh", ",", "ow", ")", "\n", "\n", "if", "self", ".", "use_residuals", ":", "\n", "            ", "output", "[", "x_highres", ">", "0", "]", "=", "x_highres", "[", "x_highres", ">", "0", "]", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.NConvUpsampler.get_out_tensor": [[179, 211], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "int", "int", "round", "round", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "get_out_tensor", "(", "self", ",", "inp", ")", ":", "\n", "        ", "b", ",", "ic", ",", "ih", ",", "iw", "=", "inp", ".", "shape", "\n", "\n", "if", "self", ".", "scaleH", "is", "None", "and", "self", ".", "scaleW", "is", "None", ":", "# Size was provided", "\n", "            ", "oh", "=", "self", ".", "osize", "[", "0", "]", "\n", "ow", "=", "self", ".", "osize", "[", "1", "]", "\n", "\n", "# Calculate the scaling factor", "\n", "sH", "=", "oh", "/", "ih", "\n", "sW", "=", "ow", "/", "iw", "\n", "", "else", ":", "\n", "            ", "sH", "=", "int", "(", "self", ".", "scaleH", ")", "\n", "sW", "=", "int", "(", "self", ".", "scaleW", ")", "\n", "oh", "=", "round", "(", "ih", "*", "sH", ")", "\n", "ow", "=", "round", "(", "iw", "*", "sW", ")", "\n", "\n", "", "out_t", "=", "torch", ".", "zeros", "(", "(", "b", ",", "ic", ",", "oh", ",", "ow", ")", ",", "dtype", "=", "inp", ".", "dtype", ")", ".", "to", "(", "inp", ".", "device", ")", "\n", "\"\"\"\n        ix = torch.arange(iw).to(inp.device).float()\n        iy = torch.arange(ih).to(inp.device).float()\n\n        ox = torch.round(ix * sW).long()\n        oy = torch.round(iy * sH).long()\n\n        gy, gx = torch.meshgrid([oy, ox])\n        \n        out_t[:, :, gy+4, gx+4] = inp\n        \"\"\"", "\n", "\n", "out_t", "[", ":", ",", ":", ",", "sH", "//", "2", ":", ":", "sH", ",", "sW", "//", "2", ":", ":", "sW", "]", "=", "inp", "\n", "\n", "return", "out_t", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.Bilinear.__init__": [[214, 218], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "scale", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.Bilinear.forward": [[219, 221], ["upsampler.Bilinear.up"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "argv", ")", ":", "\n", "        ", "return", "self", ".", "up", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.PacJointUpsampleFull.__init__": [[224, 228], ["torch.Module.__init__", "pac_upsampler.PacJointUpsample"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "None", ",", "in_ch", "=", "1", ",", "guidance_ch", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "up", "=", "PacJointUpsample", "(", "factor", "=", "scale", ",", "channels", "=", "in_ch", ",", "guide_channels", "=", "guidance_ch", ")", "\n", "#print(tools.get_num_params(self))", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.PacJointUpsampleFull.forward": [[230, 232], ["upsampler.PacJointUpsampleFull.up"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "guide", ")", ":", "\n", "        ", "return", "self", ".", "up", "(", "x", ",", "guide", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.DjifOriginal.__init__": [[235, 239], ["torch.Module.__init__", "pac_upsampler.DJIF"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "None", ",", "in_ch", "=", "1", ",", "guidance_ch", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "up", "=", "DJIF", "(", "factor", "=", "scale", ",", "channels", "=", "in_ch", ",", "guide_channels", "=", "guidance_ch", ")", "\n", "#print(tools.get_num_params(self))", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.DjifOriginal.forward": [[241, 243], ["upsampler.DjifOriginal.up"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "guide", ")", ":", "\n", "        ", "return", "self", ".", "up", "(", "x", ",", "guide", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.upsampler.get_upsampler": [[10, 73], ["nconv_modules.NConvUNet", "args.weights_est_net_num_ch.copy", "upsampler.NConvUpsampler", "args.weights_est_net_num_ch.copy.insert", "args.weights_est_net_num_ch.copy.insert", "args.weights_est_net.lower", "interp_weights_est.Simple", "upsampler.Bilinear", "args.weights_est_net.lower", "interp_weights_est.UNet", "upsampler.PacJointUpsampleFull", "upsampler.DjifOriginal", "NotImplementedError"], "function", ["None"], ["def", "get_upsampler", "(", "in_ch", ",", "guidance_ch", ",", "args", ")", ":", "\n", "\n", "    ", "upsampler_name", "=", "'nconvupsampler'", "#args.final_upsampling.lower()", "\n", "\n", "if", "upsampler_name", "==", "'nconvupsampler'", ":", "\n", "# Define the normalized convolution interpolation network", "\n", "#TODO: Normalized convolution network only supports in_ch of 1, add support for more channels using groups.", "\n", "        ", "interpolation_net", "=", "NConvUNet", "(", "in_ch", "=", "1", ",", "channels_multiplier", "=", "args", ".", "interp_net_channels_multiplier", ",", "\n", "num_downsampling", "=", "args", ".", "interp_net_num_downsampling", ",", "\n", "encoder_filter_sz", "=", "args", ".", "interp_net_encoder_filter_sz", ",", "\n", "decoder_filter_sz", "=", "args", ".", "interp_net_decoder_filter_sz", ",", "\n", "out_filter_sz", "=", "args", ".", "interp_net_out_filter_sz", ",", "\n", "use_bias", "=", "args", ".", "interp_net_use_bias", ",", "\n", "data_pooling", "=", "args", ".", "interp_net_data_pooling", ",", "\n", "shared_encoder", "=", "args", ".", "interp_net_shared_encoder", ",", "\n", "use_double_conv", "=", "args", ".", "interp_net_use_double_conv", ",", "\n", "pos_fn", "=", "'SoftPlus'", ",", "groups", "=", "1", ")", "\n", "\n", "\n", "# Define the weights estimation network", "\n", "weights_est_net", "=", "None", "\n", "\n", "# Add the number of input channels at the beginning of num_ch", "\n", "#num_channels = [guidance_ch, 64, 32] #args.weights_est_net_num_ch.copy()", "\n", "num_channels", "=", "args", ".", "weights_est_net_num_ch", ".", "copy", "(", ")", "\n", "\n", "if", "args", ".", "final_upsampling_use_data_for_guidance", ":", "\n", "            ", "num_channels", ".", "insert", "(", "0", ",", "guidance_ch", "+", "in_ch", ")", "\n", "", "else", ":", "\n", "            ", "num_channels", ".", "insert", "(", "0", ",", "guidance_ch", ")", "\n", "\n", "# Disable Batch Normalization for KITTI", "\n", "", "use_bn", "=", "args", ".", "dataset", "==", "'sintel'", "\n", "if", "args", ".", "weights_est_net", ".", "lower", "(", ")", "==", "'simple'", ":", "\n", "            ", "weights_est_net", "=", "Simple", "(", "num_ch", "=", "num_channels", ",", "out_ch", "=", "in_ch", ",", "use_bn", "=", "use_bn", ",", "\n", "filter_sz", "=", "args", ".", "weights_est_net_filter_sz", ",", "dilation", "=", "args", ".", "weights_est_net_dilation", ",", "\n", "final_act", "=", "torch", ".", "sigmoid", ")", "\n", "\n", "", "elif", "args", ".", "weights_est_net", ".", "lower", "(", ")", "==", "'unet'", ":", "\n", "            ", "weights_est_net", "=", "UNet", "(", "num_ch", "=", "num_channels", ",", "out_ch", "=", "in_ch", ",", "final_act", "=", "torch", ".", "sigmoid", ")", "\n", "\n", "# Define the NConv upsampler", "\n", "", "upsampler", "=", "NConvUpsampler", "(", "scale", "=", "args", ".", "final_upsampling_scale", ",", "interpolation_net", "=", "interpolation_net", ",", "\n", "weights_est_net", "=", "weights_est_net", ",", "\n", "use_data_for_guidance", "=", "args", ".", "final_upsampling_use_data_for_guidance", ",", "\n", "channels_to_batch", "=", "args", ".", "final_upsampling_channels_to_batch", ",", "\n", "use_residuals", "=", "args", ".", "final_upsampling_use_residuals", ",", "\n", "est_on_high_res", "=", "args", ".", "final_upsampling_est_on_high_res", ")", "\n", "\n", "\n", "", "elif", "upsampler_name", "==", "'bilinear'", ":", "\n", "        ", "upsampler", "=", "Bilinear", "(", "args", ".", "final_upsampling_scale", ")", "\n", "\n", "", "elif", "upsampler_name", "==", "'pacjointupsamplefull'", ":", "\n", "        ", "upsampler", "=", "PacJointUpsampleFull", "(", "scale", "=", "args", ".", "final_upsampling_scale", ",", "in_ch", "=", "1", ",", "guidance_ch", "=", "guidance_ch", ")", "\n", "\n", "", "elif", "upsampler_name", "==", "'djiforiginal'", ":", "\n", "        ", "upsampler", "=", "DjifOriginal", "(", "scale", "=", "args", ".", "final_upsampling_scale", ",", "in_ch", "=", "1", ",", "guidance_ch", "=", "guidance_ch", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Upsampler `{}` is not implemented!'", ".", "format", "(", "upsampler_name", ")", ")", "\n", "\n", "", "return", "upsampler", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.datasets.FlowDataset.__init__": [[19, 33], ["utils.augmentor.SparseFlowAugmentor", "utils.augmentor.FlowAugmentor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "sparse", "=", "False", ")", ":", "\n", "        ", "self", ".", "augmentor", "=", "None", "\n", "self", ".", "sparse", "=", "sparse", "\n", "if", "aug_params", "is", "not", "None", ":", "\n", "            ", "if", "sparse", ":", "\n", "                ", "self", ".", "augmentor", "=", "SparseFlowAugmentor", "(", "**", "aug_params", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "augmentor", "=", "FlowAugmentor", "(", "**", "aug_params", ")", "\n", "\n", "", "", "self", ".", "is_test", "=", "False", "\n", "self", ".", "init_seed", "=", "False", "\n", "self", ".", "flow_list", "=", "[", "]", "\n", "self", ".", "image_list", "=", "[", "]", "\n", "self", ".", "extra_info", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.datasets.FlowDataset.__getitem__": [[34, 91], ["utils.frame_utils.read_gen", "utils.frame_utils.read_gen", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "utils.frame_utils.read_gen", "utils.frame_utils.read_gen", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "len", "utils.frame_utils.readFlowKITTI", "utils.frame_utils.read_gen", "len", "numpy.tile", "numpy.tile", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float", "numpy.array().astype", "numpy.array().astype", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "numpy.array", "numpy.array", "numpy.array", "datasets.FlowDataset.augmentor", "datasets.FlowDataset.augmentor", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "flow[].abs", "flow[].abs", "numpy.array", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.readFlowKITTI", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.read_gen"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "if", "self", ".", "is_test", ":", "\n", "            ", "img1", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "0", "]", ")", "\n", "img2", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "1", "]", ")", "\n", "img1", "=", "np", ".", "array", "(", "img1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", "...", ",", ":", "3", "]", "\n", "img2", "=", "np", ".", "array", "(", "img2", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", "...", ",", ":", "3", "]", "\n", "img1", "=", "torch", ".", "from_numpy", "(", "img1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "img2", "=", "torch", ".", "from_numpy", "(", "img2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "return", "img1", ",", "img2", ",", "self", ".", "extra_info", "[", "index", "]", "\n", "\n", "", "if", "not", "self", ".", "init_seed", ":", "\n", "            ", "worker_info", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "\n", "if", "worker_info", "is", "not", "None", ":", "\n", "                ", "torch", ".", "manual_seed", "(", "worker_info", ".", "id", ")", "\n", "np", ".", "random", ".", "seed", "(", "worker_info", ".", "id", ")", "\n", "random", ".", "seed", "(", "worker_info", ".", "id", ")", "\n", "self", ".", "init_seed", "=", "True", "\n", "\n", "", "", "index", "=", "index", "%", "len", "(", "self", ".", "image_list", ")", "\n", "valid", "=", "None", "\n", "if", "self", ".", "sparse", ":", "\n", "            ", "flow", ",", "valid", "=", "frame_utils", ".", "readFlowKITTI", "(", "self", ".", "flow_list", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "flow", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "flow_list", "[", "index", "]", ")", "\n", "\n", "", "img1", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "0", "]", ")", "\n", "img2", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "1", "]", ")", "\n", "\n", "flow", "=", "np", ".", "array", "(", "flow", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img1", "=", "np", ".", "array", "(", "img1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img2", "=", "np", ".", "array", "(", "img2", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# grayscale images", "\n", "if", "len", "(", "img1", ".", "shape", ")", "==", "2", ":", "\n", "            ", "img1", "=", "np", ".", "tile", "(", "img1", "[", "...", ",", "None", "]", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "img2", "=", "np", ".", "tile", "(", "img2", "[", "...", ",", "None", "]", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "            ", "img1", "=", "img1", "[", "...", ",", ":", "3", "]", "\n", "img2", "=", "img2", "[", "...", ",", ":", "3", "]", "\n", "\n", "", "if", "self", ".", "augmentor", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "sparse", ":", "\n", "                ", "img1", ",", "img2", ",", "flow", ",", "valid", "=", "self", ".", "augmentor", "(", "img1", ",", "img2", ",", "flow", ",", "valid", ")", "\n", "", "else", ":", "\n", "                ", "img1", ",", "img2", ",", "flow", "=", "self", ".", "augmentor", "(", "img1", ",", "img2", ",", "flow", ")", "\n", "\n", "", "", "img1", "=", "torch", ".", "from_numpy", "(", "img1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "img2", "=", "torch", ".", "from_numpy", "(", "img2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "flow", "=", "torch", ".", "from_numpy", "(", "flow", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "if", "valid", "is", "not", "None", ":", "\n", "            ", "valid", "=", "torch", ".", "from_numpy", "(", "valid", ")", "\n", "", "else", ":", "\n", "            ", "valid", "=", "(", "flow", "[", "0", "]", ".", "abs", "(", ")", "<", "1000", ")", "&", "(", "flow", "[", "1", "]", ".", "abs", "(", ")", "<", "1000", ")", "\n", "\n", "", "return", "img1", ",", "img2", ",", "flow", ",", "valid", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.datasets.FlowDataset.__rmul__": [[93, 97], ["None"], "methods", ["None"], ["", "def", "__rmul__", "(", "self", ",", "v", ")", ":", "\n", "        ", "self", ".", "flow_list", "=", "v", "*", "self", ".", "flow_list", "\n", "self", ".", "image_list", "=", "v", "*", "self", ".", "image_list", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.datasets.FlowDataset.__len__": [[98, 100], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.datasets.MpiSintel.__init__": [[103, 119], ["datasets.FlowDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "sorted", "range", "glob.glob.glob", "sorted", "os.join", "os.join", "len", "glob.glob.glob", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "split", "=", "'training'", ",", "root", "=", "'datasets/Sintel'", ",", "dstype", "=", "'clean'", ")", ":", "\n", "        ", "super", "(", "MpiSintel", ",", "self", ")", ".", "__init__", "(", "aug_params", ")", "\n", "flow_root", "=", "osp", ".", "join", "(", "root", ",", "split", ",", "'flow'", ")", "\n", "image_root", "=", "osp", ".", "join", "(", "root", ",", "split", ",", "dstype", ")", "\n", "\n", "if", "split", "==", "'test'", ":", "\n", "            ", "self", ".", "is_test", "=", "True", "\n", "\n", "", "for", "scene", "in", "os", ".", "listdir", "(", "image_root", ")", ":", "\n", "            ", "image_list", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "image_root", ",", "scene", ",", "'*.png'", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "image_list", ")", "-", "1", ")", ":", "\n", "                ", "self", ".", "image_list", "+=", "[", "[", "image_list", "[", "i", "]", ",", "image_list", "[", "i", "+", "1", "]", "]", "]", "\n", "self", ".", "extra_info", "+=", "[", "(", "scene", ",", "i", ")", "]", "# scene and frame_id", "\n", "\n", "", "if", "split", "!=", "'test'", ":", "\n", "                ", "self", ".", "flow_list", "+=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "flow_root", ",", "scene", ",", "'*.flo'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.datasets.FlyingChairs.__init__": [[122, 136], ["datasets.FlowDataset.__init__", "sorted", "sorted", "numpy.loadtxt", "range", "glob.glob.glob", "glob.glob.glob", "len", "len", "os.join", "os.join", "os.join", "os.join", "len"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "split", "=", "'train'", ",", "root", "=", "'datasets/FlyingChairs_release/data'", ")", ":", "\n", "        ", "super", "(", "FlyingChairs", ",", "self", ")", ".", "__init__", "(", "aug_params", ")", "\n", "\n", "images", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'*_img*.png'", ")", ")", ")", "\n", "flows", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'*_flow.flo'", ")", ")", ")", "\n", "\n", "assert", "(", "len", "(", "images", ")", "//", "2", "==", "len", "(", "flows", ")", ")", "\n", "\n", "split_list", "=", "np", ".", "loadtxt", "(", "'chairs_split.txt'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "flows", ")", ")", ":", "\n", "            ", "xid", "=", "split_list", "[", "i", "]", "\n", "if", "(", "split", "==", "'training'", "and", "xid", "==", "1", ")", "or", "(", "split", "==", "'validation'", "and", "xid", "==", "2", ")", ":", "\n", "                ", "self", ".", "flow_list", "+=", "[", "flows", "[", "i", "]", "]", "\n", "self", ".", "image_list", "+=", "[", "[", "images", "[", "2", "*", "i", "]", ",", "images", "[", "2", "*", "i", "+", "1", "]", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.datasets.FlyingThings3D.__init__": [[139, 167], ["datasets.FlowDataset.__init__", "sorted", "sorted", "sorted", "sorted", "zip", "glob.glob.glob", "glob.glob.glob", "range", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "sorted", "sorted", "sorted", "sorted", "glob.glob.glob", "glob.glob.glob", "glob.glob.glob", "glob.glob.glob", "len", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "root", "=", "'datasets/FlyingThings3D'", ",", "dstype", "=", "'frames_cleanpass'", ",", "load_compressed", "=", "False", ")", ":", "\n", "        ", "super", "(", "FlyingThings3D", ",", "self", ")", ".", "__init__", "(", "aug_params", ")", "\n", "\n", "for", "cam", "in", "[", "'left'", "]", ":", "\n", "            ", "for", "direction", "in", "[", "'into_future'", ",", "'into_past'", "]", ":", "\n", "                ", "if", "load_compressed", ":", "\n", "                    ", "dstype", "+=", "'_webp'", "\n", "\n", "", "image_dirs", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "dstype", ",", "'TRAIN/*/*'", ")", ")", ")", "\n", "image_dirs", "=", "sorted", "(", "[", "osp", ".", "join", "(", "f", ",", "cam", ")", "for", "f", "in", "image_dirs", "]", ")", "\n", "\n", "flow_dirs", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'optical_flow/TRAIN/*/*'", ")", ")", ")", "\n", "flow_dirs", "=", "sorted", "(", "[", "osp", ".", "join", "(", "f", ",", "direction", ",", "cam", ")", "for", "f", "in", "flow_dirs", "]", ")", "\n", "\n", "for", "idir", ",", "fdir", "in", "zip", "(", "image_dirs", ",", "flow_dirs", ")", ":", "\n", "                    ", "if", "load_compressed", ":", "\n", "                        ", "images", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "idir", ",", "'*.webp'", ")", ")", ")", "\n", "flows", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "fdir", ",", "'*.npz'", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "images", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "idir", ",", "'*.png'", ")", ")", ")", "\n", "flows", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "fdir", ",", "'*.pfm'", ")", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "flows", ")", "-", "1", ")", ":", "\n", "                        ", "if", "direction", "==", "'into_future'", ":", "\n", "                            ", "self", ".", "image_list", "+=", "[", "[", "images", "[", "i", "]", ",", "images", "[", "i", "+", "1", "]", "]", "]", "\n", "self", ".", "flow_list", "+=", "[", "flows", "[", "i", "]", "]", "\n", "", "elif", "direction", "==", "'into_past'", ":", "\n", "                            ", "self", ".", "image_list", "+=", "[", "[", "images", "[", "i", "+", "1", "]", ",", "images", "[", "i", "]", "]", "]", "\n", "self", ".", "flow_list", "+=", "[", "flows", "[", "i", "+", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.datasets.KITTI.__init__": [[170, 186], ["datasets.FlowDataset.__init__", "os.join", "os.join", "sorted", "sorted", "zip", "glob.glob.glob", "glob.glob.glob", "sorted", "os.join", "os.join", "os.join", "os.join", "img1.split", "glob.glob.glob", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "split", "=", "'training'", ",", "root", "=", "'datasets/KITTI'", ")", ":", "\n", "        ", "super", "(", "KITTI", ",", "self", ")", ".", "__init__", "(", "aug_params", ",", "sparse", "=", "True", ")", "\n", "if", "split", "==", "'testing'", ":", "\n", "            ", "self", ".", "is_test", "=", "True", "\n", "\n", "", "root", "=", "osp", ".", "join", "(", "root", ",", "split", ")", "\n", "images1", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'image_2/*_10.png'", ")", ")", ")", "\n", "images2", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'image_2/*_11.png'", ")", ")", ")", "\n", "\n", "for", "img1", ",", "img2", "in", "zip", "(", "images1", ",", "images2", ")", ":", "\n", "            ", "frame_id", "=", "img1", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "self", ".", "extra_info", "+=", "[", "[", "frame_id", "]", "]", "\n", "self", ".", "image_list", "+=", "[", "[", "img1", ",", "img2", "]", "]", "\n", "\n", "", "if", "split", "==", "'training'", ":", "\n", "            ", "self", ".", "flow_list", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'flow_occ/*_10.png'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.datasets.HD1K.__init__": [[189, 205], ["datasets.FlowDataset.__init__", "sorted", "sorted", "range", "glob.glob.glob", "glob.glob.glob", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "root", "=", "'datasets/HD1k'", ")", ":", "\n", "        ", "super", "(", "HD1K", ",", "self", ")", ".", "__init__", "(", "aug_params", ",", "sparse", "=", "True", ")", "\n", "\n", "seq_ix", "=", "0", "\n", "while", "1", ":", "\n", "            ", "flows", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hd1k_flow_gt'", ",", "'flow_occ/%06d_*.png'", "%", "seq_ix", ")", ")", ")", "\n", "images", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hd1k_input'", ",", "'image_2/%06d_*.png'", "%", "seq_ix", ")", ")", ")", "\n", "\n", "if", "len", "(", "flows", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "flows", ")", "-", "1", ")", ":", "\n", "                ", "self", ".", "flow_list", "+=", "[", "flows", "[", "i", "]", "]", "\n", "self", ".", "image_list", "+=", "[", "[", "images", "[", "i", "]", ",", "images", "[", "i", "+", "1", "]", "]", "]", "\n", "\n", "", "seq_ix", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.core.datasets.fetch_dataloader": [[207, 245], ["torch.DataLoader", "print", "datasets.FlyingChairs", "datasets.FlyingThings3D", "datasets.FlyingThings3D", "len", "datasets.FlyingThings3D", "datasets.MpiSintel", "datasets.MpiSintel", "datasets.KITTI", "print", "datasets.HD1K", "print", "datasets.KITTI", "len", "len", "len"], "function", ["None"], ["", "", "", "def", "fetch_dataloader", "(", "args", ",", "TRAIN_DS", "=", "'C+T+K+S+H'", ")", ":", "\n", "    ", "\"\"\" Create the data loader for the corresponding trainign set \"\"\"", "\n", "\n", "if", "args", ".", "stage", "==", "'chairs'", ":", "\n", "        ", "aug_params", "=", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.1", ",", "'max_scale'", ":", "1.0", ",", "'do_flip'", ":", "True", "}", "\n", "train_dataset", "=", "FlyingChairs", "(", "aug_params", ",", "split", "=", "'training'", ")", "\n", "\n", "", "elif", "args", ".", "stage", "==", "'things'", ":", "\n", "        ", "aug_params", "=", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.4", ",", "'max_scale'", ":", "0.8", ",", "'do_flip'", ":", "True", "}", "\n", "clean_dataset", "=", "FlyingThings3D", "(", "aug_params", ",", "dstype", "=", "'frames_cleanpass'", ",", "load_compressed", "=", "args", ".", "compressed_ft", ")", "\n", "final_dataset", "=", "FlyingThings3D", "(", "aug_params", ",", "dstype", "=", "'frames_finalpass'", ",", "load_compressed", "=", "args", ".", "compressed_ft", ")", "\n", "train_dataset", "=", "clean_dataset", "+", "final_dataset", "\n", "\n", "", "elif", "args", ".", "stage", "==", "'sintel'", ":", "\n", "        ", "aug_params", "=", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.2", ",", "'max_scale'", ":", "0.6", ",", "'do_flip'", ":", "True", "}", "\n", "things", "=", "FlyingThings3D", "(", "aug_params", ",", "dstype", "=", "'frames_cleanpass'", ")", "\n", "sintel_clean", "=", "MpiSintel", "(", "aug_params", ",", "split", "=", "'training'", ",", "dstype", "=", "'clean'", ")", "\n", "sintel_final", "=", "MpiSintel", "(", "aug_params", ",", "split", "=", "'training'", ",", "dstype", "=", "'final'", ")", "\n", "\n", "if", "TRAIN_DS", "==", "'C+T+K+S+H'", ":", "\n", "            ", "kitti", "=", "KITTI", "(", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.3", ",", "'max_scale'", ":", "0.5", ",", "'do_flip'", ":", "True", "}", ")", "\n", "print", "(", "'KITTI:'", ",", "len", "(", "kitti", ")", ")", "\n", "hd1k", "=", "HD1K", "(", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.5", ",", "'max_scale'", ":", "0.2", ",", "'do_flip'", ":", "True", "}", ")", "\n", "print", "(", "'Sintel:'", ",", "len", "(", "sintel_clean", ")", "+", "len", "(", "sintel_final", ")", ")", "\n", "train_dataset", "=", "100", "*", "sintel_clean", "+", "100", "*", "sintel_final", "+", "200", "*", "kitti", "+", "5", "*", "hd1k", "+", "things", "\n", "\n", "", "elif", "TRAIN_DS", "==", "'C+T+K/S'", ":", "\n", "            ", "train_dataset", "=", "100", "*", "sintel_clean", "+", "100", "*", "sintel_final", "+", "things", "\n", "\n", "", "", "elif", "args", ".", "stage", "==", "'kitti'", ":", "\n", "        ", "aug_params", "=", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.2", ",", "'max_scale'", ":", "0.4", ",", "'do_flip'", ":", "False", "}", "\n", "train_dataset", "=", "KITTI", "(", "aug_params", ",", "split", "=", "'training'", ")", "\n", "\n", "", "train_loader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "pin_memory", "=", "False", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "drop_last", "=", "True", ")", "\n", "\n", "print", "(", "'Training with %d image pairs'", "%", "len", "(", "train_dataset", ")", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.readFlow": [[11, 31], ["open", "numpy.fromfile", "print", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.resize", "int", "int", "int", "int"], "function", ["None"], ["def", "readFlow", "(", "fn", ")", ":", "\n", "    ", "\"\"\" Read .flo file in Middlebury format\"\"\"", "\n", "# Code adapted from:", "\n", "# http://stackoverflow.com/questions/28013200/reading-middlebury-flow-files-with-python-bytes-array-numpy", "\n", "\n", "# WARNING: this will work on little-endian architectures (eg Intel x86) only!", "\n", "# print 'fn = %s'%(fn)", "\n", "with", "open", "(", "fn", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "magic", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "1", ")", "\n", "if", "202021.25", "!=", "magic", ":", "\n", "            ", "print", "(", "'Magic number incorrect. Invalid .flo file'", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "            ", "w", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "\n", "h", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "\n", "# print 'Reading %d x %d flo file\\n' % (w, h)", "\n", "data", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "2", "*", "int", "(", "w", ")", "*", "int", "(", "h", ")", ")", "\n", "# Reshape data into 3D array (columns, rows, bands)", "\n", "# The reshape here is for visualization, the original code is (w,h,2)", "\n", "return", "np", ".", "resize", "(", "data", ",", "(", "int", "(", "h", ")", ",", "int", "(", "w", ")", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.readPFM": [[32, 68], ["open", "open.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "open.readline", "map", "Exception", "open.readline().rstrip", "open.readline", "Exception", "re.match.groups", "open.readline"], "function", ["None"], ["", "", "", "def", "readPFM", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", "==", "b'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", "==", "b'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "rb'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.writeFlow": [[70, 100], ["open", "open.write", "numpy.array().astype().tofile", "numpy.array().astype().tofile", "numpy.zeros", "np.zeros.astype().tofile", "open.close", "numpy.array().astype", "numpy.array().astype", "np.zeros.astype", "numpy.array", "numpy.array", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.None.train.Logger.close"], ["", "def", "writeFlow", "(", "filename", ",", "uv", ",", "v", "=", "None", ")", ":", "\n", "    ", "\"\"\" Write optical flow to file.\n\n    If v is None, uv is assumed to contain both u and v channels,\n    stacked in depth.\n    Original code by Deqing Sun, adapted from Daniel Scharstein.\n    \"\"\"", "\n", "nBands", "=", "2", "\n", "\n", "if", "v", "is", "None", ":", "\n", "        ", "assert", "(", "uv", ".", "ndim", "==", "3", ")", "\n", "assert", "(", "uv", ".", "shape", "[", "2", "]", "==", "2", ")", "\n", "u", "=", "uv", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "uv", "[", ":", ",", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "u", "=", "uv", "\n", "\n", "", "assert", "(", "u", ".", "shape", "==", "v", ".", "shape", ")", "\n", "height", ",", "width", "=", "u", ".", "shape", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "# write the header", "\n", "f", ".", "write", "(", "TAG_CHAR", ")", "\n", "np", ".", "array", "(", "width", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "np", ".", "array", "(", "height", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "# arrange into matrix form", "\n", "tmp", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", "*", "nBands", ")", ")", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "]", "=", "u", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "+", "1", "]", "=", "v", "\n", "tmp", ".", "astype", "(", "np", ".", "float32", ")", ".", "tofile", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.readFlowKITTI": [[102, 108], ["cv2.imread", "flow[].astype"], "function", ["None"], ["", "def", "readFlowKITTI", "(", "filename", ")", ":", "\n", "    ", "flow", "=", "cv2", ".", "imread", "(", "filename", ",", "cv2", ".", "IMREAD_ANYDEPTH", "|", "cv2", ".", "IMREAD_COLOR", ")", "\n", "flow", "=", "flow", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "flow", ",", "valid", "=", "flow", "[", ":", ",", ":", ",", ":", "2", "]", ",", "flow", "[", ":", ",", ":", ",", "2", "]", "\n", "flow", "=", "(", "flow", "-", "2", "**", "15", ")", "/", "64.0", "\n", "return", "flow", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.readDispKITTI": [[109, 114], ["numpy.stack", "cv2.imread", "numpy.zeros_like"], "function", ["None"], ["", "def", "readDispKITTI", "(", "filename", ")", ":", "\n", "    ", "disp", "=", "cv2", ".", "imread", "(", "filename", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "/", "256.0", "\n", "valid", "=", "disp", ">", "0.0", "\n", "flow", "=", "np", ".", "stack", "(", "[", "-", "disp", ",", "np", ".", "zeros_like", "(", "disp", ")", "]", ",", "-", "1", ")", "\n", "return", "flow", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.writeFlowKITTI": [[116, 121], ["numpy.ones", "numpy.concatenate().astype", "cv2.imwrite", "numpy.concatenate"], "function", ["None"], ["", "def", "writeFlowKITTI", "(", "filename", ",", "uv", ")", ":", "\n", "    ", "uv", "=", "64.0", "*", "uv", "+", "2", "**", "15", "\n", "valid", "=", "np", ".", "ones", "(", "[", "uv", ".", "shape", "[", "0", "]", ",", "uv", ".", "shape", "[", "1", "]", ",", "1", "]", ")", "\n", "uv", "=", "np", ".", "concatenate", "(", "[", "uv", ",", "valid", "]", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "cv2", ".", "imwrite", "(", "filename", ",", "uv", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.read_gen": [[123, 141], ["splitext", "PIL.Image.open", "numpy.load", "readFlow().astype", "readPFM().astype", "frame_utils.readFlow", "len", "[].astype().transpose", "frame_utils.readPFM", "[].astype", "numpy.load"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.readFlow", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.frame_utils.readPFM"], ["", "def", "read_gen", "(", "file_name", ",", "pil", "=", "False", ")", ":", "\n", "    ", "ext", "=", "splitext", "(", "file_name", ")", "[", "-", "1", "]", "\n", "if", "ext", "==", "'.png'", "or", "ext", "==", "'.jpeg'", "or", "ext", "==", "'.ppm'", "or", "ext", "==", "'.jpg'", "or", "ext", "==", "'.webp'", ":", "\n", "        ", "return", "Image", ".", "open", "(", "file_name", ")", "\n", "", "elif", "ext", "==", "'.bin'", "or", "ext", "==", "'.raw'", ":", "\n", "        ", "return", "np", ".", "load", "(", "file_name", ")", "\n", "", "elif", "ext", "==", "'.flo'", ":", "\n", "        ", "return", "readFlow", "(", "file_name", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "ext", "==", "'.pfm'", ":", "\n", "        ", "flow", "=", "readPFM", "(", "file_name", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "len", "(", "flow", ".", "shape", ")", "==", "2", ":", "\n", "            ", "return", "flow", "\n", "", "else", ":", "\n", "            ", "return", "flow", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "", "", "elif", "ext", "==", "'.npz'", ":", "\n", "        ", "flow", "=", "np", ".", "load", "(", "file_name", ")", "[", "'optical_flow'", "]", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "return", "flow", "\n", "", "return", "[", "]", "", "", ""]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.make_colorwheel": [[22, 66], ["numpy.zeros", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "make_colorwheel", "(", ")", ":", "\n", "    ", "'''\n    Generates a color wheel for optical flow visualization as presented in:\n        Baker et al. \"A Database and Evaluation Methodology for Optical Flow\" (ICCV, 2007)\n        URL: http://vision.middlebury.edu/flow/flowEval-iccv07.pdf\n    According to the C++ source code of Daniel Scharstein\n    According to the Matlab source code of Deqing Sun\n    '''", "\n", "\n", "RY", "=", "15", "\n", "YG", "=", "6", "\n", "GC", "=", "4", "\n", "CB", "=", "11", "\n", "BM", "=", "13", "\n", "MR", "=", "6", "\n", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "(", "ncols", ",", "3", ")", ")", "\n", "col", "=", "0", "\n", "\n", "# RY", "\n", "colorwheel", "[", "0", ":", "RY", ",", "0", "]", "=", "255", "\n", "colorwheel", "[", "0", ":", "RY", ",", "1", "]", "=", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "RY", ")", "/", "RY", ")", "\n", "col", "=", "col", "+", "RY", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "255", "-", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "YG", ")", "/", "YG", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "255", "\n", "col", "=", "col", "+", "YG", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "GC", ")", "/", "GC", ")", "\n", "col", "=", "col", "+", "GC", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "255", "-", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "CB", ")", "/", "CB", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "255", "\n", "col", "=", "col", "+", "CB", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "BM", ")", "/", "BM", ")", "\n", "col", "=", "col", "+", "BM", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "255", "-", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "MR", ")", "/", "MR", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "255", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.flow_compute_color": [[68, 109], ["numpy.zeros", "flow_viz.make_colorwheel", "numpy.sqrt", "numpy.floor().astype", "range", "numpy.arctan2", "numpy.floor", "numpy.square", "numpy.square", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.make_colorwheel"], ["", "def", "flow_compute_color", "(", "u", ",", "v", ",", "convert_to_bgr", "=", "False", ")", ":", "\n", "    ", "'''\n    Applies the flow color wheel to (possibly clipped) flow components u and v.\n    According to the C++ source code of Daniel Scharstein\n    According to the Matlab source code of Deqing Sun\n    :param u: np.ndarray, input horizontal flow\n    :param v: np.ndarray, input vertical flow\n    :param convert_to_bgr: bool, whether to change ordering and output BGR instead of RGB\n    :return:\n    '''", "\n", "\n", "flow_image", "=", "np", ".", "zeros", "(", "(", "u", ".", "shape", "[", "0", "]", ",", "u", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "\n", "colorwheel", "=", "make_colorwheel", "(", ")", "# shape [55x3]", "\n", "ncols", "=", "colorwheel", ".", "shape", "[", "0", "]", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "u", ")", "+", "np", ".", "square", "(", "v", ")", ")", "\n", "a", "=", "np", ".", "arctan2", "(", "-", "v", ",", "-", "u", ")", "/", "np", ".", "pi", "\n", "\n", "fk", "=", "(", "a", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "+", "1", "\n", "k0", "=", "np", ".", "floor", "(", "fk", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "]", "=", "1", "\n", "f", "=", "fk", "-", "k0", "\n", "\n", "for", "i", "in", "range", "(", "colorwheel", ".", "shape", "[", "1", "]", ")", ":", "\n", "\n", "        ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "]", "/", "255.0", "\n", "col1", "=", "tmp", "[", "k1", "]", "/", "255.0", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "\n", "idx", "=", "(", "rad", "<=", "1", ")", "\n", "col", "[", "idx", "]", "=", "1", "-", "rad", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "col", "[", "~", "idx", "]", "=", "col", "[", "~", "idx", "]", "*", "0.75", "# out of range?", "\n", "\n", "# Note the 2-i => BGR instead of RGB", "\n", "ch_idx", "=", "2", "-", "i", "if", "convert_to_bgr", "else", "i", "\n", "flow_image", "[", ":", ",", ":", ",", "ch_idx", "]", "=", "np", ".", "floor", "(", "255", "*", "col", ")", "\n", "\n", "", "return", "flow_image", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.flow_to_color": [[111, 138], ["numpy.sqrt", "numpy.max", "flow_viz.flow_compute_color", "numpy.clip", "numpy.square", "numpy.square"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.flow_compute_color"], ["", "def", "flow_to_color", "(", "flow_uv", ",", "clip_flow", "=", "None", ",", "convert_to_bgr", "=", "False", ")", ":", "\n", "    ", "'''\n    Expects a two dimensional flow image of shape [H,W,2]\n    According to the C++ source code of Daniel Scharstein\n    According to the Matlab source code of Deqing Sun\n    :param flow_uv: np.ndarray of shape [H,W,2]\n    :param clip_flow: float, maximum clipping value for flow\n    :return:\n    '''", "\n", "\n", "assert", "flow_uv", ".", "ndim", "==", "3", ",", "'input flow must have three dimensions'", "\n", "assert", "flow_uv", ".", "shape", "[", "2", "]", "==", "2", ",", "'input flow must have shape [H,W,2]'", "\n", "\n", "if", "clip_flow", "is", "not", "None", ":", "\n", "        ", "flow_uv", "=", "np", ".", "clip", "(", "flow_uv", ",", "0", ",", "clip_flow", ")", "\n", "\n", "", "u", "=", "flow_uv", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flow_uv", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "u", ")", "+", "np", ".", "square", "(", "v", ")", ")", "\n", "rad_max", "=", "np", ".", "max", "(", "rad", ")", "\n", "\n", "epsilon", "=", "1e-5", "\n", "u", "=", "u", "/", "(", "rad_max", "+", "epsilon", ")", "\n", "v", "=", "v", "/", "(", "rad_max", "+", "epsilon", ")", "\n", "\n", "return", "flow_compute_color", "(", "u", ",", "v", ",", "convert_to_bgr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.make_color_wheel": [[145, 193], ["numpy.zeros", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "make_color_wheel", "(", ")", ":", "\n", "    ", "\"\"\"\n    Generate color wheel according Middlebury color code\n    :return: Color wheel\n    \"\"\"", "\n", "RY", "=", "15", "\n", "YG", "=", "6", "\n", "GC", "=", "4", "\n", "CB", "=", "11", "\n", "BM", "=", "13", "\n", "MR", "=", "6", "\n", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "[", "ncols", ",", "3", "]", ")", "\n", "\n", "col", "=", "0", "\n", "\n", "# RY", "\n", "colorwheel", "[", "0", ":", "RY", ",", "0", "]", "=", "255", "\n", "colorwheel", "[", "0", ":", "RY", ",", "1", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "RY", ")", "/", "RY", ")", ")", "\n", "col", "+=", "RY", "\n", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "YG", ")", "/", "YG", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "255", "\n", "col", "+=", "YG", "\n", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "GC", ")", "/", "GC", ")", ")", "\n", "col", "+=", "GC", "\n", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "CB", ")", "/", "CB", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "255", "\n", "col", "+=", "CB", "\n", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "BM", ")", "/", "BM", ")", ")", "\n", "col", "+=", "+", "BM", "\n", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "MR", ")", "/", "MR", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "255", "\n", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.compute_color": [[196, 238], ["numpy.zeros", "flow_viz.make_color_wheel", "numpy.size", "numpy.sqrt", "numpy.floor().astype", "range", "numpy.isnan", "numpy.isnan", "numpy.arctan2", "numpy.size", "numpy.logical_not", "numpy.uint8", "numpy.floor", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.make_color_wheel"], ["", "def", "compute_color", "(", "u", ",", "v", ")", ":", "\n", "    ", "\"\"\"\n    compute optical flow color map\n    :param u: optical flow horizontal map\n    :param v: optical flow vertical map\n    :return: optical flow in color code\n    \"\"\"", "\n", "[", "h", ",", "w", "]", "=", "u", ".", "shape", "\n", "img", "=", "np", ".", "zeros", "(", "[", "h", ",", "w", ",", "3", "]", ")", "\n", "nanIdx", "=", "np", ".", "isnan", "(", "u", ")", "|", "np", ".", "isnan", "(", "v", ")", "\n", "u", "[", "nanIdx", "]", "=", "0", "\n", "v", "[", "nanIdx", "]", "=", "0", "\n", "\n", "colorwheel", "=", "make_color_wheel", "(", ")", "\n", "ncols", "=", "np", ".", "size", "(", "colorwheel", ",", "0", ")", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "\n", "a", "=", "np", ".", "arctan2", "(", "-", "v", ",", "-", "u", ")", "/", "np", ".", "pi", "\n", "\n", "fk", "=", "(", "a", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "+", "1", "\n", "\n", "k0", "=", "np", ".", "floor", "(", "fk", ")", ".", "astype", "(", "int", ")", "\n", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "+", "1", "]", "=", "1", "\n", "f", "=", "fk", "-", "k0", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "np", ".", "size", "(", "colorwheel", ",", "1", ")", ")", ":", "\n", "        ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "-", "1", "]", "/", "255", "\n", "col1", "=", "tmp", "[", "k1", "-", "1", "]", "/", "255", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "\n", "idx", "=", "rad", "<=", "1", "\n", "col", "[", "idx", "]", "=", "1", "-", "rad", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "notidx", "=", "np", ".", "logical_not", "(", "idx", ")", "\n", "\n", "col", "[", "notidx", "]", "*=", "0.75", "\n", "img", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "uint8", "(", "np", ".", "floor", "(", "255", "*", "col", "*", "(", "1", "-", "nanIdx", ")", ")", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.flow_to_image": [[240, 276], ["max", "min", "max", "min", "numpy.sqrt", "max", "flow_viz.compute_color", "numpy.repeat", "numpy.uint8", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "abs", "abs", "numpy.finfo", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.flow_viz.compute_color"], ["", "def", "flow_to_image", "(", "flow", ")", ":", "\n", "    ", "\"\"\"\n    Convert flow into middlebury color code image\n    :param flow: optical flow map\n    :return: optical flow image in middlebury color\n    \"\"\"", "\n", "u", "=", "flow", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flow", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "maxu", "=", "-", "999.", "\n", "maxv", "=", "-", "999.", "\n", "minu", "=", "999.", "\n", "minv", "=", "999.", "\n", "\n", "idxUnknow", "=", "(", "abs", "(", "u", ")", ">", "UNKNOWN_FLOW_THRESH", ")", "|", "(", "abs", "(", "v", ")", ">", "UNKNOWN_FLOW_THRESH", ")", "\n", "u", "[", "idxUnknow", "]", "=", "0", "\n", "v", "[", "idxUnknow", "]", "=", "0", "\n", "\n", "maxu", "=", "max", "(", "maxu", ",", "np", ".", "max", "(", "u", ")", ")", "\n", "minu", "=", "min", "(", "minu", ",", "np", ".", "min", "(", "u", ")", ")", "\n", "\n", "maxv", "=", "max", "(", "maxv", ",", "np", ".", "max", "(", "v", ")", ")", "\n", "minv", "=", "min", "(", "minv", ",", "np", ".", "min", "(", "v", ")", ")", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "maxrad", "=", "max", "(", "-", "1", ",", "np", ".", "max", "(", "rad", ")", ")", "\n", "\n", "u", "=", "u", "/", "(", "maxrad", "+", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "\n", "v", "=", "v", "/", "(", "maxrad", "+", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "\n", "\n", "img", "=", "compute_color", "(", "u", ",", "v", ")", "\n", "\n", "idx", "=", "np", ".", "repeat", "(", "idxUnknow", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "2", ")", "\n", "img", "[", "idx", "]", "=", "0", "\n", "\n", "return", "np", ".", "uint8", "(", "img", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.FlowAugmentor.__init__": [[14, 33], ["torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "min_scale", "=", "-", "0.2", ",", "max_scale", "=", "0.5", ",", "do_flip", "=", "True", ")", ":", "\n", "\n", "# spatial augmentation params", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "min_scale", "=", "min_scale", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "self", ".", "spatial_aug_prob", "=", "0.8", "\n", "self", ".", "stretch_prob", "=", "0.8", "\n", "self", ".", "max_stretch", "=", "0.2", "\n", "\n", "# flip augmentation params", "\n", "self", ".", "do_flip", "=", "do_flip", "\n", "self", ".", "h_flip_prob", "=", "0.5", "\n", "self", ".", "v_flip_prob", "=", "0.1", "\n", "\n", "# photometric augmentation params", "\n", "self", ".", "photo_aug", "=", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0.5", "/", "3.14", ")", "\n", "self", ".", "asymmetric_color_aug_prob", "=", "0.2", "\n", "self", ".", "eraser_aug_prob", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.FlowAugmentor.color_transform": [[34, 49], ["numpy.random.rand", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.split", "augmentor.FlowAugmentor.photo_aug", "augmentor.FlowAugmentor.photo_aug", "augmentor.FlowAugmentor.photo_aug", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "color_transform", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "\"\"\" Photometric augmentation \"\"\"", "\n", "\n", "# asymmetric", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "asymmetric_color_aug_prob", ":", "\n", "            ", "img1", "=", "np", ".", "array", "(", "self", ".", "photo_aug", "(", "Image", ".", "fromarray", "(", "img1", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img2", "=", "np", ".", "array", "(", "self", ".", "photo_aug", "(", "Image", ".", "fromarray", "(", "img2", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# symmetric", "\n", "", "else", ":", "\n", "            ", "image_stack", "=", "np", ".", "concatenate", "(", "[", "img1", ",", "img2", "]", ",", "axis", "=", "0", ")", "\n", "image_stack", "=", "np", ".", "array", "(", "self", ".", "photo_aug", "(", "Image", ".", "fromarray", "(", "image_stack", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img1", ",", "img2", "=", "np", ".", "split", "(", "image_stack", ",", "2", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.FlowAugmentor.eraser_transform": [[50, 64], ["numpy.random.rand", "numpy.mean", "range", "img2.reshape", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "eraser_transform", "(", "self", ",", "img1", ",", "img2", ",", "bounds", "=", "[", "50", ",", "100", "]", ")", ":", "\n", "        ", "\"\"\" Occlusion augmentation \"\"\"", "\n", "\n", "ht", ",", "wd", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "eraser_aug_prob", ":", "\n", "            ", "mean_color", "=", "np", ".", "mean", "(", "img2", ".", "reshape", "(", "-", "1", ",", "3", ")", ",", "axis", "=", "0", ")", "\n", "for", "_", "in", "range", "(", "np", ".", "random", ".", "randint", "(", "1", ",", "3", ")", ")", ":", "\n", "                ", "x0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "wd", ")", "\n", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "ht", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "bounds", "[", "0", "]", ",", "bounds", "[", "1", "]", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "bounds", "[", "0", "]", ",", "bounds", "[", "1", "]", ")", "\n", "img2", "[", "y0", ":", "y0", "+", "dy", ",", "x0", ":", "x0", "+", "dx", ",", ":", "]", "=", "mean_color", "\n", "\n", "", "", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.FlowAugmentor.spatial_transform": [[65, 108], ["numpy.maximum", "numpy.clip", "numpy.clip", "numpy.random.randint", "numpy.random.randint", "numpy.random.uniform", "numpy.random.rand", "numpy.random.rand", "cv2.resize", "cv2.resize", "cv2.resize", "float", "float", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "spatial_transform", "(", "self", ",", "img1", ",", "img2", ",", "flow", ")", ":", "\n", "# randomly sample scale", "\n", "        ", "ht", ",", "wd", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "min_scale", "=", "np", ".", "maximum", "(", "\n", "(", "self", ".", "crop_size", "[", "0", "]", "+", "8", ")", "/", "float", "(", "ht", ")", ",", "\n", "(", "self", ".", "crop_size", "[", "1", "]", "+", "8", ")", "/", "float", "(", "wd", ")", ")", "\n", "\n", "scale", "=", "2", "**", "np", ".", "random", ".", "uniform", "(", "self", ".", "min_scale", ",", "self", ".", "max_scale", ")", "\n", "scale_x", "=", "scale", "\n", "scale_y", "=", "scale", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "stretch_prob", ":", "\n", "            ", "scale_x", "*=", "2", "**", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "max_stretch", ",", "self", ".", "max_stretch", ")", "\n", "scale_y", "*=", "2", "**", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "max_stretch", ",", "self", ".", "max_stretch", ")", "\n", "\n", "", "scale_x", "=", "np", ".", "clip", "(", "scale_x", ",", "min_scale", ",", "None", ")", "\n", "scale_y", "=", "np", ".", "clip", "(", "scale_y", ",", "min_scale", ",", "None", ")", "\n", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "spatial_aug_prob", ":", "\n", "# rescale the images", "\n", "            ", "img1", "=", "cv2", ".", "resize", "(", "img1", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "img2", "=", "cv2", ".", "resize", "(", "img2", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "flow", "=", "cv2", ".", "resize", "(", "flow", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "flow", "=", "flow", "*", "[", "scale_x", ",", "scale_y", "]", "\n", "\n", "", "if", "self", ".", "do_flip", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "h_flip_prob", ":", "# h-flip", "\n", "                ", "img1", "=", "img1", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "img2", "=", "img2", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "flow", "=", "flow", "[", ":", ",", ":", ":", "-", "1", "]", "*", "[", "-", "1.0", ",", "1.0", "]", "\n", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "v_flip_prob", ":", "# v-flip", "\n", "                ", "img1", "=", "img1", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "img2", "=", "img2", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "flow", "=", "flow", "[", ":", ":", "-", "1", ",", ":", "]", "*", "[", "1.0", ",", "-", "1.0", "]", "\n", "\n", "", "", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img1", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "x0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img1", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "\n", "img1", "=", "img1", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "img2", "=", "img2", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "flow", "=", "flow", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "\n", "return", "img1", ",", "img2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.FlowAugmentor.__call__": [[109, 119], ["augmentor.FlowAugmentor.color_transform", "augmentor.FlowAugmentor.eraser_transform", "augmentor.FlowAugmentor.spatial_transform", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.color_transform", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.eraser_transform", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.spatial_transform"], ["", "def", "__call__", "(", "self", ",", "img1", ",", "img2", ",", "flow", ")", ":", "\n", "        ", "img1", ",", "img2", "=", "self", ".", "color_transform", "(", "img1", ",", "img2", ")", "\n", "img1", ",", "img2", "=", "self", ".", "eraser_transform", "(", "img1", ",", "img2", ")", "\n", "img1", ",", "img2", ",", "flow", "=", "self", ".", "spatial_transform", "(", "img1", ",", "img2", ",", "flow", ")", "\n", "\n", "img1", "=", "np", ".", "ascontiguousarray", "(", "img1", ")", "\n", "img2", "=", "np", ".", "ascontiguousarray", "(", "img2", ")", "\n", "flow", "=", "np", ".", "ascontiguousarray", "(", "flow", ")", "\n", "\n", "return", "img1", ",", "img2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.__init__": [[121, 139], ["torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "min_scale", "=", "-", "0.2", ",", "max_scale", "=", "0.5", ",", "do_flip", "=", "False", ")", ":", "\n", "# spatial augmentation params", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "min_scale", "=", "min_scale", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "self", ".", "spatial_aug_prob", "=", "0.8", "\n", "self", ".", "stretch_prob", "=", "0.8", "\n", "self", ".", "max_stretch", "=", "0.2", "\n", "\n", "# flip augmentation params", "\n", "self", ".", "do_flip", "=", "do_flip", "\n", "self", ".", "h_flip_prob", "=", "0.5", "\n", "self", ".", "v_flip_prob", "=", "0.1", "\n", "\n", "# photometric augmentation params", "\n", "self", ".", "photo_aug", "=", "ColorJitter", "(", "brightness", "=", "0.3", ",", "contrast", "=", "0.3", ",", "saturation", "=", "0.3", ",", "hue", "=", "0.3", "/", "3.14", ")", "\n", "self", ".", "asymmetric_color_aug_prob", "=", "0.2", "\n", "self", ".", "eraser_aug_prob", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.color_transform": [[140, 145], ["numpy.concatenate", "numpy.array", "numpy.split", "augmentor.SparseFlowAugmentor.photo_aug", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "color_transform", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "image_stack", "=", "np", ".", "concatenate", "(", "[", "img1", ",", "img2", "]", ",", "axis", "=", "0", ")", "\n", "image_stack", "=", "np", ".", "array", "(", "self", ".", "photo_aug", "(", "Image", ".", "fromarray", "(", "image_stack", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img1", ",", "img2", "=", "np", ".", "split", "(", "image_stack", ",", "2", ",", "axis", "=", "0", ")", "\n", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.eraser_transform": [[146, 158], ["numpy.random.rand", "numpy.mean", "range", "img2.reshape", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "eraser_transform", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "ht", ",", "wd", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "eraser_aug_prob", ":", "\n", "            ", "mean_color", "=", "np", ".", "mean", "(", "img2", ".", "reshape", "(", "-", "1", ",", "3", ")", ",", "axis", "=", "0", ")", "\n", "for", "_", "in", "range", "(", "np", ".", "random", ".", "randint", "(", "1", ",", "3", ")", ")", ":", "\n", "                ", "x0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "wd", ")", "\n", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "ht", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "50", ",", "100", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "50", ",", "100", ")", "\n", "img2", "[", "y0", ":", "y0", "+", "dy", ",", "x0", ":", "x0", "+", "dx", ",", ":", "]", "=", "mean_color", "\n", "\n", "", "", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.resize_sparse_flow_map": [[159, 192], ["numpy.meshgrid", "numpy.stack", "coords.reshape().astype.reshape().astype.reshape().astype", "flow.reshape().astype.reshape().astype.reshape().astype", "valid.reshape().astype.reshape().astype.reshape().astype", "int", "int", "numpy.round().astype", "numpy.round().astype", "numpy.zeros", "numpy.zeros", "numpy.arange", "numpy.arange", "round", "round", "coords.reshape().astype.reshape().astype.reshape", "flow.reshape().astype.reshape().astype.reshape", "valid.reshape().astype.reshape().astype.reshape", "numpy.round", "numpy.round"], "methods", ["None"], ["", "def", "resize_sparse_flow_map", "(", "self", ",", "flow", ",", "valid", ",", "fx", "=", "1.0", ",", "fy", "=", "1.0", ")", ":", "\n", "        ", "ht", ",", "wd", "=", "flow", ".", "shape", "[", ":", "2", "]", "\n", "coords", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "wd", ")", ",", "np", ".", "arange", "(", "ht", ")", ")", "\n", "coords", "=", "np", ".", "stack", "(", "coords", ",", "axis", "=", "-", "1", ")", "\n", "\n", "coords", "=", "coords", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "flow", "=", "flow", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "valid", "=", "valid", ".", "reshape", "(", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "coords0", "=", "coords", "[", "valid", ">=", "1", "]", "\n", "flow0", "=", "flow", "[", "valid", ">=", "1", "]", "\n", "\n", "ht1", "=", "int", "(", "round", "(", "ht", "*", "fy", ")", ")", "\n", "wd1", "=", "int", "(", "round", "(", "wd", "*", "fx", ")", ")", "\n", "\n", "coords1", "=", "coords0", "*", "[", "fx", ",", "fy", "]", "\n", "flow1", "=", "flow0", "*", "[", "fx", ",", "fy", "]", "\n", "\n", "xx", "=", "np", ".", "round", "(", "coords1", "[", ":", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "yy", "=", "np", ".", "round", "(", "coords1", "[", ":", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "v", "=", "(", "xx", ">", "0", ")", "&", "(", "xx", "<", "wd1", ")", "&", "(", "yy", ">", "0", ")", "&", "(", "yy", "<", "ht1", ")", "\n", "xx", "=", "xx", "[", "v", "]", "\n", "yy", "=", "yy", "[", "v", "]", "\n", "flow1", "=", "flow1", "[", "v", "]", "\n", "\n", "flow_img", "=", "np", ".", "zeros", "(", "[", "ht1", ",", "wd1", ",", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "valid_img", "=", "np", ".", "zeros", "(", "[", "ht1", ",", "wd1", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "flow_img", "[", "yy", ",", "xx", "]", "=", "flow1", "\n", "valid_img", "[", "yy", ",", "xx", "]", "=", "1", "\n", "\n", "return", "flow_img", ",", "valid_img", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.spatial_transform": [[193, 232], ["numpy.maximum", "numpy.clip", "numpy.clip", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.random.uniform", "numpy.random.rand", "cv2.resize", "cv2.resize", "augmentor.SparseFlowAugmentor.resize_sparse_flow_map", "float", "float", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.resize_sparse_flow_map"], ["", "def", "spatial_transform", "(", "self", ",", "img1", ",", "img2", ",", "flow", ",", "valid", ")", ":", "\n", "# randomly sample scale", "\n", "\n", "        ", "ht", ",", "wd", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "min_scale", "=", "np", ".", "maximum", "(", "\n", "(", "self", ".", "crop_size", "[", "0", "]", "+", "1", ")", "/", "float", "(", "ht", ")", ",", "\n", "(", "self", ".", "crop_size", "[", "1", "]", "+", "1", ")", "/", "float", "(", "wd", ")", ")", "\n", "\n", "scale", "=", "2", "**", "np", ".", "random", ".", "uniform", "(", "self", ".", "min_scale", ",", "self", ".", "max_scale", ")", "\n", "scale_x", "=", "np", ".", "clip", "(", "scale", ",", "min_scale", ",", "None", ")", "\n", "scale_y", "=", "np", ".", "clip", "(", "scale", ",", "min_scale", ",", "None", ")", "\n", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "spatial_aug_prob", ":", "\n", "# rescale the images", "\n", "            ", "img1", "=", "cv2", ".", "resize", "(", "img1", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "img2", "=", "cv2", ".", "resize", "(", "img2", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "flow", ",", "valid", "=", "self", ".", "resize_sparse_flow_map", "(", "flow", ",", "valid", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ")", "\n", "\n", "", "if", "self", ".", "do_flip", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "# h-flip", "\n", "                ", "img1", "=", "img1", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "img2", "=", "img2", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "flow", "=", "flow", "[", ":", ",", ":", ":", "-", "1", "]", "*", "[", "-", "1.0", ",", "1.0", "]", "\n", "valid", "=", "valid", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "", "margin_y", "=", "20", "\n", "margin_x", "=", "50", "\n", "\n", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img1", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", "+", "margin_y", ")", "\n", "x0", "=", "np", ".", "random", ".", "randint", "(", "-", "margin_x", ",", "img1", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", "+", "margin_x", ")", "\n", "\n", "y0", "=", "np", ".", "clip", "(", "y0", ",", "0", ",", "img1", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "x0", "=", "np", ".", "clip", "(", "x0", ",", "0", ",", "img1", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "\n", "img1", "=", "img1", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "img2", "=", "img2", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "flow", "=", "flow", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "valid", "=", "valid", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "return", "img1", ",", "img2", ",", "flow", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.__call__": [[234, 245], ["augmentor.SparseFlowAugmentor.color_transform", "augmentor.SparseFlowAugmentor.eraser_transform", "augmentor.SparseFlowAugmentor.spatial_transform", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.color_transform", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.eraser_transform", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.augmentor.SparseFlowAugmentor.spatial_transform"], ["", "def", "__call__", "(", "self", ",", "img1", ",", "img2", ",", "flow", ",", "valid", ")", ":", "\n", "        ", "img1", ",", "img2", "=", "self", ".", "color_transform", "(", "img1", ",", "img2", ")", "\n", "img1", ",", "img2", "=", "self", ".", "eraser_transform", "(", "img1", ",", "img2", ")", "\n", "img1", ",", "img2", ",", "flow", ",", "valid", "=", "self", ".", "spatial_transform", "(", "img1", ",", "img2", ",", "flow", ",", "valid", ")", "\n", "\n", "img1", "=", "np", ".", "ascontiguousarray", "(", "img1", ")", "\n", "img2", "=", "np", ".", "ascontiguousarray", "(", "img2", ")", "\n", "flow", "=", "np", ".", "ascontiguousarray", "(", "flow", ")", "\n", "valid", "=", "np", ".", "ascontiguousarray", "(", "valid", ")", "\n", "\n", "return", "img1", ",", "img2", ",", "flow", ",", "valid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.__init__": [[10, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dims", ",", "mode", "=", "'sintel'", ")", ":", "\n", "        ", "self", ".", "ht", ",", "self", ".", "wd", "=", "dims", "[", "-", "2", ":", "]", "\n", "pad_ht", "=", "(", "(", "(", "self", ".", "ht", "//", "8", ")", "+", "1", ")", "*", "8", "-", "self", ".", "ht", ")", "%", "8", "\n", "pad_wd", "=", "(", "(", "(", "self", ".", "wd", "//", "8", ")", "+", "1", ")", "*", "8", "-", "self", ".", "wd", ")", "%", "8", "\n", "if", "mode", "==", "'sintel'", ":", "\n", "            ", "self", ".", "_pad", "=", "[", "pad_wd", "//", "2", ",", "pad_wd", "-", "pad_wd", "//", "2", ",", "pad_ht", "//", "2", ",", "pad_ht", "-", "pad_ht", "//", "2", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_pad", "=", "[", "pad_wd", "//", "2", ",", "pad_wd", "-", "pad_wd", "//", "2", ",", "0", ",", "pad_ht", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad": [[19, 21], ["torch.pad", "torch.pad"], "methods", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.pad"], ["", "", "def", "pad", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "return", "[", "F", ".", "pad", "(", "x", ",", "self", ".", "_pad", ",", "mode", "=", "'replicate'", ")", "for", "x", "in", "inputs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.InputPadder.unpad": [[22, 26], ["None"], "methods", ["None"], ["", "def", "unpad", "(", "self", ",", "x", ")", ":", "\n", "        ", "ht", ",", "wd", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "c", "=", "[", "self", ".", "_pad", "[", "2", "]", ",", "ht", "-", "self", ".", "_pad", "[", "3", "]", ",", "self", ".", "_pad", "[", "0", "]", ",", "wd", "-", "self", ".", "_pad", "[", "1", "]", "]", "\n", "return", "x", "[", "...", ",", "c", "[", "0", "]", ":", "c", "[", "1", "]", ",", "c", "[", "2", "]", ":", "c", "[", "3", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.forward_interpolate": [[28, 57], ["np.stack.detach().cpu().numpy", "numpy.meshgrid", "x1.reshape.reshape", "y1.reshape.reshape", "dx.reshape.reshape", "dy.reshape.reshape", "scipy.interpolate.griddata", "scipy.interpolate.griddata", "numpy.stack", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.arange", "numpy.arange", "np.stack.detach().cpu", "torch.from_numpy", "torch.from_numpy", "np.stack.detach"], "function", ["None"], ["", "", "def", "forward_interpolate", "(", "flow", ")", ":", "\n", "    ", "flow", "=", "flow", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dx", ",", "dy", "=", "flow", "[", "0", "]", ",", "flow", "[", "1", "]", "\n", "\n", "ht", ",", "wd", "=", "dx", ".", "shape", "\n", "x0", ",", "y0", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "wd", ")", ",", "np", ".", "arange", "(", "ht", ")", ")", "\n", "\n", "x1", "=", "x0", "+", "dx", "\n", "y1", "=", "y0", "+", "dy", "\n", "\n", "x1", "=", "x1", ".", "reshape", "(", "-", "1", ")", "\n", "y1", "=", "y1", ".", "reshape", "(", "-", "1", ")", "\n", "dx", "=", "dx", ".", "reshape", "(", "-", "1", ")", "\n", "dy", "=", "dy", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "valid", "=", "(", "x1", ">", "0", ")", "&", "(", "x1", "<", "wd", ")", "&", "(", "y1", ">", "0", ")", "&", "(", "y1", "<", "ht", ")", "\n", "x1", "=", "x1", "[", "valid", "]", "\n", "y1", "=", "y1", "[", "valid", "]", "\n", "dx", "=", "dx", "[", "valid", "]", "\n", "dy", "=", "dy", "[", "valid", "]", "\n", "\n", "flow_x", "=", "interpolate", ".", "griddata", "(", "\n", "(", "x1", ",", "y1", ")", ",", "dx", ",", "(", "x0", ",", "y0", ")", ",", "method", "=", "'nearest'", ",", "fill_value", "=", "0", ")", "\n", "\n", "flow_y", "=", "interpolate", ".", "griddata", "(", "\n", "(", "x1", ",", "y1", ")", ",", "dy", ",", "(", "x0", ",", "y0", ")", ",", "method", "=", "'nearest'", ",", "fill_value", "=", "0", ")", "\n", "\n", "flow", "=", "np", ".", "stack", "(", "[", "flow_x", ",", "flow_y", "]", ",", "axis", "=", "0", ")", "\n", "return", "torch", ".", "from_numpy", "(", "flow", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.bilinear_sampler": [[59, 74], ["coords.split", "torch.cat", "torch.cat", "torch.grid_sample", "mask.float"], "function", ["None"], ["", "def", "bilinear_sampler", "(", "img", ",", "coords", ",", "mode", "=", "'bilinear'", ",", "mask", "=", "False", ")", ":", "\n", "    ", "\"\"\" Wrapper for grid_sample, uses pixel coordinates \"\"\"", "\n", "H", ",", "W", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "xgrid", ",", "ygrid", "=", "coords", ".", "split", "(", "[", "1", ",", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "xgrid", "=", "2", "*", "xgrid", "/", "(", "W", "-", "1", ")", "-", "1", "\n", "ygrid", "=", "2", "*", "ygrid", "/", "(", "H", "-", "1", ")", "-", "1", "\n", "\n", "grid", "=", "torch", ".", "cat", "(", "[", "xgrid", ",", "ygrid", "]", ",", "dim", "=", "-", "1", ")", "\n", "img", "=", "F", ".", "grid_sample", "(", "img", ",", "grid", ",", "align_corners", "=", "True", ")", "\n", "\n", "if", "mask", ":", "\n", "        ", "mask", "=", "(", "xgrid", ">", "-", "1", ")", "&", "(", "ygrid", ">", "-", "1", ")", "&", "(", "xgrid", "<", "1", ")", "&", "(", "ygrid", "<", "1", ")", "\n", "return", "img", ",", "mask", ".", "float", "(", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.coords_grid": [[76, 80], ["torch.meshgrid", "torch.meshgrid", "torch.stack().float", "torch.stack().float", "coords[].repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "coords_grid", "(", "batch", ",", "ht", ",", "wd", ")", ":", "\n", "    ", "coords", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "ht", ")", ",", "torch", ".", "arange", "(", "wd", ")", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "coords", "[", ":", ":", "-", "1", "]", ",", "dim", "=", "0", ")", ".", "float", "(", ")", "\n", "return", "coords", "[", "None", "]", ".", "repeat", "(", "batch", ",", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.utils.upflow8": [[82, 85], ["torch.interpolate"], "function", ["None"], ["", "def", "upflow8", "(", "flow", ",", "mode", "=", "'bilinear'", ")", ":", "\n", "    ", "new_size", "=", "(", "8", "*", "flow", ".", "shape", "[", "2", "]", ",", "8", "*", "flow", ".", "shape", "[", "3", "]", ")", "\n", "return", "8", "*", "F", ".", "interpolate", "(", "flow", ",", "size", "=", "new_size", ",", "mode", "=", "mode", ",", "align_corners", "=", "True", ")", "", "", ""]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.args._add_arguments_for_module": [[8, 115], ["args.module_classes_to_dict", "parser.add_argument", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "vars", "inspect.getargspec", "dict", "parser.parse_known_args", "argparse.ArgumentParser.parse_known_args", "zip", "print", "print", "ValueError", "param_defaults.keys", "parser.add_argument", "module_classes_to_dict.keys", "module_classes_to_dict.keys", "dict.keys", "parser.add_argument", "args._get_type_from_arg", "forced_default_types.keys", "args._get_type_from_arg", "unknown_default_types.keys", "parser.add_argument", "ValueError", "len"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.args.module_classes_to_dict", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.args._get_type_from_arg", "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.args._get_type_from_arg"], ["def", "_add_arguments_for_module", "(", "parser", ",", "\n", "module", ",", "\n", "name", ",", "\n", "default_class", ",", "\n", "add_class_argument", "=", "True", ",", "# whether to add class choice as argument", "\n", "include_classes", "=", "\"*\"", ",", "\n", "exclude_classes", "=", "[", "]", ",", "\n", "exclude_params", "=", "[", "\"self\"", ",", "\"args\"", "]", ",", "\n", "param_defaults", "=", "{", "}", ",", "# allows to overwrite any default param", "\n", "forced_default_types", "=", "{", "}", ",", "# allows to set types for known arguments", "\n", "unknown_default_types", "=", "{", "}", ")", ":", "# allows to set types for unknown arguments", "\n", "\n", "# -------------------------------------------------------------------------", "\n", "# Determine possible choices from class names in module, possibly apply include/exclude filters", "\n", "# -------------------------------------------------------------------------", "\n", "    ", "module_dict", "=", "module_classes_to_dict", "(", "\n", "module", ",", "include_classes", "=", "include_classes", ",", "exclude_classes", "=", "exclude_classes", ")", "\n", "\n", "# -------------------------------------------------------------------------", "\n", "# Parse known arguments to determine choice for argument name", "\n", "# -------------------------------------------------------------------------", "\n", "if", "add_class_argument", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "\"--%s\"", "%", "name", ",", "type", "=", "str", ",", "default", "=", "default_class", ",", "choices", "=", "module_dict", ".", "keys", "(", ")", ")", "\n", "known_args", "=", "parser", ".", "parse_known_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# build a temporary parser, and do not add the class as argument", "\n", "        ", "tmp_parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "tmp_parser", ".", "add_argument", "(", "\n", "\"--%s\"", "%", "name", ",", "type", "=", "str", ",", "default", "=", "default_class", ",", "choices", "=", "module_dict", ".", "keys", "(", ")", ")", "\n", "known_args", "=", "tmp_parser", ".", "parse_known_args", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "[", "0", "]", "\n", "\n", "", "class_name", "=", "vars", "(", "known_args", ")", "[", "name", "]", "\n", "\n", "# -------------------------------------------------------------------------", "\n", "# If class is None, there is no point in trying to parse further arguments", "\n", "# -------------------------------------------------------------------------", "\n", "if", "class_name", "is", "None", ":", "\n", "        ", "return", "\n", "\n", "# -------------------------------------------------------------------------", "\n", "# Get constructor of that argument choice", "\n", "# -------------------------------------------------------------------------", "\n", "", "class_constructor", "=", "module_dict", "[", "class_name", "]", "\n", "\n", "# -------------------------------------------------------------------------", "\n", "# Determine constructor argument names and defaults", "\n", "# -------------------------------------------------------------------------", "\n", "try", ":", "\n", "        ", "argspec", "=", "inspect", ".", "getargspec", "(", "class_constructor", ".", "__init__", ")", "\n", "argspec_defaults", "=", "argspec", ".", "defaults", "if", "argspec", ".", "defaults", "is", "not", "None", "else", "[", "]", "\n", "full_args", "=", "argspec", ".", "args", "\n", "default_args_dict", "=", "dict", "(", "zip", "(", "argspec", ".", "args", "[", "-", "len", "(", "argspec_defaults", ")", ":", "]", ",", "argspec_defaults", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "print", "(", "argspec", ")", "\n", "print", "(", "argspec", ".", "defaults", ")", "\n", "raise", "ValueError", "(", "\"unknown_default_types should be adjusted for module: '%s.py'\"", "%", "name", ")", "\n", "\n", "# -------------------------------------------------------------------------", "\n", "# Add sub_arguments", "\n", "# -------------------------------------------------------------------------", "\n", "", "for", "argname", "in", "full_args", ":", "\n", "\n", "# ---------------------------------------------------------------------", "\n", "# Skip", "\n", "# ---------------------------------------------------------------------", "\n", "        ", "if", "argname", "in", "exclude_params", ":", "\n", "            ", "continue", "\n", "\n", "# ---------------------------------------------------------------------", "\n", "# Sub argument name", "\n", "# ---------------------------------------------------------------------", "\n", "", "sub_arg_name", "=", "\"%s_%s\"", "%", "(", "name", ",", "argname", ")", "\n", "\n", "# ---------------------------------------------------------------------", "\n", "# If a default argument is given, take that one", "\n", "# ---------------------------------------------------------------------", "\n", "if", "argname", "in", "param_defaults", ".", "keys", "(", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "\n", "\"--%s\"", "%", "sub_arg_name", ",", "\n", "type", "=", "_get_type_from_arg", "(", "param_defaults", "[", "argname", "]", ")", ",", "\n", "default", "=", "param_defaults", "[", "argname", "]", ")", "\n", "\n", "# ---------------------------------------------------------------------", "\n", "# If a default parameter can be inferred from the module, pick that one", "\n", "# ---------------------------------------------------------------------", "\n", "", "elif", "argname", "in", "default_args_dict", ".", "keys", "(", ")", ":", "\n", "\n", "# -----------------------------------------------------------------", "\n", "# Check for forced default types", "\n", "# -----------------------------------------------------------------", "\n", "            ", "if", "argname", "in", "forced_default_types", ".", "keys", "(", ")", ":", "\n", "                ", "argtype", "=", "forced_default_types", "[", "argname", "]", "\n", "", "else", ":", "\n", "                ", "argtype", "=", "_get_type_from_arg", "(", "default_args_dict", "[", "argname", "]", ")", "\n", "", "parser", ".", "add_argument", "(", "\n", "\"--%s\"", "%", "sub_arg_name", ",", "type", "=", "argtype", ",", "default", "=", "default_args_dict", "[", "argname", "]", ")", "\n", "\n", "# ---------------------------------------------------------------------", "\n", "# Take from the unkowns list", "\n", "# ---------------------------------------------------------------------", "\n", "", "elif", "argname", "in", "unknown_default_types", ".", "keys", "(", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "\"--%s\"", "%", "sub_arg_name", ",", "type", "=", "unknown_default_types", "[", "argname", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Do not know how to handle argument '%s' for class '%s'\"", "%", "(", "argname", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.args.module_classes_to_dict": [[117, 150], ["dict", "dict", "args.filter_list_of_strings", "dict", "isinstance", "isinstance", "dict.keys", "getattr", "dir", "dict.items", "inspect.isclass", "dict.items", "getattr"], "function", ["home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.args.filter_list_of_strings"], ["", "", "", "def", "module_classes_to_dict", "(", "module", ",", "include_classes", "=", "\"*\"", ",", "exclude_classes", "=", "(", ")", ")", ":", "\n", "# -------------------------------------------------------------------------", "\n", "# If arguments are strings, convert them to a list", "\n", "# -------------------------------------------------------------------------", "\n", "    ", "if", "include_classes", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "include_classes", ",", "str", ")", ":", "\n", "            ", "include_classes", "=", "[", "include_classes", "]", "\n", "\n", "", "", "if", "exclude_classes", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "exclude_classes", ",", "str", ")", ":", "\n", "            ", "exclude_classes", "=", "[", "exclude_classes", "]", "\n", "\n", "# -------------------------------------------------------------------------", "\n", "# Obtain dictionary from given module", "\n", "# -------------------------------------------------------------------------", "\n", "", "", "item_dict", "=", "dict", "(", "[", "(", "name", ",", "getattr", "(", "module", ",", "name", ")", ")", "for", "name", "in", "dir", "(", "module", ")", "]", ")", "\n", "\n", "# -------------------------------------------------------------------------", "\n", "# Filter classes", "\n", "# -------------------------------------------------------------------------", "\n", "item_dict", "=", "dict", "(", "[", "\n", "(", "name", ",", "value", ")", "for", "name", ",", "value", "in", "item_dict", ".", "items", "(", ")", "if", "inspect", ".", "isclass", "(", "getattr", "(", "module", ",", "name", ")", ")", "\n", "]", ")", "\n", "\n", "filtered_keys", "=", "filter_list_of_strings", "(", "\n", "item_dict", ".", "keys", "(", ")", ",", "include", "=", "include_classes", ",", "exclude", "=", "exclude_classes", ")", "\n", "\n", "# -------------------------------------------------------------------------", "\n", "# Construct dictionary from matched results", "\n", "# -------------------------------------------------------------------------", "\n", "result_dict", "=", "dict", "(", "[", "(", "name", ",", "value", ")", "for", "name", ",", "value", "in", "item_dict", ".", "items", "(", ")", "if", "name", "in", "filtered_keys", "]", ")", "\n", "\n", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.args.filter_list_of_strings": [[152, 157], ["list", "list", "list", "itertools.chain.from_iterable", "itertools.chain.from_iterable", "set", "set", "fnmatch.filter", "fnmatch.filter"], "function", ["None"], ["", "def", "filter_list_of_strings", "(", "lst", ",", "include", "=", "\"*\"", ",", "exclude", "=", "(", ")", ")", ":", "\n", "    ", "filtered_matches", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "[", "fnmatch", ".", "filter", "(", "lst", ",", "x", ")", "for", "x", "in", "include", "]", ")", ")", "\n", "filtered_nomatch", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "[", "fnmatch", ".", "filter", "(", "lst", ",", "x", ")", "for", "x", "in", "exclude", "]", ")", ")", "\n", "matched", "=", "list", "(", "set", "(", "filtered_matches", ")", "-", "set", "(", "filtered_nomatch", ")", ")", "\n", "return", "matched", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.args._get_type_from_arg": [[159, 164], ["isinstance", "type"], "function", ["None"], ["", "def", "_get_type_from_arg", "(", "arg", ")", ":", "\n", "    ", "if", "isinstance", "(", "arg", ",", "bool", ")", ":", "\n", "        ", "return", "str2bool", "\n", "", "else", ":", "\n", "        ", "return", "type", "(", "arg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.args.str2bool": [[166, 173], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.abdo-eldesokey_RAFT-NCUP.utils.args.str2intlist": [[174, 176], ["int", "x.strip", "[].split", "v.strip"], "function", ["None"], ["", "", "def", "str2intlist", "(", "v", ")", ":", "\n", "    ", "return", "[", "int", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "v", ".", "strip", "(", ")", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "]", "\n", "", ""]]}