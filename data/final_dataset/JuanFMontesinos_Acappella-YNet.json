{"home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.None.default.argparse_default": [[30, 60], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "float"], "function", ["None"], ["def", "argparse_default", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Y-Net training'", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--model'", ",", "help", "=", "'model name'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--workname'", ",", "help", "=", "'Experiment name'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--arxiv_path'", ",", "help", "=", "'Main directory for all the experiments'", ",", "\n", "type", "=", "str", ",", "default", "=", "'./debug_dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_from'", ",", "help", "=", "'Use some weights to start from'", ",", "\n", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "help", "=", "'Device for training the experiments'", ",", "\n", "type", "=", "str", ",", "default", "=", "'cuda:0'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--force_dumping'", ",", "dest", "=", "'dumping'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--legacy'", ",", "dest", "=", "'legacy'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--white_metrics'", ",", "dest", "=", "'white_metrics'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--testing'", ",", "dest", "=", "'testing'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "set_defaults", "(", "testing", "=", "False", ",", "dumping", "=", "False", ",", "remix", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--test_in'", ",", "nargs", "=", "'+'", ",", "type", "=", "str", ",", "default", "=", "[", "]", ",", "\n", "help", "=", "f'List of datasets to test on,allowed ones {POSSIBLE_DATASETS}'", ")", "\n", "parser", ".", "add_argument", "(", "'--remix'", ",", "dest", "=", "'remix'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Set remix true or false, this is only used in testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--loudness_levels'", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "default", "=", "[", "1.", "]", ",", "help", "=", "'loudness levels for evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--loudness_train'", ",", "default", "=", "1", ",", "help", "=", "'loudness levels'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "try", ":", "\n", "        ", "args", ".", "loudness_train", "=", "float", "(", "args", ".", "loudness_train", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.None.example.get_metrics": [[10, 13], ["streamlit.cache", "VnBSS.utils.metrics.get_metrics"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.get_metrics"], ["@", "st", ".", "cache", "(", ")", "\n", "def", "get_metrics", "(", "path", ")", ":", "\n", "    ", "return", "_gm", "(", "path", ")", "# wrapper around this function to use st.cache", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.None.example.return_files": [[15, 18], ["sorted", "len", "os.listdir"], "function", ["None"], ["", "def", "return_files", "(", "path", ")", ":", "\n", "    ", "files", "=", "sorted", "(", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "path", ")", "]", ")", "\n", "return", "files", ",", "len", "(", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.None.example.get_audio_files": [[20, 23], ["sorted", "os.path.join", "os.listdir", "x.endswith"], "function", ["None"], ["", "def", "get_audio_files", "(", "path", ")", ":", "\n", "    ", "files", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "path", ",", "x", ")", "for", "x", "in", "os", ".", "listdir", "(", "path", ")", "if", "x", ".", "endswith", "(", "(", "'.mp3'", ",", "'.wav'", ")", ")", "]", ")", "\n", "yield", "from", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.None.example.get_video_files": [[25, 28], ["sorted", "os.path.join", "os.listdir", "x.endswith"], "function", ["None"], ["", "def", "get_video_files", "(", "path", ")", ":", "\n", "    ", "files", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "path", ",", "x", ")", "for", "x", "in", "os", ".", "listdir", "(", "path", ")", "if", "x", ".", "endswith", "(", "'.mp4'", ")", "]", ")", "\n", "yield", "from", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.None.example.get_images_files": [[30, 33], ["sorted", "os.path.join", "os.listdir", "x.endswith"], "function", ["None"], ["", "def", "get_images_files", "(", "path", ")", ":", "\n", "    ", "files", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "path", ",", "x", ")", "for", "x", "in", "os", ".", "listdir", "(", "path", ")", "if", "x", ".", "endswith", "(", "'.png'", ")", "]", ")", "\n", "yield", "from", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.None.example.get_metadata": [[35, 39], ["sorted", "os.path.join", "os.listdir", "x.endswith", "flerken.utils.BaseDict().load", "flerken.utils.BaseDict"], "function", ["None"], ["", "def", "get_metadata", "(", "path", ")", ":", "\n", "    ", "files", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "path", ",", "x", ")", "for", "x", "in", "os", ".", "listdir", "(", "path", ")", "if", "x", ".", "endswith", "(", "'.json'", ")", "]", ")", "\n", "for", "p", "in", "files", ":", "\n", "        ", "yield", "BaseDict", "(", ")", ".", "load", "(", "p", ")", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.VnBSS.trainer.Trainer.__init__": [[55, 66], ["trainer.Trainer.__init__"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "main_device", ",", "model", ":", "torch", ".", "nn", ".", "Module", ",", "dataparallel", ":", "bool", ",", "input_shape", ",", "*", ",", "\n", "debug", ",", "multitask", ",", "n_epochs", ",", "criterion", ",", "initializable_layers", ",", "\n", "dump_iteration_files", ",", "white_metrics", ")", ":", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", "main_device", ",", "model", ",", "dataparallel", ",", "input_shape", ")", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "multitask", "=", "multitask", "\n", "self", ".", "EPOCHS", "=", "n_epochs", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "dump_files", "=", "dump_iteration_files", "\n", "self", ".", "white_metrics", "=", "white_metrics", "\n", "self", ".", "_model", ".", "initializable_layers", "=", "initializable_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.VnBSS.trainer.Trainer.loader_mapping": [[67, 74], ["isinstance"], "methods", ["None"], ["", "def", "loader_mapping", "(", "self", ",", "x", ")", ":", "\n", "        ", "(", "inputs", ",", "a", ",", "b", ",", "c", ")", "=", "x", "\n", "if", "isinstance", "(", "inputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "\n", "            ", "return", "{", "'gt'", ":", "None", ",", "'inputs'", ":", "inputs", ",", "'vs'", ":", "{", "'trace'", ":", "[", "x", ".", "trace", "for", "x", "in", "a", "]", ",", "'datasets'", ":", "b", ",", "'indices'", ":", "c", "}", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'gt'", ":", "None", ",", "'inputs'", ":", "[", "inputs", "]", ",", "'vs'", ":", "{", "'trace'", ":", "[", "x", ".", "trace", "for", "x", "in", "a", "]", ",", "'datasets'", ":", "b", ",", "'indices'", ":", "c", "}", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.VnBSS.trainer.Trainer.backpropagate": [[75, 86], ["trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.loss.backward", "trainer.Trainer.gradients", "trainer.Trainer.optimizer.step", "torch.isnan().any", "torch.isinf().any", "torch.isnan().any", "torch.isinf().any", "torch.isnan", "torch.isinf", "torch.isnan", "torch.isinf"], "methods", ["None"], ["", "", "def", "backpropagate", "(", "self", ",", "debug", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "model", ".", "complex_enabled", "and", "self", ".", "model", ".", "loss_on_mask", ":", "\n", "            ", "if", "torch", ".", "isnan", "(", "self", ".", "loss", ")", ".", "any", "(", ")", "or", "torch", ".", "isinf", "(", "self", ".", "loss", ")", ".", "any", "(", ")", ":", "\n", "                ", "return", "None", "\n", "", "", "elif", "debug", "[", "'isnan'", "]", ":", "\n", "            ", "assert", "not", "torch", ".", "isnan", "(", "self", ".", "loss", ")", ".", "any", "(", ")", "\n", "assert", "not", "torch", ".", "isinf", "(", "self", ".", "loss", ")", ".", "any", "(", ")", "\n", "", "self", ".", "loss", ".", "backward", "(", ")", "\n", "self", ".", "gradients", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "# def gradients(self):", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.VnBSS.trainer.Trainer.hook": [[89, 186], ["trainer.Trainer.IO.writer.add_scalars", "trainer.Trainer.IO.writer.add_scalars", "trainer.Trainer.IO.writer.add_scalars", "os.path.join", "[].get", "[].get", "[].get", "range", "str", "torch.sigmoid", "trainer.Trainer.model.tanh", "len", "os.path.join", "flerken.utils.BaseDict", "flerken.utils.BaseDict.write", "matplotlib.close", "weighted_loss[].detach", "weighted_loss[].detach", "coef[].detach", "coef[].detach", "alignment_loss.detach", "separation_loss.detach", "torch.view_as_real", "os.path.exists", "os.makedirs", "flerken.utils.BaseDict", "[].item", "[].item", "[].item", "[].item", "os.path.join", "trainer.Trainer.model.save_audio", "trainer.Trainer.model.save_video", "torch.stack", "trainer.Trainer.model.save_video", "trainer.Trainer.model.save_audio", "trainer.Trainer.model.save_audio", "trainer.Trainer.model.save_loss_mask", "trainer.Trainer.model.save_loss_mask", "al_loss.item", "os.path.join", "os.path.join", "torch.cat.new_ones", "torch.cat", "torch.stack", "torch.stack.append", "os.path.join", "os.path.join", "trainer.Trainer.model.save_audio", "os.path.join", "os.path.join", "os.path.join", "[].item", "torch.cat.permute", "os.path.join", "torch.from_numpy", "utils.overlay_sk.get_video_array"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.tanh", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.save_audio", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.save_video", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.save_video", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.save_audio", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.save_audio", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.save_loss_mask", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.save_loss_mask", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.save_audio", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.get_video_array"], ["", "def", "hook", "(", "self", ",", "vrs", ")", ":", "\n", "        ", "pred", ",", "separation_loss", ",", "alignment_loss", "=", "vrs", "[", "'pred'", "]", "[", "'inference_mask'", "]", ",", "vrs", "[", "'pred'", "]", "[", "'separation_loss'", "]", ",", "vrs", "[", "'pred'", "]", "[", "'alignment_loss'", "]", "\n", "\n", "if", "alignment_loss", "is", "not", "None", ":", "\n", "            ", "weighted_loss", ",", "coef", "=", "vrs", "[", "'pred'", "]", "[", "'weighted_loss'", "]", ",", "vrs", "[", "'pred'", "]", "[", "'loss_coef'", "]", "\n", "\n", "self", ".", "IO", ".", "writer", ".", "add_scalars", "(", "f'{self.state}_MTWloss'", ",", "\n", "{", "'loss_mt'", ":", "weighted_loss", "[", "1", "]", ".", "detach", "(", ")", ",", "\n", "'loss_sep'", ":", "weighted_loss", "[", "0", "]", ".", "detach", "(", ")", "}", ",", "\n", "global_step", "=", "self", ".", "absolute_iter", ")", "\n", "\n", "self", ".", "IO", ".", "writer", ".", "add_scalars", "(", "f'{self.state}_loss_coef'", ",", "\n", "{", "'mt'", ":", "coef", "[", "1", "]", ".", "detach", "(", ")", ",", "\n", "'sep'", ":", "coef", "[", "0", "]", ".", "detach", "(", ")", "}", ",", "\n", "global_step", "=", "self", ".", "absolute_iter", ")", "\n", "\n", "self", ".", "IO", ".", "writer", ".", "add_scalars", "(", "f'{self.state}_MTloss'", ",", "\n", "{", "'loss_mt'", ":", "alignment_loss", ".", "detach", "(", ")", ",", "\n", "'loss_sep'", ":", "separation_loss", ".", "detach", "(", ")", "}", ",", "\n", "global_step", "=", "self", ".", "absolute_iter", ")", "\n", "\n", "", "if", "(", "self", ".", "dump_files", "[", "'enabled'", "]", "and", "self", ".", "dump_files", "[", "self", ".", "state", "]", "[", "'enabled'", "]", "and", "(", "self", ".", "absolute_iter", "%", "self", ".", "dump_files", "[", "self", ".", "state", "]", "[", "'iter_freq'", "]", ")", "==", "0", "and", "(", "self", ".", "epoch", "%", "self", ".", "dump_files", "[", "self", ".", "state", "]", "[", "'epoch_freq'", "]", "==", "0", ")", ")", "or", "self", ".", "dump_files", "[", "'force'", "]", ":", "\n", "            ", "dump_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "IO", ".", "workdir", ",", "self", ".", "state", ",", "str", "(", "self", ".", "epoch", ")", ")", "\n", "audios", "=", "vrs", "[", "'inputs'", "]", "[", "0", "]", "[", "'audio'", "]", "\n", "audios_acmt", "=", "vrs", "[", "'inputs'", "]", "[", "0", "]", ".", "get", "(", "'audio_acmt'", ")", "\n", "videos", "=", "vrs", "[", "'inputs'", "]", "[", "0", "]", ".", "get", "(", "'video'", ")", "\n", "landmarks", "=", "vrs", "[", "'inputs'", "]", "[", "0", "]", ".", "get", "(", "'landmarks'", ")", "# N,C,T,V,M  batch, channels, temporal, joints, n_people", "\n", "traces", "=", "vrs", "[", "'vs'", "]", "[", "'trace'", "]", "\n", "estimated_wav", "=", "vrs", "[", "'pred'", "]", "[", "'estimated_wav'", "]", "\n", "inference_mask", "=", "vrs", "[", "'pred'", "]", "[", "'inference_mask'", "]", "\n", "loss_mask", "=", "vrs", "[", "'pred'", "]", "[", "'loss_mask'", "]", "\n", "\n", "if", "self", ".", "model", ".", "binary_mask", ":", "\n", "                ", "loss_mask", "=", "torch", ".", "sigmoid", "(", "loss_mask", ")", "\n", "", "if", "inference_mask", "is", "not", "None", "and", "self", ".", "model", ".", "complex_enabled", ":", "\n", "                ", "inference_mask", "=", "self", ".", "model", ".", "tanh", "(", "torch", ".", "view_as_real", "(", "inference_mask", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "traces", ")", ")", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "dump_path", ",", "f'{self.epoch:03d}it_{self.absolute_iter:06d}_el{i:02d}'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "file_path", ")", "\n", "", "trace", "=", "BaseDict", "(", "traces", "[", "i", "]", ")", "\n", "if", "not", "self", ".", "white_metrics", ":", "\n", "                    ", "al_loss", "=", "vrs", "[", "'pred'", "]", "[", "'alignment_loss'", "]", "\n", "al_loss", "=", "al_loss", ".", "item", "(", ")", "if", "al_loss", "is", "not", "None", "else", "'not_computed'", "\n", "loss", "=", "BaseDict", "(", "{", "'separation_loss'", ":", "vrs", "[", "'pred'", "]", "[", "'separation_loss'", "]", ".", "item", "(", ")", ",", "\n", "'alignment_loss'", ":", "al_loss", "}", ")", "\n", "trace", "[", "'loss'", "]", "=", "loss", "\n", "", "try", ":", "\n", "                    ", "trace", "[", "'sdr'", "]", "=", "vrs", "[", "'bss_per_sample'", "]", "[", "'sdr'", "]", "[", "i", "]", ".", "item", "(", ")", "\n", "trace", "[", "'sar'", "]", "=", "vrs", "[", "'bss_per_sample'", "]", "[", "'sar'", "]", "[", "i", "]", ".", "item", "(", ")", "\n", "trace", "[", "'sir'", "]", "=", "vrs", "[", "'bss_per_sample'", "]", "[", "'sir'", "]", "[", "i", "]", ".", "item", "(", ")", "\n", "trace", "[", "'si-sdr'", "]", "=", "vrs", "[", "'bss'", "]", "[", "'si-sdr'", "]", ".", "item", "(", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "pass", "\n", "", "trace", ".", "write", "(", "os", ".", "path", ".", "join", "(", "file_path", ",", "f'metadata.json'", ")", ")", "\n", "if", "self", ".", "white_metrics", ":", "\n", "                    ", "continue", "\n", "", "if", "self", ".", "dump_files", "[", "'audio'", "]", ":", "\n", "                    ", "self", ".", "model", ".", "save_audio", "(", "i", ",", "audios", ",", "os", ".", "path", ".", "join", "(", "file_path", ",", "'waveform_main.wav'", ")", ")", "\n", "", "if", "videos", "is", "not", "None", "and", "self", ".", "dump_files", "[", "'video'", "]", ":", "\n", "                    ", "self", ".", "model", ".", "save_video", "(", "i", ",", "videos", ",", "os", ".", "path", ".", "join", "(", "file_path", ",", "'video.mp4'", ")", ")", "\n", "", "if", "(", "landmarks", "is", "not", "None", ")", "and", "self", ".", "dump_files", "[", "'landmarks'", "]", ":", "\n", "                    ", "landmarks_as_videos", "=", "[", "]", "\n", "for", "ld", "in", "landmarks", ":", "\n", "                        ", "ld", "=", "ld", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "[", "...", ",", "0", "]", "\n", "fake", "=", "ld", ".", "new_ones", "(", "ld", ".", "shape", "[", "0", "]", ",", "1", ",", "ld", ".", "shape", "[", "-", "1", "]", ")", "\n", "ld", "=", "torch", ".", "cat", "(", "[", "ld", ",", "fake", "]", ",", "dim", "=", "1", ")", "\n", "video_i", "=", "torch", ".", "stack", "(", "[", "torch", ".", "from_numpy", "(", "x", ")", "\n", "for", "x", "in", "get_video_array", "(", "ld", ",", "self", ".", "model", ".", "graph_net", ".", "graph", ".", "edge", ",", "1", ",", ")", "]", ")", "\n", "landmarks_as_videos", ".", "append", "(", "video_i", ")", "\n", "\n", "", "landmarks_as_videos", "=", "torch", ".", "stack", "(", "landmarks_as_videos", ")", "\n", "self", ".", "model", ".", "save_video", "(", "i", ",", "landmarks_as_videos", ",", "os", ".", "path", ".", "join", "(", "file_path", ",", "'landmarks.mp4'", ")", ",", "\n", "undo_statistics", "=", "False", ")", "\n", "", "if", "(", "audios_acmt", "is", "not", "None", ")", "and", "self", ".", "dump_files", "[", "'audio'", "]", ":", "\n", "                    ", "self", ".", "model", ".", "save_audio", "(", "i", ",", "audios_acmt", ",", "os", ".", "path", ".", "join", "(", "file_path", ",", "'waveform_slave.wav'", ")", ")", "\n", "try", ":", "\n", "                        ", "self", ".", "model", ".", "save_audio", "(", "i", ",", "vrs", "[", "'pred'", "]", "[", "'raw_mix_wav'", "]", ",", "\n", "os", ".", "path", ".", "join", "(", "file_path", ",", "'waveform_mix.wav'", ")", ")", "\n", "", "except", "KeyError", ":", "\n", "                        ", "pass", "\n", "\n", "", "", "if", "(", "estimated_wav", "is", "not", "None", ")", "and", "self", ".", "dump_files", "[", "'audio'", "]", ":", "\n", "                    ", "self", ".", "model", ".", "save_audio", "(", "i", ",", "estimated_wav", ",", "os", ".", "path", ".", "join", "(", "file_path", ",", "'waveform_estimated.wav'", ")", ")", "\n", "", "if", "(", "loss_mask", "is", "not", "None", ")", "and", "self", ".", "dump_files", "[", "'masks'", "]", ":", "\n", "                    ", "gt_mask", "=", "vrs", "[", "'pred'", "]", "[", "'gt_mask'", "]", "\n", "self", ".", "model", ".", "save_loss_mask", "(", "i", ",", "loss_mask", ",", "gt_mask", ",", "os", ".", "path", ".", "join", "(", "file_path", ",", "'loss_mask.png'", ")", ")", "\n", "\n", "", "if", "(", "inference_mask", "is", "not", "None", ")", "and", "self", ".", "dump_files", "[", "'masks'", "]", ":", "\n", "                    ", "self", ".", "model", ".", "save_loss_mask", "(", "i", ",", "inference_mask", ",", "inference_mask", ",", "\n", "os", ".", "path", ".", "join", "(", "file_path", ",", "'inference_mask.png'", ")", ")", "\n", "", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.VnBSS.trainer.Trainer.init_metrics": [[187, 199], ["trainer.Trainer.init_loss", "trainer.get_bss_meter", "trainer.Trainer.set_tensor_scalar_item", "trainer.Trainer.set_tensor_scalar_item", "trainer.Trainer.set_tensor_scalar_item", "trainer.Trainer.set_tensor_scalar_item", "trainer.Trainer.set_tensor_scalar_item", "trainer.Trainer.set_tensor_scalar_item"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.VnBSS.trainer.get_bss_meter"], ["", "", "", "def", "init_metrics", "(", "self", ")", ":", "\n", "        ", "self", ".", "init_loss", "(", ")", "\n", "self", ".", "metrics", "[", "'bss_eval'", "]", "=", "get_bss_meter", "(", ")", "\n", "self", ".", "set_tensor_scalar_item", "(", "'si-sdr/ds'", ")", "\n", "\n", "self", ".", "set_tensor_scalar_item", "(", "'sdr/ds'", ")", "\n", "self", ".", "set_tensor_scalar_item", "(", "'sar/ds'", ")", "\n", "self", ".", "set_tensor_scalar_item", "(", "'sir/ds'", ")", "\n", "\n", "if", "self", ".", "multitask", ":", "\n", "            ", "self", ".", "set_tensor_scalar_item", "(", "'loss_mt'", ")", "\n", "self", ".", "set_tensor_scalar_item", "(", "'loss_sep'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.VnBSS.trainer.Trainer.pred_mapping": [[200, 222], ["flerken.utils.losses.SI_SDR", "torch.stack", "trainer.bss_eval", "trainer.Trainer.alloc", "torch.stack", "torch.stack", "flerken.utils.losses.SI_SDR.", "flerken.utils.losses.SI_SDR."], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.VnBSS.trainer.bss_eval"], ["", "", "def", "pred_mapping", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "'train'", "not", "in", "self", ".", "state", ":", "\n", "            ", "f", "=", "SI_SDR", "(", ")", "\n", "audio", "=", "x", "[", "'inputs'", "]", "[", "0", "]", "[", "'audio'", "]", "\n", "audio_acmt", "=", "x", "[", "'inputs'", "]", "[", "0", "]", "[", "'audio_acmt'", "]", "\n", "mixture", "=", "x", "[", "'pred'", "]", "[", "'raw_mix_wav'", "]", "\n", "estimated_audio", "=", "x", "[", "'pred'", "]", "[", "'estimated_wav'", "]", "\n", "gt_audios", "=", "torch", ".", "stack", "(", "[", "audio", ",", "audio_acmt", "]", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "white_metrics", ":", "\n", "                ", "estimated_audios", "=", "torch", ".", "stack", "(", "[", "mixture", ",", "mixture", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "estimated_audio_acmt", "=", "2", "*", "mixture", "-", "estimated_audio", "\n", "estimated_audios", "=", "torch", ".", "stack", "(", "[", "estimated_audio", ",", "estimated_audio_acmt", "]", ",", "dim", "=", "1", ")", "\n", "", "real_mean", ",", "real_all", "=", "bss_eval", "(", "gt_audios", ",", "estimated_audios", ")", "\n", "if", "self", ".", "white_metrics", ":", "\n", "                ", "real_mean", "[", "'si-sdr'", "]", "=", "f", "(", "audio", ",", "mixture", ")", "\n", "", "else", ":", "\n", "                ", "real_mean", "[", "'si-sdr'", "]", "=", "f", "(", "audio", ",", "estimated_audio", ")", "\n", "", "x", "[", "'bss_per_sample'", "]", "=", "real_all", "\n", "x", "[", "'bss'", "]", "=", "self", ".", "alloc", "(", "real_mean", ",", "device", "=", "'cpu'", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.VnBSS.trainer.bss_eval": [[20, 52], ["torch.no_grad", "torch.arange", "indices[].tolist", "indices[].tolist", "set", "set", "list", "torch.tensor", "torch.tensor", "torch.tensor", "torch_mir_eval.bss_eval_sources", "sdr_pred[].detach().cpu", "sir_pred[].detach().cpu", "sar_pred[].detach().cpu", "reference_sources.sum().abs().min", "estimated_sources.sum().abs().min", "list.tolist", "torch.isinf", "torch.Tensor", "torch.Tensor", "torch.Tensor", "sdr_pred[].detach", "sir_pred[].detach", "sar_pred[].detach", "torch.isinf", "sdr[].mean().detach().cpu", "sir[].mean().detach().cpu", "sar[].mean().detach().cpu", "torch.tensor.detach().cpu", "torch.tensor.detach().cpu", "torch.tensor.detach().cpu", "reference_sources.sum().abs", "estimated_sources.sum().abs", "range", "range", "range", "torch.isinf", "float", "float", "float", "torch.isnan", "sdr[].mean().detach", "sir[].mean().detach", "sar[].mean().detach", "torch.tensor.detach", "torch.tensor.detach", "torch.tensor.detach", "reference_sources.sum", "estimated_sources.sum", "torch.isnan", "torch.isnan", "sdr[].mean", "sir[].mean", "sar[].mean"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "bss_eval", "(", "reference_sources", ",", "estimated_sources", ",", "compute_permutation", "=", "False", ")", ":", "\n", "# sources are required not to be silent", "\n", "# Filtering out silent sources", "\n", "    ", "indices", "=", "torch", ".", "arange", "(", "reference_sources", ".", "shape", "[", "0", "]", ")", "\n", "energy_rs", "=", "reference_sources", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "abs", "(", ")", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "energy_es", "=", "estimated_sources", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "abs", "(", ")", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "rs_idx", "=", "indices", "[", "energy_rs", "==", "0", "]", ".", "tolist", "(", ")", "\n", "es_idx", "=", "indices", "[", "energy_es", "==", "0", "]", ".", "tolist", "(", ")", "\n", "forbidden_indices", "=", "set", "(", "rs_idx", "+", "es_idx", ")", "\n", "indices", "=", "set", "(", "indices", ".", "tolist", "(", ")", ")", "\n", "indices", "=", "list", "(", "indices", "-", "forbidden_indices", ")", "\n", "sdr", "=", "torch", ".", "tensor", "(", "[", "torch", ".", "Tensor", "(", "[", "float", "(", "'NaN'", ")", "]", ")", "for", "_", "in", "range", "(", "reference_sources", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "sir", "=", "torch", ".", "tensor", "(", "[", "torch", ".", "Tensor", "(", "[", "float", "(", "'NaN'", ")", "]", ")", "for", "_", "in", "range", "(", "reference_sources", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "sar", "=", "torch", ".", "tensor", "(", "[", "torch", ".", "Tensor", "(", "[", "float", "(", "'NaN'", ")", "]", ")", "for", "_", "in", "range", "(", "reference_sources", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "rs", "=", "reference_sources", "[", "indices", "]", "\n", "es", "=", "estimated_sources", "[", "indices", "]", "\n", "sdr_pred", ",", "sir_pred", ",", "sar_pred", ",", "_", "=", "bss_eval_sources", "(", "rs", ",", "es", ",", "compute_permutation", "=", "compute_permutation", ")", "\n", "\n", "sdr", "[", "indices", "]", "=", "sdr_pred", "[", ":", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "sir", "[", "indices", "]", "=", "sir_pred", "[", ":", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "sar", "[", "indices", "]", "=", "sar_pred", "[", ":", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "condition", "=", "torch", ".", "isnan", "(", "sdr", ")", "|", "torch", ".", "isnan", "(", "sir", ")", "|", "torch", ".", "isnan", "(", "sar", ")", "|", "torch", ".", "isinf", "(", "sdr", ")", "|", "torch", ".", "isinf", "(", "sir", ")", "|", "torch", ".", "isinf", "(", "sar", ")", "\n", "\n", "return", "(", "{", "'sdr'", ":", "sdr", "[", "~", "condition", "]", ".", "mean", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'sir'", ":", "sir", "[", "~", "condition", "]", ".", "mean", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'sar'", ":", "sar", "[", "~", "condition", "]", ".", "mean", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "}", ",", "{", "'sdr'", ":", "sdr", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'sir'", ":", "sir", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "'sar'", ":", "sar", ".", "detach", "(", ")", ".", "cpu", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.VnBSS.trainer.get_bss_meter": [[224, 268], ["flerken.utils.losses.SI_SDR", "torch.no_grad", "torch.no_grad", "flerken.framework.meters.get_nested_meter", "functools.partial"], "function", ["None"], ["", "", "def", "get_bss_meter", "(", ")", ":", "\n", "    ", "f", "=", "SI_SDR", "(", ")", "\n", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "pred2sisdr", "(", "bss_real", ")", ":", "\n", "        ", "return", "bss_real", "[", "'si-sdr'", "]", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "gt2sisdr", "(", "bss_oracle", ",", "bss_real", ")", ":", "\n", "        ", "return", "bss_oracle", "[", "'si-sdr'", "]", "\n", "\n", "", "def", "pred2sdr", "(", "bss_real", ")", ":", "\n", "        ", "return", "bss_real", "[", "'sdr'", "]", "\n", "\n", "", "def", "pred2sir", "(", "bss_real", ")", ":", "\n", "        ", "return", "bss_real", "[", "'sir'", "]", "\n", "\n", "", "def", "pred2sar", "(", "bss_real", ")", ":", "\n", "        ", "return", "bss_real", "[", "'sar'", "]", "\n", "\n", "", "handlers", "=", "{", "}", "\n", "handlers", "[", "'bss'", "]", "=", "lambda", "x", ":", "x", "\n", "\n", "handlers", "[", "'si-sdr'", "]", "=", "pred2sisdr", "\n", "\n", "handlers", "[", "'sdr'", "]", "=", "pred2sdr", "\n", "\n", "handlers", "[", "'sir'", "]", "=", "pred2sir", "\n", "\n", "handlers", "[", "'sar'", "]", "=", "pred2sar", "\n", "\n", "opt", "=", "{", "'bss'", ":", "{", "'type'", ":", "'input'", ",", "'store'", ":", "'list'", "}", ",", "\n", "'si-sdr'", ":", "{", "'type'", ":", "'output'", ",", "'store'", ":", "'list'", "}", ",", "\n", "'sdr'", ":", "{", "'type'", ":", "'output'", ",", "'store'", ":", "'list'", "}", ",", "\n", "'sar'", ":", "{", "'type'", ":", "'output'", ",", "'store'", ":", "'list'", "}", ",", "\n", "'sir'", ":", "{", "'type'", ":", "'output'", ",", "'store'", ":", "'list'", "}", ",", "\n", "}", "\n", "return", "get_nested_meter", "(", "\n", "partial", "(", "TensorStorage", ",", "handlers", "=", "handlers", ",", "opt", "=", "opt", ",", "on_the_fly", "=", "True", ",", "\n", "redirect", "=", "{", "'si-sdr'", ":", "'si-sdr/ds'", ",", "\n", "'sdr'", ":", "'sdr/ds'", ",", "\n", "'sir'", ":", "'sir/ds'", ",", "\n", "'sar'", ":", "'sar/ds'", ",", "\n", "}", ")", ",", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.VnBSS.utils.normalize_max": [[4, 11], ["numpy.abs().max", "numpy.abs().max", "numpy.abs", "numpy.abs"], "function", ["None"], ["def", "normalize_max", "(", "waveform", ")", ":", "\n", "    ", "if", "np", ".", "abs", "(", "waveform", ")", ".", "max", "(", ")", "!=", "0", ":", "\n", "        ", "waveform_out", "=", "waveform", "/", "np", ".", "abs", "(", "waveform", ")", ".", "max", "(", ")", "\n", "", "else", ":", "\n", "        ", "waveform_out", "=", "waveform", "\n", "\n", "", "return", "waveform_out", "\n", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.dataset_funcs.reencode_25_yuv420p": [[4, 8], ["flerken.video.utils.apply_single"], "function", ["None"], ["def", "reencode_25_yuv420p", "(", "video_path", ":", "str", ",", "dst_path", ":", "str", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "kwargs", "[", "'input_options'", "]", "=", "[", "'-y'", "]", "\n", "kwargs", "[", "'output_options'", "]", "=", "[", "'-r'", ",", "'25'", ",", "'-pix_fmt'", ",", "'yuv420p'", "]", "\n", "return", "apply_single", "(", "video_path", ",", "dst_path", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.dataset_funcs.av_dataset_25fps": [[10, 13], ["flerken.video.utils.apply_tree"], "function", ["None"], ["", "def", "av_dataset_25fps", "(", "src", ",", "dst", ",", "ext", "=", "None", ")", ":", "\n", "    ", "from", "multiprocessing", "import", "cpu_count", "\n", "apply_tree", "(", "src", ",", "dst", ",", "multiprocessing", "=", "0", ",", "fn", "=", "reencode_25_yuv420p", ",", "ext", "=", "ext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.findall": [[10, 15], ["re.findall", "len", "re.findall.append"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.findall"], ["def", "findall", "(", "pattern", ",", "string", ",", "alt", "=", "None", ")", ":", "\n", "    ", "results", "=", "re", ".", "findall", "(", "pattern", ",", "string", ")", "\n", "if", "len", "(", "results", ")", "==", "0", ":", "\n", "        ", "results", ".", "append", "(", "alt", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.get_finfo": [[17, 38], ["folder.lower.lower", "metrics.findall", "re.findall", "len", "metrics.findall", "len", "len", "bool", "metrics.findall", "metrics.findall"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.findall", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.findall", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.findall", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.findall", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.findall"], ["", "def", "get_finfo", "(", "folder", ":", "str", ")", ":", "\n", "    ", "folder", "=", "folder", ".", "lower", "(", ")", "\n", "info", "=", "{", "'n_voices'", ":", "None", ",", "'n_layers'", ":", "None", ",", "'net_type'", ":", "None", ",", "'remix'", ":", "None", "}", "\n", "\n", "pattern", "=", "'\\dsa'", "# integer+sa", "\n", "results", "=", "findall", "(", "pattern", ",", "folder", ")", "\n", "assert", "len", "(", "results", ")", "==", "1", ",", "'number of voices specified more than once'", "\n", "info", "[", "'net_type'", "]", "=", "findall", "(", "'test_(\\w+[5-9])'", ",", "folder", ")", "[", "0", "]", "\n", "info", "[", "'n_voices'", "]", "=", "results", "[", "0", "]", "\n", "\n", "results", "=", "re", ".", "findall", "(", "'[a-z]*?[5-9]'", ",", "folder", ")", "\n", "if", "len", "(", "results", ")", "==", "0", ":", "\n", "        ", "info", "[", "'n_layers'", "]", "=", "None", "\n", "# info['net_type'] = None", "\n", "info", "[", "'remix'", "]", "=", "None", "\n", "", "elif", "len", "(", "results", ")", "==", "1", ":", "\n", "        ", "s", "=", "results", "[", "0", "]", "\n", "info", "[", "'n_layers'", "]", "=", "findall", "(", "'\\d'", ",", "s", ")", "[", "0", "]", "\n", "# info['net_type'] = findall('(\\w+)r?', s)[0]", "\n", "info", "[", "'remix'", "]", "=", "bool", "(", "findall", "(", "'r'", ",", "s", ",", "False", ")", "[", "0", "]", ")", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.get_einfo": [[40, 48], ["folder.lower.lower", "float", "metrics.findall", "metrics.findall", "metrics.findall", "metrics.findall"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.findall", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.findall", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.findall", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.findall"], ["", "def", "get_einfo", "(", "folder", ":", "str", ")", ":", "\n", "    ", "folder", "=", "folder", ".", "lower", "(", ")", "\n", "info", "=", "{", "'lang'", ":", "None", ",", "\"subset\"", ":", "None", ",", "'loudness'", ":", "None", "}", "\n", "info", "[", "'lang'", "]", "=", "findall", "(", "'(hindi|spanish|english|others)'", ",", "folder", ")", "[", "0", "]", "\n", "info", "[", "'subset'", "]", "=", "findall", "(", "'(test_unseen|test_seen)'", ",", "folder", ")", "[", "0", "]", "\n", "info", "[", "'loudness'", "]", "=", "float", "(", "findall", "(", "'\\d[\\.\\w]*'", ",", "folder", ")", "[", "0", "]", ")", "\n", "info", "[", "'gender'", "]", "=", "findall", "(", "'(mixed|male|female)'", ",", "folder", ")", "[", "0", "]", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.get_metrics": [[50, 122], ["glob.glob", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.std", "numpy.std", "numpy.std", "numpy.std", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "str", "str", "flerken.utils.BaseDict().load", "BaseDict().load.get", "BaseDict().load.get", "BaseDict().load.get", "BaseDict().load.get", "avg_metrics[].append", "numpy.array", "numpy.array", "numpy.isnan", "numpy.isinf", "numpy.std", "numpy.mean", "numpy.sum", "numpy.sum", "metrics.findall", "flerken.utils.BaseDict().load", "BaseDict().load.get", "print", "avg_metrics[].append", "avg_metrics[].append", "avg_metrics[].append", "numpy.isnan", "numpy.isnan", "numpy.isinf", "numpy.isinf", "numpy.isinf", "numpy.isnan", "exceptions_nan.astype", "exceptions_inf.astype", "flerken.utils.BaseDict", "file_path.replace", "abs", "abs", "avg_metrics[].append", "avg_metrics[].append", "print", "flerken.utils.BaseDict"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.findall"], ["", "def", "get_metrics", "(", "path", ",", "filter_ext", ",", "white_metrics_enabled", "=", "False", ")", ":", "\n", "    ", "avg_metrics", "=", "{", "'sdr'", ":", "[", "]", ",", "'sar'", ":", "[", "]", ",", "'si_sdr'", ":", "[", "]", ",", "'sir'", ":", "[", "]", ",", "'isdr'", ":", "[", "]", ",", "'input_sdr'", ":", "[", "]", "}", "\n", "configfiles", "=", "glob", ".", "glob", "(", "f'{path}/**/*.json'", ",", "recursive", "=", "True", ")", "\n", "for", "file_path", "in", "configfiles", ":", "\n", "        ", "file", "=", "BaseDict", "(", ")", ".", "load", "(", "file_path", ")", "\n", "# Since NaNs are filtered here and they are different for each experiment white metrics are", "\n", "# computed here", "\n", "if", "white_metrics_enabled", ":", "\n", "            ", "network", "=", "findall", "(", "'(test_\\w+[5-9])_\\dsa'", ",", "file_path", ")", "\n", "white_metrics", "=", "BaseDict", "(", ")", ".", "load", "(", "file_path", ".", "replace", "(", "network", "[", "0", "]", ",", "'white_metrics'", ")", ")", "\n", "isdr", "=", "white_metrics", ".", "get", "(", "'sdr'", ")", "\n", "", "sdr", "=", "file", ".", "get", "(", "'sdr'", ")", "\n", "sir", "=", "file", ".", "get", "(", "'sir'", ")", "\n", "sar", "=", "file", ".", "get", "(", "'sar'", ")", "\n", "\n", "si_sdr", "=", "file", ".", "get", "(", "'si-sdr'", ")", "\n", "if", "abs", "(", "sdr", ")", ">", "40", "or", "abs", "(", "sir", ")", ">", "50", ":", "\n", "            ", "print", "(", "f'{file_path},sdr:{sdr},sir:{sir}'", ")", "\n", "", "avg_metrics", "[", "'sdr'", "]", ".", "append", "(", "sdr", ")", "\n", "try", ":", "\n", "\n", "            ", "assert", "sir", "is", "not", "None", "\n", "assert", "sar", "is", "not", "None", "\n", "assert", "si_sdr", "is", "not", "None", "\n", "if", "white_metrics_enabled", ":", "\n", "                ", "assert", "isdr", "is", "not", "None", "\n", "avg_metrics", "[", "'isdr'", "]", ".", "append", "(", "sdr", "-", "isdr", ")", "\n", "avg_metrics", "[", "'input_sdr'", "]", ".", "append", "(", "isdr", ")", "\n", "", "avg_metrics", "[", "'sir'", "]", ".", "append", "(", "sir", ")", "\n", "avg_metrics", "[", "'sar'", "]", ".", "append", "(", "sar", ")", "\n", "avg_metrics", "[", "'si_sdr'", "]", ".", "append", "(", "si_sdr", ")", "\n", "", "except", "AssertionError", ":", "\n", "            ", "print", "(", "f'BSS eval metrics from {file_path} are None'", ")", "\n", "", "", "if", "white_metrics_enabled", ":", "\n", "        ", "avg_metrics", "[", "'isdr'", "]", "=", "np", ".", "array", "(", "avg_metrics", "[", "'isdr'", "]", ")", "\n", "avg_metrics", "[", "'input_sdr'", "]", "=", "np", ".", "array", "(", "avg_metrics", "[", "'input_sdr'", "]", ")", "\n", "", "avg_metrics", "[", "'sdr'", "]", "=", "np", ".", "array", "(", "avg_metrics", "[", "'sdr'", "]", ")", "\n", "avg_metrics", "[", "'sir'", "]", "=", "np", ".", "array", "(", "avg_metrics", "[", "'sir'", "]", ")", "\n", "avg_metrics", "[", "'sar'", "]", "=", "np", ".", "array", "(", "avg_metrics", "[", "'sar'", "]", ")", "\n", "avg_metrics", "[", "'si_sdr'", "]", "=", "np", ".", "array", "(", "avg_metrics", "[", "'si_sdr'", "]", ")", "\n", "\n", "exceptions_nan", "=", "(", "np", ".", "isnan", "(", "avg_metrics", "[", "'sdr'", "]", ")", ")", "|", "(", "np", ".", "isnan", "(", "avg_metrics", "[", "'sir'", "]", ")", ")", "|", "(", "np", ".", "isnan", "(", "avg_metrics", "[", "'sar'", "]", ")", ")", "\n", "exceptions_inf", "=", "(", "np", ".", "isinf", "(", "avg_metrics", "[", "'sdr'", "]", ")", ")", "|", "(", "np", ".", "isinf", "(", "avg_metrics", "[", "'sir'", "]", ")", ")", "|", "(", "np", ".", "isinf", "(", "avg_metrics", "[", "'sar'", "]", ")", ")", "\n", "\n", "exceptions", "=", "exceptions_inf", "|", "exceptions_nan", "\n", "\n", "if", "white_metrics_enabled", ":", "\n", "        ", "exceptions_wm", "=", "(", "np", ".", "isinf", "(", "avg_metrics", "[", "'isdr'", "]", ")", ")", "|", "(", "np", ".", "isnan", "(", "avg_metrics", "[", "'isdr'", "]", ")", ")", "\n", "avg_metrics", "[", "'isdr'", "]", "=", "avg_metrics", "[", "'isdr'", "]", "[", "~", "exceptions_wm", "]", "\n", "avg_metrics", "[", "'input_sdr'", "]", "=", "avg_metrics", "[", "'input_sdr'", "]", "[", "~", "exceptions_wm", "]", "\n", "avg_metrics", "[", "'isdr_std'", "]", "=", "np", ".", "std", "(", "avg_metrics", "[", "'isdr'", "]", ")", "\n", "avg_metrics", "[", "'isdr_mean'", "]", "=", "np", ".", "mean", "(", "avg_metrics", "[", "'isdr'", "]", ")", "\n", "\n", "", "avg_metrics", "[", "'sdr'", "]", "=", "avg_metrics", "[", "'sdr'", "]", "[", "~", "exceptions", "]", "\n", "avg_metrics", "[", "'sar'", "]", "=", "avg_metrics", "[", "'sar'", "]", "[", "~", "exceptions", "]", "\n", "avg_metrics", "[", "'sir'", "]", "=", "avg_metrics", "[", "'sir'", "]", "[", "~", "exceptions", "]", "\n", "avg_metrics", "[", "'si_sdr'", "]", "=", "avg_metrics", "[", "'si_sdr'", "]", "\n", "\n", "\n", "avg_metrics", "[", "'sdr_std'", "]", "=", "np", ".", "std", "(", "avg_metrics", "[", "'sdr'", "]", ")", "\n", "avg_metrics", "[", "'sar_std'", "]", "=", "np", ".", "std", "(", "avg_metrics", "[", "'sar'", "]", ")", "\n", "avg_metrics", "[", "'sir_std'", "]", "=", "np", ".", "std", "(", "avg_metrics", "[", "'sir'", "]", ")", "\n", "avg_metrics", "[", "'si_sdr_std'", "]", "=", "np", ".", "std", "(", "avg_metrics", "[", "'si_sdr'", "]", ")", "\n", "avg_metrics", "[", "'sdr_mean'", "]", "=", "np", ".", "mean", "(", "avg_metrics", "[", "'sdr'", "]", ")", "\n", "\n", "avg_metrics", "[", "'sar_mean'", "]", "=", "np", ".", "mean", "(", "avg_metrics", "[", "'sar'", "]", ")", "\n", "avg_metrics", "[", "'sir_mean'", "]", "=", "np", ".", "mean", "(", "avg_metrics", "[", "'sir'", "]", ")", "\n", "avg_metrics", "[", "'si_sdr_mean'", "]", "=", "np", ".", "mean", "(", "avg_metrics", "[", "'si_sdr'", "]", ")", "\n", "\n", "avg_metrics", "[", "'NaN'", "]", "=", "str", "(", "np", ".", "sum", "(", "exceptions_nan", ".", "astype", "(", "np", ".", "uint8", ")", ")", ")", "\n", "avg_metrics", "[", "'Inf'", "]", "=", "str", "(", "np", ".", "sum", "(", "exceptions_inf", ".", "astype", "(", "np", ".", "uint8", ")", ")", ")", "\n", "return", "avg_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.collect_data": [[124, 137], ["data_paths.items", "collection.items", "pandas.DataFrame.from_dict", "metrics.get_metrics", "data_frame_dict[].append", "data_frame_dict[].append", "data_frame_dict[].append", "data_frame_dict[].append", "data_frame_dict[].append"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.get_metrics"], ["", "def", "collect_data", "(", "data_paths", ":", "dict", ")", ":", "\n", "    ", "collection", "=", "{", "}", "\n", "for", "name", ",", "path", "in", "data_paths", ".", "items", "(", ")", ":", "\n", "        ", "metrics", "=", "get_metrics", "(", "path", ")", "\n", "collection", "[", "name", "]", "=", "{", "'sdr'", ":", "metrics", "[", "'sdr'", "]", ",", "'sir'", ":", "metrics", "[", "'sir'", "]", ",", "'sar'", ":", "metrics", "[", "'sar'", "]", "}", "\n", "", "data_frame_dict", "=", "{", "'name'", ":", "[", "]", ",", "'sdr'", ":", "[", "]", ",", "'sir'", ":", "[", "]", ",", "'sar'", ":", "[", "]", ",", "'lan'", ":", "[", "]", "}", "\n", "for", "name", ",", "data", "in", "collection", ".", "items", "(", ")", ":", "\n", "        ", "data_frame_dict", "[", "'name'", "]", ".", "append", "(", "name", ")", "\n", "data_frame_dict", "[", "'sir'", "]", ".", "append", "(", "data", "[", "'sir'", "]", ")", "\n", "data_frame_dict", "[", "'sar'", "]", ".", "append", "(", "data", "[", "'sar'", "]", ")", "\n", "data_frame_dict", "[", "'sdr'", "]", ".", "append", "(", "data", "[", "'sdr'", "]", ")", "\n", "data_frame_dict", "[", "'lan'", "]", ".", "append", "(", "None", ")", "\n", "", "return", "pandas", ".", "DataFrame", ".", "from_dict", "(", "data_frame_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.plot_data": [[139, 141], ["seaborn.scatterplot"], "function", ["None"], ["", "def", "plot_data", "(", "data", ":", "pandas", ".", "DataFrame", ",", "**", "kwargs", ")", ":", "\n", "    ", "seaborn", ".", "scatterplot", "(", "data", "=", "data", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.metrics.collet_data_csv": [[143, 153], ["list", "open", "csv.reader", "enumerate", "zip", "print", "lines.append"], "function", ["None"], ["", "def", "collet_data_csv", "(", "path", ",", "skip", "=", "0", ")", ":", "\n", "    ", "import", "csv", "\n", "with", "open", "(", "path", ")", "as", "csv_file", ":", "\n", "        ", "csv_reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "','", ")", "\n", "lines", "=", "[", "]", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "            ", "if", "i", ">=", "skip", ":", "\n", "                ", "print", "(", "row", ")", "\n", "lines", ".", "append", "(", "row", ")", "\n", "", "", "", "return", "list", "(", "zip", "(", "*", "lines", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.SkeletonPlotter.__init__": [[12, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "graph", ",", "th", "=", "0.05", ",", "backend", "=", "'cv2'", ")", ":", "\n", "        ", "self", ".", "th", "=", "th", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "_backend", "=", "backend", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.SkeletonPlotter.img": [[24, 27], ["None"], "methods", ["None"], ["", "", "@", "img", ".", "setter", "\n", "def", "img", "(", "self", ",", "img", ")", ":", "\n", "        ", "self", ".", "_img", "=", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.SkeletonPlotter._set_sk": [[28, 35], ["overlay_sk.define_img"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.define_img"], ["", "def", "_set_sk", "(", "self", ",", "skeleton", ")", ":", "\n", "        ", "self", ".", "img", ",", "self", ".", "X_disp", ",", "self", ".", "Y_disp", "=", "define_img", "(", "skeleton", ")", "\n", "self", ".", "skeleton", "=", "skeleton", "\n", "self", ".", "skeleton", "[", ":", ",", "0", ",", ":", "]", "+=", "self", ".", "X_disp", "\n", "self", ".", "skeleton", "[", ":", ",", "1", ",", ":", "]", "+=", "self", ".", "Y_disp", "\n", "\n", "return", "skeleton", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.SkeletonPlotter.__len__": [[36, 38], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "skeleton", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.SkeletonPlotter.__call__": [[39, 44], ["overlay_sk.SkeletonPlotter._set_sk", "overlay_sk.SkeletonPlotter.plot", "overlay_sk.SkeletonPlotter.main"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.SkeletonPlotter._set_sk", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.main"], ["", "def", "__call__", "(", "self", ",", "skeleton", ")", ":", "\n", "        ", "self", ".", "_set_sk", "(", "skeleton", ")", "\n", "wd", "=", "self", ".", "plot", "(", "self", ".", "th", ")", "\n", "wd", ".", "main", "(", ")", "\n", "return", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.SkeletonPlotter.as_image": [[45, 47], ["overlay_sk.SkeletonPlotter.plot"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot"], ["", "def", "as_image", "(", "self", ",", "frame", ",", "th", ")", ":", "\n", "        ", "return", "plot", "(", "self", ".", "skeleton", "[", "frame", ",", "...", ",", ":", "]", ",", "self", ".", "img", ",", "self", ".", "graph", ",", "th", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.SkeletonPlotter.as_video": [[48, 50], ["overlay_sk.SkeletonPlotter.as_image", "range", "len"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.SkeletonPlotter.as_image"], ["", "def", "as_video", "(", "self", ",", "th", ")", ":", "\n", "        ", "return", "[", "self", ".", "as_image", "(", "idx", ",", "th", ")", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "skeleton", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.SkeletonPlotter.plot": [[51, 53], ["overlay_sk.Window"], "methods", ["None"], ["", "def", "plot", "(", "self", ",", "th", ")", ":", "\n", "        ", "return", "Window", "(", "self", ",", "'Image'", ",", "th", ",", "self", ".", "_backend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.__init__": [[133, 142], ["len", "overlay_sk.Window._init_backend", "overlay_sk.Window._reset"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._init_backend", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._reset"], ["    ", "def", "__init__", "(", "self", ",", "flow", ",", "name", ",", "th", ",", "backend", ")", ":", "\n", "        ", "self", ".", "flow", "=", "flow", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "N", "=", "len", "(", "self", ".", "flow", ")", "\n", "self", ".", "idx", "=", "0", "\n", "self", ".", "th", "=", "th", "\n", "\n", "self", ".", "_init_backend", "(", "backend", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._init_backend": [[143, 154], ["backend.lower.lower.lower", "cv2.namedWindow"], "methods", ["None"], ["", "def", "_init_backend", "(", "self", ",", "backend", ":", "str", ")", ":", "\n", "        ", "backend", "=", "backend", ".", "lower", "(", ")", "\n", "assert", "backend", "in", "[", "'cv2'", ",", "'matplotlib'", ",", "'pycharm'", "]", "\n", "self", ".", "pycharm", "=", "backend", "==", "'pycharm'", "\n", "if", "self", ".", "pycharm", ":", "\n", "            ", "backend", "=", "'matplotlib'", "\n", "", "self", ".", "cv2", "=", "backend", "==", "'cv2'", "\n", "self", ".", "mpl", "=", "backend", "==", "'matplotlib'", "\n", "\n", "if", "self", ".", "cv2", ":", "\n", "            ", "cv2", ".", "namedWindow", "(", "self", ".", "name", ",", "cv2", ".", "WINDOW_NORMAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.main": [[155, 160], ["overlay_sk.Window._main_cv2", "overlay_sk.Window._main_mpl"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._main_cv2", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._main_mpl"], ["", "", "def", "main", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cv2", ":", "\n", "            ", "return", "self", ".", "_main_cv2", "(", ")", "\n", "", "if", "self", ".", "mpl", ":", "\n", "            ", "return", "self", ".", "_main_mpl", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._main_cv2": [[161, 172], ["overlay_sk.Window._reset", "cv2.destroyAllWindows", "cv2.imshow", "overlay_sk.Window.run_key", "cv2.waitKey", "overlay_sk.Window.all", "overlay_sk.Window.key2mask().all", "overlay_sk.Window.key2mask", "ord"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._reset", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.run_key", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.key2mask"], ["", "", "def", "_main_cv2", "(", "self", ")", ":", "\n", "        ", "self", ".", "_reset", "(", ")", "\n", "while", "True", ":", "\n", "            ", "cv2", ".", "imshow", "(", "self", ".", "name", ",", "self", ".", "image", ")", "\n", "key", "=", "cv2", ".", "waitKey", "(", "1", ")", "&", "0xFF", "\n", "# if the 'r' key is pressed, reset the cropping region", "\n", "flag", "=", "self", ".", "run_key", "(", "key", ")", "\n", "if", "flag", ".", "all", "(", ")", "==", "self", ".", "key2mask", "(", "ord", "(", "'q'", ")", ")", ".", "all", "(", ")", ":", "\n", "                ", "break", "\n", "", "", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "return", "self", ".", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._main_mpl": [[173, 184], ["overlay_sk.Window._reset", "input", "overlay_sk.Window.run_key", "overlay_sk.Window.all", "overlay_sk.Window.key2mask().all", "overlay_sk.Window.key2mask", "ord"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._reset", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.run_key", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.key2mask"], ["", "def", "_main_mpl", "(", "self", ")", ":", "\n", "# input Doesnt work with pycharm", "\n", "\n", "        ", "self", ".", "_reset", "(", ")", "\n", "while", "not", "self", ".", "pycharm", ":", "\n", "            ", "key", "=", "input", "(", "'Next command'", ")", "\n", "# if the 'r' key is pressed, reset the cropping region", "\n", "flag", "=", "self", ".", "run_key", "(", "key", ")", "\n", "if", "flag", ".", "all", "(", ")", "==", "self", ".", "key2mask", "(", "ord", "(", "'q'", ")", ")", ".", "all", "(", ")", ":", "\n", "                ", "break", "\n", "", "", "return", "self", ".", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.mpl_manual_call": [[185, 187], ["overlay_sk.Window.run_key", "ord"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.run_key"], ["", "def", "mpl_manual_call", "(", "self", ",", "key", ")", ":", "\n", "        ", "flag", "=", "self", ".", "run_key", "(", "ord", "(", "key", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.key2mask": [[188, 193], ["ord", "numpy.zeros"], "methods", ["None"], ["", "def", "key2mask", "(", "self", ",", "key", ")", ":", "\n", "        ", "ascii_", "=", "ord", "(", "'a'", ")", "\n", "tmp", "=", "np", ".", "zeros", "(", "25", ",", "dtype", "=", "bool", ")", "\n", "tmp", "[", "key", "-", "ascii_", "]", "=", "True", "\n", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.run_key": [[194, 226], ["numpy.ones", "overlay_sk.Window.allow_key", "overlay_sk.Window._reset", "ord", "overlay_sk.Window.allow_key", "overlay_sk.Window.key2mask", "ord", "overlay_sk.Window.allow_key", "overlay_sk.Window.overflow_idx", "overlay_sk.Window.display", "ord", "overlay_sk.Window.allow_key", "overlay_sk.Window.overflow_idx", "overlay_sk.Window.display", "ord", "overlay_sk.Window.allow_key", "ord", "cv2.imshow", "overlay_sk.Window.overflow_idx", "overlay_sk.Window.display", "cv2.waitKey", "ord", "int", "ord", "ord", "ord"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.allow_key", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._reset", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.allow_key", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.key2mask", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.allow_key", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.overflow_idx", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.display", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.allow_key", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.overflow_idx", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.display", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.allow_key", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.overflow_idx", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.display"], ["", "def", "run_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "==", "ord", "(", "'r'", ")", "and", "self", ".", "allow_key", "(", "key", ")", ":", "\n", "            ", "self", ".", "_reset", "(", ")", "\n", "# if the 'c' key is pressed, break from the loop", "\n", "", "elif", "key", "==", "ord", "(", "'q'", ")", "and", "self", ".", "allow_key", "(", "key", ")", ":", "\n", "            ", "return", "self", ".", "key2mask", "(", "key", ")", "\n", "", "elif", "key", "==", "ord", "(", "'a'", ")", "and", "self", ".", "allow_key", "(", "key", ")", ":", "\n", "            ", "self", ".", "overflow_idx", "(", "-", "1", ")", "\n", "self", ".", "display", "(", "self", ".", "idx", ")", "\n", "", "elif", "key", "==", "ord", "(", "'s'", ")", "and", "self", ".", "allow_key", "(", "key", ")", ":", "\n", "            ", "self", ".", "overflow_idx", "(", "+", "1", ")", "\n", "self", ".", "display", "(", "self", ".", "idx", ")", "\n", "", "elif", "key", "==", "ord", "(", "'l'", ")", "and", "self", ".", "allow_key", "(", "key", ")", "and", "self", ".", "cv2", ":", "\n", "\n", "            ", "speed", "=", "125", "\n", "pause", "=", "False", "\n", "while", "True", ":", "\n", "                ", "cv2", ".", "imshow", "(", "self", ".", "name", ",", "self", ".", "image", ")", "\n", "if", "not", "pause", ":", "\n", "                    ", "self", ".", "overflow_idx", "(", "1", ")", "\n", "self", ".", "display", "(", "self", ".", "idx", ")", "\n", "", "key", "=", "cv2", ".", "waitKey", "(", "int", "(", "speed", ")", ")", "&", "0xFF", "\n", "if", "key", "==", "ord", "(", "'q'", ")", ":", "\n", "                    ", "break", "\n", "", "elif", "key", "==", "ord", "(", "'a'", ")", ":", "\n", "                    ", "speed", "*=", "1.1", "\n", "", "elif", "key", "==", "ord", "(", "'s'", ")", ":", "\n", "                    ", "speed", "*=", "0.9", "\n", "", "elif", "key", "==", "ord", "(", "'p'", ")", ":", "\n", "                    ", "pause", "=", "not", "pause", "\n", "\n", "", "", "", "return", "np", ".", "ones", "(", "25", ",", "dtype", "=", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.overflow_idx": [[227, 235], ["None"], "methods", ["None"], ["", "def", "overflow_idx", "(", "self", ",", "i", ")", ":", "\n", "        ", "idx_", "=", "self", ".", "idx", "+", "i", "\n", "if", "idx_", ">=", "self", ".", "N", ":", "\n", "            ", "self", ".", "idx", "=", "0", "\n", "", "elif", "idx_", "<", "0", ":", "\n", "            ", "self", ".", "idx", "=", "self", ".", "N", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "idx", "+=", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.allow_key": [[236, 239], ["overlay_sk.Window.key2mask", "overlay_sk.Window.all", "overlay_sk.Window.all", "overlay_sk.Window.state.all"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.key2mask"], ["", "", "def", "allow_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "k", "=", "self", ".", "key2mask", "(", "key", ")", "\n", "return", "k", ".", "all", "(", ")", "==", "(", "k", ".", "all", "(", ")", "and", "self", ".", "state", ".", "all", "(", ")", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._reset_state": [[240, 242], ["numpy.ones"], "methods", ["None"], ["", "def", "_reset_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "state", "=", "np", ".", "ones", "(", "25", ",", "dtype", "=", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._reset": [[243, 249], ["overlay_sk.Window.display", "overlay_sk.Window._reset_state"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.display", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window._reset_state"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "refPt", "=", "[", "]", "\n", "self", ".", "cropping", "=", "False", "\n", "self", ".", "idx", "=", "0", "\n", "self", ".", "display", "(", "self", ".", "idx", ")", "\n", "self", ".", "_reset_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Window.display": [[250, 256], ["overlay_sk.Window.flow.as_image", "overlay_sk.Window.flow.as_image", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.show", "matplotlib.show"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.SkeletonPlotter.as_image", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.SkeletonPlotter.as_image"], ["", "def", "display", "(", "self", ",", "idx", ")", ":", "\n", "        ", "self", ".", "image", "=", "self", ".", "flow", ".", "as_image", "(", "idx", ",", "self", ".", "th", ")", "\n", "self", ".", "clone", "=", "self", ".", "flow", ".", "as_image", "(", "idx", ",", "self", ".", "th", ")", "\n", "if", "self", ".", "mpl", ":", "\n", "            ", "plt", ".", "imshow", "(", "self", ".", "image", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.__init__": [[265, 269], ["sorted", "torchtree.Tree", "overlay_sk.Graph.build_tree", "sorted"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.build_tree"], ["def", "__init__", "(", "self", ",", "graph", ")", ":", "\n", "        ", "self", ".", "graph", "=", "sorted", "(", "[", "sorted", "(", "x", ")", "for", "x", "in", "graph", "]", ")", "\n", "self", ".", "tree", "=", "Tree", "(", ")", "\n", "self", ".", "build_tree", "(", "self", ".", "tree", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.iter_graph": [[270, 278], ["None"], "methods", ["None"], ["", "def", "iter_graph", "(", "self", ",", "c", ")", ":", "\n", "        ", "triggered", "=", "False", "\n", "for", "edge", "in", "self", ".", "graph", ":", "\n", "            ", "if", "edge", "[", "0", "]", "==", "c", "and", "edge", "[", "1", "]", "!=", "c", ":", "\n", "                ", "triggered", "=", "True", "\n", "yield", "edge", "\n", "", "", "if", "not", "triggered", ":", "\n", "            ", "yield", "(", "c", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.build_tree": [[279, 292], ["overlay_sk.Graph.iter_graph", "str", "tree.add_module", "torchtree.Tree", "torchtree.Tree", "tree.add_module", "overlay_sk.Graph.build_tree", "overlay_sk.Graph.build_tree", "int"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.iter_graph", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.build_tree", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.build_tree"], ["", "", "def", "build_tree", "(", "self", ",", "tree", ",", "c", ")", ":", "\n", "        ", "for", "edge", "in", "self", ".", "iter_graph", "(", "c", ")", ":", "\n", "            ", "x", ",", "y", "=", "str", "(", "edge", "[", "0", "]", ")", ",", "edge", "[", "1", "]", "\n", "if", "y", "is", "None", ":", "\n", "                ", "tree", ".", "add_module", "(", "x", ",", "Tree", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "x", "not", "in", "tree", ".", "_modules", "and", "int", "(", "x", ")", "!=", "y", ":", "\n", "\n", "                    ", "new_tree", "=", "Tree", "(", ")", "\n", "tree", ".", "add_module", "(", "x", ",", "new_tree", ")", "\n", "self", ".", "build_tree", "(", "new_tree", ",", "y", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "build_tree", "(", "new_tree", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.get_ordered_graph": [[293, 298], ["overlay_sk.Graph.iter_ordered_graph", "tuple"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.iter_ordered_graph"], ["", "", "", "", "def", "get_ordered_graph", "(", "self", ")", ":", "\n", "        ", "x", "=", "[", "]", "\n", "self", ".", "iter_ordered_graph", "(", "self", ".", "tree", ",", "-", "1", ",", "x", ")", "\n", "del", "x", "[", "0", "]", "\n", "return", "tuple", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.iter_ordered_graph": [[299, 303], ["overlay_sk.Graph.iter_children", "lista.append", "overlay_sk.Graph.iter_ordered_graph"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.iter_children", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.iter_ordered_graph"], ["", "def", "iter_ordered_graph", "(", "self", ",", "tree", ",", "prev", ",", "lista", ")", ":", "\n", "        ", "for", "el", ",", "mod", "in", "self", ".", "iter_children", "(", "tree", ",", "prev", ")", ":", "\n", "            ", "lista", ".", "append", "(", "el", ")", "\n", "self", ".", "iter_ordered_graph", "(", "mod", ",", "el", "[", "1", "]", ",", "lista", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.Graph.iter_children": [[304, 307], ["tree.named_children", "int"], "methods", ["None"], ["", "", "def", "iter_children", "(", "self", ",", "tree", ",", "prev", ")", ":", "\n", "        ", "for", "name", ",", "mod", "in", "tree", ".", "named_children", "(", ")", ":", "\n", "            ", "yield", "(", "prev", ",", "int", "(", "name", ")", ")", ",", "mod", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.overlay_sk": [[55, 98], ["tensor[].transpose", "matplotlib.figure", "matplotlib.scatter", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.axis", "io.BytesIO", "plt.figure.savefig", "io.BytesIO.seek", "numpy.reshape", "io.BytesIO.close", "numpy.frombuffer", "io.BytesIO.getvalue", "int", "int"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot"], ["", "", "def", "overlay_sk", "(", "img", ",", "tensor", ",", "graph", ",", "th", ")", ":", "\n", "    ", "\"\"\"\n    colorcode = (255, 0, 255)\n    RED = (0, 0, 255)\n    BLUE = (255, 0, 0)\n    miss_colorcode = (0, 255, 0)\n    for edge in graph:\n        j0, j1 = edge\n        x0, y0, c0 = tensor[:, j0]\n        x1, y1, c1 = tensor[:, j1]\n        c = min(c0, c1).item()\n        if th == 0 and c == 0:\n            cv2.line(img, (x0, y0), (x1, y1), miss_colorcode, 2)\n        elif c >= th:\n            colorcode = (round(255 * (1 - c)), 0, round(255 * c))\n            cv2.line(img, (x0, y0), (x1, y1), colorcode, 1)\n    \"\"\"", "\n", "ml", "=", "tensor", "[", ":", "-", "1", "]", ".", "transpose", "(", "1", ",", "0", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "4", ",", "5", ")", ")", "\n", "plt", ".", "scatter", "(", "ml", "[", ":", ",", "0", "]", ",", "-", "ml", "[", ":", ",", "1", "]", ",", "alpha", "=", "0.8", ",", "color", "=", "'red'", ",", "s", "=", "20", ")", "# 20", "\n", "plt", ".", "plot", "(", "ml", "[", ":", "17", ",", "0", "]", ",", "-", "ml", "[", ":", "17", ",", "1", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "ml", "[", "17", ":", "22", ",", "0", "]", ",", "-", "ml", "[", "17", ":", "22", ",", "1", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "ml", "[", "22", ":", "27", ",", "0", "]", ",", "-", "ml", "[", "22", ":", "27", ",", "1", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "ml", "[", "27", ":", "31", ",", "0", "]", ",", "-", "ml", "[", "27", ":", "31", ",", "1", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "ml", "[", "31", ":", "36", ",", "0", "]", ",", "-", "ml", "[", "31", ":", "36", ",", "1", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "ml", "[", "36", ":", "42", ",", "0", "]", ",", "-", "ml", "[", "36", ":", "42", ",", "1", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "[", "ml", "[", "41", ",", "0", "]", ",", "ml", "[", "36", ",", "0", "]", "]", ",", "[", "-", "ml", "[", "41", ",", "1", "]", ",", "-", "ml", "[", "36", ",", "1", "]", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "ml", "[", "42", ":", "48", ",", "0", "]", ",", "-", "ml", "[", "42", ":", "48", ",", "1", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "[", "ml", "[", "47", ",", "0", "]", ",", "ml", "[", "42", ",", "0", "]", "]", ",", "[", "-", "ml", "[", "47", ",", "1", "]", ",", "-", "ml", "[", "42", ",", "1", "]", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "ml", "[", "48", ":", "60", ",", "0", "]", ",", "-", "ml", "[", "48", ":", "60", ",", "1", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "[", "ml", "[", "48", ",", "0", "]", ",", "ml", "[", "59", ",", "0", "]", "]", ",", "[", "-", "ml", "[", "48", ",", "1", "]", ",", "-", "ml", "[", "59", ",", "1", "]", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "ml", "[", "60", ":", ",", "0", "]", ",", "-", "ml", "[", "60", ":", ",", "1", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "plot", "(", "[", "ml", "[", "60", ",", "0", "]", ",", "ml", "[", "67", ",", "0", "]", "]", ",", "[", "-", "ml", "[", "60", ",", "1", "]", ",", "-", "ml", "[", "67", ",", "1", "]", "]", ",", "color", "=", "'green'", ",", "alpha", "=", "0.6", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "io_buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "fig", ".", "savefig", "(", "io_buf", ",", "format", "=", "'raw'", ")", "# , dpi=DPI)", "\n", "io_buf", ".", "seek", "(", "0", ")", "\n", "img", "=", "np", ".", "reshape", "(", "np", ".", "frombuffer", "(", "io_buf", ".", "getvalue", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "\n", "newshape", "=", "(", "int", "(", "fig", ".", "bbox", ".", "bounds", "[", "3", "]", ")", ",", "int", "(", "fig", ".", "bbox", ".", "bounds", "[", "2", "]", ")", ",", "-", "1", ")", ")", "\n", "io_buf", ".", "close", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.define_img": [[100, 117], ["int", "int", "int", "int", "print", "print", "[].max().item", "[].max().item", "[].min().item", "[].min().item", "int", "int", "numpy.zeros", "[].max", "[].max", "[].min", "[].min", "abs", "abs", "int", "int", "tensor.max", "tensor.max", "tensor.min", "tensor.min"], "function", ["None"], ["", "def", "define_img", "(", "tensor", ")", ":", "\n", "    ", "X_max", "=", "int", "(", "tensor", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "Y_max", "=", "int", "(", "tensor", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "X_min", "=", "int", "(", "tensor", ".", "min", "(", "dim", "=", "0", ")", "[", "0", "]", ".", "min", "(", ")", ".", "item", "(", ")", ")", "\n", "Y_min", "=", "int", "(", "tensor", ".", "min", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "min", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "print", "(", "'Image range (x,y): (%d,%d) to (%d,%d)'", "%", "(", "X_min", ",", "Y_min", ",", "X_max", ",", "Y_max", ")", ")", "\n", "\n", "X_disp", ",", "Y_disp", "=", "0", ",", "0", "\n", "if", "X_min", "<", "0", ":", "\n", "        ", "X_disp", "+=", "int", "(", "abs", "(", "X_min", ")", "*", "1.1", ")", "\n", "", "if", "Y_min", "<", "0", ":", "\n", "        ", "Y_disp", "+=", "int", "(", "abs", "(", "Y_min", ")", "*", "1.1", ")", "\n", "", "print", "(", "'Image range (x,y): (%d,%d) to (%d,%d)'", "%", "(", "X_min", "+", "X_disp", ",", "Y_min", "+", "Y_disp", ",", "X_max", "+", "X_disp", ",", "Y_max", "+", "Y_disp", ")", ")", "\n", "\n", "img", "=", "np", ".", "zeros", "(", "(", "int", "(", "1.2", "*", "(", "X_max", "+", "X_disp", ")", ")", ",", "int", "(", "1.2", "*", "(", "Y_max", "+", "Y_disp", ")", ")", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "+", "255", "\n", "return", "img", ",", "X_disp", ",", "Y_disp", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.get_video_array": [[119, 125], ["overlay_sk.define_img", "itertools.zip_longest", "default_image.copy", "overlay_sk.overlay_sk"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.define_img", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.overlay_sk"], ["", "def", "get_video_array", "(", "tensor", ",", "graph", ",", "th", ",", "sequence", "=", "[", "]", ")", ":", "\n", "    ", "default_image", ",", "_", ",", "_", "=", "define_img", "(", "tensor", ")", "\n", "for", "frame", ",", "base_img", "in", "zip_longest", "(", "tensor", ",", "sequence", ")", ":", "\n", "        ", "if", "base_img", "is", "None", ":", "\n", "            ", "base_img", "=", "default_image", ".", "copy", "(", ")", "\n", "", "yield", "overlay_sk", "(", "base_img", ",", "frame", ",", "graph", ",", "th", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.plot": [[127, 130], ["overlay_sk.overlay_sk"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.overlay_sk"], ["", "", "def", "plot", "(", "tensor", ",", "img", ",", "graph", ",", "th", "=", "0.2", ")", ":", "\n", "    ", "img", "=", "overlay_sk", "(", "img", ",", "tensor", ",", "graph", ",", "th", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.loss.BCEWithLogitsLoss.__init__": [[10, 13], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weighted_loss", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weighted_loss", "=", "weighted_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.loss.BCEWithLogitsLoss.forward": [[14, 20], ["torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "vs[].to"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "gt", ",", "vs", ")", ":", "\n", "        ", "if", "self", ".", "weighted_loss", ":", "\n", "            ", "loss", "=", "binary_cross_entropy_with_logits", "(", "pred", ",", "gt", ",", "vs", "[", "'weight'", "]", ".", "to", "(", "pred", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "binary_cross_entropy_with_logits", "(", "pred", ",", "gt", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.loss.BatchedContrastiveLoss.forward": [[23, 44], ["torch.cat", "visual_feat.size", "visual_feat.pow().sum().sqrt().unsqueeze", "audio_feat.pow().sum().sqrt().unsqueeze", "dist_sync.pow", "torch.mean", "torch.sum", "visual_feat.pow().sum().sqrt", "audio_feat.pow().sum().sqrt", "visual_feat.pow().sum", "audio_feat.pow().sum", "visual_feat.pow", "audio_feat.pow", "torch.randperm"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "visual_feat", ",", "audio_feat", ")", ":", "\n", "        ", "B", "=", "visual_feat", ".", "size", "(", ")", "[", "0", "]", "\n", "# Normalization step", "\n", "x0", "=", "visual_feat", "/", "visual_feat", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "sqrt", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x1", "=", "audio_feat", "/", "audio_feat", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "sqrt", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "idx", "=", "B", "//", "2", "\n", "dist_sync", "=", "(", "x0", "[", ":", "idx", "]", "-", "x1", "[", ":", "idx", "]", ")", ".", "reshape", "(", "idx", ",", "-", "1", ")", ".", "norm", "(", "dim", "=", "1", ")", "\n", "dist_usync", "=", "(", "x0", "[", "idx", ":", "]", "-", "x1", "[", "idx", ":", "]", "[", "torch", ".", "randperm", "(", "B", "-", "idx", ")", "]", ")", ".", "reshape", "(", "B", "-", "idx", ",", "-", "1", ")", ".", "norm", "(", "dim", "=", "1", ")", "\n", "\n", "# loss = y * dist_n.pow(2) + (1 - y) * (self.margin - dist_n).clamp(0, self.margin).pow(2)", "\n", "loss", "=", "torch", ".", "cat", "(", "[", "dist_sync", ".", "pow", "(", "2", ")", ",", "(", "self", ".", "margin", "-", "dist_usync", ")", ".", "clamp", "(", "0", ",", "self", ".", "margin", ")", ".", "pow", "(", "2", ")", "]", ")", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "            ", "loss", "=", "loss", "*", "self", ".", "weight", "\n", "", "if", "self", ".", "reduce", ":", "\n", "            ", "return", "loss", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "size_average", ":", "\n", "                ", "return", "torch", ".", "mean", "(", "loss", ")", "\n", "", "else", ":", "\n", "                ", "return", "torch", ".", "sum", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.loss.MultiTaskLoss.forward": [[47, 58], ["sep_loss.new_tensor", "weighted_loss.sum", "torch.stack"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "pred", ")", ":", "\n", "        ", "sep_loss", "=", "pred", "[", "'separation_loss'", "]", "\n", "al_loss", "=", "pred", "[", "'alignment_loss'", "]", "\n", "if", "pred", "[", "'alignment_loss'", "]", "is", "None", ":", "\n", "            ", "return", "sep_loss", "\n", "\n", "", "coef", "=", "sep_loss", ".", "new_tensor", "(", "[", "1", ",", "0.1", "]", ")", "\n", "weighted_loss", "=", "coef", "*", "torch", ".", "stack", "(", "[", "sep_loss", ",", "al_loss", "]", ")", "\n", "pred", "[", "'weighted_loss'", "]", "=", "weighted_loss", "\n", "pred", "[", "'loss_coef'", "]", "=", "coef", "\n", "return", "weighted_loss", ".", "sum", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.__init__": [[22, 26], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.unet": [[27, 31], ["model.named_children", "p.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.others": [[32, 36], ["model.named_children", "p.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.normalize_max": [[5, 12], ["numpy.abs().max", "numpy.abs().max", "numpy.abs", "numpy.abs"], "function", ["None"], ["from", ".", "utils", ".", "loss", "import", "MultiTaskLoss", "\n", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.unet_params": [[14, 19], ["model.named_children", "p.parameters"], "function", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.readers.SKReader.__init__": [[8, 12], ["numpy.memmap"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "shape", ",", "filemanager", ",", "N", ",", "dtype", ")", ":", "\n", "        ", "self", ".", "npy", "=", "np", ".", "memmap", "(", "path", ",", "dtype", "=", "dtype", ",", "mode", "=", "'r'", ",", "shape", "=", "shape", ")", "\n", "self", ".", "filemanager", "=", "filemanager", "\n", "self", ".", "N", "=", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.readers.SKReader.__call__": [[13, 15], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "path", ",", "offset", ",", "length", ")", ":", "\n", "        ", "return", "self", ".", "npy", "[", "offset", ":", "offset", "+", "length", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.readers.SPReader.__init__": [[18, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filemanager", ")", ":", "\n", "        ", "self", ".", "filemanager", "=", "filemanager", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.readers.SPReader.__call__": [[21, 26], ["readers.ID_reader", "os.path.join", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.readers.ID_reader"], ["", "def", "__call__", "(", "self", ",", "path", ",", "offset", ",", "length", ")", ":", "\n", "        ", "key", "=", "ID_reader", "(", "path", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "key", "+", "'.npy'", ")", "\n", "npy", "=", "np", ".", "load", "(", "path", ",", "mmap_mode", "=", "'r'", ")", "\n", "return", "npy", "[", ":", ",", "offset", ":", "length", "+", "offset", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.readers.NumpyFrameReader.__init__": [[29, 39], ["numpy.load", "[].split", "path.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "source", "=", "None", ")", ":", "\n", "        ", "if", "source", "is", "not", "None", ":", "\n", "            ", "self", ".", "tree", "=", "{", "}", "\n", "for", "path", "in", "source", ":", "\n", "                ", "key", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "self", ".", "tree", "[", "key", "]", "=", "np", ".", "load", "(", "path", ",", "mmap_mode", "=", "'r'", ")", "\n", "", "self", ".", "from_memory", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "tree", "=", "None", "\n", "self", ".", "from_memory", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.readers.NumpyFrameReader.__call__": [[40, 46], ["[].split", "numpy.load", "path.split"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "path", ":", "str", ",", "offset", ":", "int", ",", "length", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "from_memory", ":", "\n", "            ", "key", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "return", "self", ".", "tree", "[", "key", "]", "[", "offset", ":", "offset", "+", "length", "]", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "load", "(", "path", ",", "mmap_mode", "=", "'r'", ")", "[", "offset", ":", "offset", "+", "length", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.readers.NumpyFrameReader.__getitem__": [[47, 49], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "tree", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.readers.class_reader": [[51, 54], ["path.split"], "function", ["None"], ["", "", "def", "class_reader", "(", "path", ")", ":", "\n", "    ", "key", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "return", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.readers.ID_reader": [[56, 59], ["path.split"], "function", ["None"], ["", "def", "ID_reader", "(", "path", ")", ":", "\n", "    ", "key", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "return", "key", "\n", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.BaseDataHandler.__init__": [[29, 67], ["flerken.datasets.AVDataset.__init__", "enumerate"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__"], ["def", "__init__", "(", "self", ",", "\n", "# Audiovisual tasks", "\n", "multitask", ":", "bool", ",", "\n", "# Flags", "\n", "video_enabled", ":", "bool", ",", "skeleton_enabled", ":", "bool", ",", "\n", "# Keys", "\n", "dataset_path", ",", "audio_exclude", ",", "audio_key", ",", "video_key", ",", "skeleton_key", ",", "\n", "# Dataset_args", "\n", "debug", ":", "bool", ",", "yield_mode", ":", "str", ",", "visualization", ",", "\n", "audio_video_rate", ",", "audio_length", ",", "n_video_frames", ",", "n_skeleton_frames", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseDataHandler", ",", "self", ")", ".", "__init__", "(", "dataset_path", ",", "in_memory", "=", "True", ",", "as_generator", "=", "False", ",", "exclude", "=", "audio_exclude", ",", "\n", "debug", "=", "debug", ",", "\n", "yield_mode", "=", "yield_mode", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "_rs2idx", "=", "{", "x", ":", "i", "for", "i", ",", "x", "in", "enumerate", "(", "self", ".", "filemanager", ".", "resources", ")", "}", "\n", "self", ".", "N_SEC_FRAMES", "=", "10", "\n", "\n", "# Flags", "\n", "self", ".", "multitask", "=", "multitask", "\n", "self", ".", "video_enabled", "=", "video_enabled", "\n", "self", ".", "skeleton_enabled", "=", "skeleton_enabled", "\n", "self", ".", "crop_mouth_enabled", "=", "False", "# Flag to be used by inherited classes", "\n", "self", ".", "single_frame_enabled", "=", "False", "# Flag to be used by inherited classes", "\n", "self", ".", "single_emb_enabled", "=", "False", "# Flag to be used by inherited classes", "\n", "self", ".", "savgol_enabled", "=", "False", "\n", "# Keys", "\n", "self", ".", "ad_key", "=", "audio_key", "\n", "self", ".", "vd_key", "=", "video_key", "\n", "self", ".", "skeleton_key", "=", "skeleton_key", "\n", "\n", "# audiovisual opts", "\n", "self", ".", "AV_RATE", "=", "audio_video_rate", "\n", "self", ".", "AUDIO_LENGTH", "=", "audio_length", "\n", "self", ".", "N_VIDEO_FRAMES", "=", "n_video_frames", "\n", "self", ".", "N_SK_FRAMES", "=", "n_skeleton_frames", "\n", "\n", "self", ".", "vis", "=", "visualization", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.BaseDataHandler.get_idx_kwargs": [[68, 82], ["round", "round"], "methods", ["None"], ["", "def", "get_idx_kwargs", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Given an index, this function generates the kwargs for the each modality reader to do his job.\n        \"\"\"", "\n", "kw", "=", "{", "'audio'", ":", "{", "'offset'", ":", "round", "(", "idx", "*", "self", ".", "AV_RATE", ")", ",", "'length'", ":", "self", ".", "AUDIO_LENGTH", "}", ",", "\n", "self", ".", "ad_key", ":", "{", "'offset'", ":", "round", "(", "idx", "*", "self", ".", "AV_RATE", ")", ",", "'length'", ":", "self", ".", "AUDIO_LENGTH", "}", "}", "\n", "if", "self", ".", "video_enabled", "or", "self", ".", "single_frame_enabled", ":", "\n", "            ", "kw", "[", "self", ".", "vd_key", "]", "=", "{", "'offset'", ":", "idx", ",", "'length'", ":", "self", ".", "N_VIDEO_FRAMES", "}", "\n", "kw", "[", "'videos'", "]", "=", "{", "'offset'", ":", "idx", ",", "'length'", ":", "self", ".", "N_VIDEO_FRAMES", "}", "\n", "", "if", "self", ".", "skeleton_enabled", ":", "\n", "            ", "kw", "[", "'landmarks'", "]", "=", "{", "'offset'", ":", "idx", ",", "'length'", ":", "self", ".", "N_VIDEO_FRAMES", "}", "\n", "", "if", "self", ".", "llcp_enabled", "or", "self", ".", "single_emb_enabled", ":", "\n", "            ", "kw", "[", "self", ".", "llcp_key", "]", "=", "{", "'offset'", ":", "idx", ",", "'length'", ":", "self", ".", "N_VIDEO_FRAMES", "}", "\n", "", "return", "kw", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.BaseDataHandler.valid_interval": [[83, 92], ["None"], "methods", ["None"], ["", "def", "valid_interval", "(", "self", ",", "init_ts", ",", "sample_timestamps", ",", "length", ")", ":", "\n", "        ", "is_valid", "=", "False", "\n", "for", "sample_timestamp", "in", "sample_timestamps", ":", "\n", "            ", "init", "=", "sample_timestamp", "[", "0", "]", "\n", "fin", "=", "sample_timestamp", "[", "1", "]", "\n", "if", "(", "init", "<=", "init_ts", "<=", "fin", ")", "and", "(", "init", "<=", "(", "init_ts", "+", "length", "-", "1", ")", "<=", "fin", ")", ":", "\n", "                ", "is_valid", "=", "True", "\n", "break", "\n", "", "", "return", "is_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.BaseDataHandler.precompute_epoch": [[93, 141], ["acappella_info.get_timestamps", "helpers.BaseDataHandler.getitem", "enumerate", "random.seed", "range", "len", "range", "range", "random.shuffle", "os.path.basename", "helpers.BaseDataHandler.valid_interval", "len", "helpers.BaseDataHandler.getitem", "traces.append", "len", "int", "len", "numpy.load", "traces.append", "len"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.BaseDataHandler.valid_interval"], ["", "def", "precompute_epoch", "(", "self", ",", "*", ",", "batch_size", ":", "int", ",", "n", ":", "int", ",", "overfit", ":", "bool", ",", "seed", ":", "int", "=", "None", ",", "n_sources", "=", "1", ",", "classes", "=", "None", ",", "\n", "sequential_inference", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Predifines which  elements are going to be loaded before computing the epoch\n        \"\"\"", "\n", "traces", "=", "[", "]", "\n", "timestamps", "=", "acappella_info", ".", "get_timestamps", "(", ")", "\n", "if", "sequential_inference", ":", "\n", "            ", "idx", "=", "self", ".", "_rs2idx", "[", "'frames'", "]", "\n", "_", ",", "trace_example", "=", "self", ".", "getitem", "(", "0", ",", "n_sources", ",", "[", "]", ",", "trazability", "=", "True", ",", "\n", "repeat_class", "=", "True", ",", "classes", "=", "classes", ")", "\n", "for", "j", ",", "sample", "in", "enumerate", "(", "self", ".", "filemanager", ".", "indexable", ")", ":", "\n", "                ", "video_path", "=", "sample", "[", "idx", "]", "\n", "sample_id", "=", "os", ".", "path", ".", "basename", "(", "video_path", ")", "[", ":", "-", "4", "]", "\n", "sample_timestamps", "=", "timestamps", "[", "sample_id", "]", "\n", "T", "=", "np", ".", "load", "(", "video_path", ",", "mmap_mode", "=", "'r'", ")", ".", "shape", "[", "0", "]", "\n", "n_elements", "=", "T", "//", "self", ".", "N_VIDEO_FRAMES", "\n", "for", "i", "in", "range", "(", "n_elements", ")", ":", "\n", "                    ", "if", "self", ".", "valid_interval", "(", "i", "*", "self", ".", "N_VIDEO_FRAMES", ",", "sample_timestamps", ",", "self", ".", "N_VIDEO_FRAMES", ")", ":", "\n", "                        ", "trace", "=", "{", "'indices'", ":", "[", "j", "]", ",", "\n", "'kwargs'", ":", "[", "{", "'audio'", ":", "{", "'offset'", ":", "i", "*", "self", ".", "AUDIO_LENGTH", ",", "'length'", ":", "self", ".", "AUDIO_LENGTH", "}", ",", "\n", "'frames'", ":", "{", "'offset'", ":", "i", "*", "self", ".", "N_VIDEO_FRAMES", ",", "\n", "'length'", ":", "self", ".", "N_VIDEO_FRAMES", "}", ",", "\n", "'llcp_embed'", ":", "{", "'offset'", ":", "i", "*", "self", ".", "N_VIDEO_FRAMES", ",", "\n", "'length'", ":", "self", ".", "N_VIDEO_FRAMES", "}", "}", "]", "}", "\n", "traces", ".", "append", "(", "trace", ")", "\n", "", "else", ":", "\n", "                        ", "sample_id", "\n", "", "", "", "", "else", ":", "\n", "            ", "set_seed", "(", "seed", ")", "\n", "while", "len", "(", "traces", ")", "<", "n", ":", "\n", "                ", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                    ", "_", ",", "trace", "=", "self", ".", "getitem", "(", "idx", ",", "n_sources", ",", "[", "]", ",", "trazability", "=", "True", ",", "\n", "repeat_class", "=", "True", ",", "classes", "=", "classes", ")", "\n", "traces", ".", "append", "(", "trace", ")", "\n", "if", "len", "(", "traces", ")", ">", "n", ":", "\n", "                        ", "break", "\n", "", "", "", "if", "overfit", ":", "\n", "                ", "r", "=", "len", "(", "traces", ")", "/", "batch_size", "\n", "traces_overfit", "=", "traces", "[", ":", "batch_size", "]", "\n", "traces", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "r", ")", ")", ":", "\n", "                    ", "traces", "=", "traces", "+", "traces_overfit", "\n", "", "", "else", ":", "\n", "                ", "shuffle", "(", "traces", ")", "\n", "", "n_samples", "=", "(", "len", "(", "traces", ")", "//", "batch_size", ")", "*", "batch_size", "\n", "traces", "=", "traces", "[", ":", "n_samples", "]", "\n", "", "return", "traces", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.BaseDataHandler.yield_mode": [[142, 145], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "yield_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "filemanager", ".", "yield_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.AudiosetDataHandler.__init__": [[148, 194], ["helpers.BaseDataHandler.__init__", "helpers.AudiosetDataHandler.reader.init_reader", "flerken.utils.BaseDict", "flerken.utils.BaseDict().load", "helpers.AudiosetDataHandler.filemanager.info.keys", "len", "torch.zeros", "torch.zeros().float", "len", "len", "helpers.AudiosetDataHandler.get_reader_kwargs", "[].split", "flerken.utils.BaseDict", "zip", "torch.zeros", "scipy.io.wavfile.read", "helpers.AudiosetDataHandler.filemanager.clusters.keys", "range", "len", "len", "f[].split"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.AcappellaDataHandler.get_reader_kwargs"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "\n", "# Audiovisual tasks", "\n", "onehot", ",", "\n", "# Acappella kwargs", "\n", "root", ",", "audio_exclude", ",", "audio_key", ",", "audio_length", ",", "\n", "# Dataset_args", "\n", "debug", ":", "bool", ",", "yield_mode", ":", "str", ",", "visualization", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "video_enabled", "=", "False", "\n", "skeleton_enabled", "=", "False", "\n", "multitask", "=", "False", "\n", "\n", "video_key", "=", "None", "\n", "skeleton_key", "=", "None", "\n", "\n", "n_skeleton_frames", "=", "None", "\n", "n_video_frames", "=", "None", "\n", "audio_video_rate", "=", "None", "\n", "super", "(", "AudiosetDataHandler", ",", "self", ")", ".", "__init__", "(", "multitask", ",", "\n", "video_enabled", ",", "skeleton_enabled", ",", "\n", "root", ",", "audio_exclude", ",", "audio_key", ",", "video_key", ",", "skeleton_key", ",", "\n", "debug", ",", "yield_mode", ",", "visualization", ",", "\n", "audio_video_rate", ",", "audio_length", ",", "n_video_frames", ",", "n_skeleton_frames", ",", "\n", "**", "kwargs", ")", "\n", "if", "self", ".", "skeleton_enabled", ":", "\n", "            ", "sk_dict", "=", "BaseDict", "(", ")", ".", "load", "(", "self", ".", "sk_dict_path", ")", "\n", "for", "key", "in", "self", ".", "filemanager", ".", "info", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "filemanager", ".", "info", "[", "key", "]", "[", "'skeleton_npy_indices'", "]", "=", "sk_dict", "[", "key", "]", "\n", "\n", "", "", "if", "onehot", "is", "None", ":", "\n", "            ", "self", ".", "is_classinformed", "=", "False", "\n", "len", "(", "self", ".", "filemanager", ")", "\n", "self", ".", "_zeros", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "filemanager", ".", "clusters", ")", ")", "\n", "self", ".", "class2idx", "=", "{", "x", ":", "y", "for", "x", ",", "y", "in", "\n", "zip", "(", "self", ".", "filemanager", ".", "clusters", ".", "keys", "(", ")", ",", "range", "(", "len", "(", "self", ".", "filemanager", ".", "clusters", ")", ")", ")", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "is_classinformed", "=", "True", "\n", "self", ".", "_zeros", "=", "torch", ".", "zeros", "(", "len", "(", "onehot", ")", ")", ".", "float", "(", ")", "\n", "self", ".", "class2idx", "=", "onehot", "\n", "\n", "", "self", ".", "reader", ".", "init_reader", "(", "**", "self", ".", "get_reader_kwargs", "(", ")", ")", "\n", "\n", "self", ".", "info", "=", "BaseDict", "(", ")", "\n", "for", "f", "in", "self", ".", "filemanager", ".", "indexable", ":", "\n", "            ", "key", "=", "f", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "self", ".", "info", "[", "key", "]", "=", "len", "(", "read", "(", "f", "[", "0", "]", ",", "mmap", "=", "True", ")", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.AudiosetDataHandler.class2onehot": [[195, 199], ["helpers.AudiosetDataHandler._zeros.clone"], "methods", ["None"], ["", "", "def", "class2onehot", "(", "self", ",", "cat", ")", ":", "\n", "        ", "x", "=", "self", ".", "_zeros", ".", "clone", "(", ")", "\n", "x", "[", "self", ".", "class2idx", "[", "cat", "]", "]", "=", "1.", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.AudiosetDataHandler.sample_idx": [[200, 210], ["[].split", "round", "round", "random.randint", "random.randint", "path.split", "int", "int"], "methods", ["None"], ["", "def", "sample_idx", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "yield_mode", "==", "'yield_module'", ":", "\n", "            ", "path", "=", "self", ".", "filemanager", "[", "idx", "]", "[", "self", ".", "_rs2idx", "[", "self", ".", "ad_key", "]", "]", "\n", "", "elif", "self", ".", "yield_mode", "==", "'yield_file'", ":", "\n", "            ", "path", "=", "self", ".", "filemanager", "[", "idx", "]", "[", "self", ".", "_rs2idx", "[", "self", ".", "ad_key", "]", "]", "\n", "", "key", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "N", "=", "self", ".", "info", "[", "key", "]", "\n", "kw", "=", "{", "'audio'", ":", "{", "'offset'", ":", "round", "(", "randint", "(", "0", ",", "int", "(", "N", "-", "1.2", "*", "self", ".", "AUDIO_LENGTH", ")", ")", ")", ",", "'length'", ":", "self", ".", "AUDIO_LENGTH", "}", ",", "\n", "self", ".", "ad_key", ":", "{", "'offset'", ":", "round", "(", "randint", "(", "0", ",", "int", "(", "N", "-", "1.2", "*", "self", ".", "AUDIO_LENGTH", ")", ")", ")", ",", "'length'", ":", "self", ".", "AUDIO_LENGTH", "}", "}", "\n", "return", "kw", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.AudiosetDataHandler.get_reader_kwargs": [[211, 213], ["flerken.datasets.audiovisual_dataset.AudioReader"], "methods", ["None"], ["", "def", "get_reader_kwargs", "(", "self", ")", ":", "\n", "        ", "return", "{", "self", ".", "ad_key", ":", "AudioReader", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.AcappellaDataHandler.__init__": [[216, 258], ["helpers.BaseDataHandler.__init__", "helpers.AcappellaDataHandler.reader.init_reader", "get_timestamps", "flerken.utils.BaseDict", "helpers.AcappellaDataHandler._check_stamps", "inspect.getfullargspec", "args.update", "helpers.AcappellaDataHandler.get_reader_kwargs", "locals"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.AcappellaDataHandler._check_stamps", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.AcappellaDataHandler.get_reader_kwargs"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "\n", "# Audiovisual tasks", "\n", "multitask", ":", "bool", ",", "handle_empty_stamps", ":", "bool", ",", "mouth_shape", ":", "tuple", ",", "\n", "# Flags", "\n", "video_enabled", ":", "bool", ",", "skeleton_enabled", ":", "bool", ",", "\n", "llcp_enabled", ":", "bool", ",", "\n", "crop_mouth", ":", "bool", ",", "\n", "savgol_filter_enabled", ":", "bool", ",", "\n", "single_frame_enabled", ":", "bool", ",", "\n", "single_emb_enabled", ":", "bool", ",", "\n", "# Acappella kwargs", "\n", "dataset_path", ",", "audio_exclude", ",", "audio_key", ",", "video_key", ",", "skeleton_key", ",", "\n", "# Llcp kwargs", "\n", "llcp_key", ",", "\n", "audio_video_rate", ",", "audio_length", ",", "n_video_frames", ",", "n_skeleton_frames", ",", "\n", "# Dataset_args", "\n", "debug", ":", "bool", ",", "yield_mode", ":", "str", ",", "visualization", ",", "**", "kwargs", ")", ":", "\n", "        ", "args", "=", "{", "}", "\n", "for", "arg", "in", "inspect", ".", "getfullargspec", "(", "AcappellaDataHandler", ".", "__init__", ")", ".", "kwonlyargs", ":", "\n", "            ", "if", "arg", "!=", "'self'", ":", "\n", "                ", "args", ".", "update", "(", "{", "arg", ":", "locals", "(", ")", "[", "arg", "]", "}", ")", "\n", "", "", "super", "(", "AcappellaDataHandler", ",", "self", ")", ".", "__init__", "(", "multitask", ",", "\n", "video_enabled", ",", "skeleton_enabled", ",", "\n", "dataset_path", ",", "audio_exclude", ",", "audio_key", ",", "video_key", ",", "skeleton_key", ",", "\n", "debug", ",", "yield_mode", ",", "visualization", ",", "\n", "audio_video_rate", ",", "audio_length", ",", "n_video_frames", ",", "n_skeleton_frames", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "llcp_enabled", "=", "llcp_enabled", "\n", "self", ".", "single_frame_enabled", "=", "single_frame_enabled", "\n", "self", ".", "single_emb_enabled", "=", "single_emb_enabled", "\n", "self", ".", "llcp_key", "=", "llcp_key", "\n", "self", ".", "crop_mouth_enabled", "=", "crop_mouth", "and", "video_enabled", "\n", "self", ".", "savgol_enabled", "=", "skeleton_enabled", "and", "savgol_filter_enabled", "\n", "self", ".", "mouth_shape", "=", "mouth_shape", "\n", "self", ".", "reader", ".", "init_reader", "(", "**", "self", ".", "get_reader_kwargs", "(", ")", ")", "\n", "from", "acappella_info", "import", "get_timestamps", "\n", "stamps", "=", "get_timestamps", "(", ")", "\n", "self", ".", "info", "=", "BaseDict", "(", ")", "\n", "for", "key", "in", "stamps", ":", "\n", "            ", "if", "key", "not", "in", "audio_exclude", ":", "\n", "                ", "self", ".", "info", "[", "key", "]", "=", "{", "'stamps'", ":", "stamps", "[", "key", "]", "}", "\n", "", "", "self", ".", "_check_stamps", "(", "**", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.AcappellaDataHandler._check_stamps": [[259, 288], ["helpers.AcappellaDataHandler._check_stamps.gather_good"], "methods", ["None"], ["", "def", "_check_stamps", "(", "self", ",", "handle_empty_stamps", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        This method ensures each sample has the minimum duration required\n\n        \"\"\"", "\n", "def", "gather_good", "(", "stamps", ")", ":", "\n", "            ", "return", "[", "x", "for", "x", "in", "stamps", "if", "x", "[", "1", "]", "-", "x", "[", "0", "]", ">", "self", ".", "N_VIDEO_FRAMES", "+", "self", ".", "N_SEC_FRAMES", "]", "\n", "\n", "", "def", "is_empty", "(", "x", ")", ":", "\n", "            ", "return", "not", "bool", "(", "x", ")", "\n", "\n", "", "exclude", "=", "[", "]", "\n", "for", "key", "in", "self", ".", "info", ":", "\n", "            ", "stamp", "=", "self", ".", "info", "[", "key", "]", "[", "'stamps'", "]", "\n", "stamp", "=", "gather_good", "(", "stamp", ")", "\n", "\n", "if", "is_empty", "(", "stamp", ")", ":", "\n", "                ", "warn", "(", "'Sample %s contains no stamps. Exclude it from further initializations.'", "%", "key", ")", "\n", "if", "key", "not", "in", "kwargs", "[", "'audio_exclude'", "]", ":", "\n", "                    ", "exclude", ".", "append", "(", "key", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "info", "[", "key", "]", "[", "'stamps'", "]", "=", "stamp", "\n", "\n", "", "", "kwargs", "[", "'audio_exclude'", "]", "+=", "exclude", "\n", "kwargs", "[", "'handle_empty_stamps'", "]", "=", "False", "\n", "if", "not", "is_empty", "(", "exclude", ")", ":", "\n", "            ", "self", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "self", ".", "_exclude_empty_stamps", "=", "exclude", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.AcappellaDataHandler.load_llcp_embedding": [[289, 293], ["helpers.AcappellaDataHandler.getitem"], "methods", ["None"], ["", "def", "load_llcp_embedding", "(", "self", ",", "trace", ")", ":", "\n", "        ", "llcp_embedding", "=", "self", ".", "getitem", "(", "trace", ",", "1", ",", "[", "self", ".", "llcp_key", "]", ")", "\n", "llcp_embedding", "=", "llcp_embedding", "[", "0", "]", "\n", "return", "llcp_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.AcappellaDataHandler.sample_idx": [[294, 306], ["random.choice", "random.randint", "helpers.AcappellaDataHandler.get_idx_kwargs", "path.split", "[].split", "path.split"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.BaseDataHandler.get_idx_kwargs"], ["", "def", "sample_idx", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "yield_mode", "==", "'yield_module'", ":", "\n", "            ", "path", "=", "self", ".", "filemanager", "[", "idx", "]", "[", "self", ".", "_rs2idx", "[", "self", ".", "vd_key", "]", "]", "\n", "key", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "", "elif", "self", ".", "yield_mode", "==", "'yield_file'", ":", "\n", "            ", "path", "=", "self", ".", "filemanager", "[", "idx", "]", "[", "self", ".", "_rs2idx", "[", "self", ".", "vd_key", "]", "]", "\n", "key", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "", "stamp0", ",", "stamp1", "=", "choice", "(", "self", ".", "info", "[", "key", "]", "[", "'stamps'", "]", ")", "\n", "stamp", "=", "randint", "(", "stamp0", ",", "stamp1", "-", "self", ".", "N_VIDEO_FRAMES", "-", "self", ".", "N_SEC_FRAMES", ")", "\n", "\n", "return", "self", ".", "get_idx_kwargs", "(", "stamp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.AcappellaDataHandler.get_reader_kwargs": [[307, 319], ["flerken.datasets.audiovisual_dataset.AudioReader", "out.update", "out.update", "out.update", "readers.NumpyFrameReader", "readers.NumpyFrameReader", "readers.NumpyFrameReader"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update"], ["", "def", "get_reader_kwargs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This method defines the reader associated to each modality\n        \"\"\"", "\n", "out", "=", "{", "self", ".", "ad_key", ":", "AudioReader", "(", ")", "}", "\n", "if", "self", ".", "skeleton_enabled", ":", "\n", "            ", "out", ".", "update", "(", "{", "'landmarks'", ":", "NumpyFrameReader", "(", ")", "}", ")", "\n", "", "if", "self", ".", "video_enabled", "or", "self", ".", "single_frame_enabled", ":", "\n", "            ", "out", ".", "update", "(", "{", "self", ".", "vd_key", ":", "NumpyFrameReader", "(", ")", "}", ")", "\n", "", "if", "self", ".", "llcp_enabled", "or", "self", ".", "single_emb_enabled", ":", "\n", "            ", "out", ".", "update", "(", "{", "self", ".", "llcp_key", ":", "NumpyFrameReader", "(", ")", "}", ")", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.np_check_sing": [[16, 18], ["numpy.any", "numpy.any", "numpy.isnan", "numpy.isinf"], "function", ["None"], ["def", "np_check_sing", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "any", "(", "np", ".", "isnan", "(", "x", ")", ")", "or", "np", ".", "any", "(", "np", ".", "isinf", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.torch_check_sing": [[20, 22], ["torch.isnan().any", "torch.isinf().any", "torch.isnan", "torch.isinf"], "function", ["None"], ["", "def", "torch_check_sing", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "isnan", "(", "x", ")", ".", "any", "(", ")", "or", "torch", ".", "isinf", "(", "x", ")", ".", "any", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.TraceWrapper.__init__": [[174, 176], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "trace", ")", ":", "\n", "        ", "self", ".", "trace", "=", "trace", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.DataManager.custom_ops": [[186, 248], ["utils.normalize_max", "utils.normalize_max", "flerken.audio.np_int2float", "flerken.audio.np_int2float", "isinstance", "max", "torch.from_numpy", "torch.from_numpy", "dataloader.DataManager.normalize_video", "torch.from_numpy", "torch.nn.functional.upsample_bilinear.permute", "torch.nn.functional.upsample_bilinear.permute().float().contiguous", "frames.permute().float().contiguous", "[].copy().astype", "torch.from_numpy().permute().unsqueeze", "torch.from_numpy", "torch.from_numpy", "dataloader.TraceWrapper", "zip", "isinstance", "dataloader.DataManager.rms", "dataloader.DataManager.rms", "numpy.abs().max", "numpy.abs().max", "torch.nn.functional.upsample_bilinear", "scipy.signal.savgol_filter", "[].copy().astype", "[].copy().astype", "range", "torch.nn.functional.upsample_bilinear.permute().float", "frames.permute().float", "[].copy", "torch.from_numpy().permute", "len", "random.choice", "numpy.abs", "numpy.abs", "[].copy", "[].copy", "torch.nn.functional.upsample_bilinear.permute", "frames.permute", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.normalize_max", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.normalize_max", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.DataManager.normalize_video", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.DataManager.rms", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.DataManager.rms"], ["    ", "def", "custom_ops", "(", "self", ",", "data", ":", "dict", ",", "traces", ":", "dict", ",", "datasets_used", ":", "dict", ",", "idx", ":", "int", ")", ":", "\n", "        ", "rsc2idx", "=", "{", "x", ":", "y", "for", "x", ",", "y", "in", "\n", "zip", "(", "self", ".", "acappella_av", "[", "'query_elements'", "]", ",", "range", "(", "len", "(", "self", ".", "acappella_av", "[", "'query_elements'", "]", ")", ")", ")", "}", "\n", "audio", "=", "normalize_max", "(", "np_int2float", "(", "data", "[", "'acappella_visual'", "]", "[", "rsc2idx", "[", "'audio'", "]", "]", "[", "0", "]", ")", ")", "\n", "audio_acmt", "=", "normalize_max", "(", "np_int2float", "(", "data", "[", "'audioset'", "]", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "if", "self", ".", "loudness_coef", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "loudness_coef", ",", "float", ")", ":", "\n", "                ", "loudness_coef", "=", "self", ".", "loudness_coef", "\n", "", "elif", "isinstance", "(", "self", ".", "loudness_coef", ",", "str", ")", ":", "\n", "                ", "if", "self", ".", "loudness_coef", "==", "'random'", ":", "\n", "                    ", "loudness_coef", "=", "choice", "(", "[", "0.25", ",", "0.5", ",", "0.75", ",", "1.", "]", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "\n", "", "", "rms_audio", "=", "self", ".", "rms", "(", "audio", ")", "or", "1", "\n", "rms_audio_acmt", "=", "self", ".", "rms", "(", "audio_acmt", ")", "or", "1", "\n", "audio", "=", "loudness_coef", "*", "audio", "/", "rms_audio", "\n", "audio_acmt", "=", "audio_acmt", "/", "rms_audio_acmt", "\n", "max_val", "=", "max", "(", "np", ".", "abs", "(", "audio", ")", ".", "max", "(", ")", ",", "np", ".", "abs", "(", "audio_acmt", ")", ".", "max", "(", ")", ")", "\n", "audio", "/=", "max_val", "\n", "audio_acmt", "/=", "max_val", "\n", "", "output", "=", "{", "'audio'", ":", "torch", ".", "from_numpy", "(", "audio", ")", ",", "'audio_acmt'", ":", "torch", ".", "from_numpy", "(", "audio_acmt", ")", "}", "\n", "\n", "read_video", "=", "self", ".", "acappella", ".", "video_enabled", "or", "self", ".", "acappella", ".", "single_frame_enabled", "\n", "read_video_only", "=", "self", ".", "acappella", ".", "video_enabled", "and", "not", "self", ".", "acappella", ".", "single_frame_enabled", "\n", "read_frame_only", "=", "not", "self", ".", "acappella", ".", "video_enabled", "and", "self", ".", "acappella", ".", "single_frame_enabled", "\n", "read_both", "=", "self", ".", "acappella", ".", "video_enabled", "and", "self", ".", "acappella", ".", "single_frame_enabled", "\n", "if", "read_video", ":", "\n", "            ", "video", "=", "data", "[", "'acappella_visual'", "]", "[", "rsc2idx", "[", "'frames'", "]", "]", "[", "0", "]", "\n", "if", "read_frame_only", ":", "\n", "                ", "video", "=", "video", "[", "[", "20", ",", "50", ",", "80", "]", "]", "\n", "", "video", "=", "self", ".", "normalize_video", "(", "video", ")", "\n", "video", "=", "torch", ".", "from_numpy", "(", "video", ")", "\n", "video", "=", "video", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "if", "read_both", ":", "\n", "                ", "frames", "=", "video", "[", "[", "20", ",", "50", ",", "80", "]", "]", "\n", "", "elif", "read_frame_only", ":", "\n", "                ", "frames", "=", "video", "\n", "", "if", "self", ".", "acappella", ".", "crop_mouth_enabled", "and", "self", ".", "acappella", ".", "video_enabled", ":", "\n", "                ", "video", "=", "video", "[", "...", ",", "60", ":", "100", ",", "20", ":", "80", "]", "\n", "video", "=", "torch", ".", "nn", ".", "functional", ".", "upsample_bilinear", "(", "video", ",", "size", "=", "self", ".", "acappella", ".", "mouth_shape", ")", "\n", "\n", "", "", "if", "self", ".", "acappella", ".", "video_enabled", ":", "\n", "            ", "output", "[", "'video'", "]", "=", "video", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "float", "(", ")", ".", "contiguous", "(", ")", "\n", "", "if", "self", ".", "acappella", ".", "single_frame_enabled", ":", "\n", "            ", "output", "[", "'single_frame'", "]", "=", "frames", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "float", "(", ")", ".", "contiguous", "(", ")", "\n", "", "if", "self", ".", "acappella", ".", "skeleton_enabled", ":", "\n", "            ", "savgol", "=", "data", "[", "'acappella_visual'", "]", "[", "rsc2idx", "[", "'landmarks'", "]", "]", "[", "0", "]", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "self", ".", "acappella", ".", "savgol_enabled", ":", "\n", "                ", "savgol", "=", "savgol_filter", "(", "savgol", ",", "\n", "window_length", "=", "self", ".", "acappella", ".", "_savgol_size", ",", "\n", "polyorder", "=", "self", ".", "acappella", ".", "_savgol_order", ",", "\n", "axis", "=", "0", ")", "\n", "", "output", "[", "'landmarks'", "]", "=", "torch", ".", "from_numpy", "(", "savgol", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "\n", "-", "1", ")", "\n", "", "if", "self", ".", "acappella", ".", "llcp_enabled", ":", "\n", "            ", "output", "[", "'llcp_embedding'", "]", "=", "torch", ".", "from_numpy", "(", "\n", "data", "[", "'acappella_visual'", "]", "[", "rsc2idx", "[", "'llcp_embed'", "]", "]", "[", "0", "]", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "if", "self", ".", "acappella", ".", "single_emb_enabled", ":", "\n", "            ", "output", "[", "'single_frame'", "]", "=", "torch", ".", "from_numpy", "(", "\n", "data", "[", "'acappella_visual'", "]", "[", "rsc2idx", "[", "'llcp_embed'", "]", "]", "[", "0", "]", "[", "[", "20", ",", "50", ",", "80", "]", "]", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "return", "output", ",", "TraceWrapper", "(", "traces", ")", ",", "datasets_used", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.DataManager.rms": [[249, 251], ["numpy.sqrt", "numpy.mean"], "methods", ["None"], ["", "def", "rms", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "x", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.DataManager.statistics": [[256, 260], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "@", "statistics", ".", "setter", "\n", "def", "statistics", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "_mean", "=", "np", ".", "array", "(", "val", "[", "0", "]", ")", "\n", "self", ".", "_std", "=", "np", ".", "array", "(", "val", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.DataManager.normalize_video": [[261, 263], ["None"], "methods", ["None"], ["", "def", "normalize_video", "(", "self", ",", "array", ")", ":", "\n", "        ", "return", "(", "array", "/", "255.", "-", "self", ".", "_mean", ")", "/", "self", ".", "_std", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.DataManager.undo_normalization": [[264, 266], ["None"], "methods", ["None"], ["", "def", "undo_normalization", "(", "self", ",", "array", ")", ":", "\n", "        ", "return", "array", "*", "self", ".", "_std", "+", "self", ".", "_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.DataManager.acappella": [[267, 270], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "acappella", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "acappella_av", "[", "'dataset'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.DataManager.loudness_coef": [[275, 278], ["None"], "methods", ["None"], ["", "@", "loudness_coef", ".", "setter", "\n", "def", "loudness_coef", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "_k", "=", "val", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.default_convert": [[95, 115], ["type", "isinstance", "torch.as_tensor", "isinstance", "np_str_obj_array_pattern.search", "dataloader.default_convert", "isinstance", "hasattr", "type.", "isinstance", "isinstance", "dataloader.default_convert", "dataloader.default_convert"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.default_convert", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.default_convert", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.default_convert"], ["def", "default_convert", "(", "data", ")", ":", "\n", "    ", "r\"\"\"Converts each NumPy array data field into a tensor\"\"\"", "\n", "elem_type", "=", "type", "(", "data", ")", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "elem_type", ".", "__module__", "==", "'numpy'", "and", "elem_type", ".", "__name__", "!=", "'str_'", "and", "elem_type", ".", "__name__", "!=", "'string_'", ":", "\n", "# array of string classes and object", "\n", "        ", "if", "elem_type", ".", "__name__", "==", "'ndarray'", "and", "np_str_obj_array_pattern", ".", "search", "(", "data", ".", "dtype", ".", "str", ")", "is", "not", "None", ":", "\n", "            ", "return", "data", "\n", "", "return", "torch", ".", "as_tensor", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "default_convert", "(", "data", "[", "key", "]", ")", "for", "key", "in", "data", "}", "\n", "", "elif", "isinstance", "(", "data", ",", "tuple", ")", "and", "hasattr", "(", "data", ",", "'_fields'", ")", ":", "# namedtuple", "\n", "        ", "return", "elem_type", "(", "*", "(", "default_convert", "(", "d", ")", "for", "d", "in", "data", ")", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "collections", ".", "abc", ".", "Sequence", ")", "and", "not", "isinstance", "(", "data", ",", "string_classes", ")", ":", "\n", "        ", "return", "[", "default_convert", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "else", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.default_collate": [[119, 166], ["type", "isinstance", "TypeError", "torch.stack", "default_collate_err_msg_format.format", "torch.utils.data.get_worker_info", "sum", "elem.storage()._new_shared", "elem.new", "isinstance", "dataloader.default_collate", "torch.tensor", "isinstance", "x.numel", "elem.storage", "np_str_obj_array_pattern.search", "TypeError", "torch.as_tensor", "torch.tensor", "isinstance", "default_collate_err_msg_format.format", "torch.as_tensor", "isinstance", "dataloader.default_collate", "isinstance", "hasattr", "type.", "isinstance", "iter", "len", "zip", "next", "all", "RuntimeError", "dataloader.default_collate", "dataloader.default_collate", "zip", "len"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.default_collate", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.default_collate", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.default_collate", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.default_collate"], ["", "", "def", "default_collate", "(", "batch", ")", ":", "\n", "    ", "\"\"\"\n    Puts each data field into a tensor with outer dimension batch size.\n    This is a direct copy from pytorch code. The pytorch source code changes from version 1.8 onwards.\n    \"\"\"", "\n", "elem", "=", "batch", "[", "0", "]", "\n", "elem_type", "=", "type", "(", "elem", ")", "\n", "if", "isinstance", "(", "elem", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "out", "=", "None", "\n", "if", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "is", "not", "None", ":", "\n", "# If we're in a background process, concatenate directly into a", "\n", "# shared memory tensor to avoid an extra copy", "\n", "            ", "numel", "=", "sum", "(", "[", "x", ".", "numel", "(", ")", "for", "x", "in", "batch", "]", ")", "\n", "storage", "=", "elem", ".", "storage", "(", ")", ".", "_new_shared", "(", "numel", ")", "\n", "out", "=", "elem", ".", "new", "(", "storage", ")", "\n", "", "return", "torch", ".", "stack", "(", "batch", ",", "0", ",", "out", "=", "out", ")", "\n", "", "elif", "elem_type", ".", "__module__", "==", "'numpy'", "and", "elem_type", ".", "__name__", "!=", "'str_'", "and", "elem_type", ".", "__name__", "!=", "'string_'", ":", "\n", "        ", "if", "elem_type", ".", "__name__", "==", "'ndarray'", "or", "elem_type", ".", "__name__", "==", "'memmap'", ":", "\n", "# array of string classes and object", "\n", "            ", "if", "np_str_obj_array_pattern", ".", "search", "(", "elem", ".", "dtype", ".", "str", ")", "is", "not", "None", ":", "\n", "                ", "raise", "TypeError", "(", "default_collate_err_msg_format", ".", "format", "(", "elem", ".", "dtype", ")", ")", "\n", "\n", "", "return", "default_collate", "(", "[", "torch", ".", "as_tensor", "(", "b", ")", "for", "b", "in", "batch", "]", ")", "\n", "", "elif", "elem", ".", "shape", "==", "(", ")", ":", "# scalars", "\n", "            ", "return", "torch", ".", "as_tensor", "(", "batch", ")", "\n", "", "", "elif", "isinstance", "(", "elem", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "batch", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "", "elif", "isinstance", "(", "elem", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "elem", ",", "string_classes", ")", ":", "\n", "        ", "return", "batch", "\n", "", "elif", "isinstance", "(", "elem", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "default_collate", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ")", "for", "key", "in", "elem", "}", "\n", "", "elif", "isinstance", "(", "elem", ",", "tuple", ")", "and", "hasattr", "(", "elem", ",", "'_fields'", ")", ":", "# namedtuple", "\n", "        ", "return", "elem_type", "(", "*", "(", "default_collate", "(", "samples", ")", "for", "samples", "in", "zip", "(", "*", "batch", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "elem", ",", "collections", ".", "abc", ".", "Sequence", ")", ":", "\n", "# check to make sure that the elements in batch have consistent size", "\n", "        ", "it", "=", "iter", "(", "batch", ")", "\n", "elem_size", "=", "len", "(", "next", "(", "it", ")", ")", "\n", "if", "not", "all", "(", "len", "(", "elem", ")", "==", "elem_size", "for", "elem", "in", "it", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'each element in list of batch should be of equal size'", ")", "\n", "", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "[", "default_collate", "(", "samples", ")", "for", "samples", "in", "transposed", "]", "\n", "", "else", ":", "\n", "        ", "return", "batch", "\n", "", "raise", "TypeError", "(", "default_collate_err_msg_format", ".", "format", "(", "elem_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.pytorch_dataloader": [[178, 183], ["torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "pytorch_dataloader", "(", "dataset", ",", "batch_size", ")", ":", "\n", "# NUM_WORKERS = cpu_count()", "\n", "    ", "NUM_WORKERS", "=", "0", "\n", "return", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "drop_last", "=", "True", ",", "num_workers", "=", "NUM_WORKERS", ",", "\n", "collate_fn", "=", "default_collate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor.__new__": [[25, 34], ["super().__new__", "super().__new__.init", "new_kwargs.update", "super().__new__.init"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.NetworkSize.__new__", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor.init", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor.init"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor.init": [[35, 63], ["copy.copy.copy", "inspect.getfullargspec", "json.load", "__init__.DataloaderConstructor.__default_kwargs__.update", "open", "__init__.DataloaderConstructor.key_kwargs.update", "locals", "__init__.DataloaderConstructor.av_kwargs.update"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor._build_assertions": [[64, 67], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor.set_mode": [[68, 71], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor.add_acappella": [[72, 88], ["__init__.DataloaderConstructor._acappella", "dataset_acappella[].precompute_epoch", "__init__.DataloaderConstructor.dataset_list.append"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor._acappella", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.BaseDataHandler.precompute_epoch"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor.build": [[89, 108], ["__init__.DataloaderConstructor._build_assertions", "dataloader.pytorch_dataloader.DataManager", "dataloader.pytorch_dataloader.pytorch_dataloader", "random.choices", "list", "__init__.DataloaderConstructor.traces.keys", "zip", "range"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor._build_assertions", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.dataloader.pytorch_dataloader"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor.add_audioset": [[109, 137], ["os.path.join", "os.listdir", "os.listdir", "os.listdir.index", "os.listdir.pop", "__init__.DataloaderConstructor._audioset", "dataset_audioset_i[].precompute_epoch", "__init__.DataloaderConstructor.dataset_list.append", "NotImplementedError", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor._audioset", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.dataset_helpers.helpers.BaseDataHandler.precompute_epoch"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor._audioset": [[138, 149], ["AudiosetDataHandler"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.DataloaderConstructor._acappella": [[150, 213], ["exclusion_list.extend", "AcappellaDataHandler", "query_elements.append", "query_elements.append", "query_elements.append", "tuple", "os.path.join", "args.append", "__init__.DataloaderConstructor.mode.lower", "exclusion_list.extend", "__init__.DataloaderConstructor.mode.lower", "exclusion_list.append", "args.append", "NotImplementedError", "__init__.DataloaderConstructor.mode.lower", "exclusion_list.extend", "__init__.DataloaderConstructor.mode.lower", "exclusion_list.append", "__init__.DataloaderConstructor.mode.lower", "exclusion_list.extend", "__init__.DataloaderConstructor.mode.lower", "exclusion_list.extend"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.datasets.__init__.check_keys": [[17, 22], ["enumerate", "all", "[].split", "isinstance", "rs[].split"], "function", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.gconv.ConvTemporalGraphical.__init__": [[36, 57], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "t_kernel_size", "=", "1", ",", "\n", "t_stride", "=", "1", ",", "\n", "t_padding", "=", "0", ",", "\n", "t_dilation", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "\n", "out_channels", "*", "kernel_size", ",", "\n", "kernel_size", "=", "(", "t_kernel_size", ",", "1", ")", ",", "\n", "padding", "=", "(", "t_padding", ",", "0", ")", ",", "\n", "stride", "=", "(", "t_stride", ",", "1", ")", ",", "\n", "dilation", "=", "(", "t_dilation", ",", "1", ")", ",", "\n", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.gconv.ConvTemporalGraphical.forward": [[58, 81], ["gconv.ConvTemporalGraphical.conv", "torch.einsum.size", "torch.einsum.size", "torch.einsum.view", "torch.einsum.view", "A.ndimension", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.contiguous", "torch.einsum.contiguous", "A.size", "A.ndimension", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "A.size", "A.size", "A.ndimension", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "Exception", "A.ndimension"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "A", ")", ":", "\n", "        ", "if", "A", ".", "ndim", "==", "4", ":", "\n", "            ", "assert", "A", ".", "size", "(", "1", ")", "==", "self", ".", "kernel_size", "\n", "", "elif", "A", ".", "ndim", "==", "5", ":", "\n", "            ", "assert", "A", ".", "size", "(", "2", ")", "==", "self", ".", "kernel_size", "\n", "", "else", ":", "\n", "            ", "assert", "A", ".", "size", "(", "0", ")", "==", "self", ".", "kernel_size", "\n", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "# B,channels=3,T,J", "\n", "\n", "n", ",", "kc", ",", "t", ",", "v", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "n", ",", "self", ".", "kernel_size", ",", "kc", "//", "self", ".", "kernel_size", ",", "t", ",", "v", ")", "\n", "if", "A", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "# static or dynamic", "\n", "            ", "x", "=", "torch", ".", "einsum", "(", "'nkctv,kvw->nctw'", ",", "(", "x", ",", "A", ")", ")", "\n", "", "elif", "A", ".", "ndimension", "(", ")", "==", "4", ":", "\n", "# Categorical", "\n", "            ", "x", "=", "torch", ".", "einsum", "(", "'nkctv,nkvw->nctw'", ",", "(", "x", ",", "A", ")", ")", "\n", "", "elif", "A", ".", "ndimension", "(", ")", "==", "5", ":", "\n", "            ", "x", "=", "torch", ".", "einsum", "(", "'nkctv,ntkvw->nctw'", ",", "(", "x", ",", "A", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Adjacency matrix dimensionalty is %d but should be 3,4 or 5'", "%", "A", ".", "ndimension", "(", ")", ")", "\n", "", "return", "x", ".", "contiguous", "(", ")", ",", "A", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.graph.Graph.__init__": [[26, 39], ["graph.Graph.get_edge", "graph.get_hop_distance", "graph.Graph.get_adjacency"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.graph.Graph.get_edge", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.graph.get_hop_distance", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.graph.Graph.get_adjacency"], ["def", "__init__", "(", "self", ",", "\n", "layout", "=", "'openpose'", ",", "\n", "strategy", "=", "'uniform'", ",", "\n", "max_hop", "=", "1", ",", "\n", "dilation", "=", "1", ")", ":", "\n", "        ", "self", ".", "max_hop", "=", "max_hop", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n", "self", ".", "get_edge", "(", "layout", ")", "\n", "self", ".", "hop_dis", "=", "get_hop_distance", "(", "self", ".", "num_node", ",", "\n", "self", ".", "edge", ",", "\n", "max_hop", "=", "max_hop", ")", "\n", "self", ".", "get_adjacency", "(", "strategy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.graph.Graph.__str__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.graph.Graph.get_edge": [[43, 163], ["range", "range", "range", "range", "range", "range", "ValueError", "range", "range", "range", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice", "slice"], "methods", ["None"], ["", "def", "get_edge", "(", "self", ",", "layout", ")", ":", "\n", "        ", "if", "layout", "==", "'openpose'", ":", "\n", "            ", "self", ".", "num_node", "=", "18", "\n", "self_link", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_node", ")", "]", "\n", "neighbor_link", "=", "[", "(", "4", ",", "3", ")", ",", "(", "3", ",", "2", ")", ",", "(", "7", ",", "6", ")", ",", "(", "6", ",", "5", ")", ",", "\n", "(", "13", ",", "12", ")", ",", "(", "12", ",", "11", ")", ",", "(", "10", ",", "9", ")", ",", "(", "9", ",", "8", ")", ",", "(", "11", ",", "5", ")", ",", "\n", "(", "8", ",", "2", ")", ",", "(", "5", ",", "1", ")", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ",", "(", "15", ",", "0", ")", ",", "(", "14", ",", "0", ")", ",", "\n", "(", "17", ",", "15", ")", ",", "(", "16", ",", "14", ")", "]", "\n", "self", ".", "edge", "=", "self_link", "+", "neighbor_link", "\n", "self", ".", "center", "=", "1", "\n", "", "elif", "layout", "==", "'openpose_hands'", ":", "\n", "            ", "self", ".", "num_node", "=", "21", "\n", "self_link", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_node", ")", "]", "\n", "neighbor_link", "=", "[", "(", "4", ",", "3", ")", ",", "(", "3", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "0", ")", ",", "\n", "(", "8", ",", "7", ")", ",", "(", "7", ",", "6", ")", ",", "(", "6", ",", "5", ")", ",", "(", "5", ",", "0", ")", ",", "\n", "(", "12", ",", "11", ")", ",", "(", "11", ",", "10", ")", ",", "(", "10", ",", "9", ")", ",", "(", "9", ",", "0", ")", ",", "\n", "(", "16", ",", "15", ")", ",", "(", "15", ",", "14", ")", ",", "(", "14", ",", "13", ")", ",", "(", "13", ",", "0", ")", ",", "\n", "(", "20", ",", "19", ")", ",", "(", "19", ",", "18", ")", ",", "(", "18", ",", "17", ")", ",", "(", "17", ",", "0", ")", "]", "\n", "self", ".", "edge", "=", "self_link", "+", "neighbor_link", "\n", "self", ".", "center", "=", "0", "\n", "", "elif", "layout", "==", "'openpose_with_hands'", ":", "\n", "            ", "self", ".", "num_node", "=", "18", "+", "20", "*", "2", "\n", "self_link", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_node", ")", "]", "\n", "neighbor_link_body", "=", "[", "(", "4", ",", "3", ")", ",", "(", "3", ",", "2", ")", ",", "(", "7", ",", "6", ")", ",", "(", "6", ",", "5", ")", ",", "\n", "(", "13", ",", "12", ")", ",", "(", "12", ",", "11", ")", ",", "(", "10", ",", "9", ")", ",", "(", "9", ",", "8", ")", ",", "(", "11", ",", "5", ")", ",", "\n", "(", "8", ",", "2", ")", ",", "(", "5", ",", "1", ")", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ",", "(", "15", ",", "0", ")", ",", "(", "14", ",", "0", ")", ",", "\n", "(", "17", ",", "15", ")", ",", "(", "16", ",", "14", ")", "]", "\n", "neighbor_link_hand1", "=", "[", "(", "4", ",", "3", ")", ",", "(", "3", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "-", "13", ")", ",", "\n", "(", "8", ",", "7", ")", ",", "(", "7", ",", "6", ")", ",", "(", "6", ",", "5", ")", ",", "(", "5", ",", "-", "13", ")", ",", "\n", "(", "12", ",", "11", ")", ",", "(", "11", ",", "10", ")", ",", "(", "10", ",", "9", ")", ",", "(", "9", ",", "-", "13", ")", ",", "\n", "(", "16", ",", "15", ")", ",", "(", "15", ",", "14", ")", ",", "(", "14", ",", "13", ")", ",", "(", "13", ",", "-", "13", ")", ",", "\n", "(", "20", ",", "19", ")", ",", "(", "19", ",", "18", ")", ",", "(", "18", ",", "17", ")", ",", "(", "17", ",", "-", "13", ")", "]", "\n", "neighbor_link_hand1", "=", "[", "(", "x", "[", "0", "]", "+", "17", ",", "x", "[", "1", "]", "+", "17", ")", "for", "x", "in", "neighbor_link_hand1", "]", "\n", "neighbor_link_hand2", "=", "[", "(", "4", ",", "3", ")", ",", "(", "3", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "-", "30", ")", ",", "\n", "(", "8", ",", "7", ")", ",", "(", "7", ",", "6", ")", ",", "(", "6", ",", "5", ")", ",", "(", "5", ",", "-", "30", ")", ",", "\n", "(", "12", ",", "11", ")", ",", "(", "11", ",", "10", ")", ",", "(", "10", ",", "9", ")", ",", "(", "9", ",", "-", "30", ")", ",", "\n", "(", "16", ",", "15", ")", ",", "(", "15", ",", "14", ")", ",", "(", "14", ",", "13", ")", ",", "(", "13", ",", "-", "30", ")", ",", "\n", "(", "20", ",", "19", ")", ",", "(", "19", ",", "18", ")", ",", "(", "18", ",", "17", ")", ",", "(", "17", ",", "-", "30", ")", "]", "\n", "neighbor_link_hand2", "=", "[", "(", "x", "[", "0", "]", "+", "17", "+", "20", ",", "x", "[", "1", "]", "+", "17", "+", "20", ")", "for", "x", "in", "neighbor_link_hand2", "]", "\n", "self", ".", "edge", "=", "self_link", "+", "neighbor_link_body", "+", "neighbor_link_hand1", "+", "neighbor_link_hand2", "\n", "self", ".", "center", "=", "0", "\n", "", "elif", "layout", "==", "'upperbody_with_hands'", ":", "\n", "            ", "self", ".", "num_node", "=", "7", "+", "20", "*", "2", "\n", "self_link", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_node", ")", "]", "\n", "neighbor_link_body", "=", "[", "(", "3", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "0", ")", ",", "\n", "(", "6", ",", "5", ")", ",", "(", "5", ",", "4", ")", ",", "(", "4", ",", "0", ")", "]", "\n", "neighbor_link_hand1", "=", "[", "(", "4", ",", "3", ")", ",", "(", "3", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "-", "3", ")", ",", "\n", "(", "8", ",", "7", ")", ",", "(", "7", ",", "6", ")", ",", "(", "6", ",", "5", ")", ",", "(", "5", ",", "-", "3", ")", ",", "\n", "(", "12", ",", "11", ")", ",", "(", "11", ",", "10", ")", ",", "(", "10", ",", "9", ")", ",", "(", "9", ",", "-", "3", ")", ",", "\n", "(", "16", ",", "15", ")", ",", "(", "15", ",", "14", ")", ",", "(", "14", ",", "13", ")", ",", "(", "13", ",", "-", "3", ")", ",", "\n", "(", "20", ",", "19", ")", ",", "(", "19", ",", "18", ")", ",", "(", "18", ",", "17", ")", ",", "(", "17", ",", "-", "3", ")", "]", "\n", "neighbor_link_hand1", "=", "[", "(", "x", "[", "0", "]", "+", "6", ",", "x", "[", "1", "]", "+", "6", ")", "for", "x", "in", "neighbor_link_hand1", "]", "\n", "neighbor_link_hand2", "=", "[", "(", "4", ",", "3", ")", ",", "(", "3", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "-", "20", ")", ",", "\n", "(", "8", ",", "7", ")", ",", "(", "7", ",", "6", ")", ",", "(", "6", ",", "5", ")", ",", "(", "5", ",", "-", "20", ")", ",", "\n", "(", "12", ",", "11", ")", ",", "(", "11", ",", "10", ")", ",", "(", "10", ",", "9", ")", ",", "(", "9", ",", "-", "20", ")", ",", "\n", "(", "16", ",", "15", ")", ",", "(", "15", ",", "14", ")", ",", "(", "14", ",", "13", ")", ",", "(", "13", ",", "-", "20", ")", ",", "\n", "(", "20", ",", "19", ")", ",", "(", "19", ",", "18", ")", ",", "(", "18", ",", "17", ")", ",", "(", "17", ",", "-", "20", ")", "]", "\n", "neighbor_link_hand2", "=", "[", "(", "x", "[", "0", "]", "+", "6", "+", "20", ",", "x", "[", "1", "]", "+", "6", "+", "20", ")", "for", "x", "in", "neighbor_link_hand2", "]", "\n", "self", ".", "edge", "=", "self_link", "+", "neighbor_link_body", "+", "neighbor_link_hand1", "+", "neighbor_link_hand2", "\n", "self", ".", "center", "=", "0", "\n", "", "elif", "layout", "==", "'upperbody'", ":", "\n", "            ", "self", ".", "num_node", "=", "7", "\n", "self_link", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_node", ")", "]", "\n", "neighbor_link_body", "=", "[", "(", "3", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "0", ")", ",", "\n", "(", "6", ",", "5", ")", ",", "(", "5", ",", "4", ")", ",", "(", "4", ",", "0", ")", "]", "\n", "self", ".", "edge", "=", "self_link", "+", "neighbor_link_body", "\n", "self", ".", "center", "=", "0", "\n", "", "elif", "layout", "==", "'ntu-rgb+d'", ":", "\n", "            ", "self", ".", "num_node", "=", "25", "\n", "self_link", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_node", ")", "]", "\n", "neighbor_1base", "=", "[", "(", "1", ",", "2", ")", ",", "(", "2", ",", "21", ")", ",", "(", "3", ",", "21", ")", ",", "\n", "(", "4", ",", "3", ")", ",", "(", "5", ",", "21", ")", ",", "(", "6", ",", "5", ")", ",", "(", "7", ",", "6", ")", ",", "(", "8", ",", "7", ")", ",", "(", "9", ",", "21", ")", ",", "\n", "(", "10", ",", "9", ")", ",", "(", "11", ",", "10", ")", ",", "(", "12", ",", "11", ")", ",", "(", "13", ",", "1", ")", ",", "(", "14", ",", "13", ")", ",", "\n", "(", "15", ",", "14", ")", ",", "(", "16", ",", "15", ")", ",", "(", "17", ",", "1", ")", ",", "(", "18", ",", "17", ")", ",", "(", "19", ",", "18", ")", ",", "\n", "(", "20", ",", "19", ")", ",", "(", "22", ",", "23", ")", ",", "(", "23", ",", "8", ")", ",", "(", "24", ",", "25", ")", ",", "(", "25", ",", "12", ")", "]", "\n", "neighbor_link", "=", "[", "(", "i", "-", "1", ",", "j", "-", "1", ")", "for", "(", "i", ",", "j", ")", "in", "neighbor_1base", "]", "\n", "self", ".", "edge", "=", "self_link", "+", "neighbor_link", "\n", "self", ".", "center", "=", "21", "-", "1", "\n", "", "elif", "layout", "==", "'ntu_edge'", ":", "\n", "            ", "self", ".", "num_node", "=", "24", "\n", "self_link", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_node", ")", "]", "\n", "neighbor_1base", "=", "[", "(", "1", ",", "2", ")", ",", "(", "3", ",", "2", ")", ",", "(", "4", ",", "3", ")", ",", "(", "5", ",", "2", ")", ",", "(", "6", ",", "5", ")", ",", "(", "7", ",", "6", ")", ",", "\n", "(", "8", ",", "7", ")", ",", "(", "9", ",", "2", ")", ",", "(", "10", ",", "9", ")", ",", "(", "11", ",", "10", ")", ",", "(", "12", ",", "11", ")", ",", "\n", "(", "13", ",", "1", ")", ",", "(", "14", ",", "13", ")", ",", "(", "15", ",", "14", ")", ",", "(", "16", ",", "15", ")", ",", "(", "17", ",", "1", ")", ",", "\n", "(", "18", ",", "17", ")", ",", "(", "19", ",", "18", ")", ",", "(", "20", ",", "19", ")", ",", "(", "21", ",", "22", ")", ",", "(", "22", ",", "8", ")", ",", "\n", "(", "23", ",", "24", ")", ",", "(", "24", ",", "12", ")", "]", "\n", "neighbor_link", "=", "[", "(", "i", "-", "1", ",", "j", "-", "1", ")", "for", "(", "i", ",", "j", ")", "in", "neighbor_1base", "]", "\n", "self", ".", "edge", "=", "self_link", "+", "neighbor_link", "\n", "self", ".", "center", "=", "2", "\n", "", "elif", "layout", "==", "'acappella'", ":", "\n", "            ", "self", ".", "num_node", "=", "68", "\n", "self_link", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_node", ")", "]", "\n", "all", "=", "[", "(", "i", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "68", ")", "]", "\n", "\n", "face", "=", "all", "[", "slice", "(", "0", ",", "16", ")", "]", "\n", "eyebrown1", "=", "all", "[", "slice", "(", "17", ",", "21", ")", "]", "\n", "eyebrown2", "=", "all", "[", "slice", "(", "22", ",", "26", ")", "]", "\n", "nose", "=", "all", "[", "slice", "(", "27", ",", "30", ")", "]", "\n", "nostril", "=", "all", "[", "slice", "(", "31", ",", "35", ")", "]", "\n", "eye1", "=", "all", "[", "slice", "(", "36", ",", "41", ")", "]", "\n", "eye2", "=", "all", "[", "slice", "(", "42", ",", "47", ")", "]", "\n", "lips", "=", "all", "[", "slice", "(", "48", ",", "59", ")", "]", "\n", "teeth", "=", "all", "[", "slice", "(", "60", ",", "67", ")", "]", "\n", "self", ".", "edge", "=", "self_link", "+", "face", "+", "eye1", "+", "eye2", "+", "eyebrown1", "+", "eyebrown2", "+", "nose", "+", "nostril", "+", "lips", "+", "teeth", "\n", "self", ".", "center", "=", "0", "\n", "# ORIGINAL SOURCECODE", "\n", "# https://github.com/1adrianb/face-alignment/blob/master/examples/detect_landmarks_in_image.py", "\n", "# pred_types = {'face': pred_type(slice(0, 17), (0.682, 0.780, 0.909, 0.5)),", "\n", "#               'eyebrow1': pred_type(slice(17, 22), (1.0, 0.498, 0.055, 0.4)),", "\n", "#               'eyebrow2': pred_type(slice(22, 27), (1.0, 0.498, 0.055, 0.4)),", "\n", "#               'nose': pred_type(slice(27, 31), (0.345, 0.239, 0.443, 0.4)),", "\n", "#               'nostril': pred_type(slice(31, 36), (0.345, 0.239, 0.443, 0.4)),", "\n", "#               'eye1': pred_type(slice(36, 42), (0.596, 0.875, 0.541, 0.3)),", "\n", "#               'eye2': pred_type(slice(42, 48), (0.596, 0.875, 0.541, 0.3)),", "\n", "#               'lips': pred_type(slice(48, 60), (0.596, 0.875, 0.541, 0.3)),", "\n", "#               'teeth': pred_type(slice(60, 68), (0.596, 0.875, 0.541, 0.4))", "\n", "#               }", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Do Not Exist This Layout.\"", ")", "\n", "", "return", "self", ".", "edge", ",", "self", ".", "num_node", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.graph.Graph.get_adjacency": [[164, 205], ["range", "numpy.zeros", "graph.normalize_digraph", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.stack", "ValueError", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "numpy.stack.append", "numpy.stack.append", "numpy.stack.append"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.graph.normalize_digraph"], ["", "def", "get_adjacency", "(", "self", ",", "strategy", ")", ":", "\n", "        ", "valid_hop", "=", "range", "(", "0", ",", "self", ".", "max_hop", "+", "1", ",", "self", ".", "dilation", ")", "\n", "adjacency", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_node", ",", "self", ".", "num_node", ")", ")", "\n", "for", "hop", "in", "valid_hop", ":", "\n", "            ", "adjacency", "[", "self", ".", "hop_dis", "==", "hop", "]", "=", "1", "\n", "", "normalize_adjacency", "=", "normalize_digraph", "(", "adjacency", ")", "\n", "\n", "if", "strategy", "==", "'uniform'", ":", "\n", "            ", "A", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "num_node", ",", "self", ".", "num_node", ")", ")", "\n", "A", "[", "0", "]", "=", "normalize_adjacency", "\n", "self", ".", "A", "=", "A", "\n", "", "elif", "strategy", "==", "'distance'", ":", "\n", "            ", "A", "=", "np", ".", "zeros", "(", "(", "len", "(", "valid_hop", ")", ",", "self", ".", "num_node", ",", "self", ".", "num_node", ")", ")", "\n", "for", "i", ",", "hop", "in", "enumerate", "(", "valid_hop", ")", ":", "\n", "                ", "A", "[", "i", "]", "[", "self", ".", "hop_dis", "==", "hop", "]", "=", "normalize_adjacency", "[", "self", ".", "hop_dis", "==", "\n", "hop", "]", "\n", "", "self", ".", "A", "=", "A", "\n", "", "elif", "strategy", "==", "'spatial'", ":", "\n", "            ", "A", "=", "[", "]", "\n", "for", "hop", "in", "valid_hop", ":", "\n", "                ", "a_root", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_node", ",", "self", ".", "num_node", ")", ")", "\n", "a_close", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_node", ",", "self", ".", "num_node", ")", ")", "\n", "a_further", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_node", ",", "self", ".", "num_node", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_node", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "self", ".", "num_node", ")", ":", "\n", "                        ", "if", "self", ".", "hop_dis", "[", "j", ",", "i", "]", "==", "hop", ":", "\n", "                            ", "if", "self", ".", "hop_dis", "[", "j", ",", "self", ".", "center", "]", "==", "self", ".", "hop_dis", "[", "i", ",", "self", ".", "center", "]", ":", "\n", "                                ", "a_root", "[", "j", ",", "i", "]", "=", "normalize_adjacency", "[", "j", ",", "i", "]", "\n", "", "elif", "self", ".", "hop_dis", "[", "j", ",", "self", ".", "center", "]", ">", "self", ".", "hop_dis", "[", "i", ",", "self", ".", "center", "]", ":", "\n", "                                ", "a_close", "[", "j", ",", "i", "]", "=", "normalize_adjacency", "[", "j", ",", "i", "]", "\n", "", "else", ":", "\n", "                                ", "a_further", "[", "j", ",", "i", "]", "=", "normalize_adjacency", "[", "j", ",", "i", "]", "\n", "", "", "", "", "if", "hop", "==", "0", ":", "\n", "                    ", "A", ".", "append", "(", "a_root", ")", "\n", "", "else", ":", "\n", "                    ", "A", ".", "append", "(", "a_root", "+", "a_close", ")", "\n", "A", ".", "append", "(", "a_further", ")", "\n", "", "", "A", "=", "np", ".", "stack", "(", "A", ")", "\n", "self", ".", "A", "=", "A", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Do Not Exist This Strategy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.graph.get_hop_distance": [[207, 220], ["numpy.zeros", "range", "numpy.zeros", "numpy.linalg.matrix_power", "numpy.stack", "range"], "function", ["None"], ["", "", "", "def", "get_hop_distance", "(", "num_node", ",", "edge", ",", "max_hop", "=", "1", ")", ":", "\n", "    ", "A", "=", "np", ".", "zeros", "(", "(", "num_node", ",", "num_node", ")", ")", "\n", "for", "i", ",", "j", "in", "edge", ":", "\n", "        ", "A", "[", "j", ",", "i", "]", "=", "1", "\n", "A", "[", "i", ",", "j", "]", "=", "1", "\n", "\n", "# compute hop steps", "\n", "", "hop_dis", "=", "np", ".", "zeros", "(", "(", "num_node", ",", "num_node", ")", ")", "+", "np", ".", "inf", "\n", "transfer_mat", "=", "[", "np", ".", "linalg", ".", "matrix_power", "(", "A", ",", "d", ")", "for", "d", "in", "range", "(", "max_hop", "+", "1", ")", "]", "\n", "arrive_mat", "=", "(", "np", ".", "stack", "(", "transfer_mat", ")", ">", "0", ")", "\n", "for", "d", "in", "range", "(", "max_hop", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "hop_dis", "[", "arrive_mat", "[", "d", "]", "]", "=", "d", "\n", "", "return", "hop_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.graph.normalize_digraph": [[222, 231], ["numpy.sum", "numpy.zeros", "range", "numpy.dot"], "function", ["None"], ["", "def", "normalize_digraph", "(", "A", ")", ":", "\n", "    ", "Dl", "=", "np", ".", "sum", "(", "A", ",", "0", ")", "\n", "num_node", "=", "A", ".", "shape", "[", "0", "]", "\n", "Dn", "=", "np", ".", "zeros", "(", "(", "num_node", ",", "num_node", ")", ")", "\n", "for", "i", "in", "range", "(", "num_node", ")", ":", "\n", "        ", "if", "Dl", "[", "i", "]", ">", "0", ":", "\n", "            ", "Dn", "[", "i", ",", "i", "]", "=", "Dl", "[", "i", "]", "**", "(", "-", "1", ")", "\n", "", "", "AD", "=", "np", ".", "dot", "(", "A", ",", "Dn", ")", "\n", "return", "AD", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.graph.normalize_undigraph": [[233, 242], ["numpy.sum", "numpy.zeros", "range", "numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "normalize_undigraph", "(", "A", ")", ":", "\n", "    ", "Dl", "=", "np", ".", "sum", "(", "A", ",", "0", ")", "\n", "num_node", "=", "A", ".", "shape", "[", "0", "]", "\n", "Dn", "=", "np", ".", "zeros", "(", "(", "num_node", ",", "num_node", ")", ")", "\n", "for", "i", "in", "range", "(", "num_node", ")", ":", "\n", "        ", "if", "Dl", "[", "i", "]", ">", "0", ":", "\n", "            ", "Dn", "[", "i", ",", "i", "]", "=", "Dl", "[", "i", "]", "**", "(", "-", "0.5", ")", "\n", "", "", "DAD", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "Dn", ",", "A", ")", ",", "Dn", ")", "\n", "return", "DAD", "\n", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.FiLM.__init__": [[18, 22], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.FiLM.forward": [[23, 25], ["st_gcn.FiLM.bias().view", "st_gcn.FiLM.scale().view", "st_gcn.FiLM.bias", "st_gcn.FiLM.scale"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "c", ",", "*", "args", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "scale", "(", "c", ")", ".", "view", "(", "*", "args", ")", "+", "self", ".", "bias", "(", "c", ")", ".", "view", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.ST_GCN.__init__": [[48, 120], ["torch.Module.__init__", "graph.Graph", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "st_gcn.ST_GCN.register_buffer", "torch.tensor.size", "torch.tensor.size", "torch.tensor.size", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "kwargs.get", "kwargs.get", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.tensor.size", "torch.tensor.size", "torch.tensor.size", "kwargs.items", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block", "st_gcn.st_gcn_block"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "num_class", ",", "\n", "graph_cfg", ",", "\n", "mode", "=", "'mode A'", ",", "\n", "classifier", "=", "False", ",", "\n", "input_type", "=", "'x'", ",", "\n", "confidence_attention", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# load graph", "\n", "self", ".", "graph", "=", "Graph", "(", "**", "graph_cfg", ")", "\n", "A", "=", "torch", ".", "tensor", "(", "self", ".", "graph", ".", "A", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "requires_grad", "=", "False", ")", "\n", "self", ".", "register_buffer", "(", "'A'", ",", "A", ")", "\n", "self", ".", "classifier", "=", "classifier", "\n", "self", ".", "input_type", "=", "input_type", "\n", "# build networks", "\n", "spatial_kernel_size", "=", "A", ".", "size", "(", "0", ")", "\n", "temporal_kernel_size", "=", "5", "\n", "kernel_size", "=", "(", "temporal_kernel_size", ",", "spatial_kernel_size", ")", "\n", "self", ".", "data_bn", "=", "nn", ".", "BatchNorm1d", "(", "in_channels", "*", "A", ".", "size", "(", "1", ")", ")", "\n", "if", "kwargs", ".", "get", "(", "'bn_momentum'", ")", "is", "not", "None", ":", "\n", "            ", "del", "kwargs", "[", "'bn_momentum'", "]", "\n", "", "kwargs", "[", "'edge_importance_weighting'", "]", "=", "kwargs", ".", "get", "(", "'edge_importance_weighting'", ")", "\n", "kwargs", "[", "'A'", "]", "=", "A", "\n", "kwargs", "[", "'num_class'", "]", "=", "num_class", "\n", "kwargs0", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", "!=", "'dropout'", "}", "\n", "if", "mode", "==", "'mode A'", ":", "\n", "            ", "self", ".", "st_gcn_networks", "=", "nn", ".", "ModuleList", "(", "(", "\n", "st_gcn_block", "(", "in_channels", ",", "64", ",", "\n", "kernel_size", ",", "1", ",", "\n", "residual", "=", "False", ",", "**", "kwargs0", ")", ",", "\n", "st_gcn_block", "(", "64", ",", "64", ",", "kernel_size", ",", "1", ",", "**", "kwargs", ")", ",", "\n", "st_gcn_block", "(", "64", ",", "128", ",", "kernel_size", ",", "2", ",", "**", "kwargs", ")", ",", "\n", "st_gcn_block", "(", "128", ",", "128", ",", "kernel_size", ",", "1", ",", "**", "kwargs", ")", ",", "\n", "st_gcn_block", "(", "128", ",", "256", ",", "kernel_size", ",", "2", ",", "**", "kwargs", ")", ",", "\n", "st_gcn_block", "(", "256", ",", "256", ",", "kernel_size", ",", "1", ",", "**", "kwargs", ")", ",", "\n", ")", ")", "\n", "", "elif", "mode", "==", "'mode B'", ":", "\n", "            ", "self", ".", "st_gcn_networks", "=", "nn", ".", "ModuleList", "(", "(", "\n", "st_gcn_block", "(", "in_channels", ",", "32", ",", "\n", "kernel_size", ",", "1", ",", "\n", "residual", "=", "False", ",", "**", "kwargs0", ")", ",", "\n", "st_gcn_block", "(", "32", ",", "32", ",", "kernel_size", ",", "1", ",", "**", "kwargs", ")", ",", "\n", "st_gcn_block", "(", "32", ",", "64", ",", "kernel_size", ",", "2", ",", "**", "kwargs", ")", ",", "\n", "# st_gcn_block(64, 64, kernel_size, 1, **kwargs),", "\n", "st_gcn_block", "(", "64", ",", "64", ",", "kernel_size", ",", "1", ",", "**", "kwargs", ")", ",", "\n", "st_gcn_block", "(", "64", ",", "128", ",", "kernel_size", ",", "2", ",", "**", "kwargs", ")", ",", "\n", "# st_gcn_block(128, 128, kernel_size, 1, **kwargs),", "\n", "st_gcn_block", "(", "128", ",", "128", ",", "kernel_size", ",", "1", ",", "**", "kwargs", ")", ",", "\n", "st_gcn_block", "(", "128", ",", "256", ",", "kernel_size", ",", "2", ",", "**", "kwargs", ")", ",", "\n", "st_gcn_block", "(", "256", ",", "256", ",", "kernel_size", ",", "1", ",", "**", "kwargs", ")", ",", "\n", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# fcn for prediction", "\n", "", "self", ".", "num_class", "=", "num_class", "\n", "if", "self", ".", "classifier", ":", "\n", "            ", "self", ".", "fcn", "=", "nn", ".", "Conv2d", "(", "3", "*", "N", ",", "num_class", ",", "kernel_size", "=", "1", ")", "\n", "", "if", "confidence_attention", ":", "\n", "            ", "self", ".", "attention", "=", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "1", ",", "3", ",", "5", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "torch", ".", "nn", ".", "Conv1d", "(", "3", ",", "9", ",", "5", ",", "2", ",", "padding", "=", "3", ",", "padding_mode", "=", "'reflect'", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attention", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.ST_GCN.forward": [[121, 131], ["list", "st_gcn.ST_GCN.extract_feature", "list.append"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.ST_GCN.extract_feature"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ")", ":", "\n", "        ", "args", "=", "list", "(", "args", ")", "\n", "if", "x", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "args", ".", "append", "(", "x", "[", ":", ",", "2", ",", "...", "]", ")", "\n", "", "x", ",", "c", "=", "self", ".", "extract_feature", "(", "x", ",", "*", "args", ")", "\n", "\n", "if", "self", ".", "classifier", ":", "\n", "            ", "return", "x", ",", "c", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.ST_GCN.extract_feature": [[132, 163], ["st_gcn.ST_GCN.T", "x.view.view.size", "x.view.view.permute().contiguous", "x.view.view.view", "st_gcn.ST_GCN.data_bn", "x.view.view.view", "x.view.view.permute().contiguous", "x.view.view.view", "torch.nn.functional.interpolate().transpose().unsqueeze", "torch.nn.functional.interpolate().transpose().unsqueeze", "torch.nn.functional.interpolate().transpose().unsqueeze", "torch.nn.functional.interpolate().transpose().unsqueeze", "torch.nn.functional.interpolate().transpose().unsqueeze", "torch.nn.functional.interpolate().transpose().unsqueeze", "torch.nn.functional.interpolate().transpose().unsqueeze", "torch.nn.functional.interpolate().transpose().unsqueeze", "torch.nn.functional.interpolate().transpose().unsqueeze", "gcn", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "c.view.view.view().mean", "st_gcn.ST_GCN.fcn", "c.view.view.view", "x.view.view.permute", "x.view.view.permute", "c.view.view.size", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "x.view.view.size", "c.view.view.view", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "x[].transpose"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.ST_GCN.T"], ["", "", "def", "extract_feature", "(", "self", ",", "x", ",", "*", "args", ")", ":", "\n", "        ", "if", "self", ".", "attention", "is", "not", "None", ":", "\n", "            ", "attention", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "x", "[", ":", ",", "2", ",", ":", ",", ":", ",", "0", "]", ".", "transpose", "(", "1", ",", "2", ")", ",", "size", "=", "13", ",", "mode", "=", "'linear'", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "x", "=", "self", ".", "T", "(", "x", ",", "self", ".", "input_type", ")", "\n", "N", ",", "C", ",", "T", ",", "V", ",", "M", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "4", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "N", "*", "M", ",", "V", "*", "C", ",", "T", ")", "\n", "x", "=", "self", ".", "data_bn", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "M", ",", "V", ",", "C", ",", "T", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "N", "*", "M", ",", "C", ",", "T", ",", "V", ")", "\n", "\n", "# forwad", "\n", "\n", "for", "gcn", "in", "self", ".", "st_gcn_networks", ":", "\n", "            ", "x", ",", "_", "=", "gcn", "(", "x", ",", "self", ".", "A", ",", "*", "args", ")", "\n", "", "if", "self", ".", "attention", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "*", "attention", "\n", "", "if", "self", ".", "classifier", ":", "\n", "# global pooling", "\n", "\n", "            ", "c", "=", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "c", "=", "c", ".", "view", "(", "N", ",", "M", ",", "-", "1", ",", "1", ",", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "# prediction", "\n", "c", "=", "self", ".", "fcn", "(", "c", ")", "\n", "c", "=", "c", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "None", "\n", "", "return", "x", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.ST_GCN.T": [[164, 185], ["x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min().unsqueeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "T", "(", "x", ",", "inputtype", ")", ":", "\n", "        ", "N", ",", "C", ",", "T", ",", "V", ",", "M", "=", "x", ".", "size", "(", ")", "\n", "if", "inputtype", "==", "'x'", ":", "\n", "            ", "return", "x", "\n", "", "elif", "inputtype", "==", "'x1p'", ":", "\n", "            ", "y", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "N", ",", "C", ",", "1", ",", "V", ",", "M", ")", ".", "zero_", "(", ")", ",", "\n", "x", "[", ":", ",", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", "-", "1", "]", ")", ",", "2", ")", "\n", "y", "[", ":", ",", "2", ",", "1", ":", ",", "...", "]", "=", "x", "[", ":", ",", "2", ",", "1", ":", ",", "...", "]", "\n", "", "elif", "inputtype", "==", "'x2p'", ":", "\n", "\n", "            ", "y", "=", "torch", ".", "cat", "(", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "N", ",", "C", ",", "1", ",", "V", ",", "M", ")", ".", "zero_", "(", ")", ",", "\n", "x", "[", ":", ",", ":", ",", "1", ":", "-", "1", "]", "-", "0.5", "*", "x", "[", ":", ",", ":", ",", "2", ":", "]", "-", "0.5", "*", "x", "[", ":", ",", ":", ",", ":", "-", "2", "]", ",", "\n", "torch", ".", "cuda", ".", "FloatTensor", "(", "N", ",", "C", ",", "1", ",", "V", ",", "M", ")", ".", "zero_", "(", ")", ")", ",", "2", ")", "\n", "y", "[", ":", ",", "2", ",", "1", ":", "-", "1", ",", "...", "]", "=", "x", "[", ":", ",", "2", ",", "1", ":", "-", "1", ",", "...", "]", "\n", "", "elif", "inputtype", "==", "'x1'", ":", "\n", "            ", "y", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", "2", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", "2", ",", ":", "-", "1", "]", ",", "torch", ".", "min", "(", "x", "[", ":", ",", "2", ",", "1", ":", "]", ",", "x", "[", ":", ",", "2", ",", "1", ":", "]", ")", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "inputtype", "==", "'x2'", ":", "\n", "            ", "y", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", ",", "1", ":", "-", "1", "]", "-", "0.5", "*", "x", "[", ":", ",", ":", ",", "2", ":", "]", "-", "0.5", "*", "x", "[", ":", ",", ":", ",", ":", "-", "2", "]", ",", "\n", "torch", ".", "min", "(", "torch", ".", "min", "(", "x", "[", ":", ",", "2", ",", "1", ":", "-", "1", "]", ",", "x", "[", ":", ",", "2", ",", "2", ":", "]", ")", ",", "x", "[", ":", ",", "2", ",", ":", "-", "2", "]", ")", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.st_gcn_block.__init__": [[212, 286], ["torch.Module.__init__", "gconv.ConvTemporalGraphical", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "A.nelement", "st_gcn.FiLM", "A.nelement", "st_gcn.FiLM", "A.nelement", "st_gcn.FiLM", "ValueError", "A.nelement"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "dropout", "=", "0", ",", "\n", "residual", "=", "True", ",", "\n", "edge_importance_weighting", "=", "'static'", ",", "\n", "A", "=", "None", ",", "\n", "num_class", "=", "None", ",", "\n", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "kernel_size", ")", "==", "2", "\n", "assert", "kernel_size", "[", "0", "]", "%", "2", "==", "1", "\n", "padding", "=", "(", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", ",", "0", ")", "\n", "\n", "self", ".", "ctype", "=", "edge_importance_weighting", "\n", "self", ".", "activation", "=", "activation", "\n", "if", "edge_importance_weighting", "==", "'static'", ":", "\n", "            ", "self", ".", "edge_importance", "=", "1.", "\n", "self", ".", "edge_importance_weighting", "=", "True", "\n", "", "elif", "edge_importance_weighting", "==", "'dynamic'", ":", "\n", "            ", "self", ".", "edge_importance_weighting", "=", "True", "\n", "self", ".", "edge_importance", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "A", ".", "shape", ")", ")", "\n", "", "elif", "edge_importance_weighting", "==", "'categorical'", ":", "\n", "            ", "self", ".", "edge_importance_f", "=", "nn", ".", "Linear", "(", "num_class", ",", "A", ".", "nelement", "(", ")", ")", "\n", "\n", "self", ".", "edge_importance_weighting", "=", "False", "\n", "", "elif", "edge_importance_weighting", "==", "'temporal'", ":", "\n", "            ", "self", ".", "edge_importance_weighting", "=", "False", "\n", "self", ".", "edge_importance_f", "=", "FiLM", "(", "num_class", "+", "A", ".", "shape", "[", "-", "1", "]", ",", "A", ".", "nelement", "(", ")", ")", "\n", "", "elif", "edge_importance_weighting", "==", "'static_temporal'", ":", "\n", "            ", "self", ".", "edge_importance_weighting", "=", "False", "\n", "self", ".", "edge_importance_f", "=", "FiLM", "(", "num_class", ",", "A", ".", "nelement", "(", ")", ")", "\n", "", "elif", "edge_importance_weighting", "==", "'dynamic_temporal'", ":", "\n", "            ", "self", ".", "edge_importance_weighting", "=", "False", "\n", "self", ".", "edge_importance_f", "=", "FiLM", "(", "num_class", ",", "A", ".", "nelement", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'edge_importance_weighting (%s) not implemented'", ")", "\n", "\n", "", "self", ".", "gcn", "=", "ConvTemporalGraphical", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "[", "1", "]", ")", "\n", "\n", "self", ".", "tcn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "(", "kernel_size", "[", "0", "]", ",", "1", ")", ",", "\n", "(", "stride", ",", "1", ")", ",", "\n", "padding", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "if", "not", "residual", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "0", "\n", "\n", "", "elif", "(", "in_channels", "==", "out_channels", ")", "and", "(", "stride", "==", "1", ")", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "x", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "(", "stride", ",", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.st_gcn_block.forward": [[287, 322], ["st_gcn.st_gcn_block.residual", "st_gcn.st_gcn_block.gcn", "st_gcn.st_gcn_block.tcn", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "args[].unsqueeze().expand", "st_gcn.st_gcn_block.edge_importance_f", "torch.relu", "torch.relu", "torch.relu", "st_gcn.st_gcn_block.relu", "st_gcn.init_eiw", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "st_gcn.init_eiw", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "args[].unsqueeze", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "torch.nn.functional.interpolate().transpose", "args[].unsqueeze().expand", "st_gcn.st_gcn_block.edge_importance_f", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "st_gcn.init_eiw", "st_gcn.st_gcn_block.edge_importance_f().view", "args[].transpose", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "args[].unsqueeze", "args[].transpose", "st_gcn.st_gcn_block.edge_importance_f", "args[].transpose"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.init_eiw", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.init_eiw", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.init_eiw"], ["", "def", "forward", "(", "self", ",", "x", ",", "A", ",", "*", "args", ")", ":", "\n", "        ", "if", "self", ".", "edge_importance_weighting", ":", "\n", "            ", "A", "=", "A", "*", "self", ".", "edge_importance", "\n", "", "else", ":", "\n", "\n", "            ", "if", "self", ".", "ctype", "==", "'temporal'", ":", "\n", "                ", "B", ",", "C", ",", "T", ",", "J", "=", "x", ".", "shape", "\n", "c", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "args", "[", "1", "]", ".", "transpose", "(", "1", ",", "2", ")", "[", "...", ",", "0", "]", ",", "size", "=", "T", ",", "mode", "=", "'linear'", ")", ".", "transpose", "(", "1", ",", "\n", "2", ")", "\n", "exp_onehot", "=", "args", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "B", ",", "T", ",", "args", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", "\n", "edge_importance", "=", "self", ".", "edge_importance_f", "(", "init_eiw", "(", "c", ")", ",", "torch", ".", "cat", "(", "[", "c", ",", "exp_onehot", "]", ",", "dim", "=", "-", "1", ")", ",", "B", ",", "T", ",", "\n", "A", ".", "shape", "[", "0", "]", ",", "J", ",", "J", ")", "\n", "", "elif", "self", ".", "ctype", "==", "'static_temporal'", ":", "\n", "                ", "B", ",", "C", ",", "T", ",", "J", "=", "x", ".", "shape", "\n", "c", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "args", "[", "1", "]", ".", "transpose", "(", "1", ",", "2", ")", "[", "...", ",", "0", "]", ",", "size", "=", "T", ",", "mode", "=", "'linear'", ")", ".", "transpose", "(", "1", ",", "\n", "2", ")", "\n", "edge_importance", "=", "init_eiw", "(", "c", ")", "\n", "", "elif", "self", ".", "ctype", "==", "'dynamic_temporal'", ":", "\n", "                ", "B", ",", "C", ",", "T", ",", "J", "=", "x", ".", "shape", "\n", "c", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "args", "[", "1", "]", ".", "transpose", "(", "1", ",", "2", ")", "[", "...", ",", "0", "]", ",", "size", "=", "T", ",", "mode", "=", "'linear'", ")", ".", "transpose", "(", "1", ",", "\n", "2", ")", "\n", "exp_onehot", "=", "args", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "B", ",", "T", ",", "args", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ")", "\n", "edge_importance", "=", "self", ".", "edge_importance_f", "(", "init_eiw", "(", "c", ")", ",", "exp_onehot", ",", "B", ",", "T", ",", "\n", "A", ".", "shape", "[", "0", "]", ",", "J", ",", "J", ")", "\n", "", "elif", "self", ".", "ctype", "==", "'categorical'", ":", "\n", "\n", "                ", "edge_importance", "=", "self", ".", "edge_importance_f", "(", "args", "[", "0", "]", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "*", "A", ".", "shape", ")", "\n", "", "A", "=", "A", "*", "F", ".", "relu", "(", "edge_importance", ")", "\n", "", "res", "=", "self", ".", "residual", "(", "x", ")", "\n", "x", ",", "A", "=", "self", ".", "gcn", "(", "x", ",", "A", ")", "\n", "x", "=", "self", ".", "tcn", "(", "x", ")", "+", "res", "\n", "if", "self", ".", "activation", "==", "'relu'", ":", "\n", "            ", "return", "self", ".", "relu", "(", "x", ")", ",", "A", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "A", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.st_gcn.init_eiw": [[9, 15], ["x.unsqueeze().expand.unsqueeze().expand", "torch.min", "torch.min", "torch.min", "x.unsqueeze().expand.unsqueeze().expand", "x.unsqueeze().expand.transpose", "x.unsqueeze().expand.unsqueeze", "x.unsqueeze().expand.unsqueeze"], "function", ["None"], ["def", "init_eiw", "(", "x", ")", ":", "\n", "    ", "B", ",", "T", ",", "J", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "B", ",", "T", ",", "J", ",", "J", ")", "\n", "x", "=", "torch", ".", "min", "(", "x", ",", "x", ".", "transpose", "(", "2", ",", "3", ")", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "B", ",", "T", ",", "3", ",", "J", ",", "J", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Audio_Model.__init__": [[10, 153], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding", "llcp.Audio_Model.get_padding"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding"], ["    ", "def", "__init__", "(", "self", ",", "last_shape", "=", "8", ")", ":", "\n", "        ", "super", "(", "Audio_Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Audio model layers , name of layers as per table 1 given in paper.", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "2", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "1", ",", "7", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "1", ",", "7", ")", ",", "(", "1", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "7", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "5", ")", ",", "(", "1", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "5", ")", ",", "(", "2", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "2", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "5", ")", ",", "(", "4", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "4", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "5", ")", ",", "(", "8", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "8", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv7", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "5", ")", ",", "(", "16", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "16", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "5", ")", ",", "(", "32", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "32", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "5", ")", ",", "(", "1", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv10", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "5", ")", ",", "(", "2", ",", "2", ")", ")", ",", "\n", "dilation", "=", "(", "2", ",", "2", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv11", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "5", ")", ",", "(", "4", ",", "4", ")", ")", ",", "\n", "dilation", "=", "(", "4", ",", "4", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv12", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "5", ")", ",", "(", "8", ",", "8", ")", ")", ",", "\n", "dilation", "=", "(", "8", ",", "8", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv13", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "5", ")", ",", "(", "16", ",", "16", ")", ")", ",", "\n", "dilation", "=", "(", "16", ",", "16", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv14", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "96", ",", "\n", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "5", ")", ",", "(", "32", ",", "32", ")", ")", ",", "\n", "dilation", "=", "(", "32", ",", "32", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv15", "=", "nn", ".", "Conv2d", "(", "\n", "96", ",", "\n", "last_shape", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# Batch normalization layers", "\n", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm7", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm8", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm9", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm10", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm11", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm12", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm13", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm14", "=", "nn", ".", "BatchNorm2d", "(", "96", ")", "\n", "self", ".", "batch_norm15", "=", "nn", ".", "BatchNorm2d", "(", "last_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Audio_Model.get_padding": [[154, 160], ["None"], "methods", ["None"], ["", "def", "get_padding", "(", "self", ",", "kernel_size", ",", "dilation", ")", ":", "\n", "        ", "padding", "=", "(", "\n", "(", "(", "dilation", "[", "0", "]", ")", "*", "(", "kernel_size", "[", "0", "]", "-", "1", ")", ")", "//", "2", ",", "\n", "(", "(", "dilation", "[", "1", "]", ")", "*", "(", "kernel_size", "[", "1", "]", "-", "1", ")", ")", "//", "2", ",", "\n", ")", "\n", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Audio_Model.forward": [[161, 187], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "output_layer.transpose().reshape.transpose().reshape.size", "output_layer.transpose().reshape.transpose().reshape.size", "output_layer.transpose().reshape.transpose().reshape.transpose().reshape", "llcp.Audio_Model.batch_norm1", "llcp.Audio_Model.batch_norm2", "llcp.Audio_Model.batch_norm3", "llcp.Audio_Model.batch_norm4", "llcp.Audio_Model.batch_norm5", "llcp.Audio_Model.batch_norm6", "llcp.Audio_Model.batch_norm7", "llcp.Audio_Model.batch_norm8", "llcp.Audio_Model.batch_norm9", "llcp.Audio_Model.batch_norm10", "llcp.Audio_Model.batch_norm11", "llcp.Audio_Model.batch_norm12", "llcp.Audio_Model.batch_norm13", "llcp.Audio_Model.batch_norm14", "llcp.Audio_Model.batch_norm15", "llcp.Audio_Model.conv1", "llcp.Audio_Model.conv2", "llcp.Audio_Model.conv3", "llcp.Audio_Model.conv4", "llcp.Audio_Model.conv5", "llcp.Audio_Model.conv6", "llcp.Audio_Model.conv7", "llcp.Audio_Model.conv8", "llcp.Audio_Model.conv9", "llcp.Audio_Model.conv10", "llcp.Audio_Model.conv11", "llcp.Audio_Model.conv12", "llcp.Audio_Model.conv13", "llcp.Audio_Model.conv14", "llcp.Audio_Model.conv15", "output_layer.transpose().reshape.transpose().reshape.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_audio", ")", ":", "\n", "# input audio will be (2,256,256)", "\n", "\n", "        ", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm1", "(", "self", ".", "conv1", "(", "input_audio", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm2", "(", "self", ".", "conv2", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm3", "(", "self", ".", "conv3", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm4", "(", "self", ".", "conv4", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm5", "(", "self", ".", "conv5", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm6", "(", "self", ".", "conv6", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm7", "(", "self", ".", "conv7", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm8", "(", "self", ".", "conv8", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm9", "(", "self", ".", "conv9", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm10", "(", "self", ".", "conv10", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm11", "(", "self", ".", "conv11", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm12", "(", "self", ".", "conv12", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm13", "(", "self", ".", "conv13", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm14", "(", "self", ".", "conv14", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm15", "(", "self", ".", "conv15", "(", "output_layer", ")", ")", ")", "\n", "\n", "# output_layer will be (N,8,256,256)", "\n", "# we want it to be (N,8*256,256,1)", "\n", "batch_size", "=", "output_layer", ".", "size", "(", "0", ")", "# N", "\n", "height", "=", "output_layer", ".", "size", "(", "2", ")", "# 256", "\n", "\n", "output_layer", "=", "output_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "reshape", "(", "(", "batch_size", ",", "-", "1", ",", "height", ",", "1", ")", ")", "\n", "return", "output_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.__init__": [[190, 249], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "llcp.Video_Model.get_padding", "llcp.Video_Model.get_padding", "llcp.Video_Model.get_padding", "llcp.Video_Model.get_padding", "llcp.Video_Model.get_padding", "llcp.Video_Model.get_padding"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding"], ["    ", "def", "__init__", "(", "self", ",", "last_shape", "=", "256", ",", "upsample", "=", "True", ")", ":", "\n", "        ", "super", "(", "Video_Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "512", ",", "\n", "256", ",", "\n", "kernel_size", "=", "(", "7", ",", "1", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "7", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "256", ",", "\n", "256", ",", "\n", "kernel_size", "=", "(", "5", ",", "1", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "256", ",", "\n", "256", ",", "\n", "kernel_size", "=", "(", "5", ",", "1", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "1", ")", ",", "(", "2", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "2", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "\n", "256", ",", "\n", "256", ",", "\n", "kernel_size", "=", "(", "5", ",", "1", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "1", ")", ",", "(", "4", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "4", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "\n", "256", ",", "\n", "256", ",", "\n", "kernel_size", "=", "(", "5", ",", "1", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "1", ")", ",", "(", "8", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "8", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv6", "=", "nn", ".", "Conv2d", "(", "\n", "256", ",", "\n", "256", ",", "\n", "kernel_size", "=", "(", "5", ",", "1", ")", ",", "\n", "padding", "=", "self", ".", "get_padding", "(", "(", "5", ",", "1", ")", ",", "(", "16", ",", "1", ")", ")", ",", "\n", "dilation", "=", "(", "16", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# Batch normalization layers", "\n", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "batch_norm4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "batch_norm5", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "batch_norm6", "=", "nn", ".", "BatchNorm2d", "(", "last_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.get_padding": [[250, 256], ["None"], "methods", ["None"], ["", "def", "get_padding", "(", "self", ",", "kernel_size", ",", "dilation", ")", ":", "\n", "        ", "padding", "=", "(", "\n", "(", "(", "dilation", "[", "0", "]", ")", "*", "(", "kernel_size", "[", "0", "]", "-", "1", ")", ")", "//", "2", ",", "\n", "(", "(", "dilation", "[", "1", "]", ")", "*", "(", "kernel_size", "[", "1", "]", "-", "1", ")", ")", "//", "2", ",", "\n", ")", "\n", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Video_Model.forward": [[257, 274], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "len", "input_video.unsqueeze.unsqueeze.unsqueeze", "llcp.Video_Model.batch_norm1", "llcp.Video_Model.batch_norm2", "llcp.Video_Model.batch_norm3", "llcp.Video_Model.batch_norm4", "llcp.Video_Model.batch_norm5", "llcp.Video_Model.batch_norm6", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "llcp.Video_Model.conv1", "llcp.Video_Model.conv2", "llcp.Video_Model.conv3", "llcp.Video_Model.conv4", "llcp.Video_Model.conv5", "llcp.Video_Model.conv6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_video", ")", ":", "\n", "# input video will be (512,100)", "\n", "        ", "if", "len", "(", "input_video", ".", "shape", ")", "==", "3", ":", "\n", "            ", "input_video", "=", "input_video", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm1", "(", "self", ".", "conv1", "(", "input_video", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm2", "(", "self", ".", "conv2", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm3", "(", "self", ".", "conv3", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm4", "(", "self", ".", "conv4", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm5", "(", "self", ".", "conv5", "(", "output_layer", ")", ")", ")", "\n", "output_layer", "=", "F", ".", "relu", "(", "self", ".", "batch_norm6", "(", "self", ".", "conv6", "(", "output_layer", ")", ")", ")", "\n", "\n", "# for upsampling , as mentioned in paper", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "output_layer", "=", "nn", ".", "functional", ".", "interpolate", "(", "output_layer", ",", "size", "=", "(", "256", ",", "1", ")", ",", "mode", "=", "\"nearest\"", ")", "\n", "\n", "", "return", "output_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Llcp.__init__": [[298, 340], ["torch.nn.Module.__init__", "llcp.Audio_Model", "llcp.Video_Model", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_person", "=", "2", ",", "\n", "audio_last_shape", "=", "8", ",", "\n", "video_last_shape", "=", "256", ",", "\n", "input_spectrogram_shape", "=", "(", "256", ",", "256", ",", "2", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Llcp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_person", "=", "num_person", "\n", "self", ".", "input_dim", "=", "(", "\n", "audio_last_shape", "*", "input_spectrogram_shape", "[", "1", "]", "+", "video_last_shape", "\n", ")", "\n", "\n", "self", ".", "audio_output", "=", "Audio_Model", "(", "last_shape", "=", "audio_last_shape", ")", "\n", "self", ".", "video_output", "=", "Video_Model", "(", "last_shape", "=", "video_last_shape", ")", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "\n", "self", ".", "input_dim", ",", "\n", "400", ",", "\n", "num_layers", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "400", ",", "600", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc1", ".", "weight", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "600", ",", "600", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc2", ".", "weight", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "600", ",", "600", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc3", ".", "weight", ")", "\n", "\n", "self", ".", "complex_mask_layer", "=", "nn", ".", "Linear", "(", "600", ",", "2", "*", "256", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "complex_mask_layer", ".", "weight", ")", "\n", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "0.2", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout", "(", "0.2", ")", "\n", "self", ".", "drop3", "=", "nn", ".", "Dropout", "(", "0.2", ")", "\n", "\n", "self", ".", "batch_norm1", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "batch_norm2", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "self", ".", "batch_norm3", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.llcp.Llcp.forward": [[341, 378], ["input_audio.transpose.transpose.transpose", "llcp.Llcp.audio_output", "llcp.Llcp.video_output", "AVFusion.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "llcp.Llcp.squeeze", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "llcp.Llcp.lstm.flatten_parameters", "llcp.Llcp.lstm", "llcp.Llcp.batch_norm1", "llcp.Llcp.drop1", "llcp.Llcp.batch_norm2", "llcp.Llcp.drop2", "llcp.Llcp.batch_norm3", "llcp.Llcp.drop3", "llcp.Llcp.complex_mask_layer", "complex_mask.view().transpose.view().transpose.size", "complex_mask.view().transpose.view().transpose.view().transpose", "complex_mask.view().transpose.view().transpose.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "llcp.Llcp.fc1", "llcp.Llcp.fc2", "llcp.Llcp.fc3", "complex_mask.view().transpose.view().transpose.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_audio", ",", "input_video", ")", ":", "\n", "# input_audio will be (N,2,256,256)", "\n", "# input_video will be of size (N,512,100)", "\n", "\n", "        ", "input_audio", "=", "input_audio", ".", "transpose", "(", "2", ",", "3", ")", "# (N,2,256,256)", "\n", "audio_out", "=", "self", ".", "audio_output", "(", "input_audio", ")", "\n", "# audio_out will be (N,8*256,256,1)", "\n", "AVFusion", "=", "[", "audio_out", "]", "\n", "\n", "video_out", "=", "self", ".", "video_output", "(", "input_video", ")", "\n", "AVFusion", ".", "append", "(", "video_out", ")", "\n", "\n", "mixed_av", "=", "torch", ".", "cat", "(", "AVFusion", ",", "dim", "=", "1", ")", "\n", "\n", "mixed_av", "=", "mixed_av", ".", "squeeze", "(", "3", ")", "# (N,input_dim,256)", "\n", "mixed_av", "=", "torch", ".", "transpose", "(", "mixed_av", ",", "1", ",", "2", ")", "# (N,256,input_dim)", "\n", "\n", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "mixed_av", ",", "(", "h", ",", "c", ")", "=", "self", ".", "lstm", "(", "mixed_av", ")", "\n", "mixed_av", "=", "mixed_av", "[", "...", ",", ":", "400", "]", "+", "mixed_av", "[", "...", ",", "400", ":", "]", "\n", "\n", "mixed_av", "=", "self", ".", "batch_norm1", "(", "(", "F", ".", "relu", "(", "self", ".", "fc1", "(", "mixed_av", ")", ")", ")", ")", "\n", "mixed_av", "=", "self", ".", "drop1", "(", "mixed_av", ")", "\n", "\n", "mixed_av", "=", "self", ".", "batch_norm2", "(", "F", ".", "relu", "(", "self", ".", "fc2", "(", "mixed_av", ")", ")", ")", "\n", "mixed_av", "=", "self", ".", "drop2", "(", "mixed_av", ")", "\n", "\n", "mixed_av", "=", "self", ".", "batch_norm3", "(", "F", ".", "relu", "(", "self", ".", "fc3", "(", "mixed_av", ")", ")", ")", "# (N,256,600)", "\n", "mixed_av", "=", "self", ".", "drop3", "(", "mixed_av", ")", "\n", "\n", "complex_mask", "=", "self", ".", "complex_mask_layer", "(", "mixed_av", ")", "# (N,256(T),2(C)*256(F)*num_person)", "\n", "\n", "batch_size", "=", "complex_mask", ".", "size", "(", "0", ")", "# N", "\n", "complex_mask", "=", "complex_mask", ".", "view", "(", "batch_size", ",", "256", ",", "2", ",", "256", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "\n", "return", "complex_mask", ".", "transpose", "(", "2", ",", "3", ")", "# (B,C,F,T,P)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.resnet.VideoResNet.__init__": [[13, 16], ["torchvision.models.video.resnet.VideoResNet.__init__", "torch.nn.AdaptiveAvgPool3d"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "None", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.resnet.VideoResNet.forward": [[17, 26], ["resnet.VideoResNet.stem", "resnet.VideoResNet.layer1", "resnet.VideoResNet.layer2", "resnet.VideoResNet.layer3", "resnet.VideoResNet.avgpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "# 256 feats", "\n", "# x = self.layer4(x) # 512 feats", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.resnet._video_resnet": [[28, 36], ["resnet.VideoResNet", "load_state_dict_from_url", "torchvision.models.video.resnet.VideoResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_video_resnet", "(", "arch", ",", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VideoResNet", "(", "**", "kwargs", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.resnet.mc3_18": [[38, 55], ["resnet._video_resnet"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.resnet._video_resnet"], ["", "def", "mc3_18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructor for 18 layer Mixed Convolution network as in\n    https://arxiv.org/abs/1711.11248\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on Kinetics-400\n        progress (bool): If True, displays a progress bar of the download to stderr\n\n    Returns:\n        nn.Module: MC3 Network definition\n    \"\"\"", "\n", "return", "_video_resnet", "(", "'mc3_18'", ",", "\n", "pretrained", ",", "progress", ",", "\n", "block", "=", "BasicBlock", ",", "\n", "conv_makers", "=", "[", "Conv3DSimple", "]", "+", "[", "Conv3DNoTemporal", "]", "*", "3", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "stem", "=", "BasicStem", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.FiLM.__init__": [[25, 29], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "FiLM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scaling", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.FiLM.forward": [[30, 34], ["y_net.FiLM.scaling().transpose().unsqueeze", "y_net.FiLM.bias().transpose().unsqueeze", "y_net.FiLM.scaling().transpose", "y_net.FiLM.bias().transpose", "y_net.FiLM.scaling", "y_net.FiLM.bias"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "visual_features", ",", "audio_features", ")", ":", "\n", "        ", "vf_scale", "=", "self", ".", "scaling", "(", "visual_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "# Shape: N,256,1,4", "\n", "vf_bias", "=", "self", ".", "bias", "(", "visual_features", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "# Shape: N,256,1,4", "\n", "return", "audio_features", "*", "vf_scale", "+", "vf_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.__init__": [[37, 127], ["flerken.models.UNet.__init__", "y_net.YNet._assert_flags", "y_net.YNet._define_video_network", "y_net.YNet._define_graph_network", "y_net.YNet._define_fourier_operators", "y_net.YNet._define_multitask_layers", "y_net.YNet._define_appearence_network", "y_net.FiLM"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._assert_flags", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._define_video_network", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._define_graph_network", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._define_fourier_operators", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._define_multitask_layers", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._define_appearence_network"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "\n", "debug", ":", "dict", ",", "\n", "loss_criterion", ":", "str", ",", "# L1, MSE, BCE", "\n", "remix_input", ":", "bool", ",", "remix_coef", ":", "float", ",", "\n", "# Fourier transform params", "\n", "audio_length", ":", "int", ",", "audio_samplerate", ":", "int", ",", "mean", ",", "std", ",", "\n", "n_fft", ":", "int", ",", "hop_length", ":", "int", ",", "n_mel", ":", "int", ",", "sp_freq_shape", ":", "int", ",", "\n", "# Fourier Transform flags", "\n", "log_sp_enabled", ":", "bool", ",", "mel_enabled", ":", "bool", ",", "complex_enabled", ":", "bool", ",", "\n", "weighted_loss", ":", "bool", ",", "loss_on_mask", ":", "bool", ",", "binary_mask", ":", "bool", ",", "\n", "downsample_coarse", ":", "bool", ",", "downsample_interp", ":", "bool", ",", "\n", "# Audiovisual flags", "\n", "video_enabled", ":", "bool", ",", "\n", "video_temporal_features", ":", "int", ",", "\n", "llcp_enabled", ":", "bool", ",", "\n", "skeleton_enabled", ":", "bool", ",", "\n", "# Appearence flags", "\n", "single_frame_enabled", ":", "bool", ",", "\n", "single_emb_enabled", ":", "bool", ",", "\n", "# U-Net args", "\n", "layer_distribution", ":", "List", "[", "int", "]", ",", "\n", "activation", ",", "\n", "# Graph args", "\n", "skeleton_pooling", ":", "str", ",", "\n", "graph_kwargs", ":", "dict", ",", "\n", "\n", "# Multitask args", "\n", "multitask", ":", "dict", ",", "# {'enabled': False, 'loss': 'ContrastiveLoss', 'independent_encoder': False},", "\n", "multitask_pooling", ":", "str", ",", "\n", "white_metrics", ":", "bool", ",", "\n", "**", "kwargs", ")", ":", "\n", "# This defines the U-Net (parent class)", "\n", "        ", "super", "(", "YNet", ",", "self", ")", ".", "__init__", "(", "layer_distribution", ",", "\n", "2", "if", "complex_enabled", "else", "1", ",", "\n", "film", "=", "None", ",", "\n", "useBN", "=", "True", ",", "\n", "activation", "=", "activation", ",", "\n", "input_channels", "=", "2", "if", "complex_enabled", "else", "1", ",", "\n", "**", "kwargs", ")", "\n", "# Flags", "\n", "self", ".", "transformer_enabled", "=", "False", "# Deleted from code for simplicity", "\n", "\n", "self", ".", "video_enabled", "=", "video_enabled", "\n", "self", ".", "video_temporal_features", "=", "video_temporal_features", "\n", "self", ".", "llcp_enabled", "=", "llcp_enabled", "\n", "self", ".", "sk_enabled", "=", "skeleton_enabled", "\n", "self", ".", "single_frame_enabled", "=", "single_frame_enabled", "\n", "self", ".", "single_emb_enabled", "=", "single_emb_enabled", "\n", "\n", "self", ".", "log_sp_enabled", "=", "log_sp_enabled", "\n", "self", ".", "mel_enabled", "=", "mel_enabled", "\n", "self", ".", "complex_enabled", "=", "complex_enabled", "\n", "self", ".", "multitask", "=", "multitask", "[", "'enabled'", "]", "\n", "self", ".", "loss_on_mask", "=", "loss_on_mask", "\n", "self", ".", "binary_mask", "=", "binary_mask", "\n", "self", ".", "downsample_coarse", "=", "downsample_coarse", "\n", "self", ".", "downsample_interp", "=", "downsample_interp", "\n", "self", ".", "weighted_loss", "=", "weighted_loss", "\n", "self", ".", "loss_criterion", "=", "loss_criterion", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "feat_num", "=", "0", "\n", "self", ".", "remix_input", "=", "remix_input", "\n", "self", ".", "remix_coef", "=", "remix_coef", "\n", "self", ".", "white_metrics", "=", "white_metrics", "\n", "\n", "self", ".", "_audio_samplerate", "=", "audio_samplerate", "\n", "self", ".", "_n", "=", "kwargs", "[", "'n'", "]", "\n", "self", ".", "_audio_length", "=", "audio_length", "*", "self", ".", "_n", "\n", "self", ".", "_n_fft", "=", "n_fft", "\n", "self", ".", "_n_mel", "=", "n_mel", "\n", "self", ".", "_sp_freq_shape", "=", "sp_freq_shape", "\n", "self", ".", "_hop_length", "=", "hop_length", "\n", "self", ".", "_mean", "=", "mean", "\n", "self", ".", "_std", "=", "std", "\n", "self", ".", "_assert_flags", "(", ")", "\n", "\n", "self", ".", "_define_video_network", "(", ")", "\n", "self", ".", "_define_graph_network", "(", "skeleton_pooling", ",", "graph_kwargs", ")", "\n", "self", ".", "_define_fourier_operators", "(", ")", "\n", "self", ".", "_define_multitask_layers", "(", "multitask", ",", "layer_distribution", ",", "activation", ",", "multitask_pooling", ",", "**", "kwargs", ")", "\n", "self", ".", "_define_appearence_network", "(", ")", "\n", "self", ".", "enabled", "=", "{", "'video_enabled'", ":", "video_enabled", ",", "\n", "'llcp_enabled'", ":", "llcp_enabled", ",", "\n", "'single_frame_enabled'", ":", "single_frame_enabled", ",", "\n", "'single_emb_enabled'", ":", "single_emb_enabled", ",", "\n", "'skeleton_enabled'", ":", "skeleton_enabled", "}", "\n", "if", "video_enabled", "or", "skeleton_enabled", "or", "llcp_enabled", ":", "\n", "# FiLM to fuse video and audio features", "\n", "            ", "N", "=", "self", ".", "dim", "[", "-", "2", "]", "\n", "self", ".", "fusion_layer", "=", "FiLM", "(", "self", ".", "feat_num", ",", "N", ")", "# 512 or 512+256", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._assert_flags": [[128, 146], ["None"], "methods", ["None"], ["", "", "def", "_assert_flags", "(", "self", ")", ":", "\n", "        ", "assert", "not", "(", "self", ".", "single_emb_enabled", "and", "self", ".", "single_frame_enabled", ")", ",", "f'Appearance frame  cannot be applied together with embedding apperance'", "\n", "assert", "not", "(", "self", ".", "complex_enabled", "and", "self", ".", "log_sp_enabled", ")", ",", "f'log scale cannot be applied to complex spectrograms'", "\n", "assert", "not", "(", "self", ".", "complex_enabled", "and", "self", ".", "binary_mask", ")", ",", "f'binary mask and  complex mask are mutually exclusive'", "\n", "assert", "not", "(", "self", ".", "complex_enabled", "and", "self", ".", "mel_enabled", ")", ",", "f'mel transform cannot be applied to complex spectrograms'", "\n", "\n", "assert", "not", "(", "self", ".", "mel_enabled", "and", "self", ".", "log_sp_enabled", ")", ",", "f'mel transform cannot be applied together with log scale'", "\n", "\n", "assert", "not", "(", "self", ".", "downsample_coarse", "and", "self", ".", "downsample_interp", ")", ",", "f'Downsample cannot be coarse and interpolated at the same time'", "\n", "assert", "not", "(", "self", ".", "remix_input", "and", "self", ".", "binary_mask", ")", ",", "f'Binary mask is not implemented for more than 2 src'", "\n", "assert", "self", ".", "loss_criterion", "in", "[", "'MSE'", ",", "'L1'", ",", "'BCE'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._define_fourier_operators": [[147, 161], ["torchaudio.transforms.MelScale", "torchaudio.transforms.InverseMelScale", "torch.hann_window", "torchaudio.transforms.Spectrogram", "torchaudio.transforms.Spectrogram"], "methods", ["None"], ["", "def", "_define_fourier_operators", "(", "self", ")", ":", "\n", "# FOURIER TRANSFORMS (for waveform to spectrogram)", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "wav2sp_train", "=", "Spectrogram", "(", "n_fft", "=", "self", ".", "_n_fft", ",", "power", "=", "None", ",", "hop_length", "=", "self", ".", "_hop_length", ",", "\n", "return_complex", "=", "False", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "self", ".", "wav2sp_train", "=", "Spectrogram", "(", "n_fft", "=", "self", ".", "_n_fft", ",", "power", "=", "None", ",", "hop_length", "=", "self", ".", "_hop_length", ")", "\n", "\n", "", "self", ".", "sp2mel", "=", "MelScale", "(", "sample_rate", "=", "self", ".", "_audio_samplerate", ",", "n_mels", "=", "self", ".", "_n_mel", ")", "\n", "self", ".", "mel2sp", "=", "InverseMelScale", "(", "n_stft", "=", "self", ".", "_sp_freq_shape", ",", "n_mels", "=", "self", ".", "_n_mel", ",", "\n", "sample_rate", "=", "self", ".", "_audio_samplerate", ")", "\n", "# self.istft = partial(istft, n_fft=self._n_fft, hop_length=self._hop_length, length=self._audio_length,", "\n", "#                      window=torch.hann_window(self._n_fft).cuda())  # Not ready for multiGPU", "\n", "self", ".", "_window", "=", "torch", ".", "hann_window", "(", "self", ".", "_n_fft", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.istft": [[162, 164], ["torch.istft"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.istft"], ["", "def", "istft", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "istft", "(", "x", ",", "n_fft", "=", "self", ".", "_n_fft", ",", "hop_length", "=", "self", ".", "_hop_length", ",", "length", "=", "self", ".", "_audio_length", ",", "window", "=", "self", ".", "_window", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.wav2sp": [[165, 167], ["y_net.YNet.wav2sp_train"], "methods", ["None"], ["", "def", "wav2sp", "(", "self", ",", "src", ")", ":", "# Func should be eventually deleted", "\n", "        ", "return", "self", ".", "wav2sp_train", "(", "src", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.sp2wav": [[168, 184], ["y_net.YNet.istft", "torch.view_as_complex.is_complex", "torch.view_as_real().permute", "torch.nn.functional.upsample().squeeze", "torch.view_as_complex.unsqueeze", "torch.view_as_complex", "torch.view_as_real", "torch.nn.functional.upsample", "torch.view_as_complex.permute().contiguous", "torch.view_as_complex.permute"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.istft"], ["", "def", "sp2wav", "(", "self", ",", "inference_mask", ",", "mixture", ")", ":", "\n", "        ", "upsample", "=", "self", ".", "downsample_interp", "or", "self", ".", "downsample_coarse", "\n", "if", "inference_mask", ".", "is_complex", "(", ")", "and", "upsample", ":", "\n", "            ", "inference_mask", "=", "torch", ".", "view_as_real", "(", "inference_mask", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "elif", "self", ".", "binary_mask", ":", "\n", "            ", "inference_mask", "=", "inference_mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "if", "self", ".", "downsample_coarse", ":", "\n", "            ", "inference_mask", "=", "torch", ".", "nn", ".", "functional", ".", "upsample", "(", "inference_mask", ",", "scale_factor", "=", "(", "2", ",", "1", ")", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "\n", "1", ")", "\n", "if", "self", ".", "complex_enabled", ":", "\n", "                ", "inference_mask", "=", "torch", ".", "view_as_complex", "(", "inference_mask", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "", "", "if", "self", ".", "downsample_interp", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "estimated_sp", "=", "inference_mask", "*", "mixture", "\n", "estimated_wav", "=", "self", ".", "istft", "(", "estimated_sp", ")", "\n", "return", "estimated_wav", ",", "estimated_sp", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._define_video_network": [[185, 191], ["torch.nn.AdaptiveAvgPool2d", "llcp.Video_Model", "resnet.mc3_18"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.resnet.mc3_18"], ["", "def", "_define_video_network", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "video_enabled", "or", "self", ".", "llcp_enabled", ":", "\n", "# Mixted convolutional network for video a analysis", "\n", "            ", "self", ".", "motion_net", "=", "Video_Model", "(", "upsample", "=", "False", ")", "if", "self", ".", "llcp_enabled", "else", "mc3_18", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "feat_num", "+=", "256", "\n", "self", ".", "temporal_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "self", ".", "video_temporal_features", "*", "self", ".", "_n", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._define_graph_network": [[192, 213], ["st_gcn.ST_GCN", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveMaxPool2d", "torch.nn.Linear", "ValueError"], "methods", ["None"], ["", "", "def", "_define_graph_network", "(", "self", ",", "pooling", ",", "graph_kwargs", ")", ":", "\n", "        ", "if", "self", ".", "sk_enabled", ":", "\n", "            ", "self", ".", "feat_num", "+=", "256", "\n", "# Graph convolutional network for skeleton analysis", "\n", "if", "pooling", "==", "'AdaptativeAP'", ":", "\n", "                ", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "None", ",", "1", ")", ")", "\n", "", "elif", "pooling", "==", "'AdaptativeMP'", ":", "\n", "                ", "self", ".", "pool", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "None", ",", "1", ")", ")", "\n", "", "elif", "pooling", "==", "'linear'", ":", "\n", "                ", "self", ".", "pool", "=", "nn", ".", "Linear", "(", "self", ".", "graph_net", ".", "heads", "[", "0", "]", ".", "graph", ".", "num_node", ",", "1", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'VnNet pooling type: %s not implemented. Choose between AdaptativeMP,AdaptativeMP or linear'", "%", "pooling", ")", "\n", "\n", "", "if", "graph_kwargs", "[", "'graph_cfg'", "]", "[", "'layout'", "]", "==", "'upperbody_with_hands'", ":", "\n", "                ", "in_channels", "=", "3", "\n", "", "elif", "graph_kwargs", "[", "'graph_cfg'", "]", "[", "'layout'", "]", "==", "'acappella'", ":", "\n", "                ", "in_channels", "=", "2", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "self", ".", "graph_net", "=", "ST_GCN", "(", "in_channels", "=", "in_channels", ",", "num_class", "=", "7", ",", "**", "graph_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._define_appearence_network": [[214, 225], ["torch.nn.Sequential", "InceptionResnetV1", "torch.nn.Identity", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Identity"], "methods", ["None"], ["", "", "def", "_define_appearence_network", "(", "self", ")", ":", "\n", "        ", "if", "not", "(", "self", ".", "single_emb_enabled", "or", "self", ".", "single_emb_enabled", ")", ":", "\n", "            ", "return", "None", "\n", "", "from", "facenet_pytorch", "import", "InceptionResnetV1", "\n", "if", "self", ".", "single_frame_enabled", ":", "\n", "            ", "appearance_net", "=", "InceptionResnetV1", "(", "pretrained", "=", "'vggface2'", ")", "\n", "appearance_net", ".", "last_bn", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "self", ".", "single_emb_enabled", ":", "\n", "            ", "appearance_net", "=", "nn", ".", "Identity", "(", ")", "\n", "", "self", ".", "appearance_net", "=", "nn", ".", "Sequential", "(", "appearance_net", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "self", ".", "feat_num", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._define_multitask_layers": [[226, 247], ["y_net.YNet._init_mt_loss", "torch.nn.ReLU", "y_net.YNet.init_mt_encoder", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveMaxPool2d"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._init_mt_loss", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.init_mt_encoder"], ["", "def", "_define_multitask_layers", "(", "self", ",", "multitask", ",", "layer_distribution", ",", "activation", ",", "pooling", ",", "**", "kwargs", ")", ":", "\n", "        ", "N", "=", "self", ".", "dim", "[", "-", "2", "]", "\n", "if", "self", ".", "multitask", ":", "\n", "            ", "assert", "(", "\n", "self", ".", "video_enabled", "or", "self", ".", "llcp_enabled", "or", "self", ".", "sk_enabled", ")", ",", "f'Video or skeleton has to be enabled to use multitask'", "\n", "if", "multitask", "[", "'independent_encoder'", "]", ":", "\n", "                ", "self", ".", "mt_encoder", "=", "self", ".", "init_mt_encoder", "(", "layer_distribution", ",", "\n", "2", "if", "self", ".", "complex_enabled", "else", "1", ",", "\n", "film", "=", "None", ",", "\n", "useBN", "=", "True", ",", "\n", "activation", "=", "activation", ",", "\n", "input_channels", "=", "2", "if", "self", ".", "complex_enabled", "else", "1", ",", "\n", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mt_encoder", "=", "self", ".", "encoder", "\n", "", "self", ".", "multitask_loss", "=", "self", ".", "_init_mt_loss", "(", "multitask", "[", "'loss'", "]", ")", "\n", "self", ".", "sp_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "if", "pooling", "==", "'AdaptativeAP'", ":", "\n", "                ", "self", ".", "sp_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "None", ",", "1", ")", ")", "\n", "", "elif", "pooling", "==", "'AdaptativeMP'", ":", "\n", "                ", "self", ".", "sp_pooling", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "None", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet._init_mt_loss": [[248, 257], ["utils.loss.BatchedContrastiveLoss", "torch.nn.L1Loss", "torch.nn.MSELoss", "ValueError"], "methods", ["None"], ["", "", "", "def", "_init_mt_loss", "(", "self", ",", "loss", ")", ":", "\n", "        ", "if", "loss", "==", "'ContrastiveLoss'", ":", "\n", "            ", "return", "ContrastiveLoss", "(", ")", "# Criterion: 1--> Sync samples, 0--> unsync samples", "\n", "", "elif", "loss", "==", "'L1Loss'", ":", "\n", "            ", "return", "nn", ".", "L1Loss", "(", ")", "\n", "", "elif", "loss", "==", "'L2Loss'", ":", "\n", "            ", "return", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Multitask loss should be L1Loss,L2Loss or ContrastiveLoss'", "\n", "f' but {loss} found.'", ")", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.init_mt_encoder": [[259, 262], ["flerken.models.UNet"], "methods", ["None"], ["", "", "def", "init_mt_encoder", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "model", "=", "UNet", "(", "*", "args", ",", "**", "kwargs", ")", ".", "encoder", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.forward": [[263, 422], ["y_net.YNet.core_forward", "torch.no_grad", "inputs.get", "inputs.get", "y_net.YNet.istft", "pred[].squeeze", "y_net.YNet.sp2wav", "y_net.YNet.istft", "torch.view_as_complex", "inputs.get().permute", "inputs.get", "y_net.YNet.wav2sp", "y_net.YNet.wav2sp", "sp_mix.norm", "sp_mix.permute", "y_net.YNet.permute", "y_net.YNet.tanh().permute", "y_net.YNet.complex_mask", "torch.sigmoid", "torch.view_as_complex", "y_net.YNet.compute_loss", "y_net.YNet.compute_loss", "y_net.YNet.sp_relu", "[].permute", "y_net.YNet.multitask_loss", "torch.view_as_complex.detach", "torch.view_as_complex", "y_net.YNet.wav2sp", "sum", "torch.log1p", "torch.clamp", "y_net.YNet.hard_binary_mask().squeeze", "NotImplementedError", "torch.relu", "torch.view_as_complex", "NotImplementedError", "inputs.get", "y_net.YNet.sp2mel().unsqueeze", "y_net.YNet.norm().unsqueeze", "NotImplementedError", "sp_mix.norm.unsqueeze", "y_net.YNet.norm().unsqueeze", "y_net.YNet.norm().unsqueeze", "y_net.YNet.tanh", "logits_mask.permute().contiguous", "y_net.YNet.flip", "y_net.YNet.hard_binary_mask", "y_net.YNet.sp_pooling", "torch.rand", "y_net.YNet.sp2mel", "y_net.YNet.norm", "y_net.YNet.norm", "y_net.YNet.norm", "logits_mask.permute", "y_net.YNet.norm", "y_net.YNet.norm", "range"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.core_forward", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.istft", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.sp2wav", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.istft", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.wav2sp", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.wav2sp", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.complex_mask", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.compute_loss", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.compute_loss", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.wav2sp", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.tanh", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.flip", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.hard_binary_mask"], ["", "def", "forward", "(", "self", ",", "inputs", ":", "dict", ",", "real_sample", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Inputs contains the following keys:\n           audio: the main audio waveform of shape N,M\n           audio_acmt: the secondary audio waveform of shame N,M\n           src: If using inference on real mixtures, the mixture audio waveform of shape N,M\n           sk: skeletons of shape N,C,T,V,M which is batch, channels, temporal, joints, n_people\n           video: video\n        \"\"\"", "\n", "\n", "output", "=", "{", "'logits_mask'", ":", "None", ",", "\n", "'inference_mask'", ":", "None", ",", "\n", "'loss_mask'", ":", "None", ",", "\n", "'gt_mask'", ":", "None", ",", "\n", "'separation_loss'", ":", "None", ",", "\n", "'alignment_loss'", ":", "None", ",", "\n", "'estimated_sp'", ":", "None", ",", "\n", "'estimated_wav'", ":", "None", "}", "\n", "\n", "self", ".", "n_sources", "=", "3", "if", "self", ".", "remix_input", "else", "2", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sk", "=", "inputs", ".", "get", "(", "'landmarks'", ")", "\n", "v", "=", "inputs", ".", "get", "(", "'llcp_embedding'", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "if", "self", ".", "llcp_enabled", "else", "inputs", ".", "get", "(", "'video'", ")", "\n", "frames", "=", "inputs", ".", "get", "(", "'single_frame'", ")", "\n", "\n", "# Inference for a real mixture", "\n", "if", "real_sample", ":", "\n", "                ", "self", ".", "n_sources", "=", "2", "\n", "# Inference in case of a real sample", "\n", "sp_mix_raw", "=", "self", ".", "wav2sp", "(", "inputs", "[", "'src'", "]", ")", "/", "self", ".", "n_sources", "\n", "spm", "=", "sp_mix_raw", "# Mock up real sample inference", "\n", "\n", "if", "self", ".", "downsample_coarse", ":", "\n", "                    ", "sp_mix", "=", "sp_mix_raw", "[", ":", ",", ":", ":", "2", ",", "...", "]", "# BxFxTx2", "\n", "", "elif", "self", ".", "downsample_interp", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                    ", "sp_mix", "=", "sp_mix_raw", "\n", "", "", "else", ":", "\n", "\n", "                ", "srcm", "=", "inputs", "[", "'audio'", "]", "\n", "srcs", "=", "inputs", "[", "'audio_acmt'", "]", "\n", "\n", "# Computing STFT", "\n", "spm", "=", "self", ".", "wav2sp", "(", "srcm", ")", "# Spectrogram main BxFxTx2", "\n", "sps", "=", "self", ".", "wav2sp", "(", "srcs", ")", "# Spectrogram secondary BxFxTx2", "\n", "\n", "if", "self", ".", "remix_input", ":", "\n", "                    ", "B", "=", "spm", ".", "shape", "[", "0", "]", "# Batch elements", "\n", "ndim", "=", "spm", ".", "ndim", "\n", "coef", "=", "(", "torch", ".", "rand", "(", "B", ",", "*", "[", "1", "for", "_", "in", "range", "(", "ndim", "-", "1", ")", "]", ",", "device", "=", "spm", ".", "device", ")", "<", "self", ".", "remix_coef", ")", ".", "byte", "(", ")", "\n", "sources", "=", "[", "spm", ",", "sps", ",", "spm", ".", "flip", "(", "0", ")", "*", "coef", "]", "\n", "", "else", ":", "\n", "                    ", "sources", "=", "[", "spm", ",", "sps", "]", "\n", "", "sp_mix_raw", "=", "sum", "(", "sources", ")", "/", "self", ".", "n_sources", "\n", "# Downsampling to save memory", "\n", "if", "self", ".", "downsample_coarse", ":", "\n", "                    ", "spm", "=", "spm", "[", ":", ",", ":", ":", "2", ",", "...", "]", "\n", "sps", "=", "sps", "[", ":", ",", ":", ":", "2", ",", "...", "]", "\n", "sp_mix", "=", "sp_mix_raw", "[", ":", ",", ":", ":", "2", ",", "...", "]", "# BxFxTx2", "\n", "", "elif", "self", ".", "downsample_interp", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "                    ", "sp_mix", "=", "sp_mix_raw", "\n", "\n", "", "mag", "=", "sp_mix", ".", "norm", "(", "dim", "=", "-", "1", ")", "# Magnitude spectrogram BxFxT", "\n", "\n", "if", "self", ".", "weighted_loss", ":", "\n", "                    ", "weight", "=", "torch", ".", "log1p", "(", "mag", ")", "\n", "weight", "=", "torch", ".", "clamp", "(", "weight", ",", "1e-3", ",", "10", ")", "\n", "", "", "if", "self", ".", "complex_enabled", ":", "\n", "                ", "x", "=", "sp_mix", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "sp0", "=", "spm", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "elif", "self", ".", "log_sp_enabled", ":", "\n", "                ", "epsilon", "=", "1e-4", "\n", "x", "=", "(", "mag", "+", "epsilon", ")", ".", "log", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "sp0", "=", "(", "spm", ".", "norm", "(", "dim", "=", "-", "1", ")", "+", "epsilon", ")", ".", "log", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "sp1", "=", "(", "sps", ".", "norm", "(", "dim", "=", "-", "1", ")", "+", "epsilon", ")", ".", "log", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "elif", "self", ".", "mel_enabled", ":", "\n", "                ", "x", "=", "self", ".", "sp2mel", "(", "mag", ")", ".", "unsqueeze", "(", "1", ")", "\n", "sp0", "=", "spm", ".", "norm", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "raise", "NotImplementedError", "(", "'Option not implemented in depth. Draft written.'", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "mag", ".", "unsqueeze", "(", "1", ")", "\n", "sp0", "=", "spm", ".", "norm", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "sp1", "=", "sps", ".", "norm", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "", "if", "self", ".", "white_metrics", ":", "\n", "            ", "output", "[", "'raw_mix_wav'", "]", "=", "self", ".", "istft", "(", "sp_mix_raw", ")", "\n", "return", "output", "\n", "", "pred", "=", "self", ".", "core_forward", "(", "skeleton", "=", "sk", ",", "sp_mix", "=", "x", ",", "\n", "video", "=", "v", ",", "sp0", "=", "sp0", ",", "\n", "frames", "=", "frames", ")", "\n", "logits_mask", "=", "pred", "[", "'mask'", "]", "if", "self", ".", "complex_enabled", "else", "pred", "[", "'mask'", "]", ".", "squeeze", "(", "\n", "1", ")", "# Predicted mask shape is BxCxFxT", "\n", "output", "[", "'logits_mask'", "]", "=", "logits_mask", "\n", "\n", "# Masks are typically bounded when used as loss", "\n", "# Two types are computed:", "\n", "# loss_mask is the one which would be used in a loss function", "\n", "# inference_mask is the one that, being multiplied by the mixture, gives the indepoendent source", "\n", "if", "self", ".", "loss_on_mask", "and", "not", "real_sample", ":", "\n", "\n", "            ", "if", "self", ".", "complex_enabled", ":", "\n", "                ", "loss_mask", "=", "self", ".", "tanh", "(", "logits_mask", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "gt_mask", "=", "self", ".", "complex_mask", "(", "spm", ",", "sp_mix", ")", "\n", "\n", "", "elif", "self", ".", "binary_mask", ":", "\n", "                ", "gt_mask", "=", "self", ".", "hard_binary_mask", "(", "sp0", ",", "sp1", ")", ".", "squeeze", "(", "1", ")", "# Opt 1: hard binary mask", "\n", "# gt_mask = self.complex_mask(spm, sp_mix) # Opt 1: soft binary mask", "\n", "# We can still use log here cos log is monotonically growing", "\n", "loss_mask", "=", "logits_mask", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "f'Not tested'", ")", "\n", "loss_mask", "=", "torch", ".", "relu", "(", "logits_mask", ")", "\n", "", "output", "[", "'loss_mask'", "]", "=", "loss_mask", "\n", "output", "[", "'gt_mask'", "]", "=", "gt_mask", "\n", "\n", "", "if", "not", "self", ".", "training", "or", "(", "self", ".", "training", "and", "not", "self", ".", "loss_on_mask", ")", ":", "\n", "# Inference or training but loss on the spectrogram (A or B)", "\n", "            ", "if", "self", ".", "binary_mask", ":", "# A or B for binary masks", "\n", "                ", "inference_mask", "=", "torch", ".", "sigmoid", "(", "logits_mask", ")", "\n", "", "elif", "self", ".", "complex_enabled", ":", "# Case A or B for complex numbers", "\n", "                ", "inference_mask", "=", "torch", ".", "view_as_complex", "(", "logits_mask", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "", "else", ":", "# Case A or B for ratio masks (no complex no binary-->ratio)", "\n", "                ", "inference_mask", "=", "logits_mask", "\n", "raise", "NotImplementedError", "(", "'Branch not tested'", ")", "\n", "", "inference_mask", "=", "self", ".", "n_sources", "*", "inference_mask", "\n", "target_sp", "=", "inference_mask", "*", "torch", ".", "view_as_complex", "(", "sp_mix", ")", "\n", "output", "[", "'inference_mask'", "]", "=", "inference_mask", "\n", "\n", "", "if", "not", "real_sample", ":", "\n", "\n", "            ", "if", "self", ".", "loss_on_mask", ":", "\n", "                ", "loss", "=", "self", ".", "compute_loss", "(", "loss_mask", ",", "gt_mask", ",", "weight", "=", "weight", "if", "self", ".", "weighted_loss", "else", "None", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "compute_loss", "(", "target_sp", ",", "spm", ",", "weight", "=", "weight", "if", "self", ".", "weighted_loss", "else", "None", ")", "\n", "\n", "", "if", "self", ".", "multitask", ":", "\n", "                ", "sp", "=", "self", ".", "sp_relu", "(", "\n", "pred", "[", "'ind_end_feats'", "]", ")", "# Apply relu because the last layer of video part is a relu", "\n", "sp", "=", "self", ".", "sp_pooling", "(", "sp", ")", "[", "...", ",", "0", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "multitask_loss", "=", "self", ".", "multitask_loss", "(", "pred", "[", "'visual_features'", "]", ",", "sp", ")", "\n", "output", "[", "'alignment_loss'", "]", "=", "multitask_loss", "\n", "", "output", "[", "'separation_loss'", "]", "=", "loss", "\n", "\n", "# Reconstructing wav signal", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "# Upsampling must be carried out on the mask, NOT the spectrogram", "\n", "# https://www.juanmontesinos.com/posts/2021/02/08/bss-masking/", "\n", "            ", "if", "self", ".", "binary_mask", ":", "\n", "                ", "inference_mask", "=", "(", "inference_mask", ">", "0.5", ")", ".", "float", "(", ")", "\n", "", "estimated_wav", ",", "estimated_sp", "=", "self", ".", "sp2wav", "(", "inference_mask", ".", "detach", "(", ")", ",", "torch", ".", "view_as_complex", "(", "sp_mix_raw", ")", ")", "\n", "raw_mix_wav", "=", "self", ".", "istft", "(", "sp_mix_raw", ")", "\n", "output", "[", "'estimated_sp'", "]", "=", "estimated_sp", "\n", "output", "[", "'estimated_wav'", "]", "=", "estimated_wav", "\n", "output", "[", "'raw_mix_wav'", "]", "=", "raw_mix_wav", "\n", "output", "[", "'mix_sp'", "]", "=", "torch", ".", "view_as_complex", "(", "sp_mix_raw", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.core_forward": [[423, 493], ["sp0.clone().detach", "sp_mix.clone().detach", "range", "y_net.YNet.final_conv", "video.clone().detach", "frames.permute().reshape.permute().reshape.clone().detach", "frames.permute().reshape.permute().reshape.permute().reshape", "print", "to_cat_vector.append", "y_net.YNet.final_act", "print", "sp0.clone", "sp_mix.clone", "y_net.YNet.appearance_net().reshape().max", "y_net.YNet.graph_net", "y_net.YNet.pool().squeeze", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate.transpose_", "y_net.YNet.temporal_pooling().squeeze", "y_net.YNet.transpose_", "torch.cat", "len", "print", "y_net.YNet.fusion_layer", "print", "video.clone", "frames.permute().reshape.permute().reshape.clone", "frames.permute().reshape.permute().reshape.permute", "y_net.YNet.appearance_net().max", "y_net.YNet.motion_net", "y_net.YNet.resampling_layer", "aprc_feats.unsqueeze", "y_net.YNet.size", "y_net.YNet.size", "y_net.YNet.appearance_net().reshape", "y_net.YNet.pool", "y_net.YNet.motion_net", "y_net.YNet.temporal_pooling", "len", "y_net.YNet.appearance_net", "y_net.YNet.appearance_net"], "methods", ["None"], ["", "def", "core_forward", "(", "self", ",", "*", ",", "skeleton", ",", "sp_mix", ",", "video", ",", "sp0", ",", "frames", ")", ":", "\n", "        ", "sp", "=", "sp0", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "x", "=", "sp_mix", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "# skeleton = skeleton.clone().detach() if skeleton is not None else None", "\n", "video", "=", "video", ".", "clone", "(", ")", ".", "detach", "(", ")", "if", "video", "is", "not", "None", "else", "None", "\n", "frames", "=", "frames", ".", "clone", "(", ")", ".", "detach", "(", ")", "if", "frames", "is", "not", "None", "else", "None", "\n", "dense_visual_enabled", "=", "self", ".", "video_enabled", "or", "self", ".", "llcp_enabled", "\n", "visual_enabled", "=", "dense_visual_enabled", "or", "self", ".", "sk_enabled", "\n", "\n", "if", "self", ".", "single_frame_enabled", ":", "\n", "            ", "frames_shape", "=", "frames", ".", "shape", "\n", "frames", "=", "frames", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "-", "1", ",", "*", "frames_shape", "[", "2", ":", "]", ")", "\n", "aprc_feats", "=", "self", ".", "appearance_net", "(", "frames", ")", ".", "reshape", "(", "*", "frames_shape", "[", ":", "2", "]", ",", "self", ".", "feat_num", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "single_emb_enabled", ":", "\n", "            ", "aprc_feats", "=", "self", ".", "appearance_net", "(", "frames", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "if", "visual_enabled", ":", "\n", "            ", "if", "self", ".", "sk_enabled", ":", "\n", "                ", "sk_features", "=", "self", ".", "graph_net", "(", "skeleton", ")", "# Shape: N,256,4, 18/21/58", "\n", "sk_features", "=", "self", ".", "pool", "(", "sk_features", ")", ".", "squeeze", "(", "3", ")", "\n", "sk_features", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "sk_features", ",", "size", "=", "16", "*", "self", ".", "_n", ")", "\n", "sk_features", ".", "transpose_", "(", "1", ",", "2", ")", "# Shape: N,4,256", "\n", "", "if", "dense_visual_enabled", ":", "\n", "                ", "motion_features", "=", "self", ".", "motion_net", "(", "video", ")", "if", "self", ".", "llcp_enabled", "else", "self", ".", "motion_net", "(", "video", ")", "[", "...", ",", "0", "]", "\n", "motion_features", "=", "self", ".", "temporal_pooling", "(", "motion_features", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# Shape: N,256,100", "\n", "motion_features", ".", "transpose_", "(", "1", ",", "2", ")", "\n", "\n", "", "if", "dense_visual_enabled", "and", "self", ".", "sk_enabled", ":", "\n", "                ", "visual_features", "=", "torch", ".", "cat", "(", "[", "sk_features", ",", "motion_features", "]", ",", "dim", "=", "2", ")", "\n", "if", "self", ".", "transformer_enabled", ":", "\n", "                    ", "visual_features", "=", "self", ".", "resampling_layer", "(", "visual_features", ")", "\n", "", "", "elif", "dense_visual_enabled", ":", "\n", "                ", "visual_features", "=", "motion_features", "\n", "", "elif", "self", ".", "sk_enabled", ":", "\n", "                ", "visual_features", "=", "sk_features", "\n", "", "if", "self", ".", "single_emb_enabled", "or", "self", ".", "single_emb_enabled", ":", "\n", "                ", "visual_features", "=", "visual_features", "+", "aprc_feats", ".", "unsqueeze", "(", "1", ")", "\n", "", "", "if", "self", ".", "printing", ":", "\n", "            ", "print", "(", "'UNet input size {0}'", ".", "format", "(", "x", ".", "size", "(", ")", ")", ")", "\n", "", "to_cat_vector", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dim", ")", "-", "1", ")", ":", "\n", "            ", "if", "self", ".", "printing", ":", "\n", "                ", "print", "(", "'Forward Prop through DownConv block {}'", ".", "format", "(", "i", ")", ")", "\n", "\n", "", "to_cat", ",", "x", "=", "self", ".", "encoder", "[", "i", "]", "(", "x", ")", "\n", "if", "self", ".", "multitask", ":", "\n", "                ", "_", ",", "sp", "=", "self", ".", "mt_encoder", "[", "i", "]", "(", "sp", ")", "\n", "", "to_cat_vector", ".", "append", "(", "to_cat", ")", "\n", "if", "i", "==", "len", "(", "self", ".", "dim", ")", "-", "2", "and", "visual_enabled", ":", "\n", "                ", "x", "=", "self", ".", "fusion_layer", "(", "visual_features", ",", "x", ")", "\n", "", "", "for", "i", "in", "self", ".", "vec", ":", "\n", "            ", "if", "self", ".", "printing", ":", "\n", "                ", "print", "(", "'Concatenating and Building  UpConv Block {}'", ".", "format", "(", "i", ")", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "\n", "                ", "x", "=", "self", ".", "decoder", "[", "i", "]", "(", "x", ")", "\n", "", "else", ":", "\n", "\n", "                ", "x", "=", "self", ".", "decoder", "[", "i", "]", "(", "x", ",", "to_cat_vector", "[", "-", "i", "]", ")", "\n", "", "", "x", "=", "self", ".", "final_conv", "(", "x", ")", "\n", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "final_act", "(", "x", ")", "\n", "", "if", "self", ".", "printing", ":", "\n", "            ", "print", "(", "'UNet Output size {}'", ".", "format", "(", "x", ".", "size", "(", ")", ")", ")", "\n", "", "output", "=", "{", "'mask'", ":", "x", ",", "'ind_end_feats'", ":", "None", ",", "'visual_features'", ":", "None", "}", "\n", "if", "self", ".", "multitask", ":", "\n", "            ", "output", "[", "'ind_end_feats'", "]", "=", "sp", "\n", "", "if", "visual_enabled", ":", "\n", "            ", "output", "[", "'visual_features'", "]", "=", "visual_features", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.compute_loss": [[494, 523], ["torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "weight.unsqueeze.unsqueeze.unsqueeze", "y_net.YNet.loss_criterion.lower", "torch.view_as_real", "torch.nn.functional.mse_loss", "y_net.YNet.loss_criterion.lower", "torch.nn.functional.l1_loss", "y_net.YNet.loss_criterion.lower", "Exception"], "methods", ["None"], ["", "def", "compute_loss", "(", "self", ",", "pred", ",", "gt", ",", "weight", ")", ":", "\n", "\n", "        ", "if", "self", ".", "loss_on_mask", "and", "self", ".", "binary_mask", ":", "# Loss on mask when it's binary uses BCE, otherwise norms", "\n", "            ", "assert", "pred", ".", "shape", "==", "gt", ".", "shape", ",", "'Mask computation: Ground truth and predictions has to be the same shape'", "\n", "if", "self", ".", "weighted_loss", ":", "\n", "                ", "loss", "=", "binary_cross_entropy_with_logits", "(", "pred", ",", "gt", ",", "weight", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "binary_cross_entropy_with_logits", "(", "pred", ",", "gt", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "complex_enabled", "or", "not", "self", ".", "loss_on_mask", ":", "\n", "# Complex mask and gt shape BxFxTxC, weight unsqueezing required for broadcasting", "\n", "# The same applied for direct estimation, in which the mask multiplies the mixture as real + imag", "\n", "# However ratio masks are applied over the magnitude so no broadcasting is used", "\n", "                ", "weight", "=", "weight", ".", "unsqueeze", "(", "-", "1", ")", "\n", "pred", "=", "torch", ".", "view_as_real", "(", "pred", ")", "if", "not", "self", ".", "loss_on_mask", "else", "pred", "\n", "", "assert", "pred", ".", "shape", "==", "gt", ".", "shape", ",", "'Mask computation: Ground truth and predictions has to be the same shape'", "\n", "if", "self", ".", "loss_criterion", ".", "lower", "(", ")", "==", "'mse'", ":", "\n", "                ", "if", "self", ".", "weighted_loss", ":", "\n", "                    ", "loss", "=", "(", "weight", "*", "(", "pred", "-", "gt", ")", ".", "pow", "(", "2", ")", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "mse_loss", "(", "pred", ",", "gt", ")", "\n", "", "", "elif", "self", ".", "loss_criterion", ".", "lower", "(", ")", "==", "'l1'", ":", "\n", "                ", "if", "self", ".", "weighted_loss", ":", "\n", "                    ", "loss", "=", "(", "weight", "*", "(", "pred", "-", "gt", ")", ".", "abs", "(", ")", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "l1_loss", "(", "pred", ",", "gt", ")", "\n", "", "", "elif", "self", ".", "loss_criterion", ".", "lower", "(", ")", "==", "'l1'", ":", "\n", "                ", "raise", "Exception", "(", "'I fucked  it up with the if statements'", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.hard_binary_mask": [[524, 528], ["torch.no_grad"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "hard_binary_mask", "(", "sp0", ",", "sp1", ")", ":", "\n", "        ", "return", "(", "sp0", ">", "sp1", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.soft_binary_mask": [[529, 532], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "soft_binary_mask", "(", "sp0", ",", "sp_mix", ")", ":", "\n", "        ", "return", "(", "sp0", ">=", "sp_mix", "/", "2", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.tanh": [[533, 539], ["torch.tanh"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.tanh"], ["", "@", "staticmethod", "\n", "def", "tanh", "(", "x", ")", ":", "\n", "# *(1-torch.exp(-C * x))/(1+torch.exp(-C * x))", "\n", "# Compute this formula but using torch.tanh to deal with asymptotic values", "\n", "# Manually coded at https://github.com/vitrioil/Speech-Separation/blob/master/src/models/complex_mask_utils.py", "\n", "        ", "return", "K", "*", "torch", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.itanh": [[540, 543], ["torch.log"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "itanh", "(", "x", ")", ":", "\n", "        ", "return", "-", "torch", ".", "log", "(", "(", "K", "-", "x", ")", "/", "(", "K", "+", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.complex_mask": [[544, 554], ["torch.no_grad", "torch.view_as_complex", "y_net.YNet.tanh", "torch.finfo", "torch.view_as_complex", "torch.view_as_real"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.tanh"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "complex_mask", "(", "self", ",", "sp0", ",", "sp_mix", ",", "eps", "=", "torch", ".", "finfo", "(", "torch", ".", "float32", ")", ".", "eps", ")", ":", "\n", "# Bibliography about complex masks", "\n", "# http://homes.sice.indiana.edu/williads/publication_files/williamsonetal.cRM.2016.pdf", "\n", "        ", "assert", "sp0", ".", "shape", "==", "sp_mix", ".", "shape", "\n", "sp0", "=", "torch", ".", "view_as_complex", "(", "sp0", ")", "\n", "sp_mix", "=", "torch", ".", "view_as_complex", "(", "sp_mix", ")", "+", "eps", "\n", "mask", "=", "torch", ".", "view_as_real", "(", "sp0", "/", "sp_mix", ")", "/", "self", ".", "n_sources", "\n", "mask_bounded", "=", "self", ".", "tanh", "(", "mask", ")", "\n", "return", "mask_bounded", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.save_video": [[557, 570], ["torch.no_grad", "mimwrite", "video.permute().detach().cpu.permute().detach().cpu.permute().detach().cpu", "torch.tensor", "torch.tensor", "video.permute().detach().cpu.permute().detach().cpu.permute().detach", "video.permute().detach().cpu.permute().detach().cpu.permute"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "save_video", "(", "self", ",", "batch_idx", ",", "video", ",", "path", ",", "undo_statistics", "=", "True", ")", ":", "\n", "        ", "from", "imageio", "import", "mimwrite", "\n", "if", "undo_statistics", ":", "\n", "            ", "mean", "=", "torch", ".", "tensor", "(", "self", ".", "_mean", ")", "[", "None", ",", "None", ",", "None", ",", ":", "]", "\n", "std", "=", "torch", ".", "tensor", "(", "self", ".", "_std", ")", "[", "None", ",", "None", ",", "None", ",", ":", "]", "\n", "", "video", "=", "video", "[", "batch_idx", "]", "\n", "\n", "if", "undo_statistics", ":", "\n", "            ", "video", "=", "video", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "video", "=", "(", "(", "video", "*", "std", "+", "mean", ")", "*", "255", ")", ".", "byte", "(", ")", ".", "numpy", "(", ")", "\n", "", "mimwrite", "(", "path", ",", "[", "x", "for", "x", "in", "video", "]", ",", "\n", "fps", "=", "25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.save_landmarks": [[571, 579], ["torch.no_grad", "list", "mimwrite", "sk.get_video_array"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.overlay_sk.get_video_array"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "save_landmarks", "(", "self", ",", "batch_idx", ",", "landmarks", ",", "path", ",", "sequence", "=", "[", "]", ")", ":", "\n", "        ", "from", ".", ".", "utils", "import", "overlay_sk", "as", "sk", "\n", "from", "imageio", "import", "mimwrite", "\n", "landmarks", "=", "landmarks", "[", "batch_idx", "]", "\n", "video", "=", "list", "(", "sk", ".", "get_video_array", "(", "landmarks", ",", "self", ".", "graph_net", ".", "graph", ".", "edge", ",", "1", ",", "sequence", "=", "sequence", ")", ")", "\n", "mimwrite", "(", "path", ",", "[", "x", "for", "x", "in", "video", "]", ",", "\n", "fps", "=", "25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.save_audio": [[580, 585], ["torch.no_grad", "write", "waveform[].detach().cpu().numpy", "waveform[].detach().cpu", "waveform[].detach"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "save_audio", "(", "self", ",", "batch_idx", ",", "waveform", ",", "path", ")", ":", "\n", "        ", "assert", "waveform", ".", "ndim", "==", "2", "\n", "from", "scipy", ".", "io", ".", "wavfile", "import", "write", "\n", "write", "(", "path", ",", "self", ".", "_audio_samplerate", ",", "waveform", "[", "batch_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.YNet.save_loss_mask": [[586, 640], ["torch.no_grad", "matplotlib.close", "torch.sigmoid().detach().cpu().numpy", "matplotlib.subplots", "ax[].imshow", "ax[].set", "ax[].label_outer", "ax[].imshow", "ax[].set", "ax[].label_outer", "ax[].imshow", "ax[].set", "ax[].label_outer", "fig.add_axes", "fig.colorbar", "fig.tight_layout", "fig.savefig", "torch.view_as_complex", "torch.view_as_complex.abs().numpy", "torch.view_as_complex.real.numpy", "torch.view_as_complex.imag.numpy", "matplotlib.subplots", "fig.set_size_inches", "fig.subplots_adjust", "[].set", "[].imshow", "[].set", "[].imshow", "[].set", "[].imshow", "[].label_outer", "torch.view_as_complex", "torch.view_as_complex.abs().numpy", "torch.view_as_complex.real.numpy", "torch.view_as_complex.imag.numpy", "[].set", "[].imshow", "[].set", "[].imshow", "[].set", "[].imshow", "[].label_outer", "fig.add_axes", "fig.add_axes", "fig.colorbar", "fig.colorbar", "fig.tight_layout", "fig.savefig", "gt_mask[].cpu().numpy", "gt_mask[].detach().cpu", "loss_mask[].detach().cpu().contiguous", "torch.sigmoid().detach().cpu", "torch.view_as_complex.abs", "torch.view_as_complex.abs", "gt_mask[].cpu", "gt_mask[].detach", "loss_mask[].detach().cpu", "torch.sigmoid().detach", "loss_mask[].detach", "torch.sigmoid"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "save_loss_mask", "(", "self", ",", "batch_idx", ",", "loss_mask", ",", "gt_mask", ",", "path", ")", ":", "\n", "        ", "if", "self", ".", "binary_mask", ":", "\n", "            ", "loss_mask", "=", "torch", ".", "sigmoid", "(", "loss_mask", "[", "batch_idx", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "3", ")", "\n", "ax", "[", "0", "]", ".", "imshow", "(", "loss_mask", ")", "\n", "ax", "[", "0", "]", ".", "set", "(", "title", "=", "'Predicted Sigmoid Mask'", ")", "\n", "ax", "[", "0", "]", ".", "label_outer", "(", ")", "\n", "ax", "[", "1", "]", ".", "imshow", "(", "(", "loss_mask", ">=", "0.5", ")", ".", "astype", "(", "float32", ")", ")", "\n", "ax", "[", "1", "]", ".", "set", "(", "title", "=", "'Predicted Binary Mask'", ")", "\n", "ax", "[", "1", "]", ".", "label_outer", "(", ")", "\n", "im", "=", "ax", "[", "2", "]", ".", "imshow", "(", "gt_mask", "[", "batch_idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "ax", "[", "2", "]", ".", "set", "(", "title", "=", "'Ground Truth Mask'", ")", "\n", "ax", "[", "2", "]", ".", "label_outer", "(", ")", "\n", "cbaxes", "=", "fig", ".", "add_axes", "(", "[", "0.28", ",", "0.9", ",", "0.49", ",", "0.03", "]", ")", "\n", "fig", ".", "colorbar", "(", "im", ",", "ax", "=", "ax", ",", "cax", "=", "cbaxes", ",", "orientation", "=", "\"horizontal\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "path", ",", "dpi", "=", "fig", ".", "dpi", ")", "\n", "\n", "", "if", "self", ".", "complex_enabled", ":", "\n", "            ", "gt_mask", "=", "torch", ".", "view_as_complex", "(", "gt_mask", "[", "batch_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "gt_mask_mag", "=", "gt_mask", ".", "abs", "(", ")", ".", "numpy", "(", ")", "\n", "gt_mask_real", "=", "gt_mask", ".", "real", ".", "numpy", "(", ")", "\n", "gt_mask_imag", "=", "gt_mask", ".", "imag", ".", "numpy", "(", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "2", ",", "ncols", "=", "3", ",", "constrained_layout", "=", "True", ")", "\n", "fig", ".", "set_size_inches", "(", "14", ",", "8", ",", "forward", "=", "True", ")", "\n", "fig", ".", "subplots_adjust", "(", "right", "=", "0.8", ",", ")", "\n", "ax", "[", "0", "]", "[", "0", "]", ".", "set", "(", "title", "=", "'Magnitude GT mask '", ")", "\n", "imm", "=", "ax", "[", "0", "]", "[", "0", "]", ".", "imshow", "(", "gt_mask_mag", ")", "\n", "ax", "[", "0", "]", "[", "1", "]", ".", "set", "(", "title", "=", "'Real GT mask '", ")", "\n", "imr", "=", "ax", "[", "0", "]", "[", "1", "]", ".", "imshow", "(", "gt_mask_real", ")", "\n", "ax", "[", "0", "]", "[", "2", "]", ".", "set", "(", "title", "=", "'Imag GT mask '", ")", "\n", "ax", "[", "0", "]", "[", "2", "]", ".", "imshow", "(", "gt_mask_imag", ")", "\n", "ax", "[", "0", "]", "[", "2", "]", ".", "label_outer", "(", ")", "\n", "\n", "loss_mask", "=", "torch", ".", "view_as_complex", "(", "loss_mask", "[", "batch_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "contiguous", "(", ")", ")", "\n", "loss_mask_mag", "=", "loss_mask", ".", "abs", "(", ")", ".", "numpy", "(", ")", "\n", "loss_mask_real", "=", "loss_mask", ".", "real", ".", "numpy", "(", ")", "\n", "loss_mask_imag", "=", "loss_mask", ".", "imag", ".", "numpy", "(", ")", "\n", "ax", "[", "1", "]", "[", "0", "]", ".", "set", "(", "title", "=", "'Magnitude pred mask '", ")", "\n", "ax", "[", "1", "]", "[", "0", "]", ".", "imshow", "(", "loss_mask_mag", ")", "\n", "ax", "[", "1", "]", "[", "1", "]", ".", "set", "(", "title", "=", "'Real pred mask '", ")", "\n", "ax", "[", "1", "]", "[", "1", "]", ".", "imshow", "(", "loss_mask_real", ")", "\n", "ax", "[", "1", "]", "[", "2", "]", ".", "set", "(", "title", "=", "'Imag pred mask '", ")", "\n", "ax", "[", "1", "]", "[", "2", "]", ".", "imshow", "(", "loss_mask_imag", ")", "\n", "ax", "[", "1", "]", "[", "2", "]", ".", "label_outer", "(", ")", "\n", "cbaxes", "=", "fig", ".", "add_axes", "(", "[", "0.32", ",", "0.12", ",", "0.025", ",", "0.75", "]", ")", "\n", "cbaxes2", "=", "fig", ".", "add_axes", "(", "[", "0.64", ",", "0.12", ",", "0.025", ",", "0.75", "]", ")", "\n", "fig", ".", "colorbar", "(", "imm", ",", "ax", "=", "ax", "[", ":", ",", "0", "]", ",", "cax", "=", "cbaxes", ")", "\n", "fig", ".", "colorbar", "(", "imr", ",", "ax", "=", "ax", "[", ":", ",", "1", ":", "]", ",", "cax", "=", "cbaxes2", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "path", ",", "dpi", "=", "fig", ".", "dpi", ",", "bbox_inches", "=", "'tight'", ")", "\n", "", "plt", ".", "close", "(", "'all'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.y_net.rescale": [[20, 22], ["x.min", "x.max", "x.min"], "function", ["None"], ["def", "rescale", "(", "x", ")", ":", "\n", "    ", "return", "(", "x", "-", "x", ".", "min", "(", ")", ")", "/", "(", "x", ".", "max", "(", ")", "-", "x", ".", "min", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.__init__": [[106, 123], ["inspect.getfullargspec", "args.update", "locals"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.prepare": [[124, 130], ["__init__.ModelConstructor.common_kwargs.update", "globals", "globals"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update": [[131, 134], ["__init__.ModelConstructor.common_kwargs.update"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.build": [[135, 138], ["__init__.ModelConstructor._build_dev"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._build_dev"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._build_dev": [[139, 147], ["getattr", "constructor", "getattr.", "getattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._llcp": [[148, 151], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._llcp_r": [[152, 155], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._y_net_m": [[156, 159], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._u_net": [[160, 163], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._y_net_r": [[164, 167], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._y_net_g": [[168, 171], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._y_net_gr": [[172, 175], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._iter_llcp": [[176, 179], ["model.llcp.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._iter_llcp_r": [[180, 183], ["model.llcp.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._iter_y_net_e_legacy": [[184, 189], ["utils.ParamFinder().unet", "utils.ParamFinder().others", "model.motion_net.parameters", "utils.ParamFinder", "utils.ParamFinder"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.unet", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.others"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._iter_y_net_m_legacy": [[190, 195], ["utils.ParamFinder().unet", "utils.ParamFinder().others", "model.motion_net.parameters", "utils.ParamFinder", "utils.ParamFinder"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.unet", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.others"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._iter_y_net_r_legacy": [[196, 201], ["utils.ParamFinder().unet", "utils.ParamFinder().others", "model.motion_net.parameters", "utils.ParamFinder", "utils.ParamFinder"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.unet", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.others"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._iter_y_net_g": [[202, 209], ["iterable.append", "utils.ParamFinder().unet", "utils.ParamFinder().others", "model.graph_net.parameters", "model.motion_net.parameters", "utils.ParamFinder", "utils.ParamFinder"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.unet", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.others"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._iter_y_net_gr": [[210, 217], ["iterable.append", "utils.ParamFinder().unet", "utils.ParamFinder().others", "model.graph_net.parameters", "model.motion_net.parameters", "utils.ParamFinder", "utils.ParamFinder"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.unet", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.others"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._iter_y_net_m": [[218, 225], ["iterable.append", "utils.ParamFinder().unet", "utils.ParamFinder().others", "model.motion_net.parameters", "utils.ParamFinder", "utils.ParamFinder"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.unet", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.others"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._iter_y_net_r": [[226, 233], ["iterable.append", "utils.ParamFinder().unet", "utils.ParamFinder().others", "model.motion_net.parameters", "utils.ParamFinder", "utils.ParamFinder"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.unet", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.others"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor._iter_u_net": [[234, 238], ["utils.ParamFinder().unet", "utils.ParamFinder().others", "utils.ParamFinder", "utils.ParamFinder"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.unet", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.utils.__init__.ParamFinder.others"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.torch_version": [[8, 12], ["string.split", "int", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.copyupdt": [[246, 253], ["isinstance", "copy.copy", "isinstance", "copy.copy.update"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.download_google": [[317, 321], ["gdown.download"], "function", ["None"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.y_net_mr": [[322, 338], ["__init__.ModelConstructor", "copy.copy", "ModelConstructor.prepare().update().build", "os.path.join", "__init__.download_google", "load", "model.load_state_dict", "ModelConstructor.prepare().update", "os.path.exists", "os.mkdir", "torch.rand", "__init__.ModelConstructor.prepare", "__init__.torch_version", "__init__.torch_version"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.build", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.download_google", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.prepare", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.torch_version", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.torch_version"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.y_net_m": [[340, 356], ["__init__.ModelConstructor", "copy.copy", "ModelConstructor.prepare().update().build", "os.path.join", "__init__.download_google", "load", "model.load_state_dict", "ModelConstructor.prepare().update", "os.path.exists", "os.mkdir", "torch.rand", "__init__.ModelConstructor.prepare", "__init__.torch_version", "__init__.torch_version"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.build", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.download_google", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.prepare", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.torch_version", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.torch_version"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.y_net_gr": [[358, 374], ["__init__.ModelConstructor", "copy.copy", "ModelConstructor.prepare().update().build", "os.path.join", "__init__.download_google", "load", "model.load_state_dict", "ModelConstructor.prepare().update", "os.path.exists", "os.mkdir", "torch.rand", "__init__.ModelConstructor.prepare", "__init__.torch_version", "__init__.torch_version"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.build", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.download_google", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.prepare", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.torch_version", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.torch_version"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.y_net_g": [[376, 392], ["__init__.ModelConstructor", "copy.copy", "ModelConstructor.prepare().update().build", "os.path.join", "__init__.download_google", "load", "model.load_state_dict", "ModelConstructor.prepare().update", "os.path.exists", "os.mkdir", "torch.rand", "__init__.ModelConstructor.prepare", "__init__.torch_version", "__init__.torch_version"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.build", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.download_google", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.prepare", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.torch_version", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.torch_version"], []], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.YouTubeSaver.__init__": [[16, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "outtmpl", "=", "'%(id)s.%(ext)s'", "\n", "self", ".", "ydl_opts", "=", "{", "\n", "'format'", ":", "'bestaudio'", ",", "\n", "'outtmpl'", ":", "self", ".", "outtmpl", ",", "\n", "\n", "'postprocessors'", ":", "[", "{", "\n", "'key'", ":", "'FFmpegExtractAudio'", ",", "\n", "'preferredcodec'", ":", "'wav'", ",", "\n", "'preferredquality'", ":", "'192'", ",", "\n", "}", "]", ",", "\n", "'logger'", ":", "None", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.YouTubeSaver.from_json": [[30, 63], ["json.load", "flerken.utils.BaseDict().load", "json.load.keys", "open", "flerken.utils.BaseDict", "os.path.exists", "os.makedirs", "youtube_dl.YoutubeDL", "os.path.join", "os.path.join", "os.path.join", "ydl.download", "remaining[].pop", "flerken.video.utils.apply_single", "os.remove", "remaining[].index", "flerken.utils.BaseDict().load.write", "str", "str", "str", "int", "int"], "methods", ["None"], ["", "def", "from_json", "(", "self", ",", "json_path", ",", "dataset_dir", ",", "tag2text", ",", "ids_info", ")", ":", "\n", "        ", "dataset", "=", "json", ".", "load", "(", "open", "(", "json_path", ")", ")", "\n", "remaining", "=", "BaseDict", "(", ")", ".", "load", "(", "json_path", ")", "\n", "for", "tag", "in", "dataset", ".", "keys", "(", ")", ":", "\n", "            ", "text", "=", "tag2text", "[", "tag", "]", "\n", "# self.ydl_opts['outtmpl'] = os.path.join(dataset_dir, text, self.outtmpl)", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "text", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "text", ")", ")", "\n", "", "with", "youtube_dl", ".", "YoutubeDL", "(", "self", ".", "ydl_opts", ")", "as", "ydl", ":", "\n", "                ", "for", "video_id", "in", "dataset", "[", "tag", "]", ":", "\n", "                    ", "try", ":", "\n", "                        ", "info", "=", "ids_info", "[", "video_id", "]", "\n", "if", "info", "[", "'end_seconds'", "]", "-", "info", "[", "'start_seconds'", "]", "<", "MIN_DUR", ":", "\n", "                            ", "continue", "\n", "", "src", "=", "f'{video_id}.wav'", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "text", ",", "src", ")", "\n", "ydl", ".", "download", "(", "[", "'https://www.youtube.com/watch?v=%s'", "%", "video_id", "]", ")", "\n", "remaining", "[", "tag", "]", ".", "pop", "(", "remaining", "[", "tag", "]", ".", "index", "(", "video_id", ")", ")", "\n", "apply_single", "(", "src", ",", "dst", ",", "\n", "input_options", "=", "[", "'-ss'", ",", "str", "(", "int", "(", "info", "[", "'start_seconds'", "]", ")", ")", "]", ",", "\n", "output_options", "=", "[", "'-to'", ",", "str", "(", "int", "(", "info", "[", "'end_seconds'", "]", ")", ")", ",", "\n", "'-ac'", ",", "'1'", ",", "\n", "'-ar'", ",", "str", "(", "AUDIO_SR", ")", "]", ",", "\n", "ext", "=", "'.wav'", "\n", ")", "\n", "os", ".", "remove", "(", "src", ")", "\n", "", "except", "KeyError", "as", "ex", ":", "\n", "                        ", "raise", "ex", "\n", "", "except", "FileNotFoundError", "as", "ex", ":", "\n", "                        ", "raise", "ex", "\n", "", "except", "Exception", ":", "\n", "                        ", "remaining", ".", "write", "(", "json_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.read_csv": [[65, 69], ["open", "csv.reader"], "function", ["None"], ["", "", "", "", "", "", "def", "read_csv", "(", "path", ":", "str", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "mode", "=", "'r'", ")", "as", "file", ":", "\n", "        ", "csvfile", "=", "csv", ".", "reader", "(", "file", ")", "\n", "yield", "from", "csvfile", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.read_audioset_csv": [[71, 86], ["print", "audioset.read_csv", "print", "next", "print", "int", "next", "tqdm.tqdm", "next", "dict", "float", "float", "info[].split", "x.replace().replace", "x.replace"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.read_csv"], ["", "", "def", "read_audioset_csv", "(", "path", ":", "str", ")", ":", "\n", "    ", "print", "(", "f'Subset: {path}'", ")", "\n", "iterable", "=", "read_csv", "(", "path", ")", "\n", "print", "(", "next", "(", "iterable", ")", ")", "\n", "info", "=", "next", "(", "iterable", ")", "\n", "print", "(", "info", ")", "\n", "N", "=", "int", "(", "info", "[", "0", "]", ".", "split", "(", "'='", ")", "[", "1", "]", ")", "\n", "header", "=", "next", "(", "iterable", ")", "\n", "for", "line", "in", "tqdm", "(", "iterable", ",", "total", "=", "N", ")", ":", "\n", "        ", "prop", "=", "dict", "(", ")", "\n", "prop", "[", "header", "[", "0", "]", "]", "=", "line", "[", "0", "]", "\n", "prop", "[", "'start_seconds'", "]", "=", "float", "(", "line", "[", "1", "]", ")", "\n", "prop", "[", "'end_seconds'", "]", "=", "float", "(", "line", "[", "2", "]", ")", "\n", "prop", "[", "'positive_labels'", "]", "=", "[", "x", ".", "replace", "(", "' '", ",", "''", ")", ".", "replace", "(", "'\"'", ",", "''", ")", "for", "x", "in", "line", "[", "3", ":", "]", "]", "\n", "yield", "prop", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.csv2json": [[88, 100], ["flerken.utils.BaseDict", "flerken.utils.BaseDict", "audioset.read_audioset_csv", "sample.pop", "category_info[].append"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.read_audioset_csv"], ["", "", "def", "csv2json", "(", "path", ":", "str", ")", ":", "\n", "    ", "ids_info", "=", "BaseDict", "(", ")", "\n", "category_info", "=", "BaseDict", "(", ")", "\n", "for", "sample", "in", "read_audioset_csv", "(", "path", ")", ":", "\n", "        ", "for", "cat", "in", "sample", "[", "'positive_labels'", "]", ":", "\n", "            ", "if", "cat", "not", "in", "category_info", ":", "\n", "                ", "category_info", "[", "cat", "]", "=", "[", "]", "\n", "", "category_info", "[", "cat", "]", ".", "append", "(", "sample", "[", "'# YTID'", "]", ")", "\n", "", "ID", "=", "sample", "[", "'# YTID'", "]", "\n", "sample", ".", "pop", "(", "'# YTID'", ")", "\n", "ids_info", "[", "ID", "]", "=", "sample", "\n", "", "return", "ids_info", ",", "category_info", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.extract_json_files": [[102, 116], ["audioset.csv2json", "ids_info_utrain.write", "cat_info_utrain.write", "audioset.csv2json", "ids_info_train.write", "cat_info_train.write", "audioset.csv2json", "ids_info_eval.write", "cat_info_eval.write"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.csv2json", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.csv2json", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.csv2json"], ["", "def", "extract_json_files", "(", ")", ":", "\n", "    ", "ids_info_utrain", ",", "cat_info_utrain", "=", "csv2json", "(", "'./unbalanced_train_segments.csv'", ")", "\n", "ids_info_utrain", ".", "write", "(", "'./unbalanced_train_ids_info.json'", ")", "\n", "cat_info_utrain", ".", "write", "(", "'./unbalanced_train_cat_info.json'", ")", "\n", "\n", "ids_info_train", ",", "cat_info_train", "=", "csv2json", "(", "'./balanced_train_segments.csv'", ")", "\n", "ids_info_train", ".", "write", "(", "'./balanced_train_ids_info.json'", ")", "\n", "cat_info_train", ".", "write", "(", "'./balanced_train_cat_info.json'", ")", "\n", "\n", "ids_info_eval", ",", "cat_info_eval", "=", "csv2json", "(", "'./eval_segments.csv'", ")", "\n", "ids_info_eval", ".", "write", "(", "'./eval_ids_info.json'", ")", "\n", "cat_info_eval", ".", "write", "(", "'./eval_cat_info.json'", ")", "\n", "return", "ids_info_utrain", ",", "ids_info_train", ",", "ids_info_eval", ",", "cat_info_utrain", ",", "cat_info_train", ",", "cat_info_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.load_cat_json_file": [[118, 124], ["flerken.utils.BaseDict().load", "list", "BaseDict().load.keys", "flerken.utils.BaseDict", "BaseDict().load.pop"], "function", ["None"], ["", "def", "load_cat_json_file", "(", "tag_options", ",", "path", ")", ":", "\n", "    ", "cat_info", "=", "BaseDict", "(", ")", ".", "load", "(", "path", ")", "\n", "for", "key", "in", "list", "(", "cat_info", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "key", "not", "in", "tag_options", ":", "\n", "            ", "cat_info", ".", "pop", "(", "key", ")", "\n", "", "", "return", "cat_info", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.load_ontology": [[126, 131], ["streamlit.cache", "open", "json.load"], "function", ["None"], ["", "@", "st", ".", "cache", "(", ")", "\n", "def", "load_ontology", "(", "path", "=", "'./ontology.json'", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "datastore", "=", "json", ".", "load", "(", "f", ")", "\n", "return", "datastore", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.audioset.translators": [[133, 143], ["streamlit.cache"], "function", ["None"], ["", "", "@", "st", ".", "cache", "(", ")", "\n", "def", "translators", "(", "ontology", ")", ":", "\n", "    ", "tag2text", "=", "{", "}", "\n", "text2tag", "=", "{", "}", "\n", "for", "el", "in", "ontology", ":", "\n", "        ", "name", "=", "el", "[", "'name'", "]", "\n", "tag", "=", "el", "[", "'id'", "]", "\n", "text2tag", "[", "name", "]", "=", "tag", "\n", "tag2text", "[", "tag", "]", "=", "name", "\n", "", "return", "tag2text", ",", "text2tag", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.ConvBlock.__init__": [[299, 317], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "face_align.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "face_align.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "face_align.conv3x3", "int", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.conv3x3", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.conv3x3", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "int", "(", "out_planes", "/", "2", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "out_planes", "/", "2", ")", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "int", "(", "out_planes", "/", "2", ")", ",", "int", "(", "out_planes", "/", "4", ")", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "out_planes", "/", "4", ")", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "int", "(", "out_planes", "/", "4", ")", ",", "int", "(", "out_planes", "/", "4", ")", ")", "\n", "\n", "if", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.ConvBlock.forward": [[318, 341], ["face_align.ConvBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "face_align.ConvBlock.conv1", "face_align.ConvBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "face_align.ConvBlock.conv2", "face_align.ConvBlock.bn3", "torch.relu", "torch.relu", "torch.relu", "face_align.ConvBlock.conv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "face_align.ConvBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out1", "=", "F", ".", "relu", "(", "out1", ",", "True", ")", "\n", "out1", "=", "self", ".", "conv1", "(", "out1", ")", "\n", "\n", "out2", "=", "self", ".", "bn2", "(", "out1", ")", "\n", "out2", "=", "F", ".", "relu", "(", "out2", ",", "True", ")", "\n", "out2", "=", "self", ".", "conv2", "(", "out2", ")", "\n", "\n", "out3", "=", "self", ".", "bn3", "(", "out2", ")", "\n", "out3", "=", "F", ".", "relu", "(", "out3", ",", "True", ")", "\n", "out3", "=", "self", ".", "conv3", "(", "out3", ")", "\n", "\n", "out3", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ",", "out3", ")", ",", "1", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "\n", "", "out3", "+=", "residual", "\n", "\n", "return", "out3", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.Bottleneck.__init__": [[347, 359], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.Bottleneck.forward": [[360, 381], ["face_align.Bottleneck.conv1", "face_align.Bottleneck.bn1", "face_align.Bottleneck.relu", "face_align.Bottleneck.conv2", "face_align.Bottleneck.bn2", "face_align.Bottleneck.relu", "face_align.Bottleneck.conv3", "face_align.Bottleneck.bn3", "face_align.Bottleneck.relu", "face_align.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.HourGlass.__init__": [[384, 391], ["torch.Module.__init__", "face_align.HourGlass._generate_network"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.HourGlass._generate_network"], ["    ", "def", "__init__", "(", "self", ",", "num_modules", ",", "depth", ",", "num_features", ")", ":", "\n", "        ", "super", "(", "HourGlass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_modules", "=", "num_modules", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "features", "=", "num_features", "\n", "\n", "self", ".", "_generate_network", "(", "self", ".", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.HourGlass._generate_network": [[392, 403], ["face_align.HourGlass.add_module", "face_align.HourGlass.add_module", "face_align.HourGlass.add_module", "face_align.ConvBlock", "face_align.ConvBlock", "face_align.HourGlass._generate_network", "face_align.HourGlass.add_module", "face_align.ConvBlock", "str", "str", "face_align.ConvBlock", "str", "str"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.HourGlass._generate_network"], ["", "def", "_generate_network", "(", "self", ",", "level", ")", ":", "\n", "        ", "self", ".", "add_module", "(", "'b1_'", "+", "str", "(", "level", ")", ",", "ConvBlock", "(", "self", ".", "features", ",", "self", ".", "features", ")", ")", "\n", "\n", "self", ".", "add_module", "(", "'b2_'", "+", "str", "(", "level", ")", ",", "ConvBlock", "(", "self", ".", "features", ",", "self", ".", "features", ")", ")", "\n", "\n", "if", "level", ">", "1", ":", "\n", "            ", "self", ".", "_generate_network", "(", "level", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_module", "(", "'b2_plus_'", "+", "str", "(", "level", ")", ",", "ConvBlock", "(", "self", ".", "features", ",", "self", ".", "features", ")", ")", "\n", "\n", "", "self", ".", "add_module", "(", "'b3_'", "+", "str", "(", "level", ")", ",", "ConvBlock", "(", "self", ".", "features", ",", "self", ".", "features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.HourGlass._forward": [[404, 425], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "face_align.HourGlass._forward", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.HourGlass._forward"], ["", "def", "_forward", "(", "self", ",", "level", ",", "inp", ")", ":", "\n", "# Upper branch", "\n", "        ", "up1", "=", "inp", "\n", "up1", "=", "self", ".", "_modules", "[", "'b1_'", "+", "str", "(", "level", ")", "]", "(", "up1", ")", "\n", "\n", "# Lower branch", "\n", "low1", "=", "F", ".", "avg_pool2d", "(", "inp", ",", "2", ",", "stride", "=", "2", ")", "\n", "low1", "=", "self", ".", "_modules", "[", "'b2_'", "+", "str", "(", "level", ")", "]", "(", "low1", ")", "\n", "\n", "if", "level", ">", "1", ":", "\n", "            ", "low2", "=", "self", ".", "_forward", "(", "level", "-", "1", ",", "low1", ")", "\n", "", "else", ":", "\n", "            ", "low2", "=", "low1", "\n", "low2", "=", "self", ".", "_modules", "[", "'b2_plus_'", "+", "str", "(", "level", ")", "]", "(", "low2", ")", "\n", "\n", "", "low3", "=", "low2", "\n", "low3", "=", "self", ".", "_modules", "[", "'b3_'", "+", "str", "(", "level", ")", "]", "(", "low3", ")", "\n", "\n", "up2", "=", "F", ".", "interpolate", "(", "low3", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "return", "up1", "+", "up2", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.HourGlass.forward": [[426, 428], ["face_align.HourGlass._forward"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.HourGlass._forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward", "(", "self", ".", "depth", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FAN.__init__": [[432, 458], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "face_align.ConvBlock", "face_align.ConvBlock", "face_align.ConvBlock", "range", "face_align.FAN.add_module", "face_align.FAN.add_module", "face_align.FAN.add_module", "face_align.FAN.add_module", "face_align.FAN.add_module", "face_align.HourGlass", "face_align.ConvBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "face_align.FAN.add_module", "face_align.FAN.add_module", "str", "str", "str", "str", "str", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "str", "str"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_modules", "=", "1", ")", ":", "\n", "        ", "super", "(", "FAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_modules", "=", "num_modules", "\n", "\n", "# Base part", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv2", "=", "ConvBlock", "(", "64", ",", "128", ")", "\n", "self", ".", "conv3", "=", "ConvBlock", "(", "128", ",", "128", ")", "\n", "self", ".", "conv4", "=", "ConvBlock", "(", "128", ",", "256", ")", "\n", "\n", "# Stacking part", "\n", "for", "hg_module", "in", "range", "(", "self", ".", "num_modules", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "'m'", "+", "str", "(", "hg_module", ")", ",", "HourGlass", "(", "1", ",", "4", ",", "256", ")", ")", "\n", "self", ".", "add_module", "(", "'top_m_'", "+", "str", "(", "hg_module", ")", ",", "ConvBlock", "(", "256", ",", "256", ")", ")", "\n", "self", ".", "add_module", "(", "'conv_last'", "+", "str", "(", "hg_module", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "self", ".", "add_module", "(", "'bn_end'", "+", "str", "(", "hg_module", ")", ",", "nn", ".", "BatchNorm2d", "(", "256", ")", ")", "\n", "self", ".", "add_module", "(", "'l'", "+", "str", "(", "hg_module", ")", ",", "nn", ".", "Conv2d", "(", "256", ",", "\n", "68", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "\n", "if", "hg_module", "<", "self", ".", "num_modules", "-", "1", ":", "\n", "                ", "self", ".", "add_module", "(", "\n", "'bl'", "+", "str", "(", "hg_module", ")", ",", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "self", ".", "add_module", "(", "'al'", "+", "str", "(", "hg_module", ")", ",", "nn", ".", "Conv2d", "(", "68", ",", "\n", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FAN.forward": [[459, 487], ["torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "face_align.FAN.conv3", "face_align.FAN.conv4", "range", "face_align.FAN.bn1", "face_align.FAN.conv2", "torch.relu", "torch.relu", "torch.relu", "outputs.append", "face_align.FAN.conv1", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ",", "True", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "self", ".", "conv2", "(", "x", ")", ",", "2", ",", "stride", "=", "2", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "\n", "previous", "=", "x", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_modules", ")", ":", "\n", "            ", "hg", "=", "self", ".", "_modules", "[", "'m'", "+", "str", "(", "i", ")", "]", "(", "previous", ")", "\n", "\n", "ll", "=", "hg", "\n", "ll", "=", "self", ".", "_modules", "[", "'top_m_'", "+", "str", "(", "i", ")", "]", "(", "ll", ")", "\n", "\n", "ll", "=", "F", ".", "relu", "(", "self", ".", "_modules", "[", "'bn_end'", "+", "str", "(", "i", ")", "]", "\n", "(", "self", ".", "_modules", "[", "'conv_last'", "+", "str", "(", "i", ")", "]", "(", "ll", ")", ")", ",", "True", ")", "\n", "\n", "# Predict heatmaps", "\n", "tmp_out", "=", "self", ".", "_modules", "[", "'l'", "+", "str", "(", "i", ")", "]", "(", "ll", ")", "\n", "outputs", ".", "append", "(", "tmp_out", ")", "\n", "\n", "if", "i", "<", "self", ".", "num_modules", "-", "1", ":", "\n", "                ", "ll", "=", "self", ".", "_modules", "[", "'bl'", "+", "str", "(", "i", ")", "]", "(", "ll", ")", "\n", "tmp_out_", "=", "self", ".", "_modules", "[", "'al'", "+", "str", "(", "i", ")", "]", "(", "tmp_out", ")", "\n", "previous", "=", "previous", "+", "ll", "+", "tmp_out_", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.ResNetDepth.__init__": [[491, 513], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "face_align.ResNetDepth._make_layer", "face_align.ResNetDepth._make_layer", "face_align.ResNetDepth._make_layer", "face_align.ResNetDepth._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "face_align.ResNetDepth.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.ResNetDepth._make_layer", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.ResNetDepth._make_layer", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.ResNetDepth._make_layer", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.ResNetDepth._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "68", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetDepth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", "+", "68", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.ResNetDepth._make_layer": [[514, 530], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.ResNetDepth.forward": [[531, 547], ["face_align.ResNetDepth.conv1", "face_align.ResNetDepth.bn1", "face_align.ResNetDepth.relu", "face_align.ResNetDepth.maxpool", "face_align.ResNetDepth.layer1", "face_align.ResNetDepth.layer2", "face_align.ResNetDepth.layer3", "face_align.ResNetDepth.layer4", "face_align.ResNetDepth.avgpool", "face_align.ResNetDepth.view", "face_align.ResNetDepth.fc", "face_align.ResNetDepth.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.NetworkSize.__new__": [[568, 572], ["object.__new__"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.NetworkSize.__new__"], ["def", "__new__", "(", "cls", ",", "value", ")", ":", "\n", "        ", "member", "=", "object", ".", "__new__", "(", "cls", ")", "\n", "member", ".", "_value_", "=", "value", "\n", "return", "member", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.NetworkSize.__int__": [[573, 575], ["None"], "methods", ["None"], ["", "def", "__int__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.__init__": [[578, 661], ["os.path.join", "int", "__import__", "__import__.FaceDetector", "face_align.FAN", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "face_align.FaceAlignment.face_alignment_net.load_state_dict", "face_align.FaceAlignment.face_alignment_net.to", "face_align.FaceAlignment.face_alignment_net.eval", "face_align.appdata_dir", "os.path.exists", "os.makedirs", "globals", "locals", "os.path.isfile", "print", "os.path.join", "os.path.isfile", "request_file.urlretrieve", "os.rename", "face_align.ResNetDepth", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "face_align.FaceAlignment.depth_prediciton_net.load_state_dict", "face_align.FaceAlignment.depth_prediciton_net.to", "face_align.FaceAlignment.depth_prediciton_net.eval", "os.remove", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "print", "os.path.join", "os.path.isfile", "request_file.urlretrieve", "os.rename", "k.replace", "str", "str", "os.path.join", "os.remove", "os.path.join", "os.path.join", "os.path.join", "depth_weights[].items", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.appdata_dir"], ["    ", "def", "__init__", "(", "self", ",", "landmarks_type", ",", "network_size", "=", "NetworkSize", ".", "LARGE", ",", "\n", "device", "=", "'cuda'", ",", "flip_input", "=", "False", ",", "face_detector", "=", "'sfd'", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "flip_input", "=", "flip_input", "\n", "self", ".", "landmarks_type", "=", "landmarks_type", "\n", "self", ".", "verbose", "=", "verbose", "\n", "base_path", "=", "os", ".", "path", ".", "join", "(", "appdata_dir", "(", "'face_alignment'", ")", ",", "\"data\"", ")", "\n", "\n", "network_size", "=", "int", "(", "network_size", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "base_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "base_path", ")", "\n", "\n", "", "if", "'cuda'", "in", "device", ":", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Get the face detector", "\n", "", "face_detector_module", "=", "__import__", "(", "'face_alignment.detection.'", "+", "face_detector", ",", "\n", "globals", "(", ")", ",", "locals", "(", ")", ",", "[", "face_detector", "]", ",", "0", ")", "\n", "self", ".", "face_detector", "=", "face_detector_module", ".", "FaceDetector", "(", "device", "=", "device", ",", "verbose", "=", "verbose", ")", "\n", "\n", "# Initialise the face alignemnt networks", "\n", "self", ".", "face_alignment_net", "=", "FAN", "(", "network_size", ")", "\n", "if", "landmarks_type", "==", "LandmarksType", ".", "_2D", ":", "\n", "            ", "network_name", "=", "'2DFAN-'", "+", "str", "(", "network_size", ")", "+", "'.pth.tar'", "\n", "", "else", ":", "\n", "            ", "network_name", "=", "'3DFAN-'", "+", "str", "(", "network_size", ")", "+", "'.pth.tar'", "\n", "", "fan_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "network_name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "fan_path", ")", ":", "\n", "            ", "print", "(", "\"Downloading the Face Alignment Network(FAN). Please wait...\"", ")", "\n", "\n", "fan_temp_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "network_name", "+", "'.download'", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fan_temp_path", ")", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "fan_temp_path", ")", ")", "\n", "\n", "", "request_file", ".", "urlretrieve", "(", "\n", "\"https://www.adrianbulat.com/downloads/python-fan/\"", "+", "\n", "network_name", ",", "os", ".", "path", ".", "join", "(", "fan_temp_path", ")", ")", "\n", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "fan_temp_path", ")", ",", "os", ".", "path", ".", "join", "(", "fan_path", ")", ")", "\n", "\n", "", "fan_weights", "=", "torch", ".", "load", "(", "\n", "fan_path", ",", "\n", "map_location", "=", "lambda", "storage", ",", "\n", "loc", ":", "storage", ")", "\n", "\n", "self", ".", "face_alignment_net", ".", "load_state_dict", "(", "fan_weights", ")", "\n", "\n", "self", ".", "face_alignment_net", ".", "to", "(", "device", ")", "\n", "self", ".", "face_alignment_net", ".", "eval", "(", ")", "\n", "\n", "# Initialiase the depth prediciton network", "\n", "if", "landmarks_type", "==", "LandmarksType", ".", "_3D", ":", "\n", "            ", "self", ".", "depth_prediciton_net", "=", "ResNetDepth", "(", ")", "\n", "depth_model_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'depth.pth.tar'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "depth_model_path", ")", ":", "\n", "                ", "print", "(", "\n", "\"Downloading the Face Alignment depth Network (FAN-D). Please wait...\"", ")", "\n", "\n", "depth_model_temp_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'depth.pth.tar.download'", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "depth_model_temp_path", ")", ":", "\n", "                    ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "depth_model_temp_path", ")", ")", "\n", "\n", "", "request_file", ".", "urlretrieve", "(", "\n", "\"https://www.adrianbulat.com/downloads/python-fan/depth.pth.tar\"", ",", "\n", "os", ".", "path", ".", "join", "(", "depth_model_temp_path", ")", ")", "\n", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "depth_model_temp_path", ")", ",", "os", ".", "path", ".", "join", "(", "depth_model_path", ")", ")", "\n", "\n", "", "depth_weights", "=", "torch", ".", "load", "(", "\n", "depth_model_path", ",", "\n", "map_location", "=", "lambda", "storage", ",", "\n", "loc", ":", "storage", ")", "\n", "depth_dict", "=", "{", "\n", "k", ".", "replace", "(", "'module.'", ",", "''", ")", ":", "v", "for", "k", ",", "\n", "v", "in", "depth_weights", "[", "'state_dict'", "]", ".", "items", "(", ")", "}", "\n", "self", ".", "depth_prediciton_net", ".", "load_state_dict", "(", "depth_dict", ")", "\n", "\n", "self", ".", "depth_prediciton_net", ".", "to", "(", "device", ")", "\n", "self", ".", "depth_prediciton_net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks": [[662, 673], ["face_align.FaceAlignment.get_landmarks_from_image"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks_from_image"], ["", "", "def", "get_landmarks", "(", "self", ",", "image_or_path", ",", "detected_faces", "=", "None", ")", ":", "\n", "        ", "\"\"\"Deprecated, please use get_landmarks_from_image\n\n        Arguments:\n            image_or_path {string or numpy.array or torch.tensor} -- The input image or path to it.\n\n        Keyword Arguments:\n            detected_faces {list of numpy.array} -- list of bounding boxes, one for each face found\n            in the image (default: {None})\n        \"\"\"", "\n", "return", "self", ".", "get_landmarks_from_image", "(", "image_or_path", ",", "detected_faces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks_from_image": [[674, 752], ["isinstance", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "enumerate", "skimage.color.gray2rgb", "face_align.FaceAlignment.face_detector.detect_from_image", "len", "print", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "face_align.crop", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "inp.to.to.to", "inp.to.to.div_().unsqueeze_", "[].detach", "out.cpu.cpu.cpu", "face_align.get_preds_fromhm", "landmarks.append", "skimage.io.imread", "image[].copy", "face_align.flip", "torch.cat.view", "torch.cat.view", "torch.cat.view", "numpy.zeros", "numpy.zeros", "range", "torch.from_numpy().unsqueeze_", "torch.from_numpy().unsqueeze_", "torch.from_numpy().unsqueeze_", "torch.from_numpy().unsqueeze_", "torch.from_numpy().unsqueeze_", "torch.from_numpy().unsqueeze_", "torch.from_numpy().unsqueeze_", "torch.from_numpy().unsqueeze_", "torch.from_numpy().unsqueeze_", "heatmaps.to.to.to", "face_align.FaceAlignment.depth_prediciton_net().data.cpu().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.numpy", "torch.cat.numpy", "torch.cat.numpy", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "inp.to.to.div_", "[].detach", "pts.view", "inp.to.to.transpose", "face_align.FaceAlignment.face_alignment_net", "face_align.draw_gaussian", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "face_align.FaceAlignment.depth_prediciton_net().data.cpu", "face_align.FaceAlignment.face_alignment_net", "face_align.flip", "face_align.FaceAlignment.depth_prediciton_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.crop", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.get_preds_fromhm", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.flip", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.draw_gaussian", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.flip"], ["", "def", "get_landmarks_from_image", "(", "self", ",", "image_or_path", ",", "detected_faces", "=", "None", ")", ":", "\n", "        ", "\"\"\"Predict the landmarks for each face present in the image.\n\n        This function predicts a set of 68 2D or 3D images, one for each image present.\n        If detect_faces is None the method will also run a face detector.\n\n         Arguments:\n            image_or_path {string or numpy.array or torch.tensor} -- The input image or path to it.\n\n        Keyword Arguments:\n            detected_faces {list of numpy.array} -- list of bounding boxes, one for each face found\n            in the image (default: {None})\n        \"\"\"", "\n", "if", "isinstance", "(", "image_or_path", ",", "str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "image", "=", "io", ".", "imread", "(", "image_or_path", ")", "\n", "", "except", "IOError", ":", "\n", "                ", "print", "(", "\"error opening file :: \"", ",", "image_or_path", ")", "\n", "return", "None", "\n", "", "", "else", ":", "\n", "            ", "image", "=", "image_or_path", "\n", "\n", "", "if", "image", ".", "ndim", "==", "2", ":", "\n", "            ", "image", "=", "color", ".", "gray2rgb", "(", "image", ")", "\n", "", "elif", "image", ".", "ndim", "==", "4", ":", "\n", "            ", "image", "=", "image", "[", "...", ",", ":", "3", "]", "\n", "\n", "", "if", "detected_faces", "is", "None", ":", "\n", "            ", "detected_faces", "=", "self", ".", "face_detector", ".", "detect_from_image", "(", "image", "[", "...", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ")", "\n", "\n", "", "if", "len", "(", "detected_faces", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"Warning: No faces were detected.\"", ")", "\n", "return", "None", "\n", "\n", "", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "landmarks", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "detected_faces", ")", ":", "\n", "            ", "center", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "d", "[", "2", "]", "-", "(", "d", "[", "2", "]", "-", "d", "[", "0", "]", ")", "/", "2.0", ",", "d", "[", "3", "]", "-", "\n", "(", "d", "[", "3", "]", "-", "d", "[", "1", "]", ")", "/", "2.0", "]", ")", "\n", "center", "[", "1", "]", "=", "center", "[", "1", "]", "-", "(", "d", "[", "3", "]", "-", "d", "[", "1", "]", ")", "*", "0.12", "\n", "scale", "=", "(", "d", "[", "2", "]", "-", "d", "[", "0", "]", "+", "\n", "d", "[", "3", "]", "-", "d", "[", "1", "]", ")", "/", "self", ".", "face_detector", ".", "reference_scale", "\n", "\n", "inp", "=", "crop", "(", "image", ",", "center", ",", "scale", ")", "\n", "inp", "=", "torch", ".", "from_numpy", "(", "inp", ".", "transpose", "(", "\n", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "float", "(", ")", "\n", "\n", "inp", "=", "inp", ".", "to", "(", "self", ".", "device", ")", "\n", "inp", ".", "div_", "(", "255.0", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "\n", "out", "=", "self", ".", "face_alignment_net", "(", "inp", ")", "[", "-", "1", "]", ".", "detach", "(", ")", "\n", "if", "self", ".", "flip_input", ":", "\n", "                ", "out", "+=", "flip", "(", "self", ".", "face_alignment_net", "(", "flip", "(", "inp", ")", ")", "\n", "[", "-", "1", "]", ".", "detach", "(", ")", ",", "is_label", "=", "True", ")", "\n", "", "out", "=", "out", ".", "cpu", "(", ")", "\n", "\n", "pts", ",", "pts_img", "=", "get_preds_fromhm", "(", "out", ",", "center", ",", "scale", ")", "\n", "pts", ",", "pts_img", "=", "pts", ".", "view", "(", "68", ",", "2", ")", "*", "4", ",", "pts_img", ".", "view", "(", "68", ",", "2", ")", "\n", "\n", "if", "self", ".", "landmarks_type", "==", "LandmarksType", ".", "_3D", ":", "\n", "                ", "heatmaps", "=", "np", ".", "zeros", "(", "(", "68", ",", "256", ",", "256", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "68", ")", ":", "\n", "                    ", "if", "pts", "[", "i", ",", "0", "]", ">", "0", ":", "\n", "                        ", "heatmaps", "[", "i", "]", "=", "draw_gaussian", "(", "\n", "heatmaps", "[", "i", "]", ",", "pts", "[", "i", "]", ",", "2", ")", "\n", "", "", "heatmaps", "=", "torch", ".", "from_numpy", "(", "\n", "heatmaps", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "\n", "heatmaps", "=", "heatmaps", ".", "to", "(", "self", ".", "device", ")", "\n", "depth_pred", "=", "self", ".", "depth_prediciton_net", "(", "\n", "torch", ".", "cat", "(", "(", "inp", ",", "heatmaps", ")", ",", "1", ")", ")", ".", "data", ".", "cpu", "(", ")", ".", "view", "(", "68", ",", "1", ")", "\n", "pts_img", "=", "torch", ".", "cat", "(", "\n", "(", "pts_img", ",", "depth_pred", "*", "(", "1.0", "/", "(", "256.0", "/", "(", "200.0", "*", "scale", ")", ")", ")", ")", ",", "1", ")", "\n", "\n", "", "landmarks", ".", "append", "(", "pts_img", ".", "numpy", "(", ")", ")", "\n", "\n", "", "return", "[", "landmarks", "[", "0", "]", ",", "detected_faces", "[", "0", "]", "[", ":", "-", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks_from_directory": [[753, 763], ["face_align.FaceAlignment.face_detector.detect_from_directory", "face_align.FaceAlignment.items", "skimage.io.imread", "face_align.FaceAlignment.get_landmarks_from_image"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks_from_image"], ["", "def", "get_landmarks_from_directory", "(", "self", ",", "path", ",", "extensions", "=", "[", "'.jpg'", ",", "'.png'", "]", ",", "recursive", "=", "True", ",", "show_progress_bar", "=", "True", ")", ":", "\n", "        ", "detected_faces", "=", "self", ".", "face_detector", ".", "detect_from_directory", "(", "path", ",", "extensions", ",", "recursive", ",", "show_progress_bar", ")", "\n", "\n", "predictions", "=", "{", "}", "\n", "for", "image_path", ",", "bounding_boxes", "in", "detected_faces", ".", "items", "(", ")", ":", "\n", "            ", "image", "=", "io", ".", "imread", "(", "image_path", ")", "\n", "preds", "=", "self", ".", "get_landmarks_from_image", "(", "image", ",", "bounding_boxes", ")", "\n", "predictions", "[", "image_path", "]", "=", "preds", "\n", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.remove_models": [[764, 775], ["os.path.join", "os.listdir", "face_align.appdata_dir", "os.path.join", "os.path.isfile", "print", "os.unlink", "print"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.appdata_dir"], ["", "@", "staticmethod", "\n", "def", "remove_models", "(", "self", ")", ":", "\n", "        ", "base_path", "=", "os", ".", "path", ".", "join", "(", "appdata_dir", "(", "'face_alignment'", ")", ",", "\"data\"", ")", "\n", "for", "data_model", "in", "os", ".", "listdir", "(", "base_path", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "data_model", ")", "\n", "try", ":", "\n", "                ", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "                    ", "print", "(", "'Removing '", "+", "data_model", "+", "' ...'", ")", "\n", "os", ".", "unlink", "(", "file_path", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align._gaussian": [[23, 47], ["numpy.empty", "range", "range", "numpy.sum", "math.exp", "math.pow", "math.pow"], "function", ["None"], ["def", "_gaussian", "(", "\n", "size", "=", "3", ",", "sigma", "=", "0.25", ",", "amplitude", "=", "1", ",", "normalize", "=", "False", ",", "width", "=", "None", ",", "\n", "height", "=", "None", ",", "sigma_horz", "=", "None", ",", "sigma_vert", "=", "None", ",", "mean_horz", "=", "0.5", ",", "\n", "mean_vert", "=", "0.5", ")", ":", "\n", "# handle some defaults", "\n", "    ", "if", "width", "is", "None", ":", "\n", "        ", "width", "=", "size", "\n", "", "if", "height", "is", "None", ":", "\n", "        ", "height", "=", "size", "\n", "", "if", "sigma_horz", "is", "None", ":", "\n", "        ", "sigma_horz", "=", "sigma", "\n", "", "if", "sigma_vert", "is", "None", ":", "\n", "        ", "sigma_vert", "=", "sigma", "\n", "", "center_x", "=", "mean_horz", "*", "width", "+", "0.5", "\n", "center_y", "=", "mean_vert", "*", "height", "+", "0.5", "\n", "gauss", "=", "np", ".", "empty", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# generate kernel", "\n", "for", "i", "in", "range", "(", "height", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "width", ")", ":", "\n", "            ", "gauss", "[", "i", "]", "[", "j", "]", "=", "amplitude", "*", "math", ".", "exp", "(", "-", "(", "math", ".", "pow", "(", "(", "j", "+", "1", "-", "center_x", ")", "/", "(", "\n", "sigma_horz", "*", "width", ")", ",", "2", ")", "/", "2.0", "+", "math", ".", "pow", "(", "(", "i", "+", "1", "-", "center_y", ")", "/", "(", "sigma_vert", "*", "height", ")", ",", "2", ")", "/", "2.0", ")", ")", "\n", "", "", "if", "normalize", ":", "\n", "        ", "gauss", "=", "gauss", "/", "np", ".", "sum", "(", "gauss", ")", "\n", "", "return", "gauss", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.draw_gaussian": [[49, 69], ["face_align._gaussian", "math.floor", "math.floor", "math.floor", "math.floor", "int", "int", "int", "int", "int", "int", "max", "int", "max", "int", "max", "min", "max", "min", "int", "int", "max", "int", "int", "max", "min", "max", "min", "max"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align._gaussian"], ["", "def", "draw_gaussian", "(", "image", ",", "point", ",", "sigma", ")", ":", "\n", "# Check if the gaussian is inside", "\n", "    ", "ul", "=", "[", "math", ".", "floor", "(", "point", "[", "0", "]", "-", "3", "*", "sigma", ")", ",", "math", ".", "floor", "(", "point", "[", "1", "]", "-", "3", "*", "sigma", ")", "]", "\n", "br", "=", "[", "math", ".", "floor", "(", "point", "[", "0", "]", "+", "3", "*", "sigma", ")", ",", "math", ".", "floor", "(", "point", "[", "1", "]", "+", "3", "*", "sigma", ")", "]", "\n", "if", "(", "ul", "[", "0", "]", ">", "image", ".", "shape", "[", "1", "]", "or", "ul", "[", "1", "]", ">", "\n", "image", ".", "shape", "[", "0", "]", "or", "br", "[", "0", "]", "<", "1", "or", "br", "[", "1", "]", "<", "1", ")", ":", "\n", "        ", "return", "image", "\n", "", "size", "=", "6", "*", "sigma", "+", "1", "\n", "g", "=", "_gaussian", "(", "size", ")", "\n", "g_x", "=", "[", "int", "(", "max", "(", "1", ",", "-", "ul", "[", "0", "]", ")", ")", ",", "int", "(", "min", "(", "br", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", ")", "-", "\n", "int", "(", "max", "(", "1", ",", "ul", "[", "0", "]", ")", ")", "+", "int", "(", "max", "(", "1", ",", "-", "ul", "[", "0", "]", ")", ")", "]", "\n", "g_y", "=", "[", "int", "(", "max", "(", "1", ",", "-", "ul", "[", "1", "]", ")", ")", ",", "int", "(", "min", "(", "br", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ")", "-", "\n", "int", "(", "max", "(", "1", ",", "ul", "[", "1", "]", ")", ")", "+", "int", "(", "max", "(", "1", ",", "-", "ul", "[", "1", "]", ")", ")", "]", "\n", "img_x", "=", "[", "int", "(", "max", "(", "1", ",", "ul", "[", "0", "]", ")", ")", ",", "int", "(", "min", "(", "br", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", ")", "]", "\n", "img_y", "=", "[", "int", "(", "max", "(", "1", ",", "ul", "[", "1", "]", ")", ")", ",", "int", "(", "min", "(", "br", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ")", "]", "\n", "assert", "(", "g_x", "[", "0", "]", ">", "0", "and", "g_y", "[", "1", "]", ">", "0", ")", "\n", "image", "[", "img_y", "[", "0", "]", "-", "1", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", "-", "1", ":", "img_x", "[", "1", "]", "\n", "]", "=", "image", "[", "img_y", "[", "0", "]", "-", "1", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", "-", "1", ":", "img_x", "[", "1", "]", "]", "+", "g", "[", "g_y", "[", "0", "]", "-", "1", ":", "g_y", "[", "1", "]", ",", "g_x", "[", "0", "]", "-", "1", ":", "g_x", "[", "1", "]", "]", "\n", "image", "[", "image", ">", "1", "]", "=", "1", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.transform": [[71, 105], ["torch.ones", "torch.ones", "torch.ones", "torch.eye", "torch.eye", "torch.eye", "new_point.int", "torch.inverse", "torch.inverse", "torch.inverse", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "transform", "(", "point", ",", "center", ",", "scale", ",", "resolution", ",", "invert", "=", "False", ")", ":", "\n", "    ", "\"\"\"Generate and affine transformation matrix.\n\n    Given a set of points, a center, a scale and a targer resolution, the\n    function generates and affine transformation matrix. If invert is ``True``\n    it will produce the inverse transformation.\n\n    Arguments:\n        point {torch.tensor} -- the input 2D point\n        center {torch.tensor or numpy.array} -- the center around which to perform the transformations\n        scale {float} -- the scale of the face/object\n        resolution {float} -- the output resolution\n\n    Keyword Arguments:\n        invert {bool} -- define wherever the function should produce the direct or the\n        inverse transformation matrix (default: {False})\n    \"\"\"", "\n", "_pt", "=", "torch", ".", "ones", "(", "3", ")", "\n", "_pt", "[", "0", "]", "=", "point", "[", "0", "]", "\n", "_pt", "[", "1", "]", "=", "point", "[", "1", "]", "\n", "\n", "h", "=", "200.0", "*", "scale", "\n", "t", "=", "torch", ".", "eye", "(", "3", ")", "\n", "t", "[", "0", ",", "0", "]", "=", "resolution", "/", "h", "\n", "t", "[", "1", ",", "1", "]", "=", "resolution", "/", "h", "\n", "t", "[", "0", ",", "2", "]", "=", "resolution", "*", "(", "-", "center", "[", "0", "]", "/", "h", "+", "0.5", ")", "\n", "t", "[", "1", ",", "2", "]", "=", "resolution", "*", "(", "-", "center", "[", "1", "]", "/", "h", "+", "0.5", ")", "\n", "\n", "if", "invert", ":", "\n", "        ", "t", "=", "torch", ".", "inverse", "(", "t", ")", "\n", "\n", "", "new_point", "=", "(", "torch", ".", "matmul", "(", "t", ",", "_pt", ")", ")", "[", "0", ":", "2", "]", "\n", "\n", "return", "new_point", ".", "int", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.crop": [[107, 145], ["face_align.transform", "face_align.transform", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "cv2.resize", "cv2.resize", "numpy.array", "numpy.zeros", "numpy.array", "numpy.zeros", "max", "max", "max", "min", "max", "min", "min", "min", "int", "int"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.transform", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.transform"], ["", "def", "crop", "(", "image", ",", "center", ",", "scale", ",", "resolution", "=", "256.0", ")", ":", "\n", "    ", "\"\"\"Center crops an image or set of heatmaps\n\n    Arguments:\n        image {numpy.array} -- an rgb image\n        center {numpy.array} -- the center of the object, usually the same as of the bounding box\n        scale {float} -- scale of the face\n\n    Keyword Arguments:\n        resolution {float} -- the size of the output cropped image (default: {256.0})\n\n    Returns:\n        [type] -- [description]\n    \"\"\"", "# Crop around the center point", "\n", "\"\"\" Crops the image around the center. Input is expected to be an np.ndarray \"\"\"", "\n", "ul", "=", "transform", "(", "[", "1", ",", "1", "]", ",", "center", ",", "scale", ",", "resolution", ",", "True", ")", "\n", "br", "=", "transform", "(", "[", "resolution", ",", "resolution", "]", ",", "center", ",", "scale", ",", "resolution", ",", "True", ")", "\n", "# pad = math.ceil(torch.norm((ul - br).float()) / 2.0 - (br[0] - ul[0]) / 2.0)", "\n", "if", "image", ".", "ndim", ">", "2", ":", "\n", "        ", "newDim", "=", "np", ".", "array", "(", "[", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ",", "br", "[", "0", "]", "-", "ul", "[", "0", "]", ",", "\n", "image", ".", "shape", "[", "2", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "newImg", "=", "np", ".", "zeros", "(", "newDim", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "newDim", "=", "np", ".", "array", "(", "[", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ",", "br", "[", "0", "]", "-", "ul", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "newImg", "=", "np", ".", "zeros", "(", "newDim", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "ht", "=", "image", ".", "shape", "[", "0", "]", "\n", "wd", "=", "image", ".", "shape", "[", "1", "]", "\n", "newX", "=", "np", ".", "array", "(", "\n", "[", "max", "(", "1", ",", "-", "ul", "[", "0", "]", "+", "1", ")", ",", "min", "(", "br", "[", "0", "]", ",", "wd", ")", "-", "ul", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "newY", "=", "np", ".", "array", "(", "\n", "[", "max", "(", "1", ",", "-", "ul", "[", "1", "]", "+", "1", ")", ",", "min", "(", "br", "[", "1", "]", ",", "ht", ")", "-", "ul", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "oldX", "=", "np", ".", "array", "(", "[", "max", "(", "1", ",", "ul", "[", "0", "]", "+", "1", ")", ",", "min", "(", "br", "[", "0", "]", ",", "wd", ")", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "oldY", "=", "np", ".", "array", "(", "[", "max", "(", "1", ",", "ul", "[", "1", "]", "+", "1", ")", ",", "min", "(", "br", "[", "1", "]", ",", "ht", ")", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "newImg", "[", "newY", "[", "0", "]", "-", "1", ":", "newY", "[", "1", "]", ",", "newX", "[", "0", "]", "-", "1", ":", "newX", "[", "1", "]", "\n", "]", "=", "image", "[", "oldY", "[", "0", "]", "-", "1", ":", "oldY", "[", "1", "]", ",", "oldX", "[", "0", "]", "-", "1", ":", "oldX", "[", "1", "]", ",", ":", "]", "\n", "newImg", "=", "cv2", ".", "resize", "(", "newImg", ",", "dsize", "=", "(", "int", "(", "resolution", ")", ",", "int", "(", "resolution", ")", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "return", "newImg", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.get_preds_fromhm": [[147, 186], ["torch.max", "torch.max", "torch.max", "idx.view().repeat().float", "preds[].apply_", "preds[].add_().div_().floor_().add_", "range", "idx.view().repeat().float.add_", "torch.zeros", "torch.zeros", "torch.zeros", "hm.view", "idx.view().repeat().float.size", "range", "idx.view().repeat().float.size", "range", "hm.size", "hm.size", "idx.view().repeat", "preds[].add_().div_().floor_", "idx.view().repeat().float.size", "hm.size", "range", "hm.size", "hm.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "preds[].add_", "hm.size", "face_align.transform", "idx.view", "hm.size", "preds[].add_().div_", "int", "int", "torch.FloatTensor.sign_().mul_", "hm.size", "idx.size", "idx.size", "hm.size", "preds[].add_", "torch.FloatTensor.sign_"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.transform"], ["", "def", "get_preds_fromhm", "(", "hm", ",", "center", "=", "None", ",", "scale", "=", "None", ")", ":", "\n", "    ", "\"\"\"Obtain (x,y) coordinates given a set of N heatmaps. If the center\n    and the scale is provided the function will return the points also in\n    the original coordinate frame.\n\n    Arguments:\n        hm {torch.tensor} -- the predicted heatmaps, of shape [B, N, W, H]\n\n    Keyword Arguments:\n        center {torch.tensor} -- the center of the bounding box (default: {None})\n        scale {float} -- face scale (default: {None})\n    \"\"\"", "\n", "max", ",", "idx", "=", "torch", ".", "max", "(", "\n", "hm", ".", "view", "(", "hm", ".", "size", "(", "0", ")", ",", "hm", ".", "size", "(", "1", ")", ",", "hm", ".", "size", "(", "2", ")", "*", "hm", ".", "size", "(", "3", ")", ")", ",", "2", ")", "\n", "idx", "+=", "1", "\n", "preds", "=", "idx", ".", "view", "(", "idx", ".", "size", "(", "0", ")", ",", "idx", ".", "size", "(", "1", ")", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "preds", "[", "...", ",", "0", "]", ".", "apply_", "(", "lambda", "x", ":", "(", "x", "-", "1", ")", "%", "hm", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "preds", "[", "...", ",", "1", "]", ".", "add_", "(", "-", "1", ")", ".", "div_", "(", "hm", ".", "size", "(", "2", ")", ")", ".", "floor_", "(", ")", ".", "add_", "(", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "preds", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "preds", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "hm_", "=", "hm", "[", "i", ",", "j", ",", ":", "]", "\n", "pX", ",", "pY", "=", "int", "(", "preds", "[", "i", ",", "j", ",", "0", "]", ")", "-", "1", ",", "int", "(", "preds", "[", "i", ",", "j", ",", "1", "]", ")", "-", "1", "\n", "if", "pX", ">", "0", "and", "pX", "<", "63", "and", "pY", ">", "0", "and", "pY", "<", "63", ":", "\n", "                ", "diff", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "hm_", "[", "pY", ",", "pX", "+", "1", "]", "-", "hm_", "[", "pY", ",", "pX", "-", "1", "]", ",", "\n", "hm_", "[", "pY", "+", "1", ",", "pX", "]", "-", "hm_", "[", "pY", "-", "1", ",", "pX", "]", "]", ")", "\n", "preds", "[", "i", ",", "j", "]", ".", "add_", "(", "diff", ".", "sign_", "(", ")", ".", "mul_", "(", ".25", ")", ")", "\n", "\n", "", "", "", "preds", ".", "add_", "(", "-", ".5", ")", "\n", "\n", "preds_orig", "=", "torch", ".", "zeros", "(", "preds", ".", "size", "(", ")", ")", "\n", "if", "center", "is", "not", "None", "and", "scale", "is", "not", "None", ":", "\n", "        ", "for", "i", "in", "range", "(", "hm", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "hm", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "preds_orig", "[", "i", ",", "j", "]", "=", "transform", "(", "\n", "preds", "[", "i", ",", "j", "]", ",", "center", ",", "scale", ",", "hm", ".", "size", "(", "2", ")", ",", "True", ")", "\n", "\n", "", "", "", "return", "preds", ",", "preds_orig", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.shuffle_lr": [[188, 211], ["parts.ndimension"], "function", ["None"], ["", "def", "shuffle_lr", "(", "parts", ",", "pairs", "=", "None", ")", ":", "\n", "    ", "\"\"\"Shuffle the points left-right according to the axis of symmetry\n    of the object.\n\n    Arguments:\n        parts {torch.tensor} -- a 3D or 4D object containing the\n        heatmaps.\n\n    Keyword Arguments:\n        pairs {list of integers} -- [order of the flipped points] (default: {None})\n    \"\"\"", "\n", "if", "pairs", "is", "None", ":", "\n", "        ", "pairs", "=", "[", "16", ",", "15", ",", "14", ",", "13", ",", "12", ",", "11", ",", "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1", ",", "0", ",", "\n", "26", ",", "25", ",", "24", ",", "23", ",", "22", ",", "21", ",", "20", ",", "19", ",", "18", ",", "17", ",", "27", ",", "28", ",", "29", ",", "30", ",", "35", ",", "\n", "34", ",", "33", ",", "32", ",", "31", ",", "45", ",", "44", ",", "43", ",", "42", ",", "47", ",", "46", ",", "39", ",", "38", ",", "37", ",", "36", ",", "41", ",", "\n", "40", ",", "54", ",", "53", ",", "52", ",", "51", ",", "50", ",", "49", ",", "48", ",", "59", ",", "58", ",", "57", ",", "56", ",", "55", ",", "64", ",", "63", ",", "\n", "62", ",", "61", ",", "60", ",", "67", ",", "66", ",", "65", "]", "\n", "", "if", "parts", ".", "ndimension", "(", ")", "==", "3", ":", "\n", "        ", "parts", "=", "parts", "[", "pairs", ",", "...", "]", "\n", "", "else", ":", "\n", "        ", "parts", "=", "parts", "[", ":", ",", "pairs", ",", "...", "]", "\n", "\n", "", "return", "parts", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.flip": [[213, 231], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "shuffle_lr().flip", "tensor.flip.flip", "face_align.shuffle_lr", "tensor.flip.ndimension", "tensor.flip.ndimension"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.flip", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.flip", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.shuffle_lr"], ["", "def", "flip", "(", "tensor", ",", "is_label", "=", "False", ")", ":", "\n", "    ", "\"\"\"Flip an image or a set of heatmaps left-right\n\n    Arguments:\n        tensor {numpy.array or torch.tensor} -- [the input image or heatmaps]\n\n    Keyword Arguments:\n        is_label {bool} -- [denote wherever the input is an image or a set of heatmaps ] (default: {False})\n    \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "tensor", ")", ":", "\n", "        ", "tensor", "=", "torch", ".", "from_numpy", "(", "tensor", ")", "\n", "\n", "", "if", "is_label", ":", "\n", "        ", "tensor", "=", "shuffle_lr", "(", "tensor", ")", ".", "flip", "(", "tensor", ".", "ndimension", "(", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "tensor", "=", "tensor", ".", "flip", "(", "tensor", ".", "ndimension", "(", ")", "-", "1", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.appdata_dir": [[235, 290], ["os.getenv", "sys.platform.startswith", "getattr", "os.path.expanduser", "sys.platform.startswith", "os.path.abspath", "os.path.abspath", "os.path.isdir", "os.path.join", "os.path.isdir", "os.getenv", "os.getenv", "os.path.join", "os.path.isdir", "os.path.dirname", "os.path.join", "os.path.isdir", "os.mkdir", "open().close", "os.remove", "appname.lstrip", "os.path.join", "open", "os.path.join"], "function", ["None"], ["", "def", "appdata_dir", "(", "appname", "=", "None", ",", "roaming", "=", "False", ")", ":", "\n", "    ", "\"\"\" appdata_dir(appname=None, roaming=False)\n\n    Get the path to the application directory, where applications are allowed\n    to write user specific files (e.g. configurations). For non-user specific\n    data, consider using common_appdata_dir().\n    If appname is given, a subdir is appended (and created if necessary).\n    If roaming is True, will prefer a roaming directory (Windows Vista/7).\n    \"\"\"", "\n", "\n", "# Define default user directory", "\n", "userDir", "=", "os", ".", "getenv", "(", "'FACEALIGNMENT_USERDIR'", ",", "None", ")", "\n", "if", "userDir", "is", "None", ":", "\n", "        ", "userDir", "=", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "userDir", ")", ":", "# pragma: no cover", "\n", "            ", "userDir", "=", "'/var/tmp'", "# issue #54", "\n", "\n", "# Get system app data dir", "\n", "", "", "path", "=", "None", "\n", "if", "sys", ".", "platform", ".", "startswith", "(", "'win'", ")", ":", "\n", "        ", "path1", ",", "path2", "=", "os", ".", "getenv", "(", "'LOCALAPPDATA'", ")", ",", "os", ".", "getenv", "(", "'APPDATA'", ")", "\n", "path", "=", "(", "path2", "or", "path1", ")", "if", "roaming", "else", "(", "path1", "or", "path2", ")", "\n", "", "elif", "sys", ".", "platform", ".", "startswith", "(", "'darwin'", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "userDir", ",", "'Library'", ",", "'Application Support'", ")", "\n", "# On Linux and as fallback", "\n", "", "if", "not", "(", "path", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ")", ":", "\n", "        ", "path", "=", "userDir", "\n", "\n", "# Maybe we should store things local to the executable (in case of a", "\n", "# portable distro or a frozen application that wants to be portable)", "\n", "", "prefix", "=", "sys", ".", "prefix", "\n", "if", "getattr", "(", "sys", ",", "'frozen'", ",", "None", ")", ":", "\n", "        ", "prefix", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "sys", ".", "executable", ")", ")", "\n", "", "for", "reldir", "in", "(", "'settings'", ",", "'../settings'", ")", ":", "\n", "        ", "localpath", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "prefix", ",", "reldir", ")", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "localpath", ")", ":", "# pragma: no cover", "\n", "            ", "try", ":", "\n", "                ", "open", "(", "os", ".", "path", ".", "join", "(", "localpath", ",", "'test.write'", ")", ",", "'wb'", ")", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "localpath", ",", "'test.write'", ")", ")", "\n", "", "except", "IOError", ":", "\n", "                ", "pass", "# We cannot write in this directory", "\n", "", "else", ":", "\n", "                ", "path", "=", "localpath", "\n", "break", "\n", "\n", "# Get path specific for this app", "\n", "", "", "", "if", "appname", ":", "\n", "        ", "if", "path", "==", "userDir", ":", "\n", "            ", "appname", "=", "'.'", "+", "appname", ".", "lstrip", "(", "'.'", ")", "# Make it a hidden directory", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "appname", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "# pragma: no cover", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "\n", "# Done", "\n", "", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.conv3x3": [[292, 296], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "strd", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "strd", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.demo_preprocessor.get_duration": [[31, 38], ["subprocess.run", "float"], "function", ["None"], ["def", "get_duration", "(", "filename", ")", ":", "\n", "    ", "result", "=", "subprocess", ".", "run", "(", "[", "\"ffprobe\"", ",", "\"-v\"", ",", "\"error\"", ",", "\"-show_entries\"", ",", "\n", "\"format=duration\"", ",", "\"-of\"", ",", "\n", "\"default=noprint_wrappers=1:nokey=1\"", ",", "filename", "]", ",", "\n", "stdout", "=", "subprocess", ".", "PIPE", ",", "\n", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "return", "float", "(", "result", ".", "stdout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.demo_preprocessor.get_progress_points": [[40, 45], ["int", "int", "numpy.linspace"], "function", ["None"], ["", "def", "get_progress_points", "(", "length", ",", "num_points", "=", "4", ",", "fps", "=", "25", ")", ":", "\n", "    ", "approx_num_frames", "=", "int", "(", "length", "*", "fps", ")", "\n", "first_point", "=", "int", "(", "approx_num_frames", "/", "(", "num_points", "+", "1", ")", ")", "\n", "points", "=", "np", ".", "linspace", "(", "first_point", ",", "approx_num_frames", ",", "num_points", "+", "1", ")", "[", ":", "-", "1", "]", "\n", "return", "points", ",", "approx_num_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.demo_preprocessor.draw_bounding_boxes": [[47, 52], ["matplotlib.imshow", "matplotlib.patches.Rectangle", "matplotlib.axes().add_patch", "matplotlib.show", "matplotlib.axes"], "function", ["None"], ["", "def", "draw_bounding_boxes", "(", "frame", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ":", "\n", "    ", "plt", ".", "imshow", "(", "frame", ")", "\n", "rect", "=", "Rectangle", "(", "(", "x1", ",", "y1", ")", ",", "(", "x2", "-", "x1", ")", ",", "(", "y2", "-", "y1", ")", ",", "fill", "=", "False", ",", "color", "=", "'red'", ")", "\n", "plt", ".", "axes", "(", ")", ".", "add_patch", "(", "rect", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.demo_preprocessor.visualize_frames": [[54, 65], ["facenet_pytorch.MTCNN", "mmcv.VideoReader", "facenet_pytorch.MTCNN.detect", "demo_preprocessor.draw_bounding_boxes", "PIL.Image.fromarray", "cv2.cvtColor"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.demo_preprocessor.draw_bounding_boxes"], ["", "def", "visualize_frames", "(", "video_path", ",", "device", ")", ":", "\n", "# FOR NOW, Just to visualize bounding boxes", "\n", "# device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')", "\n", "    ", "mtcnn", "=", "MTCNN", "(", "keep_all", "=", "True", ",", "device", "=", "device", ")", "\n", "video", "=", "mmcv", ".", "VideoReader", "(", "video_path", ")", "\n", "frames", "=", "[", "Image", ".", "fromarray", "(", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "for", "frame", "in", "video", "[", ":", "10", "]", "]", "\n", "# Detect faces", "\n", "frame", "=", "frames", "[", "-", "1", "]", "\n", "boxes", ",", "_", "=", "mtcnn", ".", "detect", "(", "frame", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "boxes", "[", "0", "]", "\n", "draw_bounding_boxes", "(", "frame", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.demo_preprocessor.crop_bbox_zones": [[67, 72], ["subprocess.call", "str", "str", "str", "str"], "function", ["None"], ["", "def", "crop_bbox_zones", "(", "sample_path", ",", "dest_path", ",", "coordinates", ")", ":", "\n", "    ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "coordinates", "\n", "subprocess", ".", "call", "(", "[", "'ffmpeg'", ",", "'-i'", ",", "sample_path", ",", "'-filter:v'", ",", "\n", "'crop='", "+", "str", "(", "x2", "-", "x1", ")", "+", "':'", "+", "str", "(", "y2", "-", "y1", ")", "+", "':'", "+", "str", "(", "x1", ")", "+", "':'", "+", "str", "(", "y1", ")", ",", "\n", "'-c:a'", ",", "'copy'", ",", "dest_path", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.demo_preprocessor.crop_faces": [[74, 95], ["print", "len", "tqdm.tqdm", "range", "d[].strip().split", "os.path.join", "json.loads", "enumerate", "d[].strip", "float", "float", "os.path.join", "str.replace", "os.path.exists", "demo_preprocessor.crop_bbox_zones", "str", "str.replace", "str"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.demo_preprocessor.crop_bbox_zones"], ["", "def", "crop_faces", "(", "demos_data", ",", "sample_dir_path", ")", ":", "\n", "    ", "print", "(", "\"Cropping faces of interest from the video segments... \"", ")", "\n", "num_rows", "=", "len", "(", "demos_data", ")", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "num_rows", ")", ",", "desc", "=", "\"# samples processed for face cropping\"", ",", "total", "=", "num_rows", ")", ":", "\n", "        ", "d", "=", "demos_data", "[", "idx", "]", "\n", "face_ids", "=", "d", "[", "'Face_IDs'", "]", ".", "strip", "(", "']['", ")", ".", "split", "(", "','", ")", "\n", "if", "not", "face_ids", "==", "''", ":", "\n", "            ", "video_id", "=", "d", "[", "'ID'", "]", "\n", "init", ",", "fin", "=", "float", "(", "d", "[", "'Init'", "]", ")", ",", "float", "(", "d", "[", "'Fin'", "]", ")", "\n", "\n", "input_file_name", "=", "video_id", "+", "'_'", "+", "str", ".", "replace", "(", "str", "(", "init", ")", ",", "'.'", ",", "'_'", ")", "+", "'_to_'", "+", "str", ".", "replace", "(", "\n", "str", "(", "fin", ")", ",", "'.'", ",", "'_'", ")", "+", "'.mp4'", "\n", "input_file_path", "=", "os", ".", "path", ".", "join", "(", "sample_dir_path", ",", "input_file_name", "[", ":", "-", "4", "]", ",", "input_file_name", ")", "\n", "\n", "face_cropped_coordinates", "=", "json", ".", "loads", "(", "d", "[", "'Face Crop Region'", "]", ")", "\n", "for", "idx", ",", "face_id", "in", "enumerate", "(", "face_ids", ")", ":", "\n", "                ", "output_path", "=", "os", ".", "path", ".", "join", "(", "sample_dir_path", ",", "input_file_name", "[", ":", "-", "4", "]", ",", "face_id", "+", "'.mp4'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "                    ", "crop_bbox_zones", "(", "sample_path", "=", "input_file_path", ",", "\n", "dest_path", "=", "output_path", ",", "\n", "coordinates", "=", "face_cropped_coordinates", "[", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.demo_preprocessor.input_face_embeddings": [[97, 131], ["torch.from_numpy", "frame_tensors.half.to", "frame_tensors.half.half", "torch.no_grad", "resnet", "emb.float.float", "frame_tensors.half.permute().float", "frame_tensors.half.permute"], "function", ["None"], ["", "", "", "", "", "def", "input_face_embeddings", "(", "frames", ":", "Union", "[", "List", "[", "str", "]", ",", "np", ".", "ndarray", "]", ",", "resnet", ":", "InceptionResnetV1", ",", "\n", "device", ":", "bool", ",", "use_half", ":", "bool", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n        Get the face embedding\n\n        NOTE: If a face is not detected by the detector,\n        instead of throwing an error it zeros the input\n        for embedder.\n\n        NOTE: Memory hungry function, hence the profiler.\n\n        Args:\n            frames: Frames from the video\n            is_path: Whether to read from filesystem or memory\n            resnet: face embedder\n            face_embed_cuda: use cuda for model\n            use_half: use half precision\n\n        Returns:\n            emb: Embedding for all input frames\n    \"\"\"", "\n", "# Stack all frames", "\n", "frame_tensors", "=", "torch", ".", "from_numpy", "(", "frames", ")", "\n", "del", "frames", "\n", "# Embed all frames", "\n", "frame_tensors", "=", "frame_tensors", ".", "to", "(", "device", ")", "\n", "if", "use_half", ":", "\n", "        ", "frame_tensors", "=", "frame_tensors", ".", "half", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "emb", "=", "resnet", "(", "frame_tensors", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", ")", "\n", "", "if", "use_half", ":", "\n", "        ", "emb", "=", "emb", ".", "float", "(", ")", "\n", "", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.demo_preprocessor.process_samples": [[133, 233], ["print", "face_processor.face_processor", "sorted", "len", "os.path.join", "os.makedirs", "tqdm.tqdm", "os.listdir", "range", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "os.listdir", "os.path.join", "os.path.join", "int", "glob.glob", "preproc.preprocess.extract_audio", "len", "os.listdir.remove", "os.path.join", "imageio.get_reader", "numpy.zeros", "numpy.zeros", "numpy.zeros", "demo_preprocessor.get_duration", "glob.glob", "glob.glob", "glob.glob", "tqdm.tqdm", "range", "numpy.save", "numpy.save", "os.path.join", "len", "torch.zeros", "range", "numpy.save", "os.path.join", "os.path.join", "os.path.join", "cv2.resize", "cv2.resize", "pbar.update", "os.path.join", "os.path.join", "int", "demo_preprocessor.input_face_embeddings", "torch.zeros.cpu().numpy", "imageio.get_reader.get_data", "cv2.resize", "numpy.asarray", "face_processor.face_processor.process_image", "face_processor.face_processor.process_image", "good_frame_ids.append", "print", "numpy.ceil", "print", "int", "print", "torch.zeros.cpu"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.extract_audio", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.demo_preprocessor.get_duration", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.input_face_embeddings", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.process_image", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.process_image"], ["", "def", "process_samples", "(", "samples_dir_path", ",", "splits_dir_path", ",", "device_id", ",", "mean_face", ",", "FPS", "=", "25", ")", ":", "\n", "    ", "print", "(", "\"Processing samples ... \"", ")", "\n", "fp", "=", "face_processor", "(", "gpu_id", "=", "device_id", ",", "mean_face", "=", "mean_face", ",", "ref_img", "=", "None", ",", "img_size", "=", "(", "244", ",", "224", ")", ")", "\n", "examples", "=", "sorted", "(", "os", ".", "listdir", "(", "samples_dir_path", ")", ")", "\n", "num_examples", "=", "len", "(", "examples", ")", "\n", "\n", "audio_path", "=", "os", ".", "path", ".", "join", "(", "splits_dir_path", ",", "'audio'", ")", "# all the face_cropped_samples have the same audio", "\n", "os", ".", "makedirs", "(", "audio_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "num_examples", ")", ",", "desc", "=", "\"# demo examples processed\"", ",", "total", "=", "num_examples", ")", ":", "\n", "        ", "sample_id", "=", "examples", "[", "idx", "]", "\n", "\n", "frames_path", "=", "os", ".", "path", ".", "join", "(", "splits_dir_path", ",", "'frames'", ",", "sample_id", ")", "\n", "os", ".", "makedirs", "(", "frames_path", ",", "exist_ok", "=", "True", ")", "\n", "llcp_embed_path", "=", "os", ".", "path", ".", "join", "(", "splits_dir_path", ",", "'llcp_embed'", ",", "sample_id", ")", "\n", "os", ".", "makedirs", "(", "llcp_embed_path", ",", "exist_ok", "=", "True", ")", "\n", "landmarks_path", "=", "os", ".", "path", ".", "join", "(", "splits_dir_path", ",", "'landmarks'", ",", "sample_id", ")", "\n", "os", ".", "makedirs", "(", "landmarks_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "sample_folder_path", "=", "os", ".", "path", ".", "join", "(", "samples_dir_path", ",", "sample_id", ")", "\n", "face_cropped_samples", "=", "os", ".", "listdir", "(", "sample_folder_path", ")", "\n", "dest_audio_file_path", "=", "os", ".", "path", ".", "join", "(", "audio_path", ",", "sample_id", "+", "'.wav'", ")", "\n", "sample_file_path", "=", "os", ".", "path", ".", "join", "(", "sample_folder_path", ",", "sample_id", "+", "'.mp4'", ")", "\n", "num_frames", "=", "int", "(", "get_duration", "(", "sample_file_path", ")", "*", "FPS", ")", "\n", "if", "not", "glob", ".", "glob", "(", "dest_audio_file_path", ")", ":", "\n", "            ", "extract_audio", "(", "sample_file_path", ",", "dest_audio_file_path", ")", "\n", "\n", "", "if", "len", "(", "face_cropped_samples", ")", ">", "1", ":", "\n", "            ", "face_cropped_samples", ".", "remove", "(", "sample_id", "+", "'.mp4'", ")", "\n", "\n", "", "for", "face_cropped_sample", "in", "face_cropped_samples", ":", "\n", "            ", "face_cropped_sample_name", "=", "face_cropped_sample", "[", ":", "-", "4", "]", "\n", "if", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "splits_dir_path", ",", "\"frames\"", ",", "sample_id", ",", "face_cropped_sample_name", "+", "'*'", ")", ")", "and", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "splits_dir_path", ",", "\"llcp_embed\"", ",", "sample_id", ",", "face_cropped_sample_name", "+", "'*'", ")", ")", "and", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "splits_dir_path", ",", "\"landmarks\"", ",", "sample_id", ",", "face_cropped_sample_name", "+", "'*'", ")", ")", ":", "\n", "                ", "continue", "\n", "", "face_cropped_sample_path", "=", "os", ".", "path", ".", "join", "(", "sample_folder_path", ",", "face_cropped_sample", ")", "\n", "vid", "=", "imageio", ".", "get_reader", "(", "face_cropped_sample_path", ",", "'ffmpeg'", ")", "\n", "stacked_frames", "=", "np", ".", "zeros", "(", "[", "num_frames", ",", "128", ",", "96", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "stacked_llcp_input_frames", "=", "np", ".", "zeros", "(", "[", "num_frames", ",", "160", ",", "160", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "stacked_landmarks", "=", "np", ".", "zeros", "(", "[", "num_frames", ",", "68", ",", "2", "]", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "good_frame_ids", "=", "[", "]", "\n", "with", "tqdm", "(", "total", "=", "num_frames", ")", "as", "pbar", ":", "\n", "                ", "for", "num_frame", "in", "range", "(", "num_frames", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "img_raw", "=", "vid", ".", "get_data", "(", "num_frame", ")", "\n", "", "except", "IndexError", "as", "e", ":", "\n", "                        ", "print", "(", "\"Processing FAILED for face: \"", "+", "face_cropped_sample_name", "+", "\"from \"", "+", "sample_id", ")", "\n", "break", "\n", "", "if", "img_raw", ".", "shape", "[", "1", "]", ">=", "MAX_IMAGE_WIDTH", ":", "\n", "                        ", "asp_ratio", "=", "img_raw", ".", "shape", "[", "0", "]", "/", "img_raw", ".", "shape", "[", "1", "]", "\n", "dim", "=", "(", "MAX_IMAGE_WIDTH", ",", "int", "(", "MAX_IMAGE_WIDTH", "*", "asp_ratio", ")", ")", "\n", "new_img", "=", "cv2", ".", "resize", "(", "img_raw", ",", "dim", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "img", "=", "np", ".", "asarray", "(", "new_img", ")", "\n", "", "else", ":", "\n", "                        ", "img", "=", "img_raw", "\n", "", "try", ":", "\n", "                        ", "warped_img", ",", "landmarks", ",", "bbox", "=", "fp", ".", "process_image", "(", "img", ")", "\n", "_", ",", "aligned_landmarks", ",", "_", "=", "fp", ".", "process_image", "(", "warped_img", ")", "\n", "good_frame_ids", ".", "append", "(", "num_frame", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "print", "(", "\"Exception Handled: \"", ",", "e", ")", "\n", "continue", "\n", "\n", "", "if", "warped_img", "is", "None", ":", "\n", "                        ", "print", "(", "\"NONE TYPE RETURNED\"", ")", "\n", "continue", "\n", "\n", "", "img_frame", "=", "warped_img", "[", ":", "crop_height", ",", ":", "crop_width", ",", ":", "]", "# h=244, w=224", "\n", "llcp_input_frame", "=", "cv2", ".", "resize", "(", "img_frame", ",", "(", "160", ",", "160", ")", ")", "\n", "stacked_llcp_input_frames", "[", "num_frame", "]", "=", "llcp_input_frame", "\n", "img_frame_resized", "=", "cv2", ".", "resize", "(", "img_frame", ",", "(", "96", ",", "128", ")", ")", "\n", "stacked_frames", "[", "num_frame", "]", "=", "img_frame_resized", "\n", "aligned_landmarks_resized", "=", "aligned_landmarks", "*", "[", "96", "/", "crop_width", ",", "128", "/", "crop_height", "]", "\n", "stacked_landmarks", "[", "num_frame", "]", "=", "aligned_landmarks_resized", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "frames_path", ",", "face_cropped_sample_name", ")", ",", "stacked_frames", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "landmarks_path", ",", "face_cropped_sample_name", ")", ",", "stacked_landmarks", ")", "\n", "\n", "del", "warped_img", ",", "landmarks", ",", "bbox", ",", "vid", ",", "stacked_frames", ",", "stacked_landmarks", "\n", "\n", "# extract and dump llcp embeddings", "\n", "embed_file_path", "=", "os", ".", "path", ".", "join", "(", "llcp_embed_path", ",", "face_cropped_sample_name", "+", "'.npy'", ")", "\n", "num_frames", "=", "len", "(", "stacked_llcp_input_frames", ")", "\n", "chunk_length", "=", "100", "\n", "embeddings", "=", "torch", ".", "zeros", "(", "[", "num_frames", ",", "512", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "np", ".", "ceil", "(", "num_frames", "/", "chunk_length", ")", ")", ")", ":", "\n", "                    ", "start", "=", "i", "*", "chunk_length", "\n", "if", "start", "+", "chunk_length", ">", "num_frames", ":", "\n", "                        ", "end", "=", "num_frames", "\n", "", "else", ":", "\n", "                        ", "end", "=", "start", "+", "chunk_length", "\n", "", "embeddings", "[", "start", ":", "end", "]", "=", "input_face_embeddings", "(", "stacked_llcp_input_frames", "[", "start", ":", "end", "]", ",", "\n", "resnet", "=", "resnet", ",", "\n", "device", "=", "device_id", ",", "use_half", "=", "False", ")", "\n", "", "del", "stacked_llcp_input_frames", "\n", "np", ".", "save", "(", "embed_file_path", ",", "embeddings", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.__init__": [[16, 30], ["face_align.FaceAlignment", "str", "isinstance", "numpy.load", "numpy.load", "os.path.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean_face", "=", "None", ",", "ref_img", "=", "None", ",", "cuda", "=", "True", ",", "img_size", "=", "None", ",", "gpu_id", "=", "0", ")", ":", "\n", "        ", "device", "=", "'cuda:'", "+", "str", "(", "gpu_id", ")", "\n", "self", ".", "fa", "=", "FaceAlignment", "(", "LandmarksType", ".", "_2D", ",", "device", "=", "device", ",", "flip_input", "=", "False", ")", "\n", "self", ".", "ref_img", "=", "ref_img", "\n", "self", ".", "mean_face", "=", "None", "\n", "self", ".", "img_size", "=", "img_size", "\n", "if", "self", ".", "ref_img", "is", "None", ":", "\n", "            ", "if", "mean_face", "is", "not", "None", ":", "\n", "                ", "if", "isinstance", "(", "mean_face", ",", "str", ")", ":", "\n", "                    ", "self", ".", "mean_face", "=", "np", ".", "load", "(", "mean_face", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "mean_face", "=", "mean_face", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "mean_face", "=", "np", ".", "load", "(", "os", ".", "path", ".", "split", "(", "__file__", ")", "[", "0", "]", "+", "\"/data/mean_face.npy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.get_transform": [[31, 47], ["face_processor.face_processor.warp_img", "face_processor.face_processor.fa.get_landmarks", "print", "face_processor.face_processor.fa.get_landmarks"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.warp_img", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks"], ["", "", "", "def", "get_transform", "(", "self", ",", "image", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "landmarks", "=", "self", ".", "fa", ".", "get_landmarks", "(", "image", ")", "[", "0", "]", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "print", "(", "ex", ")", "\n", "return", "None", "\n", "\n", "", "stable_points", "=", "landmarks", "[", "stablePntsIDs", ",", ":", "]", "\n", "\n", "if", "self", ".", "mean_face", "is", "None", "and", "self", ".", "ref_img", "is", "not", "None", ":", "\n", "            ", "self", ".", "mean_face", "=", "self", ".", "fa", ".", "get_landmarks", "(", "self", ".", "ref_img", ")", "[", "0", "]", "\n", "\n", "", "warped_img", ",", "trans", "=", "self", ".", "warp_img", "(", "stable_points", ",", "\n", "self", ".", "mean_face", "[", "stablePntsIDs", ",", ":", "]", ",", "\n", "image", ")", "\n", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.process_image": [[48, 65], ["face_processor.face_processor.warp_img", "face_processor.face_processor.fa.get_landmarks", "face_processor.face_processor.fa.get_landmarks"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.warp_img", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks"], ["", "def", "process_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "landmarkset", "=", "self", ".", "fa", ".", "get_landmarks", "(", "image", ")", "\n", "landmarks", "=", "landmarkset", "[", "0", "]", "\n", "bbox", "=", "landmarkset", "[", "1", "]", "\n", "", "except", ":", "\n", "            ", "return", "None", "\n", "\n", "", "stable_points", "=", "landmarks", "[", "stablePntsIDs", ",", ":", "]", "\n", "\n", "if", "self", ".", "mean_face", "is", "None", "and", "self", ".", "ref_img", "is", "not", "None", ":", "\n", "            ", "self", ".", "mean_face", "=", "self", ".", "fa", ".", "get_landmarks", "(", "self", ".", "ref_img", ")", "[", "0", "]", "\n", "\n", "", "warped_img", ",", "trans", "=", "self", ".", "warp_img", "(", "stable_points", ",", "\n", "self", ".", "mean_face", "[", "stablePntsIDs", ",", ":", "]", ",", "\n", "image", ",", "output_shape", "=", "self", ".", "img_size", ")", "\n", "return", "warped_img", ",", "landmarks", ",", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.normalise_face": [[66, 123], ["isinstance", "list", "numpy.empty", "range", "skvideo.io.vread", "isinstance", "projected_landmarks.append", "face_processor.face_processor.fa.get_landmarks", "face_processor.face_processor.parse_landmarks_file", "numpy.zeros", "range", "face_processor.face_processor.warp_img", "face_processor.face_processor.apply_transform", "trans", "len", "face_processor.face_processor.append", "len", "face_processor.face_processor.append", "face_processor.face_processor.fa.get_landmarks", "face_processor.face_processor.fa.get_landmarks"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.parse_landmarks_file", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.warp_img", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.apply_transform", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks"], ["", "def", "normalise_face", "(", "self", ",", "video_input", ",", "landmarks_input", "=", "None", ",", "window_size", "=", "7", ")", ":", "\n", "\n", "        ", "if", "self", ".", "mean_face", "is", "None", "and", "self", ".", "ref_img", "is", "not", "None", ":", "\n", "            ", "self", ".", "mean_face", "=", "self", ".", "fa", ".", "get_landmarks", "(", "self", ".", "ref_img", ")", "[", "0", "]", "\n", "\n", "# Check if we should read from file", "\n", "", "if", "isinstance", "(", "video_input", ",", "str", ")", ":", "\n", "            ", "video", "=", "skvideo", ".", "io", ".", "vread", "(", "video_input", ")", "\n", "", "else", ":", "\n", "            ", "video", "=", "video_input", "\n", "\n", "", "if", "window_size", "%", "2", "==", "0", ":", "\n", "            ", "window_size", "+=", "1", "\n", "\n", "# If we have landmarks", "\n", "", "if", "landmarks_input", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "landmarks_input", ",", "str", ")", ":", "\n", "                ", "landmarks", "=", "self", ".", "parse_landmarks_file", "(", "landmarks_input", ")", "\n", "", "else", ":", "\n", "                ", "landmarks", "=", "landmarks_input", "\n", "", "", "else", ":", "\n", "            ", "landmarks", "=", "[", "]", "\n", "\n", "", "if", "video", ".", "shape", "[", "0", "]", "<", "window_size", "or", "(", "landmarks_input", "is", "not", "None", "and", "len", "(", "landmarks", ")", "==", "0", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "", "trans", "=", "None", "\n", "projected_landmarks", "=", "[", "]", "\n", "out_vid_size", "=", "list", "(", "video", ".", "shape", ")", "\n", "if", "self", ".", "img_size", "is", "not", "None", ":", "\n", "            ", "out_vid_size", "[", "1", "]", "=", "self", ".", "img_size", "[", "0", "]", "\n", "out_vid_size", "[", "2", "]", "=", "self", ".", "img_size", "[", "1", "]", "\n", "\n", "", "out_video", "=", "np", ".", "empty", "(", "out_vid_size", ")", "\n", "for", "frame_no", "in", "range", "(", "0", ",", "video", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "frame_no", "+", "window_size", "<=", "video", ".", "shape", "[", "0", "]", ":", "\n", "                ", "avg_stable_points", "=", "np", ".", "zeros", "(", "[", "len", "(", "stablePntsIDs", ")", ",", "2", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "window_size", ")", ":", "\n", "                    ", "if", "landmarks_input", "is", "None", ":", "\n", "                        ", "landmarks", ".", "append", "(", "self", ".", "fa", ".", "get_landmarks", "(", "video", "[", "frame_no", "+", "i", "]", ")", "[", "0", "]", ")", "\n", "avg_stable_points", "+=", "landmarks", "[", "-", "1", "]", "[", "stablePntsIDs", ",", ":", "]", "\n", "", "else", ":", "\n", "                        ", "avg_stable_points", "+=", "landmarks", "[", "frame_no", "+", "i", "]", "[", "stablePntsIDs", ",", ":", "]", "\n", "\n", "", "", "avg_stable_points", "/=", "window_size", "\n", "out_video", "[", "frame_no", "]", ",", "trans", "=", "self", ".", "warp_img", "(", "avg_stable_points", ",", "\n", "self", ".", "mean_face", "[", "stablePntsIDs", ",", ":", "]", ",", "\n", "video", "[", "frame_no", "]", ",", "output_shape", "=", "self", ".", "img_size", ")", "\n", "", "else", ":", "\n", "                ", "if", "landmarks_input", "is", "None", ":", "\n", "                    ", "landmarks", ".", "append", "(", "self", ".", "fa", ".", "get_landmarks", "(", "video", "[", "frame_no", "]", ")", "[", "0", "]", ")", "\n", "\n", "", "out_video", "[", "frame_no", "]", "=", "self", ".", "apply_transform", "(", "trans", ",", "video", "[", "frame_no", "]", ",", "output_shape", "=", "self", ".", "img_size", ")", "\n", "\n", "", "projected_landmarks", ".", "append", "(", "trans", "(", "landmarks", "[", "frame_no", "]", ")", ")", "\n", "\n", "", "return", "out_video", ",", "projected_landmarks", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.apply_transform": [[124, 130], ["skimage.transform.warp", "warped.astype.astype.astype"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "apply_transform", "(", "transform", ",", "img", ",", "output_shape", "=", "None", ")", ":", "\n", "        ", "warped", "=", "tf", ".", "warp", "(", "img", ",", "inverse_map", "=", "transform", ".", "inverse", ",", "output_shape", "=", "output_shape", ")", "\n", "warped", "=", "warped", "*", "255", "# note output from wrap is double image (value range [0,1])", "\n", "warped", "=", "warped", ".", "astype", "(", "'uint8'", ")", "\n", "return", "warped", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.warp_img": [[131, 138], ["skimage.transform.estimate_transform", "skimage.transform.warp", "warped.astype.astype.astype"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "warp_img", "(", "src", ",", "dst", ",", "img", ",", "output_shape", "=", "None", ")", ":", "\n", "        ", "tform", "=", "tf", ".", "estimate_transform", "(", "'similarity'", ",", "src", ",", "dst", ")", "# find the transformation matrix", "\n", "warped", "=", "tf", ".", "warp", "(", "img", ",", "inverse_map", "=", "tform", ".", "inverse", ",", "output_shape", "=", "output_shape", ")", "# wrap the frame image", "\n", "warped", "=", "warped", "*", "255", "# note output from wrap is double image (value range [0,1])", "\n", "warped", "=", "warped", ".", "astype", "(", "'uint8'", ")", "\n", "return", "warped", ",", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.draw_points": [[139, 155], ["range", "numpy.copy", "cv2.putText", "cv2.circle", "str", "int", "int", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "draw_points", "(", "image", ",", "points", ",", "tag", "=", "True", ",", "in_place", "=", "False", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", ":", "\n", "        ", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "\n", "if", "in_place", ":", "\n", "            ", "img", "=", "image", "\n", "", "else", ":", "\n", "            ", "img", "=", "np", ".", "copy", "(", "image", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "tag", ":", "\n", "                ", "cv2", ".", "putText", "(", "img", ",", "str", "(", "i", ")", ",", "(", "int", "(", "points", "[", "i", ",", "0", "]", ")", ",", "int", "(", "points", "[", "i", ",", "1", "]", ")", ")", ",", "font", ",", "0.23", ",", "color", ")", "\n", "", "else", ":", "\n", "                ", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "points", "[", "i", ",", "0", "]", ")", ",", "int", "(", "points", "[", "i", ",", "1", "]", ")", ")", ",", "1", ",", "color", ")", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.get_width_height": [[156, 164], ["face_processor.find_corners"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.find_corners"], ["", "@", "staticmethod", "\n", "def", "get_width_height", "(", "points", ")", ":", "\n", "        ", "tl_corner", ",", "br_corner", "=", "face_processor", ".", "find_corners", "(", "points", ")", "\n", "\n", "width", "=", "(", "br_corner", "-", "tl_corner", ")", "[", "0", "]", "\n", "height", "=", "(", "br_corner", "-", "tl_corner", ")", "[", "1", "]", "\n", "\n", "return", "width", ",", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.find_corners": [[165, 171], ["numpy.array", "numpy.array", "numpy.array.astype", "numpy.array.astype", "points[].min", "points[].min", "points[].max", "points[].max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "find_corners", "(", "points", ")", ":", "\n", "        ", "tl", "=", "np", ".", "array", "(", "[", "points", "[", ":", ",", "0", "]", ".", "min", "(", ")", ",", "points", "[", ":", ",", "1", "]", ".", "min", "(", ")", "]", ")", "\n", "br", "=", "np", ".", "array", "(", "[", "points", "[", ":", ",", "0", "]", ".", "max", "(", ")", ",", "points", "[", ":", ",", "1", "]", ".", "max", "(", ")", "]", ")", "\n", "\n", "return", "tl", ".", "astype", "(", "int", ")", ",", "br", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.get_frame_rate": [[172, 175], ["skvideo.io.ffprobe"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_frame_rate", "(", "video_file", ")", ":", "\n", "        ", "return", "skvideo", ".", "io", ".", "ffprobe", "(", "video_file", ")", "[", "\"video\"", "]", "[", "\"@r_frame_rate\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.parse_landmarks_file": [[176, 193], ["open", "csv.reader", "enumerate", "numpy.zeros", "range", "video_landmarks.append", "len", "int", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "parse_landmarks_file", "(", "landmarks_file", ")", ":", "\n", "        ", "video_landmarks", "=", "[", "]", "\n", "with", "open", "(", "landmarks_file", ",", "'rt'", ",", "encoding", "=", "\"ascii\"", ")", "as", "csvfile", ":", "\n", "            ", "csvreader", "=", "csv", ".", "reader", "(", "csvfile", ",", "delimiter", "=", "','", ")", "\n", "\n", "for", "frame_no", ",", "landmarks", "in", "enumerate", "(", "csvreader", ")", ":", "\n", "                ", "frame_landmarks", "=", "np", ".", "zeros", "(", "[", "68", ",", "2", "]", ")", "\n", "for", "point", "in", "range", "(", "1", ",", "len", "(", "landmarks", ")", ",", "2", ")", ":", "\n", "                    ", "frame_landmarks", "[", "point", "//", "2", ",", "0", "]", "=", "int", "(", "landmarks", "[", "point", "+", "1", "]", ")", "\n", "frame_landmarks", "[", "point", "//", "2", ",", "1", "]", "=", "int", "(", "landmarks", "[", "point", "]", ")", "\n", "\n", "if", "int", "(", "landmarks", "[", "point", "]", ")", "==", "-", "1", ":", "\n", "                        ", "return", "[", "]", "\n", "", "", "video_landmarks", ".", "append", "(", "frame_landmarks", ")", "\n", "\n", "", "", "return", "video_landmarks", ",", "landmarks", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.offset_mean_face": [[194, 203], ["face_processor.find_corners", "numpy.array", "int", "int"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.find_corners"], ["", "@", "staticmethod", "\n", "def", "offset_mean_face", "(", "mean_landmarks", ",", "offset_percentage", "=", "[", "0", ",", "0", "]", ")", ":", "\n", "        ", "tl_corner", ",", "br_corner", "=", "face_processor", ".", "find_corners", "(", "mean_landmarks", ")", "\n", "\n", "width", "=", "(", "br_corner", "-", "tl_corner", ")", "[", "0", "]", "\n", "height", "=", "(", "br_corner", "-", "tl_corner", ")", "[", "1", "]", "\n", "\n", "offset", "=", "np", ".", "array", "(", "[", "int", "(", "offset_percentage", "[", "0", "]", "*", "width", ")", ",", "int", "(", "offset_percentage", "[", "1", "]", "*", "height", ")", "]", ")", "\n", "return", "mean_landmarks", "-", "tl_corner", "+", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.find_mean_face": [[204, 221], ["numpy.zeros", "numpy.multiply", "face_processor.face_processor.offset_mean_face", "skvideo.io.vread", "range", "face_processor.face_processor.fa.get_landmarks"], "methods", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.offset_mean_face", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_align.FaceAlignment.get_landmarks"], ["", "def", "find_mean_face", "(", "self", ",", "files", ",", "offset_percentage", "=", "[", "0", ",", "0", "]", ")", ":", "\n", "        ", "mean_landmarks", "=", "np", ".", "zeros", "(", "[", "68", ",", "2", "]", ")", "\n", "number_of_faces", "=", "0", "\n", "for", "video_file", "in", "files", ":", "\n", "            ", "video", "=", "skvideo", ".", "io", ".", "vread", "(", "video_file", ")", "\n", "for", "frame_no", "in", "range", "(", "0", ",", "video", ".", "shape", "[", "0", "]", ",", "10", ")", ":", "\n", "                ", "number_of_faces", "+=", "1", "\n", "mean_landmarks", "+=", "self", ".", "fa", ".", "get_landmarks", "(", "video", "[", "frame_no", "]", ")", "[", "0", "]", "\n", "\n", "", "if", "number_of_faces", "==", "1000", ":", "\n", "                ", "break", "\n", "\n", "", "", "mean_face", "=", "np", ".", "multiply", "(", "1", "/", "number_of_faces", ",", "mean_landmarks", ")", "\n", "\n", "self", ".", "mean_face", "=", "self", ".", "offset_mean_face", "(", "mean_face", ",", "offset_percentage", ")", "\n", "\n", "return", "self", ".", "mean_face", "", "", "", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.YouTubeDownloader.__init__": [[33, 42], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "outtmpl", "=", "'%(id)s.%(ext)s'", "\n", "self", ".", "ydl_opts", "=", "{", "\n", "'format'", ":", "'bestvideo+bestaudio'", ",", "\n", "'outtmpl'", ":", "self", ".", "outtmpl", ",", "\n", "'logger'", ":", "None", ",", "\n", "'fragment-retries'", ":", "10", ",", "\n", "'retries'", ":", "10", ",", "\n", "'abort-on-unavailable-fragment'", ":", "True", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.remove_file": [[26, 29], ["os.path.exists", "os.remove"], "function", ["None"], ["def", "remove_file", "(", "file_path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "        ", "os", ".", "remove", "(", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.download_videos": [[45, 78], ["print", "preprocess.YouTubeDownloader", "len", "tqdm.tqdm", "range", "glob.glob", "os.path.join", "os.path.join", "open", "json.dump", "youtube_dl.YoutubeDL", "os.path.join", "y.download", "os.path.dirname", "print", "fnmatch.filter", "list_of_removed_videos.append", "sys.exit", "os.listdir", "os.remove", "os.path.join"], "function", ["None"], ["", "", "def", "download_videos", "(", "full_dataset", ",", "video_dir_path", ",", "dump_unavailable", "=", "True", ")", ":", "\n", "    ", "print", "(", "\"VIDEO DOWNLOAD IN PROGRESS ... \"", ")", "\n", "list_of_removed_videos", "=", "[", "]", "\n", "ytd", "=", "YouTubeDownloader", "(", ")", "\n", "num_rows", "=", "len", "(", "full_dataset", ")", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "num_rows", ")", ",", "desc", "=", "\"[# VIDEOS DOWNLOADED]\"", ")", ":", "\n", "        ", "d", "=", "full_dataset", "[", "idx", "]", "\n", "video_id", "=", "d", "[", "'ID'", "]", "\n", "if", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "video_id", "+", "'*'", ")", ")", ":", "\n", "            ", "continue", "\n", "", "if", "d", "[", "'Link'", "]", "==", "''", "or", "d", "[", "'Link'", "]", "==", "\"youtube.com/watch?v=\"", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "link", "=", "'http://'", "+", "d", "[", "'Link'", "]", "\n", "ytd", ".", "ydl_opts", "[", "'outtmpl'", "]", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "ytd", ".", "outtmpl", ")", "\n", "with", "ydl", ".", "YoutubeDL", "(", "ytd", ".", "ydl_opts", ")", "as", "y", ":", "\n", "                ", "try", ":", "\n", "                    ", "y", ".", "download", "(", "[", "link", "]", ")", "\n", "", "except", "DownloadError", ":", "\n", "                    ", "print", "(", "'Process failed at video {0}, #{1}'", ".", "format", "(", "video_id", ",", "idx", ")", ")", "\n", "unwanted_fragments", "=", "fnmatch", ".", "filter", "(", "os", ".", "listdir", "(", "video_dir_path", ")", ",", "\n", "video_id", "+", "'*'", ")", "\n", "for", "frgmnt", "in", "unwanted_fragments", ":", "\n", "                        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "frgmnt", ")", ")", "\n", "", "list_of_removed_videos", ".", "append", "(", "video_id", ")", "\n", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "                    ", "sys", ".", "exit", "(", ")", "\n", "\n", "", "", "", "", "if", "dump_unavailable", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "video_dir_path", ")", ",", "'unavailable_videos.json'", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "{", "'unavailable videos'", ":", "list_of_removed_videos", "}", ",", "fp", ",", "indent", "=", "4", ")", "\n", "", "", "return", "list_of_removed_videos", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.extract_samples": [[80, 117], ["print", "len", "set", "tqdm.tqdm", "os.listdir", "range", "os.path.join", "int", "int", "glob.glob", "subprocess.Popen", "subprocess.Popen.stdout.read", "subprocess.Popen.stdout.read", "print", "fnmatch.filter", "float", "float", "os.path.join", "os.makedirs", "os.path.join", "os.path.join", "str", "str", "str", "result.stdout.read.decode", "str.replace", "str", "str.replace", "str", "file_name.split"], "function", ["None"], ["", "def", "extract_samples", "(", "full_dataset", ",", "samples_dir_path", ",", "video_download_dir_path", ",", "list_of_removed_videos", ",", "\n", "is_demo_sample", "=", "False", ",", "FPS", "=", "25", ")", ":", "\n", "    ", "print", "(", "\"Extracting samples from videos ... \"", ")", "\n", "num_rows", "=", "len", "(", "full_dataset", ")", "\n", "full_length_video_ids", "=", "set", "(", "os", ".", "listdir", "(", "video_download_dir_path", ")", ")", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "num_rows", ")", ",", "desc", "=", "\"# samples extracted\"", ",", "total", "=", "num_rows", ")", ":", "\n", "        ", "d", "=", "full_dataset", "[", "idx", "]", "\n", "video_id", "=", "d", "[", "'ID'", "]", "\n", "if", "d", "[", "'Link'", "]", "==", "''", "or", "d", "[", "'Link'", "]", "==", "\"youtube.com/watch?v=\"", ":", "\n", "            ", "continue", "\n", "", "elif", "video_id", "in", "list_of_removed_videos", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "file_name", "=", "fnmatch", ".", "filter", "(", "full_length_video_ids", ",", "video_id", "+", "'*'", ")", "[", "0", "]", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "video_download_dir_path", ",", "file_name", ")", "\n", "init", ",", "fin", "=", "float", "(", "d", "[", "'Init'", "]", ")", ",", "float", "(", "d", "[", "'Fin'", "]", ")", "\n", "begin", "=", "int", "(", "(", "init", "//", "1", ")", "*", "60", "+", "(", "init", "%", "1", ")", "*", "100", ")", "\n", "end", "=", "int", "(", "(", "fin", "//", "1", ")", "*", "60", "+", "(", "fin", "%", "1", ")", "*", "100", ")", "\n", "duration", "=", "end", "-", "begin", "\n", "\n", "output_file_name", "=", "file_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_'", "+", "str", ".", "replace", "(", "str", "(", "init", ")", ",", "'.'", ",", "'_'", ")", "+", "'_to_'", "+", "str", ".", "replace", "(", "\n", "str", "(", "fin", ")", ",", "'.'", ",", "'_'", ")", "+", "'.mp4'", "\n", "if", "is_demo_sample", ":", "\n", "                ", "output_file_dir", "=", "os", ".", "path", ".", "join", "(", "samples_dir_path", ",", "output_file_name", "[", ":", "-", "4", "]", ")", "\n", "os", ".", "makedirs", "(", "output_file_dir", ",", "exist_ok", "=", "True", ")", "\n", "output_file_path", "=", "os", ".", "path", ".", "join", "(", "output_file_dir", ",", "output_file_name", ")", "\n", "", "else", ":", "\n", "                ", "output_file_path", "=", "os", ".", "path", ".", "join", "(", "samples_dir_path", ",", "output_file_name", ")", "\n", "\n", "", "if", "glob", ".", "glob", "(", "output_file_path", ")", ":", "\n", "                ", "continue", "\n", "", "output_options", "=", "[", "'-ss'", ",", "str", "(", "begin", ")", ",", "'-strict'", ",", "'-2'", ",", "'-t'", ",", "str", "(", "duration", ")", ",", "'-r'", ",", "str", "(", "FPS", ")", "]", "\n", "result", "=", "subprocess", ".", "Popen", "(", "[", "\"ffmpeg\"", ",", "'-i'", ",", "file_path", ",", "*", "output_options", ",", "output_file_path", "]", ",", "\n", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "stdout", "=", "result", ".", "stdout", ".", "read", "(", ")", "\n", "stderr", "=", "result", ".", "stdout", ".", "read", "(", ")", "\n", "print", "(", "stdout", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.input_face_embeddings": [[119, 151], ["torch.from_numpy", "frame_tensors.half.to", "frame_tensors.half.half", "torch.no_grad", "resnet", "emb.float.float", "frame_tensors.half.permute().float", "frame_tensors.half.permute"], "function", ["None"], ["", "", "", "def", "input_face_embeddings", "(", "frames", ":", "Union", "[", "List", "[", "str", "]", ",", "np", ".", "ndarray", "]", ",", "resnet", ":", "InceptionResnetV1", ",", "\n", "device", ":", "bool", ",", "use_half", ":", "bool", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n        Get the face embedding\n\n        NOTE: If a face is not detected by the detector,\n        instead of throwing an error it zeros the input\n        for embedder.\n\n        Args:\n            frames: Frames from the video\n            is_path: Whether to read from filesystem or memory\n            resnet: face embedder\n            face_embed_cuda: use cuda for model\n            use_half: use half precision\n\n        Returns:\n            emb: Embedding for all input frames\n    \"\"\"", "\n", "# Stack all frames", "\n", "frame_tensors", "=", "torch", ".", "from_numpy", "(", "frames", ")", "\n", "del", "frames", "\n", "# Embed all frames", "\n", "frame_tensors", "=", "frame_tensors", ".", "to", "(", "device", ")", "\n", "if", "use_half", ":", "\n", "        ", "frame_tensors", "=", "frame_tensors", ".", "half", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "emb", "=", "resnet", "(", "frame_tensors", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", ")", "\n", "", "if", "use_half", ":", "\n", "        ", "emb", "=", "emb", ".", "float", "(", ")", "\n", "", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.extract_audio": [[153, 155], ["flerken.video.utils.apply_single", "list"], "function", ["None"], ["", "def", "extract_audio", "(", "org", ",", "dst", ")", ":", "\n", "    ", "apply_single", "(", "org", ",", "dst", ",", "output_options", "=", "[", "'-ac'", ",", "'1'", ",", "'-ar'", ",", "'16384'", "]", ",", "input_options", "=", "list", "(", ")", ",", "ext", "=", "'.wav'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.process_samples": [[157, 271], ["print", "len", "acappella_info.get_splits_by_subset", "face_processor.face_processor", "tqdm.tqdm", "range", "int", "int", "int", "os.path.join", "acappella_info.get_splits_by_subset.keys", "imageio.get_reader", "os.path.join", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "numpy.zeros", "numpy.zeros", "numpy.zeros", "float", "float", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "preprocess.extract_audio", "tqdm.tqdm", "range", "numpy.save", "numpy.save", "os.path.join", "len", "torch.zeros", "range", "numpy.save", "str.replace", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "cv2.resize", "cv2.resize", "pbar.update", "os.path.join", "os.path.join", "int", "preprocess.input_face_embeddings", "torch.zeros.cpu().numpy", "str", "language.lower", "gender.lower", "imageio.get_reader.get_data", "cv2.resize", "numpy.asarray", "face_processor.face_processor.process_image", "face_processor.face_processor.process_image", "good_frame_ids.append", "print", "numpy.ceil", "str.replace", "print", "int", "print", "torch.zeros.cpu", "str"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.extract_audio", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.models.__init__.ModelConstructor.update", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.preprocess.input_face_embeddings", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.process_image", "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.preproc.face_processor.face_processor.process_image"], ["", "def", "process_samples", "(", "full_dataset", ",", "samples_dir_path", ",", "splits_dir_path", ",", "list_of_removed_videos", ",", "device_id", ",", "mean_face", ",", "\n", "FPS", "=", "25", ")", ":", "\n", "    ", "print", "(", "\"Processing samples ... \"", ")", "\n", "num_rows", "=", "len", "(", "full_dataset", ")", "\n", "splits_dictionary", "=", "acappella_info", ".", "get_splits_by_subset", "(", ")", "\n", "fp", "=", "face_processor", "(", "gpu_id", "=", "device_id", ",", "mean_face", "=", "mean_face", ",", "ref_img", "=", "None", ",", "img_size", "=", "(", "244", ",", "224", ")", ")", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "num_rows", ")", ",", "desc", "=", "\"# samples processed\"", ",", "total", "=", "num_rows", ")", ":", "\n", "        ", "d", "=", "full_dataset", "[", "idx", "]", "\n", "video_id", "=", "d", "[", "'ID'", "]", "\n", "language", "=", "d", "[", "'Language'", "]", "\n", "if", "language", "not", "in", "[", "'English'", ",", "'Hindi'", ",", "'Spanish'", "]", ":", "\n", "            ", "language", "=", "'Others'", "\n", "", "gender", "=", "d", "[", "'Gender'", "]", "\n", "if", "d", "[", "'Link'", "]", "==", "''", "or", "d", "[", "'Link'", "]", "==", "\"youtube.com/watch?v=\"", ":", "\n", "            ", "continue", "\n", "", "elif", "video_id", "in", "list_of_removed_videos", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "init", ",", "fin", "=", "float", "(", "d", "[", "'Init'", "]", ")", ",", "float", "(", "d", "[", "'Fin'", "]", ")", "\n", "begin", "=", "int", "(", "(", "init", "//", "1", ")", "*", "60", "+", "(", "init", "%", "1", ")", "*", "100", ")", "\n", "end", "=", "int", "(", "(", "fin", "//", "1", ")", "*", "60", "+", "(", "fin", "%", "1", ")", "*", "100", ")", "\n", "duration", "=", "end", "-", "begin", "\n", "num_frames", "=", "int", "(", "duration", "*", "FPS", ")", "\n", "\n", "file_name", "=", "video_id", "+", "'_'", "+", "str", ".", "replace", "(", "str", "(", "init", ")", ",", "'.'", ",", "'_'", ")", "+", "'_to_'", "+", "str", ".", "replace", "(", "str", "(", "fin", ")", ",", "'.'", ",", "'_'", ")", "+", "'.mp4'", "\n", "sample_file_path", "=", "os", ".", "path", ".", "join", "(", "samples_dir_path", ",", "file_name", ")", "\n", "sample_id", "=", "file_name", "[", ":", "-", "4", "]", "\n", "\n", "if", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "splits_dir_path", ",", "\"*\"", ",", "\"frames\"", ",", "\"*\"", ",", "\"*\"", ",", "sample_id", "+", "'*'", ")", ")", "and", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "splits_dir_path", ",", "\"*\"", ",", "\"llcp_embed\"", ",", "\"*\"", ",", "\"*\"", ",", "sample_id", "+", "'*'", ")", ")", "and", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "splits_dir_path", ",", "\"*\"", ",", "\"audio\"", ",", "\"*\"", ",", "\"*\"", ",", "sample_id", "+", "'*'", ")", ")", "and", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "splits_dir_path", ",", "\"*\"", ",", "\"landmarks\"", ",", "\"*\"", ",", "\"*\"", ",", "sample_id", "+", "'*'", ")", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "for", "key", "in", "splits_dictionary", ".", "keys", "(", ")", ":", "\n", "                ", "if", "sample_id", "in", "splits_dictionary", "[", "key", "]", ":", "\n", "                    ", "splits_category", "=", "key", "\n", "break", "\n", "", "", "if", "splits_category", "==", "'test_unseen'", ":", "\n", "                ", "splits_category", "=", "'_'", ".", "join", "(", "[", "splits_category", ",", "language", ".", "lower", "(", ")", ",", "gender", ".", "lower", "(", ")", "]", ")", "\n", "", "vid", "=", "imageio", ".", "get_reader", "(", "sample_file_path", ",", "'ffmpeg'", ")", "\n", "splits_folder_path", "=", "os", ".", "path", ".", "join", "(", "splits_dir_path", ",", "splits_category", ")", "\n", "frames_path", "=", "os", ".", "path", ".", "join", "(", "splits_folder_path", ",", "'frames'", ",", "language", ",", "gender", ")", "\n", "os", ".", "makedirs", "(", "frames_path", ",", "exist_ok", "=", "True", ")", "\n", "audio_path", "=", "os", ".", "path", ".", "join", "(", "splits_folder_path", ",", "'audio'", ",", "language", ",", "gender", ")", "\n", "os", ".", "makedirs", "(", "audio_path", ",", "exist_ok", "=", "True", ")", "\n", "llcp_embed_path", "=", "os", ".", "path", ".", "join", "(", "splits_folder_path", ",", "'llcp_embed'", ",", "language", ",", "gender", ")", "\n", "os", ".", "makedirs", "(", "llcp_embed_path", ",", "exist_ok", "=", "True", ")", "\n", "landmarks_path", "=", "os", ".", "path", ".", "join", "(", "splits_folder_path", ",", "'landmarks'", ",", "language", ",", "gender", ")", "\n", "os", ".", "makedirs", "(", "landmarks_path", ",", "exist_ok", "=", "True", ")", "\n", "audio_file_path", "=", "os", ".", "path", ".", "join", "(", "audio_path", ",", "sample_id", "+", "'.wav'", ")", "\n", "if", "not", "glob", ".", "glob", "(", "audio_file_path", ")", ":", "\n", "                ", "extract_audio", "(", "sample_file_path", ",", "audio_file_path", ")", "\n", "\n", "", "stacked_frames", "=", "np", ".", "zeros", "(", "[", "num_frames", ",", "128", ",", "96", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "stacked_llcp_input_frames", "=", "np", ".", "zeros", "(", "[", "num_frames", ",", "160", ",", "160", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "stacked_landmarks", "=", "np", ".", "zeros", "(", "[", "num_frames", ",", "68", ",", "2", "]", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "good_frame_ids", "=", "[", "]", "\n", "with", "tqdm", "(", "total", "=", "num_frames", ")", "as", "pbar", ":", "\n", "                ", "for", "num_frame", "in", "range", "(", "num_frames", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "img_raw", "=", "vid", ".", "get_data", "(", "num_frame", ")", "\n", "", "except", "IndexError", "as", "e", ":", "\n", "                        ", "print", "(", "\"Processing FAILED for sample: \"", "+", "sample_id", ")", "\n", "break", "\n", "", "if", "img_raw", ".", "shape", "[", "1", "]", ">=", "MAX_IMAGE_WIDTH", ":", "\n", "                        ", "asp_ratio", "=", "img_raw", ".", "shape", "[", "0", "]", "/", "img_raw", ".", "shape", "[", "1", "]", "\n", "dim", "=", "(", "MAX_IMAGE_WIDTH", ",", "int", "(", "MAX_IMAGE_WIDTH", "*", "asp_ratio", ")", ")", "\n", "new_img", "=", "cv2", ".", "resize", "(", "img_raw", ",", "dim", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "img", "=", "np", ".", "asarray", "(", "new_img", ")", "\n", "", "else", ":", "\n", "                        ", "img", "=", "img_raw", "\n", "", "try", ":", "\n", "                        ", "warped_img", ",", "landmarks", ",", "bbox", "=", "fp", ".", "process_image", "(", "img", ")", "\n", "_", ",", "aligned_landmarks", ",", "_", "=", "fp", ".", "process_image", "(", "warped_img", ")", "\n", "good_frame_ids", ".", "append", "(", "num_frame", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "print", "(", "\"Exception Handled: \"", ",", "e", ")", "\n", "continue", "\n", "\n", "", "if", "warped_img", "is", "None", ":", "\n", "                        ", "print", "(", "\"NONE TYPE RETURNED\"", ")", "\n", "continue", "\n", "\n", "", "img_frame", "=", "warped_img", "[", ":", "crop_height", ",", ":", "crop_width", ",", ":", "]", "\n", "llcp_input_frame", "=", "cv2", ".", "resize", "(", "img_frame", ",", "(", "160", ",", "160", ")", ")", "\n", "stacked_llcp_input_frames", "[", "num_frame", "]", "=", "llcp_input_frame", "\n", "img_frame_resized", "=", "cv2", ".", "resize", "(", "img_frame", ",", "(", "96", ",", "128", ")", ")", "\n", "stacked_frames", "[", "num_frame", "]", "=", "img_frame_resized", "\n", "aligned_landmarks_resized", "=", "aligned_landmarks", "*", "[", "96", "/", "crop_width", ",", "128", "/", "crop_height", "]", "\n", "stacked_landmarks", "[", "num_frame", "]", "=", "aligned_landmarks_resized", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "frames_path", ",", "sample_id", ")", ",", "stacked_frames", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "landmarks_path", ",", "sample_id", ")", ",", "stacked_landmarks", ")", "\n", "del", "warped_img", ",", "landmarks", ",", "bbox", ",", "vid", ",", "stacked_frames", ",", "stacked_landmarks", "\n", "\n", "# extract and dump llcp embeddings", "\n", "embed_file_path", "=", "os", ".", "path", ".", "join", "(", "llcp_embed_path", ",", "sample_id", "+", "'.npy'", ")", "\n", "num_frames", "=", "len", "(", "stacked_llcp_input_frames", ")", "\n", "chunk_length", "=", "100", "\n", "embeddings", "=", "torch", ".", "zeros", "(", "[", "num_frames", ",", "512", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "np", ".", "ceil", "(", "num_frames", "/", "chunk_length", ")", ")", ")", ":", "\n", "                    ", "start", "=", "i", "*", "chunk_length", "\n", "if", "start", "+", "chunk_length", ">", "num_frames", ":", "\n", "                        ", "end", "=", "num_frames", "\n", "", "else", ":", "\n", "                        ", "end", "=", "start", "+", "chunk_length", "\n", "", "embeddings", "[", "start", ":", "end", "]", "=", "input_face_embeddings", "(", "stacked_llcp_input_frames", "[", "start", ":", "end", "]", ",", "\n", "resnet", "=", "resnet", ",", "\n", "device", "=", "device_id", ",", "use_half", "=", "False", ")", "\n", "", "del", "stacked_llcp_input_frames", "\n", "np", ".", "save", "(", "embed_file_path", ",", "embeddings", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.testing_scripts.auto_metrics.plot_2sa_unseen_by_model": [[12, 37], ["seaborn.set_theme", "subset.iterrows", "model.replace.replace().replace().replace().replace().replace", "model.replace.replace", "numpy.vstack", "matplotlib.figure", "seaborn.scatterplot", "matplotlib.axhline", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.text", "matplotlib.show", "subset[].isnull", "scipy.stats.gaussian_kde", "model.replace.replace().replace().replace().replace", "model.replace.replace().replace().replace", "model.replace.replace().replace", "model.replace.replace"], "function", ["None"], ["def", "plot_2sa_unseen_by_model", "(", "summary", ")", ":", "\n", "    ", "sns", ".", "set_theme", "(", "style", "=", "\"darkgrid\"", ")", "\n", "subset", "=", "summary", "[", "summary", "[", "'n_voices'", "]", "==", "'2sa'", "]", "\n", "subset", "=", "subset", "[", "subset", "[", "'subset'", "]", "==", "'test_unseen'", "]", "\n", "subset", "=", "subset", "[", "subset", "[", "'lang'", "]", ".", "isnull", "(", ")", "]", "# No language, thus, test_unseen_mixed", "\n", "Z_MAX", "=", "30", "\n", "for", "(", "idx", ",", "model_row", ")", "in", "subset", ".", "iterrows", "(", ")", ":", "\n", "        ", "model", "=", "model_row", ".", "net_type", "\n", "model", "=", "model", ".", "replace", "(", "'5'", ",", "''", ")", ".", "replace", "(", "'7'", ",", "''", ")", ".", "replace", "(", "'_'", ",", "'-'", ")", ".", "replace", "(", "'y'", ",", "'Y'", ")", ".", "replace", "(", "'net'", ",", "'Net'", ")", "\n", "model", "=", "model", ".", "replace", "(", "'llcp'", ",", "'LLCP'", ")", "\n", "isdr", "=", "model_row", ".", "isdr", "\n", "input_sdr", "=", "model_row", ".", "input_sdr", "\n", "xy", "=", "np", ".", "vstack", "(", "[", "input_sdr", ",", "isdr", "]", ")", "\n", "z", "=", "gaussian_kde", "(", "xy", ")", "(", "xy", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "sns", ".", "scatterplot", "(", "x", "=", "input_sdr", ",", "y", "=", "isdr", ",", "c", "=", "z", ",", "cmap", "=", "'coolwarm'", ")", "\n", "# sns.histplot(x=input_sdr, y=isdr, bins=30, pthresh=.1, cmap='rocket_r')", "\n", "# sns.kdeplot(x=input_sdr, y=isdr, levels=5, color=\"rosybrown\", linewidths=1)", "\n", "plt", ".", "axhline", "(", "y", "=", "0", ",", "xmin", "=", "0", ",", "xmax", "=", "1", ",", "linestyle", "=", "'dashed'", ",", "label", "=", "'0 dBs line'", ",", "color", "=", "'fuchsia'", ")", "\n", "plt", ".", "title", "(", "f'{model}'", ")", "\n", "plt", ".", "xlabel", "(", "'Input SDR (dB)'", ")", "\n", "plt", ".", "ylabel", "(", "'SDR improvements (dB)'", ")", "\n", "plt", ".", "text", "(", "-", "16", ",", "0.4", ",", "'0 dBs line'", ",", "color", "=", "'fuchsia'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.demo_samples.__init__.download_gg": [[4, 6], ["os.system"], "function", ["None"], ["from", ".", "trainer", "import", "Trainer", "\n", "from", ".", "utils", ".", "loss", "import", "MultiTaskLoss", "\n", ""]], "home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.demo_samples.__init__.jacksons_five_full": [[8, 11], ["__init__.download_gg", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.JuanFMontesinos_Acappella-YNet.demo_samples.__init__.download_gg"], []]}