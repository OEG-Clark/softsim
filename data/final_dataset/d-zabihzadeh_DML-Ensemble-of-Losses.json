{"home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.Angular_mc_loss.__init__": [[13, 18], ["torch.nn.Module.__init__", "numpy.deg2rad", "numpy.tan"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "45", ",", "in_degree", "=", "True", ")", ":", "\n", "        ", "super", "(", "Angular_mc_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_degree", ":", "\n", "            ", "alpha", "=", "np", ".", "deg2rad", "(", "alpha", ")", "\n", "", "self", ".", "sq_tan_alpha", "=", "np", ".", "tan", "(", "alpha", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.Angular_mc_loss.forward": [[19, 39], ["Losses.Angular_mc_loss.get_n_pairs", "n_pairs.cuda.cuda.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "Losses.Angular_mc_loss.n_pair_mc_loss", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "len"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.N_pair_loss.get_n_pairs", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.Angular_mc_loss.n_pair_mc_loss"], ["", "def", "forward", "(", "self", ",", "embeddings", ",", "target", ",", "with_npair", "=", "False", ",", "lamb", "=", "2", ")", ":", "\n", "        ", "n_pairs", "=", "self", ".", "get_n_pairs", "(", "target", ")", "\n", "if", "(", "len", "(", "n_pairs", ")", "==", "0", ")", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "0.0", ",", "requires_grad", "=", "True", ")", "\n", "", "n_pairs", "=", "n_pairs", ".", "cuda", "(", ")", "\n", "f", "=", "embeddings", "[", "n_pairs", "[", ":", ",", "0", "]", "]", "\n", "f_p", "=", "embeddings", "[", "n_pairs", "[", ":", ",", "1", "]", "]", "\n", "# print(f, f_p)", "\n", "term1", "=", "4", "*", "self", ".", "sq_tan_alpha", "*", "torch", ".", "matmul", "(", "f", "+", "f_p", ",", "torch", ".", "transpose", "(", "f_p", ",", "0", ",", "1", ")", ")", "\n", "term2", "=", "2", "*", "(", "1", "+", "self", ".", "sq_tan_alpha", ")", "*", "torch", ".", "sum", "(", "f", "*", "f_p", ",", "keepdim", "=", "True", ",", "dim", "=", "1", ")", "\n", "f_apn", "=", "term1", "-", "term2", "\n", "mask", "=", "torch", ".", "ones_like", "(", "f_apn", ")", "-", "torch", ".", "eye", "(", "len", "(", "f", ")", ")", ".", "cuda", "(", ")", "\n", "f_apn", "=", "f_apn", "*", "mask", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "logsumexp", "(", "f_apn", ",", "dim", "=", "1", ")", ")", "\n", "if", "with_npair", ":", "\n", "            ", "loss_npair", "=", "self", ".", "n_pair_mc_loss", "(", "f", ",", "f_p", ")", "\n", "# print(loss, loss_npair)", "\n", "loss", "=", "loss_npair", "+", "lamb", "*", "loss", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.Angular_mc_loss.get_n_pairs": [[40, 58], ["labels.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "set", "numpy.array", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.random.choice", "numpy.array.append", "numpy.where", "len", "labels.cpu().data.numpy.cpu().data.numpy.cpu"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_n_pairs", "(", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Get index of n-pairs and n-negatives\n        :param labels: label vector of mini-batch\n        :return: A tuple of n_pairs (n, 2)\n        \"\"\"", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "n_pairs", "=", "[", "]", "\n", "for", "label", "in", "set", "(", "labels", ")", ":", "\n", "            ", "label_mask", "=", "(", "labels", "==", "label", ")", "\n", "label_indices", "=", "np", ".", "where", "(", "label_mask", ")", "[", "0", "]", "\n", "if", "len", "(", "label_indices", ")", "<", "2", ":", "\n", "                ", "continue", "\n", "", "anchor", ",", "positive", "=", "np", ".", "random", ".", "choice", "(", "label_indices", ",", "2", ",", "replace", "=", "False", ")", "\n", "n_pairs", ".", "append", "(", "[", "anchor", ",", "positive", "]", ")", "\n", "", "n_pairs", "=", "np", ".", "array", "(", "n_pairs", ")", "\n", "return", "torch", ".", "LongTensor", "(", "n_pairs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.Angular_mc_loss.n_pair_mc_loss": [[59, 68], ["len", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "n_pair_mc_loss", "(", "f", ",", "f_p", ")", ":", "\n", "        ", "n_pairs", "=", "len", "(", "f", ")", "\n", "term1", "=", "torch", ".", "matmul", "(", "f", ",", "torch", ".", "transpose", "(", "f_p", ",", "0", ",", "1", ")", ")", "\n", "term2", "=", "torch", ".", "sum", "(", "f", "*", "f_p", ",", "keepdim", "=", "True", ",", "dim", "=", "1", ")", "\n", "f_apn", "=", "term1", "-", "term2", "\n", "mask", "=", "torch", ".", "ones_like", "(", "f_apn", ")", "-", "torch", ".", "eye", "(", "n_pairs", ")", ".", "cuda", "(", ")", "\n", "f_apn", "=", "f_apn", "*", "mask", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "logsumexp", "(", "f_apn", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.Trip_hinge_loss.__init__": [[71, 77], ["torch.nn.Module.__init__", "Miner.TripletMiner"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "margin", "=", "0.05", ",", "sim_flag", "=", "False", ",", "smooth_loss", "=", "False", ",", "type_of_triplets", "=", "'all'", ")", ":", "\n", "        ", "super", "(", "Trip_hinge_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "sim_flag", "=", "sim_flag", "\n", "self", ".", "smooth_loss", "=", "smooth_loss", "\n", "self", ".", "trip_miner", "=", "TripletMiner", "(", "margin", "=", ".1", ",", "type_of_triplets", "=", "type_of_triplets", ",", "sim_flag", "=", "sim_flag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.Trip_hinge_loss.forward": [[78, 94], ["Losses.Trip_hinge_loss.trip_miner.mine", "torch.relu", "torch.relu", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.relu.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "X_embed.t", "len"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Miner.TripletMiner.mine"], ["", "def", "forward", "(", "self", ",", "X_embed", ",", "y", ")", ":", "\n", "        ", "trip_indices", "=", "self", ".", "trip_miner", ".", "mine", "(", "X_embed", ",", "y", ")", "\n", "anchor_idx", ",", "positive_idx", ",", "negative_idx", "=", "trip_indices", "[", "0", "]", ",", "trip_indices", "[", "1", "]", ",", "trip_indices", "[", "2", "]", "\n", "if", "self", ".", "sim_flag", ":", "\n", "            ", "mat", "=", "torch", ".", "matmul", "(", "X_embed", ",", "X_embed", ".", "t", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "mat", "=", "torch", ".", "cdist", "(", "X_embed", ",", "X_embed", ")", "\n", "\n", "", "ap_dist", "=", "mat", "[", "anchor_idx", ",", "positive_idx", "]", "\n", "an_dist", "=", "mat", "[", "anchor_idx", ",", "negative_idx", "]", "\n", "triplet_margin", "=", "(", "\n", "ap_dist", "-", "an_dist", "if", "self", ".", "sim_flag", "else", "an_dist", "-", "ap_dist", "\n", ")", "\n", "loss", "=", "F", ".", "relu", "(", "self", ".", "margin", "-", "triplet_margin", ")", "\n", "\n", "return", "loss", ".", "mean", "(", ")", "if", "len", "(", "loss", ")", ">", "0", "else", "torch", ".", "tensor", "(", "0.0", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.N_pair_loss.__init__": [[101, 104], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l2_reg", "=", "0.02", ")", ":", "\n", "        ", "super", "(", "N_pair_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "l2_reg", "=", "l2_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.N_pair_loss.forward": [[105, 123], ["Losses.N_pair_loss.get_n_pairs", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "n_pairs.cuda.cuda.cuda", "n_negatives.cuda.cuda.cuda", "Losses.N_pair_loss.n_pair_loss", "Losses.N_pair_loss.l2_loss"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.N_pair_loss.get_n_pairs", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.N_pair_loss.n_pair_loss", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.N_pair_loss.l2_loss"], ["", "def", "forward", "(", "self", ",", "embeddings", ",", "target", ")", ":", "\n", "        ", "n_pairs", ",", "n_negatives", "=", "self", ".", "get_n_pairs", "(", "target", ")", "\n", "\n", "if", "(", "len", "(", "n_pairs", ")", "==", "0", ")", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "0.0", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "if", "embeddings", ".", "is_cuda", ":", "\n", "            ", "n_pairs", "=", "n_pairs", ".", "cuda", "(", ")", "\n", "n_negatives", "=", "n_negatives", ".", "cuda", "(", ")", "\n", "\n", "", "anchors", "=", "embeddings", "[", "n_pairs", "[", ":", ",", "0", "]", "]", "# (n, embedding_size)", "\n", "positives", "=", "embeddings", "[", "n_pairs", "[", ":", ",", "1", "]", "]", "# (n, embedding_size)", "\n", "negatives", "=", "embeddings", "[", "n_negatives", "]", "# (n, n-1, embedding_size)", "\n", "\n", "losses", "=", "self", ".", "n_pair_loss", "(", "anchors", ",", "positives", ",", "negatives", ")", "+", "self", ".", "l2_reg", "*", "self", ".", "l2_loss", "(", "anchors", ",", "positives", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.N_pair_loss.get_n_pairs": [[124, 153], ["labels.cpu().data.numpy.cpu().data.numpy.cpu().data.numpy", "set", "numpy.array", "range", "numpy.array", "numpy.random.choice", "numpy.array.append", "len", "numpy.concatenate", "numpy.array.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.where", "len", "labels.cpu().data.numpy.cpu().data.numpy.cpu"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_n_pairs", "(", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Get index of n-pairs and n-negatives\n        :param labels: label vector of mini-batch\n        :return: A tuple of n_pairs (n, 2)\n                        and n_negatives (n, n-1)\n        \"\"\"", "\n", "labels", "=", "labels", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "n_pairs", "=", "[", "]", "\n", "\n", "for", "label", "in", "set", "(", "labels", ")", ":", "\n", "            ", "label_mask", "=", "(", "labels", "==", "label", ")", "\n", "label_indices", "=", "np", ".", "where", "(", "label_mask", ")", "[", "0", "]", "\n", "if", "len", "(", "label_indices", ")", "<", "2", ":", "\n", "                ", "continue", "\n", "", "anchor", ",", "positive", "=", "np", ".", "random", ".", "choice", "(", "label_indices", ",", "2", ",", "replace", "=", "False", ")", "\n", "n_pairs", ".", "append", "(", "[", "anchor", ",", "positive", "]", ")", "\n", "\n", "", "n_pairs", "=", "np", ".", "array", "(", "n_pairs", ")", "\n", "\n", "n_negatives", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "n_pairs", ")", ")", ":", "\n", "            ", "negative", "=", "np", ".", "concatenate", "(", "[", "n_pairs", "[", ":", "i", ",", "1", "]", ",", "n_pairs", "[", "i", "+", "1", ":", ",", "1", "]", "]", ")", "\n", "n_negatives", ".", "append", "(", "negative", ")", "\n", "\n", "", "n_negatives", "=", "np", ".", "array", "(", "n_negatives", ")", "\n", "\n", "return", "torch", ".", "LongTensor", "(", "n_pairs", ")", ",", "torch", ".", "LongTensor", "(", "n_negatives", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.N_pair_loss.n_pair_loss": [[154, 170], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "n_pair_loss", "(", "anchors", ",", "positives", ",", "negatives", ")", ":", "\n", "        ", "\"\"\"\n        Calculates N-Pair loss\n        :param anchors: A torch.Tensor, (n, embedding_size)\n        :param positives: A torch.Tensor, (n, embedding_size)\n        :param negatives: A torch.Tensor, (n, n-1, embedding_size)\n        :return: A scalar\n        \"\"\"", "\n", "anchors", "=", "torch", ".", "unsqueeze", "(", "anchors", ",", "dim", "=", "1", ")", "# (n, 1, embedding_size)", "\n", "positives", "=", "torch", ".", "unsqueeze", "(", "positives", ",", "dim", "=", "1", ")", "# (n, 1, embedding_size)", "\n", "\n", "x", "=", "torch", ".", "matmul", "(", "anchors", ",", "(", "negatives", "-", "positives", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "# (n, 1, n-1)", "\n", "x", "=", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "x", ")", ",", "2", ")", "# (n, 1)", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "log", "(", "1", "+", "x", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.N_pair_loss.l2_loss": [[171, 180], ["torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "l2_loss", "(", "anchors", ",", "positives", ")", ":", "\n", "        ", "\"\"\"\n        Calculates L2 norm regularization loss\n        :param anchors: A torch.Tensor, (n, embedding_size)\n        :param positives: A torch.Tensor, (n, embedding_size)\n        :return: A scalar\n        \"\"\"", "\n", "return", "torch", ".", "sum", "(", "anchors", "**", "2", "+", "positives", "**", "2", ")", "/", "anchors", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.SoftTriple.__init__": [[183, 199], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cN", ",", "dim", ",", "la", "=", "20", ",", "gamma", "=", "0.1", ",", "tau", "=", "0.2", ",", "margin", "=", "0.01", ",", "K", "=", "3", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", ":", "\n", "        ", "super", "(", "SoftTriple", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "la", "=", "la", "\n", "self", ".", "gamma", "=", "1.", "/", "gamma", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "cN", "=", "cN", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "fc", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "dim", ",", "cN", "*", "K", ")", ")", "\n", "self", ".", "weight", "=", "torch", ".", "zeros", "(", "cN", "*", "K", ",", "cN", "*", "K", ",", "dtype", "=", "torch", ".", "bool", ")", ".", "cuda", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "for", "i", "in", "range", "(", "0", ",", "cN", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "K", ")", ":", "\n", "                ", "self", ".", "weight", "[", "i", "*", "K", "+", "j", ",", "i", "*", "K", "+", "j", "+", "1", ":", "(", "i", "+", "1", ")", "*", "K", "]", "=", "1", "\n", "", "", "init", ".", "kaiming_uniform_", "(", "self", ".", "fc", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.SoftTriple.forward": [[200, 215], ["torch.normalize", "torch.normalize", "input.matmul", "input.matmul.reshape", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cross_entropy", "torch.cross_entropy", "torch.normalize.t().matmul", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.normalize.t", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "centers", "=", "F", ".", "normalize", "(", "self", ".", "fc", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "\n", "simInd", "=", "input", ".", "matmul", "(", "centers", ")", "\n", "simStruc", "=", "simInd", ".", "reshape", "(", "-", "1", ",", "self", ".", "cN", ",", "self", ".", "K", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "simStruc", "*", "self", ".", "gamma", ",", "dim", "=", "2", ")", "\n", "simClass", "=", "torch", ".", "sum", "(", "prob", "*", "simStruc", ",", "dim", "=", "2", ")", "\n", "marginM", "=", "torch", ".", "zeros", "(", "simClass", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "marginM", "[", "torch", ".", "arange", "(", "0", ",", "marginM", ".", "shape", "[", "0", "]", ")", ",", "target", "]", "=", "self", ".", "margin", "\n", "lossClassify", "=", "F", ".", "cross_entropy", "(", "self", ".", "la", "*", "(", "simClass", "-", "marginM", ")", ",", "target", ")", "\n", "if", "self", ".", "tau", ">", "0", "and", "self", ".", "K", ">", "1", ":", "\n", "            ", "simCenter", "=", "centers", ".", "t", "(", ")", ".", "matmul", "(", "centers", ")", "\n", "reg", "=", "torch", ".", "sum", "(", "torch", ".", "sqrt", "(", "2.0", "+", "1e-5", "-", "2.", "*", "simCenter", "[", "self", ".", "weight", "]", ")", ")", "/", "(", "self", ".", "cN", "*", "self", ".", "K", "*", "(", "self", ".", "K", "-", "1.", ")", ")", "\n", "return", "lossClassify", "+", "self", ".", "tau", "*", "reg", "\n", "", "else", ":", "\n", "            ", "return", "lossClassify", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.ProxyNCA.__init__": [[232, 242], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nb_classes", ",", "sz_embedding", ",", "smoothing_const", "=", "0.1", ",", "scaling_x", "=", "1", ",", "scaling_p", "=", "3", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "# initialize proxies s.t. norm of each proxy ~1 through div by 8", "\n", "# i.e. proxies.norm(2, dim=1)) should be close to [1,1,...,1]", "\n", "# TODO: use norm instead of div 8, because of embedding size", "\n", "self", ".", "proxies", "=", "Parameter", "(", "torch", ".", "randn", "(", "nb_classes", ",", "sz_embedding", ")", "/", "8", ")", "\n", "# self.prev_proxies = self.proxies.cpu().data.numpy()", "\n", "self", ".", "smoothing_const", "=", "smoothing_const", "\n", "self", ".", "scaling_x", "=", "scaling_x", "\n", "self", ".", "scaling_p", "=", "scaling_p", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.ProxyNCA.forward": [[243, 251], ["Losses.binarize_and_smooth_labels", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.mean", "torch.sum.mean", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "len", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.binarize_and_smooth_labels"], ["", "def", "forward", "(", "self", ",", "X", ",", "T", ")", ":", "\n", "        ", "P", "=", "F", ".", "normalize", "(", "self", ".", "proxies", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "*", "self", ".", "scaling_p", "\n", "X", "=", "F", ".", "normalize", "(", "X", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "*", "self", ".", "scaling_x", "\n", "D", "=", "torch", ".", "cdist", "(", "X", ",", "P", ")", "**", "2", "\n", "T", "=", "binarize_and_smooth_labels", "(", "T", ",", "len", "(", "P", ")", ",", "self", ".", "smoothing_const", ")", "\n", "# note that compared to proxy nca, positive included in denominator", "\n", "loss", "=", "torch", ".", "sum", "(", "-", "T", "*", "F", ".", "log_softmax", "(", "-", "D", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.BinomialLoss.__init__": [[254, 260], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "25", ",", "beta", "=", "0", ",", "margin", "=", "0.5", ",", "hard_mining", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BinomialLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "hard_mining", "=", "hard_mining", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.BinomialLoss.forward": [[261, 309], ["inputs.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "list", "range", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "inputs.t", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "sum", "float", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "list.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "return_extra_info", "=", "False", ")", ":", "\n", "        ", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "sim_mat", "=", "torch", ".", "matmul", "(", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "targets", "=", "targets", "\n", "\n", "base", "=", "0.5", "\n", "loss", "=", "list", "(", ")", "\n", "c", "=", "0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "pos_pair_", "=", "torch", ".", "masked_select", "(", "sim_mat", "[", "i", "]", ",", "targets", "==", "targets", "[", "i", "]", ")", "\n", "#  move itself", "\n", "pos_pair_", "=", "torch", ".", "masked_select", "(", "pos_pair_", ",", "pos_pair_", "<", "1", ")", "\n", "neg_pair_", "=", "torch", ".", "masked_select", "(", "sim_mat", "[", "i", "]", ",", "targets", "!=", "targets", "[", "i", "]", ")", "\n", "pos_pair_", "=", "torch", ".", "sort", "(", "pos_pair_", ")", "[", "0", "]", "\n", "neg_pair_", "=", "torch", ".", "sort", "(", "neg_pair_", ")", "[", "0", "]", "\n", "# if self.hard_mining is not None:", "\n", "#     neg_pair = torch.masked_select(neg_pair_, neg_pair_ + 0.1 > pos_pair_[0])", "\n", "#     pos_pair = torch.masked_select(pos_pair_, pos_pair_ - 0.1 < neg_pair_[-1])", "\n", "#", "\n", "#     if len(neg_pair) < 1 or len(pos_pair) < 1:", "\n", "#         c += 1", "\n", "#         continue", "\n", "#", "\n", "#     pos_loss = 2.0 / self.beta * torch.mean(torch.log(1 + torch.exp(-self.beta * (pos_pair - 0.5))))", "\n", "#     neg_loss = 2.0 / self.alpha * torch.mean(torch.log(1 + torch.exp(self.alpha * (neg_pair - 0.5))))", "\n", "#", "\n", "# else:", "\n", "pos_pair", "=", "pos_pair_", "\n", "neg_pair", "=", "neg_pair_", "\n", "l", "=", "0", "\n", "if", "len", "(", "pos_pair", ")", ">", "0", ":", "\n", "                ", "l", "+=", "torch", ".", "mean", "(", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "-", "2", "*", "(", "pos_pair", "-", "self", ".", "margin", ")", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "neg_pair", ")", ">", "0", ":", "\n", "                ", "l", "+=", "torch", ".", "mean", "(", "torch", ".", "log", "(", "1", "+", "torch", ".", "exp", "(", "self", ".", "alpha", "*", "(", "neg_pair", "-", "self", ".", "margin", ")", ")", ")", ")", "\n", "\n", "", "if", "(", "torch", ".", "is_tensor", "(", "l", ")", ")", ":", "\n", "                ", "loss", ".", "append", "(", "l", ")", "\n", "c", "+=", "1", "\n", "\n", "", "", "loss", "=", "sum", "(", "loss", ")", "/", "n", "\n", "prec", "=", "float", "(", "c", ")", "/", "n", "\n", "mean_neg_sim", "=", "torch", ".", "mean", "(", "neg_pair_", ")", ".", "item", "(", ")", "\n", "mean_pos_sim", "=", "torch", ".", "mean", "(", "pos_pair_", ")", ".", "item", "(", ")", "\n", "if", "(", "return_extra_info", ")", ":", "\n", "            ", "return", "loss", ",", "prec", ",", "mean_pos_sim", ",", "mean_neg_sim", "\n", "", "else", ":", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.Smooth_Classifier.__init__": [[312, 324], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Module.__init__", "len", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "len", "len"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "train_classes", "=", "params", ".", "train_classes", "\n", "self", ".", "c", "=", "len", "(", "self", ".", "train_classes", ")", "\n", "self", ".", "smooth_factor", "=", "params", ".", "smooth_factor", "\n", "d", "=", "params", ".", "embed_dim", "\n", "if", "(", "params", ".", "h_dim", ">", "0", ")", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d", ",", "params", ".", "h_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "params", ".", "h_dim", ",", "len", "(", "self", ".", "train_classes", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "d", ",", "len", "(", "self", ".", "train_classes", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.Smooth_Classifier.forward": [[326, 331], ["Losses.binarize_and_smooth_labels", "torch.softmax", "torch.softmax", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "Losses.Smooth_Classifier.classifier", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.binarize_and_smooth_labels"], ["", "", "def", "forward", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "y_smooth", "=", "binarize_and_smooth_labels", "(", "y", ",", "self", ".", "c", ",", "smoothing_const", "=", "self", ".", "smooth_factor", ")", "\n", "class_out", "=", "F", ".", "softmax", "(", "self", ".", "classifier", "(", "X", ")", ",", "dim", "=", "1", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "-", "y_smooth", "*", "torch", ".", "log", "(", "class_out", ")", ",", "-", "1", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.binarize_and_smooth_labels": [[217, 229], ["torch.FloatTensor().cuda.cpu().numpy", "sklearn.preprocessing.label_binarize", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda.cpu", "range", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "", "", "def", "binarize_and_smooth_labels", "(", "T", ",", "nb_classes", ",", "smoothing_const", "=", "0.1", ")", ":", "\n", "# Optional: BNInception uses label smoothing, apply it for retraining also", "\n", "# \"Rethinking the Inception Architecture for Computer Vision\", p. 6", "\n", "    ", "import", "sklearn", ".", "preprocessing", "\n", "T", "=", "T", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "T", "=", "sklearn", ".", "preprocessing", ".", "label_binarize", "(", "\n", "T", ",", "classes", "=", "range", "(", "0", ",", "nb_classes", ")", "\n", ")", "\n", "T", "=", "T", "*", "(", "1", "-", "smoothing_const", ")", "\n", "T", "[", "T", "==", "0", "]", "=", "smoothing_const", "/", "(", "nb_classes", "-", "1", ")", "\n", "T", "=", "torch", ".", "FloatTensor", "(", "T", ")", ".", "cuda", "(", ")", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.demo_WEDL_run_best.override_best_params": [[17, 20], ["None"], "function", ["None"], ["def", "override_best_params", "(", "params", ")", ":", "\n", "    ", "params", ".", "epoch", "=", "20", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Miner.TripletMiner.__init__": [[10, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "margin", "=", "0.2", ",", "type_of_triplets", "=", "'all'", ",", "sim_flag", "=", "False", ")", ":", "\n", "        ", "self", ".", "margin", "=", "margin", "\n", "self", ".", "type_of_triplets", "=", "type_of_triplets", "\n", "self", ".", "sim_flag", "=", "sim_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Miner.TripletMiner.get_all_trip_indices": [[15, 23], ["labels.unsqueeze", "labels.unsqueeze", "matches.fill_diagonal_", "torch.where", "matches.unsqueeze", "diffs.unsqueeze"], "methods", ["None"], ["", "def", "get_all_trip_indices", "(", "self", ",", "labels", ")", ":", "\n", "        ", "labels1", "=", "labels", ".", "unsqueeze", "(", "1", ")", "\n", "labels2", "=", "labels", ".", "unsqueeze", "(", "0", ")", "\n", "matches", "=", "(", "labels1", "==", "labels2", ")", ".", "byte", "(", ")", "\n", "diffs", "=", "matches", "^", "1", "\n", "matches", ".", "fill_diagonal_", "(", "0", ")", "\n", "triplets", "=", "matches", ".", "unsqueeze", "(", "2", ")", "*", "diffs", ".", "unsqueeze", "(", "1", ")", "\n", "return", "torch", ".", "where", "(", "triplets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Miner.TripletMiner.mine": [[24, 50], ["Miner.TripletMiner.get_all_trip_indices", "torch.matmul", "torch.cdist", "X_embed.t"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Miner.TripletMiner.get_all_trip_indices"], ["", "def", "mine", "(", "self", ",", "X_embed", ",", "y", ",", "return_dist", "=", "False", ")", ":", "\n", "        ", "anchor_idx", ",", "positive_idx", ",", "negative_idx", "=", "self", ".", "get_all_trip_indices", "(", "y", ")", "\n", "if", "(", "self", ".", "sim_flag", ")", ":", "\n", "            ", "mat", "=", "torch", ".", "matmul", "(", "X_embed", ",", "X_embed", ".", "t", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "mat", "=", "torch", ".", "cdist", "(", "X_embed", ",", "X_embed", ")", "\n", "", "ap_dist", "=", "mat", "[", "anchor_idx", ",", "positive_idx", "]", "\n", "an_dist", "=", "mat", "[", "anchor_idx", ",", "negative_idx", "]", "\n", "triplet_margin", "=", "(", "\n", "ap_dist", "-", "an_dist", "if", "self", ".", "sim_flag", "else", "an_dist", "-", "ap_dist", "\n", ")", "\n", "if", "self", ".", "type_of_triplets", "==", "\"easy\"", ":", "\n", "            ", "threshold_condition", "=", "triplet_margin", ">", "self", ".", "margin", "\n", "", "else", ":", "\n", "            ", "threshold_condition", "=", "triplet_margin", "<=", "self", ".", "margin", "\n", "if", "self", ".", "type_of_triplets", "==", "\"hard\"", ":", "\n", "                ", "threshold_condition", "&=", "triplet_margin", "<=", "0", "\n", "", "elif", "self", ".", "type_of_triplets", "==", "\"semihard\"", ":", "\n", "                ", "threshold_condition", "&=", "triplet_margin", ">", "0", "\n", "\n", "", "", "trip_ind", "=", "(", "anchor_idx", "[", "threshold_condition", "]", ",", "positive_idx", "[", "threshold_condition", "]", ",", "\n", "negative_idx", "[", "threshold_condition", "]", ")", "\n", "if", "(", "return_dist", ")", ":", "\n", "            ", "return", "trip_ind", ",", "mat", "\n", "", "else", ":", "\n", "            ", "return", "trip_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Visualization.show_annotate": [[11, 19], ["matplotlib.gca", "AnchoredText", "AnchoredText.patch.set_boxstyle", "plt.gca.add_artist", "dict"], "function", ["None"], ["def", "show_annotate", "(", "text", ",", "loc", "=", "'upper left'", ")", ":", "\n", "    ", "from", "matplotlib", ".", "offsetbox", "import", "AnchoredText", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "at", "=", "AnchoredText", "(", "text", ",", "\n", "prop", "=", "dict", "(", "size", "=", "15", ")", ",", "frameon", "=", "True", ",", "\n", "loc", "=", "loc", ")", "\n", "at", ".", "patch", ".", "set_boxstyle", "(", "\"round,pad=0.,rounding_size=0.2\"", ")", "\n", "ax", ".", "add_artist", "(", "at", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Visualization.plot_RecallK": [[21, 37], ["matplotlib.figure", "numpy.array", "range", "range", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "len", "matplotlib.plot", "len", "numpy.max", "matplotlib.savefig", "matplotlib.savefig", "len"], "function", ["None"], ["", "def", "plot_RecallK", "(", "recallK_list", ",", "title", ",", "kSet", ",", "file_name", "=", "''", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "recallK_list", "=", "np", ".", "array", "(", "recallK_list", ")", "\n", "colors", "=", "[", "'b'", ",", "'g'", ",", "'r'", ",", "'k'", ",", "'c'", ",", "'m'", ",", "'y'", "]", "\n", "epochs", "=", "range", "(", "1", ",", "len", "(", "recallK_list", ")", "+", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "kSet", ")", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "epochs", ",", "recallK_list", "[", ":", ",", "i", "]", ",", "color", "=", "colors", "[", "i", "]", ",", "label", "=", "'Test Recall@%d'", "%", "(", "kSet", "[", "i", "]", ")", ")", "\n", "", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "if", "len", "(", "file_name", ")", ">", "0", ":", "\n", "        ", "max_recall1", "=", "np", ".", "max", "(", "recallK_list", "[", ":", ",", "0", "]", ")", "\n", "file_name", "=", "file_name", "+", "'%0.2f'", "%", "(", "max_recall1", ")", "\n", "plt", ".", "savefig", "(", "file_name", "+", "'.eps'", ")", "\n", "plt", ".", "savefig", "(", "file_name", "+", "'.png'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Visualization.plot_NMI_Recall": [[39, 66], ["range", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.show", "Visualization.plot_RecallK", "matplotlib.plot", "matplotlib.title", "matplotlib.title", "numpy.max", "matplotlib.savefig", "matplotlib.savefig", "Visualization.plot_RecallK", "len"], "function", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Visualization.plot_RecallK", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Visualization.plot_RecallK"], ["", "def", "plot_NMI_Recall", "(", "ds", ",", "hist", ",", "save_flag", "=", "False", ",", "plot_train", "=", "True", ",", "alg", "=", "''", ")", ":", "\n", "    ", "epochs", "=", "range", "(", "1", ",", "len", "(", "hist", ".", "nmi_list", ")", "+", "1", ")", "\n", "plt", ".", "plot", "(", "epochs", ",", "hist", ".", "nmi_list", ",", "color", "=", "'blue'", ",", "marker", "=", "'*'", ",", "label", "=", "'Test NMI'", ")", "\n", "plt", ".", "xlabel", "(", "'Epochs'", ")", "\n", "plt", ".", "ylabel", "(", "'NMI'", ")", "\n", "if", "plot_train", ":", "\n", "        ", "plt", ".", "plot", "(", "epochs", ",", "hist", ".", "nmi_train_list", ",", "color", "=", "'red'", ",", "marker", "=", "'^'", ",", "label", "=", "'Train NMI'", ")", "\n", "plt", ".", "title", "(", "'Test and Train NMI on %s'", "%", "(", "ds", ")", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "title", "(", "'Test NMI on %s'", "%", "(", "ds", ")", ")", "\n", "\n", "", "plt", ".", "legend", "(", ")", "\n", "if", "save_flag", ":", "\n", "        ", "max_nmi", "=", "np", ".", "max", "(", "hist", ".", "nmi_list", ")", "\n", "fname", "=", "'./figs/%s_%s_nmi_%0.2f'", "%", "(", "alg", ",", "ds", ",", "max_nmi", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'.eps'", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'.png'", ")", "\n", "fname_recall_test", "=", "'./figs/%s_%s_test_recall_'", "%", "(", "alg", ",", "ds", ")", "\n", "fname_recall_train", "=", "'./figs/%s_%s_train_recall_'", "%", "(", "alg", ",", "ds", ")", "\n", "", "else", ":", "\n", "        ", "fname_recall_test", ",", "fname_recall_train", "=", "''", ",", "''", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "plot_RecallK", "(", "hist", ".", "recallK_list", ",", "'Test RecallK on %s'", "%", "ds", ",", "hist", ".", "kSet", ",", "file_name", "=", "fname_recall_test", ")", "\n", "\n", "if", "plot_train", ":", "\n", "        ", "plot_RecallK", "(", "hist", ".", "recallK_train_list", ",", "'Train RecallK on %s'", "%", "ds", ",", "hist", ".", "kSet", ",", "file_name", "=", "fname_recall_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Visualization.plot_NMI_recall_best": [[68, 71], ["commons.Result.get_bestRes", "Visualization.plot_NMI_Recall"], "function", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Result.get_bestRes", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Visualization.plot_NMI_Recall"], ["", "", "def", "plot_NMI_recall_best", "(", "ds_name", ",", "alg", ")", ":", "\n", "    ", "best_score", ",", "params", ",", "best_resInfo", ",", "hist", "=", "get_bestRes", "(", "ds_name", ",", "alg", ")", "\n", "plot_NMI_Recall", "(", "ds_name", ",", "hist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Visualization.plot_NMI_recall_dmls": [[73, 137], ["matplotlib.figure", "range", "range", "matplotlib.title", "matplotlib.xticks", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.show", "range", "commons.Result.get_bestRes", "hist_list.append", "numpy.minimum", "numpy.array", "len", "matplotlib.plot", "list", "matplotlib.savefig", "matplotlib.savefig", "len", "matplotlib.figure", "range", "matplotlib.title", "matplotlib.xticks", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.show", "len", "hasattr", "len", "len", "range", "dict", "len", "matplotlib.plot", "list", "matplotlib.savefig", "matplotlib.savefig", "range", "dict"], "function", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Result.get_bestRes"], ["", "def", "plot_NMI_recall_dmls", "(", "ds", ",", "alg_list", ",", "num_epoch", "=", "20", ",", "kSet", "=", "None", ",", "alg_display_names", "=", "None", ",", "save_flag", "=", "False", ",", "\n", "annotate_loc", "=", "'center'", ",", "experiment_name", "=", "''", ")", ":", "\n", "    ", "font_size", ",", "title_size", "=", "14", ",", "16", "\n", "if", "kSet", "is", "None", ":", "\n", "        ", "kSet", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", "\n", "", "if", "alg_display_names", "is", "None", ":", "\n", "        ", "alg_display_names", "=", "alg_list", "\n", "\n", "", "ds_name", "=", "ds_names", "[", "ds", "]", "\n", "hist_list", "=", "[", "]", "\n", "nmi_bottom", ",", "recall1_bottom", "=", "0", ",", "0", "\n", "for", "alg", "in", "alg_list", ":", "\n", "        ", "best_score", ",", "params", ",", "best_resInfo", ",", "hist", "=", "get_bestRes", "(", "ds", ",", "alg", ")", "\n", "hist_list", ".", "append", "(", "hist", ")", "\n", "num_epoch", "=", "np", ".", "minimum", "(", "num_epoch", ",", "len", "(", "hist", ".", "nmi_list", ")", ")", "\n", "nmi_bottom", "+=", "hist", ".", "nmi_list", "[", "0", "]", "\n", "if", "not", "hasattr", "(", "hist", ",", "'recallK_list'", ")", ":", "\n", "            ", "hist", ".", "recallK_list", "=", "hist", ".", "recallK_ist", "\n", "\n", "", "hist", ".", "recallK_list", "=", "np", ".", "array", "(", "hist", ".", "recallK_list", ")", "\n", "recall1_bottom", "+=", "hist", ".", "recallK_list", "[", "0", ",", "0", "]", "\n", "\n", "\n", "", "nmi_bottom", ",", "recall1_bottom", "=", "nmi_bottom", "/", "len", "(", "alg_list", ")", ",", "recall1_bottom", "/", "len", "(", "alg_list", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "epochs", "=", "range", "(", "0", ",", "num_epoch", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "alg_list", ")", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "epochs", ",", "hist_list", "[", "i", "]", ".", "nmi_list", "[", ":", "num_epoch", "]", ",", "color", "=", "colors", "[", "i", "]", ",", "label", "=", "'%s'", "%", "(", "alg_display_names", "[", "i", "]", ")", ")", "\n", "\n", "\n", "", "plt", ".", "title", "(", "'Test NMI on %s'", "%", "(", "ds_name", ")", ",", "fontsize", "=", "title_size", ",", "fontweight", "=", "'bold'", ")", "\n", "plt", ".", "xticks", "(", "list", "(", "range", "(", "0", ",", "num_epoch", ",", "2", ")", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Epochs'", ",", "fontsize", "=", "font_size", ")", "\n", "plt", ".", "ylabel", "(", "'NMI'", ",", "fontsize", "=", "font_size", ")", "\n", "# plt.ylim(bottom=nmi_bottom)", "\n", "plt", ".", "legend", "(", "prop", "=", "dict", "(", "weight", "=", "'bold'", ")", ")", "\n", "# show_annotate(alg_display_names[-1], loc=annotate_loc)", "\n", "if", "save_flag", ":", "\n", "        ", "fname", "=", "'./figs/test_nmi_%s_%s'", "%", "(", "ds", ",", "experiment_name", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'.eps'", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'.png'", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "kSet", ")", ")", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "alg_list", ")", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "epochs", ",", "hist_list", "[", "i", "]", ".", "recallK_list", "[", ":", "num_epoch", ",", "j", "]", ",", "\n", "color", "=", "colors", "[", "i", "]", ",", "label", "=", "'%s'", "%", "(", "alg_display_names", "[", "i", "]", ")", ")", "\n", "\n", "", "plt", ".", "title", "(", "'Test Recall@%d on %s'", "%", "(", "kSet", "[", "j", "]", ",", "ds_name", ")", ",", "fontsize", "=", "14", ",", "fontweight", "=", "'bold'", ")", "\n", "plt", ".", "xticks", "(", "list", "(", "range", "(", "0", ",", "num_epoch", ",", "2", ")", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Epochs'", ",", "fontsize", "=", "12", ")", "\n", "plt", ".", "ylabel", "(", "'Recall@%d'", "%", "(", "kSet", "[", "j", "]", ")", ",", "fontsize", "=", "12", ")", "\n", "# if(j==0):", "\n", "#     plt.ylim(bottom=recall1_bottom)", "\n", "plt", ".", "legend", "(", "prop", "=", "dict", "(", "weight", "=", "'bold'", ")", ")", "\n", "# show_annotate(alg_display_names[-1], loc=annotate_loc)", "\n", "if", "save_flag", ":", "\n", "            ", "fname", "=", "'./figs/recall@%d_%s_%s'", "%", "(", "kSet", "[", "j", "]", ",", "ds", ",", "experiment_name", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'.eps'", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'.png'", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Visualization.main": [[140, 142], ["print"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'Congratulations to you!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.WEL_DML.WEL.__init__": [[9, 37], ["torch.nn.Module.__init__", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "numpy.zeros", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "len", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "numpy.sum", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "len", "len"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "dml_layers", ",", "params", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "super", "(", "WEL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_classes", "=", "params", ".", "train_classes", "\n", "self", ".", "c", "=", "len", "(", "self", ".", "train_classes", ")", "\n", "self", ".", "dml_layers", "=", "dml_layers", "\n", "m", "=", "len", "(", "self", ".", "dml_layers", ")", "+", "1", "\n", "self", ".", "min_coeff2", "=", "1", "/", "(", "4", "*", "m", ")", "\n", "c", "=", "torch", ".", "from_numpy", "(", "params", ".", "prior", "/", "np", ".", "sum", "(", "params", ".", "prior", ")", ")", "\n", "c", "=", "c", "-", "self", ".", "min_coeff2", "\n", "coeffs", "=", "torch", ".", "Tensor", "(", "torch", ".", "sqrt", "(", "c", ")", ")", "\n", "self", ".", "coeffs", "=", "nn", ".", "Parameter", "(", "coeffs", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "eta", "=", "params", ".", "eta", "\n", "self", ".", "l_ma", "=", "np", ".", "zeros", "(", "m", ")", "# mean of losses obtained by exp moving average", "\n", "self", ".", "smooth_factor", "=", "params", ".", "smooth_factor", "\n", "self", ".", "num_batch", "=", "0", "\n", "\n", "# create classification module", "\n", "d", "=", "params", ".", "d", "\n", "# d = params.embed_dim", "\n", "if", "(", "params", ".", "h_dim", ">", "0", ")", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d", ",", "params", ".", "h_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "params", ".", "h_dim", ",", "len", "(", "self", ".", "train_classes", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d", ",", "len", "(", "self", ".", "train_classes", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.WEL_DML.WEL.forward": [[39, 65], ["numpy.zeros", "Losses.binarize_and_smooth_labels", "torch.softmax", "torch.softmax", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "range", "range", "numpy.mean", "range", "len", "WEL_DML.WEL.classifier", "l[].item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "coeff2.cpu().data.numpy", "torch.log", "torch.log", "torch.log", "torch.log", "coeff2.cpu"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.binarize_and_smooth_labels"], ["", "def", "forward", "(", "self", ",", "X", ",", "X_fea", ",", "y", ")", ":", "\n", "        ", "coeff2", "=", "self", ".", "coeffs", "**", "2", "\n", "m", "=", "len", "(", "self", ".", "dml_layers", ")", "+", "1", "\n", "err_coeff2", "=", "torch", ".", "sum", "(", "coeff2", ")", "+", "m", "*", "self", ".", "min_coeff2", "-", "1", "\n", "\n", "l", "=", "[", "None", "]", "*", "m", "\n", "losses", "=", "np", ".", "zeros", "(", "m", ")", "\n", "y_smooth", "=", "binarize_and_smooth_labels", "(", "y", ",", "self", ".", "c", ",", "smoothing_const", "=", "self", ".", "smooth_factor", ")", "\n", "class_out", "=", "F", ".", "softmax", "(", "self", ".", "classifier", "(", "X_fea", ")", ",", "dim", "=", "1", ")", "\n", "l", "[", "0", "]", "=", "torch", ".", "sum", "(", "-", "y_smooth", "*", "torch", ".", "log", "(", "class_out", ")", ",", "-", "1", ")", ".", "mean", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "m", ")", ":", "\n", "            ", "l", "[", "i", "]", "=", "self", ".", "dml_layers", "[", "i", "-", "1", "]", "(", "X", ",", "y", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "m", ")", ":", "\n", "            ", "losses", "[", "i", "]", "=", "l", "[", "i", "]", ".", "item", "(", ")", "\n", "self", ".", "l_ma", "[", "i", "]", "=", "(", "losses", "[", "i", "]", "+", "self", ".", "num_batch", "*", "self", ".", "l_ma", "[", "i", "]", ")", "/", "(", "self", ".", "num_batch", "+", "1", ")", "\n", "\n", "", "self", ".", "num_batch", "+=", "1", "\n", "l_mean", "=", "np", ".", "mean", "(", "self", ".", "l_ma", ")", "\n", "\n", "final_loss", "=", "(", "coeff2", "[", "0", "]", "+", "self", ".", "min_coeff2", ")", "*", "(", "l_mean", "/", "self", ".", "l_ma", "[", "0", "]", ")", "*", "l", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "m", ")", ":", "\n", "            ", "final_loss", "+=", "(", "coeff2", "[", "i", "]", "+", "self", ".", "min_coeff2", ")", "*", "(", "l_mean", "/", "self", ".", "l_ma", "[", "i", "]", ")", "*", "l", "[", "i", "]", "\n", "\n", "# return final_loss + self.eta*err_coeff2 + 1000*self.eta*(err_coeff2)**2, losses, coeff2.cpu().data.numpy()", "\n", "", "return", "final_loss", "+", "100", "*", "self", ".", "eta", "*", "(", "err_coeff2", "**", "2", ")", ",", "losses", ",", "coeff2", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "+", "self", ".", "min_coeff2", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.WEL_DML.DistLoss.__init__": [[68, 70], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DistLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.WEL_DML.DistLoss.forward": [[71, 81], ["len", "range", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "range", "torch.pairwise_distance().mean", "torch.pairwise_distance().mean", "torch.pairwise_distance().mean", "torch.pairwise_distance().mean", "torch.pairwise_distance", "torch.pairwise_distance", "torch.pairwise_distance", "torch.pairwise_distance"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xl", ")", ":", "\n", "        ", "dist", "=", "0", "\n", "m", "=", "len", "(", "xl", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "m", ")", ":", "\n", "                ", "dist", "+=", "torch", ".", "pairwise_distance", "(", "xl", "[", "i", "]", ",", "xl", "[", "j", "]", ")", ".", "mean", "(", ")", "\n", "\n", "", "", "dist", "=", "2", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "*", "dist", "\n", "dist_loss", "=", "torch", ".", "relu", "(", "2", "-", "dist", ")", "\n", "return", "dist_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.WEL_DML.WEDL.__init__": [[84, 113], ["torch.nn.Module.__init__", "len", "WEL_DML.WEDL.dml_layers.insert", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "numpy.zeros", "WEL_DML.DistLoss", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.nn.Sequential().to", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "numpy.sum", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "len", "len"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "dml_layers", ",", "params", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "super", "(", "WEDL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_classes", "=", "params", ".", "train_classes", "\n", "self", ".", "c", "=", "len", "(", "self", ".", "train_classes", ")", "\n", "self", ".", "dml_layers", "=", "dml_layers", "\n", "\n", "# create classification module", "\n", "d", "=", "params", ".", "embed_dim", "\n", "if", "(", "params", ".", "h_dim", ">", "0", ")", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d", ",", "params", ".", "h_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "params", ".", "h_dim", ",", "len", "(", "self", ".", "train_classes", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d", ",", "len", "(", "self", ".", "train_classes", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "self", ".", "dml_layers", ".", "insert", "(", "0", ",", "self", ".", "classifier", ")", "\n", "m", "=", "len", "(", "self", ".", "dml_layers", ")", "\n", "self", ".", "min_coeff2", "=", "1", "/", "(", "4", "*", "m", ")", "\n", "c", "=", "torch", ".", "from_numpy", "(", "params", ".", "prior", "/", "np", ".", "sum", "(", "params", ".", "prior", ")", ")", "\n", "c", "=", "c", "-", "self", ".", "min_coeff2", "\n", "coeffs", "=", "torch", ".", "Tensor", "(", "torch", ".", "sqrt", "(", "c", ")", ")", "\n", "self", ".", "coeffs", "=", "nn", ".", "Parameter", "(", "coeffs", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "eta", "=", "params", ".", "eta", "\n", "self", ".", "l_ma", "=", "np", ".", "zeros", "(", "m", ")", "# mean of losses obtained by exp moving average", "\n", "self", ".", "smooth_factor", "=", "params", ".", "smooth_factor", "\n", "self", ".", "num_batch", "=", "0", "\n", "self", ".", "div_loss", "=", "DistLoss", "(", ")", "\n", "self", ".", "lam", "=", "params", ".", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.WEL_DML.WEDL.forward": [[114, 142], ["len", "numpy.zeros", "Losses.binarize_and_smooth_labels", "torch.softmax", "torch.softmax", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "range", "range", "numpy.mean", "range", "WEL_DML.WEDL.classifier", "l[].item", "WEL_DML.WEDL.div_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "coeff2.cpu().data.numpy", "torch.log", "torch.log", "torch.log", "torch.log", "coeff2.cpu"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Losses.binarize_and_smooth_labels"], ["", "def", "forward", "(", "self", ",", "X", ",", "Xl", ",", "X_fea", ",", "y", ")", ":", "\n", "        ", "coeff2", "=", "self", ".", "coeffs", "**", "2", "\n", "m", "=", "len", "(", "self", ".", "dml_layers", ")", "\n", "err_coeff2", "=", "torch", ".", "sum", "(", "coeff2", ")", "+", "m", "*", "self", ".", "min_coeff2", "-", "1", "\n", "\n", "l", "=", "[", "None", "]", "*", "m", "\n", "losses", "=", "np", ".", "zeros", "(", "m", ")", "\n", "y_smooth", "=", "binarize_and_smooth_labels", "(", "y", ",", "self", ".", "c", ",", "smoothing_const", "=", "self", ".", "smooth_factor", ")", "\n", "class_out", "=", "F", ".", "softmax", "(", "self", ".", "classifier", "(", "Xl", "[", "0", "]", ")", ",", "dim", "=", "1", ")", "\n", "l", "[", "0", "]", "=", "torch", ".", "sum", "(", "-", "y_smooth", "*", "torch", ".", "log", "(", "class_out", ")", ",", "-", "1", ")", ".", "mean", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "m", ")", ":", "\n", "            ", "l", "[", "i", "]", "=", "self", ".", "dml_layers", "[", "i", "]", "(", "Xl", "[", "i", "]", ",", "y", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "m", ")", ":", "\n", "            ", "losses", "[", "i", "]", "=", "l", "[", "i", "]", ".", "item", "(", ")", "\n", "self", ".", "l_ma", "[", "i", "]", "=", "(", "losses", "[", "i", "]", "+", "self", ".", "num_batch", "*", "self", ".", "l_ma", "[", "i", "]", ")", "/", "(", "self", ".", "num_batch", "+", "1", ")", "\n", "\n", "", "self", ".", "num_batch", "+=", "1", "\n", "l_mean", "=", "np", ".", "mean", "(", "self", ".", "l_ma", ")", "\n", "\n", "loss_div", "=", "self", ".", "lam", "*", "self", ".", "div_loss", "(", "Xl", ")", "\n", "final_loss", "=", "(", "coeff2", "[", "0", "]", "+", "self", ".", "min_coeff2", ")", "*", "(", "l_mean", "/", "self", ".", "l_ma", "[", "0", "]", ")", "*", "l", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "m", ")", ":", "\n", "            ", "final_loss", "+=", "(", "coeff2", "[", "i", "]", "+", "self", ".", "min_coeff2", ")", "*", "(", "l_mean", "/", "self", ".", "l_ma", "[", "i", "]", ")", "*", "l", "[", "i", "]", "\n", "\n", "", "final_loss", "+=", "loss_div", "\n", "# return final_loss + self.eta*err_coeff2 + 1000*self.eta*(err_coeff2)**2, losses, coeff2.cpu().data.numpy()", "\n", "return", "final_loss", "+", "100", "*", "self", ".", "eta", "*", "(", "err_coeff2", "**", "2", ")", ",", "losses", ",", "coeff2", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "+", "self", ".", "min_coeff2", ",", "loss_div", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.WEL_DML.Last_Embedding.__init__": [[145, 149], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "m", ",", "embed_dim", ")", ":", "\n", "        ", "super", "(", "Last_Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_layer1", "=", "nn", ".", "Linear", "(", "m", "*", "embed_dim", ",", "embed_dim", "*", "2", ")", "\n", "self", ".", "embed_layer", "=", "nn", ".", "Linear", "(", "2", "*", "embed_dim", ",", "embed_dim", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.WEL_DML.Last_Embedding.forward": [[151, 156], ["WEL_DML.Last_Embedding.embed_layer1", "WEL_DML.Last_Embedding.embed_layer", "torch.nn.Tanh", "torch.nn.Tanh", "WEL_DML.Last_Embedding.distance_loss"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.WEL_DML.Last_Embedding.distance_loss"], ["", "def", "forward", "(", "self", ",", "X_cat", ")", ":", "\n", "        ", "X", "=", "self", ".", "embed_layer1", "(", "X_cat", ")", "\n", "X", "=", "nn", ".", "Tanh", "(", ")", "(", "X", ")", "\n", "X", "=", "self", ".", "embed_layer", "(", "X", ")", "\n", "return", "self", ".", "distance_loss", "(", "X", ",", "X_cat", ")", ",", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.WEL_DML.Last_Embedding.distance_loss": [[157, 164], ["D1.numel", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "D1.sum", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "D2.sum", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "distance_loss", "(", "self", ",", "X", ",", "X_cat", ")", ":", "\n", "        ", "D1", "=", "(", "torch", ".", "cdist", "(", "X", ",", "X", ")", "**", "2", ")", "\n", "D1", "=", "D1", "/", "D1", ".", "sum", "(", ")", "\n", "D2", "=", "torch", ".", "cdist", "(", "X_cat", ",", "X_cat", ")", "**", "2", "\n", "D2", "=", "D2", "/", "D2", ".", "sum", "(", ")", "\n", "n", "=", "D1", ".", "numel", "(", ")", "\n", "return", "torch", ".", "norm", "(", "D1", "-", "D2", ")", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.WEL_DML.main": [[166, 202], ["list", "torch.tensor", "torch.tensor", "torch.nn.functional.one_hot().float", "torch.nn.functional.one_hot().float", "len", "range", "WEL_DML.DistLoss", "DistLoss.", "print", "print", "range", "xl.append", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "one_hot[].unsqueeze().repeat", "one_hot[].unsqueeze"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "data_size", ",", "input_dim", "=", "1", ",", "4", "\n", "# h_loss = HLoss()", "\n", "#", "\n", "# xl = []", "\n", "# xl.append(torch.tensor([1., 1, 0, 0], requires_grad=True).unsqueeze(0))", "\n", "# xl.append(torch.tensor([1., 1, 0, 0], requires_grad=True).unsqueeze(0))", "\n", "# xl.append(torch.tensor([1, .9, 0, .1], requires_grad=True).unsqueeze(0))", "\n", "# xl.append(torch.tensor([1, .8, .2, 1], requires_grad=True).unsqueeze(0))", "\n", "# xl.append(torch.tensor([1, .9, .1, 0], requires_grad=True).unsqueeze(0))", "\n", "#", "\n", "# div_loss = h_loss(xl)", "\n", "# print('div_loss=%2f'%(div_loss))", "\n", "#", "\n", "# xl = []", "\n", "# xl.append(torch.tensor([1., 0, 0, 0], requires_grad=True).unsqueeze(0))", "\n", "# xl.append(torch.tensor([0., 1, 0, 0], requires_grad=True).unsqueeze(0))", "\n", "# xl.append(torch.tensor([0., 0, 1., 0], requires_grad=True).unsqueeze(0))", "\n", "# xl.append(torch.tensor([0, 0, 0, 1.], requires_grad=True).unsqueeze(0))", "\n", "# div_loss = h_loss(xl)", "\n", "# print('div_loss=%2f' % (div_loss))", "\n", "\n", "l", "=", "list", "(", "range", "(", "0", ",", "3", ")", ")", "\n", "target", "=", "torch", ".", "tensor", "(", "l", ")", "\n", "one_hot", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "target", ")", ".", "float", "(", ")", "\n", "n", "=", "len", "(", "one_hot", ")", "\n", "xl", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "xl", ".", "append", "(", "one_hot", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ")", ")", "\n", "\n", "", "D", "=", "DistLoss", "(", ")", "\n", "loss", ",", "dist", "=", "D", "(", "xl", ")", "\n", "\n", "print", "(", "'div_loss=%2f'", "%", "(", "loss", ")", ")", "\n", "\n", "print", "(", "'finished!!!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.utils.JSONEncoder.default": [[19, 26], ["isinstance", "json.JSONEncoder.default", "isinstance", "repr"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.utils.JSONEncoder.default"], ["    ", "def", "default", "(", "self", ",", "x", ")", ":", "\n", "# add encoding for other types if necessary", "\n", "        ", "if", "isinstance", "(", "x", ",", "range", ")", ":", "\n", "            ", "return", "'range({}, {})'", ".", "format", "(", "x", ".", "start", ",", "x", ".", "stop", ")", "\n", "", "if", "not", "isinstance", "(", "x", ",", "(", "int", ",", "str", ",", "list", ",", "float", ",", "bool", ")", ")", ":", "\n", "            ", "return", "repr", "(", "x", ")", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.utils.load_config": [[28, 38], ["json.load", "utils.load_config.eval_json"], "function", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.__init__.load"], ["", "", "def", "load_config", "(", "config_name", "=", "'config.json'", ")", ":", "\n", "    ", "config", "=", "json", ".", "load", "(", "open", "(", "config_name", ")", ")", "\n", "def", "eval_json", "(", "config", ")", ":", "\n", "        ", "for", "k", "in", "config", ":", "\n", "            ", "if", "type", "(", "config", "[", "k", "]", ")", "!=", "dict", ":", "\n", "                ", "config", "[", "k", "]", "=", "eval", "(", "config", "[", "k", "]", ")", "\n", "", "else", ":", "\n", "                ", "eval_json", "(", "config", "[", "k", "]", ")", "\n", "", "", "", "eval_json", "(", "config", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.utils.reset_rng": [[40, 47], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "reset_rng", "(", "seed", ")", ":", "\n", "    ", "seed", "=", "0", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# set random seed for all gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.utils.set_requires_grad": [[49, 52], ["model.parameters"], "function", ["None"], ["", "", "def", "set_requires_grad", "(", "model", ",", "requires_grad", "=", "True", ")", ":", "\n", "    ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.utils.check_save": [[54, 75], ["numpy.argmax", "numpy.array", "commons.Struct.Struct", "commons.Result.save_res", "commons.Result.print_params", "Evaluation.print_res", "Visualization.plot_NMI_Recall", "torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Result.save_res", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Result.print_params", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Evaluation.print_res", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Visualization.plot_NMI_Recall"], ["", "", "def", "check_save", "(", "best_score", ",", "h", ",", "params", ",", "alg", "=", "None", ",", "model", "=", "None", ",", "plot_train", "=", "True", ")", ":", "\n", "    ", "recall1_list", "=", "np", ".", "array", "(", "h", ".", "recallK_list", ")", "[", ":", ",", "0", "]", "\n", "best_epoch", "=", "np", ".", "argmax", "(", "recall1_list", ")", "\n", "best_recall1", "=", "recall1_list", "[", "best_epoch", "]", "\n", "if", "alg", "is", "None", ":", "\n", "        ", "alg", "=", "params", ".", "alg", "\n", "\n", "", "if", "(", "best_recall1", ">", "best_score", ")", ":", "\n", "        ", "best_Res", "=", "Struct", "(", ")", "\n", "best_Res", ".", "epoch", ",", "best_Res", ".", "nmi", "=", "best_epoch", ",", "h", ".", "nmi_list", "[", "best_epoch", "]", "\n", "best_Res", ".", "recallK", ",", "best_Res", ".", "acc", "=", "h", ".", "recallK_list", "[", "best_epoch", "]", ",", "h", ".", "acc_list", "[", "best_epoch", "]", "\n", "save_res", "(", "params", ".", "ds", ",", "alg", ",", "best_recall1", ",", "params", ",", "best_Res", ",", "h", ")", "\n", "print_params", "(", "params", ")", "\n", "print_res", "(", "best_recall1", ",", "best_Res", ")", "\n", "plot_NMI_Recall", "(", "params", ".", "ds", ",", "h", ",", "save_flag", "=", "True", ",", "alg", "=", "alg", ",", "plot_train", "=", "plot_train", ")", "\n", "if", "model", "is", "not", "None", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'./saved_models/%s__%s_%0.2f.mdl'", "%", "(", "alg", ",", "params", ".", "ds", ",", "best_recall1", ")", ")", "\n", "\n", "", "return", "True", ",", "best_epoch", "\n", "", "else", ":", "\n", "        ", "return", "False", ",", "best_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.utils.main": [[77, 79], ["print"], "function", ["None"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'finished!!!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Evaluation.evaluation": [[13, 52], ["commons.Struct.Struct", "len", "numpy.max", "numpy.zeros", "len", "sklearn.cluster.KMeans().fit", "numpy.zeros", "range", "range", "numpy.unique", "len", "sklearn.metrics.cluster.normalized_mutual_info_score", "X.dot", "scipy.spatial.distance.cdist", "statistics.mode", "len", "range", "sklearn.cluster.KMeans", "numpy.argsort", "numpy.argsort", "numpy.sum"], "function", ["None"], ["def", "evaluation", "(", "X", ",", "y", ",", "Kset", "=", "None", ",", "X_ref", "=", "None", ",", "y_ref", "=", "None", ",", "kNN_K", "=", "3", ",", "sim_flag", "=", "False", ")", ":", "\n", "    ", "if", "Kset", "is", "None", ":", "\n", "        ", "Kset", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", "\n", "", "res", "=", "Struct", "(", ")", "\n", "classN", "=", "len", "(", "np", ".", "unique", "(", "y", ")", ")", "\n", "kmax", "=", "np", ".", "max", "(", "Kset", ")", "\n", "res", ".", "recallK", "=", "np", ".", "zeros", "(", "len", "(", "Kset", ")", ")", "\n", "if", "X_ref", "is", "None", ":", "\n", "        ", "X_ref", ",", "y_ref", "=", "X", ",", "y", "\n", "\n", "", "n", "=", "len", "(", "X", ")", "\n", "#compute NMI", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "classN", ")", ".", "fit", "(", "X", ")", "\n", "res", ".", "nmi", "=", "normalized_mutual_info_score", "(", "y", ",", "kmeans", ".", "labels_", ",", "average_method", "=", "'arithmetic'", ")", "*", "100", "\n", "\n", "#compute Recall@K", "\n", "if", "(", "sim_flag", ")", ":", "\n", "        ", "mat", "=", "X", ".", "dot", "(", "X", ".", "T", ")", "\n", "indices", "=", "np", ".", "argsort", "(", "-", "mat", ",", "axis", "=", "1", ")", "[", ":", ",", "1", ":", "kmax", "+", "1", "]", "\n", "", "else", ":", "\n", "        ", "mat", "=", "cdist", "(", "X", ",", "X_ref", ")", "\n", "indices", "=", "np", ".", "argsort", "(", "mat", ",", "axis", "=", "1", ")", "[", ":", ",", "1", ":", "kmax", "+", "1", "]", "\n", "\n", "", "y_NN", "=", "y_ref", "[", "indices", "]", "\n", "y_pred", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n", ")", ",", "dtype", "=", "int", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "y_pred", "[", "j", "]", "=", "mode", "(", "y_NN", "[", "j", ",", ":", "kNN_K", "]", ")", "\n", "\n", "", "res", ".", "acc", "=", "np", ".", "sum", "(", "y_pred", "==", "y", ")", "/", "n", "*", "100", "\n", "# res.map = average_precision_score(y_ref, y_pred)", "\n", "\n", "# Recall@k is the  proportion of relevant items found in the top - k retrievd items", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "Kset", ")", ")", ":", "\n", "        ", "pos", "=", "0.", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "            ", "if", "y", "[", "j", "]", "in", "y_NN", "[", "j", ",", ":", "Kset", "[", "i", "]", "]", ":", "\n", "                ", "pos", "+=", "1.", "\n", "", "", "res", ".", "recallK", "[", "i", "]", "=", "pos", "/", "n", "*", "100", "\n", "", "return", "res", ",", "y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Evaluation.eval_model": [[54, 76], ["model.eval", "torch.Tensor", "torch.LongTensor", "Evaluation.evaluation", "torch.no_grad", "enumerate", "torch.cat.numpy", "torch.cat.numpy", "model", "torch.cat", "torch.cat", "input.to.to", "len", "model.cpu"], "function", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Evaluation.evaluation"], ["", "def", "eval_model", "(", "test_loader", ",", "model", ",", "kSet", "=", "None", ",", "device", "=", "'cuda'", ",", "max_ins", "=", "100000", ")", ":", "\n", "# switch to evaluation mode", "\n", "    ", "if", "kSet", "is", "None", ":", "\n", "        ", "kSet", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", "\n", "", "model", ".", "eval", "(", ")", "\n", "testdata", "=", "torch", ".", "Tensor", "(", ")", "\n", "testlabel", "=", "torch", ".", "LongTensor", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "J", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "input", ",", "target", "=", "J", "[", "0", ":", "2", "]", "\n", "if", "(", "device", "==", "'cuda'", ")", ":", "\n", "                ", "input", "=", "input", ".", "to", "(", "device", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "input", ")", "\n", "testdata", "=", "torch", ".", "cat", "(", "(", "testdata", ",", "output", ".", "cpu", "(", ")", ")", ",", "0", ")", "\n", "testlabel", "=", "torch", ".", "cat", "(", "(", "testlabel", ",", "target", ")", ")", "\n", "if", "(", "len", "(", "testlabel", ")", ">=", "max_ins", ")", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "res", ",", "y_pred", "=", "evaluation", "(", "testdata", ".", "numpy", "(", ")", ",", "testlabel", ".", "numpy", "(", ")", ",", "kSet", ")", "\n", "return", "res", ",", "testdata", ",", "y_pred", ",", "testlabel", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Evaluation.eval_print_res": [[78, 94], ["time.time", "torch.no_grad", "Evaluation.eval_model", "print", "print", "time.time", "Evaluation.eval_model"], "function", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Evaluation.eval_model", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Evaluation.eval_model"], ["", "def", "eval_print_res", "(", "model", ",", "test_loader", ",", "train_loader", ",", "epoch", ",", "epoch_time", ",", "kSet", "=", "None", ",", "device", "=", "'cuda'", ",", "train_max_ins", "=", "1000", ")", ":", "\n", "    ", "eval_time", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "res", ",", "X_test_embed", ",", "y_pred", ",", "y_test", "=", "eval_model", "(", "test_loader", ",", "model", ",", "device", "=", "device", ")", "\n", "eval_time", "=", "time", ".", "time", "(", ")", "-", "eval_time", "\n", "print", "(", "bcolors", ".", "HEADER", "+", "\n", "'epoch:{:d},  Recall@1, 2, 4, 8: {recall[0]:.3f}, {recall[1]:.3f}, {recall[2]:.3f}, {recall[3]:.3f}; '", "\n", "'NMI: {nmi:.3f}, Acc: {acc:.2f}, epoch time (seconds): {time:.2f}, eval time:{eval_time:.2f} \\n'", "\n", ".", "format", "(", "epoch", ",", "recall", "=", "res", ".", "recallK", ",", "nmi", "=", "res", ".", "nmi", ",", "acc", "=", "res", ".", "acc", ",", "time", "=", "epoch_time", ",", "eval_time", "=", "eval_time", ")", "+", "bcolors", ".", "ENDC", ")", "\n", "\n", "res_train", "=", "eval_model", "(", "train_loader", ",", "model", ",", "device", "=", "device", ",", "max_ins", "=", "train_max_ins", ")", "[", "0", "]", "\n", "print", "(", "bcolors", ".", "OKBLUE", "+", "\n", "'Train Recall@1, 2, 4, 8: {recall[0]:.3f}, {recall[1]:.3f}, {recall[2]:.3f}, {recall[3]:.3f}; NMI: {nmi:.3f}, Acc: {acc:.2f} \\n'", "\n", ".", "format", "(", "recall", "=", "res_train", ".", "recallK", ",", "nmi", "=", "res_train", ".", "nmi", ",", "acc", "=", "res_train", ".", "acc", ")", "+", "bcolors", ".", "ENDC", ")", "\n", "\n", "", "return", "res", ",", "res_train", ",", "X_test_embed", ",", "y_pred", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Evaluation.print_init_res": [[96, 137], ["print", "commons.Struct.Struct", "hasattr", "print", "print", "print", "print", "numpy.round", "hasattr", "isinstance", "isinstance", "Evaluation.eval_print_res", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Evaluation.eval_print_res"], ["", "def", "print_init_res", "(", "best_score", ",", "best_resInfo", ",", "hist", ",", "model", ",", "test_loader", ",", "train_loader", ")", ":", "\n", "    ", "print", "(", "bcolors", ".", "HEADER", "+", "'Best Test Recall@1 = %0.2f'", "%", "(", "best_score", ")", "+", "bcolors", ".", "ENDC", ")", "\n", "h", "=", "Struct", "(", ")", "\n", "echo", "=", "False", "\n", "if", "best_score", ">", "0", "and", "hasattr", "(", "hist", ",", "'acc_list'", ")", ":", "\n", "        ", "print", "(", "bcolors", ".", "OKBLUE", "+", "'Best Recall: '", ",", "np", ".", "round", "(", "best_resInfo", ".", "recallK", ",", "2", ")", ",", "bcolors", ".", "ENDC", ")", "\n", "print", "(", "bcolors", ".", "HEADER", "+", "'Best NMI:%0.2f,  Best Acc: %0.2f'", "%", "(", "best_resInfo", ".", "nmi", ",", "best_resInfo", ".", "acc", ")", "+", "bcolors", ".", "ENDC", ")", "\n", "if", "not", "hasattr", "(", "hist", ",", "'recallK_list'", ")", ":", "\n", "            ", "hist", ".", "recallK_list", "=", "hist", ".", "recallK_list", "\n", "", "h", ".", "nmi_list", ",", "h", ".", "nmi_train_list", "=", "[", "hist", ".", "nmi_list", "[", "0", "]", "]", ",", "[", "hist", ".", "nmi_train_list", "[", "0", "]", "]", "\n", "h", ".", "acc_list", ",", "h", ".", "acc_train_list", "=", "[", "hist", ".", "acc_list", "[", "0", "]", "]", ",", "[", "hist", ".", "acc_train_list", "[", "0", "]", "]", "\n", "h", ".", "recallK_list", ",", "h", ".", "recallK_train_list", "=", "[", "hist", ".", "recallK_list", "[", "0", "]", "]", ",", "[", "hist", ".", "recallK_train_list", "[", "0", "]", "]", "\n", "", "elif", "'flowers102'", "in", "test_loader", ".", "dataset", ".", "name", "and", "isinstance", "(", "model", ",", "models", ".", "bn_inception", ".", "BNInception", ")", ":", "\n", "            ", "h", ".", "nmi_list", ",", "h", ".", "nmi_train_list", "=", "[", ".65082", "*", "100", "]", ",", "[", "0.607", "*", "100", "]", "\n", "h", ".", "recallK_list", ",", "h", ".", "recallK_train_list", "=", "[", "np", ".", "array", "(", "[", "0.809", ",", "0.879", ",", "0.927", ",", "0.956", "]", ")", "*", "100", "]", ",", "[", "np", ".", "array", "(", "[", "0.618", ",", "0.719", ",", "0.812", ",", "0.884", "]", ")", "*", "100", "]", "\n", "h", ".", "acc_list", ",", "h", ".", "acc_train_list", "=", "[", "82.88", "]", ",", "[", "62.89", "]", "\n", "", "elif", "'flowers102'", "in", "test_loader", ".", "dataset", ".", "name", "and", "isinstance", "(", "model", ",", "models", ".", "bn_inception", ".", "BNInception_Attention", ")", ":", "\n", "        ", "h", ".", "nmi_list", ",", "h", ".", "nmi_train_list", "=", "[", ".6308", "*", "100", "]", ",", "[", "0.589", "*", "100", "]", "\n", "h", ".", "recallK_list", ",", "h", ".", "recallK_train_list", "=", "[", "np", ".", "array", "(", "[", "0.778", ",", "0.862", ",", "0.916", ",", "0.956", "]", ")", "*", "100", "]", ",", "[", "np", ".", "array", "(", "[", "0.599", ",", "0.701", ",", "0.796", ",", "0.873", "]", ")", "*", "100", "]", "\n", "h", ".", "acc_list", ",", "h", ".", "acc_train_list", "=", "[", "79.39", "]", ",", "[", "61.82", "]", "\n", "", "else", ":", "\n", "        ", "res", ",", "res_train", "=", "eval_print_res", "(", "model", ",", "test_loader", ",", "train_loader", ",", "0", ",", "0", ")", "[", ":", "2", "]", "\n", "echo", "=", "True", "\n", "h", ".", "nmi_list", ",", "h", ".", "nmi_train_list", "=", "[", "res", ".", "nmi", "]", ",", "[", "res_train", ".", "nmi", "]", "\n", "h", ".", "recallK_list", ",", "h", ".", "recallK_train_list", "=", "[", "res", ".", "recallK", "]", ",", "[", "res_train", ".", "recallK", "]", "\n", "h", ".", "acc_list", ",", "h", ".", "acc_train_list", "=", "[", "res", ".", "acc", "]", ",", "[", "res_train", ".", "acc", "]", "\n", "\n", "", "if", "(", "not", "echo", ")", ":", "\n", "        ", "print", "(", "bcolors", ".", "HEADER", "+", "\n", "'epoch:{:d},  Recall@1, 2, 4, 8: {recall[0]:.3f}, {recall[1]:.3f}, {recall[2]:.3f}, {recall[3]:.3f}; '", "\n", "'NMI: {nmi:.3f}, Acc: {acc:.2f}\\n'", "\n", ".", "format", "(", "0", ",", "recall", "=", "h", ".", "recallK_list", "[", "0", "]", ",", "nmi", "=", "h", ".", "nmi_list", "[", "0", "]", ",", "acc", "=", "h", ".", "acc_list", "[", "0", "]", ")", "+", "bcolors", ".", "ENDC", ")", "\n", "print", "(", "bcolors", ".", "OKBLUE", "+", "\n", "'Train Recall@1, 2, 4, 8: {recall[0]:.3f}, {recall[1]:.3f}, {recall[2]:.3f}, {recall[3]:.3f}; '", "\n", "'NMI: {nmi:.3f}, Acc:{acc:.2f}\\n'", "\n", ".", "format", "(", "recall", "=", "h", ".", "recallK_train_list", "[", "0", "]", ",", "nmi", "=", "h", ".", "nmi_train_list", "[", "0", "]", ",", "acc", "=", "h", ".", "acc_train_list", "[", "0", "]", ")", "+", "bcolors", ".", "ENDC", ")", "\n", "\n", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Evaluation.print_res": [[139, 146], ["print", "print", "print", "hasattr", "numpy.round", "print"], "function", ["None"], ["", "def", "print_res", "(", "score", ",", "resInfo", ")", ":", "\n", "    ", "print", "(", "bcolors", ".", "HEADER", "+", "'Best Test Recall@1 = %0.2f'", "%", "(", "score", ")", "+", "bcolors", ".", "ENDC", ")", "\n", "if", "score", ">", "0", ":", "\n", "        ", "print", "(", "bcolors", ".", "OKBLUE", "+", "'Best Recall: '", ",", "np", ".", "round", "(", "resInfo", ".", "recallK", ",", "2", ")", ",", "bcolors", ".", "ENDC", ")", "\n", "print", "(", "bcolors", ".", "FAIL", "+", "'Best Test NMI = %0.2f, epoch = %d'", "%", "(", "resInfo", ".", "nmi", ",", "resInfo", ".", "epoch", ")", "+", "bcolors", ".", "ENDC", ")", "\n", "if", "hasattr", "(", "resInfo", ",", "'acc'", ")", ":", "\n", "            ", "print", "(", "bcolors", ".", "OKBLUE", "+", "'Best Acc = %0.2f'", "%", "(", "resInfo", ".", "acc", ")", "+", "bcolors", ".", "ENDC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.None.Evaluation.update_history": [[148, 155], ["h.acc_list.append", "h.nmi_list.append", "h.recallK_list.append", "h.acc_train_list.append", "h.nmi_train_list.append", "h.recallK_train_list.append"], "function", ["None"], ["", "", "", "def", "update_history", "(", "h", ",", "res", ",", "res_train", "=", "None", ")", ":", "\n", "    ", "h", ".", "nmi_list", ".", "append", "(", "res", ".", "nmi", ")", ",", "h", ".", "recallK_list", ".", "append", "(", "res", ".", "recallK", ")", "\n", "h", ".", "acc_list", ".", "append", "(", "res", ".", "acc", ")", "\n", "if", "(", "res_train", "is", "not", "None", ")", ":", "\n", "        ", "h", ".", "acc_train_list", ".", "append", "(", "res_train", ".", "acc", ")", "\n", "h", ".", "nmi_train_list", ".", "append", "(", "res_train", ".", "nmi", ")", "\n", "h", ".", "recallK_train_list", ".", "append", "(", "res_train", ".", "recallK", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.base.BaseDataset.__init__": [[11, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "classes", ",", "transform", "=", "None", ",", "img_size", "=", "224", ")", ":", "\n", "        ", "self", ".", "classes", "=", "classes", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "img_size", "=", "(", "img_size", ",", "img_size", ")", "\n", "self", ".", "ys", ",", "self", ".", "im_paths", ",", "self", ".", "I", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "raw_image_flag", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.base.BaseDataset.nb_classes": [[20, 23], ["len", "set", "set"], "methods", ["None"], ["", "def", "nb_classes", "(", "self", ")", ":", "\n", "        ", "assert", "set", "(", "self", ".", "ys", ")", "==", "set", "(", "self", ".", "classes", ")", "\n", "return", "len", "(", "self", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.base.BaseDataset.__len__": [[24, 26], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.base.BaseDataset.__getitem__": [[27, 39], ["PIL.Image.open", "len", "base.BaseDataset.convert", "numpy.asarray", "base.BaseDataset.transform", "list", "base.BaseDataset.resize", "base.BaseDataset.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "im", "=", "PIL", ".", "Image", ".", "open", "(", "self", ".", "im_paths", "[", "index", "]", ")", "\n", "# convert gray to rgb", "\n", "if", "len", "(", "list", "(", "im", ".", "split", "(", ")", ")", ")", "==", "1", ":", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "if", "(", "self", ".", "raw_image_flag", ")", ":", "\n", "            ", "raw_image", "=", "np", ".", "asarray", "(", "im", ".", "resize", "(", "self", ".", "img_size", ")", ")", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "im", "=", "self", ".", "transform", "(", "im", ")", "\n", "", "if", "(", "self", ".", "raw_image_flag", ")", ":", "\n", "            ", "return", "im", ",", "self", ".", "ys", "[", "index", "]", ",", "index", ",", "raw_image", "\n", "", "else", ":", "\n", "            ", "return", "im", ",", "self", ".", "ys", "[", "index", "]", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.base.BaseDataset.get_label": [[41, 43], ["None"], "methods", ["None"], ["", "", "def", "get_label", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "ys", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.base.BaseDataset.set_subset": [[44, 48], ["None"], "methods", ["None"], ["", "def", "set_subset", "(", "self", ",", "I", ")", ":", "\n", "        ", "self", ".", "ys", "=", "[", "self", ".", "ys", "[", "i", "]", "for", "i", "in", "I", "]", "\n", "self", ".", "I", "=", "[", "self", ".", "I", "[", "i", "]", "for", "i", "in", "I", "]", "\n", "self", ".", "im_paths", "=", "[", "self", ".", "im_paths", "[", "i", "]", "for", "i", "in", "I", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.flowers102.Flowers102.__init__": [[7, 22], ["base.BaseDataset.__init__", "os.path.join", "os.listdir", "int", "len", "list", "os.path.join", "range", "os.listdir", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "classes", ",", "transform", "=", "None", ")", ":", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "root", ",", "classes", ",", "transform", ")", "\n", "image_dir", "=", "path", ".", "join", "(", "root", ",", "'train'", ")", "\n", "self", ".", "im_paths", ",", "self", ".", "ys", "=", "[", "]", ",", "[", "]", "\n", "sub_folders", "=", "listdir", "(", "image_dir", ")", "\n", "index", "=", "0", "\n", "for", "d", "in", "sub_folders", ":", "\n", "            ", "y", "=", "int", "(", "d", ")", "-", "1", "\n", "if", "(", "y", "in", "classes", ")", ":", "\n", "                ", "fnames", "=", "[", "path", ".", "join", "(", "image_dir", ",", "d", ",", "file", ")", "for", "file", "in", "listdir", "(", "path", ".", "join", "(", "image_dir", ",", "d", ")", ")", "]", "\n", "self", ".", "im_paths", "+=", "fnames", "\n", "m", "=", "len", "(", "fnames", ")", "\n", "self", ".", "ys", "+=", "(", "[", "y", "]", "*", "m", ")", "\n", "self", ".", "I", "+=", "list", "(", "range", "(", "index", ",", "index", "+", "m", ")", ")", "\n", "index", "+=", "m", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.cars.Cars.__init__": [[6, 19], ["base.BaseDataset.__init__", "scipy.io.loadmat", "zip", "os.path.join", "int", "scipy.io.loadmat.Cars.im_paths.append", "scipy.io.loadmat.Cars.ys.append", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "classes", ",", "transform", "=", "None", ")", ":", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "root", ",", "classes", ",", "transform", ")", "\n", "annos_fn", "=", "'cars_annos.mat'", "\n", "cars", "=", "scipy", ".", "io", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "annos_fn", ")", ")", "\n", "ys", "=", "[", "int", "(", "a", "[", "5", "]", "[", "0", "]", "-", "1", ")", "for", "a", "in", "cars", "[", "'annotations'", "]", "[", "0", "]", "]", "\n", "im_paths", "=", "[", "a", "[", "0", "]", "[", "0", "]", "for", "a", "in", "cars", "[", "'annotations'", "]", "[", "0", "]", "]", "\n", "index", "=", "0", "\n", "for", "im_path", ",", "y", "in", "zip", "(", "im_paths", ",", "ys", ")", ":", "\n", "            ", "if", "y", "in", "classes", ":", "# choose only specified classes", "\n", "                ", "self", ".", "im_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "im_path", ")", ")", "\n", "self", ".", "ys", ".", "append", "(", "y", ")", "\n", "self", ".", "I", "+=", "[", "index", "]", "\n", "index", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.cub.CUBirds.__init__": [[4, 19], ["base.BaseDataset.__init__", "torchvision.datasets.ImageFolder", "os.path.split", "cub.CUBirds.im_paths.append", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "classes", ",", "transform", "=", "None", ")", ":", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "root", ",", "classes", ",", "transform", ")", "\n", "\n", "index", "=", "0", "\n", "for", "i", "in", "torchvision", ".", "datasets", ".", "ImageFolder", "(", "root", "=", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "'images'", ")", ")", ".", "imgs", ":", "\n", "# i[1]: label, i[0]: root", "\n", "            ", "y", "=", "i", "[", "1", "]", "\n", "# fn needed for removing non-images starting with `._`", "\n", "fn", "=", "os", ".", "path", ".", "split", "(", "i", "[", "0", "]", ")", "[", "1", "]", "\n", "if", "y", "in", "self", ".", "classes", "and", "fn", "[", ":", "2", "]", "!=", "'._'", ":", "\n", "                ", "self", ".", "ys", "+=", "[", "y", "]", "\n", "self", ".", "I", "+=", "[", "index", "]", "\n", "self", ".", "im_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "i", "[", "0", "]", ")", ")", "\n", "index", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.cats_dogs.CatsDogs.__init__": [[7, 24], ["base.BaseDataset.__init__", "os.path.join", "open", "os.path.join", "line.startswith", "line.split", "int", "cats_dogs.CatsDogs.im_paths.append", "cats_dogs.CatsDogs.ys.append", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "classes", ",", "transform", "=", "None", ")", ":", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "root", ",", "classes", ",", "transform", ")", "\n", "annot", "=", "'annotations'", "\n", "image_dir", "=", "path", ".", "join", "(", "root", ",", "'images'", ")", "\n", "self", ".", "im_paths", ",", "self", ".", "ys", "=", "[", "]", ",", "[", "]", "\n", "f", "=", "open", "(", "path", ".", "join", "(", "root", ",", "annot", ",", "'list.txt'", ")", ",", "encoding", "=", "'utf8'", ")", "\n", "index", "=", "0", "\n", "for", "line", "in", "f", ":", "\n", "            ", "if", "(", "line", ".", "startswith", "(", "'#'", ")", ")", ":", "\n", "                ", "continue", "\n", "", "values", "=", "line", ".", "split", "(", ")", "\n", "y", "=", "int", "(", "values", "[", "1", "]", ")", "-", "1", "\n", "if", "y", "in", "classes", ":", "\n", "                ", "self", ".", "im_paths", ".", "append", "(", "path", ".", "join", "(", "image_dir", ",", "values", "[", "0", "]", "+", "'.jpg'", ")", ")", "\n", "self", ".", "ys", ".", "append", "(", "y", ")", "\n", "self", ".", "I", "+=", "[", "index", "]", "\n", "index", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.__init__.load": [[21, 25], ["None"], "function", ["None"], ["def", "load", "(", "name", ",", "root", ",", "classes", ",", "transform", "=", "None", ",", "img_size", "=", "224", ")", ":", "\n", "    ", "ds", "=", "_type", "[", "name", "]", "(", "root", "=", "root", ",", "classes", "=", "classes", ",", "transform", "=", "transform", ")", "\n", "ds", ".", "name", "=", "name", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.__init__.load_ds": [[27, 46], ["__init__.load", "__init__.load", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "hasattr", "hasattr", "utils.make_transform", "utils.make_transform"], "function", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.__init__.load", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.__init__.load", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.utils.make_transform", "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.utils.make_transform"], ["", "def", "load_ds", "(", "params", ",", "config", ")", ":", "\n", "    ", "data_path", "=", "config", "[", "'dataset'", "]", "[", "params", ".", "ds", "]", "[", "'root'", "]", "\n", "if", "not", "hasattr", "(", "params", ",", "'train_classes'", ")", ":", "\n", "        ", "params", ".", "train_classes", "=", "config", "[", "'dataset'", "]", "[", "params", ".", "ds", "]", "[", "'classes'", "]", "[", "'train'", "]", "\n", "", "if", "not", "hasattr", "(", "params", ",", "'test_classes'", ")", ":", "\n", "        ", "params", ".", "test_classes", "=", "config", "[", "'dataset'", "]", "[", "params", ".", "ds", "]", "[", "'classes'", "]", "[", "'eval'", "]", "\n", "\n", "", "img_size", "=", "config", "[", "'transform_parameters'", "]", "[", "'sz_crop'", "]", "\n", "ds_train", "=", "load", "(", "params", ".", "ds", ",", "data_path", ",", "classes", "=", "params", ".", "train_classes", ",", "img_size", "=", "img_size", ",", "\n", "transform", "=", "utils", ".", "make_transform", "(", "**", "config", "[", "'transform_parameters'", "]", ")", ")", "\n", "\n", "ds_test", "=", "load", "(", "params", ".", "ds", ",", "data_path", ",", "classes", "=", "params", ".", "test_classes", ",", "img_size", "=", "img_size", ",", "\n", "transform", "=", "utils", ".", "make_transform", "(", "**", "config", "[", "'transform_parameters'", "]", ",", "is_train", "=", "False", ")", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "ds_train", ",", "batch_size", "=", "params", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "ds_test", ",", "batch_size", "=", "params", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "", "", ""]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.utils.Identity.__call__": [[21, 23], ["None"], "methods", ["None"], ["        ", "if", "isinstance", "(", "x", ",", "range", ")", ":", "\n", "            ", "return", "'range({}, {})'", ".", "format", "(", "x", ".", "start", ",", "x", ".", "stop", ")", "\n", "", "if", "not", "isinstance", "(", "x", ",", "(", "int", ",", "str", ",", "list", ",", "float", ",", "bool", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.utils.RGBToBGR.__call__": [[26, 32], ["PIL.Image.merge", "PIL.Image.merge.getchannel", "range"], "methods", ["None"], ["\n", "\n", "", "", "def", "load_config", "(", "config_name", "=", "'config.json'", ")", ":", "\n", "    ", "config", "=", "json", ".", "load", "(", "open", "(", "config_name", ")", ")", "\n", "def", "eval_json", "(", "config", ")", ":", "\n", "        ", "for", "k", "in", "config", ":", "\n", "            ", "if", "type", "(", "config", "[", "k", "]", ")", "!=", "dict", ":", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.utils.ScaleIntensities.__init__": [[35, 39], ["None"], "methods", ["None"], ["                ", "eval_json", "(", "config", "[", "k", "]", ")", "\n", "", "", "", "eval_json", "(", "config", ")", "\n", "return", "config", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.utils.ScaleIntensities.__oldcall__": [[40, 43], ["tensor.mul_"], "methods", ["None"], ["", "def", "reset_rng", "(", "seed", ")", ":", "\n", "    ", "seed", "=", "0", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.utils.ScaleIntensities.__call__": [[44, 53], ["None"], "methods", ["None"], ["torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# set random seed for all gpus", "\n", "\n", "\n", "", "", "def", "set_requires_grad", "(", "model", ",", "requires_grad", "=", "True", ")", ":", "\n", "    ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.utils.std_per_channel": [[10, 13], ["torch.stack", "torch.stack.view().std", "torch.stack.view"], "function", ["None"], ["\n", "\n", "# __repr__ may contain `\\n`, json replaces it by `\\\\n` + indent", "\n", "json_dumps", "=", "lambda", "**", "kwargs", ":", "json", ".", "dumps", "(", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.utils.mean_per_channel": [[15, 18], ["torch.stack", "torch.stack.view().mean", "torch.stack.view"], "function", ["None"], [")", ".", "replace", "(", "'\\\\n'", ",", "'\\n    '", ")", "\n", "\n", "\n", "class", "JSONEncoder", "(", "json", ".", "JSONEncoder", ")", ":", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.utils.make_transform": [[54, 70], ["torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "utils.RGBToBGR", "utils.Identity", "torchvision.transforms.RandomResizedCrop", "utils.Identity", "torchvision.transforms.Resize", "utils.Identity", "torchvision.transforms.CenterCrop", "utils.Identity", "torchvision.transforms.RandomHorizontalFlip", "utils.Identity", "utils.ScaleIntensities", "utils.Identity"], "function", ["None"], ["", "", "def", "check_save", "(", "best_score", ",", "h", ",", "params", ",", "alg", "=", "None", ",", "model", "=", "None", ",", "plot_train", "=", "True", ")", ":", "\n", "    ", "recall1_list", "=", "np", ".", "array", "(", "h", ".", "recallK_list", ")", "[", ":", ",", "0", "]", "\n", "best_epoch", "=", "np", ".", "argmax", "(", "recall1_list", ")", "\n", "best_recall1", "=", "recall1_list", "[", "best_epoch", "]", "\n", "if", "alg", "is", "None", ":", "\n", "        ", "alg", "=", "params", ".", "alg", "\n", "\n", "", "if", "(", "best_recall1", ">", "best_score", ")", ":", "\n", "        ", "best_Res", "=", "Struct", "(", ")", "\n", "best_Res", ".", "epoch", ",", "best_Res", ".", "nmi", "=", "best_epoch", ",", "h", ".", "nmi_list", "[", "best_epoch", "]", "\n", "best_Res", ".", "recallK", ",", "best_Res", ".", "acc", "=", "h", ".", "recallK_list", "[", "best_epoch", "]", ",", "h", ".", "acc_list", "[", "best_epoch", "]", "\n", "save_res", "(", "params", ".", "ds", ",", "alg", ",", "best_recall1", ",", "params", ",", "best_Res", ",", "h", ")", "\n", "print_params", "(", "params", ")", "\n", "print_res", "(", "best_recall1", ",", "best_Res", ")", "\n", "plot_NMI_Recall", "(", "params", ".", "ds", ",", "h", ",", "save_flag", "=", "True", ",", "alg", "=", "alg", ",", "plot_train", "=", "plot_train", ")", "\n", "if", "model", "is", "not", "None", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'./saved_models/%s__%s_%0.2f.mdl'", "%", "(", "alg", ",", "params", ".", "ds", ",", "best_recall1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.sop.SOProducts.__init__": [[7, 44], ["base.BaseDataset.__init__", "range", "range", "open", "f.readline", "map", "os.path.join", "sop.SOProducts.im_paths.append", "sop.SOProducts.ys.append", "int", "os.path.join", "type", "type", "int"], "methods", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "classes", ",", "transform", "=", "None", ")", ":", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "root", ",", "classes", ",", "transform", ")", "\n", "\n", "classes_train", "=", "range", "(", "0", ",", "11318", ")", "\n", "classes_test", "=", "range", "(", "11318", ",", "22634", ")", "\n", "\n", "if", "classes", ".", "start", "in", "classes_train", ":", "\n", "            ", "if", "classes", ".", "stop", "-", "1", "in", "classes_train", ":", "\n", "                ", "train", "=", "True", "\n", "\n", "", "", "if", "classes", ".", "start", "in", "classes_test", ":", "\n", "            ", "if", "classes", ".", "stop", "-", "1", "in", "classes_test", ":", "\n", "                ", "train", "=", "False", "\n", "\n", "", "", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "root", ",", "\n", "'Ebay_{}.txt'", ".", "format", "(", "'train'", "if", "train", "else", "'test'", ")", "\n", ")", "\n", ")", "as", "f", ":", "\n", "\n", "            ", "f", ".", "readline", "(", ")", "\n", "index", "=", "0", "\n", "nb_images", "=", "0", "\n", "\n", "for", "(", "image_id", ",", "class_id", ",", "_", ",", "path", ")", "in", "map", "(", "str", ".", "split", ",", "f", ")", ":", "\n", "                ", "nb_images", "+=", "1", "\n", "if", "int", "(", "class_id", ")", "-", "1", "in", "classes", ":", "\n", "                    ", "self", ".", "im_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "path", ")", ")", "\n", "self", ".", "ys", ".", "append", "(", "int", "(", "class_id", ")", "-", "1", ")", "\n", "self", ".", "I", "+=", "[", "index", "]", "\n", "index", "+=", "1", "\n", "\n", "", "", "if", "train", ":", "\n", "                ", "assert", "nb_images", "==", "type", "(", "self", ")", ".", "nb_train_all", "\n", "", "else", ":", "\n", "                ", "assert", "nb_images", "==", "type", "(", "self", ")", ".", "nb_test_all", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Result.get_bestRes": [[5, 23], ["os.listdir", "f.lower().startswith", "alg.lower", "f.lower", "open", "pickle.load", "os.path.join"], "function", ["home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.dataset.__init__.load"], ["def", "get_bestRes", "(", "ds", ",", "alg", ",", "path_res", "=", "None", ")", ":", "\n", "    ", "if", "(", "path_res", "is", "None", ")", ":", "\n", "        ", "path_res", "=", "'.\\\\Res_'", "\n", "\n", "", "dir_name", "=", "path_res", "+", "ds", "\n", "file_names", "=", "listdir", "(", "dir_name", ")", "\n", "best_score", ",", "bestParams", ",", "best_resInfo", ",", "hist_best", "=", "0", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "f", "in", "file_names", ":", "\n", "        ", "if", "(", "f", ".", "lower", "(", ")", ".", "startswith", "(", "alg", ".", "lower", "(", ")", ")", ")", ":", "\n", "            ", "with", "open", "(", "path", ".", "join", "(", "dir_name", ",", "f", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "                ", "score", ",", "params", ",", "res_info", ",", "hist", "=", "pickle", ".", "load", "(", "file", ")", "\n", "", "if", "(", "score", ">", "best_score", ")", ":", "\n", "                ", "best_score", "=", "score", "\n", "bestParams", "=", "params", "\n", "best_resInfo", "=", "res_info", "\n", "hist_best", "=", "hist", "\n", "\n", "", "", "", "return", "best_score", ",", "bestParams", ",", "best_resInfo", ",", "hist_best", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Result.print_params": [[25, 31], ["print", "print", "hasattr", "textwrap.fill", "print", "print", "str", "textwrap.fill", "str"], "function", ["None"], ["", "def", "print_params", "(", "params", ")", ":", "\n", "    ", "print", "(", "'params:'", ")", "\n", "print", "(", "textwrap", ".", "fill", "(", "str", "(", "params", ".", "__dict__", ")", ",", "width", "=", "150", ")", ")", "\n", "if", "hasattr", "(", "params", ",", "'load_options'", ")", ":", "\n", "        ", "print", "(", "'load data options:'", ")", "\n", "print", "(", "textwrap", ".", "fill", "(", "str", "(", "params", ".", "load_options", ".", "__dict__", ")", ",", "width", "=", "150", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Result.save_res": [[33, 42], ["hasattr", "hasattr", "open", "pickle.dump"], "function", ["None"], ["", "", "def", "save_res", "(", "ds", ",", "alg", ",", "best_score", ",", "params", ",", "res", ",", "hist", ")", ":", "\n", "    ", "file_name", "=", "'.\\\\Res_%s\\\\%s__%s_%0.2f.res'", "%", "(", "ds", ",", "alg", ",", "ds", ",", "best_score", ")", "\n", "if", "hasattr", "(", "params", ",", "'a'", ")", ":", "\n", "        ", "del", "params", ".", "a", "\n", "", "if", "hasattr", "(", "params", ",", "'preds'", ")", ":", "\n", "        ", "del", "params", ".", "preds", "\n", "\n", "", "with", "open", "(", "file_name", ",", "'wb'", ")", "as", "f", ":", "# wb: open binary file for writing", "\n", "        ", "pickle", ".", "dump", "(", "[", "best_score", ",", "params", ",", "res", ",", "hist", "]", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.d-zabihzadeh_DML-Ensemble-of-Losses.commons.Struct.Struct.__init__": [[3, 4], ["Struct.Struct.__dict__.update"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "entries", ")", ":", "self", ".", "__dict__", ".", "update", "(", "entries", ")", "", "", ""]]}