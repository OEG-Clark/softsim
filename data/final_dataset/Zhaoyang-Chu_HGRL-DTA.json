{"home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.train_test_S3.create_dataset_for_train_test": [[11, 70], ["json.load", "range", "numpy.where", "utils.DTADataset", "numpy.where", "utils.DTADataset", "GraphInput.getAffinityGraph", "json.load", "numpy.array", "numpy.array", "dict", "dict", "GraphInput.getTargetMolecularGraph", "GraphInput.getTargetMolecularGraph", "numpy.loadtxt", "len", "numpy.full", "numpy.arange", "numpy.expand_dims", "numpy.expand_dims", "GraphInput.getDrugMolecularGraph", "open", "len", "json.load", "json.load", "open", "list", "list", "zip", "zip", "numpy.argpartition", "numpy.sum", "json.load", "open", "open", "json.load", "json.load", "numpy.isnan", "numpy.isnan", "json.load.keys", "json.load.values", "open", "open", "open", "numpy.isnan", "numpy.tile().transpose", "numpy.tile", "numpy.expand_dims", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getAffinityGraph", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getTargetMolecularGraph", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getTargetMolecularGraph", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getDrugMolecularGraph"], ["def", "create_dataset_for_train_test", "(", "affinity", ",", "dataset", ",", "fold", ",", "weighted", ",", "drug_aff_k", ",", "target_aff_k", ",", "target_sim_k", ")", ":", "\n", "# load dataset", "\n", "    ", "dataset_path", "=", "'data/'", "+", "dataset", "+", "'/'", "\n", "\n", "target_train_fold_origin", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S3_train_set.txt'", ")", ")", "\n", "target_train_folds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "target_train_fold_origin", ")", ")", ":", "\n", "        ", "if", "i", "!=", "fold", ":", "\n", "            ", "target_train_folds", "+=", "target_train_fold_origin", "[", "i", "]", "\n", "", "", "target_test_fold", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S3_test_set.txt'", ")", ")", "if", "fold", "==", "-", "100", "else", "target_train_fold_origin", "[", "fold", "]", "\n", "target_mask_fold", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S3_mask_set.txt'", ")", ")", "if", "fold", "==", "-", "100", "else", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S3_test_set.txt'", ")", ")", "+", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S3_mask_set.txt'", ")", ")", "\n", "\n", "# train set and test set", "\n", "train_affinity", "=", "affinity", "[", ":", ",", "target_train_folds", "]", "\n", "test_affinity", "=", "affinity", "[", ":", ",", "target_test_fold", "]", "\n", "\n", "train_rows", ",", "train_cols", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "train_affinity", ")", "==", "False", ")", "\n", "train_Y", "=", "train_affinity", "[", "train_rows", ",", "train_cols", "]", "\n", "train_dataset", "=", "DTADataset", "(", "drug_ids", "=", "train_rows", ",", "target_ids", "=", "train_cols", ",", "y", "=", "train_Y", ")", "\n", "\n", "test_rows", ",", "test_cols", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "test_affinity", ")", "==", "False", ")", "\n", "test_Y", "=", "test_affinity", "[", "test_rows", ",", "test_cols", "]", "\n", "test_dataset", "=", "DTADataset", "(", "drug_ids", "=", "test_rows", ",", "target_ids", "=", "test_cols", ",", "y", "=", "test_Y", ")", "\n", "\n", "train_affinity", "[", "np", ".", "isnan", "(", "train_affinity", ")", "==", "True", "]", "=", "0", "\n", "affinity_graph", "=", "getAffinityGraph", "(", "dataset", ",", "train_affinity", ",", "weighted", ",", "drug_aff_k", ",", "target_aff_k", ")", "\n", "\n", "# target molecular graphs", "\n", "targets", "=", "json", ".", "load", "(", "open", "(", "f'data/{dataset}/targets.txt'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "target_keys", "=", "np", ".", "array", "(", "list", "(", "targets", ".", "keys", "(", ")", ")", ")", "\n", "target_values", "=", "np", ".", "array", "(", "list", "(", "targets", ".", "values", "(", ")", ")", ")", "\n", "train_target_keys", "=", "target_keys", "[", "target_train_folds", "]", "\n", "train_target_values", "=", "target_values", "[", "target_train_folds", "]", "\n", "train_targets", "=", "dict", "(", "zip", "(", "train_target_keys", ",", "train_target_values", ")", ")", "\n", "test_target_keys", "=", "target_keys", "[", "target_test_fold", "]", "\n", "test_target_values", "=", "target_values", "[", "target_test_fold", "]", "\n", "test_targets", "=", "dict", "(", "zip", "(", "test_target_keys", ",", "test_target_values", ")", ")", "\n", "\n", "train_target_graphs_dict", "=", "getTargetMolecularGraph", "(", "train_targets", ",", "dataset", ")", "\n", "test_target_graphs_dict", "=", "getTargetMolecularGraph", "(", "test_targets", ",", "dataset", ")", "\n", "\n", "target_sim", "=", "np", ".", "loadtxt", "(", "f\"data/{dataset}/target-target-sim.txt\"", ",", "delimiter", "=", "\",\"", ")", "\n", "target_test_train_sim", "=", "target_sim", "[", "target_test_fold", ",", ":", "]", "\n", "target_test_train_sim", "[", ":", ",", "target_test_fold", "+", "target_mask_fold", "]", "=", "-", "1", "\n", "\n", "target_count", "=", "affinity", ".", "shape", "[", "1", "]", "\n", "target_train_count", "=", "len", "(", "target_train_folds", ")", "\n", "target_test_train_map", "=", "np", ".", "argpartition", "(", "target_test_train_sim", ",", "-", "target_sim_k", ",", "1", ")", "[", ":", ",", "-", "target_sim_k", ":", "]", "\n", "target_train_map", "=", "np", ".", "full", "(", "target_count", ",", "-", "1", ")", "\n", "target_train_map", "[", "target_train_folds", "]", "=", "np", ".", "arange", "(", "target_train_count", ")", "\n", "target_test_map", "=", "target_train_map", "[", "target_test_train_map", "]", "\n", "\n", "target_test_map_weight", "=", "target_test_train_sim", "[", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "target_test_train_sim", ".", "shape", "[", "0", "]", ")", ",", "0", ")", ",", "(", "target_sim_k", ",", "1", ")", ")", ".", "transpose", "(", ")", ",", "target_test_train_map", "]", "\n", "target_test_map_weight_sum", "=", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "target_test_map_weight", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "target_test_map_weight_norm", "=", "np", ".", "expand_dims", "(", "target_test_map_weight", "/", "target_test_map_weight_sum", ",", "axis", "=", "2", ")", "\n", "\n", "drug_graphs_dict", "=", "getDrugMolecularGraph", "(", "json", ".", "load", "(", "open", "(", "f'data/{dataset}/drugs.txt'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", ")", "\n", "\n", "return", "train_dataset", ",", "test_dataset", ",", "affinity_graph", ",", "drug_graphs_dict", ",", "train_target_graphs_dict", ",", "test_target_graphs_dict", ",", "target_count", ",", "target_test_map", ",", "target_test_map_weight_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.train_test_S3.train_test": [[72, 160], ["utils.argparser", "print", "print", "print", "print", "print", "print", "utils.read_data", "train_test_S3.create_dataset_for_train_test", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "utils.GraphDataset", "torch.utils.data.DataLoader", "utils.GraphDataset", "torch.utils.data.DataLoader", "utils.GraphDataset", "torch.utils.data.DataLoader", "torch.device", "Architecture", "Architecture.to", "model.Predictor", "model.Predictor.to", "print", "range", "print", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "utils.train", "utils.predicting", "metrics.model_evaluate", "torch.save", "torch.save", "print", "utils.predicting", "metrics.model_evaluate", "print", "print", "print", "torch.cuda.is_available", "torch.save", "torch.save", "Architecture.state_dict", "model.Predictor.state_dict", "torch.FloatTensor().to", "Architecture.state_dict", "model.Predictor.state_dict", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.argparser", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.data.degrees.read_data", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.train_test_S2.create_dataset_for_train_test", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.train", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.predicting", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.model_evaluate", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.predicting", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.model_evaluate"], ["", "def", "train_test", "(", ")", ":", "\n", "\n", "    ", "FLAGS", "=", "argparser", "(", ")", "\n", "\n", "dataset", "=", "FLAGS", ".", "dataset", "\n", "cuda_name", "=", "f'cuda:{FLAGS.cuda_id}'", "\n", "TRAIN_BATCH_SIZE", "=", "FLAGS", ".", "batch_size", "\n", "TEST_BATCH_SIZE", "=", "FLAGS", ".", "batch_size", "\n", "NUM_EPOCHS", "=", "FLAGS", ".", "num_epochs", "\n", "LR", "=", "FLAGS", ".", "lr", "\n", "Architecture", "=", "[", "ConvNet", ",", "FirstVariantOfConvNet", ",", "SecondVariantOfConvNet", ",", "ThirdVariantOfConvNet", "]", "[", "FLAGS", ".", "model", "]", "\n", "model_name", "=", "Architecture", ".", "__name__", "\n", "fold", "=", "FLAGS", ".", "fold", "\n", "if", "fold", "!=", "-", "100", ":", "\n", "        ", "model_name", "+=", "f\"-{FLAGS.target_sim_k}-{fold}\"", "\n", "\n", "", "print", "(", "\"Dataset:\"", ",", "dataset", ")", "\n", "print", "(", "\"Cuda name:\"", ",", "cuda_name", ")", "\n", "print", "(", "\"Epochs:\"", ",", "NUM_EPOCHS", ")", "\n", "print", "(", "\"Learning rate:\"", ",", "LR", ")", "\n", "print", "(", "\"Model name:\"", ",", "model_name", ")", "\n", "print", "(", "\"Train and test\"", ")", "if", "fold", "==", "-", "100", "else", "print", "(", "\"Fold of 5-CV:\"", ",", "fold", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "f\"models/architecture/{dataset}/S3/cross_validation/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/architecture/{dataset}/S3/cross_validation/\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"models/predictor/{dataset}/S3/cross_validation/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/predictor/{dataset}/S3/cross_validation/\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"models/architecture/{dataset}/S3/test/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/architecture/{dataset}/S3/test/\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"models/predictor/{dataset}/S3/test/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/predictor/{dataset}/S3/test/\"", ")", "\n", "\n", "", "print", "(", "\"create dataset ...\"", ")", "\n", "affinity", "=", "read_data", "(", "dataset", ")", "\n", "train_data", ",", "test_data", ",", "affinity_graph", ",", "drug_graphs_dict", ",", "train_target_graphs_dict", ",", "test_target_graphs_dict", ",", "target_count", ",", "target_test_map", ",", "target_test_map_weight_norm", "=", "create_dataset_for_train_test", "(", "affinity", ",", "dataset", ",", "fold", ",", "FLAGS", ".", "weighted", ",", "FLAGS", ".", "drug_aff_k", ",", "FLAGS", ".", "target_aff_k", ",", "FLAGS", ".", "target_sim_k", ")", "\n", "print", "(", "\"create train_loader and test_loader ...\"", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "TRAIN_BATCH_SIZE", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "collate", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "batch_size", "=", "TEST_BATCH_SIZE", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ")", "\n", "\n", "print", "(", "\"create drug_graphs_DataLoader and target_graphs_DataLoader ...\"", ")", "\n", "drug_graphs_Data", "=", "GraphDataset", "(", "graphs_dict", "=", "drug_graphs_dict", ",", "dttype", "=", "\"drug\"", ")", "\n", "drug_graphs_DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "drug_graphs_Data", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ",", "batch_size", "=", "affinity_graph", ".", "num_node1s", ")", "\n", "train_target_graphs_Data", "=", "GraphDataset", "(", "graphs_dict", "=", "train_target_graphs_dict", ",", "dttype", "=", "\"target\"", ")", "\n", "train_target_graphs_DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_target_graphs_Data", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ",", "batch_size", "=", "affinity_graph", ".", "num_node2s", ")", "\n", "test_target_graphs_Data", "=", "GraphDataset", "(", "graphs_dict", "=", "test_target_graphs_dict", ",", "dttype", "=", "\"target\"", ")", "\n", "test_target_graphs_DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_target_graphs_Data", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ",", "batch_size", "=", "target_count", "-", "affinity_graph", ".", "num_node2s", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "cuda_name", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "architecture", "=", "Architecture", "(", "ag_init_dim", "=", "affinity_graph", ".", "num_node1s", "+", "affinity_graph", ".", "num_node2s", "+", "2", ",", "skip", "=", "True", ")", "\n", "architecture", ".", "to", "(", "device", ")", "\n", "\n", "predictor", "=", "Predictor", "(", "embedding_dim", "=", "architecture", ".", "output_dim", ")", "\n", "predictor", ".", "to", "(", "device", ")", "\n", "\n", "if", "fold", "!=", "-", "100", ":", "\n", "        ", "best_result", "=", "[", "1000", "]", "\n", "", "print", "(", "\"start training ...\"", ")", "\n", "for", "epoch", "in", "range", "(", "NUM_EPOCHS", ")", ":", "\n", "        ", "train", "(", "architecture", ",", "predictor", ",", "device", ",", "train_loader", ",", "drug_graphs_DataLoader", ",", "train_target_graphs_DataLoader", ",", "LR", ",", "epoch", "+", "1", ",", "TRAIN_BATCH_SIZE", ",", "affinity_graph", ")", "\n", "G", ",", "P", "=", "predicting", "(", "architecture", ",", "predictor", ",", "device", ",", "test_loader", ",", "drug_graphs_DataLoader", ",", "test_target_graphs_DataLoader", ",", "affinity_graph", ",", "target_map", "=", "target_test_map", ",", "target_map_weight", "=", "torch", ".", "FloatTensor", "(", "target_test_map_weight_norm", ")", ".", "to", "(", "device", ")", ")", "\n", "result", "=", "model_evaluate", "(", "G", ",", "P", ",", "dataset", ")", "\n", "if", "fold", "!=", "-", "100", "and", "result", "[", "0", "]", "<", "best_result", "[", "0", "]", ":", "\n", "            ", "best_result", "=", "result", "\n", "checkpoint_dir", "=", "f\"models/architecture/{dataset}/S3/cross_validation/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "architecture", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "checkpoint_dir", "=", "f\"models/predictor/{dataset}/S3/cross_validation/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "predictor", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "", "", "if", "fold", "==", "-", "100", ":", "\n", "        ", "checkpoint_dir", "=", "f\"models/architecture/{dataset}/S3/test/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "architecture", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "checkpoint_dir", "=", "f\"models/predictor/{dataset}/S3/test/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "predictor", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "print", "(", "'\\npredicting for test data'", ")", "\n", "G", ",", "P", "=", "predicting", "(", "architecture", ",", "predictor", ",", "device", ",", "test_loader", ",", "drug_graphs_DataLoader", ",", "test_target_graphs_DataLoader", ",", "affinity_graph", ",", "target_map", "=", "target_test_map", ",", "target_map_weight", "=", "torch", ".", "FloatTensor", "(", "target_test_map_weight_norm", ")", ".", "to", "(", "device", ")", ")", "\n", "result", "=", "model_evaluate", "(", "G", ",", "P", ",", "dataset", ")", "\n", "print", "(", "\"reslut:\"", ",", "result", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"\\nbest result for fold {fold} of cross validation:\"", ")", "\n", "print", "(", "\"reslut:\"", ",", "best_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.train_test_S1.create_dataset_for_train_test": [[11, 37], ["json.load", "range", "numpy.where", "utils.DTADataset", "utils.DTADataset", "numpy.zeros_like", "GraphInput.getAffinityGraph", "open", "len", "json.load", "open", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getAffinityGraph"], ["def", "create_dataset_for_train_test", "(", "affinity", ",", "dataset", ",", "fold", ",", "weighted", ",", "drug_aff_k", ",", "target_aff_k", ")", ":", "\n", "# load dataset", "\n", "    ", "dataset_path", "=", "'data/'", "+", "dataset", "+", "'/'", "\n", "\n", "train_fold_origin", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S1_train_set.txt'", ")", ")", "\n", "train_folds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "train_fold_origin", ")", ")", ":", "\n", "        ", "if", "i", "!=", "fold", ":", "\n", "            ", "train_folds", "+=", "train_fold_origin", "[", "i", "]", "\n", "", "", "test_fold", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S1_test_set.txt'", ")", ")", "if", "fold", "==", "-", "100", "else", "train_fold_origin", "[", "fold", "]", "\n", "\n", "rows", ",", "cols", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "affinity", ")", "==", "False", ")", "\n", "\n", "train_rows", ",", "train_cols", "=", "rows", "[", "train_folds", "]", ",", "cols", "[", "train_folds", "]", "\n", "train_Y", "=", "affinity", "[", "train_rows", ",", "train_cols", "]", "\n", "train_dataset", "=", "DTADataset", "(", "drug_ids", "=", "train_rows", ",", "target_ids", "=", "train_cols", ",", "y", "=", "train_Y", ")", "\n", "\n", "test_rows", ",", "test_cols", "=", "rows", "[", "test_fold", "]", ",", "cols", "[", "test_fold", "]", "\n", "test_Y", "=", "affinity", "[", "test_rows", ",", "test_cols", "]", "\n", "test_dataset", "=", "DTADataset", "(", "drug_ids", "=", "test_rows", ",", "target_ids", "=", "test_cols", ",", "y", "=", "test_Y", ")", "\n", "\n", "adj", "=", "np", ".", "zeros_like", "(", "affinity", ")", "\n", "adj", "[", "train_rows", ",", "train_cols", "]", "=", "train_Y", "\n", "affinity_graph", "=", "getAffinityGraph", "(", "dataset", ",", "adj", ",", "weighted", ",", "drug_aff_k", ",", "target_aff_k", ")", "\n", "\n", "return", "train_dataset", ",", "test_dataset", ",", "affinity_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.train_test_S1.train_test": [[39, 129], ["utils.argparser", "print", "print", "print", "print", "print", "print", "utils.read_data", "train_test_S1.create_dataset_for_train_test", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "GraphInput.getDrugMolecularGraph", "GraphInput.getTargetMolecularGraph", "print", "utils.GraphDataset", "torch.utils.data.DataLoader", "utils.GraphDataset", "torch.utils.data.DataLoader", "torch.device", "Architecture", "Architecture.to", "model.Predictor", "model.Predictor.to", "print", "range", "print", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "json.load", "json.load", "utils.train", "utils.predicting", "metrics.model_evaluate", "torch.save", "torch.save", "print", "utils.predicting", "metrics.model_evaluate", "print", "print", "print", "open", "open", "torch.cuda.is_available", "torch.save", "torch.save", "Architecture.state_dict", "model.Predictor.state_dict", "Architecture.state_dict", "model.Predictor.state_dict"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.argparser", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.data.degrees.read_data", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.train_test_S2.create_dataset_for_train_test", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getDrugMolecularGraph", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getTargetMolecularGraph", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.train", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.predicting", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.model_evaluate", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.predicting", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.model_evaluate"], ["", "def", "train_test", "(", ")", ":", "\n", "\n", "    ", "FLAGS", "=", "argparser", "(", ")", "\n", "\n", "dataset", "=", "FLAGS", ".", "dataset", "\n", "cuda_name", "=", "f'cuda:{FLAGS.cuda_id}'", "\n", "TRAIN_BATCH_SIZE", "=", "FLAGS", ".", "batch_size", "\n", "TEST_BATCH_SIZE", "=", "FLAGS", ".", "batch_size", "\n", "NUM_EPOCHS", "=", "FLAGS", ".", "num_epochs", "\n", "LR", "=", "FLAGS", ".", "lr", "\n", "Architecture", "=", "[", "ConvNet", ",", "FirstVariantOfConvNet", ",", "SecondVariantOfConvNet", ",", "ThirdVariantOfConvNet", "]", "[", "FLAGS", ".", "model", "]", "\n", "model_name", "=", "Architecture", ".", "__name__", "\n", "fold", "=", "FLAGS", ".", "fold", "\n", "if", "not", "FLAGS", ".", "weighted", ":", "\n", "        ", "model_name", "+=", "\"-noweight\"", "\n", "", "if", "fold", "!=", "-", "100", ":", "\n", "        ", "model_name", "+=", "f\"-{fold}\"", "\n", "\n", "", "print", "(", "\"Dataset:\"", ",", "dataset", ")", "\n", "print", "(", "\"Cuda name:\"", ",", "cuda_name", ")", "\n", "print", "(", "\"Epochs:\"", ",", "NUM_EPOCHS", ")", "\n", "print", "(", "\"Learning rate:\"", ",", "LR", ")", "\n", "print", "(", "\"Model name:\"", ",", "model_name", ")", "\n", "print", "(", "\"Train and test\"", ")", "if", "fold", "==", "-", "100", "else", "print", "(", "\"Fold of 5-CV:\"", ",", "fold", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "f\"models/architecture/{dataset}/S1/cross_validation/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/architecture/{dataset}/S1/cross_validation/\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"models/predictor/{dataset}/S1/cross_validation/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/predictor/{dataset}/S1/cross_validation/\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"models/architecture/{dataset}/S1/test/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/architecture/{dataset}/S1/test/\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"models/predictor/{dataset}/S1/test/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/predictor/{dataset}/S1/test/\"", ")", "\n", "\n", "", "print", "(", "\"create dataset ...\"", ")", "\n", "affinity", "=", "read_data", "(", "dataset", ")", "\n", "train_data", ",", "test_data", ",", "affinity_graph", "=", "create_dataset_for_train_test", "(", "affinity", ",", "dataset", ",", "fold", ",", "FLAGS", ".", "weighted", ",", "FLAGS", ".", "drug_aff_k", ",", "FLAGS", ".", "target_aff_k", ")", "\n", "print", "(", "\"create train_loader and test_loader ...\"", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "TRAIN_BATCH_SIZE", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "collate", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "batch_size", "=", "TEST_BATCH_SIZE", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ")", "\n", "\n", "print", "(", "\"create drug_graphs_dict and target_graphs_dict ...\"", ")", "\n", "drug_graphs_dict", "=", "getDrugMolecularGraph", "(", "json", ".", "load", "(", "open", "(", "f'data/{dataset}/drugs.txt'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", ")", "\n", "target_graphs_dict", "=", "getTargetMolecularGraph", "(", "json", ".", "load", "(", "open", "(", "f'data/{dataset}/targets.txt'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", ",", "dataset", ")", "\n", "print", "(", "\"create drug_graphs_DataLoader and target_graphs_DataLoader ...\"", ")", "\n", "drug_graphs_Data", "=", "GraphDataset", "(", "graphs_dict", "=", "drug_graphs_dict", ",", "dttype", "=", "\"drug\"", ")", "\n", "drug_graphs_DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "drug_graphs_Data", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ",", "batch_size", "=", "affinity_graph", ".", "num_node1s", ")", "# if memory is not enough, turn down the batch_size, e.g., batch_size=30", "\n", "target_graphs_Data", "=", "GraphDataset", "(", "graphs_dict", "=", "target_graphs_dict", ",", "dttype", "=", "\"target\"", ")", "\n", "target_graphs_DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "target_graphs_Data", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ",", "batch_size", "=", "affinity_graph", ".", "num_node2s", ")", "# if memory is not enough, turn down the batch_size, e.g., batch_size=100", "\n", "\n", "device", "=", "torch", ".", "device", "(", "cuda_name", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "architecture", "=", "Architecture", "(", "ag_init_dim", "=", "affinity_graph", ".", "num_node1s", "+", "affinity_graph", ".", "num_node2s", "+", "2", ",", "affinity_dropout_rate", "=", "FLAGS", ".", "dropedge_rate", ")", "\n", "architecture", ".", "to", "(", "device", ")", "\n", "\n", "predictor", "=", "Predictor", "(", "embedding_dim", "=", "architecture", ".", "output_dim", ")", "\n", "predictor", ".", "to", "(", "device", ")", "\n", "\n", "if", "fold", "!=", "-", "100", ":", "\n", "        ", "best_result", "=", "[", "1000", "]", "\n", "", "print", "(", "\"start training ...\"", ")", "\n", "for", "epoch", "in", "range", "(", "NUM_EPOCHS", ")", ":", "\n", "        ", "train", "(", "architecture", ",", "predictor", ",", "device", ",", "train_loader", ",", "drug_graphs_DataLoader", ",", "target_graphs_DataLoader", ",", "LR", ",", "epoch", "+", "1", ",", "TRAIN_BATCH_SIZE", ",", "affinity_graph", ")", "\n", "G", ",", "P", "=", "predicting", "(", "architecture", ",", "predictor", ",", "device", ",", "test_loader", ",", "drug_graphs_DataLoader", ",", "target_graphs_DataLoader", ",", "affinity_graph", ")", "\n", "result", "=", "model_evaluate", "(", "G", ",", "P", ",", "dataset", ")", "\n", "if", "fold", "!=", "-", "100", "and", "result", "[", "0", "]", "<", "best_result", "[", "0", "]", ":", "\n", "            ", "best_result", "=", "result", "\n", "checkpoint_dir", "=", "f\"models/architecture/{dataset}/S1/cross_validation/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "architecture", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "checkpoint_dir", "=", "f\"models/predictor/{dataset}/S1/cross_validation/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "predictor", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "", "", "if", "fold", "==", "-", "100", ":", "\n", "        ", "checkpoint_dir", "=", "f\"models/architecture/{dataset}/S1/test/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "architecture", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "checkpoint_dir", "=", "f\"models/predictor/{dataset}/S1/test/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "predictor", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "print", "(", "'\\npredicting for test data'", ")", "\n", "G", ",", "P", "=", "predicting", "(", "architecture", ",", "predictor", ",", "device", ",", "test_loader", ",", "drug_graphs_DataLoader", ",", "target_graphs_DataLoader", ",", "affinity_graph", ")", "\n", "result", "=", "model_evaluate", "(", "G", ",", "P", ",", "dataset", ")", "\n", "print", "(", "\"reslut:\"", ",", "result", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"\\nbest result for fold {fold} of cross validation:\"", ")", "\n", "print", "(", "\"reslut:\"", ",", "best_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.dic_normalize": [[11, 21], ["dic.keys", "float", "float", "max", "min"], "function", ["None"], ["def", "dic_normalize", "(", "dic", ")", ":", "\n", "# print(dic)", "\n", "    ", "max_value", "=", "dic", "[", "max", "(", "dic", ",", "key", "=", "dic", ".", "get", ")", "]", "\n", "min_value", "=", "dic", "[", "min", "(", "dic", ",", "key", "=", "dic", ".", "get", ")", "]", "\n", "# print(max_value)", "\n", "interval", "=", "float", "(", "max_value", ")", "-", "float", "(", "min_value", ")", "\n", "for", "key", "in", "dic", ".", "keys", "(", ")", ":", "\n", "        ", "dic", "[", "key", "]", "=", "(", "dic", "[", "key", "]", "-", "min_value", ")", "/", "interval", "\n", "", "dic", "[", "'X'", "]", "=", "(", "max_value", "+", "min_value", ")", "/", "2.0", "\n", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.residue_features": [[68, 77], ["numpy.array"], "function", ["None"], ["def", "residue_features", "(", "residue", ")", ":", "\n", "    ", "res_property1", "=", "[", "1", "if", "residue", "in", "pro_res_aliphatic_table", "else", "0", ",", "1", "if", "residue", "in", "pro_res_aromatic_table", "else", "0", ",", "\n", "1", "if", "residue", "in", "pro_res_polar_neutral_table", "else", "0", ",", "\n", "1", "if", "residue", "in", "pro_res_acidic_charged_table", "else", "0", ",", "\n", "1", "if", "residue", "in", "pro_res_basic_charged_table", "else", "0", "]", "\n", "res_property2", "=", "[", "res_weight_table", "[", "residue", "]", ",", "res_pka_table", "[", "residue", "]", ",", "res_pkb_table", "[", "residue", "]", ",", "res_pkx_table", "[", "residue", "]", ",", "\n", "res_pl_table", "[", "residue", "]", ",", "res_hydrophobic_ph2_table", "[", "residue", "]", ",", "res_hydrophobic_ph7_table", "[", "residue", "]", "]", "\n", "# print(np.array(res_property1 + res_property2).shape)", "\n", "return", "np", ".", "array", "(", "res_property1", "+", "res_property2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.atom_features": [[80, 91], ["numpy.array", "GraphInput.one_of_k_encoding_unk", "atom.GetIsAromatic", "GraphInput.one_of_k_encoding_unk", "atom.GetImplicitValence", "GraphInput.one_of_k_encoding_unk", "GraphInput.one_of_k_encoding", "atom.GetTotalNumHs", "atom.GetSymbol", "atom.GetDegree"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.one_of_k_encoding_unk", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.one_of_k_encoding_unk", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.one_of_k_encoding_unk", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.one_of_k_encoding"], ["", "def", "atom_features", "(", "atom", ")", ":", "\n", "# 44 +11 +11 +11 +1", "\n", "    ", "return", "np", ".", "array", "(", "one_of_k_encoding_unk", "(", "atom", ".", "GetSymbol", "(", ")", ",", "\n", "[", "'C'", ",", "'N'", ",", "'O'", ",", "'S'", ",", "'F'", ",", "'Si'", ",", "'P'", ",", "'Cl'", ",", "'Br'", ",", "'Mg'", ",", "'Na'", ",", "'Ca'", ",", "'Fe'", ",", "'As'", ",", "\n", "'Al'", ",", "'I'", ",", "'B'", ",", "'V'", ",", "'K'", ",", "'Tl'", ",", "'Yb'", ",", "'Sb'", ",", "'Sn'", ",", "'Ag'", ",", "'Pd'", ",", "'Co'", ",", "'Se'", ",", "\n", "'Ti'", ",", "'Zn'", ",", "'H'", ",", "'Li'", ",", "'Ge'", ",", "'Cu'", ",", "'Au'", ",", "'Ni'", ",", "'Cd'", ",", "'In'", ",", "'Mn'", ",", "'Zr'", ",", "'Cr'", ",", "\n", "'Pt'", ",", "'Hg'", ",", "'Pb'", ",", "'X'", "]", ")", "+", "\n", "one_of_k_encoding", "(", "atom", ".", "GetDegree", "(", ")", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", "]", ")", "+", "\n", "one_of_k_encoding_unk", "(", "atom", ".", "GetTotalNumHs", "(", ")", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", "]", ")", "+", "\n", "one_of_k_encoding_unk", "(", "atom", ".", "GetImplicitValence", "(", ")", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", "]", ")", "+", "\n", "[", "atom", ".", "GetIsAromatic", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.one_of_k_encoding": [[94, 99], ["list", "Exception", "map"], "function", ["None"], ["", "def", "one_of_k_encoding", "(", "x", ",", "allowable_set", ")", ":", "\n", "    ", "if", "x", "not", "in", "allowable_set", ":", "\n", "# print(x)", "\n", "        ", "raise", "Exception", "(", "'input {0} not in allowable set{1}:'", ".", "format", "(", "x", ",", "allowable_set", ")", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "s", ":", "x", "==", "s", ",", "allowable_set", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.one_of_k_encoding_unk": [[101, 106], ["list", "map"], "function", ["None"], ["", "def", "one_of_k_encoding_unk", "(", "x", ",", "allowable_set", ")", ":", "\n", "    ", "'''Maps inputs not in the allowable set to the last element.'''", "\n", "if", "x", "not", "in", "allowable_set", ":", "\n", "        ", "x", "=", "allowable_set", "[", "-", "1", "]", "\n", "", "return", "list", "(", "map", "(", "lambda", "s", ":", "x", "==", "s", ",", "allowable_set", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.smile_to_graph": [[109, 134], ["rdkit.Chem.MolFromSmiles", "Chem.MolFromSmiles.GetNumAtoms", "Chem.MolFromSmiles.GetAtoms", "Chem.MolFromSmiles.GetBonds", "networkx.Graph().to_directed", "numpy.zeros", "numpy.matrix", "numpy.where", "zip", "GraphInput.atom_features", "features.append", "edges.append", "numpy.eye", "edge_index.append", "networkx.Graph", "sum", "bond.GetBeginAtomIdx", "bond.GetEndAtomIdx"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.atom_features"], ["", "def", "smile_to_graph", "(", "smile", ")", ":", "\n", "    ", "mol", "=", "Chem", ".", "MolFromSmiles", "(", "smile", ")", "\n", "\n", "c_size", "=", "mol", ".", "GetNumAtoms", "(", ")", "\n", "\n", "features", "=", "[", "]", "\n", "for", "atom", "in", "mol", ".", "GetAtoms", "(", ")", ":", "\n", "        ", "feature", "=", "atom_features", "(", "atom", ")", "\n", "features", ".", "append", "(", "feature", "/", "sum", "(", "feature", ")", ")", "\n", "\n", "", "edges", "=", "[", "]", "\n", "for", "bond", "in", "mol", ".", "GetBonds", "(", ")", ":", "\n", "        ", "edges", ".", "append", "(", "[", "bond", ".", "GetBeginAtomIdx", "(", ")", ",", "bond", ".", "GetEndAtomIdx", "(", ")", "]", ")", "\n", "", "g", "=", "nx", ".", "Graph", "(", "edges", ")", ".", "to_directed", "(", ")", "\n", "edge_index", "=", "[", "]", "\n", "mol_adj", "=", "np", ".", "zeros", "(", "(", "c_size", ",", "c_size", ")", ")", "\n", "for", "e1", ",", "e2", "in", "g", ".", "edges", ":", "\n", "        ", "mol_adj", "[", "e1", ",", "e2", "]", "=", "1", "\n", "# edge_index.append([e1, e2])", "\n", "", "mol_adj", "+=", "np", ".", "matrix", "(", "np", ".", "eye", "(", "mol_adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "index_row", ",", "index_col", "=", "np", ".", "where", "(", "mol_adj", ">=", "0.5", ")", "\n", "for", "i", ",", "j", "in", "zip", "(", "index_row", ",", "index_col", ")", ":", "\n", "        ", "edge_index", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "# print('smile_to_graph')", "\n", "", "return", "c_size", ",", "features", ",", "edge_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.PSSM_calculation": [[137, 161], ["numpy.zeros", "open", "len", "f.readlines", "len", "len", "f.readlines", "float", "len", "len", "print", "len", "len", "pro_res_table.index"], "function", ["None"], ["", "def", "PSSM_calculation", "(", "aln_file", ",", "pro_seq", ")", ":", "\n", "    ", "pfm_mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "pro_res_table", ")", ",", "len", "(", "pro_seq", ")", ")", ")", "\n", "with", "open", "(", "aln_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "line_count", "=", "len", "(", "f", ".", "readlines", "(", ")", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "if", "len", "(", "line", ")", "!=", "len", "(", "pro_seq", ")", ":", "\n", "                ", "print", "(", "'error'", ",", "len", "(", "line", ")", ",", "len", "(", "pro_seq", ")", ")", "\n", "continue", "\n", "", "count", "=", "0", "\n", "for", "res", "in", "line", ":", "\n", "                ", "if", "res", "not", "in", "pro_res_table", ":", "\n", "                    ", "count", "+=", "1", "\n", "continue", "\n", "", "pfm_mat", "[", "pro_res_table", ".", "index", "(", "res", ")", ",", "count", "]", "+=", "1", "\n", "count", "+=", "1", "\n", "# ppm_mat = pfm_mat / float(line_count)", "\n", "", "", "", "pseudocount", "=", "0.8", "\n", "ppm_mat", "=", "(", "pfm_mat", "+", "pseudocount", "/", "4", ")", "/", "(", "float", "(", "line_count", ")", "+", "pseudocount", ")", "\n", "pssm_mat", "=", "ppm_mat", "\n", "# k = float(len(pro_res_table))", "\n", "# pwm_mat = np.log2(ppm_mat / (1.0 / k))", "\n", "# pssm_mat = pwm_mat", "\n", "# print(pssm_mat)", "\n", "return", "pssm_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.seq_feature": [[163, 172], ["numpy.zeros", "numpy.zeros", "range", "numpy.concatenate", "len", "GraphInput.one_of_k_encoding", "GraphInput.residue_features", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.one_of_k_encoding", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.residue_features"], ["", "def", "seq_feature", "(", "pro_seq", ")", ":", "\n", "    ", "pro_hot", "=", "np", ".", "zeros", "(", "(", "len", "(", "pro_seq", ")", ",", "len", "(", "pro_res_table", ")", ")", ")", "\n", "pro_property", "=", "np", ".", "zeros", "(", "(", "len", "(", "pro_seq", ")", ",", "12", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pro_seq", ")", ")", ":", "\n", "# if 'X' in pro_seq:", "\n", "#     print(pro_seq)", "\n", "        ", "pro_hot", "[", "i", ",", "]", "=", "one_of_k_encoding", "(", "pro_seq", "[", "i", "]", ",", "pro_res_table", ")", "\n", "pro_property", "[", "i", ",", "]", "=", "residue_features", "(", "pro_seq", "[", "i", "]", ")", "\n", "", "return", "np", ".", "concatenate", "(", "(", "pro_hot", ",", "pro_property", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.target_feature": [[174, 184], ["GraphInput.PSSM_calculation", "GraphInput.seq_feature", "numpy.concatenate", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.PSSM_calculation", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.seq_feature"], ["", "def", "target_feature", "(", "aln_file", ",", "pro_seq", ")", ":", "\n", "    ", "pssm", "=", "PSSM_calculation", "(", "aln_file", ",", "pro_seq", ")", "\n", "other_feature", "=", "seq_feature", "(", "pro_seq", ")", "\n", "# print('target_feature')", "\n", "# print(pssm.shape)", "\n", "# print(other_feature.shape)", "\n", "\n", "# print(other_feature.shape)", "\n", "# return other_feature", "\n", "return", "np", ".", "concatenate", "(", "(", "np", ".", "transpose", "(", "pssm", ",", "(", "1", ",", "0", ")", ")", ",", "other_feature", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.target_to_feature": [[187, 194], ["os.path.join", "GraphInput.target_feature"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.target_feature"], ["", "def", "target_to_feature", "(", "target_key", ",", "target_sequence", ",", "aln_dir", ")", ":", "\n", "# aln_dir = 'data/' + dataset + '/aln'", "\n", "    ", "aln_file", "=", "os", ".", "path", ".", "join", "(", "aln_dir", ",", "target_key", "+", "'.aln'", ")", "\n", "# if 'X' in target_sequence:", "\n", "#     print(target_key)", "\n", "feature", "=", "target_feature", "(", "aln_file", ",", "target_sequence", ")", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.target_to_graph": [[197, 212], ["len", "os.path.join", "GraphInput.target_to_feature", "numpy.load", "numpy.matrix", "numpy.where", "zip", "numpy.array", "numpy.eye", "np.array.append"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.target_to_feature"], ["", "def", "target_to_graph", "(", "target_key", ",", "target_sequence", ",", "contact_dir", ",", "aln_dir", ")", ":", "\n", "    ", "target_size", "=", "len", "(", "target_sequence", ")", "\n", "contact_file", "=", "os", ".", "path", ".", "join", "(", "contact_dir", ",", "target_key", "+", "'.npy'", ")", "\n", "# contact_dir = 'data/' + dataset + '/pconsc4'", "\n", "\n", "target_feature", "=", "target_to_feature", "(", "target_key", ",", "target_sequence", ",", "aln_dir", ")", "\n", "\n", "contact_map", "=", "np", ".", "load", "(", "contact_file", ")", "\n", "contact_map", "+=", "np", ".", "matrix", "(", "np", ".", "eye", "(", "target_size", ")", ")", "\n", "index_row", ",", "index_col", "=", "np", ".", "where", "(", "contact_map", ">=", "0.5", ")", "\n", "target_edge_index", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "index_row", ",", "index_col", ")", ":", "\n", "        ", "target_edge_index", ".", "append", "(", "[", "i", ",", "j", "]", ")", "\n", "", "target_edge_index", "=", "np", ".", "array", "(", "target_edge_index", ")", "\n", "return", "target_size", ",", "target_feature", ",", "target_edge_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getDrugMolecularGraph": [[214, 229], ["print", "collections.OrderedDict", "ligands.keys", "print", "rdkit.Chem.MolToSmiles", "GraphInput.smile_to_graph", "len", "len", "Exception", "rdkit.Chem.MolFromSmiles"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.smile_to_graph"], ["", "def", "getDrugMolecularGraph", "(", "ligands", ")", ":", "\n", "\n", "# create molecule graph", "\n", "    ", "print", "(", "\"create molecule graph ...\"", ")", "\n", "smile_graph", "=", "OrderedDict", "(", ")", "\n", "for", "d", "in", "ligands", ".", "keys", "(", ")", ":", "\n", "        ", "lg", "=", "Chem", ".", "MolToSmiles", "(", "Chem", ".", "MolFromSmiles", "(", "ligands", "[", "d", "]", ")", ",", "isomericSmiles", "=", "True", ")", "\n", "smile_graph", "[", "d", "]", "=", "smile_to_graph", "(", "lg", ")", "\n", "\n", "# count the number of proteins with aln and contact files", "\n", "", "print", "(", "'effective drugs:'", ",", "len", "(", "smile_graph", ")", ")", "\n", "if", "len", "(", "smile_graph", ")", "==", "0", ":", "\n", "        ", "raise", "Exception", "(", "'no drug, run the script for datasets preparation.'", ")", "\n", "\n", "", "return", "smile_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getTargetMolecularGraph": [[231, 250], ["print", "collections.OrderedDict", "proteins.keys", "print", "GraphInput.target_to_graph", "len", "len", "Exception"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.target_to_graph"], ["", "def", "getTargetMolecularGraph", "(", "proteins", ",", "dataset", ")", ":", "\n", "\n", "# load contact and aln", "\n", "    ", "msa_path", "=", "'data/'", "+", "dataset", "+", "'/aln'", "\n", "contac_path", "=", "'data/'", "+", "dataset", "+", "'/pconsc4'", "\n", "\n", "# create protein graph", "\n", "print", "(", "\"create protein graph ...\"", ")", "\n", "target_graph", "=", "OrderedDict", "(", ")", "\n", "for", "t", "in", "proteins", ".", "keys", "(", ")", ":", "\n", "        ", "g", "=", "target_to_graph", "(", "t", ",", "proteins", "[", "t", "]", ",", "contac_path", ",", "msa_path", ")", "\n", "target_graph", "[", "t", "]", "=", "g", "\n", "\n", "# count the number of proteins with aln and contact files", "\n", "", "print", "(", "'effective protein:'", ",", "len", "(", "target_graph", ")", ")", "\n", "if", "len", "(", "target_graph", ")", "==", "0", ":", "\n", "        ", "raise", "Exception", "(", "'no protein, run the script for datasets preparation.'", ")", "\n", "\n", "", "return", "target_graph", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.minMaxNormalize": [[252, 259], ["numpy.min", "numpy.max"], "function", ["None"], ["", "def", "minMaxNormalize", "(", "Y", ",", "Y_min", "=", "None", ",", "Y_max", "=", "None", ")", ":", "\n", "    ", "if", "Y_min", "is", "None", ":", "\n", "        ", "Y_min", "=", "np", ".", "min", "(", "Y", ")", "\n", "", "if", "Y_max", "is", "None", ":", "\n", "        ", "Y_max", "=", "np", ".", "max", "(", "Y", ")", "\n", "", "normalize_Y", "=", "(", "Y", "-", "Y_min", ")", "/", "(", "Y_max", "-", "Y_min", ")", "\n", "return", "normalize_Y", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.denseAffinityRefine": [[261, 267], ["numpy.zeros_like", "numpy.tile().transpose", "numpy.argpartition", "numpy.tile", "numpy.expand_dims", "numpy.arange"], "function", ["None"], ["", "def", "denseAffinityRefine", "(", "adj", ",", "k", ")", ":", "\n", "    ", "refine_adj", "=", "np", ".", "zeros_like", "(", "adj", ")", "\n", "indexs1", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "adj", ".", "shape", "[", "0", "]", ")", ",", "0", ")", ",", "(", "k", ",", "1", ")", ")", ".", "transpose", "(", ")", "\n", "indexs2", "=", "np", ".", "argpartition", "(", "adj", ",", "-", "k", ",", "1", ")", "[", ":", ",", "-", "k", ":", "]", "\n", "refine_adj", "[", "indexs1", ",", "indexs2", "]", "=", "adj", "[", "indexs1", ",", "indexs2", "]", "\n", "return", "refine_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getAffinityGraph": [[269, 311], ["numpy.concatenate", "numpy.where", "numpy.concatenate", "numpy.concatenate", "numpy.zeros_like", "numpy.concatenate", "affinity_graph.__setitem__", "affinity_graph.__setitem__", "affinity_graph.__setitem__", "GraphInput.minMaxNormalize", "torch_geometric.data.Data", "torch_geometric.data.Data", "torch.Tensor", "GraphInput.denseAffinityRefine", "GraphInput.denseAffinityRefine", "GraphInput.minMaxNormalize", "numpy.concatenate", "numpy.concatenate", "numpy.expand_dims", "numpy.expand_dims", "numpy.tile", "numpy.tile", "numpy.array", "numpy.array", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "numpy.zeros", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.materials.normalize_sim.minMaxNormalize", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.denseAffinityRefine", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.denseAffinityRefine", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.materials.normalize_sim.minMaxNormalize"], ["", "def", "getAffinityGraph", "(", "dataset", ",", "adj", ",", "weighted", ",", "drug_aff_k", ",", "target_aff_k", ")", ":", "\n", "    ", "num_drugs", "=", "adj", ".", "shape", "[", "0", "]", "\n", "num_targets", "=", "adj", ".", "shape", "[", "1", "]", "\n", "if", "dataset", "==", "\"davis\"", ":", "\n", "        ", "adj", "[", "adj", "!=", "0", "]", "-=", "5", "\n", "adj_norm", "=", "minMaxNormalize", "(", "adj", ",", "0", ")", "\n", "", "elif", "dataset", "==", "\"kiba\"", ":", "\n", "        ", "adj_refine", "=", "denseAffinityRefine", "(", "adj", ".", "T", ",", "target_aff_k", ")", "\n", "adj_refine", "=", "denseAffinityRefine", "(", "adj_refine", ".", "T", ",", "drug_aff_k", ")", "\n", "adj_norm", "=", "minMaxNormalize", "(", "adj_refine", ",", "0", ")", "\n", "", "adj_1", "=", "adj_norm", "\n", "adj_2", "=", "adj_norm", ".", "T", "\n", "\n", "adj", "=", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "[", "num_drugs", ",", "num_drugs", "]", ")", ",", "adj_1", ")", ",", "1", ")", ",", "\n", "np", ".", "concatenate", "(", "(", "adj_2", ",", "np", ".", "zeros", "(", "[", "num_targets", ",", "num_targets", "]", ")", ")", ",", "1", ")", "\n", ")", ",", "0", ")", "\n", "\n", "train_raw_ids", ",", "train_col_ids", "=", "np", ".", "where", "(", "adj", "!=", "0", ")", "\n", "edge_indexs", "=", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "expand_dims", "(", "train_raw_ids", ",", "0", ")", ",", "\n", "np", ".", "expand_dims", "(", "train_col_ids", ",", "0", ")", "\n", ")", ",", "0", ")", "\n", "edge_weights", "=", "adj", "[", "train_raw_ids", ",", "train_col_ids", "]", "\n", "\n", "node_type_features", "=", "np", ".", "concatenate", "(", "(", "\n", "np", ".", "tile", "(", "np", ".", "array", "(", "[", "1", ",", "0", "]", ")", ",", "(", "num_drugs", ",", "1", ")", ")", ",", "\n", "np", ".", "tile", "(", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", ",", "(", "num_targets", ",", "1", ")", ")", "\n", ")", ",", "0", ")", "\n", "\n", "adj_features", "=", "np", ".", "zeros_like", "(", "adj", ")", "\n", "adj_features", "[", "adj", "!=", "0", "]", "=", "1", "\n", "\n", "features", "=", "np", ".", "concatenate", "(", "(", "node_type_features", ",", "adj_features", ")", ",", "1", ")", "\n", "\n", "affinity_graph", "=", "DATA", ".", "Data", "(", "x", "=", "torch", ".", "Tensor", "(", "features", ")", ",", "adj", "=", "torch", ".", "Tensor", "(", "adj", ")", ",", "edge_index", "=", "torch", ".", "LongTensor", "(", "edge_indexs", ")", ")", "if", "weighted", "else", "DATA", ".", "Data", "(", "x", "=", "torch", ".", "Tensor", "(", "features", ")", ",", "adj", "=", "torch", ".", "Tensor", "(", "adj_features", ")", ",", "edge_index", "=", "torch", ".", "LongTensor", "(", "edge_indexs", ")", ")", "\n", "affinity_graph", ".", "__setitem__", "(", "\"edge_weight\"", ",", "torch", ".", "Tensor", "(", "edge_weights", ")", ")", "\n", "affinity_graph", ".", "__setitem__", "(", "\"num_node1s\"", ",", "num_drugs", ")", "\n", "affinity_graph", ".", "__setitem__", "(", "\"num_node2s\"", ",", "num_targets", ")", "\n", "\n", "return", "affinity_graph", "\n", "", ""]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.get_cindex": [[6, 8], ["lifelines.utils.concordance_index"], "function", ["None"], ["def", "get_cindex", "(", "Y", ",", "P", ")", ":", "\n", "    ", "return", "concordance_index", "(", "Y", ",", "P", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.get_mse": [[10, 14], ["numpy.array", "numpy.array", "numpy.average"], "function", ["None"], ["", "def", "get_mse", "(", "Y", ",", "P", ")", ":", "\n", "    ", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "P", "=", "np", ".", "array", "(", "P", ")", "\n", "return", "np", ".", "average", "(", "(", "Y", "-", "P", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.get_k": [[17, 21], ["numpy.array", "numpy.array", "sum", "sum"], "function", ["None"], ["", "def", "get_k", "(", "y_obs", ",", "y_pred", ")", ":", "\n", "    ", "y_obs", "=", "np", ".", "array", "(", "y_obs", ")", "\n", "y_pred", "=", "np", ".", "array", "(", "y_pred", ")", "\n", "return", "sum", "(", "y_obs", "*", "y_pred", ")", "/", "sum", "(", "y_pred", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.squared_error_zero": [[24, 33], ["metrics.get_k", "numpy.array", "numpy.array", "numpy.mean", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.get_k"], ["", "def", "squared_error_zero", "(", "y_obs", ",", "y_pred", ")", ":", "\n", "    ", "k", "=", "get_k", "(", "y_obs", ",", "y_pred", ")", "\n", "y_obs", "=", "np", ".", "array", "(", "y_obs", ")", "\n", "y_pred", "=", "np", ".", "array", "(", "y_pred", ")", "\n", "y_obs_mean", "=", "np", ".", "mean", "(", "y_obs", ")", "\n", "upp", "=", "sum", "(", "(", "y_obs", "-", "k", "*", "y_pred", ")", "**", "2", ")", "\n", "down", "=", "sum", "(", "(", "y_obs", "-", "y_obs_mean", ")", "**", "2", ")", "\n", "\n", "return", "1", "-", "(", "upp", "/", "down", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.r_squared_error": [[36, 45], ["numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "sum", "sum", "sum"], "function", ["None"], ["", "def", "r_squared_error", "(", "y_obs", ",", "y_pred", ")", ":", "\n", "    ", "y_obs", "=", "np", ".", "array", "(", "y_obs", ")", "\n", "y_pred", "=", "np", ".", "array", "(", "y_pred", ")", "\n", "y_obs_mean", "=", "np", ".", "mean", "(", "y_obs", ")", "\n", "y_pred_mean", "=", "np", ".", "mean", "(", "y_pred", ")", "\n", "mult", "=", "sum", "(", "(", "y_obs", "-", "y_obs_mean", ")", "*", "(", "y_pred", "-", "y_pred_mean", ")", ")", "**", "2", "\n", "y_obs_sq", "=", "sum", "(", "(", "y_obs", "-", "y_obs_mean", ")", "**", "2", ")", "\n", "y_pred_sq", "=", "sum", "(", "(", "y_pred", "-", "y_pred_mean", ")", "**", "2", ")", "\n", "return", "mult", "/", "(", "y_obs_sq", "*", "y_pred_sq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.get_rm2": [[47, 52], ["metrics.r_squared_error", "metrics.squared_error_zero", "numpy.sqrt", "numpy.absolute"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.r_squared_error", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.squared_error_zero"], ["", "def", "get_rm2", "(", "Y", ",", "P", ")", ":", "\n", "    ", "r2", "=", "r_squared_error", "(", "Y", ",", "P", ")", "\n", "r02", "=", "squared_error_zero", "(", "Y", ",", "P", ")", "\n", "\n", "return", "r2", "*", "(", "1", "-", "np", ".", "sqrt", "(", "np", ".", "absolute", "(", "r2", "**", "2", "-", "r02", "**", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.get_aupr": [[54, 62], ["numpy.array", "numpy.array", "numpy.where", "numpy.where", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.auc"], "function", ["None"], ["", "def", "get_aupr", "(", "Y", ",", "P", ",", "threshold", ")", ":", "\n", "    ", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "P", "=", "np", ".", "array", "(", "P", ")", "\n", "Y", "=", "np", ".", "where", "(", "Y", ">=", "threshold", ",", "1", ",", "0", ")", "\n", "P", "=", "np", ".", "where", "(", "P", ">=", "threshold", ",", "1", ",", "0", ")", "\n", "precision", ",", "recall", ",", "_", "=", "precision_recall_curve", "(", "Y", ",", "P", ")", "\n", "aupr", "=", "auc", "(", "recall", ",", "precision", ")", "\n", "return", "aupr", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.get_pearson": [[64, 68], ["numpy.array", "numpy.array", "numpy.corrcoef"], "function", ["None"], ["", "def", "get_pearson", "(", "Y", ",", "P", ")", ":", "\n", "    ", "Y", "=", "np", ".", "array", "(", "Y", ")", "\n", "P", "=", "np", ".", "array", "(", "P", ")", "\n", "return", "np", ".", "corrcoef", "(", "Y", ",", "P", ")", "[", "0", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.model_evaluate": [[70, 73], ["metrics.get_mse", "metrics.get_cindex", "metrics.get_rm2", "metrics.get_pearson", "metrics.get_aupr"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.get_mse", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.get_cindex", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.get_rm2", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.get_pearson", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.get_aupr"], ["", "def", "model_evaluate", "(", "Y", ",", "P", ",", "dataset", ")", ":", "\n", "    ", "thresholds", "=", "{", "\"davis\"", ":", "7.0", ",", "\"kiba\"", ":", "12.1", "}", "\n", "return", "(", "get_mse", "(", "Y", ",", "P", ")", ",", "get_cindex", "(", "Y", ",", "P", ")", ",", "get_rm2", "(", "Y", ",", "P", ")", ",", "get_pearson", "(", "Y", ",", "P", ")", ",", "get_aupr", "(", "Y", ",", "P", ",", "thresholds", "[", "dataset", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.train_test_S4.create_dataset_for_train_test": [[11, 107], ["json.load", "range", "json.load", "json.load", "json.load", "range", "json.load", "json.load", "numpy.where", "utils.DTADataset", "numpy.where", "utils.DTADataset", "GraphInput.getAffinityGraph", "json.load", "numpy.array", "numpy.array", "dict", "dict", "GraphInput.getDrugMolecularGraph", "GraphInput.getDrugMolecularGraph", "json.load", "numpy.array", "numpy.array", "dict", "dict", "GraphInput.getTargetMolecularGraph", "GraphInput.getTargetMolecularGraph", "numpy.loadtxt", "len", "numpy.full", "numpy.arange", "numpy.expand_dims", "numpy.expand_dims", "numpy.loadtxt", "len", "numpy.full", "numpy.arange", "numpy.expand_dims", "numpy.expand_dims", "open", "len", "open", "open", "open", "len", "open", "open", "open", "list", "list", "zip", "zip", "open", "list", "list", "zip", "zip", "numpy.argpartition", "numpy.sum", "numpy.argpartition", "numpy.sum", "numpy.isnan", "numpy.isnan", "json.load.keys", "json.load.values", "json.load.keys", "json.load.values", "numpy.isnan", "numpy.tile().transpose", "numpy.tile().transpose", "numpy.tile", "numpy.tile", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getAffinityGraph", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getDrugMolecularGraph", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getDrugMolecularGraph", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getTargetMolecularGraph", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getTargetMolecularGraph"], ["def", "create_dataset_for_train_test", "(", "affinity", ",", "dataset", ",", "weighted", ",", "drug_aff_k", ",", "target_aff_k", ",", "drug_sim_k", ",", "target_sim_k", ")", ":", "\n", "# load dataset", "\n", "    ", "dataset_path", "=", "'data/'", "+", "dataset", "+", "'/'", "\n", "\n", "drug_train_fold_origin", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S2_train_set.txt'", ")", ")", "\n", "drug_train_folds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "drug_train_fold_origin", ")", ")", ":", "\n", "            ", "drug_train_folds", "+=", "drug_train_fold_origin", "[", "i", "]", "\n", "", "drug_test_fold", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S2_test_set.txt'", ")", ")", "\n", "drug_mask_fold", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S2_mask_set.txt'", ")", ")", "\n", "\n", "target_train_fold_origin", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S3_train_set.txt'", ")", ")", "\n", "target_train_folds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "target_train_fold_origin", ")", ")", ":", "\n", "            ", "target_train_folds", "+=", "target_train_fold_origin", "[", "i", "]", "\n", "", "target_test_fold", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S3_test_set.txt'", ")", ")", "\n", "target_mask_fold", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S3_mask_set.txt'", ")", ")", "\n", "\n", "# train set and test set", "\n", "train_affinity", "=", "affinity", "[", "drug_train_folds", ",", ":", "]", "[", ":", ",", "target_train_folds", "]", "\n", "test_affinity", "=", "affinity", "[", "drug_test_fold", ",", ":", "]", "[", ":", ",", "target_test_fold", "]", "\n", "\n", "train_rows", ",", "train_cols", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "train_affinity", ")", "==", "False", ")", "\n", "train_Y", "=", "train_affinity", "[", "train_rows", ",", "train_cols", "]", "\n", "train_dataset", "=", "DTADataset", "(", "drug_ids", "=", "train_rows", ",", "target_ids", "=", "train_cols", ",", "y", "=", "train_Y", ")", "\n", "\n", "test_rows", ",", "test_cols", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "test_affinity", ")", "==", "False", ")", "\n", "test_Y", "=", "test_affinity", "[", "test_rows", ",", "test_cols", "]", "\n", "test_dataset", "=", "DTADataset", "(", "drug_ids", "=", "test_rows", ",", "target_ids", "=", "test_cols", ",", "y", "=", "test_Y", ")", "\n", "\n", "train_affinity", "[", "np", ".", "isnan", "(", "train_affinity", ")", "==", "True", "]", "=", "0", "\n", "affinity_graph", "=", "getAffinityGraph", "(", "dataset", ",", "train_affinity", ",", "weighted", ",", "drug_aff_k", ",", "target_aff_k", ")", "\n", "\n", "# drug molecular graphs", "\n", "drugs", "=", "json", ".", "load", "(", "open", "(", "f'data/{dataset}/drugs.txt'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "drug_keys", "=", "np", ".", "array", "(", "list", "(", "drugs", ".", "keys", "(", ")", ")", ")", "\n", "drug_values", "=", "np", ".", "array", "(", "list", "(", "drugs", ".", "values", "(", ")", ")", ")", "\n", "train_drug_keys", "=", "drug_keys", "[", "drug_train_folds", "]", "\n", "train_drug_values", "=", "drug_values", "[", "drug_train_folds", "]", "\n", "train_drugs", "=", "dict", "(", "zip", "(", "train_drug_keys", ",", "train_drug_values", ")", ")", "\n", "test_drug_keys", "=", "drug_keys", "[", "drug_test_fold", "]", "\n", "test_drug_values", "=", "drug_values", "[", "drug_test_fold", "]", "\n", "test_drugs", "=", "dict", "(", "zip", "(", "test_drug_keys", ",", "test_drug_values", ")", ")", "\n", "\n", "train_drug_graphs_dict", "=", "getDrugMolecularGraph", "(", "train_drugs", ")", "\n", "test_drug_graphs_dict", "=", "getDrugMolecularGraph", "(", "test_drugs", ")", "\n", "\n", "# target molecular graphs", "\n", "targets", "=", "json", ".", "load", "(", "open", "(", "f'data/{dataset}/targets.txt'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "target_keys", "=", "np", ".", "array", "(", "list", "(", "targets", ".", "keys", "(", ")", ")", ")", "\n", "target_values", "=", "np", ".", "array", "(", "list", "(", "targets", ".", "values", "(", ")", ")", ")", "\n", "train_target_keys", "=", "target_keys", "[", "target_train_folds", "]", "\n", "train_target_values", "=", "target_values", "[", "target_train_folds", "]", "\n", "train_targets", "=", "dict", "(", "zip", "(", "train_target_keys", ",", "train_target_values", ")", ")", "\n", "test_target_keys", "=", "target_keys", "[", "target_test_fold", "]", "\n", "test_target_values", "=", "target_values", "[", "target_test_fold", "]", "\n", "test_targets", "=", "dict", "(", "zip", "(", "test_target_keys", ",", "test_target_values", ")", ")", "\n", "\n", "train_target_graphs_dict", "=", "getTargetMolecularGraph", "(", "train_targets", ",", "dataset", ")", "\n", "test_target_graphs_dict", "=", "getTargetMolecularGraph", "(", "test_targets", ",", "dataset", ")", "\n", "\n", "# drug map", "\n", "drug_sim", "=", "np", ".", "loadtxt", "(", "f\"data/{dataset}/drug-drug-sim.txt\"", ",", "delimiter", "=", "\",\"", ")", "\n", "drug_test_train_sim", "=", "drug_sim", "[", "drug_test_fold", ",", ":", "]", "\n", "drug_test_train_sim", "[", ":", ",", "drug_test_fold", "+", "drug_mask_fold", "]", "=", "-", "1", "\n", "\n", "drug_count", "=", "affinity", ".", "shape", "[", "0", "]", "\n", "drug_train_count", "=", "len", "(", "drug_train_folds", ")", "\n", "drug_test_train_map", "=", "np", ".", "argpartition", "(", "drug_test_train_sim", ",", "-", "drug_sim_k", ",", "1", ")", "[", ":", ",", "-", "drug_sim_k", ":", "]", "\n", "drug_train_map", "=", "np", ".", "full", "(", "drug_count", ",", "-", "1", ")", "\n", "drug_train_map", "[", "drug_train_folds", "]", "=", "np", ".", "arange", "(", "drug_train_count", ")", "\n", "drug_test_map", "=", "drug_train_map", "[", "drug_test_train_map", "]", "\n", "\n", "drug_test_map_weight", "=", "drug_test_train_sim", "[", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "drug_test_train_sim", ".", "shape", "[", "0", "]", ")", ",", "0", ")", ",", "(", "drug_sim_k", ",", "1", ")", ")", ".", "transpose", "(", ")", ",", "drug_test_train_map", "]", "\n", "drug_test_map_weight_sum", "=", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "drug_test_map_weight", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "drug_test_map_weight_norm", "=", "np", ".", "expand_dims", "(", "drug_test_map_weight", "/", "drug_test_map_weight_sum", ",", "axis", "=", "2", ")", "\n", "\n", "# target map", "\n", "target_sim", "=", "np", ".", "loadtxt", "(", "f\"data/{dataset}/target-target-sim.txt\"", ",", "delimiter", "=", "\",\"", ")", "\n", "target_test_train_sim", "=", "target_sim", "[", "target_test_fold", ",", ":", "]", "\n", "target_test_train_sim", "[", ":", ",", "target_test_fold", "+", "target_mask_fold", "]", "=", "-", "1", "\n", "\n", "target_count", "=", "affinity", ".", "shape", "[", "1", "]", "\n", "target_train_count", "=", "len", "(", "target_train_folds", ")", "\n", "target_test_train_map", "=", "np", ".", "argpartition", "(", "target_test_train_sim", ",", "-", "target_sim_k", ",", "1", ")", "[", ":", ",", "-", "target_sim_k", ":", "]", "\n", "target_train_map", "=", "np", ".", "full", "(", "target_count", ",", "-", "1", ")", "\n", "target_train_map", "[", "target_train_folds", "]", "=", "np", ".", "arange", "(", "target_train_count", ")", "\n", "target_test_map", "=", "target_train_map", "[", "target_test_train_map", "]", "\n", "\n", "target_test_map_weight", "=", "target_test_train_sim", "[", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "target_test_train_sim", ".", "shape", "[", "0", "]", ")", ",", "0", ")", ",", "(", "target_sim_k", ",", "1", ")", ")", ".", "transpose", "(", ")", ",", "target_test_train_map", "]", "\n", "target_test_map_weight_sum", "=", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "target_test_map_weight", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "target_test_map_weight_norm", "=", "np", ".", "expand_dims", "(", "target_test_map_weight", "/", "target_test_map_weight_sum", ",", "axis", "=", "2", ")", "\n", "\n", "return", "train_dataset", ",", "test_dataset", ",", "affinity_graph", ",", "train_drug_graphs_dict", ",", "test_drug_graphs_dict", ",", "train_target_graphs_dict", ",", "test_target_graphs_dict", ",", "drug_count", ",", "target_count", ",", "drug_test_map", ",", "drug_test_map_weight_norm", ",", "target_test_map", ",", "target_test_map_weight_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.train_test_S4.train_test": [[109, 182], ["utils.argparser", "print", "print", "print", "print", "print", "print", "utils.read_data", "train_test_S4.create_dataset_for_train_test", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "utils.GraphDataset", "torch.utils.data.DataLoader", "utils.GraphDataset", "torch.utils.data.DataLoader", "utils.GraphDataset", "torch.utils.data.DataLoader", "utils.GraphDataset", "torch.utils.data.DataLoader", "torch.device", "Architecture", "Architecture.to", "model.Predictor", "model.Predictor.to", "print", "range", "torch.save", "torch.save", "print", "utils.predicting", "metrics.model_evaluate", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "utils.train", "utils.predicting", "metrics.model_evaluate", "Architecture.state_dict", "model.Predictor.state_dict", "torch.cuda.is_available", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.argparser", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.data.degrees.read_data", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.train_test_S2.create_dataset_for_train_test", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.predicting", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.model_evaluate", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.train", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.predicting", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.model_evaluate"], ["", "def", "train_test", "(", ")", ":", "\n", "\n", "    ", "FLAGS", "=", "argparser", "(", ")", "\n", "\n", "dataset", "=", "FLAGS", ".", "dataset", "\n", "cuda_name", "=", "f'cuda:{FLAGS.cuda_id}'", "\n", "TRAIN_BATCH_SIZE", "=", "FLAGS", ".", "batch_size", "\n", "TEST_BATCH_SIZE", "=", "FLAGS", ".", "batch_size", "\n", "NUM_EPOCHS", "=", "FLAGS", ".", "num_epochs", "\n", "LR", "=", "FLAGS", ".", "lr", "\n", "Architecture", "=", "[", "ConvNet", ",", "FirstVariantOfConvNet", ",", "SecondVariantOfConvNet", ",", "ThirdVariantOfConvNet", "]", "[", "FLAGS", ".", "model", "]", "\n", "model_name", "=", "Architecture", ".", "__name__", "\n", "\n", "print", "(", "\"Dataset:\"", ",", "dataset", ")", "\n", "print", "(", "\"Cuda name:\"", ",", "cuda_name", ")", "\n", "print", "(", "\"Epochs:\"", ",", "NUM_EPOCHS", ")", "\n", "print", "(", "\"Learning rate:\"", ",", "LR", ")", "\n", "print", "(", "\"Model name:\"", ",", "model_name", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "f\"models/architecture/{dataset}/S4/cross_validation/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/architecture/{dataset}/S4/cross_validation/\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"models/predictor/{dataset}/S4/cross_validation/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/predictor/{dataset}/S4/cross_validation/\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"models/architecture/{dataset}/S4/test/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/architecture/{dataset}/S4/test/\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"models/predictor/{dataset}/S4/test/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/predictor/{dataset}/S4/test/\"", ")", "\n", "\n", "", "print", "(", "\"create dataset ...\"", ")", "\n", "affinity", "=", "read_data", "(", "dataset", ")", "\n", "train_data", ",", "test_data", ",", "affinity_graph", ",", "train_drug_graphs_dict", ",", "test_drug_graphs_dict", ",", "train_target_graphs_dict", ",", "test_target_graphs_dict", ",", "drug_count", ",", "target_count", ",", "drug_test_map", ",", "drug_test_map_weight_norm", ",", "target_test_map", ",", "target_test_map_weight_norm", "=", "create_dataset_for_train_test", "(", "affinity", ",", "dataset", ",", "FLAGS", ".", "weighted", ",", "FLAGS", ".", "drug_aff_k", ",", "FLAGS", ".", "target_aff_k", ",", "FLAGS", ".", "drug_sim_k", ",", "FLAGS", ".", "target_sim_k", ")", "\n", "print", "(", "\"create train_loader and test_loader ...\"", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "TRAIN_BATCH_SIZE", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "collate", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "batch_size", "=", "TEST_BATCH_SIZE", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ")", "\n", "\n", "print", "(", "\"create drug_graphs_DataLoader and target_graphs_DataLoader ...\"", ")", "\n", "train_drug_graphs_Data", "=", "GraphDataset", "(", "graphs_dict", "=", "train_drug_graphs_dict", ",", "dttype", "=", "\"drug\"", ")", "\n", "train_drug_graphs_DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_drug_graphs_Data", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ",", "batch_size", "=", "affinity_graph", ".", "num_node1s", ")", "\n", "test_drug_graphs_Data", "=", "GraphDataset", "(", "graphs_dict", "=", "test_drug_graphs_dict", ",", "dttype", "=", "\"drug\"", ")", "\n", "test_drug_graphs_DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_drug_graphs_Data", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ",", "batch_size", "=", "drug_count", "-", "affinity_graph", ".", "num_node1s", ")", "\n", "train_target_graphs_Data", "=", "GraphDataset", "(", "graphs_dict", "=", "train_target_graphs_dict", ",", "dttype", "=", "\"target\"", ")", "\n", "train_target_graphs_DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_target_graphs_Data", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ",", "batch_size", "=", "affinity_graph", ".", "num_node2s", ")", "\n", "test_target_graphs_Data", "=", "GraphDataset", "(", "graphs_dict", "=", "test_target_graphs_dict", ",", "dttype", "=", "\"target\"", ")", "\n", "test_target_graphs_DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_target_graphs_Data", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ",", "batch_size", "=", "target_count", "-", "affinity_graph", ".", "num_node2s", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "cuda_name", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "architecture", "=", "Architecture", "(", "ag_init_dim", "=", "affinity_graph", ".", "num_node1s", "+", "affinity_graph", ".", "num_node2s", "+", "2", ",", "skip", "=", "True", ")", "\n", "architecture", ".", "to", "(", "device", ")", "\n", "\n", "predictor", "=", "Predictor", "(", "embedding_dim", "=", "architecture", ".", "output_dim", ")", "\n", "predictor", ".", "to", "(", "device", ")", "\n", "\n", "print", "(", "\"start training ...\"", ")", "\n", "for", "epoch", "in", "range", "(", "NUM_EPOCHS", ")", ":", "\n", "        ", "train", "(", "architecture", ",", "predictor", ",", "device", ",", "train_loader", ",", "train_drug_graphs_DataLoader", ",", "train_target_graphs_DataLoader", ",", "LR", ",", "epoch", "+", "1", ",", "TRAIN_BATCH_SIZE", ",", "affinity_graph", ")", "\n", "G", ",", "P", "=", "predicting", "(", "architecture", ",", "predictor", ",", "device", ",", "test_loader", ",", "test_drug_graphs_DataLoader", ",", "test_target_graphs_DataLoader", ",", "affinity_graph", ",", "drug_map", "=", "drug_test_map", ",", "drug_map_weight", "=", "torch", ".", "FloatTensor", "(", "drug_test_map_weight_norm", ")", ".", "to", "(", "device", ")", ",", "target_map", "=", "target_test_map", ",", "target_map_weight", "=", "torch", ".", "FloatTensor", "(", "target_test_map_weight_norm", ")", ".", "to", "(", "device", ")", ")", "\n", "result", "=", "model_evaluate", "(", "G", ",", "P", ",", "dataset", ")", "\n", "\n", "", "checkpoint_dir", "=", "f\"models/architecture/{dataset}/S4/test/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "architecture", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "checkpoint_dir", "=", "f\"models/predictor/{dataset}/S4/test/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "predictor", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "print", "(", "'\\npredicting for test data'", ")", "\n", "G", ",", "P", "=", "predicting", "(", "architecture", ",", "predictor", ",", "device", ",", "test_loader", ",", "test_drug_graphs_DataLoader", ",", "test_target_graphs_DataLoader", ",", "affinity_graph", ",", "drug_map", "=", "drug_test_map", ",", "drug_map_weight", "=", "torch", ".", "FloatTensor", "(", "drug_test_map_weight_norm", ")", ".", "to", "(", "device", ")", ",", "target_map", "=", "target_test_map", ",", "target_map_weight", "=", "torch", ".", "FloatTensor", "(", "target_test_map_weight_norm", ")", ".", "to", "(", "device", ")", ")", "\n", "result", "=", "model_evaluate", "(", "G", ",", "P", ",", "dataset", ")", "\n", "print", "(", "\"reslut:\"", ",", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.LinearBlock.__init__": [[27, 39], ["super().__init__", "torch.nn.ModuleList", "range", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "model.LinearBlock.layers.append", "len"], "methods", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "linear_layers_dim", ",", "dropout_rate", "=", "0", ",", "relu_layers_index", "=", "[", "]", ",", "dropout_layers_index", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "LinearBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "linear_layers_dim", ")", "-", "1", ")", ":", "\n", "            ", "layer", "=", "Linear", "(", "linear_layers_dim", "[", "i", "]", ",", "linear_layers_dim", "[", "i", "+", "1", "]", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "", "self", ".", "relu", "=", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "Dropout", "(", "dropout_rate", ")", "\n", "self", ".", "relu_layers_index", "=", "relu_layers_index", "\n", "self", ".", "dropout_layers_index", "=", "dropout_layers_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.LinearBlock.forward": [[40, 51], ["range", "len", "embeddings.append", "model.LinearBlock.relu", "model.LinearBlock.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "x", "\n", "embeddings", "=", "[", "]", "\n", "for", "layer_index", "in", "range", "(", "len", "(", "self", ".", "layers", ")", ")", ":", "\n", "            ", "output", "=", "self", ".", "layers", "[", "layer_index", "]", "(", "output", ")", "\n", "if", "layer_index", "in", "self", ".", "relu_layers_index", ":", "\n", "                ", "output", "=", "self", ".", "relu", "(", "output", ")", "\n", "", "if", "layer_index", "in", "self", ".", "dropout_layers_index", ":", "\n", "                ", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "", "embeddings", ".", "append", "(", "output", ")", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.DenseGCNBlock.__init__": [[54, 71], ["super().__init__", "torch.nn.ModuleList", "range", "torch.nn.ReLU", "torch.nn.Dropout", "torch_geometric.nn.DenseGCNConv", "model.DenseGCNBlock.conv_layers.append", "len", "supplement_dim_func"], "methods", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gcn_layers_dim", ",", "dropout_rate", "=", "0", ",", "relu_layers_index", "=", "[", "]", ",", "dropout_layers_index", "=", "[", "]", ",", "supplement_mode", "=", "None", ")", ":", "\n", "        ", "super", "(", "DenseGCNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gcn_layers_dim", ")", "-", "1", ")", ":", "\n", "            ", "if", "supplement_mode", "is", "not", "None", "and", "i", "==", "1", ":", "\n", "                ", "self", ".", "supplement_func", ",", "supplement_dim_func", "=", "vector_operations", "[", "supplement_mode", "]", "\n", "conv_layer_input", "=", "supplement_dim_func", "(", "gcn_layers_dim", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "conv_layer_input", "=", "gcn_layers_dim", "[", "i", "]", "\n", "", "conv_layer", "=", "DenseGCNConv", "(", "conv_layer_input", ",", "gcn_layers_dim", "[", "i", "+", "1", "]", ")", "\n", "self", ".", "conv_layers", ".", "append", "(", "conv_layer", ")", "\n", "\n", "", "self", ".", "relu", "=", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "Dropout", "(", "dropout_rate", ")", "\n", "self", ".", "relu_layers_index", "=", "relu_layers_index", "\n", "self", ".", "dropout_layers_index", "=", "dropout_layers_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.DenseGCNBlock.forward": [[72, 86], ["range", "len", "embeddings.append", "torch.unsqueeze", "model.DenseGCNBlock.supplement_func", "model.DenseGCNBlock.relu", "model.DenseGCNBlock.dropout", "torch.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ",", "supplement_x", "=", "None", ")", ":", "\n", "        ", "output", "=", "x", "\n", "embeddings", "=", "[", "]", "\n", "for", "conv_layer_index", "in", "range", "(", "len", "(", "self", ".", "conv_layers", ")", ")", ":", "\n", "            ", "if", "supplement_x", "is", "not", "None", "and", "conv_layer_index", "==", "1", ":", "\n", "                ", "supplement_x", "=", "torch", ".", "unsqueeze", "(", "supplement_x", ",", "0", ")", "\n", "output", "=", "self", ".", "supplement_func", "(", "output", ",", "supplement_x", ")", "\n", "", "output", "=", "self", ".", "conv_layers", "[", "conv_layer_index", "]", "(", "output", ",", "adj", ",", "add_loop", "=", "False", ")", "\n", "if", "conv_layer_index", "in", "self", ".", "relu_layers_index", ":", "\n", "                ", "output", "=", "self", ".", "relu", "(", "output", ")", "\n", "", "if", "conv_layer_index", "in", "self", ".", "dropout_layers_index", ":", "\n", "                ", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "", "embeddings", ".", "append", "(", "torch", ".", "squeeze", "(", "output", ",", "dim", "=", "0", ")", ")", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.GCNBlock.__init__": [[89, 106], ["super().__init__", "torch.nn.ModuleList", "range", "torch.nn.ReLU", "torch.nn.Dropout", "torch_geometric.nn.GCNConv", "model.GCNBlock.conv_layers.append", "len", "supplement_dim_func"], "methods", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gcn_layers_dim", ",", "dropout_rate", "=", "0", ",", "relu_layers_index", "=", "[", "]", ",", "dropout_layers_index", "=", "[", "]", ",", "supplement_mode", "=", "None", ")", ":", "\n", "        ", "super", "(", "GCNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gcn_layers_dim", ")", "-", "1", ")", ":", "\n", "            ", "if", "supplement_mode", "is", "not", "None", "and", "i", "==", "1", ":", "\n", "                ", "self", ".", "supplement_func", ",", "supplement_dim_func", "=", "vector_operations", "[", "supplement_mode", "]", "\n", "conv_layer_input", "=", "supplement_dim_func", "(", "gcn_layers_dim", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "conv_layer_input", "=", "gcn_layers_dim", "[", "i", "]", "\n", "", "conv_layer", "=", "GCNConv", "(", "conv_layer_input", ",", "gcn_layers_dim", "[", "i", "+", "1", "]", ")", "\n", "self", ".", "conv_layers", ".", "append", "(", "conv_layer", ")", "\n", "\n", "", "self", ".", "relu", "=", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "Dropout", "(", "dropout_rate", ")", "\n", "self", ".", "relu_layers_index", "=", "relu_layers_index", "\n", "self", ".", "dropout_layers_index", "=", "dropout_layers_index", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.GCNBlock.forward": [[107, 120], ["range", "len", "embeddings.append", "model.GCNBlock.supplement_func", "model.GCNBlock.relu", "model.GCNBlock.dropout", "torch_geometric.nn.global_mean_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "supplement_x", "=", "None", ")", ":", "\n", "        ", "output", "=", "x", "\n", "embeddings", "=", "[", "]", "\n", "for", "conv_layer_index", "in", "range", "(", "len", "(", "self", ".", "conv_layers", ")", ")", ":", "\n", "            ", "if", "supplement_x", "is", "not", "None", "and", "conv_layer_index", "==", "1", ":", "\n", "                ", "output", "=", "self", ".", "supplement_func", "(", "output", ",", "supplement_x", ")", "\n", "", "output", "=", "self", ".", "conv_layers", "[", "conv_layer_index", "]", "(", "output", ",", "edge_index", ",", "edge_weight", ")", "\n", "if", "conv_layer_index", "in", "self", ".", "relu_layers_index", ":", "\n", "                ", "output", "=", "self", ".", "relu", "(", "output", ")", "\n", "", "if", "conv_layer_index", "in", "self", ".", "dropout_layers_index", ":", "\n", "                ", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "", "embeddings", ".", "append", "(", "gep", "(", "output", ",", "batch", ")", ")", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.DenseGCNModel.__init__": [[123, 130], ["super().__init__", "print", "model.DenseGCNBlock", "len", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layers_dim", ",", "edge_dropout_rate", "=", "0", ",", "supplement_mode", "=", "None", ")", ":", "\n", "        ", "super", "(", "DenseGCNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'DenseGCNModel Loaded'", ")", "\n", "\n", "self", ".", "edge_dropout_rate", "=", "edge_dropout_rate", "\n", "self", ".", "num_layers", "=", "len", "(", "layers_dim", ")", "-", "1", "\n", "self", ".", "graph_conv", "=", "DenseGCNBlock", "(", "layers_dim", ",", "0.1", ",", "relu_layers_index", "=", "range", "(", "self", ".", "num_layers", ")", ",", "dropout_layers_index", "=", "range", "(", "self", ".", "num_layers", ")", ",", "supplement_mode", "=", "supplement_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.DenseGCNModel.forward": [[131, 142], ["torch.where", "torch.cat", "torch_geometric.utils.dropout_adj", "torch.zeros_like", "model.DenseGCNModel.graph_conv", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "graph", ",", "supplement_x", "=", "None", ")", ":", "\n", "        ", "xs", ",", "adj", ",", "num_node1s", ",", "num_node2s", "=", "graph", ".", "x", ",", "graph", ".", "adj", ",", "graph", ".", "num_node1s", ",", "graph", ".", "num_node2s", "\n", "indexs", "=", "torch", ".", "where", "(", "adj", "!=", "0", ")", "\n", "edge_indexs", "=", "torch", ".", "cat", "(", "(", "torch", ".", "unsqueeze", "(", "indexs", "[", "0", "]", ",", "0", ")", ",", "torch", ".", "unsqueeze", "(", "indexs", "[", "1", "]", ",", "0", ")", ")", ",", "0", ")", "\n", "edge_indexs_dropout", ",", "edge_weights_dropout", "=", "dropout_adj", "(", "edge_index", "=", "edge_indexs", ",", "edge_attr", "=", "adj", "[", "indexs", "]", ",", "p", "=", "self", ".", "edge_dropout_rate", ",", "force_undirected", "=", "True", ",", "num_nodes", "=", "num_node1s", "+", "num_node2s", ",", "training", "=", "self", ".", "training", ")", "\n", "adj_dropout", "=", "torch", ".", "zeros_like", "(", "adj", ")", "\n", "adj_dropout", "[", "edge_indexs_dropout", "[", "0", "]", ",", "edge_indexs_dropout", "[", "1", "]", "]", "=", "edge_weights_dropout", "\n", "\n", "embeddings", "=", "self", ".", "graph_conv", "(", "xs", ",", "adj_dropout", ",", "supplement_x", "=", "supplement_x", ")", "\n", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.GCNModel.__init__": [[145, 151], ["super().__init__", "print", "model.GCNBlock", "len", "range"], "methods", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layers_dim", ",", "supplement_mode", "=", "None", ")", ":", "\n", "        ", "super", "(", "GCNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'GCNModel Loaded'", ")", "\n", "\n", "self", ".", "num_layers", "=", "len", "(", "layers_dim", ")", "-", "1", "\n", "self", ".", "graph_conv", "=", "GCNBlock", "(", "layers_dim", ",", "relu_layers_index", "=", "range", "(", "self", ".", "num_layers", ")", ",", "supplement_mode", "=", "supplement_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.GCNModel.forward": [[152, 168], ["range", "list", "list", "embeddings.append", "graph_batch.__setitem__", "map", "map", "torch.cat", "list", "model.GCNModel.graph_conv", "model.GCNModel.graph_conv", "map", "graph.batch.int().cpu().numpy", "graph.batch.int().cpu", "graph.batch.int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "graph_batchs", ",", "supplement_x", "=", "None", ")", ":", "\n", "\n", "        ", "if", "supplement_x", "is", "not", "None", ":", "\n", "            ", "supplement_i", "=", "0", "\n", "for", "graph_batch", "in", "graph_batchs", ":", "\n", "                ", "graph_batch", ".", "__setitem__", "(", "'supplement_x'", ",", "supplement_x", "[", "supplement_i", ":", "supplement_i", "+", "graph_batch", ".", "num_graphs", "]", ")", "\n", "supplement_i", "+=", "graph_batch", ".", "num_graphs", "\n", "", "embedding_batchs", "=", "list", "(", "map", "(", "lambda", "graph", ":", "self", ".", "graph_conv", "(", "graph", ".", "x", ",", "graph", ".", "edge_index", ",", "None", ",", "graph", ".", "batch", ",", "supplement_x", "=", "graph", ".", "supplement_x", "[", "graph", ".", "batch", ".", "int", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", ",", "graph_batchs", ")", ")", "\n", "", "else", ":", "\n", "            ", "embedding_batchs", "=", "list", "(", "map", "(", "lambda", "graph", ":", "self", ".", "graph_conv", "(", "graph", ".", "x", ",", "graph", ".", "edge_index", ",", "None", ",", "graph", ".", "batch", ")", ",", "graph_batchs", ")", ")", "\n", "\n", "", "embeddings", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "embeddings", ".", "append", "(", "torch", ".", "cat", "(", "list", "(", "map", "(", "lambda", "embedding_batch", ":", "embedding_batch", "[", "i", "]", ",", "embedding_batchs", ")", ")", ",", "0", ")", ")", "\n", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.ConvNet.__init__": [[171, 202], ["super().__init__", "print", "model.DenseGCNModel", "model.LinearBlock", "model.LinearBlock", "model.GCNModel", "model.GCNModel", "model.LinearBlock", "model.LinearBlock"], "methods", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ag_init_dim", "=", "2339", ",", "mg_init_dim", "=", "78", ",", "pg_init_dim", "=", "54", ",", "affinity_dropout_rate", "=", "0.2", ",", "skip", "=", "False", ",", "embedding_dim", "=", "128", ",", "integration_mode", "=", "\"combination4\"", ")", ":", "\n", "        ", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'ConvNet Loaded'", ")", "\n", "\n", "affinity_graph_dims", "=", "[", "ag_init_dim", ",", "512", ",", "256", "]", "\n", "\n", "drug_graph_dims", "=", "[", "mg_init_dim", ",", "mg_init_dim", ",", "mg_init_dim", "*", "2", ",", "mg_init_dim", "*", "4", "]", "\n", "target_graph_dims", "=", "[", "pg_init_dim", ",", "pg_init_dim", ",", "pg_init_dim", "*", "2", ",", "pg_init_dim", "*", "4", "]", "\n", "\n", "drug_transform_dims", "=", "[", "affinity_graph_dims", "[", "-", "1", "]", ",", "1024", ",", "drug_graph_dims", "[", "1", "]", "]", "\n", "target_transform_dims", "=", "[", "affinity_graph_dims", "[", "-", "1", "]", ",", "1024", ",", "target_graph_dims", "[", "1", "]", "]", "\n", "\n", "self", ".", "skip", "=", "skip", "\n", "if", "not", "skip", ":", "\n", "            ", "drug_output_dims", "=", "[", "drug_graph_dims", "[", "-", "1", "]", ",", "1024", ",", "embedding_dim", "]", "\n", "target_output_dims", "=", "[", "target_graph_dims", "[", "-", "1", "]", ",", "1024", ",", "embedding_dim", "]", "\n", "", "else", ":", "\n", "            ", "drug_output_dims", "=", "[", "drug_graph_dims", "[", "-", "1", "]", "+", "drug_transform_dims", "[", "-", "1", "]", ",", "1024", ",", "embedding_dim", "]", "\n", "target_output_dims", "=", "[", "target_graph_dims", "[", "-", "1", "]", "+", "target_transform_dims", "[", "-", "1", "]", ",", "1024", ",", "embedding_dim", "]", "\n", "\n", "", "self", ".", "output_dim", "=", "embedding_dim", "\n", "\n", "self", ".", "affinity_graph_conv", "=", "DenseGCNModel", "(", "affinity_graph_dims", ",", "affinity_dropout_rate", ")", "\n", "self", ".", "drug_transform_linear", "=", "LinearBlock", "(", "drug_transform_dims", ",", "0.1", ",", "relu_layers_index", "=", "[", "0", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "self", ".", "target_transform_linear", "=", "LinearBlock", "(", "target_transform_dims", ",", "0.1", ",", "relu_layers_index", "=", "[", "0", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "self", ".", "drug_graph_conv", "=", "GCNModel", "(", "drug_graph_dims", ",", "supplement_mode", "=", "integration_mode", ")", "\n", "self", ".", "target_graph_conv", "=", "GCNModel", "(", "target_graph_dims", ",", "supplement_mode", "=", "integration_mode", ")", "\n", "\n", "self", ".", "drug_output_linear", "=", "LinearBlock", "(", "drug_output_dims", ",", "0.2", ",", "relu_layers_index", "=", "[", "0", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "self", ".", "target_output_linear", "=", "LinearBlock", "(", "target_output_dims", ",", "0.2", ",", "relu_layers_index", "=", "[", "0", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.ConvNet.forward": [[203, 236], ["model.ConvNet.affinity_graph_conv", "model.ConvNet.drug_graph_conv", "model.ConvNet.target_graph_conv", "torch.sum", "torch.mean", "model.ConvNet.drug_transform_linear", "torch.sum", "torch.mean", "model.ConvNet.target_transform_linear", "model.ConvNet.drug_output_linear", "model.ConvNet.target_output_linear", "model.ConvNet.drug_output_linear", "model.ConvNet.target_output_linear", "torch.cat", "torch.cat", "model.ConvNet.drug_transform_linear", "model.ConvNet.target_transform_linear", "model.ConvNet.drug_transform_linear", "model.ConvNet.target_transform_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "affinity_graph", ",", "drug_graph_batchs", ",", "target_graph_batchs", ",", "drug_map", "=", "None", ",", "drug_map_weight", "=", "None", ",", "target_map", "=", "None", ",", "target_map_weight", "=", "None", ")", ":", "\n", "\n", "        ", "num_node1s", ",", "num_node2s", "=", "affinity_graph", ".", "num_node1s", ",", "affinity_graph", ".", "num_node2s", "\n", "\n", "affinity_graph_embedding", "=", "self", ".", "affinity_graph_conv", "(", "affinity_graph", ")", "[", "-", "1", "]", "\n", "\n", "if", "drug_map", "is", "not", "None", ":", "\n", "            ", "if", "drug_map_weight", "is", "not", "None", ":", "\n", "                ", "drug_transform_embedding", "=", "torch", ".", "sum", "(", "self", ".", "drug_transform_linear", "(", "affinity_graph_embedding", "[", ":", "num_node1s", "]", ")", "[", "-", "1", "]", "[", "drug_map", ",", ":", "]", "*", "drug_map_weight", ",", "dim", "=", "-", "2", ")", "\n", "", "else", ":", "\n", "                ", "drug_transform_embedding", "=", "torch", ".", "mean", "(", "self", ".", "drug_transform_linear", "(", "affinity_graph_embedding", "[", ":", "num_node1s", "]", ")", "[", "-", "1", "]", "[", "drug_map", ",", ":", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "", "else", ":", "\n", "            ", "drug_transform_embedding", "=", "self", ".", "drug_transform_linear", "(", "affinity_graph_embedding", "[", ":", "num_node1s", "]", ")", "[", "-", "1", "]", "\n", "\n", "", "if", "target_map", "is", "not", "None", ":", "\n", "            ", "if", "target_map_weight", "is", "not", "None", ":", "\n", "                ", "target_transform_embedding", "=", "torch", ".", "sum", "(", "self", ".", "target_transform_linear", "(", "affinity_graph_embedding", "[", "num_node1s", ":", "]", ")", "[", "-", "1", "]", "[", "target_map", ",", ":", "]", "*", "target_map_weight", ",", "dim", "=", "-", "2", ")", "\n", "", "else", ":", "\n", "                ", "target_transform_embedding", "=", "torch", ".", "mean", "(", "self", ".", "target_transform_linear", "(", "affinity_graph_embedding", "[", "num_node1s", ":", "]", ")", "[", "-", "1", "]", "[", "target_map", ",", ":", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "", "else", ":", "\n", "            ", "target_transform_embedding", "=", "self", ".", "target_transform_linear", "(", "affinity_graph_embedding", "[", "num_node1s", ":", "]", ")", "[", "-", "1", "]", "\n", "\n", "", "drug_graph_embedding", "=", "self", ".", "drug_graph_conv", "(", "drug_graph_batchs", ",", "supplement_x", "=", "drug_transform_embedding", ")", "[", "-", "1", "]", "\n", "target_graph_embedding", "=", "self", ".", "target_graph_conv", "(", "target_graph_batchs", ",", "supplement_x", "=", "target_transform_embedding", ")", "[", "-", "1", "]", "\n", "\n", "if", "not", "self", ".", "skip", ":", "\n", "            ", "drug_output_embedding", "=", "self", ".", "drug_output_linear", "(", "drug_graph_embedding", ")", "[", "-", "1", "]", "\n", "target_output_embedding", "=", "self", ".", "target_output_linear", "(", "target_graph_embedding", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "drug_output_embedding", "=", "self", ".", "drug_output_linear", "(", "torch", ".", "cat", "(", "(", "drug_graph_embedding", ",", "drug_transform_embedding", ")", ",", "1", ")", ")", "[", "-", "1", "]", "\n", "target_output_embedding", "=", "self", ".", "target_output_linear", "(", "torch", ".", "cat", "(", "(", "target_graph_embedding", ",", "target_transform_embedding", ")", ",", "1", ")", ")", "[", "-", "1", "]", "\n", "\n", "", "return", "drug_output_embedding", ",", "target_output_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.FirstVariantOfConvNet.__init__": [[240, 254], ["super().__init__", "print", "model.DenseGCNModel", "model.LinearBlock", "model.LinearBlock"], "methods", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ag_init_dim", "=", "2339", ",", "mg_init_dim", "=", "78", ",", "pg_init_dim", "=", "54", ",", "affinity_dropout_rate", "=", "0.2", ",", "skip", "=", "False", ",", "embedding_dim", "=", "128", ",", "integration_mode", "=", "\"combination4\"", ")", ":", "\n", "        ", "super", "(", "FirstVariantOfConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'FirstVariantOfConvNet Loaded'", ")", "\n", "\n", "affinity_graph_dims", "=", "[", "ag_init_dim", ",", "512", ",", "256", "]", "\n", "\n", "drug_transform_dims", "=", "[", "affinity_graph_dims", "[", "-", "1", "]", ",", "1024", ",", "embedding_dim", "]", "\n", "target_transform_dims", "=", "[", "affinity_graph_dims", "[", "-", "1", "]", ",", "1024", ",", "embedding_dim", "]", "\n", "\n", "self", ".", "output_dim", "=", "embedding_dim", "\n", "\n", "self", ".", "affinity_graph_conv", "=", "DenseGCNModel", "(", "affinity_graph_dims", ",", "affinity_dropout_rate", ")", "\n", "self", ".", "drug_transform_linear", "=", "LinearBlock", "(", "drug_transform_dims", ",", "0.1", ",", "relu_layers_index", "=", "[", "0", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "self", ".", "target_transform_linear", "=", "LinearBlock", "(", "target_transform_dims", ",", "0.1", ",", "relu_layers_index", "=", "[", "0", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.FirstVariantOfConvNet.forward": [[255, 281], ["model.FirstVariantOfConvNet.affinity_graph_conv", "torch.sum", "torch.mean", "model.FirstVariantOfConvNet.drug_transform_linear", "torch.sum", "torch.mean", "model.FirstVariantOfConvNet.target_transform_linear", "model.FirstVariantOfConvNet.drug_transform_linear", "model.FirstVariantOfConvNet.target_transform_linear", "model.FirstVariantOfConvNet.drug_transform_linear", "model.FirstVariantOfConvNet.target_transform_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "affinity_graph", ",", "drug_graph_batchs", ",", "target_graph_batchs", ",", "drug_map", "=", "None", ",", "drug_map_weight", "=", "None", ",", "target_map", "=", "None", ",", "target_map_weight", "=", "None", ")", ":", "\n", "\n", "        ", "num_node1s", ",", "num_node2s", "=", "affinity_graph", ".", "num_node1s", ",", "affinity_graph", ".", "num_node2s", "\n", "\n", "affinity_graph_embedding", "=", "self", ".", "affinity_graph_conv", "(", "affinity_graph", ")", "[", "-", "1", "]", "\n", "\n", "if", "drug_map", "is", "not", "None", ":", "\n", "            ", "if", "drug_map_weight", "is", "not", "None", ":", "\n", "                ", "drug_transform_embedding", "=", "torch", ".", "sum", "(", "self", ".", "drug_transform_linear", "(", "affinity_graph_embedding", "[", ":", "num_node1s", "]", ")", "[", "-", "1", "]", "[", "drug_map", ",", ":", "]", "*", "drug_map_weight", ",", "dim", "=", "-", "2", ")", "\n", "", "else", ":", "\n", "                ", "drug_transform_embedding", "=", "torch", ".", "mean", "(", "self", ".", "drug_transform_linear", "(", "affinity_graph_embedding", "[", ":", "num_node1s", "]", ")", "[", "-", "1", "]", "[", "drug_map", ",", ":", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "", "else", ":", "\n", "            ", "drug_transform_embedding", "=", "self", ".", "drug_transform_linear", "(", "affinity_graph_embedding", "[", ":", "num_node1s", "]", ")", "[", "-", "1", "]", "\n", "\n", "", "if", "target_map", "is", "not", "None", ":", "\n", "            ", "if", "target_map_weight", "is", "not", "None", ":", "\n", "                ", "target_transform_embedding", "=", "torch", ".", "sum", "(", "self", ".", "target_transform_linear", "(", "affinity_graph_embedding", "[", "num_node1s", ":", "]", ")", "[", "-", "1", "]", "[", "target_map", ",", ":", "]", "*", "target_map_weight", ",", "dim", "=", "-", "2", ")", "\n", "", "else", ":", "\n", "                ", "target_transform_embedding", "=", "torch", ".", "mean", "(", "self", ".", "target_transform_linear", "(", "affinity_graph_embedding", "[", "num_node1s", ":", "]", ")", "[", "-", "1", "]", "[", "target_map", ",", ":", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "", "else", ":", "\n", "            ", "target_transform_embedding", "=", "self", ".", "target_transform_linear", "(", "affinity_graph_embedding", "[", "num_node1s", ":", "]", ")", "[", "-", "1", "]", "\n", "\n", "", "drug_output_embedding", "=", "drug_transform_embedding", "\n", "target_output_embedding", "=", "target_transform_embedding", "\n", "\n", "return", "drug_output_embedding", ",", "target_output_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.SecondVariantOfConvNet.__init__": [[285, 302], ["super().__init__", "print", "model.GCNModel", "model.GCNModel", "model.LinearBlock", "model.LinearBlock"], "methods", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ag_init_dim", "=", "2339", ",", "mg_init_dim", "=", "78", ",", "pg_init_dim", "=", "54", ",", "affinity_dropout_rate", "=", "0.2", ",", "skip", "=", "False", ",", "embedding_dim", "=", "128", ",", "integration_mode", "=", "\"combination4\"", ")", ":", "\n", "        ", "super", "(", "SecondVariantOfConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'SecondVariantOfConvNet'", ")", "\n", "\n", "drug_graph_dims", "=", "[", "mg_init_dim", ",", "mg_init_dim", ",", "mg_init_dim", "*", "2", ",", "mg_init_dim", "*", "4", "]", "\n", "target_graph_dims", "=", "[", "pg_init_dim", ",", "pg_init_dim", ",", "pg_init_dim", "*", "2", ",", "pg_init_dim", "*", "4", "]", "\n", "\n", "drug_output_dims", "=", "[", "drug_graph_dims", "[", "-", "1", "]", ",", "1024", ",", "embedding_dim", "]", "\n", "target_output_dims", "=", "[", "target_graph_dims", "[", "-", "1", "]", ",", "1024", ",", "embedding_dim", "]", "\n", "\n", "self", ".", "output_dim", "=", "embedding_dim", "\n", "\n", "self", ".", "drug_graph_conv", "=", "GCNModel", "(", "drug_graph_dims", ")", "\n", "self", ".", "target_graph_conv", "=", "GCNModel", "(", "target_graph_dims", ")", "\n", "\n", "self", ".", "drug_output_linear", "=", "LinearBlock", "(", "drug_output_dims", ",", "0.2", ",", "relu_layers_index", "=", "[", "0", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "self", ".", "target_output_linear", "=", "LinearBlock", "(", "target_output_dims", ",", "0.2", ",", "relu_layers_index", "=", "[", "0", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.SecondVariantOfConvNet.forward": [[303, 312], ["model.SecondVariantOfConvNet.drug_graph_conv", "model.SecondVariantOfConvNet.target_graph_conv", "model.SecondVariantOfConvNet.drug_output_linear", "model.SecondVariantOfConvNet.target_output_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "affinity_graph", ",", "drug_graph_batchs", ",", "target_graph_batchs", ",", "drug_map", "=", "None", ",", "drug_map_weight", "=", "None", ",", "target_map", "=", "None", ",", "target_map_weight", "=", "None", ")", ":", "\n", "\n", "        ", "drug_graph_embedding", "=", "self", ".", "drug_graph_conv", "(", "drug_graph_batchs", ")", "[", "-", "1", "]", "\n", "target_graph_embedding", "=", "self", ".", "target_graph_conv", "(", "target_graph_batchs", ")", "[", "-", "1", "]", "\n", "\n", "drug_output_embedding", "=", "self", ".", "drug_output_linear", "(", "drug_graph_embedding", ")", "[", "-", "1", "]", "\n", "target_output_embedding", "=", "self", ".", "target_output_linear", "(", "target_graph_embedding", ")", "[", "-", "1", "]", "\n", "\n", "return", "drug_output_embedding", ",", "target_output_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.ThirdVariantOfConvNet.__init__": [[316, 343], ["super().__init__", "print", "integration_dim_func", "model.DenseGCNModel", "model.LinearBlock", "model.LinearBlock", "model.GCNModel", "model.GCNModel", "model.LinearBlock", "model.LinearBlock"], "methods", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ag_init_dim", "=", "2339", ",", "mg_init_dim", "=", "78", ",", "pg_init_dim", "=", "54", ",", "affinity_dropout_rate", "=", "0.2", ",", "skip", "=", "False", ",", "embedding_dim", "=", "128", ",", "integration_mode", "=", "\"combination4\"", ")", ":", "\n", "        ", "super", "(", "ThirdVariantOfConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'ThirdVariantOfConvNet Loaded'", ")", "\n", "\n", "affinity_graph_dims", "=", "[", "ag_init_dim", ",", "512", ",", "256", "]", "\n", "\n", "drug_graph_dims", "=", "[", "mg_init_dim", ",", "mg_init_dim", ",", "mg_init_dim", "*", "2", ",", "mg_init_dim", "*", "4", "]", "\n", "target_graph_dims", "=", "[", "pg_init_dim", ",", "pg_init_dim", ",", "pg_init_dim", "*", "2", ",", "pg_init_dim", "*", "4", "]", "\n", "\n", "drug_transform_dims", "=", "[", "affinity_graph_dims", "[", "-", "1", "]", ",", "1024", ",", "embedding_dim", "]", "\n", "target_transform_dims", "=", "[", "affinity_graph_dims", "[", "-", "1", "]", ",", "1024", ",", "embedding_dim", "]", "\n", "\n", "drug_output_dims", "=", "[", "drug_graph_dims", "[", "-", "1", "]", ",", "1024", ",", "embedding_dim", "]", "\n", "target_output_dims", "=", "[", "target_graph_dims", "[", "-", "1", "]", ",", "1024", ",", "embedding_dim", "]", "\n", "\n", "self", ".", "integration_func", ",", "integration_dim_func", "=", "vector_operations", "[", "integration_mode", "]", "\n", "self", ".", "output_dim", "=", "integration_dim_func", "(", "embedding_dim", ")", "\n", "\n", "self", ".", "affinity_graph_conv", "=", "DenseGCNModel", "(", "affinity_graph_dims", ",", "affinity_dropout_rate", ")", "\n", "self", ".", "drug_transform_linear", "=", "LinearBlock", "(", "drug_transform_dims", ",", "0.1", ",", "relu_layers_index", "=", "[", "0", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "self", ".", "target_transform_linear", "=", "LinearBlock", "(", "target_transform_dims", ",", "0.1", ",", "relu_layers_index", "=", "[", "0", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "self", ".", "drug_graph_conv", "=", "GCNModel", "(", "drug_graph_dims", ")", "\n", "self", ".", "target_graph_conv", "=", "GCNModel", "(", "target_graph_dims", ")", "\n", "\n", "self", ".", "drug_output_linear", "=", "LinearBlock", "(", "drug_output_dims", ",", "0.2", ",", "relu_layers_index", "=", "[", "0", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "self", ".", "target_output_linear", "=", "LinearBlock", "(", "target_output_dims", ",", "0.2", ",", "relu_layers_index", "=", "[", "0", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.ThirdVariantOfConvNet.forward": [[344, 373], ["model.ThirdVariantOfConvNet.integration_func", "model.ThirdVariantOfConvNet.integration_func", "model.ThirdVariantOfConvNet.affinity_graph_conv", "model.ThirdVariantOfConvNet.drug_graph_conv", "model.ThirdVariantOfConvNet.target_graph_conv", "torch.sum", "torch.mean", "model.ThirdVariantOfConvNet.drug_transform_linear", "torch.sum", "torch.mean", "model.ThirdVariantOfConvNet.target_transform_linear", "model.ThirdVariantOfConvNet.drug_output_linear", "model.ThirdVariantOfConvNet.target_output_linear", "model.ThirdVariantOfConvNet.drug_transform_linear", "model.ThirdVariantOfConvNet.target_transform_linear", "model.ThirdVariantOfConvNet.drug_transform_linear", "model.ThirdVariantOfConvNet.target_transform_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "affinity_graph", ",", "drug_graph_batchs", ",", "target_graph_batchs", ",", "drug_map", "=", "None", ",", "drug_map_weight", "=", "None", ",", "target_map", "=", "None", ",", "target_map_weight", "=", "None", ")", ":", "\n", "\n", "        ", "num_node1s", ",", "num_node2s", "=", "affinity_graph", ".", "num_node1s", ",", "affinity_graph", ".", "num_node2s", "\n", "\n", "affinity_graph_embedding", "=", "self", ".", "affinity_graph_conv", "(", "affinity_graph", ")", "[", "-", "1", "]", "\n", "\n", "if", "drug_map", "is", "not", "None", ":", "\n", "            ", "if", "drug_map_weight", "is", "not", "None", ":", "\n", "                ", "drug_transform_embedding", "=", "torch", ".", "sum", "(", "self", ".", "drug_transform_linear", "(", "affinity_graph_embedding", "[", ":", "num_node1s", "]", ")", "[", "-", "1", "]", "[", "drug_map", ",", ":", "]", "*", "drug_map_weight", ",", "dim", "=", "-", "2", ")", "\n", "", "else", ":", "\n", "                ", "drug_transform_embedding", "=", "torch", ".", "mean", "(", "self", ".", "drug_transform_linear", "(", "affinity_graph_embedding", "[", ":", "num_node1s", "]", ")", "[", "-", "1", "]", "[", "drug_map", ",", ":", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "", "else", ":", "\n", "            ", "drug_transform_embedding", "=", "self", ".", "drug_transform_linear", "(", "affinity_graph_embedding", "[", ":", "num_node1s", "]", ")", "[", "-", "1", "]", "\n", "\n", "", "if", "target_map", "is", "not", "None", ":", "\n", "            ", "if", "target_map_weight", "is", "not", "None", ":", "\n", "                ", "target_transform_embedding", "=", "torch", ".", "sum", "(", "self", ".", "target_transform_linear", "(", "affinity_graph_embedding", "[", "num_node1s", ":", "]", ")", "[", "-", "1", "]", "[", "target_map", ",", ":", "]", "*", "target_map_weight", ",", "dim", "=", "-", "2", ")", "\n", "", "else", ":", "\n", "                ", "target_transform_embedding", "=", "torch", ".", "mean", "(", "self", ".", "target_transform_linear", "(", "affinity_graph_embedding", "[", "num_node1s", ":", "]", ")", "[", "-", "1", "]", "[", "target_map", ",", ":", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "", "else", ":", "\n", "            ", "target_transform_embedding", "=", "self", ".", "target_transform_linear", "(", "affinity_graph_embedding", "[", "num_node1s", ":", "]", ")", "[", "-", "1", "]", "\n", "\n", "", "drug_graph_embedding", "=", "self", ".", "drug_graph_conv", "(", "drug_graph_batchs", ")", "[", "-", "1", "]", "\n", "target_graph_embedding", "=", "self", ".", "target_graph_conv", "(", "target_graph_batchs", ")", "[", "-", "1", "]", "\n", "\n", "drug_output_embedding", "=", "self", ".", "integration_func", "(", "self", ".", "drug_output_linear", "(", "drug_graph_embedding", ")", "[", "-", "1", "]", ",", "drug_transform_embedding", ")", "\n", "target_output_embedding", "=", "self", ".", "integration_func", "(", "self", ".", "target_output_linear", "(", "target_graph_embedding", ")", "[", "-", "1", "]", ",", "target_transform_embedding", ")", "\n", "\n", "return", "drug_output_embedding", ",", "target_output_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.Predictor.__init__": [[376, 384], ["super().__init__", "print", "model.LinearBlock", "prediction_dim_func"], "methods", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", "=", "128", ",", "output_dim", "=", "1", ",", "prediction_mode", "=", "\"cat\"", ")", ":", "\n", "        ", "super", "(", "Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'Predictor Loaded'", ")", "\n", "\n", "self", ".", "prediction_func", ",", "prediction_dim_func", "=", "vector_operations", "[", "prediction_mode", "]", "\n", "mlp_layers_dim", "=", "[", "prediction_dim_func", "(", "embedding_dim", ")", ",", "1024", ",", "512", ",", "output_dim", "]", "\n", "\n", "self", ".", "mlp", "=", "LinearBlock", "(", "mlp_layers_dim", ",", "0.1", ",", "relu_layers_index", "=", "[", "0", ",", "1", "]", ",", "dropout_layers_index", "=", "[", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.model.Predictor.forward": [[385, 399], ["model.Predictor.prediction_func", "model.Predictor.mlp", "drug_id.int().cpu().numpy", "target_id.int().cpu().numpy", "drug_id.int().cpu", "target_id.int().cpu", "drug_id.int", "target_id.int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "drug_embedding", ",", "target_embedding", ")", ":", "\n", "\n", "        ", "drug_id", ",", "target_id", ",", "y", "=", "data", ".", "drug_id", ",", "data", ".", "target_id", ",", "data", ".", "y", "\n", "\n", "drug_feature", "=", "drug_embedding", "[", "drug_id", ".", "int", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "target_feature", "=", "target_embedding", "[", "target_id", ".", "int", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "\n", "concat_feature", "=", "self", ".", "prediction_func", "(", "drug_feature", ",", "target_feature", ")", "\n", "\n", "mlp_embeddings", "=", "self", ".", "mlp", "(", "concat_feature", ")", "\n", "link_embeddings", "=", "mlp_embeddings", "[", "-", "2", "]", "\n", "out", "=", "mlp_embeddings", "[", "-", "1", "]", "\n", "\n", "return", "out", ",", "link_embeddings", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.train_test_S2.create_dataset_for_train_test": [[11, 71], ["json.load", "range", "numpy.where", "utils.DTADataset", "numpy.where", "utils.DTADataset", "GraphInput.getAffinityGraph", "json.load", "numpy.array", "numpy.array", "dict", "dict", "GraphInput.getDrugMolecularGraph", "GraphInput.getDrugMolecularGraph", "numpy.loadtxt", "len", "numpy.full", "numpy.arange", "numpy.expand_dims", "numpy.expand_dims", "GraphInput.getTargetMolecularGraph", "open", "len", "json.load", "json.load", "open", "list", "list", "zip", "zip", "numpy.argpartition", "numpy.sum", "json.load", "open", "open", "json.load", "json.load", "numpy.isnan", "numpy.isnan", "json.load.keys", "json.load.values", "open", "open", "open", "numpy.isnan", "numpy.tile().transpose", "numpy.tile", "numpy.expand_dims", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getAffinityGraph", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getDrugMolecularGraph", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getDrugMolecularGraph", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.GraphInput.getTargetMolecularGraph"], ["def", "create_dataset_for_train_test", "(", "affinity", ",", "dataset", ",", "fold", ",", "weighted", ",", "drug_aff_k", ",", "target_aff_k", ",", "drug_sim_k", ")", ":", "\n", "# load dataset", "\n", "    ", "dataset_path", "=", "'data/'", "+", "dataset", "+", "'/'", "\n", "\n", "drug_train_fold_origin", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S2_train_set.txt'", ")", ")", "\n", "drug_train_folds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "drug_train_fold_origin", ")", ")", ":", "\n", "        ", "if", "i", "!=", "fold", ":", "\n", "            ", "drug_train_folds", "+=", "drug_train_fold_origin", "[", "i", "]", "\n", "", "", "drug_test_fold", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S2_test_set.txt'", ")", ")", "if", "fold", "==", "-", "100", "else", "drug_train_fold_origin", "[", "fold", "]", "\n", "drug_mask_fold", "=", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S2_mask_set.txt'", ")", ")", "if", "fold", "==", "-", "100", "else", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S2_test_set.txt'", ")", ")", "+", "json", ".", "load", "(", "open", "(", "dataset_path", "+", "'S2_mask_set.txt'", ")", ")", "\n", "\n", "# train set and test set", "\n", "train_affinity", "=", "affinity", "[", "drug_train_folds", ",", ":", "]", "\n", "test_affinity", "=", "affinity", "[", "drug_test_fold", ",", ":", "]", "\n", "\n", "train_rows", ",", "train_cols", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "train_affinity", ")", "==", "False", ")", "\n", "train_Y", "=", "train_affinity", "[", "train_rows", ",", "train_cols", "]", "\n", "train_dataset", "=", "DTADataset", "(", "drug_ids", "=", "train_rows", ",", "target_ids", "=", "train_cols", ",", "y", "=", "train_Y", ")", "\n", "\n", "test_rows", ",", "test_cols", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "test_affinity", ")", "==", "False", ")", "\n", "test_Y", "=", "test_affinity", "[", "test_rows", ",", "test_cols", "]", "\n", "test_dataset", "=", "DTADataset", "(", "drug_ids", "=", "test_rows", ",", "target_ids", "=", "test_cols", ",", "y", "=", "test_Y", ")", "\n", "\n", "train_affinity", "[", "np", ".", "isnan", "(", "train_affinity", ")", "==", "True", "]", "=", "0", "\n", "affinity_graph", "=", "getAffinityGraph", "(", "dataset", ",", "train_affinity", ",", "weighted", ",", "drug_aff_k", ",", "target_aff_k", ")", "\n", "\n", "# drug molecular graphs", "\n", "drugs", "=", "json", ".", "load", "(", "open", "(", "f'data/{dataset}/drugs.txt'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "drug_keys", "=", "np", ".", "array", "(", "list", "(", "drugs", ".", "keys", "(", ")", ")", ")", "\n", "drug_values", "=", "np", ".", "array", "(", "list", "(", "drugs", ".", "values", "(", ")", ")", ")", "\n", "train_drug_keys", "=", "drug_keys", "[", "drug_train_folds", "]", "\n", "train_drug_values", "=", "drug_values", "[", "drug_train_folds", "]", "\n", "train_drugs", "=", "dict", "(", "zip", "(", "train_drug_keys", ",", "train_drug_values", ")", ")", "\n", "test_drug_keys", "=", "drug_keys", "[", "drug_test_fold", "]", "\n", "test_drug_values", "=", "drug_values", "[", "drug_test_fold", "]", "\n", "test_drugs", "=", "dict", "(", "zip", "(", "test_drug_keys", ",", "test_drug_values", ")", ")", "\n", "\n", "train_drug_graphs_dict", "=", "getDrugMolecularGraph", "(", "train_drugs", ")", "\n", "test_drug_graphs_dict", "=", "getDrugMolecularGraph", "(", "test_drugs", ")", "\n", "\n", "# drug map", "\n", "drug_sim", "=", "np", ".", "loadtxt", "(", "f\"data/{dataset}/drug-drug-sim.txt\"", ",", "delimiter", "=", "\",\"", ")", "\n", "drug_test_train_sim", "=", "drug_sim", "[", "drug_test_fold", ",", ":", "]", "\n", "drug_test_train_sim", "[", ":", ",", "drug_test_fold", "+", "drug_mask_fold", "]", "=", "-", "1", "\n", "\n", "drug_count", "=", "affinity", ".", "shape", "[", "0", "]", "\n", "drug_train_count", "=", "len", "(", "drug_train_folds", ")", "\n", "drug_test_train_map", "=", "np", ".", "argpartition", "(", "drug_test_train_sim", ",", "-", "drug_sim_k", ",", "1", ")", "[", ":", ",", "-", "drug_sim_k", ":", "]", "\n", "drug_train_map", "=", "np", ".", "full", "(", "drug_count", ",", "-", "1", ")", "\n", "drug_train_map", "[", "drug_train_folds", "]", "=", "np", ".", "arange", "(", "drug_train_count", ")", "\n", "drug_test_map", "=", "drug_train_map", "[", "drug_test_train_map", "]", "\n", "\n", "drug_test_map_weight", "=", "drug_test_train_sim", "[", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "drug_test_train_sim", ".", "shape", "[", "0", "]", ")", ",", "0", ")", ",", "(", "drug_sim_k", ",", "1", ")", ")", ".", "transpose", "(", ")", ",", "drug_test_train_map", "]", "\n", "drug_test_map_weight_sum", "=", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "drug_test_map_weight", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "drug_test_map_weight_norm", "=", "np", ".", "expand_dims", "(", "drug_test_map_weight", "/", "drug_test_map_weight_sum", ",", "axis", "=", "2", ")", "\n", "\n", "target_graphs_dict", "=", "getTargetMolecularGraph", "(", "json", ".", "load", "(", "open", "(", "f'data/{dataset}/targets.txt'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", ",", "dataset", ")", "\n", "\n", "return", "train_dataset", ",", "test_dataset", ",", "affinity_graph", ",", "train_drug_graphs_dict", ",", "test_drug_graphs_dict", ",", "target_graphs_dict", ",", "drug_count", ",", "drug_test_map", ",", "drug_test_map_weight_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.train_test_S2.train_test": [[73, 161], ["utils.argparser", "print", "print", "print", "print", "print", "print", "utils.read_data", "train_test_S2.create_dataset_for_train_test", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "utils.GraphDataset", "torch.utils.data.DataLoader", "utils.GraphDataset", "torch.utils.data.DataLoader", "utils.GraphDataset", "torch.utils.data.DataLoader", "torch.device", "Architecture", "Architecture.to", "model.Predictor", "model.Predictor.to", "print", "range", "print", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "utils.train", "utils.predicting", "metrics.model_evaluate", "torch.save", "torch.save", "print", "utils.predicting", "metrics.model_evaluate", "print", "print", "print", "torch.cuda.is_available", "torch.save", "torch.save", "Architecture.state_dict", "model.Predictor.state_dict", "torch.FloatTensor().to", "Architecture.state_dict", "model.Predictor.state_dict", "torch.FloatTensor().to", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.argparser", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.data.degrees.read_data", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.train_test_S2.create_dataset_for_train_test", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.train", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.predicting", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.model_evaluate", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.predicting", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.metrics.model_evaluate"], ["", "def", "train_test", "(", ")", ":", "\n", "\n", "    ", "FLAGS", "=", "argparser", "(", ")", "\n", "\n", "dataset", "=", "FLAGS", ".", "dataset", "\n", "cuda_name", "=", "f'cuda:{FLAGS.cuda_id}'", "\n", "TRAIN_BATCH_SIZE", "=", "FLAGS", ".", "batch_size", "\n", "TEST_BATCH_SIZE", "=", "FLAGS", ".", "batch_size", "\n", "NUM_EPOCHS", "=", "FLAGS", ".", "num_epochs", "\n", "LR", "=", "FLAGS", ".", "lr", "\n", "Architecture", "=", "[", "ConvNet", ",", "FirstVariantOfConvNet", ",", "SecondVariantOfConvNet", ",", "ThirdVariantOfConvNet", "]", "[", "FLAGS", ".", "model", "]", "\n", "model_name", "=", "Architecture", ".", "__name__", "\n", "fold", "=", "FLAGS", ".", "fold", "\n", "if", "fold", "!=", "-", "100", ":", "\n", "        ", "model_name", "+=", "f\"-{FLAGS.drug_sim_k}-{fold}\"", "\n", "\n", "", "print", "(", "\"Dataset:\"", ",", "dataset", ")", "\n", "print", "(", "\"Cuda name:\"", ",", "cuda_name", ")", "\n", "print", "(", "\"Epochs:\"", ",", "NUM_EPOCHS", ")", "\n", "print", "(", "\"Learning rate:\"", ",", "LR", ")", "\n", "print", "(", "\"Model name:\"", ",", "model_name", ")", "\n", "print", "(", "\"Train and test\"", ")", "if", "fold", "==", "-", "100", "else", "print", "(", "\"Fold of 5-CV:\"", ",", "fold", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "f\"models/architecture/{dataset}/S2/cross_validation/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/architecture/{dataset}/S2/cross_validation/\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"models/predictor/{dataset}/S2/cross_validation/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/predictor/{dataset}/S2/cross_validation/\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"models/architecture/{dataset}/S2/test/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/architecture/{dataset}/S2/test/\"", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "f\"models/predictor/{dataset}/S2/test/\"", ")", "is", "False", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"models/predictor/{dataset}/S2/test/\"", ")", "\n", "\n", "", "print", "(", "\"create dataset ...\"", ")", "\n", "affinity", "=", "read_data", "(", "dataset", ")", "\n", "train_data", ",", "test_data", ",", "affinity_graph", ",", "train_drug_graphs_dict", ",", "test_drug_graphs_dict", ",", "target_graphs_dict", ",", "drug_count", ",", "drug_test_map", ",", "drug_test_map_weight_norm", "=", "create_dataset_for_train_test", "(", "affinity", ",", "dataset", ",", "fold", ",", "FLAGS", ".", "weighted", ",", "FLAGS", ".", "drug_aff_k", ",", "FLAGS", ".", "target_aff_k", ",", "FLAGS", ".", "drug_sim_k", ")", "\n", "print", "(", "\"create train_loader and test_loader ...\"", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "TRAIN_BATCH_SIZE", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "collate", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_data", ",", "batch_size", "=", "TEST_BATCH_SIZE", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ")", "\n", "\n", "print", "(", "\"create drug_graphs_DataLoader and target_graphs_DataLoader ...\"", ")", "\n", "train_drug_graphs_Data", "=", "GraphDataset", "(", "graphs_dict", "=", "train_drug_graphs_dict", ",", "dttype", "=", "\"drug\"", ")", "\n", "train_drug_graphs_DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_drug_graphs_Data", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ",", "batch_size", "=", "affinity_graph", ".", "num_node1s", ")", "\n", "test_drug_graphs_Data", "=", "GraphDataset", "(", "graphs_dict", "=", "test_drug_graphs_dict", ",", "dttype", "=", "\"drug\"", ")", "\n", "test_drug_graphs_DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_drug_graphs_Data", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ",", "batch_size", "=", "drug_count", "-", "affinity_graph", ".", "num_node1s", ")", "\n", "target_graphs_Data", "=", "GraphDataset", "(", "graphs_dict", "=", "target_graphs_dict", ",", "dttype", "=", "\"target\"", ")", "\n", "target_graphs_DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "target_graphs_Data", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "collate", ",", "batch_size", "=", "affinity_graph", ".", "num_node2s", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "cuda_name", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "architecture", "=", "Architecture", "(", "ag_init_dim", "=", "affinity_graph", ".", "num_node1s", "+", "affinity_graph", ".", "num_node2s", "+", "2", ",", "skip", "=", "True", ")", "\n", "architecture", ".", "to", "(", "device", ")", "\n", "\n", "predictor", "=", "Predictor", "(", "embedding_dim", "=", "architecture", ".", "output_dim", ")", "\n", "predictor", ".", "to", "(", "device", ")", "\n", "\n", "if", "fold", "!=", "-", "100", ":", "\n", "        ", "best_result", "=", "[", "1000", "]", "\n", "", "print", "(", "\"start training ...\"", ")", "\n", "for", "epoch", "in", "range", "(", "NUM_EPOCHS", ")", ":", "\n", "        ", "train", "(", "architecture", ",", "predictor", ",", "device", ",", "train_loader", ",", "train_drug_graphs_DataLoader", ",", "target_graphs_DataLoader", ",", "LR", ",", "epoch", "+", "1", ",", "TRAIN_BATCH_SIZE", ",", "affinity_graph", ")", "\n", "G", ",", "P", "=", "predicting", "(", "architecture", ",", "predictor", ",", "device", ",", "test_loader", ",", "test_drug_graphs_DataLoader", ",", "target_graphs_DataLoader", ",", "affinity_graph", ",", "drug_map", "=", "drug_test_map", ",", "drug_map_weight", "=", "torch", ".", "FloatTensor", "(", "drug_test_map_weight_norm", ")", ".", "to", "(", "device", ")", ")", "\n", "result", "=", "model_evaluate", "(", "G", ",", "P", ",", "dataset", ")", "\n", "if", "fold", "!=", "-", "100", "and", "result", "[", "0", "]", "<", "best_result", "[", "0", "]", ":", "\n", "            ", "best_result", "=", "result", "\n", "checkpoint_dir", "=", "f\"models/architecture/{dataset}/S2/cross_validation/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "architecture", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "checkpoint_dir", "=", "f\"models/predictor/{dataset}/S2/cross_validation/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "predictor", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "", "", "if", "fold", "==", "-", "100", ":", "\n", "        ", "checkpoint_dir", "=", "f\"models/architecture/{dataset}/S2/test/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "architecture", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "checkpoint_dir", "=", "f\"models/predictor/{dataset}/S2/test/\"", "\n", "checkpoint_path", "=", "checkpoint_dir", "+", "model_name", "+", "\".pkl\"", "\n", "torch", ".", "save", "(", "predictor", ".", "state_dict", "(", ")", ",", "checkpoint_path", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "\n", "print", "(", "'\\npredicting for test data'", ")", "\n", "G", ",", "P", "=", "predicting", "(", "architecture", ",", "predictor", ",", "device", ",", "test_loader", ",", "test_drug_graphs_DataLoader", ",", "target_graphs_DataLoader", ",", "affinity_graph", ",", "drug_map", "=", "drug_test_map", ",", "drug_map_weight", "=", "torch", ".", "FloatTensor", "(", "drug_test_map_weight_norm", ")", ".", "to", "(", "device", ")", ")", "\n", "result", "=", "model_evaluate", "(", "G", ",", "P", ",", "dataset", ")", "\n", "print", "(", "\"reslut:\"", ",", "result", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"\\nbest result for fold {fold} of cross validation:\"", ")", "\n", "print", "(", "\"reslut:\"", ",", "best_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.DTADataset.__init__": [[32, 35], ["torch_geometric.data.InMemoryDataset.__init__", "utils.DTADataset.process"], "methods", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.process"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'/tmp'", ",", "transform", "=", "None", ",", "pre_transform", "=", "None", ",", "drug_ids", "=", "None", ",", "target_ids", "=", "None", ",", "y", "=", "None", ")", ":", "\n", "        ", "super", "(", "DTADataset", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", ",", "pre_transform", ")", "\n", "self", ".", "process", "(", "drug_ids", ",", "target_ids", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.DTADataset.raw_file_names": [[36, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.DTADataset.processed_file_names": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.DTADataset.download": [[44, 46], ["None"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.DTADataset._download": [[47, 49], ["None"], "methods", ["None"], ["", "def", "_download", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.DTADataset._process": [[50, 52], ["None"], "methods", ["None"], ["", "def", "_process", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.DTADataset.process": [[53, 59], ["range", "len", "torch_geometric.data.Data", "data_list.append", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "process", "(", "self", ",", "drug_ids", ",", "target_ids", ",", "y", ")", ":", "\n", "        ", "data_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "drug_ids", ")", ")", ":", "\n", "            ", "DTA", "=", "DATA", ".", "Data", "(", "drug_id", "=", "torch", ".", "IntTensor", "(", "[", "drug_ids", "[", "i", "]", "]", ")", ",", "target_id", "=", "torch", ".", "IntTensor", "(", "[", "target_ids", "[", "i", "]", "]", ")", ",", "y", "=", "torch", ".", "FloatTensor", "(", "[", "y", "[", "i", "]", "]", ")", ")", "\n", "data_list", ".", "append", "(", "DTA", ")", "\n", "", "self", ".", "data", "=", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.DTADataset.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.DTADataset.__getitem__": [[63, 65], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__": [[68, 72], ["torch_geometric.data.InMemoryDataset.__init__", "utils.GraphDataset.process"], "methods", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__init__", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.process"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'/tmp'", ",", "transform", "=", "None", ",", "pre_transform", "=", "None", ",", "graphs_dict", "=", "None", ",", "dttype", "=", "None", ")", ":", "\n", "        ", "super", "(", "GraphDataset", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", ",", "pre_transform", ")", "\n", "self", ".", "dttype", "=", "dttype", "\n", "self", ".", "process", "(", "graphs_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.raw_file_names": [[73, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_file_names", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.processed_file_names": [[77, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_file_names", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.download": [[81, 83], ["None"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset._download": [[84, 86], ["None"], "methods", ["None"], ["", "def", "_download", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset._process": [[87, 89], ["None"], "methods", ["None"], ["", "def", "_process", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.process": [[90, 98], ["torch_geometric.data.Data", "torch_geometric.data.Data.__setitem__", "data_list.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.LongTensor().transpose", "torch.LongTensor().transpose", "torch.LongTensor().transpose", "torch.LongTensor().transpose", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "process", "(", "self", ",", "graphs_dict", ")", ":", "\n", "        ", "data_list", "=", "[", "]", "\n", "for", "key", "in", "graphs_dict", ":", "\n", "            ", "size", ",", "features", ",", "edge_index", "=", "graphs_dict", "[", "key", "]", "\n", "GCNData", "=", "DATA", ".", "Data", "(", "x", "=", "torch", ".", "Tensor", "(", "features", ")", ",", "edge_index", "=", "torch", ".", "LongTensor", "(", "edge_index", ")", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "GCNData", ".", "__setitem__", "(", "f'{self.dttype}_size'", ",", "torch", ".", "LongTensor", "(", "[", "size", "]", ")", ")", "\n", "data_list", ".", "append", "(", "GCNData", ")", "\n", "", "self", ".", "data", "=", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__len__": [[99, 101], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.GraphDataset.__getitem__": [[102, 104], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.argparser": [[10, 28], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "argparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "help", "=", "'Dataset for use'", ",", "default", "=", "'davis'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda_id'", ",", "type", "=", "int", ",", "help", "=", "'Cuda for use'", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "help", "=", "'Number of epochs to train'", ",", "default", "=", "2000", ")", "# num_epochs = 200, when conducting the S2, S3 and S4 experiments", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "help", "=", "'Batch size of dataset'", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "help", "=", "'Initial learning rate to train'", ",", "default", "=", "0.0005", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "int", ",", "help", "=", "'Model id'", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--fold'", ",", "type", "=", "int", ",", "help", "=", "'Fold of 5-CV'", ",", "default", "=", "-", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--weighted'", ",", "help", "=", "'Whether affinity graph is weighted'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropedge_rate'", ",", "type", "=", "float", ",", "help", "=", "'Rate of edge dropout'", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "'--drug_sim_k'", ",", "type", "=", "int", ",", "help", "=", "'Similarity topk of drug'", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--target_sim_k'", ",", "type", "=", "int", ",", "help", "=", "'Similarity topk of target'", ",", "default", "=", "7", ")", "\n", "parser", ".", "add_argument", "(", "'--drug_aff_k'", ",", "type", "=", "int", ",", "help", "=", "'Affinity topk of drug'", ",", "default", "=", "40", ")", "\n", "parser", ".", "add_argument", "(", "'--target_aff_k'", ",", "type", "=", "int", ",", "help", "=", "'Affinity topk of target'", ",", "default", "=", "150", ")", "# target_aff_k = 90, when conducting the S2 and S4 experiments on the KIBA dataset", "\n", "FLAGS", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "return", "FLAGS", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.train": [[106, 126], ["print", "architecture.train", "predictor.train", "torch.MSELoss", "torch.optim.Adam", "torch.optim.Adam", "affinity_graph.to", "list", "list", "enumerate", "filter", "map", "map", "torch.optim.Adam.zero_grad", "architecture", "predictor", "nn.MSELoss.", "loss_fn.backward", "torch.optim.Adam.step", "len", "itertools.chain", "torch_geometric.data.to", "torch_geometric.data.y.view().float().to", "print", "architecture.parameters", "predictor.parameters", "graph.to", "graph.to", "torch_geometric.data.y.view().float", "len", "loss_fn.item", "len", "torch_geometric.data.y.view"], "function", ["home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.train", "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.train"], ["", "", "def", "train", "(", "architecture", ",", "predictor", ",", "device", ",", "train_loader", ",", "drug_graphs_DataLoader", ",", "target_graphs_DataLoader", ",", "LR", ",", "epoch", ",", "TRAIN_BATCH_SIZE", ",", "affinity_graph", ")", ":", "\n", "    ", "print", "(", "'Training on {} samples...'", ".", "format", "(", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "architecture", ".", "train", "(", ")", "\n", "predictor", ".", "train", "(", ")", "\n", "LOG_INTERVAL", "=", "10", "\n", "loss_fn", "=", "nn", ".", "MSELoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "chain", "(", "architecture", ".", "parameters", "(", ")", ",", "predictor", ".", "parameters", "(", ")", ")", ")", ",", "lr", "=", "LR", ",", "weight_decay", "=", "0", ")", "\n", "affinity_graph", ".", "to", "(", "device", ")", "# affinity graph", "\n", "drug_graph_batchs", "=", "list", "(", "map", "(", "lambda", "graph", ":", "graph", ".", "to", "(", "device", ")", ",", "drug_graphs_DataLoader", ")", ")", "# drug graphs", "\n", "target_graph_batchs", "=", "list", "(", "map", "(", "lambda", "graph", ":", "graph", ".", "to", "(", "device", ")", ",", "target_graphs_DataLoader", ")", ")", "# target graphs", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "drug_embedding", ",", "target_embedding", "=", "architecture", "(", "affinity_graph", ",", "drug_graph_batchs", ",", "target_graph_batchs", ")", "\n", "output", ",", "_", "=", "predictor", "(", "data", ".", "to", "(", "device", ")", ",", "drug_embedding", ",", "target_embedding", ")", "\n", "loss", "=", "loss_fn", "(", "output", ",", "data", ".", "y", ".", "view", "(", "-", "1", ",", "1", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "LOG_INTERVAL", "==", "0", ":", "\n", "            ", "print", "(", "'Train epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "TRAIN_BATCH_SIZE", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.predicting": [[129, 148], ["architecture.eval", "predictor.eval", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "print", "affinity_graph.to", "list", "list", "map", "map", "torch.no_grad", "torch.no_grad", "torch.cat.numpy().flatten", "torch.cat.numpy().flatten", "len", "architecture", "predictor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "graph.to", "graph.to", "torch_geometric.data.to", "torch.cat.numpy", "torch.cat.numpy", "output.cpu", "torch_geometric.data.y.view().cpu", "torch_geometric.data.y.view"], "function", ["None"], ["", "", "", "def", "predicting", "(", "architecture", ",", "predictor", ",", "device", ",", "loader", ",", "drug_graphs_DataLoader", ",", "target_graphs_DataLoader", ",", "affinity_graph", ",", "drug_map", "=", "None", ",", "drug_map_weight", "=", "None", ",", "target_map", "=", "None", ",", "target_map_weight", "=", "None", ")", ":", "\n", "    ", "architecture", ".", "eval", "(", ")", "\n", "predictor", ".", "eval", "(", ")", "\n", "total_preds", "=", "torch", ".", "Tensor", "(", ")", "\n", "total_labels", "=", "torch", ".", "Tensor", "(", ")", "\n", "print", "(", "'Make prediction for {} samples...'", ".", "format", "(", "len", "(", "loader", ".", "dataset", ")", ")", ")", "\n", "affinity_graph", ".", "to", "(", "device", ")", "# affinity graph", "\n", "drug_graph_batchs", "=", "list", "(", "map", "(", "lambda", "graph", ":", "graph", ".", "to", "(", "device", ")", ",", "drug_graphs_DataLoader", ")", ")", "# drug graphs", "\n", "target_graph_batchs", "=", "list", "(", "map", "(", "lambda", "graph", ":", "graph", ".", "to", "(", "device", ")", ",", "target_graphs_DataLoader", ")", ")", "# target graphs", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", "in", "loader", ":", "\n", "            ", "drug_embedding", ",", "target_embedding", "=", "architecture", "(", "\n", "affinity_graph", ",", "drug_graph_batchs", ",", "target_graph_batchs", ",", "\n", "drug_map", "=", "drug_map", ",", "drug_map_weight", "=", "drug_map_weight", ",", "target_map", "=", "target_map", ",", "target_map_weight", "=", "target_map_weight", "\n", ")", "\n", "output", ",", "_", "=", "predictor", "(", "data", ".", "to", "(", "device", ")", ",", "drug_embedding", ",", "target_embedding", ")", "\n", "total_preds", "=", "torch", ".", "cat", "(", "(", "total_preds", ",", "output", ".", "cpu", "(", ")", ")", ",", "0", ")", "\n", "total_labels", "=", "torch", ".", "cat", "(", "(", "total_labels", ",", "data", ".", "y", ".", "view", "(", "-", "1", ",", "1", ")", ".", "cpu", "(", ")", ")", ",", "0", ")", "\n", "", "", "return", "total_labels", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "total_preds", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.getLinkEmbeddings": [[150, 167], ["architecture.eval", "predictor.eval", "affinity_graph.to", "list", "list", "numpy.concatenate", "map", "map", "torch.no_grad", "torch.no_grad", "architecture", "predictor", "link_embeddings_batch_list.append", "graph.to", "graph.to", "torch_geometric.data.to", "link_embeddings_batch.cpu().numpy", "link_embeddings_batch.cpu"], "function", ["None"], ["", "def", "getLinkEmbeddings", "(", "architecture", ",", "predictor", ",", "device", ",", "loader", ",", "drug_graphs_DataLoader", ",", "target_graphs_DataLoader", ",", "affinity_graph", ",", "drug_map", "=", "None", ",", "drug_map_weight", "=", "None", ",", "target_map", "=", "None", ",", "target_map_weight", "=", "None", ")", ":", "\n", "    ", "architecture", ".", "eval", "(", ")", "\n", "predictor", ".", "eval", "(", ")", "\n", "affinity_graph", ".", "to", "(", "device", ")", "# affinity graph", "\n", "drug_graph_batchs", "=", "list", "(", "map", "(", "lambda", "graph", ":", "graph", ".", "to", "(", "device", ")", ",", "drug_graphs_DataLoader", ")", ")", "# drug graphs", "\n", "target_graph_batchs", "=", "list", "(", "map", "(", "lambda", "graph", ":", "graph", ".", "to", "(", "device", ")", ",", "target_graphs_DataLoader", ")", ")", "# target graphs", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "link_embeddings_batch_list", "=", "[", "]", "\n", "for", "data", "in", "loader", ":", "\n", "            ", "drug_embedding", ",", "target_embedding", "=", "architecture", "(", "\n", "affinity_graph", ",", "drug_graph_batchs", ",", "target_graph_batchs", ",", "\n", "drug_map", "=", "drug_map", ",", "drug_map_weight", "=", "drug_map_weight", ",", "target_map", "=", "target_map", ",", "target_map_weight", "=", "target_map_weight", "\n", ")", "\n", "_", ",", "link_embeddings_batch", "=", "predictor", "(", "data", ".", "to", "(", "device", ")", ",", "drug_embedding", ",", "target_embedding", ")", "\n", "link_embeddings_batch_list", ".", "append", "(", "link_embeddings_batch", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "link_embeddings", "=", "np", ".", "concatenate", "(", "link_embeddings_batch_list", ",", "axis", "=", "0", ")", "\n", "return", "link_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.getEmbeddings": [[169, 177], ["architecture.eval", "affinity_graph.to", "list", "list", "map", "map", "torch.no_grad", "torch.no_grad", "architecture", "drug_embedding.cpu().numpy", "target_embedding.cpu().numpy", "graph.to", "graph.to", "drug_embedding.cpu", "target_embedding.cpu"], "function", ["None"], ["", "def", "getEmbeddings", "(", "architecture", ",", "device", ",", "drug_graphs_DataLoader", ",", "target_graphs_DataLoader", ",", "affinity_graph", ")", ":", "\n", "    ", "architecture", ".", "eval", "(", ")", "\n", "affinity_graph", ".", "to", "(", "device", ")", "# affinity graph", "\n", "drug_graph_batchs", "=", "list", "(", "map", "(", "lambda", "graph", ":", "graph", ".", "to", "(", "device", ")", ",", "drug_graphs_DataLoader", ")", ")", "# drug graphs", "\n", "target_graph_batchs", "=", "list", "(", "map", "(", "lambda", "graph", ":", "graph", ".", "to", "(", "device", ")", ",", "target_graphs_DataLoader", ")", ")", "# target graphs", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "drug_embedding", ",", "target_embedding", "=", "architecture", "(", "affinity_graph", ",", "drug_graph_batchs", ",", "target_graph_batchs", ")", "\n", "", "return", "drug_embedding", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "target_embedding", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.collate": [[179, 182], ["torch_geometric.data.Batch.from_data_list"], "function", ["None"], ["", "def", "collate", "(", "data_list", ")", ":", "\n", "    ", "batch", "=", "Batch", ".", "from_data_list", "(", "data_list", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.source.utils.read_data": [[184, 191], ["pickle.load", "numpy.asarray", "open", "numpy.log10"], "function", ["None"], ["", "def", "read_data", "(", "dataset", ")", ":", "\n", "    ", "dataset_path", "=", "'data/'", "+", "dataset", "+", "'/'", "\n", "affinity", "=", "pickle", ".", "load", "(", "open", "(", "dataset_path", "+", "'affinities'", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "if", "dataset", "==", "'davis'", ":", "\n", "        ", "affinity", "=", "[", "-", "np", ".", "log10", "(", "y", "/", "1e9", ")", "for", "y", "in", "affinity", "]", "\n", "", "affinity", "=", "np", ".", "asarray", "(", "affinity", ")", "\n", "return", "affinity", "\n", "", ""]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.materials.normalize_sim.minMaxNormalize": [[5, 12], ["numpy.min", "numpy.max"], "function", ["None"], ["def", "minMaxNormalize", "(", "Y", ",", "Y_min", "=", "None", ",", "Y_max", "=", "None", ")", ":", "\n", "    ", "if", "Y_min", "is", "None", ":", "\n", "        ", "Y_min", "=", "np", ".", "min", "(", "Y", ")", "\n", "", "if", "Y_max", "is", "None", ":", "\n", "        ", "Y_max", "=", "np", ".", "max", "(", "Y", ")", "\n", "", "normalize_Y", "=", "(", "Y", "-", "Y_min", ")", "/", "(", "Y_max", "-", "Y_min", ")", "\n", "return", "normalize_Y", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.kiba.delete.affinity": [[8, 20], ["pickle.load", "numpy.asarray", "print", "numpy.delete", "pickle.dump", "pickle.load", "numpy.asarray", "print", "open", "open", "open"], "function", ["None"], ["def", "affinity", "(", ")", ":", "\n", "    ", "affinity", "=", "pickle", ".", "load", "(", "open", "(", "'Y'", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "affinity", "=", "np", ".", "asarray", "(", "affinity", ")", "\n", "print", "(", "affinity", ".", "shape", ")", "\n", "\n", "affinity", "=", "np", ".", "delete", "(", "affinity", ",", "128", ",", "axis", "=", "1", ")", "\n", "\n", "pickle", ".", "dump", "(", "affinity", ",", "open", "(", "'Y_new'", ",", "'wb'", ")", ")", "\n", "\n", "affinity", "=", "pickle", ".", "load", "(", "open", "(", "'Y_new'", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "affinity", "=", "np", ".", "asarray", "(", "affinity", ")", "\n", "print", "(", "affinity", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.kiba.delete.proteins": [[23, 34], ["json.load", "print", "json.load.pop", "print", "json.dump", "json.load", "print", "open", "open", "open", "list", "list", "list", "json.load.keys", "json.load.keys", "json.load.keys"], "function", ["None"], ["", "def", "proteins", "(", ")", ":", "\n", "    ", "proteins", "=", "json", ".", "load", "(", "open", "(", "'proteins.txt'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "print", "(", "list", "(", "proteins", ".", "keys", "(", ")", ")", "[", "128", "]", ")", "\n", "\n", "proteins", ".", "pop", "(", "\"P78527\"", ")", "\n", "print", "(", "list", "(", "proteins", ".", "keys", "(", ")", ")", "[", "128", "]", ")", "\n", "\n", "json", ".", "dump", "(", "proteins", ",", "open", "(", "'proteins_new.txt'", ",", "\"w\"", ")", ")", "\n", "\n", "proteins", "=", "json", ".", "load", "(", "open", "(", "'proteins_new.txt'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "print", "(", "list", "(", "proteins", ".", "keys", "(", ")", ")", "[", "128", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.kiba.delete.folds": [[37, 66], ["pickle.load", "numpy.asarray", "numpy.where", "print", "len", "numpy.arange", "random.seed", "random.shuffle", "int", "print", "numpy.array().reshape().tolist", "range", "json.dump", "json.dump", "json.load", "json.load", "open", "len", "list", "int", "open", "open", "open", "open", "numpy.isnan", "numpy.array().reshape", "train_folds.append", "numpy.array"], "function", ["None"], ["", "def", "folds", "(", ")", ":", "\n", "    ", "affinity", "=", "pickle", ".", "load", "(", "open", "(", "'Y_new'", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "affinity", "=", "np", ".", "asarray", "(", "affinity", ")", "\n", "rows", ",", "cols", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "affinity", ")", "==", "False", ")", "\n", "print", "(", "len", "(", "rows", ")", ")", "\n", "\n", "num", "=", "len", "(", "rows", ")", "\n", "k_folds", "=", "6", "\n", "random_index", "=", "np", ".", "arange", "(", "num", ")", "\n", "random", ".", "seed", "(", "1", ")", "\n", "random", ".", "shuffle", "(", "random_index", ")", "\n", "\n", "CV_size", "=", "int", "(", "num", "/", "k_folds", ")", "\n", "print", "(", "CV_size", ")", "\n", "all_folds", "=", "np", ".", "array", "(", "random_index", "[", ":", "num", "-", "num", "%", "k_folds", "]", ")", ".", "reshape", "(", "k_folds", ",", "CV_size", ")", ".", "tolist", "(", ")", "\n", "all_folds", "[", "k_folds", "-", "1", "]", "=", "all_folds", "[", "k_folds", "-", "1", "]", "+", "list", "(", "random_index", "[", "num", "-", "num", "%", "k_folds", ":", "]", ")", "\n", "\n", "fold", "=", "5", "\n", "train_folds", "=", "[", "]", "\n", "test_fold", "=", "[", "int", "(", "i", ")", "for", "i", "in", "all_folds", "[", "fold", "]", "]", "\n", "for", "i", "in", "range", "(", "k_folds", ")", ":", "\n", "        ", "if", "i", "!=", "fold", ":", "\n", "            ", "train_folds", ".", "append", "(", "all_folds", "[", "i", "]", ")", "\n", "\n", "", "", "json", ".", "dump", "(", "train_folds", ",", "open", "(", "'folds/train_fold_setting1_new.txt'", ",", "\"w\"", ")", ")", "\n", "json", ".", "dump", "(", "test_fold", ",", "open", "(", "'folds/test_fold_setting1_new.txt'", ",", "\"w\"", ")", ")", "\n", "\n", "train_fold_origin", "=", "json", ".", "load", "(", "open", "(", "'folds/train_fold_setting1_new.txt'", ")", ")", "\n", "test_fold", "=", "json", ".", "load", "(", "open", "(", "'folds/test_fold_setting1_new.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.kiba.delete.sim": [[68, 81], ["numpy.loadtxt", "print", "print", "numpy.delete", "print", "print", "numpy.savetxt", "numpy.loadtxt", "print", "print", "numpy.delete"], "function", ["None"], ["", "def", "sim", "(", ")", ":", "\n", "    ", "sim", "=", "np", ".", "loadtxt", "(", "\"target-target-sim.txt\"", ",", "delimiter", "=", "\",\"", ")", "\n", "print", "(", "sim", ")", "\n", "print", "(", "sim", ".", "shape", ")", "\n", "\n", "sim", "=", "np", ".", "delete", "(", "np", ".", "delete", "(", "sim", ",", "128", ",", "axis", "=", "1", ")", ",", "128", ",", "axis", "=", "0", ")", "\n", "print", "(", "sim", ")", "\n", "print", "(", "sim", ".", "shape", ")", "\n", "\n", "np", ".", "savetxt", "(", "\"target-target-sim_new.txt\"", ",", "sim", ",", "delimiter", "=", "\",\"", ")", "\n", "sim", "=", "np", ".", "loadtxt", "(", "\"target-target-sim_new.txt\"", ",", "delimiter", "=", "\",\"", ")", "\n", "print", "(", "sim", ")", "\n", "print", "(", "sim", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.data.S2_split.split": [[6, 44], ["json.load", "random.seed", "random.shuffle", "int", "print", "print", "range", "train_folds.append", "print", "json.dump", "json.dump", "json.dump", "open", "rdkit.Chem.MolToSmiles", "len", "len", "len", "train_folds.append", "print", "len", "open", "open", "open", "rdkit.Chem.MolFromSmiles", "smile_dict[].append", "len", "smile_list_bak.extend", "smile_list.append", "len", "len"], "function", ["None"], ["def", "split", "(", "dataset", ")", ":", "\n", "    ", "drugs", "=", "json", ".", "load", "(", "open", "(", "f'{dataset}/drugs.txt'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "\n", "drug_count", "=", "0", "\n", "smile_dict", "=", "{", "}", "\n", "for", "d", "in", "drugs", ":", "\n", "        ", "drug", "=", "Chem", ".", "MolToSmiles", "(", "Chem", ".", "MolFromSmiles", "(", "drugs", "[", "d", "]", ")", ",", "isomericSmiles", "=", "True", ")", "\n", "if", "drug", "not", "in", "smile_dict", ":", "\n", "            ", "smile_dict", "[", "drug", "]", "=", "[", "drug_count", "]", "\n", "", "else", ":", "\n", "            ", "smile_dict", "[", "drug", "]", ".", "append", "(", "drug_count", ")", "\n", "", "drug_count", "+=", "1", "\n", "\n", "", "smile_list", "=", "[", "]", "\n", "smile_list_bak", "=", "[", "]", "\n", "for", "drug", "in", "smile_dict", ":", "\n", "        ", "if", "len", "(", "smile_dict", "[", "drug", "]", ")", ">", "1", ":", "\n", "            ", "smile_list_bak", ".", "extend", "(", "smile_dict", "[", "drug", "]", ")", "\n", "", "else", ":", "\n", "            ", "smile_list", ".", "append", "(", "smile_dict", "[", "drug", "]", "[", "0", "]", ")", "\n", "\n", "", "", "random", ".", "seed", "(", "1", ")", "\n", "random", ".", "shuffle", "(", "smile_list", ")", "\n", "\n", "k_folds", "=", "6", "\n", "CV_size", "=", "int", "(", "len", "(", "smile_list", ")", "/", "k_folds", ")", "\n", "print", "(", "drug_count", ",", "len", "(", "smile_list", ")", ",", "len", "(", "smile_list_bak", ")", ",", "CV_size", ")", "\n", "test_fold", "=", "smile_list", "[", ":", "CV_size", "]", "\n", "print", "(", "\"Num of test fold:\"", ",", "len", "(", "test_fold", ")", ")", "\n", "train_folds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "k_folds", "-", "1", ")", ":", "\n", "        ", "train_folds", ".", "append", "(", "smile_list", "[", "i", "*", "CV_size", ":", "(", "i", "+", "1", ")", "*", "CV_size", "]", ")", "\n", "print", "(", "f\"Num of train fold {i}:\"", ",", "len", "(", "train_folds", "[", "-", "1", "]", ")", ")", "\n", "", "train_folds", ".", "append", "(", "smile_list", "[", "(", "i", "+", "1", ")", "*", "CV_size", ":", "]", ")", "\n", "print", "(", "f\"Num of train fold {i + 1}:\"", ",", "len", "(", "train_folds", "[", "-", "1", "]", ")", ")", "\n", "json", ".", "dump", "(", "train_folds", ",", "open", "(", "f'{dataset}/S2_train_set.txt'", ",", "\"w\"", ")", ")", "\n", "json", ".", "dump", "(", "test_fold", ",", "open", "(", "f'{dataset}/S2_test_set.txt'", ",", "\"w\"", ")", ")", "\n", "json", ".", "dump", "(", "smile_list_bak", ",", "open", "(", "f'{dataset}/S2_mask_set.txt'", ",", "\"w\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.data.degrees.read_data": [[6, 16], ["pickle.load", "open", "numpy.asarray", "numpy.asarray", "numpy.log10", "numpy.isnan"], "function", ["None"], ["def", "read_data", "(", "dataset", ")", ":", "\n", "    ", "dataset_path", "=", "dataset", "+", "'/'", "\n", "affinity", "=", "pickle", ".", "load", "(", "open", "(", "dataset_path", "+", "'affinities'", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "if", "dataset", "==", "'davis'", ":", "\n", "        ", "affinity", "=", "[", "-", "np", ".", "log10", "(", "y", "/", "1e9", ")", "for", "y", "in", "affinity", "]", "\n", "affinity", "=", "np", ".", "asarray", "(", "affinity", ")", "-", "5", "\n", "", "else", ":", "\n", "        ", "affinity", "=", "np", ".", "asarray", "(", "affinity", ")", "\n", "affinity", "[", "np", ".", "isnan", "(", "affinity", ")", "]", "=", "0", "\n", "", "return", "affinity", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.data.degrees.degrees": [[18, 21], ["print", "print", "numpy.mean", "numpy.max", "numpy.mean", "numpy.max", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "degrees", "(", "affinity", ")", ":", "\n", "    ", "print", "(", "\"Drug degree:\"", ",", "np", ".", "mean", "(", "np", ".", "sum", "(", "affinity", "!=", "0", ",", "axis", "=", "1", ")", ")", ",", "np", ".", "max", "(", "np", ".", "sum", "(", "affinity", "!=", "0", ",", "axis", "=", "1", ")", ")", ")", "\n", "print", "(", "\"Target degree:\"", ",", "np", ".", "mean", "(", "np", ".", "sum", "(", "affinity", "!=", "0", ",", "axis", "=", "0", ")", ")", ",", "np", ".", "max", "(", "np", ".", "sum", "(", "affinity", "!=", "0", ",", "axis", "=", "0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Zhaoyang-Chu_HGRL-DTA.data.S3_split.split": [[5, 42], ["json.load", "random.seed", "random.shuffle", "int", "print", "print", "range", "train_folds.append", "print", "json.dump", "json.dump", "json.dump", "open", "len", "len", "len", "train_folds.append", "print", "len", "open", "open", "open", "target_dict[].append", "len", "target_list_bak.extend", "target_list.append", "len", "len"], "function", ["None"], ["def", "split", "(", "dataset", ")", ":", "\n", "    ", "targets", "=", "json", ".", "load", "(", "open", "(", "f'{dataset}/targets.txt'", ")", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "\n", "target_count", "=", "0", "\n", "target_dict", "=", "{", "}", "\n", "for", "target", "in", "targets", ":", "\n", "        ", "if", "targets", "[", "target", "]", "not", "in", "target_dict", ":", "\n", "            ", "target_dict", "[", "targets", "[", "target", "]", "]", "=", "[", "target_count", "]", "\n", "", "else", ":", "\n", "            ", "target_dict", "[", "targets", "[", "target", "]", "]", ".", "append", "(", "target_count", ")", "\n", "", "target_count", "+=", "1", "\n", "\n", "", "target_list", "=", "[", "]", "\n", "target_list_bak", "=", "[", "]", "\n", "for", "target", "in", "target_dict", ":", "\n", "        ", "if", "len", "(", "target_dict", "[", "target", "]", ")", ">", "1", ":", "\n", "            ", "target_list_bak", ".", "extend", "(", "target_dict", "[", "target", "]", ")", "\n", "", "else", ":", "\n", "            ", "target_list", ".", "append", "(", "target_dict", "[", "target", "]", "[", "0", "]", ")", "\n", "\n", "", "", "random", ".", "seed", "(", "1", ")", "\n", "random", ".", "shuffle", "(", "target_list", ")", "\n", "\n", "k_folds", "=", "6", "\n", "CV_size", "=", "int", "(", "len", "(", "target_list", ")", "/", "k_folds", ")", "\n", "print", "(", "target_count", ",", "len", "(", "target_list", ")", ",", "len", "(", "target_list_bak", ")", ",", "CV_size", ")", "\n", "test_fold", "=", "target_list", "[", ":", "CV_size", "]", "\n", "print", "(", "\"Num of test fold:\"", ",", "len", "(", "test_fold", ")", ")", "\n", "train_folds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "k_folds", "-", "1", ")", ":", "\n", "        ", "train_folds", ".", "append", "(", "target_list", "[", "i", "*", "CV_size", ":", "(", "i", "+", "1", ")", "*", "CV_size", "]", ")", "\n", "print", "(", "f\"Num of train fold {i}:\"", ",", "len", "(", "train_folds", "[", "-", "1", "]", ")", ")", "\n", "", "train_folds", ".", "append", "(", "target_list", "[", "(", "i", "+", "1", ")", "*", "CV_size", ":", "]", ")", "\n", "print", "(", "f\"Num of train fold {i + 1}:\"", ",", "len", "(", "train_folds", "[", "-", "1", "]", ")", ")", "\n", "json", ".", "dump", "(", "train_folds", ",", "open", "(", "f'{dataset}/S3_train_set.txt'", ",", "\"w\"", ")", ")", "\n", "json", ".", "dump", "(", "test_fold", ",", "open", "(", "f'{dataset}/S3_test_set.txt'", ",", "\"w\"", ")", ")", "\n", "json", ".", "dump", "(", "target_list_bak", ",", "open", "(", "f'{dataset}/S3_mask_set.txt'", ",", "\"w\"", ")", ")", "\n", "\n"]]}