{"home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.__init__": [[53, 66], ["enumerate", "isinstance", "isinstance", "type", "len", "genotypes.Structure.node_N.append", "genotypes.Structure.nodes.append", "isinstance", "isinstance", "type", "len", "len", "len", "tuple", "isinstance", "isinstance", "type", "copy.deepcopy", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ")", ":", "\n", "    ", "assert", "isinstance", "(", "genotype", ",", "list", ")", "or", "isinstance", "(", "genotype", ",", "tuple", ")", ",", "'invalid class of genotype : {:}'", ".", "format", "(", "type", "(", "genotype", ")", ")", "\n", "self", ".", "node_num", "=", "len", "(", "genotype", ")", "+", "1", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "self", ".", "node_N", "=", "[", "]", "\n", "for", "idx", ",", "node_info", "in", "enumerate", "(", "genotype", ")", ":", "\n", "      ", "assert", "isinstance", "(", "node_info", ",", "list", ")", "or", "isinstance", "(", "node_info", ",", "tuple", ")", ",", "'invalid class of node_info : {:}'", ".", "format", "(", "type", "(", "node_info", ")", ")", "\n", "assert", "len", "(", "node_info", ")", ">=", "1", ",", "'invalid length : {:}'", ".", "format", "(", "len", "(", "node_info", ")", ")", "\n", "for", "node_in", "in", "node_info", ":", "\n", "        ", "assert", "isinstance", "(", "node_in", ",", "list", ")", "or", "isinstance", "(", "node_in", ",", "tuple", ")", ",", "'invalid class of in-node : {:}'", ".", "format", "(", "type", "(", "node_in", ")", ")", "\n", "assert", "len", "(", "node_in", ")", "==", "2", "and", "node_in", "[", "1", "]", "<=", "idx", ",", "'invalid in-node : {:}'", ".", "format", "(", "node_in", ")", "\n", "", "self", ".", "node_N", ".", "append", "(", "len", "(", "node_info", ")", ")", "\n", "self", ".", "nodes", ".", "append", "(", "tuple", "(", "deepcopy", "(", "node_info", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.tolist": [[67, 79], ["list", "sorted", "tuple", "genotypes.append", "filter", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "tolist", "(", "self", ",", "remove_str", ")", ":", "\n", "# convert this class to the list, if remove_str is 'none', then remove the 'none' operation.", "\n", "# note that we re-order the input node in this function", "\n", "# return the-genotype-list and success [if unsuccess, it is not a connectivity]", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "      ", "node_info", "=", "list", "(", "node_info", ")", "\n", "node_info", "=", "sorted", "(", "node_info", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ")", "\n", "node_info", "=", "tuple", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "!=", "remove_str", ",", "node_info", ")", ")", "\n", "if", "len", "(", "node_info", ")", "==", "0", ":", "return", "None", ",", "False", "\n", "genotypes", ".", "append", "(", "node_info", ")", "\n", "", "return", "genotypes", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.node": [[80, 83], ["len", "len"], "methods", ["None"], ["", "def", "node", "(", "self", ",", "index", ")", ":", "\n", "    ", "assert", "index", ">", "0", "and", "index", "<=", "len", "(", "self", ")", ",", "'invalid index={:} < {:}'", ".", "format", "(", "index", ",", "len", "(", "self", ")", ")", "\n", "return", "self", ".", "nodes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.tostr": [[84, 91], ["strings.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "tostr", "(", "self", ")", ":", "\n", "    ", "strings", "=", "[", "]", "\n", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "      ", "string", "=", "'|'", ".", "join", "(", "[", "x", "[", "0", "]", "+", "'~{:}'", ".", "format", "(", "x", "[", "1", "]", ")", "for", "x", "in", "node_info", "]", ")", "\n", "string", "=", "'|{:}|'", ".", "format", "(", "string", ")", "\n", "strings", ".", "append", "(", "string", ")", "\n", "", "return", "'+'", ".", "join", "(", "strings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.check_valid": [[92, 102], ["enumerate", "sums.append", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "check_valid", "(", "self", ")", ":", "\n", "    ", "nodes", "=", "{", "0", ":", "True", "}", "\n", "for", "i", ",", "node_info", "in", "enumerate", "(", "self", ".", "nodes", ")", ":", "\n", "      ", "sums", "=", "[", "]", "\n", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "        ", "if", "op", "==", "'none'", "or", "nodes", "[", "xin", "]", "is", "False", ":", "x", "=", "False", "\n", "else", ":", "x", "=", "True", "\n", "sums", ".", "append", "(", "x", ")", "\n", "", "nodes", "[", "i", "+", "1", "]", "=", "sum", "(", "sums", ")", ">", "0", "\n", "", "return", "nodes", "[", "len", "(", "self", ".", "nodes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.to_unique_str": [[103, 122], ["enumerate", "cur_node.append", "sorted", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "to_unique_str", "(", "self", ",", "consider_zero", "=", "False", ")", ":", "\n", "# this is used to identify the isomorphic cell, which rerquires the prior knowledge of operation", "\n", "# two operations are special, i.e., none and skip_connect", "\n", "    ", "nodes", "=", "{", "0", ":", "'0'", "}", "\n", "for", "i_node", ",", "node_info", "in", "enumerate", "(", "self", ".", "nodes", ")", ":", "\n", "      ", "cur_node", "=", "[", "]", "\n", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "        ", "if", "consider_zero", "is", "None", ":", "\n", "          ", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "elif", "consider_zero", ":", "\n", "          ", "if", "op", "==", "'none'", "or", "nodes", "[", "xin", "]", "==", "'#'", ":", "x", "=", "'#'", "# zero", "\n", "elif", "op", "==", "'skip_connect'", ":", "x", "=", "nodes", "[", "xin", "]", "\n", "else", ":", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "else", ":", "\n", "          ", "if", "op", "==", "'skip_connect'", ":", "x", "=", "nodes", "[", "xin", "]", "\n", "else", ":", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "cur_node", ".", "append", "(", "x", ")", "\n", "", "nodes", "[", "i_node", "+", "1", "]", "=", "'+'", ".", "join", "(", "sorted", "(", "cur_node", ")", ")", "\n", "", "return", "nodes", "[", "len", "(", "self", ".", "nodes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.check_valid_op": [[123, 129], ["None"], "methods", ["None"], ["", "def", "check_valid_op", "(", "self", ",", "op_names", ")", ":", "\n", "    ", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "      ", "for", "inode_edge", "in", "node_info", ":", "\n", "#assert inode_edge[0] in op_names, 'invalid op-name : {:}'.format(inode_edge[0])", "\n", "        ", "if", "inode_edge", "[", "0", "]", "not", "in", "op_names", ":", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.__repr__": [[130, 132], ["genotypes.Structure.tostr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tostr"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}({node_num} nodes with {node_info})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "node_info", "=", "self", ".", "tostr", "(", ")", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.__len__": [[133, 135], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "nodes", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.__getitem__": [[136, 138], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "return", "self", ".", "nodes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.str2structure": [[139, 151], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "@", "staticmethod", "\n", "def", "str2structure", "(", "xstr", ")", ":", "\n", "    ", "assert", "isinstance", "(", "xstr", ",", "str", ")", ",", "'must take string (not {:}) as input'", ".", "format", "(", "type", "(", "xstr", ")", ")", "\n", "nodestrs", "=", "xstr", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "nodestrs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "tuple", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "genotypes", ".", "append", "(", "input_infos", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.str2fullstructure": [[152, 168], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "list", "list", "range", "sorted", "genotypes.append", "filter", "xi.split", "tuple", "node_str.split", "len", "list.append", "xinput.split", "int"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "@", "staticmethod", "\n", "def", "str2fullstructure", "(", "xstr", ",", "default_name", "=", "'none'", ")", ":", "\n", "    ", "assert", "isinstance", "(", "xstr", ",", "str", ")", ",", "'must take string (not {:}) as input'", ".", "format", "(", "type", "(", "xstr", ")", ")", "\n", "nodestrs", "=", "xstr", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "nodestrs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "list", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "all_in_nodes", "=", "list", "(", "x", "[", "1", "]", "for", "x", "in", "input_infos", ")", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "if", "j", "not", "in", "all_in_nodes", ":", "input_infos", ".", "append", "(", "(", "default_name", ",", "j", ")", ")", "\n", "", "node_info", "=", "sorted", "(", "input_infos", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ")", "\n", "genotypes", ".", "append", "(", "tuple", "(", "node_info", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.Structure.gen_all": [[169, 188], ["genotypes.get_combination", "enumerate", "range", "isinstance", "isinstance", "type", "genotypes.get_combination", "tuple", "genotypes.Structure", "new_all_archs.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.get_combination", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.get_combination", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "@", "staticmethod", "\n", "def", "gen_all", "(", "search_space", ",", "num", ",", "return_ori", ")", ":", "\n", "    ", "assert", "isinstance", "(", "search_space", ",", "list", ")", "or", "isinstance", "(", "search_space", ",", "tuple", ")", ",", "'invalid class of search-space : {:}'", ".", "format", "(", "type", "(", "search_space", ")", ")", "\n", "assert", "num", ">=", "2", ",", "'There should be at least two nodes in a neural cell instead of {:}'", ".", "format", "(", "num", ")", "\n", "all_archs", "=", "get_combination", "(", "search_space", ",", "1", ")", "\n", "for", "i", ",", "arch", "in", "enumerate", "(", "all_archs", ")", ":", "\n", "      ", "all_archs", "[", "i", "]", "=", "[", "tuple", "(", "arch", ")", "]", "\n", "\n", "", "for", "inode", "in", "range", "(", "2", ",", "num", ")", ":", "\n", "      ", "cur_nodes", "=", "get_combination", "(", "search_space", ",", "inode", ")", "\n", "new_all_archs", "=", "[", "]", "\n", "for", "previous_arch", "in", "all_archs", ":", "\n", "        ", "for", "cur_node", "in", "cur_nodes", ":", "\n", "          ", "new_all_archs", ".", "append", "(", "previous_arch", "+", "[", "tuple", "(", "cur_node", ")", "]", ")", "\n", "", "", "all_archs", "=", "new_all_archs", "\n", "", "if", "return_ori", ":", "\n", "      ", "return", "all_archs", "\n", "", "else", ":", "\n", "      ", "return", "[", "Structure", "(", "x", ")", "for", "x", "in", "all_archs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.genotypes.get_combination": [[34, 48], ["range", "combs.append", "new_combs.append"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "get_combination", "(", "space", ",", "num", ")", ":", "\n", "  ", "combs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "    ", "if", "i", "==", "0", ":", "\n", "      ", "for", "func", "in", "space", ":", "\n", "        ", "combs", ".", "append", "(", "[", "(", "func", ",", "i", ")", "]", ")", "\n", "", "", "else", ":", "\n", "      ", "new_combs", "=", "[", "]", "\n", "for", "string", "in", "combs", ":", "\n", "        ", "for", "func", "in", "space", ":", "\n", "          ", "xstring", "=", "string", "+", "[", "(", "func", ",", "i", ")", "]", "\n", "new_combs", ".", "append", "(", "xstring", ")", "\n", "", "", "combs", "=", "new_combs", "\n", "", "", "return", "combs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.populationNAS201.Population.__init__": [[6, 14], ["torch.device", "range", "populationNAS201.Population.population.append", "chromosomesNAS201.chromosome"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "pop_size", ",", "num_edges", ",", "num_ops", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", ":", "\n", "    ", "self", ".", "_pop_size", "=", "pop_size", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "_num_edges", "=", "num_edges", "\n", "self", ".", "_num_ops", "=", "num_ops", "\n", "self", ".", "population", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "pop_size", ")", ":", "\n", "      ", "self", ".", "population", ".", "append", "(", "chromosome", "(", "self", ".", "_num_edges", ",", "self", ".", "_device", ",", "self", ".", "_num_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.populationNAS201.Population.get_population_size": [[15, 17], ["len"], "methods", ["None"], ["", "", "def", "get_population_size", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "population", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.populationNAS201.Population.get_population": [[18, 20], ["None"], "methods", ["None"], ["", "def", "get_population", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "population", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.populationNAS201.Population.print_population_fitness": [[21, 24], ["print", "p.get_fitness"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_fitness"], ["", "def", "print_population_fitness", "(", "self", ")", ":", "\n", "    ", "for", "p", "in", "self", ".", "population", ":", "\n", "      ", "print", "(", "p", ".", "get_fitness", "(", ")", ",", "end", "=", "', '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.populationNAS201.Population.pop_sort": [[25, 27], ["populationNAS201.Population.population.sort", "x.get_fitness"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_fitness"], ["", "", "def", "pop_sort", "(", "self", ")", ":", "\n", "    ", "self", ".", "population", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "get_fitness", "(", ")", ",", "reverse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.populationNAS201.Population.random_pop": [[28, 32], ["range", "populationNAS201.Population.population.append", "chromosomesNAS201.chromosome"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "random_pop", "(", "self", ")", ":", "\n", "    ", "self", ".", "population", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "_pop_size", ")", ":", "\n", "      ", "self", ".", "population", ".", "append", "(", "chromosome", "(", "self", ".", "_num_edges", ",", "self", ".", "_device", ",", "self", ".", "_num_ops", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.chromosomesNAS201.chromosome.__init__": [[5, 20], ["chromosomesNAS201.chromosome.generate_parameters().to", "utils.AvgrageMeter", "utils.AvgrageMeter", "utils.AvgrageMeter", "chromosomesNAS201.chromosome.generate_parameters"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.generate_parameters"], ["  ", "def", "__init__", "(", "self", ",", "num_edges", ",", "device", ",", "num_ops", "=", "None", ")", ":", "\n", "    ", "self", ".", "_device", "=", "device", "\n", "self", ".", "_num_edges", "=", "num_edges", "\n", "\n", "assert", "num_ops", "is", "not", "None", ",", "'Number of operations not given'", "\n", "self", ".", "num_ops", "=", "num_ops", "\n", "\n", "self", ".", "alphas_normal", "=", "self", ".", "generate_parameters", "(", "self", ".", "_num_edges", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "self", ".", "arch_parameters", "=", "[", "self", ".", "alphas_normal", "]", "\n", "\n", "self", ".", "objs", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "top1", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "top5", "=", "utils", ".", "AvgrageMeter", "(", ")", "\n", "\n", "self", ".", "genotype", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.chromosomesNAS201.chromosome.update": [[21, 23], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ")", ":", "\n", "    ", "self", ".", "alphas_normal", "=", "self", ".", "arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.chromosomesNAS201.chromosome.set_fitness": [[24, 28], ["None"], "methods", ["None"], ["", "def", "set_fitness", "(", "self", ",", "value", ",", "top1", ",", "top5", ")", ":", "\n", "    ", "self", ".", "objs", ".", "avg", "=", "value", "\n", "self", ".", "top1", ".", "avg", "=", "top1", "\n", "self", ".", "top5", ".", "avg", "=", "top5", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.chromosomesNAS201.chromosome.get_len": [[29, 32], ["None"], "methods", ["None"], ["", "def", "get_len", "(", "self", ")", ":", "\n", "#return self.k * len(self.arch_parameters)", "\n", "    ", "return", "_num_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.chromosomesNAS201.chromosome.get_fitness": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_fitness", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.chromosomesNAS201.chromosome.get_all_metrics": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_all_metrics", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "objs", ",", "self", ".", "top1", ",", "self", ".", "top5", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.chromosomesNAS201.chromosome.get_arch_parameters": [[39, 41], ["None"], "methods", ["None"], ["", "def", "get_arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.chromosomesNAS201.chromosome.generate_parameters": [[42, 44], ["torch.rand"], "methods", ["None"], ["", "def", "generate_parameters", "(", "self", ",", "k", ")", ":", "\n", "    ", "return", "torch", ".", "rand", "(", "k", ",", "self", ".", "num_ops", ")", "\n", "#return torch.nn.functional.one_hot(torch.randint(low = 0, high = self.num_ops, size = (k, )), num_classes = self.num_ops)", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.__init__": [[13, 55], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "enumerate", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "arch_flag.detach().clone", "zip", "prog_search_model_s2.TinyNetwork_Prog.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "cell_operations.ResNetBasicblock", "prog_search_cells.NAS201SearchCell", "sum", "arch_flag.detach", "prog_search_model_s2.TinyNetwork_Prog.arch_flag[].int"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ",", "arch_flag", "=", "None", ")", ":", "\n", "    ", "super", "(", "TinyNetwork_Prog", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "search_space", "=", "search_space", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "## Newly added for Progressive", "\n", "if", "arch_flag", "is", "None", ":", "self", ".", "arch_flag", "=", "torch", ".", "ones", "(", "(", "(", "max_nodes", "*", "(", "max_nodes", "-", "1", ")", ")", "//", "2", ",", "N", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "else", ":", "self", ".", "arch_flag", "=", "arch_flag", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "self", ".", "op_dict", "=", "{", "}", "\n", "for", "idx", ",", "op", "in", "enumerate", "(", "search_space", ")", ":", "self", ".", "op_dict", "[", "op", "]", "=", "idx", "\n", "##", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "self", ".", "op_dict", ",", "self", ".", "arch_flag", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n", "# Initializing the architecture parameter", "\n", "self", ".", "num_edge", "=", "num_edge", "\n", "self", ".", "search_space", "=", "search_space", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "self", ".", "num_edge", ",", "sum", "(", "self", ".", "arch_flag", "[", "0", "]", ".", "int", "(", ")", ")", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "#self.arch_parameters = nn.Parameter(torch.rand(self.num_edge, len(self.search_space)), requires_grad = False)", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.get_weights": [[58, 64], ["list", "list", "list", "list", "list", "prog_search_model_s2.TinyNetwork_Prog.classifier.parameters", "prog_search_model_s2.TinyNetwork_Prog.stem.parameters", "prog_search_model_s2.TinyNetwork_Prog.cells.parameters", "prog_search_model_s2.TinyNetwork_Prog.lastact.parameters", "prog_search_model_s2.TinyNetwork_Prog.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "'''To get the values of the weigths/parameters of the one shot model'''", "\n", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.random_alphas": [[65, 77], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "sum", "torch.functional.softmax", "torch.functional.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "prog_search_model_s2.TinyNetwork_Prog.update_alphas", "prog_search_model_s2.TinyNetwork_Prog.update_alphas", "prog_search_model_s2.TinyNetwork_Prog.arch_flag[].int", "torch.device", "torch.device", "torch.device", "torch.device", "torch.functional.softmax.max", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas"], ["", "def", "random_alphas", "(", "self", ",", "discrete", "=", "False", ",", "k", "=", "1.0", ")", ":", "\n", "    ", "'''Generate random values for the architecture parameters'''", "\n", "tmp", "=", "torch", ".", "rand", "(", "self", ".", "num_edge", ",", "sum", "(", "self", ".", "arch_flag", "[", "0", "]", ".", "int", "(", ")", ")", ",", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", ")", ")", "\n", "\n", "if", "discrete", ":", "\n", "      ", "softmax_alphas", "=", "nn", ".", "functional", ".", "softmax", "(", "tmp", ",", "dim", "=", "-", "1", ")", "\n", "index", "=", "softmax_alphas", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "#alphas = torch.zeros_like(softmax_alphas).scatter_(-1, index, 1.0)", "\n", "alphas", "=", "torch", ".", "zeros_like", "(", "softmax_alphas", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "k", ")", "\n", "self", ".", "update_alphas", "(", "alphas", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "update_alphas", "(", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.get_alphas": [[78, 81], ["None"], "methods", ["None"], ["", "", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "'''Returns the architecture weights'''", "\n", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.update_alphas": [[82, 89], ["[].data.copy_", "prog_search_model_s2.TinyNetwork_Prog.get_alphas"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas"], ["", "def", "update_alphas", "(", "self", ",", "alphas", ")", ":", "\n", "    ", "'''Update the architecture weights'''", "\n", "#assert isinstance(alphas, Architecture) , 'Input alphas is wrong type'", "\n", "#assert isinstance(alphas, torch.Tensor) , 'Input alphas has to be tensor type'", "\n", "#assert alphas.device == self.get_alphas()[0].device, \"Given tensor has to be in the same device\"", "\n", "#assert alphas.size() == self.get_alphas()[0].size(), \"Given tensor size must be {}\".format(self.get_alphas()[0].size())", "\n", "self", ".", "get_alphas", "(", ")", "[", "0", "]", ".", "data", ".", "copy_", "(", "alphas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.discretize": [[90, 99], ["torch.functional.softmax", "torch.functional.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "prog_search_model_s2.TinyNetwork_Prog.update_alphas", "torch.functional.softmax.max", "prog_search_model_s2.TinyNetwork_Prog.get_alphas", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas"], ["", "def", "discretize", "(", "self", ",", "k", "=", "1.0", ")", ":", "\n", "    ", "''' Discretize the alphas of the model'''", "\n", "alphas_softmax", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "get_alphas", "(", ")", "[", "0", "]", ",", "dim", "=", "-", "1", ")", "\n", "index", "=", "alphas_softmax", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "#one_h = torch.zeros_like(alphas_softmax).scatter_(-1, index, 1.0)", "\n", "one_h", "=", "torch", ".", "zeros_like", "(", "alphas_softmax", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "k", ")", "\n", "self", ".", "update_alphas", "(", "one_h", ")", "\n", "\n", "return", "one_h", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.check_alphas": [[100, 105], ["isinstance", "torch.all().item", "torch.all().item", "torch.all().item", "torch.all().item", "torch.all", "torch.all", "torch.all", "torch.all", "prog_search_model_s2.TinyNetwork_Prog.get_alphas"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas"], ["", "def", "check_alphas", "(", "self", ",", "alphas", ")", ":", "\n", "    ", "'''Verify if the architecture parameter is equal to the given alphas'''", "\n", "assert", "isinstance", "(", "alphas", ",", "torch", ".", "Tensor", ")", ",", "'Input alphas has to be tensor type'", "\n", "#return np.all(self.get_alphas()[0] == alphas.get())", "\n", "return", "torch", ".", "all", "(", "self", ".", "get_alphas", "(", ")", "[", "0", "]", "==", "alphas", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.show_alphas": [[106, 111], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "[].cpu", "prog_search_model_s2.TinyNetwork_Prog.get_alphas"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "'''Returns the architecture parameter in string format'''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#return 'arch-parameters :\\n{:}'.format( nn.functional.softmax(self.arch_parameters.get_tensor(), dim=-1).cpu() )", "\n", "      ", "return", "'arch-parameters :\\n{:}'", ".", "format", "(", "self", ".", "get_alphas", "(", ")", "[", "0", "]", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.show_alphas_dataframe": [[112, 146], ["pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "[].detach().cpu().numpy", "torch.functional.softmax().detach().cpu().numpy", "torch.functional.softmax().detach().cpu().numpy", "prog_search_model_s2.TinyNetwork_Prog.edge2index.items", "pandas.DataFrame.astype().idxmax", "enumerate", "list", "list", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "enumerate", "pandas.DataFrame.sum", "prog_search_model_s2.TinyNetwork_Prog.op_dict.keys", "prog_search_model_s2.TinyNetwork_Prog.op_dict.values", "list", "numpy.zeros", "list", "numpy.zeros", "list", "numpy.zeros", "[].detach().cpu", "torch.functional.softmax().detach().cpu", "torch.functional.softmax().detach().cpu", "pandas.DataFrame.astype", "prog_search_model_s2.TinyNetwork_Prog.edge2index.keys", "prog_search_model_s2.TinyNetwork_Prog.edge2index.keys", "prog_search_model_s2.TinyNetwork_Prog.edge2index.keys", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "len", "len", "[].detach", "torch.functional.softmax().detach", "torch.functional.softmax().detach", "val_list.index", "torch.functional.softmax", "torch.functional.softmax", "prog_search_model_s2.TinyNetwork_Prog.get_alphas"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas"], ["", "", "def", "show_alphas_dataframe", "(", "self", ",", "show_sum", "=", "False", ")", ":", "\n", "    ", "'''Returns the architecture weights in two pandas Dataframe.\n      First dataframe is just the architecture weight and the\n      second dataframe is the one hot representation of the max values in each row in first dataframe\n    '''", "\n", "key_list", ",", "val_list", "=", "list", "(", "self", ".", "op_dict", ".", "keys", "(", ")", ")", ",", "list", "(", "self", ".", "op_dict", ".", "values", "(", ")", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "self", ".", "search_space", ",", "index", "=", "list", "(", "self", ".", "edge2index", ".", "keys", "(", ")", ")", ",", "\n", "data", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_edge", ",", "len", "(", "self", ".", "search_space", ")", ")", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "df_softmax", "=", "pd", ".", "DataFrame", "(", "columns", "=", "self", ".", "search_space", ",", "index", "=", "list", "(", "self", ".", "edge2index", ".", "keys", "(", ")", ")", ",", "\n", "data", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_edge", ",", "len", "(", "self", ".", "search_space", ")", ")", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "df_max", "=", "pd", ".", "DataFrame", "(", "columns", "=", "self", ".", "search_space", ",", "index", "=", "list", "(", "self", ".", "edge2index", ".", "keys", "(", ")", ")", ",", "\n", "data", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_edge", ",", "len", "(", "self", ".", "search_space", ")", ")", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "\n", "alphas", "=", "self", ".", "get_alphas", "(", ")", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "alphas_softmax", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "key", ",", "index", "in", "self", ".", "edge2index", ".", "items", "(", ")", ":", "\n", "      ", "row_flag", "=", "torch", ".", "nonzero", "(", "self", ".", "arch_flag", "[", "index", "]", ")", ".", "squeeze", "(", ")", "\n", "row", ",", "row_softmax", "=", "alphas", "[", "index", "]", ",", "alphas_softmax", "[", "index", "]", "\n", "op_list", "=", "[", "key_list", "[", "val_list", ".", "index", "(", "idx", ")", "]", "for", "idx", "in", "row_flag", "]", "\n", "#print(key, index, row, op_list)", "\n", "for", "idx", ",", "op", "in", "enumerate", "(", "op_list", ")", ":", "\n", "        ", "df", ".", "loc", "[", "key", "]", "[", "op", "]", "=", "row", "[", "idx", "]", "\n", "df_softmax", ".", "loc", "[", "key", "]", "[", "op", "]", "=", "row_softmax", "[", "idx", "]", "\n", "#print(idx, op,df.loc[key], row[idx])", "\n", "#print(df, df_softmax)", "\n", "\n", "", "", "max_idx", "=", "df", ".", "astype", "(", "float", ")", ".", "idxmax", "(", "axis", "=", "1", ")", "\n", "for", "column", ",", "row", "in", "enumerate", "(", "max_idx", ".", "index", ")", ":", "\n", "      ", "df_max", ".", "loc", "[", "row", "]", "[", "max_idx", "[", "column", "]", "]", "=", "1", "\n", "\n", "", "if", "show_sum", ":", "\n", "      ", "df_softmax", "[", "'sum'", "]", "=", "df_softmax", ".", "sum", "(", "axis", "=", "1", ")", "\n", "\n", "", "return", "df", ",", "df_max", ",", "df_softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.get_message": [[147, 153], ["prog_search_model_s2.TinyNetwork_Prog.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "'''Returns the string format of details of one shot model'''", "\n", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.extra_repr": [[154, 156], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.genotype": [[157, 172], ["[].to_numpy", "range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "prog_search_model_s2.TinyNetwork_Prog.show_alphas_dataframe", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.show_alphas_dataframe"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "'''Returns the architecture from the one shot model architecture parameter'''", "\n", "genotypes", "=", "[", "]", "\n", "df_alpha", "=", "self", ".", "show_alphas_dataframe", "(", ")", "[", "0", "]", ".", "to_numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#weights = self.arch_parameters[ self.edge2index[node_str] ]", "\n", "          ", "weights", "=", "df_alpha", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_model_s2.TinyNetwork_Prog.forward": [[173, 192], ["torch.functional.softmax", "torch.functional.softmax", "prog_search_model_s2.TinyNetwork_Prog.stem", "enumerate", "prog_search_model_s2.TinyNetwork_Prog.lastact", "prog_search_model_s2.TinyNetwork_Prog.global_pooling", "out.view.view.view", "prog_search_model_s2.TinyNetwork_Prog.classifier", "isinstance", "out.view.view.size", "prog_search_model_s2.TinyNetwork_Prog.get_alphas", "cell", "cell"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "alphas", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "get_alphas", "(", ")", "[", "0", "]", ",", "dim", "=", "-", "1", ")", "\n", "#print(alphas)", "\n", "#alphas  = self.arch_parameters", "\n", "#alphas = torch.tensor(self.get_alphas()[0])", "\n", "\n", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "feature", "=", "cell", "(", "feature", ",", "alphas", ")", "\n", "", "else", ":", "\n", "        ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.__init__": [[11, 21], ["len", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "architecture.Architecture.update", "architecture.Architecture.compare"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.compare"], ["  ", "def", "__init__", "(", "self", ",", "num_edges", ",", "search_space", ",", "value", "=", "None", ")", ":", "\n", "    ", "self", ".", "num_ops", "=", "len", "(", "search_space", ")", "\n", "self", ".", "num_edges", "=", "num_edges", "\n", "#self.arch = np.random.rand(self.num_edges, self.num_ops)", "\n", "self", ".", "arch", "=", "torch", ".", "rand", "(", "self", ".", "num_edges", ",", "self", ".", "num_ops", ")", "#, dtype = torch.float32)", "\n", "if", "value", "is", "not", "None", ":", "\n", "      ", "self", ".", "update", "(", "value", ")", "\n", "assert", "self", ".", "compare", "(", "value", ")", ",", "\"Given tensor has not been successfully copied\"", "\n", "#self.apply_softmax(self.arch)", "\n", "", "self", ".", "search_space", "=", "search_space", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.random_arch": [[22, 32], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "architecture.Architecture.update", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "architecture.Architecture.update", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "def", "random_arch", "(", "self", ")", ":", "\n", "    ", "'''\n      Updating the architecture to random value\n    '''", "\n", "try", ":", "\n", "      ", "tmp", "=", "torch", ".", "rand", "(", "self", ".", "num_edges", ",", "self", ".", "num_ops", ")", "#, dtype = torch.float32)", "\n", "self", ".", "update", "(", "tmp", ")", "\n", "", "except", ":", "\n", "      ", "tmp", "=", "torch", ".", "rand", "(", "self", ".", "num_edges", ",", "self", ".", "num_ops", ")", ".", "cuda", "(", ")", "#, dtype = torch.float32).cuda()", "\n", "self", ".", "update", "(", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.apply_softmax": [[33, 39], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax.", "torch.nn.Softmax."], "methods", ["None"], ["", "", "def", "apply_softmax", "(", "self", ",", "arch_matrix", ")", ":", "\n", "    ", "arch_matrix", "=", "torch", ".", "tensor", "(", "arch_matrix", ")", "\n", "m", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "#self.arch = m(arch_matrix).cpu().numpy()", "\n", "#return m(arch_matrix).cpu().numpy()", "\n", "return", "m", "(", "arch_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get": [[40, 43], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ")", ":", "\n", "    ", "'''Returns the architecture parameter'''", "\n", "return", "self", ".", "arch", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.update": [[44, 56], ["isinstance", "architecture.Architecture.arch.data.copy_", "architecture.Architecture.get", "value.reshape.reshape.reshape"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "    ", "assert", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ",", "'Value must be tensor'", "\n", "assert", "value", ".", "device", "==", "self", ".", "get", "(", ")", ".", "device", ",", "\"Given tensor has to be in the same device\"", "\n", "if", "value", ".", "ndim", "==", "2", ":", "\n", "      ", "assert", "value", ".", "shape", "[", "0", "]", "==", "self", ".", "num_edges", ",", "'Wrong number of edges'", "\n", "assert", "value", ".", "shape", "[", "1", "]", "==", "self", ".", "num_ops", ",", "'Wrong number of operations'", "\n", "", "elif", "value", ".", "ndim", "==", "1", ":", "\n", "      ", "assert", "value", ".", "shape", "[", "0", "]", "==", "(", "self", ".", "num_edges", "*", "self", ".", "num_ops", ")", ",", "'Input value has wrong dimension'", "\n", "value", "=", "value", ".", "reshape", "(", "self", ".", "num_edges", ",", "self", ".", "num_ops", ")", "\n", "\n", "#self.arch = value", "\n", "", "self", ".", "arch", ".", "data", ".", "copy_", "(", "value", ")", "\n", "#self.apply_softmax(value)", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.derive_architecture": [[58, 61], ["architecture.Architecture.apply_softmax", "architecture.Architecture.search_space"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.apply_softmax"], ["", "def", "derive_architecture", "(", "self", ")", ":", "\n", "    ", "self", ".", "apply_softmax", "(", ")", "\n", "self", ".", "search_space", "(", "self", ".", "arch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.show_alphas_dataframe": [[62, 89], ["pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "architecture.Architecture.get().cpu().numpy", "range", "torch.functional.softmax().cpu().numpy", "torch.functional.softmax().cpu().numpy", "range", "pandas.DataFrame.astype().idxmax", "enumerate", "pandas.DataFrame.sum", "list", "list", "list", "numpy.zeros", "architecture.Architecture.get().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "pandas.DataFrame.astype", "range", "range", "range", "architecture.Architecture.get", "architecture.Architecture.get", "torch.functional.softmax", "torch.functional.softmax", "architecture.Architecture.get"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get"], ["", "def", "show_alphas_dataframe", "(", "self", ",", "show_sum", "=", "False", ",", "k", "=", "1", ")", ":", "\n", "    ", "'''Returns the architecture weights in two pandas Dataframe.\n      First dataframe is just the architecture weight and the\n      second dataframe is the one hot representation of the max values in each row in first dataframe\n    '''", "\n", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "self", ".", "search_space", ",", "index", "=", "list", "(", "range", "(", "self", ".", "num_edges", ")", ")", ")", "\n", "df_softmax", "=", "pd", ".", "DataFrame", "(", "columns", "=", "self", ".", "search_space", ",", "index", "=", "list", "(", "range", "(", "self", ".", "num_edges", ")", ")", ")", "\n", "df_max", "=", "pd", ".", "DataFrame", "(", "columns", "=", "self", ".", "search_space", ",", "index", "=", "list", "(", "range", "(", "self", ".", "num_edges", ")", ")", ",", "data", "=", "np", ".", "zeros", "(", "self", ".", "get", "(", ")", ".", "shape", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "\n", "alphas", "=", "self", ".", "get", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "index", "in", "range", "(", "self", ".", "num_edges", ")", ":", "\n", "#df.loc[key] = self.arch_parameters.get()[index]", "\n", "      ", "df", ".", "loc", "[", "index", "]", "=", "alphas", "[", "index", "]", "\n", "\n", "", "alphas_softmax", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "get", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#alphas_softmax = self.arch_parameters.apply_softmax(self.get_alphas()[0])", "\n", "for", "index", "in", "range", "(", "self", ".", "num_edges", ")", ":", "\n", "      ", "df_softmax", ".", "loc", "[", "index", "]", "=", "alphas_softmax", "[", "index", "]", "\n", "\n", "", "max_idx", "=", "df", ".", "astype", "(", "float", ")", ".", "idxmax", "(", "axis", "=", "1", ")", "\n", "for", "column", ",", "row", "in", "enumerate", "(", "max_idx", ".", "index", ")", ":", "\n", "      ", "df_max", ".", "loc", "[", "row", "]", "[", "max_idx", "[", "column", "]", "]", "=", "k", "\n", "\n", "", "if", "show_sum", ":", "\n", "      ", "df_softmax", "[", "'sum'", "]", "=", "df_softmax", ".", "sum", "(", "axis", "=", "1", ")", "\n", "\n", "", "return", "df", ",", "df_max", ",", "df_softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.multinomial_sample": [[90, 93], ["numpy.random.choice", "range", "len"], "methods", ["None"], ["", "def", "multinomial_sample", "(", "self", ")", ":", "\n", "    ", "for", "prob", "in", "self", ".", "arch", ":", "\n", "      ", "sample", "=", "np", ".", "random", ".", "choice", "(", "a", "=", "range", "(", "len", "(", "prob", ")", ")", ",", "p", "=", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.__str__": [[94, 96], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "'{}'", ".", "format", "(", "self", ".", "arch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.compare": [[97, 109], ["isinstance", "value.size", "torch.all().item", "torch.all().item", "torch.all().item", "torch.all().item", "torch.all().item", "torch.all().item", "torch.all().item", "torch.all().item", "architecture.Architecture.get", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "architecture.Architecture.get", "value.view", "architecture.Architecture.get"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get"], ["", "def", "compare", "(", "self", ",", "value", ")", ":", "\n", "    ", "'''\n      Compare with the given value\n    '''", "\n", "assert", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ",", "\"value has to be tensor\"", "\n", "assert", "value", ".", "device", "==", "self", ".", "get", "(", ")", ".", "device", ",", "\"Given tensor has to be in the same device\"", "\n", "if", "value", ".", "size", "(", "0", ")", "==", "(", "self", ".", "num_edges", "*", "self", ".", "num_ops", ")", ":", "\n", "#value = value.reshape(self.num_edges, self.num_ops)", "\n", "      ", "return", "torch", ".", "all", "(", "self", ".", "get", "(", ")", "==", "value", ".", "view", "(", "self", ".", "num_edges", ",", "self", ".", "num_ops", ")", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "#print(f'value: {value},\\t self.get(): {self.get()}, {torch.eq(self.get(), value)}')", "\n", "      ", "return", "torch", ".", "all", "(", "self", ".", "get", "(", ")", "==", "value", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda": [[110, 117], ["isinstance", "isinstance", "architecture.Architecture.arch.to"], "methods", ["None"], ["", "", "def", "cuda", "(", "self", ",", "device", ")", ":", "\n", "    ", "'''\n    Send the architecture parameter to GPU\n    '''", "\n", "assert", "isinstance", "(", "self", ".", "arch", ",", "torch", ".", "Tensor", ")", ",", "\"Architecture parameter has to be tensor\"", "\n", "assert", "isinstance", "(", "device", ",", "torch", ".", "device", ")", ",", "\"Incorrect instance of device\"", "\n", "self", ".", "arch", "=", "self", ".", "arch", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy": [[118, 124], ["isinstance", "architecture.Architecture.get().cpu().numpy", "architecture.Architecture.get", "architecture.Architecture.get().cpu", "architecture.Architecture.get"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get"], ["", "def", "numpy", "(", "self", ")", ":", "\n", "    ", "'''\n    Send the architecture parameter to CPU in numpy format\n    '''", "\n", "assert", "isinstance", "(", "self", ".", "get", "(", ")", ",", "torch", ".", "Tensor", ")", ",", "\"Architecture parameter has to be tensor\"", "\n", "return", "self", ".", "get", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.evaluate": [[125, 164], ["model.update_alphas", "model.check_alphas", "model.eval", "time.time", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "architecture.Architecture.get", "architecture.Architecture.get", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "architecture.Architecture.get", "inputs.to.to.to", "targets.cuda.cuda.cuda", "data_time.update", "model", "criterion", "utils.obtain_accuracy", "arch_losses.update", "arch_top1.update", "arch_top5.update", "batch_time.update", "time.time", "criterion.item", "inputs.to.to.size", "arch_prec1.item", "inputs.to.to.size", "arch_prec5.item", "inputs.to.to.size", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.check_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "def", "evaluate", "(", "self", ",", "data_loader", ",", "model", ",", "criterion", ",", "device", "=", "None", ")", ":", "\n", "    ", "'''\n      Evaluate the architecture in the given dataset\n    '''", "\n", "if", "device", "is", "None", ":", "\n", "      ", "device", "=", "self", ".", "get", "(", ")", ".", "device", "\n", "#alphas = self.get()", "\n", "", "data_time", ",", "batch_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "arch_losses", ",", "arch_top1", ",", "arch_top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "# Copying the given alphas to the model", "\n", "model", ".", "update_alphas", "(", "self", ".", "get", "(", ")", ")", "\n", "#print(f'self.get(): {self.get()}, {self.get().dtype}')", "\n", "#print(f'model.get_alphas(): {model.get_alphas()[0]}, {model.get_alphas()[0].dtype}')", "\n", "assert", "model", ".", "check_alphas", "(", "self", ".", "get", "(", ")", ")", ",", "\"Given alphas has not been copied successfully to the model\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "step", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "#inputs = inputs.cuda(non_blocking=True)", "\n", "        ", "inputs", "=", "inputs", ".", "to", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "#, dtype=torch.float64)", "\n", "targets", "=", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# prediction", "\n", "_", ",", "logits", "=", "model", "(", "inputs", ")", "\n", "#return logits, targets", "\n", "arch_loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "# record", "\n", "arch_prec1", ",", "arch_prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "arch_losses", ".", "update", "(", "arch_loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "arch_top1", ".", "update", "(", "arch_prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "arch_top5", ".", "update", "(", "arch_prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "#break", "\n", "", "", "return", "arch_losses", ".", "avg", ",", "arch_top1", ".", "avg", ",", "arch_top5", ".", "avg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.gaNAS201.GeneticAlgorithm.__init__": [[7, 12], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "num_elites", ",", "tournament_size", ",", "device", ",", "mrate", "=", "0.05", ")", ":", "\n", "    ", "self", ".", "_device", "=", "device", "\n", "self", ".", "_num_elites", "=", "num_elites", "\n", "self", ".", "_tournament_size", "=", "tournament_size", "\n", "self", ".", "mutation_rate", "=", "mrate", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.gaNAS201.GeneticAlgorithm.evolve": [[13, 15], ["gaNAS201.GeneticAlgorithm.mutate", "gaNAS201.GeneticAlgorithm.crossover"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.mutate", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.crossover"], ["", "def", "evolve", "(", "self", ",", "population", ")", ":", "\n", "    ", "return", "self", ".", "mutate", "(", "self", ".", "crossover", "(", "population", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.gaNAS201.GeneticAlgorithm.crossover": [[16, 29], ["populationNAS201.Population", "range", "populationNAS201.Population.get_population().append", "populationNAS201.Population.get_population_size", "population.get_population_size", "populationNAS201.Population.get_population().append", "gaNAS201.GeneticAlgorithm.tournament_selection().get_population", "gaNAS201.GeneticAlgorithm.tournament_selection().get_population", "gaNAS201.GeneticAlgorithm.crossover_chromosomes", "populationNAS201.Population.get_population", "population.get_population", "populationNAS201.Population.get_population", "gaNAS201.GeneticAlgorithm.tournament_selection", "gaNAS201.GeneticAlgorithm.tournament_selection"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.crossover_chromosomes", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.tournament_selection", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.tournament_selection"], ["", "def", "crossover", "(", "self", ",", "population", ")", ":", "\n", "#print(\"crossover\")", "\n", "    ", "cross_pop", "=", "Population", "(", "0", ",", "0", ",", "self", ".", "_device", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_elites", ")", ":", "\n", "      ", "cross_pop", ".", "get_population", "(", ")", ".", "append", "(", "population", ".", "get_population", "(", ")", "[", "i", "]", ")", "\n", "\n", "", "while", "cross_pop", ".", "get_population_size", "(", ")", "<", "population", ".", "get_population_size", "(", ")", ":", "\n", "      ", "chromosome1", "=", "self", ".", "tournament_selection", "(", "population", ")", ".", "get_population", "(", ")", "[", "0", "]", "\n", "chromosome2", "=", "self", ".", "tournament_selection", "(", "population", ")", ".", "get_population", "(", ")", "[", "0", "]", "\n", "cross_pop", ".", "get_population", "(", ")", ".", "append", "(", "GeneticAlgorithm", ".", "crossover_chromosomes", "(", "chromosome1", ",", "chromosome2", ")", ")", "\n", "\n", "#print(cross_pop.get_population_size())", "\n", "", "return", "cross_pop", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.gaNAS201.GeneticAlgorithm.mutate": [[30, 36], ["range", "population.get_population_size", "gaNAS201.GeneticAlgorithm.mutate_chromosome", "population.get_population"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.mutate_chromosome", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population"], ["", "def", "mutate", "(", "self", ",", "population", ")", ":", "\n", "#print(\"mutate\")", "\n", "#print(population.get_population_size())", "\n", "    ", "for", "i", "in", "range", "(", "self", ".", "_num_elites", ",", "population", ".", "get_population_size", "(", ")", ")", ":", "\n", "      ", "self", ".", "mutate_chromosome", "(", "population", ".", "get_population", "(", ")", "[", "i", "]", ")", "\n", "", "return", "population", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.gaNAS201.GeneticAlgorithm.crossover_chromosomes": [[37, 52], ["chromosomesNAS201.chromosome", "zip", "range", "chromosomesNAS201.chromosome.update", "numpy.random.rand", "chrom3[].data.copy_", "chrom3[].data.copy_"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "@", "staticmethod", "\n", "def", "crossover_chromosomes", "(", "chromosome1", ",", "chromosome2", ")", ":", "\n", "    ", "cross_chrom", "=", "chromosome", "(", "chromosome1", ".", "_num_edges", ",", "chromosome1", ".", "_device", ",", "chromosome1", ".", "num_ops", ")", "\n", "for", "chrom1", ",", "chrom2", ",", "chrom3", "in", "zip", "(", "chromosome1", ".", "arch_parameters", ",", "chromosome2", ".", "arch_parameters", ",", "cross_chrom", ".", "arch_parameters", ")", ":", "\n", "#print(chrom3)", "\n", "      ", "for", "i", "in", "range", "(", "chrom1", ".", "shape", "[", "0", "]", ")", ":", "\n", "#print(i, chrom1[i], ': ', chrom2[i],': ' , chrom3[i])", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", ">=", "0.5", ":", "\n", "          ", "chrom3", "[", "i", "]", ".", "data", ".", "copy_", "(", "chrom1", "[", "i", "]", ".", "data", ")", "\n", "", "else", ":", "\n", "          ", "chrom3", "[", "i", "]", ".", "data", ".", "copy_", "(", "chrom2", "[", "i", "]", ".", "data", ")", "\n", "", "cross_chrom", ".", "update", "(", ")", "\n", "#print(i, chrom1[i], ': ', chrom2[i],': ' , chrom3[i])", "\n", "\n", "", "", "return", "cross_chrom", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.gaNAS201.GeneticAlgorithm.mutate_chromosome": [[53, 61], ["range", "numpy.random.rand", "chrom[].data.copy_", "chromosomesNAS201.chromosome.update", "chromosomesNAS201.chromosome.generate_parameters().view", "chromosomesNAS201.chromosome.generate_parameters"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.generate_parameters"], ["", "def", "mutate_chromosome", "(", "self", ",", "chromosome", ")", ":", "\n", "    ", "for", "chrom", "in", "chromosome", ".", "arch_parameters", ":", "\n", "      ", "for", "i", "in", "range", "(", "chrom", ".", "shape", "[", "0", "]", ")", ":", "\n", "#print(i)", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "mutation_rate", ":", "\n", "#print(\"mutate gene {}, replacing {}\".format(i, chrom[i]))", "\n", "          ", "chrom", "[", "i", "]", ".", "data", ".", "copy_", "(", "chromosome", ".", "generate_parameters", "(", "1", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "chromosome", ".", "update", "(", ")", "\n", "#print(\"with {}\".format(chrom[i]))", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.gaNAS201.GeneticAlgorithm.tournament_selection": [[63, 71], ["numpy.random.choice", "populationNAS201.Population", "populationNAS201.Population.get_population().sort", "population.get_population_size", "populationNAS201.Population.get_population().append", "populationNAS201.Population.get_population", "populationNAS201.Population.get_population", "population.get_population", "x.get_fitness"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_fitness"], ["", "", "", "", "def", "tournament_selection", "(", "self", ",", "population", ")", ":", "\n", "    ", "indexes", "=", "np", ".", "random", ".", "choice", "(", "population", ".", "get_population_size", "(", ")", ",", "self", ".", "_tournament_size", ",", "replace", "=", "False", ")", "\n", "pop", "=", "Population", "(", "0", ",", "0", ",", "self", ".", "_device", ")", "\n", "for", "i", "in", "indexes", ":", "\n", "      ", "pop", ".", "get_population", "(", ")", ".", "append", "(", "population", ".", "get_population", "(", ")", "[", "i", "]", ")", "\n", "\n", "", "pop", ".", "get_population", "(", ")", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "get_fitness", "(", ")", ",", "reverse", "=", "True", ")", "\n", "return", "pop", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.gaNAS201.GeneticAlgorithm.verify_crossover": [[72, 80], ["zip", "range", "torch.all", "c1[].eq", "print", "torch.all", "c2[].eq", "print"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "verify_crossover", "(", "x", ",", "y", ",", "z", ")", ":", "\n", "    ", "for", "c1", ",", "c2", ",", "c3", "in", "zip", "(", "x", ".", "arch_parameters", ",", "y", ".", "arch_parameters", ",", "z", ".", "arch_parameters", ")", ":", "\n", "      ", "for", "i", "in", "range", "(", "c1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "torch", ".", "all", "(", "c1", "[", "i", "]", ".", "eq", "(", "c3", "[", "i", "]", ")", ")", ":", "\n", "          ", "print", "(", "\"{}: from 1st chromosome\"", ".", "format", "(", "i", ")", ")", "\n", "", "elif", "(", "torch", ".", "all", "(", "c2", "[", "i", "]", ".", "eq", "(", "c3", "[", "i", "]", ")", ")", ")", ":", "\n", "          ", "print", "(", "\"{}: from 2nd chromosome\"", ".", "format", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.gaNAS201.GeneticAlgorithm.eq_chromosomes": [[81, 87], ["zip", "torch.all", "c1.eq"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "eq_chromosomes", "(", "x", ",", "y", ")", ":", "\n", "    ", "for", "c1", ",", "c2", "in", "zip", "(", "x", ".", "arch_parameters", ",", "y", ".", "arch_parameters", ")", ":", "\n", "      ", "if", "torch", ".", "all", "(", "c1", ".", "eq", "(", "c2", ")", ")", "!=", "True", ":", "\n", "        ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.NAS201SearchCell.__init__": [[15, 56], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "prog_search_cells.NAS201SearchCell.edges.keys", "enumerate", "xlists.append", "xlists.append", "str", "str"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "max_nodes", ",", "op_names", ",", "op_dict", ",", "arch_flag", ",", "affine", "=", "False", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "NAS201SearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op_names", "=", "deepcopy", "(", "op_names", ")", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "in_dim", "=", "C_in", "\n", "self", ".", "out_dim", "=", "C_out", "\n", "self", ".", "op_position", "=", "{", "}", "\n", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "max_nodes", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "row", "=", "arch_flag", "[", "idx", "]", "\n", "## Newly added", "\n", "self", ".", "op_position", "[", "node_str", "]", "=", "{", "}", "\n", "pos_tmp", "=", "0", "\n", "xlists", "=", "[", "]", "\n", "##", "\n", "if", "j", "==", "0", ":", "\n", "          ", "for", "op_name", "in", "op_names", ":", "\n", "## Newly added", "\n", "            ", "if", "row", "[", "op_dict", "[", "op_name", "]", "]", ":", "\n", "              ", "xlists", ".", "append", "(", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ")", "\n", "self", ".", "op_position", "[", "node_str", "]", "[", "str", "(", "pos_tmp", ")", "]", "=", "op_name", "\n", "pos_tmp", "+=", "1", "\n", "#xlists = [OPS[op_name](C_in , C_out, stride, affine, track_running_stats) for op_name in op_names]", "\n", "", "", "", "else", ":", "\n", "          ", "for", "op_name", "in", "op_names", ":", "\n", "            ", "if", "row", "[", "op_dict", "[", "op_name", "]", "]", ":", "\n", "              ", "xlists", ".", "append", "(", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "1", ",", "affine", ",", "track_running_stats", ")", ")", "\n", "self", ".", "op_position", "[", "node_str", "]", "[", "str", "(", "pos_tmp", ")", "]", "=", "op_name", "\n", "pos_tmp", "+=", "1", "\n", "##", "\n", "#xlists = [OPS[op_name](C_in , C_out,      1, affine, track_running_stats) for op_name in op_names]", "\n", "", "", "", "self", ".", "edges", "[", "node_str", "]", "=", "nn", ".", "ModuleList", "(", "xlists", ")", "\n", "idx", "+=", "1", "\n", "", "", "self", ".", "edge_keys", "=", "sorted", "(", "list", "(", "self", ".", "edges", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "edge2index", "=", "{", "key", ":", "i", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "edge_keys", ")", "}", "\n", "self", ".", "num_edges", "=", "len", "(", "self", ".", "edges", ")", "\n", "assert", "self", ".", "num_edges", "==", "idx", ",", "\"Mistake in creating the progressive cell\"", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.NAS201SearchCell.extra_repr": [[57, 60], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "string", "=", "'info :: {max_nodes} nodes, inC={in_dim}, outC={out_dim}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.NAS201SearchCell.forward": [[61, 71], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "sum", "layer", "zip"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "inter_nodes", ".", "append", "(", "sum", "(", "layer", "(", "nodes", "[", "j", "]", ")", "*", "w", "for", "layer", ",", "w", "in", "zip", "(", "self", ".", "edges", "[", "node_str", "]", ",", "weights", ")", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.NAS201SearchCell.forward_gdas": [[73, 85], ["range", "range", "nodes.append", "index[].item", "sum", "inter_nodes.append", "sum", "enumerate", "edge"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_gdas", "(", "self", ",", "inputs", ",", "hardwts", ",", "index", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "hardwts", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "argmaxs", "=", "index", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", ".", "item", "(", ")", "\n", "weigsum", "=", "sum", "(", "weights", "[", "_ie", "]", "*", "edge", "(", "nodes", "[", "j", "]", ")", "if", "_ie", "==", "argmaxs", "else", "weights", "[", "_ie", "]", "for", "_ie", ",", "edge", "in", "enumerate", "(", "self", ".", "edges", "[", "node_str", "]", ")", ")", "\n", "inter_nodes", ".", "append", "(", "weigsum", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.NAS201SearchCell.forward_joint": [[87, 99], ["range", "range", "nodes.append", "sum", "inter_nodes.append", "sum", "layer", "zip"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_joint", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "#aggregation = sum( layer(nodes[j]) * w for layer, w in zip(self.edges[node_str], weights) ) / weights.numel()", "\n", "aggregation", "=", "sum", "(", "layer", "(", "nodes", "[", "j", "]", ")", "*", "w", "for", "layer", ",", "w", "in", "zip", "(", "self", ".", "edges", "[", "node_str", "]", ",", "weights", ")", ")", "\n", "inter_nodes", ".", "append", "(", "aggregation", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.NAS201SearchCell.forward_urs": [[101, 118], ["range", "enumerate", "nodes.append", "range", "inter_nodes.append", "sum", "random.choice", "sops.append", "random.choice.", "hasattr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_urs", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "while", "True", ":", "# to avoid select zero for all ops", "\n", "        ", "sops", ",", "has_non_zero", "=", "[", "]", ",", "False", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "candidates", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "select_op", "=", "random", ".", "choice", "(", "candidates", ")", "\n", "sops", ".", "append", "(", "select_op", ")", "\n", "if", "not", "hasattr", "(", "select_op", ",", "'is_zero'", ")", "or", "select_op", ".", "is_zero", "is", "False", ":", "has_non_zero", "=", "True", "\n", "", "if", "has_non_zero", ":", "break", "\n", "", "inter_nodes", "=", "[", "]", "\n", "for", "j", ",", "select_op", "in", "enumerate", "(", "sops", ")", ":", "\n", "        ", "inter_nodes", ".", "append", "(", "select_op", "(", "nodes", "[", "j", "]", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.NAS201SearchCell.forward_select": [[120, 131], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_select", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "inter_nodes", ".", "append", "(", "self", ".", "edges", "[", "node_str", "]", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "(", "nodes", "[", "j", "]", ")", ")", "\n", "#inter_nodes.append( sum( layer(nodes[j]) * w for layer, w in zip(self.edges[node_str], weights) ) )", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.NAS201SearchCell.forward_dynamic": [[133, 144], ["range", "nodes.append", "prog_search_cells.NAS201SearchCell.op_names.index", "inter_nodes.append", "sum"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_dynamic", "(", "self", ",", "inputs", ",", "structure", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "cur_op_node", "=", "structure", ".", "nodes", "[", "i", "-", "1", "]", "\n", "inter_nodes", "=", "[", "]", "\n", "for", "op_name", ",", "j", "in", "cur_op_node", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op_index", "=", "self", ".", "op_names", ".", "index", "(", "op_name", ")", "\n", "inter_nodes", ".", "append", "(", "self", ".", "edges", "[", "node_str", "]", "[", "op_index", "]", "(", "nodes", "[", "j", "]", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.MixedOp.__init__": [[149, 155], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "prog_search_cells.MixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "space", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "space", ":", "\n", "      ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.MixedOp.forward_gdas": [[156, 158], ["None"], "methods", ["None"], ["", "", "def", "forward_gdas", "(", "self", ",", "x", ",", "weights", ",", "index", ")", ":", "\n", "    ", "return", "self", ".", "_ops", "[", "index", "]", "(", "x", ")", "*", "weights", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.MixedOp.forward_darts": [[159, 161], ["sum", "op", "zip"], "methods", ["None"], ["", "def", "forward_darts", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "    ", "return", "sum", "(", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.NASNetSearchCell.__init__": [[166, 187], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "prog_search_cells.MixedOp", "prog_search_cells.NASNetSearchCell.edges.keys", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "NASNetSearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "op_names", "=", "deepcopy", "(", "space", ")", "\n", "if", "reduction_prev", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'skip_connect'", "]", "(", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", ")", "\n", "else", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "preprocess1", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "# indicate the edge from node-(j) to node-(i+2)", "\n", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "space", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "edges", "[", "node_str", "]", "=", "op", "\n", "", "", "self", ".", "edge_keys", "=", "sorted", "(", "list", "(", "self", ".", "edges", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "edge2index", "=", "{", "key", ":", "i", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "edge_keys", ")", "}", "\n", "self", ".", "num_edges", "=", "len", "(", "self", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.NASNetSearchCell.forward_gdas": [[188, 204], ["prog_search_cells.NASNetSearchCell.preprocess0", "prog_search_cells.NASNetSearchCell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "states.append", "indexs[].item", "clist.append", "sum", "op.forward_gdas"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NASNetSearchCell.forward_gdas"], ["", "def", "forward_gdas", "(", "self", ",", "s0", ",", "s1", ",", "weightss", ",", "indexs", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "clist", "=", "[", "]", "\n", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "index", "=", "indexs", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", ".", "item", "(", ")", "\n", "clist", ".", "append", "(", "op", ".", "forward_gdas", "(", "h", ",", "weights", ",", "index", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.prog_search_cells.NASNetSearchCell.forward_darts": [[205, 220], ["prog_search_cells.NASNetSearchCell.preprocess0", "prog_search_cells.NASNetSearchCell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "states.append", "clist.append", "sum", "op.forward_darts"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NASNetSearchCell.forward_darts"], ["", "def", "forward_darts", "(", "self", ",", "s0", ",", "s1", ",", "weightss", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "clist", "=", "[", "]", "\n", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "clist", ".", "append", "(", "op", ".", "forward_darts", "(", "h", ",", "weights", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.ReLUConvBN.__init__": [[34, 40], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.ReLUConvBN.forward": [[42, 44], ["cell_operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.SepConv.__init__": [[48, 55], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.SepConv.forward": [[57, 59], ["cell_operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.DualSepConv.__init__": [[63, 67], ["torch.Module.__init__", "cell_operations.SepConv", "cell_operations.SepConv"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "DualSepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op_a", "=", "SepConv", "(", "C_in", ",", "C_in", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "op_b", "=", "SepConv", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "1", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.DualSepConv.forward": [[68, 72], ["cell_operations.DualSepConv.op_a", "cell_operations.DualSepConv.op_b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "op_a", "(", "x", ")", "\n", "x", "=", "self", ".", "op_b", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.ResNetBasicblock.__init__": [[76, 93], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "cell_operations.ReLUConvBN", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "cell_operations.ReLUConvBN"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ReLUConvBN", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "1", ",", "affine", ")", "\n", "self", ".", "conv_b", "=", "ReLUConvBN", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "1", ",", "affine", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ReLUConvBN", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "in_dim", "=", "inplanes", "\n", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "num_conv", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.ResNetBasicblock.extra_repr": [[94, 97], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "string", "=", "'{name}(inC={in_dim}, outC={out_dim}, stride={stride})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.ResNetBasicblock.forward": [[98, 108], ["cell_operations.ResNetBasicblock.conv_a", "cell_operations.ResNetBasicblock.conv_b", "cell_operations.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "return", "residual", "+", "basicblock", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.POOLING.__init__": [[112, 121], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "mode", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "POOLING", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "C_in", "==", "C_out", ":", "\n", "      ", "self", ".", "preprocess", "=", "None", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess", "=", "ReLUConvBN", "(", "C_in", ",", "C_out", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "", "if", "mode", "==", "'avg'", ":", "self", ".", "op", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "elif", "mode", "==", "'max'", ":", "self", ".", "op", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "else", ":", "raise", "ValueError", "(", "'Invalid mode={:} in POOLING'", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.POOLING.forward": [[122, 126], ["cell_operations.POOLING.op", "cell_operations.POOLING.preprocess"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "preprocess", ":", "x", "=", "self", ".", "preprocess", "(", "inputs", ")", "\n", "else", ":", "x", "=", "inputs", "\n", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.Identity.__init__": [[130, 132], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.Identity.forward": [[133, 135], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.Zero.__init__": [[139, 145], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "    ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "is_zero", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.Zero.forward": [[146, 155], ["list", "x.new_zeros", "x.mul", "x[].mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "C_in", "==", "self", ".", "C_out", ":", "\n", "      ", "if", "self", ".", "stride", "==", "1", ":", "return", "x", ".", "mul", "(", "0.", ")", "\n", "else", ":", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "", "else", ":", "\n", "      ", "shape", "=", "list", "(", "x", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "self", ".", "C_out", "\n", "zeros", "=", "x", ".", "new_zeros", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "zeros", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.Zero.extra_repr": [[156, 158], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'C_in={C_in}, C_out={C_out}, stride={stride}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.FactorizedReduce.__init__": [[162, 180], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.ConstantPad2d", "torch.ConstantPad2d", "cell_operations.FactorizedReduce.convs.append", "torch.Conv2d", "torch.Conv2d", "ValueError", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "#assert C_out % 2 == 0, 'C_out : {:}'.format(C_out)", "\n", "      ", "C_outs", "=", "[", "C_out", "//", "2", ",", "C_out", "-", "C_out", "//", "2", "]", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "self", ".", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "C_in", ",", "C_outs", "[", "i", "]", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "self", ".", "pad", "=", "nn", ".", "ConstantPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "0", ")", "\n", "", "elif", "stride", "==", "1", ":", "\n", "      ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Invalid stride : {:}'", ".", "format", "(", "stride", ")", ")", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.FactorizedReduce.forward": [[181, 190], ["cell_operations.FactorizedReduce.bn", "cell_operations.FactorizedReduce.relu", "cell_operations.FactorizedReduce.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cell_operations.FactorizedReduce.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "stride", "==", "2", ":", "\n", "      ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "y", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "convs", "[", "0", "]", "(", "x", ")", ",", "self", ".", "convs", "[", "1", "]", "(", "y", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.FactorizedReduce.extra_repr": [[191, 193], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'C_in={C_in}, C_out={C_out}, stride={stride}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.PartAwareOp.__init__": [[198, 214], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "cell_operations.PartAwareOp.local_conv_list.append", "cell_operations.FactorizedReduce", "torch.Sequential", "torch.Sequential", "cell_operations.FactorizedReduce", "ValueError", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "part", "=", "4", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "part", "=", "4", "\n", "self", ".", "hidden", "=", "C_in", "//", "3", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "local_conv_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "      ", "self", ".", "local_conv_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Conv2d", "(", "C_in", ",", "self", ".", "hidden", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "hidden", ",", "affine", "=", "True", ")", ")", "\n", ")", "\n", "", "self", ".", "W_K", "=", "nn", ".", "Linear", "(", "self", ".", "hidden", ",", "self", ".", "hidden", ")", "\n", "self", ".", "W_Q", "=", "nn", ".", "Linear", "(", "self", ".", "hidden", ",", "self", ".", "hidden", ")", "\n", "\n", "if", "stride", "==", "2", ":", "self", ".", "last", "=", "FactorizedReduce", "(", "C_in", "+", "self", ".", "hidden", ",", "C_out", ",", "2", ")", "\n", "elif", "stride", "==", "1", ":", "self", ".", "last", "=", "FactorizedReduce", "(", "C_in", "+", "self", ".", "hidden", ",", "C_out", ",", "1", ")", "\n", "else", ":", "raise", "ValueError", "(", "'Invalid Stride : {:}'", ".", "format", "(", "stride", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.PartAwareOp.forward": [[215, 242], ["x.size", "range", "range", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "part_feature.transpose().contiguous.transpose().contiguous.transpose().contiguous", "cell_operations.PartAwareOp.W_K", "cell_operations.PartAwareOp.W_Q().transpose().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().transpose().contiguous", "torch.bmm().transpose().contiguous", "torch.bmm().transpose().contiguous", "torch.bmm().transpose().contiguous", "range", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cell_operations.PartAwareOp.last", "IHs.append", "cell_operations.PartAwareOp.avg_pool", "local_feat_list.append", "aggreateF[].expand", "feature.view.view.view", "torch.cat().expand.append", "torch.cat().expand.append", "min", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "part_feature.transpose().contiguous.transpose().contiguous.transpose", "cell_operations.PartAwareOp.W_Q().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "cell_operations.PartAwareOp.W_Q", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "float"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "batch", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "assert", "H", ">=", "self", ".", "part", ",", "'input size too small : {:} vs {:}'", ".", "format", "(", "x", ".", "shape", ",", "self", ".", "part", ")", "\n", "IHs", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "IHs", ".", "append", "(", "min", "(", "H", ",", "int", "(", "(", "i", "+", "1", ")", "*", "(", "float", "(", "H", ")", "/", "self", ".", "part", ")", ")", ")", ")", "\n", "local_feat_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "      ", "feature", "=", "x", "[", ":", ",", ":", ",", "IHs", "[", "i", "]", ":", "IHs", "[", "i", "+", "1", "]", ",", ":", "]", "\n", "xfeax", "=", "self", ".", "avg_pool", "(", "feature", ")", "\n", "xfea", "=", "self", ".", "local_conv_list", "[", "i", "]", "(", "xfeax", ")", "\n", "local_feat_list", ".", "append", "(", "xfea", ")", "\n", "", "part_feature", "=", "torch", ".", "cat", "(", "local_feat_list", ",", "dim", "=", "2", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "self", ".", "part", ")", "\n", "part_feature", "=", "part_feature", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "part_K", "=", "self", ".", "W_K", "(", "part_feature", ")", "\n", "part_Q", "=", "self", ".", "W_Q", "(", "part_feature", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "weight_att", "=", "torch", ".", "bmm", "(", "part_K", ",", "part_Q", ")", "\n", "attention", "=", "torch", ".", "softmax", "(", "weight_att", ",", "dim", "=", "2", ")", "\n", "aggreateF", "=", "torch", ".", "bmm", "(", "attention", ",", "part_feature", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "      ", "feature", "=", "aggreateF", "[", ":", ",", ":", ",", "i", ":", "i", "+", "1", "]", ".", "expand", "(", "batch", ",", "self", ".", "hidden", ",", "IHs", "[", "i", "+", "1", "]", "-", "IHs", "[", "i", "]", ")", "\n", "feature", "=", "feature", ".", "view", "(", "batch", ",", "self", ".", "hidden", ",", "IHs", "[", "i", "+", "1", "]", "-", "IHs", "[", "i", "]", ",", "1", ")", "\n", "features", ".", "append", "(", "feature", ")", "\n", "", "features", "=", "torch", ".", "cat", "(", "features", ",", "dim", "=", "2", ")", ".", "expand", "(", "batch", ",", "self", ".", "hidden", ",", "H", ",", "W", ")", "\n", "final_fea", "=", "torch", ".", "cat", "(", "(", "x", ",", "features", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "self", ".", "last", "(", "final_fea", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.GDAS_Reduction_Cell.__init__": [[247, 282], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "cell_operations.FactorizedReduce", "cell_operations.ReLUConvBN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction_prev", ",", "multiplier", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "GDAS_Reduction_Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "multiplier", "=", "multiplier", "\n", "\n", "self", ".", "reduction", "=", "True", "\n", "self", ".", "ops1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "8", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "8", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "8", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "8", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ")", "]", ")", "\n", "\n", "self", ".", "ops2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.cell_operations.GDAS_Reduction_Cell.forward": [[283, 298], ["cell_operations.GDAS_Reduction_Cell.preprocess0", "cell_operations.GDAS_Reduction_Cell.preprocess1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "drop_path", "drop_path", "drop_path", "drop_path"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.drop_path", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.drop_path", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.drop_path", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", "=", "-", "1", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "X0", "=", "self", ".", "ops1", "[", "0", "]", "(", "s0", ")", "\n", "X1", "=", "self", ".", "ops1", "[", "1", "]", "(", "s1", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "      ", "X0", ",", "X1", "=", "drop_path", "(", "X0", ",", "drop_prob", ")", ",", "drop_path", "(", "X1", ",", "drop_prob", ")", "\n", "\n", "#X2 = self.ops2[0] (X0+X1)", "\n", "", "X2", "=", "self", ".", "ops2", "[", "0", "]", "(", "s0", ")", "\n", "X3", "=", "self", ".", "ops2", "[", "1", "]", "(", "s1", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "      ", "X2", ",", "X3", "=", "drop_path", "(", "X2", ",", "drop_prob", ")", ",", "drop_path", "(", "X3", ",", "drop_prob", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "X0", ",", "X1", ",", "X2", ",", "X3", "]", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus.__init__": [[4, 17], ["population.get_population_size", "consensus.consensus.population.print_population_fitness", "consensus.consensus.edge2index.items"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.print_population_fitness"], ["  ", "def", "__init__", "(", "self", ",", "arch_flag", ",", "population", ",", "edge2index", ",", "op_dict", ",", "op_position", ",", "topk", ",", "weighted", "=", "False", ")", ":", "\n", "    ", "self", ".", "arch_flag", "=", "arch_flag", "\n", "self", ".", "population", "=", "population", "\n", "self", ".", "pop_size", "=", "population", ".", "get_population_size", "(", ")", "\n", "self", ".", "population", ".", "print_population_fitness", "(", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "op_dict", "=", "op_dict", "\n", "self", ".", "op_position", "=", "op_position", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "weighted", "=", "weighted", "\n", "self", ".", "vote_dict", "=", "{", "}", "\n", "\n", "self", ".", "edge2index2", "=", "{", "value", ":", "key", "for", "key", ",", "value", "in", "self", ".", "edge2index", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus.vote": [[18, 40], ["[].cpu", "torch.topk", "enumerate", "print", "ops.sort", "print", "ops.append", "print", "consensus.consensus.vote_dict.keys", "individual.get_arch_parameters", "consensus.consensus.vote_dict[].keys", "str", "col.item"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_arch_parameters"], ["", "def", "vote", "(", "self", ",", "individual", ",", "ind_id", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "arch_param", "=", "individual", ".", "get_arch_parameters", "(", ")", "[", "0", "]", ".", "cpu", "(", ")", "\n", "arch_values", ",", "indices", "=", "torch", ".", "topk", "(", "arch_param", ",", "self", ".", "topk", ")", "\n", "if", "verbose", ":", "print", "(", "indices", ")", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "indices", ")", ":", "\n", "      ", "edge", "=", "self", ".", "edge2index2", "[", "idx", "]", "\n", "ops", "=", "[", "]", "\n", "for", "col", "in", "row", ":", "ops", ".", "append", "(", "self", ".", "op_position", "[", "edge", "]", "[", "str", "(", "col", ".", "item", "(", ")", ")", "]", ")", "\n", "ops", ".", "sort", "(", ")", "\n", "op_str", "=", "','", ".", "join", "(", "ops", ")", "\n", "if", "verbose", ":", "print", "(", "','", ".", "join", "(", "ops", ")", ")", "\n", "if", "idx", "in", "self", ".", "vote_dict", ".", "keys", "(", ")", ":", "\n", "        ", "if", "op_str", "in", "self", ".", "vote_dict", "[", "idx", "]", ".", "keys", "(", ")", ":", "\n", "          ", "if", "self", ".", "weighted", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "+=", "-", "(", "ind_id", "/", "self", ".", "pop_size", ")", "\n", "else", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "+=", "1", "\n", "", "else", ":", "\n", "          ", "if", "self", ".", "weighted", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "=", "-", "(", "ind_id", "/", "self", ".", "pop_size", ")", "\n", "else", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "=", "1", "\n", "", "", "else", ":", "\n", "        ", "if", "self", ".", "weighted", ":", "self", ".", "vote_dict", "[", "idx", "]", "=", "{", "op_str", ":", "-", "(", "ind_id", "/", "self", ".", "pop_size", ")", "}", "\n", "else", ":", "self", ".", "vote_dict", "[", "idx", "]", "=", "{", "op_str", ":", "1", "}", "\n", "", "", "if", "verbose", ":", "print", "(", "self", ".", "vote_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus.sort_vote_dict": [[41, 47], ["consensus.consensus.vote_dict.items", "dict", "print", "sorted", "ops_dict.items"], "methods", ["None"], ["", "def", "sort_vote_dict", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "sorted_vote_dict", "=", "{", "}", "\n", "for", "edge", ",", "ops_dict", "in", "self", ".", "vote_dict", ".", "items", "(", ")", ":", "\n", "      ", "sorted_vote_dict", "[", "edge", "]", "=", "dict", "(", "sorted", "(", "ops_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", ")", "\n", "", "if", "verbose", ":", "print", "(", "sorted_vote_dict", ")", "\n", "return", "sorted_vote_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus.top_votes": [[48, 57], ["consensus.consensus.vote_dict.items", "float", "ops_dict.items", "print"], "methods", ["None"], ["", "def", "top_votes", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "top_votes", "=", "{", "}", "\n", "for", "edge", ",", "ops_dict", "in", "self", ".", "vote_dict", ".", "items", "(", ")", ":", "\n", "      ", "score", "=", "float", "(", "'-inf'", ")", "\n", "for", "ops", ",", "value", "in", "ops_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "value", ">", "score", ":", "ops_str", ",", "score", "=", "ops", ",", "value", "\n", "", "top_votes", "[", "edge", "]", "=", "(", "ops_str", ",", "score", ")", "\n", "if", "verbose", ":", "print", "(", "f'{top_votes[edge]}: {score}'", ")", "\n", "", "return", "top_votes", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus.shrink": [[58, 70], ["enumerate", "consensus.consensus.top_votes", "print", "torch.zeros_like", "consensus.consensus.keys", "consensus.consensus.population.get_population", "consensus.consensus.vote", "[].split"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.top_votes", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.vote"], ["", "def", "shrink", "(", "self", ")", ":", "\n", "    ", "for", "pop_id", ",", "individual", "in", "enumerate", "(", "self", ".", "population", ".", "get_population", "(", ")", ")", ":", "self", ".", "vote", "(", "individual", ",", "pop_id", "+", "1", ")", "\n", "#sorted_vote_dict = self.sort_vote_dict()", "\n", "top_votes_dict", "=", "self", ".", "top_votes", "(", ")", "\n", "print", "(", "top_votes_dict", ")", "\n", "\n", "# Shrinking the search space", "\n", "new_arch_flag", "=", "torch", ".", "zeros_like", "(", "self", ".", "arch_flag", ")", "\n", "for", "edge", "in", "top_votes_dict", ".", "keys", "(", ")", ":", "\n", "      ", "for", "op", "in", "top_votes_dict", "[", "edge", "]", "[", "0", "]", ".", "split", "(", "','", ")", ":", "\n", "        ", "new_arch_flag", "[", "edge", "]", "[", "self", ".", "op_dict", "[", "op", "]", "]", "=", "True", "\n", "", "", "return", "new_arch_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus.shrink_by_one_ind": [[71, 83], ["consensus.consensus.vote", "consensus.consensus.top_votes", "torch.zeros_like", "consensus.consensus.keys", "print", "print", "[].split"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.vote", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.top_votes"], ["", "def", "shrink_by_one_ind", "(", "self", ",", "individual", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "if", "verbose", ":", "print", "(", "individual", ".", "arch_parameters", ")", "\n", "self", ".", "vote", "(", "individual", ",", "1", ")", "\n", "top_votes_dict", "=", "self", ".", "top_votes", "(", ")", "\n", "if", "verbose", ":", "print", "(", "top_votes_dict", ")", "\n", "\n", "# Shrinking the search space", "\n", "new_arch_flag", "=", "torch", ".", "zeros_like", "(", "self", ".", "arch_flag", ")", "\n", "for", "edge", "in", "top_votes_dict", ".", "keys", "(", ")", ":", "\n", "      ", "for", "op", "in", "top_votes_dict", "[", "edge", "]", "[", "0", "]", ".", "split", "(", "','", ")", ":", "\n", "        ", "new_arch_flag", "[", "edge", "]", "[", "self", ".", "op_dict", "[", "op", "]", "]", "=", "True", "\n", "", "", "return", "new_arch_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus3.__init__": [[85, 99], ["population.get_population_size", "consensus.consensus3.population.print_population_fitness", "consensus.consensus3.edge2index.items"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.print_population_fitness"], ["  ", "def", "__init__", "(", "self", ",", "arch_flag", ",", "population", ",", "edge2index", ",", "op_dict", ",", "op_position", ",", "topk", ",", "weighted", "=", "False", ")", ":", "\n", "    ", "self", ".", "arch_flag", "=", "arch_flag", "\n", "self", ".", "population", "=", "population", "\n", "self", ".", "pop_size", "=", "population", ".", "get_population_size", "(", ")", "\n", "self", ".", "population", ".", "print_population_fitness", "(", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "op_dict", "=", "op_dict", "\n", "self", ".", "op_position", "=", "op_position", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "weighted", "=", "weighted", "\n", "self", ".", "vote_dict", "=", "{", "}", "\n", "self", ".", "vote_value_dict", "=", "{", "}", "\n", "\n", "self", ".", "edge2index2", "=", "{", "value", ":", "key", "for", "key", ",", "value", "in", "self", ".", "edge2index", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus3.get_vote_value": [[100, 107], ["None"], "methods", ["None"], ["", "def", "get_vote_value", "(", "self", ",", "arch_str", ",", "ind_id", ")", ":", "\n", "    ", "if", "arch_str", "in", "self", ".", "vote_value_dict", ":", "\n", "      ", "vote_value", "=", "self", ".", "vote_value_dict", "[", "arch_str", "]", "\n", "", "else", ":", "\n", "      ", "vote_value", "=", "-", "(", "ind_id", "/", "self", ".", "pop_size", ")", "\n", "self", ".", "vote_value_dict", "[", "arch_str", "]", "=", "vote_value", "\n", "", "return", "vote_value", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus3.vote": [[108, 132], ["[].cpu", "torch.topk", "enumerate", "print", "ops.sort", "print", "ops.append", "print", "consensus.consensus3.vote_dict.keys", "individual.get_arch_parameters", "consensus.consensus3.vote_dict[].keys", "consensus.consensus3.get_vote_value", "consensus.consensus3.get_vote_value", "consensus.consensus3.get_vote_value", "str", "col.item"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_arch_parameters", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus3.get_vote_value", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus3.get_vote_value", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus3.get_vote_value"], ["", "def", "vote", "(", "self", ",", "individual", ",", "ind_id", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "arch_param", "=", "individual", ".", "get_arch_parameters", "(", ")", "[", "0", "]", ".", "cpu", "(", ")", "\n", "arch_str", "=", "individual", ".", "genotype", "\n", "arch_values", ",", "indices", "=", "torch", ".", "topk", "(", "arch_param", ",", "self", ".", "topk", ")", "\n", "if", "verbose", ":", "print", "(", "indices", ")", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "indices", ")", ":", "\n", "      ", "edge", "=", "self", ".", "edge2index2", "[", "idx", "]", "\n", "ops", "=", "[", "]", "\n", "for", "col", "in", "row", ":", "\n", "        ", "ops", ".", "append", "(", "self", ".", "op_position", "[", "edge", "]", "[", "str", "(", "col", ".", "item", "(", ")", ")", "]", ")", "\n", "", "ops", ".", "sort", "(", ")", "\n", "op_str", "=", "','", ".", "join", "(", "ops", ")", "\n", "if", "verbose", ":", "print", "(", "','", ".", "join", "(", "ops", ")", ")", "\n", "if", "idx", "in", "self", ".", "vote_dict", ".", "keys", "(", ")", ":", "\n", "        ", "if", "op_str", "in", "self", ".", "vote_dict", "[", "idx", "]", ".", "keys", "(", ")", ":", "\n", "          ", "if", "self", ".", "weighted", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "+=", "self", ".", "get_vote_value", "(", "arch_str", "=", "arch_str", ",", "ind_id", "=", "ind_id", ")", "\n", "else", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "+=", "1", "\n", "", "else", ":", "\n", "          ", "if", "self", ".", "weighted", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "=", "self", ".", "get_vote_value", "(", "arch_str", "=", "arch_str", ",", "ind_id", "=", "ind_id", ")", "\n", "else", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "=", "1", "\n", "", "", "else", ":", "\n", "        ", "if", "self", ".", "weighted", ":", "self", ".", "vote_dict", "[", "idx", "]", "=", "{", "op_str", ":", "self", ".", "get_vote_value", "(", "arch_str", "=", "arch_str", ",", "ind_id", "=", "ind_id", ")", "}", "\n", "else", ":", "self", ".", "vote_dict", "[", "idx", "]", "=", "{", "op_str", ":", "1", "}", "\n", "", "", "if", "verbose", ":", "print", "(", "self", ".", "vote_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus3.sort_vote_dict": [[133, 139], ["consensus.consensus3.vote_dict.items", "dict", "print", "sorted", "ops_dict.items"], "methods", ["None"], ["", "def", "sort_vote_dict", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "sorted_vote_dict", "=", "{", "}", "\n", "for", "edge", ",", "ops_dict", "in", "self", ".", "vote_dict", ".", "items", "(", ")", ":", "\n", "      ", "sorted_vote_dict", "[", "edge", "]", "=", "dict", "(", "sorted", "(", "ops_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", ")", "\n", "", "if", "verbose", ":", "print", "(", "sorted_vote_dict", ")", "\n", "return", "sorted_vote_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus3.top_votes": [[140, 149], ["consensus.consensus3.vote_dict.items", "float", "ops_dict.items", "print"], "methods", ["None"], ["", "def", "top_votes", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "top_votes", "=", "{", "}", "\n", "for", "edge", ",", "ops_dict", "in", "self", ".", "vote_dict", ".", "items", "(", ")", ":", "\n", "      ", "score", "=", "float", "(", "'-inf'", ")", "\n", "for", "ops", ",", "value", "in", "ops_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "value", ">", "score", ":", "ops_str", ",", "score", "=", "ops", ",", "value", "\n", "", "top_votes", "[", "edge", "]", "=", "(", "ops_str", ",", "score", ")", "\n", "if", "verbose", ":", "print", "(", "f'{top_votes[edge]}: {score}'", ")", "\n", "", "return", "top_votes", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.consensus.consensus3.shrink": [[150, 162], ["enumerate", "consensus.consensus3.top_votes", "torch.zeros_like", "consensus.consensus3.keys", "consensus.consensus3.population.get_population", "consensus.consensus3.vote", "print", "[].split"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.top_votes", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.vote"], ["", "def", "shrink", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "for", "pop_id", ",", "individual", "in", "enumerate", "(", "self", ".", "population", ".", "get_population", "(", ")", ")", ":", "\n", "      ", "self", ".", "vote", "(", "individual", ",", "pop_id", "+", "1", ")", "\n", "", "top_votes_dict", "=", "self", ".", "top_votes", "(", "verbose", "=", "verbose", ")", "\n", "if", "verbose", ":", "print", "(", "top_votes_dict", ")", "\n", "\n", "# Shrinking the search space", "\n", "new_arch_flag", "=", "torch", ".", "zeros_like", "(", "self", ".", "arch_flag", ")", "\n", "for", "edge", "in", "top_votes_dict", ".", "keys", "(", ")", ":", "\n", "      ", "for", "op", "in", "top_votes_dict", "[", "edge", "]", "[", "0", "]", ".", "split", "(", "','", ")", ":", "\n", "        ", "new_arch_flag", "[", "edge", "]", "[", "self", ".", "op_dict", "[", "op", "]", "]", "=", "True", "\n", "", "", "return", "new_arch_flag", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.arch_search.get_arch_score": [[67, 76], ["api.query_index_by_arch", "api.get_more_info", "api.query_by_index().get_metrics", "api.query_by_index"], "function", ["None"], ["def", "get_arch_score", "(", "api", ",", "arch_str", ",", "dataset", ",", "acc_type", "=", "None", ",", "use_012_epoch_training", "=", "False", ")", ":", "\n", "  ", "arch_index", "=", "api", ".", "query_index_by_arch", "(", "arch_str", ")", "\n", "assert", "arch_index", ">=", "0", ",", "'can not find this arch : {:}'", ".", "format", "(", "arch_str", ")", "\n", "if", "use_012_epoch_training", ":", "\n", "    ", "info", "=", "api", ".", "get_more_info", "(", "arch_index", ",", "dataset", ",", "iepoch", "=", "None", ",", "hp", "=", "'12'", ",", "is_random", "=", "True", ")", "\n", "valid_acc", ",", "time_cost", "=", "info", "[", "'valid-accuracy'", "]", ",", "info", "[", "'train-all-time'", "]", "+", "info", "[", "'valid-per-time'", "]", "\n", "return", "valid_acc", ",", "time_cost", "\n", "", "else", ":", "\n", "    ", "return", "api", ".", "query_by_index", "(", "arch_index", "=", "arch_index", ",", "hp", "=", "'200'", ")", ".", "get_metrics", "(", "dataset", ",", "acc_type", ")", "[", "'accuracy'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.arch_search.train": [[77, 107], ["model.train", "enumerate", "logging.info", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "model.random_alphas", "inputs.to.size", "inputs.to.to", "targets.to.to", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "utils.obtain_accuracy", "losses.update", "top1.update", "top5.update", "model.parameters", "criterion.item", "inputs.to.size", "prec1.item", "inputs.to.size", "prec5.item", "inputs.to.size", "logging.info", "logging.info"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.random_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "", "def", "train", "(", "model", ",", "train_queue", ",", "criterion", ",", "optimizer", ",", "gen", ",", "args", ")", ":", "\n", "  ", "losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "step", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "    ", "model", ".", "random_alphas", "(", "discrete", "=", "args", ".", "train_discrete", ")", "\n", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "targets", "=", "targets", ".", "to", "(", "device", ")", "\n", "\n", "#inputs = inputs.cuda(non_blocking=True)", "\n", "#targets = targets.cuda(non_blocking=True)", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "logits", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "#print(step)", "\n", "if", "(", "step", ")", "%", "100", "==", "0", ":", "\n", "      ", "logging", ".", "info", "(", "f\"[Epoch #{gen}]: train_discrete: {args.train_discrete}\"", ")", "\n", "logging", ".", "info", "(", "f\"Using Training batch #{step} with loss: {losses.avg:.5f}, prec1: {top1.avg:.5f}, prec5: {top5.avg:.5f}\"", ")", "\n", "#break", "\n", "", "", "logging", ".", "info", "(", "f\"Training finished with loss: {losses.avg:.5f}, prec1: {top1.avg:.5f}, prec5: {top5.avg:.5f}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.arch_search.validation": [[108, 149], ["model.eval", "range", "len", "time.time", "model.update_alphas", "model.discretize", "model.check_alphas", "model.genotype().tostr", "logging.info", "population.get_population", "logging.info", "[].set_fitness", "[].objs.reset", "[].top1.reset", "[].top5.reset", "model.genotype", "population.get_population", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "len", "inputs.to.size", "inputs.to.to", "targets.to.to", "model", "criterion", "utils.obtain_accuracy", "[].objs.update", "[].top1.update", "[].top5.update", "population.get_population", "population.get_population", "population.get_population", "criterion.data.cpu().item", "prec1.data.cpu().item", "prec5.data.cpu().item", "population.get_population", "population.get_population", "population.get_population", "population.get_population", "population.get_population", "population.get_population", "criterion.data.cpu", "prec1.data.cpu", "prec5.data.cpu", "population.get_population", "population.get_population", "population.get_population"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.discretize", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.check_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tostr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.set_fitness", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.genotype", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population"], ["", "def", "validation", "(", "model", ",", "valid_queue", ",", "criterion", ",", "gen", ",", "df", ")", ":", "\n", "  ", "model", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "population", ".", "get_population", "(", ")", ")", ")", ":", "\n", "    ", "valid_start", "=", "time", ".", "time", "(", ")", "\n", "#Copying and checking the discretized alphas", "\n", "model", ".", "update_alphas", "(", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "arch_parameters", "[", "0", "]", ")", "\n", "discrete_alphas", "=", "model", ".", "discretize", "(", ")", "\n", "assert", "model", ".", "check_alphas", "(", "discrete_alphas", ")", "\n", "arch_str_tmp", "=", "model", ".", "genotype", "(", ")", ".", "tostr", "(", ")", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "genotype", "=", "arch_str_tmp", "\n", "if", "(", "not", "df", ".", "empty", ")", "and", "(", "not", "df", "[", "df", "[", "'genotype'", "]", "==", "arch_str_tmp", "]", ".", "empty", ")", ":", "\n", "      ", "series", "=", "df", "[", "df", "[", "'genotype'", "]", "==", "arch_str_tmp", "]", "\n", "generation", ",", "arch_loss", ",", "arch_top1", ",", "arch_top5", "=", "series", "[", "'generation'", "]", ".", "values", "[", "0", "]", ",", "series", "[", "'arch_loss'", "]", ".", "values", "[", "0", "]", ",", "series", "[", "'arch_top1'", "]", ".", "values", "[", "0", "]", ",", "series", "[", "'arch_top5'", "]", ".", "values", "[", "0", "]", "\n", "logging", ".", "info", "(", "f'Already evaluated in generation #{generation}'", ")", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "set_fitness", "(", "arch_loss", ",", "arch_top1", ",", "arch_top5", ")", "\n", "", "else", ":", "\n", "      ", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "objs", ".", "reset", "(", ")", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "top1", ".", "reset", "(", ")", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "top5", ".", "reset", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "          ", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "targets", "=", "targets", ".", "to", "(", "device", ")", "\n", "_", ",", "logits", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "\n", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "objs", ".", "update", "(", "loss", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "n", ")", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "top1", ".", "update", "(", "prec1", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "n", ")", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "top5", ".", "update", "(", "prec5", ".", "data", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "#print(step)", "\n", "#if (step + 1) % 10 == 0:", "\n", "#break", "\n", "#print(\"Finished in {} seconds\".format((time.time() - valid_start) ))", "\n", "\n", "", "", "", "logging", ".", "info", "(", "\"[{} Generation] {}/{} finished with validation loss: {:.5f}, prec1: {:.5f}, prec5: {:.5f}\"", ".", "format", "(", "gen", ",", "i", "+", "1", ",", "len", "(", "population", ".", "get_population", "(", ")", ")", ",", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "objs", ".", "avg", ",", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "top1", ".", "avg", ",", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "top5", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.NAS201SearchCell.__init__": [[15, 34], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "search_cells.NAS201SearchCell.edges.keys", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "max_nodes", ",", "op_names", ",", "affine", "=", "False", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "NAS201SearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op_names", "=", "deepcopy", "(", "op_names", ")", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "in_dim", "=", "C_in", "\n", "self", ".", "out_dim", "=", "C_out", "\n", "for", "i", "in", "range", "(", "1", ",", "max_nodes", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "if", "j", "==", "0", ":", "\n", "          ", "xlists", "=", "[", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "for", "op_name", "in", "op_names", "]", "\n", "", "else", ":", "\n", "          ", "xlists", "=", "[", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "1", ",", "affine", ",", "track_running_stats", ")", "for", "op_name", "in", "op_names", "]", "\n", "", "self", ".", "edges", "[", "node_str", "]", "=", "nn", ".", "ModuleList", "(", "xlists", ")", "\n", "", "", "self", ".", "edge_keys", "=", "sorted", "(", "list", "(", "self", ".", "edges", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "edge2index", "=", "{", "key", ":", "i", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "edge_keys", ")", "}", "\n", "self", ".", "num_edges", "=", "len", "(", "self", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.NAS201SearchCell.extra_repr": [[35, 38], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "string", "=", "'info :: {max_nodes} nodes, inC={in_dim}, outC={out_dim}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.NAS201SearchCell.forward": [[39, 49], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "sum", "layer", "zip"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "inter_nodes", ".", "append", "(", "sum", "(", "layer", "(", "nodes", "[", "j", "]", ")", "*", "w", "for", "layer", ",", "w", "in", "zip", "(", "self", ".", "edges", "[", "node_str", "]", ",", "weights", ")", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.NAS201SearchCell.forward_gdas": [[51, 63], ["range", "range", "nodes.append", "index[].item", "sum", "inter_nodes.append", "sum", "enumerate", "edge"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_gdas", "(", "self", ",", "inputs", ",", "hardwts", ",", "index", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "hardwts", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "argmaxs", "=", "index", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", ".", "item", "(", ")", "\n", "weigsum", "=", "sum", "(", "weights", "[", "_ie", "]", "*", "edge", "(", "nodes", "[", "j", "]", ")", "if", "_ie", "==", "argmaxs", "else", "weights", "[", "_ie", "]", "for", "_ie", ",", "edge", "in", "enumerate", "(", "self", ".", "edges", "[", "node_str", "]", ")", ")", "\n", "inter_nodes", ".", "append", "(", "weigsum", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.NAS201SearchCell.forward_joint": [[65, 77], ["range", "range", "nodes.append", "sum", "inter_nodes.append", "sum", "layer", "zip"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_joint", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "#aggregation = sum( layer(nodes[j]) * w for layer, w in zip(self.edges[node_str], weights) ) / weights.numel()", "\n", "aggregation", "=", "sum", "(", "layer", "(", "nodes", "[", "j", "]", ")", "*", "w", "for", "layer", ",", "w", "in", "zip", "(", "self", ".", "edges", "[", "node_str", "]", ",", "weights", ")", ")", "\n", "inter_nodes", ".", "append", "(", "aggregation", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.NAS201SearchCell.forward_urs": [[79, 96], ["range", "enumerate", "nodes.append", "range", "inter_nodes.append", "sum", "random.choice", "sops.append", "random.choice.", "hasattr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_urs", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "while", "True", ":", "# to avoid select zero for all ops", "\n", "        ", "sops", ",", "has_non_zero", "=", "[", "]", ",", "False", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "candidates", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "select_op", "=", "random", ".", "choice", "(", "candidates", ")", "\n", "sops", ".", "append", "(", "select_op", ")", "\n", "if", "not", "hasattr", "(", "select_op", ",", "'is_zero'", ")", "or", "select_op", ".", "is_zero", "is", "False", ":", "has_non_zero", "=", "True", "\n", "", "if", "has_non_zero", ":", "break", "\n", "", "inter_nodes", "=", "[", "]", "\n", "for", "j", ",", "select_op", "in", "enumerate", "(", "sops", ")", ":", "\n", "        ", "inter_nodes", ".", "append", "(", "select_op", "(", "nodes", "[", "j", "]", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.NAS201SearchCell.forward_select": [[98, 109], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_select", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "inter_nodes", ".", "append", "(", "self", ".", "edges", "[", "node_str", "]", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "(", "nodes", "[", "j", "]", ")", ")", "\n", "#inter_nodes.append( sum( layer(nodes[j]) * w for layer, w in zip(self.edges[node_str], weights) ) )", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.NAS201SearchCell.forward_dynamic": [[111, 122], ["range", "nodes.append", "search_cells.NAS201SearchCell.op_names.index", "inter_nodes.append", "sum"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_dynamic", "(", "self", ",", "inputs", ",", "structure", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "cur_op_node", "=", "structure", ".", "nodes", "[", "i", "-", "1", "]", "\n", "inter_nodes", "=", "[", "]", "\n", "for", "op_name", ",", "j", "in", "cur_op_node", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op_index", "=", "self", ".", "op_names", ".", "index", "(", "op_name", ")", "\n", "inter_nodes", ".", "append", "(", "self", ".", "edges", "[", "node_str", "]", "[", "op_index", "]", "(", "nodes", "[", "j", "]", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.MixedOp.__init__": [[127, 133], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "search_cells.MixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "space", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "space", ":", "\n", "      ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.MixedOp.forward_gdas": [[134, 136], ["None"], "methods", ["None"], ["", "", "def", "forward_gdas", "(", "self", ",", "x", ",", "weights", ",", "index", ")", ":", "\n", "    ", "return", "self", ".", "_ops", "[", "index", "]", "(", "x", ")", "*", "weights", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.MixedOp.forward_darts": [[137, 139], ["sum", "op", "zip"], "methods", ["None"], ["", "def", "forward_darts", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "    ", "return", "sum", "(", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.NASNetSearchCell.__init__": [[144, 165], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "search_cells.MixedOp", "search_cells.NASNetSearchCell.edges.keys", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "NASNetSearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "op_names", "=", "deepcopy", "(", "space", ")", "\n", "if", "reduction_prev", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'skip_connect'", "]", "(", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", ")", "\n", "else", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "preprocess1", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "# indicate the edge from node-(j) to node-(i+2)", "\n", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "space", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "edges", "[", "node_str", "]", "=", "op", "\n", "", "", "self", ".", "edge_keys", "=", "sorted", "(", "list", "(", "self", ".", "edges", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "edge2index", "=", "{", "key", ":", "i", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "edge_keys", ")", "}", "\n", "self", ".", "num_edges", "=", "len", "(", "self", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.NASNetSearchCell.forward_gdas": [[166, 182], ["search_cells.NASNetSearchCell.preprocess0", "search_cells.NASNetSearchCell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "states.append", "indexs[].item", "clist.append", "sum", "op.forward_gdas"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NASNetSearchCell.forward_gdas"], ["", "def", "forward_gdas", "(", "self", ",", "s0", ",", "s1", ",", "weightss", ",", "indexs", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "clist", "=", "[", "]", "\n", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "index", "=", "indexs", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", ".", "item", "(", ")", "\n", "clist", ".", "append", "(", "op", ".", "forward_gdas", "(", "h", ",", "weights", ",", "index", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_cells.NASNetSearchCell.forward_darts": [[183, 198], ["search_cells.NASNetSearchCell.preprocess0", "search_cells.NASNetSearchCell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "states.append", "clist.append", "sum", "op.forward_darts"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NASNetSearchCell.forward_darts"], ["", "def", "forward_darts", "(", "self", ",", "s0", ",", "s1", ",", "weightss", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "clist", "=", "[", "]", "\n", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "clist", ".", "append", "(", "op", ".", "forward_darts", "(", "h", ",", "weights", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.__init__": [[13, 47], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_s2.TinyNetworkCMAES_NAS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "TinyNetworkCMAES_NAS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "search_space", "=", "search_space", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n", "# Initializing the architecture parameter", "\n", "self", ".", "num_edge", "=", "num_edge", "\n", "self", ".", "search_space", "=", "search_space", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "self", ".", "num_edge", ",", "len", "(", "self", ".", "search_space", ")", ")", ",", "requires_grad", "=", "False", ")", "\n", "#self.arch_parameters = nn.Parameter( 1e-3*torch.randn(num_edge, len(search_space)), requires_grad = False)", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.get_weights": [[50, 56], ["list", "list", "list", "list", "list", "search_model_s2.TinyNetworkCMAES_NAS.classifier.parameters", "search_model_s2.TinyNetworkCMAES_NAS.stem.parameters", "search_model_s2.TinyNetworkCMAES_NAS.cells.parameters", "search_model_s2.TinyNetworkCMAES_NAS.lastact.parameters", "search_model_s2.TinyNetworkCMAES_NAS.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "'''To get the values of the weigths/parameters of the one shot model'''", "\n", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.random_alphas": [[57, 69], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "len", "torch.functional.softmax", "torch.functional.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "search_model_s2.TinyNetworkCMAES_NAS.update_alphas", "search_model_s2.TinyNetworkCMAES_NAS.update_alphas", "torch.device", "torch.device", "torch.device", "torch.device", "torch.functional.softmax.max", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas"], ["", "def", "random_alphas", "(", "self", ",", "discrete", "=", "False", ",", "k", "=", "1.0", ")", ":", "\n", "    ", "'''Generate random values for the architecture parameters'''", "\n", "tmp", "=", "torch", ".", "rand", "(", "self", ".", "num_edge", ",", "len", "(", "self", ".", "search_space", ")", ",", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", ")", ")", "\n", "\n", "if", "discrete", ":", "\n", "      ", "softmax_alphas", "=", "nn", ".", "functional", ".", "softmax", "(", "tmp", ",", "dim", "=", "-", "1", ")", "\n", "index", "=", "softmax_alphas", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "#alphas = torch.zeros_like(softmax_alphas).scatter_(-1, index, 1.0)", "\n", "alphas", "=", "torch", ".", "zeros_like", "(", "softmax_alphas", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "k", ")", "\n", "self", ".", "update_alphas", "(", "alphas", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "update_alphas", "(", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.get_alphas": [[70, 73], ["None"], "methods", ["None"], ["", "", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "'''Returns the architecture weights'''", "\n", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.update_alphas": [[74, 81], ["[].data.copy_", "search_model_s2.TinyNetworkCMAES_NAS.get_alphas"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas"], ["", "def", "update_alphas", "(", "self", ",", "alphas", ")", ":", "\n", "    ", "'''Update the architecture weights'''", "\n", "#assert isinstance(alphas, Architecture) , 'Input alphas is wrong type'", "\n", "#assert isinstance(alphas, torch.Tensor) , 'Input alphas has to be tensor type'", "\n", "#assert alphas.device == self.get_alphas()[0].device, \"Given tensor has to be in the same device\"", "\n", "#assert alphas.size() == self.get_alphas()[0].size(), \"Given tensor size must be {}\".format(self.get_alphas()[0].size())", "\n", "self", ".", "get_alphas", "(", ")", "[", "0", "]", ".", "data", ".", "copy_", "(", "alphas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.discretize": [[82, 91], ["torch.functional.softmax", "torch.functional.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "search_model_s2.TinyNetworkCMAES_NAS.update_alphas", "torch.functional.softmax.max", "search_model_s2.TinyNetworkCMAES_NAS.get_alphas", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas"], ["", "def", "discretize", "(", "self", ",", "k", "=", "1.0", ")", ":", "\n", "    ", "''' Discretize the alphas of the model'''", "\n", "alphas_softmax", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "get_alphas", "(", ")", "[", "0", "]", ",", "dim", "=", "-", "1", ")", "\n", "index", "=", "alphas_softmax", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "#one_h = torch.zeros_like(alphas_softmax).scatter_(-1, index, 1.0)", "\n", "one_h", "=", "torch", ".", "zeros_like", "(", "alphas_softmax", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "k", ")", "\n", "self", ".", "update_alphas", "(", "one_h", ")", "\n", "\n", "return", "one_h", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.check_alphas": [[92, 97], ["isinstance", "torch.all().item", "torch.all().item", "torch.all().item", "torch.all().item", "torch.all", "torch.all", "torch.all", "torch.all", "search_model_s2.TinyNetworkCMAES_NAS.get_alphas"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas"], ["", "def", "check_alphas", "(", "self", ",", "alphas", ")", ":", "\n", "    ", "'''Verify if the architecture parameter is equal to the given alphas'''", "\n", "assert", "isinstance", "(", "alphas", ",", "torch", ".", "Tensor", ")", ",", "'Input alphas has to be tensor type'", "\n", "#return np.all(self.get_alphas()[0] == alphas.get())", "\n", "return", "torch", ".", "all", "(", "self", ".", "get_alphas", "(", ")", "[", "0", "]", "==", "alphas", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.show_alphas": [[98, 103], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "[].cpu", "search_model_s2.TinyNetworkCMAES_NAS.get_alphas"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "'''Returns the architecture parameter in string format'''", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#return 'arch-parameters :\\n{:}'.format( nn.functional.softmax(self.arch_parameters.get_tensor(), dim=-1).cpu() )", "\n", "      ", "return", "'arch-parameters :\\n{:}'", ".", "format", "(", "self", ".", "get_alphas", "(", ")", "[", "0", "]", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.show_alphas_dataframe": [[104, 132], ["pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "[].detach().cpu().numpy", "enumerate", "torch.functional.softmax().detach().cpu().numpy", "torch.functional.softmax().detach().cpu().numpy", "enumerate", "pandas.DataFrame.astype().idxmax", "enumerate", "search_model_s2.TinyNetworkCMAES_NAS.edge2index.keys", "search_model_s2.TinyNetworkCMAES_NAS.edge2index.keys", "pandas.DataFrame.sum", "list", "list", "list", "numpy.zeros", "[].detach().cpu", "torch.functional.softmax().detach().cpu", "torch.functional.softmax().detach().cpu", "pandas.DataFrame.astype", "search_model_s2.TinyNetworkCMAES_NAS.edge2index.keys", "search_model_s2.TinyNetworkCMAES_NAS.edge2index.keys", "search_model_s2.TinyNetworkCMAES_NAS.edge2index.keys", "[].detach", "torch.functional.softmax().detach", "torch.functional.softmax().detach", "search_model_s2.TinyNetworkCMAES_NAS.get_alphas", "torch.functional.softmax", "torch.functional.softmax", "search_model_s2.TinyNetworkCMAES_NAS.get_alphas"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas"], ["", "", "def", "show_alphas_dataframe", "(", "self", ",", "show_sum", "=", "False", ")", ":", "\n", "    ", "'''Returns the architecture weights in two pandas Dataframe.\n      First dataframe is just the architecture weight and the\n      second dataframe is the one hot representation of the max values in each row in first dataframe\n    '''", "\n", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "self", ".", "search_space", ",", "index", "=", "list", "(", "self", ".", "edge2index", ".", "keys", "(", ")", ")", ")", "\n", "df_softmax", "=", "pd", ".", "DataFrame", "(", "columns", "=", "self", ".", "search_space", ",", "index", "=", "list", "(", "self", ".", "edge2index", ".", "keys", "(", ")", ")", ")", "\n", "df_max", "=", "pd", ".", "DataFrame", "(", "columns", "=", "self", ".", "search_space", ",", "index", "=", "list", "(", "self", ".", "edge2index", ".", "keys", "(", ")", ")", ",", "\n", "data", "=", "np", ".", "zeros", "(", "self", ".", "get_alphas", "(", ")", "[", "0", "]", ".", "shape", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "\n", "alphas", "=", "self", ".", "get_alphas", "(", ")", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "index", ",", "key", "in", "enumerate", "(", "self", ".", "edge2index", ".", "keys", "(", ")", ")", ":", "\n", "#df.loc[key] = self.arch_parameters.get()[index]", "\n", "      ", "df", ".", "loc", "[", "key", "]", "=", "alphas", "[", "index", "]", "\n", "\n", "", "alphas_softmax", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#alphas_softmax = self.arch_parameters.apply_softmax(self.get_alphas()[0])", "\n", "for", "index", ",", "key", "in", "enumerate", "(", "self", ".", "edge2index", ".", "keys", "(", ")", ")", ":", "\n", "      ", "df_softmax", ".", "loc", "[", "key", "]", "=", "alphas_softmax", "[", "index", "]", "\n", "\n", "", "max_idx", "=", "df", ".", "astype", "(", "float", ")", ".", "idxmax", "(", "axis", "=", "1", ")", "\n", "for", "column", ",", "row", "in", "enumerate", "(", "max_idx", ".", "index", ")", ":", "\n", "      ", "df_max", ".", "loc", "[", "row", "]", "[", "max_idx", "[", "column", "]", "]", "=", "1", "\n", "\n", "", "if", "show_sum", ":", "\n", "      ", "df_softmax", "[", "'sum'", "]", "=", "df_softmax", ".", "sum", "(", "axis", "=", "1", ")", "\n", "\n", "", "return", "df", ",", "df_max", ",", "df_softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.get_message": [[133, 139], ["search_model_s2.TinyNetworkCMAES_NAS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "'''Returns the string format of details of one shot model'''", "\n", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.extra_repr": [[140, 142], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.genotype": [[143, 156], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "'''Returns the architecture from the one shot model architecture parameter'''", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "weights", "=", "self", ".", "arch_parameters", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.search_model_s2.TinyNetworkCMAES_NAS.forward": [[157, 176], ["torch.functional.softmax", "torch.functional.softmax", "search_model_s2.TinyNetworkCMAES_NAS.stem", "enumerate", "search_model_s2.TinyNetworkCMAES_NAS.lastact", "search_model_s2.TinyNetworkCMAES_NAS.global_pooling", "out.view.view.view", "search_model_s2.TinyNetworkCMAES_NAS.classifier", "isinstance", "out.view.view.size", "search_model_s2.TinyNetworkCMAES_NAS.get_alphas", "cell", "cell"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "alphas", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "get_alphas", "(", ")", "[", "0", "]", ",", "dim", "=", "-", "1", ")", "\n", "#print(alphas)", "\n", "#alphas  = self.arch_parameters", "\n", "#alphas = torch.tensor(self.get_alphas()[0])", "\n", "\n", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "feature", "=", "cell", "(", "feature", ",", "alphas", ")", "\n", "", "else", ":", "\n", "        ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.search_single_args.obtain_search_single_args": [[5, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_search_single_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--split_path'", ",", "type", "=", "str", ",", "help", "=", "'The split file path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--search_shape'", ",", "type", "=", "str", ",", "help", "=", "'The shape to be searched.'", ")", "\n", "#parser.add_argument('--arch_para_pure',   type=int,                   help='The architecture-parameter pure or not.')", "\n", "parser", ".", "add_argument", "(", "'--gumbel_tau_max'", ",", "type", "=", "float", ",", "help", "=", "'The maximum tau for Gumbel.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gumbel_tau_min'", ",", "type", "=", "float", ",", "help", "=", "'The minimum tau for Gumbel.'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_ratio'", ",", "type", "=", "float", ",", "help", "=", "'The expected FLOP ratio.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_weight'", ",", "type", "=", "float", ",", "help", "=", "'The loss weight for FLOP.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_tolerant'", ",", "type", "=", "float", ",", "help", "=", "'The tolerant range for FLOP.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "assert", "args", ".", "gumbel_tau_max", "is", "not", "None", "and", "args", ".", "gumbel_tau_min", "is", "not", "None", "\n", "assert", "args", ".", "FLOP_tolerant", "is", "not", "None", "and", "args", ".", "FLOP_tolerant", ">", "0", ",", "'invalid FLOP_tolerant : {:}'", ".", "format", "(", "FLOP_tolerant", ")", "\n", "#assert args.arch_para_pure is not None, 'arch_para_pure is not None: {:}'.format(args.arch_para_pure)", "\n", "#args.arch_para_pure = bool(args.arch_para_pure)", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.count_parameters_in_MB": [[6, 11], ["isinstance", "numpy.sum", "numpy.sum", "numpy.prod", "numpy.prod", "v.size", "model.parameters", "v.size"], "function", ["None"], ["def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "  ", "if", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ".", "parameters", "(", ")", ")", "/", "1e6", "\n", "", "else", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.get_model_infos": [[13, 40], ["flop_benchmark.add_flops_counting_methods", "add_flops_counting_methods.eval", "torch.rand", "torch.rand", "flop_benchmark.count_parameters_in_MB", "hasattr", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "add_flops_counting_methods.apply", "next", "cache_inputs.cuda.cuda", "torch.no_grad", "torch.no_grad", "add_flops_counting_methods.", "flop_benchmark.compute_average_flops_cost", "flop_benchmark.count_parameters_in_MB", "print", "print", "add_flops_counting_methods.parameters", "add_flops_counting_methods.auxiliary_param"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.add_flops_counting_methods", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.count_parameters_in_MB", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.compute_average_flops_cost", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.count_parameters_in_MB", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.nasnet_cifar.NASNetonCIFAR.auxiliary_param"], ["", "", "def", "get_model_infos", "(", "model", ",", "shape", ")", ":", "\n", "#model = copy.deepcopy( model )", "\n", "\n", "  ", "model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "#model = model.cuda()", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "#cache_inputs = torch.zeros(*shape).cuda()", "\n", "#cache_inputs = torch.zeros(*shape)", "\n", "cache_inputs", "=", "torch", ".", "rand", "(", "*", "shape", ")", "\n", "if", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "cache_inputs", "=", "cache_inputs", ".", "cuda", "(", ")", "\n", "#print_log('In the calculating function : cache input size : {:}'.format(cache_inputs.size()), log)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "_____", "=", "model", "(", "cache_inputs", ")", "\n", "", "FLOPs", "=", "compute_average_flops_cost", "(", "model", ")", "/", "1e6", "\n", "Param", "=", "count_parameters_in_MB", "(", "model", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'auxiliary_param'", ")", ":", "\n", "    ", "aux_params", "=", "count_parameters_in_MB", "(", "model", ".", "auxiliary_param", "(", ")", ")", "\n", "print", "(", "'The auxiliary params of this model is : {:}'", ".", "format", "(", "aux_params", ")", ")", "\n", "print", "(", "'We remove the auxiliary params from the total params ({:}) when counting'", ".", "format", "(", "Param", ")", ")", "\n", "Param", "=", "Param", "-", "aux_params", "\n", "\n", "#print_log('FLOPs : {:} MB'.format(FLOPs), log)", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "apply", "(", "remove_hook_function", ")", "\n", "return", "FLOPs", ",", "Param", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.add_flops_counting_methods": [[43, 49], ["flop_benchmark.add_batch_counter_hook_function", "model.apply", "model.apply", "flop_benchmark.remove_hook_function"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.add_batch_counter_hook_function", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.remove_hook_function"], ["", "def", "add_flops_counting_methods", "(", "model", ")", ":", "\n", "  ", "model", ".", "__batch_counter__", "=", "0", "\n", "add_batch_counter_hook_function", "(", "model", ")", "\n", "model", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "model", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.compute_average_flops_cost": [[52, 66], ["model.modules", "isinstance", "isinstance", "isinstance", "hasattr"], "function", ["None"], ["", "def", "compute_average_flops_cost", "(", "model", ")", ":", "\n", "  ", "\"\"\"\n  A method that will be available after add_flops_counting_methods() is called on a desired net object.\n  Returns current mean flops consumption per image.\n  \"\"\"", "\n", "batches_count", "=", "model", ".", "__batch_counter__", "\n", "flops_sum", "=", "0", "\n", "#or isinstance(module, torch.nn.AvgPool2d) or isinstance(module, torch.nn.MaxPool2d) \\", "\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "\n", "      ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.pool_flops_counter_hook": [[69, 77], ["inputs[].size", "inputs[].size", "inputs[].size"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "pool_module", ",", "inputs", ",", "output", ")", ":", "\n", "  ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "kernel_size", "=", "pool_module", ".", "kernel_size", "\n", "out_C", ",", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "1", ":", "]", "\n", "assert", "out_C", "==", "inputs", "[", "0", "]", ".", "size", "(", "1", ")", ",", "'{:} vs. {:}'", ".", "format", "(", "out_C", ",", "inputs", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "\n", "overall_flops", "=", "batch_size", "*", "out_C", "*", "output_height", "*", "output_width", "*", "kernel_size", "*", "kernel_size", "\n", "pool_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.self_calculate_flops_counter_hook": [[79, 82], ["flop_benchmark..calculate_flop_self"], "function", ["None"], ["", "def", "self_calculate_flops_counter_hook", "(", "self_module", ",", "inputs", ",", "output", ")", ":", "\n", "  ", "overall_flops", "=", "self_module", ".", "calculate_flop_self", "(", "inputs", "[", "0", "]", ".", "shape", ",", "output", ".", "shape", ")", "\n", "self_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.fc_flops_counter_hook": [[84, 92], ["inputs[].size", "inputs[].size", "output.size"], "function", ["None"], ["", "def", "fc_flops_counter_hook", "(", "fc_module", ",", "inputs", ",", "output", ")", ":", "\n", "  ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "xin", ",", "xout", "=", "fc_module", ".", "in_features", ",", "fc_module", ".", "out_features", "\n", "assert", "xin", "==", "inputs", "[", "0", "]", ".", "size", "(", "1", ")", "and", "xout", "==", "output", ".", "size", "(", "1", ")", ",", "'IO=({:}, {:})'", ".", "format", "(", "xin", ",", "xout", ")", "\n", "overall_flops", "=", "batch_size", "*", "xin", "*", "xout", "\n", "if", "fc_module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "overall_flops", "+=", "batch_size", "*", "xout", "\n", "", "fc_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.conv1d_flops_counter_hook": [[94, 109], ["inputs[].size"], "function", ["None"], ["", "def", "conv1d_flops_counter_hook", "(", "conv_module", ",", "inputs", ",", "outputs", ")", ":", "\n", "  ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "outL", "=", "outputs", ".", "shape", "[", "-", "1", "]", "\n", "[", "kernel", "]", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "conv_per_position_flops", "=", "kernel", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "outL", "\n", "overall_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "overall_flops", "+=", "out_channels", "*", "active_elements_count", "\n", "", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.conv2d_flops_counter_hook": [[111, 127], ["inputs[].size"], "function", ["None"], ["", "def", "conv2d_flops_counter_hook", "(", "conv_module", ",", "inputs", ",", "output", ")", ":", "\n", "  ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "conv_per_position_flops", "=", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "output_height", "*", "output_width", "\n", "overall_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "overall_flops", "+=", "out_channels", "*", "active_elements_count", "\n", "", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.batch_counter_hook": [[129, 134], ["None"], "function", ["None"], ["", "def", "batch_counter_hook", "(", "module", ",", "inputs", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "  ", "inputs", "=", "inputs", "[", "0", "]", "\n", "batch_size", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.add_batch_counter_hook_function": [[136, 140], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "  ", "if", "not", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "    ", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.add_flops_counter_variable_or_reset": [[142, 148], ["isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "hasattr"], "function", ["None"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "  ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", "or", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "\n", "    ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.add_flops_counter_hook_function": [[150, 171], ["isinstance", "isinstance", "hasattr", "module.register_forward_hook", "isinstance", "hasattr", "module.register_forward_hook", "hasattr", "module.register_forward_hook", "isinstance", "isinstance", "hasattr", "hasattr", "module.register_forward_hook", "hasattr", "module.register_forward_hook"], "function", ["None"], ["", "", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "  ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv2d_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv1d_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "fc_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "pool_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "# self-defined module", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "self_calculate_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.remove_hook_function": [[173, 182], ["hasattr", "hasattr", "getattr", "getattr.remove", "delattr"], "function", ["None"], ["", "", "", "def", "remove_hook_function", "(", "module", ")", ":", "\n", "  ", "hookers", "=", "[", "'__batch_counter_handle__'", ",", "'__flops_handle__'", "]", "\n", "for", "hooker", "in", "hookers", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "hooker", ")", ":", "\n", "      ", "handle", "=", "getattr", "(", "module", ",", "hooker", ")", "\n", "handle", ".", "remove", "(", ")", "\n", "", "", "keys", "=", "[", "'__flops__'", ",", "'__batch_counter__'", ",", "'__flops__'", "]", "+", "hookers", "\n", "for", "ckey", "in", "keys", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "ckey", ")", ":", "delattr", "(", "module", ",", "ckey", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.basic_args.obtain_basic_args": [[7, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_basic_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_source'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "help", "=", "'The source of model defination.'", ")", "\n", "parser", ".", "add_argument", "(", "'--extra_model_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'The extra model ckp file (help to indicate the searched architecture).'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.random_baseline.obtain_RandomSearch_args": [[5, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_RandomSearch_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--expect_flop'", ",", "type", "=", "float", ",", "help", "=", "'The expected flop keep ratio.'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch_nums'", ",", "type", "=", "int", ",", "help", "=", "'The maximum number of running random arch generating..'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_mode'", ",", "type", "=", "str", ",", "choices", "=", "[", "'random'", ",", "'fix'", "]", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "#assert args.flop_ratio_min < args.flop_ratio_max, 'flop-ratio {:} vs {:}'.format(args.flop_ratio_min, args.flop_ratio_max)", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.search_args.obtain_search_args": [[5, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_search_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--split_path'", ",", "type", "=", "str", ",", "help", "=", "'The split file path.'", ")", "\n", "#parser.add_argument('--arch_para_pure',   type=int,                   help='The architecture-parameter pure or not.')", "\n", "parser", ".", "add_argument", "(", "'--gumbel_tau_max'", ",", "type", "=", "float", ",", "help", "=", "'The maximum tau for Gumbel.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gumbel_tau_min'", ",", "type", "=", "float", ",", "help", "=", "'The minimum tau for Gumbel.'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_ratio'", ",", "type", "=", "float", ",", "help", "=", "'The expected FLOP ratio.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_weight'", ",", "type", "=", "float", ",", "help", "=", "'The loss weight for FLOP.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_tolerant'", ",", "type", "=", "float", ",", "help", "=", "'The tolerant range for FLOP.'", ")", "\n", "# ablation studies", "\n", "parser", ".", "add_argument", "(", "'--ablation_num_select'", ",", "type", "=", "int", ",", "help", "=", "'The number of randomly selected channels.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "assert", "args", ".", "gumbel_tau_max", "is", "not", "None", "and", "args", ".", "gumbel_tau_min", "is", "not", "None", "\n", "assert", "args", ".", "FLOP_tolerant", "is", "not", "None", "and", "args", ".", "FLOP_tolerant", ">", "0", ",", "'invalid FLOP_tolerant : {:}'", ".", "format", "(", "FLOP_tolerant", ")", "\n", "#assert args.arch_para_pure is not None, 'arch_para_pure is not None: {:}'.format(args.arch_para_pure)", "\n", "#args.arch_para_pure = bool(args.arch_para_pure)", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.cls_kd_args.obtain_cls_kd_args": [[4, 24], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_cls_kd_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_checkpoint'", ",", "type", "=", "str", ",", "help", "=", "'The teacher checkpoint in knowledge distillation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_alpha'", ",", "type", "=", "float", ",", "help", "=", "'The alpha parameter in knowledge distillation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_temperature'", ",", "type", "=", "float", ",", "help", "=", "'The temperature parameter in knowledge distillation.'", ")", "\n", "#parser.add_argument('--KD_feature',       type=float,                 help='Knowledge distillation at the feature level.')", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.configure_utils.convert_param": [[15, 40], ["isinstance", "isinstance", "outs.append", "int", "str", "bool", "int", "float", "TypeError", "float.lower", "ValueError"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "convert_param", "(", "original_lists", ")", ":", "\n", "  ", "assert", "isinstance", "(", "original_lists", ",", "list", ")", ",", "'The type is not right : {:}'", ".", "format", "(", "original_lists", ")", "\n", "ctype", ",", "value", "=", "original_lists", "[", "0", "]", ",", "original_lists", "[", "1", "]", "\n", "assert", "ctype", "in", "support_types", ",", "'Ctype={:}, support={:}'", ".", "format", "(", "ctype", ",", "support_types", ")", "\n", "is_list", "=", "isinstance", "(", "value", ",", "list", ")", "\n", "if", "not", "is_list", ":", "value", "=", "[", "value", "]", "\n", "outs", "=", "[", "]", "\n", "for", "x", "in", "value", ":", "\n", "    ", "if", "ctype", "==", "'int'", ":", "\n", "      ", "x", "=", "int", "(", "x", ")", "\n", "", "elif", "ctype", "==", "'str'", ":", "\n", "      ", "x", "=", "str", "(", "x", ")", "\n", "", "elif", "ctype", "==", "'bool'", ":", "\n", "      ", "x", "=", "bool", "(", "int", "(", "x", ")", ")", "\n", "", "elif", "ctype", "==", "'float'", ":", "\n", "      ", "x", "=", "float", "(", "x", ")", "\n", "", "elif", "ctype", "==", "'none'", ":", "\n", "      ", "if", "x", ".", "lower", "(", ")", "!=", "'none'", ":", "\n", "        ", "raise", "ValueError", "(", "'For the none type, the value must be none instead of {:}'", ".", "format", "(", "x", ")", ")", "\n", "", "x", "=", "None", "\n", "", "else", ":", "\n", "      ", "raise", "TypeError", "(", "'Does not know this type : {:}'", ".", "format", "(", "ctype", ")", ")", "\n", "", "outs", ".", "append", "(", "x", ")", "\n", "", "if", "not", "is_list", ":", "outs", "=", "outs", "[", "0", "]", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.configure_utils.load_config": [[42, 56], ["str", "hasattr", "os.path.exists", "isinstance", "collections.namedtuple", "collections.namedtuple.", "hasattr", "logger.log", "open", "json.load", "configure_utils.convert_param", "isinstance", "logger.log", "json.load.items", "Arguments.keys"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.convert_param", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log"], ["", "def", "load_config", "(", "path", ",", "extra", ",", "logger", ")", ":", "\n", "  ", "path", "=", "str", "(", "path", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "'Can not find {:}'", ".", "format", "(", "path", ")", "\n", "# Reading data back", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "content", "=", "{", "k", ":", "convert_param", "(", "v", ")", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", "}", "\n", "assert", "extra", "is", "None", "or", "isinstance", "(", "extra", ",", "dict", ")", ",", "'invalid type of extra : {:}'", ".", "format", "(", "extra", ")", "\n", "if", "isinstance", "(", "extra", ",", "dict", ")", ":", "content", "=", "{", "**", "content", ",", "**", "extra", "}", "\n", "Arguments", "=", "namedtuple", "(", "'Configure'", ",", "' '", ".", "join", "(", "content", ".", "keys", "(", ")", ")", ")", "\n", "content", "=", "Arguments", "(", "**", "content", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'{:}'", ".", "format", "(", "content", ")", ")", "\n", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.configure_utils.configure2str": [[58, 99], ["config._asdict.items", "isinstance", "config._asdict._asdict", "isinstance", "isinstance", "isinstance", "configure_utils.configure2str.gtype"], "function", ["None"], ["", "def", "configure2str", "(", "config", ",", "xpath", "=", "None", ")", ":", "\n", "  ", "if", "not", "isinstance", "(", "config", ",", "dict", ")", ":", "\n", "    ", "config", "=", "config", ".", "_asdict", "(", ")", "\n", "", "def", "cstring", "(", "x", ")", ":", "\n", "    ", "return", "\"\\\"{:}\\\"\"", ".", "format", "(", "x", ")", "\n", "", "def", "gtype", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "x", "=", "x", "[", "0", "]", "\n", "if", "isinstance", "(", "x", ",", "str", ")", ":", "return", "'str'", "\n", "elif", "isinstance", "(", "x", ",", "bool", ")", ":", "return", "'bool'", "\n", "elif", "isinstance", "(", "x", ",", "int", ")", ":", "return", "'int'", "\n", "elif", "isinstance", "(", "x", ",", "float", ")", ":", "return", "'float'", "\n", "elif", "x", "is", "None", ":", "return", "'none'", "\n", "else", ":", "raise", "ValueError", "(", "'invalid : {:}'", ".", "format", "(", "x", ")", ")", "\n", "", "def", "cvalue", "(", "x", ",", "xtype", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "is_list", "=", "True", "\n", "else", ":", "\n", "      ", "is_list", ",", "x", "=", "False", ",", "[", "x", "]", "\n", "", "temps", "=", "[", "]", "\n", "for", "temp", "in", "x", ":", "\n", "      ", "if", "xtype", "==", "'bool'", ":", "temp", "=", "cstring", "(", "int", "(", "temp", ")", ")", "\n", "elif", "xtype", "==", "'none'", ":", "temp", "=", "cstring", "(", "'None'", ")", "\n", "else", ":", "temp", "=", "cstring", "(", "temp", ")", "\n", "temps", ".", "append", "(", "temp", ")", "\n", "", "if", "is_list", ":", "\n", "      ", "return", "\"[{:}]\"", ".", "format", "(", "', '", ".", "join", "(", "temps", ")", ")", "\n", "", "else", ":", "\n", "      ", "return", "temps", "[", "0", "]", "\n", "\n", "", "", "xstrings", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "config", ".", "items", "(", ")", ":", "\n", "    ", "xtype", "=", "gtype", "(", "value", ")", "\n", "string", "=", "'  {:20s} : [{:8s}, {:}]'", ".", "format", "(", "cstring", "(", "key", ")", ",", "cstring", "(", "xtype", ")", ",", "cvalue", "(", "value", ",", "xtype", ")", ")", "\n", "xstrings", ".", "append", "(", "string", ")", "\n", "", "Fstring", "=", "'{\\n'", "+", "',\\n'", ".", "join", "(", "xstrings", ")", "+", "'\\n}'", "\n", "if", "xpath", "is", "not", "None", ":", "\n", "    ", "parent", "=", "Path", "(", "xpath", ")", ".", "resolve", "(", ")", ".", "parent", "\n", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "if", "osp", ".", "isfile", "(", "xpath", ")", ":", "os", ".", "remove", "(", "xpath", ")", "\n", "with", "open", "(", "xpath", ",", "\"w\"", ")", "as", "text_file", ":", "\n", "      ", "text_file", ".", "write", "(", "'{:}'", ".", "format", "(", "Fstring", ")", ")", "\n", "", "", "return", "Fstring", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.configure_utils.dict2config": [[101, 107], ["isinstance", "collections.namedtuple", "collections.namedtuple.", "hasattr", "type", "logger.log", "xdict.keys"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log"], ["", "def", "dict2config", "(", "xdict", ",", "logger", ")", ":", "\n", "  ", "assert", "isinstance", "(", "xdict", ",", "dict", ")", ",", "'invalid type : {:}'", ".", "format", "(", "type", "(", "xdict", ")", ")", "\n", "Arguments", "=", "namedtuple", "(", "'Configure'", ",", "' '", ".", "join", "(", "xdict", ".", "keys", "(", ")", ")", ")", "\n", "content", "=", "Arguments", "(", "**", "xdict", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'{:}'", ".", "format", "(", "content", ")", ")", "\n", "return", "content", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.share_args.add_shared_args": [[3, 18], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "add_shared_args", "(", "parser", ")", ":", "\n", "# Data Generation", "\n", "  ", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "help", "=", "'The dataset name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "help", "=", "'The dataset name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutout_length'", ",", "type", "=", "int", ",", "help", "=", "'The cutout length, negative means not use.'", ")", "\n", "# Printing", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'print frequency (default: 200)'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq_eval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'print frequency (default: 200)'", ")", "\n", "# Checkpoints", "\n", "parser", ".", "add_argument", "(", "'--eval_frequency'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'evaluation frequency (default: 200)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ",", "help", "=", "'Folder to save checkpoints and log.'", ")", "\n", "# Acceleration", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'number of data loading workers (default: 8)'", ")", "\n", "# Random Seed", "\n", "parser", ".", "add_argument", "(", "'--rand_seed'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'manual seed'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.AvgrageMeter.__init__": [[98, 100], ["__init__.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.AvgrageMeter.reset": [[101, 105], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.AvgrageMeter.update": [[106, 110], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.NAS_config.__init__": [[115, 121], ["open", "yaml.safe_load", "open.close", "yaml.safe_load.get"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.close", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get"], ["def", "__init__", "(", "self", ",", "cfg_file", ",", "sectionName", ")", ":", "\n", "    ", "self", ".", "sectionName", "=", "sectionName", "\n", "infile", "=", "open", "(", "cfg_file", ",", "'r'", ")", "\n", "ymlcfg", "=", "yaml", ".", "safe_load", "(", "infile", ")", "\n", "infile", ".", "close", "(", ")", "\n", "self", ".", "NAS_cfg", "=", "ymlcfg", ".", "get", "(", "self", ".", "sectionName", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.create_exp_dir": [[28, 32], ["print", "os.path.exists", "os.mkdir"], "function", ["None"], ["def", "create_exp_dir", "(", "path", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.model_save": [[33, 35], ["torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.state_dict"], ["", "def", "model_save", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.model_load": [[36, 38], ["model.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.load_state_dict", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load"], ["", "def", "model_load", "(", "model", ",", "model_path", ",", "gpu", "=", "0", ")", ":", "\n", "  ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "'cuda:{}'", ".", "format", "(", "gpu", ")", ")", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.get_arch_score": [[39, 45], ["None"], "function", ["None"], ["", "def", "get_arch_score", "(", "df", ",", "arch_str", ",", "dataset", ",", "acc_type", ")", ":", "\n", "  ", "'''Gets the accuracy for given dataset and architecture from a customized pandas dataframe created from NAS201\n  which contains only accuracy informations of all 15625 architectures in NAS201. This dataframe was created to\n  reduce the RAM requirement for accessing the accuracy information from the original NAS201'''", "\n", "series", "=", "df", "[", "df", "[", "'arch'", "]", "==", "arch_str", "]", "\n", "return", "series", "[", "dataset", "+", "'-'", "+", "acc_type", "]", ".", "values", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.discretize": [[46, 81], ["torch.zeros_like", "torch.zeros_like", "len", "genotypes.PRIMITIVES.index", "genotypes.PRIMITIVES.index", "len", "genotypes.PRIMITIVES.index", "genotypes.PRIMITIVES.index", "int", "int", "int", "int"], "function", ["None"], ["", "def", "discretize", "(", "alphas", ",", "arch_genotype", ")", ":", "\n", "  ", "genotype", "=", "genotypes", ".", "PRIMITIVES", "\n", "normal_cell", "=", "arch_genotype", ".", "normal", "\n", "reduction_cell", "=", "arch_genotype", ".", "reduce", "\n", "\n", "# Discretizing the normal cell", "\n", "index", "=", "0", "\n", "offset", "=", "0", "\n", "new_normal", "=", "torch", ".", "zeros_like", "(", "alphas", "[", "0", "]", ")", "\n", "while", "index", "<", "len", "(", "normal_cell", ")", ":", "\n", "    ", "op", ",", "cell", "=", "normal_cell", "[", "index", "]", "\n", "idx", "=", "genotypes", ".", "PRIMITIVES", ".", "index", "(", "op", ")", "\n", "new_normal", "[", "int", "(", "offset", "+", "cell", ")", "]", "[", "idx", "]", "=", "1", "\n", "index", "+=", "1", "\n", "op", ",", "cell", "=", "normal_cell", "[", "index", "]", "\n", "idx", "=", "genotypes", ".", "PRIMITIVES", ".", "index", "(", "op", ")", "\n", "new_normal", "[", "int", "(", "offset", "+", "cell", ")", "]", "[", "idx", "]", "=", "1", "\n", "offset", "+=", "(", "index", "//", "2", ")", "+", "2", "\n", "index", "+=", "1", "\n", "\n", "# Discretizing the reduction cell", "\n", "", "index", "=", "0", "\n", "offset", "=", "0", "\n", "new_reduce", "=", "torch", ".", "zeros_like", "(", "alphas", "[", "1", "]", ")", "\n", "while", "index", "<", "len", "(", "reduction_cell", ")", ":", "\n", "    ", "op", ",", "cell", "=", "reduction_cell", "[", "index", "]", "\n", "idx", "=", "genotypes", ".", "PRIMITIVES", ".", "index", "(", "op", ")", "\n", "new_reduce", "[", "int", "(", "offset", "+", "cell", ")", "]", "[", "idx", "]", "=", "1", "\n", "index", "+=", "1", "\n", "op", ",", "cell", "=", "reduction_cell", "[", "index", "]", "\n", "idx", "=", "genotypes", ".", "PRIMITIVES", ".", "index", "(", "op", ")", "\n", "new_reduce", "[", "int", "(", "offset", "+", "cell", ")", "]", "[", "idx", "]", "=", "1", "\n", "offset", "+=", "(", "index", "//", "2", ")", "+", "2", "\n", "index", "+=", "1", "\n", "", "return", "[", "new_normal", ",", "new_reduce", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.compare_s1genotype": [[82, 88], ["enumerate", "int", "int"], "function", ["None"], ["", "def", "compare_s1genotype", "(", "g1", ",", "g2", ")", ":", "\n", "  ", "for", "index", ",", "node1", "in", "enumerate", "(", "g1", ")", ":", "\n", "    ", "tmp_list", "=", "g2", "[", "int", "(", "index", "/", "2", ")", "*", "2", ":", "(", "int", "(", "index", "/", "2", ")", "+", "1", ")", "*", "2", "]", "\n", "if", "node1", "not", "in", "tmp_list", ":", "\n", "      ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.search_dataframe": [[89, 96], ["df.iterrows", "__init__.compare_s1genotype", "__init__.compare_s1genotype"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.compare_s1genotype", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.compare_s1genotype"], ["", "def", "search_dataframe", "(", "df", ",", "g", ")", ":", "\n", "  ", "if", "(", "not", "df", ".", "empty", ")", ":", "\n", "    ", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "      ", "if", "compare_s1genotype", "(", "row", "[", "'genotype'", "]", ".", "normal", ",", "g", ".", "normal", ")", ":", "\n", "        ", "if", "compare_s1genotype", "(", "row", "[", "'genotype'", "]", ".", "reduce", ",", "g", ".", "reduce", ")", ":", "\n", "          ", "return", "row", "\n", "", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.get_cell_param_name": [[122, 135], ["name.split", "print", "int", "isinstance", "big_OSM.cells[].op_position[].items", "print"], "function", ["None"], ["", "", "def", "get_cell_param_name", "(", "name", ",", "big_OSM", ",", "small_OSM", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "if", "verbose", ":", "print", "(", "f'Before: {name}'", ")", "\n", "split_name", "=", "name", ".", "split", "(", "'.'", ")", "\n", "cell_number", ",", "edge_name", ",", "op_number", "=", "int", "(", "split_name", "[", "1", "]", ")", ",", "split_name", "[", "3", "]", ",", "split_name", "[", "4", "]", "\n", "if", "not", "isinstance", "(", "big_OSM", ".", "cells", "[", "cell_number", "]", ",", "ResNetBasicblock", ")", ":", "\n", "    ", "op_name", "=", "small_OSM", ".", "cells", "[", "cell_number", "]", ".", "op_position", "[", "edge_name", "]", "[", "op_number", "]", "\n", "for", "op_num", ",", "op", "in", "big_OSM", ".", "cells", "[", "cell_number", "]", ".", "op_position", "[", "edge_name", "]", ".", "items", "(", ")", ":", "\n", "      ", "if", "op", "==", "op_name", ":", "\n", "        ", "split_name", "[", "4", "]", "=", "op_num", "\n", "break", "\n", "", "", "", "res_name", "=", "'.'", ".", "join", "(", "split_name", ")", "\n", "if", "verbose", ":", "print", "(", "f'After: {res_name}'", ")", "\n", "return", "res_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.inherit_OSM_wts": [[136, 155], ["dict", "enumerate", "big_OSM.named_parameters", "small_OSM.named_parameters", "print", "param2.data.copy_", "torch.all().item", "len", "print", "__init__.get_cell_param_name", "print", "dict", "torch.all", "small_OSM.named_parameters"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.get_cell_param_name"], ["", "def", "inherit_OSM_wts", "(", "big_OSM", ",", "small_OSM", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "big_model_dict", "=", "dict", "(", "big_OSM", ".", "named_parameters", "(", ")", ")", "\n", "count", "=", "0", "\n", "for", "idx", ",", "(", "param_name2", ",", "param2", ")", "in", "enumerate", "(", "small_OSM", ".", "named_parameters", "(", ")", ")", ":", "\n", "    ", "if", "'arch'", "not", "in", "param_name2", ":", "\n", "      ", "if", "verbose", ":", "print", "(", "f'{param_name2}: {param2.shape}'", ",", "end", "=", "''", ")", "\n", "if", "'cell'", "in", "param_name2", ":", "\n", "        ", "inherit_name", "=", "get_cell_param_name", "(", "name", "=", "param_name2", ",", "big_OSM", "=", "big_OSM", ",", "\n", "small_OSM", "=", "small_OSM", ",", "verbose", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "inherit_name", "=", "param_name2", "\n", "", "param1", "=", "big_model_dict", "[", "inherit_name", "]", "\n", "assert", "param1", ".", "shape", "==", "param2", ".", "shape", ",", "\"Mismatched shape\"", "\n", "param2", ".", "data", ".", "copy_", "(", "param1", ")", "\n", "assert", "torch", ".", "all", "(", "param1", "==", "param2", ")", ".", "item", "(", ")", ",", "\"Copy failed\"", "\n", "if", "verbose", ":", "print", "(", "f'->{inherit_name}: {param1.shape}: {param1.shape == param2.shape}'", ",", "end", "=", "'\\n'", ")", "\n", "if", "param1", ".", "shape", "==", "param2", ".", "shape", ":", "count", "+=", "1", "\n", "", "", "assert", "count", "==", "len", "(", "dict", "(", "small_OSM", ".", "named_parameters", "(", ")", ")", ")", "-", "1", ",", "\"Number of parameters copied failed\"", "\n", "if", "verbose", ":", "print", "(", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.__init__.shrink_space": [[156, 171], ["torch.topk", "torch.zeros_like", "enumerate", "print", "print", "edge2index.items", "print", "print", "str", "col.item", "str", "col.item"], "function", ["None"], ["", "def", "shrink_space", "(", "arch_param", ",", "topk", ",", "arch_flag", ",", "edge2index", ",", "op_dict", ",", "op_position", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "arch_values", ",", "indices", "=", "torch", ".", "topk", "(", "arch_param", ",", "topk", ")", "\n", "new_arch_flag", "=", "torch", ".", "zeros_like", "(", "arch_flag", ")", "\n", "edge2index2", "=", "{", "value", ":", "key", "for", "key", ",", "value", "in", "edge2index", ".", "items", "(", ")", "}", "\n", "if", "verbose", ":", "print", "(", "f'Before::\\narch flags: {arch_flag}\\nindices: {indices}'", ")", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "indices", ")", ":", "\n", "    ", "edge", "=", "edge2index2", "[", "idx", "]", "\n", "for", "col", "in", "row", ":", "\n", "      ", "op_name", "=", "op_position", "[", "edge", "]", "[", "str", "(", "col", ".", "item", "(", ")", ")", "]", "\n", "op_index", "=", "op_dict", "[", "op_name", "]", "\n", "new_arch_flag", "[", "idx", "]", "[", "op_index", "]", "=", "True", "\n", "if", "verbose", ":", "print", "(", "f'({op_position[edge][str(col.item())]}, {op_index})'", ",", "end", "=", "':'", ")", "\n", "", "if", "verbose", ":", "print", "(", ")", "\n", "", "if", "verbose", ":", "print", "(", "f'After::\\narch flags: {new_arch_flag}'", ")", "\n", "return", "new_arch_flag", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.cls_init_args.obtain_cls_init_args": [[4, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_cls_init_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_checkpoint'", ",", "type", "=", "str", ",", "help", "=", "'The checkpoint path to the initial model.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.attention_args.obtain_attention_args": [[4, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_attention_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--att_channel'", ",", "type", "=", "int", ",", "help", "=", "'.'", ")", "\n", "parser", ".", "add_argument", "(", "'--att_spatial'", ",", "type", "=", "str", ",", "help", "=", "'.'", ")", "\n", "parser", ".", "add_argument", "(", "'--att_active'", ",", "type", "=", "str", ",", "help", "=", "'.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.pruning_args.obtain_pruning_args": [[4, 27], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_pruning_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--keep_ratio'", ",", "type", "=", "float", ",", "help", "=", "'The left channel ratio compared to the original network.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_version'", ",", "type", "=", "str", ",", "help", "=", "'The network version.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_alpha'", ",", "type", "=", "float", ",", "help", "=", "'The alpha parameter in knowledge distillation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_temperature'", ",", "type", "=", "float", ",", "help", "=", "'The temperature parameter in knowledge distillation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--Regular_W_feat'", ",", "type", "=", "float", ",", "help", "=", "'The .'", ")", "\n", "parser", ".", "add_argument", "(", "'--Regular_W_conv'", ",", "type", "=", "float", ",", "help", "=", "'The .'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "assert", "args", ".", "keep_ratio", ">", "0", "and", "args", ".", "keep_ratio", "<=", "1", ",", "'invalid keep ratio : {:}'", ".", "format", "(", "args", ".", "keep_ratio", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.evaluation_utils.obtain_accuracy": [[3, 17], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "obtain_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "    ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.DownsampledImageNet.ImageNet16.__init__": [[53, 86], ["enumerate", "numpy.vstack().reshape", "DownsampledImageNet.ImageNet16.data.transpose", "DownsampledImageNet.ImageNet16._check_integrity", "RuntimeError", "os.path.join", "zip", "open", "DownsampledImageNet.ImageNet16.data.append", "DownsampledImageNet.ImageNet16.targets.extend", "numpy.vstack", "isinstance", "pickle.load", "pickle.load", "new_data.append", "new_targets.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.DownsampledImageNet.ImageNet16._check_integrity", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "__init__", "(", "self", ",", "root", ",", "train", ",", "transform", ",", "use_num_of_class_only", "=", "None", ")", ":", "\n", "    ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "train", "=", "train", "# training set or valid set", "\n", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", ")", "\n", "\n", "if", "self", ".", "train", ":", "downloaded_list", "=", "self", ".", "train_list", "\n", "else", ":", "downloaded_list", "=", "self", ".", "valid_list", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "i", ",", "(", "file_name", ",", "checksum", ")", "in", "enumerate", "(", "downloaded_list", ")", ":", "\n", "      ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "file_name", ")", "\n", "#print ('Load {:}/{:02d}-th : {:}'.format(i, len(downloaded_list), file_path))", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "          ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "          ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "16", ",", "16", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "if", "use_num_of_class_only", "is", "not", "None", ":", "\n", "      ", "assert", "isinstance", "(", "use_num_of_class_only", ",", "int", ")", "and", "use_num_of_class_only", ">", "0", "and", "use_num_of_class_only", "<", "1000", ",", "'invalid use_num_of_class_only : {:}'", ".", "format", "(", "use_num_of_class_only", ")", "\n", "new_data", ",", "new_targets", "=", "[", "]", ",", "[", "]", "\n", "for", "I", ",", "L", "in", "zip", "(", "self", ".", "data", ",", "self", ".", "targets", ")", ":", "\n", "        ", "if", "1", "<=", "L", "<=", "use_num_of_class_only", ":", "\n", "          ", "new_data", ".", "append", "(", "I", ")", "\n", "new_targets", ".", "append", "(", "L", ")", "\n", "", "", "self", ".", "data", "=", "new_data", "\n", "self", ".", "targets", "=", "new_targets", "\n", "#    self.mean.append(entry['mean'])", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.DownsampledImageNet.ImageNet16.__getitem__": [[95, 104], ["PIL.Image.fromarray", "DownsampledImageNet.ImageNet16.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "-", "1", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "      ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.DownsampledImageNet.ImageNet16.__len__": [[105, 107], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.DownsampledImageNet.ImageNet16._check_integrity": [[108, 116], ["os.path.join", "DownsampledImageNet.check_integrity"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.DownsampledImageNet.check_integrity"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "    ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "valid_list", ")", ":", "\n", "      ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "        ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.DownsampledImageNet.calculate_md5": [[14, 20], ["hashlib.md5", "hashlib.md5.hexdigest", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "def", "calculate_md5", "(", "fpath", ",", "chunk_size", "=", "1024", "*", "1024", ")", ":", "\n", "  ", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "chunk_size", ")", ",", "b''", ")", ":", "\n", "      ", "md5", ".", "update", "(", "chunk", ")", "\n", "", "", "return", "md5", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.DownsampledImageNet.check_md5": [[22, 24], ["DownsampledImageNet.calculate_md5"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.DownsampledImageNet.calculate_md5"], ["", "def", "check_md5", "(", "fpath", ",", "md5", ",", "**", "kwargs", ")", ":", "\n", "  ", "return", "md5", "==", "calculate_md5", "(", "fpath", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.DownsampledImageNet.check_integrity": [[26, 30], ["os.path.isfile", "DownsampledImageNet.check_md5"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.DownsampledImageNet.check_md5"], ["", "def", "check_integrity", "(", "fpath", ",", "md5", "=", "None", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "return", "False", "\n", "if", "md5", "is", "None", ":", "return", "True", "\n", "else", ":", "return", "check_md5", "(", "fpath", ",", "md5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.SearchDatasetWrap.SearchDataset.__init__": [[10, 28], ["isinstance", "len", "train_split.copy", "valid_split.copy", "train_split.copy", "valid_split.copy", "len", "len", "set().intersection", "set", "len", "set"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy"], ["  ", "def", "__init__", "(", "self", ",", "name", ",", "data", ",", "train_split", ",", "valid_split", ",", "check", "=", "True", ")", ":", "\n", "    ", "self", ".", "datasetname", "=", "name", "\n", "if", "isinstance", "(", "data", ",", "(", "list", ",", "tuple", ")", ")", ":", "# new type of SearchDataset", "\n", "      ", "assert", "len", "(", "data", ")", "==", "2", ",", "'invalid length: {:}'", ".", "format", "(", "len", "(", "data", ")", ")", "\n", "self", ".", "train_data", "=", "data", "[", "0", "]", "\n", "self", ".", "valid_data", "=", "data", "[", "1", "]", "\n", "self", ".", "train_split", "=", "train_split", ".", "copy", "(", ")", "\n", "self", ".", "valid_split", "=", "valid_split", ".", "copy", "(", ")", "\n", "self", ".", "mode_str", "=", "'V2'", "# new mode ", "\n", "", "else", ":", "\n", "      ", "self", ".", "mode_str", "=", "'V1'", "# old mode ", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "train_split", "=", "train_split", ".", "copy", "(", ")", "\n", "self", ".", "valid_split", "=", "valid_split", ".", "copy", "(", ")", "\n", "if", "check", ":", "\n", "        ", "intersection", "=", "set", "(", "train_split", ")", ".", "intersection", "(", "set", "(", "valid_split", ")", ")", "\n", "assert", "len", "(", "intersection", ")", "==", "0", ",", "'the splitted train and validation sets should have no intersection'", "\n", "", "", "self", ".", "length", "=", "len", "(", "self", ".", "train_split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.SearchDatasetWrap.SearchDataset.__repr__": [[29, 31], ["len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(name={datasetname}, train={tr_L}, valid={val_L}, version={ver})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "datasetname", "=", "self", ".", "datasetname", ",", "tr_L", "=", "len", "(", "self", ".", "train_split", ")", ",", "val_L", "=", "len", "(", "self", ".", "valid_split", ")", ",", "ver", "=", "self", ".", "mode_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.SearchDatasetWrap.SearchDataset.__len__": [[32, 34], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.SearchDatasetWrap.SearchDataset.__getitem__": [[35, 47], ["random.choice", "ValueError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "assert", "index", ">=", "0", "and", "index", "<", "self", ".", "length", ",", "'invalid index = {:}'", ".", "format", "(", "index", ")", "\n", "train_index", "=", "self", ".", "train_split", "[", "index", "]", "\n", "valid_index", "=", "random", ".", "choice", "(", "self", ".", "valid_split", ")", "\n", "if", "self", ".", "mode_str", "==", "'V1'", ":", "\n", "      ", "train_image", ",", "train_label", "=", "self", ".", "data", "[", "train_index", "]", "\n", "valid_image", ",", "valid_label", "=", "self", ".", "data", "[", "valid_index", "]", "\n", "", "elif", "self", ".", "mode_str", "==", "'V2'", ":", "\n", "      ", "train_image", ",", "train_label", "=", "self", ".", "train_data", "[", "train_index", "]", "\n", "valid_image", ",", "valid_label", "=", "self", ".", "valid_data", "[", "valid_index", "]", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "self", ".", "mode_str", ")", ")", "\n", "return", "train_image", ",", "train_label", ",", "valid_image", ",", "valid_label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.get_dataset_with_transform.CUTOUT.__init__": [[29, 31], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "    ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.get_dataset_with_transform.CUTOUT.__repr__": [[32, 34], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(length={length})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.get_dataset_with_transform.CUTOUT.__call__": [[35, 51], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.get_dataset_with_transform.Lighting.__init__": [[64, 72], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "alphastd", ",", "\n", "eigval", "=", "imagenet_pca", "[", "'eigval'", "]", ",", "\n", "eigvec", "=", "imagenet_pca", "[", "'eigvec'", "]", ")", ":", "\n", "    ", "self", ".", "alphastd", "=", "alphastd", "\n", "assert", "eigval", ".", "shape", "==", "(", "3", ",", ")", "\n", "assert", "eigvec", ".", "shape", "==", "(", "3", ",", "3", ")", "\n", "self", ".", "eigval", "=", "eigval", "\n", "self", ".", "eigvec", "=", "eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.get_dataset_with_transform.Lighting.__call__": [[73, 88], ["rnd.astype.astype.astype", "v.reshape.reshape.reshape", "numpy.dot().reshape", "numpy.add", "PIL.Image.fromarray", "numpy.random.randn", "numpy.asarray", "numpy.clip", "numpy.clip.astype", "numpy.dot"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "    ", "if", "self", ".", "alphastd", "==", "0.", ":", "\n", "      ", "return", "img", "\n", "", "rnd", "=", "np", ".", "random", ".", "randn", "(", "3", ")", "*", "self", ".", "alphastd", "\n", "rnd", "=", "rnd", ".", "astype", "(", "'float32'", ")", "\n", "v", "=", "rnd", "\n", "old_dtype", "=", "np", ".", "asarray", "(", "img", ")", ".", "dtype", "\n", "v", "=", "v", "*", "self", ".", "eigval", "\n", "v", "=", "v", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inc", "=", "np", ".", "dot", "(", "self", ".", "eigvec", ",", "v", ")", ".", "reshape", "(", "(", "3", ",", ")", ")", "\n", "img", "=", "np", ".", "add", "(", "img", ",", "inc", ")", "\n", "if", "old_dtype", "==", "np", ".", "uint8", ":", "\n", "      ", "img", "=", "np", ".", "clip", "(", "img", ",", "0", ",", "255", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "old_dtype", ")", ",", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.get_dataset_with_transform.Lighting.__repr__": [[89, 91], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.get_dataset_with_transform.get_datasets": [[93, 188], ["torchvision.Compose", "torchvision.Compose", "name.startswith", "torchvision.CIFAR10", "torchvision.CIFAR10", "name.startswith", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "torchvision.CIFAR100", "torchvision.CIFAR100", "name.startswith", "name.startswith", "get_dataset_with_transform.CUTOUT", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "name.startswith", "len", "len", "torchvision.ImageFolder", "torchvision.ImageFolder", "TypeError", "get_dataset_with_transform.CUTOUT", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "xlists.append", "xlists.append", "xlists.append", "torchvision.Compose", "torchvision.Compose", "TypeError", "len", "len", "os.join", "os.join", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "get_dataset_with_transform.CUTOUT", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "xlists.append", "xlists.append", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "torchvision.RandomResizedCrop", "torchvision.ColorJitter", "get_dataset_with_transform.Lighting", "ValueError", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "torchvision.RandomResizedCrop", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "TypeError", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "get_datasets", "(", "name", ",", "root", ",", "cutout", ")", ":", "\n", "  ", "'''\n    name: Name of the dataset: ['cifar10', 'cifar100', 'ImageNet16-120']\n    root: Root directory of the dataset\n    cutout: >0 means apply cutout regularization with cutout refering to the cutout length\n            else do not apply cutout regularization\n  '''", "\n", "if", "name", "==", "'cifar10'", ":", "\n", "    ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", "\n", "", "elif", "name", "==", "'cifar100'", ":", "\n", "    ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "129.3", ",", "124.1", ",", "112.4", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "68.2", ",", "65.4", ",", "70.4", "]", "]", "\n", "", "elif", "name", ".", "startswith", "(", "'imagenet-1k'", ")", ":", "\n", "    ", "mean", ",", "std", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "elif", "name", ".", "startswith", "(", "'ImageNet16'", ")", ":", "\n", "    ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "122.68", ",", "116.66", ",", "104.01", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.22", ",", "61.26", ",", "65.09", "]", "]", "\n", "", "else", ":", "\n", "    ", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# Data Argumentation", "\n", "", "if", "name", "==", "'cifar10'", "or", "name", "==", "'cifar100'", ":", "\n", "    ", "lists", "=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", "\n", "if", "cutout", ">", "0", ":", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'ImageNet16'", ")", ":", "\n", "    ", "lists", "=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "16", ",", "padding", "=", "2", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", "\n", "if", "cutout", ">", "0", ":", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "16", ",", "16", ")", "\n", "", "elif", "name", "==", "'tiered'", ":", "\n", "    ", "lists", "=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "80", ",", "padding", "=", "4", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", "\n", "if", "cutout", ">", "0", ":", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "CenterCrop", "(", "80", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'imagenet-1k'", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "name", "==", "'imagenet-1k'", ":", "\n", "      ", "xlists", "=", "[", "transforms", ".", "RandomResizedCrop", "(", "224", ")", "]", "\n", "xlists", ".", "append", "(", "\n", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "0.4", ",", "\n", "contrast", "=", "0.4", ",", "\n", "saturation", "=", "0.4", ",", "\n", "hue", "=", "0.2", ")", ")", "\n", "xlists", ".", "append", "(", "Lighting", "(", "0.1", ")", ")", "\n", "", "elif", "name", "==", "'imagenet-1k-s'", ":", "\n", "      ", "xlists", "=", "[", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", "]", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid name : {:}'", ".", "format", "(", "name", ")", ")", "\n", "xlists", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ")", "\n", "xlists", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "xlists", ".", "append", "(", "normalize", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "xlists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "256", ")", ",", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "", "else", ":", "\n", "    ", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "if", "name", "==", "'cifar10'", ":", "\n", "    ", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "dset", ".", "CIFAR10", "(", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "50000", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "elif", "name", "==", "'cifar100'", ":", "\n", "    ", "train_data", "=", "dset", ".", "CIFAR100", "(", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "dset", ".", "CIFAR100", "(", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "50000", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "elif", "name", ".", "startswith", "(", "'imagenet-1k'", ")", ":", "\n", "    ", "train_data", "=", "dset", ".", "ImageFolder", "(", "osp", ".", "join", "(", "root", ",", "'train'", ")", ",", "train_transform", ")", "\n", "test_data", "=", "dset", ".", "ImageFolder", "(", "osp", ".", "join", "(", "root", ",", "'val'", ")", ",", "test_transform", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "1281167", "and", "len", "(", "test_data", ")", "==", "50000", ",", "'invalid number of images : {:} & {:} vs {:} & {:}'", ".", "format", "(", "len", "(", "train_data", ")", ",", "len", "(", "test_data", ")", ",", "1281167", ",", "50000", ")", "\n", "", "elif", "name", "==", "'ImageNet16'", ":", "\n", "    ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "1281167", "and", "len", "(", "test_data", ")", "==", "50000", "\n", "", "elif", "name", "==", "'ImageNet16-120'", ":", "\n", "    ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "120", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "120", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "151700", "and", "len", "(", "test_data", ")", "==", "6000", "\n", "", "elif", "name", "==", "'ImageNet16-150'", ":", "\n", "    ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "150", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "150", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "190272", "and", "len", "(", "test_data", ")", "==", "7500", "\n", "", "elif", "name", "==", "'ImageNet16-200'", ":", "\n", "    ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "200", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "200", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "254775", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "else", ":", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "class_num", "=", "Dataset2Class", "[", "name", "]", "\n", "return", "train_data", ",", "test_data", ",", "xshape", ",", "class_num", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.get_dataset_with_transform.get_nas_search_loaders": [[190, 238], ["isinstance", "config_utils.load_config", "copy.deepcopy", "hasattr", "copy.deepcopy", "SearchDatasetWrap.SearchDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "config_utils.load_config", "copy.deepcopy", "SearchDatasetWrap.SearchDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "list", "config_utils.load_config", "copy.deepcopy", "SearchDatasetWrap.SearchDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ValueError", "range", "torch.utils.data.sampler.SubsetRandomSampler", "list", "len", "range", "torch.utils.data.sampler.SubsetRandomSampler", "len"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.load_config"], ["", "def", "get_nas_search_loaders", "(", "train_data", ",", "valid_data", ",", "dataset", ",", "config_root", ",", "batch_size", ",", "workers", ")", ":", "\n", "  ", "'''\n    train_data, valid_data: output from get_datasets()\n    dataset: ['cifar10', 'cifar100', 'ImageNet16-120']\n    config_root: directory of configuration files\n    batch_size: batch_size chosen\n    workers: # workers chosen\n\n    Returns search_loader, train_loader, valid_loader\n  '''", "\n", "if", "isinstance", "(", "batch_size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "    ", "batch", ",", "test_batch", "=", "batch_size", "\n", "", "else", ":", "\n", "    ", "batch", ",", "test_batch", "=", "batch_size", ",", "batch_size", "\n", "", "if", "dataset", "==", "'cifar10'", ":", "\n", "#split_Fpath = 'configs/nas-benchmark/cifar-split.txt'", "\n", "    ", "cifar_split", "=", "load_config", "(", "'{:}/cifar-split.txt'", ".", "format", "(", "config_root", ")", ",", "None", ",", "None", ")", "\n", "train_split", ",", "valid_split", "=", "cifar_split", ".", "train", ",", "cifar_split", ".", "valid", "# search over the proposed training and validation set", "\n", "#logger.log('Load split file from {:}'.format(split_Fpath))      # they are two disjoint groups in the original CIFAR-10 training set", "\n", "# To split data", "\n", "xvalid_data", "=", "deepcopy", "(", "train_data", ")", "\n", "if", "hasattr", "(", "xvalid_data", ",", "'transforms'", ")", ":", "# to avoid a print issue", "\n", "      ", "xvalid_data", ".", "transforms", "=", "valid_data", ".", "transform", "\n", "", "xvalid_data", ".", "transform", "=", "deepcopy", "(", "valid_data", ".", "transform", ")", "\n", "search_data", "=", "SearchDataset", "(", "dataset", ",", "train_data", ",", "train_split", ",", "valid_split", ")", "\n", "# data loader", "\n", "search_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "search_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_split", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "xvalid_data", ",", "batch_size", "=", "test_batch", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "valid_split", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "    ", "cifar100_test_split", "=", "load_config", "(", "'{:}/cifar100-test-split.txt'", ".", "format", "(", "config_root", ")", ",", "None", ",", "None", ")", "\n", "search_train_data", "=", "train_data", "\n", "search_valid_data", "=", "deepcopy", "(", "valid_data", ")", ";", "search_valid_data", ".", "transform", "=", "train_data", ".", "transform", "\n", "search_data", "=", "SearchDataset", "(", "dataset", ",", "[", "search_train_data", ",", "search_valid_data", "]", ",", "list", "(", "range", "(", "len", "(", "search_train_data", ")", ")", ")", ",", "cifar100_test_split", ".", "xvalid", ")", "\n", "search_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "search_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valid_data", ",", "batch_size", "=", "test_batch", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar100_test_split", ".", "xvalid", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "dataset", "==", "'ImageNet16-120'", ":", "\n", "    ", "imagenet_test_split", "=", "load_config", "(", "'{:}/imagenet-16-120-test-split.txt'", ".", "format", "(", "config_root", ")", ",", "None", ",", "None", ")", "\n", "search_train_data", "=", "train_data", "\n", "search_valid_data", "=", "deepcopy", "(", "valid_data", ")", ";", "search_valid_data", ".", "transform", "=", "train_data", ".", "transform", "\n", "search_data", "=", "SearchDataset", "(", "dataset", ",", "[", "search_train_data", ",", "search_valid_data", "]", ",", "list", "(", "range", "(", "len", "(", "search_train_data", ")", ")", ")", ",", "imagenet_test_split", ".", "xvalid", ")", "\n", "search_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "search_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valid_data", ",", "batch_size", "=", "test_batch", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "imagenet_test_split", ".", "xvalid", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid dataset : {:}'", ".", "format", "(", "dataset", ")", ")", "\n", "", "return", "search_loader", ",", "train_loader", ",", "valid_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.test_utils.test_imagenet_data": [[7, 21], ["len", "range", "print", "os.path.split", "os.path.split", "image_name.find"], "function", ["None"], ["def", "test_imagenet_data", "(", "imagenet", ")", ":", "\n", "  ", "total_length", "=", "len", "(", "imagenet", ")", "\n", "assert", "total_length", "==", "1281166", "or", "total_length", "==", "50000", ",", "'The length of ImageNet is wrong : {}'", ".", "format", "(", "total_length", ")", "\n", "map_id", "=", "{", "}", "\n", "for", "index", "in", "range", "(", "total_length", ")", ":", "\n", "    ", "path", ",", "target", "=", "imagenet", ".", "imgs", "[", "index", "]", "\n", "folder", ",", "image_name", "=", "os", ".", "path", ".", "split", "(", "path", ")", "\n", "_", ",", "folder", "=", "os", ".", "path", ".", "split", "(", "folder", ")", "\n", "if", "folder", "not", "in", "map_id", ":", "\n", "      ", "map_id", "[", "folder", "]", "=", "target", "\n", "", "else", ":", "\n", "      ", "assert", "map_id", "[", "folder", "]", "==", "target", ",", "'Class : {} is not {}'", ".", "format", "(", "folder", ",", "target", ")", "\n", "", "assert", "image_name", ".", "find", "(", "folder", ")", "==", "0", ",", "'{} is wrong.'", ".", "format", "(", "path", ")", "\n", "", "print", "(", "'Check ImageNet Dataset OK'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.__init__": [[24, 46], ["LandmarkDataset.LandmarkDataset.reset", "print", "warnings.simplefilter", "warnings.warn", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load"], ["  ", "def", "__init__", "(", "self", ",", "transform", ",", "sigma", ",", "downsample", ",", "heatmap_type", ",", "shape", ",", "use_gray", ",", "mean_file", ",", "data_indicator", ",", "cache_images", "=", "None", ")", ":", "\n", "\n", "    ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "heatmap_type", "=", "heatmap_type", "\n", "self", ".", "dataset_name", "=", "data_indicator", "\n", "self", ".", "shape", "=", "shape", "# [H,W]", "\n", "self", ".", "use_gray", "=", "use_gray", "\n", "assert", "transform", "is", "not", "None", ",", "'transform : {:}'", ".", "format", "(", "transform", ")", "\n", "self", ".", "mean_file", "=", "mean_file", "\n", "if", "mean_file", "is", "None", ":", "\n", "      ", "self", ".", "mean_data", "=", "None", "\n", "warnings", ".", "warn", "(", "'LandmarkDataset initialized with mean_data = None'", ")", "\n", "", "else", ":", "\n", "      ", "assert", "osp", ".", "isfile", "(", "mean_file", ")", ",", "'{:} is not a file.'", ".", "format", "(", "mean_file", ")", "\n", "self", ".", "mean_data", "=", "torch", ".", "load", "(", "mean_file", ")", "\n", "", "self", ".", "reset", "(", ")", "\n", "self", ".", "cutout", "=", "None", "\n", "self", ".", "cache_images", "=", "cache_images", "\n", "print", "(", "'The general dataset initialization done : {:}'", ".", "format", "(", "self", ")", ")", "\n", "warnings", ".", "simplefilter", "(", "'once'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.__repr__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(point-num={NUM_PTS}, shape={shape}, sigma={sigma}, heatmap_type={heatmap_type}, length={length}, cutout={cutout}, dataset={dataset_name}, mean={mean_file})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.set_cutout": [[52, 56], ["augmentation_utils.CutOut", "int"], "methods", ["None"], ["", "def", "set_cutout", "(", "self", ",", "length", ")", ":", "\n", "    ", "if", "length", "is", "not", "None", "and", "length", ">=", "1", ":", "\n", "      ", "self", ".", "cutout", "=", "CutOut", "(", "int", "(", "length", ")", ")", "\n", "", "else", ":", "self", ".", "cutout", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.reset": [[58, 71], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "LandmarkDataset.LandmarkDataset.mean_data[].copy"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy"], ["", "def", "reset", "(", "self", ",", "num_pts", "=", "-", "1", ",", "boxid", "=", "'default'", ",", "only_pts", "=", "False", ")", ":", "\n", "    ", "self", ".", "NUM_PTS", "=", "num_pts", "\n", "if", "only_pts", ":", "return", "\n", "self", ".", "length", "=", "0", "\n", "self", ".", "datas", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "NormDistances", "=", "[", "]", "\n", "self", ".", "BOXID", "=", "boxid", "\n", "if", "self", ".", "mean_data", "is", "None", ":", "\n", "      ", "self", ".", "mean_face", "=", "None", "\n", "", "else", ":", "\n", "      ", "self", ".", "mean_face", "=", "torch", ".", "Tensor", "(", "self", ".", "mean_data", "[", "boxid", "]", ".", "copy", "(", ")", ".", "T", ")", "\n", "assert", "(", "self", ".", "mean_face", ">=", "-", "1", ")", ".", "all", "(", ")", "and", "(", "self", ".", "mean_face", "<=", "1", ")", ".", "all", "(", ")", ",", "'mean-{:}-face : {:}'", ".", "format", "(", "boxid", ",", "self", ".", "mean_face", ")", "\n", "#assert self.dataset_name is not None, 'The dataset name is None'", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.__len__": [[74, 77], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "assert", "len", "(", "self", ".", "datas", ")", "==", "self", ".", "length", ",", "'The length is not correct : {}'", ".", "format", "(", "self", ".", "length", ")", "\n", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append": [[79, 84], ["os.path.isfile", "LandmarkDataset.LandmarkDataset.datas.append", "LandmarkDataset.LandmarkDataset.labels.append", "LandmarkDataset.LandmarkDataset.NormDistances.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "append", "(", "self", ",", "data", ",", "label", ",", "distance", ")", ":", "\n", "    ", "assert", "osp", ".", "isfile", "(", "data", ")", ",", "'The image path is not a file : {:}'", ".", "format", "(", "data", ")", "\n", "self", ".", "datas", ".", "append", "(", "data", ")", ";", "self", ".", "labels", ".", "append", "(", "label", ")", "\n", "self", ".", "NormDistances", ".", "append", "(", "distance", ")", "\n", "self", ".", "length", "=", "self", ".", "length", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.load_list": [[86, 116], ["isinstance", "enumerate", "print", "tqdm.tqdm.tqdm", "print", "LandmarkDataset.LandmarkDataset.reset", "print", "torch.load", "torch.load", "torch.load", "torch.load", "isinstance", "range", "landmark_utils.PointMeta2V", "LandmarkDataset.LandmarkDataset.append", "len", "len", "len", "len", "len", "len", "isinstance", "len", "len", "len", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "load_list", "(", "self", ",", "file_lists", ",", "num_pts", ",", "boxindicator", ",", "normalizeL", ",", "reset", ")", ":", "\n", "    ", "if", "reset", ":", "self", ".", "reset", "(", "num_pts", ",", "boxindicator", ")", "\n", "else", ":", "assert", "self", ".", "NUM_PTS", "==", "num_pts", "and", "self", ".", "BOXID", "==", "boxindicator", ",", "'The number of point is inconsistance : {:} vs {:}'", ".", "format", "(", "self", ".", "NUM_PTS", ",", "num_pts", ")", "\n", "if", "isinstance", "(", "file_lists", ",", "str", ")", ":", "file_lists", "=", "[", "file_lists", "]", "\n", "samples", "=", "[", "]", "\n", "for", "idx", ",", "file_path", "in", "enumerate", "(", "file_lists", ")", ":", "\n", "      ", "print", "(", "':::: load list {:}/{:} : {:}'", ".", "format", "(", "idx", ",", "len", "(", "file_lists", ")", ",", "file_path", ")", ")", "\n", "xdata", "=", "torch", ".", "load", "(", "file_path", ")", "\n", "if", "isinstance", "(", "xdata", ",", "list", ")", ":", "data", "=", "xdata", "# image or video dataset list", "\n", "elif", "isinstance", "(", "xdata", ",", "dict", ")", ":", "data", "=", "xdata", "[", "'datas'", "]", "# multi-view dataset list", "\n", "else", ":", "raise", "ValueError", "(", "'Invalid Type Error : {:}'", ".", "format", "(", "type", "(", "xdata", ")", ")", ")", "\n", "samples", "=", "samples", "+", "data", "\n", "# samples is a dict, where the key is the image-path and the value is the annotation", "\n", "# each annotation is a dict, contains 'points' (3,num_pts), and various box", "\n", "", "print", "(", "'GeneralDataset-V2 : {:} samples'", ".", "format", "(", "len", "(", "samples", ")", ")", ")", "\n", "\n", "#for index, annotation in enumerate(samples):", "\n", "for", "index", "in", "tqdm", "(", "range", "(", "len", "(", "samples", ")", ")", ")", ":", "\n", "      ", "annotation", "=", "samples", "[", "index", "]", "\n", "image_path", "=", "annotation", "[", "'current_frame'", "]", "\n", "points", ",", "box", "=", "annotation", "[", "'points'", "]", ",", "annotation", "[", "'box-{:}'", ".", "format", "(", "boxindicator", ")", "]", "\n", "label", "=", "PointMeta2V", "(", "self", ".", "NUM_PTS", ",", "points", ",", "box", ",", "image_path", ",", "self", ".", "dataset_name", ")", "\n", "if", "normalizeL", "is", "None", ":", "normDistance", "=", "None", "\n", "else", ":", "normDistance", "=", "annotation", "[", "'normalizeL-{:}'", ".", "format", "(", "normalizeL", ")", "]", "\n", "self", ".", "append", "(", "image_path", ",", "label", ",", "normDistance", ")", "\n", "\n", "", "assert", "len", "(", "self", ".", "datas", ")", "==", "self", ".", "length", ",", "'The length and the data is not right {} vs {}'", ".", "format", "(", "self", ".", "length", ",", "len", "(", "self", ".", "datas", ")", ")", "\n", "assert", "len", "(", "self", ".", "labels", ")", "==", "self", ".", "length", ",", "'The length and the labels is not right {} vs {}'", ".", "format", "(", "self", ".", "length", ",", "len", "(", "self", ".", "labels", ")", ")", "\n", "assert", "len", "(", "self", ".", "NormDistances", ")", "==", "self", ".", "length", ",", "'The length and the NormDistances is not right {} vs {}'", ".", "format", "(", "self", ".", "length", ",", "len", "(", "self", ".", "NormDistance", ")", ")", "\n", "print", "(", "'Load data done for LandmarkDataset, which has {:} images.'", ".", "format", "(", "self", ".", "length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.__getitem__": [[118, 126], ["LandmarkDataset.LandmarkDataset.labels[].copy", "LandmarkDataset.LandmarkDataset._process_", "LandmarkDataset.LandmarkDataset.cache_images[].clone", "dataset_utils.pil_loader"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset._process_"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "assert", "index", ">=", "0", "and", "index", "<", "self", ".", "length", ",", "'Invalid index : {:}'", ".", "format", "(", "index", ")", "\n", "if", "self", ".", "cache_images", "is", "not", "None", "and", "self", ".", "datas", "[", "index", "]", "in", "self", ".", "cache_images", ":", "\n", "      ", "image", "=", "self", ".", "cache_images", "[", "self", ".", "datas", "[", "index", "]", "]", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "      ", "image", "=", "pil_loader", "(", "self", ".", "datas", "[", "index", "]", ",", "self", ".", "use_gray", ")", "\n", "", "target", "=", "self", ".", "labels", "[", "index", "]", ".", "copy", "(", ")", "\n", "return", "self", ".", "_process_", "(", "image", ",", "target", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset._process_": [[128, 160], ["LandmarkDataset.LandmarkDataset.transform", "target.is_none", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "image.size", "isinstance", "isinstance", "LandmarkDataset.LandmarkDataset.__process_affine", "LandmarkDataset.LandmarkDataset.__process_affine", "affineImage.append", "heatmaps.append", "mask.append", "norm_trans_points.append", "THETA.append", "transpose_theta.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.is_none", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.__process_affine", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.__process_affine", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "_process_", "(", "self", ",", "image", ",", "target", ",", "index", ")", ":", "\n", "\n", "# transform the image and points", "\n", "    ", "image", ",", "target", ",", "theta", "=", "self", ".", "transform", "(", "image", ",", "target", ")", "\n", "(", "C", ",", "H", ",", "W", ")", ",", "(", "height", ",", "width", ")", "=", "image", ".", "size", "(", ")", ",", "self", ".", "shape", "\n", "\n", "# obtain the visiable indicator vector", "\n", "if", "target", ".", "is_none", "(", ")", ":", "nopoints", "=", "True", "\n", "else", ":", "nopoints", "=", "False", "\n", "if", "index", "==", "-", "1", ":", "__path", "=", "None", "\n", "else", ":", "__path", "=", "self", ".", "datas", "[", "index", "]", "\n", "if", "isinstance", "(", "theta", ",", "list", ")", "or", "isinstance", "(", "theta", ",", "tuple", ")", ":", "\n", "      ", "affineImage", ",", "heatmaps", ",", "mask", ",", "norm_trans_points", ",", "THETA", ",", "transpose_theta", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "_theta", "in", "theta", ":", "\n", "        ", "_affineImage", ",", "_heatmaps", ",", "_mask", ",", "_norm_trans_points", ",", "_theta", ",", "_transpose_theta", "=", "self", ".", "__process_affine", "(", "image", ",", "target", ",", "_theta", ",", "nopoints", ",", "'P[{:}]@{:}'", ".", "format", "(", "index", ",", "__path", ")", ")", "\n", "affineImage", ".", "append", "(", "_affineImage", ")", "\n", "heatmaps", ".", "append", "(", "_heatmaps", ")", "\n", "mask", ".", "append", "(", "_mask", ")", "\n", "norm_trans_points", ".", "append", "(", "_norm_trans_points", ")", "\n", "THETA", ".", "append", "(", "_theta", ")", "\n", "transpose_theta", ".", "append", "(", "_transpose_theta", ")", "\n", "", "affineImage", ",", "heatmaps", ",", "mask", ",", "norm_trans_points", ",", "THETA", ",", "transpose_theta", "=", "torch", ".", "stack", "(", "affineImage", ")", ",", "torch", ".", "stack", "(", "heatmaps", ")", ",", "torch", ".", "stack", "(", "mask", ")", ",", "torch", ".", "stack", "(", "norm_trans_points", ")", ",", "torch", ".", "stack", "(", "THETA", ")", ",", "torch", ".", "stack", "(", "transpose_theta", ")", "\n", "", "else", ":", "\n", "      ", "affineImage", ",", "heatmaps", ",", "mask", ",", "norm_trans_points", ",", "THETA", ",", "transpose_theta", "=", "self", ".", "__process_affine", "(", "image", ",", "target", ",", "theta", ",", "nopoints", ",", "'S[{:}]@{:}'", ".", "format", "(", "index", ",", "__path", ")", ")", "\n", "\n", "", "torch_index", "=", "torch", ".", "IntTensor", "(", "[", "index", "]", ")", "\n", "torch_nopoints", "=", "torch", ".", "ByteTensor", "(", "[", "nopoints", "]", ")", "\n", "torch_shape", "=", "torch", ".", "IntTensor", "(", "[", "H", ",", "W", "]", ")", "\n", "\n", "return", "affineImage", ",", "heatmaps", ",", "mask", ",", "norm_trans_points", ",", "THETA", ",", "transpose_theta", ",", "torch_index", ",", "torch_nopoints", ",", "torch_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.__process_affine": [[162, 192], ["xvision.affine2image", "image.clone", "target.copy", "theta.clone", "image.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "xvision.identity2affine", "apply_affine2point", "apply_boundary", "apply_boundary.clone", "xvision.denormalize_points", "pts_utils.generate_label_map", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "LandmarkDataset.LandmarkDataset.cutout", "target.get_points", "apply_boundary.clone.numpy", "xvision.identity2affine", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "warnings.warn", "xvision.identity2affine", "xvision.solve2theta", "torch.from_numpy().type.transpose", "torch.from_numpy().type.transpose", "torch.from_numpy().type.transpose", "torch.from_numpy().type.transpose", "LandmarkDataset.LandmarkDataset.mean_face.clone"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.apply_affine2point", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.apply_boundary", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.get_points", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy"], ["", "def", "__process_affine", "(", "self", ",", "image", ",", "target", ",", "theta", ",", "nopoints", ",", "aux_info", "=", "None", ")", ":", "\n", "    ", "image", ",", "target", ",", "theta", "=", "image", ".", "clone", "(", ")", ",", "target", ".", "copy", "(", ")", ",", "theta", ".", "clone", "(", ")", "\n", "(", "C", ",", "H", ",", "W", ")", ",", "(", "height", ",", "width", ")", "=", "image", ".", "size", "(", ")", ",", "self", ".", "shape", "\n", "if", "nopoints", ":", "# do not have label", "\n", "      ", "norm_trans_points", "=", "torch", ".", "zeros", "(", "(", "3", ",", "self", ".", "NUM_PTS", ")", ")", "\n", "heatmaps", "=", "torch", ".", "zeros", "(", "(", "self", ".", "NUM_PTS", "+", "1", ",", "height", "//", "self", ".", "downsample", ",", "width", "//", "self", ".", "downsample", ")", ")", "\n", "mask", "=", "torch", ".", "ones", "(", "(", "self", ".", "NUM_PTS", "+", "1", ",", "1", ",", "1", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "transpose_theta", "=", "identity2affine", "(", "False", ")", "\n", "", "else", ":", "\n", "      ", "norm_trans_points", "=", "apply_affine2point", "(", "target", ".", "get_points", "(", ")", ",", "theta", ",", "(", "H", ",", "W", ")", ")", "\n", "norm_trans_points", "=", "apply_boundary", "(", "norm_trans_points", ")", "\n", "real_trans_points", "=", "norm_trans_points", ".", "clone", "(", ")", "\n", "real_trans_points", "[", ":", "2", ",", ":", "]", "=", "denormalize_points", "(", "self", ".", "shape", ",", "real_trans_points", "[", ":", "2", ",", ":", "]", ")", "\n", "heatmaps", ",", "mask", "=", "generate_label_map", "(", "real_trans_points", ".", "numpy", "(", ")", ",", "height", "//", "self", ".", "downsample", ",", "width", "//", "self", ".", "downsample", ",", "self", ".", "sigma", ",", "self", ".", "downsample", ",", "nopoints", ",", "self", ".", "heatmap_type", ")", "# H*W*C", "\n", "heatmaps", "=", "torch", ".", "from_numpy", "(", "heatmaps", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "type", "(", "torch", ".", "ByteTensor", ")", "\n", "if", "self", ".", "mean_face", "is", "None", ":", "\n", "#warnings.warn('In LandmarkDataset use identity2affine for transpose_theta because self.mean_face is None.')", "\n", "        ", "transpose_theta", "=", "identity2affine", "(", "False", ")", "\n", "", "else", ":", "\n", "        ", "if", "torch", ".", "sum", "(", "norm_trans_points", "[", "2", ",", ":", "]", "==", "1", ")", "<", "3", ":", "\n", "          ", "warnings", ".", "warn", "(", "'In LandmarkDataset after transformation, no visiable point, using identity instead. Aux: {:}'", ".", "format", "(", "aux_info", ")", ")", "\n", "transpose_theta", "=", "identity2affine", "(", "False", ")", "\n", "", "else", ":", "\n", "          ", "transpose_theta", "=", "solve2theta", "(", "norm_trans_points", ",", "self", ".", "mean_face", ".", "clone", "(", ")", ")", "\n", "\n", "", "", "", "affineImage", "=", "affine2image", "(", "image", ",", "theta", ",", "self", ".", "shape", ")", "\n", "if", "self", ".", "cutout", "is", "not", "None", ":", "affineImage", "=", "self", ".", "cutout", "(", "affineImage", ")", "\n", "\n", "return", "affineImage", ",", "heatmaps", ",", "mask", ",", "norm_trans_points", ",", "theta", ",", "transpose_theta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.__init__": [[15, 29], ["torch.Tensor", "torch.Tensor", "points.copy", "isinstance", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy"], ["  ", "def", "__init__", "(", "self", ",", "num_point", ",", "points", ",", "box", ",", "image_path", ",", "dataset_name", ")", ":", "\n", "\n", "    ", "self", ".", "num_point", "=", "num_point", "\n", "if", "box", "is", "not", "None", ":", "\n", "      ", "assert", "(", "isinstance", "(", "box", ",", "tuple", ")", "or", "isinstance", "(", "box", ",", "list", ")", ")", "and", "len", "(", "box", ")", "==", "4", "\n", "self", ".", "box", "=", "torch", ".", "Tensor", "(", "box", ")", "\n", "", "else", ":", "self", ".", "box", "=", "None", "\n", "if", "points", "is", "None", ":", "\n", "      ", "self", ".", "points", "=", "points", "\n", "", "else", ":", "\n", "      ", "assert", "len", "(", "points", ".", "shape", ")", "==", "2", "and", "points", ".", "shape", "[", "0", "]", "==", "3", "and", "points", ".", "shape", "[", "1", "]", "==", "self", ".", "num_point", ",", "'The shape of point is not right : {}'", ".", "format", "(", "points", ")", "\n", "self", ".", "points", "=", "torch", ".", "Tensor", "(", "points", ".", "copy", "(", ")", ")", "\n", "", "self", ".", "image_path", "=", "image_path", "\n", "self", ".", "datasets", "=", "dataset_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.__repr__": [[30, 34], ["point_meta.PointMeta.box.tolist"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "box", "is", "None", ":", "boxstr", "=", "'None'", "\n", "else", ":", "boxstr", "=", "'box=[{:.1f}, {:.1f}, {:.1f}, {:.1f}]'", ".", "format", "(", "*", "self", ".", "box", ".", "tolist", "(", ")", ")", "\n", "return", "(", "'{name}(points={num_point}, '", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "+", "boxstr", "+", "')'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.get_box": [[35, 43], ["point_meta.PointMeta.box.clone", "math.sqrt"], "methods", ["None"], ["", "def", "get_box", "(", "self", ",", "return_diagonal", "=", "False", ")", ":", "\n", "    ", "if", "self", ".", "box", "is", "None", ":", "return", "None", "\n", "if", "not", "return_diagonal", ":", "\n", "      ", "return", "self", ".", "box", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "      ", "W", "=", "(", "self", ".", "box", "[", "2", "]", "-", "self", ".", "box", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "H", "=", "(", "self", ".", "box", "[", "3", "]", "-", "self", ".", "box", "[", "1", "]", ")", ".", "item", "(", ")", "\n", "return", "math", ".", "sqrt", "(", "H", "*", "H", "+", "W", "*", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.get_points": [[44, 49], ["torch.zeros", "point_meta.PointMeta.points.clone"], "methods", ["None"], ["", "", "def", "get_points", "(", "self", ",", "ignore_indicator", "=", "False", ")", ":", "\n", "    ", "if", "ignore_indicator", ":", "last", "=", "2", "\n", "else", ":", "last", "=", "3", "\n", "if", "self", ".", "points", "is", "not", "None", ":", "return", "self", ".", "points", ".", "clone", "(", ")", "[", ":", "last", ",", ":", "]", "\n", "else", ":", "return", "torch", ".", "zeros", "(", "(", "last", ",", "self", ".", "num_point", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.is_none": [[50, 53], ["None"], "methods", ["None"], ["", "def", "is_none", "(", "self", ")", ":", "\n", "#assert self.box is not None, 'The box should not be None'", "\n", "    ", "return", "self", ".", "points", "is", "None", "\n", "#if self.box is None: return True", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy": [[56, 58], ["copy.deepcopy"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.visiable_pts_num": [[59, 65], ["torch.no_grad", "torch.sum", "ans.item.item.item"], "methods", ["None"], ["", "def", "visiable_pts_num", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "ans", "=", "self", ".", "points", "[", "2", ",", ":", "]", ">", "0", "\n", "ans", "=", "torch", ".", "sum", "(", "ans", ")", "\n", "ans", "=", "ans", ".", "item", "(", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.special_fun": [[66, 75], ["torch.ones", "ValueError", "point_meta.PointMeta.points.clone"], "methods", ["None"], ["", "def", "special_fun", "(", "self", ",", "indicator", ")", ":", "\n", "    ", "if", "indicator", "==", "'68to49'", ":", "# For 300W or 300VW, convert the default 68 points to 49 points.", "\n", "      ", "assert", "self", ".", "num_point", "==", "68", ",", "'num-point must be 68 vs. {:}'", ".", "format", "(", "self", ".", "num_point", ")", "\n", "self", ".", "num_point", "=", "49", "\n", "out", "=", "torch", ".", "ones", "(", "(", "68", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "out", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "60", ",", "64", "]", "]", "=", "0", "\n", "if", "self", ".", "points", "is", "not", "None", ":", "self", ".", "points", "=", "self", ".", "points", ".", "clone", "(", ")", "[", ":", ",", "out", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Invalid indicator : {:}'", ".", "format", "(", "indicator", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.apply_horizontal_flip": [[76, 89], ["point_meta.PointMeta.datasets.startswith", "numpy.array", "numpy.array", "point_meta.PointMeta.datasets.startswith", "list", "numpy.array", "ValueError", "range", "list", "list", "list", "numpy.array", "range", "range", "range"], "methods", ["None"], ["", "", "def", "apply_horizontal_flip", "(", "self", ")", ":", "\n", "#self.points[0, :] = width - self.points[0, :] - 1", "\n", "# Mugsy spefic or Synthetic", "\n", "    ", "if", "self", ".", "datasets", ".", "startswith", "(", "'HandsyROT'", ")", ":", "\n", "      ", "ori", "=", "np", ".", "array", "(", "list", "(", "range", "(", "0", ",", "42", ")", ")", ")", "\n", "pos", "=", "np", ".", "array", "(", "list", "(", "range", "(", "21", ",", "42", ")", ")", "+", "list", "(", "range", "(", "0", ",", "21", ")", ")", ")", "\n", "self", ".", "points", "[", ":", ",", "pos", "]", "=", "self", ".", "points", "[", ":", ",", "ori", "]", "\n", "", "elif", "self", ".", "datasets", ".", "startswith", "(", "'face68'", ")", ":", "\n", "      ", "ori", "=", "np", ".", "array", "(", "list", "(", "range", "(", "0", ",", "68", ")", ")", ")", "\n", "pos", "=", "np", ".", "array", "(", "[", "17", ",", "16", ",", "15", ",", "14", ",", "13", ",", "12", ",", "11", ",", "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", ",", "2", ",", "1", ",", "27", ",", "26", ",", "25", ",", "24", ",", "23", ",", "22", ",", "21", ",", "20", ",", "19", ",", "18", ",", "28", ",", "29", ",", "30", ",", "31", ",", "36", ",", "35", ",", "34", ",", "33", ",", "32", ",", "46", ",", "45", ",", "44", ",", "43", ",", "48", ",", "47", ",", "40", ",", "39", ",", "38", ",", "37", ",", "42", ",", "41", ",", "55", ",", "54", ",", "53", ",", "52", ",", "51", ",", "50", ",", "49", ",", "60", ",", "59", ",", "58", ",", "57", ",", "56", ",", "65", ",", "64", ",", "63", ",", "62", ",", "61", ",", "68", ",", "67", ",", "66", "]", ")", "-", "1", "\n", "self", ".", "points", "[", ":", ",", "ori", "]", "=", "self", ".", "points", "[", ":", ",", "pos", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Does not support {:}'", ".", "format", "(", "self", ".", "datasets", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.apply_affine2point": [[93, 107], ["points.size", "points.size", "torch.no_grad", "xvision.normalize_points", "ok_points.unsqueeze().repeat().float", "torch.gesv", "torch.sum().item", "ok_points.unsqueeze().repeat", "torch.sum", "ok_points.unsqueeze"], "function", ["None"], ["", "", "", "def", "apply_affine2point", "(", "points", ",", "theta", ",", "shape", ")", ":", "\n", "  ", "assert", "points", ".", "size", "(", "0", ")", "==", "3", ",", "'invalid points shape : {:}'", ".", "format", "(", "points", ".", "size", "(", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "ok_points", "=", "points", "[", "2", ",", ":", "]", "==", "1", "\n", "assert", "torch", ".", "sum", "(", "ok_points", ")", ".", "item", "(", ")", ">", "0", ",", "'there is no visiable point'", "\n", "points", "[", ":", "2", ",", ":", "]", "=", "normalize_points", "(", "shape", ",", "points", "[", ":", "2", ",", ":", "]", ")", "\n", "\n", "norm_trans_points", "=", "ok_points", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "3", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "trans_points", ",", "___", "=", "torch", ".", "gesv", "(", "points", "[", ":", ",", "ok_points", "]", ",", "theta", ")", "\n", "\n", "norm_trans_points", "[", ":", ",", "ok_points", "]", "=", "trans_points", "\n", "\n", "", "return", "norm_trans_points", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.apply_boundary": [[110, 117], ["torch.no_grad", "norm_trans_points.clone.clone", "torch.stack", "torch.sum"], "function", ["None"], ["", "def", "apply_boundary", "(", "norm_trans_points", ")", ":", "\n", "  ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "norm_trans_points", "=", "norm_trans_points", ".", "clone", "(", ")", "\n", "oks", "=", "torch", ".", "stack", "(", "(", "norm_trans_points", "[", "0", "]", ">", "-", "1", ",", "norm_trans_points", "[", "0", "]", "<", "1", ",", "norm_trans_points", "[", "1", "]", ">", "-", "1", ",", "norm_trans_points", "[", "1", "]", "<", "1", ",", "norm_trans_points", "[", "2", "]", ">", "0", ")", ")", "\n", "oks", "=", "torch", ".", "sum", "(", "oks", ",", "dim", "=", "0", ")", "==", "5", "\n", "norm_trans_points", "[", "2", ",", ":", "]", "=", "oks", "\n", "", "return", "norm_trans_points", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.search_single_args.obtain_search_single_args": [[5, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_search_single_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--split_path'", ",", "type", "=", "str", ",", "help", "=", "'The split file path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--search_shape'", ",", "type", "=", "str", ",", "help", "=", "'The shape to be searched.'", ")", "\n", "#parser.add_argument('--arch_para_pure',   type=int,                   help='The architecture-parameter pure or not.')", "\n", "parser", ".", "add_argument", "(", "'--gumbel_tau_max'", ",", "type", "=", "float", ",", "help", "=", "'The maximum tau for Gumbel.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gumbel_tau_min'", ",", "type", "=", "float", ",", "help", "=", "'The minimum tau for Gumbel.'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_ratio'", ",", "type", "=", "float", ",", "help", "=", "'The expected FLOP ratio.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_weight'", ",", "type", "=", "float", ",", "help", "=", "'The loss weight for FLOP.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_tolerant'", ",", "type", "=", "float", ",", "help", "=", "'The tolerant range for FLOP.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "assert", "args", ".", "gumbel_tau_max", "is", "not", "None", "and", "args", ".", "gumbel_tau_min", "is", "not", "None", "\n", "assert", "args", ".", "FLOP_tolerant", "is", "not", "None", "and", "args", ".", "FLOP_tolerant", ">", "0", ",", "'invalid FLOP_tolerant : {:}'", ".", "format", "(", "FLOP_tolerant", ")", "\n", "#assert args.arch_para_pure is not None, 'arch_para_pure is not None: {:}'.format(args.arch_para_pure)", "\n", "#args.arch_para_pure = bool(args.arch_para_pure)", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.basic_args.obtain_basic_args": [[7, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_basic_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_source'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "help", "=", "'The source of model defination.'", ")", "\n", "parser", ".", "add_argument", "(", "'--extra_model_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'The extra model ckp file (help to indicate the searched architecture).'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.random_baseline.obtain_RandomSearch_args": [[5, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_RandomSearch_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--expect_flop'", ",", "type", "=", "float", ",", "help", "=", "'The expected flop keep ratio.'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch_nums'", ",", "type", "=", "int", ",", "help", "=", "'The maximum number of running random arch generating..'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_mode'", ",", "type", "=", "str", ",", "choices", "=", "[", "'random'", ",", "'fix'", "]", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "#assert args.flop_ratio_min < args.flop_ratio_max, 'flop-ratio {:} vs {:}'.format(args.flop_ratio_min, args.flop_ratio_max)", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.search_args.obtain_search_args": [[5, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_search_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--split_path'", ",", "type", "=", "str", ",", "help", "=", "'The split file path.'", ")", "\n", "#parser.add_argument('--arch_para_pure',   type=int,                   help='The architecture-parameter pure or not.')", "\n", "parser", ".", "add_argument", "(", "'--gumbel_tau_max'", ",", "type", "=", "float", ",", "help", "=", "'The maximum tau for Gumbel.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gumbel_tau_min'", ",", "type", "=", "float", ",", "help", "=", "'The minimum tau for Gumbel.'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_ratio'", ",", "type", "=", "float", ",", "help", "=", "'The expected FLOP ratio.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_weight'", ",", "type", "=", "float", ",", "help", "=", "'The loss weight for FLOP.'", ")", "\n", "parser", ".", "add_argument", "(", "'--FLOP_tolerant'", ",", "type", "=", "float", ",", "help", "=", "'The tolerant range for FLOP.'", ")", "\n", "# ablation studies", "\n", "parser", ".", "add_argument", "(", "'--ablation_num_select'", ",", "type", "=", "int", ",", "help", "=", "'The number of randomly selected channels.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "assert", "args", ".", "gumbel_tau_max", "is", "not", "None", "and", "args", ".", "gumbel_tau_min", "is", "not", "None", "\n", "assert", "args", ".", "FLOP_tolerant", "is", "not", "None", "and", "args", ".", "FLOP_tolerant", ">", "0", ",", "'invalid FLOP_tolerant : {:}'", ".", "format", "(", "FLOP_tolerant", ")", "\n", "#assert args.arch_para_pure is not None, 'arch_para_pure is not None: {:}'.format(args.arch_para_pure)", "\n", "#args.arch_para_pure = bool(args.arch_para_pure)", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.cls_kd_args.obtain_cls_kd_args": [[4, 24], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_cls_kd_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_checkpoint'", ",", "type", "=", "str", ",", "help", "=", "'The teacher checkpoint in knowledge distillation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_alpha'", ",", "type", "=", "float", ",", "help", "=", "'The alpha parameter in knowledge distillation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_temperature'", ",", "type", "=", "float", ",", "help", "=", "'The temperature parameter in knowledge distillation.'", ")", "\n", "#parser.add_argument('--KD_feature',       type=float,                 help='Knowledge distillation at the feature level.')", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.convert_param": [[15, 40], ["isinstance", "isinstance", "outs.append", "int", "str", "bool", "int", "float", "TypeError", "float.lower", "ValueError"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "convert_param", "(", "original_lists", ")", ":", "\n", "  ", "assert", "isinstance", "(", "original_lists", ",", "list", ")", ",", "'The type is not right : {:}'", ".", "format", "(", "original_lists", ")", "\n", "ctype", ",", "value", "=", "original_lists", "[", "0", "]", ",", "original_lists", "[", "1", "]", "\n", "assert", "ctype", "in", "support_types", ",", "'Ctype={:}, support={:}'", ".", "format", "(", "ctype", ",", "support_types", ")", "\n", "is_list", "=", "isinstance", "(", "value", ",", "list", ")", "\n", "if", "not", "is_list", ":", "value", "=", "[", "value", "]", "\n", "outs", "=", "[", "]", "\n", "for", "x", "in", "value", ":", "\n", "    ", "if", "ctype", "==", "'int'", ":", "\n", "      ", "x", "=", "int", "(", "x", ")", "\n", "", "elif", "ctype", "==", "'str'", ":", "\n", "      ", "x", "=", "str", "(", "x", ")", "\n", "", "elif", "ctype", "==", "'bool'", ":", "\n", "      ", "x", "=", "bool", "(", "int", "(", "x", ")", ")", "\n", "", "elif", "ctype", "==", "'float'", ":", "\n", "      ", "x", "=", "float", "(", "x", ")", "\n", "", "elif", "ctype", "==", "'none'", ":", "\n", "      ", "if", "x", ".", "lower", "(", ")", "!=", "'none'", ":", "\n", "        ", "raise", "ValueError", "(", "'For the none type, the value must be none instead of {:}'", ".", "format", "(", "x", ")", ")", "\n", "", "x", "=", "None", "\n", "", "else", ":", "\n", "      ", "raise", "TypeError", "(", "'Does not know this type : {:}'", ".", "format", "(", "ctype", ")", ")", "\n", "", "outs", ".", "append", "(", "x", ")", "\n", "", "if", "not", "is_list", ":", "outs", "=", "outs", "[", "0", "]", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.load_config": [[42, 56], ["str", "hasattr", "os.path.exists", "isinstance", "collections.namedtuple", "collections.namedtuple.", "hasattr", "logger.log", "open", "json.load", "configure_utils.convert_param", "isinstance", "logger.log", "json.load.items", "Arguments.keys"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.convert_param", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log"], ["", "def", "load_config", "(", "path", ",", "extra", ",", "logger", ")", ":", "\n", "  ", "path", "=", "str", "(", "path", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "'Can not find {:}'", ".", "format", "(", "path", ")", "\n", "# Reading data back", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "content", "=", "{", "k", ":", "convert_param", "(", "v", ")", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", "}", "\n", "assert", "extra", "is", "None", "or", "isinstance", "(", "extra", ",", "dict", ")", ",", "'invalid type of extra : {:}'", ".", "format", "(", "extra", ")", "\n", "if", "isinstance", "(", "extra", ",", "dict", ")", ":", "content", "=", "{", "**", "content", ",", "**", "extra", "}", "\n", "Arguments", "=", "namedtuple", "(", "'Configure'", ",", "' '", ".", "join", "(", "content", ".", "keys", "(", ")", ")", ")", "\n", "content", "=", "Arguments", "(", "**", "content", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'{:}'", ".", "format", "(", "content", ")", ")", "\n", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.configure2str": [[58, 99], ["config._asdict.items", "isinstance", "config._asdict._asdict", "isinstance", "isinstance", "isinstance", "configure_utils.configure2str.gtype"], "function", ["None"], ["", "def", "configure2str", "(", "config", ",", "xpath", "=", "None", ")", ":", "\n", "  ", "if", "not", "isinstance", "(", "config", ",", "dict", ")", ":", "\n", "    ", "config", "=", "config", ".", "_asdict", "(", ")", "\n", "", "def", "cstring", "(", "x", ")", ":", "\n", "    ", "return", "\"\\\"{:}\\\"\"", ".", "format", "(", "x", ")", "\n", "", "def", "gtype", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "x", "=", "x", "[", "0", "]", "\n", "if", "isinstance", "(", "x", ",", "str", ")", ":", "return", "'str'", "\n", "elif", "isinstance", "(", "x", ",", "bool", ")", ":", "return", "'bool'", "\n", "elif", "isinstance", "(", "x", ",", "int", ")", ":", "return", "'int'", "\n", "elif", "isinstance", "(", "x", ",", "float", ")", ":", "return", "'float'", "\n", "elif", "x", "is", "None", ":", "return", "'none'", "\n", "else", ":", "raise", "ValueError", "(", "'invalid : {:}'", ".", "format", "(", "x", ")", ")", "\n", "", "def", "cvalue", "(", "x", ",", "xtype", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "is_list", "=", "True", "\n", "else", ":", "\n", "      ", "is_list", ",", "x", "=", "False", ",", "[", "x", "]", "\n", "", "temps", "=", "[", "]", "\n", "for", "temp", "in", "x", ":", "\n", "      ", "if", "xtype", "==", "'bool'", ":", "temp", "=", "cstring", "(", "int", "(", "temp", ")", ")", "\n", "elif", "xtype", "==", "'none'", ":", "temp", "=", "cstring", "(", "'None'", ")", "\n", "else", ":", "temp", "=", "cstring", "(", "temp", ")", "\n", "temps", ".", "append", "(", "temp", ")", "\n", "", "if", "is_list", ":", "\n", "      ", "return", "\"[{:}]\"", ".", "format", "(", "', '", ".", "join", "(", "temps", ")", ")", "\n", "", "else", ":", "\n", "      ", "return", "temps", "[", "0", "]", "\n", "\n", "", "", "xstrings", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "config", ".", "items", "(", ")", ":", "\n", "    ", "xtype", "=", "gtype", "(", "value", ")", "\n", "string", "=", "'  {:20s} : [{:8s}, {:}]'", ".", "format", "(", "cstring", "(", "key", ")", ",", "cstring", "(", "xtype", ")", ",", "cvalue", "(", "value", ",", "xtype", ")", ")", "\n", "xstrings", ".", "append", "(", "string", ")", "\n", "", "Fstring", "=", "'{\\n'", "+", "',\\n'", ".", "join", "(", "xstrings", ")", "+", "'\\n}'", "\n", "if", "xpath", "is", "not", "None", ":", "\n", "    ", "parent", "=", "Path", "(", "xpath", ")", ".", "resolve", "(", ")", ".", "parent", "\n", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "if", "osp", ".", "isfile", "(", "xpath", ")", ":", "os", ".", "remove", "(", "xpath", ")", "\n", "with", "open", "(", "xpath", ",", "\"w\"", ")", "as", "text_file", ":", "\n", "      ", "text_file", ".", "write", "(", "'{:}'", ".", "format", "(", "Fstring", ")", ")", "\n", "", "", "return", "Fstring", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.dict2config": [[101, 107], ["isinstance", "collections.namedtuple", "collections.namedtuple.", "hasattr", "type", "logger.log", "xdict.keys"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log"], ["", "def", "dict2config", "(", "xdict", ",", "logger", ")", ":", "\n", "  ", "assert", "isinstance", "(", "xdict", ",", "dict", ")", ",", "'invalid type : {:}'", ".", "format", "(", "type", "(", "xdict", ")", ")", "\n", "Arguments", "=", "namedtuple", "(", "'Configure'", ",", "' '", ".", "join", "(", "xdict", ".", "keys", "(", ")", ")", ")", "\n", "content", "=", "Arguments", "(", "**", "xdict", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'{:}'", ".", "format", "(", "content", ")", ")", "\n", "return", "content", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args": [[3, 18], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "add_shared_args", "(", "parser", ")", ":", "\n", "# Data Generation", "\n", "  ", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "help", "=", "'The dataset name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "help", "=", "'The dataset name.'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutout_length'", ",", "type", "=", "int", ",", "help", "=", "'The cutout length, negative means not use.'", ")", "\n", "# Printing", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'print frequency (default: 200)'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq_eval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'print frequency (default: 200)'", ")", "\n", "# Checkpoints", "\n", "parser", ".", "add_argument", "(", "'--eval_frequency'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'evaluation frequency (default: 200)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_dir'", ",", "type", "=", "str", ",", "help", "=", "'Folder to save checkpoints and log.'", ")", "\n", "# Acceleration", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'number of data loading workers (default: 8)'", ")", "\n", "# Random Seed", "\n", "parser", ".", "add_argument", "(", "'--rand_seed'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'manual seed'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.cls_init_args.obtain_cls_init_args": [[4, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_cls_init_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_checkpoint'", ",", "type", "=", "str", ",", "help", "=", "'The checkpoint path to the initial model.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.attention_args.obtain_attention_args": [[4, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_attention_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--att_channel'", ",", "type", "=", "int", ",", "help", "=", "'.'", ")", "\n", "parser", ".", "add_argument", "(", "'--att_spatial'", ",", "type", "=", "str", ",", "help", "=", "'.'", ")", "\n", "parser", ".", "add_argument", "(", "'--att_active'", ",", "type", "=", "str", ",", "help", "=", "'.'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.pruning_args.obtain_pruning_args": [[4, 27], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "share_args.add_shared_args", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.randint"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.share_args.add_shared_args"], ["def", "obtain_pruning_args", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a classification model on typical image classification datasets.'", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "help", "=", "'Resume path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_model'", ",", "type", "=", "str", ",", "help", "=", "'The initialization model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the model configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_config'", ",", "type", "=", "str", ",", "help", "=", "'The path to the optimizer configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--procedure'", ",", "type", "=", "str", ",", "help", "=", "'The procedure basic prefix.'", ")", "\n", "parser", ".", "add_argument", "(", "'--keep_ratio'", ",", "type", "=", "float", ",", "help", "=", "'The left channel ratio compared to the original network.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_version'", ",", "type", "=", "str", ",", "help", "=", "'The network version.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_alpha'", ",", "type", "=", "float", ",", "help", "=", "'The alpha parameter in knowledge distillation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--KD_temperature'", ",", "type", "=", "float", ",", "help", "=", "'The temperature parameter in knowledge distillation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--Regular_W_feat'", ",", "type", "=", "float", ",", "help", "=", "'The .'", ")", "\n", "parser", ".", "add_argument", "(", "'--Regular_W_conv'", ",", "type", "=", "float", ",", "help", "=", "'The .'", ")", "\n", "add_shared_args", "(", "parser", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Batch size for training.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "rand_seed", "is", "None", "or", "args", ".", "rand_seed", "<", "0", ":", "\n", "    ", "args", ".", "rand_seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "", "assert", "args", ".", "save_dir", "is", "not", "None", ",", "'save-path argument can not be None'", "\n", "assert", "args", ".", "keep_ratio", ">", "0", "and", "args", ".", "keep_ratio", "<=", "1", ",", "'invalid keep ratio : {:}'", ".", "format", "(", "args", ".", "keep_ratio", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.starts.prepare_seed": [[8, 14], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "prepare_seed", "(", "rand_seed", ")", ":", "\n", "  ", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "torch", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "rand_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.starts.prepare_logger": [[16, 32], ["copy.deepcopy", "Logger", "Logger.log", "Logger.log", "copy.deepcopy._get_kwargs", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "sys.version.replace", "torch.backends.cudnn.version", "torch.cuda.is_available", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log"], ["", "def", "prepare_logger", "(", "xargs", ")", ":", "\n", "  ", "args", "=", "copy", ".", "deepcopy", "(", "xargs", ")", "\n", "from", "log_utils", "import", "Logger", "\n", "logger", "=", "Logger", "(", "args", ".", "save_dir", ",", "args", ".", "rand_seed", ")", "\n", "logger", ".", "log", "(", "'Main Function with logger : {:}'", ".", "format", "(", "logger", ")", ")", "\n", "logger", ".", "log", "(", "'Arguments : -------------------------------'", ")", "\n", "for", "name", ",", "value", "in", "args", ".", "_get_kwargs", "(", ")", ":", "\n", "    ", "logger", ".", "log", "(", "'{:16} : {:}'", ".", "format", "(", "name", ",", "value", ")", ")", "\n", "", "logger", ".", "log", "(", "\"Python  Version  : {:}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"Pillow  Version  : {:}\"", ".", "format", "(", "PIL", ".", "__version__", ")", ")", "\n", "logger", ".", "log", "(", "\"PyTorch Version  : {:}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "logger", ".", "log", "(", "\"cuDNN   Version  : {:}\"", ".", "format", "(", "torch", ".", "backends", ".", "cudnn", ".", "version", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA available   : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA GPU numbers : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA_VISIBLE_DEVICES : {:}\"", ".", "format", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", "else", "'None'", ")", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.starts.get_machine_info": [[34, 46], ["sys.version.replace", "torch.backends.cudnn.version", "torch.cuda.is_available", "torch.cuda.device_count"], "function", ["None"], ["", "def", "get_machine_info", "(", ")", ":", "\n", "  ", "info", "=", "\"Python  Version  : {:}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", "\n", "info", "+=", "\"\\nPillow  Version  : {:}\"", ".", "format", "(", "PIL", ".", "__version__", ")", "\n", "info", "+=", "\"\\nPyTorch Version  : {:}\"", ".", "format", "(", "torch", ".", "__version__", ")", "\n", "info", "+=", "\"\\ncuDNN   Version  : {:}\"", ".", "format", "(", "torch", ".", "backends", ".", "cudnn", ".", "version", "(", ")", ")", "\n", "info", "+=", "\"\\nCUDA available   : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "info", "+=", "\"\\nCUDA GPU numbers : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "    ", "info", "+=", "\"\\nCUDA_VISIBLE_DEVICES={:}\"", ".", "format", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ")", "\n", "", "else", ":", "\n", "    ", "info", "+=", "\"\\nDoes not set CUDA_VISIBLE_DEVICES\"", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.starts.save_checkpoint": [[48, 56], ["os.path.isfile", "torch.save", "os.path.isfile", "hasattr", "hasattr", "os.remove", "logger.log", "logger.log"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log"], ["", "def", "save_checkpoint", "(", "state", ",", "filename", ",", "logger", ")", ":", "\n", "  ", "if", "osp", ".", "isfile", "(", "filename", ")", ":", "\n", "    ", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'Find {:} exist, delete is at first before saving'", ".", "format", "(", "filename", ")", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "assert", "osp", ".", "isfile", "(", "filename", ")", ",", "'save filename : {:} failed, which is not found.'", ".", "format", "(", "filename", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'save checkpoint into {:}'", ".", "format", "(", "filename", ")", ")", "\n", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.starts.copy_checkpoint": [[58, 64], ["os.path.isfile", "shutil.copyfile", "hasattr", "hasattr", "os.remove", "logger.log", "logger.log"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log"], ["", "def", "copy_checkpoint", "(", "src", ",", "dst", ",", "logger", ")", ":", "\n", "  ", "if", "osp", ".", "isfile", "(", "dst", ")", ":", "\n", "    ", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'Find {:} exist, delete is at first before saving'", ".", "format", "(", "dst", ")", ")", "\n", "os", ".", "remove", "(", "dst", ")", "\n", "", "copyfile", "(", "src", ",", "dst", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "logger", ".", "log", "(", "'copy the file from {:} into {:}'", ".", "format", "(", "src", ",", "dst", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.search_main.get_flop_loss": [[10, 22], ["torch.mean", "torch.log", "torch.log", "torch.log.item"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log"], ["def", "get_flop_loss", "(", "expected_flop", ",", "flop_cur", ",", "flop_need", ",", "flop_tolerant", ")", ":", "\n", "  ", "expected_flop", "=", "torch", ".", "mean", "(", "expected_flop", ")", "\n", "\n", "if", "flop_cur", "<", "flop_need", "-", "flop_tolerant", ":", "# Too Small FLOP", "\n", "    ", "loss", "=", "-", "torch", ".", "log", "(", "expected_flop", ")", "\n", "#elif flop_cur > flop_need + flop_tolerant: # Too Large FLOP", "\n", "", "elif", "flop_cur", ">", "flop_need", ":", "# Too Large FLOP", "\n", "    ", "loss", "=", "torch", ".", "log", "(", "expected_flop", ")", "\n", "", "else", ":", "# Required FLOP", "\n", "    ", "loss", "=", "None", "\n", "", "if", "loss", "is", "None", ":", "return", "0", ",", "0", "\n", "else", ":", "return", "loss", ",", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.search_main.search_train": [[24, 88], ["network.train", "logger.log", "time.time", "network.apply", "enumerate", "logger.log", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "models.change_key", "scheduler.update", "base_targets.cuda.cuda", "arch_targets.cuda.cuda", "data_time.update", "base_optimizer.zero_grad", "network", "criterion", "criterion.backward", "base_optimizer.step", "utils.obtain_accuracy", "base_losses.update", "top1.update", "top5.update", "arch_optimizer.zero_grad", "network", "network.module.get_flop", "search_main.get_flop_loss", "criterion", "arch_loss.backward", "arch_optimizer.step", "arch_losses.update", "arch_flop_losses.update", "arch_cls_losses.update", "batch_time.update", "time.time", "criterion.item", "base_inputs.size", "prec1.item", "base_inputs.size", "prec5.item", "base_inputs.size", "arch_loss.item", "arch_inputs.size", "arch_inputs.size", "criterion.item", "arch_inputs.size", "logger.log", "len", "time.time", "time.time", "len", "log_utils.time_string", "len"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.change_key", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_flop", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.search_main_v2.get_flop_loss", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_string"], ["", "def", "search_train", "(", "search_loader", ",", "network", ",", "criterion", ",", "scheduler", ",", "base_optimizer", ",", "arch_optimizer", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "data_time", ",", "batch_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "base_losses", ",", "arch_losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "arch_cls_losses", ",", "arch_flop_losses", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "epoch_str", ",", "flop_need", ",", "flop_weight", ",", "flop_tolerant", "=", "extra_info", "[", "'epoch-str'", "]", ",", "extra_info", "[", "'FLOP-exp'", "]", ",", "extra_info", "[", "'FLOP-weight'", "]", ",", "extra_info", "[", "'FLOP-tolerant'", "]", "\n", "\n", "network", ".", "train", "(", ")", "\n", "logger", ".", "log", "(", "'[Search] : {:}, FLOP-Require={:.2f} MB, FLOP-WEIGHT={:.2f}'", ".", "format", "(", "epoch_str", ",", "flop_need", ",", "flop_weight", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "network", ".", "apply", "(", "change_key", "(", "'search_mode'", ",", "'search'", ")", ")", "\n", "for", "step", ",", "(", "base_inputs", ",", "base_targets", ",", "arch_inputs", ",", "arch_targets", ")", "in", "enumerate", "(", "search_loader", ")", ":", "\n", "    ", "scheduler", ".", "update", "(", "None", ",", "1.0", "*", "step", "/", "len", "(", "search_loader", ")", ")", "\n", "# calculate prediction and loss", "\n", "base_targets", "=", "base_targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "arch_targets", "=", "arch_targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# update the weights", "\n", "base_optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "expected_flop", "=", "network", "(", "base_inputs", ")", "\n", "#network.apply( change_key('search_mode', 'basic') )", "\n", "#features, logits = network(base_inputs)", "\n", "base_loss", "=", "criterion", "(", "logits", ",", "base_targets", ")", "\n", "base_loss", ".", "backward", "(", ")", "\n", "base_optimizer", ".", "step", "(", ")", "\n", "# record", "\n", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "base_targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "base_losses", ".", "update", "(", "base_loss", ".", "item", "(", ")", ",", "base_inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "base_inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "base_inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# update the architecture", "\n", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "expected_flop", "=", "network", "(", "arch_inputs", ")", "\n", "flop_cur", "=", "network", ".", "module", ".", "get_flop", "(", "'genotype'", ",", "None", ",", "None", ")", "\n", "flop_loss", ",", "flop_loss_scale", "=", "get_flop_loss", "(", "expected_flop", ",", "flop_cur", ",", "flop_need", ",", "flop_tolerant", ")", "\n", "acls_loss", "=", "criterion", "(", "logits", ",", "arch_targets", ")", "\n", "arch_loss", "=", "acls_loss", "+", "flop_loss", "*", "flop_weight", "\n", "arch_loss", ".", "backward", "(", ")", "\n", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# record", "\n", "arch_losses", ".", "update", "(", "arch_loss", ".", "item", "(", ")", ",", "arch_inputs", ".", "size", "(", "0", ")", ")", "\n", "arch_flop_losses", ".", "update", "(", "flop_loss_scale", ",", "arch_inputs", ".", "size", "(", "0", ")", ")", "\n", "arch_cls_losses", ".", "update", "(", "acls_loss", ".", "item", "(", ")", ",", "arch_inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "step", "%", "print_freq", "==", "0", "or", "(", "step", "+", "1", ")", "==", "len", "(", "search_loader", ")", ":", "\n", "      ", "Sstr", "=", "'**TRAIN** '", "+", "time_string", "(", ")", "+", "' [{:}][{:03d}/{:03d}]'", ".", "format", "(", "epoch_str", ",", "step", ",", "len", "(", "search_loader", ")", ")", "\n", "Tstr", "=", "'Time {batch_time.val:.2f} ({batch_time.avg:.2f}) Data {data_time.val:.2f} ({data_time.avg:.2f})'", ".", "format", "(", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ")", "\n", "Lstr", "=", "'Base-Loss {loss.val:.3f} ({loss.avg:.3f})  Prec@1 {top1.val:.2f} ({top1.avg:.2f}) Prec@5 {top5.val:.2f} ({top5.avg:.2f})'", ".", "format", "(", "loss", "=", "base_losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "Vstr", "=", "'Acls-loss {aloss.val:.3f} ({aloss.avg:.3f}) FLOP-Loss {floss.val:.3f} ({floss.avg:.3f}) Arch-Loss {loss.val:.3f} ({loss.avg:.3f})'", ".", "format", "(", "aloss", "=", "arch_cls_losses", ",", "floss", "=", "arch_flop_losses", ",", "loss", "=", "arch_losses", ")", "\n", "logger", ".", "log", "(", "Sstr", "+", "' '", "+", "Tstr", "+", "' '", "+", "Lstr", "+", "' '", "+", "Vstr", ")", "\n", "#Istr = 'Bsz={:} Asz={:}'.format(list(base_inputs.size()), list(arch_inputs.size()))", "\n", "#logger.log(Sstr + ' ' + Tstr + ' ' + Lstr + ' ' + Vstr + ' ' + Istr)", "\n", "#print(network.module.get_arch_info())", "\n", "#print(network.module.width_attentions[0])", "\n", "#print(network.module.width_attentions[1])", "\n", "\n", "", "", "logger", ".", "log", "(", "' **TRAIN** Prec@1 {top1.avg:.2f} Prec@5 {top5.avg:.2f} Error@1 {error1:.2f} Error@5 {error5:.2f} Base-Loss:{baseloss:.3f}, Arch-Loss={archloss:.3f}'", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "error1", "=", "100", "-", "top1", ".", "avg", ",", "error5", "=", "100", "-", "top5", ".", "avg", ",", "baseloss", "=", "base_losses", ".", "avg", ",", "archloss", "=", "arch_losses", ".", "avg", ")", ")", "\n", "return", "base_losses", ".", "avg", ",", "arch_losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.search_main.search_valid": [[91, 127], ["network.eval", "network.apply", "time.time", "logger.log", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "models.change_key", "torch.no_grad", "enumerate", "data_time.update", "targets.cuda.cuda", "network", "criterion", "utils.obtain_accuracy", "losses.update", "top1.update", "top5.update", "batch_time.update", "time.time", "criterion.item", "inputs.size", "prec1.item", "inputs.size", "prec5.item", "inputs.size", "logger.log", "time.time", "time.time", "len", "list", "log_utils.time_string", "len", "inputs.size"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.change_key", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_string"], ["", "def", "search_valid", "(", "xloader", ",", "network", ",", "criterion", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "data_time", ",", "batch_time", ",", "losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "network", ".", "eval", "(", ")", "\n", "network", ".", "apply", "(", "change_key", "(", "'search_mode'", ",", "'search'", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "#logger.log('Starting evaluating {:}'.format(epoch_info))", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "xloader", ")", ":", "\n", "# measure data loading time", "\n", "      ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# calculate prediction and loss", "\n", "targets", "=", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "logits", ",", "expected_flop", "=", "network", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "# record", "\n", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "(", "i", "+", "1", ")", "==", "len", "(", "xloader", ")", ":", "\n", "        ", "Sstr", "=", "'**VALID** '", "+", "time_string", "(", ")", "+", "' [{:}][{:03d}/{:03d}]'", ".", "format", "(", "extra_info", ",", "i", ",", "len", "(", "xloader", ")", ")", "\n", "Tstr", "=", "'Time {batch_time.val:.2f} ({batch_time.avg:.2f}) Data {data_time.val:.2f} ({data_time.avg:.2f})'", ".", "format", "(", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ")", "\n", "Lstr", "=", "'Loss {loss.val:.3f} ({loss.avg:.3f})  Prec@1 {top1.val:.2f} ({top1.avg:.2f}) Prec@5 {top5.val:.2f} ({top5.avg:.2f})'", ".", "format", "(", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "Istr", "=", "'Size={:}'", ".", "format", "(", "list", "(", "inputs", ".", "size", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "Sstr", "+", "' '", "+", "Tstr", "+", "' '", "+", "Lstr", "+", "' '", "+", "Istr", ")", "\n", "\n", "", "", "", "logger", ".", "log", "(", "' **VALID** Prec@1 {top1.avg:.2f} Prec@5 {top5.avg:.2f} Error@1 {error1:.2f} Error@5 {error5:.2f} Loss:{loss:.3f}'", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "error1", "=", "100", "-", "top1", ".", "avg", ",", "error5", "=", "100", "-", "top5", ".", "avg", ",", "loss", "=", "losses", ".", "avg", ")", ")", "\n", "\n", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.funcs_nasbench.pure_evaluate": [[17, 43], ["torch.nn.CrossEntropyLoss", "network.eval", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "torch.cuda.current_device", "torch.no_grad", "time.time", "enumerate", "len", "targets.cuda.cuda", "inputs.cuda.cuda", "data_time.update", "network", "criterion", "batch_time.update", "utils.obtain_accuracy", "losses.update", "top1.update", "top5.update", "time.time", "inputs.cuda.size", "latencies.append", "criterion.item", "inputs.cuda.size", "prec1.item", "inputs.cuda.size", "prec5.item", "inputs.cuda.size", "time.time", "time.time", "inputs.cuda.size"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "pure_evaluate", "(", "xloader", ",", "network", ",", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ")", ":", "\n", "  ", "data_time", ",", "batch_time", ",", "batch", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "None", "\n", "losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "latencies", ",", "device", "=", "[", "]", ",", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "network", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "xloader", ")", ":", "\n", "      ", "targets", "=", "targets", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "inputs", "=", "inputs", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# forward", "\n", "features", ",", "logits", "=", "network", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "batch", "is", "None", "or", "batch", "==", "inputs", ".", "size", "(", "0", ")", ":", "\n", "        ", "batch", "=", "inputs", ".", "size", "(", "0", ")", "\n", "latencies", ".", "append", "(", "batch_time", ".", "val", "-", "data_time", ".", "val", ")", "\n", "# record loss and accuracy", "\n", "", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "", "if", "len", "(", "latencies", ")", ">", "2", ":", "latencies", "=", "latencies", "[", "1", ":", "]", "\n", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "latencies", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.funcs_nasbench.procedure": [[46, 74], ["torch.cuda.current_device", "enumerate", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "network.train", "log_utils.AverageMeter", "log_utils.AverageMeter", "time.time", "targets.cuda.cuda", "network", "criterion", "utils.obtain_accuracy", "losses.update", "top1.update", "top5.update", "batch_time.update", "time.time", "network.eval", "ValueError", "scheduler.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "criterion.item", "inputs.size", "prec1.item", "inputs.size", "prec5.item", "inputs.size", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "def", "procedure", "(", "xloader", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "mode", ":", "str", ")", ":", "\n", "  ", "losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "if", "mode", "==", "'train'", ":", "network", ".", "train", "(", ")", "\n", "elif", "mode", "==", "'valid'", ":", "network", ".", "eval", "(", ")", "\n", "else", ":", "raise", "ValueError", "(", "\"The mode is not right : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "data_time", ",", "batch_time", ",", "end", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "xloader", ")", ":", "\n", "    ", "if", "mode", "==", "'train'", ":", "scheduler", ".", "update", "(", "None", ",", "1.0", "*", "i", "/", "len", "(", "xloader", ")", ")", "\n", "\n", "targets", "=", "targets", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "if", "mode", "==", "'train'", ":", "optimizer", ".", "zero_grad", "(", ")", "\n", "# forward", "\n", "features", ",", "logits", "=", "network", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "# backward", "\n", "if", "mode", "==", "'train'", ":", "\n", "      ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# record loss and accuracy", "\n", "", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "# count time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "batch_time", ".", "sum", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.funcs_nasbench.evaluate_for_seed": [[76, 135], ["procedures.prepare_seed", "models.get_cell_based_tiny_net", "utils.get_model_infos", "logger.log", "logger.log", "logger.log", "procedures.get_optim_scheduler", "torch.cuda.current_device", "torch.nn.DataParallel().cuda", "criterion.cuda.cuda", "range", "models.get_cell_based_tiny_net.parameters", "time.time", "log_utils.AverageMeter", "scheduler.update", "min", "funcs_nasbench.procedure", "epoch_time.update", "time.time", "logger.log", "arch_config._asdict", "opt_config._asdict", "models.get_cell_based_tiny_net.state_dict", "models.get_cell_based_tiny_net.get_message", "log_utils.time_string", "torch.nn.DataParallel", "scheduler.get_lr", "torch.no_grad", "valid_loaders.items", "log_utils.convert_secs2time", "funcs_nasbench.procedure", "time.time", "log_utils.time_string"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.starts.prepare_seed", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.utils.flop_benchmark.get_model_infos", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.get_optim_scheduler", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.basic_main.procedure", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.state_dict", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_width.InferWidthCifarResNet.get_message", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_string", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.LinearLR.get_lr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.convert_secs2time", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.basic_main.procedure", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_string"], ["", "def", "evaluate_for_seed", "(", "arch_config", ",", "opt_config", ",", "train_loader", ",", "valid_loaders", ",", "seed", ":", "int", ",", "logger", ")", ":", "\n", "\n", "  ", "prepare_seed", "(", "seed", ")", "# random seed", "\n", "net", "=", "get_cell_based_tiny_net", "(", "arch_config", ")", "\n", "#net = TinyNetwork(arch_config['channel'], arch_config['num_cells'], arch, config.class_num)", "\n", "flop", ",", "param", "=", "get_model_infos", "(", "net", ",", "opt_config", ".", "xshape", ")", "\n", "logger", ".", "log", "(", "'Network : {:}'", ".", "format", "(", "net", ".", "get_message", "(", ")", ")", ",", "False", ")", "\n", "logger", ".", "log", "(", "'{:} Seed-------------------------- {:} --------------------------'", ".", "format", "(", "time_string", "(", ")", ",", "seed", ")", ")", "\n", "logger", ".", "log", "(", "'FLOP = {:} MB, Param = {:} MB'", ".", "format", "(", "flop", ",", "param", ")", ")", "\n", "# train and valid", "\n", "optimizer", ",", "scheduler", ",", "criterion", "=", "get_optim_scheduler", "(", "net", ".", "parameters", "(", ")", ",", "opt_config", ")", "\n", "default_device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "network", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "default_device", "]", ")", ".", "cuda", "(", "device", "=", "default_device", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", "device", "=", "default_device", ")", "\n", "# start training", "\n", "start_time", ",", "epoch_time", ",", "total_epoch", "=", "time", ".", "time", "(", ")", ",", "AverageMeter", "(", ")", ",", "opt_config", ".", "epochs", "+", "opt_config", ".", "warmup", "\n", "train_losses", ",", "train_acc1es", ",", "train_acc5es", ",", "valid_losses", ",", "valid_acc1es", ",", "valid_acc5es", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "train_times", ",", "valid_times", ",", "lrs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "for", "epoch", "in", "range", "(", "total_epoch", ")", ":", "\n", "    ", "scheduler", ".", "update", "(", "epoch", ",", "0.0", ")", "\n", "lr", "=", "min", "(", "scheduler", ".", "get_lr", "(", ")", ")", "\n", "train_loss", ",", "train_acc1", ",", "train_acc5", ",", "train_tm", "=", "procedure", "(", "train_loader", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "'train'", ")", "\n", "train_losses", "[", "epoch", "]", "=", "train_loss", "\n", "train_acc1es", "[", "epoch", "]", "=", "train_acc1", "\n", "train_acc5es", "[", "epoch", "]", "=", "train_acc5", "\n", "train_times", "[", "epoch", "]", "=", "train_tm", "\n", "lrs", "[", "epoch", "]", "=", "lr", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "key", ",", "xloder", "in", "valid_loaders", ".", "items", "(", ")", ":", "\n", "        ", "valid_loss", ",", "valid_acc1", ",", "valid_acc5", ",", "valid_tm", "=", "procedure", "(", "xloder", ",", "network", ",", "criterion", ",", "None", ",", "None", ",", "'valid'", ")", "\n", "valid_losses", "[", "'{:}@{:}'", ".", "format", "(", "key", ",", "epoch", ")", "]", "=", "valid_loss", "\n", "valid_acc1es", "[", "'{:}@{:}'", ".", "format", "(", "key", ",", "epoch", ")", "]", "=", "valid_acc1", "\n", "valid_acc5es", "[", "'{:}@{:}'", ".", "format", "(", "key", ",", "epoch", ")", "]", "=", "valid_acc5", "\n", "valid_times", "[", "'{:}@{:}'", ".", "format", "(", "key", ",", "epoch", ")", "]", "=", "valid_tm", "\n", "\n", "# measure elapsed time", "\n", "", "", "epoch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "need_time", "=", "'Time Left: {:}'", ".", "format", "(", "convert_secs2time", "(", "epoch_time", ".", "avg", "*", "(", "total_epoch", "-", "epoch", "-", "1", ")", ",", "True", ")", ")", "\n", "logger", ".", "log", "(", "'{:} {:} epoch={:03d}/{:03d} :: Train [loss={:.5f}, acc@1={:.2f}%, acc@5={:.2f}%] Valid [loss={:.5f}, acc@1={:.2f}%, acc@5={:.2f}%], lr={:}'", ".", "format", "(", "time_string", "(", ")", ",", "need_time", ",", "epoch", ",", "total_epoch", ",", "train_loss", ",", "train_acc1", ",", "train_acc5", ",", "valid_loss", ",", "valid_acc1", ",", "valid_acc5", ",", "lr", ")", ")", "\n", "", "info_seed", "=", "{", "'flop'", ":", "flop", ",", "\n", "'param'", ":", "param", ",", "\n", "'arch_config'", ":", "arch_config", ".", "_asdict", "(", ")", ",", "\n", "'opt_config'", ":", "opt_config", ".", "_asdict", "(", ")", ",", "\n", "'total_epoch'", ":", "total_epoch", ",", "\n", "'train_losses'", ":", "train_losses", ",", "\n", "'train_acc1es'", ":", "train_acc1es", ",", "\n", "'train_acc5es'", ":", "train_acc5es", ",", "\n", "'train_times'", ":", "train_times", ",", "\n", "'valid_losses'", ":", "valid_losses", ",", "\n", "'valid_acc1es'", ":", "valid_acc1es", ",", "\n", "'valid_acc5es'", ":", "valid_acc5es", ",", "\n", "'valid_times'", ":", "valid_times", ",", "\n", "'learning_rates'", ":", "lrs", ",", "\n", "'net_state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'net_string'", ":", "'{:}'", ".", "format", "(", "net", ")", ",", "\n", "'finish-train'", ":", "True", "\n", "}", "\n", "return", "info_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.funcs_nasbench.get_nas_bench_loaders": [[137, 204], ["torch.set_num_threads", "pathlib.Path", "config_utils.load_config", "print", "print", "get_datasets", "print", "config_utils.load_config", "copy.deepcopy", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "print", "print", "get_datasets", "print", "config_utils.load_config", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "print", "config_utils.load_config", "get_datasets", "print", "config_utils.load_config", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "str", "str", "str", "log_utils.time_string", "len", "len", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "len", "len", "len", "len", "len", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "len", "len", "len", "len", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "len", "len", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.get_dataset_with_transform.get_datasets", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.get_dataset_with_transform.get_datasets", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.get_dataset_with_transform.get_datasets", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_string"], ["", "def", "get_nas_bench_loaders", "(", "workers", ")", ":", "\n", "\n", "  ", "torch", ".", "set_num_threads", "(", "workers", ")", "\n", "\n", "root_dir", "=", "(", "pathlib", ".", "Path", "(", "__file__", ")", ".", "parent", "/", "'..'", "/", "'..'", ")", ".", "resolve", "(", ")", "\n", "torch_dir", "=", "pathlib", ".", "Path", "(", "os", ".", "environ", "[", "'TORCH_HOME'", "]", ")", "\n", "# cifar", "\n", "cifar_config_path", "=", "root_dir", "/", "'configs'", "/", "'nas-benchmark'", "/", "'CIFAR.config'", "\n", "cifar_config", "=", "load_config", "(", "cifar_config_path", ",", "None", ",", "None", ")", "\n", "get_datasets", "=", "datasets", ".", "get_datasets", "# a function to return the dataset", "\n", "break_line", "=", "'-'", "*", "150", "\n", "print", "(", "'{:} Create data-loader for all datasets'", ".", "format", "(", "time_string", "(", ")", ")", ")", "\n", "print", "(", "break_line", ")", "\n", "TRAIN_CIFAR10", ",", "VALID_CIFAR10", ",", "xshape", ",", "class_num", "=", "get_datasets", "(", "'cifar10'", ",", "str", "(", "torch_dir", "/", "'cifar.python'", ")", ",", "-", "1", ")", "\n", "print", "(", "'original CIFAR-10 : {:} training images and {:} test images : {:} input shape : {:} number of classes'", ".", "format", "(", "len", "(", "TRAIN_CIFAR10", ")", ",", "len", "(", "VALID_CIFAR10", ")", ",", "xshape", ",", "class_num", ")", ")", "\n", "cifar10_splits", "=", "load_config", "(", "root_dir", "/", "'configs'", "/", "'nas-benchmark'", "/", "'cifar-split.txt'", ",", "None", ",", "None", ")", "\n", "assert", "cifar10_splits", ".", "train", "[", ":", "10", "]", "==", "[", "0", ",", "5", ",", "7", ",", "11", ",", "13", ",", "15", ",", "16", ",", "17", ",", "20", ",", "24", "]", "and", "cifar10_splits", ".", "valid", "[", ":", "10", "]", "==", "[", "1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "8", ",", "9", ",", "10", ",", "12", ",", "14", "]", "\n", "temp_dataset", "=", "copy", ".", "deepcopy", "(", "TRAIN_CIFAR10", ")", "\n", "temp_dataset", ".", "transform", "=", "VALID_CIFAR10", ".", "transform", "\n", "# data loader", "\n", "trainval_cifar10_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_CIFAR10", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_cifar10_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_CIFAR10", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar10_splits", ".", "train", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_cifar10_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "temp_dataset", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar10_splits", ".", "valid", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "test__cifar10_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "VALID_CIFAR10", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "print", "(", "'CIFAR-10  : trval-loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "trainval_cifar10_loader", ")", ",", "cifar_config", ".", "batch_size", ")", ")", "\n", "print", "(", "'CIFAR-10  : train-loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "train_cifar10_loader", ")", ",", "cifar_config", ".", "batch_size", ")", ")", "\n", "print", "(", "'CIFAR-10  : valid-loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "valid_cifar10_loader", ")", ",", "cifar_config", ".", "batch_size", ")", ")", "\n", "print", "(", "'CIFAR-10  : test--loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "test__cifar10_loader", ")", ",", "cifar_config", ".", "batch_size", ")", ")", "\n", "print", "(", "break_line", ")", "\n", "# CIFAR-100", "\n", "TRAIN_CIFAR100", ",", "VALID_CIFAR100", ",", "xshape", ",", "class_num", "=", "get_datasets", "(", "'cifar100'", ",", "str", "(", "torch_dir", "/", "'cifar.python'", ")", ",", "-", "1", ")", "\n", "print", "(", "'original CIFAR-100: {:} training images and {:} test images : {:} input shape : {:} number of classes'", ".", "format", "(", "len", "(", "TRAIN_CIFAR100", ")", ",", "len", "(", "VALID_CIFAR100", ")", ",", "xshape", ",", "class_num", ")", ")", "\n", "cifar100_splits", "=", "load_config", "(", "root_dir", "/", "'configs'", "/", "'nas-benchmark'", "/", "'cifar100-test-split.txt'", ",", "None", ",", "None", ")", "\n", "assert", "cifar100_splits", ".", "xvalid", "[", ":", "10", "]", "==", "[", "1", ",", "3", ",", "4", ",", "5", ",", "8", ",", "10", ",", "13", ",", "14", ",", "15", ",", "16", "]", "and", "cifar100_splits", ".", "xtest", "[", ":", "10", "]", "==", "[", "0", ",", "2", ",", "6", ",", "7", ",", "9", ",", "11", ",", "12", ",", "17", ",", "20", ",", "24", "]", "\n", "train_cifar100_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_CIFAR100", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_cifar100_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "VALID_CIFAR100", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar100_splits", ".", "xvalid", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "test__cifar100_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "VALID_CIFAR100", ",", "batch_size", "=", "cifar_config", ".", "batch_size", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar100_splits", ".", "xtest", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "print", "(", "'CIFAR-100  : train-loader has {:3d} batch'", ".", "format", "(", "len", "(", "train_cifar100_loader", ")", ")", ")", "\n", "print", "(", "'CIFAR-100  : valid-loader has {:3d} batch'", ".", "format", "(", "len", "(", "valid_cifar100_loader", ")", ")", ")", "\n", "print", "(", "'CIFAR-100  : test--loader has {:3d} batch'", ".", "format", "(", "len", "(", "test__cifar100_loader", ")", ")", ")", "\n", "print", "(", "break_line", ")", "\n", "\n", "imagenet16_config_path", "=", "'configs/nas-benchmark/ImageNet-16.config'", "\n", "imagenet16_config", "=", "load_config", "(", "imagenet16_config_path", ",", "None", ",", "None", ")", "\n", "TRAIN_ImageNet16_120", ",", "VALID_ImageNet16_120", ",", "xshape", ",", "class_num", "=", "get_datasets", "(", "'ImageNet16-120'", ",", "str", "(", "torch_dir", "/", "'cifar.python'", "/", "'ImageNet16'", ")", ",", "-", "1", ")", "\n", "print", "(", "'original TRAIN_ImageNet16_120: {:} training images and {:} test images : {:} input shape : {:} number of classes'", ".", "format", "(", "len", "(", "TRAIN_ImageNet16_120", ")", ",", "len", "(", "VALID_ImageNet16_120", ")", ",", "xshape", ",", "class_num", ")", ")", "\n", "imagenet_splits", "=", "load_config", "(", "root_dir", "/", "'configs'", "/", "'nas-benchmark'", "/", "'imagenet-16-120-test-split.txt'", ",", "None", ",", "None", ")", "\n", "assert", "imagenet_splits", ".", "xvalid", "[", ":", "10", "]", "==", "[", "1", ",", "2", ",", "3", ",", "6", ",", "7", ",", "8", ",", "9", ",", "12", ",", "16", ",", "18", "]", "and", "imagenet_splits", ".", "xtest", "[", ":", "10", "]", "==", "[", "0", ",", "4", ",", "5", ",", "10", ",", "11", ",", "13", ",", "14", ",", "15", ",", "17", ",", "20", "]", "\n", "train_imagenet_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_ImageNet16_120", ",", "batch_size", "=", "imagenet16_config", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_imagenet_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "VALID_ImageNet16_120", ",", "batch_size", "=", "imagenet16_config", ".", "batch_size", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "imagenet_splits", ".", "xvalid", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "test__imagenet_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "VALID_ImageNet16_120", ",", "batch_size", "=", "imagenet16_config", ".", "batch_size", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "imagenet_splits", ".", "xtest", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "print", "(", "'ImageNet-16-120  : train-loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "train_imagenet_loader", ")", ",", "imagenet16_config", ".", "batch_size", ")", ")", "\n", "print", "(", "'ImageNet-16-120  : valid-loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "valid_imagenet_loader", ")", ",", "imagenet16_config", ".", "batch_size", ")", ")", "\n", "print", "(", "'ImageNet-16-120  : test--loader has {:3d} batch with {:} per batch'", ".", "format", "(", "len", "(", "test__imagenet_loader", ")", ",", "imagenet16_config", ".", "batch_size", ")", ")", "\n", "\n", "# 'cifar10', 'cifar100', 'ImageNet16-120'", "\n", "loaders", "=", "{", "'cifar10@trainval'", ":", "trainval_cifar10_loader", ",", "\n", "'cifar10@train'", ":", "train_cifar10_loader", ",", "\n", "'cifar10@valid'", ":", "valid_cifar10_loader", ",", "\n", "'cifar10@test'", ":", "test__cifar10_loader", ",", "\n", "'cifar100@train'", ":", "train_cifar100_loader", ",", "\n", "'cifar100@valid'", ":", "valid_cifar100_loader", ",", "\n", "'cifar100@test'", ":", "test__cifar100_loader", ",", "\n", "'ImageNet16-120@train'", ":", "train_imagenet_loader", ",", "\n", "'ImageNet16-120@valid'", ":", "valid_imagenet_loader", ",", "\n", "'ImageNet16-120@test'", ":", "test__imagenet_loader", "}", "\n", "return", "loaders", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.simple_KD_main.simple_KD_train": [[11, 14], ["simple_KD_main.procedure"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.basic_main.procedure"], ["def", "simple_KD_train", "(", "xloader", ",", "teacher", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "loss", ",", "acc1", ",", "acc5", "=", "procedure", "(", "xloader", ",", "teacher", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "'train'", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", "\n", "return", "loss", ",", "acc1", ",", "acc5", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.simple_KD_main.simple_KD_valid": [[15, 19], ["torch.no_grad", "torch.no_grad", "simple_KD_main.procedure"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.basic_main.procedure"], ["", "def", "simple_KD_valid", "(", "xloader", ",", "teacher", ",", "network", ",", "criterion", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "loss", ",", "acc1", ",", "acc5", "=", "procedure", "(", "xloader", ",", "teacher", ",", "network", ",", "criterion", ",", "None", ",", "None", ",", "'valid'", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", "\n", "", "return", "loss", ",", "acc1", ",", "acc5", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.simple_KD_main.loss_KD_fn": [[21, 27], ["torch.log_softmax", "torch.softmax", "criterion", "torch.kl_div"], "function", ["None"], ["", "def", "loss_KD_fn", "(", "criterion", ",", "student_logits", ",", "teacher_logits", ",", "studentFeatures", ",", "teacherFeatures", ",", "targets", ",", "alpha", ",", "temperature", ")", ":", "\n", "  ", "basic_loss", "=", "criterion", "(", "student_logits", ",", "targets", ")", "*", "(", "1.", "-", "alpha", ")", "\n", "log_student", "=", "F", ".", "log_softmax", "(", "student_logits", "/", "temperature", ",", "dim", "=", "1", ")", "\n", "sof_teacher", "=", "F", ".", "softmax", "(", "teacher_logits", "/", "temperature", ",", "dim", "=", "1", ")", "\n", "KD_loss", "=", "F", ".", "kl_div", "(", "log_student", ",", "sof_teacher", ",", "reduction", "=", "'batchmean'", ")", "*", "(", "alpha", "*", "temperature", "*", "temperature", ")", "\n", "return", "basic_loss", "+", "KD_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.simple_KD_main.procedure": [[29, 95], ["teacher.eval", "logger.log", "time.time", "enumerate", "logger.log", "logger.log", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "network.train", "data_time.update", "targets.cuda.cuda", "network", "isinstance", "simple_KD_main.loss_KD_fn", "utils.obtain_accuracy", "losses.update", "top1.update", "top5.update", "utils.obtain_accuracy", "Ttop1.update", "Ttop5.update", "batch_time.update", "time.time", "network.eval", "ValueError", "scheduler.update", "optimizer.zero_grad", "torch.no_grad", "torch.no_grad", "teacher", "hasattr", "criterion", "loss_KD_fn.backward", "optimizer.step", "loss_KD_fn.item", "inputs.size", "sprec1.item", "inputs.size", "sprec5.item", "inputs.size", "tprec1.item", "inputs.size", "tprec5.item", "inputs.size", "logger.log", "mode.upper", "hasattr", "time.time", "len", "len", "time.time", "len", "list", "mode.upper", "len", "log_utils.time_string", "len", "scheduler.get_min_info", "inputs.size", "mode.upper"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.simple_KD_main.loss_KD_fn", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_string", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.get_min_info"], ["", "def", "procedure", "(", "xloader", ",", "teacher", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "mode", ",", "config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "data_time", ",", "batch_time", ",", "losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "Ttop1", ",", "Ttop5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "    ", "network", ".", "train", "(", ")", "\n", "", "elif", "mode", "==", "'valid'", ":", "\n", "    ", "network", ".", "eval", "(", ")", "\n", "", "else", ":", "raise", "ValueError", "(", "\"The mode is not right : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "teacher", ".", "eval", "(", ")", "\n", "\n", "logger", ".", "log", "(", "'[{:5s}] config :: auxiliary={:}, KD :: [alpha={:.2f}, temperature={:.2f}]'", ".", "format", "(", "mode", ",", "config", ".", "auxiliary", "if", "hasattr", "(", "config", ",", "'auxiliary'", ")", "else", "-", "1", ",", "config", ".", "KD_alpha", ",", "config", ".", "KD_temperature", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "xloader", ")", ":", "\n", "    ", "if", "mode", "==", "'train'", ":", "scheduler", ".", "update", "(", "None", ",", "1.0", "*", "i", "/", "len", "(", "xloader", ")", ")", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# calculate prediction and loss", "\n", "targets", "=", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "student_f", ",", "logits", "=", "network", "(", "inputs", ")", "\n", "if", "isinstance", "(", "logits", ",", "list", ")", ":", "\n", "      ", "assert", "len", "(", "logits", ")", "==", "2", ",", "'logits must has {:} items instead of {:}'", ".", "format", "(", "2", ",", "len", "(", "logits", ")", ")", "\n", "logits", ",", "logits_aux", "=", "logits", "\n", "", "else", ":", "\n", "      ", "logits", ",", "logits_aux", "=", "logits", ",", "None", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "teacher_f", ",", "teacher_logits", "=", "teacher", "(", "inputs", ")", "\n", "\n", "", "loss", "=", "loss_KD_fn", "(", "criterion", ",", "logits", ",", "teacher_logits", ",", "student_f", ",", "teacher_f", ",", "targets", ",", "config", ".", "KD_alpha", ",", "config", ".", "KD_temperature", ")", "\n", "if", "config", "is", "not", "None", "and", "hasattr", "(", "config", ",", "'auxiliary'", ")", "and", "config", ".", "auxiliary", ">", "0", ":", "\n", "      ", "loss_aux", "=", "criterion", "(", "logits_aux", ",", "targets", ")", "\n", "loss", "+=", "config", ".", "auxiliary", "*", "loss_aux", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "      ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# record", "\n", "", "sprec1", ",", "sprec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "sprec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "sprec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "# teacher", "\n", "tprec1", ",", "tprec5", "=", "obtain_accuracy", "(", "teacher_logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "Ttop1", ".", "update", "(", "tprec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "Ttop5", ".", "update", "(", "tprec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "(", "i", "+", "1", ")", "==", "len", "(", "xloader", ")", ":", "\n", "      ", "Sstr", "=", "' {:5s} '", ".", "format", "(", "mode", ".", "upper", "(", ")", ")", "+", "time_string", "(", ")", "+", "' [{:}][{:03d}/{:03d}]'", ".", "format", "(", "extra_info", ",", "i", ",", "len", "(", "xloader", ")", ")", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "        ", "Sstr", "+=", "' {:}'", ".", "format", "(", "scheduler", ".", "get_min_info", "(", ")", ")", "\n", "", "Tstr", "=", "'Time {batch_time.val:.2f} ({batch_time.avg:.2f}) Data {data_time.val:.2f} ({data_time.avg:.2f})'", ".", "format", "(", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ")", "\n", "Lstr", "=", "'Loss {loss.val:.3f} ({loss.avg:.3f})  Prec@1 {top1.val:.2f} ({top1.avg:.2f}) Prec@5 {top5.val:.2f} ({top5.avg:.2f})'", ".", "format", "(", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "Lstr", "+=", "' Teacher : acc@1={:.2f}, acc@5={:.2f}'", ".", "format", "(", "Ttop1", ".", "avg", ",", "Ttop5", ".", "avg", ")", "\n", "Istr", "=", "'Size={:}'", ".", "format", "(", "list", "(", "inputs", ".", "size", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "Sstr", "+", "' '", "+", "Tstr", "+", "' '", "+", "Lstr", "+", "' '", "+", "Istr", ")", "\n", "\n", "", "", "logger", ".", "log", "(", "' **{:5s}** accuracy drop :: @1={:.2f}, @5={:.2f}'", ".", "format", "(", "mode", ".", "upper", "(", ")", ",", "Ttop1", ".", "avg", "-", "top1", ".", "avg", ",", "Ttop5", ".", "avg", "-", "top5", ".", "avg", ")", ")", "\n", "logger", ".", "log", "(", "' **{mode:5s}** Prec@1 {top1.avg:.2f} Prec@5 {top5.avg:.2f} Error@1 {error1:.2f} Error@5 {error5:.2f} Loss:{loss:.3f}'", ".", "format", "(", "mode", "=", "mode", ".", "upper", "(", ")", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "error1", "=", "100", "-", "top1", ".", "avg", ",", "error5", "=", "100", "-", "top5", ".", "avg", ",", "loss", "=", "losses", ".", "avg", ")", ")", "\n", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.basic_main.basic_train": [[9, 12], ["basic_main.procedure"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.basic_main.procedure"], ["def", "basic_train", "(", "xloader", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "loss", ",", "acc1", ",", "acc5", "=", "procedure", "(", "xloader", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "'train'", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", "\n", "return", "loss", ",", "acc1", ",", "acc5", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.basic_main.basic_valid": [[14, 18], ["torch.no_grad", "basic_main.procedure"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.basic_main.procedure"], ["", "def", "basic_valid", "(", "xloader", ",", "network", ",", "criterion", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "loss", ",", "acc1", ",", "acc5", "=", "procedure", "(", "xloader", ",", "network", ",", "criterion", ",", "None", ",", "None", ",", "'valid'", ",", "None", ",", "extra_info", ",", "print_freq", ",", "logger", ")", "\n", "", "return", "loss", ",", "acc1", ",", "acc5", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.basic_main.procedure": [[20, 76], ["logger.log", "time.time", "enumerate", "logger.log", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "network.train", "data_time.update", "targets.cuda.cuda", "network", "isinstance", "criterion", "utils.obtain_accuracy", "losses.update", "top1.update", "top5.update", "batch_time.update", "time.time", "network.eval", "ValueError", "scheduler.update", "optimizer.zero_grad", "hasattr", "criterion", "criterion.backward", "optimizer.step", "criterion.item", "inputs.size", "prec1.item", "inputs.size", "prec5.item", "inputs.size", "logger.log", "hasattr", "time.time", "len", "len", "time.time", "len", "list", "mode.upper", "len", "log_utils.time_string", "len", "scheduler.get_min_info", "inputs.size", "mode.upper"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_string", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.get_min_info"], ["", "def", "procedure", "(", "xloader", ",", "network", ",", "criterion", ",", "scheduler", ",", "optimizer", ",", "mode", ",", "config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "data_time", ",", "batch_time", ",", "losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "    ", "network", ".", "train", "(", ")", "\n", "", "elif", "mode", "==", "'valid'", ":", "\n", "    ", "network", ".", "eval", "(", ")", "\n", "", "else", ":", "raise", "ValueError", "(", "\"The mode is not right : {:}\"", ".", "format", "(", "mode", ")", ")", "\n", "\n", "#logger.log('[{:5s}] config ::  auxiliary={:}, message={:}'.format(mode, config.auxiliary if hasattr(config, 'auxiliary') else -1, network.module.get_message()))", "\n", "logger", ".", "log", "(", "'[{:5s}] config ::  auxiliary={:}'", ".", "format", "(", "mode", ",", "config", ".", "auxiliary", "if", "hasattr", "(", "config", ",", "'auxiliary'", ")", "else", "-", "1", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "xloader", ")", ":", "\n", "    ", "if", "mode", "==", "'train'", ":", "scheduler", ".", "update", "(", "None", ",", "1.0", "*", "i", "/", "len", "(", "xloader", ")", ")", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# calculate prediction and loss", "\n", "targets", "=", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "features", ",", "logits", "=", "network", "(", "inputs", ")", "\n", "if", "isinstance", "(", "logits", ",", "list", ")", ":", "\n", "      ", "assert", "len", "(", "logits", ")", "==", "2", ",", "'logits must has {:} items instead of {:}'", ".", "format", "(", "2", ",", "len", "(", "logits", ")", ")", "\n", "logits", ",", "logits_aux", "=", "logits", "\n", "", "else", ":", "\n", "      ", "logits", ",", "logits_aux", "=", "logits", ",", "None", "\n", "", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "if", "config", "is", "not", "None", "and", "hasattr", "(", "config", ",", "'auxiliary'", ")", "and", "config", ".", "auxiliary", ">", "0", ":", "\n", "      ", "loss_aux", "=", "criterion", "(", "logits_aux", ",", "targets", ")", "\n", "loss", "+=", "config", ".", "auxiliary", "*", "loss_aux", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "      ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# record", "\n", "", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "(", "i", "+", "1", ")", "==", "len", "(", "xloader", ")", ":", "\n", "      ", "Sstr", "=", "' {:5s} '", ".", "format", "(", "mode", ".", "upper", "(", ")", ")", "+", "time_string", "(", ")", "+", "' [{:}][{:03d}/{:03d}]'", ".", "format", "(", "extra_info", ",", "i", ",", "len", "(", "xloader", ")", ")", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "        ", "Sstr", "+=", "' {:}'", ".", "format", "(", "scheduler", ".", "get_min_info", "(", ")", ")", "\n", "", "Tstr", "=", "'Time {batch_time.val:.2f} ({batch_time.avg:.2f}) Data {data_time.val:.2f} ({data_time.avg:.2f})'", ".", "format", "(", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ")", "\n", "Lstr", "=", "'Loss {loss.val:.3f} ({loss.avg:.3f})  Prec@1 {top1.val:.2f} ({top1.avg:.2f}) Prec@5 {top5.val:.2f} ({top5.avg:.2f})'", ".", "format", "(", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "Istr", "=", "'Size={:}'", ".", "format", "(", "list", "(", "inputs", ".", "size", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "Sstr", "+", "' '", "+", "Tstr", "+", "' '", "+", "Lstr", "+", "' '", "+", "Istr", ")", "\n", "\n", "", "", "logger", ".", "log", "(", "' **{mode:5s}** Prec@1 {top1.avg:.2f} Prec@5 {top5.avg:.2f} Error@1 {error1:.2f} Error@5 {error5:.2f} Loss:{loss:.3f}'", ".", "format", "(", "mode", "=", "mode", ".", "upper", "(", ")", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "error1", "=", "100", "-", "top1", ".", "avg", ",", "error5", "=", "100", "-", "top5", ".", "avg", ",", "loss", "=", "losses", ".", "avg", ")", ")", "\n", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.search_main_v2.get_flop_loss": [[10, 22], ["torch.mean", "torch.log", "torch.log", "torch.log.item"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log"], ["def", "get_flop_loss", "(", "expected_flop", ",", "flop_cur", ",", "flop_need", ",", "flop_tolerant", ")", ":", "\n", "  ", "expected_flop", "=", "torch", ".", "mean", "(", "expected_flop", ")", "\n", "\n", "if", "flop_cur", "<", "flop_need", "-", "flop_tolerant", ":", "# Too Small FLOP", "\n", "    ", "loss", "=", "-", "torch", ".", "log", "(", "expected_flop", ")", "\n", "#elif flop_cur > flop_need + flop_tolerant: # Too Large FLOP", "\n", "", "elif", "flop_cur", ">", "flop_need", ":", "# Too Large FLOP", "\n", "    ", "loss", "=", "torch", ".", "log", "(", "expected_flop", ")", "\n", "", "else", ":", "# Required FLOP", "\n", "    ", "loss", "=", "None", "\n", "", "if", "loss", "is", "None", ":", "return", "0", ",", "0", "\n", "else", ":", "return", "loss", ",", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.search_main_v2.search_train_v2": [[24, 88], ["network.train", "logger.log", "time.time", "network.apply", "enumerate", "logger.log", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "log_utils.AverageMeter", "models.change_key", "scheduler.update", "base_targets.cuda.cuda", "arch_targets.cuda.cuda", "data_time.update", "base_optimizer.zero_grad", "network", "criterion", "criterion.backward", "base_optimizer.step", "utils.obtain_accuracy", "base_losses.update", "top1.update", "top5.update", "arch_optimizer.zero_grad", "network", "network.module.get_flop", "search_main_v2.get_flop_loss", "criterion", "arch_loss.backward", "arch_optimizer.step", "arch_losses.update", "arch_flop_losses.update", "arch_cls_losses.update", "batch_time.update", "time.time", "criterion.item", "base_inputs.size", "prec1.item", "base_inputs.size", "prec5.item", "base_inputs.size", "arch_loss.item", "arch_inputs.size", "arch_inputs.size", "criterion.item", "arch_inputs.size", "logger.log", "len", "time.time", "time.time", "len", "log_utils.time_string", "len"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.change_key", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_flop", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.search_main_v2.get_flop_loss", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_string"], ["", "def", "search_train_v2", "(", "search_loader", ",", "network", ",", "criterion", ",", "scheduler", ",", "base_optimizer", ",", "arch_optimizer", ",", "optim_config", ",", "extra_info", ",", "print_freq", ",", "logger", ")", ":", "\n", "  ", "data_time", ",", "batch_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "base_losses", ",", "arch_losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "arch_cls_losses", ",", "arch_flop_losses", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "epoch_str", ",", "flop_need", ",", "flop_weight", ",", "flop_tolerant", "=", "extra_info", "[", "'epoch-str'", "]", ",", "extra_info", "[", "'FLOP-exp'", "]", ",", "extra_info", "[", "'FLOP-weight'", "]", ",", "extra_info", "[", "'FLOP-tolerant'", "]", "\n", "\n", "network", ".", "train", "(", ")", "\n", "logger", ".", "log", "(", "'[Search] : {:}, FLOP-Require={:.2f} MB, FLOP-WEIGHT={:.2f}'", ".", "format", "(", "epoch_str", ",", "flop_need", ",", "flop_weight", ")", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "network", ".", "apply", "(", "change_key", "(", "'search_mode'", ",", "'search'", ")", ")", "\n", "for", "step", ",", "(", "base_inputs", ",", "base_targets", ",", "arch_inputs", ",", "arch_targets", ")", "in", "enumerate", "(", "search_loader", ")", ":", "\n", "    ", "scheduler", ".", "update", "(", "None", ",", "1.0", "*", "step", "/", "len", "(", "search_loader", ")", ")", "\n", "# calculate prediction and loss", "\n", "base_targets", "=", "base_targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "arch_targets", "=", "arch_targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "# measure data loading time", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "# update the weights", "\n", "base_optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "expected_flop", "=", "network", "(", "base_inputs", ")", "\n", "base_loss", "=", "criterion", "(", "logits", ",", "base_targets", ")", "\n", "base_loss", ".", "backward", "(", ")", "\n", "base_optimizer", ".", "step", "(", ")", "\n", "# record", "\n", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "base_targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "base_losses", ".", "update", "(", "base_loss", ".", "item", "(", ")", ",", "base_inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "base_inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "base_inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# update the architecture", "\n", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "expected_flop", "=", "network", "(", "arch_inputs", ")", "\n", "flop_cur", "=", "network", ".", "module", ".", "get_flop", "(", "'genotype'", ",", "None", ",", "None", ")", "\n", "flop_loss", ",", "flop_loss_scale", "=", "get_flop_loss", "(", "expected_flop", ",", "flop_cur", ",", "flop_need", ",", "flop_tolerant", ")", "\n", "acls_loss", "=", "criterion", "(", "logits", ",", "arch_targets", ")", "\n", "arch_loss", "=", "acls_loss", "+", "flop_loss", "*", "flop_weight", "\n", "arch_loss", ".", "backward", "(", ")", "\n", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# record", "\n", "arch_losses", ".", "update", "(", "arch_loss", ".", "item", "(", ")", ",", "arch_inputs", ".", "size", "(", "0", ")", ")", "\n", "arch_flop_losses", ".", "update", "(", "flop_loss_scale", ",", "arch_inputs", ".", "size", "(", "0", ")", ")", "\n", "arch_cls_losses", ".", "update", "(", "acls_loss", ".", "item", "(", ")", ",", "arch_inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "step", "%", "print_freq", "==", "0", "or", "(", "step", "+", "1", ")", "==", "len", "(", "search_loader", ")", ":", "\n", "      ", "Sstr", "=", "'**TRAIN** '", "+", "time_string", "(", ")", "+", "' [{:}][{:03d}/{:03d}]'", ".", "format", "(", "epoch_str", ",", "step", ",", "len", "(", "search_loader", ")", ")", "\n", "Tstr", "=", "'Time {batch_time.val:.2f} ({batch_time.avg:.2f}) Data {data_time.val:.2f} ({data_time.avg:.2f})'", ".", "format", "(", "batch_time", "=", "batch_time", ",", "data_time", "=", "data_time", ")", "\n", "Lstr", "=", "'Base-Loss {loss.val:.3f} ({loss.avg:.3f})  Prec@1 {top1.val:.2f} ({top1.avg:.2f}) Prec@5 {top5.val:.2f} ({top5.avg:.2f})'", ".", "format", "(", "loss", "=", "base_losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", "\n", "Vstr", "=", "'Acls-loss {aloss.val:.3f} ({aloss.avg:.3f}) FLOP-Loss {floss.val:.3f} ({floss.avg:.3f}) Arch-Loss {loss.val:.3f} ({loss.avg:.3f})'", ".", "format", "(", "aloss", "=", "arch_cls_losses", ",", "floss", "=", "arch_flop_losses", ",", "loss", "=", "arch_losses", ")", "\n", "logger", ".", "log", "(", "Sstr", "+", "' '", "+", "Tstr", "+", "' '", "+", "Lstr", "+", "' '", "+", "Vstr", ")", "\n", "#num_bytes = torch.cuda.max_memory_allocated( next(network.parameters()).device ) * 1.0", "\n", "#logger.log(Sstr + ' ' + Tstr + ' ' + Lstr + ' ' + Vstr + ' GPU={:.2f}MB'.format(num_bytes/1e6))", "\n", "#Istr = 'Bsz={:} Asz={:}'.format(list(base_inputs.size()), list(arch_inputs.size()))", "\n", "#logger.log(Sstr + ' ' + Tstr + ' ' + Lstr + ' ' + Vstr + ' ' + Istr)", "\n", "#print(network.module.get_arch_info())", "\n", "#print(network.module.width_attentions[0])", "\n", "#print(network.module.width_attentions[1])", "\n", "\n", "", "", "logger", ".", "log", "(", "' **TRAIN** Prec@1 {top1.avg:.2f} Prec@5 {top5.avg:.2f} Error@1 {error1:.2f} Error@5 {error5:.2f} Base-Loss:{baseloss:.3f}, Arch-Loss={archloss:.3f}'", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "error1", "=", "100", "-", "top1", ".", "avg", ",", "error5", "=", "100", "-", "top5", ".", "avg", ",", "baseloss", "=", "base_losses", ".", "avg", ",", "archloss", "=", "arch_losses", ".", "avg", ")", ")", "\n", "return", "base_losses", ".", "avg", ",", "arch_losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.__init__.get_procedures": [[10, 26], ["None"], "function", ["None"], ["\n", "from", ".", "configure_utils", "import", "load_config", ",", "dict2config", ",", "configure2str", "\n", "from", ".", "basic_args", "import", "obtain_basic_args", "\n", "from", ".", "attention_args", "import", "obtain_attention_args", "\n", "from", ".", "random_baseline", "import", "obtain_RandomSearch_args", "\n", "from", ".", "cls_kd_args", "import", "obtain_cls_kd_args", "\n", "from", ".", "cls_init_args", "import", "obtain_cls_init_args", "\n", "from", ".", "search_single_args", "import", "obtain_search_single_args", "\n", "from", ".", "search_args", "import", "obtain_search_args", "\n", "# for network pruning", "\n", "from", ".", "pruning_args", "import", "obtain_pruning_args", "\n", "\n", "# utility function", "\n", "from", ".", "flop_benchmark", "import", "get_model_infos", ",", "count_parameters_in_MB", "\n", "from", ".", "evaluation_utils", "import", "obtain_accuracy", "\n", "from", "cell_operations", "import", "ResNetBasicblock", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.__init__": [[12, 23], ["list", "isinstance", "TypeError", "group.setdefault", "map", "type"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_epochs", ",", "epochs", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "      ", "raise", "TypeError", "(", "'{:} is not an Optimizer'", ".", "format", "(", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "      ", "group", ".", "setdefault", "(", "'initial_lr'", ",", "group", "[", "'lr'", "]", ")", "\n", "", "self", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'initial_lr'", "]", ",", "optimizer", ".", "param_groups", ")", ")", "\n", "self", ".", "max_epochs", "=", "epochs", "\n", "self", ".", "warmup_epochs", "=", "warmup_epochs", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "current_iter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.extra_repr": [[24, 26], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.__repr__": [[27, 30], ["optimizers._LRScheduler.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(warmup={warmup_epochs}, max-epoch={max_epochs}, current::epoch={current_epoch}, iter={current_iter:.2f}'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "+", "', {:})'", ".", "format", "(", "self", ".", "extra_repr", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.state_dict": [[31, 33], ["optimizers._LRScheduler.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "    ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.load_state_dict": [[34, 36], ["optimizers._LRScheduler.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "    ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.get_lr": [[37, 39], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.get_min_info": [[40, 43], ["optimizers._LRScheduler.get_lr", "min", "max"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.LinearLR.get_lr"], ["", "def", "get_min_info", "(", "self", ")", ":", "\n", "    ", "lrs", "=", "self", ".", "get_lr", "(", ")", "\n", "return", "'#LR=[{:.6f}~{:.6f}] epoch={:03d}, iter={:4.2f}#'", ".", "format", "(", "min", "(", "lrs", ")", ",", "max", "(", "lrs", ")", ",", "self", ".", "current_epoch", ",", "self", ".", "current_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.get_min_lr": [[44, 46], ["min", "optimizers._LRScheduler.get_lr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.LinearLR.get_lr"], ["", "def", "get_min_lr", "(", "self", ")", ":", "\n", "    ", "return", "min", "(", "self", ".", "get_lr", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.update": [[47, 56], ["zip", "optimizers._LRScheduler.get_lr", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.LinearLR.get_lr"], ["", "def", "update", "(", "self", ",", "cur_epoch", ",", "cur_iter", ")", ":", "\n", "    ", "if", "cur_epoch", "is", "not", "None", ":", "\n", "      ", "assert", "isinstance", "(", "cur_epoch", ",", "int", ")", "and", "cur_epoch", ">=", "0", ",", "'invalid cur-epoch : {:}'", ".", "format", "(", "cur_epoch", ")", "\n", "self", ".", "current_epoch", "=", "cur_epoch", "\n", "", "if", "cur_iter", "is", "not", "None", ":", "\n", "      ", "assert", "isinstance", "(", "cur_iter", ",", "float", ")", "and", "cur_iter", ">=", "0", ",", "'invalid cur-iter : {:}'", ".", "format", "(", "cur_iter", ")", "\n", "self", ".", "current_iter", "=", "cur_iter", "\n", "", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "get_lr", "(", ")", ")", ":", "\n", "      ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.CosineAnnealingLR.__init__": [[61, 65], ["optimizers._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_epochs", ",", "epochs", ",", "T_max", ",", "eta_min", ")", ":", "\n", "    ", "self", ".", "T_max", "=", "T_max", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "super", "(", "CosineAnnealingLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "warmup_epochs", ",", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.CosineAnnealingLR.extra_repr": [[66, 68], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'type={:}, T-max={:}, eta-min={:}'", ".", "format", "(", "'cosine'", ",", "self", ".", "T_max", ",", "self", ".", "eta_min", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.CosineAnnealingLR.get_lr": [[69, 85], ["lrs.append", "math.cos"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", ":", "\n", "      ", "if", "self", ".", "current_epoch", ">=", "self", ".", "warmup_epochs", "and", "self", ".", "current_epoch", "<", "self", ".", "max_epochs", ":", "\n", "        ", "last_epoch", "=", "self", ".", "current_epoch", "-", "self", ".", "warmup_epochs", "\n", "#if last_epoch < self.T_max:", "\n", "#if last_epoch < self.max_epochs:", "\n", "lr", "=", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "last_epoch", "/", "self", ".", "T_max", ")", ")", "/", "2", "\n", "#else:", "\n", "#  lr = self.eta_min + (base_lr - self.eta_min) * (1 + math.cos(math.pi * (self.T_max-1.0) / self.T_max)) / 2", "\n", "", "elif", "self", ".", "current_epoch", ">=", "self", ".", "max_epochs", ":", "\n", "        ", "lr", "=", "self", ".", "eta_min", "\n", "", "else", ":", "\n", "        ", "lr", "=", "(", "self", ".", "current_epoch", "/", "self", ".", "warmup_epochs", "+", "self", ".", "current_iter", "/", "self", ".", "warmup_epochs", ")", "*", "base_lr", "\n", "", "lrs", ".", "append", "(", "lr", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.MultiStepLR.__init__": [[90, 95], ["optimizers._LRScheduler.__init__", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_epochs", ",", "epochs", ",", "milestones", ",", "gammas", ")", ":", "\n", "    ", "assert", "len", "(", "milestones", ")", "==", "len", "(", "gammas", ")", ",", "'invalid {:} vs {:}'", ".", "format", "(", "len", "(", "milestones", ")", ",", "len", "(", "gammas", ")", ")", "\n", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gammas", "=", "gammas", "\n", "super", "(", "MultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "warmup_epochs", ",", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.MultiStepLR.extra_repr": [[96, 98], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'type={:}, milestones={:}, gammas={:}, base-lrs={:}'", ".", "format", "(", "'multistep'", ",", "self", ".", "milestones", ",", "self", ".", "gammas", ",", "self", ".", "base_lrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.MultiStepLR.get_lr": [[99, 111], ["lrs.append", "bisect.bisect_right"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", ":", "\n", "      ", "if", "self", ".", "current_epoch", ">=", "self", ".", "warmup_epochs", ":", "\n", "        ", "last_epoch", "=", "self", ".", "current_epoch", "-", "self", ".", "warmup_epochs", "\n", "idx", "=", "bisect_right", "(", "self", ".", "milestones", ",", "last_epoch", ")", "\n", "lr", "=", "base_lr", "\n", "for", "x", "in", "self", ".", "gammas", "[", ":", "idx", "]", ":", "lr", "*=", "x", "\n", "", "else", ":", "\n", "        ", "lr", "=", "(", "self", ".", "current_epoch", "/", "self", ".", "warmup_epochs", "+", "self", ".", "current_iter", "/", "self", ".", "warmup_epochs", ")", "*", "base_lr", "\n", "", "lrs", ".", "append", "(", "lr", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.ExponentialLR.__init__": [[115, 118], ["optimizers._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_epochs", ",", "epochs", ",", "gamma", ")", ":", "\n", "    ", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", "ExponentialLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "warmup_epochs", ",", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.ExponentialLR.extra_repr": [[119, 121], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'type={:}, gamma={:}, base-lrs={:}'", ".", "format", "(", "'exponential'", ",", "self", ".", "gamma", ",", "self", ".", "base_lrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.ExponentialLR.get_lr": [[122, 133], ["lrs.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", ":", "\n", "      ", "if", "self", ".", "current_epoch", ">=", "self", ".", "warmup_epochs", ":", "\n", "        ", "last_epoch", "=", "self", ".", "current_epoch", "-", "self", ".", "warmup_epochs", "\n", "assert", "last_epoch", ">=", "0", ",", "'invalid last_epoch : {:}'", ".", "format", "(", "last_epoch", ")", "\n", "lr", "=", "base_lr", "*", "(", "self", ".", "gamma", "**", "last_epoch", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "(", "self", ".", "current_epoch", "/", "self", ".", "warmup_epochs", "+", "self", ".", "current_iter", "/", "self", ".", "warmup_epochs", ")", "*", "base_lr", "\n", "", "lrs", ".", "append", "(", "lr", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.LinearLR.__init__": [[137, 141], ["optimizers._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_epochs", ",", "epochs", ",", "max_LR", ",", "min_LR", ")", ":", "\n", "    ", "self", ".", "max_LR", "=", "max_LR", "\n", "self", ".", "min_LR", "=", "min_LR", "\n", "super", "(", "LinearLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "warmup_epochs", ",", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.LinearLR.extra_repr": [[142, 144], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'type={:}, max_LR={:}, min_LR={:}, base-lrs={:}'", ".", "format", "(", "'LinearLR'", ",", "self", ".", "max_LR", ",", "self", ".", "min_LR", ",", "self", ".", "base_lrs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.LinearLR.get_lr": [[145, 157], ["lrs.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", ":", "\n", "      ", "if", "self", ".", "current_epoch", ">=", "self", ".", "warmup_epochs", ":", "\n", "        ", "last_epoch", "=", "self", ".", "current_epoch", "-", "self", ".", "warmup_epochs", "\n", "assert", "last_epoch", ">=", "0", ",", "'invalid last_epoch : {:}'", ".", "format", "(", "last_epoch", ")", "\n", "ratio", "=", "(", "self", ".", "max_LR", "-", "self", ".", "min_LR", ")", "*", "last_epoch", "/", "self", ".", "max_epochs", "/", "self", ".", "max_LR", "\n", "lr", "=", "base_lr", "*", "(", "1", "-", "ratio", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "(", "self", ".", "current_epoch", "/", "self", ".", "warmup_epochs", "+", "self", ".", "current_iter", "/", "self", ".", "warmup_epochs", ")", "*", "base_lr", "\n", "", "lrs", ".", "append", "(", "lr", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.CrossEntropyLabelSmooth.__init__": [[162, 167], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", ")", ":", "\n", "    ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.CrossEntropyLabelSmooth.forward": [[168, 174], ["optimizers.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "    ", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros_like", "(", "log_probs", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers.get_optim_scheduler": [[177, 205], ["hasattr", "hasattr", "hasattr", "torch.optim.SGD", "torch.optim.SGD", "getattr", "optimizers.CosineAnnealingLR", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.optim.RMSprop", "torch.optim.RMSprop", "ValueError", "optimizers.MultiStepLR", "optimizers.CrossEntropyLabelSmooth", "ValueError", "optimizers.ExponentialLR", "optimizers.LinearLR", "ValueError"], "function", ["None"], ["", "", "def", "get_optim_scheduler", "(", "parameters", ",", "config", ")", ":", "\n", "  ", "assert", "hasattr", "(", "config", ",", "'optim'", ")", "and", "hasattr", "(", "config", ",", "'scheduler'", ")", "and", "hasattr", "(", "config", ",", "'criterion'", ")", ",", "'config must have optim / scheduler / criterion keys instead of {:}'", ".", "format", "(", "config", ")", "\n", "if", "config", ".", "optim", "==", "'SGD'", ":", "\n", "    ", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "config", ".", "LR", ",", "momentum", "=", "config", ".", "momentum", ",", "weight_decay", "=", "config", ".", "decay", ",", "nesterov", "=", "config", ".", "nesterov", ")", "\n", "", "elif", "config", ".", "optim", "==", "'RMSprop'", ":", "\n", "    ", "optim", "=", "torch", ".", "optim", ".", "RMSprop", "(", "parameters", ",", "config", ".", "LR", ",", "momentum", "=", "config", ".", "momentum", ",", "weight_decay", "=", "config", ".", "decay", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid optim : {:}'", ".", "format", "(", "config", ".", "optim", ")", ")", "\n", "\n", "", "if", "config", ".", "scheduler", "==", "'cos'", ":", "\n", "    ", "T_max", "=", "getattr", "(", "config", ",", "'T_max'", ",", "config", ".", "epochs", ")", "\n", "scheduler", "=", "CosineAnnealingLR", "(", "optim", ",", "config", ".", "warmup", ",", "config", ".", "epochs", ",", "T_max", ",", "config", ".", "eta_min", ")", "\n", "", "elif", "config", ".", "scheduler", "==", "'multistep'", ":", "\n", "    ", "scheduler", "=", "MultiStepLR", "(", "optim", ",", "config", ".", "warmup", ",", "config", ".", "epochs", ",", "config", ".", "milestones", ",", "config", ".", "gammas", ")", "\n", "", "elif", "config", ".", "scheduler", "==", "'exponential'", ":", "\n", "    ", "scheduler", "=", "ExponentialLR", "(", "optim", ",", "config", ".", "warmup", ",", "config", ".", "epochs", ",", "config", ".", "gamma", ")", "\n", "", "elif", "config", ".", "scheduler", "==", "'linear'", ":", "\n", "    ", "scheduler", "=", "LinearLR", "(", "optim", ",", "config", ".", "warmup", ",", "config", ".", "epochs", ",", "config", ".", "LR", ",", "config", ".", "LR_min", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid scheduler : {:}'", ".", "format", "(", "config", ".", "scheduler", ")", ")", "\n", "\n", "", "if", "config", ".", "criterion", "==", "'Softmax'", ":", "\n", "    ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "elif", "config", ".", "criterion", "==", "'SmoothSoftmax'", ":", "\n", "    ", "criterion", "=", "CrossEntropyLabelSmooth", "(", "config", ".", "class_num", ",", "config", ".", "label_smooth", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid criterion : {:}'", ".", "format", "(", "config", ".", "criterion", ")", ")", "\n", "", "return", "optim", ",", "scheduler", ",", "criterion", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarWideResNet.WideBasicblock.__init__": [[8, 25], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "dropout", "=", "False", ")", ":", "\n", "    ", "super", "(", "WideBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bn_a", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv_a", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn_b", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "if", "dropout", ":", "\n", "      ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "dropout", "=", "None", "\n", "", "self", ".", "conv_b", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarWideResNet.WideBasicblock.forward": [[26, 42], ["CifarWideResNet.WideBasicblock.bn_a", "torch.relu", "torch.relu", "torch.relu", "CifarWideResNet.WideBasicblock.conv_a", "CifarWideResNet.WideBasicblock.bn_b", "torch.relu", "torch.relu", "torch.relu", "CifarWideResNet.WideBasicblock.conv_b", "CifarWideResNet.WideBasicblock.dropout", "CifarWideResNet.WideBasicblock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "    ", "basicblock", "=", "self", ".", "bn_a", "(", "x", ")", "\n", "basicblock", "=", "F", ".", "relu", "(", "basicblock", ")", "\n", "basicblock", "=", "self", ".", "conv_a", "(", "basicblock", ")", "\n", "\n", "basicblock", "=", "self", ".", "bn_b", "(", "basicblock", ")", "\n", "basicblock", "=", "F", ".", "relu", "(", "basicblock", ")", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "      ", "basicblock", "=", "self", ".", "dropout", "(", "basicblock", ")", "\n", "", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "x", "+", "basicblock", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarWideResNet.CifarWideResNet.__init__": [[49, 71], ["torch.Module.__init__", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "CifarWideResNet.CifarWideResNet._make_layer", "CifarWideResNet.CifarWideResNet._make_layer", "CifarWideResNet.CifarWideResNet._make_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "CifarWideResNet.CifarWideResNet.apply", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "num_classes", ",", "dropout", ")", ":", "\n", "    ", "super", "(", "CifarWideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "assert", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "print", "(", "'CifarPreResNet : Depth : {} , Layers for each block : {}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "conv_3x3", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "message", "=", "'Wide ResNet : depth={:}, widen_factor={:}, class={:}'", ".", "format", "(", "depth", ",", "widen_factor", ",", "num_classes", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "stage_1", "=", "self", ".", "_make_layer", "(", "WideBasicblock", ",", "16", "*", "widen_factor", ",", "layer_blocks", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "_make_layer", "(", "WideBasicblock", ",", "32", "*", "widen_factor", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "_make_layer", "(", "WideBasicblock", ",", "64", "*", "widen_factor", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "64", "*", "widen_factor", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "64", "*", "widen_factor", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarWideResNet.CifarWideResNet.get_message": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarWideResNet.CifarWideResNet._make_layer": [[75, 84], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ")", ":", "\n", "\n", "    ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "self", ".", "dropout", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "self", ".", "dropout", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarWideResNet.CifarWideResNet.forward": [[85, 95], ["CifarWideResNet.CifarWideResNet.conv_3x3", "CifarWideResNet.CifarWideResNet.stage_1", "CifarWideResNet.CifarWideResNet.stage_2", "CifarWideResNet.CifarWideResNet.stage_3", "CifarWideResNet.CifarWideResNet.lastact", "CifarWideResNet.CifarWideResNet.avgpool", "CifarWideResNet.CifarWideResNet.view", "CifarWideResNet.CifarWideResNet.classifier", "CifarWideResNet.CifarWideResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv_3x3", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", "(", "x", ")", "\n", "x", "=", "self", ".", "lastact", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "outs", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "outs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.initialization.initialize_resnet": [[5, 17], ["isinstance", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["def", "initialize_resnet", "(", "m", ")", ":", "\n", "  ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "      ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "      ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_conv": [[5, 12], ["isinstance", "isinstance", "module.weight.copy_", "module.bias.copy_", "init.weight.detach", "init.bias.detach"], "function", ["None"], ["def", "copy_conv", "(", "module", ",", "init", ")", ":", "\n", "  ", "assert", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ",", "'invalid module : {:}'", ".", "format", "(", "module", ")", "\n", "assert", "isinstance", "(", "init", ",", "nn", ".", "Conv2d", ")", ",", "'invalid module : {:}'", ".", "format", "(", "init", ")", "\n", "new_i", ",", "new_o", "=", "module", ".", "in_channels", ",", "module", ".", "out_channels", "\n", "module", ".", "weight", ".", "copy_", "(", "init", ".", "weight", ".", "detach", "(", ")", "[", ":", "new_o", ",", ":", "new_i", "]", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "module", ".", "bias", ".", "copy_", "(", "init", ".", "bias", ".", "detach", "(", ")", "[", ":", "new_o", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_bn": [[13, 25], ["isinstance", "isinstance", "module.weight.copy_", "module.bias.copy_", "module.running_mean.copy_", "module.running_var.copy_", "init.weight.detach", "init.bias.detach", "init.running_mean.detach", "init.running_var.detach"], "function", ["None"], ["", "", "def", "copy_bn", "(", "module", ",", "init", ")", ":", "\n", "  ", "assert", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ",", "'invalid module : {:}'", ".", "format", "(", "module", ")", "\n", "assert", "isinstance", "(", "init", ",", "nn", ".", "BatchNorm2d", ")", ",", "'invalid module : {:}'", ".", "format", "(", "init", ")", "\n", "num_features", "=", "module", ".", "num_features", "\n", "if", "module", ".", "weight", "is", "not", "None", ":", "\n", "    ", "module", ".", "weight", ".", "copy_", "(", "init", ".", "weight", ".", "detach", "(", ")", "[", ":", "num_features", "]", ")", "\n", "", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "module", ".", "bias", ".", "copy_", "(", "init", ".", "bias", ".", "detach", "(", ")", "[", ":", "num_features", "]", ")", "\n", "", "if", "module", ".", "running_mean", "is", "not", "None", ":", "\n", "    ", "module", ".", "running_mean", ".", "copy_", "(", "init", ".", "running_mean", ".", "detach", "(", ")", "[", ":", "num_features", "]", ")", "\n", "", "if", "module", ".", "running_var", "is", "not", "None", ":", "\n", "    ", "module", ".", "running_var", ".", "copy_", "(", "init", ".", "running_var", ".", "detach", "(", ")", "[", ":", "num_features", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_fc": [[26, 33], ["isinstance", "isinstance", "module.weight.copy_", "module.bias.copy_", "init.weight.detach", "init.bias.detach"], "function", ["None"], ["", "", "def", "copy_fc", "(", "module", ",", "init", ")", ":", "\n", "  ", "assert", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ",", "'invalid module : {:}'", ".", "format", "(", "module", ")", "\n", "assert", "isinstance", "(", "init", ",", "nn", ".", "Linear", ")", ",", "'invalid module : {:}'", ".", "format", "(", "init", ")", "\n", "new_i", ",", "new_o", "=", "module", ".", "in_features", ",", "module", ".", "out_features", "\n", "module", ".", "weight", ".", "copy_", "(", "init", ".", "weight", ".", "detach", "(", ")", "[", ":", "new_o", ",", ":", "new_i", "]", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "module", ".", "bias", ".", "copy_", "(", "init", ".", "bias", ".", "detach", "(", ")", "[", ":", "new_o", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_base": [[34, 41], ["clone_weights.copy_conv", "clone_weights.copy_bn", "type", "type"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_conv", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_bn"], ["", "", "def", "copy_base", "(", "module", ",", "init", ")", ":", "\n", "  ", "assert", "type", "(", "module", ")", ".", "__name__", "in", "[", "'ConvBNReLU'", ",", "'Downsample'", "]", ",", "'invalid module : {:}'", ".", "format", "(", "module", ")", "\n", "assert", "type", "(", "init", ")", ".", "__name__", "in", "[", "'ConvBNReLU'", ",", "'Downsample'", "]", ",", "'invalid module : {:}'", ".", "format", "(", "init", ")", "\n", "if", "module", ".", "conv", "is", "not", "None", ":", "\n", "    ", "copy_conv", "(", "module", ".", "conv", ",", "init", ".", "conv", ")", "\n", "", "if", "module", ".", "bn", "is", "not", "None", ":", "\n", "    ", "copy_bn", "(", "module", ".", "bn", ",", "init", ".", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_basic": [[42, 48], ["clone_weights.copy_base", "clone_weights.copy_base", "clone_weights.copy_base"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_base", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_base", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_base"], ["", "", "def", "copy_basic", "(", "module", ",", "init", ")", ":", "\n", "  ", "copy_base", "(", "module", ".", "conv_a", ",", "init", ".", "conv_a", ")", "\n", "copy_base", "(", "module", ".", "conv_b", ",", "init", ".", "conv_b", ")", "\n", "if", "module", ".", "downsample", "is", "not", "None", ":", "\n", "    ", "if", "init", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "copy_base", "(", "module", ".", "downsample", ",", "init", ".", "downsample", ")", "\n", "#else:", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.init_from_model": [[52, 63], ["torch.no_grad", "torch.no_grad", "clone_weights.copy_fc", "zip", "clone_weights.copy_base", "type", "type", "type", "clone_weights.copy_basic", "ValueError", "type", "type"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_fc", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_base", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.clone_weights.copy_basic"], ["", "", "", "def", "init_from_model", "(", "network", ",", "init_model", ")", ":", "\n", "  ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "copy_fc", "(", "network", ".", "classifier", ",", "init_model", ".", "classifier", ")", "\n", "for", "base", ",", "target", "in", "zip", "(", "init_model", ".", "layers", ",", "network", ".", "layers", ")", ":", "\n", "      ", "assert", "type", "(", "base", ")", ".", "__name__", "==", "type", "(", "target", ")", ".", "__name__", ",", "'invalid type : {:} vs {:}'", ".", "format", "(", "base", ",", "target", ")", "\n", "if", "type", "(", "base", ")", ".", "__name__", "==", "'ConvBNReLU'", ":", "\n", "        ", "copy_base", "(", "target", ",", "base", ")", "\n", "", "elif", "type", "(", "base", ")", ".", "__name__", "==", "'ResNetBasicblock'", ":", "\n", "        ", "copy_basic", "(", "target", ",", "base", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'unknown type name : {:}'", ".", "format", "(", "type", "(", "base", ")", ".", "__name__", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func": [[8, 21], ["min", "A.size", "B.size", "A.size", "B.size", "A.size", "B.size", "A.dim", "B.dim", "A.size", "B.size", "A.size", "B.size", "B.clone", "A.clone"], "function", ["None"], ["def", "additive_func", "(", "A", ",", "B", ")", ":", "\n", "  ", "assert", "A", ".", "dim", "(", ")", "==", "B", ".", "dim", "(", ")", "and", "A", ".", "size", "(", "0", ")", "==", "B", ".", "size", "(", "0", ")", ",", "'{:} vs {:}'", ".", "format", "(", "A", ".", "size", "(", ")", ",", "B", ".", "size", "(", ")", ")", "\n", "C", "=", "min", "(", "A", ".", "size", "(", "1", ")", ",", "B", ".", "size", "(", "1", ")", ")", "\n", "if", "A", ".", "size", "(", "1", ")", "==", "B", ".", "size", "(", "1", ")", ":", "\n", "    ", "return", "A", "+", "B", "\n", "", "elif", "A", ".", "size", "(", "1", ")", "<", "B", ".", "size", "(", "1", ")", ":", "\n", "    ", "out", "=", "B", ".", "clone", "(", ")", "\n", "out", "[", ":", ",", ":", "C", "]", "+=", "A", "\n", "return", "out", "\n", "", "else", ":", "\n", "    ", "out", "=", "A", ".", "clone", "(", ")", "\n", "out", "[", ":", ",", ":", "C", "]", "+=", "B", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.change_key": [[23, 28], ["hasattr", "setattr"], "function", ["None"], ["", "", "def", "change_key", "(", "key", ",", "value", ")", ":", "\n", "  ", "def", "func", "(", "m", ")", ":", "\n", "    ", "if", "hasattr", "(", "m", ",", "key", ")", ":", "\n", "      ", "setattr", "(", "m", ",", "key", ",", "value", ")", "\n", "", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.parse_channel_info": [[30, 35], ["xstring.split", "x.split", "int"], "function", ["None"], ["", "def", "parse_channel_info", "(", "xstring", ")", ":", "\n", "  ", "blocks", "=", "xstring", ".", "split", "(", "' '", ")", "\n", "blocks", "=", "[", "x", ".", "split", "(", "'-'", ")", "for", "x", "in", "blocks", "]", "\n", "blocks", "=", "[", "[", "int", "(", "_", ")", "for", "_", "in", "x", "]", "for", "x", "in", "blocks", "]", "\n", "return", "blocks", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.Bottleneck.__init__": [[11, 18], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nChannels", ",", "growthRate", ")", ":", "\n", "    ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "interChannels", "=", "4", "*", "growthRate", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "interChannels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "interChannels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "interChannels", ",", "growthRate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.Bottleneck.forward": [[19, 24], ["CifarDenseNet.Bottleneck.conv1", "CifarDenseNet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "CifarDenseNet.Bottleneck.bn1", "CifarDenseNet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.SingleLayer.__init__": [[27, 31], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nChannels", ",", "growthRate", ")", ":", "\n", "    ", "super", "(", "SingleLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "growthRate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.SingleLayer.forward": [[32, 36], ["CifarDenseNet.SingleLayer.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "CifarDenseNet.SingleLayer.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.Transition.__init__": [[39, 43], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nChannels", ",", "nOutChannels", ")", ":", "\n", "    ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "nOutChannels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.Transition.forward": [[44, 48], ["CifarDenseNet.Transition.conv1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "CifarDenseNet.Transition.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.DenseNet.__init__": [[51, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "CifarDenseNet.DenseNet._make_dense", "int", "CifarDenseNet.Transition", "CifarDenseNet.DenseNet._make_dense", "int", "CifarDenseNet.Transition", "CifarDenseNet.DenseNet._make_dense", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "CifarDenseNet.DenseNet.apply", "int", "int", "math.floor", "math.floor", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.DenseNet._make_dense", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.DenseNet._make_dense", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.DenseNet._make_dense"], ["  ", "def", "__init__", "(", "self", ",", "growthRate", ",", "depth", ",", "reduction", ",", "nClasses", ",", "bottleneck", ")", ":", "\n", "    ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "bottleneck", ":", "nDenseBlocks", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "6", ")", "\n", "else", ":", "nDenseBlocks", "=", "int", "(", "(", "depth", "-", "4", ")", "/", "3", ")", "\n", "\n", "self", ".", "message", "=", "'CifarDenseNet : block : {:}, depth : {:}, reduction : {:}, growth-rate = {:}, class = {:}'", ".", "format", "(", "'bottleneck'", "if", "bottleneck", "else", "'basic'", ",", "depth", ",", "reduction", ",", "growthRate", ",", "nClasses", ")", "\n", "\n", "nChannels", "=", "2", "*", "growthRate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "nOutChannels", "=", "int", "(", "math", ".", "floor", "(", "nChannels", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "nChannels", ",", "nOutChannels", ")", "\n", "\n", "nChannels", "=", "nOutChannels", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "nOutChannels", "=", "int", "(", "math", ".", "floor", "(", "nChannels", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "nChannels", ",", "nOutChannels", ")", "\n", "\n", "nChannels", "=", "nOutChannels", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense", "(", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", "\n", "nChannels", "+=", "nDenseBlocks", "*", "growthRate", "\n", "\n", "self", ".", "act", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "nChannels", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "8", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", ",", "nClasses", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.DenseNet.get_message": [[84, 86], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.DenseNet._make_dense": [[87, 96], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "layers.append", "CifarDenseNet.Bottleneck", "CifarDenseNet.SingleLayer"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "_make_dense", "(", "self", ",", "nChannels", ",", "growthRate", ",", "nDenseBlocks", ",", "bottleneck", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nDenseBlocks", ")", ")", ":", "\n", "      ", "if", "bottleneck", ":", "\n", "        ", "layers", ".", "append", "(", "Bottleneck", "(", "nChannels", ",", "growthRate", ")", ")", "\n", "", "else", ":", "\n", "        ", "layers", ".", "append", "(", "SingleLayer", "(", "nChannels", ",", "growthRate", ")", ")", "\n", "", "nChannels", "+=", "growthRate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarDenseNet.DenseNet.forward": [[97, 106], ["CifarDenseNet.DenseNet.conv1", "CifarDenseNet.DenseNet.trans1", "CifarDenseNet.DenseNet.trans2", "CifarDenseNet.DenseNet.dense3", "CifarDenseNet.DenseNet.act", "features.view.view.view", "CifarDenseNet.DenseNet.fc", "CifarDenseNet.DenseNet.dense1", "CifarDenseNet.DenseNet.dense2", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense3", "(", "out", ")", "\n", "features", "=", "self", ".", "act", "(", "out", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "features", ")", "\n", "return", "features", ",", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.BasicBlock.__init__": [[16, 28], ["torch.Module.__init__", "ImageNet_ResNet.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "ImageNet_ResNet.conv3x3", "torch.BatchNorm2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.conv3x3", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "base_width", "=", "64", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "      ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.BasicBlock.forward": [[29, 46], ["ImageNet_ResNet.BasicBlock.conv1", "ImageNet_ResNet.BasicBlock.bn1", "ImageNet_ResNet.BasicBlock.relu", "ImageNet_ResNet.BasicBlock.conv2", "ImageNet_ResNet.BasicBlock.bn2", "ImageNet_ResNet.BasicBlock.relu", "ImageNet_ResNet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.Bottleneck.__init__": [[51, 64], ["torch.Module.__init__", "ImageNet_ResNet.conv1x1", "torch.BatchNorm2d", "ImageNet_ResNet.conv3x3", "torch.BatchNorm2d", "ImageNet_ResNet.conv1x1", "torch.BatchNorm2d", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.conv1x1", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.conv3x3", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "base_width", "=", "64", ")", ":", "\n", "    ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.Bottleneck.forward": [[65, 86], ["ImageNet_ResNet.Bottleneck.conv1", "ImageNet_ResNet.Bottleneck.bn1", "ImageNet_ResNet.Bottleneck.relu", "ImageNet_ResNet.Bottleneck.conv2", "ImageNet_ResNet.Bottleneck.bn2", "ImageNet_ResNet.Bottleneck.relu", "ImageNet_ResNet.Bottleneck.conv3", "ImageNet_ResNet.Bottleneck.bn3", "ImageNet_ResNet.Bottleneck.relu", "ImageNet_ResNet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.ResNet.__init__": [[90, 131], ["torch.Module.__init__", "torch.MaxPool2d", "ImageNet_ResNet.ResNet._make_layer", "ImageNet_ResNet.ResNet._make_layer", "ImageNet_ResNet.ResNet._make_layer", "ImageNet_ResNet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.Linear", "ImageNet_ResNet.ResNet.apply", "torch.Sequential", "torch.Sequential", "ImageNet_ResNet.ResNet.modules", "ValueError", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "isinstance", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.ResNet._make_layer"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "layers", ",", "deep_stem", ",", "num_classes", ",", "zero_init_residual", ",", "groups", ",", "width_per_group", ")", ":", "\n", "    ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#planes = [int(width_per_group * groups * 2 ** i) for i in range(4)]", "\n", "if", "block_name", "==", "'BasicBlock'", ":", "block", "=", "BasicBlock", "\n", "elif", "block_name", "==", "'Bottleneck'", ":", "block", "=", "Bottleneck", "\n", "else", ":", "raise", "ValueError", "(", "'invalid block-name : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "if", "not", "deep_stem", ":", "\n", "      ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "groups", "=", "groups", ",", "base_width", "=", "width_per_group", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "groups", "=", "groups", ",", "base_width", "=", "width_per_group", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "groups", "=", "groups", ",", "base_width", "=", "width_per_group", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "groups", "=", "groups", ",", "base_width", "=", "width_per_group", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "message", "=", "'block = {:}, layers = {:}, deep_stem = {:}, num_classes = {:}'", ".", "format", "(", "block", ",", "layers", ",", "deep_stem", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "if", "zero_init_residual", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.ResNet._make_layer": [[132, 155], ["layers.append", "range", "torch.Sequential", "block", "layers.append", "torch.Sequential", "block", "torch.AvgPool2d", "ImageNet_ResNet.conv1x1", "torch.BatchNorm2d", "torch.Sequential", "ValueError", "ImageNet_ResNet.conv1x1", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.conv1x1", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", ",", "groups", ",", "base_width", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "if", "stride", "==", "2", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "elif", "stride", "==", "1", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid stride [{:}] for downsample'", ".", "format", "(", "stride", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "groups", ",", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "1", ",", "None", ",", "groups", ",", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.ResNet.get_message": [[156, 158], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.ResNet.forward": [[159, 173], ["ImageNet_ResNet.ResNet.conv", "ImageNet_ResNet.ResNet.maxpool", "ImageNet_ResNet.ResNet.layer1", "ImageNet_ResNet.ResNet.layer2", "ImageNet_ResNet.ResNet.layer3", "ImageNet_ResNet.ResNet.layer4", "ImageNet_ResNet.ResNet.avgpool", "features.view.view.view", "ImageNet_ResNet.ResNet.fc", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "fc", "(", "features", ")", "\n", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.conv3x3": [[5, 7], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "  ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_ResNet.conv1x1": [[9, 11], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.ReLUConvBN.__init__": [[34, 40], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.ReLUConvBN.forward": [[42, 44], ["cell_operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.SepConv.__init__": [[48, 55], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.SepConv.forward": [[57, 59], ["cell_operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.DualSepConv.__init__": [[63, 67], ["torch.Module.__init__", "cell_operations.SepConv", "cell_operations.SepConv"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "DualSepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op_a", "=", "SepConv", "(", "C_in", ",", "C_in", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "op_b", "=", "SepConv", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "1", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.DualSepConv.forward": [[68, 72], ["cell_operations.DualSepConv.op_a", "cell_operations.DualSepConv.op_b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "op_a", "(", "x", ")", "\n", "x", "=", "self", ".", "op_b", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.ResNetBasicblock.__init__": [[76, 93], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "cell_operations.ReLUConvBN", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "cell_operations.ReLUConvBN"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ReLUConvBN", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "1", ",", "affine", ")", "\n", "self", ".", "conv_b", "=", "ReLUConvBN", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "1", ",", "affine", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ReLUConvBN", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "in_dim", "=", "inplanes", "\n", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "num_conv", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.ResNetBasicblock.extra_repr": [[94, 97], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "string", "=", "'{name}(inC={in_dim}, outC={out_dim}, stride={stride})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.ResNetBasicblock.forward": [[98, 108], ["cell_operations.ResNetBasicblock.conv_a", "cell_operations.ResNetBasicblock.conv_b", "cell_operations.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "return", "residual", "+", "basicblock", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.POOLING.__init__": [[112, 121], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "mode", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "POOLING", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "C_in", "==", "C_out", ":", "\n", "      ", "self", ".", "preprocess", "=", "None", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess", "=", "ReLUConvBN", "(", "C_in", ",", "C_out", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "", "if", "mode", "==", "'avg'", ":", "self", ".", "op", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "elif", "mode", "==", "'max'", ":", "self", ".", "op", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "else", ":", "raise", "ValueError", "(", "'Invalid mode={:} in POOLING'", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.POOLING.forward": [[122, 126], ["cell_operations.POOLING.op", "cell_operations.POOLING.preprocess"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "preprocess", ":", "x", "=", "self", ".", "preprocess", "(", "inputs", ")", "\n", "else", ":", "x", "=", "inputs", "\n", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.Identity.__init__": [[130, 132], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.Identity.forward": [[133, 135], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.Zero.__init__": [[139, 145], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "    ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "is_zero", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.Zero.forward": [[146, 155], ["list", "x.new_zeros", "x.mul", "x[].mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "C_in", "==", "self", ".", "C_out", ":", "\n", "      ", "if", "self", ".", "stride", "==", "1", ":", "return", "x", ".", "mul", "(", "0.", ")", "\n", "else", ":", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "", "else", ":", "\n", "      ", "shape", "=", "list", "(", "x", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "self", ".", "C_out", "\n", "zeros", "=", "x", ".", "new_zeros", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "zeros", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.Zero.extra_repr": [[156, 158], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'C_in={C_in}, C_out={C_out}, stride={stride}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.FactorizedReduce.__init__": [[162, 180], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.ConstantPad2d", "torch.ConstantPad2d", "cell_operations.FactorizedReduce.convs.append", "torch.Conv2d", "torch.Conv2d", "ValueError", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "#assert C_out % 2 == 0, 'C_out : {:}'.format(C_out)", "\n", "      ", "C_outs", "=", "[", "C_out", "//", "2", ",", "C_out", "-", "C_out", "//", "2", "]", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "self", ".", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "C_in", ",", "C_outs", "[", "i", "]", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "self", ".", "pad", "=", "nn", ".", "ConstantPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "0", ")", "\n", "", "elif", "stride", "==", "1", ":", "\n", "      ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Invalid stride : {:}'", ".", "format", "(", "stride", ")", ")", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.FactorizedReduce.forward": [[181, 190], ["cell_operations.FactorizedReduce.bn", "cell_operations.FactorizedReduce.relu", "cell_operations.FactorizedReduce.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cell_operations.FactorizedReduce.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "stride", "==", "2", ":", "\n", "      ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "y", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "convs", "[", "0", "]", "(", "x", ")", ",", "self", ".", "convs", "[", "1", "]", "(", "y", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.FactorizedReduce.extra_repr": [[191, 193], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "'C_in={C_in}, C_out={C_out}, stride={stride}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.PartAwareOp.__init__": [[198, 214], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "cell_operations.PartAwareOp.local_conv_list.append", "cell_operations.FactorizedReduce", "torch.Sequential", "torch.Sequential", "cell_operations.FactorizedReduce", "ValueError", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "part", "=", "4", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "part", "=", "4", "\n", "self", ".", "hidden", "=", "C_in", "//", "3", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "local_conv_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "      ", "self", ".", "local_conv_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Conv2d", "(", "C_in", ",", "self", ".", "hidden", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "self", ".", "hidden", ",", "affine", "=", "True", ")", ")", "\n", ")", "\n", "", "self", ".", "W_K", "=", "nn", ".", "Linear", "(", "self", ".", "hidden", ",", "self", ".", "hidden", ")", "\n", "self", ".", "W_Q", "=", "nn", ".", "Linear", "(", "self", ".", "hidden", ",", "self", ".", "hidden", ")", "\n", "\n", "if", "stride", "==", "2", ":", "self", ".", "last", "=", "FactorizedReduce", "(", "C_in", "+", "self", ".", "hidden", ",", "C_out", ",", "2", ")", "\n", "elif", "stride", "==", "1", ":", "self", ".", "last", "=", "FactorizedReduce", "(", "C_in", "+", "self", ".", "hidden", ",", "C_out", ",", "1", ")", "\n", "else", ":", "raise", "ValueError", "(", "'Invalid Stride : {:}'", ".", "format", "(", "stride", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.PartAwareOp.forward": [[215, 242], ["x.size", "range", "range", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "part_feature.transpose().contiguous.transpose().contiguous.transpose().contiguous", "cell_operations.PartAwareOp.W_K", "cell_operations.PartAwareOp.W_Q().transpose().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().transpose().contiguous", "torch.bmm().transpose().contiguous", "torch.bmm().transpose().contiguous", "torch.bmm().transpose().contiguous", "range", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cell_operations.PartAwareOp.last", "IHs.append", "cell_operations.PartAwareOp.avg_pool", "local_feat_list.append", "aggreateF[].expand", "feature.view.view.view", "torch.cat().expand.append", "torch.cat().expand.append", "min", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "part_feature.transpose().contiguous.transpose().contiguous.transpose", "cell_operations.PartAwareOp.W_Q().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "cell_operations.PartAwareOp.W_Q", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "float"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "batch", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "assert", "H", ">=", "self", ".", "part", ",", "'input size too small : {:} vs {:}'", ".", "format", "(", "x", ".", "shape", ",", "self", ".", "part", ")", "\n", "IHs", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "IHs", ".", "append", "(", "min", "(", "H", ",", "int", "(", "(", "i", "+", "1", ")", "*", "(", "float", "(", "H", ")", "/", "self", ".", "part", ")", ")", ")", ")", "\n", "local_feat_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "      ", "feature", "=", "x", "[", ":", ",", ":", ",", "IHs", "[", "i", "]", ":", "IHs", "[", "i", "+", "1", "]", ",", ":", "]", "\n", "xfeax", "=", "self", ".", "avg_pool", "(", "feature", ")", "\n", "xfea", "=", "self", ".", "local_conv_list", "[", "i", "]", "(", "xfeax", ")", "\n", "local_feat_list", ".", "append", "(", "xfea", ")", "\n", "", "part_feature", "=", "torch", ".", "cat", "(", "local_feat_list", ",", "dim", "=", "2", ")", ".", "view", "(", "batch", ",", "-", "1", ",", "self", ".", "part", ")", "\n", "part_feature", "=", "part_feature", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "part_K", "=", "self", ".", "W_K", "(", "part_feature", ")", "\n", "part_Q", "=", "self", ".", "W_Q", "(", "part_feature", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "weight_att", "=", "torch", ".", "bmm", "(", "part_K", ",", "part_Q", ")", "\n", "attention", "=", "torch", ".", "softmax", "(", "weight_att", ",", "dim", "=", "2", ")", "\n", "aggreateF", "=", "torch", ".", "bmm", "(", "attention", ",", "part_feature", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "      ", "feature", "=", "aggreateF", "[", ":", ",", ":", ",", "i", ":", "i", "+", "1", "]", ".", "expand", "(", "batch", ",", "self", ".", "hidden", ",", "IHs", "[", "i", "+", "1", "]", "-", "IHs", "[", "i", "]", ")", "\n", "feature", "=", "feature", ".", "view", "(", "batch", ",", "self", ".", "hidden", ",", "IHs", "[", "i", "+", "1", "]", "-", "IHs", "[", "i", "]", ",", "1", ")", "\n", "features", ".", "append", "(", "feature", ")", "\n", "", "features", "=", "torch", ".", "cat", "(", "features", ",", "dim", "=", "2", ")", ".", "expand", "(", "batch", ",", "self", ".", "hidden", ",", "H", ",", "W", ")", "\n", "final_fea", "=", "torch", ".", "cat", "(", "(", "x", ",", "features", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "self", ".", "last", "(", "final_fea", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.GDAS_Reduction_Cell.__init__": [[247, 282], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "cell_operations.FactorizedReduce", "cell_operations.ReLUConvBN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction_prev", ",", "multiplier", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "GDAS_Reduction_Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "multiplier", "=", "multiplier", "\n", "\n", "self", ".", "reduction", "=", "True", "\n", "self", ".", "ops1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "8", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "8", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "groups", "=", "8", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "groups", "=", "8", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ")", "]", ")", "\n", "\n", "self", ".", "ops2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "True", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.cell_operations.GDAS_Reduction_Cell.forward": [[283, 298], ["cell_operations.GDAS_Reduction_Cell.preprocess0", "cell_operations.GDAS_Reduction_Cell.preprocess1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "drop_path", "drop_path", "drop_path", "drop_path"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.drop_path", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.drop_path", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.drop_path", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", "=", "-", "1", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "X0", "=", "self", ".", "ops1", "[", "0", "]", "(", "s0", ")", "\n", "X1", "=", "self", ".", "ops1", "[", "1", "]", "(", "s1", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "      ", "X0", ",", "X1", "=", "drop_path", "(", "X0", ",", "drop_prob", ")", ",", "drop_path", "(", "X1", ",", "drop_prob", ")", "\n", "\n", "#X2 = self.ops2[0] (X0+X1)", "\n", "", "X2", "=", "self", ".", "ops2", "[", "0", "]", "(", "s0", ")", "\n", "X3", "=", "self", ".", "ops2", "[", "1", "]", "(", "s1", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "      ", "X2", ",", "X3", "=", "drop_path", "(", "X2", ",", "drop_prob", ")", ",", "drop_path", "(", "X3", ",", "drop_prob", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "X0", ",", "X1", ",", "X2", ",", "X3", "]", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.__init__.get_cell_based_tiny_net": [[20, 54], ["isinstance", "getattr", "config_utils.dict2config", "hasattr", "TinyNetwork", "hasattr", "isinstance", "cell_searchs.CellStructure.str2structure", "DynamicShapeTinyNet", "cell_searchs.CellStructure.str2structure", "ValueError", "tuple", "ValueError", "int", "config_utils.dict2config.channels.split"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.dict2config", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.str2structure", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.str2structure"], ["from", ".", "pruning_args", "import", "obtain_pruning_args", "\n", "\n", "# utility function", "\n", "from", ".", "flop_benchmark", "import", "get_model_infos", ",", "count_parameters_in_MB", "\n", "from", ".", "evaluation_utils", "import", "obtain_accuracy", "\n", "from", "cell_operations", "import", "ResNetBasicblock", "\n", "\n", "# Custom functions added", "\n", "def", "create_exp_dir", "(", "path", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "", "def", "model_save", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n", "", "def", "model_load", "(", "model", ",", "model_path", ",", "gpu", "=", "0", ")", ":", "\n", "  ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "'cuda:{}'", ".", "format", "(", "gpu", ")", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "def", "get_arch_score", "(", "df", ",", "arch_str", ",", "dataset", ",", "acc_type", ")", ":", "\n", "  ", "'''Gets the accuracy for given dataset and architecture from a customized pandas dataframe created from NAS201\n  which contains only accuracy informations of all 15625 architectures in NAS201. This dataframe was created to\n  reduce the RAM requirement for accessing the accuracy information from the original NAS201'''", "\n", "series", "=", "df", "[", "df", "[", "'arch'", "]", "==", "arch_str", "]", "\n", "return", "series", "[", "dataset", "+", "'-'", "+", "acc_type", "]", ".", "values", "[", "0", "]", "\n", "\n", "", "def", "discretize", "(", "alphas", ",", "arch_genotype", ")", ":", "\n", "  ", "genotype", "=", "genotypes", ".", "PRIMITIVES", "\n", "normal_cell", "=", "arch_genotype", ".", "normal", "\n", "reduction_cell", "=", "arch_genotype", ".", "reduce", "\n", "\n", "# Discretizing the normal cell", "\n", "index", "=", "0", "\n", "offset", "=", "0", "\n", "new_normal", "=", "torch", ".", "zeros_like", "(", "alphas", "[", "0", "]", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.__init__.get_search_spaces": [[57, 64], ["ValueError", "SearchSpaceNames.keys"], "function", ["None"], ["idx", "=", "genotypes", ".", "PRIMITIVES", ".", "index", "(", "op", ")", "\n", "new_normal", "[", "int", "(", "offset", "+", "cell", ")", "]", "[", "idx", "]", "=", "1", "\n", "index", "+=", "1", "\n", "op", ",", "cell", "=", "normal_cell", "[", "index", "]", "\n", "idx", "=", "genotypes", ".", "PRIMITIVES", ".", "index", "(", "op", ")", "\n", "new_normal", "[", "int", "(", "offset", "+", "cell", ")", "]", "[", "idx", "]", "=", "1", "\n", "offset", "+=", "(", "index", "//", "2", ")", "+", "2", "\n", "index", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.__init__.get_cifar_models": [[66, 107], ["getattr", "getattr.startswith", "CifarResNet", "ValueError", "DenseNet", "len", "getattr.split", "InferWidthCifarResNet", "CifarWideResNet", "ValueError", "getattr.split", "InferDepthCifarResNet", "InferCifarResNet", "NASNetonCIFAR", "ValueError", "torch.load", "hasattr", "hasattr", "os.path.isfile", "ValueError"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load"], ["# Discretizing the reduction cell", "\n", "", "index", "=", "0", "\n", "offset", "=", "0", "\n", "new_reduce", "=", "torch", ".", "zeros_like", "(", "alphas", "[", "1", "]", ")", "\n", "while", "index", "<", "len", "(", "reduction_cell", ")", ":", "\n", "    ", "op", ",", "cell", "=", "reduction_cell", "[", "index", "]", "\n", "idx", "=", "genotypes", ".", "PRIMITIVES", ".", "index", "(", "op", ")", "\n", "new_reduce", "[", "int", "(", "offset", "+", "cell", ")", "]", "[", "idx", "]", "=", "1", "\n", "index", "+=", "1", "\n", "op", ",", "cell", "=", "reduction_cell", "[", "index", "]", "\n", "idx", "=", "genotypes", ".", "PRIMITIVES", ".", "index", "(", "op", ")", "\n", "new_reduce", "[", "int", "(", "offset", "+", "cell", ")", "]", "[", "idx", "]", "=", "1", "\n", "offset", "+=", "(", "index", "//", "2", ")", "+", "2", "\n", "index", "+=", "1", "\n", "", "return", "[", "new_normal", ",", "new_reduce", "]", "\n", "\n", "", "def", "compare_s1genotype", "(", "g1", ",", "g2", ")", ":", "\n", "  ", "for", "index", ",", "node1", "in", "enumerate", "(", "g1", ")", ":", "\n", "    ", "tmp_list", "=", "g2", "[", "int", "(", "index", "/", "2", ")", "*", "2", ":", "(", "int", "(", "index", "/", "2", ")", "+", "1", ")", "*", "2", "]", "\n", "if", "node1", "not", "in", "tmp_list", ":", "\n", "      ", "return", "False", "\n", "", "", "return", "True", "\n", "\n", "", "def", "search_dataframe", "(", "df", ",", "g", ")", ":", "\n", "  ", "if", "(", "not", "df", ".", "empty", ")", ":", "\n", "    ", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "      ", "if", "compare_s1genotype", "(", "row", "[", "'genotype'", "]", ".", "normal", ",", "g", ".", "normal", ")", ":", "\n", "        ", "if", "compare_s1genotype", "(", "row", "[", "'genotype'", "]", ".", "reduce", ",", "g", ".", "reduce", ")", ":", "\n", "          ", "return", "row", "\n", "", "", "", "", "return", "None", "\n", "\n", "", "class", "AvgrageMeter", "(", "object", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "sum", "+=", "val", "*", "n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.__init__.get_imagenet_models": [[109, 136], ["getattr", "getattr.startswith", "ResNet", "ValueError", "MobileNetV2", "ValueError", "len", "getattr.split", "ValueError", "getattr.split", "InferImagenetResNet", "InferMobileNetV2", "ValueError"], "function", ["None"], ["self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n", "", "", "class", "NAS_config", ":", "\n", "  ", "'''\n  Class for loading the configurations of the NAS algorithms\n  '''", "\n", "def", "__init__", "(", "self", ",", "cfg_file", ",", "sectionName", ")", ":", "\n", "    ", "self", ".", "sectionName", "=", "sectionName", "\n", "infile", "=", "open", "(", "cfg_file", ",", "'r'", ")", "\n", "ymlcfg", "=", "yaml", ".", "safe_load", "(", "infile", ")", "\n", "infile", ".", "close", "(", ")", "\n", "self", ".", "NAS_cfg", "=", "ymlcfg", ".", "get", "(", "self", ".", "sectionName", ",", "None", ")", "\n", "\n", "", "", "def", "get_cell_param_name", "(", "name", ",", "big_OSM", ",", "small_OSM", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "if", "verbose", ":", "print", "(", "f'Before: {name}'", ")", "\n", "split_name", "=", "name", ".", "split", "(", "'.'", ")", "\n", "cell_number", ",", "edge_name", ",", "op_number", "=", "int", "(", "split_name", "[", "1", "]", ")", ",", "split_name", "[", "3", "]", ",", "split_name", "[", "4", "]", "\n", "if", "not", "isinstance", "(", "big_OSM", ".", "cells", "[", "cell_number", "]", ",", "ResNetBasicblock", ")", ":", "\n", "    ", "op_name", "=", "small_OSM", ".", "cells", "[", "cell_number", "]", ".", "op_position", "[", "edge_name", "]", "[", "op_number", "]", "\n", "for", "op_num", ",", "op", "in", "big_OSM", ".", "cells", "[", "cell_number", "]", ".", "op_position", "[", "edge_name", "]", ".", "items", "(", ")", ":", "\n", "      ", "if", "op", "==", "op_name", ":", "\n", "        ", "split_name", "[", "4", "]", "=", "op_num", "\n", "break", "\n", "", "", "", "res_name", "=", "'.'", ".", "join", "(", "split_name", ")", "\n", "if", "verbose", ":", "print", "(", "f'After: {res_name}'", ")", "\n", "return", "res_name", "\n", "\n", "", "def", "inherit_OSM_wts", "(", "big_OSM", ",", "small_OSM", ",", "verbose", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.__init__.obtain_model": [[139, 146], ["__init__.get_cifar_models", "__init__.get_imagenet_models", "ValueError"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.__init__.get_cifar_models", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.__init__.get_imagenet_models"], ["for", "idx", ",", "(", "param_name2", ",", "param2", ")", "in", "enumerate", "(", "small_OSM", ".", "named_parameters", "(", ")", ")", ":", "\n", "    ", "if", "'arch'", "not", "in", "param_name2", ":", "\n", "      ", "if", "verbose", ":", "print", "(", "f'{param_name2}: {param2.shape}'", ",", "end", "=", "''", ")", "\n", "if", "'cell'", "in", "param_name2", ":", "\n", "        ", "inherit_name", "=", "get_cell_param_name", "(", "name", "=", "param_name2", ",", "big_OSM", "=", "big_OSM", ",", "\n", "small_OSM", "=", "small_OSM", ",", "verbose", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "inherit_name", "=", "param_name2", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.__init__.obtain_search_model": [[148, 177], ["ValueError", "SearchWidthCifarResNet", "ValueError", "SearchShapeImagenetResNet", "ValueError", "SearchDepthCifarResNet", "SearchWidthSimResNet", "ValueError", "SearchShapeCifarResNet", "ValueError"], "function", ["None"], ["assert", "param1", ".", "shape", "==", "param2", ".", "shape", ",", "\"Mismatched shape\"", "\n", "param2", ".", "data", ".", "copy_", "(", "param1", ")", "\n", "assert", "torch", ".", "all", "(", "param1", "==", "param2", ")", ".", "item", "(", ")", ",", "\"Copy failed\"", "\n", "if", "verbose", ":", "print", "(", "f'->{inherit_name}: {param1.shape}: {param1.shape == param2.shape}'", ",", "end", "=", "'\\n'", ")", "\n", "if", "param1", ".", "shape", "==", "param2", ".", "shape", ":", "count", "+=", "1", "\n", "", "", "assert", "count", "==", "len", "(", "dict", "(", "small_OSM", ".", "named_parameters", "(", ")", ")", ")", "-", "1", ",", "\"Number of parameters copied failed\"", "\n", "if", "verbose", ":", "print", "(", "count", ")", "\n", "\n", "", "def", "shrink_space", "(", "arch_param", ",", "topk", ",", "arch_flag", ",", "edge2index", ",", "op_dict", ",", "op_position", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "arch_values", ",", "indices", "=", "torch", ".", "topk", "(", "arch_param", ",", "topk", ")", "\n", "new_arch_flag", "=", "torch", ".", "zeros_like", "(", "arch_flag", ")", "\n", "edge2index2", "=", "{", "value", ":", "key", "for", "key", ",", "value", "in", "edge2index", ".", "items", "(", ")", "}", "\n", "if", "verbose", ":", "print", "(", "f'Before::\\narch flags: {arch_flag}\\nindices: {indices}'", ")", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "indices", ")", ":", "\n", "    ", "edge", "=", "edge2index2", "[", "idx", "]", "\n", "for", "col", "in", "row", ":", "\n", "      ", "op_name", "=", "op_position", "[", "edge", "]", "[", "str", "(", "col", ".", "item", "(", ")", ")", "]", "\n", "op_index", "=", "op_dict", "[", "op_name", "]", "\n", "new_arch_flag", "[", "idx", "]", "[", "op_index", "]", "=", "True", "\n", "if", "verbose", ":", "print", "(", "f'({op_position[edge][str(col.item())]}, {op_index})'", ",", "end", "=", "':'", ")", "\n", "", "if", "verbose", ":", "print", "(", ")", "\n", "", "if", "verbose", ":", "print", "(", "f'After::\\narch flags: {new_arch_flag}'", ")", "\n", "return", "new_arch_flag", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.__init__.load_net_from_checkpoint": [[179, 186], ["os.path.isfile", "torch.load", "config_utils.dict2config", "__init__.obtain_model", "obtain_model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.dict2config", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.__init__.obtain_model", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.load_state_dict"], []], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarResNet.Downsample.__init__": [[10, 17], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "    ", "super", "(", "Downsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "2", "and", "nOut", "==", "2", "*", "nIn", ",", "'stride:{} IO:{},{}'", ".", "format", "(", "stride", ",", "nIn", ",", "nOut", ")", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarResNet.Downsample.forward": [[18, 22], ["CifarResNet.Downsample.avg", "CifarResNet.Downsample.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "avg", "(", "x", ")", "\n", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarResNet.ConvBNReLU.__init__": [[26, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "if", "relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "num_conv", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarResNet.ConvBNReLU.forward": [[35, 40], ["CifarResNet.ConvBNReLU.conv", "CifarResNet.ConvBNReLU.bn", "CifarResNet.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "conv", "=", "self", ".", "conv", "(", "x", ")", "\n", "bn", "=", "self", ".", "bn", "(", "conv", ")", "\n", "if", "self", ".", "relu", ":", "return", "self", ".", "relu", "(", "bn", ")", "\n", "else", ":", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarResNet.ResNetBasicblock.__init__": [[44, 57], ["torch.Module.__init__", "CifarResNet.ConvBNReLU", "CifarResNet.ConvBNReLU", "CifarResNet.Downsample", "CifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "Downsample", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "num_conv", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarResNet.ResNetBasicblock.forward": [[58, 69], ["CifarResNet.ResNetBasicblock.conv_a", "CifarResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.relu", "torch.relu", "torch.relu", "CifarResNet.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarResNet.ResNetBottleneck.__init__": [[74, 88], ["torch.Module.__init__", "CifarResNet.ConvBNReLU", "CifarResNet.ConvBNReLU", "CifarResNet.ConvBNReLU", "CifarResNet.Downsample", "CifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "Downsample", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "stride", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "num_conv", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarResNet.ResNetBottleneck.forward": [[89, 101], ["CifarResNet.ResNetBottleneck.conv_1x1", "CifarResNet.ResNetBottleneck.conv_3x3", "CifarResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.relu", "torch.relu", "torch.relu", "CifarResNet.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarResNet.CifarResNet.__init__": [[106, 146], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "CifarResNet.CifarResNet.apply", "range", "CifarResNet.CifarResNet.modules", "ValueError", "CifarResNet.ConvBNReLU", "block", "CifarResNet.CifarResNet.channels.append", "CifarResNet.CifarResNet.layers.append", "sum", "sum", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "    ", "super", "(", "CifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "'CifarResNet : Block : {:}, Depth : {:}, Layers for each block : {:}'", ".", "format", "(", "block_name", ",", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "True", ")", "]", ")", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iC", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "assert", "sum", "(", "x", ".", "num_conv", "for", "x", "in", "self", ".", "layers", ")", "+", "1", "==", "depth", ",", "'invalid depth check {:} vs {:}'", ".", "format", "(", "sum", "(", "x", ".", "num_conv", "for", "x", "in", "self", ".", "layers", ")", "+", "1", ",", "depth", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarResNet.CifarResNet.get_message": [[147, 149], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.CifarResNet.CifarResNet.forward": [[150, 158], ["enumerate", "CifarResNet.CifarResNet.avgpool", "features.view.view.view", "CifarResNet.CifarResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_MobileNetV2.ConvBNReLU.__init__": [[7, 13], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_MobileNetV2.ConvBNReLU.forward": [[14, 19], ["ImageNet_MobileNetV2.ConvBNReLU.conv", "ImageNet_MobileNetV2.ConvBNReLU.bn", "ImageNet_MobileNetV2.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_MobileNetV2.InvertedResidual.__init__": [[22, 42], ["torch.nn.Module.__init__", "int", "layers.extend", "torch.nn.Sequential", "round", "layers.append", "ImageNet_MobileNetV2.ConvBNReLU", "ImageNet_MobileNetV2.ConvBNReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "    ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "int", "(", "round", "(", "inp", "*", "expand_ratio", ")", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "layers", "=", "[", "]", "\n", "if", "expand_ratio", "!=", "1", ":", "\n", "# pw", "\n", "      ", "layers", ".", "append", "(", "ConvBNReLU", "(", "inp", ",", "hidden_dim", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "layers", ".", "extend", "(", "[", "\n", "# dw", "\n", "ConvBNReLU", "(", "hidden_dim", ",", "hidden_dim", ",", "stride", "=", "stride", ",", "groups", "=", "hidden_dim", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_MobileNetV2.InvertedResidual.forward": [[43, 48], ["ImageNet_MobileNetV2.InvertedResidual.conv", "ImageNet_MobileNetV2.InvertedResidual.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "use_res_connect", ":", "\n", "      ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_MobileNetV2.MobileNetV2.__init__": [[51, 93], ["torch.nn.Module.__init__", "int", "int", "features.append", "torch.nn.Sequential", "torch.nn.Sequential", "ImageNet_MobileNetV2.MobileNetV2.apply", "ValueError", "ImageNet_MobileNetV2.ConvBNReLU", "int", "range", "ImageNet_MobileNetV2.ConvBNReLU", "torch.nn.Dropout", "torch.nn.Linear", "max", "features.append", "block"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", ",", "width_mult", ",", "input_channel", ",", "last_channel", ",", "block_name", ",", "dropout", ")", ":", "\n", "    ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "block_name", "==", "'InvertedResidual'", ":", "\n", "      ", "block", "=", "InvertedResidual", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block name : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "", "inverted_residual_setting", "=", "[", "\n", "# t, c,  n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "self", ".", "last_channel", "=", "int", "(", "last_channel", "*", "max", "(", "1.0", ",", "width_mult", ")", ")", "\n", "features", "=", "[", "ConvBNReLU", "(", "3", ",", "input_channel", ",", "stride", "=", "2", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "inverted_residual_setting", ":", "\n", "      ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "stride", ",", "expand_ratio", "=", "t", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "features", ".", "append", "(", "ConvBNReLU", "(", "input_channel", ",", "self", ".", "last_channel", ",", "kernel_size", "=", "1", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "last_channel", ",", "num_classes", ")", ",", "\n", ")", "\n", "self", ".", "message", "=", "'MobileNetV2 : width_mult={:}, in-C={:}, last-C={:}, block={:}, dropout={:}'", ".", "format", "(", "width_mult", ",", "input_channel", ",", "last_channel", ",", "block_name", ",", "dropout", ")", "\n", "\n", "# weight initialization", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_MobileNetV2.MobileNetV2.get_message": [[94, 96], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.ImageNet_MobileNetV2.MobileNetV2.forward": [[97, 102], ["ImageNet_MobileNetV2.MobileNetV2.features", "ImageNet_MobileNetV2.MobileNetV2.mean", "ImageNet_MobileNetV2.MobileNetV2.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "features", "=", "self", ".", "features", "(", "inputs", ")", "\n", "vectors", "=", "features", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "predicts", "=", "self", ".", "classifier", "(", "vectors", ")", "\n", "return", "features", ",", "predicts", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.cells.InferCell.__init__": [[14, 38], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy", "range", "len", "len", "cells.InferCell.node_IX.append", "cells.InferCell.node_IN.append", "cur_index.append", "cur_innod.append", "cells.InferCell.layers.append", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "    ", "super", "(", "InferCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "node_IN", "=", "[", "]", "\n", "self", ".", "node_IX", "=", "[", "]", "\n", "self", ".", "genotype", "=", "deepcopy", "(", "genotype", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "genotype", ")", ")", ":", "\n", "      ", "node_info", "=", "genotype", "[", "i", "-", "1", "]", "\n", "cur_index", "=", "[", "]", "\n", "cur_innod", "=", "[", "]", "\n", "for", "(", "op_name", ",", "op_in", ")", "in", "node_info", ":", "\n", "        ", "if", "op_in", "==", "0", ":", "\n", "          ", "layer", "=", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "True", ",", "True", ")", "\n", "", "else", ":", "\n", "          ", "layer", "=", "OPS", "[", "op_name", "]", "(", "C_out", ",", "C_out", ",", "1", ",", "True", ",", "True", ")", "\n", "", "cur_index", ".", "append", "(", "len", "(", "self", ".", "layers", ")", ")", "\n", "cur_innod", ".", "append", "(", "op_in", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "", "self", ".", "node_IX", ".", "append", "(", "cur_index", ")", "\n", "self", ".", "node_IN", ".", "append", "(", "cur_innod", ")", "\n", "", "self", ".", "nodes", "=", "len", "(", "genotype", ")", "\n", "self", ".", "in_dim", "=", "C_in", "\n", "self", ".", "out_dim", "=", "C_out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.cells.InferCell.extra_repr": [[39, 47], ["enumerate", "zip", "laystr.append", "cells.InferCell.genotype.tostr", "zip"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tostr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "string", "=", "'info :: nodes={nodes}, inC={in_dim}, outC={out_dim}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "laystr", "=", "[", "]", "\n", "for", "i", ",", "(", "node_layers", ",", "node_innods", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "node_IX", ",", "self", ".", "node_IN", ")", ")", ":", "\n", "      ", "y", "=", "[", "'I{:}-L{:}'", ".", "format", "(", "_ii", ",", "_il", ")", "for", "_il", ",", "_ii", "in", "zip", "(", "node_layers", ",", "node_innods", ")", "]", "\n", "x", "=", "'{:}<-({:})'", ".", "format", "(", "i", "+", "1", ",", "','", ".", "join", "(", "y", ")", ")", "\n", "laystr", ".", "append", "(", "x", ")", "\n", "", "return", "string", "+", "', [{:}]'", ".", "format", "(", "' | '", ".", "join", "(", "laystr", ")", ")", "+", "', {:}'", ".", "format", "(", "self", ".", "genotype", ".", "tostr", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.cells.InferCell.forward": [[48, 54], ["enumerate", "zip", "sum", "nodes.append", "zip"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", ",", "(", "node_layers", ",", "node_innods", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "node_IX", ",", "self", ".", "node_IN", ")", ")", ":", "\n", "      ", "node_feature", "=", "sum", "(", "self", ".", "layers", "[", "_il", "]", "(", "nodes", "[", "_ii", "]", ")", "for", "_il", ",", "_ii", "in", "zip", "(", "node_layers", ",", "node_innods", ")", ")", "\n", "nodes", ".", "append", "(", "node_feature", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.cells.NASNetInferCell.__init__": [[60, 82], ["torch.Module.__init__", "len", "len", "torch.ModuleDict", "torch.ModuleDict", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "NASNetInferCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "if", "reduction_prev", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'skip_connect'", "]", "(", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", ")", "\n", "else", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "preprocess1", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "\n", "if", "not", "reduction", ":", "\n", "      ", "nodes", ",", "concats", "=", "genotype", "[", "'normal'", "]", ",", "genotype", "[", "'normal_concat'", "]", "\n", "", "else", ":", "\n", "      ", "nodes", ",", "concats", "=", "genotype", "[", "'reduce'", "]", ",", "genotype", "[", "'reduce_concat'", "]", "\n", "", "self", ".", "_multiplier", "=", "len", "(", "concats", ")", "\n", "self", ".", "_concats", "=", "concats", "\n", "self", ".", "_steps", "=", "len", "(", "nodes", ")", "\n", "self", ".", "_nodes", "=", "nodes", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "nodes", ")", ":", "\n", "      ", "for", "in_node", "in", "node", ":", "\n", "        ", "name", ",", "j", "=", "in_node", "[", "0", "]", ",", "in_node", "[", "1", "]", "\n", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", "+", "2", ",", "j", ")", "\n", "self", ".", "edges", "[", "node_str", "]", "=", "OPS", "[", "name", "]", "(", "C", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.cells.NASNetInferCell.forward": [[84, 98], ["cells.NASNetInferCell.preprocess0", "cells.NASNetInferCell.preprocess1", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "states.append", "clist.append", "sum", "op"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "unused_drop_prob", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "self", ".", "_nodes", ")", ":", "\n", "      ", "clist", "=", "[", "]", "\n", "for", "in_node", "in", "node", ":", "\n", "        ", "name", ",", "j", "=", "in_node", "[", "0", "]", ",", "in_node", "[", "1", "]", "\n", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", "+", "2", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "clist", ".", "append", "(", "op", "(", "states", "[", "j", "]", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "x", "]", "for", "x", "in", "self", ".", "_concats", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.cells.AuxiliaryHeadCIFAR.__init__": [[102, 116], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.cells.AuxiliaryHeadCIFAR.forward": [[117, 121], ["cells.AuxiliaryHeadCIFAR.features", "cells.AuxiliaryHeadCIFAR.classifier", "cells.AuxiliaryHeadCIFAR.view", "cells.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.nasnet_cifar.NASNetonCIFAR.__init__": [[13, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "cells.NASNetInferCell", "nasnet_cifar.NASNetonCIFAR.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cells.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "stem_multiplier", ",", "num_classes", ",", "genotype", ",", "auxiliary", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "NASNetonCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "C", "*", "stem_multiplier", ",", "C", "*", "stem_multiplier", ",", "C", ",", "False", "\n", "self", ".", "auxiliary_index", "=", "None", "\n", "self", ".", "auxiliary_head", "=", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "cell", "=", "InferCell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "cell", ".", "_multiplier", "*", "C_curr", ",", "reduction", "\n", "if", "reduction", "and", "C_curr", "==", "C", "*", "4", "and", "auxiliary", ":", "\n", "        ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "auxiliary_index", "=", "index", "\n", "", "", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "drop_path_prob", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.nasnet_cifar.NASNetonCIFAR.update_drop_path": [[42, 44], ["None"], "methods", ["None"], ["", "def", "update_drop_path", "(", "self", ",", "drop_path_prob", ")", ":", "\n", "    ", "self", ".", "drop_path_prob", "=", "drop_path_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.nasnet_cifar.NASNetonCIFAR.auxiliary_param": [[45, 48], ["list", "nasnet_cifar.NASNetonCIFAR.auxiliary_head.parameters"], "methods", ["None"], ["", "def", "auxiliary_param", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "auxiliary_head", "is", "None", ":", "return", "[", "]", "\n", "else", ":", "return", "list", "(", "self", ".", "auxiliary_head", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.nasnet_cifar.NASNetonCIFAR.get_message": [[49, 54], ["nasnet_cifar.NASNetonCIFAR.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.nasnet_cifar.NASNetonCIFAR.extra_repr": [[55, 57], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.nasnet_cifar.NASNetonCIFAR.forward": [[58, 72], ["enumerate", "nasnet_cifar.NASNetonCIFAR.lastact", "nasnet_cifar.NASNetonCIFAR.global_pooling", "out.view.view.view", "nasnet_cifar.NASNetonCIFAR.classifier", "nasnet_cifar.NASNetonCIFAR.stem", "cell", "cell_results.append", "out.view.view.size", "nasnet_cifar.NASNetonCIFAR.auxiliary_head"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "stem_feature", ",", "logits_aux", "=", "self", ".", "stem", "(", "inputs", ")", ",", "None", "\n", "cell_results", "=", "[", "stem_feature", ",", "stem_feature", "]", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "cell_feature", "=", "cell", "(", "cell_results", "[", "-", "2", "]", ",", "cell_results", "[", "-", "1", "]", ",", "self", ".", "drop_path_prob", ")", "\n", "cell_results", ".", "append", "(", "cell_feature", ")", "\n", "if", "self", ".", "auxiliary_index", "is", "not", "None", "and", "i", "==", "self", ".", "auxiliary_index", "and", "self", ".", "training", ":", "\n", "        ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "cell_results", "[", "-", "1", "]", ")", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "cell_results", "[", "-", "1", "]", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "if", "logits_aux", "is", "None", ":", "return", "out", ",", "logits", "\n", "else", ":", "return", "out", ",", "[", "logits", ",", "logits_aux", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.tiny_network.TinyNetwork.__init__": [[12, 38], ["torch.Module.__init__", "torch.Sequential", "torch.ModuleList", "enumerate", "len", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Conv2d", "torch.BatchNorm2d", "zip", "tiny_network.TinyNetwork.cells.append", "torch.BatchNorm2d", "torch.ReLU", "cell_operations.ResNetBasicblock", "cells.InferCell"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "genotype", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "TinyNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", "=", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ",", "True", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "InferCell", "(", "genotype", ",", "C_prev", ",", "C_curr", ",", "1", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.tiny_network.TinyNetwork.get_message": [[39, 44], ["tiny_network.TinyNetwork.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.tiny_network.TinyNetwork.extra_repr": [[45, 47], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_infers.tiny_network.TinyNetwork.forward": [[48, 59], ["tiny_network.TinyNetwork.stem", "enumerate", "tiny_network.TinyNetwork.lastact", "tiny_network.TinyNetwork.global_pooling", "out.view.view.view", "tiny_network.TinyNetwork.classifier", "cell", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.ConvBNReLU.__init__": [[32, 48], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchCifarResNet_depth.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_width_choices"], ["def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_width_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "'choices_tensor'", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "if", "has_bn", ":", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "else", ":", "self", ".", "bn", "=", "None", "\n", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.ConvBNReLU.get_flops": [[49, 60], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "divide", "=", "1", ")", ":", "\n", "    ", "iC", ",", "oC", "=", "self", ".", "in_dim", ",", "self", ".", "out_dim", "\n", "assert", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", ",", "'{:} vs {:}  |  {:} vs {:}'", ".", "format", "(", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", ")", "\n", "assert", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", ",", "'invalid in-shape : {:}'", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", ",", "'invalid out-shape : {:}'", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "#conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "flops", "+=", "all_positions", "/", "divide", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.ConvBNReLU.forward": [[61, 73], ["SearchCifarResNet_depth.ConvBNReLU.conv", "SearchCifarResNet_depth.ConvBNReLU.avg", "SearchCifarResNet_depth.ConvBNReLU.bn", "SearchCifarResNet_depth.ConvBNReLU.relu", "inputs.size", "inputs.size", "SearchCifarResNet_depth.ConvBNReLU.size", "SearchCifarResNet_depth.ConvBNReLU.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "if", "self", ".", "InShape", "is", "None", ":", "\n", "      ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.ResNetBasicblock.__init__": [[78, 91], ["torch.Module.__init__", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.ResNetBasicblock.get_flops": [[92, 100], ["SearchCifarResNet_depth.ResNetBasicblock.conv_a.get_flops", "SearchCifarResNet_depth.ResNetBasicblock.conv_b.get_flops", "hasattr", "SearchCifarResNet_depth.ResNetBasicblock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "divide", "=", "1", ")", ":", "\n", "    ", "flop_A", "=", "self", ".", "conv_a", ".", "get_flops", "(", "divide", ")", "\n", "flop_B", "=", "self", ".", "conv_b", ".", "get_flops", "(", "divide", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "divide", ")", "\n", "", "else", ":", "\n", "      ", "flop_C", "=", "0", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.ResNetBasicblock.forward": [[101, 108], ["SearchCifarResNet_depth.ResNetBasicblock.conv_a", "SearchCifarResNet_depth.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet_depth.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.ResNetBottleneck.__init__": [[114, 128], ["torch.Module.__init__", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU", "SearchCifarResNet_depth.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.ResNetBottleneck.get_range": [[129, 131], ["SearchCifarResNet_depth.ResNetBottleneck.conv_1x4.get_range", "SearchCifarResNet_depth.ResNetBottleneck.conv_1x1.get_range", "SearchCifarResNet_depth.ResNetBottleneck.conv_3x3.get_range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_1x1", ".", "get_range", "(", ")", "+", "self", ".", "conv_3x3", ".", "get_range", "(", ")", "+", "self", ".", "conv_1x4", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.ResNetBottleneck.get_flops": [[132, 141], ["SearchCifarResNet_depth.ResNetBottleneck.conv_1x1.get_flops", "SearchCifarResNet_depth.ResNetBottleneck.conv_3x3.get_flops", "SearchCifarResNet_depth.ResNetBottleneck.conv_1x4.get_flops", "hasattr", "SearchCifarResNet_depth.ResNetBottleneck.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "divide", ")", ":", "\n", "    ", "flop_A", "=", "self", ".", "conv_1x1", ".", "get_flops", "(", "divide", ")", "\n", "flop_B", "=", "self", ".", "conv_3x3", ".", "get_flops", "(", "divide", ")", "\n", "flop_C", "=", "self", ".", "conv_1x4", ".", "get_flops", "(", "divide", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_D", "=", "self", ".", "downsample", ".", "get_flops", "(", "divide", ")", "\n", "", "else", ":", "\n", "      ", "flop_D", "=", "0", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "+", "flop_D", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.ResNetBottleneck.forward": [[142, 150], ["SearchCifarResNet_depth.ResNetBottleneck.conv_1x1", "SearchCifarResNet_depth.ResNetBottleneck.conv_3x3", "SearchCifarResNet_depth.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet_depth.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.__init__": [[154, 215], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "collections.OrderedDict", "collections.OrderedDict", "range", "SearchCifarResNet_depth.SearchDepthCifarResNet.depth_info.items", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "SearchCifarResNet_depth.SearchDepthCifarResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "SearchCifarResNet_depth.SearchDepthCifarResNet.apply", "SearchCifarResNet_depth.get_depth_choices", "range", "SearchCifarResNet_depth.SearchDepthCifarResNet.depth_info_list.append", "range", "torch.Parameter", "torch.Parameter", "ValueError", "SearchCifarResNet_depth.ConvBNReLU", "len", "block", "SearchCifarResNet_depth.SearchDepthCifarResNet.channels.append", "SearchCifarResNet_depth.SearchDepthCifarResNet.layers.append", "bisect.bisect_right", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "block_choices.append", "SearchCifarResNet_depth.get_depth_choices", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_depth_choices", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_depth_choices"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "SearchDepthCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "'SearchShapeCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "depth_info", "=", "OrderedDict", "(", ")", "\n", "self", ".", "depth_at_i", "=", "OrderedDict", "(", ")", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "cur_block_choices", "=", "get_depth_choices", "(", "layer_blocks", ",", "False", ")", "\n", "assert", "cur_block_choices", "[", "-", "1", "]", "==", "layer_blocks", ",", "'stage={:}, {:} vs {:}'", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:} ::: depth-block-choices={:} for {:} blocks.\"", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "block_choices", ",", "xstart", "=", "[", "]", ",", "len", "(", "self", ".", "layers", ")", "\n", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iC", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "# added for depth", "\n", "layer_index", "=", "len", "(", "self", ".", "layers", ")", "-", "1", "\n", "if", "iL", "+", "1", "in", "cur_block_choices", ":", "block_choices", ".", "append", "(", "layer_index", ")", "\n", "if", "iL", "+", "1", "==", "layer_blocks", ":", "\n", "          ", "self", ".", "depth_info", "[", "layer_index", "]", "=", "{", "'choices'", ":", "block_choices", ",", "\n", "'stage'", ":", "stage", ",", "\n", "'xstart'", ":", "xstart", "}", "\n", "", "", "", "self", ".", "depth_info_list", "=", "[", "]", "\n", "for", "xend", ",", "info", "in", "self", ".", "depth_info", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "depth_info_list", ".", "append", "(", "(", "xend", ",", "info", ")", ")", "\n", "xstart", ",", "xstage", "=", "info", "[", "'xstart'", "]", ",", "info", "[", "'stage'", "]", "\n", "for", "ilayer", "in", "range", "(", "xstart", ",", "xend", "+", "1", ")", ":", "\n", "        ", "idx", "=", "bisect_right", "(", "info", "[", "'choices'", "]", ",", "ilayer", "-", "1", ")", "\n", "self", ".", "depth_at_i", "[", "ilayer", "]", "=", "(", "xstage", ",", "idx", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "#assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "\n", "self", ".", "register_parameter", "(", "'depth_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "3", ",", "get_depth_choices", "(", "layer_blocks", ",", "True", ")", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "depth_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.arch_parameters": [[216, 218], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "depth_attentions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.base_parameters": [[219, 221], ["list", "list", "list", "SearchCifarResNet_depth.SearchDepthCifarResNet.classifier.parameters", "SearchCifarResNet_depth.SearchDepthCifarResNet.layers.parameters", "SearchCifarResNet_depth.SearchDepthCifarResNet.avgpool.parameters"], "methods", ["None"], ["", "def", "base_parameters", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.get_flop": [[222, 260], ["zip", "enumerate", "config_dict.copy.copy.copy", "selected_layers.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "layer.get_flops", "ValueError", "layer.get_flops", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.functional.softmax.size", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.functional.softmax.size", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "    ", "if", "config_dict", "is", "not", "None", ":", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "# select depth", "\n", "if", "mode", "==", "'genotype'", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "argmax", "(", "depth_probs", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "elif", "mode", "==", "'max'", ":", "\n", "      ", "choices", "=", "[", "depth_probs", ".", "size", "(", "1", ")", "-", "1", "for", "_", "in", "range", "(", "depth_probs", ".", "size", "(", "0", ")", ")", "]", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "multinomial", "(", "depth_probs", ",", "1", ",", "False", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "selected_layers", "=", "[", "]", "\n", "for", "choice", ",", "xvalue", "in", "zip", "(", "choices", ",", "self", ".", "depth_info_list", ")", ":", "\n", "      ", "xtemp", "=", "xvalue", "[", "1", "]", "[", "'choices'", "]", "[", "choice", "]", "-", "xvalue", "[", "1", "]", "[", "'xstart'", "]", "+", "1", "\n", "selected_layers", ".", "append", "(", "xtemp", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "        ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "if", "xatti", "<=", "choices", "[", "xstagei", "]", ":", "# leave this depth", "\n", "          ", "flop", "+=", "layer", ".", "get_flops", "(", ")", "\n", "", "else", ":", "\n", "          ", "flop", "+=", "0", "# do not use this layer", "\n", "", "", "else", ":", "\n", "        ", "flop", "+=", "layer", ".", "get_flops", "(", ")", "\n", "# the last fc layer", "\n", "", "", "flop", "+=", "self", ".", "classifier", ".", "in_features", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "      ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "      ", "config_dict", "[", "'xblocks'", "]", "=", "selected_layers", "\n", "config_dict", "[", "'super_type'", "]", "=", "'infer-depth'", "\n", "config_dict", "[", "'estimated_FLOP'", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.get_arch_info": [[261, 279], ["len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "    ", "string", "=", "\"for depth, there are {:} attention probabilities.\"", ".", "format", "(", "len", "(", "self", ".", "depth_attentions", ")", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "self", ".", "depth_info", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "depth_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "depth_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.4f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:17s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || discrepancy={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.set_tau": [[280, 284], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "    ", "assert", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", ",", "'invalid epoch-ratio : {:}'", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.get_message": [[285, 287], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.forward": [[288, 295], ["SearchCifarResNet_depth.SearchDepthCifarResNet.basic_forward", "SearchCifarResNet_depth.SearchDepthCifarResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.search_forward": [[296, 331], ["torch.functional.softmax", "torch.functional.softmax", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchCifarResNet_depth.SearchDepthCifarResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "layer", "feature_maps.append", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "enumerate", "sum", "layer.get_flops", "possible_tensors.append", "layer.get_flops", "sum", "zip"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "flop_depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "torch", ".", "flip", "(", "torch", ".", "cumsum", "(", "torch", ".", "flip", "(", "flop_depth_probs", ",", "[", "1", "]", ")", ",", "1", ")", ",", "[", "1", "]", ")", "\n", "selected_depth_probs", "=", "select2withP", "(", "self", ".", "depth_attentions", ",", "self", ".", "tau", ",", "True", ")", "\n", "\n", "x", ",", "flops", "=", "inputs", ",", "[", "]", "\n", "feature_maps", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "layer_i", "=", "layer", "(", "x", ")", "\n", "feature_maps", ".", "append", "(", "layer_i", ")", "\n", "if", "i", "in", "self", ".", "depth_info", ":", "# aggregate the information", "\n", "        ", "choices", "=", "self", ".", "depth_info", "[", "i", "]", "[", "'choices'", "]", "\n", "xstagei", "=", "self", ".", "depth_info", "[", "i", "]", "[", "'stage'", "]", "\n", "possible_tensors", "=", "[", "]", "\n", "for", "tempi", ",", "A", "in", "enumerate", "(", "choices", ")", ":", "\n", "          ", "xtensor", "=", "feature_maps", "[", "A", "]", "\n", "possible_tensors", ".", "append", "(", "xtensor", ")", "\n", "", "weighted_sum", "=", "sum", "(", "xtensor", "*", "W", "for", "xtensor", ",", "W", "in", "zip", "(", "possible_tensors", ",", "selected_depth_probs", "[", "xstagei", "]", ")", ")", "\n", "x", "=", "weighted_sum", "\n", "", "else", ":", "\n", "        ", "x", "=", "layer_i", "\n", "\n", "", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "        ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "#print ('layer-{:03d}, stage={:}, att={:}, prob={:}, flop={:}'.format(i, xstagei, xatti, flop_depth_probs[xstagei, xatti].item(), layer.get_flops(1e6)))", "\n", "x_expected_flop", "=", "flop_depth_probs", "[", "xstagei", ",", "xatti", "]", "*", "layer", ".", "get_flops", "(", "1e6", ")", "\n", "", "else", ":", "\n", "        ", "x_expected_flop", "=", "layer", ".", "get_flops", "(", "1e6", ")", "\n", "", "flops", ".", "append", "(", "x_expected_flop", ")", "\n", "", "flops", ".", "append", "(", "(", "self", ".", "classifier", ".", "in_features", "*", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.SearchDepthCifarResNet.basic_forward": [[332, 341], ["enumerate", "SearchCifarResNet_depth.SearchDepthCifarResNet.avgpool", "features.view.view.view", "SearchCifarResNet_depth.SearchDepthCifarResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "InShape", "is", "None", ":", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_depth.get_depth_choices": [[15, 27], ["len", "list", "ValueError", "range", "list.append"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "get_depth_choices", "(", "nDepth", ",", "return_num", ")", ":", "\n", "  ", "if", "nDepth", "==", "2", ":", "\n", "    ", "choices", "=", "(", "1", ",", "2", ")", "\n", "", "elif", "nDepth", "==", "3", ":", "\n", "    ", "choices", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "", "elif", "nDepth", ">", "3", ":", "\n", "    ", "choices", "=", "list", "(", "range", "(", "1", ",", "nDepth", "+", "1", ",", "2", ")", ")", "\n", "if", "choices", "[", "-", "1", "]", "<", "nDepth", ":", "choices", ".", "append", "(", "nDepth", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid nDepth : {:}'", ".", "format", "(", "nDepth", ")", ")", "\n", "", "if", "return_num", ":", "return", "len", "(", "choices", ")", "\n", "else", ":", "return", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ConvBNReLU.__init__": [[26, 47], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchCifarResNet_width.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "SearchCifarResNet_width.ConvBNReLU.BNs.append", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_width_choices", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "'choices_tensor'", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "#if has_bn  : self.bn  = nn.BatchNorm2d(nOut)", "\n", "#else       : self.bn  = None", "\n", "self", ".", "has_bn", "=", "has_bn", "\n", "self", ".", "BNs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "_out", "in", "enumerate", "(", "self", ".", "choices", ")", ":", "\n", "      ", "self", ".", "BNs", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "_out", ")", ")", "\n", "", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ConvBNReLU.get_flops": [[48, 59], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "channels", ",", "check_range", "=", "True", ",", "divide", "=", "1", ")", ":", "\n", "    ", "iC", ",", "oC", "=", "channels", "\n", "if", "check_range", ":", "assert", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", ",", "'{:} vs {:}  |  {:} vs {:}'", ".", "format", "(", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", ")", "\n", "assert", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", ",", "'invalid in-shape : {:}'", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", ",", "'invalid out-shape : {:}'", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "#conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "flops", "+=", "all_positions", "/", "divide", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ConvBNReLU.get_range": [[60, 62], ["None"], "methods", ["None"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ConvBNReLU.forward": [[63, 70], ["SearchCifarResNet_width.ConvBNReLU.basic_forward", "SearchCifarResNet_width.ConvBNReLU.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ConvBNReLU.search_forward": [[71, 96], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "SearchCifarResNet_width.ConvBNReLU.get_flops", "SearchCifarResNet_width.conv_forward", "max", "SoftSelect.ChannelWiseInter", "SoftSelect.ChannelWiseInter", "isinstance", "type", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "SearchCifarResNet_width.ConvBNReLU.avg", "SearchCifarResNet_width.ConvBNReLU.relu", "len", "zip", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.conv_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "index", ",", "prob", "=", "tuple_inputs", "\n", "index", ",", "prob", "=", "torch", ".", "squeeze", "(", "index", ")", ".", "tolist", "(", ")", ",", "torch", ".", "squeeze", "(", "prob", ")", "\n", "probability", "=", "torch", ".", "squeeze", "(", "probability", ")", "\n", "assert", "len", "(", "index", ")", "==", "2", ",", "'invalid length : {:}'", ".", "format", "(", "index", ")", "\n", "# compute expected flop", "\n", "#coordinates   = torch.arange(self.x_range[0], self.x_range[1]+1).type_as(probability)", "\n", "expected_outC", "=", "(", "self", ".", "choices_tensor", "*", "probability", ")", ".", "sum", "(", ")", "\n", "expected_flop", "=", "self", ".", "get_flops", "(", "[", "expected_inC", ",", "expected_outC", "]", ",", "False", ",", "1e6", ")", "\n", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "# convolutional layer", "\n", "out_convs", "=", "conv_forward", "(", "out", ",", "self", ".", "conv", ",", "[", "self", ".", "choices", "[", "i", "]", "for", "i", "in", "index", "]", ")", "\n", "out_bns", "=", "[", "self", ".", "BNs", "[", "idx", "]", "(", "out_conv", ")", "for", "idx", ",", "out_conv", "in", "zip", "(", "index", ",", "out_convs", ")", "]", "\n", "# merge", "\n", "out_channel", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "out_bns", "]", ")", "\n", "outA", "=", "ChannelWiseInter", "(", "out_bns", "[", "0", "]", ",", "out_channel", ")", "\n", "outB", "=", "ChannelWiseInter", "(", "out_bns", "[", "1", "]", ",", "out_channel", ")", "\n", "out", "=", "outA", "*", "prob", "[", "0", "]", "+", "outB", "*", "prob", "[", "1", "]", "\n", "#out = additive_func(out_bns[0]*prob[0], out_bns[1]*prob[1])", "\n", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "return", "out", ",", "expected_outC", ",", "expected_flop", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ConvBNReLU.basic_forward": [[97, 109], ["SearchCifarResNet_width.ConvBNReLU.conv", "SearchCifarResNet_width.ConvBNReLU.avg", "SearchCifarResNet_width.ConvBNReLU.relu", "inputs.size", "inputs.size", "SearchCifarResNet_width.ConvBNReLU.size", "SearchCifarResNet_width.ConvBNReLU.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "has_bn", ":", "out", "=", "self", ".", "BNs", "[", "-", "1", "]", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "if", "self", ".", "InShape", "is", "None", ":", "\n", "      ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.__init__": [[114, 127], ["torch.Module.__init__", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.get_range": [[128, 130], ["SearchCifarResNet_width.ResNetBasicblock.conv_a.get_range", "SearchCifarResNet_width.ResNetBasicblock.conv_b.get_range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_a", ".", "get_range", "(", ")", "+", "self", ".", "conv_b", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.get_flops": [[131, 142], ["SearchCifarResNet_width.ResNetBasicblock.conv_a.get_flops", "SearchCifarResNet_width.ResNetBasicblock.conv_b.get_flops", "hasattr", "len", "SearchCifarResNet_width.ResNetBasicblock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "3", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_a", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_b", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_C", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_C", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv_b", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv_b", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.forward": [[143, 147], ["SearchCifarResNet_width.ResNetBasicblock.basic_forward", "SearchCifarResNet_width.ResNetBasicblock.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.search_forward": [[148, 160], ["SearchCifarResNet_width.ResNetBasicblock.conv_a", "SearchCifarResNet_width.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "isinstance", "type", "SearchCifarResNet_width.ResNetBasicblock.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "2", "and", "probs", ".", "size", "(", "0", ")", "==", "2", "and", "probability", ".", "size", "(", "0", ")", "==", "2", "\n", "out_a", ",", "expected_inC_a", ",", "expected_flop_a", "=", "self", ".", "conv_a", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "out_b", ",", "expected_inC_b", ",", "expected_flop_b", "=", "self", ".", "conv_b", "(", "(", "out_a", ",", "expected_inC_a", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_b", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_inC_b", ",", "sum", "(", "[", "expected_flop_a", ",", "expected_flop_b", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ResNetBasicblock.basic_forward": [[161, 168], ["SearchCifarResNet_width.ResNetBasicblock.conv_a", "SearchCifarResNet_width.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet_width.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.__init__": [[174, 188], ["torch.Module.__init__", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU", "SearchCifarResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.get_range": [[189, 191], ["SearchCifarResNet_width.ResNetBottleneck.conv_1x4.get_range", "SearchCifarResNet_width.ResNetBottleneck.conv_1x1.get_range", "SearchCifarResNet_width.ResNetBottleneck.conv_3x3.get_range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_1x1", ".", "get_range", "(", ")", "+", "self", ".", "conv_3x3", ".", "get_range", "(", ")", "+", "self", ".", "conv_1x4", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.get_flops": [[192, 204], ["SearchCifarResNet_width.ResNetBottleneck.conv_1x1.get_flops", "SearchCifarResNet_width.ResNetBottleneck.conv_3x3.get_flops", "SearchCifarResNet_width.ResNetBottleneck.conv_1x4.get_flops", "hasattr", "len", "SearchCifarResNet_width.ResNetBottleneck.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "4", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_1x1", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_3x3", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "flop_C", "=", "self", ".", "conv_1x4", ".", "get_flops", "(", "[", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_D", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_D", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_D", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "+", "flop_D", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.forward": [[205, 209], ["SearchCifarResNet_width.ResNetBottleneck.basic_forward", "SearchCifarResNet_width.ResNetBottleneck.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.basic_forward": [[210, 218], ["SearchCifarResNet_width.ResNetBottleneck.conv_1x1", "SearchCifarResNet_width.ResNetBottleneck.conv_3x3", "SearchCifarResNet_width.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet_width.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.ResNetBottleneck.search_forward": [[219, 232], ["SearchCifarResNet_width.ResNetBottleneck.conv_1x1", "SearchCifarResNet_width.ResNetBottleneck.conv_3x3", "SearchCifarResNet_width.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "isinstance", "type", "SearchCifarResNet_width.ResNetBottleneck.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "3", "and", "probs", ".", "size", "(", "0", ")", "==", "3", "and", "probability", ".", "size", "(", "0", ")", "==", "3", "\n", "out_1x1", ",", "expected_inC_1x1", ",", "expected_flop_1x1", "=", "self", ".", "conv_1x1", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "out_3x3", ",", "expected_inC_3x3", ",", "expected_flop_3x3", "=", "self", ".", "conv_3x3", "(", "(", "out_1x1", ",", "expected_inC_1x1", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "out_1x4", ",", "expected_inC_1x4", ",", "expected_flop_1x4", "=", "self", ".", "conv_1x4", "(", "(", "out_3x3", ",", "expected_inC_3x3", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_1x4", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_inC_1x4", ",", "sum", "(", "[", "expected_flop_1x1", ",", "expected_flop_3x3", ",", "expected_flop_1x4", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.__init__": [[236, 285], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "enumerate", "SearchCifarResNet_width.SearchWidthCifarResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "SearchCifarResNet_width.SearchWidthCifarResNet.apply", "range", "len", "layer.get_range", "SearchCifarResNet_width.SearchWidthCifarResNet.layer2indexRange.append", "torch.Parameter", "torch.Parameter", "ValueError", "SearchCifarResNet_width.ConvBNReLU", "block", "SearchCifarResNet_width.SearchWidthCifarResNet.channels.append", "SearchCifarResNet_width.SearchWidthCifarResNet.layers.append", "len", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "len", "SoftSelect.get_width_choices", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_width_choices"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "SearchWidthCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "'SearchWidthCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iC", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "#assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "# parameters for width", "\n", "self", ".", "Ranges", "=", "[", "]", "\n", "self", ".", "layer2indexRange", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "start_index", "=", "len", "(", "self", ".", "Ranges", ")", "\n", "self", ".", "Ranges", "+=", "layer", ".", "get_range", "(", ")", "\n", "self", ".", "layer2indexRange", ".", "append", "(", "(", "start_index", ",", "len", "(", "self", ".", "Ranges", ")", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "Ranges", ")", "+", "1", "==", "depth", ",", "'invalid depth check {:} vs {:}'", ".", "format", "(", "len", "(", "self", ".", "Ranges", ")", "+", "1", ",", "depth", ")", "\n", "\n", "self", ".", "register_parameter", "(", "'width_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "self", ".", "Ranges", ")", ",", "get_choices", "(", "None", ")", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "width_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.arch_parameters": [[286, 288], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "width_attentions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.base_parameters": [[289, 291], ["list", "list", "list", "SearchCifarResNet_width.SearchWidthCifarResNet.classifier.parameters", "SearchCifarResNet_width.SearchWidthCifarResNet.layers.parameters", "SearchCifarResNet_width.SearchWidthCifarResNet.avgpool.parameters"], "methods", ["None"], ["", "def", "base_parameters", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.get_flop": [[292, 330], ["enumerate", "enumerate", "config_dict.copy.copy.copy", "channels.append", "tuple", "layer.get_flops", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "isinstance", "ValueError", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.functional.softmax.size", "math.sqrt", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "abs", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "    ", "if", "config_dict", "is", "not", "None", ":", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "#weights = [F.softmax(x, dim=0) for x in self.width_attentions]", "\n", "channels", "=", "[", "3", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "      ", "if", "mode", "==", "'genotype'", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "probe", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "argmax", "(", "probe", ")", ".", "item", "(", ")", "]", "\n", "", "", "elif", "mode", "==", "'max'", ":", "\n", "        ", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", "\n", "", "elif", "mode", "==", "'fix'", ":", "\n", "        ", "C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "        ", "assert", "isinstance", "(", "extra_info", ",", "float", ")", ",", "'invalid extra_info : {:}'", ".", "format", "(", "extra_info", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "approximate_C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "for", "j", "in", "range", "(", "prob", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "prob", "[", "j", "]", "=", "1", "/", "(", "abs", "(", "j", "-", "(", "approximate_C", "-", "self", ".", "Ranges", "[", "i", "]", "[", "j", "]", ")", ")", "+", "0.2", ")", "\n", "", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "multinomial", "(", "prob", ",", "1", ",", "False", ")", ".", "item", "(", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "channels", ".", "append", "(", "C", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "s", ",", "e", "=", "self", ".", "layer2indexRange", "[", "i", "]", "\n", "xchl", "=", "tuple", "(", "channels", "[", "s", ":", "e", "+", "1", "]", ")", "\n", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "# the last fc layer", "\n", "", "flop", "+=", "channels", "[", "-", "1", "]", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "      ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "      ", "config_dict", "[", "'xchannels'", "]", "=", "channels", "\n", "config_dict", "[", "'super_type'", "]", "=", "'infer-width'", "\n", "config_dict", "[", "'estimated_FLOP'", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.get_arch_info": [[331, 348], ["len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "    ", "string", "=", "\"for width, there are {:} attention probabilities.\"", ".", "format", "(", "len", "(", "self", ".", "width_attentions", ")", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "width_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:52s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || dis={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.set_tau": [[349, 353], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "    ", "assert", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", ",", "'invalid epoch-ratio : {:}'", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.get_message": [[354, 356], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.forward": [[357, 364], ["SearchCifarResNet_width.SearchWidthCifarResNet.basic_forward", "SearchCifarResNet_width.SearchWidthCifarResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.search_forward": [[365, 384], ["torch.functional.softmax", "torch.functional.softmax", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchCifarResNet_width.SearchWidthCifarResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_widths.cpu.cpu.cpu", "layer", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "sum"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "flop_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "width_attentions", ",", "dim", "=", "1", ")", "\n", "selected_widths", ",", "selected_probs", "=", "select2withP", "(", "self", ".", "width_attentions", ",", "self", ".", "tau", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "selected_widths", "=", "selected_widths", ".", "cpu", "(", ")", "\n", "\n", "", "x", ",", "last_channel_idx", ",", "expected_inC", ",", "flops", "=", "inputs", ",", "0", ",", "3", ",", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "selected_w_index", "=", "selected_widths", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "selected_w_probs", "=", "selected_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "layer_prob", "=", "flop_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "x", ",", "expected_inC", ",", "expected_flop", "=", "layer", "(", "(", "x", ",", "expected_inC", ",", "layer_prob", ",", "selected_w_index", ",", "selected_w_probs", ")", ")", "\n", "last_channel_idx", "+=", "layer", ".", "num_conv", "\n", "flops", ".", "append", "(", "expected_flop", ")", "\n", "", "flops", ".", "append", "(", "expected_inC", "*", "(", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.SearchWidthCifarResNet.basic_forward": [[385, 394], ["enumerate", "SearchCifarResNet_width.SearchWidthCifarResNet.avgpool", "features.view.view.view", "SearchCifarResNet_width.SearchWidthCifarResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "InShape", "is", "None", ":", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet_width.conv_forward": [[13, 22], ["list", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "conv", "inputs.size"], "function", ["None"], ["def", "conv_forward", "(", "inputs", ",", "conv", ",", "choices", ")", ":", "\n", "  ", "iC", "=", "conv", ".", "in_channels", "\n", "fill_size", "=", "list", "(", "inputs", ".", "size", "(", ")", ")", "\n", "fill_size", "[", "1", "]", "=", "iC", "-", "fill_size", "[", "1", "]", "\n", "filled", "=", "torch", ".", "zeros", "(", "fill_size", ",", "device", "=", "inputs", ".", "device", ")", "\n", "xinputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "filled", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "conv", "(", "xinputs", ")", "\n", "selecteds", "=", "[", "outputs", "[", ":", ",", ":", "oC", "]", "for", "oC", "in", "choices", "]", "\n", "return", "selecteds", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.ConvBNReLU.__init__": [[26, 47], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchSimResNet_width.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "SearchSimResNet_width.ConvBNReLU.BNs.append", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_width_choices", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "'choices_tensor'", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "#if has_bn  : self.bn  = nn.BatchNorm2d(nOut)", "\n", "#else       : self.bn  = None", "\n", "self", ".", "has_bn", "=", "has_bn", "\n", "self", ".", "BNs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "_out", "in", "enumerate", "(", "self", ".", "choices", ")", ":", "\n", "      ", "self", ".", "BNs", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "_out", ")", ")", "\n", "", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.ConvBNReLU.get_flops": [[48, 59], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "channels", ",", "check_range", "=", "True", ",", "divide", "=", "1", ")", ":", "\n", "    ", "iC", ",", "oC", "=", "channels", "\n", "if", "check_range", ":", "assert", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", ",", "'{:} vs {:}  |  {:} vs {:}'", ".", "format", "(", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", ")", "\n", "assert", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", ",", "'invalid in-shape : {:}'", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", ",", "'invalid out-shape : {:}'", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "#conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "flops", "+=", "all_positions", "/", "divide", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.ConvBNReLU.get_range": [[60, 62], ["None"], "methods", ["None"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.ConvBNReLU.forward": [[63, 70], ["SearchSimResNet_width.ConvBNReLU.basic_forward", "SearchSimResNet_width.ConvBNReLU.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.ConvBNReLU.search_forward": [[71, 96], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "SearchSimResNet_width.ConvBNReLU.get_flops", "SearchSimResNet_width.conv_forward", "max", "SoftSelect.ChannelWiseInter", "SoftSelect.ChannelWiseInter", "isinstance", "type", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "SearchSimResNet_width.ConvBNReLU.avg", "SearchSimResNet_width.ConvBNReLU.relu", "len", "zip", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.conv_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "index", ",", "prob", "=", "tuple_inputs", "\n", "index", ",", "prob", "=", "torch", ".", "squeeze", "(", "index", ")", ".", "tolist", "(", ")", ",", "torch", ".", "squeeze", "(", "prob", ")", "\n", "probability", "=", "torch", ".", "squeeze", "(", "probability", ")", "\n", "assert", "len", "(", "index", ")", "==", "2", ",", "'invalid length : {:}'", ".", "format", "(", "index", ")", "\n", "# compute expected flop", "\n", "#coordinates   = torch.arange(self.x_range[0], self.x_range[1]+1).type_as(probability)", "\n", "expected_outC", "=", "(", "self", ".", "choices_tensor", "*", "probability", ")", ".", "sum", "(", ")", "\n", "expected_flop", "=", "self", ".", "get_flops", "(", "[", "expected_inC", ",", "expected_outC", "]", ",", "False", ",", "1e6", ")", "\n", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "# convolutional layer", "\n", "out_convs", "=", "conv_forward", "(", "out", ",", "self", ".", "conv", ",", "[", "self", ".", "choices", "[", "i", "]", "for", "i", "in", "index", "]", ")", "\n", "out_bns", "=", "[", "self", ".", "BNs", "[", "idx", "]", "(", "out_conv", ")", "for", "idx", ",", "out_conv", "in", "zip", "(", "index", ",", "out_convs", ")", "]", "\n", "# merge", "\n", "out_channel", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "out_bns", "]", ")", "\n", "outA", "=", "ChannelWiseInter", "(", "out_bns", "[", "0", "]", ",", "out_channel", ")", "\n", "outB", "=", "ChannelWiseInter", "(", "out_bns", "[", "1", "]", ",", "out_channel", ")", "\n", "out", "=", "outA", "*", "prob", "[", "0", "]", "+", "outB", "*", "prob", "[", "1", "]", "\n", "#out = additive_func(out_bns[0]*prob[0], out_bns[1]*prob[1])", "\n", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "return", "out", ",", "expected_outC", ",", "expected_flop", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.ConvBNReLU.basic_forward": [[97, 109], ["SearchSimResNet_width.ConvBNReLU.conv", "SearchSimResNet_width.ConvBNReLU.avg", "SearchSimResNet_width.ConvBNReLU.relu", "inputs.size", "inputs.size", "SearchSimResNet_width.ConvBNReLU.size", "SearchSimResNet_width.ConvBNReLU.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "has_bn", ":", "out", "=", "self", ".", "BNs", "[", "-", "1", "]", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "if", "self", ".", "InShape", "is", "None", ":", "\n", "      ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SimBlock.__init__": [[114, 126], ["torch.Module.__init__", "SearchSimResNet_width.ConvBNReLU", "SearchSimResNet_width.ConvBNReLU", "SearchSimResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "SimBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SimBlock.get_range": [[127, 129], ["SearchSimResNet_width.SimBlock.conv.get_range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SimBlock.get_flops": [[130, 140], ["SearchSimResNet_width.SimBlock.conv.get_flops", "hasattr", "len", "SearchSimResNet_width.SimBlock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "2", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_C", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_C", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SimBlock.forward": [[141, 145], ["SearchSimResNet_width.SimBlock.basic_forward", "SearchSimResNet_width.SimBlock.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SimBlock.search_forward": [[146, 157], ["SearchSimResNet_width.SimBlock.conv", "SharedUtils.additive_func", "isinstance", "type", "indexes.size", "probs.size", "probability.size", "SearchSimResNet_width.SimBlock.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "1", "and", "probs", ".", "size", "(", "0", ")", "==", "1", "and", "probability", ".", "size", "(", "0", ")", "==", "1", ",", "'invalid size : {:}, {:}, {:}'", ".", "format", "(", "indexes", ".", "size", "(", ")", ",", "probs", ".", "size", "(", ")", ",", "probability", ".", "size", "(", ")", ")", "\n", "out", ",", "expected_next_inC", ",", "expected_flop", "=", "self", ".", "conv", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "-", "1", "]", ",", "indexes", "[", "-", "1", "]", ",", "probs", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_next_inC", ",", "sum", "(", "[", "expected_flop", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SimBlock.basic_forward": [[158, 164], ["SearchSimResNet_width.SimBlock.conv", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchSimResNet_width.SimBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv", "(", "inputs", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.__init__": [[169, 208], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "enumerate", "SearchSimResNet_width.SearchWidthSimResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "SearchSimResNet_width.SearchWidthSimResNet.apply", "range", "len", "layer.get_range", "SearchSimResNet_width.SearchWidthSimResNet.layer2indexRange.append", "torch.Parameter", "torch.Parameter", "SearchSimResNet_width.ConvBNReLU", "SearchSimResNet_width.SimBlock", "SearchSimResNet_width.SearchWidthSimResNet.channels.append", "SearchSimResNet_width.SearchWidthSimResNet.layers.append", "len", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "len", "SoftSelect.get_width_choices", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_width_choices"], ["  ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "SearchWidthSimResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "depth", "-", "2", ")", "%", "3", "==", "0", ",", "'depth should be one of 5, 8, 11, 14, ... instead of {:}'", ".", "format", "(", "depth", ")", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "3", "\n", "self", ".", "message", "=", "'SearchWidthSimResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "SimBlock", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iC", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "#assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "# parameters for width", "\n", "self", ".", "Ranges", "=", "[", "]", "\n", "self", ".", "layer2indexRange", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "start_index", "=", "len", "(", "self", ".", "Ranges", ")", "\n", "self", ".", "Ranges", "+=", "layer", ".", "get_range", "(", ")", "\n", "self", ".", "layer2indexRange", ".", "append", "(", "(", "start_index", ",", "len", "(", "self", ".", "Ranges", ")", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "Ranges", ")", "+", "1", "==", "depth", ",", "'invalid depth check {:} vs {:}'", ".", "format", "(", "len", "(", "self", ".", "Ranges", ")", "+", "1", ",", "depth", ")", "\n", "\n", "self", ".", "register_parameter", "(", "'width_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "self", ".", "Ranges", ")", ",", "get_choices", "(", "None", ")", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "width_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.arch_parameters": [[209, 211], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "width_attentions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.base_parameters": [[212, 214], ["list", "list", "list", "SearchSimResNet_width.SearchWidthSimResNet.classifier.parameters", "SearchSimResNet_width.SearchWidthSimResNet.layers.parameters", "SearchSimResNet_width.SearchWidthSimResNet.avgpool.parameters"], "methods", ["None"], ["", "def", "base_parameters", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.get_flop": [[215, 253], ["enumerate", "enumerate", "config_dict.copy.copy.copy", "channels.append", "tuple", "layer.get_flops", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "isinstance", "ValueError", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.functional.softmax.size", "math.sqrt", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "abs", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "    ", "if", "config_dict", "is", "not", "None", ":", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "#weights = [F.softmax(x, dim=0) for x in self.width_attentions]", "\n", "channels", "=", "[", "3", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "      ", "if", "mode", "==", "'genotype'", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "probe", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "argmax", "(", "probe", ")", ".", "item", "(", ")", "]", "\n", "", "", "elif", "mode", "==", "'max'", ":", "\n", "        ", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", "\n", "", "elif", "mode", "==", "'fix'", ":", "\n", "        ", "C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "        ", "assert", "isinstance", "(", "extra_info", ",", "float", ")", ",", "'invalid extra_info : {:}'", ".", "format", "(", "extra_info", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "approximate_C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "for", "j", "in", "range", "(", "prob", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "prob", "[", "j", "]", "=", "1", "/", "(", "abs", "(", "j", "-", "(", "approximate_C", "-", "self", ".", "Ranges", "[", "i", "]", "[", "j", "]", ")", ")", "+", "0.2", ")", "\n", "", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "multinomial", "(", "prob", ",", "1", ",", "False", ")", ".", "item", "(", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "channels", ".", "append", "(", "C", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "s", ",", "e", "=", "self", ".", "layer2indexRange", "[", "i", "]", "\n", "xchl", "=", "tuple", "(", "channels", "[", "s", ":", "e", "+", "1", "]", ")", "\n", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "# the last fc layer", "\n", "", "flop", "+=", "channels", "[", "-", "1", "]", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "      ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "      ", "config_dict", "[", "'xchannels'", "]", "=", "channels", "\n", "config_dict", "[", "'super_type'", "]", "=", "'infer-width'", "\n", "config_dict", "[", "'estimated_FLOP'", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.get_arch_info": [[254, 271], ["len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "    ", "string", "=", "\"for width, there are {:} attention probabilities.\"", ".", "format", "(", "len", "(", "self", ".", "width_attentions", ")", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "width_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:52s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || dis={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.set_tau": [[272, 276], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "    ", "assert", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", ",", "'invalid epoch-ratio : {:}'", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.get_message": [[277, 279], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.forward": [[280, 287], ["SearchSimResNet_width.SearchWidthSimResNet.basic_forward", "SearchSimResNet_width.SearchWidthSimResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.search_forward": [[288, 307], ["torch.functional.softmax", "torch.functional.softmax", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchSimResNet_width.SearchWidthSimResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_widths.cpu.cpu.cpu", "layer", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "sum"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "flop_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "width_attentions", ",", "dim", "=", "1", ")", "\n", "selected_widths", ",", "selected_probs", "=", "select2withP", "(", "self", ".", "width_attentions", ",", "self", ".", "tau", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "selected_widths", "=", "selected_widths", ".", "cpu", "(", ")", "\n", "\n", "", "x", ",", "last_channel_idx", ",", "expected_inC", ",", "flops", "=", "inputs", ",", "0", ",", "3", ",", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "selected_w_index", "=", "selected_widths", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "selected_w_probs", "=", "selected_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "layer_prob", "=", "flop_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "x", ",", "expected_inC", ",", "expected_flop", "=", "layer", "(", "(", "x", ",", "expected_inC", ",", "layer_prob", ",", "selected_w_index", ",", "selected_w_probs", ")", ")", "\n", "last_channel_idx", "+=", "layer", ".", "num_conv", "\n", "flops", ".", "append", "(", "expected_flop", ")", "\n", "", "flops", ".", "append", "(", "expected_inC", "*", "(", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.SearchWidthSimResNet.basic_forward": [[308, 317], ["enumerate", "SearchSimResNet_width.SearchWidthSimResNet.avgpool", "features.view.view.view", "SearchSimResNet_width.SearchWidthSimResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "InShape", "is", "None", ":", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchSimResNet_width.conv_forward": [[13, 22], ["list", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "conv", "inputs.size"], "function", ["None"], ["def", "conv_forward", "(", "inputs", ",", "conv", ",", "choices", ")", ":", "\n", "  ", "iC", "=", "conv", ".", "in_channels", "\n", "fill_size", "=", "list", "(", "inputs", ".", "size", "(", ")", ")", "\n", "fill_size", "[", "1", "]", "=", "iC", "-", "fill_size", "[", "1", "]", "\n", "filled", "=", "torch", ".", "zeros", "(", "fill_size", ",", "device", "=", "inputs", ".", "device", ")", "\n", "xinputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "filled", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "conv", "(", "xinputs", ")", "\n", "selecteds", "=", "[", "outputs", "[", ":", ",", ":", "oC", "]", "for", "oC", "in", "choices", "]", "\n", "return", "selecteds", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ConvBNReLU.__init__": [[36, 60], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchImagenetResNet.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "SearchImagenetResNet.ConvBNReLU.BNs.append", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_width_choices", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ",", "last_max_pool", "=", "False", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_width_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "'choices_tensor'", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "#if has_bn  : self.bn  = nn.BatchNorm2d(nOut)", "\n", "#else       : self.bn  = None", "\n", "self", ".", "has_bn", "=", "has_bn", "\n", "self", ".", "BNs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "_out", "in", "enumerate", "(", "self", ".", "choices", ")", ":", "\n", "      ", "self", ".", "BNs", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "_out", ")", ")", "\n", "", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "\n", "if", "last_max_pool", ":", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "else", ":", "self", ".", "maxpool", "=", "None", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ConvBNReLU.get_flops": [[61, 72], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "channels", ",", "check_range", "=", "True", ",", "divide", "=", "1", ")", ":", "\n", "    ", "iC", ",", "oC", "=", "channels", "\n", "if", "check_range", ":", "assert", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", ",", "'{:} vs {:}  |  {:} vs {:}'", ".", "format", "(", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", ")", "\n", "assert", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", ",", "'invalid in-shape : {:}'", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", ",", "'invalid out-shape : {:}'", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "#conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "flops", "+=", "all_positions", "/", "divide", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ConvBNReLU.get_range": [[73, 75], ["None"], "methods", ["None"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ConvBNReLU.forward": [[76, 83], ["SearchImagenetResNet.ConvBNReLU.basic_forward", "SearchImagenetResNet.ConvBNReLU.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ConvBNReLU.search_forward": [[84, 109], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "SearchImagenetResNet.ConvBNReLU.get_flops", "SearchImagenetResNet.conv_forward", "max", "SoftSelect.ChannelWiseInter", "SoftSelect.ChannelWiseInter", "isinstance", "type", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "SearchImagenetResNet.ConvBNReLU.avg", "SearchImagenetResNet.ConvBNReLU.relu", "SearchImagenetResNet.ConvBNReLU.maxpool", "len", "zip", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.conv_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "index", ",", "prob", "=", "tuple_inputs", "\n", "index", ",", "prob", "=", "torch", ".", "squeeze", "(", "index", ")", ".", "tolist", "(", ")", ",", "torch", ".", "squeeze", "(", "prob", ")", "\n", "probability", "=", "torch", ".", "squeeze", "(", "probability", ")", "\n", "assert", "len", "(", "index", ")", "==", "2", ",", "'invalid length : {:}'", ".", "format", "(", "index", ")", "\n", "# compute expected flop", "\n", "#coordinates   = torch.arange(self.x_range[0], self.x_range[1]+1).type_as(probability)", "\n", "expected_outC", "=", "(", "self", ".", "choices_tensor", "*", "probability", ")", ".", "sum", "(", ")", "\n", "expected_flop", "=", "self", ".", "get_flops", "(", "[", "expected_inC", ",", "expected_outC", "]", ",", "False", ",", "1e6", ")", "\n", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "# convolutional layer", "\n", "out_convs", "=", "conv_forward", "(", "out", ",", "self", ".", "conv", ",", "[", "self", ".", "choices", "[", "i", "]", "for", "i", "in", "index", "]", ")", "\n", "out_bns", "=", "[", "self", ".", "BNs", "[", "idx", "]", "(", "out_conv", ")", "for", "idx", ",", "out_conv", "in", "zip", "(", "index", ",", "out_convs", ")", "]", "\n", "# merge", "\n", "out_channel", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "out_bns", "]", ")", "\n", "outA", "=", "ChannelWiseInter", "(", "out_bns", "[", "0", "]", ",", "out_channel", ")", "\n", "outB", "=", "ChannelWiseInter", "(", "out_bns", "[", "1", "]", ",", "out_channel", ")", "\n", "out", "=", "outA", "*", "prob", "[", "0", "]", "+", "outB", "*", "prob", "[", "1", "]", "\n", "#out = additive_func(out_bns[0]*prob[0], out_bns[1]*prob[1])", "\n", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "maxpool", ":", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "return", "out", ",", "expected_outC", ",", "expected_flop", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ConvBNReLU.basic_forward": [[110, 123], ["SearchImagenetResNet.ConvBNReLU.conv", "SearchImagenetResNet.ConvBNReLU.avg", "SearchImagenetResNet.ConvBNReLU.relu", "SearchImagenetResNet.ConvBNReLU.maxpool", "inputs.size", "inputs.size", "SearchImagenetResNet.ConvBNReLU.size", "SearchImagenetResNet.ConvBNReLU.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "has_bn", ":", "out", "=", "self", ".", "BNs", "[", "-", "1", "]", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "if", "self", ".", "InShape", "is", "None", ":", "\n", "      ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "if", "self", ".", "maxpool", ":", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ResNetBasicblock.__init__": [[128, 141], ["torch.Module.__init__", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ResNetBasicblock.get_range": [[142, 144], ["SearchImagenetResNet.ResNetBasicblock.conv_a.get_range", "SearchImagenetResNet.ResNetBasicblock.conv_b.get_range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_a", ".", "get_range", "(", ")", "+", "self", ".", "conv_b", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ResNetBasicblock.get_flops": [[145, 156], ["SearchImagenetResNet.ResNetBasicblock.conv_a.get_flops", "SearchImagenetResNet.ResNetBasicblock.conv_b.get_flops", "hasattr", "len", "SearchImagenetResNet.ResNetBasicblock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "3", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_a", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_b", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_C", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_C", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv_b", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv_b", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ResNetBasicblock.forward": [[157, 161], ["SearchImagenetResNet.ResNetBasicblock.basic_forward", "SearchImagenetResNet.ResNetBasicblock.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ResNetBasicblock.search_forward": [[162, 175], ["SearchImagenetResNet.ResNetBasicblock.conv_a", "SearchImagenetResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "isinstance", "type", "SearchImagenetResNet.ResNetBasicblock.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "2", "and", "probs", ".", "size", "(", "0", ")", "==", "2", "and", "probability", ".", "size", "(", "0", ")", "==", "2", "\n", "#import pdb; pdb.set_trace()", "\n", "out_a", ",", "expected_inC_a", ",", "expected_flop_a", "=", "self", ".", "conv_a", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "out_b", ",", "expected_inC_b", ",", "expected_flop_b", "=", "self", ".", "conv_b", "(", "(", "out_a", ",", "expected_inC_a", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_b", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_inC_b", ",", "sum", "(", "[", "expected_flop_a", ",", "expected_flop_b", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ResNetBasicblock.basic_forward": [[176, 183], ["SearchImagenetResNet.ResNetBasicblock.conv_a", "SearchImagenetResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchImagenetResNet.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ResNetBottleneck.__init__": [[189, 203], ["torch.Module.__init__", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ResNetBottleneck.get_range": [[204, 206], ["SearchImagenetResNet.ResNetBottleneck.conv_1x4.get_range", "SearchImagenetResNet.ResNetBottleneck.conv_1x1.get_range", "SearchImagenetResNet.ResNetBottleneck.conv_3x3.get_range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_1x1", ".", "get_range", "(", ")", "+", "self", ".", "conv_3x3", ".", "get_range", "(", ")", "+", "self", ".", "conv_1x4", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ResNetBottleneck.get_flops": [[207, 219], ["SearchImagenetResNet.ResNetBottleneck.conv_1x1.get_flops", "SearchImagenetResNet.ResNetBottleneck.conv_3x3.get_flops", "SearchImagenetResNet.ResNetBottleneck.conv_1x4.get_flops", "hasattr", "len", "SearchImagenetResNet.ResNetBottleneck.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "4", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_1x1", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_3x3", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "flop_C", "=", "self", ".", "conv_1x4", ".", "get_flops", "(", "[", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_D", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_D", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_D", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "+", "flop_D", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ResNetBottleneck.forward": [[220, 224], ["SearchImagenetResNet.ResNetBottleneck.basic_forward", "SearchImagenetResNet.ResNetBottleneck.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ResNetBottleneck.basic_forward": [[225, 233], ["SearchImagenetResNet.ResNetBottleneck.conv_1x1", "SearchImagenetResNet.ResNetBottleneck.conv_3x3", "SearchImagenetResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchImagenetResNet.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.ResNetBottleneck.search_forward": [[234, 247], ["SearchImagenetResNet.ResNetBottleneck.conv_1x1", "SearchImagenetResNet.ResNetBottleneck.conv_3x3", "SearchImagenetResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "isinstance", "type", "SearchImagenetResNet.ResNetBottleneck.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "3", "and", "probs", ".", "size", "(", "0", ")", "==", "3", "and", "probability", ".", "size", "(", "0", ")", "==", "3", "\n", "out_1x1", ",", "expected_inC_1x1", ",", "expected_flop_1x1", "=", "self", ".", "conv_1x1", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "out_3x3", ",", "expected_inC_3x3", ",", "expected_flop_3x3", "=", "self", ".", "conv_3x3", "(", "(", "out_1x1", ",", "expected_inC_1x1", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "out_1x4", ",", "expected_inC_1x4", ",", "expected_flop_1x4", "=", "self", ".", "conv_1x4", "(", "(", "out_3x3", ",", "expected_inC_3x3", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_1x4", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_inC_1x4", ",", "sum", "(", "[", "expected_flop_1x1", ",", "expected_flop_3x3", ",", "expected_flop_1x4", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.__init__": [[251, 323], ["torch.Module.__init__", "SearchImagenetResNet.get_depth_choices", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "SearchImagenetResNet.SearchShapeImagenetResNet.depth_info.items", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "enumerate", "SearchImagenetResNet.SearchShapeImagenetResNet.register_parameter", "SearchImagenetResNet.SearchShapeImagenetResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "SearchImagenetResNet.SearchShapeImagenetResNet.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "SearchImagenetResNet.SearchShapeImagenetResNet.depth_info_list.append", "range", "len", "layer.get_range", "SearchImagenetResNet.SearchShapeImagenetResNet.layer2indexRange.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ValueError", "sum", "len", "block", "SearchImagenetResNet.SearchShapeImagenetResNet.channels.append", "SearchImagenetResNet.SearchShapeImagenetResNet.layers.append", "bisect.bisect_right", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "SearchImagenetResNet.ConvBNReLU", "len", "block_choices.append", "len", "len", "SoftSelect.get_width_choices", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_depth_choices", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_width_choices"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "layers", ",", "deep_stem", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "SearchShapeImagenetResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'BasicBlock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "", "elif", "block_name", "==", "'Bottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "'SearchShapeCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "sum", "(", "layers", ")", "*", "block", ".", "num_conv", ",", "layers", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "not", "deep_stem", ":", "\n", "      ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "64", ",", "7", ",", "2", ",", "3", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ",", "last_max_pool", "=", "True", ")", "]", ")", "\n", "self", ".", "channels", "=", "[", "64", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "32", ",", "3", ",", "2", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", ",", "ConvBNReLU", "(", "32", ",", "64", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ",", "last_max_pool", "=", "True", ")", "]", ")", "\n", "self", ".", "channels", "=", "[", "32", ",", "64", "]", "\n", "\n", "", "meta_depth_info", "=", "get_depth_choices", "(", "layers", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "depth_info", "=", "OrderedDict", "(", ")", "\n", "self", ".", "depth_at_i", "=", "OrderedDict", "(", ")", "\n", "for", "stage", ",", "layer_blocks", "in", "enumerate", "(", "layers", ")", ":", "\n", "      ", "cur_block_choices", "=", "meta_depth_info", "[", "stage", "]", "\n", "assert", "cur_block_choices", "[", "-", "1", "]", "==", "layer_blocks", ",", "'stage={:}, {:} vs {:}'", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "block_choices", ",", "xstart", "=", "[", "]", ",", "len", "(", "self", ".", "layers", ")", "\n", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "64", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iC", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "# added for depth", "\n", "layer_index", "=", "len", "(", "self", ".", "layers", ")", "-", "1", "\n", "if", "iL", "+", "1", "in", "cur_block_choices", ":", "block_choices", ".", "append", "(", "layer_index", ")", "\n", "if", "iL", "+", "1", "==", "layer_blocks", ":", "\n", "          ", "self", ".", "depth_info", "[", "layer_index", "]", "=", "{", "'choices'", ":", "block_choices", ",", "\n", "'stage'", ":", "stage", ",", "\n", "'xstart'", ":", "xstart", "}", "\n", "", "", "", "self", ".", "depth_info_list", "=", "[", "]", "\n", "for", "xend", ",", "info", "in", "self", ".", "depth_info", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "depth_info_list", ".", "append", "(", "(", "xend", ",", "info", ")", ")", "\n", "xstart", ",", "xstage", "=", "info", "[", "'xstart'", "]", ",", "info", "[", "'stage'", "]", "\n", "for", "ilayer", "in", "range", "(", "xstart", ",", "xend", "+", "1", ")", ":", "\n", "        ", "idx", "=", "bisect_right", "(", "info", "[", "'choices'", "]", ",", "ilayer", "-", "1", ")", "\n", "self", ".", "depth_at_i", "[", "ilayer", "]", "=", "(", "xstage", ",", "idx", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "#assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "# parameters for width", "\n", "self", ".", "Ranges", "=", "[", "]", "\n", "self", ".", "layer2indexRange", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "start_index", "=", "len", "(", "self", ".", "Ranges", ")", "\n", "self", ".", "Ranges", "+=", "layer", ".", "get_range", "(", ")", "\n", "self", ".", "layer2indexRange", ".", "append", "(", "(", "start_index", ",", "len", "(", "self", ".", "Ranges", ")", ")", ")", "\n", "\n", "", "self", ".", "register_parameter", "(", "'width_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "self", ".", "Ranges", ")", ",", "get_width_choices", "(", "None", ")", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "'depth_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "layers", ")", ",", "meta_depth_info", "[", "'num'", "]", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "width_attentions", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "depth_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.arch_parameters": [[324, 331], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ",", "LR", "=", "None", ")", ":", "\n", "    ", "if", "LR", "is", "None", ":", "\n", "      ", "return", "[", "self", ".", "width_attentions", ",", "self", ".", "depth_attentions", "]", "\n", "", "else", ":", "\n", "      ", "return", "[", "\n", "{", "\"params\"", ":", "self", ".", "width_attentions", ",", "\"lr\"", ":", "LR", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "depth_attentions", ",", "\"lr\"", ":", "LR", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.base_parameters": [[333, 335], ["list", "list", "list", "SearchImagenetResNet.SearchShapeImagenetResNet.classifier.parameters", "SearchImagenetResNet.SearchShapeImagenetResNet.layers.parameters", "SearchImagenetResNet.SearchShapeImagenetResNet.avgpool.parameters"], "methods", ["None"], ["", "", "def", "base_parameters", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.get_flop": [[336, 381], ["enumerate", "zip", "enumerate", "config_dict.copy.copy.copy", "channels.append", "ValueError", "selected_layers.append", "tuple", "ValueError", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "layer.get_flops", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "layer.get_flops", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "    ", "if", "config_dict", "is", "not", "None", ":", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "# select channels ", "\n", "channels", "=", "[", "3", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "      ", "if", "mode", "==", "'genotype'", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "probe", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "argmax", "(", "probe", ")", ".", "item", "(", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "channels", ".", "append", "(", "C", ")", "\n", "# select depth", "\n", "", "if", "mode", "==", "'genotype'", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "argmax", "(", "depth_probs", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "selected_layers", "=", "[", "]", "\n", "for", "choice", ",", "xvalue", "in", "zip", "(", "choices", ",", "self", ".", "depth_info_list", ")", ":", "\n", "      ", "xtemp", "=", "xvalue", "[", "1", "]", "[", "'choices'", "]", "[", "choice", "]", "-", "xvalue", "[", "1", "]", "[", "'xstart'", "]", "+", "1", "\n", "selected_layers", ".", "append", "(", "xtemp", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "s", ",", "e", "=", "self", ".", "layer2indexRange", "[", "i", "]", "\n", "xchl", "=", "tuple", "(", "channels", "[", "s", ":", "e", "+", "1", "]", ")", "\n", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "        ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "if", "xatti", "<=", "choices", "[", "xstagei", "]", ":", "# leave this depth", "\n", "          ", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "", "else", ":", "\n", "          ", "flop", "+=", "0", "# do not use this layer", "\n", "", "", "else", ":", "\n", "        ", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "# the last fc layer", "\n", "", "", "flop", "+=", "channels", "[", "-", "1", "]", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "      ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "      ", "config_dict", "[", "'xchannels'", "]", "=", "channels", "\n", "config_dict", "[", "'xblocks'", "]", "=", "selected_layers", "\n", "config_dict", "[", "'super_type'", "]", "=", "'infer-shape'", "\n", "config_dict", "[", "'estimated_FLOP'", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.get_arch_info": [[382, 413], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "    ", "string", "=", "\"for depth and width, there are {:} + {:} attention probabilities.\"", ".", "format", "(", "len", "(", "self", ".", "depth_attentions", ")", ",", "len", "(", "self", ".", "width_attentions", ")", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "self", ".", "depth_info", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "depth_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "depth_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.4f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:17s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || discrepancy={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "string", "+=", "'\\n-----------------------------------------------'", "\n", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "width_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:52s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || dis={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.set_tau": [[414, 418], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "    ", "assert", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", ",", "'invalid epoch-ratio : {:}'", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.get_message": [[419, 421], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.forward": [[422, 429], ["SearchImagenetResNet.SearchShapeImagenetResNet.basic_forward", "SearchImagenetResNet.SearchShapeImagenetResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.search_forward": [[430, 473], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "SoftSelect.select2withP", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchImagenetResNet.SearchShapeImagenetResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_widths.cpu.cpu.cpu", "layer", "feature_maps.append", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "max", "enumerate", "sum", "SoftSelect.ChannelWiseInter", "possible_tensors.append", "sum", "feature_maps[].size", "zip"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "flop_width_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "width_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "torch", ".", "flip", "(", "torch", ".", "cumsum", "(", "torch", ".", "flip", "(", "flop_depth_probs", ",", "[", "1", "]", ")", ",", "1", ")", ",", "[", "1", "]", ")", "\n", "selected_widths", ",", "selected_width_probs", "=", "select2withP", "(", "self", ".", "width_attentions", ",", "self", ".", "tau", ")", "\n", "selected_depth_probs", "=", "select2withP", "(", "self", ".", "depth_attentions", ",", "self", ".", "tau", ",", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "selected_widths", "=", "selected_widths", ".", "cpu", "(", ")", "\n", "\n", "", "x", ",", "last_channel_idx", ",", "expected_inC", ",", "flops", "=", "inputs", ",", "0", ",", "3", ",", "[", "]", "\n", "feature_maps", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "selected_w_index", "=", "selected_widths", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "selected_w_probs", "=", "selected_width_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "layer_prob", "=", "flop_width_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "x", ",", "expected_inC", ",", "expected_flop", "=", "layer", "(", "(", "x", ",", "expected_inC", ",", "layer_prob", ",", "selected_w_index", ",", "selected_w_probs", ")", ")", "\n", "feature_maps", ".", "append", "(", "x", ")", "\n", "last_channel_idx", "+=", "layer", ".", "num_conv", "\n", "if", "i", "in", "self", ".", "depth_info", ":", "# aggregate the information", "\n", "        ", "choices", "=", "self", ".", "depth_info", "[", "i", "]", "[", "'choices'", "]", "\n", "xstagei", "=", "self", ".", "depth_info", "[", "i", "]", "[", "'stage'", "]", "\n", "#print ('iL={:}, choices={:}, stage={:}, probs={:}'.format(i, choices, xstagei, selected_depth_probs[xstagei].cpu().tolist()))", "\n", "#for A, W in zip(choices, selected_depth_probs[xstagei]):", "\n", "#  print('Size = {:}, W = {:}'.format(feature_maps[A].size(), W))", "\n", "possible_tensors", "=", "[", "]", "\n", "max_C", "=", "max", "(", "feature_maps", "[", "A", "]", ".", "size", "(", "1", ")", "for", "A", "in", "choices", ")", "\n", "for", "tempi", ",", "A", "in", "enumerate", "(", "choices", ")", ":", "\n", "          ", "xtensor", "=", "ChannelWiseInter", "(", "feature_maps", "[", "A", "]", ",", "max_C", ")", "\n", "possible_tensors", ".", "append", "(", "xtensor", ")", "\n", "", "weighted_sum", "=", "sum", "(", "xtensor", "*", "W", "for", "xtensor", ",", "W", "in", "zip", "(", "possible_tensors", ",", "selected_depth_probs", "[", "xstagei", "]", ")", ")", "\n", "x", "=", "weighted_sum", "\n", "\n", "", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "        ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "x_expected_flop", "=", "flop_depth_probs", "[", "xstagei", ",", "xatti", "]", "*", "expected_flop", "\n", "", "else", ":", "\n", "        ", "x_expected_flop", "=", "expected_flop", "\n", "", "flops", ".", "append", "(", "x_expected_flop", ")", "\n", "", "flops", ".", "append", "(", "expected_inC", "*", "(", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.SearchShapeImagenetResNet.basic_forward": [[474, 483], ["enumerate", "SearchImagenetResNet.SearchShapeImagenetResNet.avgpool", "features.view.view.view", "SearchImagenetResNet.SearchShapeImagenetResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "InShape", "is", "None", ":", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.get_depth_choices": [[12, 21], ["min", "enumerate", "range", "choices.append", "int", "float"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "get_depth_choices", "(", "layers", ")", ":", "\n", "  ", "min_depth", "=", "min", "(", "layers", ")", "\n", "info", "=", "{", "'num'", ":", "min_depth", "}", "\n", "for", "i", ",", "depth", "in", "enumerate", "(", "layers", ")", ":", "\n", "    ", "choices", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "min_depth", "+", "1", ")", ":", "\n", "      ", "choices", ".", "append", "(", "int", "(", "float", "(", "depth", ")", "*", "j", "/", "min_depth", ")", ")", "\n", "", "info", "[", "i", "]", "=", "choices", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchImagenetResNet.conv_forward": [[23, 32], ["list", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "conv", "inputs.size"], "function", ["None"], ["", "def", "conv_forward", "(", "inputs", ",", "conv", ",", "choices", ")", ":", "\n", "  ", "iC", "=", "conv", ".", "in_channels", "\n", "fill_size", "=", "list", "(", "inputs", ".", "size", "(", ")", ")", "\n", "fill_size", "[", "1", "]", "=", "iC", "-", "fill_size", "[", "1", "]", "\n", "filled", "=", "torch", ".", "zeros", "(", "fill_size", ",", "device", "=", "inputs", ".", "device", ")", "\n", "xinputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "filled", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "conv", "(", "xinputs", ")", "\n", "selecteds", "=", "[", "outputs", "[", ":", ",", ":", "oC", "]", "for", "oC", "in", "choices", "]", "\n", "return", "selecteds", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ConvBNReLU.__init__": [[42, 63], ["torch.Module.__init__", "SoftSelect.get_width_choices", "SearchCifarResNet.ConvBNReLU.register_buffer", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.AvgPool2d", "torch.AvgPool2d", "SearchCifarResNet.ConvBNReLU.BNs.append", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_width_choices", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "OutShape", "=", "None", "\n", "self", ".", "choices", "=", "get_width_choices", "(", "nOut", ")", "\n", "self", ".", "register_buffer", "(", "'choices_tensor'", ",", "torch", ".", "Tensor", "(", "self", ".", "choices", ")", ")", "\n", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "#if has_bn  : self.bn  = nn.BatchNorm2d(nOut)", "\n", "#else       : self.bn  = None", "\n", "self", ".", "has_bn", "=", "has_bn", "\n", "self", ".", "BNs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "_out", "in", "enumerate", "(", "self", ".", "choices", ")", ":", "\n", "      ", "self", ".", "BNs", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "_out", ")", ")", "\n", "", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "self", ".", "in_dim", "=", "nIn", "\n", "self", ".", "out_dim", "=", "nOut", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ConvBNReLU.get_flops": [[64, 75], ["isinstance", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "get_flops", "(", "self", ",", "channels", ",", "check_range", "=", "True", ",", "divide", "=", "1", ")", ":", "\n", "    ", "iC", ",", "oC", "=", "channels", "\n", "if", "check_range", ":", "assert", "iC", "<=", "self", ".", "conv", ".", "in_channels", "and", "oC", "<=", "self", ".", "conv", ".", "out_channels", ",", "'{:} vs {:}  |  {:} vs {:}'", ".", "format", "(", "iC", ",", "self", ".", "conv", ".", "in_channels", ",", "oC", ",", "self", ".", "conv", ".", "out_channels", ")", "\n", "assert", "isinstance", "(", "self", ".", "InShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "InShape", ")", "==", "2", ",", "'invalid in-shape : {:}'", ".", "format", "(", "self", ".", "InShape", ")", "\n", "assert", "isinstance", "(", "self", ".", "OutShape", ",", "tuple", ")", "and", "len", "(", "self", ".", "OutShape", ")", "==", "2", ",", "'invalid out-shape : {:}'", ".", "format", "(", "self", ".", "OutShape", ")", "\n", "#conv_per_position_flops = self.conv.kernel_size[0] * self.conv.kernel_size[1] * iC * oC / self.conv.groups", "\n", "conv_per_position_flops", "=", "(", "self", ".", "conv", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "conv", ".", "kernel_size", "[", "1", "]", "*", "1.0", "/", "self", ".", "conv", ".", "groups", ")", "\n", "all_positions", "=", "self", ".", "OutShape", "[", "0", "]", "*", "self", ".", "OutShape", "[", "1", "]", "\n", "flops", "=", "(", "conv_per_position_flops", "*", "all_positions", "/", "divide", ")", "*", "iC", "*", "oC", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "flops", "+=", "all_positions", "/", "divide", "\n", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ConvBNReLU.get_range": [[76, 78], ["None"], "methods", ["None"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ConvBNReLU.forward": [[79, 86], ["SearchCifarResNet.ConvBNReLU.basic_forward", "SearchCifarResNet.ConvBNReLU.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ConvBNReLU.search_forward": [[87, 112], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "SearchCifarResNet.ConvBNReLU.get_flops", "SearchCifarResNet.conv_forward", "max", "SoftSelect.ChannelWiseInter", "SoftSelect.ChannelWiseInter", "isinstance", "type", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze().tolist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "len", "SearchCifarResNet.ConvBNReLU.avg", "SearchCifarResNet.ConvBNReLU.relu", "len", "zip", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.conv_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist"], ["", "", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "index", ",", "prob", "=", "tuple_inputs", "\n", "index", ",", "prob", "=", "torch", ".", "squeeze", "(", "index", ")", ".", "tolist", "(", ")", ",", "torch", ".", "squeeze", "(", "prob", ")", "\n", "probability", "=", "torch", ".", "squeeze", "(", "probability", ")", "\n", "assert", "len", "(", "index", ")", "==", "2", ",", "'invalid length : {:}'", ".", "format", "(", "index", ")", "\n", "# compute expected flop", "\n", "#coordinates   = torch.arange(self.x_range[0], self.x_range[1]+1).type_as(probability)", "\n", "expected_outC", "=", "(", "self", ".", "choices_tensor", "*", "probability", ")", ".", "sum", "(", ")", "\n", "expected_flop", "=", "self", ".", "get_flops", "(", "[", "expected_inC", ",", "expected_outC", "]", ",", "False", ",", "1e6", ")", "\n", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "# convolutional layer", "\n", "out_convs", "=", "conv_forward", "(", "out", ",", "self", ".", "conv", ",", "[", "self", ".", "choices", "[", "i", "]", "for", "i", "in", "index", "]", ")", "\n", "out_bns", "=", "[", "self", ".", "BNs", "[", "idx", "]", "(", "out_conv", ")", "for", "idx", ",", "out_conv", "in", "zip", "(", "index", ",", "out_convs", ")", "]", "\n", "# merge", "\n", "out_channel", "=", "max", "(", "[", "x", ".", "size", "(", "1", ")", "for", "x", "in", "out_bns", "]", ")", "\n", "outA", "=", "ChannelWiseInter", "(", "out_bns", "[", "0", "]", ",", "out_channel", ")", "\n", "outB", "=", "ChannelWiseInter", "(", "out_bns", "[", "1", "]", ",", "out_channel", ")", "\n", "out", "=", "outA", "*", "prob", "[", "0", "]", "+", "outB", "*", "prob", "[", "1", "]", "\n", "#out = additive_func(out_bns[0]*prob[0], out_bns[1]*prob[1])", "\n", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "return", "out", ",", "expected_outC", ",", "expected_flop", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ConvBNReLU.basic_forward": [[113, 125], ["SearchCifarResNet.ConvBNReLU.conv", "SearchCifarResNet.ConvBNReLU.avg", "SearchCifarResNet.ConvBNReLU.relu", "inputs.size", "inputs.size", "SearchCifarResNet.ConvBNReLU.size", "SearchCifarResNet.ConvBNReLU.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "has_bn", ":", "out", "=", "self", ".", "BNs", "[", "-", "1", "]", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "if", "self", ".", "InShape", "is", "None", ":", "\n", "      ", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "OutShape", "=", "(", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBasicblock.__init__": [[130, 143], ["torch.Module.__init__", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBasicblock.get_range": [[144, 146], ["SearchCifarResNet.ResNetBasicblock.conv_a.get_range", "SearchCifarResNet.ResNetBasicblock.conv_b.get_range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_a", ".", "get_range", "(", ")", "+", "self", ".", "conv_b", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBasicblock.get_flops": [[147, 158], ["SearchCifarResNet.ResNetBasicblock.conv_a.get_flops", "SearchCifarResNet.ResNetBasicblock.conv_b.get_flops", "hasattr", "len", "SearchCifarResNet.ResNetBasicblock.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "3", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_a", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_b", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_C", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_C", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_C", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv_b", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv_b", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBasicblock.forward": [[159, 163], ["SearchCifarResNet.ResNetBasicblock.basic_forward", "SearchCifarResNet.ResNetBasicblock.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBasicblock.search_forward": [[164, 176], ["SearchCifarResNet.ResNetBasicblock.conv_a", "SearchCifarResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "isinstance", "type", "SearchCifarResNet.ResNetBasicblock.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "2", "and", "probs", ".", "size", "(", "0", ")", "==", "2", "and", "probability", ".", "size", "(", "0", ")", "==", "2", "\n", "out_a", ",", "expected_inC_a", ",", "expected_flop_a", "=", "self", ".", "conv_a", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "out_b", ",", "expected_inC_b", ",", "expected_flop_b", "=", "self", ".", "conv_b", "(", "(", "out_a", ",", "expected_inC_a", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_b", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_inC_b", ",", "sum", "(", "[", "expected_flop_a", ",", "expected_flop_b", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBasicblock.basic_forward": [[177, 184], ["SearchCifarResNet.ResNetBasicblock.conv_a", "SearchCifarResNet.ResNetBasicblock.conv_b", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet.ResNetBasicblock.downsample"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "basicblock", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.__init__": [[190, 204], ["torch.Module.__init__", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU", "SearchCifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range": [[205, 207], ["SearchCifarResNet.ResNetBottleneck.conv_1x4.get_range", "SearchCifarResNet.ResNetBottleneck.conv_1x1.get_range", "SearchCifarResNet.ResNetBottleneck.conv_3x3.get_range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range"], ["", "def", "get_range", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conv_1x1", ".", "get_range", "(", ")", "+", "self", ".", "conv_3x3", ".", "get_range", "(", ")", "+", "self", ".", "conv_1x4", ".", "get_range", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops": [[208, 220], ["SearchCifarResNet.ResNetBottleneck.conv_1x1.get_flops", "SearchCifarResNet.ResNetBottleneck.conv_3x3.get_flops", "SearchCifarResNet.ResNetBottleneck.conv_1x4.get_flops", "hasattr", "len", "SearchCifarResNet.ResNetBottleneck.downsample.get_flops"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops"], ["", "def", "get_flops", "(", "self", ",", "channels", ")", ":", "\n", "    ", "assert", "len", "(", "channels", ")", "==", "4", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "flop_A", "=", "self", ".", "conv_1x1", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", "]", ")", "\n", "flop_B", "=", "self", ".", "conv_3x3", ".", "get_flops", "(", "[", "channels", "[", "1", "]", ",", "channels", "[", "2", "]", "]", ")", "\n", "flop_C", "=", "self", ".", "conv_1x4", ".", "get_flops", "(", "[", "channels", "[", "2", "]", ",", "channels", "[", "3", "]", "]", ")", "\n", "if", "hasattr", "(", "self", ".", "downsample", ",", "'get_flops'", ")", ":", "\n", "      ", "flop_D", "=", "self", ".", "downsample", ".", "get_flops", "(", "[", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "      ", "flop_D", "=", "0", "\n", "", "if", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", "and", "self", ".", "downsample", "is", "None", ":", "# this short-cut will be added during the infer-train", "\n", "      ", "flop_D", "=", "channels", "[", "0", "]", "*", "channels", "[", "-", "1", "]", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "0", "]", "*", "self", ".", "conv_1x4", ".", "OutShape", "[", "1", "]", "\n", "", "return", "flop_A", "+", "flop_B", "+", "flop_C", "+", "flop_D", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.forward": [[221, 225], ["SearchCifarResNet.ResNetBottleneck.basic_forward", "SearchCifarResNet.ResNetBottleneck.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "elif", "self", ".", "search_mode", "==", "'search'", ":", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "else", ":", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.basic_forward": [[226, 234], ["SearchCifarResNet.ResNetBottleneck.conv_1x1", "SearchCifarResNet.ResNetBottleneck.conv_3x3", "SearchCifarResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "torch.functional.relu", "torch.functional.relu", "SearchCifarResNet.ResNetBottleneck.downsample"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "else", ":", "residual", "=", "inputs", "\n", "out", "=", "additive_func", "(", "residual", ",", "bottleneck", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.search_forward": [[235, 248], ["SearchCifarResNet.ResNetBottleneck.conv_1x1", "SearchCifarResNet.ResNetBottleneck.conv_3x3", "SearchCifarResNet.ResNetBottleneck.conv_1x4", "SharedUtils.additive_func", "isinstance", "type", "SearchCifarResNet.ResNetBottleneck.downsample", "torch.functional.relu", "torch.functional.relu", "sum", "len", "indexes.size", "probs.size", "probability.size"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.models.SharedUtils.additive_func"], ["", "def", "search_forward", "(", "self", ",", "tuple_inputs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "tuple_inputs", ",", "tuple", ")", "and", "len", "(", "tuple_inputs", ")", "==", "5", ",", "'invalid type input : {:}'", ".", "format", "(", "type", "(", "tuple_inputs", ")", ")", "\n", "inputs", ",", "expected_inC", ",", "probability", ",", "indexes", ",", "probs", "=", "tuple_inputs", "\n", "assert", "indexes", ".", "size", "(", "0", ")", "==", "3", "and", "probs", ".", "size", "(", "0", ")", "==", "3", "and", "probability", ".", "size", "(", "0", ")", "==", "3", "\n", "out_1x1", ",", "expected_inC_1x1", ",", "expected_flop_1x1", "=", "self", ".", "conv_1x1", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "0", "]", ",", "indexes", "[", "0", "]", ",", "probs", "[", "0", "]", ")", ")", "\n", "out_3x3", ",", "expected_inC_3x3", ",", "expected_flop_3x3", "=", "self", ".", "conv_3x3", "(", "(", "out_1x1", ",", "expected_inC_1x1", ",", "probability", "[", "1", "]", ",", "indexes", "[", "1", "]", ",", "probs", "[", "1", "]", ")", ")", "\n", "out_1x4", ",", "expected_inC_1x4", ",", "expected_flop_1x4", "=", "self", ".", "conv_1x4", "(", "(", "out_3x3", ",", "expected_inC_3x3", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", ",", "_", ",", "expected_flop_c", "=", "self", ".", "downsample", "(", "(", "inputs", ",", "expected_inC", ",", "probability", "[", "2", "]", ",", "indexes", "[", "2", "]", ",", "probs", "[", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "residual", ",", "expected_flop_c", "=", "inputs", ",", "0", "\n", "", "out", "=", "additive_func", "(", "residual", ",", "out_1x4", ")", "\n", "return", "nn", ".", "functional", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", ",", "expected_inC_1x4", ",", "sum", "(", "[", "expected_flop_1x1", ",", "expected_flop_3x3", ",", "expected_flop_1x4", ",", "expected_flop_c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.__init__": [[252, 323], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "collections.OrderedDict", "collections.OrderedDict", "range", "SearchCifarResNet.SearchShapeCifarResNet.depth_info.items", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "enumerate", "SearchCifarResNet.SearchShapeCifarResNet.register_parameter", "SearchCifarResNet.SearchShapeCifarResNet.register_parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "SearchCifarResNet.SearchShapeCifarResNet.apply", "SearchCifarResNet.get_depth_choices", "range", "SearchCifarResNet.SearchShapeCifarResNet.depth_info_list.append", "range", "len", "layer.get_range", "SearchCifarResNet.SearchShapeCifarResNet.layer2indexRange.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ValueError", "SearchCifarResNet.ConvBNReLU", "len", "block", "SearchCifarResNet.SearchShapeCifarResNet.channels.append", "SearchCifarResNet.SearchShapeCifarResNet.layers.append", "bisect.bisect_right", "len", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len", "block_choices.append", "len", "len", "SoftSelect.get_width_choices", "SearchCifarResNet.get_depth_choices", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_depth_choices", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_range", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_width_choices", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_depth_choices"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "num_classes", ")", ":", "\n", "    ", "super", "(", "SearchShapeCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "'SearchShapeCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "depth_info", "=", "OrderedDict", "(", ")", "\n", "self", ".", "depth_at_i", "=", "OrderedDict", "(", ")", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "cur_block_choices", "=", "get_depth_choices", "(", "layer_blocks", ",", "False", ")", "\n", "assert", "cur_block_choices", "[", "-", "1", "]", "==", "layer_blocks", ",", "'stage={:}, {:} vs {:}'", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:} ::: depth-block-choices={:} for {:} blocks.\"", ".", "format", "(", "stage", ",", "cur_block_choices", ",", "layer_blocks", ")", "\n", "block_choices", ",", "xstart", "=", "[", "]", ",", "len", "(", "self", ".", "layers", ")", "\n", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:3d}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iC", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "# added for depth", "\n", "layer_index", "=", "len", "(", "self", ".", "layers", ")", "-", "1", "\n", "if", "iL", "+", "1", "in", "cur_block_choices", ":", "block_choices", ".", "append", "(", "layer_index", ")", "\n", "if", "iL", "+", "1", "==", "layer_blocks", ":", "\n", "          ", "self", ".", "depth_info", "[", "layer_index", "]", "=", "{", "'choices'", ":", "block_choices", ",", "\n", "'stage'", ":", "stage", ",", "\n", "'xstart'", ":", "xstart", "}", "\n", "", "", "", "self", ".", "depth_info_list", "=", "[", "]", "\n", "for", "xend", ",", "info", "in", "self", ".", "depth_info", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "depth_info_list", ".", "append", "(", "(", "xend", ",", "info", ")", ")", "\n", "xstart", ",", "xstage", "=", "info", "[", "'xstart'", "]", ",", "info", "[", "'stage'", "]", "\n", "for", "ilayer", "in", "range", "(", "xstart", ",", "xend", "+", "1", ")", ":", "\n", "        ", "idx", "=", "bisect_right", "(", "info", "[", "'choices'", "]", ",", "ilayer", "-", "1", ")", "\n", "self", ".", "depth_at_i", "[", "ilayer", "]", "=", "(", "xstage", ",", "idx", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "module", ".", "out_dim", ",", "num_classes", ")", "\n", "self", ".", "InShape", "=", "None", "\n", "self", ".", "tau", "=", "-", "1", "\n", "self", ".", "search_mode", "=", "'basic'", "\n", "#assert sum(x.num_conv for x in self.layers) + 1 == depth, 'invalid depth check {:} vs {:}'.format(sum(x.num_conv for x in self.layers)+1, depth)", "\n", "\n", "# parameters for width", "\n", "self", ".", "Ranges", "=", "[", "]", "\n", "self", ".", "layer2indexRange", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "start_index", "=", "len", "(", "self", ".", "Ranges", ")", "\n", "self", ".", "Ranges", "+=", "layer", ".", "get_range", "(", ")", "\n", "self", ".", "layer2indexRange", ".", "append", "(", "(", "start_index", ",", "len", "(", "self", ".", "Ranges", ")", ")", ")", "\n", "", "assert", "len", "(", "self", ".", "Ranges", ")", "+", "1", "==", "depth", ",", "'invalid depth check {:} vs {:}'", ".", "format", "(", "len", "(", "self", ".", "Ranges", ")", "+", "1", ",", "depth", ")", "\n", "\n", "self", ".", "register_parameter", "(", "'width_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "self", ".", "Ranges", ")", ",", "get_width_choices", "(", "None", ")", ")", ")", ")", "\n", "self", ".", "register_parameter", "(", "'depth_attentions'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "3", ",", "get_depth_choices", "(", "layer_blocks", ",", "True", ")", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "width_attentions", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "depth_attentions", ",", "0", ",", "0.01", ")", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.arch_parameters": [[324, 331], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ",", "LR", "=", "None", ")", ":", "\n", "    ", "if", "LR", "is", "None", ":", "\n", "      ", "return", "[", "self", ".", "width_attentions", ",", "self", ".", "depth_attentions", "]", "\n", "", "else", ":", "\n", "      ", "return", "[", "\n", "{", "\"params\"", ":", "self", ".", "width_attentions", ",", "\"lr\"", ":", "LR", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "depth_attentions", ",", "\"lr\"", ":", "LR", "}", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.base_parameters": [[333, 335], ["list", "list", "list", "SearchCifarResNet.SearchShapeCifarResNet.classifier.parameters", "SearchCifarResNet.SearchShapeCifarResNet.layers.parameters", "SearchCifarResNet.SearchShapeCifarResNet.avgpool.parameters"], "methods", ["None"], ["", "", "def", "base_parameters", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "layers", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "avgpool", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_flop": [[336, 399], ["enumerate", "zip", "enumerate", "config_dict.copy.copy.copy", "channels.append", "selected_layers.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "torch.argmax().cpu().tolist", "layer.get_flops", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "ValueError", "layer.get_flops", "int", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.functional.softmax.size", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.multinomial().cpu().tolist", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "isinstance", "ValueError", "torch.functional.softmax.size", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "int", "range", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.multinomial().cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.functional.softmax.size", "math.sqrt", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "abs", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.landmark_utils.point_meta.PointMeta.copy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.ResNetBottleneck.get_flops", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist"], ["", "def", "get_flop", "(", "self", ",", "mode", ",", "config_dict", ",", "extra_info", ")", ":", "\n", "    ", "if", "config_dict", "is", "not", "None", ":", "config_dict", "=", "config_dict", ".", "copy", "(", ")", "\n", "# select channels ", "\n", "channels", "=", "[", "3", "]", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "      ", "if", "mode", "==", "'genotype'", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "probe", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "argmax", "(", "probe", ")", ".", "item", "(", ")", "]", "\n", "", "", "elif", "mode", "==", "'max'", ":", "\n", "        ", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", "\n", "", "elif", "mode", "==", "'fix'", ":", "\n", "        ", "C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "        ", "assert", "isinstance", "(", "extra_info", ",", "float", ")", ",", "'invalid extra_info : {:}'", ".", "format", "(", "extra_info", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "weight", ",", "dim", "=", "0", ")", "\n", "approximate_C", "=", "int", "(", "math", ".", "sqrt", "(", "extra_info", ")", "*", "self", ".", "Ranges", "[", "i", "]", "[", "-", "1", "]", ")", "\n", "for", "j", "in", "range", "(", "prob", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "prob", "[", "j", "]", "=", "1", "/", "(", "abs", "(", "j", "-", "(", "approximate_C", "-", "self", ".", "Ranges", "[", "i", "]", "[", "j", "]", ")", ")", "+", "0.2", ")", "\n", "", "C", "=", "self", ".", "Ranges", "[", "i", "]", "[", "torch", ".", "multinomial", "(", "prob", ",", "1", ",", "False", ")", ".", "item", "(", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "channels", ".", "append", "(", "C", ")", "\n", "# select depth", "\n", "", "if", "mode", "==", "'genotype'", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "argmax", "(", "depth_probs", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "elif", "mode", "==", "'max'", "or", "mode", "==", "'fix'", ":", "\n", "      ", "choices", "=", "[", "depth_probs", ".", "size", "(", "1", ")", "-", "1", "for", "_", "in", "range", "(", "depth_probs", ".", "size", "(", "0", ")", ")", "]", "\n", "", "elif", "mode", "==", "'random'", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "choices", "=", "torch", ".", "multinomial", "(", "depth_probs", ",", "1", ",", "False", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "", "selected_layers", "=", "[", "]", "\n", "for", "choice", ",", "xvalue", "in", "zip", "(", "choices", ",", "self", ".", "depth_info_list", ")", ":", "\n", "      ", "xtemp", "=", "xvalue", "[", "1", "]", "[", "'choices'", "]", "[", "choice", "]", "-", "xvalue", "[", "1", "]", "[", "'xstart'", "]", "+", "1", "\n", "selected_layers", ".", "append", "(", "xtemp", ")", "\n", "", "flop", "=", "0", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "s", ",", "e", "=", "self", ".", "layer2indexRange", "[", "i", "]", "\n", "xchl", "=", "tuple", "(", "channels", "[", "s", ":", "e", "+", "1", "]", ")", "\n", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "        ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "if", "xatti", "<=", "choices", "[", "xstagei", "]", ":", "# leave this depth", "\n", "          ", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "", "else", ":", "\n", "          ", "flop", "+=", "0", "# do not use this layer", "\n", "", "", "else", ":", "\n", "        ", "flop", "+=", "layer", ".", "get_flops", "(", "xchl", ")", "\n", "# the last fc layer", "\n", "", "", "flop", "+=", "channels", "[", "-", "1", "]", "*", "self", ".", "classifier", ".", "out_features", "\n", "if", "config_dict", "is", "None", ":", "\n", "      ", "return", "flop", "/", "1e6", "\n", "", "else", ":", "\n", "      ", "config_dict", "[", "'xchannels'", "]", "=", "channels", "\n", "config_dict", "[", "'xblocks'", "]", "=", "selected_layers", "\n", "config_dict", "[", "'super_type'", "]", "=", "'infer-shape'", "\n", "config_dict", "[", "'estimated_FLOP'", "]", "=", "flop", "/", "1e6", "\n", "return", "flop", "/", "1e6", ",", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_arch_info": [[400, 431], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "enumerate", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "torch.functional.softmax", "torch.functional.softmax", "sorted.cpu", "sorted.argmax().item", "sorted.tolist", "sorted", "discrepancy.append", "len", "len", "len", "len", "sorted.argmax", "att.cpu().tolist", "float", "sorted.argmax", "att.cpu().tolist", "float", "att.cpu", "att.cpu"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist"], ["", "", "def", "get_arch_info", "(", "self", ")", ":", "\n", "    ", "string", "=", "\"for depth and width, there are {:} + {:} attention probabilities.\"", ".", "format", "(", "len", "(", "self", ".", "depth_attentions", ")", ",", "len", "(", "self", ".", "width_attentions", ")", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "self", ".", "depth_info", ")", "\n", "discrepancy", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "depth_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "depth_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.4f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:17s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || discrepancy={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "string", "+=", "'\\n-----------------------------------------------'", "\n", "for", "i", ",", "att", "in", "enumerate", "(", "self", ".", "width_attentions", ")", ":", "\n", "        ", "prob", "=", "nn", ".", "functional", ".", "softmax", "(", "att", ",", "dim", "=", "0", ")", "\n", "prob", "=", "prob", ".", "cpu", "(", ")", ";", "selc", "=", "prob", ".", "argmax", "(", ")", ".", "item", "(", ")", ";", "prob", "=", "prob", ".", "tolist", "(", ")", "\n", "prob", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "prob", "]", "\n", "xstring", "=", "'{:03d}/{:03d}-th : {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "width_attentions", ")", ",", "' '", ".", "join", "(", "prob", ")", ")", "\n", "logt", "=", "[", "'{:.3f}'", ".", "format", "(", "x", ")", "for", "x", "in", "att", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "]", "\n", "xstring", "+=", "'  ||  {:52s}'", ".", "format", "(", "' '", ".", "join", "(", "logt", ")", ")", "\n", "prob", "=", "sorted", "(", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", ")", "\n", "disc", "=", "prob", "[", "-", "1", "]", "-", "prob", "[", "-", "2", "]", "\n", "xstring", "+=", "'  || dis={:.2f} || select={:}/{:}'", ".", "format", "(", "disc", ",", "selc", ",", "len", "(", "prob", ")", ")", "\n", "discrepancy", ".", "append", "(", "disc", ")", "\n", "string", "+=", "'\\n{:}'", ".", "format", "(", "xstring", ")", "\n", "", "", "return", "string", ",", "discrepancy", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.set_tau": [[432, 436], ["math.cos"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau_max", ",", "tau_min", ",", "epoch_ratio", ")", ":", "\n", "    ", "assert", "epoch_ratio", ">=", "0", "and", "epoch_ratio", "<=", "1", ",", "'invalid epoch-ratio : {:}'", ".", "format", "(", "epoch_ratio", ")", "\n", "tau", "=", "tau_min", "+", "(", "tau_max", "-", "tau_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch_ratio", ")", ")", "/", "2", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.get_message": [[437, 439], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.forward": [[440, 447], ["SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "SearchCifarResNet.SearchShapeCifarResNet.search_forward", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "search_mode", "==", "'basic'", ":", "\n", "      ", "return", "self", ".", "basic_forward", "(", "inputs", ")", "\n", "", "elif", "self", ".", "search_mode", "==", "'search'", ":", "\n", "      ", "return", "self", ".", "search_forward", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid search_mode = {:}'", ".", "format", "(", "self", ".", "search_mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.search_forward": [[448, 493], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "SoftSelect.select2withP", "SoftSelect.select2withP", "enumerate", "flops.append", "SearchCifarResNet.SearchShapeCifarResNet.avgpool", "features.view.view.view", "SoftSelect.linear_forward", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "selected_widths.cpu.cpu.cpu", "layer", "feature_maps.append", "flops.append", "features.view.view.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "max", "enumerate", "sum", "SoftSelect.ChannelWiseInter", "possible_tensors.append", "sum", "feature_maps[].size", "zip"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.select2withP", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.linear_forward", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInter", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "search_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "flop_width_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "width_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "depth_attentions", ",", "dim", "=", "1", ")", "\n", "flop_depth_probs", "=", "torch", ".", "flip", "(", "torch", ".", "cumsum", "(", "torch", ".", "flip", "(", "flop_depth_probs", ",", "[", "1", "]", ")", ",", "1", ")", ",", "[", "1", "]", ")", "\n", "selected_widths", ",", "selected_width_probs", "=", "select2withP", "(", "self", ".", "width_attentions", ",", "self", ".", "tau", ")", "\n", "selected_depth_probs", "=", "select2withP", "(", "self", ".", "depth_attentions", ",", "self", ".", "tau", ",", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "selected_widths", "=", "selected_widths", ".", "cpu", "(", ")", "\n", "\n", "", "x", ",", "last_channel_idx", ",", "expected_inC", ",", "flops", "=", "inputs", ",", "0", ",", "3", ",", "[", "]", "\n", "feature_maps", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "selected_w_index", "=", "selected_widths", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "selected_w_probs", "=", "selected_width_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "layer_prob", "=", "flop_width_probs", "[", "last_channel_idx", ":", "last_channel_idx", "+", "layer", ".", "num_conv", "]", "\n", "x", ",", "expected_inC", ",", "expected_flop", "=", "layer", "(", "(", "x", ",", "expected_inC", ",", "layer_prob", ",", "selected_w_index", ",", "selected_w_probs", ")", ")", "\n", "feature_maps", ".", "append", "(", "x", ")", "\n", "last_channel_idx", "+=", "layer", ".", "num_conv", "\n", "if", "i", "in", "self", ".", "depth_info", ":", "# aggregate the information", "\n", "        ", "choices", "=", "self", ".", "depth_info", "[", "i", "]", "[", "'choices'", "]", "\n", "xstagei", "=", "self", ".", "depth_info", "[", "i", "]", "[", "'stage'", "]", "\n", "#print ('iL={:}, choices={:}, stage={:}, probs={:}'.format(i, choices, xstagei, selected_depth_probs[xstagei].cpu().tolist()))", "\n", "#for A, W in zip(choices, selected_depth_probs[xstagei]):", "\n", "#  print('Size = {:}, W = {:}'.format(feature_maps[A].size(), W))", "\n", "possible_tensors", "=", "[", "]", "\n", "max_C", "=", "max", "(", "feature_maps", "[", "A", "]", ".", "size", "(", "1", ")", "for", "A", "in", "choices", ")", "\n", "for", "tempi", ",", "A", "in", "enumerate", "(", "choices", ")", ":", "\n", "          ", "xtensor", "=", "ChannelWiseInter", "(", "feature_maps", "[", "A", "]", ",", "max_C", ")", "\n", "#drop_ratio = 1-(tempi+1.0)/len(choices)", "\n", "#xtensor = drop_path(xtensor, drop_ratio)", "\n", "possible_tensors", ".", "append", "(", "xtensor", ")", "\n", "", "weighted_sum", "=", "sum", "(", "xtensor", "*", "W", "for", "xtensor", ",", "W", "in", "zip", "(", "possible_tensors", ",", "selected_depth_probs", "[", "xstagei", "]", ")", ")", "\n", "x", "=", "weighted_sum", "\n", "\n", "", "if", "i", "in", "self", ".", "depth_at_i", ":", "\n", "        ", "xstagei", ",", "xatti", "=", "self", ".", "depth_at_i", "[", "i", "]", "\n", "x_expected_flop", "=", "flop_depth_probs", "[", "xstagei", ",", "xatti", "]", "*", "expected_flop", "\n", "", "else", ":", "\n", "        ", "x_expected_flop", "=", "expected_flop", "\n", "", "flops", ".", "append", "(", "x_expected_flop", ")", "\n", "", "flops", ".", "append", "(", "expected_inC", "*", "(", "self", ".", "classifier", ".", "out_features", "*", "1.0", "/", "1e6", ")", ")", "\n", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "linear_forward", "(", "features", ",", "self", ".", "classifier", ")", "\n", "return", "logits", ",", "torch", ".", "stack", "(", "[", "sum", "(", "flops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.SearchShapeCifarResNet.basic_forward": [[494, 503], ["enumerate", "SearchCifarResNet.SearchShapeCifarResNet.avgpool", "features.view.view.view", "SearchCifarResNet.SearchShapeCifarResNet.classifier", "layer", "features.view.view.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "basic_forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "InShape", "is", "None", ":", "self", ".", "InShape", "=", "(", "inputs", ".", "size", "(", "-", "2", ")", ",", "inputs", ".", "size", "(", "-", "1", ")", ")", "\n", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.get_depth_choices": [[15, 27], ["len", "list", "ValueError", "range", "list.append"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "get_depth_choices", "(", "nDepth", ",", "return_num", ")", ":", "\n", "  ", "if", "nDepth", "==", "2", ":", "\n", "    ", "choices", "=", "(", "1", ",", "2", ")", "\n", "", "elif", "nDepth", "==", "3", ":", "\n", "    ", "choices", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "", "elif", "nDepth", ">", "3", ":", "\n", "    ", "choices", "=", "list", "(", "range", "(", "1", ",", "nDepth", "+", "1", ",", "2", ")", ")", "\n", "if", "choices", "[", "-", "1", "]", "<", "nDepth", ":", "choices", ".", "append", "(", "nDepth", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid nDepth : {:}'", ".", "format", "(", "nDepth", ")", ")", "\n", "", "if", "return_num", ":", "return", "len", "(", "choices", ")", "\n", "else", ":", "return", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SearchCifarResNet.conv_forward": [[29, 38], ["list", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "conv", "inputs.size"], "function", ["None"], ["", "def", "conv_forward", "(", "inputs", ",", "conv", ",", "choices", ")", ":", "\n", "  ", "iC", "=", "conv", ".", "in_channels", "\n", "fill_size", "=", "list", "(", "inputs", ".", "size", "(", ")", ")", "\n", "fill_size", "[", "1", "]", "=", "iC", "-", "fill_size", "[", "1", "]", "\n", "filled", "=", "torch", ".", "zeros", "(", "fill_size", ",", "device", "=", "inputs", ".", "device", ")", "\n", "xinputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "filled", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "conv", "(", "xinputs", ")", "\n", "selecteds", "=", "[", "outputs", "[", ":", ",", ":", "oC", "]", "for", "oC", "in", "choices", "]", "\n", "return", "selecteds", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.select2withP": [[8, 30], ["torch.gather", "torch.gather", "torch.functional.softmax", "torch.functional.softmax", "torch.no_grad", "torch.no_grad", "nn.functional.softmax.cpu", "torch.multinomial().to", "torch.multinomial().to", "torch.functional.softmax", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.multinomial", "torch.multinomial", "logits.log_softmax", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isnan().any", "torch.isnan().any", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.empty_like", "torch.empty_like"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log"], ["def", "select2withP", "(", "logits", ",", "tau", ",", "just_prob", "=", "False", ",", "num", "=", "2", ",", "eps", "=", "1e-7", ")", ":", "\n", "  ", "if", "tau", "<=", "0", ":", "\n", "    ", "new_logits", "=", "logits", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "new_logits", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "    ", "while", "True", ":", "# a trick to avoid the gumbels bug", "\n", "      ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "logits", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "new_logits", "=", "(", "logits", ".", "log_softmax", "(", "dim", "=", "1", ")", "+", "gumbels", ")", "/", "tau", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "new_logits", ",", "dim", "=", "1", ")", "\n", "if", "(", "not", "torch", ".", "isinf", "(", "gumbels", ")", ".", "any", "(", ")", ")", "and", "(", "not", "torch", ".", "isinf", "(", "probs", ")", ".", "any", "(", ")", ")", "and", "(", "not", "torch", ".", "isnan", "(", "probs", ")", ".", "any", "(", ")", ")", ":", "break", "\n", "\n", "", "", "if", "just_prob", ":", "return", "probs", "\n", "\n", "#with torch.no_grad(): # add eps for unexpected torch error", "\n", "#  probs = nn.functional.softmax(new_logits, dim=1)", "\n", "#  selected_index = torch.multinomial(probs + eps, 2, False)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# add eps for unexpected torch error", "\n", "    ", "probs", "=", "probs", ".", "cpu", "(", ")", "\n", "selected_index", "=", "torch", ".", "multinomial", "(", "probs", "+", "eps", ",", "num", ",", "False", ")", ".", "to", "(", "logits", ".", "device", ")", "\n", "", "selected_logit", "=", "torch", ".", "gather", "(", "new_logits", ",", "1", ",", "selected_index", ")", "\n", "selcted_probs", "=", "nn", ".", "functional", ".", "softmax", "(", "selected_logit", ",", "dim", "=", "1", ")", "\n", "return", "selected_index", ",", "selcted_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInter": [[32, 39], ["SoftSelect.ChannelWiseInterV1", "SoftSelect.ChannelWiseInterV2", "ValueError"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInterV1", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInterV2"], ["", "def", "ChannelWiseInter", "(", "inputs", ",", "oC", ",", "mode", "=", "'v2'", ")", ":", "\n", "  ", "if", "mode", "==", "'v1'", ":", "\n", "    ", "return", "ChannelWiseInterV1", "(", "inputs", ",", "oC", ")", "\n", "", "elif", "mode", "==", "'v2'", ":", "\n", "    ", "return", "ChannelWiseInterV2", "(", "inputs", ",", "oC", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInterV1": [[41, 55], ["inputs.size", "torch.zeros", "torch.zeros", "range", "inputs.dim", "inputs.size", "int", "int", "inputs[].mean", "math.floor", "math.ceil", "SoftSelect.ChannelWiseInterV1.start_index"], "function", ["None"], ["", "", "def", "ChannelWiseInterV1", "(", "inputs", ",", "oC", ")", ":", "\n", "  ", "assert", "inputs", ".", "dim", "(", ")", "==", "4", ",", "'invalid dimension : {:}'", ".", "format", "(", "inputs", ".", "size", "(", ")", ")", "\n", "def", "start_index", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "int", "(", "math", ".", "floor", "(", "float", "(", "a", "*", "c", ")", "/", "b", ")", ")", "\n", "", "def", "end_index", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "int", "(", "math", ".", "ceil", "(", "float", "(", "(", "a", "+", "1", ")", "*", "c", ")", "/", "b", ")", ")", "\n", "", "batch", ",", "iC", ",", "H", ",", "W", "=", "inputs", ".", "size", "(", ")", "\n", "outputs", "=", "torch", ".", "zeros", "(", "(", "batch", ",", "oC", ",", "H", ",", "W", ")", ",", "dtype", "=", "inputs", ".", "dtype", ",", "device", "=", "inputs", ".", "device", ")", "\n", "if", "iC", "==", "oC", ":", "return", "inputs", "\n", "for", "ot", "in", "range", "(", "oC", ")", ":", "\n", "    ", "istartT", ",", "iendT", "=", "start_index", "(", "ot", ",", "oC", ",", "iC", ")", ",", "end_index", "(", "ot", ",", "oC", ",", "iC", ")", "\n", "values", "=", "inputs", "[", ":", ",", "istartT", ":", "iendT", "]", ".", "mean", "(", "dim", "=", "1", ")", "\n", "outputs", "[", ":", ",", "ot", ",", ":", ",", ":", "]", "=", "values", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.ChannelWiseInterV2": [[57, 62], ["inputs.size", "inputs.dim", "inputs.size", "torch.functional.adaptive_avg_pool3d"], "function", ["None"], ["", "def", "ChannelWiseInterV2", "(", "inputs", ",", "oC", ")", ":", "\n", "  ", "assert", "inputs", ".", "dim", "(", ")", "==", "4", ",", "'invalid dimension : {:}'", ".", "format", "(", "inputs", ".", "size", "(", ")", ")", "\n", "batch", ",", "C", ",", "H", ",", "W", "=", "inputs", ".", "size", "(", ")", "\n", "if", "C", "==", "oC", ":", "return", "inputs", "\n", "else", ":", "return", "nn", ".", "functional", ".", "adaptive_avg_pool3d", "(", "inputs", ",", "(", "oC", ",", "H", ",", "W", ")", ")", "\n", "#inputs_5D = inputs.view(batch, 1, C, H, W)", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.linear_forward": [[69, 76], ["inputs.size", "torch.functional.linear"], "function", ["None"], ["", "def", "linear_forward", "(", "inputs", ",", "linear", ")", ":", "\n", "  ", "if", "linear", "is", "None", ":", "return", "inputs", "\n", "iC", "=", "inputs", ".", "size", "(", "1", ")", "\n", "weight", "=", "linear", ".", "weight", "[", ":", ",", ":", "iC", "]", "\n", "if", "linear", ".", "bias", "is", "None", ":", "bias", "=", "None", "\n", "else", ":", "bias", "=", "linear", ".", "bias", "\n", "return", "nn", ".", "functional", ".", "linear", "(", "inputs", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_width_choices": [[78, 88], ["len", "sorted", "tuple", "int", "list", "set"], "function", ["None"], ["", "def", "get_width_choices", "(", "nOut", ")", ":", "\n", "  ", "xsrange", "=", "[", "0.3", ",", "0.4", ",", "0.5", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", ",", "1.0", "]", "\n", "if", "nOut", "is", "None", ":", "\n", "    ", "return", "len", "(", "xsrange", ")", "\n", "", "else", ":", "\n", "    ", "Xs", "=", "[", "int", "(", "nOut", "*", "i", ")", "for", "i", "in", "xsrange", "]", "\n", "#xs = [ int(nOut * i // 10) for i in range(2, 11)]", "\n", "#Xs = [x for i, x in enumerate(xs) if i+1 == len(xs) or xs[i+1] > x+1]", "\n", "Xs", "=", "sorted", "(", "list", "(", "set", "(", "Xs", ")", ")", ")", "\n", "return", "tuple", "(", "Xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.get_depth_choices": [[90, 101], ["ValueError"], "function", ["None"], ["", "", "def", "get_depth_choices", "(", "nDepth", ")", ":", "\n", "  ", "if", "nDepth", "is", "None", ":", "\n", "    ", "return", "3", "\n", "", "else", ":", "\n", "    ", "assert", "nDepth", ">=", "3", ",", "'nDepth should be greater than 2 vs {:}'", ".", "format", "(", "nDepth", ")", "\n", "if", "nDepth", "==", "1", ":", "return", "(", "1", ",", "1", ",", "1", ")", "\n", "elif", "nDepth", "==", "2", ":", "return", "(", "1", ",", "1", ",", "2", ")", "\n", "elif", "nDepth", ">=", "3", ":", "\n", "      ", "return", "(", "nDepth", "//", "3", ",", "nDepth", "*", "2", "//", "3", ",", "nDepth", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid Depth : {:}'", ".", "format", "(", "nDepth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_searchs.SoftSelect.drop_path": [[103, 112], ["x.new_zeros", "mask.bernoulli_.bernoulli_", "x.size"], "function", ["None"], ["", "", "", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "  ", "if", "drop_prob", ">", "0.", ":", "\n", "    ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", "\n", "mask", "=", "mask", ".", "bernoulli_", "(", "keep_prob", ")", "\n", "x", "=", "x", "*", "(", "mask", "/", "keep_prob", ")", "\n", "#x.div_(keep_prob)", "\n", "#x.mul_(mask)", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts.TinyNetworkDarts.__init__": [[16, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_darts.TinyNetworkDarts.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "TinyNetworkDarts", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts.TinyNetworkDarts.get_weights": [[47, 52], ["list", "list", "list", "list", "list", "search_model_darts.TinyNetworkDarts.classifier.parameters", "search_model_darts.TinyNetworkDarts.stem.parameters", "search_model_darts.TinyNetworkDarts.cells.parameters", "search_model_darts.TinyNetworkDarts.lastact.parameters", "search_model_darts.TinyNetworkDarts.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts.TinyNetworkDarts.get_alphas": [[53, 55], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts.TinyNetworkDarts.show_alphas": [[56, 59], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "return", "'arch-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts.TinyNetworkDarts.get_message": [[60, 65], ["search_model_darts.TinyNetworkDarts.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts.TinyNetworkDarts.extra_repr": [[66, 68], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts.TinyNetworkDarts.genotype": [[69, 81], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "weights", "=", "self", ".", "arch_parameters", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts.TinyNetworkDarts.forward": [[82, 98], ["torch.functional.softmax", "torch.functional.softmax", "search_model_darts.TinyNetworkDarts.stem", "enumerate", "search_model_darts.TinyNetworkDarts.lastact", "search_model_darts.TinyNetworkDarts.global_pooling", "out.view.view.view", "search_model_darts.TinyNetworkDarts.classifier", "isinstance", "out.view.view.size", "cell", "cell"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "alphas", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "\n", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "feature", "=", "cell", "(", "feature", ",", "alphas", ")", "\n", "", "else", ":", "\n", "        ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.__init__": [[27, 40], ["enumerate", "isinstance", "isinstance", "type", "len", "genotypes.Structure.node_N.append", "genotypes.Structure.nodes.append", "isinstance", "isinstance", "type", "len", "len", "len", "tuple", "isinstance", "isinstance", "type", "copy.deepcopy", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["'identity'", "\n", "]", "\n", "rnn_STEPS", "=", "8", "\n", "rnn_CONCAT", "=", "8", "\n", "\n", "NAS_BENCH_201", "=", "[", "'none'", ",", "'skip_connect'", ",", "'nor_conv_1x1'", ",", "'nor_conv_3x3'", ",", "'avg_pool_3x3'", "]", "\n", "\n", "def", "get_combination", "(", "space", ",", "num", ")", ":", "\n", "  ", "combs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "    ", "if", "i", "==", "0", ":", "\n", "      ", "for", "func", "in", "space", ":", "\n", "        ", "combs", ".", "append", "(", "[", "(", "func", ",", "i", ")", "]", ")", "\n", "", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.tolist": [[41, 53], ["list", "sorted", "tuple", "genotypes.append", "filter", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["      ", "new_combs", "=", "[", "]", "\n", "for", "string", "in", "combs", ":", "\n", "        ", "for", "func", "in", "space", ":", "\n", "          ", "xstring", "=", "string", "+", "[", "(", "func", ",", "i", ")", "]", "\n", "new_combs", ".", "append", "(", "xstring", ")", "\n", "", "", "combs", "=", "new_combs", "\n", "", "", "return", "combs", "\n", "\n", "\n", "\n", "", "class", "Structure", ":", "\n", "\n", "  ", "def", "__init__", "(", "self", ",", "genotype", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.node": [[54, 57], ["len", "len"], "methods", ["None"], ["    ", "assert", "isinstance", "(", "genotype", ",", "list", ")", "or", "isinstance", "(", "genotype", ",", "tuple", ")", ",", "'invalid class of genotype : {:}'", ".", "format", "(", "type", "(", "genotype", ")", ")", "\n", "self", ".", "node_num", "=", "len", "(", "genotype", ")", "+", "1", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "self", ".", "node_N", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.tostr": [[58, 65], ["strings.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["for", "idx", ",", "node_info", "in", "enumerate", "(", "genotype", ")", ":", "\n", "      ", "assert", "isinstance", "(", "node_info", ",", "list", ")", "or", "isinstance", "(", "node_info", ",", "tuple", ")", ",", "'invalid class of node_info : {:}'", ".", "format", "(", "type", "(", "node_info", ")", ")", "\n", "assert", "len", "(", "node_info", ")", ">=", "1", ",", "'invalid length : {:}'", ".", "format", "(", "len", "(", "node_info", ")", ")", "\n", "for", "node_in", "in", "node_info", ":", "\n", "        ", "assert", "isinstance", "(", "node_in", ",", "list", ")", "or", "isinstance", "(", "node_in", ",", "tuple", ")", ",", "'invalid class of in-node : {:}'", ".", "format", "(", "type", "(", "node_in", ")", ")", "\n", "assert", "len", "(", "node_in", ")", "==", "2", "and", "node_in", "[", "1", "]", "<=", "idx", ",", "'invalid in-node : {:}'", ".", "format", "(", "node_in", ")", "\n", "", "self", ".", "node_N", ".", "append", "(", "len", "(", "node_info", ")", ")", "\n", "self", ".", "nodes", ".", "append", "(", "tuple", "(", "deepcopy", "(", "node_info", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.check_valid": [[66, 76], ["enumerate", "sums.append", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["\n", "", "", "def", "tolist", "(", "self", ",", "remove_str", ")", ":", "\n", "# convert this class to the list, if remove_str is 'none', then remove the 'none' operation.", "\n", "# note that we re-order the input node in this function", "\n", "# return the-genotype-list and success [if unsuccess, it is not a connectivity]", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "      ", "node_info", "=", "list", "(", "node_info", ")", "\n", "node_info", "=", "sorted", "(", "node_info", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ")", "\n", "node_info", "=", "tuple", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "!=", "remove_str", ",", "node_info", ")", ")", "\n", "if", "len", "(", "node_info", ")", "==", "0", ":", "return", "None", ",", "False", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.to_unique_str": [[77, 96], ["enumerate", "cur_node.append", "sorted", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["genotypes", ".", "append", "(", "node_info", ")", "\n", "", "return", "genotypes", ",", "True", "\n", "\n", "", "def", "node", "(", "self", ",", "index", ")", ":", "\n", "    ", "assert", "index", ">", "0", "and", "index", "<=", "len", "(", "self", ")", ",", "'invalid index={:} < {:}'", ".", "format", "(", "index", ",", "len", "(", "self", ")", ")", "\n", "return", "self", ".", "nodes", "[", "index", "]", "\n", "\n", "", "def", "tostr", "(", "self", ")", ":", "\n", "    ", "strings", "=", "[", "]", "\n", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "      ", "string", "=", "'|'", ".", "join", "(", "[", "x", "[", "0", "]", "+", "'~{:}'", ".", "format", "(", "x", "[", "1", "]", ")", "for", "x", "in", "node_info", "]", ")", "\n", "string", "=", "'|{:}|'", ".", "format", "(", "string", ")", "\n", "strings", ".", "append", "(", "string", ")", "\n", "", "return", "'+'", ".", "join", "(", "strings", ")", "\n", "\n", "", "def", "check_valid", "(", "self", ")", ":", "\n", "    ", "nodes", "=", "{", "0", ":", "True", "}", "\n", "for", "i", ",", "node_info", "in", "enumerate", "(", "self", ".", "nodes", ")", ":", "\n", "      ", "sums", "=", "[", "]", "\n", "for", "op", ",", "xin", "in", "node_info", ":", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.check_valid_op": [[97, 103], ["None"], "methods", ["None"], ["        ", "if", "op", "==", "'none'", "or", "nodes", "[", "xin", "]", "is", "False", ":", "x", "=", "False", "\n", "else", ":", "x", "=", "True", "\n", "sums", ".", "append", "(", "x", ")", "\n", "", "nodes", "[", "i", "+", "1", "]", "=", "sum", "(", "sums", ")", ">", "0", "\n", "", "return", "nodes", "[", "len", "(", "self", ".", "nodes", ")", "]", "\n", "\n", "", "def", "to_unique_str", "(", "self", ",", "consider_zero", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.__repr__": [[104, 106], ["genotypes.Structure.tostr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tostr"], ["# this is used to identify the isomorphic cell, which rerquires the prior knowledge of operation", "\n", "# two operations are special, i.e., none and skip_connect", "\n", "    ", "nodes", "=", "{", "0", ":", "'0'", "}", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.__len__": [[107, 109], ["len"], "methods", ["None"], ["for", "i_node", ",", "node_info", "in", "enumerate", "(", "self", ".", "nodes", ")", ":", "\n", "      ", "cur_node", "=", "[", "]", "\n", "for", "op", ",", "xin", "in", "node_info", ":", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.__getitem__": [[110, 112], ["None"], "methods", ["None"], ["        ", "if", "consider_zero", "is", "None", ":", "\n", "          ", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "elif", "consider_zero", ":", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.str2structure": [[113, 125], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["          ", "if", "op", "==", "'none'", "or", "nodes", "[", "xin", "]", "==", "'#'", ":", "x", "=", "'#'", "# zero", "\n", "elif", "op", "==", "'skip_connect'", ":", "x", "=", "nodes", "[", "xin", "]", "\n", "else", ":", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "else", ":", "\n", "          ", "if", "op", "==", "'skip_connect'", ":", "x", "=", "nodes", "[", "xin", "]", "\n", "else", ":", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "cur_node", ".", "append", "(", "x", ")", "\n", "", "nodes", "[", "i_node", "+", "1", "]", "=", "'+'", ".", "join", "(", "sorted", "(", "cur_node", ")", ")", "\n", "", "return", "nodes", "[", "len", "(", "self", ".", "nodes", ")", "]", "\n", "\n", "", "def", "check_valid_op", "(", "self", ",", "op_names", ")", ":", "\n", "    ", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "      ", "for", "inode_edge", "in", "node_info", ":", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.str2fullstructure": [[126, 142], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "list", "list", "range", "sorted", "genotypes.append", "filter", "xi.split", "tuple", "node_str.split", "len", "list.append", "xinput.split", "int"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["#assert inode_edge[0] in op_names, 'invalid op-name : {:}'.format(inode_edge[0])", "\n", "        ", "if", "inode_edge", "[", "0", "]", "not", "in", "op_names", ":", "return", "False", "\n", "", "", "return", "True", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}({node_num} nodes with {node_info})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "node_info", "=", "self", ".", "tostr", "(", ")", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "nodes", ")", "+", "1", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "return", "self", ".", "nodes", "[", "index", "]", "\n", "\n", "", "@", "staticmethod", "\n", "def", "str2structure", "(", "xstr", ")", ":", "\n", "    ", "assert", "isinstance", "(", "xstr", ",", "str", ")", ",", "'must take string (not {:}) as input'", ".", "format", "(", "type", "(", "xstr", ")", ")", "\n", "nodestrs", "=", "xstr", ".", "split", "(", "'+'", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.Structure.gen_all": [[143, 162], ["genotypes.get_combination", "enumerate", "range", "isinstance", "isinstance", "type", "genotypes.get_combination", "tuple", "genotypes.Structure", "new_all_archs.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.get_combination", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.get_combination", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "nodestrs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "tuple", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "genotypes", ".", "append", "(", "input_infos", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "str2fullstructure", "(", "xstr", ",", "default_name", "=", "'none'", ")", ":", "\n", "    ", "assert", "isinstance", "(", "xstr", ",", "str", ")", ",", "'must take string (not {:}) as input'", ".", "format", "(", "type", "(", "xstr", ")", ")", "\n", "nodestrs", "=", "xstr", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "nodestrs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "list", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "all_in_nodes", "=", "list", "(", "x", "[", "1", "]", "for", "x", "in", "input_infos", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.genotypes.get_combination": [[8, 22], ["range", "combs.append", "new_combs.append"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["\n", "PRIMITIVES", "=", "[", "\n", "'none'", ",", "\n", "'max_pool_3x3'", ",", "\n", "'avg_pool_3x3'", ",", "\n", "'skip_connect'", ",", "\n", "'sep_conv_3x3'", ",", "\n", "'sep_conv_5x5'", ",", "\n", "'dil_conv_3x3'", ",", "\n", "'dil_conv_5x5'", "\n", "]", "\n", "\n", "rnn_Genotype", "=", "namedtuple", "(", "'rnn_Genotype'", ",", "'recurrent concat'", ")", "\n", "\n", "rnn_PRIMITIVES", "=", "[", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas.TinyNetworkGDAS.__init__": [[15, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_gdas.TinyNetworkGDAS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "TinyNetworkGDAS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "tau", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas.TinyNetworkGDAS.get_weights": [[47, 52], ["list", "list", "list", "list", "list", "search_model_gdas.TinyNetworkGDAS.classifier.parameters", "search_model_gdas.TinyNetworkGDAS.stem.parameters", "search_model_gdas.TinyNetworkGDAS.cells.parameters", "search_model_gdas.TinyNetworkGDAS.lastact.parameters", "search_model_gdas.TinyNetworkGDAS.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas.TinyNetworkGDAS.set_tau": [[53, 55], ["None"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau", ")", ":", "\n", "    ", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas.TinyNetworkGDAS.get_tau": [[56, 58], ["None"], "methods", ["None"], ["", "def", "get_tau", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas.TinyNetworkGDAS.get_alphas": [[59, 61], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas.TinyNetworkGDAS.show_alphas": [[62, 65], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "return", "'arch-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas.TinyNetworkGDAS.get_message": [[66, 71], ["search_model_gdas.TinyNetworkGDAS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas.TinyNetworkGDAS.extra_repr": [[72, 74], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas.TinyNetworkGDAS.genotype": [[75, 87], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "weights", "=", "self", ".", "arch_parameters", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas.TinyNetworkGDAS.forward": [[88, 112], ["search_model_gdas.TinyNetworkGDAS.stem", "enumerate", "search_model_gdas.TinyNetworkGDAS.lastact", "search_model_gdas.TinyNetworkGDAS.global_pooling", "out.view.view.view", "search_model_gdas.TinyNetworkGDAS.classifier", "torch.functional.softmax", "torch.functional.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "isinstance", "out.view.view.size", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.functional.softmax.max", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "cell.forward_gdas", "cell", "search_model_gdas.TinyNetworkGDAS.arch_parameters.log_softmax", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.functional.softmax.detach", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NASNetSearchCell.forward_gdas"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "while", "True", ":", "\n", "      ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "self", ".", "arch_parameters", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "logits", "=", "(", "self", ".", "arch_parameters", ".", "log_softmax", "(", "dim", "=", "1", ")", "+", "gumbels", ")", "/", "self", ".", "tau", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "index", "=", "probs", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "one_h", "=", "torch", ".", "zeros_like", "(", "logits", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "hardwts", "=", "one_h", "-", "probs", ".", "detach", "(", ")", "+", "probs", "\n", "if", "(", "torch", ".", "isinf", "(", "gumbels", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isinf", "(", "probs", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isnan", "(", "probs", ")", ".", "any", "(", ")", ")", ":", "\n", "        ", "continue", "\n", "", "else", ":", "break", "\n", "\n", "", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "feature", "=", "cell", ".", "forward_gdas", "(", "feature", ",", "hardwts", ",", "index", ")", "\n", "", "else", ":", "\n", "        ", "feature", "=", "cell", "(", "feature", ")", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.__init__": [[13, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_cells.NASNetSearchCell", "search_model_gdas_nasnet.NASNetworkGDAS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "steps", ",", "multiplier", ",", "stem_multiplier", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "NASNetworkGDAS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", "\n", "num_edge", ",", "edge2index", "=", "None", ",", "None", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "C", "*", "stem_multiplier", ",", "C", "*", "stem_multiplier", ",", "C", ",", "False", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "cell", "=", "SearchCell", "(", "search_space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", ",", "reduction", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_normal_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "arch_reduce_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "tau", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.get_weights": [[47, 52], ["list", "list", "list", "list", "list", "search_model_gdas_nasnet.NASNetworkGDAS.classifier.parameters", "search_model_gdas_nasnet.NASNetworkGDAS.stem.parameters", "search_model_gdas_nasnet.NASNetworkGDAS.cells.parameters", "search_model_gdas_nasnet.NASNetworkGDAS.lastact.parameters", "search_model_gdas_nasnet.NASNetworkGDAS.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.set_tau": [[53, 55], ["None"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau", ")", ":", "\n", "    ", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.get_tau": [[56, 58], ["None"], "methods", ["None"], ["", "def", "get_tau", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.get_alphas": [[59, 61], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "arch_normal_parameters", ",", "self", ".", "arch_reduce_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.show_alphas": [[62, 67], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "A", "=", "'arch-normal-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "B", "=", "'arch-reduce-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "", "return", "'{:}\\n{:}'", ".", "format", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.get_message": [[68, 73], ["search_model_gdas_nasnet.NASNetworkGDAS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.extra_repr": [[74, 76], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, N={_layerN}, steps={_steps}, multiplier={_multiplier}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.genotype": [[77, 97], ["range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "search_model_gdas_nasnet.NASNetworkGDAS.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "def", "_parse", "(", "weights", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "        ", "edges", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "ws", "=", "weights", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "for", "k", ",", "op_name", "in", "enumerate", "(", "self", ".", "op_names", ")", ":", "\n", "            ", "if", "op_name", "==", "'none'", ":", "continue", "\n", "edges", ".", "append", "(", "(", "op_name", ",", "j", ",", "ws", "[", "k", "]", ")", ")", "\n", "", "", "edges", "=", "sorted", "(", "edges", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "-", "1", "]", ")", "\n", "selected_edges", "=", "edges", "[", ":", "2", "]", "\n", "gene", ".", "append", "(", "tuple", "(", "selected_edges", ")", ")", "\n", "", "return", "gene", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "gene_normal", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gene_reduce", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "{", "'normal'", ":", "gene_normal", ",", "'normal_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", ",", "\n", "'reduce'", ":", "gene_reduce", ",", "'reduce_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_gdas_nasnet.NASNetworkGDAS.forward": [[98, 126], ["search_model_gdas_nasnet.NASNetworkGDAS.forward.get_gumbel_prob"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "def", "get_gumbel_prob", "(", "xins", ")", ":", "\n", "      ", "while", "True", ":", "\n", "        ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "xins", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "logits", "=", "(", "xins", ".", "log_softmax", "(", "dim", "=", "1", ")", "+", "gumbels", ")", "/", "self", ".", "tau", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "index", "=", "probs", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "one_h", "=", "torch", ".", "zeros_like", "(", "logits", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "hardwts", "=", "one_h", "-", "probs", ".", "detach", "(", ")", "+", "probs", "\n", "if", "(", "torch", ".", "isinf", "(", "gumbels", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isinf", "(", "probs", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isnan", "(", "probs", ")", ".", "any", "(", ")", ")", ":", "\n", "          ", "continue", "\n", "", "else", ":", "break", "\n", "", "return", "hardwts", ",", "index", "\n", "\n", "", "normal_hardwts", ",", "normal_index", "=", "get_gumbel_prob", "(", "self", ".", "arch_normal_parameters", ")", "\n", "reduce_hardwts", ",", "reduce_index", "=", "get_gumbel_prob", "(", "self", ".", "arch_reduce_parameters", ")", "\n", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "cell", ".", "reduction", ":", "hardwts", ",", "index", "=", "reduce_hardwts", ",", "reduce_index", "\n", "else", ":", "hardwts", ",", "index", "=", "normal_hardwts", ",", "normal_index", "\n", "s0", ",", "s1", "=", "s1", ",", "cell", ".", "forward_gdas", "(", "s0", ",", "s1", ",", "hardwts", ",", "index", ")", "\n", "", "out", "=", "self", ".", "lastact", "(", "s1", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_enas_utils.Controller.__init__": [[12, 32], ["torch.Module.__init__", "search_model_enas_utils.Controller.register_parameter", "torch.LSTM", "torch.LSTM", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "num_edge", ",", "num_ops", ",", "lstm_size", "=", "32", ",", "lstm_num_layers", "=", "2", ",", "tanh_constant", "=", "2.5", ",", "temperature", "=", "5.0", ")", ":", "\n", "    ", "super", "(", "Controller", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# assign the attributes", "\n", "self", ".", "num_edge", "=", "num_edge", "\n", "self", ".", "num_ops", "=", "num_ops", "\n", "self", ".", "lstm_size", "=", "lstm_size", "\n", "self", ".", "lstm_N", "=", "lstm_num_layers", "\n", "self", ".", "tanh_constant", "=", "tanh_constant", "\n", "self", ".", "temperature", "=", "temperature", "\n", "# create parameters", "\n", "self", ".", "register_parameter", "(", "'input_vars'", ",", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "lstm_size", ")", ")", ")", "\n", "self", ".", "w_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "self", ".", "lstm_size", ",", "hidden_size", "=", "self", ".", "lstm_size", ",", "num_layers", "=", "self", ".", "lstm_N", ")", "\n", "self", ".", "w_embd", "=", "nn", ".", "Embedding", "(", "self", ".", "num_ops", ",", "self", ".", "lstm_size", ")", "\n", "self", ".", "w_pred", "=", "nn", ".", "Linear", "(", "self", ".", "lstm_size", ",", "self", ".", "num_ops", ")", "\n", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "input_vars", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_lstm", ".", "weight_hh_l0", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_lstm", ".", "weight_ih_l0", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_embd", ".", "weight", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "w_pred", ".", "weight", ",", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_enas_utils.Controller.forward": [[33, 56], ["range", "search_model_enas_utils.Controller.w_lstm", "search_model_enas_utils.Controller.w_pred", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "sampled_arch.append", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "log_probs.append", "torch.distributions.categorical.Categorical.entropy", "torch.distributions.categorical.Categorical.entropy", "entropys.append", "search_model_enas_utils.Controller.w_embd", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.distributions.categorical.Categorical.sample.item", "torch.distributions.categorical.Categorical.log_prob.view", "torch.distributions.categorical.Categorical.entropy.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ")", ":", "\n", "\n", "    ", "inputs", ",", "h0", "=", "self", ".", "input_vars", ",", "None", "\n", "log_probs", ",", "entropys", ",", "sampled_arch", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "iedge", "in", "range", "(", "self", ".", "num_edge", ")", ":", "\n", "      ", "outputs", ",", "h0", "=", "self", ".", "w_lstm", "(", "inputs", ",", "h0", ")", "\n", "\n", "logits", "=", "self", ".", "w_pred", "(", "outputs", ")", "\n", "logits", "=", "logits", "/", "self", ".", "temperature", "\n", "logits", "=", "self", ".", "tanh_constant", "*", "torch", ".", "tanh", "(", "logits", ")", "\n", "# distribution", "\n", "op_distribution", "=", "Categorical", "(", "logits", "=", "logits", ")", "\n", "op_index", "=", "op_distribution", ".", "sample", "(", ")", "\n", "sampled_arch", ".", "append", "(", "op_index", ".", "item", "(", ")", ")", "\n", "\n", "op_log_prob", "=", "op_distribution", ".", "log_prob", "(", "op_index", ")", "\n", "log_probs", ".", "append", "(", "op_log_prob", ".", "view", "(", "-", "1", ")", ")", "\n", "op_entropy", "=", "op_distribution", ".", "entropy", "(", ")", "\n", "entropys", ".", "append", "(", "op_entropy", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# obtain the input embedding for the next step", "\n", "inputs", "=", "self", ".", "w_embd", "(", "op_index", ")", "\n", "", "return", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "log_probs", ")", ")", ",", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "entropys", ")", ")", ",", "sampled_arch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.__init__": [[14, 47], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_cells.NASNetSearchCell", "search_model_darts_nasnet.NASNetworkDARTS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ":", "int", ",", "N", ":", "int", ",", "steps", ":", "int", ",", "multiplier", ":", "int", ",", "stem_multiplier", ":", "int", ",", "\n", "num_classes", ":", "int", ",", "search_space", ":", "List", "[", "Text", "]", ",", "affine", ":", "bool", ",", "track_running_stats", ":", "bool", ")", ":", "\n", "    ", "super", "(", "NASNetworkDARTS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", "\n", "num_edge", ",", "edge2index", "=", "None", ",", "None", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "C", "*", "stem_multiplier", ",", "C", "*", "stem_multiplier", ",", "C", ",", "False", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "cell", "=", "SearchCell", "(", "search_space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", ",", "reduction", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_normal_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "arch_reduce_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_weights": [[48, 53], ["list", "list", "list", "list", "list", "search_model_darts_nasnet.NASNetworkDARTS.classifier.parameters", "search_model_darts_nasnet.NASNetworkDARTS.stem.parameters", "search_model_darts_nasnet.NASNetworkDARTS.cells.parameters", "search_model_darts_nasnet.NASNetworkDARTS.lastact.parameters", "search_model_darts_nasnet.NASNetworkDARTS.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", "->", "List", "[", "torch", ".", "nn", ".", "Parameter", "]", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_alphas": [[54, 56], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", "->", "List", "[", "torch", ".", "nn", ".", "Parameter", "]", ":", "\n", "    ", "return", "[", "self", ".", "arch_normal_parameters", ",", "self", ".", "arch_reduce_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.show_alphas": [[57, 62], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", "->", "Text", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "A", "=", "'arch-normal-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "B", "=", "'arch-reduce-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "", "return", "'{:}\\n{:}'", ".", "format", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_message": [[63, 68], ["search_model_darts_nasnet.NASNetworkDARTS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", "->", "Text", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.extra_repr": [[69, 71], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "Text", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, N={_layerN}, steps={_steps}, multiplier={_multiplier}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.genotype": [[72, 92], ["range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "search_model_darts_nasnet.NASNetworkDARTS.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", "->", "Dict", "[", "Text", ",", "List", "]", ":", "\n", "    ", "def", "_parse", "(", "weights", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "        ", "edges", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "ws", "=", "weights", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "for", "k", ",", "op_name", "in", "enumerate", "(", "self", ".", "op_names", ")", ":", "\n", "            ", "if", "op_name", "==", "'none'", ":", "continue", "\n", "edges", ".", "append", "(", "(", "op_name", ",", "j", ",", "ws", "[", "k", "]", ")", ")", "\n", "", "", "edges", "=", "sorted", "(", "edges", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "-", "1", "]", ")", "\n", "selected_edges", "=", "edges", "[", ":", "2", "]", "\n", "gene", ".", "append", "(", "tuple", "(", "selected_edges", ")", ")", "\n", "", "return", "gene", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "gene_normal", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gene_reduce", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "{", "'normal'", ":", "gene_normal", ",", "'normal_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", ",", "\n", "'reduce'", ":", "gene_reduce", ",", "'reduce_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.forward": [[93, 109], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "search_model_darts_nasnet.NASNetworkDARTS.stem", "enumerate", "search_model_darts_nasnet.NASNetworkDARTS.lastact", "search_model_darts_nasnet.NASNetworkDARTS.global_pooling", "out.view.view.view", "search_model_darts_nasnet.NASNetworkDARTS.classifier", "out.view.view.size", "cell.forward_darts"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NASNetSearchCell.forward_darts"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "normal_w", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "1", ")", "\n", "reduce_w", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "1", ")", "\n", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "cell", ".", "reduction", ":", "ww", "=", "reduce_w", "\n", "else", ":", "ww", "=", "normal_w", "\n", "s0", ",", "s1", "=", "s1", ",", "cell", ".", "forward_darts", "(", "s0", ",", "s1", ",", "ww", ")", "\n", "", "out", "=", "self", ".", "lastact", "(", "s1", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.__init__": [[16, 51], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_cells.NASNetSearchCell", "search_model_setn_nasnet.NASNetworkSETN.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ":", "int", ",", "N", ":", "int", ",", "steps", ":", "int", ",", "multiplier", ":", "int", ",", "stem_multiplier", ":", "int", ",", "\n", "num_classes", ":", "int", ",", "search_space", ":", "List", "[", "Text", "]", ",", "affine", ":", "bool", ",", "track_running_stats", ":", "bool", ")", ":", "\n", "    ", "super", "(", "NASNetworkSETN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", "\n", "num_edge", ",", "edge2index", "=", "None", ",", "None", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "C", "*", "stem_multiplier", ",", "C", "*", "stem_multiplier", ",", "C", ",", "False", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "cell", "=", "SearchCell", "(", "search_space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", ",", "reduction", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_normal_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "arch_reduce_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "mode", "=", "'urs'", "\n", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.set_cal_mode": [[52, 59], ["copy.deepcopy"], "methods", ["None"], ["", "def", "set_cal_mode", "(", "self", ",", "mode", ",", "dynamic_cell", "=", "None", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'urs'", ",", "'joint'", ",", "'select'", ",", "'dynamic'", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "==", "'dynamic'", ":", "\n", "      ", "self", ".", "dynamic_cell", "=", "deepcopy", "(", "dynamic_cell", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.get_weights": [[60, 65], ["list", "list", "list", "list", "list", "search_model_setn_nasnet.NASNetworkSETN.classifier.parameters", "search_model_setn_nasnet.NASNetworkSETN.stem.parameters", "search_model_setn_nasnet.NASNetworkSETN.cells.parameters", "search_model_setn_nasnet.NASNetworkSETN.lastact.parameters", "search_model_setn_nasnet.NASNetworkSETN.global_pooling.parameters"], "methods", ["None"], ["", "", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.get_alphas": [[66, 68], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "arch_normal_parameters", ",", "self", ".", "arch_reduce_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.show_alphas": [[69, 74], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "A", "=", "'arch-normal-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "B", "=", "'arch-reduce-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "", "return", "'{:}\\n{:}'", ".", "format", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.get_message": [[75, 80], ["search_model_setn_nasnet.NASNetworkSETN.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.extra_repr": [[81, 83], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, N={_layerN}, steps={_steps}, multiplier={_multiplier}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.dync_genotype": [[84, 101], ["range", "Structure", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "range", "genotypes.append", "xlist.append", "tuple", "random.choice", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "dync_genotype", "(", "self", ",", "use_random", "=", "False", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "alphas_cpu", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "if", "use_random", ":", "\n", "          ", "op_name", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "", "else", ":", "\n", "          ", "weights", "=", "alphas_cpu", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_index", "=", "torch", ".", "multinomial", "(", "weights", ",", "1", ")", ".", "item", "(", ")", "\n", "op_name", "=", "self", ".", "op_names", "[", "op_index", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.genotype": [[102, 122], ["range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "search_model_setn_nasnet.NASNetworkSETN.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "def", "_parse", "(", "weights", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "        ", "edges", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "ws", "=", "weights", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "for", "k", ",", "op_name", "in", "enumerate", "(", "self", ".", "op_names", ")", ":", "\n", "            ", "if", "op_name", "==", "'none'", ":", "continue", "\n", "edges", ".", "append", "(", "(", "op_name", ",", "j", ",", "ws", "[", "k", "]", ")", ")", "\n", "", "", "edges", "=", "sorted", "(", "edges", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "-", "1", "]", ")", "\n", "selected_edges", "=", "edges", "[", ":", "2", "]", "\n", "gene", ".", "append", "(", "tuple", "(", "selected_edges", ")", ")", "\n", "", "return", "gene", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "gene_normal", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gene_reduce", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "{", "'normal'", ":", "gene_normal", ",", "'normal_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", ",", "\n", "'reduce'", ":", "gene_reduce", ",", "'reduce_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn_nasnet.NASNetworkSETN.forward": [[123, 140], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "search_model_setn_nasnet.NASNetworkSETN.stem", "enumerate", "search_model_setn_nasnet.NASNetworkSETN.lastact", "search_model_setn_nasnet.NASNetworkSETN.global_pooling", "out.view.view.view", "search_model_setn_nasnet.NASNetworkSETN.classifier", "out.view.view.size", "cell.forward_gdas"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NASNetSearchCell.forward_gdas"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "normal_hardwts", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", "\n", "reduce_hardwts", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", "\n", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "# [TODO]", "\n", "      ", "raise", "NotImplementedError", "\n", "if", "cell", ".", "reduction", ":", "hardwts", ",", "index", "=", "reduce_hardwts", ",", "reduce_index", "\n", "else", ":", "hardwts", ",", "index", "=", "normal_hardwts", ",", "normal_index", "\n", "s0", ",", "s1", "=", "s1", ",", "cell", ".", "forward_gdas", "(", "s0", ",", "s1", ",", "hardwts", ",", "index", ")", "\n", "", "out", "=", "self", ".", "lastact", "(", "s1", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.__init__": [[15, 34], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "search_cells.NAS201SearchCell.edges.keys", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "max_nodes", ",", "op_names", ",", "affine", "=", "False", ",", "track_running_stats", "=", "True", ")", ":", "\n", "    ", "super", "(", "NAS201SearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op_names", "=", "deepcopy", "(", "op_names", ")", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "in_dim", "=", "C_in", "\n", "self", ".", "out_dim", "=", "C_out", "\n", "for", "i", "in", "range", "(", "1", ",", "max_nodes", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "if", "j", "==", "0", ":", "\n", "          ", "xlists", "=", "[", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "for", "op_name", "in", "op_names", "]", "\n", "", "else", ":", "\n", "          ", "xlists", "=", "[", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "1", ",", "affine", ",", "track_running_stats", ")", "for", "op_name", "in", "op_names", "]", "\n", "", "self", ".", "edges", "[", "node_str", "]", "=", "nn", ".", "ModuleList", "(", "xlists", ")", "\n", "", "", "self", ".", "edge_keys", "=", "sorted", "(", "list", "(", "self", ".", "edges", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "edge2index", "=", "{", "key", ":", "i", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "edge_keys", ")", "}", "\n", "self", ".", "num_edges", "=", "len", "(", "self", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.extra_repr": [[35, 38], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "string", "=", "'info :: {max_nodes} nodes, inC={in_dim}, outC={out_dim}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.forward": [[39, 49], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "sum", "layer", "zip"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "inter_nodes", ".", "append", "(", "sum", "(", "layer", "(", "nodes", "[", "j", "]", ")", "*", "w", "for", "layer", ",", "w", "in", "zip", "(", "self", ".", "edges", "[", "node_str", "]", ",", "weights", ")", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.forward_gdas": [[51, 63], ["range", "range", "nodes.append", "index[].item", "sum", "inter_nodes.append", "sum", "enumerate", "edge"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_gdas", "(", "self", ",", "inputs", ",", "hardwts", ",", "index", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "hardwts", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "argmaxs", "=", "index", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", ".", "item", "(", ")", "\n", "weigsum", "=", "sum", "(", "weights", "[", "_ie", "]", "*", "edge", "(", "nodes", "[", "j", "]", ")", "if", "_ie", "==", "argmaxs", "else", "weights", "[", "_ie", "]", "for", "_ie", ",", "edge", "in", "enumerate", "(", "self", ".", "edges", "[", "node_str", "]", ")", ")", "\n", "inter_nodes", ".", "append", "(", "weigsum", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.forward_joint": [[65, 77], ["range", "range", "nodes.append", "sum", "inter_nodes.append", "sum", "layer", "zip"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_joint", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "#aggregation = sum( layer(nodes[j]) * w for layer, w in zip(self.edges[node_str], weights) ) / weights.numel()", "\n", "aggregation", "=", "sum", "(", "layer", "(", "nodes", "[", "j", "]", ")", "*", "w", "for", "layer", ",", "w", "in", "zip", "(", "self", ".", "edges", "[", "node_str", "]", ",", "weights", ")", ")", "\n", "inter_nodes", ".", "append", "(", "aggregation", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.forward_urs": [[79, 96], ["range", "enumerate", "nodes.append", "range", "inter_nodes.append", "sum", "random.choice", "sops.append", "random.choice.", "hasattr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_urs", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "while", "True", ":", "# to avoid select zero for all ops", "\n", "        ", "sops", ",", "has_non_zero", "=", "[", "]", ",", "False", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "candidates", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "select_op", "=", "random", ".", "choice", "(", "candidates", ")", "\n", "sops", ".", "append", "(", "select_op", ")", "\n", "if", "not", "hasattr", "(", "select_op", ",", "'is_zero'", ")", "or", "select_op", ".", "is_zero", "is", "False", ":", "has_non_zero", "=", "True", "\n", "", "if", "has_non_zero", ":", "break", "\n", "", "inter_nodes", "=", "[", "]", "\n", "for", "j", ",", "select_op", "in", "enumerate", "(", "sops", ")", ":", "\n", "        ", "inter_nodes", ".", "append", "(", "select_op", "(", "nodes", "[", "j", "]", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.forward_select": [[98, 109], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_select", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "inter_nodes", ".", "append", "(", "self", ".", "edges", "[", "node_str", "]", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "(", "nodes", "[", "j", "]", ")", ")", "\n", "#inter_nodes.append( sum( layer(nodes[j]) * w for layer, w in zip(self.edges[node_str], weights) ) )", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic": [[111, 122], ["range", "nodes.append", "search_cells.NAS201SearchCell.op_names.index", "inter_nodes.append", "sum"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward_dynamic", "(", "self", ",", "inputs", ",", "structure", ")", ":", "\n", "    ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "cur_op_node", "=", "structure", ".", "nodes", "[", "i", "-", "1", "]", "\n", "inter_nodes", "=", "[", "]", "\n", "for", "op_name", ",", "j", "in", "cur_op_node", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op_index", "=", "self", ".", "op_names", ".", "index", "(", "op_name", ")", "\n", "inter_nodes", ".", "append", "(", "self", ".", "edges", "[", "node_str", "]", "[", "op_index", "]", "(", "nodes", "[", "j", "]", ")", ")", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.MixedOp.__init__": [[127, 133], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "search_cells.MixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "space", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "space", ":", "\n", "      ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.MixedOp.forward_gdas": [[134, 136], ["None"], "methods", ["None"], ["", "", "def", "forward_gdas", "(", "self", ",", "x", ",", "weights", ",", "index", ")", ":", "\n", "    ", "return", "self", ".", "_ops", "[", "index", "]", "(", "x", ")", "*", "weights", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.MixedOp.forward_darts": [[137, 139], ["sum", "op", "zip"], "methods", ["None"], ["", "def", "forward_darts", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "    ", "return", "sum", "(", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NASNetSearchCell.__init__": [[144, 165], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "search_cells.MixedOp", "search_cells.NASNetSearchCell.edges.keys", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "NASNetSearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "op_names", "=", "deepcopy", "(", "space", ")", "\n", "if", "reduction_prev", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'skip_connect'", "]", "(", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", ")", "\n", "else", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "preprocess1", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "# indicate the edge from node-(j) to node-(i+2)", "\n", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "space", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "edges", "[", "node_str", "]", "=", "op", "\n", "", "", "self", ".", "edge_keys", "=", "sorted", "(", "list", "(", "self", ".", "edges", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "edge2index", "=", "{", "key", ":", "i", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "edge_keys", ")", "}", "\n", "self", ".", "num_edges", "=", "len", "(", "self", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NASNetSearchCell.forward_gdas": [[166, 182], ["search_cells.NASNetSearchCell.preprocess0", "search_cells.NASNetSearchCell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "states.append", "indexs[].item", "clist.append", "sum", "op.forward_gdas"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NASNetSearchCell.forward_gdas"], ["", "def", "forward_gdas", "(", "self", ",", "s0", ",", "s1", ",", "weightss", ",", "indexs", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "clist", "=", "[", "]", "\n", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "index", "=", "indexs", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", ".", "item", "(", ")", "\n", "clist", ".", "append", "(", "op", ".", "forward_gdas", "(", "h", ",", "weights", ",", "index", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NASNetSearchCell.forward_darts": [[183, 198], ["search_cells.NASNetSearchCell.preprocess0", "search_cells.NASNetSearchCell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "states.append", "clist.append", "sum", "op.forward_darts"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NASNetSearchCell.forward_darts"], ["", "def", "forward_darts", "(", "self", ",", "s0", ",", "s1", ",", "weightss", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "clist", "=", "[", "]", "\n", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "clist", ".", "append", "(", "op", ".", "forward_darts", "(", "h", ",", "weights", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.__init__": [[16, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_setn.TinyNetworkSETN.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "TinyNetworkSETN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "mode", "=", "'urs'", "\n", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.set_cal_mode": [[49, 54], ["copy.deepcopy"], "methods", ["None"], ["", "def", "set_cal_mode", "(", "self", ",", "mode", ",", "dynamic_cell", "=", "None", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'urs'", ",", "'joint'", ",", "'select'", ",", "'dynamic'", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "mode", "==", "'dynamic'", ":", "self", ".", "dynamic_cell", "=", "deepcopy", "(", "dynamic_cell", ")", "\n", "else", ":", "self", ".", "dynamic_cell", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.get_cal_mode": [[55, 57], ["None"], "methods", ["None"], ["", "def", "get_cal_mode", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.get_weights": [[58, 63], ["list", "list", "list", "list", "list", "search_model_setn.TinyNetworkSETN.classifier.parameters", "search_model_setn.TinyNetworkSETN.stem.parameters", "search_model_setn.TinyNetworkSETN.cells.parameters", "search_model_setn.TinyNetworkSETN.lastact.parameters", "search_model_setn.TinyNetworkSETN.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "    ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.get_alphas": [[64, 66], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.get_message": [[67, 72], ["search_model_setn.TinyNetworkSETN.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.extra_repr": [[73, 75], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.genotype": [[76, 88], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "weights.argmax().item", "weights.argmax"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "weights", "=", "self", ".", "arch_parameters", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.dync_genotype": [[89, 106], ["range", "genotypes.Structure", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax", "torch.functional.softmax", "range", "genotypes.append", "xlist.append", "tuple", "random.choice", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial().item", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "dync_genotype", "(", "self", ",", "use_random", "=", "False", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "alphas_cpu", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "if", "use_random", ":", "\n", "          ", "op_name", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "", "else", ":", "\n", "          ", "weights", "=", "alphas_cpu", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_index", "=", "torch", ".", "multinomial", "(", "weights", ",", "1", ")", ".", "item", "(", ")", "\n", "op_name", "=", "self", ".", "op_names", "[", "op_index", "]", "\n", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.get_log_prob": [[107, 117], ["enumerate", "sum().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.log_softmax", "torch.functional.log_softmax", "search_model_setn.TinyNetworkSETN.op_names.index", "select_logits.append", "sum"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "get_log_prob", "(", "self", ",", "arch", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "logits", "=", "nn", ".", "functional", ".", "log_softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "", "select_logits", "=", "[", "]", "\n", "for", "i", ",", "node_info", "in", "enumerate", "(", "arch", ".", "nodes", ")", ":", "\n", "      ", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", "+", "1", ",", "xin", ")", "\n", "op_index", "=", "self", ".", "op_names", ".", "index", "(", "op", ")", "\n", "select_logits", ".", "append", "(", "logits", "[", "self", ".", "edge2index", "[", "node_str", "]", ",", "op_index", "]", ")", "\n", "", "", "return", "sum", "(", "select_logits", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.return_topK": [[119, 126], ["genotypes.Structure.gen_all", "sorted", "len", "search_model_setn.TinyNetworkSETN.get_log_prob", "len", "range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.gen_all", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.get_log_prob"], ["", "def", "return_topK", "(", "self", ",", "K", ")", ":", "\n", "    ", "archs", "=", "Structure", ".", "gen_all", "(", "self", ".", "op_names", ",", "self", ".", "max_nodes", ",", "False", ")", "\n", "pairs", "=", "[", "(", "self", ".", "get_log_prob", "(", "arch", ")", ",", "arch", ")", "for", "arch", "in", "archs", "]", "\n", "if", "K", "<", "0", "or", "K", ">=", "len", "(", "archs", ")", ":", "K", "=", "len", "(", "archs", ")", "\n", "sorted_pairs", "=", "sorted", "(", "pairs", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "0", "]", ")", "\n", "return_pairs", "=", "[", "sorted_pairs", "[", "_", "]", "[", "1", "]", "for", "_", "in", "range", "(", "K", ")", "]", "\n", "return", "return_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_setn.TinyNetworkSETN.forward": [[128, 153], ["torch.functional.softmax", "torch.functional.softmax", "search_model_setn.TinyNetworkSETN.stem", "enumerate", "search_model_setn.TinyNetworkSETN.lastact", "search_model_setn.TinyNetworkSETN.global_pooling", "out.view.view.view", "search_model_setn.TinyNetworkSETN.classifier", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax.detach().cpu", "isinstance", "out.view.view.size", "cell", "torch.functional.softmax.detach", "cell.forward_urs", "cell.forward_select", "cell.forward_joint", "cell.forward_dynamic", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.forward_urs", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.forward_select", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.forward_joint", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "alphas", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "alphas_cpu", "=", "alphas", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'urs'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_urs", "(", "feature", ")", "\n", "", "elif", "self", ".", "mode", "==", "'select'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_select", "(", "feature", ",", "alphas_cpu", ")", "\n", "", "elif", "self", ".", "mode", "==", "'joint'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_joint", "(", "feature", ",", "alphas", ")", "\n", "", "elif", "self", ".", "mode", "==", "'dynamic'", ":", "\n", "          ", "feature", "=", "cell", ".", "forward_dynamic", "(", "feature", ",", "self", ".", "dynamic_cell", ")", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid mode={:}'", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "", "else", ":", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_enas.TinyNetworkENAS.__init__": [[17, 48], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_enas.TinyNetworkENAS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "TinyNetworkENAS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "# to maintain the sampled architecture", "\n", "self", ".", "sampled_arch", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_enas.TinyNetworkENAS.update_arch": [[49, 68], ["isinstance", "isinstance", "range", "genotypes.Structure", "ValueError", "range", "genotypes.append", "xlist.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "update_arch", "(", "self", ",", "_arch", ")", ":", "\n", "    ", "if", "_arch", "is", "None", ":", "\n", "      ", "self", ".", "sampled_arch", "=", "None", "\n", "", "elif", "isinstance", "(", "_arch", ",", "Structure", ")", ":", "\n", "      ", "self", ".", "sampled_arch", "=", "_arch", "\n", "", "elif", "isinstance", "(", "_arch", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "      ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "        ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "          ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op_index", "=", "_arch", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "op_index", "]", "\n", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "self", ".", "sampled_arch", "=", "Structure", "(", "genotypes", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid type of input architecture : {:}'", ".", "format", "(", "_arch", ")", ")", "\n", "", "return", "self", ".", "sampled_arch", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_enas.TinyNetworkENAS.create_controller": [[69, 71], ["search_model_enas_utils.Controller", "len", "len"], "methods", ["None"], ["", "def", "create_controller", "(", "self", ")", ":", "\n", "    ", "return", "Controller", "(", "len", "(", "self", ".", "edge2index", ")", ",", "len", "(", "self", ".", "op_names", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_enas.TinyNetworkENAS.get_message": [[72, 77], ["search_model_enas.TinyNetworkENAS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_enas.TinyNetworkENAS.extra_repr": [[78, 80], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_enas.TinyNetworkENAS.forward": [[81, 95], ["search_model_enas.TinyNetworkENAS.stem", "enumerate", "search_model_enas.TinyNetworkENAS.lastact", "search_model_enas.TinyNetworkENAS.global_pooling", "out.view.view.view", "search_model_enas.TinyNetworkENAS.classifier", "isinstance", "out.view.view.size", "cell.forward_dynamic", "cell"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "feature", "=", "cell", ".", "forward_dynamic", "(", "feature", ",", "self", ".", "sampled_arch", ")", "\n", "", "else", ":", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs._test_module.main": [[7, 10], ["search_model_enas_utils.Controller", "search_model_enas_utils.Controller."], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "  ", "controller", "=", "Controller", "(", "6", ",", "4", ")", "\n", "predictions", "=", "controller", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_random.TinyNetworkRANDOM.__init__": [[16, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_random.TinyNetworkRANDOM.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "    ", "super", "(", "TinyNetworkRANDOM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "\n", "        ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_cache", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_random.TinyNetworkRANDOM.get_message": [[47, 52], ["search_model_random.TinyNetworkRANDOM.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_random.TinyNetworkRANDOM.extra_repr": [[53, 55], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_random.TinyNetworkRANDOM.random_genotype": [[56, 68], ["range", "genotypes.Structure", "range", "genotypes.append", "random.choice", "xlist.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "random_genotype", "(", "self", ",", "set_cache", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "      ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op_name", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "arch", "=", "Structure", "(", "genotypes", ")", "\n", "if", "set_cache", ":", "self", ".", "arch_cache", "=", "arch", "\n", "return", "arch", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_model_random.TinyNetworkRANDOM.forward": [[69, 82], ["search_model_random.TinyNetworkRANDOM.stem", "enumerate", "search_model_random.TinyNetworkRANDOM.lastact", "search_model_random.TinyNetworkRANDOM.global_pooling", "out.view.view.view", "search_model_random.TinyNetworkRANDOM.classifier", "isinstance", "out.view.view.size", "cell.forward_dynamic", "cell"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.cell_searchs.search_cells.NAS201SearchCell.forward_dynamic"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "        ", "feature", "=", "cell", ".", "forward_dynamic", "(", "feature", ",", "self", ".", "arch_cache", ")", "\n", "", "else", ":", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_depth.ConvBNReLU.__init__": [[11, 20], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "if", "has_bn", ":", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "else", ":", "self", ".", "bn", "=", "None", "\n", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_depth.ConvBNReLU.forward": [[21, 31], ["InferCifarResNet_depth.ConvBNReLU.conv", "InferCifarResNet_depth.ConvBNReLU.avg", "InferCifarResNet_depth.ConvBNReLU.bn", "InferCifarResNet_depth.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_depth.ResNetBasicblock.__init__": [[36, 49], ["torch.Module.__init__", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_depth.ResNetBasicblock.forward": [[50, 60], ["InferCifarResNet_depth.ResNetBasicblock.conv_a", "InferCifarResNet_depth.ResNetBasicblock.conv_b", "torch.relu", "torch.relu", "InferCifarResNet_depth.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "basicblock", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_depth.ResNetBottleneck.__init__": [[66, 79], ["torch.Module.__init__", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU", "InferCifarResNet_depth.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "planes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "elif", "inplanes", "!=", "planes", "*", "self", ".", "expansion", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "out_dim", "=", "planes", "*", "self", ".", "expansion", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_depth.ResNetBottleneck.forward": [[80, 92], ["InferCifarResNet_depth.ResNetBottleneck.conv_1x1", "InferCifarResNet_depth.ResNetBottleneck.conv_3x3", "InferCifarResNet_depth.ResNetBottleneck.conv_1x4", "torch.relu", "torch.relu", "InferCifarResNet_depth.ResNetBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "bottleneck", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_depth.InferDepthCifarResNet.__init__": [[97, 139], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "InferCifarResNet_depth.InferDepthCifarResNet.apply", "len", "range", "InferCifarResNet_depth.InferDepthCifarResNet.modules", "ValueError", "InferCifarResNet_depth.ConvBNReLU", "block", "InferCifarResNet_depth.InferDepthCifarResNet.channels.append", "InferCifarResNet_depth.InferDepthCifarResNet.layers.append", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "xblocks", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "    ", "super", "(", "InferDepthCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "", "assert", "len", "(", "xblocks", ")", "==", "3", ",", "'invalid xblocks : {:}'", ".", "format", "(", "xblocks", ")", "\n", "\n", "self", ".", "message", "=", "'InferWidthCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "3", ",", "16", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "self", ".", "channels", "=", "[", "16", "]", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "iC", "=", "self", ".", "channels", "[", "-", "1", "]", "\n", "planes", "=", "16", "*", "(", "2", "**", "stage", ")", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iC", ",", "planes", ",", "stride", ")", "\n", "self", ".", "channels", ".", "append", "(", "module", ".", "out_dim", ")", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iC={:}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "planes", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "if", "iL", "+", "1", "==", "xblocks", "[", "stage", "]", ":", "# reach the maximum depth", "\n", "          ", "break", "\n", "\n", "", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "channels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_depth.InferDepthCifarResNet.get_message": [[140, 142], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_depth.InferDepthCifarResNet.forward": [[143, 151], ["enumerate", "InferCifarResNet_depth.InferDepthCifarResNet.avgpool", "features.view.view.view", "InferCifarResNet_depth.InferDepthCifarResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet.ConvBNReLU.__init__": [[11, 20], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "if", "has_bn", ":", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "else", ":", "self", ".", "bn", "=", "None", "\n", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet.ConvBNReLU.forward": [[21, 31], ["InferCifarResNet.ConvBNReLU.conv", "InferCifarResNet.ConvBNReLU.avg", "InferCifarResNet.ConvBNReLU.bn", "InferCifarResNet.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet.ResNetBasicblock.__init__": [[36, 54], ["torch.Module.__init__", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU", "isinstance", "isinstance", "len", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "iCs", ",", "list", ")", ",", "'invalid type of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "3", ",", "'invalid lengths of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "2", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "2", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "2", "]", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "2", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "#self.out_dim  = max(residual_in, iCs[2])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet.ResNetBasicblock.forward": [[55, 65], ["InferCifarResNet.ResNetBasicblock.conv_a", "InferCifarResNet.ResNetBasicblock.conv_b", "torch.relu", "torch.relu", "InferCifarResNet.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "basicblock", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet.ResNetBottleneck.__init__": [[71, 90], ["torch.Module.__init__", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU", "isinstance", "isinstance", "len", "InferCifarResNet.ConvBNReLU", "InferCifarResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "iCs", ",", "list", ")", ",", "'invalid type of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "4", ",", "'invalid lengths of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "iCs", "[", "2", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "3", "]", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "#self.out_dim = max(residual_in, iCs[3])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet.ResNetBottleneck.forward": [[91, 103], ["InferCifarResNet.ResNetBottleneck.conv_1x1", "InferCifarResNet.ResNetBottleneck.conv_3x3", "InferCifarResNet.ResNetBottleneck.conv_1x4", "torch.relu", "torch.relu", "InferCifarResNet.ResNetBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "bottleneck", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet.InferCifarResNet.__init__": [[108, 156], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "InferCifarResNet.InferCifarResNet.apply", "len", "range", "InferCifarResNet.InferCifarResNet.modules", "ValueError", "InferCifarResNet.ConvBNReLU", "block", "InferCifarResNet.InferCifarResNet.layers.append", "isinstance", "range", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "xblocks", ",", "xchannels", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "    ", "super", "(", "InferCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "", "assert", "len", "(", "xblocks", ")", "==", "3", ",", "'invalid xblocks : {:}'", ".", "format", "(", "xblocks", ")", "\n", "\n", "self", ".", "message", "=", "'InferWidthCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "xchannels", "=", "xchannels", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "xchannels", "[", "0", "]", ",", "xchannels", "[", "1", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "last_channel_idx", "=", "1", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "num_conv", "=", "block", ".", "num_conv", "\n", "iCs", "=", "self", ".", "xchannels", "[", "last_channel_idx", ":", "last_channel_idx", "+", "num_conv", "+", "1", "]", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iCs", ",", "stride", ")", "\n", "last_channel_idx", "+=", "num_conv", "\n", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iCs={:}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iCs", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "if", "iL", "+", "1", "==", "xblocks", "[", "stage", "]", ":", "# reach the maximum depth", "\n", "          ", "out_channel", "=", "module", ".", "out_dim", "\n", "for", "iiL", "in", "range", "(", "iL", "+", "1", ",", "layer_blocks", ")", ":", "\n", "            ", "last_channel_idx", "+=", "num_conv", "\n", "", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "break", "\n", "\n", "", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "xchannels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet.InferCifarResNet.get_message": [[157, 159], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet.InferCifarResNet.forward": [[160, 168], ["enumerate", "InferCifarResNet.InferCifarResNet.avgpool", "features.view.view.view", "InferCifarResNet.InferCifarResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferMobileNetV2.ConvBNReLU.__init__": [[11, 19], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "groups", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "if", "has_bn", ":", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "else", ":", "self", ".", "bn", "=", "None", "\n", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferMobileNetV2.ConvBNReLU.forward": [[20, 25], ["InferMobileNetV2.ConvBNReLU.conv", "InferMobileNetV2.ConvBNReLU.bn", "InferMobileNetV2.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", ":", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferMobileNetV2.InvertedResidual.__init__": [[28, 51], ["torch.nn.Module.__init__", "layers.extend", "torch.nn.Sequential", "len", "len", "InferMobileNetV2.ConvBNReLU", "InferMobileNetV2.ConvBNReLU", "InferMobileNetV2.ConvBNReLU", "InferMobileNetV2.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "channels", ",", "stride", ",", "expand_ratio", ",", "additive", ")", ":", "\n", "    ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", ",", "'invalid stride : {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "len", "(", "channels", ")", "in", "[", "2", ",", "3", "]", ",", "'invalid channels : {:}'", ".", "format", "(", "channels", ")", "\n", "\n", "if", "len", "(", "channels", ")", "==", "2", ":", "\n", "      ", "layers", "=", "[", "]", "\n", "", "else", ":", "\n", "      ", "layers", "=", "[", "ConvBNReLU", "(", "channels", "[", "0", "]", ",", "channels", "[", "1", "]", ",", "1", ",", "1", ",", "1", ")", "]", "\n", "", "layers", ".", "extend", "(", "[", "\n", "# dw", "\n", "ConvBNReLU", "(", "channels", "[", "-", "2", "]", ",", "channels", "[", "-", "2", "]", ",", "3", ",", "stride", ",", "channels", "[", "-", "2", "]", ")", ",", "\n", "# pw-linear", "\n", "ConvBNReLU", "(", "channels", "[", "-", "2", "]", ",", "channels", "[", "-", "1", "]", ",", "1", ",", "1", ",", "1", ",", "True", ",", "False", ")", ",", "\n", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "additive", "=", "additive", "\n", "if", "self", ".", "additive", "and", "channels", "[", "0", "]", "!=", "channels", "[", "-", "1", "]", ":", "\n", "      ", "self", ".", "shortcut", "=", "ConvBNReLU", "(", "channels", "[", "0", "]", ",", "channels", "[", "-", "1", "]", ",", "1", ",", "1", ",", "1", ",", "True", ",", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "shortcut", "=", "None", "\n", "", "self", ".", "out_dim", "=", "channels", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferMobileNetV2.InvertedResidual.forward": [[52, 57], ["InferMobileNetV2.InvertedResidual.conv", "InferMobileNetV2.InvertedResidual.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "# if self.additive: return additive_func(out, x)", "\n", "if", "self", ".", "shortcut", ":", "return", "out", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "else", ":", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferMobileNetV2.InferMobileNetV2.__init__": [[60, 114], ["torch.nn.Module.__init__", "zip", "SharedUtils.parse_channel_info", "enumerate", "features.append", "torch.nn.Sequential", "torch.nn.Sequential", "InferMobileNetV2.InferMobileNetV2.apply", "len", "len", "len", "len", "InferMobileNetV2.ConvBNReLU", "range", "InferMobileNetV2.ConvBNReLU", "len", "len", "torch.nn.Dropout", "torch.nn.Linear", "block", "features.append", "len", "range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.shared_utils.parse_channel_info", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", ",", "xchannels", ",", "xblocks", ",", "dropout", ")", ":", "\n", "    ", "super", "(", "InferMobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "inverted_residual_setting", "=", "[", "\n", "# t, c,  n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "assert", "len", "(", "inverted_residual_setting", ")", "==", "len", "(", "xblocks", ")", ",", "'invalid number of layers : {:} vs {:}'", ".", "format", "(", "len", "(", "inverted_residual_setting", ")", ",", "len", "(", "xblocks", ")", ")", "\n", "for", "block_num", ",", "ir_setting", "in", "zip", "(", "xblocks", ",", "inverted_residual_setting", ")", ":", "\n", "      ", "assert", "block_num", "<=", "ir_setting", "[", "2", "]", ",", "'{:} vs {:}'", ".", "format", "(", "block_num", ",", "ir_setting", ")", "\n", "", "xchannels", "=", "parse_channel_info", "(", "xchannels", ")", "\n", "#for i, chs in enumerate(xchannels):", "\n", "#  if i > 0: assert chs[0] == xchannels[i-1][-1], 'Layer[{:}] is invalid {:} vs {:}'.format(i, xchannels[i-1], chs)", "\n", "self", ".", "xchannels", "=", "xchannels", "\n", "self", ".", "message", "=", "'InferMobileNetV2 : xblocks={:}'", ".", "format", "(", "xblocks", ")", "\n", "# building first layer", "\n", "features", "=", "[", "ConvBNReLU", "(", "xchannels", "[", "0", "]", "[", "0", "]", ",", "xchannels", "[", "0", "]", "[", "1", "]", ",", "3", ",", "2", ",", "1", ")", "]", "\n", "last_channel_idx", "=", "1", "\n", "\n", "# building inverted residual blocks", "\n", "for", "stage", ",", "(", "t", ",", "c", ",", "n", ",", "s", ")", "in", "enumerate", "(", "inverted_residual_setting", ")", ":", "\n", "      ", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "additv", "=", "True", "if", "i", ">", "0", "else", "False", "\n", "module", "=", "block", "(", "self", ".", "xchannels", "[", "last_channel_idx", "]", ",", "stride", ",", "t", ",", "additv", ")", "\n", "features", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, Cs={:}, stride={:}, expand={:}, original-C={:}\"", ".", "format", "(", "stage", ",", "i", ",", "n", ",", "len", "(", "features", ")", ",", "self", ".", "xchannels", "[", "last_channel_idx", "]", ",", "stride", ",", "t", ",", "c", ")", "\n", "last_channel_idx", "+=", "1", "\n", "if", "i", "+", "1", "==", "xblocks", "[", "stage", "]", ":", "\n", "          ", "out_channel", "=", "module", ".", "out_dim", "\n", "for", "iiL", "in", "range", "(", "i", "+", "1", ",", "n", ")", ":", "\n", "            ", "last_channel_idx", "+=", "1", "\n", "", "self", ".", "xchannels", "[", "last_channel_idx", "]", "[", "0", "]", "=", "module", ".", "out_dim", "\n", "break", "\n", "# building last several layers", "\n", "", "", "", "features", ".", "append", "(", "ConvBNReLU", "(", "self", ".", "xchannels", "[", "last_channel_idx", "]", "[", "0", "]", ",", "self", ".", "xchannels", "[", "last_channel_idx", "]", "[", "1", "]", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "assert", "last_channel_idx", "+", "2", "==", "len", "(", "self", ".", "xchannels", ")", ",", "'{:} vs {:}'", ".", "format", "(", "last_channel_idx", ",", "len", "(", "self", ".", "xchannels", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "\n", "# building classifier", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "xchannels", "[", "last_channel_idx", "]", "[", "1", "]", ",", "num_classes", ")", ",", "\n", ")", "\n", "\n", "# weight initialization", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferMobileNetV2.InferMobileNetV2.get_message": [[115, 117], ["None"], "methods", ["None"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferMobileNetV2.InferMobileNetV2.forward": [[118, 123], ["InferMobileNetV2.InferMobileNetV2.features", "InferMobileNetV2.InferMobileNetV2.mean", "InferMobileNetV2.InferMobileNetV2.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "features", "=", "self", ".", "features", "(", "inputs", ")", "\n", "vectors", "=", "features", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "predicts", "=", "self", ".", "classifier", "(", "vectors", ")", "\n", "return", "features", ",", "predicts", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferImagenetResNet.ConvBNReLU.__init__": [[12, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "if", "has_bn", ":", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "else", ":", "self", ".", "bn", "=", "None", "\n", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferImagenetResNet.ConvBNReLU.forward": [[22, 32], ["InferImagenetResNet.ConvBNReLU.conv", "InferImagenetResNet.ConvBNReLU.avg", "InferImagenetResNet.ConvBNReLU.bn", "InferImagenetResNet.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferImagenetResNet.ResNetBasicblock.__init__": [[37, 55], ["torch.Module.__init__", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "isinstance", "isinstance", "len", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "iCs", ",", "list", ")", ",", "'invalid type of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "3", ",", "'invalid lengths of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "2", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "2", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "2", "]", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "2", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "#self.out_dim  = max(residual_in, iCs[2])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferImagenetResNet.ResNetBasicblock.forward": [[56, 66], ["InferImagenetResNet.ResNetBasicblock.conv_a", "InferImagenetResNet.ResNetBasicblock.conv_b", "torch.relu", "torch.relu", "InferImagenetResNet.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "basicblock", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferImagenetResNet.ResNetBottleneck.__init__": [[72, 91], ["torch.Module.__init__", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "isinstance", "isinstance", "len", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "iCs", ",", "list", ")", ",", "'invalid type of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "4", ",", "'invalid lengths of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "iCs", "[", "2", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "3", "]", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "#self.out_dim = max(residual_in, iCs[3])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferImagenetResNet.ResNetBottleneck.forward": [[92, 104], ["InferImagenetResNet.ResNetBottleneck.conv_1x1", "InferImagenetResNet.ResNetBottleneck.conv_3x3", "InferImagenetResNet.ResNetBottleneck.conv_1x4", "torch.relu", "torch.relu", "InferImagenetResNet.ResNetBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "bottleneck", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferImagenetResNet.InferImagenetResNet.__init__": [[109, 159], ["torch.Module.__init__", "InferImagenetResNet.InferImagenetResNet.layers.append", "enumerate", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "InferImagenetResNet.InferImagenetResNet.apply", "len", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.MaxPool2d", "torch.MaxPool2d", "range", "len", "len", "InferImagenetResNet.InferImagenetResNet.modules", "ValueError", "sum", "sum", "block", "InferImagenetResNet.InferImagenetResNet.layers.append", "isinstance", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "InferImagenetResNet.ConvBNReLU", "range", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "layers", ",", "xblocks", ",", "xchannels", ",", "deep_stem", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "    ", "super", "(", "InferImagenetResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'BasicBlock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "", "elif", "block_name", "==", "'Bottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "", "assert", "len", "(", "xblocks", ")", "==", "len", "(", "layers", ")", ",", "'invalid layers : {:} vs xblocks : {:}'", ".", "format", "(", "layers", ",", "xblocks", ")", "\n", "\n", "self", ".", "message", "=", "'InferImagenetResNet : Depth : {:} -> {:}, Layers for each block : {:}'", ".", "format", "(", "sum", "(", "layers", ")", "*", "block", ".", "num_conv", ",", "sum", "(", "xblocks", ")", "*", "block", ".", "num_conv", ",", "xblocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "xchannels", "=", "xchannels", "\n", "if", "not", "deep_stem", ":", "\n", "      ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "xchannels", "[", "0", "]", ",", "xchannels", "[", "1", "]", ",", "7", ",", "2", ",", "3", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "last_channel_idx", "=", "1", "\n", "", "else", ":", "\n", "      ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "xchannels", "[", "0", "]", ",", "xchannels", "[", "1", "]", ",", "3", ",", "2", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", ",", "ConvBNReLU", "(", "xchannels", "[", "1", "]", ",", "xchannels", "[", "2", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "last_channel_idx", "=", "2", "\n", "", "self", ".", "layers", ".", "append", "(", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "for", "stage", ",", "layer_blocks", "in", "enumerate", "(", "layers", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "num_conv", "=", "block", ".", "num_conv", "\n", "iCs", "=", "self", ".", "xchannels", "[", "last_channel_idx", ":", "last_channel_idx", "+", "num_conv", "+", "1", "]", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iCs", ",", "stride", ")", "\n", "last_channel_idx", "+=", "num_conv", "\n", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iCs={:}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iCs", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "if", "iL", "+", "1", "==", "xblocks", "[", "stage", "]", ":", "# reach the maximum depth", "\n", "          ", "out_channel", "=", "module", ".", "out_dim", "\n", "for", "iiL", "in", "range", "(", "iL", "+", "1", ",", "layer_blocks", ")", ":", "\n", "            ", "last_channel_idx", "+=", "num_conv", "\n", "", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "break", "\n", "", "", "", "assert", "last_channel_idx", "+", "1", "==", "len", "(", "self", ".", "xchannels", ")", ",", "'{:} vs {:}'", ".", "format", "(", "last_channel_idx", ",", "len", "(", "self", ".", "xchannels", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "xchannels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferImagenetResNet.InferImagenetResNet.get_message": [[160, 162], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferImagenetResNet.InferImagenetResNet.forward": [[163, 171], ["enumerate", "InferImagenetResNet.InferImagenetResNet.avgpool", "features.view.view.view", "InferImagenetResNet.InferImagenetResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.__init__": [[12, 38], ["torch.Module.__init__", "torch.Sequential", "torch.ModuleList", "enumerate", "len", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.Linear", "ValueError", "len", "torch.Conv2d", "torch.BatchNorm2d", "zip", "InferTinyCellNet.DynamicShapeTinyNet.cells.append", "torch.BatchNorm2d", "torch.ReLU", "len", "models.cell_operations.ResNetBasicblock", "models.cell_infers.cells.InferCell", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "channels", ":", "List", "[", "int", "]", ",", "genotype", ":", "Any", ",", "num_classes", ":", "int", ")", ":", "\n", "    ", "super", "(", "DynamicShapeTinyNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_channels", "=", "channels", "\n", "if", "len", "(", "channels", ")", "%", "3", "!=", "2", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid number of layers : {:}'", ".", "format", "(", "len", "(", "channels", ")", ")", ")", "\n", "", "self", ".", "_num_stage", "=", "N", "=", "len", "(", "channels", ")", "//", "3", "\n", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channels", "[", "0", "]", ")", ")", "\n", "\n", "# layer_channels   = [C    ] * N + [C*2 ] + [C*2  ] * N + [C*4 ] + [C*4  ] * N    ", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "c_prev", "=", "channels", "[", "0", "]", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "c_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "channels", ",", "layer_reductions", ")", ")", ":", "\n", "      ", "if", "reduction", ":", "cell", "=", "ResNetBasicblock", "(", "c_prev", ",", "c_curr", ",", "2", ",", "True", ")", "\n", "else", ":", "cell", "=", "InferCell", "(", "genotype", ",", "c_prev", ",", "c_curr", ",", "1", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "c_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "_num_layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "c_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "c_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.get_message": [[39, 44], ["InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr"], ["", "def", "get_message", "(", "self", ")", "->", "Text", ":", "\n", "    ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr": [[45, 47], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(C={_channels}, N={_num_stage}, L={_num_layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.forward": [[48, 59], ["InferTinyCellNet.DynamicShapeTinyNet.stem", "enumerate", "InferTinyCellNet.DynamicShapeTinyNet.lastact", "InferTinyCellNet.DynamicShapeTinyNet.global_pooling", "out.view.view.view", "InferTinyCellNet.DynamicShapeTinyNet.classifier", "cell", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.shared_utils.parse_channel_info": [[1, 6], ["xstring.split", "x.split", "int"], "function", ["None"], ["def", "parse_channel_info", "(", "xstring", ")", ":", "\n", "  ", "blocks", "=", "xstring", ".", "split", "(", "' '", ")", "\n", "blocks", "=", "[", "x", ".", "split", "(", "'-'", ")", "for", "x", "in", "blocks", "]", "\n", "blocks", "=", "[", "[", "int", "(", "_", ")", "for", "_", "in", "x", "]", "for", "x", "in", "blocks", "]", "\n", "return", "blocks", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_width.ConvBNReLU.__init__": [[11, 20], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "kernel", ",", "stride", ",", "padding", ",", "bias", ",", "has_avg", ",", "has_bn", ",", "has_relu", ")", ":", "\n", "    ", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "has_avg", ":", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "else", ":", "self", ".", "avg", "=", "None", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "kernel_size", "=", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "bias", ")", "\n", "if", "has_bn", ":", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "nOut", ")", "\n", "else", ":", "self", ".", "bn", "=", "None", "\n", "if", "has_relu", ":", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "else", ":", "self", ".", "relu", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_width.ConvBNReLU.forward": [[21, 31], ["InferCifarResNet_width.ConvBNReLU.conv", "InferCifarResNet_width.ConvBNReLU.avg", "InferCifarResNet_width.ConvBNReLU.bn", "InferCifarResNet_width.ConvBNReLU.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "if", "self", ".", "avg", ":", "out", "=", "self", ".", "avg", "(", "inputs", ")", "\n", "else", ":", "out", "=", "inputs", "\n", "conv", "=", "self", ".", "conv", "(", "out", ")", "\n", "if", "self", ".", "bn", ":", "out", "=", "self", ".", "bn", "(", "conv", ")", "\n", "else", ":", "out", "=", "conv", "\n", "if", "self", ".", "relu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "else", ":", "out", "=", "out", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_width.ResNetBasicblock.__init__": [[36, 54], ["torch.Module.__init__", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU", "isinstance", "isinstance", "len", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "iCs", ",", "list", ")", ",", "'invalid type of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "3", ",", "'invalid lengths of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "\n", "self", ".", "conv_a", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_b", "=", "ConvBNReLU", "(", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "2", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "2", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "2", "]", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "2", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "#self.out_dim  = max(residual_in, iCs[2])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_width.ResNetBasicblock.forward": [[55, 65], ["InferCifarResNet_width.ResNetBasicblock.conv_a", "InferCifarResNet_width.ResNetBasicblock.conv_b", "torch.relu", "torch.relu", "InferCifarResNet_width.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "basicblock", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_width.ResNetBottleneck.__init__": [[71, 90], ["torch.Module.__init__", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU", "isinstance", "isinstance", "len", "InferCifarResNet_width.ConvBNReLU", "InferCifarResNet_width.ConvBNReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["def", "__init__", "(", "self", ",", "iCs", ",", "stride", ")", ":", "\n", "    ", "super", "(", "ResNetBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "assert", "isinstance", "(", "iCs", ",", "tuple", ")", "or", "isinstance", "(", "iCs", ",", "list", ")", ",", "'invalid type of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "assert", "len", "(", "iCs", ")", "==", "4", ",", "'invalid lengths of iCs : {:}'", ".", "format", "(", "iCs", ")", "\n", "self", ".", "conv_1x1", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "1", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_3x3", "=", "ConvBNReLU", "(", "iCs", "[", "1", "]", ",", "iCs", "[", "2", "]", ",", "3", ",", "stride", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "\n", "self", ".", "conv_1x4", "=", "ConvBNReLU", "(", "iCs", "[", "2", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "0", "]", "\n", "if", "stride", "==", "2", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "True", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "elif", "iCs", "[", "0", "]", "!=", "iCs", "[", "3", "]", ":", "\n", "      ", "self", ".", "downsample", "=", "ConvBNReLU", "(", "iCs", "[", "0", "]", ",", "iCs", "[", "3", "]", ",", "1", ",", "1", ",", "0", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "False", ",", "has_relu", "=", "False", ")", "\n", "residual_in", "=", "iCs", "[", "3", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "None", "\n", "#self.out_dim = max(residual_in, iCs[3])", "\n", "", "self", ".", "out_dim", "=", "iCs", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_width.ResNetBottleneck.forward": [[91, 103], ["InferCifarResNet_width.ResNetBottleneck.conv_1x1", "InferCifarResNet_width.ResNetBottleneck.conv_3x3", "InferCifarResNet_width.ResNetBottleneck.conv_1x4", "torch.relu", "torch.relu", "InferCifarResNet_width.ResNetBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "    ", "bottleneck", "=", "self", ".", "conv_1x1", "(", "inputs", ")", "\n", "bottleneck", "=", "self", ".", "conv_3x3", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "conv_1x4", "(", "bottleneck", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "      ", "residual", "=", "inputs", "\n", "", "out", "=", "residual", "+", "bottleneck", "\n", "return", "F", ".", "relu", "(", "out", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_width.InferWidthCifarResNet.__init__": [[108, 149], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "InferCifarResNet_width.InferWidthCifarResNet.apply", "range", "InferCifarResNet_width.InferWidthCifarResNet.modules", "ValueError", "InferCifarResNet_width.ConvBNReLU", "block", "InferCifarResNet_width.InferWidthCifarResNet.layers.append", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "block_name", ",", "depth", ",", "xchannels", ",", "num_classes", ",", "zero_init_residual", ")", ":", "\n", "    ", "super", "(", "InferWidthCifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "if", "block_name", "==", "'ResNetBasicblock'", ":", "\n", "      ", "block", "=", "ResNetBasicblock", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "", "elif", "block_name", "==", "'ResNetBottleneck'", ":", "\n", "      ", "block", "=", "ResNetBottleneck", "\n", "assert", "(", "depth", "-", "2", ")", "%", "9", "==", "0", ",", "'depth should be one of 164'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "9", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid block : {:}'", ".", "format", "(", "block_name", ")", ")", "\n", "\n", "", "self", ".", "message", "=", "'InferWidthCifarResNet : Depth : {:} , Layers for each block : {:}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "xchannels", "=", "xchannels", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "ConvBNReLU", "(", "xchannels", "[", "0", "]", ",", "xchannels", "[", "1", "]", ",", "3", ",", "1", ",", "1", ",", "False", ",", "has_avg", "=", "False", ",", "has_bn", "=", "True", ",", "has_relu", "=", "True", ")", "]", ")", "\n", "last_channel_idx", "=", "1", "\n", "for", "stage", "in", "range", "(", "3", ")", ":", "\n", "      ", "for", "iL", "in", "range", "(", "layer_blocks", ")", ":", "\n", "        ", "num_conv", "=", "block", ".", "num_conv", "\n", "iCs", "=", "self", ".", "xchannels", "[", "last_channel_idx", ":", "last_channel_idx", "+", "num_conv", "+", "1", "]", "\n", "stride", "=", "2", "if", "stage", ">", "0", "and", "iL", "==", "0", "else", "1", "\n", "module", "=", "block", "(", "iCs", ",", "stride", ")", "\n", "last_channel_idx", "+=", "num_conv", "\n", "self", ".", "xchannels", "[", "last_channel_idx", "]", "=", "module", ".", "out_dim", "\n", "self", ".", "layers", ".", "append", "(", "module", ")", "\n", "self", ".", "message", "+=", "\"\\nstage={:}, ilayer={:02d}/{:02d}, block={:03d}, iCs={:}, oC={:3d}, stride={:}\"", ".", "format", "(", "stage", ",", "iL", ",", "layer_blocks", ",", "len", "(", "self", ".", "layers", ")", "-", "1", ",", "iCs", ",", "module", ".", "out_dim", ",", "stride", ")", "\n", "\n", "", "", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "xchannels", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_resnet", ")", "\n", "if", "zero_init_residual", ":", "\n", "      ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "ResNetBasicblock", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_b", ".", "bn", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "ResNetBottleneck", ")", ":", "\n", "          ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv_1x4", ".", "bn", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_width.InferWidthCifarResNet.get_message": [[150, 152], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_message", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.shape_infers.InferCifarResNet_width.InferWidthCifarResNet.forward": [[153, 161], ["enumerate", "InferCifarResNet_width.InferWidthCifarResNet.avgpool", "features.view.view.view", "InferCifarResNet_width.InferWidthCifarResNet.classifier", "layer", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "x", "=", "inputs", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "      ", "x", "=", "layer", "(", "x", ")", "\n", "", "features", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", "\n", "return", "features", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.meter.AverageMeter.__init__": [[6, 8], ["meter.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.meter.AverageMeter.reset": [[9, 14], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0.0", "\n", "self", ".", "avg", "=", "0.0", "\n", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "count", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.meter.AverageMeter.update": [[15, 20], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.meter.AverageMeter.__repr__": [[21, 23], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(val={val}, avg={avg}, count={count})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.meter.RecorderMeter.__init__": [[27, 29], ["meter.RecorderMeter.reset"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset"], ["def", "__init__", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "self", ".", "reset", "(", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.meter.RecorderMeter.reset": [[30, 38], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "assert", "total_epoch", ">", "0", ",", "'total_epoch should be greater than 0 vs {:}'", ".", "format", "(", "total_epoch", ")", "\n", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "epoch_losses", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_losses", "=", "self", ".", "epoch_losses", "-", "1", "\n", "self", ".", "epoch_accuracy", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_accuracy", "=", "self", ".", "epoch_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.meter.RecorderMeter.update": [[39, 47], ["meter.RecorderMeter.max_accuracy"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.meter.RecorderMeter.max_accuracy"], ["", "def", "update", "(", "self", ",", "idx", ",", "train_loss", ",", "train_acc", ",", "val_loss", ",", "val_acc", ")", ":", "\n", "    ", "assert", "idx", ">=", "0", "and", "idx", "<", "self", ".", "total_epoch", ",", "'total_epoch : {} , but update with the {} index'", ".", "format", "(", "self", ".", "total_epoch", ",", "idx", ")", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "0", "]", "=", "train_loss", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "1", "]", "=", "val_loss", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "0", "]", "=", "train_acc", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "1", "]", "=", "val_acc", "\n", "self", ".", "current_epoch", "=", "idx", "+", "1", "\n", "return", "self", ".", "max_accuracy", "(", "False", ")", "==", "self", ".", "epoch_accuracy", "[", "idx", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.meter.RecorderMeter.max_accuracy": [[48, 52], ["meter.RecorderMeter.epoch_accuracy[].max", "meter.RecorderMeter.epoch_accuracy[].max"], "methods", ["None"], ["", "def", "max_accuracy", "(", "self", ",", "istrain", ")", ":", "\n", "    ", "if", "self", ".", "current_epoch", "<=", "0", ":", "return", "0", "\n", "if", "istrain", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "0", "]", ".", "max", "(", ")", "\n", "else", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "1", "]", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.meter.RecorderMeter.plot_curve": [[53, 99], ["matplotlib.use", "plt.figure", "numpy.array", "numpy.zeros", "plt.xlim", "plt.ylim", "plt.xticks", "plt.yticks", "plt.grid", "plt.title", "plt.xlabel", "plt.ylabel", "plt.plot", "plt.legend", "plt.plot", "plt.legend", "plt.plot", "plt.legend", "plt.plot", "plt.legend", "plt.close", "numpy.arange", "numpy.arange", "plt.figure.savefig", "print", "float", "float", "range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.visualize.plot", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.visualize.plot", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.visualize.plot", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.visualize.plot", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.close"], ["", "def", "plot_curve", "(", "self", ",", "save_path", ")", ":", "\n", "    ", "import", "matplotlib", "\n", "matplotlib", ".", "use", "(", "'agg'", ")", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "title", "=", "'the accuracy/loss curve of train/val'", "\n", "dpi", "=", "100", "\n", "width", ",", "height", "=", "1600", ",", "1000", "\n", "legend_fontsize", "=", "10", "\n", "figsize", "=", "width", "/", "float", "(", "dpi", ")", ",", "height", "/", "float", "(", "dpi", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "x_axis", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "total_epoch", ")", "]", ")", "# epochs", "\n", "y_axis", "=", "np", ".", "zeros", "(", "self", ".", "total_epoch", ")", "\n", "\n", "plt", ".", "xlim", "(", "0", ",", "self", ".", "total_epoch", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "100", ")", "\n", "interval_y", "=", "5", "\n", "interval_x", "=", "5", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "total_epoch", "+", "interval_x", ",", "interval_x", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "100", "+", "interval_y", ",", "interval_y", ")", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'the training epoch'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "ylabel", "(", "'accuracy'", ",", "fontsize", "=", "16", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'g'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'train-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'y'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'valid-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'g'", ",", "linestyle", "=", "':'", ",", "label", "=", "'train-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'y'", ",", "linestyle", "=", "':'", ",", "label", "=", "'valid-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "      ", "fig", ".", "savefig", "(", "save_path", ",", "dpi", "=", "dpi", ",", "bbox_inches", "=", "'tight'", ")", "\n", "print", "(", "'---- save figure {} into {}'", ".", "format", "(", "title", ",", "save_path", ")", ")", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.PrintLogger.__init__": [[18, 21], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "name", "=", "'PrintLogger'", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.PrintLogger.log": [[22, 24], ["print"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "string", ")", ":", "\n", "    ", "print", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.PrintLogger.close": [[25, 27], ["print"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "    ", "print", "(", "'-'", "*", "30", "+", "' close printer '", "+", "'-'", "*", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.__init__": [[31, 52], ["int", "pathlib.Path", "logger.Logger.log_dir.mkdir", "bool", "open", "pathlib.Path", "logger.Logger.model_dir.mkdir", "logger.Logger.tensorboard_dir.mkdir", "tf.summary.FileWriter", "time.strftime", "time.strftime", "str", "time.gmtime", "time.gmtime", "time.time", "time.time"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "log_dir", ",", "seed", ",", "create_model_dir", "=", "True", ",", "use_tf", "=", "False", ")", ":", "\n", "    ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "seed", "=", "int", "(", "seed", ")", "\n", "self", ".", "log_dir", "=", "Path", "(", "log_dir", ")", "\n", "self", ".", "model_dir", "=", "Path", "(", "log_dir", ")", "/", "'checkpoint'", "\n", "self", ".", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "if", "create_model_dir", ":", "\n", "      ", "self", ".", "model_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "#self.meta_dir.mkdir(mode=0o775, parents=True, exist_ok=True)", "\n", "\n", "", "self", ".", "use_tf", "=", "bool", "(", "use_tf", ")", "\n", "self", ".", "tensorboard_dir", "=", "self", ".", "log_dir", "/", "(", "'tensorboard-{:}'", ".", "format", "(", "time", ".", "strftime", "(", "'%d-%h'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", ")", "\n", "#self.tensorboard_dir = self.log_dir / ('tensorboard-{:}'.format(time.strftime( '%d-%h-at-%H:%M:%S', time.gmtime(time.time()) )))", "\n", "self", ".", "logger_path", "=", "self", ".", "log_dir", "/", "'seed-{:}-T-{:}.log'", ".", "format", "(", "self", ".", "seed", ",", "time", ".", "strftime", "(", "'%d-%h-at-%H-%M-%S'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "self", ".", "logger_file", "=", "open", "(", "self", ".", "logger_path", ",", "'w'", ")", "\n", "\n", "if", "self", ".", "use_tf", ":", "\n", "      ", "self", ".", "tensorboard_dir", ".", "mkdir", "(", "mode", "=", "0o775", ",", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "str", "(", "self", ".", "tensorboard_dir", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.__repr__": [[53, 55], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(dir={log_dir}, use-tf={use_tf}, writer={writer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.path": [[56, 63], ["TypeError"], "methods", ["None"], ["", "def", "path", "(", "self", ",", "mode", ")", ":", "\n", "    ", "valids", "=", "(", "'model'", ",", "'best'", ",", "'info'", ",", "'log'", ")", "\n", "if", "mode", "==", "'model'", ":", "return", "self", ".", "model_dir", "/", "'seed-{:}-basic.pth'", ".", "format", "(", "self", ".", "seed", ")", "\n", "elif", "mode", "==", "'best'", ":", "return", "self", ".", "model_dir", "/", "'seed-{:}-best.pth'", ".", "format", "(", "self", ".", "seed", ")", "\n", "elif", "mode", "==", "'info'", ":", "return", "self", ".", "log_dir", "/", "'seed-{:}-last-info.pth'", ".", "format", "(", "self", ".", "seed", ")", "\n", "elif", "mode", "==", "'log'", ":", "return", "self", ".", "log_dir", "\n", "else", ":", "raise", "TypeError", "(", "'Unknow mode = {:}, valid modes = {:}'", ".", "format", "(", "mode", ",", "valids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.extract_log": [[64, 66], ["None"], "methods", ["None"], ["", "def", "extract_log", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "logger_file", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.close": [[67, 71], ["logger.Logger.logger_file.close", "logger.Logger.writer.close"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.close", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "    ", "self", ".", "logger_file", ".", "close", "(", ")", "\n", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "      ", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log": [[72, 80], ["sys.stdout.write", "sys.stdout.flush", "print", "logger.Logger.logger_file.write", "logger.Logger.logger_file.flush"], "methods", ["None"], ["", "", "def", "log", "(", "self", ",", "string", ",", "save", "=", "True", ",", "stdout", "=", "False", ")", ":", "\n", "    ", "if", "stdout", ":", "\n", "      ", "sys", ".", "stdout", ".", "write", "(", "string", ")", ";", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "      ", "print", "(", "string", ")", "\n", "", "if", "save", ":", "\n", "      ", "self", ".", "logger_file", ".", "write", "(", "'{:}\\n'", ".", "format", "(", "string", ")", ")", "\n", "self", ".", "logger_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.scalar_summary": [[81, 93], ["warnings.warn", "zip", "isinstance", "isinstance", "type", "type", "isinstance", "tf.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "tf.Summary.Value"], "methods", ["None"], ["", "", "def", "scalar_summary", "(", "self", ",", "tags", ",", "values", ",", "step", ")", ":", "\n", "    ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "if", "not", "self", ".", "use_tf", ":", "\n", "      ", "warnings", ".", "warn", "(", "'Do set use-tensorflow installed but call scalar_summary'", ")", "\n", "", "else", ":", "\n", "      ", "assert", "isinstance", "(", "tags", ",", "list", ")", "==", "isinstance", "(", "values", ",", "list", ")", ",", "'Type : {:} vs {:}'", ".", "format", "(", "type", "(", "tags", ")", ",", "type", "(", "values", ")", ")", "\n", "if", "not", "isinstance", "(", "tags", ",", "list", ")", ":", "\n", "        ", "tags", ",", "values", "=", "[", "tags", "]", ",", "[", "values", "]", "\n", "", "for", "tag", ",", "value", "in", "zip", "(", "tags", ",", "values", ")", ":", "\n", "        ", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.image_summary": [[94, 121], ["enumerate", "tf.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "warnings.warn", "scipy.misc.toimage().save", "tf.Summary.Image", "img_summaries.append", "StringIO", "tf.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "    ", "\"\"\"Log a list of images.\"\"\"", "\n", "import", "scipy", "\n", "if", "not", "self", ".", "use_tf", ":", "\n", "      ", "warnings", ".", "warn", "(", "'Do set use-tensorflow installed but call scalar_summary'", ")", "\n", "return", "\n", "\n", "", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "      ", "try", ":", "\n", "        ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "        ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'{}/{}'", ".", "format", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.histo_summary": [[122, 151], ["numpy.histogram", "tf.HistogramProto", "float", "float", "int", "float", "float", "tf.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "ValueError", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tf.HistogramProto.bucket_limit.append", "tf.HistogramProto.bucket.append", "tf.Summary.Value"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "    ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "if", "not", "self", ".", "use_tf", ":", "raise", "ValueError", "(", "'Do not have tensorflow'", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "      ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "      ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_for_file": [[7, 10], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["def", "time_for_file", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%d-%h-at-%H-%M-%S'", "\n", "return", "'{:}'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_string": [[11, 15], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["", "def", "time_string", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{:}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_string_short": [[16, 20], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["", "def", "time_string_short", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y%m%d'", "\n", "string", "=", "'{:}'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_print": [[21, 24], ["print", "time_utils.time_string"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.time_string"], ["", "def", "time_print", "(", "string", ",", "is_print", "=", "True", ")", ":", "\n", "  ", "if", "(", "is_print", ")", ":", "\n", "    ", "print", "(", "'{} : {}'", ".", "format", "(", "time_string", "(", ")", ",", "string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.convert_secs2time": [[25, 34], ["int", "int", "int"], "function", ["None"], ["", "", "def", "convert_secs2time", "(", "epoch_time", ",", "return_str", "=", "False", ")", ":", "\n", "  ", "need_hour", "=", "int", "(", "epoch_time", "/", "3600", ")", "\n", "need_mins", "=", "int", "(", "(", "epoch_time", "-", "3600", "*", "need_hour", ")", "/", "60", ")", "\n", "need_secs", "=", "int", "(", "epoch_time", "-", "3600", "*", "need_hour", "-", "60", "*", "need_mins", ")", "\n", "if", "return_str", ":", "\n", "    ", "str", "=", "'[{:02d}:{:02d}:{:02d}]'", ".", "format", "(", "need_hour", ",", "need_mins", ",", "need_secs", ")", "\n", "return", "str", "\n", "", "else", ":", "\n", "    ", "return", "need_hour", ",", "need_mins", ",", "need_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.time_utils.print_log": [[35, 43], ["hasattr", "log.log", "print", "log.write", "log.flush"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.log"], ["", "", "def", "print_log", "(", "print_string", ",", "log", ")", ":", "\n", "#if isinstance(log, Logger): log.log('{:}'.format(print_string))", "\n", "  ", "if", "hasattr", "(", "log", ",", "'log'", ")", ":", "log", ".", "log", "(", "'{:}'", ".", "format", "(", "print_string", ")", ")", "\n", "else", ":", "\n", "    ", "print", "(", "\"{:}\"", ".", "format", "(", "print_string", ")", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "      ", "log", ".", "write", "(", "'{:}\\n'", ".", "format", "(", "print_string", ")", ")", "\n", "log", ".", "flush", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar100.main": [[72, 163], ["numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "logging.info", "model.NetworkCIFAR", "model.cuda.cuda", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "ut._data_transforms_cifar100", "torchvision.CIFAR100", "torchvision.CIFAR100", "logging.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "logging.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "eval", "print", "visualize.plot", "visualize.plot", "ut.count_parameters_in_MB", "model.cuda.parameters", "float", "time.time", "logging.info", "train_cifar100.train", "logging.info", "writer.add_scalar", "writer.add_scalar", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "train_cifar100.infer", "writer.add_scalar", "writer.add_scalar", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "ut.save", "test_error.append", "logging.info", "logging.info", "open", "pickle.dump", "open", "pickle.load", "os.path.join", "os.path.join", "len", "len", "ut.save", "os.path.join", "os.path.join", "torch.optim.lr_scheduler.CosineAnnealingLR.get_last_lr", "os.path.join", "best_acc.item", "valid_acc.item", "time.time"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut._data_transforms_cifar100", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.visualize.plot", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.visualize.plot", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.count_parameters_in_MB", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.infer", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save"], ["def", "main", "(", ")", ":", "\n", "  ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "if", "args", ".", "arch", "is", "not", "None", ":", "\n", "    ", "genotype", "=", "eval", "(", "\"genotypes.%s\"", "%", "args", ".", "arch", ")", "\n", "\n", "", "if", "args", ".", "dir", "is", "not", "None", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir", ",", "\"genotype.pickle\"", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "genotype", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "print", "(", "\"Unpickling genotype.pickle\"", ")", "\n", "visualize", ".", "plot", "(", "genotype", ".", "normal", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "\"normal\"", ")", ",", "False", ")", "\n", "visualize", ".", "plot", "(", "genotype", ".", "reduce", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "\"reduction\"", ")", ",", "False", ")", "\n", "\n", "", "logging", ".", "info", "(", "genotype", ")", "\n", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CIFAR_CLASSES", ",", "args", ".", "layers", ",", "args", ".", "auxiliary", ",", "genotype", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "ut", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", ")", "\n", "\n", "train_transform", ",", "valid_transform", "=", "ut", ".", "_data_transforms_cifar100", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR100", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "valid_data", "=", "dset", ".", "CIFAR100", "(", "root", "=", "args", ".", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "valid_transform", ")", "\n", "logging", ".", "info", "(", "\"[INFO] len(train_data): {}, len(valid_data): {}\"", ".", "format", "(", "len", "(", "train_data", ")", ",", "len", "(", "valid_data", ")", ")", ")", "\n", "\n", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ")", "\n", "\n", "test_error", "=", "[", "]", "\n", "\n", "best_acc", "=", "0.0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "    ", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "info", "(", "'[INFO] epoch (%d/%d) lr %e'", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "model", ".", "drop_path_prob", "=", "args", ".", "drop_path_prob", "*", "epoch", "/", "args", ".", "epochs", "\n", "\n", "train_acc", ",", "train_obj", "=", "train", "(", "train_queue", ",", "model", ",", "criterion", ",", "optimizer", ")", "\n", "logging", ".", "info", "(", "'[INFO] train_acc %f'", ",", "train_acc", ")", "\n", "writer", ".", "add_scalar", "(", "\"train_acc\"", ",", "train_acc", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"train_obj\"", ",", "train_obj", ",", "epoch", "+", "1", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "valid_acc", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "if", "valid_acc", ">", "best_acc", ":", "\n", "      ", "best_acc", "=", "valid_acc", "\n", "ut", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'best_weights.pt'", ")", ")", "\n", "", "writer", ".", "add_scalar", "(", "\"best_acc\"", ",", "best_acc", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"best_test_error\"", ",", "100", "-", "best_acc", ",", "epoch", "+", "1", ")", "\n", "\n", "logging", ".", "info", "(", "'[INFO] valid_acc %f'", ",", "valid_acc", ")", "\n", "writer", ".", "add_scalar", "(", "\"valid_acc\"", ",", "valid_acc", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"valid_obj\"", ",", "valid_obj", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"test_error\"", ",", "100", "-", "valid_acc", ",", "epoch", "+", "1", ")", "\n", "\n", "ut", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "test_error", ".", "append", "(", "100", "-", "valid_acc", ")", "\n", "logging", ".", "info", "(", "f'[INFO] Epoch finished in {(time.time() - epoch_start)/60:.5f} minutes'", ")", "\n", "logging", ".", "info", "(", "'='", "*", "100", ")", "\n", "\n", "#logging.info('[INFO] best_acc %f', best_acc)", "\n", "", "logging", ".", "info", "(", "f'best_acc: {best_acc.item()}, valid_acc: {valid_acc.item()}'", ")", "\n", "\n", "with", "open", "(", "\"{}/test_error.pickle\"", ".", "format", "(", "args", ".", "save", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "    ", "pickle", ".", "dump", "(", "test_error", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar100.train": [[164, 194], ["ut.AvgrageMeter", "ut.AvgrageMeter", "ut.AvgrageMeter", "model.train", "enumerate", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "ut.accuracy", "Variable().cuda.size", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "criterion", "model.parameters", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "", "def", "train", "(", "train_queue", ",", "model", ",", "criterion", ",", "optimizer", ")", ":", "\n", "  ", "objs", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "    ", "input", "=", "Variable", "(", "input", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "logits_aux", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "if", "args", ".", "auxiliary", ":", "\n", "      ", "loss_aux", "=", "criterion", "(", "logits_aux", ",", "target", ")", "\n", "loss", "+=", "args", ".", "auxiliary_weight", "*", "loss_aux", "\n", "", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "ut", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "      ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar100.infer": [[196, 220], ["ut.AvgrageMeter", "ut.AvgrageMeter", "ut.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model", "criterion", "ut.accuracy", "Variable().cuda.size", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "  ", "objs", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "      ", "input", "=", "Variable", "(", "input", ",", "volatile", "=", "True", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ",", "volatile", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "logits", ",", "_", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "ut", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "        ", "logging", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.__init__": [[53, 66], ["enumerate", "isinstance", "isinstance", "type", "len", "genotypes.Structure.node_N.append", "genotypes.Structure.nodes.append", "isinstance", "isinstance", "type", "len", "len", "len", "tuple", "isinstance", "isinstance", "type", "copy.deepcopy", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ")", ":", "\n", "    ", "assert", "isinstance", "(", "genotype", ",", "list", ")", "or", "isinstance", "(", "genotype", ",", "tuple", ")", ",", "'invalid class of genotype : {:}'", ".", "format", "(", "type", "(", "genotype", ")", ")", "\n", "self", ".", "node_num", "=", "len", "(", "genotype", ")", "+", "1", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "self", ".", "node_N", "=", "[", "]", "\n", "for", "idx", ",", "node_info", "in", "enumerate", "(", "genotype", ")", ":", "\n", "      ", "assert", "isinstance", "(", "node_info", ",", "list", ")", "or", "isinstance", "(", "node_info", ",", "tuple", ")", ",", "'invalid class of node_info : {:}'", ".", "format", "(", "type", "(", "node_info", ")", ")", "\n", "assert", "len", "(", "node_info", ")", ">=", "1", ",", "'invalid length : {:}'", ".", "format", "(", "len", "(", "node_info", ")", ")", "\n", "for", "node_in", "in", "node_info", ":", "\n", "        ", "assert", "isinstance", "(", "node_in", ",", "list", ")", "or", "isinstance", "(", "node_in", ",", "tuple", ")", ",", "'invalid class of in-node : {:}'", ".", "format", "(", "type", "(", "node_in", ")", ")", "\n", "assert", "len", "(", "node_in", ")", "==", "2", "and", "node_in", "[", "1", "]", "<=", "idx", ",", "'invalid in-node : {:}'", ".", "format", "(", "node_in", ")", "\n", "", "self", ".", "node_N", ".", "append", "(", "len", "(", "node_info", ")", ")", "\n", "self", ".", "nodes", ".", "append", "(", "tuple", "(", "deepcopy", "(", "node_info", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tolist": [[67, 79], ["list", "sorted", "tuple", "genotypes.append", "filter", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "tolist", "(", "self", ",", "remove_str", ")", ":", "\n", "# convert this class to the list, if remove_str is 'none', then remove the 'none' operation.", "\n", "# note that we re-order the input node in this function", "\n", "# return the-genotype-list and success [if unsuccess, it is not a connectivity]", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "      ", "node_info", "=", "list", "(", "node_info", ")", "\n", "node_info", "=", "sorted", "(", "node_info", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ")", "\n", "node_info", "=", "tuple", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "!=", "remove_str", ",", "node_info", ")", ")", "\n", "if", "len", "(", "node_info", ")", "==", "0", ":", "return", "None", ",", "False", "\n", "genotypes", ".", "append", "(", "node_info", ")", "\n", "", "return", "genotypes", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.node": [[80, 83], ["len", "len"], "methods", ["None"], ["", "def", "node", "(", "self", ",", "index", ")", ":", "\n", "    ", "assert", "index", ">", "0", "and", "index", "<=", "len", "(", "self", ")", ",", "'invalid index={:} < {:}'", ".", "format", "(", "index", ",", "len", "(", "self", ")", ")", "\n", "return", "self", ".", "nodes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tostr": [[84, 91], ["strings.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "tostr", "(", "self", ")", ":", "\n", "    ", "strings", "=", "[", "]", "\n", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "      ", "string", "=", "'|'", ".", "join", "(", "[", "x", "[", "0", "]", "+", "'~{:}'", ".", "format", "(", "x", "[", "1", "]", ")", "for", "x", "in", "node_info", "]", ")", "\n", "string", "=", "'|{:}|'", ".", "format", "(", "string", ")", "\n", "strings", ".", "append", "(", "string", ")", "\n", "", "return", "'+'", ".", "join", "(", "strings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.check_valid": [[92, 102], ["enumerate", "sums.append", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "check_valid", "(", "self", ")", ":", "\n", "    ", "nodes", "=", "{", "0", ":", "True", "}", "\n", "for", "i", ",", "node_info", "in", "enumerate", "(", "self", ".", "nodes", ")", ":", "\n", "      ", "sums", "=", "[", "]", "\n", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "        ", "if", "op", "==", "'none'", "or", "nodes", "[", "xin", "]", "is", "False", ":", "x", "=", "False", "\n", "else", ":", "x", "=", "True", "\n", "sums", ".", "append", "(", "x", ")", "\n", "", "nodes", "[", "i", "+", "1", "]", "=", "sum", "(", "sums", ")", ">", "0", "\n", "", "return", "nodes", "[", "len", "(", "self", ".", "nodes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.to_unique_str": [[103, 122], ["enumerate", "cur_node.append", "sorted", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "to_unique_str", "(", "self", ",", "consider_zero", "=", "False", ")", ":", "\n", "# this is used to identify the isomorphic cell, which rerquires the prior knowledge of operation", "\n", "# two operations are special, i.e., none and skip_connect", "\n", "    ", "nodes", "=", "{", "0", ":", "'0'", "}", "\n", "for", "i_node", ",", "node_info", "in", "enumerate", "(", "self", ".", "nodes", ")", ":", "\n", "      ", "cur_node", "=", "[", "]", "\n", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "        ", "if", "consider_zero", "is", "None", ":", "\n", "          ", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "elif", "consider_zero", ":", "\n", "          ", "if", "op", "==", "'none'", "or", "nodes", "[", "xin", "]", "==", "'#'", ":", "x", "=", "'#'", "# zero", "\n", "elif", "op", "==", "'skip_connect'", ":", "x", "=", "nodes", "[", "xin", "]", "\n", "else", ":", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "else", ":", "\n", "          ", "if", "op", "==", "'skip_connect'", ":", "x", "=", "nodes", "[", "xin", "]", "\n", "else", ":", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "cur_node", ".", "append", "(", "x", ")", "\n", "", "nodes", "[", "i_node", "+", "1", "]", "=", "'+'", ".", "join", "(", "sorted", "(", "cur_node", ")", ")", "\n", "", "return", "nodes", "[", "len", "(", "self", ".", "nodes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.check_valid_op": [[123, 129], ["None"], "methods", ["None"], ["", "def", "check_valid_op", "(", "self", ",", "op_names", ")", ":", "\n", "    ", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "      ", "for", "inode_edge", "in", "node_info", ":", "\n", "#assert inode_edge[0] in op_names, 'invalid op-name : {:}'.format(inode_edge[0])", "\n", "        ", "if", "inode_edge", "[", "0", "]", "not", "in", "op_names", ":", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.__repr__": [[130, 132], ["genotypes.Structure.tostr"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.tostr"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}({node_num} nodes with {node_info})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "node_info", "=", "self", ".", "tostr", "(", ")", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.__len__": [[133, 135], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "nodes", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.__getitem__": [[136, 138], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "return", "self", ".", "nodes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.str2structure": [[139, 151], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "@", "staticmethod", "\n", "def", "str2structure", "(", "xstr", ")", ":", "\n", "    ", "assert", "isinstance", "(", "xstr", ",", "str", ")", ",", "'must take string (not {:}) as input'", ".", "format", "(", "type", "(", "xstr", ")", ")", "\n", "nodestrs", "=", "xstr", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "nodestrs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "tuple", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "genotypes", ".", "append", "(", "input_infos", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.str2fullstructure": [[152, 168], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "list", "list", "range", "sorted", "genotypes.append", "filter", "xi.split", "tuple", "node_str.split", "len", "list.append", "xinput.split", "int"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "@", "staticmethod", "\n", "def", "str2fullstructure", "(", "xstr", ",", "default_name", "=", "'none'", ")", ":", "\n", "    ", "assert", "isinstance", "(", "xstr", ",", "str", ")", ",", "'must take string (not {:}) as input'", ".", "format", "(", "type", "(", "xstr", ")", ")", "\n", "nodestrs", "=", "xstr", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "nodestrs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "list", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "all_in_nodes", "=", "list", "(", "x", "[", "1", "]", "for", "x", "in", "input_infos", ")", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "        ", "if", "j", "not", "in", "all_in_nodes", ":", "input_infos", ".", "append", "(", "(", "default_name", ",", "j", ")", ")", "\n", "", "node_info", "=", "sorted", "(", "input_infos", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ")", "\n", "genotypes", ".", "append", "(", "tuple", "(", "node_info", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.gen_all": [[169, 188], ["genotypes.get_combination", "enumerate", "range", "isinstance", "isinstance", "type", "genotypes.get_combination", "tuple", "genotypes.Structure", "new_all_archs.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.get_combination", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.get_combination", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "@", "staticmethod", "\n", "def", "gen_all", "(", "search_space", ",", "num", ",", "return_ori", ")", ":", "\n", "    ", "assert", "isinstance", "(", "search_space", ",", "list", ")", "or", "isinstance", "(", "search_space", ",", "tuple", ")", ",", "'invalid class of search-space : {:}'", ".", "format", "(", "type", "(", "search_space", ")", ")", "\n", "assert", "num", ">=", "2", ",", "'There should be at least two nodes in a neural cell instead of {:}'", ".", "format", "(", "num", ")", "\n", "all_archs", "=", "get_combination", "(", "search_space", ",", "1", ")", "\n", "for", "i", ",", "arch", "in", "enumerate", "(", "all_archs", ")", ":", "\n", "      ", "all_archs", "[", "i", "]", "=", "[", "tuple", "(", "arch", ")", "]", "\n", "\n", "", "for", "inode", "in", "range", "(", "2", ",", "num", ")", ":", "\n", "      ", "cur_nodes", "=", "get_combination", "(", "search_space", ",", "inode", ")", "\n", "new_all_archs", "=", "[", "]", "\n", "for", "previous_arch", "in", "all_archs", ":", "\n", "        ", "for", "cur_node", "in", "cur_nodes", ":", "\n", "          ", "new_all_archs", ".", "append", "(", "previous_arch", "+", "[", "tuple", "(", "cur_node", ")", "]", ")", "\n", "", "", "all_archs", "=", "new_all_archs", "\n", "", "if", "return_ori", ":", "\n", "      ", "return", "all_archs", "\n", "", "else", ":", "\n", "      ", "return", "[", "Structure", "(", "x", ")", "for", "x", "in", "all_archs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.get_combination": [[34, 48], ["range", "combs.append", "new_combs.append"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "get_combination", "(", "space", ",", "num", ")", ":", "\n", "  ", "combs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "    ", "if", "i", "==", "0", ":", "\n", "      ", "for", "func", "in", "space", ":", "\n", "        ", "combs", ".", "append", "(", "[", "(", "func", ",", "i", ")", "]", ")", "\n", "", "", "else", ":", "\n", "      ", "new_combs", "=", "[", "]", "\n", "for", "string", "in", "combs", ":", "\n", "        ", "for", "func", "in", "space", ":", "\n", "          ", "xstring", "=", "string", "+", "[", "(", "func", ",", "i", ")", "]", "\n", "new_combs", ".", "append", "(", "xstring", ")", "\n", "", "", "combs", "=", "new_combs", "\n", "", "", "return", "combs", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.__init__": [[7, 12], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "num_elites", ",", "tournament_size", ",", "device", ",", "mrate", "=", "0.05", ")", ":", "\n", "    ", "self", ".", "_device", "=", "device", "\n", "self", ".", "_num_elites", "=", "num_elites", "\n", "self", ".", "_tournament_size", "=", "tournament_size", "\n", "self", ".", "mutation_rate", "=", "mrate", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.evolve": [[13, 15], ["ga.GeneticAlgorithm.mutate", "ga.GeneticAlgorithm.crossover"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.mutate", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.crossover"], ["", "def", "evolve", "(", "self", ",", "population", ")", ":", "\n", "    ", "return", "self", ".", "mutate", "(", "self", ".", "crossover", "(", "population", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.crossover": [[16, 29], ["population.Population", "range", "population.Population.get_population().append", "population.Population.get_population_size", "population.get_population_size", "population.Population.get_population().append", "ga.GeneticAlgorithm.tournament_selection().get_population", "ga.GeneticAlgorithm.tournament_selection().get_population", "ga.GeneticAlgorithm.crossover_chromosomes", "population.Population.get_population", "population.get_population", "population.Population.get_population", "ga.GeneticAlgorithm.tournament_selection", "ga.GeneticAlgorithm.tournament_selection"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.crossover_chromosomes", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.tournament_selection", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.tournament_selection"], ["", "def", "crossover", "(", "self", ",", "population", ")", ":", "\n", "#print(\"crossover\")", "\n", "    ", "cross_pop", "=", "Population", "(", "0", ",", "0", ",", "self", ".", "_device", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_num_elites", ")", ":", "\n", "      ", "cross_pop", ".", "get_population", "(", ")", ".", "append", "(", "population", ".", "get_population", "(", ")", "[", "i", "]", ")", "\n", "\n", "", "while", "cross_pop", ".", "get_population_size", "(", ")", "<", "population", ".", "get_population_size", "(", ")", ":", "\n", "      ", "chromosome1", "=", "self", ".", "tournament_selection", "(", "population", ")", ".", "get_population", "(", ")", "[", "0", "]", "\n", "chromosome2", "=", "self", ".", "tournament_selection", "(", "population", ")", ".", "get_population", "(", ")", "[", "0", "]", "\n", "cross_pop", ".", "get_population", "(", ")", ".", "append", "(", "GeneticAlgorithm", ".", "crossover_chromosomes", "(", "chromosome1", ",", "chromosome2", ")", ")", "\n", "\n", "#print(cross_pop.get_population_size())", "\n", "", "return", "cross_pop", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.mutate": [[30, 36], ["range", "population.get_population_size", "ga.GeneticAlgorithm.mutate_chromosome", "population.get_population"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.mutate_chromosome", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population"], ["", "def", "mutate", "(", "self", ",", "population", ")", ":", "\n", "#print(\"mutate\")", "\n", "#print(population.get_population_size())", "\n", "    ", "for", "i", "in", "range", "(", "self", ".", "_num_elites", ",", "population", ".", "get_population_size", "(", ")", ")", ":", "\n", "      ", "self", ".", "mutate_chromosome", "(", "population", ".", "get_population", "(", ")", "[", "i", "]", ")", "\n", "", "return", "population", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.crossover_chromosomes": [[37, 52], ["chromosomes.chromosome", "zip", "range", "chromosomes.chromosome.update", "numpy.random.rand", "chrom3[].data.copy_", "chrom3[].data.copy_"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "@", "staticmethod", "\n", "def", "crossover_chromosomes", "(", "chromosome1", ",", "chromosome2", ")", ":", "\n", "    ", "cross_chrom", "=", "chromosome", "(", "chromosome1", ".", "_steps", ",", "chromosome1", ".", "_device", ",", "chromosome1", ".", "num_ops", ")", "\n", "for", "chrom1", ",", "chrom2", ",", "chrom3", "in", "zip", "(", "chromosome1", ".", "arch_parameters", ",", "chromosome2", ".", "arch_parameters", ",", "cross_chrom", ".", "arch_parameters", ")", ":", "\n", "#print(chrom3)", "\n", "      ", "for", "i", "in", "range", "(", "chrom1", ".", "shape", "[", "0", "]", ")", ":", "\n", "#print(i, chrom1[i], ': ', chrom2[i],': ' , chrom3[i])", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", ">=", "0.5", ":", "\n", "          ", "chrom3", "[", "i", "]", ".", "data", ".", "copy_", "(", "chrom1", "[", "i", "]", ".", "data", ")", "\n", "", "else", ":", "\n", "          ", "chrom3", "[", "i", "]", ".", "data", ".", "copy_", "(", "chrom2", "[", "i", "]", ".", "data", ")", "\n", "", "cross_chrom", ".", "update", "(", ")", "\n", "#print(i, chrom1[i], ': ', chrom2[i],': ' , chrom3[i])", "\n", "\n", "", "", "return", "cross_chrom", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.mutate_chromosome": [[53, 61], ["range", "numpy.random.rand", "chrom[].data.copy_", "chromosomes.chromosome.update", "chromosomes.chromosome.generate_parameters().view", "chromosomes.chromosome.generate_parameters"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.generate_parameters"], ["", "def", "mutate_chromosome", "(", "self", ",", "chromosome", ")", ":", "\n", "    ", "for", "chrom", "in", "chromosome", ".", "arch_parameters", ":", "\n", "      ", "for", "i", "in", "range", "(", "chrom", ".", "shape", "[", "0", "]", ")", ":", "\n", "#print(i)", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "mutation_rate", ":", "\n", "#print(\"mutate gene {}, replacing {}\".format(i, chrom[i]))", "\n", "          ", "chrom", "[", "i", "]", ".", "data", ".", "copy_", "(", "chromosome", ".", "generate_parameters", "(", "1", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "chromosome", ".", "update", "(", ")", "\n", "#print(\"with {}\".format(chrom[i]))", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.tournament_selection": [[63, 71], ["numpy.random.choice", "population.Population", "population.Population.get_population().sort", "population.get_population_size", "population.Population.get_population().append", "population.Population.get_population", "population.Population.get_population", "population.get_population", "x.get_fitness"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_fitness"], ["", "", "", "", "def", "tournament_selection", "(", "self", ",", "population", ")", ":", "\n", "    ", "indexes", "=", "np", ".", "random", ".", "choice", "(", "population", ".", "get_population_size", "(", ")", ",", "self", ".", "_tournament_size", ",", "replace", "=", "False", ")", "\n", "pop", "=", "Population", "(", "0", ",", "0", ",", "self", ".", "_device", ")", "\n", "for", "i", "in", "indexes", ":", "\n", "      ", "pop", ".", "get_population", "(", ")", ".", "append", "(", "population", ".", "get_population", "(", ")", "[", "i", "]", ")", "\n", "\n", "", "pop", ".", "get_population", "(", ")", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "get_fitness", "(", ")", ",", "reverse", "=", "True", ")", "\n", "return", "pop", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.verify_crossover": [[72, 80], ["zip", "range", "torch.all", "c1[].eq", "print", "torch.all", "c2[].eq", "print"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "verify_crossover", "(", "x", ",", "y", ",", "z", ")", ":", "\n", "    ", "for", "c1", ",", "c2", ",", "c3", "in", "zip", "(", "x", ".", "arch_parameters", ",", "y", ".", "arch_parameters", ",", "z", ".", "arch_parameters", ")", ":", "\n", "      ", "for", "i", "in", "range", "(", "c1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "torch", ".", "all", "(", "c1", "[", "i", "]", ".", "eq", "(", "c3", "[", "i", "]", ")", ")", ":", "\n", "          ", "print", "(", "\"{}: from 1st chromosome\"", ".", "format", "(", "i", ")", ")", "\n", "", "elif", "(", "torch", ".", "all", "(", "c2", "[", "i", "]", ".", "eq", "(", "c3", "[", "i", "]", ")", ")", ")", ":", "\n", "          ", "print", "(", "\"{}: from 2nd chromosome\"", ".", "format", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ga.GeneticAlgorithm.eq_chromosomes": [[81, 87], ["zip", "torch.all", "c1.eq"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "eq_chromosomes", "(", "x", ",", "y", ")", ":", "\n", "    ", "for", "c1", ",", "c2", "in", "zip", "(", "x", ".", "arch_parameters", ",", "y", ".", "arch_parameters", ")", ":", "\n", "      ", "if", "torch", ".", "all", "(", "c1", ".", "eq", "(", "c2", ")", ")", "!=", "True", ":", "\n", "        ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.operations.ReLUConvBN.__init__": [[24, 30], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.operations.ReLUConvBN.forward": [[32, 34], ["operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.operations.DilConv.__init__": [[37, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.operations.DilConv.forward": [[46, 48], ["operations.DilConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.operations.SepConv.__init__": [[52, 63], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.operations.SepConv.forward": [[65, 67], ["operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.operations.Identity.__init__": [[71, 73], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.operations.Identity.forward": [[74, 76], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.operations.Zero.__init__": [[80, 83], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "    ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.operations.Zero.forward": [[84, 88], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "stride", "==", "1", ":", "\n", "      ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.operations.FactorizedReduce.__init__": [[92, 99], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.operations.FactorizedReduce.forward": [[100, 105], ["operations.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn", "operations.FactorizedReduce.conv_1", "operations.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.__init__": [[5, 12], ["torch.device", "range", "population.Population.population.append", "chromosomes.chromosome"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "pop_size", ",", "steps", ",", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "num_ops", "=", "None", ")", ":", "\n", "    ", "self", ".", "_pop_size", "=", "pop_size", "\n", "self", ".", "_device", "=", "device", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "population", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "pop_size", ")", ":", "\n", "      ", "self", ".", "population", ".", "append", "(", "chromosome", "(", "steps", ",", "self", ".", "_device", ",", "num_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size": [[13, 15], ["len"], "methods", ["None"], ["", "", "def", "get_population_size", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "population", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population": [[16, 18], ["None"], "methods", ["None"], ["", "def", "get_population", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "population", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.print_population_fitness": [[19, 22], ["print", "p.get_fitness"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_fitness"], ["", "def", "print_population_fitness", "(", "self", ")", ":", "\n", "    ", "for", "p", "in", "self", ".", "population", ":", "\n", "      ", "print", "(", "p", ".", "get_fitness", "(", ")", ",", "end", "=", "', '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.pop_sort": [[23, 25], ["population.Population.population.sort", "x.get_fitness"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_fitness"], ["", "", "def", "pop_sort", "(", "self", ")", ":", "\n", "    ", "self", ".", "population", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "get_fitness", "(", ")", ",", "reverse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.random_pop": [[26, 30], ["range", "population.Population.population.append", "chromosomes.chromosome"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "random_pop", "(", "self", ")", ":", "\n", "    ", "self", ".", "population", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "_pop_size", ")", ":", "\n", "      ", "self", ".", "population", ".", "append", "(", "chromosome", "(", "self", ".", "_steps", ",", "self", ".", "_device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.add_flops_counting_methods": [[6, 71], ["start_flops_count.__get__", "stop_flops_count.__get__", "reset_flops_count.__get__", "compute_average_flops_cost.__get__", "net_main_module.reset_flops_count", "net_main_module.apply"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.reset_flops_count"], ["def", "add_flops_counting_methods", "(", "net_main_module", ")", ":", "\n", "    ", "\"\"\"Adds flops counting functions to an existing model. After that\n    the flops count should be activated and the model should be run on an input\n    image.\n    \n    Example:\n    \n    fcn = add_flops_counting_methods(fcn)\n    fcn = fcn.cuda().train()\n    fcn.start_flops_count()\n    \n\n    _ = fcn(batch)\n    \n    fcn.compute_average_flops_cost() / 1e9 / 2 # Result in GFLOPs per image in batch\n    \n    Important: dividing by 2 only works for resnet models -- see below for the details\n    of flops computation.\n    \n    Attention: we are counting multiply-add as two flops in this work, because in\n    most resnet models convolutions are bias-free (BN layers act as bias there)\n    and it makes sense to count muliply and add as separate flops therefore.\n    This is why in the above example we divide by 2 in order to be consistent with\n    most modern benchmarks. For example in \"Spatially Adaptive Computatin Time for Residual\n    Networks\" by Figurnov et al multiply-add was counted as two flops.\n    \n    This module computes the average flops which is necessary for dynamic networks which\n    have different number of executed layers. For static networks it is enough to run the network\n    once and get statistics (above example).\n    \n    Implementation:\n    The module works by adding batch_count to the main module which tracks the sum\n    of all batch sizes that were run through the network.\n    \n    Also each convolutional layer of the network tracks the overall number of flops\n    performed.\n    \n    The parameters are updated with the help of registered hook-functions which\n    are being called each time the respective layer is executed.\n    \n    Parameters\n    ----------\n    net_main_module : torch.nn.Module\n        Main module containing network\n        \n    Returns\n    -------\n    net_main_module : torch.nn.Module\n        Updated main module with new methods/attributes that are used\n        to compute flops.\n    \"\"\"", "\n", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "net_main_module", ".", "start_flops_count", "=", "start_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "stop_flops_count", "=", "stop_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "reset_flops_count", "=", "reset_flops_count", ".", "__get__", "(", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_flops_cost", "=", "compute_average_flops_cost", ".", "__get__", "(", "net_main_module", ")", "\n", "\n", "net_main_module", ".", "reset_flops_count", "(", ")", "\n", "\n", "# Adding varialbles necessary for masked flops computation", "\n", "net_main_module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.compute_average_flops_cost": [[74, 95], ["flops_benchmark..modules", "isinstance"], "function", ["None"], ["", "def", "compute_average_flops_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n    \n    Returns current mean flops consumption per image.\n    \n    \"\"\"", "\n", "\n", "batches_count", "=", "self", ".", "__batch_counter__", "\n", "\n", "flops_sum", "=", "0", "\n", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "\n", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.start_flops_count": [[97, 110], ["flops_benchmark.add_batch_counter_hook_function", "flops_benchmark..apply"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.add_batch_counter_hook_function"], ["", "def", "start_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n    \n    Activates the computation of mean flops consumption per image.\n    Call it before you run the network.\n    \n    \"\"\"", "\n", "\n", "add_batch_counter_hook_function", "(", "self", ")", "\n", "\n", "self", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.stop_flops_count": [[112, 125], ["flops_benchmark.remove_batch_counter_hook_function", "flops_benchmark..apply"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.remove_batch_counter_hook_function"], ["", "def", "stop_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n    \n    Stops computing the mean flops consumption per image.\n    Call whenever you want to pause the computation.\n    \n    \"\"\"", "\n", "\n", "remove_batch_counter_hook_function", "(", "self", ")", "\n", "\n", "self", ".", "apply", "(", "remove_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.reset_flops_count": [[127, 139], ["flops_benchmark.add_batch_counter_variables_or_reset", "flops_benchmark..apply"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.add_batch_counter_variables_or_reset"], ["", "def", "reset_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called\n    on a desired net object.\n    \n    Resets statistics computed so far.\n    \n    \"\"\"", "\n", "\n", "add_batch_counter_variables_or_reset", "(", "self", ")", "\n", "\n", "self", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.add_flops_mask": [[141, 150], ["module.apply", "isinstance"], "function", ["None"], ["", "def", "add_flops_mask", "(", "module", ",", "mask", ")", ":", "\n", "\n", "    ", "def", "add_flops_mask_func", "(", "module", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "            ", "module", ".", "__mask__", "=", "mask", "\n", "\n", "", "", "module", ".", "apply", "(", "add_flops_mask_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.remove_flops_mask": [[152, 155], ["module.apply"], "function", ["None"], ["", "def", "remove_flops_mask", "(", "module", ")", ":", "\n", "\n", "    ", "module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.conv_flops_counter_hook": [[160, 196], ["conv_module.__mask__.expand", "conv_module.__mask__.expand.sum"], "function", ["None"], ["", "def", "conv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "# We count multiply-add as 2 flops", "\n", "conv_per_position_flops", "=", "2", "*", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "output_height", "*", "output_width", "\n", "\n", "if", "conv_module", ".", "__mask__", "is", "not", "None", ":", "\n", "\n", "# (b, 1, h, w)", "\n", "        ", "flops_mask", "=", "conv_module", ".", "__mask__", ".", "expand", "(", "batch_size", ",", "1", ",", "output_height", ",", "output_width", ")", "\n", "active_elements_count", "=", "flops_mask", ".", "sum", "(", ")", "\n", "\n", "\n", "", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "bias_flops", "=", "0", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "\n", "        ", "bias_flops", "=", "out_channels", "*", "active_elements_count", "\n", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.batch_counter_hook": [[198, 206], ["None"], "function", ["None"], ["", "def", "batch_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "\n", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.add_batch_counter_variables_or_reset": [[209, 212], ["None"], "function", ["None"], ["", "def", "add_batch_counter_variables_or_reset", "(", "module", ")", ":", "\n", "\n", "    ", "module", ".", "__batch_counter__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.add_batch_counter_hook_function": [[214, 222], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "\n", "        ", "return", "\n", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.remove_batch_counter_hook_function": [[224, 231], ["hasattr", "module.__batch_counter_handle__.remove"], "function", ["None"], ["", "def", "remove_batch_counter_hook_function", "(", "module", ")", ":", "\n", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "\n", "        ", "module", ".", "__batch_counter_handle__", ".", "remove", "(", ")", "\n", "\n", "del", "module", ".", "__batch_counter_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.add_flops_counter_variable_or_reset": [[233, 238], ["isinstance"], "function", ["None"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.add_flops_counter_hook_function": [[239, 249], ["isinstance", "hasattr", "module.register_forward_hook"], "function", ["None"], ["", "", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "\n", "            ", "return", "\n", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "conv_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.remove_flops_counter_hook_function": [[250, 259], ["isinstance", "hasattr", "module.__flops_handle__.remove"], "function", ["None"], ["", "", "def", "remove_flops_counter_hook_function", "(", "module", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "\n", "            ", "module", ".", "__flops_handle__", ".", "remove", "(", ")", "\n", "\n", "del", "module", ".", "__flops_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.flops_benchmark.add_flops_mask_variable_or_reset": [[264, 269], ["isinstance"], "function", ["None"], ["", "", "", "def", "add_flops_mask_variable_or_reset", "(", "module", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "\n", "        ", "module", ".", "__mask__", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.test_cifar100.main": [[55, 101], ["numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "print", "logging.info", "print", "model.NetworkCIFAR", "ut.load", "model.cuda.cuda", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "ut._data_transforms_cifar100", "torchvision.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "test_cifar100.infer", "logging.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "eval", "logging.info", "ut.count_parameters_in_MB", "open", "pickle.load", "open", "pickle.load", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut._data_transforms_cifar100", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.infer", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.count_parameters_in_MB", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load"], ["def", "main", "(", ")", ":", "\n", "  ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "print", "(", "'---------Genotype---------'", ")", "\n", "if", "args", ".", "arch", "is", "not", "None", ":", "\n", "    ", "genotype", "=", "eval", "(", "\"genotypes.%s\"", "%", "args", ".", "arch", ")", "\n", "", "if", "args", ".", "dir", "is", "not", "None", ":", "\n", "    ", "if", "'pickle'", "in", "args", ".", "dir", ":", "\n", "      ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "genotype", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "      ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir", ",", "\"genotype.pickle\"", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "genotype", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "logging", ".", "info", "(", "\"Unpickling genotype.pickle\"", ")", "\n", "", "logging", ".", "info", "(", "genotype", ")", "\n", "print", "(", "'--------------------------'", ")", "\n", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CIFAR_CLASSES", ",", "args", ".", "layers", ",", "args", ".", "auxiliary", ",", "genotype", ")", "\n", "ut", ".", "load", "(", "model", ",", "args", ".", "model_path", ",", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "ut", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "\n", "_", ",", "test_transform", "=", "ut", ".", "_data_transforms_cifar100", "(", "args", ")", "\n", "test_data", "=", "dset", ".", "CIFAR100", "(", "root", "=", "args", ".", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "\n", "test_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "model", ".", "drop_path_prob", "=", "args", ".", "drop_path_prob", "\n", "test_acc", ",", "test_obj", "=", "infer", "(", "test_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'test_acc %f'", ",", "test_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.test_cifar100.infer": [[103, 127], ["ut.AvgrageMeter", "ut.AvgrageMeter", "ut.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model", "criterion", "ut.accuracy", "Variable().cuda.size", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "def", "infer", "(", "test_queue", ",", "model", ",", "criterion", ")", ":", "\n", "  ", "objs", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "test_queue", ")", ":", "\n", "      ", "input", "=", "Variable", "(", "input", ",", "volatile", "=", "True", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ",", "volatile", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "logits", ",", "_", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "ut", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "        ", "logging", ".", "info", "(", "'test %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_imagenet.CrossEntropyLabelSmooth.__init__": [[76, 81], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", ")", ":", "\n", "    ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_imagenet.CrossEntropyLabelSmooth.forward": [[82, 88], ["train_imagenet.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like().scatter_.unsqueeze", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "    ", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros_like", "(", "log_probs", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_imagenet.main": [[89, 239], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "print", "logging.info", "print", "model.NetworkImageNet", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "train_imagenet.CrossEntropyLabelSmooth", "criterion_smooth.cuda.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logging.info", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "os.path.exists", "range", "logging.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "eval", "logging.info", "nn.DataParallel.cuda", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "ut.count_parameters_in_MB", "nn.DataParallel.parameters", "torchvision.Compose", "torchvision.Compose", "float", "os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "torch.optim.SGD.load_state_dict", "torch.optim.lr_scheduler.CosineAnnealingLR.load_state_dict", "logging.info", "time.time", "train_imagenet.train", "logging.info", "writer.add_scalar", "writer.add_scalar", "train_imagenet.infer", "logging.info", "logging.info", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "ut.save_checkpoint", "logging.info", "open", "pickle.load", "torch.DataParallel", "nn.DataParallel.cuda", "torch.DataParallel", "nn.DataParallel.to", "os.path.join", "logging.info", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "time.time", "os.path.join", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ColorJitter", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "len", "len", "torch.optim.lr_scheduler.CosineAnnealingLR.get_last_lr", "train_imagenet.adjust_lr", "print", "sys.exit", "nn.DataParallel.state_dict", "torch.optim.SGD.state_dict", "torch.optim.lr_scheduler.CosineAnnealingLR.state_dict", "time.time"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.count_parameters_in_MB", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.load_state_dict", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.load_state_dict", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.load_state_dict", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.infer", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save_checkpoint", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_imagenet.adjust_lr", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.state_dict", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.state_dict", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.state_dict"], ["", "", "def", "main", "(", ")", ":", "\n", "  ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'No GPU device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "logging", ".", "info", "(", "\"unparsed_args = %s\"", ",", "unparsed", ")", "\n", "#num_gpus = torch.cuda.device_count()   ", "\n", "print", "(", "'---------Genotype---------'", ")", "\n", "if", "args", ".", "arch", "is", "not", "None", ":", "\n", "    ", "genotype", "=", "eval", "(", "\"genotypes.%s\"", "%", "args", ".", "arch", ")", "\n", "\n", "", "if", "args", ".", "dir", "is", "not", "None", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir", ",", "\"genotype.pickle\"", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "genotype", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "logging", ".", "info", "(", "\"Unpickling genotype.pickle\"", ")", "\n", "", "logging", ".", "info", "(", "genotype", ")", "\n", "print", "(", "'--------------------------'", ")", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CLASSES", ",", "args", ".", "layers", ",", "args", ".", "auxiliary", ",", "genotype", ")", "\n", "if", "args", ".", "parallel", ":", "\n", "    ", "if", "args", ".", "gpu_list", "is", "None", ":", "\n", "      ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "      ", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "gpu_list", ")", "\n", "#model = model.cuda()", "\n", "model", ".", "to", "(", "f'cuda:{model.device_ids[0]}'", ")", "\n", "", "", "else", ":", "\n", "    ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "ut", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "criterion_smooth", "=", "CrossEntropyLabelSmooth", "(", "CLASSES", ",", "args", ".", "label_smooth", ")", "\n", "criterion_smooth", "=", "criterion_smooth", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", ")", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "tmp_data_dir", ",", "'imagenet'", ")", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'train'", ")", "\n", "validdir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "train_data", "=", "dset", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "0.4", ",", "\n", "contrast", "=", "0.4", ",", "\n", "saturation", "=", "0.4", ",", "\n", "hue", "=", "0.2", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "valid_data", "=", "dset", ".", "ImageFolder", "(", "\n", "validdir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ")", "\n", "logging", ".", "info", "(", "f'[INFO] train_queue: {len(train_queue)}, valid_queue: {len(valid_queue)}'", ")", "\n", "\n", "# scheduler = torch.optim.lr_scheduler.StepLR(optimizer, args.decay_period, gamma=args.gamma)", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ")", "\n", "best_acc_top1", "=", "0", "\n", "best_acc_top5", "=", "0", "\n", "start_epoch", "=", "0", "\n", "\n", "# Checking if checkpoint already exists in args.save", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'checkpoint.pth.tar'", ")", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'checkpoint.pth.tar'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "best_acc_top1", "=", "checkpoint", "[", "'best_acc_top1'", "]", "\n", "best_acc_top5", "=", "checkpoint", "[", "'best_acc_top5'", "]", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "    ", "if", "args", ".", "lr_scheduler", "==", "'cosine'", ":", "\n", "#scheduler.step()", "\n", "      ", "current_lr", "=", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "", "elif", "args", ".", "lr_scheduler", "==", "'linear'", ":", "\n", "      ", "current_lr", "=", "adjust_lr", "(", "optimizer", ",", "epoch", ")", "\n", "", "else", ":", "\n", "      ", "print", "(", "'Wrong lr type, exit'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "logging", ".", "info", "(", "'Epoch: (%d/%d) lr %e'", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "current_lr", ")", "\n", "if", "epoch", "<", "5", "and", "args", ".", "batch_size", ">", "256", ":", "\n", "      ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "current_lr", "*", "(", "epoch", "+", "1", ")", "/", "5.0", "\n", "", "logging", ".", "info", "(", "'Warming-up Epoch: %d, LR: %e'", ",", "epoch", "+", "1", ",", "current_lr", "*", "(", "epoch", "+", "1", ")", "/", "5.0", ")", "\n", "#if num_gpus > 1:", "\n", "", "if", "args", ".", "parallel", ":", "\n", "      ", "model", ".", "module", ".", "drop_path_prob", "=", "args", ".", "drop_path_prob", "*", "epoch", "/", "args", ".", "epochs", "\n", "", "else", ":", "\n", "      ", "model", ".", "drop_path_prob", "=", "args", ".", "drop_path_prob", "*", "epoch", "/", "args", ".", "epochs", "\n", "", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "train_acc", ",", "train_obj", "=", "train", "(", "train_queue", ",", "model", ",", "criterion_smooth", ",", "optimizer", ")", "\n", "logging", ".", "info", "(", "'Train_acc: %f finished in %.5f minutes'", ",", "train_acc", ",", "(", "time", ".", "time", "(", ")", "-", "epoch_start", ")", "/", "60", ")", "\n", "writer", ".", "add_scalar", "(", "\"train_acc\"", ",", "train_acc", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"train_obj\"", ",", "train_obj", ",", "epoch", "+", "1", ")", "\n", "if", "args", ".", "lr_scheduler", "==", "'cosine'", ":", "\n", "      ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "valid_acc_top1", ",", "valid_acc_top5", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'Valid_acc_top1: %f'", ",", "valid_acc_top1", ")", "\n", "logging", ".", "info", "(", "'Valid_acc_top5: %f'", ",", "valid_acc_top5", ")", "\n", "epoch_duration", "=", "time", ".", "time", "(", ")", "-", "epoch_start", "\n", "logging", ".", "info", "(", "'Epoch time: %dmins.'", ",", "epoch_duration", "/", "60", ")", "\n", "writer", ".", "add_scalar", "(", "\"valid_acc_top1\"", ",", "valid_acc_top1", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"valid_acc_top5\"", ",", "valid_acc_top5", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"valid_obj\"", ",", "valid_obj", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"test_error_top1\"", ",", "100", "-", "valid_acc_top1", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"test_error_top5\"", ",", "100", "-", "valid_acc_top5", ",", "epoch", "+", "1", ")", "\n", "is_best", "=", "False", "\n", "if", "valid_acc_top5", ">", "best_acc_top5", ":", "\n", "      ", "best_acc_top5", "=", "valid_acc_top5", "\n", "", "if", "valid_acc_top1", ">", "best_acc_top1", ":", "\n", "      ", "best_acc_top1", "=", "valid_acc_top1", "\n", "is_best", "=", "True", "\n", "", "ut", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc_top1'", ":", "best_acc_top1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'best_acc_top1'", ":", "best_acc_top1", ",", "\n", "'best_acc_top5'", ":", "best_acc_top5", "\n", "}", ",", "is_best", ",", "args", ".", "save", ")", "\n", "logging", ".", "info", "(", "'='", "*", "100", ")", "\n", "", "logging", ".", "info", "(", "f'[INFO] best_acc_top1: {best_acc_top1}, best_acc_top5: {best_acc_top5}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_imagenet.adjust_lr": [[240, 249], ["None"], "function", ["None"], ["", "def", "adjust_lr", "(", "optimizer", ",", "epoch", ")", ":", "\n", "# Smaller slope for the last 5 epochs because lr * 1/250 is relatively large", "\n", "  ", "if", "args", ".", "epochs", "-", "epoch", ">", "5", ":", "\n", "    ", "lr", "=", "args", ".", "learning_rate", "*", "(", "args", ".", "epochs", "-", "5", "-", "epoch", ")", "/", "(", "args", ".", "epochs", "-", "5", ")", "\n", "", "else", ":", "\n", "    ", "lr", "=", "args", ".", "learning_rate", "*", "(", "args", ".", "epochs", "-", "epoch", ")", "/", "(", "(", "args", ".", "epochs", "-", "5", ")", "*", "5", ")", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "    ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_imagenet.train": [[250, 293], ["ut.AvgrageMeter", "ut.AvgrageMeter", "ut.AvgrageMeter", "ut.AvgrageMeter", "model.train", "enumerate", "target.to.to", "input.to.to", "time.time", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "ut.AvgrageMeter.update", "ut.accuracy", "input.to.size", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "criterion", "model.parameters", "criterion.data.item", "prec1.data.item", "prec5.data.item", "time.time", "logging.info", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "def", "train", "(", "train_queue", ",", "model", ",", "criterion", ",", "optimizer", ")", ":", "\n", "  ", "objs", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "batch_time", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "#target = target.cuda(non_blocking=True)", "\n", "    ", "target", "=", "target", ".", "to", "(", "f'cuda:{model.device_ids[0]}'", ")", "\n", "#input = input.cuda(non_blocking=True)", "\n", "input", "=", "input", ".", "to", "(", "f'cuda:{model.device_ids[0]}'", ")", "\n", "b_start", "=", "time", ".", "time", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "logits_aux", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "if", "args", ".", "auxiliary", ":", "\n", "      ", "loss_aux", "=", "criterion", "(", "logits_aux", ",", "target", ")", "\n", "loss", "+=", "args", ".", "auxiliary_weight", "*", "loss_aux", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "b_start", ")", "\n", "prec1", ",", "prec5", "=", "ut", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "      ", "end_time", "=", "time", ".", "time", "(", ")", "\n", "if", "step", "==", "0", ":", "\n", "        ", "duration", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "        ", "duration", "=", "end_time", "-", "start_time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "logging", ".", "info", "(", "'TRAIN Step: %04d Objs: %e R1: %f R5: %f lr: %e Duration: %02ds BTime: %.3fs'", ",", "\n", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "duration", ",", "batch_time", ".", "avg", ")", "\n", "#break", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_imagenet.infer": [[295, 328], ["ut.AvgrageMeter", "ut.AvgrageMeter", "ut.AvgrageMeter", "model.eval", "enumerate", "input.to.to", "target.to.to", "ut.accuracy", "input.to.size", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "criterion", "criterion.data.item", "prec1.data.item", "prec5.data.item", "time.time", "logging.info", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "  ", "objs", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "#input = input.cuda()", "\n", "    ", "input", "=", "input", ".", "to", "(", "f'cuda:{model.device_ids[0]}'", ")", "\n", "#target = target.cuda(non_blocking=True)", "\n", "target", "=", "target", ".", "to", "(", "f'cuda:{model.device_ids[0]}'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "logits", ",", "_", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "", "prec1", ",", "prec5", "=", "ut", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "      ", "end_time", "=", "time", ".", "time", "(", ")", "\n", "if", "step", "==", "0", ":", "\n", "        ", "duration", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "        ", "duration", "=", "end_time", "-", "start_time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "logging", ".", "info", "(", "'VALID Step: %03d Objs: %e R1: %f R5: %f Duration: %ds'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "duration", ")", "\n", "#break", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.__init__": [[6, 24], ["sum", "chromosomes.chromosome.generate_parameters().to", "chromosomes.chromosome.generate_parameters().to", "ut.AvgrageMeter", "ut.AvgrageMeter", "ut.AvgrageMeter", "chromosomes.chromosome.encode", "len", "chromosomes.chromosome.generate_parameters", "chromosomes.chromosome.generate_parameters", "range", "range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.encode", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.generate_parameters", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.generate_parameters"], ["  ", "def", "__init__", "(", "self", ",", "steps", ",", "device", ",", "num_ops", "=", "None", ")", ":", "\n", "    ", "self", ".", "_device", "=", "device", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "steps", ")", "for", "_", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "if", "num_ops", "is", "None", ":", "self", ".", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "else", ":", "self", ".", "num_ops", "=", "num_ops", "\n", "\n", "self", ".", "alphas_normal", "=", "self", ".", "generate_parameters", "(", "self", ".", "k", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "self", ".", "alphas_reduce", "=", "self", ".", "generate_parameters", "(", "self", ".", "k", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "self", ".", "arch_parameters", "=", "[", "self", ".", "alphas_normal", ",", "self", ".", "alphas_reduce", "]", "\n", "\n", "self", ".", "objs", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "top1", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "self", ".", "top5", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "\n", "self", ".", "evaluated", "=", "False", "\n", "self", ".", "encode", "(", ")", "\n", "self", ".", "tmp", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.accumulate": [[25, 27], ["chromosomes.chromosome.tmp.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "accumulate", "(", "self", ")", ":", "\n", "    ", "self", ".", "tmp", ".", "append", "(", "self", ".", "top1", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.update": [[28, 31], ["chromosomes.chromosome.encode"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.encode"], ["", "def", "update", "(", "self", ")", ":", "\n", "    ", "self", ".", "alphas_normal", ",", "self", ".", "alphas_reduce", "=", "self", ".", "arch_parameters", "\n", "self", ".", "encode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.encode": [[32, 34], ["torch.cat().view", "torch.cat"], "methods", ["None"], ["", "def", "encode", "(", "self", ")", ":", "\n", "    ", "self", ".", "genes", "=", "torch", ".", "cat", "(", "self", ".", "arch_parameters", ")", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.decode": [[35, 40], ["chromosomes.chromosome.genes.view"], "methods", ["None"], ["", "def", "decode", "(", "self", ")", ":", "\n", "    ", "tmp", "=", "self", ".", "genes", ".", "view", "(", "-", "1", ",", "self", ".", "num_ops", ")", "\n", "self", ".", "alphas_normal", "=", "tmp", "[", ":", "self", ".", "k", "]", "\n", "self", ".", "alphas_reduce", "=", "tmp", "[", "self", ".", "k", ":", "]", "\n", "self", ".", "arch_parameters", "=", "[", "self", ".", "alphas_normal", ",", "self", ".", "alphas_reduce", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.set_fitness": [[41, 45], ["None"], "methods", ["None"], ["", "def", "set_fitness", "(", "self", ",", "value", ",", "top1", ",", "top5", ")", ":", "\n", "    ", "self", ".", "objs", ".", "avg", "=", "value", "\n", "self", ".", "top1", ".", "avg", "=", "top1", "\n", "self", ".", "top5", ".", "avg", "=", "top5", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_len": [[46, 48], ["len"], "methods", ["None"], ["", "def", "get_len", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "k", "*", "len", "(", "self", ".", "arch_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_fitness": [[49, 51], ["None"], "methods", ["None"], ["", "def", "get_fitness", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_all_metrics": [[52, 54], ["None"], "methods", ["None"], ["", "def", "get_all_metrics", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "objs", ",", "self", ".", "top1", ",", "self", ".", "top5", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_arch_parameters": [[55, 57], ["None"], "methods", ["None"], ["", "def", "get_arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.generate_parameters": [[58, 60], ["torch.rand"], "methods", ["None"], ["", "def", "generate_parameters", "(", "self", ",", "k", ")", ":", "\n", "    ", "return", "torch", ".", "rand", "(", "k", ",", "self", ".", "num_ops", ")", "\n", "#return torch.nn.functional.one_hot(torch.randint(low = 0, high = self.num_ops, size = (k, )), num_classes = self.num_ops)", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.MixedOp.__init__": [[14, 30], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "prog_model_search.MixedOp._ops.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "str"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "stride", ",", "op_dict", ",", "row", ")", ":", "\n", "    ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "## Newly Added", "\n", "self", ".", "op_position", ",", "pos", "=", "{", "}", ",", "0", "\n", "##", "\n", "for", "primitive", "in", "PRIMITIVES", ":", "\n", "#print(row[op_dict[primitive]])", "\n", "## Newly Added", "\n", "      ", "if", "row", "[", "op_dict", "[", "primitive", "]", "]", ":", "\n", "        ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "stride", ",", "False", ")", "\n", "if", "'pool'", "in", "primitive", ":", "\n", "          ", "op", "=", "nn", ".", "Sequential", "(", "op", ",", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "False", ")", ")", "\n", "", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "self", ".", "op_position", "[", "str", "(", "pos", ")", "]", "=", "primitive", "\n", "pos", "+=", "1", "\n", "##", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.MixedOp.forward": [[32, 34], ["sum", "op", "zip"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "    ", "return", "sum", "(", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Cell.__init__": [[38, 78], ["torch.Module.__init__", "operations.ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "operations.FactorizedReduce", "operations.ReLUConvBN", "range", "len", "prog_model_search.MixedOp", "prog_model_search.Cell._ops.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "op_dict", ",", "arch_flag", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "arch_flag", "=", "arch_flag", "\n", "\n", "## Newly added", "\n", "self", ".", "op_dict", "=", "op_dict", "\n", "self", ".", "op_position", "=", "{", "}", "\n", "##", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "_bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "## Newly added", "\n", "        ", "row", "=", "self", ".", "arch_flag", "[", "self", ".", "idx", "]", "\n", "if", "j", "==", "0", ":", "node_str", "=", "f'c_(k-2)->{i}'", "\n", "elif", "j", "==", "1", ":", "node_str", "=", "f'c_(k-1)->{i}'", "\n", "else", ":", "node_str", "=", "f'{j-2}->{i}'", "\n", "self", ".", "op_position", "[", "node_str", "]", "=", "{", "}", "\n", "##", "\n", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "C", ",", "stride", ",", "op_dict", ",", "row", ")", "\n", "## Newly added", "\n", "self", ".", "op_position", "[", "node_str", "]", "=", "op", ".", "op_position", "\n", "##", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "## Newly added", "\n", "self", ".", "idx", "+=", "1", "\n", "##", "\n", "", "", "assert", "self", ".", "idx", "==", "len", "(", "self", ".", "op_position", ")", ",", "\"Mistake in creating the progressive cell\"", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Cell.forward": [[79, 91], ["prog_model_search.Cell.preprocess0", "prog_model_search.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "len", "states.append", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "weights", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "offset", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "s", "=", "sum", "(", "self", ".", "_ops", "[", "offset", "+", "j", "]", "(", "h", ",", "weights", "[", "offset", "+", "j", "]", ")", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ")", "\n", "offset", "+=", "len", "(", "states", ")", "\n", "states", ".", "append", "(", "s", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.__init__": [[95, 144], ["torch.Module.__init__", "sum", "enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "prog_model_search.Network._initialize_alphas", "prog_model_search.Network.prepare_dicts", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "prog_model_search.Cell", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "tmp.detach().clone", "range", "range", "range", "tmp.detach"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network._initialize_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.prepare_dicts"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "device", ",", "steps", "=", "4", ",", "multiplier", "=", "4", ",", "stem_multiplier", "=", "3", ",", "arch_flag", "=", "None", ")", ":", "\n", "    ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "_layers", "=", "layers", "\n", "#self._criterion = criterion", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "_device", "=", "device", "\n", "\n", "self", ".", "_k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", "for", "n", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "\n", "## Newly added for the Progressive", "\n", "if", "arch_flag", "is", "None", ":", "\n", "      ", "self", ".", "_num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "self", ".", "arch_flag", "=", "[", "torch", ".", "ones", "(", "(", "self", ".", "_k", ",", "self", ".", "_num_ops", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "arch_flag", "=", "[", "tmp", ".", "detach", "(", ")", ".", "clone", "(", ")", "for", "tmp", "in", "arch_flag", "]", "\n", "", "self", ".", "op_dict", "=", "{", "}", "\n", "for", "idx", ",", "op", "in", "enumerate", "(", "PRIMITIVES", ")", ":", "self", ".", "op_dict", "[", "op", "]", "=", "idx", "\n", "##", "\n", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "arch_flag_inp", "=", "self", ".", "arch_flag", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "arch_flag_inp", "=", "self", ".", "arch_flag", "[", "0", "]", "\n", "", "cell", "=", "Cell", "(", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "self", ".", "op_dict", ",", "arch_flag_inp", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", "\n", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n", "self", ".", "_initialize_alphas", "(", ")", "\n", "self", ".", "prepare_dicts", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.copy_arch_parameters": [[148, 152], ["zip", "prog_model_search.Network.arch_parameters", "x.data.copy_"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.arch_parameters"], ["", "def", "copy_arch_parameters", "(", "self", ",", "parameters", ")", ":", "\n", "    ", "for", "x", ",", "y", "in", "zip", "(", "self", ".", "arch_parameters", "(", ")", ",", "parameters", ")", ":", "\n", "#print(\"model arch shape: {}, pop arch shape: {}\".format(x.data.shape, y.data.shape))", "\n", "        ", "x", ".", "data", ".", "copy_", "(", "y", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.forward": [[159, 170], ["prog_model_search.Network.stem", "enumerate", "prog_model_search.Network.global_pooling", "prog_model_search.Network.classifier", "prog_model_search.Network.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "cell", "prog_model_search.Network.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "cell", ".", "reduction", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "self", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "self", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", "\n", "", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "weights", ")", "\n", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network._loss": [[171, 174], ["prog_model_search.Network.", "prog_model_search.Network._criterion"], "methods", ["None"], ["", "def", "_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "    ", "logits", "=", "self", "(", "input", ")", "\n", "return", "self", ".", "_criterion", "(", "logits", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network._initialize_alphas": [[175, 186], ["sum", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "range", "range", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "sum", "sum", "[].int", "[].int"], "methods", ["None"], ["", "def", "_initialize_alphas", "(", "self", ")", ":", "\n", "    ", "k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", "for", "n", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "\n", "self", ".", "alphas_normal", "=", "Variable", "(", "1e-3", "*", "torch", ".", "rand", "(", "k", ",", "sum", "(", "self", ".", "arch_flag", "[", "0", "]", "[", "0", "]", ".", "int", "(", ")", ")", ")", ".", "to", "(", "self", ".", "_device", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "alphas_reduce", "=", "Variable", "(", "1e-3", "*", "torch", ".", "rand", "(", "k", ",", "sum", "(", "self", ".", "arch_flag", "[", "1", "]", "[", "0", "]", ".", "int", "(", ")", ")", ")", ".", "to", "(", "self", ".", "_device", ")", ",", "requires_grad", "=", "False", ")", "\n", "#self.alphas_normal = Variable(1e-3*torch.rand(k, num_ops).to(self._device), requires_grad=False)", "\n", "#self.alphas_reduce = Variable(1e-3*torch.rand(k, num_ops).to(self._device), requires_grad=False)", "\n", "self", ".", "_arch_parameters", "=", "[", "\n", "self", ".", "alphas_normal", ",", "\n", "self", ".", "alphas_reduce", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.arch_parameters": [[188, 190], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.get_alphas": [[191, 195], ["a.cpu"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "'''Returns the list of architecture weights copied to cpu'''", "\n", "alphas", "=", "[", "a", ".", "cpu", "(", ")", "for", "a", "in", "self", ".", "_arch_parameters", "]", "\n", "return", "alphas", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.update_alphas": [[196, 204], ["zip", "len", "prog_model_search.Network.arch_parameters", "alpha.data.copy_"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.arch_parameters"], ["", "def", "update_alphas", "(", "self", ",", "alphas", ")", ":", "\n", "    ", "'''Update the architecture weights\n       alphas = [normal_wts, reduction_wts]\n    '''", "\n", "#self.get_alphas()[0].data.copy_(alphas)", "\n", "assert", "len", "(", "alphas", ")", "==", "2", ",", "'Wrong dimension of the alphas'", "\n", "for", "alpha", ",", "value", "in", "zip", "(", "self", ".", "arch_parameters", "(", ")", ",", "alphas", ")", ":", "\n", "      ", "alpha", ".", "data", ".", "copy_", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.check_alphas": [[205, 213], ["zip", "prog_model_search.Network.arch_parameters", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "x.eq"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.arch_parameters"], ["", "", "def", "check_alphas", "(", "self", ",", "alphas", ")", ":", "\n", "    ", "'''Verify if the architecture parameter is equal to the given alphas'''", "\n", "#return np.all(self.get_alphas()[0] == alphas.get())", "\n", "for", "x", ",", "y", "in", "zip", "(", "self", ".", "arch_parameters", "(", ")", ",", "alphas", ")", ":", "\n", "#print(x, y, x.eq(y))", "\n", "      ", "if", "not", "torch", ".", "all", "(", "x", ".", "eq", "(", "y", ")", ")", ":", "\n", "        ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.random_alphas": [[214, 234], ["prog_model_search.Network.update_alphas", "prog_model_search.Network.check_alphas", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "prog_model_search.Network.discretize", "prog_model_search.Network.update_alphas", "prog_model_search.Network.check_alphas", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "sum", "sum", "[].int", "[].int"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.check_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.discretize", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.check_alphas"], ["", "def", "random_alphas", "(", "self", ",", "discrete", "=", "False", ",", "k", "=", "1.0", ")", ":", "\n", "    ", "'''Generate random values for the architecture parameters and update the architecture parametr of the model\n       discrete: Whether to  discretize the alphas during training\n       k = value for the operations in the discrete architecture parameter\n    '''", "\n", "## Newly Added", "\n", "alphas_normal", "=", "1e-3", "*", "torch", ".", "rand", "(", "self", ".", "_k", ",", "sum", "(", "self", ".", "arch_flag", "[", "0", "]", "[", "0", "]", ".", "int", "(", ")", ")", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "alphas_reduce", "=", "1e-3", "*", "torch", ".", "rand", "(", "self", ".", "_k", ",", "sum", "(", "self", ".", "arch_flag", "[", "1", "]", "[", "0", "]", ".", "int", "(", ")", ")", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "tmp", "=", "[", "alphas_normal", ",", "alphas_reduce", "]", "\n", "self", ".", "update_alphas", "(", "tmp", ")", "\n", "assert", "self", ".", "check_alphas", "(", "tmp", ")", ",", "\"random architecture parameter failed to be copied\"", "\n", "##", "\n", "\n", "if", "discrete", ":", "\n", "      ", "discrete_tmp", "=", "self", ".", "discretize", "(", "k", "=", "k", ")", "\n", "self", ".", "update_alphas", "(", "discrete_tmp", ")", "\n", "assert", "self", ".", "check_alphas", "(", "discrete_tmp", ")", ",", "\"random discrete architecture parameter failed to be copied\"", "\n", "return", "discrete_tmp", "\n", "", "else", ":", "\n", "      ", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.genotype": [[235, 270], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "prog_model_search.Network.genotype._parse"], "methods", ["None"], ["", "", "def", "genotype", "(", "self", ")", ":", "\n", "\n", "    ", "def", "_parse", "(", "weights", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "n", "=", "2", "\n", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "        ", "end", "=", "start", "+", "n", "\n", "W", "=", "weights", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "edges", "=", "sorted", "(", "range", "(", "i", "+", "2", ")", ",", "key", "=", "lambda", "x", ":", "-", "max", "(", "W", "[", "x", "]", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "W", "[", "x", "]", ")", ")", "if", "k", "!=", "PRIMITIVES", ".", "index", "(", "'none'", ")", ")", ")", "[", ":", "2", "]", "\n", "for", "j", "in", "edges", ":", "\n", "          ", "k_best", "=", "None", "\n", "for", "k", "in", "range", "(", "len", "(", "W", "[", "j", "]", ")", ")", ":", "\n", "            ", "if", "k", "!=", "PRIMITIVES", ".", "index", "(", "'none'", ")", ":", "\n", "              ", "if", "k_best", "is", "None", "or", "W", "[", "j", "]", "[", "k", "]", ">", "W", "[", "j", "]", "[", "k_best", "]", ":", "\n", "                ", "k_best", "=", "k", "\n", "", "", "", "gene", ".", "append", "(", "(", "PRIMITIVES", "[", "k_best", "]", ",", "j", ")", ")", "\n", "", "start", "=", "end", "\n", "n", "+=", "1", "\n", "", "return", "gene", "\n", "\n", "", "alphas_df", "=", "self", ".", "show_alphas_dataframe", "(", ")", "[", "0", "]", "\n", "alphas_normal", "=", "torch", ".", "tensor", "(", "alphas_df", "[", "0", "]", ".", "to_numpy", "(", ")", ")", "\n", "alphas_reduce", "=", "torch", ".", "tensor", "(", "alphas_df", "[", "1", "]", ".", "to_numpy", "(", ")", ")", "\n", "gene_normal", "=", "_parse", "(", "F", ".", "softmax", "(", "alphas_normal", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gene_reduce", "=", "_parse", "(", "F", ".", "softmax", "(", "alphas_reduce", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "#gene_normal = _parse(F.softmax(self.alphas_normal, dim=-1).data.cpu().numpy())", "\n", "#gene_reduce = _parse(F.softmax(self.alphas_reduce, dim=-1).data.cpu().numpy())", "\n", "\n", "concat", "=", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", "\n", "genotype", "=", "Genotype", "(", "\n", "normal", "=", "gene_normal", ",", "normal_concat", "=", "concat", ",", "\n", "reduce", "=", "gene_reduce", ",", "reduce_concat", "=", "concat", "\n", ")", "\n", "return", "genotype", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.prepare_dicts": [[271, 281], ["range", "len", "range", "enumerate", "prog_model_search.Network._rows.append", "enumerate", "prog_model_search.Network._rows_dict.items"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "prepare_dicts", "(", "self", ")", ":", "\n", "    ", "self", ".", "_nodes", "=", "[", "'c_(k-2)'", ",", "'c_(k-1)'", ",", "'0'", ",", "'1'", ",", "'2'", ",", "'3'", "]", "\n", "self", ".", "_nodes_dict", "=", "{", "key", ":", "i", "for", "key", ",", "i", "in", "enumerate", "(", "self", ".", "_nodes", ")", "}", "\n", "tmp", "=", "[", "]", "\n", "self", ".", "_rows", "=", "[", "]", "\n", "for", "node", "in", "range", "(", "2", ",", "len", "(", "self", ".", "_nodes", ")", ")", ":", "\n", "      ", "for", "prev_node", "in", "range", "(", "node", ")", ":", "\n", "        ", "self", ".", "_rows", ".", "append", "(", "'{}->{}'", ".", "format", "(", "self", ".", "_nodes_dict", "[", "prev_node", "]", ",", "node", "-", "2", ")", ")", "\n", "", "", "self", ".", "_rows_dict", "=", "{", "key", ":", "i", "for", "key", ",", "i", "in", "enumerate", "(", "self", ".", "_rows", ")", "}", "\n", "self", ".", "edge2index", "=", "{", "value", ":", "key", "for", "key", ",", "value", "in", "self", ".", "_rows_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.show_alphas_dataframe": [[282, 306], ["enumerate", "list", "list", "prog_model_search.Network.get_alphas", "torch.softmax().detach().cpu().numpy", "torch.softmax().detach().cpu().numpy", "torch.softmax().detach().cpu().numpy", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "prog_model_search.Network.edge2index.items", "pandas.DataFrame.astype().idxmax", "df_alphas.append", "df_softmax.append", "df_max.append", "prog_model_search.Network.op_dict.keys", "prog_model_search.Network.op_dict.values", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "enumerate", "pandas.DataFrame.sum", "torch.softmax().detach().cpu", "torch.softmax().detach().cpu", "torch.softmax().detach().cpu", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pandas.DataFrame.astype", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "len", "len", "len", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "show_alphas_dataframe", "(", "self", ",", "show_sum", "=", "False", ")", ":", "\n", "    ", "key_list", ",", "val_list", "=", "list", "(", "self", ".", "op_dict", ".", "keys", "(", ")", ")", ",", "list", "(", "self", ".", "op_dict", ".", "values", "(", ")", ")", "\n", "df_alphas", ",", "df_softmax", ",", "df_max", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "alpha_num", ",", "alpha", "in", "enumerate", "(", "self", ".", "get_alphas", "(", ")", ")", ":", "\n", "      ", "alpha_softmax", "=", "F", ".", "softmax", "(", "alpha", ",", "dim", "=", "-", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "PRIMITIVES", ",", "index", "=", "self", ".", "_rows", ",", "data", "=", "np", ".", "zeros", "(", "(", "self", ".", "_k", ",", "len", "(", "PRIMITIVES", ")", ")", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "df_s", "=", "pd", ".", "DataFrame", "(", "columns", "=", "PRIMITIVES", ",", "index", "=", "self", ".", "_rows", ",", "data", "=", "np", ".", "zeros", "(", "(", "self", ".", "_k", ",", "len", "(", "PRIMITIVES", ")", ")", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "df_m", "=", "pd", ".", "DataFrame", "(", "columns", "=", "PRIMITIVES", ",", "index", "=", "self", ".", "_rows", ",", "data", "=", "np", ".", "zeros", "(", "(", "self", ".", "_k", ",", "len", "(", "PRIMITIVES", ")", ")", ",", "dtype", "=", "np", ".", "float64", ")", ")", "\n", "\n", "for", "key", ",", "index", "in", "self", ".", "edge2index", ".", "items", "(", ")", ":", "\n", "        ", "row", ",", "row_softmax", "=", "alpha", "[", "index", "]", ",", "alpha_softmax", "[", "index", "]", "\n", "row_flag", "=", "torch", ".", "nonzero", "(", "self", ".", "arch_flag", "[", "alpha_num", "]", "[", "index", "]", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "op_list", "=", "[", "key_list", "[", "idx", "]", "for", "idx", "in", "row_flag", "]", "\n", "for", "idx", ",", "op", "in", "enumerate", "(", "op_list", ")", ":", "\n", "          ", "df", ".", "loc", "[", "key", "]", "[", "op", "]", "=", "row", "[", "idx", "]", "\n", "df_s", ".", "loc", "[", "key", "]", "[", "op", "]", "=", "row_softmax", "[", "idx", "]", "\n", "\n", "", "", "df_m", "=", "df", ".", "astype", "(", "float", ")", ".", "idxmax", "(", "axis", "=", "1", ")", "\n", "df_alphas", ".", "append", "(", "df", ")", "\n", "if", "show_sum", ":", "df_s", "[", "'sum'", "]", "=", "df_s", ".", "sum", "(", "axis", "=", "1", ")", "\n", "df_softmax", ".", "append", "(", "df_s", ")", "\n", "df_max", ".", "append", "(", "df_m", ")", "\n", "", "return", "df_alphas", ",", "df_max", ",", "df_softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.discretize": [[307, 343], ["prog_model_search.Network.genotype", "enumerate", "enumerate", "prog_model_search.Network.update_alphas", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "print", "prog_model_search.Network.cells[].op_position[].items", "print", "prog_model_search.Network.cells[].op_position[].items", "prog_model_search.Network.arch_parameters", "print", "print", "int", "int", "len"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.genotype", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.arch_parameters"], ["", "def", "discretize", "(", "self", ",", "k", "=", "1.0", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "discrete_alphas", "=", "[", "torch", ".", "zeros_like", "(", "tmp", ")", "for", "tmp", "in", "self", ".", "arch_parameters", "(", ")", "]", "\n", "derived_genotype", "=", "self", ".", "genotype", "(", ")", "\n", "normal_cell", ",", "reduce_cell", "=", "derived_genotype", ".", "normal", ",", "derived_genotype", ".", "reduce", "\n", "\n", "# Normal cell", "\n", "if", "verbose", ":", "print", "(", "'Normal Cell'", ")", "\n", "node", "=", "0", "\n", "for", "idx", ",", "(", "op_name", ",", "node_num", ")", "in", "enumerate", "(", "normal_cell", ")", ":", "\n", "      ", "node_str", "=", "f'{self._nodes_dict[node_num]}->{node}'", "\n", "row_index", "=", "self", ".", "edge2index", "[", "node_str", "]", "\n", "for", "op_position", ",", "op", "in", "self", ".", "cells", "[", "0", "]", ".", "op_position", "[", "node_str", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "op", "==", "op_name", ":", "\n", "          ", "col_index", "=", "int", "(", "op_position", ")", "\n", "break", "\n", "", "", "discrete_alphas", "[", "0", "]", "[", "row_index", "]", "[", "col_index", "]", "=", "k", "\n", "if", "verbose", ":", "print", "(", "op_name", ",", "node_num", ",", "node_str", ",", "self", ".", "edge2index", "[", "node_str", "]", ",", "col_index", ")", "\n", "if", "(", "idx", "%", "2", ")", "and", "not", "(", "idx", "==", "0", ")", ":", "node", "+=", "1", "\n", "\n", "# Reduction cell", "\n", "", "if", "verbose", ":", "print", "(", "'\\nReduction Cell'", ")", "\n", "node", "=", "0", "\n", "for", "idx", ",", "(", "op_name", ",", "node_num", ")", "in", "enumerate", "(", "reduce_cell", ")", ":", "\n", "      ", "node_str", "=", "f'{self._nodes_dict[node_num]}->{node}'", "\n", "row_index", "=", "self", ".", "edge2index", "[", "node_str", "]", "\n", "for", "op_position", ",", "op", "in", "self", ".", "cells", "[", "len", "(", "self", ".", "cells", ")", "//", "3", "]", ".", "op_position", "[", "node_str", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "op", "==", "op_name", ":", "\n", "          ", "col_index", "=", "int", "(", "op_position", ")", "\n", "break", "\n", "", "", "discrete_alphas", "[", "1", "]", "[", "row_index", "]", "[", "col_index", "]", "=", "k", "\n", "if", "verbose", ":", "print", "(", "op_name", ",", "node_num", ",", "node_str", ",", "self", ".", "edge2index", "[", "node_str", "]", ",", "col_index", ")", "\n", "if", "(", "idx", "%", "2", ")", "and", "not", "(", "idx", "==", "0", ")", ":", "node", "+=", "1", "\n", "\n", "", "self", ".", "update_alphas", "(", "discrete_alphas", ")", "\n", "\n", "return", "discrete_alphas", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.MixedOp.__init__": [[13, 21], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_search.MixedOp._ops.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "stride", ")", ":", "\n", "    ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "PRIMITIVES", ":", "\n", "      ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "stride", ",", "False", ")", "\n", "if", "'pool'", "in", "primitive", ":", "\n", "        ", "op", "=", "nn", ".", "Sequential", "(", "op", ",", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "False", ")", ")", "\n", "", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.MixedOp.forward": [[22, 24], ["sum", "op", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "    ", "return", "sum", "(", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Cell.__init__": [[28, 47], ["torch.Module.__init__", "operations.ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "operations.FactorizedReduce", "operations.ReLUConvBN", "range", "model_search.MixedOp", "model_search.Cell._ops.append"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["  ", "def", "__init__", "(", "self", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "_bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "        ", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "C", ",", "stride", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Cell.forward": [[48, 60], ["model_search.Cell.preprocess0", "model_search.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "len", "states.append", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "weights", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "offset", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "s", "=", "sum", "(", "self", ".", "_ops", "[", "offset", "+", "j", "]", "(", "h", ",", "weights", "[", "offset", "+", "j", "]", ")", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ")", "\n", "offset", "+=", "len", "(", "states", ")", "\n", "states", ".", "append", "(", "s", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.__init__": [[64, 102], ["torch.Module.__init__", "sum", "len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "model_search.Network._initialize_alphas", "model_search.Network.prepare_dicts", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model_search.Cell", "range", "range"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network._initialize_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.prepare_dicts"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "device", ",", "steps", "=", "4", ",", "multiplier", "=", "4", ",", "stem_multiplier", "=", "3", ")", ":", "\n", "    ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "_layers", "=", "layers", "\n", "#self._criterion = criterion", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "_device", "=", "device", "\n", "\n", "self", ".", "_k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", "for", "n", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "self", ".", "_num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", "\n", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n", "self", ".", "_initialize_alphas", "(", ")", "\n", "self", ".", "prepare_dicts", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.copy_arch_parameters": [[106, 110], ["zip", "model_search.Network.arch_parameters", "x.data.copy_"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.arch_parameters"], ["", "def", "copy_arch_parameters", "(", "self", ",", "parameters", ")", ":", "\n", "    ", "for", "x", ",", "y", "in", "zip", "(", "self", ".", "arch_parameters", "(", ")", ",", "parameters", ")", ":", "\n", "#print(\"model arch shape: {}, pop arch shape: {}\".format(x.data.shape, y.data.shape))", "\n", "        ", "x", ".", "data", ".", "copy_", "(", "y", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.forward": [[117, 128], ["model_search.Network.stem", "enumerate", "model_search.Network.global_pooling", "model_search.Network.classifier", "model_search.Network.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "cell", "model_search.Network.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "cell", ".", "reduction", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "self", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "self", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", "\n", "", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "weights", ")", "\n", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network._loss": [[129, 132], ["model_search.Network.", "model_search.Network._criterion"], "methods", ["None"], ["", "def", "_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "    ", "logits", "=", "self", "(", "input", ")", "\n", "return", "self", ".", "_criterion", "(", "logits", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network._initialize_alphas": [[133, 142], ["sum", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "range", "range", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "_initialize_alphas", "(", "self", ")", ":", "\n", "    ", "k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", "for", "n", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "\n", "self", ".", "alphas_normal", "=", "Variable", "(", "1e-3", "*", "torch", ".", "rand", "(", "k", ",", "num_ops", ")", ".", "to", "(", "self", ".", "_device", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "alphas_reduce", "=", "Variable", "(", "1e-3", "*", "torch", ".", "rand", "(", "k", ",", "num_ops", ")", ".", "to", "(", "self", ".", "_device", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "_arch_parameters", "=", "[", "\n", "self", ".", "alphas_normal", ",", "\n", "self", ".", "alphas_reduce", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.arch_parameters": [[144, 146], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas": [[147, 151], ["a.cpu"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "    ", "'''Returns the list of architecture weights copied to cpu'''", "\n", "alphas", "=", "[", "a", ".", "cpu", "(", ")", "for", "a", "in", "self", ".", "_arch_parameters", "]", "\n", "return", "alphas", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas": [[152, 159], ["zip", "model_search.Network.arch_parameters", "alpha.data.copy_"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.arch_parameters"], ["", "def", "update_alphas", "(", "self", ",", "alphas", ")", ":", "\n", "    ", "'''Update the architecture weights\n       alphas = [normal_wts, reduction_wts]\n    '''", "\n", "#self.get_alphas()[0].data.copy_(alphas)", "\n", "for", "alpha", ",", "value", "in", "zip", "(", "self", ".", "arch_parameters", "(", ")", ",", "alphas", ")", ":", "\n", "      ", "alpha", ".", "data", ".", "copy_", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.check_alphas": [[160, 168], ["zip", "model_search.Network.arch_parameters", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "x.eq"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.arch_parameters"], ["", "", "def", "check_alphas", "(", "self", ",", "alphas", ")", ":", "\n", "    ", "'''Verify if the architecture parameter is equal to the given alphas'''", "\n", "#return np.all(self.get_alphas()[0] == alphas.get())", "\n", "for", "x", ",", "y", "in", "zip", "(", "self", ".", "arch_parameters", "(", ")", ",", "alphas", ")", ":", "\n", "#print(x, y, x.eq(y))", "\n", "      ", "if", "not", "torch", ".", "all", "(", "x", ".", "eq", "(", "y", ")", ")", ":", "\n", "        ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.random_alphas": [[169, 191], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "model_search.Network.update_alphas", "model_search.Network.update_alphas", "model_search.Network.check_alphas", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "discrete_tmp.append", "torch.functional.softmax.max", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.check_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "random_alphas", "(", "self", ",", "discrete", "=", "False", ",", "k", "=", "1.0", ")", ":", "\n", "    ", "'''Generate random values for the architecture parameters and update the architecture parametr of the model\n       discrete: Whether to  discretize the alphas during training\n       k = value for the operations in the discrete architecture parameter\n    '''", "\n", "alphas_normal", "=", "torch", ".", "rand", "(", "self", ".", "_k", ",", "self", ".", "_num_ops", ",", "device", "=", "self", ".", "_device", ")", "\n", "alphas_reduce", "=", "torch", ".", "rand", "(", "self", ".", "_k", ",", "self", ".", "_num_ops", ",", "device", "=", "self", ".", "_device", ")", "\n", "tmp", "=", "[", "alphas_normal", ",", "alphas_reduce", "]", "\n", "\n", "if", "discrete", ":", "\n", "      ", "discrete_tmp", "=", "[", "]", "\n", "for", "alpha", "in", "tmp", ":", "\n", "        ", "softmax_alpha", "=", "nn", ".", "functional", ".", "softmax", "(", "alpha", ",", "dim", "=", "-", "1", ")", "\n", "index", "=", "softmax_alpha", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "#alphas = torch.zeros_like(softmax_alphas).scatter_(-1, index, 1.0)", "\n", "discrete_tmp", ".", "append", "(", "torch", ".", "zeros_like", "(", "softmax_alpha", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "k", ")", ")", "\n", "", "self", ".", "update_alphas", "(", "discrete_tmp", ")", "\n", "return", "discrete_tmp", "\n", "", "else", ":", "\n", "      ", "self", ".", "update_alphas", "(", "tmp", ")", "\n", "assert", "self", ".", "check_alphas", "(", "tmp", ")", ",", "\"random architecture parameter failed to be copied\"", "\n", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.genotype": [[192, 222], ["model_search.Network.genotype._parse"], "methods", ["None"], ["", "", "def", "genotype", "(", "self", ")", ":", "\n", "\n", "    ", "def", "_parse", "(", "weights", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "n", "=", "2", "\n", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "        ", "end", "=", "start", "+", "n", "\n", "W", "=", "weights", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "edges", "=", "sorted", "(", "range", "(", "i", "+", "2", ")", ",", "key", "=", "lambda", "x", ":", "-", "max", "(", "W", "[", "x", "]", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "W", "[", "x", "]", ")", ")", "if", "k", "!=", "PRIMITIVES", ".", "index", "(", "'none'", ")", ")", ")", "[", ":", "2", "]", "\n", "for", "j", "in", "edges", ":", "\n", "          ", "k_best", "=", "None", "\n", "for", "k", "in", "range", "(", "len", "(", "W", "[", "j", "]", ")", ")", ":", "\n", "            ", "if", "k", "!=", "PRIMITIVES", ".", "index", "(", "'none'", ")", ":", "\n", "              ", "if", "k_best", "is", "None", "or", "W", "[", "j", "]", "[", "k", "]", ">", "W", "[", "j", "]", "[", "k_best", "]", ":", "\n", "                ", "k_best", "=", "k", "\n", "", "", "", "gene", ".", "append", "(", "(", "PRIMITIVES", "[", "k_best", "]", ",", "j", ")", ")", "\n", "", "start", "=", "end", "\n", "n", "+=", "1", "\n", "", "return", "gene", "\n", "\n", "", "gene_normal", "=", "_parse", "(", "F", ".", "softmax", "(", "self", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gene_reduce", "=", "_parse", "(", "F", ".", "softmax", "(", "self", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "concat", "=", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", "\n", "genotype", "=", "Genotype", "(", "\n", "normal", "=", "gene_normal", ",", "normal_concat", "=", "concat", ",", "\n", "reduce", "=", "gene_reduce", ",", "reduce_concat", "=", "concat", "\n", ")", "\n", "return", "genotype", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.prepare_dicts": [[223, 232], ["range", "len", "range", "enumerate", "model_search.Network._rows.append", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "prepare_dicts", "(", "self", ")", ":", "\n", "    ", "self", ".", "_nodes", "=", "[", "'c_{k-2}'", ",", "'c_{k-1}'", ",", "'0'", ",", "'1'", ",", "'2'", ",", "'3'", "]", "\n", "self", ".", "_nodes_dict", "=", "{", "key", ":", "i", "for", "key", ",", "i", "in", "enumerate", "(", "self", ".", "_nodes", ")", "}", "\n", "tmp", "=", "[", "]", "\n", "self", ".", "_rows", "=", "[", "]", "\n", "for", "node", "in", "range", "(", "2", ",", "len", "(", "self", ".", "_nodes", ")", ")", ":", "\n", "      ", "for", "prev_node", "in", "range", "(", "node", ")", ":", "\n", "        ", "self", ".", "_rows", ".", "append", "(", "'{}->{}'", ".", "format", "(", "self", ".", "_nodes_dict", "[", "prev_node", "]", ",", "node", "-", "2", ")", ")", "\n", "", "", "self", ".", "_rows_dict", "=", "{", "key", ":", "i", "for", "key", ",", "i", "in", "enumerate", "(", "self", ".", "_rows", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.show_alphas_dataframe": [[233, 241], ["model_search.Network.get_alphas", "pandas.DataFrame", "enumerate", "df_alphas.append", "row.numpy"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.get_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.numpy"], ["", "def", "show_alphas_dataframe", "(", "self", ")", ":", "\n", "    ", "df_alphas", "=", "[", "]", "\n", "for", "alpha", "in", "self", ".", "get_alphas", "(", ")", ":", "\n", "      ", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "PRIMITIVES", ",", "index", "=", "self", ".", "_rows", ")", "\n", "for", "index", ",", "row", "in", "enumerate", "(", "alpha", ")", ":", "\n", "        ", "df", ".", "loc", "[", "self", ".", "_rows_dict", "[", "index", "]", "]", "=", "row", ".", "numpy", "(", ")", "\n", "", "df_alphas", ".", "append", "(", "df", ")", "\n", "", "return", "df_alphas", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.get_datasets.get_dataloader": [[10, 51], ["ut._data_transforms_cifar10", "torchvision.CIFAR10", "config_utils.load_config", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "ut.data_transforms_cifar100", "torchvision.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "config_utils.dict2config", "config_utils.dict2config", "open", "json.load", "len", "len", "open", "json.load", "len", "len", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut._data_transforms_cifar10", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.data_transforms_cifar100", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.dict2config", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.config_utils.configure_utils.dict2config", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load"], ["def", "get_dataloader", "(", "args", ")", ":", "\n", "  ", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "    ", "train_transform", ",", "valid_transform", "=", "ut", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "#train_transform, valid_transform = ut.data_transforms_cifar10(args.cutout, args.cutout_length, args.autoaug)", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "cifar_split", "=", "load_config", "(", "f'{args.config_root}/cifar-split.txt'", ",", "None", ",", "None", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "50000", ",", "\"Something wrong with the dataset loading\"", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "pin_memory", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar_split", ".", "train", ")", "\n", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "args", ".", "valid_batch_size", ",", "\n", "pin_memory", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar_split", ".", "valid", ")", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "    ", "train_transform", ",", "valid_transform", "=", "ut", ".", "data_transforms_cifar100", "(", "args", ".", "cutout", ",", "args", ".", "cutout_length", ",", "args", ".", "autoaug", ")", "\n", "train_data", "=", "dset", ".", "CIFAR100", "(", "root", "=", "args", ".", "data_dir", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "50000", ",", "\"Something wrong with the dataset loading\"", "\n", "if", "args", ".", "split_option", "==", "1", ":", "\n", "      ", "with", "open", "(", "f'{args.config_root}/cifar100_80-split.txt'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "cifar100_split", "=", "json", ".", "load", "(", "f", ")", "\n", "", "cifar100_split", "=", "dict2config", "(", "cifar100_split", ",", "logger", "=", "None", ")", "\n", "assert", "len", "(", "cifar100_split", ".", "train", ")", "==", "40000", ",", "'Something wrong with the training data split'", "\n", "assert", "len", "(", "cifar100_split", ".", "valid", ")", "==", "10000", ",", "'Something wrong with the validation data split'", "\n", "", "else", ":", "\n", "      ", "with", "open", "(", "f'{args.config_root}/cifar100-split.txt'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "cifar100_split", "=", "json", ".", "load", "(", "f", ")", "\n", "", "cifar100_split", "=", "dict2config", "(", "cifar100_split", ",", "logger", "=", "None", ")", "\n", "assert", "len", "(", "cifar100_split", ".", "train", ")", "==", "25000", ",", "'Something wrong with the training data split'", "\n", "assert", "len", "(", "cifar100_split", ".", "valid", ")", "==", "25000", ",", "'Something wrong with the validation data split'", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "pin_memory", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar100_split", ".", "train", ")", "\n", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "args", ".", "valid_batch_size", ",", "\n", "pin_memory", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "cifar100_split", ".", "valid", ")", "\n", ")", "\n", "\n", "", "return", "train_transform", ",", "valid_transform", ",", "train_loader", ",", "valid_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AverageMeter.__init__": [[18, 20], ["ut.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AverageMeter.reset": [[21, 26], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0.0", "\n", "self", ".", "avg", "=", "0.0", "\n", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "count", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AverageMeter.update": [[27, 32], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AverageMeter.__repr__": [[33, 35], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(val={val}, avg={avg}, count={count})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.__init__": [[38, 40], ["ut.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset": [[41, 45], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update": [[46, 50], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.Cutout.__init__": [[83, 85], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "    ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.Cutout.__call__": [[86, 102], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.NAS_config.__init__": [[272, 278], ["open", "yaml.safe_load", "open.close", "yaml.safe_load.get"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.log_utils.logger.Logger.close", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.get"], ["def", "__init__", "(", "self", ",", "cfg_file", ",", "sectionName", ")", ":", "\n", "    ", "self", ".", "sectionName", "=", "sectionName", "\n", "infile", "=", "open", "(", "cfg_file", ",", "'r'", ")", "\n", "ymlcfg", "=", "yaml", ".", "safe_load", "(", "infile", ")", "\n", "infile", ".", "close", "(", ")", "\n", "self", ".", "NAS_cfg", "=", "ymlcfg", ".", "get", "(", "self", ".", "sectionName", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.accuracy": [[52, 66], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "#correct_k = correct[:k].view(-1).float().sum(0)", "\n", "    ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy": [[67, 81], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "obtain_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "    ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.data_transforms_cifar10": [[103, 126], ["torchvision.Compose", "transforms.Compose.transforms.append", "transforms.Compose.transforms.append", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.ToTensor", "torchvision.Normalize", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.AutoAugment", "ut.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "", "def", "data_transforms_cifar10", "(", "cutout", ",", "cutout_length", ",", "autoaug", ")", ":", "\n", "  ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", "\n", "]", ")", "\n", "\n", "if", "autoaug", ":", "\n", "    ", "train_transform", ".", "transforms", ".", "append", "(", "transforms", ".", "AutoAugment", "(", "policy", "=", "torchvision", ".", "transforms", ".", "autoaugment", ".", "AutoAugmentPolicy", ".", "CIFAR10", ")", ")", "\n", "\n", "", "train_transform", ".", "transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ",", ")", "\n", "train_transform", ".", "transforms", ".", "append", "(", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", ")", "\n", "\n", "if", "cutout", ":", "\n", "    ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.data_transforms_cifar100": [[127, 149], ["torchvision.Compose", "transforms.Compose.transforms.append", "transforms.Compose.transforms.append", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.ToTensor", "torchvision.Normalize", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.AutoAugment", "ut.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "data_transforms_cifar100", "(", "cutout", ",", "cutout_length", ",", "autoaug", ")", ":", "\n", "  ", "CIFAR_MEAN", "=", "[", "0.5071", ",", "0.4867", ",", "0.4408", "]", "\n", "CIFAR_STD", "=", "[", "0.2675", ",", "0.2565", ",", "0.2761", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "]", ")", "\n", "if", "autoaug", ":", "\n", "    ", "train_transform", ".", "transforms", ".", "append", "(", "transforms", ".", "AutoAugment", "(", "policy", "=", "torchvision", ".", "transforms", ".", "autoaugment", ".", "AutoAugmentPolicy", ".", "CIFAR10", ")", ")", "\n", "\n", "", "train_transform", ".", "transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ",", ")", "\n", "train_transform", ".", "transforms", ".", "append", "(", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", ")", "\n", "\n", "if", "cutout", ":", "\n", "    ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut._data_transforms_cifar10": [[150, 168], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "ut.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "_data_transforms_cifar10", "(", "args", ")", ":", "\n", "  ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "if", "args", ".", "cutout", ":", "\n", "    ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "args", ".", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut._data_transforms_cifar100": [[169, 187], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "ut.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["", "def", "_data_transforms_cifar100", "(", "args", ")", ":", "\n", "  ", "CIFAR_MEAN", "=", "[", "0.5071", ",", "0.4867", ",", "0.4408", "]", "\n", "CIFAR_STD", "=", "[", "0.2675", ",", "0.2565", ",", "0.2761", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "if", "args", ".", "cutout", ":", "\n", "    ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "args", ".", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.count_parameters_in_MB": [[187, 189], ["numpy.sum", "numpy.prod", "v.size", "model.named_parameters"], "function", ["None"], ["", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "  ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "name", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "\"auxiliary\"", "not", "in", "name", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save_checkpoint": [[191, 197], ["os.path.join", "torch.save", "torch.save", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save", ")", ":", "\n", "  ", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "    ", "best_filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save": [[198, 200], ["torch.save", "torch.save", "torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.state_dict"], ["", "", "def", "save", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load": [[201, 203], ["model.load_state_dict", "torch.load", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.load_state_dict", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load"], ["", "def", "load", "(", "model", ",", "model_path", ",", "gpu", "=", "0", ")", ":", "\n", "  ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "'cuda:{}'", ".", "format", "(", "gpu", ")", ")", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.drop_path": [[204, 211], ["torch.autograd.Variable", "x.div_", "x.mul_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "x.size"], "function", ["None"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "  ", "if", "drop_prob", ">", "0.", ":", "\n", "    ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.create_exp_dir": [[212, 222], ["print", "os.path.exists", "os.mkdir", "os.mkdir", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], ["", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "    ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", "\n", "for", "script", "in", "scripts_to_save", ":", "\n", "      ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.check_arch_flag": [[223, 234], ["range", "print", "len", "torch.all().item", "torch.all().item", "torch.all().item", "len", "len", "torch.all", "torch.all", "torch.all", "len"], "function", ["None"], ["", "", "", "def", "check_arch_flag", "(", "arch_flag", ",", "OSM", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "if", "verbose", ":", "print", "(", "f'number of cells: {len(OSM.cells)}'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "OSM", ".", "cells", ")", ")", ":", "\n", "    ", "if", "idx", "in", "[", "len", "(", "OSM", ".", "cells", ")", "//", "3", ",", "2", "*", "len", "(", "OSM", ".", "cells", ")", "//", "3", "]", ":", "\n", "# Reduction cell", "\n", "      ", "check_flag", "=", "arch_flag", "[", "1", "]", "\n", "", "else", ":", "\n", "# Normal cell", "\n", "      ", "check_flag", "=", "arch_flag", "[", "0", "]", "\n", "", "if", "not", "torch", ".", "all", "(", "check_flag", "==", "OSM", ".", "cells", "[", "idx", "]", ".", "arch_flag", ")", ".", "item", "(", ")", ":", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.get_cell_param_name": [[235, 248], ["smallOSM_name.split", "big_OSM.cells[].op_position[].items", "print", "int", "print", "int", "int"], "function", ["None"], ["", "def", "get_cell_param_name", "(", "smallOSM_name", ",", "big_OSM", ",", "small_OSM", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "if", "verbose", ":", "print", "(", "f'Before: {smallOSM_name}'", ")", "\n", "split_name", "=", "smallOSM_name", ".", "split", "(", "'.'", ")", "\n", "smallOSM_cell_number", ",", "smallOSM_edge_number", ",", "smallOSM_op_number", "=", "int", "(", "split_name", "[", "1", "]", ")", ",", "split_name", "[", "3", "]", ",", "split_name", "[", "5", "]", "\n", "smallOSM_edge_name", "=", "small_OSM", ".", "_rows_dict", "[", "int", "(", "smallOSM_edge_number", ")", "]", "\n", "smallOSM_op_name", "=", "small_OSM", ".", "cells", "[", "int", "(", "smallOSM_cell_number", ")", "]", ".", "op_position", "[", "smallOSM_edge_name", "]", "[", "smallOSM_op_number", "]", "\n", "for", "op_num", ",", "op", "in", "big_OSM", ".", "cells", "[", "smallOSM_cell_number", "]", ".", "op_position", "[", "smallOSM_edge_name", "]", ".", "items", "(", ")", ":", "\n", "    ", "if", "op", "==", "smallOSM_op_name", ":", "\n", "      ", "split_name", "[", "5", "]", "=", "op_num", "\n", "break", "\n", "", "", "res_name", "=", "'.'", ".", "join", "(", "split_name", ")", "\n", "if", "verbose", ":", "print", "(", "f'After: {res_name}'", ")", "\n", "return", "res_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.inherit_OSM_wts": [[249, 267], ["dict", "enumerate", "big_OSM.named_parameters", "small_OSM.named_parameters", "param2.data.copy_", "torch.all().item", "torch.all().item", "torch.all().item", "len", "print", "print", "ut.get_cell_param_name", "print", "dict", "torch.all", "torch.all", "torch.all", "small_OSM.named_parameters"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.get_cell_param_name"], ["", "def", "inherit_OSM_wts", "(", "big_OSM", ",", "small_OSM", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "big_model_dict", "=", "dict", "(", "big_OSM", ".", "named_parameters", "(", ")", ")", "\n", "count", "=", "0", "\n", "for", "idx", ",", "(", "param_name2", ",", "param2", ")", "in", "enumerate", "(", "small_OSM", ".", "named_parameters", "(", ")", ")", ":", "\n", "    ", "if", "verbose", ":", "print", "(", "f'{param_name2}: {param2.shape}'", ",", "end", "=", "''", ")", "\n", "if", "(", "'cell'", "in", "param_name2", ")", "and", "not", "(", "'preprocess'", "in", "param_name2", ")", ":", "\n", "      ", "inherit_name", "=", "get_cell_param_name", "(", "smallOSM_name", "=", "param_name2", ",", "big_OSM", "=", "big_OSM", ",", "\n", "small_OSM", "=", "small_OSM", ",", "verbose", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "inherit_name", "=", "param_name2", "\n", "", "param1", "=", "big_model_dict", "[", "inherit_name", "]", "\n", "assert", "param1", ".", "shape", "==", "param2", ".", "shape", ",", "\"Mismatched shape\"", "\n", "param2", ".", "data", ".", "copy_", "(", "param1", ")", "\n", "assert", "torch", ".", "all", "(", "param1", "==", "param2", ")", ".", "item", "(", ")", ",", "\"Copy failed\"", "\n", "if", "verbose", ":", "print", "(", "f'->{inherit_name}: {param1.shape}: {param1.shape == param2.shape}'", ",", "end", "=", "'\\n'", ")", "\n", "if", "param1", ".", "shape", "==", "param2", ".", "shape", ":", "count", "+=", "1", "\n", "", "assert", "count", "==", "len", "(", "dict", "(", "small_OSM", ".", "named_parameters", "(", ")", ")", ")", ",", "\"Number of parameters copied failed\"", "\n", "if", "verbose", ":", "print", "(", "f'count: {count}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.compare_s1genotype": [[279, 285], ["enumerate", "int", "int"], "function", ["None"], ["", "", "def", "compare_s1genotype", "(", "g1", ",", "g2", ")", ":", "\n", "  ", "for", "index", ",", "node1", "in", "enumerate", "(", "g1", ")", ":", "\n", "    ", "tmp_list", "=", "g2", "[", "int", "(", "index", "/", "2", ")", "*", "2", ":", "(", "int", "(", "index", "/", "2", ")", "+", "1", ")", "*", "2", "]", "\n", "if", "node1", "not", "in", "tmp_list", ":", "\n", "      ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.search_dataframe": [[286, 293], ["df.iterrows", "ut.compare_s1genotype", "ut.compare_s1genotype"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.compare_s1genotype", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.compare_s1genotype"], ["", "def", "search_dataframe", "(", "df", ",", "g", ")", ":", "\n", "  ", "if", "(", "not", "df", ".", "empty", ")", ":", "\n", "    ", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "      ", "if", "compare_s1genotype", "(", "row", "[", "'genotype'", "]", ".", "normal", ",", "g", ".", "normal", ")", ":", "\n", "        ", "if", "compare_s1genotype", "(", "row", "[", "'genotype'", "]", ".", "reduce", ",", "g", ".", "reduce", ")", ":", "\n", "          ", "return", "row", "\n", "", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.converged": [[294, 299], ["ut.compare_s1genotype"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.compare_s1genotype"], ["", "def", "converged", "(", "genotype_list", ")", ":", "\n", "  ", "g1", "=", "genotype_list", "[", "0", "]", "\n", "for", "g2", "in", "genotype_list", ":", "\n", "    ", "if", "not", "compare_s1genotype", "(", "g1", ",", "g2", ")", ":", "return", "False", "\n", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model.Cell.__init__": [[11, 29], ["torch.Module.__init__", "operations.ReLUConvBN", "model.Cell._compile", "print", "operations.FactorizedReduce", "operations.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model.Cell._compile"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "flag", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "flag", ":", "\n", "      ", "print", "(", "C_prev_prev", ",", "C_prev", ",", "C", ")", "\n", "\n", "", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "if", "reduction", ":", "\n", "      ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "      ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model.Cell._compile": [[30, 42], ["len", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "    ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "      ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model.Cell.forward": [[43, 63], ["model.Cell.preprocess0", "model.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op1", "op2", "isinstance", "ut.drop_path", "isinstance", "ut.drop_path"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.drop_path", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "        ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "          ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "          ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model.AuxiliaryHeadCIFAR.__init__": [[67, 81], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model.AuxiliaryHeadCIFAR.forward": [[82, 86], ["model.AuxiliaryHeadCIFAR.features", "model.AuxiliaryHeadCIFAR.classifier", "model.AuxiliaryHeadCIFAR.view", "model.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model.AuxiliaryHeadImageNet.__init__": [[90, 106], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model.AuxiliaryHeadImageNet.forward": [[107, 111], ["model.AuxiliaryHeadImageNet.features", "model.AuxiliaryHeadImageNet.classifier", "model.AuxiliaryHeadImageNet.view", "model.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model.NetworkCIFAR.__init__": [[115, 147], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.Cell", "model.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ",", "flag", "=", "True", ")", ":", "\n", "    ", "super", "(", "NetworkCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "stem_multiplier", "=", "3", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "flag", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "        ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "      ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model.NetworkCIFAR.forward": [[148, 159], ["model.NetworkCIFAR.stem", "enumerate", "model.NetworkCIFAR.global_pooling", "model.NetworkCIFAR.classifier", "model.NetworkCIFAR.view", "cell", "model.NetworkCIFAR.size", "model.NetworkCIFAR.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "        ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "          ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model.NetworkImageNet.__init__": [[163, 203], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.Cell", "model.AuxiliaryHeadImageNet"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ",", "flag", "=", "True", ")", ":", "\n", "    ", "super", "(", "NetworkImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "flag", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "        ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "      ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model.NetworkImageNet.forward": [[204, 216], ["model.NetworkImageNet.stem0", "model.NetworkImageNet.stem1", "enumerate", "model.NetworkImageNet.global_pooling", "model.NetworkImageNet.classifier", "model.NetworkImageNet.view", "cell", "model.NetworkImageNet.size", "model.NetworkImageNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "        ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "          ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.test_cifar10.main": [[55, 103], ["numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "print", "logging.info", "print", "model.NetworkCIFAR", "ut.load", "model.cuda.cuda", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "ut._data_transforms_cifar10", "torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "test_cifar10.infer", "logging.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "eval", "logging.info", "ut.count_parameters_in_MB", "open", "pickle.load", "open", "pickle.load", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut._data_transforms_cifar10", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.infer", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.count_parameters_in_MB", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load"], ["def", "main", "(", ")", ":", "\n", "  ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "print", "(", "'---------Genotype---------'", ")", "\n", "if", "args", ".", "arch", "is", "not", "None", ":", "\n", "    ", "genotype", "=", "eval", "(", "\"genotypes.%s\"", "%", "args", ".", "arch", ")", "\n", "", "if", "args", ".", "dir", "is", "not", "None", ":", "\n", "    ", "if", "'pickle'", "in", "args", ".", "dir", ":", "\n", "      ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "genotype", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "      ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir", ",", "\"genotype.pickle\"", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "genotype", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "logging", ".", "info", "(", "\"Unpickling genotype.pickle\"", ")", "\n", "", "logging", ".", "info", "(", "genotype", ")", "\n", "print", "(", "'--------------------------'", ")", "\n", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CIFAR_CLASSES", ",", "args", ".", "layers", ",", "args", ".", "auxiliary", ",", "genotype", ")", "\n", "ut", ".", "load", "(", "model", ",", "args", ".", "model_path", ",", "args", ".", "gpu", ")", "\n", "#model.load_state_dict(torch.load(args.model_path)['state_dict'], strict = False)", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "ut", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "\n", "_", ",", "test_transform", "=", "ut", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "test_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_transform", ")", "\n", "\n", "test_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "model", ".", "drop_path_prob", "=", "0.0", "\n", "#model.drop_path_prob = args.drop_path_prob", "\n", "test_acc", ",", "test_obj", "=", "infer", "(", "test_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'test_acc %f'", ",", "test_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.test_cifar10.infer": [[105, 129], ["ut.AvgrageMeter", "ut.AvgrageMeter", "ut.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model", "criterion", "ut.accuracy", "Variable().cuda.size", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "criterion.data.item", "prec1.data.item", "prec5.data.item", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "def", "infer", "(", "test_queue", ",", "model", ",", "criterion", ")", ":", "\n", "  ", "objs", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "test_queue", ")", ":", "\n", "      ", "input", "=", "Variable", "(", "input", ",", "volatile", "=", "True", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ",", "volatile", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "logits", ",", "_", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "ut", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "        ", "logging", ".", "info", "(", "'test %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.visualize.plot_cell_from_alphas": [[7, 59], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "ut.derive_architecture", "range", "range", "graphviz.Digraph.node", "range", "graphviz.Digraph.render", "alphas.size", "graphviz.Digraph.node", "str", "range", "graphviz.Digraph.edge", "dict", "dict", "str", "ops_nodes.append", "graphviz.Digraph.edge", "str", "str"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.node", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.node", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.derive_architecture", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.node", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.node", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["def", "plot_cell_from_alphas", "(", "alphas", ",", "filename", ")", ":", "\n", "  ", "g", "=", "Digraph", "(", "\n", "format", "=", "'png'", ",", "\n", "edge_attr", "=", "dict", "(", "fontsize", "=", "'20'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "shape", "=", "'rect'", ",", "align", "=", "'center'", ",", "fontsize", "=", "'20'", ",", "height", "=", "'0.5'", ",", "width", "=", "'0.5'", ",", "penwidth", "=", "'2'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "g", ".", "node", "(", "\"c_{k-2}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"c_{k-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "\n", "#print(\"Plotting cell from alpha\")", "\n", "genotype", "=", "genotypes", ".", "PRIMITIVES", "\n", "num", "=", "alphas", ".", "size", "(", ")", "[", "0", "]", "\n", "ops", "=", "ut", ".", "derive_architecture", "(", "alphas", ")", "\n", "#print(\"\\nops: {}\\n\\n\".format(ops))", "\n", "\n", "i", "=", "1", "\n", "while", "i", "<=", "num", ":", "\n", "    ", "tmp", "=", "(", "(", "i", "+", "1", ")", "*", "(", "i", "+", "2", ")", ")", "/", "2", "\n", "#print(\"tmp\", tmp)", "\n", "if", "(", "(", "tmp", "-", "1", ")", "==", "num", ")", ":", "\n", "      ", "steps", "=", "i", "\n", "#print(\"steps: {}\".format(steps))", "\n", "break", "\n", "", "i", "+=", "1", "\n", "\n", "", "nodes", "=", "{", "}", "\n", "nodes", "[", "0", "]", "=", "'c_{k-2}'", "\n", "nodes", "[", "1", "]", "=", "'c_{k-1}'", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "# For creating nodes including c_k-1 and c_k-1 for previous 2 nodes", "\n", "    ", "g", ".", "node", "(", "str", "(", "i", ")", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "nodes", "[", "i", "+", "2", "]", "=", "str", "(", "i", ")", "\n", "\n", "#print(\"nodes: \", nodes)", "\n", "", "offset", "=", "0", "\n", "ops_nodes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "#if ops[offset + j][0] == 'none':", "\n", "#  continue", "\n", "      ", "ops_nodes", ".", "append", "(", "(", "ops", "[", "offset", "+", "j", "]", ",", "j", ")", ")", "\n", "#print(\"j: {}, i+ 2: {}, node1: {}, node2: {}\".format(j, i + 2, nodes[j], nodes[i + 2]))", "\n", "g", ".", "edge", "(", "nodes", "[", "j", "]", ",", "nodes", "[", "i", "+", "2", "]", ",", "label", "=", "ops", "[", "offset", "+", "j", "]", "[", "0", "]", "+", "\" : \"", "+", "str", "(", "ops", "[", "offset", "+", "j", "]", "[", "1", "]", ".", "data", ")", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "", "offset", "+=", "j", "+", "1", "\n", "#print(\"ops with nodes: \", ops_nodes)", "\n", "\n", "", "g", ".", "node", "(", "\"c_{k}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "g", ".", "edge", "(", "str", "(", "i", ")", ",", "\"c_{k}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "g", ".", "render", "(", "filename", ",", "view", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.visualize.plot": [[60, 96], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "range", "range", "graphviz.Digraph.node", "range", "graphviz.Digraph.render", "len", "graphviz.Digraph.node", "graphviz.Digraph.edge", "dict", "dict", "len", "str", "str", "graphviz.Digraph.edge", "str", "str"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.node", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.node", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.node", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.genotypes.Structure.node"], ["", "def", "plot", "(", "genotype", ",", "filename", ",", "view", "=", "True", ")", ":", "\n", "  ", "g", "=", "Digraph", "(", "\n", "format", "=", "'png'", ",", "\n", "edge_attr", "=", "dict", "(", "fontsize", "=", "'20'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "shape", "=", "'rect'", ",", "align", "=", "'center'", ",", "fontsize", "=", "'20'", ",", "height", "=", "'0.5'", ",", "width", "=", "'0.5'", ",", "penwidth", "=", "'2'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "\n", "g", ".", "node", "(", "\"c_{k-2}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"c_{k-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "assert", "len", "(", "genotype", ")", "%", "2", "==", "0", "\n", "steps", "=", "len", "(", "genotype", ")", "//", "2", "\n", "#print(\"len(genotype): {}, genotype = {}\".format(len(genotype), genotype))", "\n", "#print(\"steps: {}\".format(steps))", "\n", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "# For creating nodes including c_k-1 and c_k-1 for previous 2 nodes", "\n", "    ", "g", ".", "node", "(", "str", "(", "i", ")", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "for", "k", "in", "[", "2", "*", "i", ",", "2", "*", "i", "+", "1", "]", ":", "\n", "      ", "op", ",", "j", "=", "genotype", "[", "k", "]", "\n", "if", "j", "==", "0", ":", "\n", "        ", "u", "=", "\"c_{k-2}\"", "\n", "", "elif", "j", "==", "1", ":", "\n", "        ", "u", "=", "\"c_{k-1}\"", "\n", "", "else", ":", "\n", "        ", "u", "=", "str", "(", "j", "-", "2", ")", "\n", "", "v", "=", "str", "(", "i", ")", "\n", "g", ".", "edge", "(", "u", ",", "v", ",", "label", "=", "op", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "", "g", ".", "node", "(", "\"c_{k}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "g", ".", "edge", "(", "str", "(", "i", ")", ",", "\"c_{k}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "g", ".", "render", "(", "filename", ",", "view", "=", "view", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus.__init__": [[4, 17], ["population.get_population_size", "consensus.consensus.population.print_population_fitness", "consensus.consensus.edge2index.items"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.print_population_fitness"], ["  ", "def", "__init__", "(", "self", ",", "arch_flag", ",", "population", ",", "edge2index", ",", "op_dict", ",", "op_position", ",", "topk", ",", "weighted", "=", "False", ")", ":", "\n", "    ", "self", ".", "arch_flag", "=", "arch_flag", "\n", "self", ".", "population", "=", "population", "\n", "self", ".", "pop_size", "=", "population", ".", "get_population_size", "(", ")", "\n", "self", ".", "population", ".", "print_population_fitness", "(", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "op_dict", "=", "op_dict", "\n", "self", ".", "op_position", "=", "op_position", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "weighted", "=", "weighted", "\n", "self", ".", "vote_dict", "=", "{", "}", "\n", "\n", "self", ".", "edge2index2", "=", "{", "value", ":", "key", "for", "key", ",", "value", "in", "self", ".", "edge2index", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus.vote": [[19, 50], ["zip", "arch_param.cpu", "torch.topk", "arch_values.append", "indices.append", "enumerate", "print", "individual.get_arch_parameters", "ops.sort", "consensus.consensus.vote_list.append", "ops.append", "print", "vote_dict.keys", "vote_dict[].keys", "str", "col.item"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_arch_parameters", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["    ", "arch_param", "=", "individual", ".", "get_arch_parameters", "(", ")", "[", "0", "]", ".", "cpu", "(", ")", "\n", "arch_values", ",", "indices", "=", "torch", ".", "topk", "(", "arch_param", ",", "self", ".", "topk", ")", "\n", "if", "verbose", ":", "print", "(", "indices", ")", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "indices", ")", ":", "\n", "      ", "edge", "=", "self", ".", "edge2index2", "[", "idx", "]", "\n", "ops", "=", "[", "]", "\n", "for", "col", "in", "row", ":", "ops", ".", "append", "(", "self", ".", "op_position", "[", "edge", "]", "[", "str", "(", "col", ".", "item", "(", ")", ")", "]", ")", "\n", "ops", ".", "sort", "(", ")", "\n", "op_str", "=", "','", ".", "join", "(", "ops", ")", "\n", "if", "verbose", ":", "print", "(", "','", ".", "join", "(", "ops", ")", ")", "\n", "if", "idx", "in", "self", ".", "vote_dict", ".", "keys", "(", ")", ":", "\n", "        ", "if", "op_str", "in", "self", ".", "vote_dict", "[", "idx", "]", ".", "keys", "(", ")", ":", "\n", "          ", "if", "self", ".", "weighted", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "+=", "-", "(", "ind_id", "/", "self", ".", "pop_size", ")", "\n", "else", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "+=", "1", "\n", "", "else", ":", "\n", "          ", "if", "self", ".", "weighted", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "=", "-", "(", "ind_id", "/", "self", ".", "pop_size", ")", "\n", "else", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "=", "1", "\n", "", "", "else", ":", "\n", "        ", "if", "self", ".", "weighted", ":", "self", ".", "vote_dict", "[", "idx", "]", "=", "{", "op_str", ":", "-", "(", "ind_id", "/", "self", ".", "pop_size", ")", "}", "\n", "else", ":", "self", ".", "vote_dict", "[", "idx", "]", "=", "{", "op_str", ":", "1", "}", "\n", "", "", "if", "verbose", ":", "print", "(", "self", ".", "vote_dict", ")", "\n", "\n", "", "def", "sort_vote_dict", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "sorted_vote_dict", "=", "{", "}", "\n", "for", "edge", ",", "ops_dict", "in", "self", ".", "vote_dict", ".", "items", "(", ")", ":", "\n", "      ", "sorted_vote_dict", "[", "edge", "]", "=", "dict", "(", "sorted", "(", "ops_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", ")", "\n", "", "if", "verbose", ":", "print", "(", "sorted_vote_dict", ")", "\n", "return", "sorted_vote_dict", "\n", "\n", "", "def", "top_votes", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "top_votes", "=", "{", "}", "\n", "for", "edge", ",", "ops_dict", "in", "self", ".", "vote_dict", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus.top_votes": [[51, 63], ["vote_dict.items", "top_votes.append", "print", "float", "ops_dict.items"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["      ", "score", "=", "float", "(", "'-inf'", ")", "\n", "for", "ops", ",", "value", "in", "ops_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "value", ">", "score", ":", "ops_str", ",", "score", "=", "ops", ",", "value", "\n", "", "top_votes", "[", "edge", "]", "=", "(", "ops_str", ",", "score", ")", "\n", "if", "verbose", ":", "print", "(", "f'{top_votes[edge]}: {score}'", ")", "\n", "", "return", "top_votes", "\n", "\n", "", "def", "shrink", "(", "self", ")", ":", "\n", "    ", "for", "pop_id", ",", "individual", "in", "enumerate", "(", "self", ".", "population", ".", "get_population", "(", ")", ")", ":", "self", ".", "vote", "(", "individual", ",", "pop_id", "+", "1", ")", "\n", "#sorted_vote_dict = self.sort_vote_dict()", "\n", "top_votes_dict", "=", "self", ".", "top_votes", "(", ")", "\n", "print", "(", "top_votes_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus.shrink": [[64, 78], ["enumerate", "consensus.consensus.top_votes", "enumerate", "consensus.consensus.population.get_population", "consensus.consensus.vote", "torch.zeros_like", "len", "len", "top_votes_dict.keys", "[].split"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.top_votes", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.vote"], ["# Shrinking the search space", "\n", "new_arch_flag", "=", "torch", ".", "zeros_like", "(", "self", ".", "arch_flag", ")", "\n", "for", "edge", "in", "top_votes_dict", ".", "keys", "(", ")", ":", "\n", "      ", "for", "op", "in", "top_votes_dict", "[", "edge", "]", "[", "0", "]", ".", "split", "(", "','", ")", ":", "\n", "        ", "new_arch_flag", "[", "edge", "]", "[", "self", ".", "op_dict", "[", "op", "]", "]", "=", "True", "\n", "", "", "return", "new_arch_flag", "\n", "\n", "", "def", "shrink_by_one_ind", "(", "self", ",", "individual", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "if", "verbose", ":", "print", "(", "individual", ".", "arch_parameters", ")", "\n", "self", ".", "vote", "(", "individual", ",", "1", ")", "\n", "top_votes_dict", "=", "self", ".", "top_votes", "(", ")", "\n", "if", "verbose", ":", "print", "(", "top_votes_dict", ")", "\n", "\n", "# Shrinking the search space", "\n", "new_arch_flag", "=", "torch", ".", "zeros_like", "(", "self", ".", "arch_flag", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus.shrink_by_one_ind": [[79, 94], ["consensus.consensus.vote", "consensus.consensus.top_votes", "enumerate", "print", "print", "torch.zeros_like", "len", "len", "top_votes_dict.keys", "[].split"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.vote", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.top_votes"], ["for", "edge", "in", "top_votes_dict", ".", "keys", "(", ")", ":", "\n", "      ", "for", "op", "in", "top_votes_dict", "[", "edge", "]", "[", "0", "]", ".", "split", "(", "','", ")", ":", "\n", "        ", "new_arch_flag", "[", "edge", "]", "[", "self", ".", "op_dict", "[", "op", "]", "]", "=", "True", "\n", "", "", "return", "new_arch_flag", "\n", "\n", "", "", "class", "consensus3", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "arch_flag", ",", "population", ",", "edge2index", ",", "op_dict", ",", "op_position", ",", "topk", ",", "weighted", "=", "False", ")", ":", "\n", "    ", "self", ".", "arch_flag", "=", "arch_flag", "\n", "self", ".", "population", "=", "population", "\n", "self", ".", "pop_size", "=", "population", ".", "get_population_size", "(", ")", "\n", "self", ".", "population", ".", "print_population_fitness", "(", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "op_dict", "=", "op_dict", "\n", "self", ".", "op_position", "=", "op_position", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "weighted", "=", "weighted", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.__init__": [[96, 109], ["population.get_population_size", "consensus.consensus2.population.print_population_fitness", "consensus.consensus2.edge2index.items"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population_size", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.print_population_fitness"], ["self", ".", "vote_value_dict", "=", "{", "}", "\n", "\n", "self", ".", "edge2index2", "=", "{", "value", ":", "key", "for", "key", ",", "value", "in", "self", ".", "edge2index", ".", "items", "(", ")", "}", "\n", "\n", "", "def", "get_vote_value", "(", "self", ",", "arch_str", ",", "ind_id", ")", ":", "\n", "    ", "if", "arch_str", "in", "self", ".", "vote_value_dict", ":", "\n", "      ", "vote_value", "=", "self", ".", "vote_value_dict", "[", "arch_str", "]", "\n", "", "else", ":", "\n", "      ", "vote_value", "=", "-", "(", "ind_id", "/", "self", ".", "pop_size", ")", "\n", "self", ".", "vote_value_dict", "[", "arch_str", "]", "=", "vote_value", "\n", "", "return", "vote_value", "\n", "\n", "", "def", "vote", "(", "self", ",", "individual", ",", "ind_id", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "arch_param", "=", "individual", ".", "get_arch_parameters", "(", ")", "[", "0", "]", ".", "cpu", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.vote": [[111, 141], ["zip", "arch_param.cpu", "len", "torch.topk", "arch_values.append", "indices.append", "enumerate", "print", "individual.get_arch_parameters", "consensus.consensus2.vote_list.append", "ops.append", "vote_dict.keys", "vote_dict[].keys", "str", "col.item"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.get_arch_parameters", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["arch_values", ",", "indices", "=", "torch", ".", "topk", "(", "arch_param", ",", "self", ".", "topk", ")", "\n", "if", "verbose", ":", "print", "(", "indices", ")", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "indices", ")", ":", "\n", "      ", "edge", "=", "self", ".", "edge2index2", "[", "idx", "]", "\n", "ops", "=", "[", "]", "\n", "for", "col", "in", "row", ":", "\n", "        ", "ops", ".", "append", "(", "self", ".", "op_position", "[", "edge", "]", "[", "str", "(", "col", ".", "item", "(", ")", ")", "]", ")", "\n", "", "ops", ".", "sort", "(", ")", "\n", "op_str", "=", "','", ".", "join", "(", "ops", ")", "\n", "if", "verbose", ":", "print", "(", "','", ".", "join", "(", "ops", ")", ")", "\n", "if", "idx", "in", "self", ".", "vote_dict", ".", "keys", "(", ")", ":", "\n", "        ", "if", "op_str", "in", "self", ".", "vote_dict", "[", "idx", "]", ".", "keys", "(", ")", ":", "\n", "          ", "if", "self", ".", "weighted", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "+=", "self", ".", "get_vote_value", "(", "arch_str", "=", "arch_str", ",", "ind_id", "=", "ind_id", ")", "\n", "else", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "+=", "1", "\n", "", "else", ":", "\n", "          ", "if", "self", ".", "weighted", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "=", "self", ".", "get_vote_value", "(", "arch_str", "=", "arch_str", ",", "ind_id", "=", "ind_id", ")", "\n", "else", ":", "self", ".", "vote_dict", "[", "idx", "]", "[", "op_str", "]", "=", "1", "\n", "", "", "else", ":", "\n", "        ", "if", "self", ".", "weighted", ":", "self", ".", "vote_dict", "[", "idx", "]", "=", "{", "op_str", ":", "self", ".", "get_vote_value", "(", "arch_str", "=", "arch_str", ",", "ind_id", "=", "ind_id", ")", "}", "\n", "else", ":", "self", ".", "vote_dict", "[", "idx", "]", "=", "{", "op_str", ":", "1", "}", "\n", "", "", "if", "verbose", ":", "print", "(", "self", ".", "vote_dict", ")", "\n", "\n", "", "def", "sort_vote_dict", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "sorted_vote_dict", "=", "{", "}", "\n", "for", "edge", ",", "ops_dict", "in", "self", ".", "vote_dict", ".", "items", "(", ")", ":", "\n", "      ", "sorted_vote_dict", "[", "edge", "]", "=", "dict", "(", "sorted", "(", "ops_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", ")", "\n", "", "if", "verbose", ":", "print", "(", "sorted_vote_dict", ")", "\n", "return", "sorted_vote_dict", "\n", "\n", "", "def", "top_votes", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "top_votes", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.top_votes": [[142, 161], ["vote_dict.items", "top_votes.append", "print", "max", "ops_tmp.append", "score_tmp.append", "ops_dict.pop", "str"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append"], ["for", "edge", ",", "ops_dict", "in", "self", ".", "vote_dict", ".", "items", "(", ")", ":", "\n", "      ", "score", "=", "float", "(", "'-inf'", ")", "\n", "for", "ops", ",", "value", "in", "ops_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "value", ">", "score", ":", "ops_str", ",", "score", "=", "ops", ",", "value", "\n", "", "top_votes", "[", "edge", "]", "=", "(", "ops_str", ",", "score", ")", "\n", "if", "verbose", ":", "print", "(", "f'{top_votes[edge]}: {score}'", ")", "\n", "", "return", "top_votes", "\n", "\n", "", "def", "shrink", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "for", "pop_id", ",", "individual", "in", "enumerate", "(", "self", ".", "population", ".", "get_population", "(", ")", ")", ":", "\n", "      ", "self", ".", "vote", "(", "individual", ",", "pop_id", "+", "1", ")", "\n", "", "top_votes_dict", "=", "self", ".", "top_votes", "(", "verbose", "=", "verbose", ")", "\n", "if", "verbose", ":", "print", "(", "top_votes_dict", ")", "\n", "\n", "# Shrinking the search space", "\n", "new_arch_flag", "=", "torch", ".", "zeros_like", "(", "self", ".", "arch_flag", ")", "\n", "for", "edge", "in", "top_votes_dict", ".", "keys", "(", ")", ":", "\n", "      ", "for", "op", "in", "top_votes_dict", "[", "edge", "]", "[", "0", "]", ".", "split", "(", "','", ")", ":", "\n", "        ", "new_arch_flag", "[", "edge", "]", "[", "self", ".", "op_dict", "[", "op", "]", "]", "=", "True", "\n", "", "", "return", "new_arch_flag", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.shrink": [[162, 176], ["enumerate", "consensus.consensus2.top_votes", "enumerate", "consensus.consensus2.population.get_population", "consensus.consensus2.vote", "torch.zeros_like", "len", "len", "top_votes_dict.keys", "[].split"], "methods", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.top_votes", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.consensus.consensus2.vote"], ["", "", ""]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.test_imagenet.main": [[42, 87], ["logging.info", "print", "logging.info", "print", "model.NetworkImageNet", "torch.DataParallel", "model.cuda.cuda", "model.cuda.load_state_dict", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "test_imagenet.infer", "logging.info", "logging.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "eval", "logging.info", "ut.count_parameters_in_MB", "torchvision.Compose", "open", "pickle.load", "torch.load", "torch.load", "torch.load", "torch.load", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.procedures.optimizers._LRScheduler.load_state_dict", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.infer", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.count_parameters_in_MB", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load"], ["def", "main", "(", ")", ":", "\n", "  ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "cudnn", ".", "enabled", "=", "True", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "print", "(", "'---------Genotype---------'", ")", "\n", "if", "args", ".", "arch", "is", "not", "None", ":", "\n", "    ", "genotype", "=", "eval", "(", "\"genotypes.%s\"", "%", "args", ".", "arch", ")", "\n", "\n", "", "if", "args", ".", "genotype", "is", "not", "None", ":", "\n", "    ", "with", "open", "(", "args", ".", "genotype", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "genotype", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "logging", ".", "info", "(", "\"Unpickling genotype.pickle\"", ")", "\n", "", "logging", ".", "info", "(", "genotype", ")", "\n", "print", "(", "'--------------------------'", ")", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CLASSES", ",", "args", ".", "layers", ",", "args", ".", "auxiliary", ",", "genotype", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "model_path", ")", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "ut", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "\n", "validdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "valid_data", "=", "dset", ".", "ImageFolder", "(", "\n", "validdir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "model", ".", "module", ".", "drop_path_prob", "=", "0.0", "\n", "valid_acc_top1", ",", "valid_acc_top5", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'Valid_acc_top1 %f'", ",", "valid_acc_top1", ")", "\n", "logging", ".", "info", "(", "'Valid_acc_top5 %f'", ",", "valid_acc_top5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.test_imagenet.infer": [[89, 112], ["ut.AvgrageMeter", "ut.AvgrageMeter", "ut.AvgrageMeter", "model.eval", "enumerate", "input.cuda.cuda", "target.cuda.cuda", "ut.accuracy", "input.cuda.size", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "criterion", "criterion.data.item", "prec1.data.item", "prec5.data.item", "logging.info"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "  ", "objs", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "    ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "logits", ",", "_", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "", "prec1", ",", "prec5", "=", "ut", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ".", "item", "(", ")", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "      ", "logging", ".", "info", "(", "'Valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.arch_search.train": [[53, 83], ["model.train", "enumerate", "logging.info", "ut.AverageMeter", "ut.AverageMeter", "ut.AverageMeter", "model.random_alphas", "inputs.to.size", "inputs.to.to", "targets.to.to", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "ut.obtain_accuracy", "losses.update", "top1.update", "top5.update", "model.parameters", "criterion.item", "inputs.to.size", "prec1.item", "inputs.to.size", "prec5.item", "inputs.to.size", "logging.info", "logging.info"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.random_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["parser", ".", "add_argument", "(", "'--init_channels'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'num of init channels'", ")", "\n", "\n", "# Added for NAS201", "\n", "#parser.add_argument('--channel', type = int, default = 16, help = 'initial channel for NAS201 network')", "\n", "parser", ".", "add_argument", "(", "'--num_cells'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of cells for NAS201 network'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_nodes'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'maximim nodes in the cell for NAS201 network'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'cifar10'", ",", "help", "=", "'[\"cifar10\", \"cifar100\", \"ImageNet16-120\"]'", ")", "\n", "parser", ".", "add_argument", "(", "'--api_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'[\"cifar10\", \"cifar10-valid\",\"cifar100\", \"imagenet16-120\"]'", ")", "\n", "parser", ".", "add_argument", "(", "'--trainval'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of data loading workers (default: 2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--config_path'", ",", "type", "=", "str", ",", "help", "=", "'The config path for the one shot model'", ")", "\n", "parser", ".", "add_argument", "(", "'--config_root'", ",", "type", "=", "str", ",", "help", "=", "'The root path of the config directory'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "def", "get_arch_score", "(", "api", ",", "arch_str", ",", "dataset", ",", "acc_type", "=", "None", ",", "use_012_epoch_training", "=", "False", ")", ":", "\n", "  ", "arch_index", "=", "api", ".", "query_index_by_arch", "(", "arch_str", ")", "\n", "assert", "arch_index", ">=", "0", ",", "'can not find this arch : {:}'", ".", "format", "(", "arch_str", ")", "\n", "if", "use_012_epoch_training", ":", "\n", "    ", "info", "=", "api", ".", "get_more_info", "(", "arch_index", ",", "dataset", ",", "iepoch", "=", "None", ",", "hp", "=", "'12'", ",", "is_random", "=", "True", ")", "\n", "valid_acc", ",", "time_cost", "=", "info", "[", "'valid-accuracy'", "]", ",", "info", "[", "'train-all-time'", "]", "+", "info", "[", "'valid-per-time'", "]", "\n", "return", "valid_acc", ",", "time_cost", "\n", "", "else", ":", "\n", "    ", "return", "api", ".", "query_by_index", "(", "arch_index", "=", "arch_index", ",", "hp", "=", "'200'", ")", ".", "get_metrics", "(", "dataset", ",", "acc_type", ")", "[", "'accuracy'", "]", "\n", "\n", "", "", "def", "train", "(", "model", ",", "train_queue", ",", "criterion", ",", "optimizer", ",", "gen", ",", "args", ")", ":", "\n", "  ", "losses", ",", "top1", ",", "top5", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "step", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "    ", "model", ".", "random_alphas", "(", "discrete", "=", "args", ".", "train_discrete", ")", "\n", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.arch_search.validation": [[84, 128], ["model.eval", "range", "len", "time.time", "model.update_alphas", "model.check_alphas", "model.discretize", "model.check_alphas", "model.genotype", "ut.search_dataframe", "logging.info", "population.get_population", "logging.info", "[].set_fitness", "[].objs.reset", "[].top1.reset", "[].top5.reset", "population.get_population", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "len", "population.get_population", "population.get_population", "inputs.to.size", "inputs.to.to", "targets.to.to", "model", "criterion", "ut.obtain_accuracy", "[].objs.update", "[].top1.update", "[].top5.update", "population.get_population", "population.get_population", "criterion.data.cpu().item", "prec1.data.cpu().item", "prec5.data.cpu().item", "population.get_population", "population.get_population", "population.get_population", "population.get_population", "population.get_population", "population.get_population", "criterion.data.cpu", "prec1.data.cpu", "prec5.data.cpu", "population.get_population", "population.get_population", "population.get_population"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.update_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.check_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.prog_model_search.Network.discretize", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.check_alphas", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.model_search.Network.genotype", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.search_dataframe", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.chromosomes.chromosome.set_fitness", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.reset", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.obtain_accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.population.Population.get_population"], ["inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "targets", "=", "targets", ".", "to", "(", "device", ")", "\n", "\n", "#inputs = inputs.cuda(non_blocking=True)", "\n", "#targets = targets.cuda(non_blocking=True)", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "logits", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "obtain_accuracy", "(", "logits", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "#print(step)", "\n", "if", "(", "step", ")", "%", "100", "==", "0", ":", "\n", "      ", "logging", ".", "info", "(", "f\"[Epoch #{gen}]: train_discrete: {args.train_discrete}\"", ")", "\n", "logging", ".", "info", "(", "f\"Using Training batch #{step} with loss: {losses.avg:.5f}, prec1: {top1.avg:.5f}, prec5: {top5.avg:.5f}\"", ")", "\n", "#break", "\n", "", "", "logging", ".", "info", "(", "f\"Training finished with loss: {losses.avg:.5f}, prec1: {top1.avg:.5f}, prec5: {top5.avg:.5f}\"", ")", "\n", "\n", "", "def", "validation", "(", "model", ",", "valid_queue", ",", "criterion", ",", "gen", ",", "df", ")", ":", "\n", "  ", "model", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "population", ".", "get_population", "(", ")", ")", ")", ":", "\n", "    ", "valid_start", "=", "time", ".", "time", "(", ")", "\n", "#Copying and checking the discretized alphas", "\n", "model", ".", "update_alphas", "(", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "arch_parameters", "[", "0", "]", ")", "\n", "discrete_alphas", "=", "model", ".", "discretize", "(", ")", "\n", "assert", "model", ".", "check_alphas", "(", "discrete_alphas", ")", "\n", "arch_str_tmp", "=", "model", ".", "genotype", "(", ")", ".", "tostr", "(", ")", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "genotype", "=", "arch_str_tmp", "\n", "if", "(", "not", "df", ".", "empty", ")", "and", "(", "not", "df", "[", "df", "[", "'genotype'", "]", "==", "arch_str_tmp", "]", ".", "empty", ")", ":", "\n", "      ", "series", "=", "df", "[", "df", "[", "'genotype'", "]", "==", "arch_str_tmp", "]", "\n", "generation", ",", "arch_loss", ",", "arch_top1", ",", "arch_top5", "=", "series", "[", "'generation'", "]", ".", "values", "[", "0", "]", ",", "series", "[", "'arch_loss'", "]", ".", "values", "[", "0", "]", ",", "series", "[", "'arch_top1'", "]", ".", "values", "[", "0", "]", ",", "series", "[", "'arch_top5'", "]", ".", "values", "[", "0", "]", "\n", "logging", ".", "info", "(", "f'Already evaluated in generation #{generation}'", ")", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "set_fitness", "(", "arch_loss", ",", "arch_top1", ",", "arch_top5", ")", "\n", "", "else", ":", "\n", "      ", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "objs", ".", "reset", "(", ")", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "top1", ".", "reset", "(", ")", "\n", "population", ".", "get_population", "(", ")", "[", "i", "]", ".", "top5", ".", "reset", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "step", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.main": [[70, 163], ["numpy.random.seed", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "logging.info", "os.path.exists", "logging.info", "model.NetworkCIFAR", "model.cuda.cuda", "logging.info", "torch.CrossEntropyLoss", "criterion.cuda.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "ut._data_transforms_cifar10", "torchvision.CIFAR10", "torchvision.CIFAR10", "logging.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "logging.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "os.path.join", "print", "visualize.plot", "visualize.plot", "ut.count_parameters_in_MB", "model.cuda.parameters", "float", "logging.info", "time.time", "train_cifar10.train", "logging.info", "writer.add_scalar", "writer.add_scalar", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "train_cifar10.infer", "logging.info", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "ut.save", "test_error.append", "writer.add_scalar", "writer.add_scalar", "logging.info", "logging.info", "open", "pickle.dump", "open", "pickle.load", "os.path.join", "os.path.join", "print", "len", "len", "os.path.join", "ut.save", "os.path.join", "torch.optim.lr_scheduler.CosineAnnealingLR.get_last_lr", "os.path.join", "best_acc_top1.item", "valid_acc.item", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut._data_transforms_cifar10", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.visualize.plot", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.visualize.plot", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.count_parameters_in_MB", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.infer", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.datasets.LandmarkDataset.LandmarkDataset.append", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.load", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.save"], ["def", "main", "(", ")", ":", "\n", "  ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "logging", ".", "info", "(", "'gpu device = %d'", "%", "args", ".", "gpu", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ")", "\n", "\n", "#genotype = eval(\"genotypes.%s\" % args.arch)", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir", ",", "\"genotype.pickle\"", ")", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir", ",", "\"genotype.pickle\"", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "genotype", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "print", "(", "\"Unpickling genotype.pickle\"", ")", "\n", "visualize", ".", "plot", "(", "genotype", ".", "normal", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "\"normal\"", ")", ",", "False", ")", "\n", "visualize", ".", "plot", "(", "genotype", ".", "reduce", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "\"reduction\"", ")", ",", "False", ")", "\n", "\n", "", "elif", "args", ".", "dir", "is", "not", "None", ":", "\n", "    ", "print", "(", "\"No genotype in the given directory\"", ")", "\n", "return", "\n", "\n", "", "logging", ".", "info", "(", "genotype", ")", "\n", "\n", "model", "=", "Network", "(", "args", ".", "init_channels", ",", "CIFAR_CLASSES", ",", "args", ".", "layers", ",", "args", ".", "auxiliary", ",", "genotype", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "ut", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", ")", "\n", "\n", "train_transform", ",", "valid_transform", "=", "ut", ".", "_data_transforms_cifar10", "(", "args", ")", "\n", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "valid_data", "=", "dset", ".", "CIFAR10", "(", "root", "=", "args", ".", "data", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "valid_transform", ")", "\n", "logging", ".", "info", "(", "\"[INFO] len(train_data): {}, len(valid_data): {}\"", ".", "format", "(", "len", "(", "train_data", ")", ",", "len", "(", "valid_data", ")", ")", ")", "\n", "\n", "train_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "valid_queue", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "valid_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ")", "\n", "\n", "test_error", "=", "[", "]", "\n", "best_acc_top1", "=", "0.0", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'[INFO] epoch (%d/%d) lr %e'", ",", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "model", ".", "drop_path_prob", "=", "args", ".", "drop_path_prob", "*", "epoch", "/", "args", ".", "epochs", "\n", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "train_acc", ",", "train_obj", "=", "train", "(", "train_queue", ",", "model", ",", "criterion", ",", "optimizer", ")", "\n", "logging", ".", "info", "(", "'[INFO] train_acc %f finished in %f minutes'", ",", "train_acc", ",", "(", "time", ".", "time", "(", ")", "-", "epoch_start", ")", "/", "60", ")", "\n", "writer", ".", "add_scalar", "(", "\"train_acc\"", ",", "train_acc", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"train_obj\"", ",", "train_obj", ",", "epoch", "+", "1", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "valid_acc", ",", "valid_obj", "=", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", "\n", "logging", ".", "info", "(", "'[INFO] valid_acc %f'", ",", "valid_acc", ")", "\n", "writer", ".", "add_scalar", "(", "\"valid_acc\"", ",", "valid_acc", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"valid_obj\"", ",", "valid_obj", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"test_error\"", ",", "100", "-", "valid_acc", ",", "epoch", "+", "1", ")", "\n", "\n", "ut", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "test_error", ".", "append", "(", "100", "-", "valid_acc", ")", "\n", "\n", "if", "valid_acc", ">", "best_acc_top1", ":", "\n", "      ", "ut", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'best_weights.pt'", ")", ")", "\n", "best_acc_top1", "=", "valid_acc", "\n", "", "writer", ".", "add_scalar", "(", "\"best_acc\"", ",", "best_acc_top1", ",", "epoch", "+", "1", ")", "\n", "writer", ".", "add_scalar", "(", "\"best_test_error\"", ",", "100", "-", "best_acc_top1", ",", "epoch", "+", "1", ")", "\n", "logging", ".", "info", "(", "f'[INFO] Epoch finished in {(time.time() - epoch_start) / 60}'", ")", "\n", "logging", ".", "info", "(", "'='", "*", "100", ")", "\n", "\n", "", "logging", ".", "info", "(", "f'best_acc: {best_acc_top1.item()}, valid_acc: {valid_acc.item()}'", ")", "\n", "\n", "with", "open", "(", "\"{}/test_error.pickle\"", ".", "format", "(", "args", ".", "save", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "    ", "pickle", ".", "dump", "(", "test_error", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train": [[164, 195], ["ut.AvgrageMeter", "ut.AvgrageMeter", "ut.AvgrageMeter", "model.train", "enumerate", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "ut.accuracy", "Variable().cuda.size", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "criterion", "model.parameters", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.train", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "", "def", "train", "(", "train_queue", ",", "model", ",", "criterion", ",", "optimizer", ")", ":", "\n", "  ", "objs", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_queue", ")", ":", "\n", "    ", "input", "=", "Variable", "(", "input", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", ",", "logits_aux", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "if", "args", ".", "auxiliary", ":", "\n", "      ", "loss_aux", "=", "criterion", "(", "logits_aux", ",", "target", ")", "\n", "loss", "+=", "args", ".", "auxiliary_weight", "*", "loss_aux", "\n", "", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "prec1", ",", "prec5", "=", "ut", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "      ", "logging", ".", "info", "(", "'train %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "#break", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.train_cifar10.infer": [[197, 222], ["ut.AvgrageMeter", "ut.AvgrageMeter", "ut.AvgrageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model", "criterion", "ut.accuracy", "Variable().cuda.size", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "ut.AvgrageMeter.update", "logging.info", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s2.architecture.Architecture.cuda", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.accuracy", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update", "home.repos.pwc.inspect_result.nightstorm0909_pevonas.s1.ut.AvgrageMeter.update"], ["", "def", "infer", "(", "valid_queue", ",", "model", ",", "criterion", ")", ":", "\n", "  ", "objs", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top1", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "top5", "=", "ut", ".", "AvgrageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "step", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "valid_queue", ")", ":", "\n", "      ", "input", "=", "Variable", "(", "input", ",", "volatile", "=", "True", ")", ".", "cuda", "(", ")", "\n", "target", "=", "Variable", "(", "target", ",", "volatile", "=", "True", ")", ".", "cuda", "(", ")", "\n", "\n", "logits", ",", "_", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "\n", "prec1", ",", "prec5", "=", "ut", ".", "accuracy", "(", "logits", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "objs", ".", "update", "(", "loss", ".", "data", ",", "n", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "data", ",", "n", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "data", ",", "n", ")", "\n", "\n", "if", "step", "%", "args", ".", "report_freq", "==", "0", ":", "\n", "        ", "logging", ".", "info", "(", "'valid %03d %e %f %f'", ",", "step", ",", "objs", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "#break", "\n", "\n", "", "", "", "return", "top1", ".", "avg", ",", "objs", ".", "avg", "\n", "\n"]]}