{"home.repos.pwc.inspect_result.kennymckormick_pyskl.None.setup.readme": [[9, 13], ["open", "f.read"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.md'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.None.setup.get_version": [[18, 22], ["open", "exec", "locals", "compile", "f.read"], "function", ["None"], ["def", "get_version", "(", ")", ":", "\n", "    ", "with", "open", "(", "version_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "exec", "(", "compile", "(", "f", ".", "read", "(", ")", ",", "version_file", ",", "'exec'", ")", ")", "\n", "", "return", "locals", "(", ")", "[", "'__version__'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.None.setup.parse_requirements": [[24, 98], ["list", "line.strip.startswith", "os.path.exists", "setup.parse_requirements.gen_packages_items"], "function", ["None"], ["", "def", "parse_requirements", "(", "fname", "=", "'requirements.txt'", ",", "with_version", "=", "True", ")", ":", "\n", "    ", "\"\"\"Parse the package dependencies listed in a requirements file but strips\n    specific versioning information.\n\n    Args:\n        fname (str): path to requirements file\n        with_version (bool, default=False): if True include version specs\n\n    Returns:\n        List[str]: list of requirements items\n\n    CommandLine:\n        python -c \"import setup; print(setup.parse_requirements())\"\n    \"\"\"", "\n", "\n", "require_fpath", "=", "fname", "\n", "\n", "def", "parse_line", "(", "line", ")", ":", "\n", "        ", "\"\"\"Parse information from a line in a requirements text file.\"\"\"", "\n", "if", "line", ".", "startswith", "(", "'-r '", ")", ":", "\n", "# Allow specifying requirements in other files", "\n", "            ", "target", "=", "line", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "for", "info", "in", "parse_require_file", "(", "target", ")", ":", "\n", "                ", "yield", "info", "\n", "", "", "else", ":", "\n", "            ", "info", "=", "{", "'line'", ":", "line", "}", "\n", "if", "line", ".", "startswith", "(", "'-e '", ")", ":", "\n", "                ", "info", "[", "'package'", "]", "=", "line", ".", "split", "(", "'#egg='", ")", "[", "1", "]", "\n", "", "elif", "'@git+'", "in", "line", ":", "\n", "                ", "info", "[", "'package'", "]", "=", "line", "\n", "", "else", ":", "\n", "# Remove versioning from the package", "\n", "                ", "pat", "=", "'('", "+", "'|'", ".", "join", "(", "[", "'>='", ",", "'=='", ",", "'>'", "]", ")", "+", "')'", "\n", "parts", "=", "re", ".", "split", "(", "pat", ",", "line", ",", "maxsplit", "=", "1", ")", "\n", "parts", "=", "[", "p", ".", "strip", "(", ")", "for", "p", "in", "parts", "]", "\n", "\n", "info", "[", "'package'", "]", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "                    ", "op", ",", "rest", "=", "parts", "[", "1", ":", "]", "\n", "if", "';'", "in", "rest", ":", "\n", "# Handle platform specific dependencies", "\n", "# http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-platform-specific-dependencies", "\n", "                        ", "version", ",", "platform_deps", "=", "map", "(", "str", ".", "strip", ",", "\n", "rest", ".", "split", "(", "';'", ")", ")", "\n", "info", "[", "'platform_deps'", "]", "=", "platform_deps", "\n", "", "else", ":", "\n", "                        ", "version", "=", "rest", "# NOQA", "\n", "", "info", "[", "'version'", "]", "=", "(", "op", ",", "version", ")", "\n", "", "", "yield", "info", "\n", "\n", "", "", "def", "parse_require_file", "(", "fpath", ")", ":", "\n", "        ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "and", "not", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "                    ", "for", "info", "in", "parse_line", "(", "line", ")", ":", "\n", "                        ", "yield", "info", "\n", "\n", "", "", "", "", "", "def", "gen_packages_items", "(", ")", ":", "\n", "        ", "if", "exists", "(", "require_fpath", ")", ":", "\n", "            ", "for", "info", "in", "parse_require_file", "(", "require_fpath", ")", ":", "\n", "                ", "parts", "=", "[", "info", "[", "'package'", "]", "]", "\n", "if", "with_version", "and", "'version'", "in", "info", ":", "\n", "                    ", "parts", ".", "extend", "(", "info", "[", "'version'", "]", ")", "\n", "", "if", "not", "sys", ".", "version", ".", "startswith", "(", "'3.4'", ")", ":", "\n", "# apparently package_deps are broken in 3.4", "\n", "                    ", "platform_deps", "=", "info", ".", "get", "(", "'platform_deps'", ")", "\n", "if", "platform_deps", "is", "not", "None", ":", "\n", "                        ", "parts", ".", "append", "(", "';'", "+", "platform_deps", ")", "\n", "", "", "item", "=", "''", ".", "join", "(", "parts", ")", "\n", "yield", "item", "\n", "\n", "", "", "", "packages", "=", "list", "(", "gen_packages_items", "(", ")", ")", "\n", "return", "packages", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.demo.demo_skeleton.parse_args": [[59, 109], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PoseC3D demo'", ")", "\n", "parser", ".", "add_argument", "(", "'video'", ",", "help", "=", "'video file/url'", ")", "\n", "parser", ".", "add_argument", "(", "'out_filename'", ",", "help", "=", "'output filename'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--config'", ",", "\n", "default", "=", "'configs/posec3d/slowonly_r50_ntu120_xsub/joint.py'", ",", "\n", "help", "=", "'skeleton action recognition config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--checkpoint'", ",", "\n", "default", "=", "(", "'https://download.openmmlab.com/mmaction/pyskl/ckpt/'", "\n", "'posec3d/slowonly_r50_ntu120_xsub/joint.pth'", ")", ",", "\n", "help", "=", "'skeleton action recognition checkpoint file/url'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--det-config'", ",", "\n", "default", "=", "'demo/faster_rcnn_r50_fpn_2x_coco.py'", ",", "\n", "help", "=", "'human detection config file path (from mmdet)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--det-checkpoint'", ",", "\n", "default", "=", "(", "'http://download.openmmlab.com/mmdetection/v2.0/faster_rcnn/'", "\n", "'faster_rcnn_r50_fpn_2x_coco/faster_rcnn_r50_fpn_2x_coco_'", "\n", "'bbox_mAP-0.384_20200504_210434-a5d8aa15.pth'", ")", ",", "\n", "help", "=", "'human detection checkpoint file/url'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pose-config'", ",", "\n", "default", "=", "'demo/hrnet_w32_coco_256x192.py'", ",", "\n", "help", "=", "'human pose estimation config file path (from mmpose)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pose-checkpoint'", ",", "\n", "default", "=", "(", "'https://download.openmmlab.com/mmpose/top_down/hrnet/'", "\n", "'hrnet_w32_coco_256x192-c78dce93_20200708.pth'", ")", ",", "\n", "help", "=", "'human pose estimation checkpoint file/url'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--det-score-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.9", ",", "\n", "help", "=", "'the threshold of human detection score'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--label-map'", ",", "\n", "default", "=", "'tools/data/label_map/nturgbd_120.txt'", ",", "\n", "help", "=", "'label map file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cuda:0'", ",", "help", "=", "'CPU/CUDA device option'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--short-side'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "480", ",", "\n", "help", "=", "'specify the short-side length of the image'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.demo.demo_skeleton.frame_extraction": [[111, 144], ["os.join", "os.makedirs", "os.makedirs", "os.join", "cv2.VideoCapture", "cv2.VideoCapture.read", "os.basename", "mmcv.imresize", "frames.append", "osp.join.format", "frame_paths.append", "cv2.imwrite", "cv2.VideoCapture.read", "mmcv.rescale_size", "os.splitext"], "function", ["None"], ["", "def", "frame_extraction", "(", "video_path", ",", "short_side", ")", ":", "\n", "    ", "\"\"\"Extract frames given video_path.\n\n    Args:\n        video_path (str): The video_path.\n    \"\"\"", "\n", "# Load the video, extract frames into ./tmp/video_name", "\n", "target_dir", "=", "osp", ".", "join", "(", "'./tmp'", ",", "osp", ".", "basename", "(", "osp", ".", "splitext", "(", "video_path", ")", "[", "0", "]", ")", ")", "\n", "os", ".", "makedirs", "(", "target_dir", ",", "exist_ok", "=", "True", ")", "\n", "# Should be able to handle videos up to several hours", "\n", "frame_tmpl", "=", "osp", ".", "join", "(", "target_dir", ",", "'img_{:06d}.jpg'", ")", "\n", "vid", "=", "cv2", ".", "VideoCapture", "(", "video_path", ")", "\n", "frames", "=", "[", "]", "\n", "frame_paths", "=", "[", "]", "\n", "flag", ",", "frame", "=", "vid", ".", "read", "(", ")", "\n", "cnt", "=", "0", "\n", "new_h", ",", "new_w", "=", "None", ",", "None", "\n", "while", "flag", ":", "\n", "        ", "if", "new_h", "is", "None", ":", "\n", "            ", "h", ",", "w", ",", "_", "=", "frame", ".", "shape", "\n", "new_w", ",", "new_h", "=", "mmcv", ".", "rescale_size", "(", "(", "w", ",", "h", ")", ",", "(", "short_side", ",", "np", ".", "Inf", ")", ")", "\n", "\n", "", "frame", "=", "mmcv", ".", "imresize", "(", "frame", ",", "(", "new_w", ",", "new_h", ")", ")", "\n", "\n", "frames", ".", "append", "(", "frame", ")", "\n", "frame_path", "=", "frame_tmpl", ".", "format", "(", "cnt", "+", "1", ")", "\n", "frame_paths", ".", "append", "(", "frame_path", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "frame_path", ",", "frame", ")", "\n", "cnt", "+=", "1", "\n", "flag", ",", "frame", "=", "vid", ".", "read", "(", ")", "\n", "\n", "", "return", "frame_paths", ",", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.demo.demo_skeleton.detection_inference": [[146, 170], ["init_detector", "print", "mmcv.ProgressBar", "len", "inference_detector", "results.append", "mmcv.ProgressBar.update"], "function", ["None"], ["", "def", "detection_inference", "(", "args", ",", "frame_paths", ")", ":", "\n", "    ", "\"\"\"Detect human boxes given frame paths.\n\n    Args:\n        args (argparse.Namespace): The arguments.\n        frame_paths (list[str]): The paths of frames to do detection inference.\n\n    Returns:\n        list[np.ndarray]: The human detection results.\n    \"\"\"", "\n", "model", "=", "init_detector", "(", "args", ".", "det_config", ",", "args", ".", "det_checkpoint", ",", "args", ".", "device", ")", "\n", "assert", "model", "is", "not", "None", ",", "(", "'Failed to build the detection model. Check if you have installed mmcv-full properly. '", "\n", "'You should first install mmcv-full successfully, then install mmdet, mmpose. '", ")", "\n", "assert", "model", ".", "CLASSES", "[", "0", "]", "==", "'person'", ",", "'We require you to use a detector trained on COCO'", "\n", "results", "=", "[", "]", "\n", "print", "(", "'Performing Human Detection for each frame'", ")", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "frame_paths", ")", ")", "\n", "for", "frame_path", "in", "frame_paths", ":", "\n", "        ", "result", "=", "inference_detector", "(", "model", ",", "frame_path", ")", "\n", "# We only keep human detections with score larger than det_score_thr", "\n", "result", "=", "result", "[", "0", "]", "[", "result", "[", "0", "]", "[", ":", ",", "4", "]", ">=", "args", ".", "det_score_thr", "]", "\n", "results", ".", "append", "(", "result", ")", "\n", "prog_bar", ".", "update", "(", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.demo.demo_skeleton.pose_inference": [[172, 185], ["init_pose_model", "print", "mmcv.ProgressBar", "zip", "len", "ret.append", "mmcv.ProgressBar.update", "dict", "inference_top_down_pose_model", "list"], "function", ["None"], ["", "def", "pose_inference", "(", "args", ",", "frame_paths", ",", "det_results", ")", ":", "\n", "    ", "model", "=", "init_pose_model", "(", "args", ".", "pose_config", ",", "args", ".", "pose_checkpoint", ",", "\n", "args", ".", "device", ")", "\n", "ret", "=", "[", "]", "\n", "print", "(", "'Performing Human Pose Estimation for each frame'", ")", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "frame_paths", ")", ")", "\n", "for", "f", ",", "d", "in", "zip", "(", "frame_paths", ",", "det_results", ")", ":", "\n", "# Align input format", "\n", "        ", "d", "=", "[", "dict", "(", "bbox", "=", "x", ")", "for", "x", "in", "list", "(", "d", ")", "]", "\n", "pose", "=", "inference_top_down_pose_model", "(", "model", ",", "f", ",", "d", ",", "format", "=", "'xyxy'", ")", "[", "0", "]", "\n", "ret", ".", "append", "(", "pose", ")", "\n", "prog_bar", ".", "update", "(", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.demo.demo_skeleton.dist_ske": [[187, 191], ["numpy.abs", "numpy.sum", "numpy.linalg.norm", "numpy.maximum"], "function", ["None"], ["", "def", "dist_ske", "(", "ske1", ",", "ske2", ")", ":", "\n", "    ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "ske1", "[", ":", ",", ":", "2", "]", "-", "ske2", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", "*", "2", "\n", "diff", "=", "np", ".", "abs", "(", "ske1", "[", ":", ",", "2", "]", "-", "ske2", "[", ":", ",", "2", "]", ")", "\n", "return", "np", ".", "sum", "(", "np", ".", "maximum", "(", "dist", ",", "diff", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.demo.demo_skeleton.pose_tracking": [[193, 227], ["enumerate", "tracks.sort", "numpy.zeros", "enumerate", "numpy.zeros", "range", "scipy.optimize.linear_sum_assignment", "zip", "len", "len", "len", "range", "[].append", "range", "len", "demo_skeleton.dist_ske", "dict", "tracks.append", "len"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.demo.demo_skeleton.dist_ske"], ["", "def", "pose_tracking", "(", "pose_results", ",", "max_tracks", "=", "2", ",", "thre", "=", "30", ")", ":", "\n", "    ", "tracks", ",", "num_tracks", "=", "[", "]", ",", "0", "\n", "num_joints", "=", "None", "\n", "for", "idx", ",", "poses", "in", "enumerate", "(", "pose_results", ")", ":", "\n", "        ", "if", "len", "(", "poses", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "num_joints", "is", "None", ":", "\n", "            ", "num_joints", "=", "poses", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "", "track_proposals", "=", "[", "t", "for", "t", "in", "tracks", "if", "t", "[", "'data'", "]", "[", "-", "1", "]", "[", "0", "]", ">", "idx", "-", "thre", "]", "\n", "n", ",", "m", "=", "len", "(", "track_proposals", ")", ",", "len", "(", "poses", ")", "\n", "scores", "=", "np", ".", "zeros", "(", "(", "n", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "                ", "scores", "[", "i", "]", "[", "j", "]", "=", "dist_ske", "(", "track_proposals", "[", "i", "]", "[", "'data'", "]", "[", "-", "1", "]", "[", "1", "]", ",", "poses", "[", "j", "]", ")", "\n", "\n", "", "", "row", ",", "col", "=", "linear_sum_assignment", "(", "scores", ")", "\n", "for", "r", ",", "c", "in", "zip", "(", "row", ",", "col", ")", ":", "\n", "            ", "track_proposals", "[", "r", "]", "[", "'data'", "]", ".", "append", "(", "(", "idx", ",", "poses", "[", "c", "]", ")", ")", "\n", "", "if", "m", ">", "n", ":", "\n", "            ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "                ", "if", "j", "not", "in", "col", ":", "\n", "                    ", "num_tracks", "+=", "1", "\n", "new_track", "=", "dict", "(", "data", "=", "[", "]", ")", "\n", "new_track", "[", "'track_id'", "]", "=", "num_tracks", "\n", "new_track", "[", "'data'", "]", "=", "[", "(", "idx", ",", "poses", "[", "j", "]", ")", "]", "\n", "tracks", ".", "append", "(", "new_track", ")", "\n", "", "", "", "", "tracks", ".", "sort", "(", "key", "=", "lambda", "x", ":", "-", "len", "(", "x", "[", "'data'", "]", ")", ")", "\n", "result", "=", "np", ".", "zeros", "(", "(", "max_tracks", ",", "len", "(", "pose_results", ")", ",", "num_joints", ",", "3", ")", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "for", "i", ",", "track", "in", "enumerate", "(", "tracks", "[", ":", "max_tracks", "]", ")", ":", "\n", "        ", "for", "item", "in", "track", "[", "'data'", "]", ":", "\n", "            ", "idx", ",", "pose", "=", "item", "\n", "result", "[", "i", ",", "idx", "]", "=", "pose", "\n", "", "", "return", "result", "[", "...", ",", ":", "2", "]", ",", "result", "[", "...", ",", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.demo.demo_skeleton.main": [[229, 308], ["demo_skeleton.parse_args", "demo_skeleton.frame_extraction", "len", "mmcv.Config.fromfile", "pyskl.apis.init_recognizer", "demo_skeleton.detection_inference", "torch.cuda.empty_cache", "demo_skeleton.pose_inference", "torch.cuda.empty_cache", "dict", "pyskl.apis.inference_recognizer", "init_pose_model", "mpy.ImageSequenceClip", "mpy.ImageSequenceClip.write_videofile", "os.dirname", "shutil.rmtree", "x.strip", "demo_skeleton.pose_tracking", "max", "numpy.zeros", "numpy.zeros", "enumerate", "vis_pose_result", "cv2.putText", "open().readlines", "enumerate", "range", "len", "open"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.parse_args", "home.repos.pwc.inspect_result.kennymckormick_pyskl.demo.demo_skeleton.frame_extraction", "home.repos.pwc.inspect_result.kennymckormick_pyskl.apis.inference.init_recognizer", "home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.detection_inference", "home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.pose_inference", "home.repos.pwc.inspect_result.kennymckormick_pyskl.apis.inference.inference_recognizer", "home.repos.pwc.inspect_result.kennymckormick_pyskl.demo.demo_skeleton.pose_tracking"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "frame_paths", ",", "original_frames", "=", "frame_extraction", "(", "args", ".", "video", ",", "\n", "args", ".", "short_side", ")", "\n", "num_frame", "=", "len", "(", "frame_paths", ")", "\n", "h", ",", "w", ",", "_", "=", "original_frames", "[", "0", "]", ".", "shape", "\n", "\n", "config", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "config", ".", "data", ".", "test", ".", "pipeline", "=", "[", "x", "for", "x", "in", "config", ".", "data", ".", "test", ".", "pipeline", "if", "x", "[", "'type'", "]", "!=", "'DecompressPose'", "]", "\n", "# Are we using GCN for Infernece?", "\n", "GCN_flag", "=", "'GCN'", "in", "config", ".", "model", ".", "type", "\n", "GCN_nperson", "=", "None", "\n", "if", "GCN_flag", ":", "\n", "        ", "format_op", "=", "[", "op", "for", "op", "in", "config", ".", "data", ".", "test", ".", "pipeline", "if", "op", "[", "'type'", "]", "==", "'FormatGCNInput'", "]", "[", "0", "]", "\n", "GCN_nperson", "=", "format_op", "[", "'num_person'", "]", "\n", "\n", "", "model", "=", "init_recognizer", "(", "config", ",", "args", ".", "checkpoint", ",", "args", ".", "device", ")", "\n", "\n", "# Load label_map", "\n", "label_map", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "args", ".", "label_map", ")", ".", "readlines", "(", ")", "]", "\n", "\n", "# Get Human detection results", "\n", "det_results", "=", "detection_inference", "(", "args", ",", "frame_paths", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "pose_results", "=", "pose_inference", "(", "args", ",", "frame_paths", ",", "det_results", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "fake_anno", "=", "dict", "(", "\n", "frame_dir", "=", "''", ",", "\n", "label", "=", "-", "1", ",", "\n", "img_shape", "=", "(", "h", ",", "w", ")", ",", "\n", "original_shape", "=", "(", "h", ",", "w", ")", ",", "\n", "start_index", "=", "0", ",", "\n", "modality", "=", "'Pose'", ",", "\n", "total_frames", "=", "num_frame", ")", "\n", "\n", "if", "GCN_flag", ":", "\n", "# We will keep at most `GCN_nperson` persons per frame.", "\n", "        ", "tracking_inputs", "=", "[", "[", "pose", "[", "'keypoints'", "]", "for", "pose", "in", "poses", "]", "for", "poses", "in", "pose_results", "]", "\n", "keypoint", ",", "keypoint_score", "=", "pose_tracking", "(", "tracking_inputs", ",", "max_tracks", "=", "GCN_nperson", ")", "\n", "fake_anno", "[", "'keypoint'", "]", "=", "keypoint", "\n", "fake_anno", "[", "'keypoint_score'", "]", "=", "keypoint_score", "\n", "", "else", ":", "\n", "        ", "num_person", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pose_results", "]", ")", "\n", "# Current PoseC3D models are trained on COCO-keypoints (17 keypoints)", "\n", "num_keypoint", "=", "17", "\n", "keypoint", "=", "np", ".", "zeros", "(", "(", "num_person", ",", "num_frame", ",", "num_keypoint", ",", "2", ")", ",", "\n", "dtype", "=", "np", ".", "float16", ")", "\n", "keypoint_score", "=", "np", ".", "zeros", "(", "(", "num_person", ",", "num_frame", ",", "num_keypoint", ")", ",", "\n", "dtype", "=", "np", ".", "float16", ")", "\n", "for", "i", ",", "poses", "in", "enumerate", "(", "pose_results", ")", ":", "\n", "            ", "for", "j", ",", "pose", "in", "enumerate", "(", "poses", ")", ":", "\n", "                ", "pose", "=", "pose", "[", "'keypoints'", "]", "\n", "keypoint", "[", "j", ",", "i", "]", "=", "pose", "[", ":", ",", ":", "2", "]", "\n", "keypoint_score", "[", "j", ",", "i", "]", "=", "pose", "[", ":", ",", "2", "]", "\n", "", "", "fake_anno", "[", "'keypoint'", "]", "=", "keypoint", "\n", "fake_anno", "[", "'keypoint_score'", "]", "=", "keypoint_score", "\n", "\n", "", "results", "=", "inference_recognizer", "(", "model", ",", "fake_anno", ")", "\n", "\n", "action_label", "=", "label_map", "[", "results", "[", "0", "]", "[", "0", "]", "]", "\n", "\n", "pose_model", "=", "init_pose_model", "(", "args", ".", "pose_config", ",", "args", ".", "pose_checkpoint", ",", "\n", "args", ".", "device", ")", "\n", "vis_frames", "=", "[", "\n", "vis_pose_result", "(", "pose_model", ",", "frame_paths", "[", "i", "]", ",", "pose_results", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "num_frame", ")", "\n", "]", "\n", "for", "frame", "in", "vis_frames", ":", "\n", "        ", "cv2", ".", "putText", "(", "frame", ",", "action_label", ",", "(", "10", ",", "30", ")", ",", "FONTFACE", ",", "FONTSCALE", ",", "\n", "FONTCOLOR", ",", "THICKNESS", ",", "LINETYPE", ")", "\n", "\n", "", "vid", "=", "mpy", ".", "ImageSequenceClip", "(", "[", "x", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "for", "x", "in", "vis_frames", "]", ",", "fps", "=", "24", ")", "\n", "vid", ".", "write_videofile", "(", "args", ".", "out_filename", ",", "remove_temp", "=", "True", ")", "\n", "\n", "tmp_frame_dir", "=", "osp", ".", "dirname", "(", "frame_paths", "[", "0", "]", ")", "\n", "shutil", ".", "rmtree", "(", "tmp_frame_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.tools.train.parse_args": [[22, 53], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a recognizer'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to evaluate the checkpoint during training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--test-last'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to test the checkpoint after training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--test-best'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to test the best checkpoint (if applicable) after training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'pytorch'", ",", "'slurm'", "]", ",", "\n", "default", "=", "'pytorch'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.tools.train.main": [[55, 154], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "range", "Config.fromfile.get", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "pyskl.utils.get_root_logger", "dict", "pyskl.utils.collect_env", "pyskl.utils.get_root_logger.info", "pyskl.utils.get_root_logger.info", "pyskl.apis.init_random_seed", "pyskl.utils.get_root_logger.info", "mmcv.runner.set_random_seed", "os.basename", "os.basename", "pyskl.models.build_model", "Config.fromfile.get", "dict", "Config.fromfile.get", "torch.barrier", "pyskl.apis.train_model", "torch.barrier", "Config.fromfile.get", "os.join", "hasattr", "dict", "os.join", "os.exists", "os.abspath", "os.join", "time.localtime", "Config.fromfile.work_dir.rstrip", "pyskl.datasets.build_dataset", "len", "dict", "Config.fromfile.get", "pyskl.utils.mc_off", "Config.fromfile.get", "os.basename", "isinstance", "pyskl.utils.test_port", "pyskl.utils.mc_on", "time.sleep", "os.splitext", "pyskl.utils.collect_env.items", "pyskl.utils.test_port", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.parse_args", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.get_root_logger", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.collect_env.collect_env", "home.repos.pwc.inspect_result.kennymckormick_pyskl.apis.train.init_random_seed", "home.repos.pwc.inspect_result.kennymckormick_pyskl.models.builder.build_model", "home.repos.pwc.inspect_result.kennymckormick_pyskl.apis.train.train_model", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.mc_off", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.test_port", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.mc_on", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.test_port"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# work_dir is determined in this priority:", "\n", "# config file > default (base filename)", "\n", "", "if", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "\n", "", "if", "not", "hasattr", "(", "cfg", ",", "'dist_params'", ")", ":", "\n", "        ", "cfg", ".", "dist_params", "=", "dict", "(", "backend", "=", "'nccl'", ")", "\n", "\n", "", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "cfg", ".", "gpu_ids", "=", "range", "(", "world_size", ")", "\n", "\n", "auto_resume", "=", "cfg", ".", "get", "(", "'auto_resume'", ",", "True", ")", "\n", "if", "auto_resume", "and", "cfg", ".", "get", "(", "'resume_from'", ",", "None", ")", "is", "None", ":", "\n", "        ", "resume_pth", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'latest.pth'", ")", "\n", "if", "osp", ".", "exists", "(", "resume_pth", ")", ":", "\n", "            ", "cfg", ".", "resume_from", "=", "resume_pth", "\n", "\n", "# create work_dir", "\n", "", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", ")", "\n", "# init logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "f'{k}: {v}'", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Config: {cfg.pretty_text}'", ")", "\n", "\n", "# set random seeds", "\n", "seed", "=", "init_random_seed", "(", "args", ".", "seed", ")", "\n", "logger", ".", "info", "(", "f'Set random seed to {seed}, deterministic: {args.deterministic}'", ")", "\n", "set_random_seed", "(", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "\n", "cfg", ".", "seed", "=", "seed", "\n", "meta", "[", "'seed'", "]", "=", "seed", "\n", "meta", "[", "'config_name'", "]", "=", "osp", ".", "basename", "(", "args", ".", "config", ")", "\n", "meta", "[", "'work_dir'", "]", "=", "osp", ".", "basename", "(", "cfg", ".", "work_dir", ".", "rstrip", "(", "'/\\\\'", ")", ")", "\n", "\n", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "\n", "cfg", ".", "workflow", "=", "cfg", ".", "get", "(", "'workflow'", ",", "[", "(", "'train'", ",", "1", ")", "]", ")", "\n", "assert", "len", "(", "cfg", ".", "workflow", ")", "==", "1", "\n", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save pyskl version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "pyskl_version", "=", "__version__", "+", "get_git_hash", "(", "digits", "=", "7", ")", ",", "\n", "config", "=", "cfg", ".", "pretty_text", ")", "\n", "\n", "", "test_option", "=", "dict", "(", "test_last", "=", "args", ".", "test_last", ",", "test_best", "=", "args", ".", "test_best", ")", "\n", "\n", "default_mc_cfg", "=", "(", "'localhost'", ",", "22077", ")", "\n", "memcached", "=", "cfg", ".", "get", "(", "'memcached'", ",", "False", ")", "\n", "\n", "if", "rank", "==", "0", "and", "memcached", ":", "\n", "# mc_list is a list of pickle files you want to cache in memory.", "\n", "# Basically, each pickle file is a dictionary.", "\n", "        ", "mc_cfg", "=", "cfg", ".", "get", "(", "'mc_cfg'", ",", "default_mc_cfg", ")", "\n", "assert", "isinstance", "(", "mc_cfg", ",", "tuple", ")", "and", "mc_cfg", "[", "0", "]", "==", "'localhost'", "\n", "if", "not", "test_port", "(", "mc_cfg", "[", "0", "]", ",", "mc_cfg", "[", "1", "]", ")", ":", "\n", "            ", "mc_on", "(", "port", "=", "mc_cfg", "[", "1", "]", ",", "launcher", "=", "args", ".", "launcher", ")", "\n", "", "retry", "=", "3", "\n", "while", "not", "test_port", "(", "mc_cfg", "[", "0", "]", ",", "mc_cfg", "[", "1", "]", ")", "and", "retry", ">", "0", ":", "\n", "            ", "time", ".", "sleep", "(", "5", ")", "\n", "retry", "-=", "1", "\n", "", "assert", "retry", ">=", "0", ",", "'Failed to launch memcached. '", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n", "train_model", "(", "model", ",", "datasets", ",", "cfg", ",", "validate", "=", "args", ".", "validate", ",", "test", "=", "test_option", ",", "timestamp", "=", "timestamp", ",", "meta", "=", "meta", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "\n", "if", "rank", "==", "0", "and", "memcached", ":", "\n", "        ", "mc_off", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.tools.test.parse_args": [[23, 63], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'pyskl test (and eval) a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'-C'", ",", "'--checkpoint'", ",", "help", "=", "'checkpoint file'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--out'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'output result file in pkl/yaml/json format'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fuse-conv-bn'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to fuse conv and bn, this will slightly increase'", "\n", "'the inference speed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "'top_k_accuracy'", ",", "'mean_class_accuracy'", "]", ",", "\n", "help", "=", "'evaluation metrics, which depends on the dataset, e.g.,'", "\n", "' \"top_k_accuracy\", \"mean_class_accuracy\" for video dataset'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--tmpdir'", ",", "\n", "help", "=", "'tmp directory used for collecting results from multiple workers'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--average-clips'", ",", "\n", "choices", "=", "[", "'score'", ",", "'prob'", ",", "None", "]", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'average type when averaging test clips'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'pytorch'", ",", "'slurm'", "]", ",", "\n", "default", "=", "'pytorch'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.tools.test.inference_pytorch": [[65, 100], ["pyskl.models.build_model", "pyskl.utils.cache_checkpoint", "mmcv.runner.load_checkpoint", "mmcv.parallel.MMDistributedDataParallel", "mmcv.engine.multi_gpu_test", "os.join", "os.exists", "mmcv.cnn.fuse_conv_bn", "mmcv.cnn.fuse_conv_bn.cuda", "cfg.model.setdefault", "cfg.model.get", "cfg.get", "dict", "cfg.model.get", "torch.cuda.current_device", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.models.builder.build_model", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.cache_checkpoint"], ["", "def", "inference_pytorch", "(", "args", ",", "cfg", ",", "data_loader", ")", ":", "\n", "    ", "\"\"\"Get predictions by pytorch models.\"\"\"", "\n", "if", "args", ".", "average_clips", "is", "not", "None", ":", "\n", "# You can set average_clips during testing, it will override the", "\n", "# original setting", "\n", "        ", "if", "cfg", ".", "model", ".", "get", "(", "'test_cfg'", ")", "is", "None", "and", "cfg", ".", "get", "(", "'test_cfg'", ")", "is", "None", ":", "\n", "            ", "cfg", ".", "model", ".", "setdefault", "(", "'test_cfg'", ",", "\n", "dict", "(", "average_clips", "=", "args", ".", "average_clips", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "cfg", ".", "model", ".", "get", "(", "'test_cfg'", ")", "is", "not", "None", ":", "\n", "                ", "cfg", ".", "model", ".", "test_cfg", ".", "average_clips", "=", "args", ".", "average_clips", "\n", "", "else", ":", "\n", "                ", "cfg", ".", "test_cfg", ".", "average_clips", "=", "args", ".", "average_clips", "\n", "\n", "# build the model and load checkpoint", "\n", "", "", "", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "\n", "if", "args", ".", "checkpoint", "is", "None", ":", "\n", "        ", "work_dir", "=", "cfg", ".", "work_dir", "\n", "args", ".", "checkpoint", "=", "osp", ".", "join", "(", "work_dir", ",", "'latest.pth'", ")", "\n", "assert", "osp", ".", "exists", "(", "args", ".", "checkpoint", ")", "\n", "\n", "", "args", ".", "checkpoint", "=", "cache_checkpoint", "(", "args", ".", "checkpoint", ")", "\n", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "if", "args", ".", "fuse_conv_bn", ":", "\n", "        ", "model", "=", "fuse_conv_bn", "(", "model", ")", "\n", "\n", "", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.tools.test.main": [[102, 173], ["test.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmcv.mkdir_or_exist", "os.splitext", "Config.fromfile.get", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "range", "pyskl.datasets.build_dataset", "dict", "dict", "pyskl.datasets.build_dataloader", "Config.fromfile.get", "torch.barrier", "test.inference_pytorch", "mmcv.runner.get_dist_info", "torch.barrier", "os.join", "cfg.get.pop", "os.dirname", "hasattr", "dict", "dict", "Config.fromfile.get", "print", "pyskl.datasets.build_dataset.dump_results", "pyskl.utils.mc_off", "Config.fromfile.data.get", "Config.fromfile.data.get", "Config.fromfile.data.get", "isinstance", "pyskl.utils.test_port", "pyskl.utils.mc_on", "time.sleep", "pyskl.datasets.build_dataset.evaluate", "dataset.evaluate.items", "pyskl.utils.test_port", "print"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.parse_args", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.kennymckormick_pyskl.tools.test.inference_pytorch", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.dump_results", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.mc_off", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.test_port", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.mc_on", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.evaluate", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.test_port"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "\n", "out", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'result.pkl'", ")", "if", "args", ".", "out", "is", "None", "else", "args", ".", "out", "\n", "\n", "# Load eval_config from cfg", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "keys", "=", "[", "'interval'", ",", "'tmpdir'", ",", "'start'", ",", "'save_best'", ",", "'rule'", ",", "'by_epoch'", ",", "'broadcast_bn_buffers'", "]", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "eval_cfg", ".", "pop", "(", "key", ",", "None", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "        ", "eval_cfg", "[", "'metrics'", "]", "=", "args", ".", "eval", "\n", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "dirname", "(", "out", ")", ")", "\n", "_", ",", "suffix", "=", "osp", ".", "splitext", "(", "out", ")", "\n", "assert", "suffix", "[", "1", ":", "]", "in", "file_handlers", ",", "(", "'The format of the output file should be json, pickle or yaml'", ")", "\n", "\n", "# set cudnn benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "if", "not", "hasattr", "(", "cfg", ",", "'dist_params'", ")", ":", "\n", "        ", "cfg", ".", "dist_params", "=", "dict", "(", "backend", "=", "'nccl'", ")", "\n", "\n", "", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "cfg", ".", "gpu_ids", "=", "range", "(", "world_size", ")", "\n", "\n", "# build the dataloader", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "dataloader_setting", "=", "dict", "(", "\n", "videos_per_gpu", "=", "cfg", ".", "data", ".", "get", "(", "'videos_per_gpu'", ",", "1", ")", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "get", "(", "'workers_per_gpu'", ",", "1", ")", ",", "\n", "shuffle", "=", "False", ")", "\n", "dataloader_setting", "=", "dict", "(", "dataloader_setting", ",", "**", "cfg", ".", "data", ".", "get", "(", "'test_dataloader'", ",", "{", "}", ")", ")", "\n", "data_loader", "=", "build_dataloader", "(", "dataset", ",", "**", "dataloader_setting", ")", "\n", "\n", "default_mc_cfg", "=", "(", "'localhost'", ",", "22077", ")", "\n", "memcached", "=", "cfg", ".", "get", "(", "'memcached'", ",", "False", ")", "\n", "\n", "if", "rank", "==", "0", "and", "memcached", ":", "\n", "# mc_list is a list of pickle files you want to cache in memory.", "\n", "# Basically, each pickle file is a dictionary.", "\n", "        ", "mc_cfg", "=", "cfg", ".", "get", "(", "'mc_cfg'", ",", "default_mc_cfg", ")", "\n", "assert", "isinstance", "(", "mc_cfg", ",", "tuple", ")", "and", "mc_cfg", "[", "0", "]", "==", "'localhost'", "\n", "if", "not", "test_port", "(", "mc_cfg", "[", "0", "]", ",", "mc_cfg", "[", "1", "]", ")", ":", "\n", "            ", "mc_on", "(", "port", "=", "mc_cfg", "[", "1", "]", ",", "launcher", "=", "args", ".", "launcher", ")", "\n", "", "retry", "=", "3", "\n", "while", "not", "test_port", "(", "mc_cfg", "[", "0", "]", ",", "mc_cfg", "[", "1", "]", ")", "and", "retry", ">", "0", ":", "\n", "            ", "time", ".", "sleep", "(", "5", ")", "\n", "retry", "-=", "1", "\n", "", "assert", "retry", ">=", "0", ",", "'Failed to launch memcached. '", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "outputs", "=", "inference_pytorch", "(", "args", ",", "cfg", ",", "data_loader", ")", "\n", "\n", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", "f'\\nwriting results to {out}'", ")", "\n", "dataset", ".", "dump_results", "(", "outputs", ",", "out", "=", "out", ")", "\n", "if", "eval_cfg", ":", "\n", "            ", "eval_res", "=", "dataset", ".", "evaluate", "(", "outputs", ",", "**", "eval_cfg", ")", "\n", "for", "name", ",", "val", "in", "eval_res", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "f'{name}: {val:.04f}'", ")", "\n", "\n", "", "", "", "dist", ".", "barrier", "(", ")", "\n", "if", "rank", "==", "0", "and", "memcached", ":", "\n", "        ", "mc_off", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.extract_frame": [[47, 50], ["decord.VideoReader", "x.asnumpy"], "function", ["None"], ["def", "extract_frame", "(", "video_path", ")", ":", "\n", "    ", "vid", "=", "decord", ".", "VideoReader", "(", "video_path", ")", "\n", "return", "[", "x", ".", "asnumpy", "(", ")", "for", "x", "in", "vid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.detection_inference": [[52, 58], ["inference_detector", "results.append"], "function", ["None"], ["", "def", "detection_inference", "(", "model", ",", "frames", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "for", "frame", "in", "frames", ":", "\n", "        ", "result", "=", "inference_detector", "(", "model", ",", "frame", ")", "\n", "results", ".", "append", "(", "result", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.pose_inference": [[60, 73], ["len", "max", "numpy.zeros", "enumerate", "len", "len", "zip", "enumerate", "len", "dict", "inference_top_down_pose_model", "list"], "function", ["None"], ["", "def", "pose_inference", "(", "model", ",", "frames", ",", "det_results", ")", ":", "\n", "    ", "assert", "len", "(", "frames", ")", "==", "len", "(", "det_results", ")", "\n", "total_frames", "=", "len", "(", "frames", ")", "\n", "num_person", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "det_results", "]", ")", "\n", "kp", "=", "np", ".", "zeros", "(", "(", "num_person", ",", "total_frames", ",", "17", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", ",", "(", "f", ",", "d", ")", "in", "enumerate", "(", "zip", "(", "frames", ",", "det_results", ")", ")", ":", "\n", "# Align input format", "\n", "        ", "d", "=", "[", "dict", "(", "bbox", "=", "x", ")", "for", "x", "in", "list", "(", "d", ")", "]", "\n", "pose", "=", "inference_top_down_pose_model", "(", "model", ",", "f", ",", "d", ",", "format", "=", "'xyxy'", ")", "[", "0", "]", "\n", "for", "j", ",", "item", "in", "enumerate", "(", "pose", ")", ":", "\n", "            ", "kp", "[", "j", ",", "i", "]", "=", "item", "[", "'keypoints'", "]", "\n", "", "", "return", "kp", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.parse_args": [[75, 104], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.parse_args", "home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Generate 2D pose annotations for a custom video dataset'", ")", "\n", "# * Both mmdet and mmpose should be installed from source", "\n", "parser", ".", "add_argument", "(", "'--mmdet-root'", ",", "type", "=", "str", ",", "default", "=", "default_mmdet_root", ")", "\n", "parser", ".", "add_argument", "(", "'--mmpose-root'", ",", "type", "=", "str", ",", "default", "=", "default_mmpose_root", ")", "\n", "parser", ".", "add_argument", "(", "'--det-config'", ",", "type", "=", "str", ",", "default", "=", "default_det_config", ")", "\n", "parser", ".", "add_argument", "(", "'--det-ckpt'", ",", "type", "=", "str", ",", "default", "=", "default_det_ckpt", ")", "\n", "parser", ".", "add_argument", "(", "'--pose-config'", ",", "type", "=", "str", ",", "default", "=", "default_pose_config", ")", "\n", "parser", ".", "add_argument", "(", "'--pose-ckpt'", ",", "type", "=", "str", ",", "default", "=", "default_pose_ckpt", ")", "\n", "# * Only det boxes with score larger than det_score_thr will be kept", "\n", "parser", ".", "add_argument", "(", "'--det-score-thr'", ",", "type", "=", "float", ",", "default", "=", "0.7", ")", "\n", "# * Only det boxes with large enough sizes will be kept,", "\n", "parser", ".", "add_argument", "(", "'--det-area-thr'", ",", "type", "=", "float", ",", "default", "=", "1600", ")", "\n", "# * Accepted formats for each line in video_list are:", "\n", "# * 1. \"xxx.mp4\" ('label' is missing, the dataset can be used for inference, but not training)", "\n", "# * 2. \"xxx.mp4 label\" ('label' is an integer (category index),", "\n", "# * the result can be used for both training & testing)", "\n", "# * All lines should take the same format.", "\n", "parser", ".", "add_argument", "(", "'--video-list'", ",", "type", "=", "str", ",", "help", "=", "'the list of source videos'", ")", "\n", "# * out should ends with '.pkl'", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "type", "=", "str", ",", "help", "=", "'output pickle name'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmpdir'", ",", "type", "=", "str", ",", "default", "=", "'tmp'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.main": [[106, 170], ["custom_2d_skeleton.parse_args", "parse_args.out.endswith", "pyskl.smp.mrlines", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "torch.barrier", "init_detector", "init_pose_model", "tqdm.tqdm", "mmcv.dump", "torch.barrier", "x.split", "len", "len", "os.makedirs", "os.makedirs", "custom_2d_skeleton.extract_frame", "custom_2d_skeleton.detection_inference", "enumerate", "custom_2d_skeleton.pose_inference", "len", "pose_results[].astype", "pose_results[].astype", "anno.pop", "os.join", "zip", "mmcv.dump", "dict", "dict", "numpy.all", "mmcv.load", "len", "range", "ordered_results.extend", "os.join", "range", "parts[].append", "list", "len", "int", "os.basename().split", "os.basename().split", "os.basename", "os.basename"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.parse_args", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.mrlines", "home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.extract_frame", "home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.detection_inference", "home.repos.pwc.inspect_result.kennymckormick_pyskl.data.custom_2d_skeleton.pose_inference"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "assert", "args", ".", "out", ".", "endswith", "(", "'.pkl'", ")", "\n", "\n", "lines", "=", "mrlines", "(", "args", ".", "video_list", ")", "\n", "lines", "=", "[", "x", ".", "split", "(", ")", "for", "x", "in", "lines", "]", "\n", "\n", "# * We set 'frame_dir' as the base name (w/o. suffix) of each video", "\n", "assert", "len", "(", "lines", "[", "0", "]", ")", "in", "[", "1", ",", "2", "]", "\n", "if", "len", "(", "lines", "[", "0", "]", ")", "==", "1", ":", "\n", "        ", "annos", "=", "[", "dict", "(", "frame_dir", "=", "osp", ".", "basename", "(", "x", "[", "0", "]", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "filename", "=", "x", "[", "0", "]", ")", "for", "x", "in", "lines", "]", "\n", "", "else", ":", "\n", "        ", "annos", "=", "[", "dict", "(", "frame_dir", "=", "osp", ".", "basename", "(", "x", "[", "0", "]", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "filename", "=", "x", "[", "0", "]", ",", "label", "=", "int", "(", "x", "[", "1", "]", ")", ")", "for", "x", "in", "lines", "]", "\n", "\n", "", "init_dist", "(", "'pytorch'", ",", "backend", "=", "'nccl'", ")", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "tmpdir", ",", "exist_ok", "=", "True", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "my_part", "=", "annos", "[", "rank", ":", ":", "world_size", "]", "\n", "\n", "det_model", "=", "init_detector", "(", "args", ".", "det_config", ",", "args", ".", "det_ckpt", ",", "'cuda'", ")", "\n", "assert", "det_model", ".", "CLASSES", "[", "0", "]", "==", "'person'", ",", "'A detector trained on COCO is required'", "\n", "pose_model", "=", "init_pose_model", "(", "args", ".", "pose_config", ",", "args", ".", "pose_ckpt", ",", "'cuda'", ")", "\n", "\n", "for", "anno", "in", "tqdm", "(", "my_part", ")", ":", "\n", "        ", "frames", "=", "extract_frame", "(", "anno", "[", "'filename'", "]", ")", "\n", "det_results", "=", "detection_inference", "(", "det_model", ",", "frames", ")", "\n", "# * Get detection results for human", "\n", "det_results", "=", "[", "x", "[", "0", "]", "for", "x", "in", "det_results", "]", "\n", "for", "i", ",", "res", "in", "enumerate", "(", "det_results", ")", ":", "\n", "# * filter boxes with small scores", "\n", "            ", "res", "=", "res", "[", "res", "[", ":", ",", "4", "]", ">=", "args", ".", "det_score_thr", "]", "\n", "# * filter boxes with small areas", "\n", "box_areas", "=", "(", "res", "[", ":", ",", "3", "]", "-", "res", "[", ":", ",", "1", "]", ")", "*", "(", "res", "[", ":", ",", "2", "]", "-", "res", "[", ":", ",", "0", "]", ")", "\n", "assert", "np", ".", "all", "(", "box_areas", ">=", "0", ")", "\n", "res", "=", "res", "[", "box_areas", ">=", "args", ".", "det_area_thr", "]", "\n", "det_results", "[", "i", "]", "=", "res", "\n", "\n", "", "pose_results", "=", "pose_inference", "(", "pose_model", ",", "frames", ",", "det_results", ")", "\n", "shape", "=", "frames", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "anno", "[", "'img_shape'", "]", "=", "anno", "[", "'original_shape'", "]", "=", "shape", "\n", "anno", "[", "'total_frames'", "]", "=", "len", "(", "frames", ")", "\n", "anno", "[", "'num_person_raw'", "]", "=", "pose_results", ".", "shape", "[", "0", "]", "\n", "anno", "[", "'keypoint'", "]", "=", "pose_results", "[", "...", ",", ":", "2", "]", ".", "astype", "(", "np", ".", "float16", ")", "\n", "anno", "[", "'keypoint_score'", "]", "=", "pose_results", "[", "...", ",", "2", "]", ".", "astype", "(", "np", ".", "float16", ")", "\n", "anno", ".", "pop", "(", "'filename'", ")", "\n", "\n", "", "mmcv", ".", "dump", "(", "my_part", ",", "osp", ".", "join", "(", "args", ".", "tmpdir", ",", "f'part_{rank}.pkl'", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "parts", "=", "[", "mmcv", ".", "load", "(", "osp", ".", "join", "(", "args", ".", "tmpdir", ",", "f'part_{i}.pkl'", ")", ")", "for", "i", "in", "range", "(", "world_size", ")", "]", "\n", "rem", "=", "len", "(", "annos", ")", "%", "world_size", "\n", "if", "rem", ":", "\n", "            ", "for", "i", "in", "range", "(", "rem", ",", "world_size", ")", ":", "\n", "                ", "parts", "[", "i", "]", ".", "append", "(", "None", ")", "\n", "\n", "", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "parts", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "len", "(", "annos", ")", "]", "\n", "mmcv", ".", "dump", "(", "ordered_results", ",", "args", ".", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.mrlines": [[28, 33], ["open().read().split", "open().read", "open"], "function", ["None"], ["def", "mrlines", "(", "fname", ",", "sp", "=", "'\\n'", ")", ":", "\n", "    ", "f", "=", "open", "(", "fname", ")", ".", "read", "(", ")", ".", "split", "(", "sp", ")", "\n", "while", "f", "!=", "[", "]", "and", "f", "[", "-", "1", "]", "==", "''", ":", "\n", "        ", "f", "=", "f", "[", ":", "-", "1", "]", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.mwlines": [[34, 37], ["open", "fout.write"], "function", ["None"], ["", "def", "mwlines", "(", "lines", ",", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'w'", ")", "as", "fout", ":", "\n", "        ", "fout", ".", "write", "(", "'\\n'", ".", "join", "(", "lines", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.default_set": [[38, 44], ["hasattr", "getattr", "setattr", "setattr"], "function", ["None"], ["", "", "def", "default_set", "(", "self", ",", "args", ",", "name", ",", "default", ")", ":", "\n", "    ", "if", "hasattr", "(", "args", ",", "name", ")", ":", "\n", "        ", "val", "=", "getattr", "(", "args", ",", "name", ")", "\n", "setattr", "(", "self", ",", "name", ",", "val", ")", "\n", "", "else", ":", "\n", "        ", "setattr", "(", "self", ",", "name", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.youtube_dl": [[45, 48], ["os.system", "os.system"], "function", ["None"], ["", "", "def", "youtube_dl", "(", "url", ",", "output_name", ")", ":", "\n", "    ", "cmd", "=", "'youtube-dl -f best -f mp4 \"{}\"  -o {}'", ".", "format", "(", "url", ",", "output_name", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.run_command": [[49, 51], ["subprocess.check_output"], "function", ["None"], ["", "def", "run_command", "(", "cmd", ")", ":", "\n", "    ", "return", "subprocess", ".", "check_output", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.ls": [[52, 56], ["os.listdir", "os.listdir", "os.join", "os.listdir", "os.listdir"], "function", ["None"], ["", "def", "ls", "(", "dirname", "=", "'.'", ",", "full", "=", "True", ")", ":", "\n", "    ", "if", "not", "full", ":", "\n", "        ", "return", "os", ".", "listdir", "(", "dirname", ")", "\n", "", "return", "[", "osp", ".", "join", "(", "dirname", ",", "x", ")", "for", "x", "in", "os", ".", "listdir", "(", "dirname", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.add": [[57, 59], ["None"], "function", ["None"], ["", "def", "add", "(", "x", ",", "y", ")", ":", "\n", "    ", "return", "x", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.lpkl": [[60, 62], ["pickle.load", "open"], "function", ["None"], ["", "def", "lpkl", "(", "pth", ")", ":", "\n", "    ", "return", "pickle", ".", "load", "(", "open", "(", "pth", ",", "'rb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.ljson": [[63, 65], ["json.load", "open"], "function", ["None"], ["", "def", "ljson", "(", "pth", ")", ":", "\n", "    ", "return", "json", ".", "load", "(", "open", "(", "pth", ",", "'r'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.intop": [[66, 70], ["numpy.argsort", "zip"], "function", ["None"], ["", "def", "intop", "(", "pred", ",", "label", ",", "n", ")", ":", "\n", "    ", "pred", "=", "[", "np", ".", "argsort", "(", "x", ")", "[", "-", "n", ":", "]", "for", "x", "in", "pred", "]", "\n", "hit", "=", "[", "(", "l", "in", "p", ")", "for", "l", ",", "p", "in", "zip", "(", "label", ",", "pred", ")", "]", "\n", "return", "hit", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.comb": [[71, 76], ["range", "len", "zip"], "function", ["None"], ["", "def", "comb", "(", "scores", ",", "coeffs", ")", ":", "\n", "    ", "ret", "=", "[", "x", "*", "coeffs", "[", "0", "]", "for", "x", "in", "scores", "[", "0", "]", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "scores", ")", ")", ":", "\n", "        ", "ret", "=", "[", "x", "+", "y", "for", "x", ",", "y", "in", "zip", "(", "ret", ",", "[", "x", "*", "coeffs", "[", "i", "]", "for", "x", "in", "scores", "[", "i", "]", "]", ")", "]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.top1": [[77, 79], ["numpy.mean", "smp.intop"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.intop"], ["", "def", "top1", "(", "score", ",", "label", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "intop", "(", "score", ",", "label", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.load_label": [[80, 93], ["ann.endswith", "smp.mrlines", "ann.endswith", "int", "smp.lpkl", "x.split", "set"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.mrlines", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.lpkl"], ["", "def", "load_label", "(", "ann", ",", "split", "=", "None", ")", ":", "\n", "    ", "if", "ann", ".", "endswith", "(", "'.txt'", ")", ":", "\n", "        ", "lines", "=", "mrlines", "(", "ann", ")", "\n", "return", "[", "int", "(", "x", ".", "split", "(", ")", "[", "-", "1", "]", ")", "for", "x", "in", "lines", "]", "\n", "", "elif", "ann", ".", "endswith", "(", "'.pkl'", ")", ":", "\n", "        ", "data", "=", "lpkl", "(", "ann", ")", "\n", "if", "split", "is", "not", "None", ":", "\n", "            ", "split", ",", "annotations", "=", "set", "(", "data", "[", "'split'", "]", "[", "split", "]", ")", ",", "data", "[", "'annotations'", "]", "\n", "key_name", "=", "'frame_dir'", "if", "'frame_dir'", "in", "annotations", "[", "0", "]", "else", "'filename'", "\n", "data", "=", "[", "x", "for", "x", "in", "annotations", "if", "x", "[", "key_name", "]", "in", "split", "]", "\n", "", "return", "[", "x", "[", "'label'", "]", "for", "x", "in", "data", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.mean_acc": [[94, 100], ["collections.defaultdict", "zip", "hits[].append", "numpy.mean", "numpy.mean", "collections.defaultdict.values", "numpy.mean", "numpy.argmax"], "function", ["None"], ["", "", "def", "mean_acc", "(", "pred", ",", "label", ",", "with_class_acc", "=", "False", ")", ":", "\n", "    ", "hits", "=", "defaultdict", "(", "list", ")", "\n", "for", "p", ",", "g", "in", "zip", "(", "pred", ",", "label", ")", ":", "\n", "        ", "hits", "[", "g", "]", ".", "append", "(", "np", ".", "argmax", "(", "p", ")", "==", "g", ")", "\n", "", "class_acc", "=", "[", "np", ".", "mean", "(", "x", ")", "for", "x", "in", "hits", ".", "values", "(", ")", "]", "\n", "return", "np", ".", "mean", "(", "class_acc", ")", ",", "class_acc", "if", "with_class_acc", "else", "np", ".", "mean", "(", "class_acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.match_dict": [[101, 108], ["d.items", "len", "values.append"], "function", ["None"], ["", "def", "match_dict", "(", "s", ",", "d", ")", ":", "\n", "    ", "values", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "s", ":", "\n", "            ", "values", ".", "append", "(", "v", ")", "\n", "", "", "assert", "len", "(", "values", ")", "==", "1", "\n", "return", "values", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.download_file": [[109, 114], ["requests.get", "open().write", "url.split", "open"], "function", ["None"], ["", "def", "download_file", "(", "url", ",", "filename", "=", "None", ")", ":", "\n", "    ", "if", "filename", "is", "None", ":", "\n", "        ", "filename", "=", "url", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "", "response", "=", "requests", ".", "get", "(", "url", ")", "\n", "open", "(", "filename", ",", "'wb'", ")", ".", "write", "(", "response", ".", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.gen_bash": [[115, 130], ["random.shuffle", "range", "time.strftime", "smp.mwlines", "random.randint", "list", "cmds.append", "time.localtime", "range", "str"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.mwlines"], ["", "def", "gen_bash", "(", "cfgs", ",", "num_gpus", ",", "gpus_per_task", "=", "1", ")", ":", "\n", "    ", "rd", ".", "shuffle", "(", "cfgs", ")", "\n", "num_bash", "=", "num_gpus", "//", "gpus_per_task", "\n", "for", "i", "in", "range", "(", "num_bash", ")", ":", "\n", "        ", "cmds", "=", "[", "]", "\n", "for", "c", "in", "cfgs", "[", "i", ":", ":", "num_bash", "]", ":", "\n", "            ", "port", "=", "rd", ".", "randint", "(", "30000", ",", "50000", ")", "\n", "gpu_ids", "=", "list", "(", "range", "(", "i", ",", "num_gpus", ",", "num_bash", ")", ")", "\n", "gpu_ids", "=", "','", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "gpu_ids", "]", ")", "\n", "cmds", ".", "append", "(", "\n", "f'CUDA_VISIBLE_DEVICES={gpu_ids} PORT={port} bash tools/dist_train.sh {c} {gpus_per_task} '", "\n", "'--validate --test-last --test-best'", "\n", ")", "\n", "", "timestamp", "=", "time", ".", "strftime", "(", "'%m%d%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "mwlines", "(", "cmds", ",", "f'train_{timestamp}_{i}.sh'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.h2r": [[131, 135], ["value.lstrip.lstrip", "len", "tuple", "int", "range"], "function", ["None"], ["", "", "def", "h2r", "(", "value", ")", ":", "\n", "    ", "value", "=", "value", ".", "lstrip", "(", "'#'", ")", "\n", "lv", "=", "len", "(", "value", ")", "\n", "return", "tuple", "(", "int", "(", "value", "[", "i", ":", "i", "+", "lv", "//", "3", "]", ",", "16", ")", "for", "i", "in", "range", "(", "0", ",", "lv", ",", "lv", "//", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.r2h": [[136, 138], ["None"], "function", ["None"], ["", "def", "r2h", "(", "rgb", ")", ":", "\n", "    ", "return", "'#%02x%02x%02x'", "%", "rgb", "\n", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.version.parse_version_info": [[6, 16], ["version_str.split", "tuple", "x.isdigit", "version_info.append", "int", "x.find", "x.split", "version_info.append", "version_info.append", "int"], "function", ["None"], ["def", "parse_version_info", "(", "version_str", ")", ":", "\n", "    ", "version_info", "=", "[", "]", "\n", "for", "x", "in", "version_str", ".", "split", "(", "'.'", ")", ":", "\n", "        ", "if", "x", ".", "isdigit", "(", ")", ":", "\n", "            ", "version_info", ".", "append", "(", "int", "(", "x", ")", ")", "\n", "", "elif", "x", ".", "find", "(", "'rc'", ")", "!=", "-", "1", ":", "\n", "            ", "patch_version", "=", "x", ".", "split", "(", "'rc'", ")", "\n", "version_info", ".", "append", "(", "int", "(", "patch_version", "[", "0", "]", ")", ")", "\n", "version_info", ".", "append", "(", "f'rc{patch_version[1]}'", ")", "\n", "", "", "return", "tuple", "(", "version_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.Graph.__init__": [[68, 84], ["graph.Graph.get_layout", "graph.get_hop_distance", "hasattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.Graph.get_layout", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.get_hop_distance"], ["def", "__init__", "(", "self", ",", "\n", "layout", "=", "'coco'", ",", "\n", "mode", "=", "'spatial'", ",", "\n", "max_hop", "=", "1", ")", ":", "\n", "\n", "        ", "self", ".", "max_hop", "=", "max_hop", "\n", "self", ".", "layout", "=", "layout", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "assert", "layout", "in", "[", "'openpose'", ",", "'nturgb+d'", ",", "'coco'", "]", "\n", "\n", "self", ".", "get_layout", "(", "layout", ")", "\n", "self", ".", "hop_dis", "=", "get_hop_distance", "(", "self", ".", "num_node", ",", "self", ".", "inward", ",", "max_hop", ")", "\n", "\n", "assert", "hasattr", "(", "self", ",", "mode", ")", ",", "f'Do Not Exist This Mode: {mode}'", "\n", "self", ".", "A", "=", "getattr", "(", "self", ",", "mode", ")", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.Graph.__str__": [[85, 87], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.Graph.get_layout": [[88, 120], ["range", "ValueError"], "methods", ["None"], ["", "def", "get_layout", "(", "self", ",", "layout", ")", ":", "\n", "        ", "if", "layout", "==", "'openpose'", ":", "\n", "            ", "self", ".", "num_node", "=", "18", "\n", "self", ".", "inward", "=", "[", "\n", "(", "4", ",", "3", ")", ",", "(", "3", ",", "2", ")", ",", "(", "7", ",", "6", ")", ",", "(", "6", ",", "5", ")", ",", "(", "13", ",", "12", ")", ",", "(", "12", ",", "11", ")", ",", "(", "10", ",", "9", ")", ",", "\n", "(", "9", ",", "8", ")", ",", "(", "11", ",", "5", ")", ",", "(", "8", ",", "2", ")", ",", "(", "5", ",", "1", ")", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ",", "(", "15", ",", "0", ")", ",", "\n", "(", "14", ",", "0", ")", ",", "(", "17", ",", "15", ")", ",", "(", "16", ",", "14", ")", "\n", "]", "\n", "self", ".", "center", "=", "1", "\n", "", "elif", "layout", "==", "'nturgb+d'", ":", "\n", "            ", "self", ".", "num_node", "=", "25", "\n", "neighbor_base", "=", "[", "\n", "(", "1", ",", "2", ")", ",", "(", "2", ",", "21", ")", ",", "(", "3", ",", "21", ")", ",", "(", "4", ",", "3", ")", ",", "(", "5", ",", "21", ")", ",", "(", "6", ",", "5", ")", ",", "(", "7", ",", "6", ")", ",", "\n", "(", "8", ",", "7", ")", ",", "(", "9", ",", "21", ")", ",", "(", "10", ",", "9", ")", ",", "(", "11", ",", "10", ")", ",", "(", "12", ",", "11", ")", ",", "(", "13", ",", "1", ")", ",", "\n", "(", "14", ",", "13", ")", ",", "(", "15", ",", "14", ")", ",", "(", "16", ",", "15", ")", ",", "(", "17", ",", "1", ")", ",", "(", "18", ",", "17", ")", ",", "(", "19", ",", "18", ")", ",", "\n", "(", "20", ",", "19", ")", ",", "(", "22", ",", "8", ")", ",", "(", "23", ",", "8", ")", ",", "(", "24", ",", "12", ")", ",", "(", "25", ",", "12", ")", "\n", "]", "\n", "self", ".", "inward", "=", "[", "(", "i", "-", "1", ",", "j", "-", "1", ")", "for", "(", "i", ",", "j", ")", "in", "neighbor_base", "]", "\n", "self", ".", "center", "=", "21", "-", "1", "\n", "", "elif", "layout", "==", "'coco'", ":", "\n", "            ", "self", ".", "num_node", "=", "17", "\n", "self", ".", "inward", "=", "[", "\n", "(", "15", ",", "13", ")", ",", "(", "13", ",", "11", ")", ",", "(", "16", ",", "14", ")", ",", "(", "14", ",", "12", ")", ",", "(", "11", ",", "5", ")", ",", "(", "12", ",", "6", ")", ",", "\n", "(", "9", ",", "7", ")", ",", "(", "7", ",", "5", ")", ",", "(", "10", ",", "8", ")", ",", "(", "8", ",", "6", ")", ",", "(", "5", ",", "0", ")", ",", "(", "6", ",", "0", ")", ",", "\n", "(", "1", ",", "0", ")", ",", "(", "3", ",", "1", ")", ",", "(", "2", ",", "0", ")", ",", "(", "4", ",", "2", ")", "\n", "]", "\n", "self", ".", "center", "=", "0", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Do Not Exist This Layout: {layout}'", ")", "\n", "", "self", ".", "self_link", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_node", ")", "]", "\n", "self", ".", "outward", "=", "[", "(", "j", ",", "i", ")", "for", "(", "i", ",", "j", ")", "in", "self", ".", "inward", "]", "\n", "self", ".", "neighbor", "=", "self", ".", "inward", "+", "self", ".", "outward", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.Graph.stgcn_spatial": [[121, 143], ["numpy.zeros", "graph.normalize_digraph", "range", "numpy.stack", "numpy.zeros", "numpy.zeros", "range", "A.append", "range", "A.append"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.normalize_digraph"], ["", "def", "stgcn_spatial", "(", "self", ")", ":", "\n", "        ", "adj", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_node", ",", "self", ".", "num_node", ")", ")", "\n", "adj", "[", "self", ".", "hop_dis", "<=", "self", ".", "max_hop", "]", "=", "1", "\n", "normalize_adj", "=", "normalize_digraph", "(", "adj", ")", "\n", "hop_dis", "=", "self", ".", "hop_dis", "\n", "center", "=", "self", ".", "center", "\n", "\n", "A", "=", "[", "]", "\n", "for", "hop", "in", "range", "(", "self", ".", "max_hop", "+", "1", ")", ":", "\n", "            ", "a_close", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_node", ",", "self", ".", "num_node", ")", ")", "\n", "a_further", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_node", ",", "self", ".", "num_node", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_node", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "num_node", ")", ":", "\n", "                    ", "if", "hop_dis", "[", "j", ",", "i", "]", "==", "hop", ":", "\n", "                        ", "if", "hop_dis", "[", "j", ",", "center", "]", ">=", "hop_dis", "[", "i", ",", "center", "]", ":", "\n", "                            ", "a_close", "[", "j", ",", "i", "]", "=", "normalize_adj", "[", "j", ",", "i", "]", "\n", "", "else", ":", "\n", "                            ", "a_further", "[", "j", ",", "i", "]", "=", "normalize_adj", "[", "j", ",", "i", "]", "\n", "", "", "", "", "A", ".", "append", "(", "a_close", ")", "\n", "if", "hop", ">", "0", ":", "\n", "                ", "A", ".", "append", "(", "a_further", ")", "\n", "", "", "return", "np", ".", "stack", "(", "A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.Graph.spatial": [[144, 150], ["graph.edge2mat", "graph.normalize_digraph", "graph.normalize_digraph", "numpy.stack", "graph.edge2mat", "graph.edge2mat"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.edge2mat", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.normalize_digraph", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.normalize_digraph", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.edge2mat", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.edge2mat"], ["", "def", "spatial", "(", "self", ")", ":", "\n", "        ", "Iden", "=", "edge2mat", "(", "self", ".", "self_link", ",", "self", ".", "num_node", ")", "\n", "In", "=", "normalize_digraph", "(", "edge2mat", "(", "self", ".", "inward", ",", "self", ".", "num_node", ")", ")", "\n", "Out", "=", "normalize_digraph", "(", "edge2mat", "(", "self", ".", "outward", ",", "self", ".", "num_node", ")", ")", "\n", "A", "=", "np", ".", "stack", "(", "(", "Iden", ",", "In", ",", "Out", ")", ")", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.Graph.binary_adj": [[151, 154], ["graph.edge2mat"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.edge2mat"], ["", "def", "binary_adj", "(", "self", ")", ":", "\n", "        ", "A", "=", "edge2mat", "(", "self", ".", "inward", "+", "self", ".", "outward", ",", "self", ".", "num_node", ")", "\n", "return", "A", "[", "None", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.k_adjacency": [[5, 17], ["isinstance", "isinstance", "numpy.eye", "A.data.cpu().numpy.data.cpu().numpy", "len", "numpy.minimum", "numpy.minimum", "numpy.linalg.matrix_power", "numpy.linalg.matrix_power", "A.data.cpu().numpy.data.cpu"], "function", ["None"], ["def", "k_adjacency", "(", "A", ",", "k", ",", "with_self", "=", "False", ",", "self_factor", "=", "1", ")", ":", "\n", "# A is a 2D square array", "\n", "    ", "if", "isinstance", "(", "A", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "A", "=", "A", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "assert", "isinstance", "(", "A", ",", "np", ".", "ndarray", ")", "\n", "Iden", "=", "np", ".", "eye", "(", "len", "(", "A", ")", ",", "dtype", "=", "A", ".", "dtype", ")", "\n", "if", "k", "==", "0", ":", "\n", "        ", "return", "Iden", "\n", "", "Ak", "=", "np", ".", "minimum", "(", "np", ".", "linalg", ".", "matrix_power", "(", "A", "+", "Iden", ",", "k", ")", ",", "1", ")", "-", "np", ".", "minimum", "(", "np", ".", "linalg", ".", "matrix_power", "(", "A", "+", "Iden", ",", "k", "-", "1", ")", ",", "1", ")", "\n", "if", "with_self", ":", "\n", "        ", "Ak", "+=", "(", "self_factor", "*", "Iden", ")", "\n", "", "return", "Ak", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.edge2mat": [[19, 24], ["numpy.zeros"], "function", ["None"], ["", "def", "edge2mat", "(", "link", ",", "num_node", ")", ":", "\n", "    ", "A", "=", "np", ".", "zeros", "(", "(", "num_node", ",", "num_node", ")", ")", "\n", "for", "i", ",", "j", "in", "link", ":", "\n", "        ", "A", "[", "j", ",", "i", "]", "=", "1", "\n", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.normalize_digraph": [[26, 38], ["numpy.sum", "numpy.zeros", "range", "numpy.dot"], "function", ["None"], ["", "def", "normalize_digraph", "(", "A", ",", "dim", "=", "0", ")", ":", "\n", "# A is a 2D square array", "\n", "    ", "Dl", "=", "np", ".", "sum", "(", "A", ",", "dim", ")", "\n", "h", ",", "w", "=", "A", ".", "shape", "\n", "Dn", "=", "np", ".", "zeros", "(", "(", "w", ",", "w", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "w", ")", ":", "\n", "        ", "if", "Dl", "[", "i", "]", ">", "0", ":", "\n", "            ", "Dn", "[", "i", ",", "i", "]", "=", "Dl", "[", "i", "]", "**", "(", "-", "1", ")", "\n", "\n", "", "", "AD", "=", "np", ".", "dot", "(", "A", ",", "Dn", ")", "\n", "return", "AD", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.get_hop_distance": [[40, 56], ["numpy.eye", "range", "numpy.zeros", "numpy.linalg.matrix_power", "numpy.stack", "range"], "function", ["None"], ["", "def", "get_hop_distance", "(", "num_node", ",", "edge", ",", "max_hop", "=", "1", ")", ":", "\n", "    ", "A", "=", "np", ".", "eye", "(", "num_node", ")", "\n", "\n", "for", "i", ",", "j", "in", "edge", ":", "\n", "        ", "A", "[", "i", ",", "j", "]", "=", "1", "\n", "A", "[", "j", ",", "i", "]", "=", "1", "\n", "\n", "# compute hop steps", "\n", "", "hop_dis", "=", "np", ".", "zeros", "(", "(", "num_node", ",", "num_node", ")", ")", "+", "np", ".", "inf", "\n", "transfer_mat", "=", "[", "\n", "np", ".", "linalg", ".", "matrix_power", "(", "A", ",", "d", ")", "for", "d", "in", "range", "(", "max_hop", "+", "1", ")", "\n", "]", "\n", "arrive_mat", "=", "(", "np", ".", "stack", "(", "transfer_mat", ")", ">", "0", ")", "\n", "for", "d", "in", "range", "(", "max_hop", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "hop_dis", "[", "arrive_mat", "[", "d", "]", "]", "=", "d", "\n", "", "return", "hop_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.mc_on": [[16, 20], ["os.system", "os.system"], "function", ["None"], ["def", "mc_on", "(", "port", "=", "22077", ",", "launcher", "=", "'pytorch'", ",", "size", "=", "24000", ")", ":", "\n", "# size is mb, allocate 24GB memory by default.", "\n", "    ", "mc_exe", "=", "'memcached'", "if", "launcher", "==", "'pytorch'", "else", "'/mnt/lustre/share/memcached/bin/memcached'", "\n", "os", ".", "system", "(", "f'{mc_exe} -p {port} -m {size}m -d'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.cache_file": [[22, 47], ["Client", "os.exists", "mmcv.load", "isinstance", "mmcv.load.items", "isinstance", "time.sleep", "misc.test_port", "Client.set", "Client", "Client.set"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.test_port"], ["", "def", "cache_file", "(", "arg_tuple", ")", ":", "\n", "    ", "mc_cfg", ",", "data_file", "=", "arg_tuple", "\n", "assert", "isinstance", "(", "mc_cfg", ",", "tuple", ")", "and", "mc_cfg", "[", "0", "]", "==", "'localhost'", "\n", "retry", "=", "3", "\n", "while", "not", "test_port", "(", "mc_cfg", "[", "0", "]", ",", "mc_cfg", "[", "1", "]", ")", "and", "retry", ">", "0", ":", "\n", "        ", "time", ".", "sleep", "(", "5", ")", "\n", "retry", "-=", "1", "\n", "", "assert", "retry", ">=", "0", ",", "'Failed to launch memcached. '", "\n", "from", "pymemcache", ".", "client", ".", "base", "import", "Client", "\n", "from", "pymemcache", "import", "serde", "\n", "\n", "cli", "=", "Client", "(", "mc_cfg", ",", "serde", "=", "serde", ".", "pickle_serde", ")", "\n", "\n", "assert", "osp", ".", "exists", "(", "data_file", ")", "\n", "kv_dict", "=", "load", "(", "data_file", ")", "\n", "if", "isinstance", "(", "kv_dict", ",", "list", ")", ":", "\n", "        ", "assert", "(", "'frame_dir'", "in", "kv_dict", "[", "0", "]", ")", "!=", "(", "'filename'", "in", "kv_dict", "[", "0", "]", ")", "\n", "key", "=", "'frame_dir'", "if", "'frame_dir'", "in", "kv_dict", "[", "0", "]", "else", "'filename'", "\n", "kv_dict", "=", "{", "x", "[", "key", "]", ":", "x", "for", "x", "in", "kv_dict", "}", "\n", "", "for", "k", ",", "v", "in", "kv_dict", ".", "items", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "cli", ".", "set", "(", "k", ",", "v", ")", "\n", "", "except", ":", "\n", "            ", "cli", "=", "Client", "(", "mc_cfg", ",", "serde", "=", "serde", ".", "pickle_serde", ")", "\n", "cli", ".", "set", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.mp_cache": [[49, 53], ["multiprocessing.Pool", "mp.Pool.map"], "function", ["None"], ["", "", "", "def", "mp_cache", "(", "mc_cfg", ",", "mc_list", ",", "num_proc", "=", "12", ")", ":", "\n", "    ", "args", "=", "[", "(", "mc_cfg", ",", "x", ")", "for", "x", "in", "mc_list", "]", "\n", "pool", "=", "mp", ".", "Pool", "(", "num_proc", ")", "\n", "pool", ".", "map", "(", "cache_file", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.mc_off": [[55, 57], ["os.system", "os.system"], "function", ["None"], ["", "def", "mc_off", "(", ")", ":", "\n", "    ", "os", ".", "system", "(", "'killall memcached'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.test_port": [[59, 68], ["socket.socket", "socket.socket.settimeout", "isinstance", "isinstance", "socket.socket.connect_ex", "int"], "function", ["None"], ["", "def", "test_port", "(", "ip", ",", "port", ")", ":", "\n", "    ", "sock", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "sock", ".", "settimeout", "(", "2", ")", "\n", "assert", "isinstance", "(", "ip", ",", "str", ")", "\n", "if", "isinstance", "(", "port", ",", "str", ")", ":", "\n", "        ", "port", "=", "int", "(", "port", ")", "\n", "", "assert", "1", "<=", "port", "<=", "65535", "\n", "result", "=", "sock", ".", "connect_ex", "(", "(", "ip", ",", "port", ")", ")", "\n", "return", "result", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.get_root_logger": [[70, 89], ["mmcv.utils.get_logger", "__name__.split"], "function", ["None"], ["", "def", "get_root_logger", "(", "log_file", "=", "None", ",", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"Use ``get_logger`` method in mmcv to get the root logger.\n\n    The logger will be initialized if it has not been initialized. By default a\n    StreamHandler will be added. If ``log_file`` is specified, a FileHandler\n    will also be added. The name of the root logger is the top-level package\n    name, e.g., \"pyskl\".\n\n    Args:\n        log_file (str | None): The log filename. If specified, a FileHandler\n            will be added to the root logger.\n        log_level (int): The root logger level. Note that only the process of\n            rank 0 is affected, while other processes will set the level to\n            \"Error\" and be silent most of the time.\n\n    Returns:\n        :obj:`logging.Logger`: The root logger.\n    \"\"\"", "\n", "return", "get_logger", "(", "__name__", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "log_file", ",", "log_level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.cache_checkpoint": [[91, 102], ["filename.startswith", "filename.startswith", "os.makedirs", "os.makedirs", "os.join", "filename.split", "filename.split", "hashlib.md5().hexdigest", "basename.replace", "os.exists", "smp.download_file", "hashlib.md5", "url.encode"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pyskl.smp.download_file"], ["", "def", "cache_checkpoint", "(", "filename", ",", "cache_dir", "=", "'.cache'", ")", ":", "\n", "    ", "if", "filename", ".", "startswith", "(", "'http://'", ")", "or", "filename", ".", "startswith", "(", "'https://'", ")", ":", "\n", "        ", "url", "=", "filename", ".", "split", "(", "'//'", ")", "[", "1", "]", "\n", "basename", "=", "filename", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filehash", "=", "hashlib", ".", "md5", "(", "url", ".", "encode", "(", "'utf8'", ")", ")", ".", "hexdigest", "(", ")", "[", "-", "8", ":", "]", "\n", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "local_pth", "=", "osp", ".", "join", "(", "cache_dir", ",", "basename", ".", "replace", "(", "'.pth'", ",", "f'_{filehash}.pth'", ")", ")", "\n", "if", "not", "osp", ".", "exists", "(", "local_pth", ")", ":", "\n", "            ", "download_file", "(", "filename", ",", "local_pth", ")", "\n", "", "filename", "=", "local_pth", "\n", "", "return", "filename", "\n", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.visualize.Vis3DPose.__init__": [[14, 57], ["enumerate", "max", "len", "min", "max", "min", "max", "min", "max", "numpy.array", "numpy.array", "numpy.array", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "item", ",", "layout", "=", "'nturgb+d'", ",", "fps", "=", "12", ",", "angle", "=", "(", "30", ",", "45", ")", ",", "fig_size", "=", "(", "8", ",", "8", ")", ",", "dpi", "=", "80", ")", ":", "\n", "        ", "kp", "=", "item", "[", "'keypoint'", "]", "\n", "self", ".", "kp", "=", "kp", "\n", "assert", "self", ".", "kp", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "self", ".", "layout", "=", "layout", "\n", "self", ".", "fps", "=", "fps", "\n", "self", ".", "angle", "=", "angle", "# For 3D data only", "\n", "self", ".", "colors", "=", "(", "'#3498db'", ",", "'#000000'", ",", "'#e74c3c'", ")", "# l, m, r", "\n", "self", ".", "fig_size", "=", "fig_size", "\n", "self", ".", "dpi", "=", "dpi", "\n", "\n", "assert", "layout", "==", "'nturgb+d'", "\n", "if", "self", ".", "layout", "==", "'nturgb+d'", ":", "\n", "            ", "self", ".", "num_joint", "=", "25", "\n", "self", ".", "links", "=", "np", ".", "array", "(", "[", "\n", "(", "1", ",", "2", ")", ",", "(", "2", ",", "21", ")", ",", "(", "3", ",", "21", ")", ",", "(", "4", ",", "3", ")", ",", "(", "5", ",", "21", ")", ",", "(", "6", ",", "5", ")", ",", "\n", "(", "7", ",", "6", ")", ",", "(", "8", ",", "7", ")", ",", "(", "9", ",", "21", ")", ",", "(", "10", ",", "9", ")", ",", "(", "11", ",", "10", ")", ",", "(", "12", ",", "11", ")", ",", "\n", "(", "13", ",", "1", ")", ",", "(", "14", ",", "13", ")", ",", "(", "15", ",", "14", ")", ",", "(", "16", ",", "15", ")", ",", "(", "17", ",", "1", ")", ",", "(", "18", ",", "17", ")", ",", "\n", "(", "19", ",", "18", ")", ",", "(", "20", ",", "19", ")", ",", "(", "22", ",", "8", ")", ",", "(", "23", ",", "8", ")", ",", "(", "24", ",", "12", ")", ",", "(", "25", ",", "12", ")", "]", ",", "dtype", "=", "np", ".", "int", ")", "-", "1", "\n", "self", ".", "left", "=", "np", ".", "array", "(", "[", "5", ",", "6", ",", "7", ",", "8", ",", "13", ",", "14", ",", "15", ",", "16", ",", "22", ",", "23", "]", ",", "dtype", "=", "np", ".", "int", ")", "-", "1", "\n", "self", ".", "right", "=", "np", ".", "array", "(", "[", "9", ",", "10", ",", "11", ",", "12", ",", "17", ",", "18", ",", "19", ",", "20", ",", "24", ",", "25", "]", ",", "dtype", "=", "np", ".", "int", ")", "-", "1", "\n", "self", ".", "num_link", "=", "len", "(", "self", ".", "links", ")", "\n", "", "self", ".", "limb_tag", "=", "[", "1", "]", "*", "self", ".", "num_link", "\n", "\n", "for", "i", ",", "link", "in", "enumerate", "(", "self", ".", "links", ")", ":", "\n", "            ", "if", "link", "[", "0", "]", "in", "self", ".", "left", "or", "link", "[", "1", "]", "in", "self", ".", "left", ":", "\n", "                ", "self", ".", "limb_tag", "[", "i", "]", "=", "0", "\n", "", "elif", "link", "[", "0", "]", "in", "self", ".", "right", "or", "link", "[", "1", "]", "in", "self", ".", "right", ":", "\n", "                ", "self", ".", "limb_tag", "[", "i", "]", "=", "2", "\n", "\n", "", "", "assert", "len", "(", "kp", ".", "shape", ")", "==", "4", "and", "kp", ".", "shape", "[", "3", "]", "==", "3", "and", "kp", ".", "shape", "[", "2", "]", "==", "self", ".", "num_joint", "\n", "x", ",", "y", ",", "z", "=", "kp", "[", "...", ",", "0", "]", ",", "kp", "[", "...", ",", "1", "]", ",", "kp", "[", "...", ",", "2", "]", "\n", "\n", "min_x", ",", "max_x", "=", "min", "(", "x", "[", "x", "!=", "0", "]", ")", ",", "max", "(", "x", "[", "x", "!=", "0", "]", ")", "\n", "min_y", ",", "max_y", "=", "min", "(", "y", "[", "y", "!=", "0", "]", ")", ",", "max", "(", "y", "[", "y", "!=", "0", "]", ")", "\n", "min_z", ",", "max_z", "=", "min", "(", "z", "[", "z", "!=", "0", "]", ")", ",", "max", "(", "z", "[", "z", "!=", "0", "]", ")", "\n", "max_axis", "=", "max", "(", "max_x", "-", "min_x", ",", "max_y", "-", "min_y", ",", "max_z", "-", "min_z", ")", "\n", "mid_x", ",", "mid_y", ",", "mid_z", "=", "(", "min_x", "+", "max_x", ")", "/", "2", ",", "(", "min_y", "+", "max_y", ")", "/", "2", ",", "(", "min_z", "+", "max_z", ")", "/", "2", "\n", "self", ".", "min_x", ",", "self", ".", "max_x", "=", "mid_x", "-", "max_axis", "/", "2", ",", "mid_x", "+", "max_axis", "/", "2", "\n", "self", ".", "min_y", ",", "self", ".", "max_y", "=", "mid_y", "-", "max_axis", "/", "2", ",", "mid_y", "+", "max_axis", "/", "2", "\n", "self", ".", "min_z", ",", "self", ".", "max_z", "=", "mid_z", "-", "max_axis", "/", "2", ",", "mid_z", "+", "max_axis", "/", "2", "\n", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.visualize.Vis3DPose.get_img": [[58, 65], ["io.BytesIO", "matplotlib.savefig", "io.BytesIO.seek", "numpy.frombuffer", "io.BytesIO.close", "cv2.imdecode", "io.BytesIO.getvalue"], "methods", ["None"], ["", "def", "get_img", "(", "self", ",", "dpi", "=", "80", ")", ":", "\n", "        ", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "plt", ".", "savefig", "(", "buf", ",", "format", "=", "'png'", ",", "dpi", "=", "dpi", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "img", "=", "np", ".", "frombuffer", "(", "buf", ".", "getvalue", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "buf", ".", "close", "(", ")", "\n", "return", "cv2", ".", "imdecode", "(", "img", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.visualize.Vis3DPose.vis": [[66, 86], ["matplotlib.figure", "range", "moviepy.ImageSequenceClip", "matplotlib.gca", "matplotlib.gca.set_xlim3d", "matplotlib.gca.set_ylim3d", "matplotlib.gca.set_zlim3d", "matplotlib.gca.view_init", "matplotlib.gca.set_aspect", "range", "visualize.Vis3DPose.images.append", "matplotlib.gca.cla", "range", "visualize.Vis3DPose.get_img", "matplotlib.gca.plot", "numpy.allclose", "numpy.allclose"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.visualize.Vis3DPose.get_img"], ["", "def", "vis", "(", "self", ")", ":", "\n", "        ", "self", ".", "images", "=", "[", "]", "\n", "plt", ".", "figure", "(", "figsize", "=", "self", ".", "fig_size", ")", "\n", "for", "t", "in", "range", "(", "self", ".", "kp", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "ax", "=", "plt", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "ax", ".", "set_xlim3d", "(", "[", "self", ".", "min_x", ",", "self", ".", "max_x", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "self", ".", "min_y", ",", "self", ".", "max_y", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "self", ".", "min_z", ",", "self", ".", "max_z", "]", ")", "\n", "ax", ".", "view_init", "(", "*", "self", ".", "angle", ")", "\n", "ax", ".", "set_aspect", "(", "'auto'", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_link", ")", ":", "\n", "                ", "for", "m", "in", "range", "(", "self", ".", "kp", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "link", "=", "self", ".", "links", "[", "i", "]", "\n", "color", "=", "self", ".", "colors", "[", "self", ".", "limb_tag", "[", "i", "]", "]", "\n", "j1", ",", "j2", "=", "self", ".", "kp", "[", "m", ",", "t", ",", "link", "[", "0", "]", "]", ",", "self", ".", "kp", "[", "m", ",", "t", ",", "link", "[", "1", "]", "]", "\n", "if", "not", "(", "(", "np", ".", "allclose", "(", "j1", ",", "0", ")", "or", "np", ".", "allclose", "(", "j2", ",", "0", ")", ")", "and", "link", "[", "0", "]", "!=", "1", "and", "link", "[", "1", "]", "!=", "1", ")", ":", "\n", "                        ", "ax", ".", "plot", "(", "[", "j1", "[", "0", "]", ",", "j2", "[", "0", "]", "]", ",", "[", "j1", "[", "1", "]", ",", "j2", "[", "1", "]", "]", ",", "[", "j1", "[", "2", "]", ",", "j2", "[", "2", "]", "]", ",", "lw", "=", "1", ",", "c", "=", "color", ")", "\n", "", "", "", "self", ".", "images", ".", "append", "(", "self", ".", "get_img", "(", "dpi", "=", "self", ".", "dpi", ")", ")", "\n", "ax", ".", "cla", "(", ")", "\n", "", "return", "mpy", ".", "ImageSequenceClip", "(", "self", ".", "images", ",", "fps", "=", "self", ".", "fps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.visualize.Vis2DPose": [[88, 144], ["isinstance", "mmcv.load.get", "mmcv.load.get", "tqdm.tqdm", "moviepy.ImageSequenceClip", "mmcv.load", "numpy.concatenate", "decord.VideoReader", "range", "range", "x.asnumpy", "cv2.resize", "len", "numpy.ones", "range", "min", "range", "int", "int", "int", "int", "tuple", "cv2.line", "int", "zip", "int", "len"], "function", ["None"], ["", "", "def", "Vis2DPose", "(", "item", ",", "thre", "=", "0.2", ",", "out_shape", "=", "(", "540", ",", "960", ")", ",", "layout", "=", "'coco'", ",", "fps", "=", "24", ",", "video", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "        ", "item", "=", "load", "(", "item", ")", "\n", "\n", "", "assert", "layout", "==", "'coco'", "\n", "\n", "kp", "=", "item", "[", "'keypoint'", "]", "\n", "if", "'keypoint_score'", "in", "item", ":", "\n", "        ", "kpscore", "=", "item", "[", "'keypoint_score'", "]", "\n", "kp", "=", "np", ".", "concatenate", "(", "[", "kp", ",", "kpscore", "[", "...", ",", "None", "]", "]", ",", "-", "1", ")", "\n", "\n", "", "assert", "kp", ".", "shape", "[", "-", "1", "]", "==", "3", "\n", "img_shape", "=", "item", ".", "get", "(", "'img_shape'", ",", "out_shape", ")", "\n", "kp", "[", "...", ",", "0", "]", "*=", "out_shape", "[", "1", "]", "/", "img_shape", "[", "1", "]", "\n", "kp", "[", "...", ",", "1", "]", "*=", "out_shape", "[", "0", "]", "/", "img_shape", "[", "0", "]", "\n", "\n", "total_frames", "=", "item", ".", "get", "(", "'total_frames'", ",", "kp", ".", "shape", "[", "1", "]", ")", "\n", "assert", "total_frames", "==", "kp", ".", "shape", "[", "1", "]", "\n", "\n", "if", "video", "is", "None", ":", "\n", "        ", "frames", "=", "[", "np", ".", "ones", "(", "[", "out_shape", "[", "0", "]", ",", "out_shape", "[", "1", "]", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "for", "i", "in", "range", "(", "total_frames", ")", "]", "\n", "", "else", ":", "\n", "        ", "vid", "=", "decord", ".", "VideoReader", "(", "video", ")", "\n", "frames", "=", "[", "x", ".", "asnumpy", "(", ")", "for", "x", "in", "vid", "]", "\n", "frames", "=", "[", "cv2", ".", "resize", "(", "x", ",", "(", "out_shape", "[", "1", "]", ",", "out_shape", "[", "0", "]", ")", ")", "for", "x", "in", "frames", "]", "\n", "if", "len", "(", "frames", ")", "!=", "total_frames", ":", "\n", "            ", "frames", "=", "[", "frames", "[", "int", "(", "i", "/", "total_frames", "*", "len", "(", "frames", ")", ")", "]", "for", "i", "in", "range", "(", "total_frames", ")", "]", "\n", "\n", "", "", "if", "layout", "==", "'coco'", ":", "\n", "        ", "edges", "=", "[", "\n", "(", "0", ",", "1", ",", "'f'", ")", ",", "(", "0", ",", "2", ",", "'f'", ")", ",", "(", "1", ",", "3", ",", "'f'", ")", ",", "(", "2", ",", "4", ",", "'f'", ")", ",", "(", "0", ",", "5", ",", "'t'", ")", ",", "(", "0", ",", "6", ",", "'t'", ")", ",", "\n", "(", "5", ",", "7", ",", "'ru'", ")", ",", "(", "6", ",", "8", ",", "'lu'", ")", ",", "(", "7", ",", "9", ",", "'ru'", ")", ",", "(", "8", ",", "10", ",", "'lu'", ")", ",", "(", "5", ",", "11", ",", "'t'", ")", ",", "(", "6", ",", "12", ",", "'t'", ")", ",", "\n", "(", "11", ",", "13", ",", "'ld'", ")", ",", "(", "12", ",", "14", ",", "'rd'", ")", ",", "(", "13", ",", "15", ",", "'ld'", ")", ",", "(", "14", ",", "16", ",", "'rd'", ")", "\n", "]", "\n", "", "color_map", "=", "{", "\n", "'ru'", ":", "(", "(", "0", ",", "0x96", ",", "0xc7", ")", ",", "(", "0x3", ",", "0x4", ",", "0x5e", ")", ")", ",", "\n", "'rd'", ":", "(", "(", "0xca", ",", "0xf0", ",", "0xf8", ")", ",", "(", "0x48", ",", "0xca", ",", "0xe4", ")", ")", ",", "\n", "'lu'", ":", "(", "(", "0x9d", ",", "0x2", ",", "0x8", ")", ",", "(", "0x3", ",", "0x7", ",", "0x1e", ")", ")", ",", "\n", "'ld'", ":", "(", "(", "0xff", ",", "0xba", ",", "0x8", ")", ",", "(", "0xe8", ",", "0x5d", ",", "0x4", ")", ")", ",", "\n", "'t'", ":", "(", "(", "0xee", ",", "0x8b", ",", "0x98", ")", ",", "(", "0xd9", ",", "0x4", ",", "0x29", ")", ")", ",", "\n", "'f'", ":", "(", "(", "0x8d", ",", "0x99", ",", "0xae", ")", ",", "(", "0x2b", ",", "0x2d", ",", "0x42", ")", ")", "}", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "total_frames", ")", ")", ":", "\n", "        ", "for", "m", "in", "range", "(", "kp", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ske", "=", "kp", "[", "m", ",", "i", "]", "\n", "for", "e", "in", "edges", ":", "\n", "                ", "st", ",", "ed", ",", "co", "=", "e", "\n", "co_tup", "=", "color_map", "[", "co", "]", "\n", "j1", ",", "j2", "=", "ske", "[", "st", "]", ",", "ske", "[", "ed", "]", "\n", "j1x", ",", "j1y", ",", "j2x", ",", "j2y", "=", "int", "(", "j1", "[", "0", "]", ")", ",", "int", "(", "j1", "[", "1", "]", ")", ",", "int", "(", "j2", "[", "0", "]", ")", ",", "int", "(", "j2", "[", "1", "]", ")", "\n", "conf", "=", "min", "(", "j1", "[", "2", "]", ",", "j2", "[", "2", "]", ")", "\n", "if", "conf", ">", "thre", ":", "\n", "                    ", "color", "=", "[", "x", "+", "(", "y", "-", "x", ")", "*", "(", "conf", "-", "thre", ")", "/", "0.8", "for", "x", ",", "y", "in", "zip", "(", "co_tup", "[", "0", "]", ",", "co_tup", "[", "1", "]", ")", "]", "\n", "color", "=", "tuple", "(", "[", "int", "(", "x", ")", "for", "x", "in", "color", "]", ")", "\n", "frames", "[", "i", "]", "=", "cv2", ".", "line", "(", "frames", "[", "i", "]", ",", "(", "j1x", ",", "j1y", ")", ",", "(", "j2x", ",", "j2y", ")", ",", "color", ",", "thickness", "=", "2", ")", "\n", "", "", "", "", "return", "mpy", ".", "ImageSequenceClip", "(", "frames", ",", "fps", "=", "fps", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.collect_env.collect_env": [[8, 13], ["mmcv.utils.collect_env", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.collect_env.collect_env"], ["def", "collect_env", "(", ")", ":", "\n", "    ", "env_info", "=", "collect_basic_env", "(", ")", "\n", "env_info", "[", "'pyskl'", "]", "=", "(", "\n", "pyskl", ".", "__version__", "+", "'+'", "+", "get_git_hash", "(", "digits", "=", "7", ")", ")", "\n", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.conv_branch_init": [[6, 13], ["weight.size", "weight.size", "weight.size", "torch.init.normal_", "torch.init.constant_", "math.sqrt"], "function", ["None"], ["def", "conv_branch_init", "(", "conv", ",", "branches", ")", ":", "\n", "    ", "weight", "=", "conv", ".", "weight", "\n", "n", "=", "weight", ".", "size", "(", "0", ")", "\n", "k1", "=", "weight", ".", "size", "(", "1", ")", "\n", "k2", "=", "weight", ".", "size", "(", "2", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "weight", ",", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "(", "n", "*", "k1", "*", "k2", "*", "branches", ")", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "conv", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.conv_init": [[15, 18], ["torch.init.kaiming_normal_", "torch.init.constant_"], "function", ["None"], ["", "def", "conv_init", "(", "conv", ")", ":", "\n", "    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "conv", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "conv", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.bn_init": [[20, 23], ["torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["", "def", "bn_init", "(", "bn", ",", "scale", ")", ":", "\n", "    ", "nn", ".", "init", ".", "constant_", "(", "bn", ".", "weight", ",", "scale", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "bn", ".", "bias", ",", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.unit_gcn.__init__": [[12, 61], ["torch.Module.__init__", "A.size", "mmcv.cnn.build_activation_layer", "isinstance", "dict", "isinstance", "dict", "mmcv.cnn.build_norm_layer", "torch.Parameter", "torch.Parameter", "gcn.unit_gcn.register_buffer", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "A.clone", "A.clone", "torch.init.uniform_", "torch.init.uniform_", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "A.size", "torch.Conv2d", "torch.Conv2d", "A.size", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "A", ",", "\n", "adaptive", "=", "'importance'", ",", "\n", "conv_pos", "=", "'pre'", ",", "\n", "with_res", "=", "False", ",", "\n", "norm", "=", "'BN'", ",", "\n", "act", "=", "'ReLU'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_subsets", "=", "A", ".", "size", "(", "0", ")", "\n", "\n", "assert", "adaptive", "in", "[", "None", ",", "'init'", ",", "'offset'", ",", "'importance'", "]", "\n", "self", ".", "adaptive", "=", "adaptive", "\n", "assert", "conv_pos", "in", "[", "'pre'", ",", "'post'", "]", "\n", "self", ".", "conv_pos", "=", "conv_pos", "\n", "self", ".", "with_res", "=", "with_res", "\n", "\n", "self", ".", "norm_cfg", "=", "norm", "if", "isinstance", "(", "norm", ",", "dict", ")", "else", "dict", "(", "type", "=", "norm", ")", "\n", "self", ".", "act_cfg", "=", "act", "if", "isinstance", "(", "act", ",", "dict", ")", "else", "dict", "(", "type", "=", "act", ")", "\n", "self", ".", "bn", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "out_channels", ")", "[", "1", "]", "\n", "self", ".", "act", "=", "build_activation_layer", "(", "self", ".", "act_cfg", ")", "\n", "\n", "if", "self", ".", "adaptive", "==", "'init'", ":", "\n", "            ", "self", ".", "A", "=", "nn", ".", "Parameter", "(", "A", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'A'", ",", "A", ")", "\n", "\n", "", "if", "self", ".", "adaptive", "in", "[", "'offset'", ",", "'importance'", "]", ":", "\n", "            ", "self", ".", "PA", "=", "nn", ".", "Parameter", "(", "A", ".", "clone", "(", ")", ")", "\n", "if", "self", ".", "adaptive", "==", "'offset'", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "PA", ",", "-", "1e-6", ",", "1e-6", ")", "\n", "", "elif", "self", ".", "adaptive", "==", "'importance'", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "PA", ",", "1", ")", "\n", "\n", "", "", "if", "self", ".", "conv_pos", "==", "'pre'", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", "*", "A", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "", "elif", "self", ".", "conv_pos", "==", "'post'", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "A", ".", "size", "(", "0", ")", "*", "in_channels", ",", "out_channels", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "with_res", ":", "\n", "            ", "if", "in_channels", "!=", "out_channels", ":", "\n", "                ", "self", ".", "down", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "out_channels", ")", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "down", "=", "lambda", "x", ":", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.unit_gcn.forward": [[62, 82], ["hasattr", "gcn.unit_gcn.act", "gcn.unit_gcn.down", "A_switch.update", "gcn.unit_gcn.conv", "gcn.unit_gcn.view", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "gcn.unit_gcn.view", "gcn.unit_gcn.conv", "gcn.unit_gcn.bn", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "A", "=", "None", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\"\"\"", "\n", "n", ",", "c", ",", "t", ",", "v", "=", "x", ".", "shape", "\n", "res", "=", "self", ".", "down", "(", "x", ")", "if", "self", ".", "with_res", "else", "0", "\n", "\n", "A_switch", "=", "{", "None", ":", "self", ".", "A", ",", "'init'", ":", "self", ".", "A", "}", "\n", "if", "hasattr", "(", "self", ",", "'PA'", ")", ":", "\n", "            ", "A_switch", ".", "update", "(", "{", "'offset'", ":", "self", ".", "A", "+", "self", ".", "PA", ",", "'importance'", ":", "self", ".", "A", "*", "self", ".", "PA", "}", ")", "\n", "", "A", "=", "A_switch", "[", "self", ".", "adaptive", "]", "\n", "\n", "if", "self", ".", "conv_pos", "==", "'pre'", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "n", ",", "self", ".", "num_subsets", ",", "-", "1", ",", "t", ",", "v", ")", "\n", "x", "=", "torch", ".", "einsum", "(", "'nkctv,kvw->nctw'", ",", "(", "x", ",", "A", ")", ")", ".", "contiguous", "(", ")", "\n", "", "elif", "self", ".", "conv_pos", "==", "'post'", ":", "\n", "            ", "x", "=", "torch", ".", "einsum", "(", "'nctv,kvw->nkctw'", ",", "(", "x", ",", "A", ")", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "n", ",", "-", "1", ",", "t", ",", "v", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "act", "(", "self", ".", "bn", "(", "x", ")", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.unit_gcn.init_weights": [[83, 85], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.unit_aagcn.__init__": [[88, 138], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Tanh", "torch.Tanh", "torch.Sigmoid", "torch.Sigmoid", "torch.ReLU", "torch.ReLU", "gcn.unit_aagcn.conv_d.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "gcn.unit_aagcn.register_buffer", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "gcn.unit_aagcn.conv_a.append", "gcn.unit_aagcn.conv_b.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "A", ",", "coff_embedding", "=", "4", ",", "adaptive", "=", "True", ",", "attention", "=", "True", ")", ":", "\n", "        ", "super", "(", "unit_aagcn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_channels", "=", "out_channels", "//", "coff_embedding", "\n", "self", ".", "inter_c", "=", "inter_channels", "\n", "self", ".", "out_c", "=", "out_channels", "\n", "self", ".", "in_c", "=", "in_channels", "\n", "self", ".", "num_subset", "=", "A", ".", "shape", "[", "0", "]", "\n", "self", ".", "adaptive", "=", "adaptive", "\n", "self", ".", "attention", "=", "attention", "\n", "\n", "num_joints", "=", "A", ".", "shape", "[", "-", "1", "]", "\n", "\n", "self", ".", "conv_d", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_subset", ")", ":", "\n", "            ", "self", ".", "conv_d", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ")", ")", "\n", "\n", "", "if", "self", ".", "adaptive", ":", "\n", "            ", "self", ".", "A", "=", "nn", ".", "Parameter", "(", "A", ")", "\n", "\n", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv_a", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "conv_b", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_subset", ")", ":", "\n", "                ", "self", ".", "conv_a", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "inter_channels", ",", "1", ")", ")", "\n", "self", ".", "conv_b", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "inter_channels", ",", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'A'", ",", "A", ")", "\n", "\n", "", "if", "self", ".", "attention", ":", "\n", "            ", "self", ".", "conv_ta", "=", "nn", ".", "Conv1d", "(", "out_channels", ",", "1", ",", "9", ",", "padding", "=", "4", ")", "\n", "# s attention", "\n", "ker_joint", "=", "num_joints", "if", "num_joints", "%", "2", "else", "num_joints", "-", "1", "\n", "pad", "=", "(", "ker_joint", "-", "1", ")", "//", "2", "\n", "self", ".", "conv_sa", "=", "nn", ".", "Conv1d", "(", "out_channels", ",", "1", ",", "ker_joint", ",", "padding", "=", "pad", ")", "\n", "# channel attention", "\n", "rr", "=", "2", "\n", "self", ".", "fc1c", "=", "nn", ".", "Linear", "(", "out_channels", ",", "out_channels", "//", "rr", ")", "\n", "self", ".", "fc2c", "=", "nn", ".", "Linear", "(", "out_channels", "//", "rr", ",", "out_channels", ")", "\n", "\n", "", "self", ".", "down", "=", "lambda", "x", ":", "x", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "down", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", ")", "\n", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "tan", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.unit_aagcn.init_weights": [[139, 160], ["gcn.unit_aagcn.modules", "init_func.bn_init", "range", "isinstance", "init_func.conv_branch_init", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "init_func.conv_init", "isinstance", "init_func.bn_init"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.bn_init", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.conv_branch_init", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.conv_init", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.bn_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "conv_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "bn_init", "(", "m", ",", "1", ")", "\n", "", "", "bn_init", "(", "self", ".", "bn", ",", "1e-6", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_subset", ")", ":", "\n", "            ", "conv_branch_init", "(", "self", ".", "conv_d", "[", "i", "]", ",", "self", ".", "num_subset", ")", "\n", "\n", "", "if", "self", ".", "attention", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_ta", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_ta", ".", "bias", ",", "0", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv_sa", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_sa", ".", "bias", ",", "0", ")", "\n", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "fc1c", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc1c", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc2c", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc2c", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.unit_aagcn.forward": [[161, 199], ["x.size", "gcn.unit_aagcn.relu", "range", "range", "gcn.unit_aagcn.mean", "gcn.unit_aagcn.sigmoid", "gcn.unit_aagcn.mean", "gcn.unit_aagcn.sigmoid", "gcn.unit_aagcn.mean().mean", "gcn.unit_aagcn.relu", "gcn.unit_aagcn.sigmoid", "gcn.unit_aagcn.tan", "x.view", "x.view", "gcn.unit_aagcn.bn", "gcn.unit_aagcn.down", "gcn.unit_aagcn.conv_sa", "gcn.unit_aagcn.conv_ta", "gcn.unit_aagcn.fc1c", "gcn.unit_aagcn.fc2c", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "gcn.unit_aagcn.unsqueeze", "gcn.unit_aagcn.unsqueeze", "gcn.unit_aagcn.mean", "gcn.unit_aagcn.unsqueeze().unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "gcn.unit_aagcn.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "gcn.unit_aagcn.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "T", ",", "V", "=", "x", ".", "size", "(", ")", "\n", "\n", "y", "=", "None", "\n", "if", "self", ".", "adaptive", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_subset", ")", ":", "\n", "                ", "A1", "=", "self", ".", "conv_a", "[", "i", "]", "(", "x", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "V", ",", "self", ".", "inter_c", "*", "T", ")", "\n", "A2", "=", "self", ".", "conv_b", "[", "i", "]", "(", "x", ")", ".", "view", "(", "N", ",", "self", ".", "inter_c", "*", "T", ",", "V", ")", "\n", "A1", "=", "self", ".", "tan", "(", "torch", ".", "matmul", "(", "A1", ",", "A2", ")", "/", "A1", ".", "size", "(", "-", "1", ")", ")", "# N V V", "\n", "A1", "=", "self", ".", "A", "[", "i", "]", "+", "A1", "*", "self", ".", "alpha", "\n", "A2", "=", "x", ".", "view", "(", "N", ",", "C", "*", "T", ",", "V", ")", "\n", "z", "=", "self", ".", "conv_d", "[", "i", "]", "(", "torch", ".", "matmul", "(", "A2", ",", "A1", ")", ".", "view", "(", "N", ",", "C", ",", "T", ",", "V", ")", ")", "\n", "y", "=", "z", "+", "y", "if", "y", "is", "not", "None", "else", "z", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_subset", ")", ":", "\n", "                ", "A1", "=", "self", ".", "A", "[", "i", "]", "\n", "A2", "=", "x", ".", "view", "(", "N", ",", "C", "*", "T", ",", "V", ")", "\n", "z", "=", "self", ".", "conv_d", "[", "i", "]", "(", "torch", ".", "matmul", "(", "A2", ",", "A1", ")", ".", "view", "(", "N", ",", "C", ",", "T", ",", "V", ")", ")", "\n", "y", "=", "z", "+", "y", "if", "y", "is", "not", "None", "else", "z", "\n", "\n", "", "", "y", "=", "self", ".", "relu", "(", "self", ".", "bn", "(", "y", ")", "+", "self", ".", "down", "(", "x", ")", ")", "\n", "\n", "if", "self", ".", "attention", ":", "\n", "# spatial attention first", "\n", "            ", "se", "=", "y", ".", "mean", "(", "-", "2", ")", "# N C V", "\n", "se1", "=", "self", ".", "sigmoid", "(", "self", ".", "conv_sa", "(", "se", ")", ")", "# N 1 V", "\n", "y", "=", "y", "*", "se1", ".", "unsqueeze", "(", "-", "2", ")", "+", "y", "\n", "# then temporal attention", "\n", "se", "=", "y", ".", "mean", "(", "-", "1", ")", "# N C T", "\n", "se1", "=", "self", ".", "sigmoid", "(", "self", ".", "conv_ta", "(", "se", ")", ")", "# N 1 T", "\n", "y", "=", "y", "*", "se1", ".", "unsqueeze", "(", "-", "1", ")", "+", "y", "\n", "# then spatial temporal attention ??", "\n", "se", "=", "y", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "# N C", "\n", "se1", "=", "self", ".", "relu", "(", "self", ".", "fc1c", "(", "se", ")", ")", "\n", "se2", "=", "self", ".", "sigmoid", "(", "self", ".", "fc2c", "(", "se1", ")", ")", "# N C", "\n", "y", "=", "y", "*", "se2", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "+", "y", "\n", "# A little bit weird", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.CTRGC.__init__": [[202, 216], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "gcn.CTRGC.init_weights"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__", "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "rel_reduction", "=", "8", ")", ":", "\n", "        ", "super", "(", "CTRGC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "if", "in_channels", "<=", "16", ":", "\n", "            ", "self", ".", "rel_channels", "=", "8", "\n", "", "else", ":", "\n", "            ", "self", ".", "rel_channels", "=", "in_channels", "//", "rel_reduction", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "rel_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "rel_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "self", ".", "rel_channels", ",", "self", ".", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.CTRGC.forward": [[217, 227], ["gcn.CTRGC.tanh", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "gcn.CTRGC.conv1().mean", "gcn.CTRGC.conv2().mean", "gcn.CTRGC.conv3", "torch.einsum.unsqueeze", "torch.einsum.unsqueeze", "x2.unsqueeze", "gcn.CTRGC.conv4", "gcn.CTRGC.conv1", "gcn.CTRGC.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "A", "=", "None", ",", "alpha", "=", "1", ")", ":", "\n", "# Input: N, C, T, V", "\n", "        ", "x1", ",", "x2", ",", "x3", "=", "self", ".", "conv1", "(", "x", ")", ".", "mean", "(", "-", "2", ")", ",", "self", ".", "conv2", "(", "x", ")", ".", "mean", "(", "-", "2", ")", ",", "self", ".", "conv3", "(", "x", ")", "\n", "# X1, X2: N, R, V", "\n", "# N, R, V, 1 - N, R, 1, V", "\n", "x1", "=", "self", ".", "tanh", "(", "x1", ".", "unsqueeze", "(", "-", "1", ")", "-", "x2", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "# N, R, V, V", "\n", "x1", "=", "self", ".", "conv4", "(", "x1", ")", "*", "alpha", "+", "(", "A", "[", "None", ",", "None", "]", "if", "A", "is", "not", "None", "else", "0", ")", "# N,C,V,V", "\n", "x1", "=", "torch", ".", "einsum", "(", "'ncuv,nctu->nctv'", ",", "x1", ",", "x3", ")", "\n", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.CTRGC.init_weights": [[228, 234], ["gcn.CTRGC.modules", "isinstance", "init_func.conv_init", "isinstance", "init_func.bn_init"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.conv_init", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.bn_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "conv_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "bn_init", "(", "m", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.unit_ctrgcn.__init__": [[237, 265], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Softmax", "torch.Softmax", "torch.ReLU", "torch.ReLU", "gcn.unit_ctrgcn.convs.append", "torch.Sequential", "torch.Sequential", "A.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "gcn.CTRGC", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "A", ")", ":", "\n", "\n", "        ", "super", "(", "unit_ctrgcn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_channels", "=", "out_channels", "//", "4", "\n", "self", ".", "inter_c", "=", "inter_channels", "\n", "self", ".", "out_c", "=", "out_channels", "\n", "self", ".", "in_c", "=", "in_channels", "\n", "\n", "self", ".", "num_subset", "=", "A", ".", "shape", "[", "0", "]", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_subset", ")", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "CTRGC", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "down", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "down", "=", "lambda", "x", ":", "x", "\n", "\n", "", "self", ".", "A", "=", "nn", ".", "Parameter", "(", "A", ".", "clone", "(", ")", ")", "\n", "\n", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "soft", "=", "nn", ".", "Softmax", "(", "-", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.unit_ctrgcn.forward": [[266, 276], ["range", "gcn.unit_ctrgcn.bn", "gcn.unit_ctrgcn.down", "gcn.unit_ctrgcn.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_subset", ")", ":", "\n", "            ", "z", "=", "self", ".", "convs", "[", "i", "]", "(", "x", ",", "self", ".", "A", "[", "i", "]", ",", "self", ".", "alpha", ")", "\n", "y", "=", "z", "+", "y", "if", "y", "is", "not", "None", "else", "z", "\n", "\n", "", "y", "=", "self", ".", "bn", "(", "y", ")", "\n", "y", "+=", "self", ".", "down", "(", "x", ")", "\n", "return", "self", ".", "relu", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.unit_ctrgcn.init_weights": [[277, 284], ["gcn.unit_ctrgcn.modules", "init_func.bn_init", "isinstance", "init_func.conv_init", "isinstance", "init_func.bn_init"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.bn_init", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.conv_init", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.bn_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "conv_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "bn_init", "(", "m", ",", "1", ")", "\n", "", "", "bn_init", "(", "self", ".", "bn", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.unit_sgn.__init__": [[287, 293], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "residual", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.gcn.unit_sgn.forward": [[294, 299], ["x.permute().contiguous", "A.matmul().permute().contiguous", "gcn.unit_sgn.relu", "gcn.unit_sgn.bn", "x.permute", "A.matmul().permute", "gcn.unit_sgn.conv", "gcn.unit_sgn.residual", "A.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "A", ")", ":", "\n", "# x: N, C, T, V; A: N, T, V, V", "\n", "        ", "x1", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x1", "=", "A", ".", "matmul", "(", "x1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "self", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x1", ")", "+", "self", ".", "residual", "(", "x", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.tcn.unit_tcn.__init__": [[10, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "isinstance", "dict", "torch.Identity", "torch.Identity", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "9", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "norm", "=", "'BN'", ",", "dropout", "=", "0", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "norm_cfg", "=", "norm", "if", "isinstance", "(", "norm", ",", "dict", ")", "else", "dict", "(", "type", "=", "norm", ")", "\n", "pad", "=", "(", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "dilation", "-", "1", ")", "-", "1", ")", "//", "2", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "(", "kernel_size", ",", "1", ")", ",", "\n", "padding", "=", "(", "pad", ",", "0", ")", ",", "\n", "stride", "=", "(", "stride", ",", "1", ")", ",", "\n", "dilation", "=", "(", "dilation", ",", "1", ")", ")", "\n", "self", ".", "bn", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "out_channels", ")", "[", "1", "]", "if", "norm", "is", "not", "None", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ",", "inplace", "=", "True", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.tcn.unit_tcn.forward": [[30, 32], ["tcn.unit_tcn.drop", "tcn.unit_tcn.bn", "tcn.unit_tcn.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "drop", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.tcn.unit_tcn.init_weights": [[33, 36], ["init_func.conv_init", "init_func.bn_init"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.conv_init", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.bn_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "conv_init", "(", "self", ".", "conv", ")", "\n", "bn_init", "(", "self", ".", "bn", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.tcn.mstcn.__init__": [[40, 95], ["torch.Module.__init__", "len", "torch.ReLU", "torch.ReLU", "enumerate", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout", "torch.Dropout", "int", "isinstance", "torch.Sequential", "torch.Sequential", "branches.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "branches.append", "branches.append", "isinstance", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "tcn.unit_tcn", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "mid_channels", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "\n", "ms_cfg", "=", "[", "(", "3", ",", "1", ")", ",", "(", "3", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "3", ",", "4", ")", ",", "(", "'max'", ",", "3", ")", ",", "'1x1'", "]", ",", "\n", "stride", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Multiple branches of temporal convolution", "\n", "self", ".", "ms_cfg", "=", "ms_cfg", "\n", "num_branches", "=", "len", "(", "ms_cfg", ")", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "if", "mid_channels", "is", "None", ":", "\n", "            ", "mid_channels", "=", "out_channels", "//", "num_branches", "\n", "rem_mid_channels", "=", "out_channels", "-", "mid_channels", "*", "(", "num_branches", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "mid_channels", ",", "float", ")", "and", "mid_channels", ">", "0", "\n", "mid_channels", "=", "int", "(", "out_channels", "*", "mid_channels", ")", "\n", "rem_mid_channels", "=", "mid_channels", "\n", "\n", "", "self", ".", "mid_channels", "=", "mid_channels", "\n", "self", ".", "rem_mid_channels", "=", "rem_mid_channels", "\n", "\n", "branches", "=", "[", "]", "\n", "for", "i", ",", "cfg", "in", "enumerate", "(", "ms_cfg", ")", ":", "\n", "            ", "branch_c", "=", "rem_mid_channels", "if", "i", "==", "0", "else", "mid_channels", "\n", "if", "cfg", "==", "'1x1'", ":", "\n", "                ", "branches", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "branch_c", ",", "kernel_size", "=", "1", ",", "stride", "=", "(", "stride", ",", "1", ")", ")", ")", "\n", "continue", "\n", "", "assert", "isinstance", "(", "cfg", ",", "tuple", ")", "\n", "if", "cfg", "[", "0", "]", "==", "'max'", ":", "\n", "                ", "branches", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "branch_c", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "branch_c", ")", ",", "self", ".", "act", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "cfg", "[", "1", "]", ",", "1", ")", ",", "stride", "=", "(", "stride", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ")", ")", ")", "\n", "continue", "\n", "", "assert", "isinstance", "(", "cfg", "[", "0", "]", ",", "int", ")", "and", "isinstance", "(", "cfg", "[", "1", "]", ",", "int", ")", "\n", "branch", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "branch_c", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "branch_c", ")", ",", "self", ".", "act", ",", "\n", "unit_tcn", "(", "branch_c", ",", "branch_c", ",", "kernel_size", "=", "cfg", "[", "0", "]", ",", "stride", "=", "stride", ",", "dilation", "=", "cfg", "[", "1", "]", ",", "norm", "=", "None", ")", ")", "\n", "branches", ".", "append", "(", "branch", ")", "\n", "\n", "", "self", ".", "branches", "=", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "tin_channels", "=", "mid_channels", "*", "(", "num_branches", "-", "1", ")", "+", "rem_mid_channels", "\n", "\n", "self", ".", "transform", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "tin_channels", ")", ",", "self", ".", "act", ",", "nn", ".", "Conv2d", "(", "tin_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.tcn.mstcn.inner_forward": [[96, 107], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "tcn.mstcn.transform", "tempconv", "branch_outs.append"], "methods", ["None"], ["", "def", "inner_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "T", ",", "V", "=", "x", ".", "shape", "\n", "\n", "branch_outs", "=", "[", "]", "\n", "for", "tempconv", "in", "self", ".", "branches", ":", "\n", "            ", "out", "=", "tempconv", "(", "x", ")", "\n", "branch_outs", ".", "append", "(", "out", ")", "\n", "\n", "", "feat", "=", "torch", ".", "cat", "(", "branch_outs", ",", "dim", "=", "1", ")", "\n", "feat", "=", "self", ".", "transform", "(", "feat", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.tcn.mstcn.forward": [[108, 112], ["tcn.mstcn.inner_forward", "tcn.mstcn.bn", "tcn.mstcn.drop"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.tcn.mstcn.inner_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "inner_forward", "(", "x", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "self", ".", "drop", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.tcn.mstcn.init_weights": [[113, 115], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.MLP.__init__": [[13, 24], ["dict", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "len", "msg3d_utils.MLP.layers.append", "msg3d_utils.MLP.layers.append", "msg3d_utils.MLP.layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "msg3d_utils.MLP.layers.append", "torch.Dropout", "torch.Dropout", "mmcv.cnn.build_activation_layer"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "channels", "=", "[", "in_channels", "]", "+", "out_channels", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "channels", ")", ")", ":", "\n", "            ", "if", "dropout", ">", "1e-3", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ")", "\n", "", "self", ".", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "channels", "[", "i", "-", "1", "]", ",", "channels", "[", "i", "]", ",", "kernel_size", "=", "1", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "channels", "[", "i", "]", ")", ")", "\n", "if", "act_cfg", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "build_activation_layer", "(", "act_cfg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.MLP.forward": [[25, 29], ["layer"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.MSGCN.__init__": [[32, 51], ["dict", "torch.Module.__init__", "numpy.stack", "msg3d_utils.MSGCN.register_buffer", "torch.Parameter", "torch.Parameter", "torch.init.uniform_", "torch.init.uniform_", "msg3d_utils.MLP", "utils.graph.k_adjacency", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "msg3d_utils.MSGCN.A.clone", "range", "utils.graph.normalize_digraph"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.k_adjacency", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.normalize_digraph"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_scales", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "A", ",", "\n", "dropout", "=", "0", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_scales", "=", "num_scales", "\n", "\n", "A_powers", "=", "[", "k_adjacency", "(", "A", ",", "k", ",", "with_self", "=", "True", ")", "for", "k", "in", "range", "(", "num_scales", ")", "]", "\n", "A_powers", "=", "np", ".", "stack", "(", "[", "normalize_digraph", "(", "g", ")", "for", "g", "in", "A_powers", "]", ")", "\n", "\n", "# K, V, V", "\n", "self", ".", "register_buffer", "(", "'A'", ",", "torch", ".", "Tensor", "(", "A_powers", ")", ")", "\n", "self", ".", "PA", "=", "nn", ".", "Parameter", "(", "self", ".", "A", ".", "clone", "(", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "PA", ",", "-", "1e-6", ",", "1e-6", ")", "\n", "\n", "self", ".", "mlp", "=", "MLP", "(", "in_channels", "*", "num_scales", ",", "[", "out_channels", "]", ",", "dropout", "=", "dropout", ",", "act_cfg", "=", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.MSGCN.forward": [[52, 61], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "support.reshape.reshape.reshape", "msg3d_utils.MSGCN.mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "T", ",", "V", "=", "x", ".", "shape", "\n", "A", "=", "self", ".", "A", "\n", "A", "=", "A", "+", "self", ".", "PA", "\n", "\n", "support", "=", "torch", ".", "einsum", "(", "'kvu,nctv->nkctu'", ",", "A", ",", "x", ")", "\n", "support", "=", "support", ".", "reshape", "(", "N", ",", "self", ".", "num_scales", "*", "C", ",", "T", ",", "V", ")", "\n", "out", "=", "self", ".", "mlp", "(", "support", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.MSTCN.__init__": [[65, 129], ["dict", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "msg3d_utils.MSTCN.branches.append", "msg3d_utils.MSTCN.branches.append", "mmcv.cnn.build_activation_layer", "torch.Dropout", "torch.Dropout", "len", "type", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "len", "len", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mmcv.cnn.build_activation_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "tcn.unit_tcn", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mmcv.cnn.build_activation_layer", "tcn.unit_tcn", "zip"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "dilations", "=", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "\n", "residual", "=", "True", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "tcn_dropout", "=", "0", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Multiple branches of temporal convolution", "\n", "self", ".", "num_branches", "=", "len", "(", "dilations", ")", "+", "2", "\n", "branch_channels", "=", "out_channels", "//", "self", ".", "num_branches", "\n", "branch_channels_rem", "=", "out_channels", "-", "branch_channels", "*", "(", "self", ".", "num_branches", "-", "1", ")", "\n", "\n", "if", "type", "(", "kernel_size", ")", "==", "list", ":", "\n", "            ", "assert", "len", "(", "kernel_size", ")", "==", "len", "(", "dilations", ")", "\n", "", "else", ":", "\n", "            ", "kernel_size", "=", "[", "kernel_size", "]", "*", "len", "(", "dilations", ")", "\n", "\n", "", "self", ".", "branches", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "branch_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_channels", ")", ",", "\n", "build_activation_layer", "(", "act_cfg", ")", ",", "\n", "unit_tcn", "(", "\n", "branch_channels", ",", "\n", "branch_channels", ",", "\n", "kernel_size", "=", "ks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ")", ",", "\n", ")", "\n", "for", "ks", ",", "dilation", "in", "zip", "(", "kernel_size", ",", "dilations", ")", "\n", "]", ")", "\n", "\n", "# Additional Max & 1x1 branch", "\n", "self", ".", "branches", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "branch_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_channels", ")", ",", "\n", "build_activation_layer", "(", "act_cfg", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "stride", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_channels", ")", "\n", ")", ")", "\n", "\n", "self", ".", "branches", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "branch_channels_rem", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "stride", "=", "(", "stride", ",", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "branch_channels_rem", ")", "\n", ")", ")", "\n", "\n", "# Residual connection", "\n", "if", "not", "residual", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "0", "\n", "", "elif", "(", "in_channels", "==", "out_channels", ")", "and", "(", "stride", "==", "1", ")", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "            ", "self", ".", "residual", "=", "unit_tcn", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "\n", "", "self", ".", "act", "=", "build_activation_layer", "(", "act_cfg", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "tcn_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.MSTCN.forward": [[130, 143], ["msg3d_utils.MSTCN.residual", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "msg3d_utils.MSTCN.act", "msg3d_utils.MSTCN.drop", "tempconv", "branch_outs.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Input dim: (N,C,T,V)", "\n", "        ", "res", "=", "self", ".", "residual", "(", "x", ")", "\n", "branch_outs", "=", "[", "]", "\n", "for", "tempconv", "in", "self", ".", "branches", ":", "\n", "            ", "out", "=", "tempconv", "(", "x", ")", "\n", "branch_outs", ".", "append", "(", "out", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "branch_outs", ",", "dim", "=", "1", ")", "\n", "out", "+=", "res", "\n", "out", "=", "self", ".", "act", "(", "out", ")", "\n", "out", "=", "self", ".", "drop", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.MSTCN.init_weights": [[144, 150], ["msg3d_utils.MSTCN.modules", "isinstance", "init_func.conv_init", "isinstance", "init_func.bn_init"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.conv_init", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.bn_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "conv_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                ", "bn_init", "(", "m", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.UnfoldTemporalWindows.__init__": [[153, 164], ["torch.Module.__init__", "torch.Unfold", "torch.Unfold"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "window_size", ",", "window_stride", ",", "window_dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "window_stride", "=", "window_stride", "\n", "self", ".", "window_dilation", "=", "window_dilation", "\n", "\n", "self", ".", "padding", "=", "(", "window_size", "+", "(", "window_size", "-", "1", ")", "*", "(", "window_dilation", "-", "1", ")", "-", "1", ")", "//", "2", "\n", "self", ".", "unfold", "=", "nn", ".", "Unfold", "(", "kernel_size", "=", "(", "self", ".", "window_size", ",", "1", ")", ",", "\n", "dilation", "=", "(", "self", ".", "window_dilation", ",", "1", ")", ",", "\n", "stride", "=", "(", "self", ".", "window_stride", ",", "1", ")", ",", "\n", "padding", "=", "(", "self", ".", "padding", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.UnfoldTemporalWindows.forward": [[165, 173], ["msg3d_utils.UnfoldTemporalWindows.unfold", "x.reshape.reshape.reshape().permute().contiguous", "x.reshape.reshape.reshape", "x.reshape.reshape.reshape().permute", "x.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Input shape: (N,C,T,V), out: (N,C,T,V*window_size)", "\n", "        ", "N", ",", "C", ",", "T", ",", "V", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "unfold", "(", "x", ")", "\n", "# Permute extra channels from window size to the graph dimension; -1 for number of windows", "\n", "x", "=", "x", ".", "reshape", "(", "N", ",", "C", ",", "self", ".", "window_size", ",", "-", "1", ",", "V", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "reshape", "(", "N", ",", "C", ",", "-", "1", ",", "self", ".", "window_size", "*", "V", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.ST_MSGCN.__init__": [[176, 211], ["dict", "torch.Module.__init__", "msg3d_utils.ST_MSGCN.build_st_graph", "numpy.stack", "msg3d_utils.ST_MSGCN.register_buffer", "len", "torch.Parameter", "torch.Parameter", "torch.init.uniform_", "torch.init.uniform_", "msg3d_utils.MLP", "mmcv.cnn.build_activation_layer", "utils.graph.k_adjacency", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "msg3d_utils.ST_MSGCN.A.clone", "range", "utils.graph.normalize_digraph", "msg3d_utils.MLP"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.ST_MSGCN.build_st_graph", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.k_adjacency", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.graph.normalize_digraph"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "A", ",", "\n", "num_scales", ",", "\n", "window_size", ",", "\n", "residual", "=", "False", ",", "\n", "dropout", "=", "0", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_scales", "=", "num_scales", "\n", "self", ".", "window_size", "=", "window_size", "\n", "A", "=", "self", ".", "build_st_graph", "(", "A", ",", "window_size", ")", "\n", "\n", "A_scales", "=", "[", "k_adjacency", "(", "A", ",", "k", ",", "with_self", "=", "True", ")", "for", "k", "in", "range", "(", "num_scales", ")", "]", "\n", "A_scales", "=", "np", ".", "stack", "(", "[", "normalize_digraph", "(", "g", ")", "for", "g", "in", "A_scales", "]", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'A'", ",", "torch", ".", "Tensor", "(", "A_scales", ")", ")", "\n", "self", ".", "V", "=", "len", "(", "A", ")", "\n", "\n", "self", ".", "PA", "=", "nn", ".", "Parameter", "(", "self", ".", "A", ".", "clone", "(", ")", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "PA", ",", "-", "1e-6", ",", "1e-6", ")", "\n", "\n", "self", ".", "mlp", "=", "MLP", "(", "in_channels", "*", "num_scales", ",", "[", "out_channels", "]", ",", "dropout", "=", "dropout", ",", "act_cfg", "=", "act_cfg", ")", "\n", "\n", "# Residual connection", "\n", "if", "not", "residual", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "0", "\n", "", "elif", "(", "in_channels", "==", "out_channels", ")", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "            ", "self", ".", "residual", "=", "MLP", "(", "in_channels", ",", "[", "out_channels", "]", ",", "act_cfg", "=", "None", ")", "\n", "\n", "", "self", ".", "act", "=", "build_activation_layer", "(", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.ST_MSGCN.build_st_graph": [[212, 222], ["len", "numpy.tile().copy", "isinstance", "A.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "numpy.eye", "len", "numpy.tile", "A.data.cpu().numpy.data.cpu().numpy.data.cpu"], "methods", ["None"], ["", "def", "build_st_graph", "(", "self", ",", "A", ",", "window_size", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "A", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "A", "=", "A", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "assert", "len", "(", "A", ".", "shape", ")", "==", "2", "and", "A", ".", "shape", "[", "0", "]", "==", "A", ".", "shape", "[", "1", "]", "\n", "V", "=", "len", "(", "A", ")", "\n", "A_with_I", "=", "A", "+", "np", ".", "eye", "(", "V", ",", "dtype", "=", "A", ".", "dtype", ")", "\n", "\n", "A_large", "=", "np", ".", "tile", "(", "A_with_I", ",", "(", "window_size", ",", "window_size", ")", ")", ".", "copy", "(", ")", "\n", "return", "A_large", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.ST_MSGCN.forward": [[223, 234], ["msg3d_utils.ST_MSGCN.residual", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "agg.reshape.reshape.reshape", "msg3d_utils.ST_MSGCN.mlp", "msg3d_utils.ST_MSGCN.act"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "T", ",", "V", "=", "x", ".", "shape", "# T = number of windows, V = self.V * window_size", "\n", "A", "=", "self", ".", "A", "+", "self", ".", "PA", "\n", "\n", "# Perform Graph Convolution", "\n", "res", "=", "self", ".", "residual", "(", "x", ")", "\n", "agg", "=", "torch", ".", "einsum", "(", "'kvu,nctv->nkctu'", ",", "A", ",", "x", ")", "\n", "agg", "=", "agg", ".", "reshape", "(", "N", ",", "self", ".", "num_scales", "*", "C", ",", "T", ",", "V", ")", "\n", "out", "=", "self", ".", "mlp", "(", "agg", ")", "\n", "out", "+=", "res", "\n", "return", "self", ".", "act", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.MSG3DBlock.__init__": [[237, 274], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Identity", "torch.Identity", "msg3d_utils.MLP", "msg3d_utils.UnfoldTemporalWindows", "msg3d_utils.ST_MSGCN"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "A", ",", "\n", "num_scales", ",", "\n", "window_size", ",", "\n", "window_stride", ",", "\n", "window_dilation", ",", "\n", "embed_factor", "=", "1", ",", "\n", "activation", "=", "'relu'", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "embed_channels_in", "=", "self", ".", "embed_channels_out", "=", "out_channels", "//", "embed_factor", "\n", "if", "embed_factor", "==", "1", ":", "\n", "            ", "self", ".", "in1x1", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "embed_channels_in", "=", "self", ".", "embed_channels_out", "=", "in_channels", "\n", "# The first STGC block changes channels right away; others change at collapse", "\n", "if", "in_channels", "==", "3", ":", "\n", "                ", "self", ".", "embed_channels_out", "=", "out_channels", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "in1x1", "=", "MLP", "(", "in_channels", ",", "[", "self", ".", "embed_channels_in", "]", ")", "\n", "\n", "", "self", ".", "gcn3d", "=", "nn", ".", "Sequential", "(", "\n", "UnfoldTemporalWindows", "(", "window_size", ",", "window_stride", ",", "window_dilation", ")", ",", "\n", "ST_MSGCN", "(", "\n", "in_channels", "=", "self", ".", "embed_channels_in", ",", "\n", "out_channels", "=", "self", ".", "embed_channels_out", ",", "\n", "A", "=", "A", ",", "\n", "num_scales", "=", "num_scales", ",", "\n", "window_size", "=", "window_size", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "out_conv", "=", "nn", ".", "Conv3d", "(", "self", ".", "embed_channels_out", ",", "out_channels", ",", "kernel_size", "=", "(", "1", ",", "self", ".", "window_size", ",", "1", ")", ")", "\n", "self", ".", "out_bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.MSG3DBlock.forward": [[275, 287], ["msg3d_utils.MSG3DBlock.in1x1", "msg3d_utils.MSG3DBlock.gcn3d", "msg3d_utils.MSG3DBlock.reshape", "msg3d_utils.MSG3DBlock.out_conv().squeeze", "msg3d_utils.MSG3DBlock.out_bn", "msg3d_utils.MSG3DBlock.out_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "_", ",", "T", ",", "V", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "in1x1", "(", "x", ")", "\n", "# Construct temporal windows and apply MS-GCN", "\n", "x", "=", "self", ".", "gcn3d", "(", "x", ")", "\n", "\n", "# Collapse the window dimension", "\n", "x", "=", "x", ".", "reshape", "(", "N", ",", "self", ".", "embed_channels_out", ",", "-", "1", ",", "self", ".", "window_size", ",", "V", ")", "\n", "x", "=", "self", ".", "out_conv", "(", "x", ")", ".", "squeeze", "(", "dim", "=", "3", ")", "\n", "x", "=", "self", ".", "out_bn", "(", "x", ")", "\n", "# no activation", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.MW_MSG3DBlock.__init__": [[290, 311], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "msg3d_utils.MSG3DBlock", "zip"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "A", ",", "\n", "num_scales", ",", "\n", "window_sizes", "=", "[", "3", ",", "5", "]", ",", "\n", "window_stride", "=", "1", ",", "\n", "window_dilations", "=", "[", "1", ",", "1", "]", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gcn3d", "=", "nn", ".", "ModuleList", "(", "[", "\n", "MSG3DBlock", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "A", ",", "\n", "num_scales", ",", "\n", "window_size", ",", "\n", "window_stride", ",", "\n", "window_dilation", "\n", ")", "\n", "for", "window_size", ",", "window_dilation", "in", "zip", "(", "window_sizes", ",", "window_dilations", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.msg3d_utils.MW_MSG3DBlock.forward": [[313, 318], ["gcn3d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out_sum", "=", "0", "\n", "for", "gcn3d", "in", "self", ".", "gcn3d", ":", "\n", "            ", "out_sum", "+=", "gcn3d", "(", "x", ")", "\n", "", "return", "out_sum", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.__init__": [[46, 73], ["torch.utils.data.Dataset.__init__", "pipelines.Compose", "base.BaseDataset.load_annotations"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.pose_dataset.PoseDataset.load_annotations"], ["def", "__init__", "(", "self", ",", "\n", "ann_file", ",", "\n", "pipeline", ",", "\n", "data_prefix", "=", "''", ",", "\n", "test_mode", "=", "False", ",", "\n", "multi_class", "=", "False", ",", "\n", "num_classes", "=", "None", ",", "\n", "start_index", "=", "1", ",", "\n", "modality", "=", "'RGB'", ",", "\n", "memcached", "=", "False", ",", "\n", "mc_cfg", "=", "(", "'localhost'", ",", "22077", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ann_file", "=", "ann_file", "\n", "self", ".", "data_prefix", "=", "data_prefix", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "multi_class", "=", "multi_class", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "start_index", "=", "start_index", "\n", "self", ".", "modality", "=", "modality", "\n", "# Note: Currently, memcached only works for PoseDataset", "\n", "self", ".", "memcached", "=", "memcached", "\n", "self", ".", "mc_cfg", "=", "mc_cfg", "\n", "self", ".", "cli", "=", "None", "\n", "\n", "self", ".", "pipeline", "=", "Compose", "(", "pipeline", ")", "\n", "self", ".", "video_infos", "=", "self", ".", "load_annotations", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.load_annotations": [[74, 77], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the annotation according to ann_file into video_infos.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.load_json_annotations": [[80, 95], ["mmcv.load", "len", "range", "os.join", "len"], "methods", ["None"], ["", "def", "load_json_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load json annotation file to get video information.\"\"\"", "\n", "video_infos", "=", "mmcv", ".", "load", "(", "self", ".", "ann_file", ")", "\n", "num_videos", "=", "len", "(", "video_infos", ")", "\n", "path_key", "=", "'frame_dir'", "if", "'frame_dir'", "in", "video_infos", "[", "0", "]", "else", "'filename'", "\n", "for", "i", "in", "range", "(", "num_videos", ")", ":", "\n", "            ", "path_value", "=", "video_infos", "[", "i", "]", "[", "path_key", "]", "\n", "path_value", "=", "osp", ".", "join", "(", "self", ".", "data_prefix", ",", "path_value", ")", "\n", "video_infos", "[", "i", "]", "[", "path_key", "]", "=", "path_value", "\n", "if", "self", ".", "multi_class", ":", "\n", "                ", "assert", "self", ".", "num_classes", "is", "not", "None", "\n", "", "else", ":", "\n", "                ", "assert", "len", "(", "video_infos", "[", "i", "]", "[", "'label'", "]", ")", "==", "1", "\n", "video_infos", "[", "i", "]", "[", "'label'", "]", "=", "video_infos", "[", "i", "]", "[", "'label'", "]", "[", "0", "]", "\n", "", "", "return", "video_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.parse_by_class": [[96, 102], ["collections.defaultdict", "video_infos_by_class[].append"], "methods", ["None"], ["", "def", "parse_by_class", "(", "self", ")", ":", "\n", "        ", "video_infos_by_class", "=", "defaultdict", "(", "list", ")", "\n", "for", "item", "in", "self", ".", "video_infos", ":", "\n", "            ", "label", "=", "item", "[", "'label'", "]", "\n", "video_infos_by_class", "[", "label", "]", ".", "append", "(", "item", ")", "\n", "", "return", "video_infos_by_class", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.label2array": [[103, 108], ["numpy.zeros"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "label2array", "(", "num", ",", "label", ")", ":", "\n", "        ", "arr", "=", "np", ".", "zeros", "(", "num", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "arr", "[", "label", "]", "=", "1.", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.evaluate": [[109, 211], ["dict", "copy.deepcopy", "collections.OrderedDict", "isinstance", "TypeError", "len", "len", "isinstance", "isinstance", "len", "dict", "range", "warnings.warn", "dict", "isinstance", "mmcv.utils.print_log", "dict", "len", "len", "base.BaseDataset.evaluate", "dict.update", "KeyError", "copy.deepcopy.setdefault().setdefault", "isinstance", "core.top_k_accuracy", "zip", "mmcv.utils.print_log", "core.mean_class_accuracy", "mmcv.utils.print_log", "core.mean_average_precision", "mmcv.utils.print_log", "isinstance", "TypeError", "log_msg.append", "base.BaseDataset.label2array", "type", "copy.deepcopy.setdefault", "base.BaseDataset.items", "type"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.evaluate", "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.top_k_accuracy", "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.mean_class_accuracy", "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.mean_average_precision", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.label2array"], ["", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metrics", "=", "'top_k_accuracy'", ",", "\n", "metric_options", "=", "dict", "(", "top_k_accuracy", "=", "dict", "(", "topk", "=", "(", "1", ",", "5", ")", ")", ")", ",", "\n", "logger", "=", "None", ",", "\n", "**", "deprecated_kwargs", ")", ":", "\n", "        ", "\"\"\"Perform evaluation for common datasets.\n\n        Args:\n            results (list): Output results.\n            metrics (str | sequence[str]): Metrics to be performed.\n                Defaults: 'top_k_accuracy'.\n            metric_options (dict): Dict for metric options. Options are\n                ``topk`` for ``top_k_accuracy``.\n                Default: ``dict(top_k_accuracy=dict(topk=(1, 5)))``.\n            logger (logging.Logger | None): Logger for recording.\n                Default: None.\n            deprecated_kwargs (dict): Used for containing deprecated arguments.\n                See 'https://github.com/open-mmlab/mmaction2/pull/286'.\n\n        Returns:\n            dict: Evaluation results dict.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "results", ",", "list", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'results must be a list, but got {type(results)}'", ")", "\n", "", "assert", "len", "(", "results", ")", "==", "len", "(", "self", ")", ",", "(", "\n", "f'The length of results is not equal to the dataset len: '", "\n", "f'{len(results)} != {len(self)}'", ")", "\n", "\n", "if", "isinstance", "(", "results", "[", "0", "]", ",", "list", ")", "or", "isinstance", "(", "results", "[", "0", "]", ",", "tuple", ")", ":", "\n", "            ", "num_results", "=", "len", "(", "results", "[", "0", "]", ")", "\n", "eval_results", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "num_results", ")", ":", "\n", "                ", "eval_results_cur", "=", "self", ".", "evaluate", "(", "\n", "[", "x", "[", "i", "]", "for", "x", "in", "results", "]", ",", "metrics", ",", "metric_options", ",", "logger", ",", "**", "deprecated_kwargs", ")", "\n", "eval_results", ".", "update", "(", "{", "f'{k}_{i}'", ":", "v", "for", "k", ",", "v", "in", "eval_results_cur", ".", "items", "(", ")", "}", ")", "\n", "", "return", "eval_results", "\n", "\n", "# Protect ``metric_options`` since it uses mutable value as default", "\n", "", "metric_options", "=", "copy", ".", "deepcopy", "(", "metric_options", ")", "\n", "if", "deprecated_kwargs", "!=", "{", "}", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'Option arguments for metrics has been changed to '", "\n", "\"`metric_options`, See 'https://github.com/open-mmlab/mmaction2/pull/286' \"", "# noqa: E501", "\n", "'for more details'", ")", "\n", "metric_options", "[", "'top_k_accuracy'", "]", "=", "dict", "(", "\n", "metric_options", "[", "'top_k_accuracy'", "]", ",", "**", "deprecated_kwargs", ")", "\n", "\n", "", "metrics", "=", "metrics", "if", "isinstance", "(", "metrics", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "metrics", "]", "\n", "allowed_metrics", "=", "[", "'top_k_accuracy'", ",", "'mean_class_accuracy'", ",", "'mean_average_precision'", "]", "\n", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "if", "metric", "not", "in", "allowed_metrics", ":", "\n", "                ", "raise", "KeyError", "(", "f'metric {metric} is not supported'", ")", "\n", "\n", "", "", "eval_results", "=", "OrderedDict", "(", ")", "\n", "gt_labels", "=", "[", "ann", "[", "'label'", "]", "for", "ann", "in", "self", ".", "video_infos", "]", "\n", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "msg", "=", "f'Evaluating {metric} ...'", "\n", "if", "logger", "is", "None", ":", "\n", "                ", "msg", "=", "'\\n'", "+", "msg", "\n", "", "print_log", "(", "msg", ",", "logger", "=", "logger", ")", "\n", "\n", "if", "metric", "==", "'top_k_accuracy'", ":", "\n", "                ", "topk", "=", "metric_options", ".", "setdefault", "(", "'top_k_accuracy'", ",", "\n", "{", "}", ")", ".", "setdefault", "(", "\n", "'topk'", ",", "(", "1", ",", "5", ")", ")", "\n", "if", "not", "isinstance", "(", "topk", ",", "(", "int", ",", "tuple", ")", ")", ":", "\n", "                    ", "raise", "TypeError", "(", "'topk must be int or tuple of int, '", "\n", "f'but got {type(topk)}'", ")", "\n", "", "if", "isinstance", "(", "topk", ",", "int", ")", ":", "\n", "                    ", "topk", "=", "(", "topk", ",", ")", "\n", "\n", "", "top_k_acc", "=", "top_k_accuracy", "(", "results", ",", "gt_labels", ",", "topk", ")", "\n", "log_msg", "=", "[", "]", "\n", "for", "k", ",", "acc", "in", "zip", "(", "topk", ",", "top_k_acc", ")", ":", "\n", "                    ", "eval_results", "[", "f'top{k}_acc'", "]", "=", "acc", "\n", "log_msg", ".", "append", "(", "f'\\ntop{k}_acc\\t{acc:.4f}'", ")", "\n", "", "log_msg", "=", "''", ".", "join", "(", "log_msg", ")", "\n", "print_log", "(", "log_msg", ",", "logger", "=", "logger", ")", "\n", "continue", "\n", "\n", "", "if", "metric", "==", "'mean_class_accuracy'", ":", "\n", "                ", "mean_acc", "=", "mean_class_accuracy", "(", "results", ",", "gt_labels", ")", "\n", "eval_results", "[", "'mean_class_accuracy'", "]", "=", "mean_acc", "\n", "log_msg", "=", "f'\\nmean_acc\\t{mean_acc:.4f}'", "\n", "print_log", "(", "log_msg", ",", "logger", "=", "logger", ")", "\n", "continue", "\n", "\n", "", "if", "metric", "==", "'mean_average_precision'", ":", "\n", "                ", "gt_labels_arrays", "=", "[", "\n", "self", ".", "label2array", "(", "self", ".", "num_classes", ",", "label", ")", "\n", "for", "label", "in", "gt_labels", "\n", "]", "\n", "mAP", "=", "mean_average_precision", "(", "results", ",", "gt_labels_arrays", ")", "\n", "eval_results", "[", "'mean_average_precision'", "]", "=", "mAP", "\n", "log_msg", "=", "f'\\nmean_average_precision\\t{mAP:.4f}'", "\n", "print_log", "(", "log_msg", ",", "logger", "=", "logger", ")", "\n", "continue", "\n", "\n", "", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.dump_results": [[212, 216], ["mmcv.dump"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "dump_results", "(", "results", ",", "out", ")", ":", "\n", "        ", "\"\"\"Dump data to json/yaml/pickle strings or files.\"\"\"", "\n", "return", "mmcv", ".", "dump", "(", "results", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.prepare_train_frames": [[217, 256], ["copy.deepcopy", "base.BaseDataset.pipeline", "copy.deepcopy.pop", "isinstance", "torch.zeros", "Client", "base.BaseDataset.cli.get", "isinstance", "mmcv.load", "Client", "base.BaseDataset.cli.get", "base.BaseDataset.cli.set", "Client", "base.BaseDataset.cli.set"], "methods", ["None"], ["", "def", "prepare_train_frames", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Prepare the frames for training given the index.\"\"\"", "\n", "results", "=", "copy", ".", "deepcopy", "(", "self", ".", "video_infos", "[", "idx", "]", ")", "\n", "if", "self", ".", "memcached", "and", "'key'", "in", "results", ":", "\n", "            ", "from", "pymemcache", ".", "client", ".", "base", "import", "Client", "\n", "from", "pymemcache", "import", "serde", "\n", "\n", "if", "self", ".", "cli", "is", "None", ":", "\n", "                ", "self", ".", "cli", "=", "Client", "(", "self", ".", "mc_cfg", ",", "serde", "=", "serde", ".", "pickle_serde", ")", "\n", "", "key", "=", "results", ".", "pop", "(", "'key'", ")", "\n", "try", ":", "\n", "                ", "pack", "=", "self", ".", "cli", ".", "get", "(", "key", ")", "\n", "", "except", ":", "\n", "                ", "self", ".", "cli", "=", "Client", "(", "self", ".", "mc_cfg", ",", "serde", "=", "serde", ".", "pickle_serde", ")", "\n", "pack", "=", "self", ".", "cli", ".", "get", "(", "key", ")", "\n", "", "if", "not", "isinstance", "(", "pack", ",", "dict", ")", ":", "\n", "                ", "raw_file", "=", "results", "[", "'raw_file'", "]", "\n", "data", "=", "mmcv", ".", "load", "(", "raw_file", ")", "\n", "pack", "=", "data", "[", "key", "]", "\n", "for", "k", "in", "data", ":", "\n", "                    ", "try", ":", "\n", "                        ", "self", ".", "cli", ".", "set", "(", "k", ",", "data", "[", "k", "]", ")", "\n", "", "except", ":", "\n", "                        ", "self", ".", "cli", "=", "Client", "(", "self", ".", "mc_cfg", ",", "serde", "=", "serde", ".", "pickle_serde", ")", "\n", "self", ".", "cli", ".", "set", "(", "k", ",", "data", "[", "k", "]", ")", "\n", "", "", "", "for", "k", "in", "pack", ":", "\n", "                ", "results", "[", "k", "]", "=", "pack", "[", "k", "]", "\n", "\n", "", "", "results", "[", "'modality'", "]", "=", "self", ".", "modality", "\n", "results", "[", "'start_index'", "]", "=", "self", ".", "start_index", "\n", "\n", "# prepare tensor in getitem", "\n", "# If HVU, type(results['label']) is dict", "\n", "if", "self", ".", "multi_class", "and", "isinstance", "(", "results", "[", "'label'", "]", ",", "list", ")", ":", "\n", "            ", "onehot", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "onehot", "[", "results", "[", "'label'", "]", "]", "=", "1.", "\n", "results", "[", "'label'", "]", "=", "onehot", "\n", "\n", "", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.prepare_test_frames": [[257, 296], ["copy.deepcopy", "base.BaseDataset.pipeline", "copy.deepcopy.pop", "isinstance", "torch.zeros", "Client", "base.BaseDataset.cli.get", "isinstance", "mmcv.load", "Client", "base.BaseDataset.cli.get", "base.BaseDataset.cli.set", "Client", "base.BaseDataset.cli.set"], "methods", ["None"], ["", "def", "prepare_test_frames", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Prepare the frames for testing given the index.\"\"\"", "\n", "results", "=", "copy", ".", "deepcopy", "(", "self", ".", "video_infos", "[", "idx", "]", ")", "\n", "if", "self", ".", "memcached", "and", "'key'", "in", "results", ":", "\n", "            ", "from", "pymemcache", ".", "client", ".", "base", "import", "Client", "\n", "from", "pymemcache", "import", "serde", "\n", "\n", "if", "self", ".", "cli", "is", "None", ":", "\n", "                ", "self", ".", "cli", "=", "Client", "(", "self", ".", "mc_cfg", ",", "serde", "=", "serde", ".", "pickle_serde", ")", "\n", "", "key", "=", "results", ".", "pop", "(", "'key'", ")", "\n", "try", ":", "\n", "                ", "pack", "=", "self", ".", "cli", ".", "get", "(", "key", ")", "\n", "", "except", ":", "\n", "                ", "self", ".", "cli", "=", "Client", "(", "self", ".", "mc_cfg", ",", "serde", "=", "serde", ".", "pickle_serde", ")", "\n", "pack", "=", "self", ".", "cli", ".", "get", "(", "key", ")", "\n", "", "if", "not", "isinstance", "(", "pack", ",", "dict", ")", ":", "\n", "                ", "raw_file", "=", "results", "[", "'raw_file'", "]", "\n", "data", "=", "mmcv", ".", "load", "(", "raw_file", ")", "\n", "pack", "=", "data", "[", "key", "]", "\n", "for", "k", "in", "data", ":", "\n", "                    ", "try", ":", "\n", "                        ", "self", ".", "cli", ".", "set", "(", "k", ",", "data", "[", "k", "]", ")", "\n", "", "except", ":", "\n", "                        ", "self", ".", "cli", "=", "Client", "(", "self", ".", "mc_cfg", ",", "serde", "=", "serde", ".", "pickle_serde", ")", "\n", "self", ".", "cli", ".", "set", "(", "k", ",", "data", "[", "k", "]", ")", "\n", "", "", "", "for", "k", "in", "pack", ":", "\n", "                ", "results", "[", "k", "]", "=", "pack", "[", "k", "]", "\n", "\n", "", "", "results", "[", "'modality'", "]", "=", "self", ".", "modality", "\n", "results", "[", "'start_index'", "]", "=", "self", ".", "start_index", "\n", "\n", "# prepare tensor in getitem", "\n", "# If HVU, type(results['label']) is dict", "\n", "if", "self", ".", "multi_class", "and", "isinstance", "(", "results", "[", "'label'", "]", ",", "list", ")", ":", "\n", "            ", "onehot", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "onehot", "[", "results", "[", "'label'", "]", "]", "=", "1.", "\n", "results", "[", "'label'", "]", "=", "onehot", "\n", "\n", "", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.__len__": [[297, 300], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the size of the dataset.\"\"\"", "\n", "return", "len", "(", "self", ".", "video_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.__getitem__": [[301, 304], ["base.BaseDataset.prepare_test_frames", "base.BaseDataset.prepare_train_frames"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.prepare_test_frames", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.prepare_train_frames"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get the sample for either training or testing given index.\"\"\"", "\n", "return", "self", ".", "prepare_test_frames", "(", "idx", ")", "if", "self", ".", "test_mode", "else", "self", ".", "prepare_train_frames", "(", "idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.video_dataset.VideoDataset.__init__": [[39, 41], ["base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "ann_file", ",", "pipeline", ",", "start_index", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "ann_file", ",", "pipeline", ",", "start_index", "=", "start_index", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.video_dataset.VideoDataset.load_annotations": [[42, 61], ["video_dataset.VideoDataset.ann_file.endswith", "video_dataset.VideoDataset.load_json_annotations", "open", "line.strip().split", "os.join", "video_infos.append", "list", "int", "dict", "line.strip", "map"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.load_json_annotations"], ["", "def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load annotation file to get video information.\"\"\"", "\n", "if", "self", ".", "ann_file", ".", "endswith", "(", "'.json'", ")", ":", "\n", "            ", "return", "self", ".", "load_json_annotations", "(", ")", "\n", "\n", "", "video_infos", "=", "[", "]", "\n", "with", "open", "(", "self", ".", "ann_file", ",", "'r'", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "line_split", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "self", ".", "multi_class", ":", "\n", "                    ", "assert", "self", ".", "num_classes", "is", "not", "None", "\n", "filename", ",", "label", "=", "line_split", "[", "0", "]", ",", "line_split", "[", "1", ":", "]", "\n", "label", "=", "list", "(", "map", "(", "int", ",", "label", ")", ")", "\n", "", "else", ":", "\n", "                    ", "filename", ",", "label", "=", "line_split", "\n", "label", "=", "int", "(", "label", ")", "\n", "", "filename", "=", "osp", ".", "join", "(", "self", ".", "data_prefix", ",", "filename", ")", "\n", "video_infos", ".", "append", "(", "dict", "(", "filename", "=", "filename", ",", "label", "=", "label", ")", ")", "\n", "", "", "return", "video_infos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.build_dataset": [[27, 40], ["mmcv.utils.build_from_cfg"], "function", ["None"], ["def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build a dataset from config dict.\n\n    Args:\n        cfg (dict): Config dict. It should at least contain the key \"type\".\n        default_args (dict | None, optional): Default initialization arguments.\n            Default: None.\n\n    Returns:\n        Dataset: The constructed dataset.\n    \"\"\"", "\n", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ",", "default_args", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.build_dataloader": [[42, 116], ["mmcv.runner.get_dist_info", "torch.utils.data.DataLoader", "hasattr", "samplers.ClassSpecificDistributedSampler", "samplers.DistributedSampler", "functools.partial", "mmcv.utils.digit_version", "mmcv.utils.digit_version", "functools.partial"], "function", ["None"], ["", "def", "build_dataloader", "(", "dataset", ",", "\n", "videos_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "None", ",", "\n", "drop_last", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "persistent_workers", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Build PyTorch DataLoader.\n\n    In distributed training, each GPU/process has a dataloader.\n\n    Args:\n        dataset (:obj:`Dataset`): A PyTorch dataset.\n        videos_per_gpu (int): Number of videos on each GPU, i.e.,\n            batch size of each GPU.\n        workers_per_gpu (int): How many subprocesses to use for data\n            loading for each GPU.\n        shuffle (bool): Whether to shuffle the data at every epoch.\n            Default: True.\n        seed (int | None): Seed to be used. Default: None.\n        drop_last (bool): Whether to drop the last incomplete batch in epoch.\n            Default: False\n        pin_memory (bool): Whether to use pin_memory in DataLoader.\n            Default: True\n        persistent_workers (bool): If True, the data loader will not shutdown\n            the worker processes after a dataset has been consumed once.\n            This allows to maintain the workers Dataset instances alive.\n            The argument also has effect in PyTorch>=1.8.0.\n            Default: False\n        kwargs (dict, optional): Any keyword argument to be used to initialize\n            DataLoader.\n\n    Returns:\n        DataLoader: A PyTorch dataloader.\n    \"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "\n", "if", "hasattr", "(", "dataset", ",", "'class_prob'", ")", "and", "dataset", ".", "class_prob", "is", "not", "None", ":", "\n", "        ", "sampler", "=", "ClassSpecificDistributedSampler", "(", "\n", "dataset", ",", "\n", "world_size", ",", "\n", "rank", ",", "\n", "class_prob", "=", "dataset", ".", "class_prob", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "seed", "=", "seed", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "DistributedSampler", "(", "\n", "dataset", ",", "world_size", ",", "rank", ",", "shuffle", "=", "shuffle", ",", "seed", "=", "seed", ")", "\n", "", "shuffle", "=", "False", "\n", "batch_size", "=", "videos_per_gpu", "\n", "num_workers", "=", "workers_per_gpu", "\n", "\n", "init_fn", "=", "partial", "(", "\n", "worker_init_fn", ",", "num_workers", "=", "num_workers", ",", "rank", "=", "rank", ",", "\n", "seed", "=", "seed", ")", "if", "seed", "is", "not", "None", "else", "None", "\n", "\n", "if", "digit_version", "(", "torch", ".", "__version__", ")", ">=", "digit_version", "(", "'1.8.0'", ")", ":", "\n", "        ", "kwargs", "[", "'persistent_workers'", "]", "=", "persistent_workers", "\n", "\n", "", "data_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "partial", "(", "collate", ",", "samples_per_gpu", "=", "videos_per_gpu", ")", ",", "\n", "pin_memory", "=", "pin_memory", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "worker_init_fn", "=", "init_fn", ",", "\n", "drop_last", "=", "drop_last", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.worker_init_fn": [[118, 125], ["numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "worker_init_fn", "(", "worker_id", ",", "num_workers", ",", "rank", ",", "seed", ")", ":", "\n", "    ", "\"\"\"Init the random seed for various workers.\"\"\"", "\n", "# The seed of each worker equals to", "\n", "# num_worker * rank + worker_id + user_seed", "\n", "worker_seed", "=", "num_workers", "*", "rank", "+", "worker_id", "+", "seed", "\n", "np", ".", "random", ".", "seed", "(", "worker_seed", ")", "\n", "random", ".", "seed", "(", "worker_seed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.pose_dataset.PoseDataset.__init__": [[45, 86], ["base.BaseDataset.__init__", "utils.get_root_logger", "utils.get_root_logger.info", "isinstance", "item.pop", "item.pop", "len"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.get_root_logger"], ["def", "__init__", "(", "self", ",", "\n", "ann_file", ",", "\n", "pipeline", ",", "\n", "split", "=", "None", ",", "\n", "valid_ratio", "=", "None", ",", "\n", "box_thr", "=", "0.5", ",", "\n", "class_prob", "=", "None", ",", "\n", "memcached", "=", "False", ",", "\n", "mc_cfg", "=", "(", "'localhost'", ",", "22077", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "modality", "=", "'Pose'", "\n", "self", ".", "split", "=", "split", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "ann_file", ",", "pipeline", ",", "start_index", "=", "0", ",", "modality", "=", "modality", ",", "memcached", "=", "memcached", ",", "mc_cfg", "=", "mc_cfg", ",", "**", "kwargs", ")", "\n", "\n", "# box_thr, which should be a string", "\n", "self", ".", "box_thr", "=", "box_thr", "\n", "self", ".", "class_prob", "=", "class_prob", "\n", "if", "self", ".", "box_thr", "is", "not", "None", ":", "\n", "            ", "assert", "box_thr", "in", "[", ".5", ",", ".6", ",", ".7", ",", ".8", ",", ".9", "]", "\n", "\n", "# Thresholding Training Examples", "\n", "", "self", ".", "valid_ratio", "=", "valid_ratio", "\n", "if", "self", ".", "valid_ratio", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "self", ".", "valid_ratio", ",", "float", ")", "\n", "self", ".", "video_infos", "=", "[", "\n", "x", "for", "x", "in", "self", ".", "video_infos", "\n", "if", "x", "[", "'valid'", "]", "[", "self", ".", "box_thr", "]", "/", "x", "[", "'total_frames'", "]", ">=", "valid_ratio", "\n", "]", "\n", "for", "item", "in", "self", ".", "video_infos", ":", "\n", "                ", "anno_inds", "=", "(", "item", "[", "'box_score'", "]", ">=", "self", ".", "box_thr", ")", "\n", "item", "[", "'anno_inds'", "]", "=", "anno_inds", "\n", "", "", "for", "item", "in", "self", ".", "video_infos", ":", "\n", "            ", "item", ".", "pop", "(", "'valid'", ",", "None", ")", "\n", "item", ".", "pop", "(", "'box_score'", ",", "None", ")", "\n", "if", "self", ".", "memcached", ":", "\n", "                ", "item", "[", "'key'", "]", "=", "item", "[", "'frame_dir'", "]", "\n", "\n", "", "", "logger", "=", "get_root_logger", "(", ")", "\n", "logger", ".", "info", "(", "f'{len(self)} videos remain after valid thresholding'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.pose_dataset.PoseDataset.load_annotations": [[87, 91], ["pose_dataset.PoseDataset.ann_file.endswith", "pose_dataset.PoseDataset.load_pkl_annotations"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.pose_dataset.PoseDataset.load_pkl_annotations"], ["", "def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load annotation file to get video information.\"\"\"", "\n", "assert", "self", ".", "ann_file", ".", "endswith", "(", "'.pkl'", ")", "\n", "return", "self", ".", "load_pkl_annotations", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.pose_dataset.PoseDataset.load_pkl_annotations": [[92, 108], ["mmcv.load", "set", "os.join", "os.join"], "methods", ["None"], ["", "def", "load_pkl_annotations", "(", "self", ")", ":", "\n", "        ", "data", "=", "mmcv", ".", "load", "(", "self", ".", "ann_file", ")", "\n", "\n", "if", "self", ".", "split", ":", "\n", "            ", "split", ",", "data", "=", "data", "[", "'split'", "]", ",", "data", "[", "'annotations'", "]", "\n", "identifier", "=", "'filename'", "if", "'filename'", "in", "data", "[", "0", "]", "else", "'frame_dir'", "\n", "split", "=", "set", "(", "split", "[", "self", ".", "split", "]", ")", "\n", "data", "=", "[", "x", "for", "x", "in", "data", "if", "x", "[", "identifier", "]", "in", "split", "]", "\n", "\n", "", "for", "item", "in", "data", ":", "\n", "# Sometimes we may need to load anno from the file", "\n", "            ", "if", "'filename'", "in", "item", ":", "\n", "                ", "item", "[", "'filename'", "]", "=", "osp", ".", "join", "(", "self", ".", "data_prefix", ",", "item", "[", "'filename'", "]", ")", "\n", "", "if", "'frame_dir'", "in", "item", ":", "\n", "                ", "item", "[", "'frame_dir'", "]", "=", "osp", ".", "join", "(", "self", ".", "data_prefix", ",", "item", "[", "'frame_dir'", "]", ")", "\n", "", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.dataset_wrappers.RepeatDataset.__init__": [[23, 31], ["builder.build_dataset", "hasattr", "len"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.build_dataset"], ["def", "__init__", "(", "self", ",", "dataset", ",", "times", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "dataset", "[", "'test_mode'", "]", "=", "test_mode", "\n", "self", ".", "dataset", "=", "build_dataset", "(", "dataset", ")", "\n", "self", ".", "times", "=", "times", "\n", "if", "hasattr", "(", "dataset", ",", "'class_prob'", ")", ":", "\n", "            ", "self", ".", "class_prob", "=", "dataset", ".", "class_prob", "\n", "\n", "", "self", ".", "_ori_len", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.dataset_wrappers.RepeatDataset.__getitem__": [[32, 35], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get data.\"\"\"", "\n", "return", "self", ".", "dataset", "[", "idx", "%", "self", ".", "_ori_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.dataset_wrappers.RepeatDataset.__len__": [[36, 39], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Length after repetition.\"\"\"", "\n", "return", "self", ".", "times", "*", "self", ".", "_ori_len", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.dataset_wrappers.ConcatDataset.__init__": [[55, 64], ["numpy.cumsum", "builder.build_dataset", "len"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.build_dataset"], ["def", "__init__", "(", "self", ",", "datasets", ",", "test_mode", "=", "False", ")", ":", "\n", "\n", "        ", "for", "item", "in", "datasets", ":", "\n", "            ", "item", "[", "'test_mode'", "]", "=", "test_mode", "\n", "\n", "", "datasets", "=", "[", "build_dataset", "(", "cfg", ")", "for", "cfg", "in", "datasets", "]", "\n", "self", ".", "datasets", "=", "datasets", "\n", "self", ".", "lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "self", ".", "datasets", "]", "\n", "self", ".", "cumsum", "=", "np", ".", "cumsum", "(", "self", ".", "lens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.dataset_wrappers.ConcatDataset.__getitem__": [[65, 70], ["numpy.searchsorted"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get data.\"\"\"", "\n", "dataset_idx", "=", "np", ".", "searchsorted", "(", "self", ".", "cumsum", ",", "idx", ",", "side", "=", "'right'", ")", "\n", "item_idx", "=", "idx", "if", "dataset_idx", "==", "0", "else", "idx", "-", "self", ".", "cumsum", "[", "dataset_idx", "]", "\n", "return", "self", ".", "datasets", "[", "dataset_idx", "]", "[", "item_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.dataset_wrappers.ConcatDataset.__len__": [[71, 74], ["sum"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Length after repetition.\"\"\"", "\n", "return", "sum", "(", "self", ".", "lens", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.samplers.distributed_sampler.DistributedSampler.__init__": [[17, 26], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ",", "shuffle", "=", "shuffle", ")", "\n", "# for the compatibility from PyTorch 1.3+", "\n", "self", ".", "seed", "=", "seed", "if", "seed", "is", "not", "None", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.samplers.distributed_sampler.DistributedSampler.__iter__": [[27, 44], ["iter", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", "+", "self", ".", "seed", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.samplers.distributed_sampler.ClassSpecificDistributedSampler.__init__": [[53, 70], ["torch.utils.data.DistributedSampler.__init__", "isinstance", "isinstance", "enumerate"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ",", "\n", "class_prob", "=", "None", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "0", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "if", "class_prob", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "class_prob", ",", "list", ")", ":", "\n", "                ", "class_prob", "=", "{", "i", ":", "n", "for", "i", ",", "n", "in", "enumerate", "(", "class_prob", ")", "}", "\n", "", "assert", "isinstance", "(", "class_prob", ",", "dict", ")", "\n", "", "self", ".", "class_prob", "=", "class_prob", "\n", "# for the compatibility from PyTorch 1.3+", "\n", "self", ".", "seed", "=", "seed", "if", "seed", "is", "not", "None", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.samplers.distributed_sampler.ClassSpecificDistributedSampler.__iter__": [[71, 113], ["torch.Generator", "torch.Generator.manual_seed", "collections.defaultdict", "enumerate", "collections.defaultdict.items", "math.ceil", "iter", "type", "samples[].append", "class_prob.get", "range", "int", "torch.randperm().tolist", "indices.extend", "torch.randperm().tolist", "len", "len", "int", "indices.extend", "len", "class_prob.items", "len", "torch.randperm", "torch.randperm", "len", "len", "range", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "seed", "+", "self", ".", "epoch", ")", "\n", "\n", "class_prob", "=", "self", ".", "class_prob", "\n", "dataset_name", "=", "type", "(", "self", ".", "dataset", ")", ".", "__name__", "\n", "dataset", "=", "self", ".", "dataset", "if", "dataset_name", "!=", "'RepeatDataset'", "else", "self", ".", "dataset", ".", "dataset", "\n", "times", "=", "1", "\n", "if", "dataset_name", "==", "'RepeatDataset'", ":", "\n", "            ", "times", "=", "self", ".", "dataset", ".", "times", "\n", "class_prob", "=", "{", "k", ":", "v", "*", "times", "for", "k", ",", "v", "in", "class_prob", ".", "items", "(", ")", "}", "\n", "\n", "", "labels", "=", "[", "x", "[", "'label'", "]", "for", "x", "in", "dataset", ".", "video_infos", "]", "\n", "samples", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "lb", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "samples", "[", "lb", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "indices", "=", "[", "]", "\n", "for", "class_idx", ",", "class_indices", "in", "samples", ".", "items", "(", ")", ":", "\n", "            ", "mul", "=", "class_prob", ".", "get", "(", "class_idx", ",", "times", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "mul", "//", "1", ")", ")", ":", "\n", "                ", "indices", ".", "extend", "(", "class_indices", ")", "\n", "", "rem", "=", "int", "(", "(", "mul", "%", "1", ")", "*", "len", "(", "class_indices", ")", ")", "\n", "inds", "=", "torch", ".", "randperm", "(", "len", "(", "class_indices", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "indices", ".", "extend", "(", "[", "class_indices", "[", "inds", "[", "i", "]", "]", "for", "i", "in", "range", "(", "rem", ")", "]", ")", "\n", "\n", "", "if", "self", ".", "shuffle", ":", "\n", "            ", "shuffle", "=", "torch", ".", "randperm", "(", "len", "(", "indices", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "indices", "=", "[", "indices", "[", "i", "]", "for", "i", "in", "shuffle", "]", "\n", "\n", "# reset num_samples and total_size here.", "\n", "", "self", ".", "num_samples", "=", "math", ".", "ceil", "(", "len", "(", "indices", ")", "/", "self", ".", "num_replicas", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PoseDecode._load_kp": [[20, 23], ["kp[].astype"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_load_kp", "(", "kp", ",", "frame_inds", ")", ":", "\n", "        ", "return", "kp", "[", ":", ",", "frame_inds", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PoseDecode._load_kpscore": [[24, 27], ["kpscore[].astype"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_load_kpscore", "(", "kpscore", ",", "frame_inds", ")", ":", "\n", "        ", "return", "kpscore", "[", ":", ",", "frame_inds", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PoseDecode.__call__": [[28, 46], ["results.get", "numpy.arange", "numpy.squeeze", "pose_related.PoseDecode._load_kpscore", "pose_related.PoseDecode._load_kp"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PoseDecode._load_kpscore", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PoseDecode._load_kp"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "\n", "        ", "if", "'frame_inds'", "not", "in", "results", ":", "\n", "            ", "results", "[", "'frame_inds'", "]", "=", "np", ".", "arange", "(", "results", "[", "'total_frames'", "]", ")", "\n", "\n", "", "if", "results", "[", "'frame_inds'", "]", ".", "ndim", "!=", "1", ":", "\n", "            ", "results", "[", "'frame_inds'", "]", "=", "np", ".", "squeeze", "(", "results", "[", "'frame_inds'", "]", ")", "\n", "\n", "", "offset", "=", "results", ".", "get", "(", "'offset'", ",", "0", ")", "\n", "frame_inds", "=", "results", "[", "'frame_inds'", "]", "+", "offset", "\n", "\n", "if", "'keypoint_score'", "in", "results", ":", "\n", "            ", "results", "[", "'keypoint_score'", "]", "=", "self", ".", "_load_kpscore", "(", "results", "[", "'keypoint_score'", "]", ",", "frame_inds", ")", "\n", "\n", "", "if", "'keypoint'", "in", "results", ":", "\n", "            ", "results", "[", "'keypoint'", "]", "=", "self", ".", "_load_kp", "(", "results", "[", "'keypoint'", "]", ",", "frame_inds", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PoseDecode.__repr__": [[47, 50], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "f'{self.__class__.__name__}()'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize2D.__init__": [[56, 58], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "img_shape", "=", "(", "1080", ",", "1920", ")", ")", ":", "\n", "        ", "self", ".", "img_shape", "=", "img_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize2D.__call__": [[59, 64], ["results.get"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "h", ",", "w", "=", "results", ".", "get", "(", "'img_shape'", ",", "self", ".", "img_shape", ")", "\n", "results", "[", "'keypoint'", "]", "[", "...", ",", "0", "]", "=", "(", "results", "[", "'keypoint'", "]", "[", "...", ",", "0", "]", "-", "(", "w", "/", "2", ")", ")", "/", "(", "w", "/", "2", ")", "\n", "results", "[", "'keypoint'", "]", "[", "...", ",", "1", "]", "=", "(", "results", "[", "'keypoint'", "]", "[", "...", ",", "1", "]", "-", "(", "h", "/", "2", ")", ")", "/", "(", "h", "/", "2", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.RandomRot.__init__": [[69, 71], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "theta", "=", "0.3", ")", ":", "\n", "        ", "self", ".", "theta", "=", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.RandomRot._rot3d": [[72, 80], ["numpy.array", "numpy.array", "numpy.array", "numpy.matmul", "numpy.cos", "numpy.sin", "numpy.matmul"], "methods", ["None"], ["", "def", "_rot3d", "(", "self", ",", "theta", ")", ":", "\n", "        ", "cos", ",", "sin", "=", "np", ".", "cos", "(", "theta", ")", ",", "np", ".", "sin", "(", "theta", ")", "\n", "rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "cos", "[", "0", "]", ",", "sin", "[", "0", "]", "]", ",", "[", "0", ",", "-", "sin", "[", "0", "]", ",", "cos", "[", "0", "]", "]", "]", ")", "\n", "ry", "=", "np", ".", "array", "(", "[", "[", "cos", "[", "1", "]", ",", "0", ",", "-", "sin", "[", "1", "]", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "sin", "[", "1", "]", ",", "0", ",", "cos", "[", "1", "]", "]", "]", ")", "\n", "rz", "=", "np", ".", "array", "(", "[", "[", "cos", "[", "2", "]", ",", "sin", "[", "2", "]", ",", "0", "]", ",", "[", "-", "sin", "[", "2", "]", ",", "cos", "[", "2", "]", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "rot", "=", "np", ".", "matmul", "(", "rz", ",", "np", ".", "matmul", "(", "ry", ",", "rx", ")", ")", "\n", "return", "rot", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.RandomRot._rot2d": [[81, 84], ["numpy.array", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "def", "_rot2d", "(", "self", ",", "theta", ")", ":", "\n", "        ", "cos", ",", "sin", "=", "np", ".", "cos", "(", "theta", ")", ",", "np", ".", "sin", "(", "theta", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "cos", ",", "-", "sin", "]", ",", "[", "sin", ",", "cos", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.RandomRot.__call__": [[85, 102], ["numpy.all", "numpy.einsum", "numpy.isclose", "numpy.random.uniform", "pose_related.RandomRot._rot3d", "numpy.random.uniform", "pose_related.RandomRot._rot2d"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.RandomRot._rot3d", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.RandomRot._rot2d"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "skeleton", "=", "results", "[", "'keypoint'", "]", "\n", "M", ",", "T", ",", "V", ",", "C", "=", "skeleton", ".", "shape", "\n", "\n", "if", "np", ".", "all", "(", "np", ".", "isclose", "(", "skeleton", ",", "0", ")", ")", ":", "\n", "            ", "return", "results", "\n", "\n", "", "assert", "C", "in", "[", "2", ",", "3", "]", "\n", "if", "C", "==", "3", ":", "\n", "            ", "theta", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "theta", ",", "self", ".", "theta", ",", "size", "=", "3", ")", "\n", "rot_mat", "=", "self", ".", "_rot3d", "(", "theta", ")", "\n", "", "elif", "C", "==", "2", ":", "\n", "            ", "theta", "=", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "theta", ")", "\n", "rot_mat", "=", "self", ".", "_rot2d", "(", "theta", ")", "\n", "", "results", "[", "'keypoint'", "]", "=", "np", ".", "einsum", "(", "'ab,mtvb->mtva'", ",", "rot_mat", ",", "skeleton", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.RandomScale.__init__": [[107, 110], ["isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale", "=", "0.2", ")", ":", "\n", "        ", "assert", "isinstance", "(", "scale", ",", "tuple", ")", "or", "isinstance", "(", "scale", ",", "float", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.RandomScale.__call__": [[111, 120], ["isinstance", "len", "numpy.random.uniform", "numpy.array", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "skeleton", "=", "results", "[", "'keypoint'", "]", "\n", "scale", "=", "self", ".", "scale", "\n", "if", "isinstance", "(", "scale", ",", "float", ")", ":", "\n", "            ", "scale", "=", "(", "scale", ",", ")", "*", "skeleton", ".", "shape", "[", "-", "1", "]", "\n", "", "assert", "len", "(", "scale", ")", "==", "skeleton", ".", "shape", "[", "-", "1", "]", "\n", "scale", "=", "1", "+", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "size", "=", "len", "(", "scale", ")", ")", "*", "np", ".", "array", "(", "scale", ")", "\n", "results", "[", "'keypoint'", "]", "=", "skeleton", "*", "scale", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.RandomGaussianNoise.__init__": [[125, 133], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sigma", "=", "0.01", ",", "base", "=", "'frame'", ",", "shared", "=", "False", ")", ":", "\n", "        ", "assert", "isinstance", "(", "sigma", ",", "float", ")", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "base", "=", "base", "\n", "self", ".", "shared", "=", "shared", "\n", "assert", "self", ".", "base", "in", "[", "'frame'", ",", "'video'", "]", "\n", "if", "self", ".", "base", "==", "'frame'", ":", "\n", "            ", "assert", "not", "self", ".", "shared", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.RandomGaussianNoise.__call__": [[134, 170], ["skeleton.reshape.reshape.reshape", "numpy.random.uniform.T.reshape", "skeleton.reshape.reshape.min", "skeleton.reshape.reshape.max", "numpy.stack", "numpy.random.uniform", "numpy.concatenate", "numpy.random.uniform", "numpy.stack.reshape", "skeleton.reshape.reshape.reshape", "numpy.linalg.norm", "numpy.sum", "numpy.linalg.norm", "numpy.random.randn", "numpy.linalg.norm", "numpy.random.randn", "numpy.linalg.norm", "ske_min[].min", "ske_max[].max", "numpy.array"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "skeleton", "=", "results", "[", "'keypoint'", "]", "\n", "M", ",", "T", ",", "V", ",", "C", "=", "skeleton", ".", "shape", "\n", "skeleton", "=", "skeleton", ".", "reshape", "(", "-", "1", ",", "V", ",", "C", ")", "\n", "ske_min", ",", "ske_max", "=", "skeleton", ".", "min", "(", "axis", "=", "1", ")", ",", "skeleton", ".", "max", "(", "axis", "=", "1", ")", "\n", "# MT * C", "\n", "flag", "=", "(", "(", "ske_min", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", ">", "EPS", ")", "\n", "# MT", "\n", "if", "self", ".", "base", "==", "'frame'", ":", "\n", "            ", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "ske_max", "-", "ske_min", ",", "axis", "=", "1", ")", "*", "flag", "\n", "# MT", "\n", "", "elif", "self", ".", "base", "==", "'video'", ":", "\n", "            ", "assert", "np", ".", "sum", "(", "flag", ")", "\n", "ske_min", ",", "ske_max", "=", "ske_min", "[", "flag", "]", ".", "min", "(", "axis", "=", "0", ")", ",", "ske_max", "[", "flag", "]", ".", "max", "(", "axis", "=", "0", ")", "\n", "# C", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "ske_max", "-", "ske_min", ")", "\n", "norm", "=", "np", ".", "array", "(", "[", "norm", "]", "*", "(", "M", "*", "T", ")", ")", "*", "flag", "\n", "# MT * V", "\n", "", "if", "self", ".", "shared", ":", "\n", "            ", "noise", "=", "np", ".", "random", ".", "randn", "(", "V", ")", "*", "self", ".", "sigma", "\n", "noise", "=", "np", ".", "stack", "(", "[", "noise", "]", "*", "(", "M", "*", "T", ")", ")", "\n", "noise", "=", "(", "noise", ".", "T", "*", "norm", ")", ".", "T", "\n", "random_vec", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "size", "=", "(", "C", ",", "V", ")", ")", "\n", "random_vec", "=", "random_vec", "/", "np", ".", "linalg", ".", "norm", "(", "random_vec", ",", "axis", "=", "0", ")", "\n", "random_vec", "=", "np", ".", "concatenate", "(", "[", "random_vec", "]", "*", "(", "M", "*", "T", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "noise", "=", "np", ".", "random", ".", "randn", "(", "M", "*", "T", ",", "V", ")", "*", "self", ".", "sigma", "\n", "noise", "=", "(", "noise", ".", "T", "*", "norm", ")", ".", "T", "\n", "random_vec", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "size", "=", "(", "C", ",", "M", "*", "T", "*", "V", ")", ")", "\n", "random_vec", "=", "random_vec", "/", "np", ".", "linalg", ".", "norm", "(", "random_vec", ",", "axis", "=", "0", ")", "\n", "# C * MTV", "\n", "", "random_vec", "=", "random_vec", "*", "noise", ".", "reshape", "(", "-", "1", ")", "\n", "# C * MTV", "\n", "random_vec", "=", "(", "random_vec", ".", "T", ")", ".", "reshape", "(", "M", ",", "T", ",", "V", ",", "C", ")", "\n", "results", "[", "'keypoint'", "]", "=", "skeleton", ".", "reshape", "(", "M", ",", "T", ",", "V", ",", "C", ")", "+", "random_vec", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize3D.unit_vector": [[176, 179], ["numpy.linalg.norm"], "methods", ["None"], ["def", "unit_vector", "(", "self", ",", "vector", ")", ":", "\n", "        ", "\"\"\"Returns the unit vector of the vector. \"\"\"", "\n", "return", "vector", "/", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize3D.angle_between": [[180, 187], ["pose_related.PreNormalize3D.unit_vector", "pose_related.PreNormalize3D.unit_vector", "numpy.arccos", "numpy.clip", "numpy.abs().sum", "numpy.abs().sum", "numpy.dot", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize3D.unit_vector", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize3D.unit_vector"], ["", "def", "angle_between", "(", "self", ",", "v1", ",", "v2", ")", ":", "\n", "        ", "\"\"\"Returns the angle in radians between vectors 'v1' and 'v2'. \"\"\"", "\n", "if", "np", ".", "abs", "(", "v1", ")", ".", "sum", "(", ")", "<", "1e-6", "or", "np", ".", "abs", "(", "v2", ")", ".", "sum", "(", ")", "<", "1e-6", ":", "\n", "            ", "return", "0", "\n", "", "v1_u", "=", "self", ".", "unit_vector", "(", "v1", ")", "\n", "v2_u", "=", "self", ".", "unit_vector", "(", "v2", ")", "\n", "return", "np", ".", "arccos", "(", "np", ".", "clip", "(", "np", ".", "dot", "(", "v1_u", ",", "v2_u", ")", ",", "-", "1.0", ",", "1.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize3D.rotation_matrix": [[188, 202], ["numpy.asarray", "numpy.cos", "numpy.array", "numpy.eye", "numpy.sqrt", "numpy.sin", "numpy.abs().sum", "numpy.abs", "numpy.dot", "numpy.abs"], "methods", ["None"], ["", "def", "rotation_matrix", "(", "self", ",", "axis", ",", "theta", ")", ":", "\n", "        ", "\"\"\"Return the rotation matrix associated with counterclockwise rotation\n        about the given axis by theta radians.\"\"\"", "\n", "if", "np", ".", "abs", "(", "axis", ")", ".", "sum", "(", ")", "<", "1e-6", "or", "np", ".", "abs", "(", "theta", ")", "<", "1e-6", ":", "\n", "            ", "return", "np", ".", "eye", "(", "3", ")", "\n", "", "axis", "=", "np", ".", "asarray", "(", "axis", ")", "\n", "axis", "=", "axis", "/", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "axis", ",", "axis", ")", ")", "\n", "a", "=", "np", ".", "cos", "(", "theta", "/", "2.0", ")", "\n", "b", ",", "c", ",", "d", "=", "-", "axis", "*", "np", ".", "sin", "(", "theta", "/", "2.0", ")", "\n", "aa", ",", "bb", ",", "cc", ",", "dd", "=", "a", "*", "a", ",", "b", "*", "b", ",", "c", "*", "c", ",", "d", "*", "d", "\n", "bc", ",", "ad", ",", "ac", ",", "ab", ",", "bd", ",", "cd", "=", "b", "*", "c", ",", "a", "*", "d", ",", "a", "*", "c", ",", "a", "*", "b", ",", "b", "*", "d", ",", "c", "*", "d", "\n", "return", "np", ".", "array", "(", "[", "[", "aa", "+", "bb", "-", "cc", "-", "dd", ",", "2", "*", "(", "bc", "+", "ad", ")", ",", "2", "*", "(", "bd", "-", "ac", ")", "]", ",", "\n", "[", "2", "*", "(", "bc", "-", "ad", ")", ",", "aa", "+", "cc", "-", "bb", "-", "dd", ",", "2", "*", "(", "cd", "+", "ab", ")", "]", ",", "\n", "[", "2", "*", "(", "bd", "+", "ac", ")", ",", "2", "*", "(", "cd", "-", "ab", ")", ",", "aa", "+", "dd", "-", "bb", "-", "cc", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize3D.__init__": [[203, 208], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "zaxis", "=", "[", "0", ",", "1", "]", ",", "xaxis", "=", "[", "8", ",", "4", "]", ",", "align_spine", "=", "True", ",", "align_center", "=", "True", ")", ":", "\n", "        ", "self", ".", "zaxis", "=", "zaxis", "\n", "self", ".", "xaxis", "=", "xaxis", "\n", "self", ".", "align_spine", "=", "align_spine", "\n", "self", ".", "align_center", "=", "align_center", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize3D.__call__": [[209, 260], ["results.get", "numpy.einsum.sum", "numpy.cross", "pose_related.PreNormalize3D.angle_between", "pose_related.PreNormalize3D.rotation_matrix", "numpy.einsum", "numpy.cross", "pose_related.PreNormalize3D.angle_between", "pose_related.PreNormalize3D.rotation_matrix", "numpy.einsum", "range", "len", "len", "skeleton[].copy", "skeleton[].copy", "numpy.all", "range", "numpy.isclose", "numpy.all", "numpy.array", "numpy.isclose", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize3D.angle_between", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize3D.rotation_matrix", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize3D.angle_between", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PreNormalize3D.rotation_matrix"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "skeleton", "=", "results", "[", "'keypoint'", "]", "\n", "total_frames", "=", "results", ".", "get", "(", "'total_frames'", ",", "skeleton", ".", "shape", "[", "1", "]", ")", "\n", "\n", "M", ",", "T", ",", "V", ",", "C", "=", "skeleton", ".", "shape", "\n", "assert", "T", "==", "total_frames", "\n", "if", "skeleton", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "return", "results", "\n", "\n", "", "index0", "=", "[", "i", "for", "i", "in", "range", "(", "T", ")", "if", "not", "np", ".", "all", "(", "np", ".", "isclose", "(", "skeleton", "[", "0", ",", "i", "]", ",", "0", ")", ")", "]", "\n", "\n", "assert", "M", "in", "[", "1", ",", "2", "]", "\n", "if", "M", "==", "2", ":", "\n", "            ", "index1", "=", "[", "i", "for", "i", "in", "range", "(", "T", ")", "if", "not", "np", ".", "all", "(", "np", ".", "isclose", "(", "skeleton", "[", "1", ",", "i", "]", ",", "0", ")", ")", "]", "\n", "if", "len", "(", "index0", ")", "<", "len", "(", "index1", ")", ":", "\n", "                ", "skeleton", "=", "skeleton", "[", ":", ",", "np", ".", "array", "(", "index1", ")", "]", "\n", "skeleton", "=", "skeleton", "[", "[", "1", ",", "0", "]", "]", "\n", "", "else", ":", "\n", "                ", "skeleton", "=", "skeleton", "[", ":", ",", "np", ".", "array", "(", "index0", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "skeleton", "=", "skeleton", "[", ":", ",", "np", ".", "array", "(", "index0", ")", "]", "\n", "\n", "", "T_new", "=", "skeleton", ".", "shape", "[", "1", "]", "\n", "\n", "if", "self", ".", "align_center", ":", "\n", "            ", "if", "skeleton", ".", "shape", "[", "2", "]", "==", "25", ":", "\n", "                ", "main_body_center", "=", "skeleton", "[", "0", ",", "0", ",", "1", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "main_body_center", "=", "skeleton", "[", "0", ",", "0", ",", "-", "1", "]", ".", "copy", "(", ")", "\n", "", "mask", "=", "(", "(", "skeleton", "!=", "0", ")", ".", "sum", "(", "-", "1", ")", ">", "0", ")", "[", "...", ",", "None", "]", "\n", "skeleton", "=", "(", "skeleton", "-", "main_body_center", ")", "*", "mask", "\n", "\n", "", "if", "self", ".", "align_spine", ":", "\n", "            ", "joint_bottom", "=", "skeleton", "[", "0", ",", "0", ",", "self", ".", "zaxis", "[", "0", "]", "]", "\n", "joint_top", "=", "skeleton", "[", "0", ",", "0", ",", "self", ".", "zaxis", "[", "1", "]", "]", "\n", "axis", "=", "np", ".", "cross", "(", "joint_top", "-", "joint_bottom", ",", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "angle", "=", "self", ".", "angle_between", "(", "joint_top", "-", "joint_bottom", ",", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "matrix_z", "=", "self", ".", "rotation_matrix", "(", "axis", ",", "angle", ")", "\n", "skeleton", "=", "np", ".", "einsum", "(", "'abcd,kd->abck'", ",", "skeleton", ",", "matrix_z", ")", "\n", "\n", "joint_rshoulder", "=", "skeleton", "[", "0", ",", "0", ",", "self", ".", "xaxis", "[", "0", "]", "]", "\n", "joint_lshoulder", "=", "skeleton", "[", "0", ",", "0", ",", "self", ".", "xaxis", "[", "1", "]", "]", "\n", "axis", "=", "np", ".", "cross", "(", "joint_rshoulder", "-", "joint_lshoulder", ",", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "angle", "=", "self", ".", "angle_between", "(", "joint_rshoulder", "-", "joint_lshoulder", ",", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "matrix_x", "=", "self", ".", "rotation_matrix", "(", "axis", ",", "angle", ")", "\n", "skeleton", "=", "np", ".", "einsum", "(", "'abcd,kd->abck'", ",", "skeleton", ",", "matrix_x", ")", "\n", "\n", "", "results", "[", "'keypoint'", "]", "=", "skeleton", "\n", "results", "[", "'total_frames'", "]", "=", "T_new", "\n", "results", "[", "'body_center'", "]", "=", "main_body_center", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.JointToBone.__init__": [[265, 281], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", "=", "'nturgb+d'", ",", "target", "=", "'keypoint'", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "target", "=", "target", "\n", "if", "self", ".", "dataset", "not", "in", "[", "'nturgb+d'", ",", "'openpose'", ",", "'coco'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f'The dataset type {self.dataset} is not supported'", ")", "\n", "", "if", "self", ".", "dataset", "==", "'nturgb+d'", ":", "\n", "            ", "self", ".", "pairs", "=", "[", "(", "0", ",", "1", ")", ",", "(", "1", ",", "20", ")", ",", "(", "2", ",", "20", ")", ",", "(", "3", ",", "2", ")", ",", "(", "4", ",", "20", ")", ",", "(", "5", ",", "4", ")", ",", "(", "6", ",", "5", ")", ",", "(", "7", ",", "6", ")", ",", "(", "8", ",", "20", ")", ",", "(", "9", ",", "8", ")", ",", "\n", "(", "10", ",", "9", ")", ",", "(", "11", ",", "10", ")", ",", "(", "12", ",", "0", ")", ",", "(", "13", ",", "12", ")", ",", "(", "14", ",", "13", ")", ",", "(", "15", ",", "14", ")", ",", "(", "16", ",", "0", ")", ",", "(", "17", ",", "16", ")", ",", "(", "18", ",", "17", ")", ",", "\n", "(", "19", ",", "18", ")", ",", "(", "21", ",", "22", ")", ",", "(", "20", ",", "20", ")", ",", "(", "22", ",", "7", ")", ",", "(", "23", ",", "24", ")", ",", "(", "24", ",", "11", ")", "]", "\n", "", "elif", "self", ".", "dataset", "==", "'openpose'", ":", "\n", "            ", "self", ".", "pairs", "=", "(", "(", "0", ",", "0", ")", ",", "(", "1", ",", "0", ")", ",", "(", "2", ",", "1", ")", ",", "(", "3", ",", "2", ")", ",", "(", "4", ",", "3", ")", ",", "(", "5", ",", "1", ")", ",", "(", "6", ",", "5", ")", ",", "(", "7", ",", "6", ")", ",", "(", "8", ",", "2", ")", ",", "(", "9", ",", "8", ")", ",", "(", "10", ",", "9", ")", ",", "\n", "(", "11", ",", "5", ")", ",", "(", "12", ",", "11", ")", ",", "(", "13", ",", "12", ")", ",", "(", "14", ",", "0", ")", ",", "(", "15", ",", "0", ")", ",", "(", "16", ",", "14", ")", ",", "(", "17", ",", "15", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'coco'", ":", "\n", "            ", "self", ".", "pairs", "=", "(", "(", "0", ",", "0", ")", ",", "(", "1", ",", "0", ")", ",", "(", "2", ",", "0", ")", ",", "(", "3", ",", "1", ")", ",", "(", "4", ",", "2", ")", ",", "(", "5", ",", "0", ")", ",", "(", "6", ",", "0", ")", ",", "(", "7", ",", "5", ")", ",", "(", "8", ",", "6", ")", ",", "(", "9", ",", "7", ")", ",", "(", "10", ",", "8", ")", ",", "\n", "(", "11", ",", "0", ")", ",", "(", "12", ",", "0", ")", ",", "(", "13", ",", "11", ")", ",", "(", "14", ",", "12", ")", ",", "(", "15", ",", "13", ")", ",", "(", "16", ",", "14", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.JointToBone.__call__": [[282, 297], ["numpy.zeros"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "\n", "        ", "keypoint", "=", "results", "[", "'keypoint'", "]", "\n", "M", ",", "T", ",", "V", ",", "C", "=", "keypoint", ".", "shape", "\n", "bone", "=", "np", ".", "zeros", "(", "(", "M", ",", "T", ",", "V", ",", "C", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "assert", "C", "in", "[", "2", ",", "3", "]", "\n", "for", "v1", ",", "v2", "in", "self", ".", "pairs", ":", "\n", "            ", "bone", "[", "...", ",", "v1", ",", ":", "]", "=", "keypoint", "[", "...", ",", "v1", ",", ":", "]", "-", "keypoint", "[", "...", ",", "v2", ",", ":", "]", "\n", "if", "C", "==", "3", "and", "self", ".", "dataset", "in", "[", "'openpose'", ",", "'coco'", "]", ":", "\n", "                ", "score", "=", "(", "keypoint", "[", "...", ",", "v1", ",", "2", "]", "+", "keypoint", "[", "...", ",", "v2", ",", "2", "]", ")", "/", "2", "\n", "bone", "[", "...", ",", "v1", ",", "2", "]", "=", "score", "\n", "\n", "", "", "results", "[", "self", ".", "target", "]", "=", "bone", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.ToMotion.__init__": [[302, 306], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", "=", "'nturgb+d'", ",", "source", "=", "'keypoint'", ",", "target", "=", "'motion'", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "source", "=", "source", "\n", "self", ".", "target", "=", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.ToMotion.__call__": [[307, 321], ["numpy.zeros_like", "numpy.diff"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "data", "=", "results", "[", "self", ".", "source", "]", "\n", "M", ",", "T", ",", "V", ",", "C", "=", "data", ".", "shape", "\n", "motion", "=", "np", ".", "zeros_like", "(", "data", ")", "\n", "\n", "assert", "C", "in", "[", "2", ",", "3", "]", "\n", "motion", "[", ":", ",", ":", "T", "-", "1", "]", "=", "np", ".", "diff", "(", "data", ",", "axis", "=", "1", ")", "\n", "if", "C", "==", "3", "and", "self", ".", "dataset", "in", "[", "'openpose'", ",", "'coco'", "]", ":", "\n", "            ", "score", "=", "(", "data", "[", ":", ",", ":", "T", "-", "1", ",", ":", ",", "2", "]", "+", "data", "[", ":", ",", "1", ":", ",", ":", ",", "2", "]", ")", "/", "2", "\n", "motion", "[", ":", ",", ":", "T", "-", "1", ",", ":", ",", "2", "]", "=", "score", "\n", "\n", "", "results", "[", "self", ".", "target", "]", "=", "motion", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.MergeSkeFeat.__init__": [[325, 331], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "feat_list", "=", "[", "'keypoint'", "]", ",", "target", "=", "'keypoint'", ",", "axis", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"Merge different feats (ndarray) by concatenate them in the last axis. \"\"\"", "\n", "\n", "self", ".", "feat_list", "=", "feat_list", "\n", "self", ".", "target", "=", "target", "\n", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.MergeSkeFeat.__call__": [[332, 339], ["numpy.concatenate", "numpy.concatenate.append", "results.pop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "feats", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "feat_list", ":", "\n", "            ", "feats", ".", "append", "(", "results", ".", "pop", "(", "name", ")", ")", "\n", "", "feats", "=", "np", ".", "concatenate", "(", "feats", ",", "axis", "=", "self", ".", "axis", ")", "\n", "results", "[", "self", ".", "target", "]", "=", "feats", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.GenSkeFeat.__init__": [[343, 357], ["ops.append", "ops.append", "compose.Compose", "ops.append", "formatting.Rename", "ops.append", "ops.append", "pose_related.MergeSkeFeat", "pose_related.JointToBone", "pose_related.ToMotion", "pose_related.ToMotion"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", "=", "'nturgb+d'", ",", "feats", "=", "[", "'j'", "]", ",", "axis", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "feats", "=", "feats", "\n", "self", ".", "axis", "=", "axis", "\n", "ops", "=", "[", "]", "\n", "if", "'b'", "in", "feats", "or", "'bm'", "in", "feats", ":", "\n", "            ", "ops", ".", "append", "(", "JointToBone", "(", "dataset", "=", "dataset", ",", "target", "=", "'b'", ")", ")", "\n", "", "ops", ".", "append", "(", "Rename", "(", "{", "'keypoint'", ":", "'j'", "}", ")", ")", "\n", "if", "'jm'", "in", "feats", ":", "\n", "            ", "ops", ".", "append", "(", "ToMotion", "(", "dataset", "=", "dataset", ",", "source", "=", "'j'", ",", "target", "=", "'jm'", ")", ")", "\n", "", "if", "'bm'", "in", "feats", ":", "\n", "            ", "ops", ".", "append", "(", "ToMotion", "(", "dataset", "=", "dataset", ",", "source", "=", "'b'", ",", "target", "=", "'bm'", ")", ")", "\n", "", "ops", ".", "append", "(", "MergeSkeFeat", "(", "feat_list", "=", "feats", ",", "axis", "=", "axis", ")", ")", "\n", "self", ".", "ops", "=", "Compose", "(", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.GenSkeFeat.__call__": [[358, 366], ["pose_related.GenSkeFeat.ops", "results.pop", "results.pop", "numpy.concatenate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "'keypoint_score'", "in", "results", "and", "'keypoint'", "in", "results", ":", "\n", "            ", "assert", "self", ".", "dataset", "!=", "'nturgb+d'", "\n", "assert", "results", "[", "'keypoint'", "]", ".", "shape", "[", "-", "1", "]", "==", "2", ",", "'Only 2D keypoints have keypoint_score. '", "\n", "keypoint", "=", "results", ".", "pop", "(", "'keypoint'", ")", "\n", "keypoint_score", "=", "results", ".", "pop", "(", "'keypoint_score'", ")", "\n", "results", "[", "'keypoint'", "]", "=", "np", ".", "concatenate", "(", "[", "keypoint", ",", "keypoint_score", "[", "...", ",", "None", "]", "]", ",", "-", "1", ")", "\n", "", "return", "self", ".", "ops", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PadTo.__init__": [[371, 375], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ",", "mode", "=", "'loop'", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "assert", "mode", "in", "[", "'loop'", ",", "'zero'", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.PadTo.__call__": [[376, 388], ["numpy.arange", "numpy.mod", "[].copy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "total_frames", "=", "results", "[", "'total_frames'", "]", "\n", "assert", "total_frames", "<=", "self", ".", "length", "\n", "inds", "=", "np", ".", "arange", "(", "self", ".", "length", ")", "\n", "inds", "=", "np", ".", "mod", "(", "inds", ",", "total_frames", ")", "\n", "\n", "keypoint", "=", "results", "[", "'keypoint'", "]", "[", ":", ",", "inds", "]", ".", "copy", "(", ")", "\n", "if", "self", ".", "mode", "==", "'zero'", ":", "\n", "            ", "keypoint", "[", ":", ",", "total_frames", ":", "]", "=", "0", "\n", "", "results", "[", "'keypoint'", "]", "=", "keypoint", "\n", "results", "[", "'total_frames'", "]", "=", "self", ".", "length", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.FormatGCNInput.__init__": [[394, 398], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_person", "=", "2", ",", "mode", "=", "'zero'", ")", ":", "\n", "        ", "self", ".", "num_person", "=", "num_person", "\n", "assert", "mode", "in", "[", "'zero'", ",", "'loop'", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.FormatGCNInput.__call__": [[399, 428], ["results.get", "numpy.concatenate.reshape().transpose", "numpy.ascontiguousarray", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "range", "numpy.concatenate.reshape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Performs the FormatShape formatting.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "keypoint", "=", "results", "[", "'keypoint'", "]", "\n", "if", "'keypoint_score'", "in", "results", ":", "\n", "            ", "keypoint", "=", "np", ".", "concatenate", "(", "(", "keypoint", ",", "results", "[", "'keypoint_score'", "]", "[", "...", ",", "None", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# M T V C", "\n", "", "if", "keypoint", ".", "shape", "[", "0", "]", "<", "self", ".", "num_person", ":", "\n", "            ", "pad_dim", "=", "self", ".", "num_person", "-", "keypoint", ".", "shape", "[", "0", "]", "\n", "pad", "=", "np", ".", "zeros", "(", "(", "pad_dim", ",", ")", "+", "keypoint", ".", "shape", "[", "1", ":", "]", ",", "dtype", "=", "keypoint", ".", "dtype", ")", "\n", "keypoint", "=", "np", ".", "concatenate", "(", "(", "keypoint", ",", "pad", ")", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "mode", "==", "'loop'", "and", "keypoint", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_person", ")", ":", "\n", "                    ", "keypoint", "[", "i", "]", "=", "keypoint", "[", "0", "]", "\n", "\n", "", "", "", "elif", "keypoint", ".", "shape", "[", "0", "]", ">", "self", ".", "num_person", ":", "\n", "            ", "keypoint", "=", "keypoint", "[", ":", "self", ".", "num_person", "]", "\n", "\n", "", "M", ",", "T", ",", "V", ",", "C", "=", "keypoint", ".", "shape", "\n", "nc", "=", "results", ".", "get", "(", "'num_clips'", ",", "1", ")", "\n", "assert", "T", "%", "nc", "==", "0", "\n", "keypoint", "=", "keypoint", ".", "reshape", "(", "(", "M", ",", "nc", ",", "T", "//", "nc", ",", "V", ",", "C", ")", ")", ".", "transpose", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "results", "[", "'keypoint'", "]", "=", "np", ".", "ascontiguousarray", "(", "keypoint", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.FormatGCNInput.__repr__": [[429, 432], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "+", "f'(num_person={self.num_person}, mode={self.mode})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.DecompressPose.__init__": [[450, 456], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "squeeze", "=", "True", ",", "\n", "max_person", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "squeeze", "=", "squeeze", "\n", "self", ".", "max_person", "=", "max_person", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.DecompressPose.__call__": [[457, 514], ["results.pop", "numpy.all", "numpy.zeros", "numpy.zeros", "numpy.zeros", "zip", "numpy.unique", "numpy.array", "pose_related.DecompressPose.__call__.mapinds"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "\n", "        ", "required_keys", "=", "[", "'total_frames'", ",", "'frame_inds'", ",", "'keypoint'", "]", "\n", "for", "k", "in", "required_keys", ":", "\n", "            ", "assert", "k", "in", "results", "\n", "\n", "", "total_frames", "=", "results", "[", "'total_frames'", "]", "\n", "frame_inds", "=", "results", ".", "pop", "(", "'frame_inds'", ")", "\n", "keypoint", "=", "results", "[", "'keypoint'", "]", "\n", "\n", "if", "'anno_inds'", "in", "results", ":", "\n", "            ", "frame_inds", "=", "frame_inds", "[", "results", "[", "'anno_inds'", "]", "]", "\n", "keypoint", "=", "keypoint", "[", "results", "[", "'anno_inds'", "]", "]", "\n", "\n", "", "assert", "np", ".", "all", "(", "np", ".", "diff", "(", "frame_inds", ")", ">=", "0", ")", ",", "'frame_inds should be monotonical increasing'", "\n", "\n", "def", "mapinds", "(", "inds", ")", ":", "\n", "            ", "uni", "=", "np", ".", "unique", "(", "inds", ")", "\n", "map_", "=", "{", "x", ":", "i", "for", "i", ",", "x", "in", "enumerate", "(", "uni", ")", "}", "\n", "inds", "=", "[", "map_", "[", "x", "]", "for", "x", "in", "inds", "]", "\n", "return", "np", ".", "array", "(", "inds", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "\n", "", "if", "self", ".", "squeeze", ":", "\n", "            ", "frame_inds", "=", "mapinds", "(", "frame_inds", ")", "\n", "total_frames", "=", "np", ".", "max", "(", "frame_inds", ")", "+", "1", "\n", "\n", "", "results", "[", "'total_frames'", "]", "=", "total_frames", "\n", "\n", "num_joints", "=", "keypoint", ".", "shape", "[", "1", "]", "\n", "num_person", "=", "get_mode", "(", "frame_inds", ")", "[", "-", "1", "]", "[", "0", "]", "\n", "\n", "new_kp", "=", "np", ".", "zeros", "(", "[", "num_person", ",", "total_frames", ",", "num_joints", ",", "2", "]", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "new_kpscore", "=", "np", ".", "zeros", "(", "[", "num_person", ",", "total_frames", ",", "num_joints", "]", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "# 32768 is enough", "\n", "nperson_per_frame", "=", "np", ".", "zeros", "(", "[", "total_frames", "]", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "\n", "for", "frame_ind", ",", "kp", "in", "zip", "(", "frame_inds", ",", "keypoint", ")", ":", "\n", "            ", "person_ind", "=", "nperson_per_frame", "[", "frame_ind", "]", "\n", "new_kp", "[", "person_ind", ",", "frame_ind", "]", "=", "kp", "[", ":", ",", ":", "2", "]", "\n", "new_kpscore", "[", "person_ind", ",", "frame_ind", "]", "=", "kp", "[", ":", ",", "2", "]", "\n", "nperson_per_frame", "[", "frame_ind", "]", "+=", "1", "\n", "\n", "", "if", "num_person", ">", "self", ".", "max_person", ":", "\n", "            ", "for", "i", "in", "range", "(", "total_frames", ")", ":", "\n", "                ", "nperson", "=", "nperson_per_frame", "[", "i", "]", "\n", "val", "=", "new_kpscore", "[", ":", "nperson", ",", "i", "]", "\n", "score_sum", "=", "val", ".", "sum", "(", "-", "1", ")", "\n", "\n", "inds", "=", "sorted", "(", "range", "(", "nperson", ")", ",", "key", "=", "lambda", "x", ":", "-", "score_sum", "[", "x", "]", ")", "\n", "new_kpscore", "[", ":", "nperson", ",", "i", "]", "=", "new_kpscore", "[", "inds", ",", "i", "]", "\n", "new_kp", "[", ":", "nperson", ",", "i", "]", "=", "new_kp", "[", "inds", ",", "i", "]", "\n", "", "num_person", "=", "self", ".", "max_person", "\n", "results", "[", "'num_person'", "]", "=", "num_person", "\n", "\n", "", "results", "[", "'keypoint'", "]", "=", "new_kp", "[", ":", "num_person", "]", "\n", "results", "[", "'keypoint_score'", "]", "=", "new_kpscore", "[", ":", "num_person", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.pose_related.DecompressPose.__repr__": [[515, 517], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "f'{self.__class__.__name__}(squeeze={self.squeeze}, max_person={self.max_person})'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.ToTensor.__init__": [[40, 42], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.ToTensor.__call__": [[43, 53], ["formatting.to_tensor"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.to_tensor"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Performs the ToTensor formatting.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "results", "[", "key", "]", "=", "to_tensor", "(", "results", "[", "key", "]", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.ToTensor.__repr__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}(keys={self.keys})'", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.Rename.__init__": [[69, 71], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mapping", ")", ":", "\n", "        ", "self", ".", "mapping", "=", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.Rename.__call__": [[72, 81], ["formatting.Rename.mapping.items", "results.pop", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "self", ".", "mapping", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "results", ":", "\n", "                ", "assert", "isinstance", "(", "key", ",", "str", ")", "and", "isinstance", "(", "value", ",", "str", ")", "\n", "assert", "value", "not", "in", "results", ",", "(", "'the new name already exists in '", "\n", "'results'", ")", "\n", "results", "[", "value", "]", "=", "results", "[", "key", "]", "\n", "results", ".", "pop", "(", "key", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.Collect.__init__": [[122, 132], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "keys", ",", "\n", "meta_keys", "=", "(", "'filename'", ",", "'label'", ",", "'original_shape'", ",", "'img_shape'", ",", "\n", "'pad_shape'", ",", "'flip_direction'", ",", "'img_norm_cfg'", ")", ",", "\n", "meta_name", "=", "'img_metas'", ",", "\n", "nested", "=", "False", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "self", ".", "meta_keys", "=", "meta_keys", "\n", "self", ".", "meta_name", "=", "meta_name", "\n", "self", ".", "nested", "=", "nested", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.Collect.__call__": [[133, 154], ["len", "mmcv.parallel.DataContainer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Performs the Collect formatting.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "data", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "data", "[", "key", "]", "=", "results", "[", "key", "]", "\n", "\n", "", "if", "len", "(", "self", ".", "meta_keys", ")", "!=", "0", ":", "\n", "            ", "meta", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "meta_keys", ":", "\n", "                ", "meta", "[", "key", "]", "=", "results", "[", "key", "]", "\n", "", "data", "[", "self", ".", "meta_name", "]", "=", "DC", "(", "meta", ",", "cpu_only", "=", "True", ")", "\n", "", "if", "self", ".", "nested", ":", "\n", "            ", "for", "k", "in", "data", ":", "\n", "                ", "data", "[", "k", "]", "=", "[", "data", "[", "k", "]", "]", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.Collect.__repr__": [[155, 157], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "f'{self.__class__.__name__}('", "\n", "f'keys={self.keys}, meta_keys={self.meta_keys}, '", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.FormatShape.__init__": [[175, 181], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_format", ",", "collapse", "=", "False", ")", ":", "\n", "        ", "self", ".", "input_format", "=", "input_format", "\n", "self", ".", "collapse", "=", "collapse", "\n", "if", "self", ".", "input_format", "not", "in", "[", "'NCTHW'", ",", "'NCHW'", ",", "'NCTHW_Heatmap'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f'The input format {self.input_format} is invalid.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.FormatShape.__call__": [[182, 230], ["isinstance", "numpy.array", "numpy.transpose.reshape", "numpy.transpose", "numpy.transpose.reshape", "numpy.transpose.squeeze", "numpy.transpose.reshape", "numpy.transpose", "numpy.transpose.reshape", "numpy.transpose"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Performs the FormatShape formatting.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "results", "[", "'imgs'", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "results", "[", "'imgs'", "]", "=", "np", ".", "array", "(", "results", "[", "'imgs'", "]", ")", "\n", "", "imgs", "=", "results", "[", "'imgs'", "]", "\n", "# [M x H x W x C]", "\n", "# M = 1 * N_crops * N_clips * L", "\n", "if", "self", ".", "collapse", ":", "\n", "            ", "assert", "results", "[", "'num_clips'", "]", "==", "1", "\n", "\n", "", "if", "self", ".", "input_format", "==", "'NCTHW'", ":", "\n", "            ", "num_clips", "=", "results", "[", "'num_clips'", "]", "\n", "clip_len", "=", "results", "[", "'clip_len'", "]", "\n", "\n", "imgs", "=", "imgs", ".", "reshape", "(", "(", "-", "1", ",", "num_clips", ",", "clip_len", ")", "+", "imgs", ".", "shape", "[", "1", ":", "]", ")", "\n", "# N_crops x N_clips x L x H x W x C", "\n", "imgs", "=", "np", ".", "transpose", "(", "imgs", ",", "(", "0", ",", "1", ",", "5", ",", "2", ",", "3", ",", "4", ")", ")", "\n", "# N_crops x N_clips x C x L x H x W", "\n", "imgs", "=", "imgs", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "imgs", ".", "shape", "[", "2", ":", "]", ")", "\n", "# M' x C x L x H x W", "\n", "# M' = N_crops x N_clips", "\n", "", "elif", "self", ".", "input_format", "==", "'NCTHW_Heatmap'", ":", "\n", "            ", "num_clips", "=", "results", "[", "'num_clips'", "]", "\n", "clip_len", "=", "results", "[", "'clip_len'", "]", "\n", "\n", "imgs", "=", "imgs", ".", "reshape", "(", "(", "-", "1", ",", "num_clips", ",", "clip_len", ")", "+", "imgs", ".", "shape", "[", "1", ":", "]", ")", "\n", "# N_crops x N_clips x L x C x H x W", "\n", "imgs", "=", "np", ".", "transpose", "(", "imgs", ",", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ")", "\n", "# N_crops x N_clips x C x L x H x W", "\n", "imgs", "=", "imgs", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "imgs", ".", "shape", "[", "2", ":", "]", ")", "\n", "# M' x C x L x H x W", "\n", "# M' = N_crops x N_clips", "\n", "", "elif", "self", ".", "input_format", "==", "'NCHW'", ":", "\n", "            ", "imgs", "=", "np", ".", "transpose", "(", "imgs", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "# M x C x H x W", "\n", "\n", "", "if", "self", ".", "collapse", ":", "\n", "            ", "assert", "imgs", ".", "shape", "[", "0", "]", "==", "1", "\n", "imgs", "=", "imgs", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "results", "[", "'imgs'", "]", "=", "imgs", "\n", "results", "[", "'input_shape'", "]", "=", "imgs", ".", "shape", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.FormatShape.__repr__": [[231, 235], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f\"(input_format='{self.input_format}')\"", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.formatting.to_tensor": [[12, 29], ["isinstance", "isinstance", "isinstance", "isinstance", "TypeError", "torch.from_numpy", "isinstance", "torch.tensor", "torch.LongTensor", "torch.FloatTensor", "mmcv.is_str", "type"], "function", ["None"], ["def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n    \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "if", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "if", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "data", ")", "\n", "", "if", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "if", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n", "", "raise", "TypeError", "(", "f'type {type(data)} cannot be converted to tensor.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.loading.DecordInit.__init__": [[26, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "io_backend", "=", "'disk'", ",", "num_threads", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "io_backend", "=", "io_backend", "\n", "self", ".", "num_threads", "=", "num_threads", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "file_client", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.loading.DecordInit.__call__": [[32, 53], ["io.BytesIO", "decord.VideoReader", "len", "mmcv.fileio.FileClient", "loading.DecordInit.file_client.get", "ImportError"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Perform the Decord initialization.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "import", "decord", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "'Please run \"pip install decord\" to install Decord first.'", ")", "\n", "\n", "", "if", "self", ".", "file_client", "is", "None", ":", "\n", "            ", "self", ".", "file_client", "=", "FileClient", "(", "self", ".", "io_backend", ",", "**", "self", ".", "kwargs", ")", "\n", "\n", "", "file_obj", "=", "io", ".", "BytesIO", "(", "self", ".", "file_client", ".", "get", "(", "results", "[", "'filename'", "]", ")", ")", "\n", "container", "=", "decord", ".", "VideoReader", "(", "file_obj", ",", "num_threads", "=", "self", ".", "num_threads", ")", "\n", "results", "[", "'video_reader'", "]", "=", "container", "\n", "results", "[", "'total_frames'", "]", "=", "len", "(", "container", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.loading.DecordInit.__repr__": [[54, 59], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "(", "f'{self.__class__.__name__}('", "\n", "f'io_backend={self.io_backend}, '", "\n", "f'num_threads={self.num_threads})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.loading.DecordDecode.__init__": [[78, 81], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mode", "=", "'accurate'", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "assert", "mode", "in", "[", "'accurate'", ",", "'efficient'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.loading.DecordDecode.__call__": [[82, 116], ["numpy.squeeze", "container.get_batch().asnumpy", "list", "container.seek", "list", "container.get_batch", "container.seek", "container.next", "list.append", "container.next.asnumpy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Perform the Decord decoding.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "container", "=", "results", "[", "'video_reader'", "]", "\n", "\n", "if", "results", "[", "'frame_inds'", "]", ".", "ndim", "!=", "1", ":", "\n", "            ", "results", "[", "'frame_inds'", "]", "=", "np", ".", "squeeze", "(", "results", "[", "'frame_inds'", "]", ")", "\n", "\n", "", "frame_inds", "=", "results", "[", "'frame_inds'", "]", "\n", "\n", "if", "self", ".", "mode", "==", "'accurate'", ":", "\n", "            ", "imgs", "=", "container", ".", "get_batch", "(", "frame_inds", ")", ".", "asnumpy", "(", ")", "\n", "imgs", "=", "list", "(", "imgs", ")", "\n", "", "elif", "self", ".", "mode", "==", "'efficient'", ":", "\n", "# This mode is faster, however it always returns I-FRAME", "\n", "            ", "container", ".", "seek", "(", "0", ")", "\n", "imgs", "=", "list", "(", ")", "\n", "for", "idx", "in", "frame_inds", ":", "\n", "                ", "container", ".", "seek", "(", "idx", ")", "\n", "frame", "=", "container", ".", "next", "(", ")", "\n", "imgs", ".", "append", "(", "frame", ".", "asnumpy", "(", ")", ")", "\n", "\n", "", "", "results", "[", "'video_reader'", "]", "=", "None", "\n", "del", "container", "\n", "\n", "results", "[", "'imgs'", "]", "=", "imgs", "\n", "results", "[", "'original_shape'", "]", "=", "imgs", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "results", "[", "'img_shape'", "]", "=", "imgs", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.loading.DecordDecode.__repr__": [[117, 120], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "f'{self.__class__.__name__}(mode={self.mode})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.loading.ArrayDecode.__call__": [[130, 164], ["list", "results.get", "enumerate", "numpy.squeeze", "list.append", "list.extend"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Perform the ``RawFrameDecode`` to pick frames given indices.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "\n", "modality", "=", "results", "[", "'modality'", "]", "\n", "array", "=", "results", "[", "'array'", "]", "\n", "\n", "imgs", "=", "list", "(", ")", "\n", "\n", "if", "results", "[", "'frame_inds'", "]", ".", "ndim", "!=", "1", ":", "\n", "            ", "results", "[", "'frame_inds'", "]", "=", "np", ".", "squeeze", "(", "results", "[", "'frame_inds'", "]", ")", "\n", "\n", "", "offset", "=", "results", ".", "get", "(", "'offset'", ",", "0", ")", "\n", "\n", "for", "i", ",", "frame_idx", "in", "enumerate", "(", "results", "[", "'frame_inds'", "]", ")", ":", "\n", "\n", "            ", "frame_idx", "+=", "offset", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "                ", "imgs", ".", "append", "(", "array", "[", "frame_idx", "]", ")", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "                ", "imgs", ".", "extend", "(", "\n", "[", "array", "[", "frame_idx", ",", "...", ",", "0", "]", ",", "array", "[", "frame_idx", ",", "...", ",", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "results", "[", "'imgs'", "]", "=", "imgs", "\n", "results", "[", "'original_shape'", "]", "=", "imgs", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "results", "[", "'img_shape'", "]", "=", "imgs", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.loading.ArrayDecode.__repr__": [[165, 167], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}()'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.GeneratePoseTarget.__init__": [[44, 70], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "sigma", "=", "0.6", ",", "\n", "use_score", "=", "True", ",", "\n", "with_kp", "=", "True", ",", "\n", "with_limb", "=", "False", ",", "\n", "skeletons", "=", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "3", ")", ",", "(", "2", ",", "4", ")", ",", "(", "0", ",", "5", ")", ",", "(", "5", ",", "7", ")", ",", "\n", "(", "7", ",", "9", ")", ",", "(", "0", ",", "6", ")", ",", "(", "6", ",", "8", ")", ",", "(", "8", ",", "10", ")", ",", "(", "5", ",", "11", ")", ",", "(", "11", ",", "13", ")", ",", "\n", "(", "13", ",", "15", ")", ",", "(", "6", ",", "12", ")", ",", "(", "12", ",", "14", ")", ",", "(", "14", ",", "16", ")", ",", "(", "11", ",", "12", ")", ")", ",", "\n", "double", "=", "False", ",", "\n", "left_kp", "=", "(", "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", "15", ")", ",", "\n", "right_kp", "=", "(", "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14", ",", "16", ")", ",", "\n", "left_limb", "=", "(", "0", ",", "2", ",", "4", ",", "5", ",", "6", ",", "10", ",", "11", ",", "12", ")", ",", "\n", "right_limb", "=", "(", "1", ",", "3", ",", "7", ",", "8", ",", "9", ",", "13", ",", "14", ",", "15", ")", ")", ":", "\n", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "use_score", "=", "use_score", "\n", "self", ".", "with_kp", "=", "with_kp", "\n", "self", ".", "with_limb", "=", "with_limb", "\n", "self", ".", "double", "=", "double", "\n", "\n", "assert", "self", ".", "with_kp", "+", "self", ".", "with_limb", "==", "1", ",", "(", "'One of \"with_limb\" and \"with_kp\" should be set as True.'", ")", "\n", "self", ".", "left_kp", "=", "left_kp", "\n", "self", ".", "right_kp", "=", "right_kp", "\n", "self", ".", "skeletons", "=", "skeletons", "\n", "self", ".", "left_limb", "=", "left_limb", "\n", "self", ".", "right_limb", "=", "right_limb", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.GeneratePoseTarget.generate_a_heatmap": [[71, 106], ["zip", "max", "min", "max", "min", "numpy.arange", "numpy.arange", "numpy.exp", "numpy.maximum", "int", "int", "int", "int", "len", "len"], "methods", ["None"], ["", "def", "generate_a_heatmap", "(", "self", ",", "arr", ",", "centers", ",", "max_values", ")", ":", "\n", "        ", "\"\"\"Generate pseudo heatmap for one keypoint in one frame.\n\n        Args:\n            arr (np.ndarray): The array to store the generated heatmaps. Shape: img_h * img_w.\n            centers (np.ndarray): The coordinates of corresponding keypoints (of multiple persons). Shape: M * 2.\n            max_values (np.ndarray): The max values of each keypoint. Shape: M.\n\n        Returns:\n            np.ndarray: The generated pseudo heatmap.\n        \"\"\"", "\n", "\n", "sigma", "=", "self", ".", "sigma", "\n", "img_h", ",", "img_w", "=", "arr", ".", "shape", "\n", "\n", "for", "center", ",", "max_value", "in", "zip", "(", "centers", ",", "max_values", ")", ":", "\n", "            ", "if", "max_value", "<", "EPS", ":", "\n", "                ", "continue", "\n", "\n", "", "mu_x", ",", "mu_y", "=", "center", "[", "0", "]", ",", "center", "[", "1", "]", "\n", "st_x", "=", "max", "(", "int", "(", "mu_x", "-", "3", "*", "sigma", ")", ",", "0", ")", "\n", "ed_x", "=", "min", "(", "int", "(", "mu_x", "+", "3", "*", "sigma", ")", "+", "1", ",", "img_w", ")", "\n", "st_y", "=", "max", "(", "int", "(", "mu_y", "-", "3", "*", "sigma", ")", ",", "0", ")", "\n", "ed_y", "=", "min", "(", "int", "(", "mu_y", "+", "3", "*", "sigma", ")", "+", "1", ",", "img_h", ")", "\n", "x", "=", "np", ".", "arange", "(", "st_x", ",", "ed_x", ",", "1", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "arange", "(", "st_y", ",", "ed_y", ",", "1", ",", "np", ".", "float32", ")", "\n", "\n", "# if the keypoint not in the heatmap coordinate system", "\n", "if", "not", "(", "len", "(", "x", ")", "and", "len", "(", "y", ")", ")", ":", "\n", "                ", "continue", "\n", "", "y", "=", "y", "[", ":", ",", "None", "]", "\n", "\n", "patch", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "mu_x", ")", "**", "2", "+", "(", "y", "-", "mu_y", ")", "**", "2", ")", "/", "2", "/", "sigma", "**", "2", ")", "\n", "patch", "=", "patch", "*", "max_value", "\n", "arr", "[", "st_y", ":", "ed_y", ",", "st_x", ":", "ed_x", "]", "=", "np", ".", "maximum", "(", "arr", "[", "st_y", ":", "ed_y", ",", "st_x", ":", "ed_x", "]", ",", "patch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.GeneratePoseTarget.generate_a_limb_heatmap": [[107, 176], ["zip", "min", "max", "min", "max", "min", "numpy.arange", "numpy.arange", "numpy.zeros_like", "numpy.zeros_like", "numpy.stack", "numpy.exp", "numpy.maximum", "min", "max", "min", "max", "int", "int", "heatmap_related.GeneratePoseTarget.generate_a_heatmap", "int", "int", "len", "len", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.GeneratePoseTarget.generate_a_heatmap"], ["", "", "def", "generate_a_limb_heatmap", "(", "self", ",", "arr", ",", "starts", ",", "ends", ",", "start_values", ",", "end_values", ")", ":", "\n", "        ", "\"\"\"Generate pseudo heatmap for one limb in one frame.\n\n        Args:\n            arr (np.ndarray): The array to store the generated heatmaps. Shape: img_h * img_w.\n            starts (np.ndarray): The coordinates of one keypoint in the corresponding limbs. Shape: M * 2.\n            ends (np.ndarray): The coordinates of the other keypoint in the corresponding limbs. Shape: M * 2.\n            start_values (np.ndarray): The max values of one keypoint in the corresponding limbs. Shape: M.\n            end_values (np.ndarray): The max values of the other keypoint in the corresponding limbs. Shape: M.\n\n        Returns:\n            np.ndarray: The generated pseudo heatmap.\n        \"\"\"", "\n", "\n", "sigma", "=", "self", ".", "sigma", "\n", "img_h", ",", "img_w", "=", "arr", ".", "shape", "\n", "\n", "for", "start", ",", "end", ",", "start_value", ",", "end_value", "in", "zip", "(", "starts", ",", "ends", ",", "start_values", ",", "end_values", ")", ":", "\n", "            ", "value_coeff", "=", "min", "(", "start_value", ",", "end_value", ")", "\n", "if", "value_coeff", "<", "EPS", ":", "\n", "                ", "continue", "\n", "\n", "", "min_x", ",", "max_x", "=", "min", "(", "start", "[", "0", "]", ",", "end", "[", "0", "]", ")", ",", "max", "(", "start", "[", "0", "]", ",", "end", "[", "0", "]", ")", "\n", "min_y", ",", "max_y", "=", "min", "(", "start", "[", "1", "]", ",", "end", "[", "1", "]", ")", ",", "max", "(", "start", "[", "1", "]", ",", "end", "[", "1", "]", ")", "\n", "\n", "min_x", "=", "max", "(", "int", "(", "min_x", "-", "3", "*", "sigma", ")", ",", "0", ")", "\n", "max_x", "=", "min", "(", "int", "(", "max_x", "+", "3", "*", "sigma", ")", "+", "1", ",", "img_w", ")", "\n", "min_y", "=", "max", "(", "int", "(", "min_y", "-", "3", "*", "sigma", ")", ",", "0", ")", "\n", "max_y", "=", "min", "(", "int", "(", "max_y", "+", "3", "*", "sigma", ")", "+", "1", ",", "img_h", ")", "\n", "\n", "x", "=", "np", ".", "arange", "(", "min_x", ",", "max_x", ",", "1", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "arange", "(", "min_y", ",", "max_y", ",", "1", ",", "np", ".", "float32", ")", "\n", "\n", "if", "not", "(", "len", "(", "x", ")", "and", "len", "(", "y", ")", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "y", "=", "y", "[", ":", ",", "None", "]", "\n", "x_0", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "y_0", "=", "np", ".", "zeros_like", "(", "y", ")", "\n", "\n", "# distance to start keypoints", "\n", "d2_start", "=", "(", "(", "x", "-", "start", "[", "0", "]", ")", "**", "2", "+", "(", "y", "-", "start", "[", "1", "]", ")", "**", "2", ")", "\n", "\n", "# distance to end keypoints", "\n", "d2_end", "=", "(", "(", "x", "-", "end", "[", "0", "]", ")", "**", "2", "+", "(", "y", "-", "end", "[", "1", "]", ")", "**", "2", ")", "\n", "\n", "# the distance between start and end keypoints.", "\n", "d2_ab", "=", "(", "(", "start", "[", "0", "]", "-", "end", "[", "0", "]", ")", "**", "2", "+", "(", "start", "[", "1", "]", "-", "end", "[", "1", "]", ")", "**", "2", ")", "\n", "\n", "if", "d2_ab", "<", "1", ":", "\n", "                ", "self", ".", "generate_a_heatmap", "(", "arr", ",", "start", "[", "None", "]", ",", "start_value", "[", "None", "]", ")", "\n", "continue", "\n", "\n", "", "coeff", "=", "(", "d2_start", "-", "d2_end", "+", "d2_ab", ")", "/", "2.", "/", "d2_ab", "\n", "\n", "a_dominate", "=", "coeff", "<=", "0", "\n", "b_dominate", "=", "coeff", ">=", "1", "\n", "seg_dominate", "=", "1", "-", "a_dominate", "-", "b_dominate", "\n", "\n", "position", "=", "np", ".", "stack", "(", "[", "x", "+", "y_0", ",", "y", "+", "x_0", "]", ",", "axis", "=", "-", "1", ")", "\n", "projection", "=", "start", "+", "np", ".", "stack", "(", "[", "coeff", ",", "coeff", "]", ",", "axis", "=", "-", "1", ")", "*", "(", "end", "-", "start", ")", "\n", "d2_line", "=", "position", "-", "projection", "\n", "d2_line", "=", "d2_line", "[", ":", ",", ":", ",", "0", "]", "**", "2", "+", "d2_line", "[", ":", ",", ":", ",", "1", "]", "**", "2", "\n", "d2_seg", "=", "a_dominate", "*", "d2_start", "+", "b_dominate", "*", "d2_end", "+", "seg_dominate", "*", "d2_line", "\n", "\n", "patch", "=", "np", ".", "exp", "(", "-", "d2_seg", "/", "2.", "/", "sigma", "**", "2", ")", "\n", "patch", "=", "patch", "*", "value_coeff", "\n", "\n", "arr", "[", "min_y", ":", "max_y", ",", "min_x", ":", "max_x", "]", "=", "np", ".", "maximum", "(", "arr", "[", "min_y", ":", "max_y", ",", "min_x", ":", "max_x", "]", ",", "patch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.GeneratePoseTarget.generate_heatmap": [[177, 204], ["range", "enumerate", "heatmap_related.GeneratePoseTarget.generate_a_heatmap", "heatmap_related.GeneratePoseTarget.generate_a_limb_heatmap"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.GeneratePoseTarget.generate_a_heatmap", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.GeneratePoseTarget.generate_a_limb_heatmap"], ["", "", "def", "generate_heatmap", "(", "self", ",", "arr", ",", "kps", ",", "max_values", ")", ":", "\n", "        ", "\"\"\"Generate pseudo heatmap for all keypoints and limbs in one frame (if\n        needed).\n\n        Args:\n            arr (np.ndarray): The array to store the generated heatmaps. Shape: V * img_h * img_w.\n            kps (np.ndarray): The coordinates of keypoints in this frame. Shape: M * V * 2.\n            max_values (np.ndarray): The confidence score of each keypoint. Shape: M * V.\n\n        Returns:\n            np.ndarray: The generated pseudo heatmap.\n        \"\"\"", "\n", "\n", "if", "self", ".", "with_kp", ":", "\n", "            ", "num_kp", "=", "kps", ".", "shape", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "num_kp", ")", ":", "\n", "                ", "self", ".", "generate_a_heatmap", "(", "arr", "[", "i", "]", ",", "kps", "[", ":", ",", "i", "]", ",", "max_values", "[", ":", ",", "i", "]", ")", "\n", "\n", "", "", "if", "self", ".", "with_limb", ":", "\n", "            ", "for", "i", ",", "limb", "in", "enumerate", "(", "self", ".", "skeletons", ")", ":", "\n", "                ", "start_idx", ",", "end_idx", "=", "limb", "\n", "starts", "=", "kps", "[", ":", ",", "start_idx", "]", "\n", "ends", "=", "kps", "[", ":", ",", "end_idx", "]", "\n", "\n", "start_values", "=", "max_values", "[", ":", ",", "start_idx", "]", "\n", "end_values", "=", "max_values", "[", ":", ",", "end_idx", "]", "\n", "self", ".", "generate_a_limb_heatmap", "(", "arr", "[", "i", "]", ",", "starts", ",", "ends", ",", "start_values", ",", "end_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.GeneratePoseTarget.gen_an_aug": [[205, 240], ["numpy.zeros", "range", "numpy.ones", "len", "heatmap_related.GeneratePoseTarget.generate_heatmap", "numpy.ones_like"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.GeneratePoseTarget.generate_heatmap"], ["", "", "", "def", "gen_an_aug", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Generate pseudo heatmaps for all frames.\n\n        Args:\n            results (dict): The dictionary that contains all info of a sample.\n\n        Returns:\n            list[np.ndarray]: The generated pseudo heatmaps.\n        \"\"\"", "\n", "\n", "all_kps", "=", "results", "[", "'keypoint'", "]", "\n", "kp_shape", "=", "all_kps", ".", "shape", "\n", "\n", "if", "'keypoint_score'", "in", "results", ":", "\n", "            ", "all_kpscores", "=", "results", "[", "'keypoint_score'", "]", "\n", "", "else", ":", "\n", "            ", "all_kpscores", "=", "np", ".", "ones", "(", "kp_shape", "[", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "img_h", ",", "img_w", "=", "results", "[", "'img_shape'", "]", "\n", "num_frame", "=", "kp_shape", "[", "1", "]", "\n", "num_c", "=", "0", "\n", "if", "self", ".", "with_kp", ":", "\n", "            ", "num_c", "+=", "all_kps", ".", "shape", "[", "2", "]", "\n", "", "if", "self", ".", "with_limb", ":", "\n", "            ", "num_c", "+=", "len", "(", "self", ".", "skeletons", ")", "\n", "", "ret", "=", "np", ".", "zeros", "(", "[", "num_frame", ",", "num_c", ",", "img_h", ",", "img_w", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_frame", ")", ":", "\n", "# M, V, C", "\n", "            ", "kps", "=", "all_kps", "[", ":", ",", "i", "]", "\n", "# M, C", "\n", "kpscores", "=", "all_kpscores", "[", ":", ",", "i", "]", "if", "self", ".", "use_score", "else", "np", ".", "ones_like", "(", "all_kpscores", "[", ":", ",", "i", "]", ")", "\n", "\n", "self", ".", "generate_heatmap", "(", "ret", "[", "i", "]", ",", "kps", ",", "kpscores", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.GeneratePoseTarget.__call__": [[241, 254], ["heatmap_related.GeneratePoseTarget.gen_an_aug", "numpy.arange", "zip", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.GeneratePoseTarget.gen_an_aug"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "heatmap", "=", "self", ".", "gen_an_aug", "(", "results", ")", "\n", "\n", "if", "self", ".", "double", ":", "\n", "            ", "indices", "=", "np", ".", "arange", "(", "heatmap", ".", "shape", "[", "1", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "left", ",", "right", "=", "(", "self", ".", "left_kp", ",", "self", ".", "right_kp", ")", "if", "self", ".", "with_kp", "else", "(", "self", ".", "left_limb", ",", "self", ".", "right_limb", ")", "\n", "for", "l", ",", "r", "in", "zip", "(", "left", ",", "right", ")", ":", "# noqa: E741", "\n", "                ", "indices", "[", "l", "]", "=", "r", "\n", "indices", "[", "r", "]", "=", "l", "\n", "", "heatmap_flip", "=", "heatmap", "[", "...", ",", ":", ":", "-", "1", "]", "[", ":", ",", "indices", "]", "\n", "heatmap", "=", "np", ".", "concatenate", "(", "[", "heatmap", ",", "heatmap_flip", "]", ")", "\n", "", "results", "[", "'imgs'", "]", "=", "heatmap", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.GeneratePoseTarget.__repr__": [[255, 266], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "(", "f'{self.__class__.__name__}('", "\n", "f'sigma={self.sigma}, '", "\n", "f'use_score={self.use_score}, '", "\n", "f'with_kp={self.with_kp}, '", "\n", "f'with_limb={self.with_limb}, '", "\n", "f'skeletons={self.skeletons}, '", "\n", "f'double={self.double}, '", "\n", "f'left_kp={self.left_kp}, '", "\n", "f'right_kp={self.right_kp})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.Heatmap2Potion.__init__": [[274, 281], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "option", "=", "'full'", ")", ":", "\n", "        ", "self", ".", "C", "=", "C", "\n", "self", ".", "option", "=", "option", "\n", "self", ".", "eps", "=", "1e-4", "\n", "assert", "isinstance", "(", "C", ",", "int", ")", "\n", "assert", "C", ">=", "2", "\n", "assert", "self", ".", "option", "in", "[", "'U'", ",", "'N'", ",", "'I'", ",", "'full'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.heatmap_related.Heatmap2Potion.__call__": [[282, 340], ["heatmaps.transpose.transpose.reshape", "heatmaps.transpose.transpose.transpose", "range", "numpy.sum", "numpy.max", "numpy.sum", "numpy.concatenate.reshape", "numpy.zeros", "numpy.zeros", "int", "heatmap_related.Heatmap2Potion.__call__.idx2color"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "heatmaps", "=", "results", "[", "'imgs'", "]", "\n", "\n", "if", "'clip_len'", "in", "results", ":", "\n", "            ", "clip_len", "=", "results", "[", "'clip_len'", "]", "\n", "", "else", ":", "\n", "# Just for Video-PoTion generation", "\n", "            ", "clip_len", "=", "heatmaps", ".", "shape", "[", "0", "]", "\n", "\n", "", "C", "=", "self", ".", "C", "\n", "heatmaps", "=", "heatmaps", ".", "reshape", "(", "(", "-", "1", ",", "clip_len", ")", "+", "heatmaps", ".", "shape", "[", "1", ":", "]", ")", "\n", "# num_clip, clip_len, C, H, W", "\n", "heatmaps", "=", "heatmaps", ".", "transpose", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", "\n", "\n", "# t in {0, 1, 2, ..., clip_len - 1}", "\n", "def", "idx2color", "(", "t", ")", ":", "\n", "            ", "st", "=", "np", ".", "zeros", "(", "C", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ed", "=", "np", ".", "zeros", "(", "C", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "t", "==", "clip_len", "-", "1", ":", "\n", "                ", "ed", "[", "C", "-", "1", "]", "=", "1.", "\n", "return", "ed", "\n", "", "val", "=", "t", "/", "(", "clip_len", "-", "1", ")", "*", "(", "C", "-", "1", ")", "\n", "bin_idx", "=", "int", "(", "val", ")", "\n", "val", "=", "val", "-", "bin_idx", "\n", "st", "[", "bin_idx", "]", "=", "1.", "\n", "ed", "[", "bin_idx", "+", "1", "]", "=", "1.", "\n", "return", "(", "1", "-", "val", ")", "*", "st", "+", "val", "*", "ed", "\n", "\n", "", "heatmaps_wcolor", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "clip_len", ")", ":", "\n", "            ", "color", "=", "idx2color", "(", "i", ")", "\n", "heatmap", "=", "heatmaps", "[", ":", ",", "i", "]", "\n", "heatmap", "=", "heatmap", "[", "...", ",", "None", "]", "\n", "heatmap", "=", "np", ".", "matmul", "(", "heatmap", ",", "color", "[", "None", ",", "]", ")", "\n", "heatmaps_wcolor", ".", "append", "(", "heatmap", ")", "\n", "\n", "# The shape of each element is N x H x W x K x C", "\n", "", "heatmap_S", "=", "np", ".", "sum", "(", "heatmaps_wcolor", ",", "axis", "=", "0", ")", "\n", "# The shape of U_norm is N x 1 x 1 x K x C", "\n", "U_norm", "=", "np", ".", "max", "(", "\n", "np", ".", "max", "(", "heatmap_S", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "heatmap_U", "=", "heatmap_S", "/", "(", "U_norm", "+", "self", ".", "eps", ")", "\n", "heatmap_I", "=", "np", ".", "sum", "(", "heatmap_U", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "heatmap_N", "=", "heatmap_U", "/", "(", "heatmap_I", "+", "1", ")", "\n", "if", "self", ".", "option", "==", "'U'", ":", "\n", "            ", "heatmap", "=", "heatmap_U", "\n", "", "elif", "self", ".", "option", "==", "'I'", ":", "\n", "            ", "heatmap", "=", "heatmap_I", "\n", "", "elif", "self", ".", "option", "==", "'N'", ":", "\n", "            ", "heatmap", "=", "heatmap_N", "\n", "", "elif", "self", ".", "option", "==", "'full'", ":", "\n", "            ", "heatmap", "=", "np", ".", "concatenate", "(", "[", "heatmap_U", ",", "heatmap_I", ",", "heatmap_N", "]", ",", "\n", "axis", "=", "-", "1", ")", "\n", "\n", "# Reshape the heatmap to 4D", "\n", "", "heatmap", "=", "heatmap", ".", "reshape", "(", "heatmap", ".", "shape", "[", ":", "3", "]", "+", "(", "-", "1", ",", ")", ")", "\n", "results", "[", "'imgs'", "]", "=", "heatmap", "\n", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.PoseCompact.__init__": [[48, 63], ["torch.nn.modules.utils._pair"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "padding", "=", "0.25", ",", "\n", "threshold", "=", "10", ",", "\n", "hw_ratio", "=", "None", ",", "\n", "allow_imgpad", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "padding", "=", "padding", "\n", "self", ".", "threshold", "=", "threshold", "\n", "if", "hw_ratio", "is", "not", "None", ":", "\n", "            ", "hw_ratio", "=", "_pair", "(", "hw_ratio", ")", "\n", "\n", "", "self", ".", "hw_ratio", "=", "hw_ratio", "\n", "\n", "self", ".", "allow_imgpad", "=", "allow_imgpad", "\n", "assert", "self", ".", "padding", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.PoseCompact.__call__": [[64, 115], ["numpy.min", "numpy.min", "numpy.max", "numpy.max", "results.get", "augmentations._combine_quadruple", "max", "max", "numpy.isnan", "int", "int", "int", "int", "int", "int", "int", "int", "max", "max", "min", "min"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations._combine_quadruple"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_shape", "=", "results", "[", "'img_shape'", "]", "\n", "h", ",", "w", "=", "img_shape", "\n", "kp", "=", "results", "[", "'keypoint'", "]", "\n", "\n", "# Make NaN zero", "\n", "kp", "[", "np", ".", "isnan", "(", "kp", ")", "]", "=", "0.", "\n", "kp_x", "=", "kp", "[", "...", ",", "0", "]", "\n", "kp_y", "=", "kp", "[", "...", ",", "1", "]", "\n", "\n", "min_x", "=", "np", ".", "min", "(", "kp_x", "[", "kp_x", "!=", "0", "]", ",", "initial", "=", "np", ".", "Inf", ")", "\n", "min_y", "=", "np", ".", "min", "(", "kp_y", "[", "kp_y", "!=", "0", "]", ",", "initial", "=", "np", ".", "Inf", ")", "\n", "max_x", "=", "np", ".", "max", "(", "kp_x", "[", "kp_x", "!=", "0", "]", ",", "initial", "=", "-", "np", ".", "Inf", ")", "\n", "max_y", "=", "np", ".", "max", "(", "kp_y", "[", "kp_y", "!=", "0", "]", ",", "initial", "=", "-", "np", ".", "Inf", ")", "\n", "\n", "# The compact area is too small", "\n", "if", "max_x", "-", "min_x", "<", "self", ".", "threshold", "or", "max_y", "-", "min_y", "<", "self", ".", "threshold", ":", "\n", "            ", "return", "results", "\n", "\n", "", "center", "=", "(", "(", "max_x", "+", "min_x", ")", "/", "2", ",", "(", "max_y", "+", "min_y", ")", "/", "2", ")", "\n", "half_width", "=", "(", "max_x", "-", "min_x", ")", "/", "2", "*", "(", "1", "+", "self", ".", "padding", ")", "\n", "half_height", "=", "(", "max_y", "-", "min_y", ")", "/", "2", "*", "(", "1", "+", "self", ".", "padding", ")", "\n", "\n", "if", "self", ".", "hw_ratio", "is", "not", "None", ":", "\n", "            ", "half_height", "=", "max", "(", "self", ".", "hw_ratio", "[", "0", "]", "*", "half_width", ",", "half_height", ")", "\n", "half_width", "=", "max", "(", "1", "/", "self", ".", "hw_ratio", "[", "1", "]", "*", "half_height", ",", "half_width", ")", "\n", "\n", "", "min_x", ",", "max_x", "=", "center", "[", "0", "]", "-", "half_width", ",", "center", "[", "0", "]", "+", "half_width", "\n", "min_y", ",", "max_y", "=", "center", "[", "1", "]", "-", "half_height", ",", "center", "[", "1", "]", "+", "half_height", "\n", "\n", "# hot update", "\n", "if", "not", "self", ".", "allow_imgpad", ":", "\n", "            ", "min_x", ",", "min_y", "=", "int", "(", "max", "(", "0", ",", "min_x", ")", ")", ",", "int", "(", "max", "(", "0", ",", "min_y", ")", ")", "\n", "max_x", ",", "max_y", "=", "int", "(", "min", "(", "w", ",", "max_x", ")", ")", ",", "int", "(", "min", "(", "h", ",", "max_y", ")", ")", "\n", "", "else", ":", "\n", "            ", "min_x", ",", "min_y", "=", "int", "(", "min_x", ")", ",", "int", "(", "min_y", ")", "\n", "max_x", ",", "max_y", "=", "int", "(", "max_x", ")", ",", "int", "(", "max_y", ")", "\n", "\n", "", "kp_x", "[", "kp_x", "!=", "0", "]", "-=", "min_x", "\n", "kp_y", "[", "kp_y", "!=", "0", "]", "-=", "min_y", "\n", "\n", "new_shape", "=", "(", "max_y", "-", "min_y", ",", "max_x", "-", "min_x", ")", "\n", "results", "[", "'img_shape'", "]", "=", "new_shape", "\n", "\n", "# the order is x, y, w, h (in [0, 1]), a tuple", "\n", "crop_quadruple", "=", "results", ".", "get", "(", "'crop_quadruple'", ",", "(", "0.", ",", "0.", ",", "1.", ",", "1.", ")", ")", "\n", "new_crop_quadruple", "=", "(", "min_x", "/", "w", ",", "min_y", "/", "h", ",", "(", "max_x", "-", "min_x", ")", "/", "w", ",", "\n", "(", "max_y", "-", "min_y", ")", "/", "h", ")", "\n", "crop_quadruple", "=", "_combine_quadruple", "(", "crop_quadruple", ",", "new_crop_quadruple", ")", "\n", "results", "[", "'crop_quadruple'", "]", "=", "crop_quadruple", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.PoseCompact.__repr__": [[116, 122], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "(", "f'{self.__class__.__name__}(padding={self.padding}, '", "\n", "f'threshold={self.threshold}, '", "\n", "f'hw_ratio={self.hw_ratio}, '", "\n", "f'allow_imgpad={self.allow_imgpad})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop.__init__": [[135, 139], ["isinstance", "TypeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'Size must be an int, but got {type(size)}'", ")", "\n", "", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._crop_kps": [[140, 143], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_crop_kps", "(", "kps", ",", "crop_bbox", ")", ":", "\n", "        ", "return", "kps", "-", "crop_bbox", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._crop_imgs": [[144, 148], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_crop_imgs", "(", "imgs", ",", "crop_bbox", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "crop_bbox", "\n", "return", "[", "img", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "for", "img", "in", "imgs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._box_crop": [[149, 165], ["box.copy", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_box_crop", "(", "box", ",", "crop_bbox", ")", ":", "\n", "        ", "\"\"\"Crop the bounding boxes according to the crop_bbox.\n\n        Args:\n            box (np.ndarray): The bounding boxes.\n            crop_bbox(np.ndarray): The bbox used to crop the original image.\n        \"\"\"", "\n", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "crop_bbox", "\n", "img_w", ",", "img_h", "=", "x2", "-", "x1", ",", "y2", "-", "y1", "\n", "\n", "box_", "=", "box", ".", "copy", "(", ")", "\n", "box_", "[", "...", ",", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "box", "[", "...", ",", "0", ":", ":", "2", "]", "-", "x1", ",", "0", ",", "img_w", "-", "1", ")", "\n", "box_", "[", "...", ",", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "box", "[", "...", ",", "1", ":", ":", "2", "]", "-", "y1", ",", "0", ",", "img_h", "-", "1", ")", "\n", "return", "box_", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._all_box_crop": [[166, 180], ["augmentations.RandomCrop._box_crop", "augmentations.RandomCrop._box_crop"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._box_crop", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._box_crop"], ["", "def", "_all_box_crop", "(", "self", ",", "results", ",", "crop_bbox", ")", ":", "\n", "        ", "\"\"\"Crop the gt_bboxes and proposals in results according to crop_bbox.\n\n        Args:\n            results (dict): All information about the sample, which contain\n                'gt_bboxes' and 'proposals' (optional).\n            crop_bbox(np.ndarray): The bbox used to crop the original image.\n        \"\"\"", "\n", "results", "[", "'gt_bboxes'", "]", "=", "self", ".", "_box_crop", "(", "results", "[", "'gt_bboxes'", "]", ",", "crop_bbox", ")", "\n", "if", "'proposals'", "in", "results", "and", "results", "[", "'proposals'", "]", "is", "not", "None", ":", "\n", "            ", "assert", "results", "[", "'proposals'", "]", ".", "shape", "[", "1", "]", "==", "4", "\n", "results", "[", "'proposals'", "]", "=", "self", ".", "_box_crop", "(", "results", "[", "'proposals'", "]", ",", "\n", "crop_bbox", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop.__call__": [[181, 235], ["numpy.array", "numpy.array", "int", "int", "numpy.array", "augmentations.RandomCrop._crop_kps", "augmentations.RandomCrop._crop_imgs", "augmentations.RandomCrop._all_box_crop", "numpy.random.randint", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._crop_kps", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._crop_imgs", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._all_box_crop"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Performs the RandomCrop augmentation.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "img_h", ",", "img_w", "=", "results", "[", "'img_shape'", "]", "\n", "assert", "self", ".", "size", "<=", "img_h", "and", "self", ".", "size", "<=", "img_w", "\n", "\n", "y_offset", "=", "0", "\n", "x_offset", "=", "0", "\n", "if", "img_h", ">", "self", ".", "size", ":", "\n", "            ", "y_offset", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "img_h", "-", "self", ".", "size", ")", ")", "\n", "", "if", "img_w", ">", "self", ".", "size", ":", "\n", "            ", "x_offset", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "img_w", "-", "self", ".", "size", ")", ")", "\n", "\n", "", "if", "'crop_quadruple'", "not", "in", "results", ":", "\n", "            ", "results", "[", "'crop_quadruple'", "]", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "# x, y, w, h", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "x_ratio", ",", "y_ratio", "=", "x_offset", "/", "img_w", ",", "y_offset", "/", "img_h", "\n", "w_ratio", ",", "h_ratio", "=", "self", ".", "size", "/", "img_w", ",", "self", ".", "size", "/", "img_h", "\n", "\n", "old_crop_quadruple", "=", "results", "[", "'crop_quadruple'", "]", "\n", "old_x_ratio", ",", "old_y_ratio", "=", "old_crop_quadruple", "[", "0", "]", ",", "old_crop_quadruple", "[", "1", "]", "\n", "old_w_ratio", ",", "old_h_ratio", "=", "old_crop_quadruple", "[", "2", "]", ",", "old_crop_quadruple", "[", "3", "]", "\n", "new_crop_quadruple", "=", "[", "\n", "old_x_ratio", "+", "x_ratio", "*", "old_w_ratio", ",", "\n", "old_y_ratio", "+", "y_ratio", "*", "old_h_ratio", ",", "w_ratio", "*", "old_w_ratio", ",", "\n", "h_ratio", "*", "old_h_ratio", "\n", "]", "\n", "results", "[", "'crop_quadruple'", "]", "=", "np", ".", "array", "(", "\n", "new_crop_quadruple", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "new_h", ",", "new_w", "=", "self", ".", "size", ",", "self", ".", "size", "\n", "\n", "crop_bbox", "=", "np", ".", "array", "(", "\n", "[", "x_offset", ",", "y_offset", ",", "x_offset", "+", "new_w", ",", "y_offset", "+", "new_h", "]", ")", "\n", "results", "[", "'crop_bbox'", "]", "=", "crop_bbox", "\n", "\n", "results", "[", "'img_shape'", "]", "=", "(", "new_h", ",", "new_w", ")", "\n", "\n", "if", "'keypoint'", "in", "results", ":", "\n", "            ", "results", "[", "'keypoint'", "]", "=", "self", ".", "_crop_kps", "(", "results", "[", "'keypoint'", "]", ",", "crop_bbox", ")", "\n", "", "if", "'imgs'", "in", "results", ":", "\n", "            ", "results", "[", "'imgs'", "]", "=", "self", ".", "_crop_imgs", "(", "results", "[", "'imgs'", "]", ",", "crop_bbox", ")", "\n", "\n", "# Process entity boxes", "\n", "", "if", "'gt_bboxes'", "in", "results", ":", "\n", "            ", "results", "=", "self", ".", "_all_box_crop", "(", "results", ",", "results", "[", "'crop_bbox'", "]", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop.__repr__": [[236, 239], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "f'{self.__class__.__name__}(size={self.size})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomResizedCrop.__init__": [[256, 266], ["mmcv.is_tuple_of", "TypeError", "mmcv.is_tuple_of", "TypeError", "type", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "area_range", "=", "(", "0.08", ",", "1.0", ")", ",", "\n", "aspect_ratio_range", "=", "(", "3", "/", "4", ",", "4", "/", "3", ")", ")", ":", "\n", "        ", "self", ".", "area_range", "=", "area_range", "\n", "self", ".", "aspect_ratio_range", "=", "aspect_ratio_range", "\n", "if", "not", "mmcv", ".", "is_tuple_of", "(", "self", ".", "area_range", ",", "float", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'Area_range must be a tuple of float, '", "\n", "f'but got {type(area_range)}'", ")", "\n", "", "if", "not", "mmcv", ".", "is_tuple_of", "(", "self", ".", "aspect_ratio_range", ",", "float", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'Aspect_ratio_range must be a tuple of float, '", "\n", "f'but got {type(aspect_ratio_range)}'", ")", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomResizedCrop.get_crop_bbox": [[268, 318], ["numpy.exp", "numpy.round().astype", "numpy.round().astype", "range", "min", "numpy.random.uniform", "numpy.random.uniform", "numpy.log", "numpy.log", "numpy.round", "numpy.round", "random.randint", "random.randint", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_crop_bbox", "(", "img_shape", ",", "\n", "area_range", ",", "\n", "aspect_ratio_range", ",", "\n", "max_attempts", "=", "10", ")", ":", "\n", "        ", "\"\"\"Get a crop bbox given the area range and aspect ratio range.\n\n        Args:\n            img_shape (Tuple[int]): Image shape\n            area_range (Tuple[float]): The candidate area scales range of\n                output cropped images. Default: (0.08, 1.0).\n            aspect_ratio_range (Tuple[float]): The candidate aspect\n                ratio range of output cropped images. Default: (3 / 4, 4 / 3).\n                max_attempts (int): The maximum of attempts. Default: 10.\n            max_attempts (int): Max attempts times to generate random candidate\n                bounding box. If it doesn't qualified one, the center bounding\n                box will be used.\n        Returns:\n            (list[int]) A random crop bbox within the area range and aspect\n            ratio range.\n        \"\"\"", "\n", "assert", "0", "<", "area_range", "[", "0", "]", "<=", "area_range", "[", "1", "]", "<=", "1", "\n", "assert", "0", "<", "aspect_ratio_range", "[", "0", "]", "<=", "aspect_ratio_range", "[", "1", "]", "\n", "\n", "img_h", ",", "img_w", "=", "img_shape", "\n", "area", "=", "img_h", "*", "img_w", "\n", "\n", "min_ar", ",", "max_ar", "=", "aspect_ratio_range", "\n", "aspect_ratios", "=", "np", ".", "exp", "(", "\n", "np", ".", "random", ".", "uniform", "(", "\n", "np", ".", "log", "(", "min_ar", ")", ",", "np", ".", "log", "(", "max_ar", ")", ",", "size", "=", "max_attempts", ")", ")", "\n", "target_areas", "=", "np", ".", "random", ".", "uniform", "(", "*", "area_range", ",", "size", "=", "max_attempts", ")", "*", "area", "\n", "candidate_crop_w", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "target_areas", "*", "\n", "aspect_ratios", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "candidate_crop_h", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "target_areas", "/", "\n", "aspect_ratios", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "for", "i", "in", "range", "(", "max_attempts", ")", ":", "\n", "            ", "crop_w", "=", "candidate_crop_w", "[", "i", "]", "\n", "crop_h", "=", "candidate_crop_h", "[", "i", "]", "\n", "if", "crop_h", "<=", "img_h", "and", "crop_w", "<=", "img_w", ":", "\n", "                ", "x_offset", "=", "random", ".", "randint", "(", "0", ",", "img_w", "-", "crop_w", ")", "\n", "y_offset", "=", "random", ".", "randint", "(", "0", ",", "img_h", "-", "crop_h", ")", "\n", "return", "x_offset", ",", "y_offset", ",", "x_offset", "+", "crop_w", ",", "y_offset", "+", "crop_h", "\n", "\n", "# Fallback", "\n", "", "", "crop_size", "=", "min", "(", "img_h", ",", "img_w", ")", "\n", "x_offset", "=", "(", "img_w", "-", "crop_size", ")", "//", "2", "\n", "y_offset", "=", "(", "img_h", "-", "crop_size", ")", "//", "2", "\n", "return", "x_offset", ",", "y_offset", ",", "x_offset", "+", "crop_size", ",", "y_offset", "+", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomResizedCrop.__call__": [[319, 364], ["augmentations.RandomResizedCrop.get_crop_bbox", "numpy.array", "numpy.array", "numpy.array", "augmentations.RandomResizedCrop._crop_kps", "augmentations.RandomResizedCrop._crop_imgs", "augmentations.RandomResizedCrop._all_box_crop"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomResizedCrop.get_crop_bbox", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._crop_kps", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._crop_imgs", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._all_box_crop"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Performs the RandomResizeCrop augmentation.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "img_h", ",", "img_w", "=", "results", "[", "'img_shape'", "]", "\n", "\n", "left", ",", "top", ",", "right", ",", "bottom", "=", "self", ".", "get_crop_bbox", "(", "\n", "(", "img_h", ",", "img_w", ")", ",", "self", ".", "area_range", ",", "self", ".", "aspect_ratio_range", ")", "\n", "new_h", ",", "new_w", "=", "bottom", "-", "top", ",", "right", "-", "left", "\n", "\n", "if", "'crop_quadruple'", "not", "in", "results", ":", "\n", "            ", "results", "[", "'crop_quadruple'", "]", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "# x, y, w, h", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "x_ratio", ",", "y_ratio", "=", "left", "/", "img_w", ",", "top", "/", "img_h", "\n", "w_ratio", ",", "h_ratio", "=", "new_w", "/", "img_w", ",", "new_h", "/", "img_h", "\n", "\n", "old_crop_quadruple", "=", "results", "[", "'crop_quadruple'", "]", "\n", "old_x_ratio", ",", "old_y_ratio", "=", "old_crop_quadruple", "[", "0", "]", ",", "old_crop_quadruple", "[", "1", "]", "\n", "old_w_ratio", ",", "old_h_ratio", "=", "old_crop_quadruple", "[", "2", "]", ",", "old_crop_quadruple", "[", "3", "]", "\n", "new_crop_quadruple", "=", "[", "\n", "old_x_ratio", "+", "x_ratio", "*", "old_w_ratio", ",", "\n", "old_y_ratio", "+", "y_ratio", "*", "old_h_ratio", ",", "w_ratio", "*", "old_w_ratio", ",", "\n", "h_ratio", "*", "old_h_ratio", "\n", "]", "\n", "results", "[", "'crop_quadruple'", "]", "=", "np", ".", "array", "(", "\n", "new_crop_quadruple", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "crop_bbox", "=", "np", ".", "array", "(", "[", "left", ",", "top", ",", "right", ",", "bottom", "]", ")", "\n", "results", "[", "'crop_bbox'", "]", "=", "crop_bbox", "\n", "results", "[", "'img_shape'", "]", "=", "(", "new_h", ",", "new_w", ")", "\n", "\n", "if", "'keypoint'", "in", "results", ":", "\n", "            ", "results", "[", "'keypoint'", "]", "=", "self", ".", "_crop_kps", "(", "results", "[", "'keypoint'", "]", ",", "crop_bbox", ")", "\n", "", "if", "'imgs'", "in", "results", ":", "\n", "            ", "results", "[", "'imgs'", "]", "=", "self", ".", "_crop_imgs", "(", "results", "[", "'imgs'", "]", ",", "crop_bbox", ")", "\n", "\n", "", "if", "'gt_bboxes'", "in", "results", ":", "\n", "            ", "results", "=", "self", ".", "_all_box_crop", "(", "results", ",", "results", "[", "'crop_bbox'", "]", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomResizedCrop.__repr__": [[365, 370], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "(", "f'{self.__class__.__name__}('", "\n", "f'area_range={self.area_range}, '", "\n", "f'aspect_ratio_range={self.aspect_ratio_range})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Resize.__init__": [[394, 413], ["isinstance", "isinstance", "ValueError", "max", "min", "TypeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "scale", ",", "\n", "keep_ratio", "=", "True", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "if", "isinstance", "(", "scale", ",", "float", ")", ":", "\n", "            ", "if", "scale", "<=", "0", ":", "\n", "                ", "raise", "ValueError", "(", "f'Invalid scale {scale}, must be positive.'", ")", "\n", "", "", "elif", "isinstance", "(", "scale", ",", "tuple", ")", ":", "\n", "            ", "max_long_edge", "=", "max", "(", "scale", ")", "\n", "max_short_edge", "=", "min", "(", "scale", ")", "\n", "if", "max_short_edge", "==", "-", "1", ":", "\n", "# assign np.inf to long edge for rescaling short edge later.", "\n", "                ", "scale", "=", "(", "np", ".", "inf", ",", "max_long_edge", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "f'Scale must be float or tuple of int, but got {type(scale)}'", ")", "\n", "", "self", ".", "scale", "=", "scale", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Resize._resize_imgs": [[414, 419], ["mmcv.imresize"], "methods", ["None"], ["", "def", "_resize_imgs", "(", "self", ",", "imgs", ",", "new_w", ",", "new_h", ")", ":", "\n", "        ", "return", "[", "\n", "mmcv", ".", "imresize", "(", "\n", "img", ",", "(", "new_w", ",", "new_h", ")", ",", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "for", "img", "in", "imgs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Resize._resize_kps": [[421, 424], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_resize_kps", "(", "kps", ",", "scale_factor", ")", ":", "\n", "        ", "return", "kps", "*", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Resize._box_resize": [[425, 436], ["numpy.concatenate", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_box_resize", "(", "box", ",", "scale_factor", ")", ":", "\n", "        ", "\"\"\"Rescale the bounding boxes according to the scale_factor.\n\n        Args:\n            box (np.ndarray): The bounding boxes.\n            scale_factor (np.ndarray): The scale factor used for rescaling.\n        \"\"\"", "\n", "assert", "len", "(", "scale_factor", ")", "==", "2", "\n", "scale_factor", "=", "np", ".", "concatenate", "(", "[", "scale_factor", ",", "scale_factor", "]", ")", "\n", "return", "box", "*", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Resize.__call__": [[437, 473], ["numpy.array", "numpy.array", "mmcv.rescale_size", "augmentations.Resize._resize_imgs", "augmentations.Resize._resize_kps", "augmentations.Resize._box_resize", "augmentations.Resize._box_resize"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Resize._resize_imgs", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Resize._resize_kps", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Resize._box_resize", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Resize._box_resize"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Performs the Resize augmentation.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "if", "'scale_factor'", "not", "in", "results", ":", "\n", "            ", "results", "[", "'scale_factor'", "]", "=", "np", ".", "array", "(", "[", "1", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "img_h", ",", "img_w", "=", "results", "[", "'img_shape'", "]", "\n", "\n", "if", "self", ".", "keep_ratio", ":", "\n", "            ", "new_w", ",", "new_h", "=", "mmcv", ".", "rescale_size", "(", "(", "img_w", ",", "img_h", ")", ",", "self", ".", "scale", ")", "\n", "", "else", ":", "\n", "            ", "new_w", ",", "new_h", "=", "self", ".", "scale", "\n", "\n", "", "self", ".", "scale_factor", "=", "np", ".", "array", "(", "[", "new_w", "/", "img_w", ",", "new_h", "/", "img_h", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "results", "[", "'img_shape'", "]", "=", "(", "new_h", ",", "new_w", ")", "\n", "results", "[", "'keep_ratio'", "]", "=", "self", ".", "keep_ratio", "\n", "results", "[", "'scale_factor'", "]", "=", "results", "[", "'scale_factor'", "]", "*", "self", ".", "scale_factor", "\n", "\n", "if", "'imgs'", "in", "results", ":", "\n", "            ", "results", "[", "'imgs'", "]", "=", "self", ".", "_resize_imgs", "(", "results", "[", "'imgs'", "]", ",", "new_w", ",", "new_h", ")", "\n", "", "if", "'keypoint'", "in", "results", ":", "\n", "            ", "results", "[", "'keypoint'", "]", "=", "self", ".", "_resize_kps", "(", "results", "[", "'keypoint'", "]", ",", "self", ".", "scale_factor", ")", "\n", "\n", "", "if", "'gt_bboxes'", "in", "results", ":", "\n", "            ", "results", "[", "'gt_bboxes'", "]", "=", "self", ".", "_box_resize", "(", "results", "[", "'gt_bboxes'", "]", ",", "self", ".", "scale_factor", ")", "\n", "if", "'proposals'", "in", "results", "and", "results", "[", "'proposals'", "]", "is", "not", "None", ":", "\n", "                ", "assert", "results", "[", "'proposals'", "]", ".", "shape", "[", "1", "]", "==", "4", "\n", "results", "[", "'proposals'", "]", "=", "self", ".", "_box_resize", "(", "\n", "results", "[", "'proposals'", "]", ",", "self", ".", "scale_factor", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Resize.__repr__": [[474, 479], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "(", "f'{self.__class__.__name__}('", "\n", "f'scale={self.scale}, keep_ratio={self.keep_ratio}, '", "\n", "f'interpolation={self.interpolation})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Flip.__init__": [[506, 520], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "flip_ratio", "=", "0.5", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "flip_label_map", "=", "None", ",", "\n", "left_kp", "=", "None", ",", "\n", "right_kp", "=", "None", ")", ":", "\n", "        ", "if", "direction", "not", "in", "self", ".", "_directions", ":", "\n", "            ", "raise", "ValueError", "(", "f'Direction {direction} is not supported. '", "\n", "f'Currently support ones are {self._directions}'", ")", "\n", "", "self", ".", "flip_ratio", "=", "flip_ratio", "\n", "self", ".", "direction", "=", "direction", "\n", "self", ".", "flip_label_map", "=", "flip_label_map", "\n", "self", ".", "left_kp", "=", "left_kp", "\n", "self", ".", "right_kp", "=", "right_kp", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Flip._flip_imgs": [[521, 529], ["len", "mmcv.imflip_", "range", "mmcv.iminvert"], "methods", ["None"], ["", "def", "_flip_imgs", "(", "self", ",", "imgs", ",", "modality", ")", ":", "\n", "        ", "_", "=", "[", "mmcv", ".", "imflip_", "(", "img", ",", "self", ".", "direction", ")", "for", "img", "in", "imgs", "]", "\n", "lt", "=", "len", "(", "imgs", ")", "\n", "if", "modality", "==", "'Flow'", ":", "\n", "# The 1st frame of each 2 frames is flow-x", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "lt", ",", "2", ")", ":", "\n", "                ", "imgs", "[", "i", "]", "=", "mmcv", ".", "iminvert", "(", "imgs", "[", "i", "]", ")", "\n", "", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Flip._flip_kps": [[530, 542], ["list", "range", "zip"], "methods", ["None"], ["", "def", "_flip_kps", "(", "self", ",", "kps", ",", "kpscores", ",", "img_width", ")", ":", "\n", "        ", "kp_x", "=", "kps", "[", "...", ",", "0", "]", "\n", "kp_x", "[", "kp_x", "!=", "0", "]", "=", "img_width", "-", "kp_x", "[", "kp_x", "!=", "0", "]", "\n", "new_order", "=", "list", "(", "range", "(", "kps", ".", "shape", "[", "2", "]", ")", ")", "\n", "if", "self", ".", "left_kp", "is", "not", "None", "and", "self", ".", "right_kp", "is", "not", "None", ":", "\n", "            ", "for", "left", ",", "right", "in", "zip", "(", "self", ".", "left_kp", ",", "self", ".", "right_kp", ")", ":", "\n", "                ", "new_order", "[", "left", "]", "=", "right", "\n", "new_order", "[", "right", "]", "=", "left", "\n", "", "", "kps", "=", "kps", "[", ":", ",", ":", ",", "new_order", "]", "\n", "if", "kpscores", "is", "not", "None", ":", "\n", "            ", "kpscores", "=", "kpscores", "[", ":", ",", ":", ",", "new_order", "]", "\n", "", "return", "kps", ",", "kpscores", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Flip._box_flip": [[543, 555], ["box.copy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_box_flip", "(", "box", ",", "img_width", ")", ":", "\n", "        ", "\"\"\"Flip the bounding boxes given the width of the image.\n\n        Args:\n            box (np.ndarray): The bounding boxes.\n            img_width (int): The img width.\n        \"\"\"", "\n", "box_", "=", "box", ".", "copy", "(", ")", "\n", "box_", "[", "...", ",", "0", ":", ":", "4", "]", "=", "img_width", "-", "box", "[", "...", ",", "2", ":", ":", "4", "]", "\n", "box_", "[", "...", ",", "2", ":", ":", "4", "]", "=", "img_width", "-", "box", "[", "...", ",", "0", ":", ":", "4", "]", "\n", "return", "box_", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Flip.__call__": [[556, 603], ["numpy.random.rand", "augmentations.Flip.flip_label_map.get", "augmentations.Flip._box_flip", "augmentations.Flip._flip_imgs", "results.get", "augmentations.Flip._flip_kps", "augmentations.Flip._box_flip"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Flip._box_flip", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Flip._flip_imgs", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Flip._flip_kps", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Flip._box_flip"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Performs the Flip augmentation.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "if", "'keypoint'", "in", "results", ":", "\n", "            ", "assert", "self", ".", "direction", "==", "'horizontal'", ",", "(", "\n", "'Only horizontal flips are'", "\n", "'supported for human keypoints'", ")", "\n", "\n", "", "modality", "=", "results", "[", "'modality'", "]", "\n", "if", "modality", "==", "'Flow'", ":", "\n", "            ", "assert", "self", ".", "direction", "==", "'horizontal'", "\n", "\n", "", "flip", "=", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "flip_ratio", "\n", "\n", "results", "[", "'flip'", "]", "=", "flip", "\n", "results", "[", "'flip_direction'", "]", "=", "self", ".", "direction", "\n", "img_width", "=", "results", "[", "'img_shape'", "]", "[", "1", "]", "\n", "\n", "if", "self", ".", "flip_label_map", "is", "not", "None", "and", "flip", ":", "\n", "            ", "results", "[", "'label'", "]", "=", "self", ".", "flip_label_map", ".", "get", "(", "results", "[", "'label'", "]", ",", "\n", "results", "[", "'label'", "]", ")", "\n", "\n", "", "if", "flip", ":", "\n", "            ", "if", "'imgs'", "in", "results", ":", "\n", "                ", "results", "[", "'imgs'", "]", "=", "self", ".", "_flip_imgs", "(", "results", "[", "'imgs'", "]", ",", "modality", ")", "\n", "", "if", "'keypoint'", "in", "results", ":", "\n", "                ", "kp", "=", "results", "[", "'keypoint'", "]", "\n", "kpscore", "=", "results", ".", "get", "(", "'keypoint_score'", ",", "None", ")", "\n", "kp", ",", "kpscore", "=", "self", ".", "_flip_kps", "(", "kp", ",", "kpscore", ",", "img_width", ")", "\n", "results", "[", "'keypoint'", "]", "=", "kp", "\n", "if", "'keypoint_score'", "in", "results", ":", "\n", "                    ", "results", "[", "'keypoint_score'", "]", "=", "kpscore", "\n", "\n", "", "", "", "if", "'gt_bboxes'", "in", "results", "and", "flip", ":", "\n", "            ", "assert", "self", ".", "direction", "==", "'horizontal'", "\n", "width", "=", "results", "[", "'img_shape'", "]", "[", "1", "]", "\n", "results", "[", "'gt_bboxes'", "]", "=", "self", ".", "_box_flip", "(", "results", "[", "'gt_bboxes'", "]", ",", "width", ")", "\n", "if", "'proposals'", "in", "results", "and", "results", "[", "'proposals'", "]", "is", "not", "None", ":", "\n", "                ", "assert", "results", "[", "'proposals'", "]", ".", "shape", "[", "1", "]", "==", "4", "\n", "results", "[", "'proposals'", "]", "=", "self", ".", "_box_flip", "(", "results", "[", "'proposals'", "]", ",", "\n", "width", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Flip.__repr__": [[604, 610], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "(", "\n", "f'{self.__class__.__name__}('", "\n", "f'flip_ratio={self.flip_ratio}, direction={self.direction}, '", "\n", "f'flip_label_map={self.flip_label_map})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Normalize.__init__": [[629, 643], ["numpy.array", "numpy.array", "isinstance", "TypeError", "isinstance", "TypeError", "type", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "to_bgr", "=", "False", ",", "adjust_magnitude", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "mean", ",", "Sequence", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "f'Mean must be list, tuple or np.ndarray, but got {type(mean)}'", "\n", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "std", ",", "Sequence", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "f'Std must be list, tuple or np.ndarray, but got {type(std)}'", ")", "\n", "\n", "", "self", ".", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "to_bgr", "=", "to_bgr", "\n", "self", ".", "adjust_magnitude", "=", "adjust_magnitude", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Normalize.__call__": [[644, 688], ["len", "numpy.empty", "enumerate", "dict", "len", "numpy.empty", "numpy.empty", "range", "numpy.stack", "dict", "mmcv.imnormalize_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "modality", "=", "results", "[", "'modality'", "]", "\n", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "            ", "n", "=", "len", "(", "results", "[", "'imgs'", "]", ")", "\n", "h", ",", "w", ",", "c", "=", "results", "[", "'imgs'", "]", "[", "0", "]", ".", "shape", "\n", "imgs", "=", "np", ".", "empty", "(", "(", "n", ",", "h", ",", "w", ",", "c", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "results", "[", "'imgs'", "]", ")", ":", "\n", "                ", "imgs", "[", "i", "]", "=", "img", "\n", "\n", "", "for", "img", "in", "imgs", ":", "\n", "                ", "mmcv", ".", "imnormalize_", "(", "img", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "to_bgr", ")", "\n", "\n", "", "results", "[", "'imgs'", "]", "=", "imgs", "\n", "results", "[", "'img_norm_cfg'", "]", "=", "dict", "(", "\n", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ",", "to_bgr", "=", "self", ".", "to_bgr", ")", "\n", "return", "results", "\n", "", "if", "modality", "==", "'Flow'", ":", "\n", "            ", "num_imgs", "=", "len", "(", "results", "[", "'imgs'", "]", ")", "\n", "assert", "num_imgs", "%", "2", "==", "0", "\n", "assert", "self", ".", "mean", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "self", ".", "std", ".", "shape", "[", "0", "]", "==", "2", "\n", "n", "=", "num_imgs", "//", "2", "\n", "h", ",", "w", "=", "results", "[", "'imgs'", "]", "[", "0", "]", ".", "shape", "\n", "x_flow", "=", "np", ".", "empty", "(", "(", "n", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_flow", "=", "np", ".", "empty", "(", "(", "n", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "x_flow", "[", "i", "]", "=", "results", "[", "'imgs'", "]", "[", "2", "*", "i", "]", "\n", "y_flow", "[", "i", "]", "=", "results", "[", "'imgs'", "]", "[", "2", "*", "i", "+", "1", "]", "\n", "", "x_flow", "=", "(", "x_flow", "-", "self", ".", "mean", "[", "0", "]", ")", "/", "self", ".", "std", "[", "0", "]", "\n", "y_flow", "=", "(", "y_flow", "-", "self", ".", "mean", "[", "1", "]", ")", "/", "self", ".", "std", "[", "1", "]", "\n", "if", "self", ".", "adjust_magnitude", ":", "\n", "                ", "x_flow", "=", "x_flow", "*", "results", "[", "'scale_factor'", "]", "[", "0", "]", "\n", "y_flow", "=", "y_flow", "*", "results", "[", "'scale_factor'", "]", "[", "1", "]", "\n", "", "imgs", "=", "np", ".", "stack", "(", "[", "x_flow", ",", "y_flow", "]", ",", "axis", "=", "-", "1", ")", "\n", "results", "[", "'imgs'", "]", "=", "imgs", "\n", "args", "=", "dict", "(", "\n", "mean", "=", "self", ".", "mean", ",", "\n", "std", "=", "self", ".", "std", ",", "\n", "to_bgr", "=", "self", ".", "to_bgr", ",", "\n", "adjust_magnitude", "=", "self", ".", "adjust_magnitude", ")", "\n", "results", "[", "'img_norm_cfg'", "]", "=", "args", "\n", "return", "results", "\n", "", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.Normalize.__repr__": [[689, 696], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "(", "f'{self.__class__.__name__}('", "\n", "f'mean={self.mean}, '", "\n", "f'std={self.std}, '", "\n", "f'to_bgr={self.to_bgr}, '", "\n", "f'adjust_magnitude={self.adjust_magnitude})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.CenterCrop.__init__": [[709, 713], ["torch.nn.modules.utils._pair", "mmcv.is_tuple_of", "TypeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "crop_size", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "_pair", "(", "crop_size", ")", "\n", "if", "not", "mmcv", ".", "is_tuple_of", "(", "self", ".", "crop_size", ",", "int", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'Crop_size must be int or tuple of int, '", "\n", "f'but got {type(crop_size)}'", ")", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.CenterCrop.__call__": [[715, 763], ["numpy.array", "numpy.array", "numpy.array", "augmentations.CenterCrop._crop_kps", "augmentations.CenterCrop._crop_imgs", "augmentations.CenterCrop._all_box_crop"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._crop_kps", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._crop_imgs", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.RandomCrop._all_box_crop"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Performs the CenterCrop augmentation.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "img_h", ",", "img_w", "=", "results", "[", "'img_shape'", "]", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "left", "=", "(", "img_w", "-", "crop_w", ")", "//", "2", "\n", "top", "=", "(", "img_h", "-", "crop_h", ")", "//", "2", "\n", "right", "=", "left", "+", "crop_w", "\n", "bottom", "=", "top", "+", "crop_h", "\n", "new_h", ",", "new_w", "=", "bottom", "-", "top", ",", "right", "-", "left", "\n", "\n", "crop_bbox", "=", "np", ".", "array", "(", "[", "left", ",", "top", ",", "right", ",", "bottom", "]", ")", "\n", "results", "[", "'crop_bbox'", "]", "=", "crop_bbox", "\n", "results", "[", "'img_shape'", "]", "=", "(", "new_h", ",", "new_w", ")", "\n", "\n", "if", "'crop_quadruple'", "not", "in", "results", ":", "\n", "            ", "results", "[", "'crop_quadruple'", "]", "=", "np", ".", "array", "(", "\n", "[", "0", ",", "0", ",", "1", ",", "1", "]", ",", "# x, y, w, h", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "x_ratio", ",", "y_ratio", "=", "left", "/", "img_w", ",", "top", "/", "img_h", "\n", "w_ratio", ",", "h_ratio", "=", "new_w", "/", "img_w", ",", "new_h", "/", "img_h", "\n", "\n", "old_crop_quadruple", "=", "results", "[", "'crop_quadruple'", "]", "\n", "old_x_ratio", ",", "old_y_ratio", "=", "old_crop_quadruple", "[", "0", "]", ",", "old_crop_quadruple", "[", "1", "]", "\n", "old_w_ratio", ",", "old_h_ratio", "=", "old_crop_quadruple", "[", "2", "]", ",", "old_crop_quadruple", "[", "3", "]", "\n", "new_crop_quadruple", "=", "[", "\n", "old_x_ratio", "+", "x_ratio", "*", "old_w_ratio", ",", "\n", "old_y_ratio", "+", "y_ratio", "*", "old_h_ratio", ",", "w_ratio", "*", "old_w_ratio", ",", "\n", "h_ratio", "*", "old_h_ratio", "\n", "]", "\n", "results", "[", "'crop_quadruple'", "]", "=", "np", ".", "array", "(", "\n", "new_crop_quadruple", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "if", "'keypoint'", "in", "results", ":", "\n", "            ", "results", "[", "'keypoint'", "]", "=", "self", ".", "_crop_kps", "(", "results", "[", "'keypoint'", "]", ",", "crop_bbox", ")", "\n", "", "if", "'imgs'", "in", "results", ":", "\n", "            ", "results", "[", "'imgs'", "]", "=", "self", ".", "_crop_imgs", "(", "results", "[", "'imgs'", "]", ",", "crop_bbox", ")", "\n", "\n", "", "if", "'gt_bboxes'", "in", "results", ":", "\n", "            ", "results", "=", "self", ".", "_all_box_crop", "(", "results", ",", "results", "[", "'crop_bbox'", "]", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.CenterCrop.__repr__": [[764, 767], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "(", "f'{self.__class__.__name__}(crop_size={self.crop_size})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.ThreeCrop.__init__": [[781, 785], ["torch.nn.modules.utils._pair", "mmcv.is_tuple_of", "TypeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "crop_size", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "_pair", "(", "crop_size", ")", "\n", "if", "not", "mmcv", ".", "is_tuple_of", "(", "self", ".", "crop_size", ",", "int", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'Crop_size must be int or tuple of int, '", "\n", "f'but got {type(crop_size)}'", ")", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.ThreeCrop.__call__": [[787, 834], ["numpy.array", "warnings.warn", "cropped.extend", "numpy.array.extend", "range", "len"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Performs the ThreeCrop augmentation.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "if", "'gt_bboxes'", "in", "results", "or", "'proposals'", "in", "results", ":", "\n", "            ", "warnings", ".", "warn", "(", "'ThreeCrop cannot process bounding boxes'", ")", "\n", "\n", "", "imgs", "=", "results", "[", "'imgs'", "]", "\n", "img_h", ",", "img_w", "=", "results", "[", "'imgs'", "]", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "assert", "crop_h", "==", "img_h", "or", "crop_w", "==", "img_w", "\n", "\n", "if", "crop_h", "==", "img_h", ":", "\n", "            ", "w_step", "=", "(", "img_w", "-", "crop_w", ")", "//", "2", "\n", "offsets", "=", "[", "\n", "(", "0", ",", "0", ")", ",", "# left", "\n", "(", "2", "*", "w_step", ",", "0", ")", ",", "# right", "\n", "(", "w_step", ",", "0", ")", ",", "# middle", "\n", "]", "\n", "", "elif", "crop_w", "==", "img_w", ":", "\n", "            ", "h_step", "=", "(", "img_h", "-", "crop_h", ")", "//", "2", "\n", "offsets", "=", "[", "\n", "(", "0", ",", "0", ")", ",", "# top", "\n", "(", "0", ",", "2", "*", "h_step", ")", ",", "# down", "\n", "(", "0", ",", "h_step", ")", ",", "# middle", "\n", "]", "\n", "\n", "", "cropped", "=", "[", "]", "\n", "crop_bboxes", "=", "[", "]", "\n", "for", "x_offset", ",", "y_offset", "in", "offsets", ":", "\n", "            ", "bbox", "=", "[", "x_offset", ",", "y_offset", ",", "x_offset", "+", "crop_w", ",", "y_offset", "+", "crop_h", "]", "\n", "crop", "=", "[", "\n", "img", "[", "y_offset", ":", "y_offset", "+", "crop_h", ",", "x_offset", ":", "x_offset", "+", "crop_w", "]", "\n", "for", "img", "in", "imgs", "\n", "]", "\n", "cropped", ".", "extend", "(", "crop", ")", "\n", "crop_bboxes", ".", "extend", "(", "[", "bbox", "for", "_", "in", "range", "(", "len", "(", "imgs", ")", ")", "]", ")", "\n", "\n", "", "crop_bboxes", "=", "np", ".", "array", "(", "crop_bboxes", ")", "\n", "results", "[", "'imgs'", "]", "=", "cropped", "\n", "results", "[", "'crop_bbox'", "]", "=", "crop_bboxes", "\n", "results", "[", "'img_shape'", "]", "=", "results", "[", "'imgs'", "]", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.ThreeCrop.__repr__": [[835, 838], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "f'{self.__class__.__name__}(crop_size={self.crop_size})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.TenCrop.__init__": [[852, 856], ["torch.nn.modules.utils._pair", "mmcv.is_tuple_of", "TypeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "crop_size", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "_pair", "(", "crop_size", ")", "\n", "if", "not", "mmcv", ".", "is_tuple_of", "(", "self", ".", "crop_size", ",", "int", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'Crop_size must be int or tuple of int, '", "\n", "f'but got {type(crop_size)}'", ")", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.TenCrop.__call__": [[858, 903], ["list", "list", "numpy.array", "warnings.warn", "list.extend", "list.extend", "numpy.array.extend", "numpy.flip().copy", "numpy.flip", "range", "len"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Performs the TenCrop augmentation.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "if", "'gt_bboxes'", "in", "results", "or", "'proposals'", "in", "results", ":", "\n", "            ", "warnings", ".", "warn", "(", "'TenCrop cannot process bounding boxes'", ")", "\n", "\n", "", "imgs", "=", "results", "[", "'imgs'", "]", "\n", "\n", "img_h", ",", "img_w", "=", "results", "[", "'imgs'", "]", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "w_step", "=", "(", "img_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "img_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "offsets", "=", "[", "\n", "(", "0", ",", "0", ")", ",", "# upper left", "\n", "(", "4", "*", "w_step", ",", "0", ")", ",", "# upper right", "\n", "(", "0", ",", "4", "*", "h_step", ")", ",", "# lower left", "\n", "(", "4", "*", "w_step", ",", "4", "*", "h_step", ")", ",", "# lower right", "\n", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ",", "# center", "\n", "]", "\n", "\n", "img_crops", "=", "list", "(", ")", "\n", "crop_bboxes", "=", "list", "(", ")", "\n", "for", "x_offset", ",", "y_offsets", "in", "offsets", ":", "\n", "            ", "crop", "=", "[", "\n", "img", "[", "y_offsets", ":", "y_offsets", "+", "crop_h", ",", "x_offset", ":", "x_offset", "+", "crop_w", "]", "\n", "for", "img", "in", "imgs", "\n", "]", "\n", "flip_crop", "=", "[", "np", ".", "flip", "(", "c", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "for", "c", "in", "crop", "]", "\n", "bbox", "=", "[", "x_offset", ",", "y_offsets", ",", "x_offset", "+", "crop_w", ",", "y_offsets", "+", "crop_h", "]", "\n", "img_crops", ".", "extend", "(", "crop", ")", "\n", "img_crops", ".", "extend", "(", "flip_crop", ")", "\n", "crop_bboxes", ".", "extend", "(", "[", "bbox", "for", "_", "in", "range", "(", "len", "(", "imgs", ")", "*", "2", ")", "]", ")", "\n", "\n", "", "crop_bboxes", "=", "np", ".", "array", "(", "crop_bboxes", ")", "\n", "results", "[", "'imgs'", "]", "=", "img_crops", "\n", "results", "[", "'crop_bbox'", "]", "=", "crop_bboxes", "\n", "results", "[", "'img_shape'", "]", "=", "results", "[", "'imgs'", "]", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations.TenCrop.__repr__": [[904, 907], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "f'{self.__class__.__name__}(crop_size={self.crop_size})'", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations._combine_quadruple": [[13, 15], ["None"], "function", ["None"], ["def", "_combine_quadruple", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "(", "a", "[", "0", "]", "+", "a", "[", "2", "]", "*", "b", "[", "0", "]", ",", "a", "[", "1", "]", "+", "a", "[", "3", "]", "*", "b", "[", "1", "]", ",", "a", "[", "2", "]", "*", "b", "[", "2", "]", ",", "a", "[", "3", "]", "*", "b", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.augmentations._flip_quadruple": [[17, 19], ["None"], "function", ["None"], ["", "def", "_flip_quadruple", "(", "a", ")", ":", "\n", "    ", "return", "(", "1", "-", "a", "[", "0", "]", "-", "a", "[", "2", "]", ",", "a", "[", "1", "]", ",", "a", "[", "2", "]", ",", "a", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.compose.Compose.__init__": [[18, 29], ["isinstance", "isinstance", "mmcv.utils.build_from_cfg", "compose.Compose.transforms.append", "callable", "compose.Compose.transforms.append", "TypeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "assert", "isinstance", "(", "transforms", ",", "Sequence", ")", "\n", "self", ".", "transforms", "=", "[", "]", "\n", "for", "transform", "in", "transforms", ":", "\n", "            ", "if", "isinstance", "(", "transform", ",", "dict", ")", ":", "\n", "                ", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "elif", "callable", "(", "transform", ")", ":", "\n", "                ", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "f'transform must be callable or a dict, '", "\n", "f'but got {type(transform)}'", ")", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.compose.Compose.__call__": [[31, 46], ["t"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Call function to apply transforms sequentially.\n\n        Args:\n            data (dict): A result dict contains the data to transform.\n\n        Returns:\n            dict: Transformed data.\n        \"\"\"", "\n", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "data", "=", "t", "(", "data", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.compose.Compose.__repr__": [[47, 54], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "'\\n'", "\n", "format_string", "+=", "'    {0}'", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "'\\n)'", "\n", "return", "format_string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.UniformSampleFrames.__init__": [[30, 49], ["isinstance", "warnings.warn"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "clip_len", ",", "\n", "num_clips", "=", "1", ",", "\n", "test_mode", "=", "False", ",", "\n", "float_ok", "=", "False", ",", "\n", "p_interval", "=", "1", ",", "\n", "seed", "=", "255", ")", ":", "\n", "\n", "        ", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "num_clips", "=", "num_clips", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "float_ok", "=", "float_ok", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "p_interval", "=", "p_interval", "\n", "if", "not", "isinstance", "(", "p_interval", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "p_interval", "=", "(", "p_interval", ",", "p_interval", ")", "\n", "\n", "", "if", "self", ".", "float_ok", ":", "\n", "            ", "warnings", ".", "warn", "(", "'When float_ok == True, there will be no loop.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.UniformSampleFrames._get_train_clips": [[50, 95], ["range", "numpy.concatenate", "int", "numpy.random.randint", "allinds.append", "numpy.random.choice.astype", "numpy.random.rand", "numpy.arange", "numpy.random.randint", "numpy.arange", "numpy.random.rand", "numpy.arange", "numpy.random.choice", "numpy.zeros", "numpy.cumsum", "numpy.array", "numpy.diff", "numpy.random.randint", "range"], "methods", ["None"], ["", "", "def", "_get_train_clips", "(", "self", ",", "num_frames", ",", "clip_len", ")", ":", "\n", "        ", "\"\"\"Uniformly sample indices for training clips.\n\n        Args:\n            num_frames (int): The number of frames.\n            clip_len (int): The length of the clip.\n        \"\"\"", "\n", "allinds", "=", "[", "]", "\n", "for", "clip_idx", "in", "range", "(", "self", ".", "num_clips", ")", ":", "\n", "            ", "old_num_frames", "=", "num_frames", "\n", "pi", "=", "self", ".", "p_interval", "\n", "ratio", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "pi", "[", "1", "]", "-", "pi", "[", "0", "]", ")", "+", "pi", "[", "0", "]", "\n", "num_frames", "=", "int", "(", "ratio", "*", "num_frames", ")", "\n", "off", "=", "np", ".", "random", ".", "randint", "(", "old_num_frames", "-", "num_frames", "+", "1", ")", "\n", "\n", "if", "self", ".", "float_ok", ":", "\n", "                ", "interval", "=", "(", "num_frames", "-", "1", ")", "/", "clip_len", "\n", "offsets", "=", "np", ".", "arange", "(", "clip_len", ")", "*", "interval", "\n", "inds", "=", "np", ".", "random", ".", "rand", "(", "clip_len", ")", "*", "interval", "+", "offsets", "\n", "inds", "=", "inds", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "num_frames", "<", "clip_len", ":", "\n", "                ", "start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_frames", ")", "\n", "inds", "=", "np", ".", "arange", "(", "start", ",", "start", "+", "clip_len", ")", "\n", "", "elif", "clip_len", "<=", "num_frames", "<", "2", "*", "clip_len", ":", "\n", "                ", "basic", "=", "np", ".", "arange", "(", "clip_len", ")", "\n", "inds", "=", "np", ".", "random", ".", "choice", "(", "\n", "clip_len", "+", "1", ",", "num_frames", "-", "clip_len", ",", "replace", "=", "False", ")", "\n", "offset", "=", "np", ".", "zeros", "(", "clip_len", "+", "1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "offset", "[", "inds", "]", "=", "1", "\n", "offset", "=", "np", ".", "cumsum", "(", "offset", ")", "\n", "inds", "=", "basic", "+", "offset", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "bids", "=", "np", ".", "array", "(", "\n", "[", "i", "*", "num_frames", "//", "clip_len", "for", "i", "in", "range", "(", "clip_len", "+", "1", ")", "]", ")", "\n", "bsize", "=", "np", ".", "diff", "(", "bids", ")", "\n", "bst", "=", "bids", "[", ":", "clip_len", "]", "\n", "offset", "=", "np", ".", "random", ".", "randint", "(", "bsize", ")", "\n", "inds", "=", "bst", "+", "offset", "\n", "\n", "", "inds", "=", "inds", "+", "off", "\n", "num_frames", "=", "old_num_frames", "\n", "\n", "allinds", ".", "append", "(", "inds", ")", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "allinds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.UniformSampleFrames._get_test_clips": [[96, 143], ["numpy.random.seed", "range", "numpy.concatenate", "numpy.concatenate().astype", "int", "numpy.random.randint", "all_inds.append", "numpy.arange", "numpy.arange", "numpy.concatenate", "numpy.random.rand", "numpy.arange", "numpy.random.choice", "numpy.zeros", "numpy.cumsum", "numpy.array", "numpy.diff", "numpy.random.randint", "range", "range", "numpy.random.rand"], "methods", ["None"], ["", "def", "_get_test_clips", "(", "self", ",", "num_frames", ",", "clip_len", ")", ":", "\n", "        ", "\"\"\"Uniformly sample indices for testing clips.\n\n        Args:\n            num_frames (int): The number of frames.\n            clip_len (int): The length of the clip.\n        \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "if", "self", ".", "float_ok", ":", "\n", "            ", "interval", "=", "(", "num_frames", "-", "1", ")", "/", "clip_len", "\n", "offsets", "=", "np", ".", "arange", "(", "clip_len", ")", "*", "interval", "\n", "inds", "=", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "random", ".", "rand", "(", "clip_len", ")", "*", "interval", "+", "offsets", "\n", "for", "i", "in", "range", "(", "self", ".", "num_clips", ")", "\n", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "all_inds", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_clips", ")", ":", "\n", "\n", "            ", "old_num_frames", "=", "num_frames", "\n", "pi", "=", "self", ".", "p_interval", "\n", "ratio", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "pi", "[", "1", "]", "-", "pi", "[", "0", "]", ")", "+", "pi", "[", "0", "]", "\n", "num_frames", "=", "int", "(", "ratio", "*", "num_frames", ")", "\n", "off", "=", "np", ".", "random", ".", "randint", "(", "old_num_frames", "-", "num_frames", "+", "1", ")", "\n", "\n", "if", "num_frames", "<", "clip_len", ":", "\n", "                ", "start_ind", "=", "i", "if", "num_frames", "<", "self", ".", "num_clips", "else", "i", "*", "num_frames", "//", "self", ".", "num_clips", "\n", "inds", "=", "np", ".", "arange", "(", "start_ind", ",", "start_ind", "+", "clip_len", ")", "\n", "", "elif", "clip_len", "<=", "num_frames", "<", "clip_len", "*", "2", ":", "\n", "                ", "basic", "=", "np", ".", "arange", "(", "clip_len", ")", "\n", "inds", "=", "np", ".", "random", ".", "choice", "(", "clip_len", "+", "1", ",", "num_frames", "-", "clip_len", ",", "replace", "=", "False", ")", "\n", "offset", "=", "np", ".", "zeros", "(", "clip_len", "+", "1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "offset", "[", "inds", "]", "=", "1", "\n", "offset", "=", "np", ".", "cumsum", "(", "offset", ")", "\n", "inds", "=", "basic", "+", "offset", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "bids", "=", "np", ".", "array", "(", "[", "i", "*", "num_frames", "//", "clip_len", "for", "i", "in", "range", "(", "clip_len", "+", "1", ")", "]", ")", "\n", "bsize", "=", "np", ".", "diff", "(", "bids", ")", "\n", "bst", "=", "bids", "[", ":", "clip_len", "]", "\n", "offset", "=", "np", ".", "random", ".", "randint", "(", "bsize", ")", "\n", "inds", "=", "bst", "+", "offset", "\n", "\n", "", "all_inds", ".", "append", "(", "inds", "+", "off", ")", "\n", "num_frames", "=", "old_num_frames", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "all_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.UniformSampleFrames.__call__": [[144, 181], ["numpy.mod", "sampling.UniformSampleFrames._get_test_clips", "sampling.UniformSampleFrames._get_train_clips", "range", "range", "sampling.UniformSampleFrames.astype", "numpy.array", "sampling.UniformSampleFrames.astype", "numpy.all", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.SampleFrames._get_test_clips", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.SampleFrames._get_train_clips"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "num_frames", "=", "results", "[", "'total_frames'", "]", "\n", "\n", "if", "self", ".", "test_mode", ":", "\n", "            ", "inds", "=", "self", ".", "_get_test_clips", "(", "num_frames", ",", "self", ".", "clip_len", ")", "\n", "", "else", ":", "\n", "            ", "inds", "=", "self", ".", "_get_train_clips", "(", "num_frames", ",", "self", ".", "clip_len", ")", "\n", "\n", "", "inds", "=", "np", ".", "mod", "(", "inds", ",", "num_frames", ")", "\n", "start_index", "=", "results", "[", "'start_index'", "]", "\n", "inds", "=", "inds", "+", "start_index", "\n", "\n", "if", "'keypoint'", "in", "results", ":", "\n", "            ", "kp", "=", "results", "[", "'keypoint'", "]", "\n", "assert", "num_frames", "==", "kp", ".", "shape", "[", "1", "]", "\n", "num_person", "=", "kp", ".", "shape", "[", "0", "]", "\n", "num_persons", "=", "[", "num_person", "]", "*", "num_frames", "\n", "for", "i", "in", "range", "(", "num_frames", ")", ":", "\n", "                ", "j", "=", "num_person", "-", "1", "\n", "while", "j", ">=", "0", "and", "np", ".", "all", "(", "np", ".", "abs", "(", "kp", "[", "j", ",", "i", "]", ")", "<", "1e-5", ")", ":", "\n", "                    ", "j", "-=", "1", "\n", "", "num_persons", "[", "i", "]", "=", "j", "+", "1", "\n", "", "transitional", "=", "[", "False", "]", "*", "num_frames", "\n", "for", "i", "in", "range", "(", "1", ",", "num_frames", "-", "1", ")", ":", "\n", "                ", "if", "num_persons", "[", "i", "]", "!=", "num_persons", "[", "i", "-", "1", "]", ":", "\n", "                    ", "transitional", "[", "i", "]", "=", "transitional", "[", "i", "-", "1", "]", "=", "True", "\n", "", "if", "num_persons", "[", "i", "]", "!=", "num_persons", "[", "i", "+", "1", "]", ":", "\n", "                    ", "transitional", "[", "i", "]", "=", "transitional", "[", "i", "+", "1", "]", "=", "True", "\n", "", "", "inds_int", "=", "inds", ".", "astype", "(", "np", ".", "int", ")", "\n", "coeff", "=", "np", ".", "array", "(", "[", "transitional", "[", "i", "]", "for", "i", "in", "inds_int", "]", ")", "\n", "inds", "=", "(", "coeff", "*", "inds_int", "+", "(", "1", "-", "coeff", ")", "*", "inds", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "results", "[", "'frame_inds'", "]", "=", "inds", "if", "self", ".", "float_ok", "else", "inds", ".", "astype", "(", "np", ".", "int", ")", "\n", "results", "[", "'clip_len'", "]", "=", "self", ".", "clip_len", "\n", "results", "[", "'frame_interval'", "]", "=", "None", "\n", "results", "[", "'num_clips'", "]", "=", "self", ".", "num_clips", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.UniformSampleFrames.__repr__": [[182, 189], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "(", "f'{self.__class__.__name__}('", "\n", "f'clip_len={self.clip_len}, '", "\n", "f'num_clips={self.num_clips}, '", "\n", "f'test_mode={self.test_mode}, '", "\n", "f'seed={self.seed})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.SampleFrames.__init__": [[225, 248], ["warnings.warn"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "clip_len", ",", "\n", "frame_interval", "=", "1", ",", "\n", "num_clips", "=", "1", ",", "\n", "temporal_jitter", "=", "False", ",", "\n", "twice_sample", "=", "False", ",", "\n", "out_of_bound_opt", "=", "'loop'", ",", "\n", "test_mode", "=", "False", ",", "\n", "start_index", "=", "None", ",", "\n", "keep_tail_frames", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "frame_interval", "=", "frame_interval", "\n", "self", ".", "num_clips", "=", "num_clips", "\n", "self", ".", "temporal_jitter", "=", "temporal_jitter", "\n", "self", ".", "twice_sample", "=", "twice_sample", "\n", "self", ".", "out_of_bound_opt", "=", "out_of_bound_opt", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "keep_tail_frames", "=", "keep_tail_frames", "\n", "assert", "self", ".", "out_of_bound_opt", "in", "[", "'loop'", ",", "'repeat_last'", "]", "\n", "\n", "if", "start_index", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "'No longer support \"start_index\" in \"SampleFrames\", '", "\n", "'it should be set in dataset class, see this pr: '", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.SampleFrames._get_train_clips": [[251, 294], ["float", "numpy.zeros", "numpy.arange", "numpy.arange", "numpy.random.randint", "max", "numpy.sort", "numpy.random.randint", "numpy.around", "numpy.zeros", "numpy.random.uniform", "numpy.arange"], "methods", ["None"], ["", "", "def", "_get_train_clips", "(", "self", ",", "num_frames", ")", ":", "\n", "        ", "\"\"\"Get clip offsets in train mode.\n\n        It will calculate the average interval for selected frames,\n        and randomly shift them within offsets between [0, avg_interval].\n        If the total number of frames is smaller than clips num or origin\n        frames length, it will return all zero indices.\n\n        Args:\n            num_frames (int): Total number of frame in the video.\n\n        Returns:\n            np.ndarray: Sampled frame indices in train mode.\n        \"\"\"", "\n", "ori_clip_len", "=", "self", ".", "clip_len", "*", "self", ".", "frame_interval", "\n", "\n", "if", "self", ".", "keep_tail_frames", ":", "\n", "            ", "avg_interval", "=", "(", "num_frames", "-", "ori_clip_len", "+", "1", ")", "/", "float", "(", "\n", "self", ".", "num_clips", ")", "\n", "if", "num_frames", ">", "ori_clip_len", "-", "1", ":", "\n", "                ", "base_offsets", "=", "np", ".", "arange", "(", "self", ".", "num_clips", ")", "*", "avg_interval", "\n", "clip_offsets", "=", "(", "base_offsets", "+", "np", ".", "random", ".", "uniform", "(", "\n", "0", ",", "avg_interval", ",", "self", ".", "num_clips", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "", "else", ":", "\n", "                ", "clip_offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_clips", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "", "else", ":", "\n", "            ", "avg_interval", "=", "(", "num_frames", "-", "ori_clip_len", "+", "1", ")", "//", "self", ".", "num_clips", "\n", "\n", "if", "avg_interval", ">", "0", ":", "\n", "                ", "base_offsets", "=", "np", ".", "arange", "(", "self", ".", "num_clips", ")", "*", "avg_interval", "\n", "clip_offsets", "=", "base_offsets", "+", "np", ".", "random", ".", "randint", "(", "\n", "avg_interval", ",", "size", "=", "self", ".", "num_clips", ")", "\n", "", "elif", "num_frames", ">", "max", "(", "self", ".", "num_clips", ",", "ori_clip_len", ")", ":", "\n", "                ", "clip_offsets", "=", "np", ".", "sort", "(", "\n", "np", ".", "random", ".", "randint", "(", "\n", "num_frames", "-", "ori_clip_len", "+", "1", ",", "size", "=", "self", ".", "num_clips", ")", ")", "\n", "", "elif", "avg_interval", "==", "0", ":", "\n", "                ", "ratio", "=", "(", "num_frames", "-", "ori_clip_len", "+", "1.0", ")", "/", "self", ".", "num_clips", "\n", "clip_offsets", "=", "np", ".", "around", "(", "np", ".", "arange", "(", "self", ".", "num_clips", ")", "*", "ratio", ")", "\n", "", "else", ":", "\n", "                ", "clip_offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_clips", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "", "", "return", "clip_offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.SampleFrames._get_test_clips": [[295, 319], ["float", "numpy.zeros", "numpy.arange", "numpy.concatenate"], "methods", ["None"], ["", "def", "_get_test_clips", "(", "self", ",", "num_frames", ")", ":", "\n", "        ", "\"\"\"Get clip offsets in test mode.\n\n        Calculate the average interval for selected frames, and shift them\n        fixedly by avg_interval/2. If set twice_sample True, it will sample\n        frames together without fixed shift. If the total number of frames is\n        not enough, it will return all zero indices.\n\n        Args:\n            num_frames (int): Total number of frame in the video.\n\n        Returns:\n            np.ndarray: Sampled frame indices in test mode.\n        \"\"\"", "\n", "ori_clip_len", "=", "self", ".", "clip_len", "*", "self", ".", "frame_interval", "\n", "avg_interval", "=", "(", "num_frames", "-", "ori_clip_len", "+", "1", ")", "/", "float", "(", "self", ".", "num_clips", ")", "\n", "if", "num_frames", ">", "ori_clip_len", "-", "1", ":", "\n", "            ", "base_offsets", "=", "np", ".", "arange", "(", "self", ".", "num_clips", ")", "*", "avg_interval", "\n", "clip_offsets", "=", "(", "base_offsets", "+", "avg_interval", "/", "2.0", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "if", "self", ".", "twice_sample", ":", "\n", "                ", "clip_offsets", "=", "np", ".", "concatenate", "(", "[", "clip_offsets", ",", "base_offsets", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "clip_offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_clips", ",", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "return", "clip_offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.SampleFrames._sample_clips": [[320, 335], ["sampling.SampleFrames._get_test_clips", "sampling.SampleFrames._get_train_clips"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.SampleFrames._get_test_clips", "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.SampleFrames._get_train_clips"], ["", "def", "_sample_clips", "(", "self", ",", "num_frames", ")", ":", "\n", "        ", "\"\"\"Choose clip offsets for the video in a given mode.\n\n        Args:\n            num_frames (int): Total number of frame in the video.\n\n        Returns:\n            np.ndarray: Sampled frame indices.\n        \"\"\"", "\n", "if", "self", ".", "test_mode", ":", "\n", "            ", "clip_offsets", "=", "self", ".", "_get_test_clips", "(", "num_frames", ")", "\n", "", "else", ":", "\n", "            ", "clip_offsets", "=", "self", ".", "_get_train_clips", "(", "num_frames", ")", "\n", "\n", "", "return", "clip_offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.SampleFrames.__call__": [[336, 374], ["sampling.SampleFrames._sample_clips", "numpy.concatenate", "numpy.mod.reshape", "numpy.mod.astype", "numpy.random.randint", "numpy.mod", "numpy.concatenate", "numpy.max", "ValueError", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.SampleFrames._sample_clips"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Perform the SampleFrames loading.\n\n        Args:\n            results (dict): The resulting dict to be modified and passed\n                to the next transform in pipeline.\n        \"\"\"", "\n", "total_frames", "=", "results", "[", "'total_frames'", "]", "\n", "\n", "clip_offsets", "=", "self", ".", "_sample_clips", "(", "total_frames", ")", "\n", "frame_inds", "=", "clip_offsets", "[", ":", ",", "None", "]", "+", "np", ".", "arange", "(", "\n", "self", ".", "clip_len", ")", "[", "None", ",", ":", "]", "*", "self", ".", "frame_interval", "\n", "frame_inds", "=", "np", ".", "concatenate", "(", "frame_inds", ")", "\n", "\n", "if", "self", ".", "temporal_jitter", ":", "\n", "            ", "perframe_offsets", "=", "np", ".", "random", ".", "randint", "(", "\n", "self", ".", "frame_interval", ",", "size", "=", "len", "(", "frame_inds", ")", ")", "\n", "frame_inds", "+=", "perframe_offsets", "\n", "\n", "", "frame_inds", "=", "frame_inds", ".", "reshape", "(", "(", "-", "1", ",", "self", ".", "clip_len", ")", ")", "\n", "if", "self", ".", "out_of_bound_opt", "==", "'loop'", ":", "\n", "            ", "frame_inds", "=", "np", ".", "mod", "(", "frame_inds", ",", "total_frames", ")", "\n", "", "elif", "self", ".", "out_of_bound_opt", "==", "'repeat_last'", ":", "\n", "            ", "safe_inds", "=", "frame_inds", "<", "total_frames", "\n", "unsafe_inds", "=", "1", "-", "safe_inds", "\n", "last_ind", "=", "np", ".", "max", "(", "safe_inds", "*", "frame_inds", ",", "axis", "=", "1", ")", "\n", "new_inds", "=", "(", "safe_inds", "*", "frame_inds", "+", "(", "unsafe_inds", ".", "T", "*", "last_ind", ")", ".", "T", ")", "\n", "frame_inds", "=", "new_inds", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Illegal out_of_bound option.'", ")", "\n", "\n", "", "start_index", "=", "results", "[", "'start_index'", "]", "\n", "frame_inds", "=", "np", ".", "concatenate", "(", "frame_inds", ")", "+", "start_index", "\n", "results", "[", "'frame_inds'", "]", "=", "frame_inds", ".", "astype", "(", "np", ".", "int", ")", "\n", "results", "[", "'clip_len'", "]", "=", "self", ".", "clip_len", "\n", "results", "[", "'frame_interval'", "]", "=", "self", ".", "frame_interval", "\n", "results", "[", "'num_clips'", "]", "=", "self", ".", "num_clips", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.pipelines.sampling.SampleFrames.__repr__": [[375, 385], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "(", "f'{self.__class__.__name__}('", "\n", "f'clip_len={self.clip_len}, '", "\n", "f'frame_interval={self.frame_interval}, '", "\n", "f'num_clips={self.num_clips}, '", "\n", "f'temporal_jitter={self.temporal_jitter}, '", "\n", "f'twice_sample={self.twice_sample}, '", "\n", "f'out_of_bound_opt={self.out_of_bound_opt}, '", "\n", "f'test_mode={self.test_mode})'", ")", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.apis.inference.init_recognizer": [[20, 56], ["isinstance", "pyskl.models.build_recognizer", "pyskl.models.build_recognizer.to", "pyskl.models.build_recognizer.eval", "warnings.warn", "mmcv.Config.fromfile", "pyskl.utils.cache_checkpoint", "mmcv.runner.load_checkpoint", "isinstance", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.models.builder.build_recognizer", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.cache_checkpoint"], ["def", "init_recognizer", "(", "config", ",", "checkpoint", "=", "None", ",", "device", "=", "'cuda:0'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Initialize a recognizer from config file.\n\n    Args:\n        config (str | :obj:`mmcv.Config`): Config file path or the config\n            object.\n        checkpoint (str | None, optional): Checkpoint path/url. If set to None,\n            the model will not load any weights. Default: None.\n        device (str | :obj:`torch.device`): The desired device of returned\n            tensor. Default: 'cuda:0'.\n\n    Returns:\n        nn.Module: The constructed recognizer.\n    \"\"\"", "\n", "if", "'use_frames'", "in", "kwargs", ":", "\n", "        ", "warnings", ".", "warn", "(", "'The argument `use_frames` is deprecated PR #1191. '", "\n", "'Now you can use models trained with frames or videos '", "\n", "'arbitrarily. '", ")", "\n", "\n", "", "if", "isinstance", "(", "config", ",", "str", ")", ":", "\n", "        ", "config", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "config", ")", "\n", "", "elif", "not", "isinstance", "(", "config", ",", "mmcv", ".", "Config", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'config must be a filename or Config object, '", "\n", "f'but got {type(config)}'", ")", "\n", "\n", "# pretrained model is unnecessary since we directly load checkpoint later", "\n", "", "config", ".", "model", ".", "backbone", ".", "pretrained", "=", "None", "\n", "model", "=", "build_recognizer", "(", "config", ".", "model", ")", "\n", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "cache_checkpoint", "(", "checkpoint", ")", "\n", "load_checkpoint", "(", "model", ",", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "", "model", ".", "cfg", "=", "config", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.apis.inference.inference_recognizer": [[58, 185], ["isinstance", "isinstance", "pyskl.datasets.pipelines.Compose", "pyskl.datasets.pipelines.Compose.", "mmcv.parallel.collate", "tuple", "sorted", "warnings.warn", "warnings.warn", "isinstance", "isinstance", "next", "modality_map.get", "dict", "range", "dict", "range", "cfg.data.test.get", "cfg.data.test.get", "cfg.data.test.get", "pattern.replace.replace", "len", "dict", "range", "next", "pyskl.core.OutputHook", "zip", "model.parameters", "len", "dict", "len", "pattern.replace.replace", "list", "len", "model.parameters", "mmcv.parallel.scatter", "torch.no_grad", "range", "operator.itemgetter", "len", "isinstance", "video.startswith", "dict", "dict", "filter", "dict", "model", "isinstance", "os.exists", "os.isfile", "os.isdir", "RuntimeError", "dict", "pattern.replace.find", "os.listdir", "os.listdir", "pattern.replace.find", "re.match", "type"], "function", ["None"], ["", "def", "inference_recognizer", "(", "model", ",", "video", ",", "outputs", "=", "None", ",", "as_tensor", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Inference a video with the recognizer.\n\n    Args:\n        model (nn.Module): The loaded recognizer.\n        video (str | dict | ndarray): The video file path / url or the\n            rawframes directory path / results dictionary (the input of\n            pipeline) / a 4D array T x H x W x 3 (The input video).\n        outputs (list(str) | tuple(str) | str | None) : Names of layers whose\n            outputs need to be returned, default: None.\n        as_tensor (bool): Same as that in ``OutputHook``. Default: True.\n\n    Returns:\n        dict[tuple(str, float)]: Top-5 recognition result dict.\n        dict[torch.tensor | np.ndarray]:\n            Output feature maps from layers specified in `outputs`.\n    \"\"\"", "\n", "if", "'use_frames'", "in", "kwargs", ":", "\n", "        ", "warnings", ".", "warn", "(", "'The argument `use_frames` is deprecated PR #1191. '", "\n", "'Now you can use models trained with frames or videos '", "\n", "'arbitrarily. '", ")", "\n", "", "if", "'label_path'", "in", "kwargs", ":", "\n", "        ", "warnings", ".", "warn", "(", "'The argument `use_frames` is deprecated PR #1191. '", "\n", "'Now the label file is not needed in '", "\n", "'inference_recognizer. '", ")", "\n", "\n", "", "input_flag", "=", "None", "\n", "if", "isinstance", "(", "video", ",", "dict", ")", ":", "\n", "        ", "input_flag", "=", "'dict'", "\n", "", "elif", "isinstance", "(", "video", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "assert", "len", "(", "video", ".", "shape", ")", "==", "4", ",", "'The shape should be T x H x W x C'", "\n", "input_flag", "=", "'array'", "\n", "", "elif", "isinstance", "(", "video", ",", "str", ")", "and", "video", ".", "startswith", "(", "'http'", ")", ":", "\n", "        ", "input_flag", "=", "'video'", "\n", "", "elif", "isinstance", "(", "video", ",", "str", ")", "and", "osp", ".", "exists", "(", "video", ")", ":", "\n", "        ", "if", "osp", ".", "isfile", "(", "video", ")", ":", "\n", "            ", "input_flag", "=", "'video'", "\n", "", "if", "osp", ".", "isdir", "(", "video", ")", ":", "\n", "            ", "input_flag", "=", "'rawframes'", "\n", "", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'The type of argument video is not supported: '", "\n", "f'{type(video)}'", ")", "\n", "\n", "", "if", "isinstance", "(", "outputs", ",", "str", ")", ":", "\n", "        ", "outputs", "=", "(", "outputs", ",", ")", "\n", "", "assert", "outputs", "is", "None", "or", "isinstance", "(", "outputs", ",", "(", "tuple", ",", "list", ")", ")", "\n", "\n", "cfg", "=", "model", ".", "cfg", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "# model device", "\n", "# build the data pipeline", "\n", "test_pipeline", "=", "cfg", ".", "data", ".", "test", ".", "pipeline", "\n", "# Alter data pipelines & prepare inputs", "\n", "if", "input_flag", "==", "'dict'", ":", "\n", "        ", "data", "=", "video", "\n", "", "if", "input_flag", "==", "'array'", ":", "\n", "        ", "modality_map", "=", "{", "2", ":", "'Flow'", ",", "3", ":", "'RGB'", "}", "\n", "modality", "=", "modality_map", ".", "get", "(", "video", ".", "shape", "[", "-", "1", "]", ")", "\n", "data", "=", "dict", "(", "\n", "total_frames", "=", "video", ".", "shape", "[", "0", "]", ",", "\n", "label", "=", "-", "1", ",", "\n", "start_index", "=", "0", ",", "\n", "array", "=", "video", ",", "\n", "modality", "=", "modality", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "test_pipeline", ")", ")", ":", "\n", "            ", "if", "'Decode'", "in", "test_pipeline", "[", "i", "]", "[", "'type'", "]", ":", "\n", "                ", "test_pipeline", "[", "i", "]", "=", "dict", "(", "type", "=", "'ArrayDecode'", ")", "\n", "", "", "", "if", "input_flag", "==", "'video'", ":", "\n", "        ", "data", "=", "dict", "(", "filename", "=", "video", ",", "label", "=", "-", "1", ",", "start_index", "=", "0", ",", "modality", "=", "'RGB'", ")", "\n", "if", "'Init'", "not", "in", "test_pipeline", "[", "0", "]", "[", "'type'", "]", ":", "\n", "            ", "test_pipeline", "=", "[", "dict", "(", "type", "=", "'OpenCVInit'", ")", "]", "+", "test_pipeline", "\n", "", "else", ":", "\n", "            ", "test_pipeline", "[", "0", "]", "=", "dict", "(", "type", "=", "'OpenCVInit'", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "test_pipeline", ")", ")", ":", "\n", "            ", "if", "'Decode'", "in", "test_pipeline", "[", "i", "]", "[", "'type'", "]", ":", "\n", "                ", "test_pipeline", "[", "i", "]", "=", "dict", "(", "type", "=", "'OpenCVDecode'", ")", "\n", "", "", "", "if", "input_flag", "==", "'rawframes'", ":", "\n", "        ", "filename_tmpl", "=", "cfg", ".", "data", ".", "test", ".", "get", "(", "'filename_tmpl'", ",", "'img_{:05}.jpg'", ")", "\n", "modality", "=", "cfg", ".", "data", ".", "test", ".", "get", "(", "'modality'", ",", "'RGB'", ")", "\n", "start_index", "=", "cfg", ".", "data", ".", "test", ".", "get", "(", "'start_index'", ",", "1", ")", "\n", "\n", "# count the number of frames that match the format of `filename_tmpl`", "\n", "# RGB pattern example: img_{:05}.jpg -> ^img_\\d+.jpg$", "\n", "# Flow patteren example: {}_{:05d}.jpg -> ^x_\\d+.jpg$", "\n", "pattern", "=", "f'^{filename_tmpl}$'", "\n", "if", "modality", "==", "'Flow'", ":", "\n", "            ", "pattern", "=", "pattern", ".", "replace", "(", "'{}'", ",", "'x'", ")", "\n", "", "pattern", "=", "pattern", ".", "replace", "(", "\n", "pattern", "[", "pattern", ".", "find", "(", "'{'", ")", ":", "pattern", ".", "find", "(", "'}'", ")", "+", "1", "]", ",", "'\\\\d+'", ")", "\n", "total_frames", "=", "len", "(", "\n", "list", "(", "\n", "filter", "(", "lambda", "x", ":", "re", ".", "match", "(", "pattern", ",", "x", ")", "is", "not", "None", ",", "\n", "os", ".", "listdir", "(", "video", ")", ")", ")", ")", "\n", "data", "=", "dict", "(", "\n", "frame_dir", "=", "video", ",", "\n", "total_frames", "=", "total_frames", ",", "\n", "label", "=", "-", "1", ",", "\n", "start_index", "=", "start_index", ",", "\n", "filename_tmpl", "=", "filename_tmpl", ",", "\n", "modality", "=", "modality", ")", "\n", "if", "'Init'", "in", "test_pipeline", "[", "0", "]", "[", "'type'", "]", ":", "\n", "            ", "test_pipeline", "=", "test_pipeline", "[", "1", ":", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "test_pipeline", ")", ")", ":", "\n", "            ", "if", "'Decode'", "in", "test_pipeline", "[", "i", "]", "[", "'type'", "]", ":", "\n", "                ", "test_pipeline", "[", "i", "]", "=", "dict", "(", "type", "=", "'RawFrameDecode'", ")", "\n", "\n", "", "", "", "test_pipeline", "=", "Compose", "(", "test_pipeline", ")", "\n", "data", "=", "test_pipeline", "(", "data", ")", "\n", "data", "=", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", "\n", "\n", "if", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "# scatter to specified GPU", "\n", "        ", "data", "=", "scatter", "(", "data", ",", "[", "device", "]", ")", "[", "0", "]", "\n", "\n", "# forward the model", "\n", "", "with", "OutputHook", "(", "model", ",", "outputs", "=", "outputs", ",", "as_tensor", "=", "as_tensor", ")", "as", "h", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "scores", "=", "model", "(", "return_loss", "=", "False", ",", "**", "data", ")", "[", "0", "]", "\n", "", "returned_features", "=", "h", ".", "layer_outputs", "if", "outputs", "else", "None", "\n", "\n", "", "num_classes", "=", "scores", ".", "shape", "[", "-", "1", "]", "\n", "score_tuples", "=", "tuple", "(", "zip", "(", "range", "(", "num_classes", ")", ",", "scores", ")", ")", "\n", "score_sorted", "=", "sorted", "(", "score_tuples", ",", "key", "=", "itemgetter", "(", "1", ")", ",", "reverse", "=", "True", ")", "\n", "\n", "top5_label", "=", "score_sorted", "[", ":", "5", "]", "\n", "if", "outputs", ":", "\n", "        ", "return", "top5_label", ",", "returned_features", "\n", "", "return", "top5_label", "\n", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.apis.train.init_random_seed": [[18, 49], ["mmcv.runner.get_dist_info", "numpy.random.randint", "torch.broadcast", "torch.tensor.item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["from", "pyskl", ".", "models", "import", "build_model", "\n", "from", "pyskl", ".", "utils", "import", "collect_env", ",", "get_root_logger", ",", "mc_off", ",", "mc_on", ",", "test_port", "\n", "\n", "\n", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a recognizer'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to evaluate the checkpoint during training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--test-last'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to test the checkpoint after training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--test-best'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to test the best checkpoint (if applicable) after training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'pytorch'", ",", "'slurm'", "]", ",", "\n", "default", "=", "'pytorch'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.apis.train.train_model": [[51, 214], ["dict", "utils.get_root_logger", "dict", "dict", "cfg.get", "mmcv.parallel.MMDistributedDataParallel", "mmcv.runner.build_optimizer", "Runner", "Runner.register_training_hooks", "Runner.register_hook", "cfg.get", "Runner.run", "torch.barrier", "time.sleep", "isinstance", "datasets.build_dataloader", "mmcv.parallel.MMDistributedDataParallel.cuda", "mmcv.runner.OptimizerHook", "cfg.get", "mmcv.runner.DistSamplerSeedHook", "cfg.get", "datasets.build_dataset", "dict", "dict", "datasets.build_dataloader", "core.DistEvalHook", "Runner.register_hook", "Runner.resume", "cfg.get", "datasets.build_dataset", "cfg.get().get", "dict", "dict", "datasets.build_dataloader", "zip", "cfg.data.get", "cfg.data.get", "cfg.data.get", "cfg.data.get", "dict", "utils.cache_checkpoint", "Runner.load_checkpoint", "dict", "os.join", "names.append", "ckpts.append", "names.append", "ckpts.append", "mmcv.engine.multi_gpu_test", "mmcv.runner.get_dist_info", "torch.cuda.current_device", "torch.cuda.current_device", "cfg.data.get", "cfg.data.get", "cfg.data.get", "cfg.data.get", "len", "utils.get_root_logger.info", "os.join", "cfg.get", "cfg.data.get", "cfg.data.get", "cfg.data.get", "cfg.data.get", "Runner.load_checkpoint", "os.join", "datasets.build_dataset.dump_results", "cfg.get", "datasets.build_dataset.evaluate", "utils.get_root_logger.info", "test_dataset.evaluate.items", "os.listdir", "os.listdir", "x.endswith", "len", "cfg.get.pop", "utils.get_root_logger.info", "int", "numpy.argmax", "x.split"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.get_root_logger", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.cache_checkpoint", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.dump_results", "home.repos.pwc.inspect_result.kennymckormick_pyskl.datasets.base.BaseDataset.evaluate"], ["\n", "", "return", "args", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# work_dir is determined in this priority:", "\n", "# config file > default (base filename)", "\n", "", "if", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "\n", "", "if", "not", "hasattr", "(", "cfg", ",", "'dist_params'", ")", ":", "\n", "        ", "cfg", ".", "dist_params", "=", "dict", "(", "backend", "=", "'nccl'", ")", "\n", "\n", "", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "cfg", ".", "gpu_ids", "=", "range", "(", "world_size", ")", "\n", "\n", "auto_resume", "=", "cfg", ".", "get", "(", "'auto_resume'", ",", "True", ")", "\n", "if", "auto_resume", "and", "cfg", ".", "get", "(", "'resume_from'", ",", "None", ")", "is", "None", ":", "\n", "        ", "resume_pth", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "'latest.pth'", ")", "\n", "if", "osp", ".", "exists", "(", "resume_pth", ")", ":", "\n", "            ", "cfg", ".", "resume_from", "=", "resume_pth", "\n", "\n", "# create work_dir", "\n", "", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", ")", "\n", "# init logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "f'{k}: {v}'", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Config: {cfg.pretty_text}'", ")", "\n", "\n", "# set random seeds", "\n", "seed", "=", "init_random_seed", "(", "args", ".", "seed", ")", "\n", "logger", ".", "info", "(", "f'Set random seed to {seed}, deterministic: {args.deterministic}'", ")", "\n", "set_random_seed", "(", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "\n", "cfg", ".", "seed", "=", "seed", "\n", "meta", "[", "'seed'", "]", "=", "seed", "\n", "meta", "[", "'config_name'", "]", "=", "osp", ".", "basename", "(", "args", ".", "config", ")", "\n", "meta", "[", "'work_dir'", "]", "=", "osp", ".", "basename", "(", "cfg", ".", "work_dir", ".", "rstrip", "(", "'/\\\\'", ")", ")", "\n", "\n", "model", "=", "build_model", "(", "cfg", ".", "model", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "\n", "cfg", ".", "workflow", "=", "cfg", ".", "get", "(", "'workflow'", ",", "[", "(", "'train'", ",", "1", ")", "]", ")", "\n", "assert", "len", "(", "cfg", ".", "workflow", ")", "==", "1", "\n", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save pyskl version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "pyskl_version", "=", "__version__", "+", "get_git_hash", "(", "digits", "=", "7", ")", ",", "\n", "config", "=", "cfg", ".", "pretty_text", ")", "\n", "\n", "", "test_option", "=", "dict", "(", "test_last", "=", "args", ".", "test_last", ",", "test_best", "=", "args", ".", "test_best", ")", "\n", "\n", "default_mc_cfg", "=", "(", "'localhost'", ",", "22077", ")", "\n", "memcached", "=", "cfg", ".", "get", "(", "'memcached'", ",", "False", ")", "\n", "\n", "if", "rank", "==", "0", "and", "memcached", ":", "\n", "# mc_list is a list of pickle files you want to cache in memory.", "\n", "# Basically, each pickle file is a dictionary.", "\n", "        ", "mc_cfg", "=", "cfg", ".", "get", "(", "'mc_cfg'", ",", "default_mc_cfg", ")", "\n", "assert", "isinstance", "(", "mc_cfg", ",", "tuple", ")", "and", "mc_cfg", "[", "0", "]", "==", "'localhost'", "\n", "if", "not", "test_port", "(", "mc_cfg", "[", "0", "]", ",", "mc_cfg", "[", "1", "]", ")", ":", "\n", "            ", "mc_on", "(", "port", "=", "mc_cfg", "[", "1", "]", ",", "launcher", "=", "args", ".", "launcher", ")", "\n", "", "retry", "=", "3", "\n", "while", "not", "test_port", "(", "mc_cfg", "[", "0", "]", ",", "mc_cfg", "[", "1", "]", ")", "and", "retry", ">", "0", ":", "\n", "            ", "time", ".", "sleep", "(", "5", ")", "\n", "retry", "-=", "1", "\n", "", "assert", "retry", ">=", "0", ",", "'Failed to launch memcached. '", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n", "train_model", "(", "model", ",", "datasets", ",", "cfg", ",", "validate", "=", "args", ".", "validate", ",", "test", "=", "test_option", ",", "timestamp", "=", "timestamp", ",", "meta", "=", "meta", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "\n", "if", "rank", "==", "0", "and", "memcached", ":", "\n", "        ", "mc_off", "(", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.models.builder.build_backbone": [[12, 15], ["BACKBONES.build"], "function", ["None"], ["\n", "from", ".", "samplers", "import", "ClassSpecificDistributedSampler", ",", "DistributedSampler", "\n", "\n", "if", "platform", ".", "system", "(", ")", "!=", "'Windows'", ":", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.models.builder.build_head": [[17, 20], ["HEADS.build"], "function", ["None"], ["    ", "import", "resource", "\n", "rlimit", "=", "resource", ".", "getrlimit", "(", "resource", ".", "RLIMIT_NOFILE", ")", "\n", "hard_limit", "=", "rlimit", "[", "1", "]", "\n", "soft_limit", "=", "min", "(", "4096", ",", "hard_limit", ")", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.models.builder.build_recognizer": [[22, 25], ["RECOGNIZERS.build"], "function", ["None"], ["\n", "", "DATASETS", "=", "Registry", "(", "'dataset'", ")", "\n", "PIPELINES", "=", "Registry", "(", "'pipeline'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.models.builder.build_loss": [[27, 30], ["LOSSES.build"], "function", ["None"], ["def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.models.builder.build_model": [[32, 39], ["cfg.copy", "cfg.copy.pop", "ValueError", "builder.build_recognizer"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.models.builder.build_recognizer"], ["\n", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ",", "default_args", ")", "\n", "return", "dataset", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizer2d.Recognizer2D.forward_train": [[12, 31], ["imgs.reshape.reshape.reshape", "dict", "recognizer2d.Recognizer2D.extract_feat", "x.reshape.reshape.reshape", "recognizer2d.Recognizer2D.cls_head", "label.squeeze", "recognizer2d.Recognizer2D.cls_head.loss", "dict.update"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.extract_feat", "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.base.BaseHead.loss"], ["def", "forward_train", "(", "self", ",", "imgs", ",", "label", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call when training.\"\"\"", "\n", "\n", "assert", "self", ".", "with_cls_head", "\n", "batches", "=", "imgs", ".", "shape", "[", "0", "]", "\n", "imgs", "=", "imgs", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "imgs", ".", "shape", "[", "2", ":", "]", ")", "\n", "num_segs", "=", "imgs", ".", "shape", "[", "0", "]", "//", "batches", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "imgs", ")", "\n", "x", "=", "x", ".", "reshape", "(", "(", "batches", ",", "num_segs", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n", "cls_score", "=", "self", ".", "cls_head", "(", "x", ")", "\n", "gt_label", "=", "label", ".", "squeeze", "(", ")", "\n", "loss_cls", "=", "self", ".", "cls_head", ".", "loss", "(", "cls_score", ",", "gt_label", ",", "**", "kwargs", ")", "\n", "losses", ".", "update", "(", "loss_cls", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizer2d.Recognizer2D.forward_test": [[32, 59], ["imgs.reshape.reshape.reshape", "recognizer2d.Recognizer2D.extract_feat", "recognizer2d.Recognizer2D.test_cfg.get", "x.mean().mean.mean().mean.reshape", "recognizer2d.Recognizer2D.cls_head", "recognizer2d.Recognizer2D.reshape", "recognizer2d.Recognizer2D.average_clip", "recognizer2d.Recognizer2D.cpu().numpy", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d.", "x.mean().mean.mean().mean.reshape", "x.mean().mean.mean().mean.mean().mean", "x.mean().mean.mean().mean.cpu().numpy", "recognizer2d.Recognizer2D.cpu", "x.mean().mean.mean().mean.mean", "x.mean().mean.mean().mean.cpu"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.extract_feat", "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer.average_clip"], ["", "def", "forward_test", "(", "self", ",", "imgs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call when evaluation and testing.\"\"\"", "\n", "batches", "=", "imgs", ".", "shape", "[", "0", "]", "\n", "imgs", "=", "imgs", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "imgs", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "imgs", ")", "\n", "assert", "'num_segs'", "in", "self", ".", "test_cfg", "\n", "num_segs", "=", "self", ".", "test_cfg", "[", "'num_segs'", "]", "\n", "assert", "x", ".", "shape", "[", "0", "]", "%", "(", "batches", "*", "num_segs", ")", "==", "0", "\n", "num_crops", "=", "x", ".", "shape", "[", "0", "]", "//", "(", "batches", "*", "num_segs", ")", "\n", "\n", "if", "self", ".", "test_cfg", ".", "get", "(", "'feat_ext'", ",", "False", ")", ":", "\n", "# perform spatial pooling", "\n", "            ", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "x", "=", "avg_pool", "(", "x", ")", "\n", "# squeeze dimensions", "\n", "x", "=", "x", ".", "reshape", "(", "(", "batches", ",", "num_crops", ",", "num_segs", ",", "-", "1", ")", ")", "\n", "# temporal average pooling", "\n", "x", "=", "x", ".", "mean", "(", "axis", "=", "1", ")", ".", "mean", "(", "axis", "=", "1", ")", "\n", "return", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "x", "=", "x", ".", "reshape", "(", "(", "batches", "*", "num_crops", ",", "num_segs", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "cls_score", "=", "self", ".", "cls_head", "(", "x", ")", "\n", "cls_score", "=", "cls_score", ".", "reshape", "(", "batches", ",", "num_crops", ",", "cls_score", ".", "shape", "[", "-", "1", "]", ")", "\n", "# calculate num_crops automatically", "\n", "cls_score", "=", "self", ".", "average_clip", "(", "cls_score", ")", "\n", "return", "cls_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer.__init__": [[37, 61], ["dict", "dict", "torch.Module.__init__", "builder.build_backbone", "isinstance", "isinstance", "dict.get", "base.BaseRecognizer.init_weights", "builder.build_head", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__", "home.repos.pwc.inspect_result.kennymckormick_pyskl.models.builder.build_backbone", "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights", "home.repos.pwc.inspect_result.kennymckormick_pyskl.models.builder.build_head"], ["\n", "\n", "def", "__init__", "(", "self", ",", "\n", "ann_file", ",", "\n", "pipeline", ",", "\n", "data_prefix", "=", "''", ",", "\n", "test_mode", "=", "False", ",", "\n", "multi_class", "=", "False", ",", "\n", "num_classes", "=", "None", ",", "\n", "start_index", "=", "1", ",", "\n", "modality", "=", "'RGB'", ",", "\n", "memcached", "=", "False", ",", "\n", "mc_cfg", "=", "(", "'localhost'", ",", "22077", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ann_file", "=", "ann_file", "\n", "self", ".", "data_prefix", "=", "data_prefix", "\n", "self", ".", "test_mode", "=", "test_mode", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer.with_cls_head": [[62, 66], ["hasattr"], "methods", ["None"], ["self", ".", "multi_class", "=", "multi_class", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "start_index", "=", "start_index", "\n", "self", ".", "modality", "=", "modality", "\n", "# Note: Currently, memcached only works for PoseDataset", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer.init_weights": [[67, 72], ["base.BaseRecognizer.backbone.init_weights", "base.BaseRecognizer.cls_head.init_weights"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights", "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights"], ["self", ".", "memcached", "=", "memcached", "\n", "self", ".", "mc_cfg", "=", "mc_cfg", "\n", "self", ".", "cli", "=", "None", "\n", "\n", "self", ".", "pipeline", "=", "Compose", "(", "pipeline", ")", "\n", "self", ".", "video_infos", "=", "self", ".", "load_annotations", "(", ")", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer.extract_feat": [[73, 84], ["base.BaseRecognizer.backbone"], "methods", ["None"], ["\n", "", "@", "abstractmethod", "\n", "def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the annotation according to ann_file into video_infos.\"\"\"", "\n", "\n", "# json annotations already looks like video_infos, so for each dataset,", "\n", "# this func should be the same", "\n", "", "def", "load_json_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load json annotation file to get video information.\"\"\"", "\n", "video_infos", "=", "mmcv", ".", "load", "(", "self", ".", "ann_file", ")", "\n", "num_videos", "=", "len", "(", "video_infos", ")", "\n", "path_key", "=", "'frame_dir'", "if", "'frame_dir'", "in", "video_infos", "[", "0", "]", "else", "'filename'", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer.average_clip": [[85, 109], ["base.BaseRecognizer.test_cfg.get", "len", "ValueError", "torch.softmax().mean", "torch.softmax().mean", "torch.softmax().mean", "torch.softmax().mean", "cls_score.mean", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["for", "i", "in", "range", "(", "num_videos", ")", ":", "\n", "            ", "path_value", "=", "video_infos", "[", "i", "]", "[", "path_key", "]", "\n", "path_value", "=", "osp", ".", "join", "(", "self", ".", "data_prefix", ",", "path_value", ")", "\n", "video_infos", "[", "i", "]", "[", "path_key", "]", "=", "path_value", "\n", "if", "self", ".", "multi_class", ":", "\n", "                ", "assert", "self", ".", "num_classes", "is", "not", "None", "\n", "", "else", ":", "\n", "                ", "assert", "len", "(", "video_infos", "[", "i", "]", "[", "'label'", "]", ")", "==", "1", "\n", "video_infos", "[", "i", "]", "[", "'label'", "]", "=", "video_infos", "[", "i", "]", "[", "'label'", "]", "[", "0", "]", "\n", "", "", "return", "video_infos", "\n", "\n", "", "def", "parse_by_class", "(", "self", ")", ":", "\n", "        ", "video_infos_by_class", "=", "defaultdict", "(", "list", ")", "\n", "for", "item", "in", "self", ".", "video_infos", ":", "\n", "            ", "label", "=", "item", "[", "'label'", "]", "\n", "video_infos_by_class", "[", "label", "]", ".", "append", "(", "item", ")", "\n", "", "return", "video_infos_by_class", "\n", "\n", "", "@", "staticmethod", "\n", "def", "label2array", "(", "num", ",", "label", ")", ":", "\n", "        ", "arr", "=", "np", ".", "zeros", "(", "num", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "arr", "[", "label", "]", "=", "1.", "\n", "return", "arr", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer.forward_train": [[110, 113], ["None"], "methods", ["None"], ["results", ",", "\n", "metrics", "=", "'top_k_accuracy'", ",", "\n", "metric_options", "=", "dict", "(", "top_k_accuracy", "=", "dict", "(", "topk", "=", "(", "1", ",", "5", ")", ")", ")", ",", "\n", "logger", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer.forward_test": [[114, 118], ["None"], "methods", ["None"], ["**", "deprecated_kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer._parse_losses": [[119, 151], ["collections.OrderedDict", "losses.items", "sum", "collections.OrderedDict.items", "isinstance", "loss_value.data.clone.data.clone.item", "loss_value.data.clone.data.clone.mean", "isinstance", "torch.is_available", "torch.is_available", "torch.is_available", "torch.is_available", "torch.is_initialized", "torch.is_initialized", "torch.is_initialized", "torch.is_initialized", "loss_value.data.clone.data.clone.data.clone", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "sum", "TypeError", "collections.OrderedDict.items", "loss_value.data.clone.data.clone.div_", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "_loss.mean"], "methods", ["None"], ["\n", "if", "not", "isinstance", "(", "results", ",", "list", ")", ":", "\n", "            ", "raise", "TypeError", "(", "f'results must be a list, but got {type(results)}'", ")", "\n", "", "assert", "len", "(", "results", ")", "==", "len", "(", "self", ")", ",", "(", "\n", "f'The length of results is not equal to the dataset len: '", "\n", "f'{len(results)} != {len(self)}'", ")", "\n", "\n", "if", "isinstance", "(", "results", "[", "0", "]", ",", "list", ")", "or", "isinstance", "(", "results", "[", "0", "]", ",", "tuple", ")", ":", "\n", "            ", "num_results", "=", "len", "(", "results", "[", "0", "]", ")", "\n", "eval_results", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "num_results", ")", ":", "\n", "                ", "eval_results_cur", "=", "self", ".", "evaluate", "(", "\n", "[", "x", "[", "i", "]", "for", "x", "in", "results", "]", ",", "metrics", ",", "metric_options", ",", "logger", ",", "**", "deprecated_kwargs", ")", "\n", "eval_results", ".", "update", "(", "{", "f'{k}_{i}'", ":", "v", "for", "k", ",", "v", "in", "eval_results_cur", ".", "items", "(", ")", "}", ")", "\n", "", "return", "eval_results", "\n", "\n", "# Protect ``metric_options`` since it uses mutable value as default", "\n", "", "metric_options", "=", "copy", ".", "deepcopy", "(", "metric_options", ")", "\n", "if", "deprecated_kwargs", "!=", "{", "}", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'Option arguments for metrics has been changed to '", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer.forward": [[152, 160], ["base.BaseRecognizer.forward_test", "base.BaseRecognizer.forward_train", "ValueError"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.forward_test", "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.forward_train"], ["\"`metric_options`, See 'https://github.com/open-mmlab/mmaction2/pull/286' \"", "# noqa: E501", "\n", "'for more details'", ")", "\n", "metric_options", "[", "'top_k_accuracy'", "]", "=", "dict", "(", "\n", "metric_options", "[", "'top_k_accuracy'", "]", ",", "**", "deprecated_kwargs", ")", "\n", "\n", "", "metrics", "=", "metrics", "if", "isinstance", "(", "metrics", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "metrics", "]", "\n", "allowed_metrics", "=", "[", "'top_k_accuracy'", ",", "'mean_class_accuracy'", ",", "'mean_average_precision'", "]", "\n", "\n", "for", "metric", "in", "metrics", ":", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer.train_step": [[161, 197], ["base.BaseRecognizer.", "base.BaseRecognizer._parse_losses", "dict", "len", "next", "iter", "data_batch.values"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer._parse_losses"], ["            ", "if", "metric", "not", "in", "allowed_metrics", ":", "\n", "                ", "raise", "KeyError", "(", "f'metric {metric} is not supported'", ")", "\n", "\n", "", "", "eval_results", "=", "OrderedDict", "(", ")", "\n", "gt_labels", "=", "[", "ann", "[", "'label'", "]", "for", "ann", "in", "self", ".", "video_infos", "]", "\n", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "msg", "=", "f'Evaluating {metric} ...'", "\n", "if", "logger", "is", "None", ":", "\n", "                ", "msg", "=", "'\\n'", "+", "msg", "\n", "", "print_log", "(", "msg", ",", "logger", "=", "logger", ")", "\n", "\n", "if", "metric", "==", "'top_k_accuracy'", ":", "\n", "                ", "topk", "=", "metric_options", ".", "setdefault", "(", "'top_k_accuracy'", ",", "\n", "{", "}", ")", ".", "setdefault", "(", "\n", "'topk'", ",", "(", "1", ",", "5", ")", ")", "\n", "if", "not", "isinstance", "(", "topk", ",", "(", "int", ",", "tuple", ")", ")", ":", "\n", "                    ", "raise", "TypeError", "(", "'topk must be int or tuple of int, '", "\n", "f'but got {type(topk)}'", ")", "\n", "", "if", "isinstance", "(", "topk", ",", "int", ")", ":", "\n", "                    ", "topk", "=", "(", "topk", ",", ")", "\n", "\n", "", "top_k_acc", "=", "top_k_accuracy", "(", "results", ",", "gt_labels", ",", "topk", ")", "\n", "log_msg", "=", "[", "]", "\n", "for", "k", ",", "acc", "in", "zip", "(", "topk", ",", "top_k_acc", ")", ":", "\n", "                    ", "eval_results", "[", "f'top{k}_acc'", "]", "=", "acc", "\n", "log_msg", ".", "append", "(", "f'\\ntop{k}_acc\\t{acc:.4f}'", ")", "\n", "", "log_msg", "=", "''", ".", "join", "(", "log_msg", ")", "\n", "print_log", "(", "log_msg", ",", "logger", "=", "logger", ")", "\n", "continue", "\n", "\n", "", "if", "metric", "==", "'mean_class_accuracy'", ":", "\n", "                ", "mean_acc", "=", "mean_class_accuracy", "(", "results", ",", "gt_labels", ")", "\n", "eval_results", "[", "'mean_class_accuracy'", "]", "=", "mean_acc", "\n", "log_msg", "=", "f'\\nmean_acc\\t{mean_acc:.4f}'", "\n", "print_log", "(", "log_msg", ",", "logger", "=", "logger", ")", "\n", "continue", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.rgetattr": [[14, 19], ["functools.reduce", "getattr", "attr.split"], "function", ["None"], ["\n", "from", ".", ".", "core", "import", "mean_average_precision", ",", "mean_class_accuracy", ",", "top_k_accuracy", "\n", "from", ".", "pipelines", "import", "Compose", "\n", "\n", "\n", "class", "BaseDataset", "(", "Dataset", ",", "metaclass", "=", "ABCMeta", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizer3d.Recognizer3D.forward_train": [[13, 28], ["imgs.reshape.reshape.reshape", "dict", "recognizer3d.Recognizer3D.extract_feat", "recognizer3d.Recognizer3D.cls_head", "label.squeeze", "recognizer3d.Recognizer3D.cls_head.loss", "dict.update"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.extract_feat", "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.base.BaseHead.loss"], ["def", "forward_train", "(", "self", ",", "imgs", ",", "label", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call when training.\"\"\"", "\n", "\n", "assert", "self", ".", "with_cls_head", "\n", "imgs", "=", "imgs", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "imgs", ".", "shape", "[", "2", ":", "]", ")", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "imgs", ")", "\n", "\n", "cls_score", "=", "self", ".", "cls_head", "(", "x", ")", "\n", "gt_label", "=", "label", ".", "squeeze", "(", ")", "\n", "loss_cls", "=", "self", ".", "cls_head", ".", "loss", "(", "cls_score", ",", "gt_label", ",", "**", "kwargs", ")", "\n", "losses", ".", "update", "(", "loss_cls", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizer3d.Recognizer3D.forward_test": [[29, 86], ["imgs.reshape.reshape.reshape", "recognizer3d.Recognizer3D.test_cfg.get", "recognizer3d.Recognizer3D.cls_head", "recognizer3d.Recognizer3D.reshape", "recognizer3d.Recognizer3D.average_clip", "recognizer3d.Recognizer3D.cpu().numpy", "isinstance", "recognizer3d.Recognizer3D.extract_feat", "nn.AdaptiveAvgPool3d.cpu().numpy", "recognizer3d.Recognizer3D.extract_feat", "feats.append", "len", "tuple", "torch.cat", "isinstance", "len", "len", "torch.nn.AdaptiveAvgPool3d", "isinstance", "nn.AdaptiveAvgPool3d.reshape", "nn.AdaptiveAvgPool3d.mean", "recognizer3d.Recognizer3D.cpu", "torch.cat", "feat[].size", "nn.AdaptiveAvgPool3d.size", "torch.cat", "torch.nn.AdaptiveAvgPool3d.", "nn.AdaptiveAvgPool3d.cpu", "range", "torch.nn.AdaptiveAvgPool3d."], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer.average_clip", "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.extract_feat", "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.extract_feat"], ["", "def", "forward_test", "(", "self", ",", "imgs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call when evaluation, testing.\"\"\"", "\n", "batches", "=", "imgs", ".", "shape", "[", "0", "]", "\n", "num_segs", "=", "imgs", ".", "shape", "[", "1", "]", "\n", "imgs", "=", "imgs", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "imgs", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "if", "self", ".", "max_testing_views", "is", "not", "None", ":", "\n", "            ", "total_views", "=", "imgs", ".", "shape", "[", "0", "]", "\n", "assert", "num_segs", "==", "total_views", ",", "(", "\n", "'max_testing_views is only compatible '", "\n", "'with batch_size == 1'", ")", "\n", "view_ptr", "=", "0", "\n", "feats", "=", "[", "]", "\n", "while", "view_ptr", "<", "total_views", ":", "\n", "                ", "batch_imgs", "=", "imgs", "[", "view_ptr", ":", "view_ptr", "+", "self", ".", "max_testing_views", "]", "\n", "x", "=", "self", ".", "extract_feat", "(", "batch_imgs", ")", "\n", "feats", ".", "append", "(", "x", ")", "\n", "view_ptr", "+=", "self", ".", "max_testing_views", "\n", "# should consider the case that feat is a tuple", "\n", "", "if", "isinstance", "(", "feats", "[", "0", "]", ",", "tuple", ")", ":", "\n", "                ", "len_tuple", "=", "len", "(", "feats", "[", "0", "]", ")", "\n", "feat", "=", "[", "\n", "torch", ".", "cat", "(", "[", "x", "[", "i", "]", "for", "x", "in", "feats", "]", ")", "for", "i", "in", "range", "(", "len_tuple", ")", "\n", "]", "\n", "feat", "=", "tuple", "(", "feat", ")", "\n", "", "else", ":", "\n", "                ", "feat", "=", "torch", ".", "cat", "(", "feats", ")", "\n", "", "", "else", ":", "\n", "            ", "feat", "=", "self", ".", "extract_feat", "(", "imgs", ")", "\n", "\n", "", "if", "self", ".", "test_cfg", ".", "get", "(", "'feat_ext'", ",", "False", ")", ":", "\n", "            ", "feat_dim", "=", "len", "(", "feat", "[", "0", "]", ".", "size", "(", ")", ")", "if", "isinstance", "(", "feat", ",", "tuple", ")", "else", "len", "(", "feat", ".", "size", "(", ")", ")", "\n", "assert", "feat_dim", "in", "[", "5", ",", "2", "]", ",", "(", "\n", "'Got feature of unknown architecture, '", "\n", "'only 3D-CNN-like ([N, in_channels, T, H, W]), and '", "\n", "'transformer-like ([N, in_channels]) features are supported.'", ")", "\n", "if", "feat_dim", "==", "5", ":", "# 3D-CNN architecture", "\n", "# perform spatio-temporal pooling", "\n", "                ", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "if", "isinstance", "(", "feat", ",", "tuple", ")", ":", "\n", "                    ", "feat", "=", "[", "avg_pool", "(", "x", ")", "for", "x", "in", "feat", "]", "\n", "# concat them", "\n", "feat", "=", "torch", ".", "cat", "(", "feat", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "feat", "=", "avg_pool", "(", "feat", ")", "\n", "# squeeze dimensions", "\n", "", "feat", "=", "feat", ".", "reshape", "(", "(", "batches", ",", "num_segs", ",", "-", "1", ")", ")", "\n", "# temporal average pooling", "\n", "feat", "=", "feat", ".", "mean", "(", "axis", "=", "1", ")", "\n", "", "return", "feat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# should have cls_head if not extracting features", "\n", "", "assert", "self", ".", "with_cls_head", "\n", "cls_score", "=", "self", ".", "cls_head", "(", "feat", ")", "\n", "cls_score", "=", "cls_score", ".", "reshape", "(", "batches", ",", "num_segs", ",", "cls_score", ".", "shape", "[", "-", "1", "]", ")", "\n", "cls_score", "=", "self", ".", "average_clip", "(", "cls_score", ")", "\n", "return", "cls_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.forward_train": [[12, 26], ["dict", "recognizergcn.RecognizerGCN.extract_feat", "recognizergcn.RecognizerGCN.cls_head", "label.squeeze", "recognizergcn.RecognizerGCN.cls_head.loss", "dict.update"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.extract_feat", "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.base.BaseHead.loss"], ["def", "forward_train", "(", "self", ",", "keypoint", ",", "label", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call when training.\"\"\"", "\n", "assert", "self", ".", "with_cls_head", "\n", "assert", "keypoint", ".", "shape", "[", "1", "]", "==", "1", "\n", "keypoint", "=", "keypoint", "[", ":", ",", "0", "]", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "x", "=", "self", ".", "extract_feat", "(", "keypoint", ")", "\n", "cls_score", "=", "self", ".", "cls_head", "(", "x", ")", "\n", "gt_label", "=", "label", ".", "squeeze", "(", "-", "1", ")", "\n", "loss", "=", "self", ".", "cls_head", ".", "loss", "(", "cls_score", ",", "gt_label", ")", "\n", "losses", ".", "update", "(", "loss", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.forward_test": [[27, 77], ["keypoint.reshape.reshape.reshape", "recognizergcn.RecognizerGCN.extract_feat", "recognizergcn.RecognizerGCN.test_cfg.get", "recognizergcn.RecognizerGCN.test_cfg.get", "recognizergcn.RecognizerGCN.test_cfg.get", "recognizergcn.RecognizerGCN.cls_head", "recognizergcn.RecognizerGCN.reshape", "recognizergcn.RecognizerGCN.average_clip", "recognizergcn.RecognizerGCN.data.cpu().numpy", "isinstance", "dict", "x.mean.mean.data.cpu().numpy().astype", "isinstance", "isinstance", "isinstance", "isinstance", "torch.cat", "len", "torch.einsum", "x.mean.mean.data.cpu().numpy", "recognizergcn.RecognizerGCN.data.cpu", "x.mean.mean.mean", "x.mean.mean.data.cpu().numpy", "range", "x.mean.mean.data.cpu", "x.mean.mean.data.cpu"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.extract_feat", "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.base.BaseRecognizer.average_clip"], ["", "def", "forward_test", "(", "self", ",", "keypoint", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call when evaluation and\n        testing.\"\"\"", "\n", "assert", "self", ".", "with_cls_head", "or", "self", ".", "feat_ext", "\n", "bs", ",", "nc", "=", "keypoint", ".", "shape", "[", ":", "2", "]", "\n", "keypoint", "=", "keypoint", ".", "reshape", "(", "(", "bs", "*", "nc", ",", ")", "+", "keypoint", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "keypoint", ")", "\n", "feat_ext", "=", "self", ".", "test_cfg", ".", "get", "(", "'feat_ext'", ",", "False", ")", "\n", "pool_opt", "=", "self", ".", "test_cfg", ".", "get", "(", "'pool_opt'", ",", "'all'", ")", "\n", "score_ext", "=", "self", ".", "test_cfg", ".", "get", "(", "'score_ext'", ",", "False", ")", "\n", "if", "feat_ext", "or", "score_ext", ":", "\n", "            ", "assert", "bs", "==", "1", "\n", "assert", "isinstance", "(", "pool_opt", ",", "str", ")", "\n", "dim_idx", "=", "dict", "(", "n", "=", "0", ",", "m", "=", "1", ",", "t", "=", "3", ",", "v", "=", "4", ")", "\n", "\n", "if", "pool_opt", "==", "'all'", ":", "\n", "                ", "pool_opt", "==", "'nmtv'", "\n", "", "if", "pool_opt", "!=", "'none'", ":", "\n", "                ", "for", "digit", "in", "pool_opt", ":", "\n", "                    ", "assert", "digit", "in", "dim_idx", "\n", "\n", "", "", "if", "isinstance", "(", "x", ",", "tuple", ")", "or", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "2", ")", "\n", "", "assert", "len", "(", "x", ".", "shape", ")", "==", "5", ",", "'The shape is N, M, C, T, V'", "\n", "if", "pool_opt", "!=", "'none'", ":", "\n", "                ", "for", "d", "in", "pool_opt", ":", "\n", "                    ", "x", "=", "x", ".", "mean", "(", "dim_idx", "[", "d", "]", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "", "if", "score_ext", ":", "\n", "                ", "w", "=", "self", ".", "cls_head", ".", "fc_cls", ".", "weight", "\n", "b", "=", "self", ".", "cls_head", ".", "fc_cls", ".", "bias", "\n", "x", "=", "torch", ".", "einsum", "(", "'nmctv,oc->nmotv'", ",", "x", ",", "w", ")", "\n", "if", "b", "is", "not", "None", ":", "\n", "                    ", "x", "=", "x", "+", "b", "[", "...", ",", "None", ",", "None", "]", "\n", "", "x", "=", "x", "[", "None", "]", "\n", "", "return", "x", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "\n", "", "cls_score", "=", "self", ".", "cls_head", "(", "x", ")", "\n", "cls_score", "=", "cls_score", ".", "reshape", "(", "bs", ",", "nc", ",", "cls_score", ".", "shape", "[", "-", "1", "]", ")", "\n", "# harmless patch", "\n", "if", "'average_clips'", "not", "in", "self", ".", "test_cfg", ":", "\n", "            ", "self", ".", "test_cfg", "[", "'average_clips'", "]", "=", "'prob'", "\n", "\n", "", "cls_score", "=", "self", ".", "average_clip", "(", "cls_score", ")", "\n", "if", "isinstance", "(", "cls_score", ",", "tuple", ")", "or", "isinstance", "(", "cls_score", ",", "list", ")", ":", "\n", "            ", "cls_score", "=", "[", "x", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "x", "in", "cls_score", "]", "\n", "return", "[", "[", "x", "[", "i", "]", "for", "x", "in", "cls_score", "]", "for", "i", "in", "range", "(", "bs", ")", "]", "\n", "\n", "", "return", "cls_score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.forward": [[78, 86], ["recognizergcn.RecognizerGCN.forward_test", "recognizergcn.RecognizerGCN.forward_train", "ValueError"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.forward_test", "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.forward_train"], ["", "def", "forward", "(", "self", ",", "keypoint", ",", "label", "=", "None", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Define the computation performed at every call.\"\"\"", "\n", "if", "return_loss", ":", "\n", "            ", "if", "label", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Label should not be None.'", ")", "\n", "", "return", "self", ".", "forward_train", "(", "keypoint", ",", "label", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "self", ".", "forward_test", "(", "keypoint", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.recognizers.recognizergcn.RecognizerGCN.extract_feat": [[87, 97], ["recognizergcn.RecognizerGCN.backbone"], "methods", ["None"], ["", "def", "extract_feat", "(", "self", ",", "keypoint", ")", ":", "\n", "        ", "\"\"\"Extract features through a backbone.\n\n        Args:\n            keypoint (torch.Tensor): The input keypoints.\n\n        Returns:\n            torch.tensor: The extracted features.\n        \"\"\"", "\n", "return", "self", ".", "backbone", "(", "keypoint", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.c3d.C3D.__init__": [[18, 57], ["torch.Module.__init__", "dict", "dict", "dict", "dict", "mmcv.cnn.ConvModule", "torch.AvgPool3d", "mmcv.cnn.ConvModule", "torch.AvgPool3d", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "torch.AvgPool3d", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "torch.AvgPool3d", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "4", ",", "\n", "temporal_downsample", "=", "True", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv3d'", ")", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN3d'", ")", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "assert", "num_stages", "in", "[", "3", ",", "4", "]", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "self", ".", "temporal_downsample", "=", "temporal_downsample", "\n", "pool_kernel", ",", "pool_stride", "=", "2", ",", "2", "\n", "if", "not", "self", ".", "temporal_downsample", ":", "\n", "            ", "pool_kernel", ",", "pool_stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "(", "1", ",", "2", ",", "2", ")", "\n", "\n", "", "c3d_conv_param", "=", "dict", "(", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "conv_cfg", "=", "conv_cfg", ",", "norm_cfg", "=", "norm_cfg", ",", "act_cfg", "=", "act_cfg", ")", "\n", "\n", "self", ".", "conv1a", "=", "ConvModule", "(", "self", ".", "in_channels", ",", "self", ".", "base_channels", ",", "**", "c3d_conv_param", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv2a", "=", "ConvModule", "(", "self", ".", "base_channels", ",", "self", ".", "base_channels", "*", "2", ",", "**", "c3d_conv_param", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "pool_kernel", ",", "stride", "=", "pool_stride", ")", "\n", "\n", "self", ".", "conv3a", "=", "ConvModule", "(", "self", ".", "base_channels", "*", "2", ",", "self", ".", "base_channels", "*", "4", ",", "**", "c3d_conv_param", ")", "\n", "self", ".", "conv3b", "=", "ConvModule", "(", "self", ".", "base_channels", "*", "4", ",", "self", ".", "base_channels", "*", "4", ",", "**", "c3d_conv_param", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "pool_kernel", ",", "stride", "=", "pool_stride", ")", "\n", "\n", "self", ".", "conv4a", "=", "ConvModule", "(", "self", ".", "base_channels", "*", "4", ",", "self", ".", "base_channels", "*", "8", ",", "**", "c3d_conv_param", ")", "\n", "self", ".", "conv4b", "=", "ConvModule", "(", "self", ".", "base_channels", "*", "8", ",", "self", ".", "base_channels", "*", "8", ",", "**", "c3d_conv_param", ")", "\n", "\n", "if", "self", ".", "num_stages", "==", "4", ":", "\n", "            ", "self", ".", "pool4", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "pool_kernel", ",", "stride", "=", "pool_stride", ")", "\n", "self", ".", "conv5a", "=", "ConvModule", "(", "self", ".", "base_channels", "*", "8", ",", "self", ".", "base_channels", "*", "8", ",", "**", "c3d_conv_param", ")", "\n", "self", ".", "conv5b", "=", "ConvModule", "(", "self", ".", "base_channels", "*", "8", ",", "self", ".", "base_channels", "*", "8", ",", "**", "c3d_conv_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.c3d.C3D.init_weights": [[58, 69], ["c3d.C3D.modules", "isinstance", "isinstance", "utils.get_root_logger", "utils.get_root_logger.info", "utils.cache_checkpoint", "mmcv.runner.load_checkpoint", "mmcv.cnn.kaiming_init"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.get_root_logger", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.cache_checkpoint"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initiate the parameters either from existing checkpoint or from\n        scratch.\"\"\"", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "kaiming_init", "(", "m", ")", "\n", "", "", "if", "isinstance", "(", "self", ".", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "logger", ".", "info", "(", "f'load model from: {self.pretrained}'", ")", "\n", "self", ".", "pretrained", "=", "cache_checkpoint", "(", "self", ".", "pretrained", ")", "\n", "load_checkpoint", "(", "self", ",", "self", ".", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.c3d.C3D.forward": [[70, 100], ["c3d.C3D.conv1a", "c3d.C3D.pool1", "c3d.C3D.conv2a", "c3d.C3D.pool2", "c3d.C3D.conv3a", "c3d.C3D.conv3b", "c3d.C3D.pool3", "c3d.C3D.conv4a", "c3d.C3D.conv4b", "c3d.C3D.pool4", "c3d.C3D.conv5a", "c3d.C3D.conv5b"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\n\n        Args:\n            x (torch.Tensor): The input data. The size of x is (num_batches, 3, 16, 112, 112).\n\n        Returns:\n            torch.Tensor: The feature of the input samples extracted by the backbone.\n        \"\"\"", "\n", "x", "=", "self", ".", "conv1a", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2a", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "pool2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3b", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "pool3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4b", "(", "x", ")", "\n", "\n", "if", "self", ".", "num_stages", "==", "3", ":", "\n", "            ", "return", "x", "\n", "\n", "", "x", "=", "self", ".", "pool4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5b", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.SEModule.__init__": [[15, 25], ["torch.Module.__init__", "torch.AdaptiveAvgPool3d", "x3d.SEModule._round_width", "torch.Conv3d", "torch.ReLU", "torch.Conv3d", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.X3D._round_width"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "self", ".", "bottleneck", "=", "self", ".", "_round_width", "(", "channels", ",", "reduction", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv3d", "(", "\n", "channels", ",", "self", ".", "bottleneck", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv3d", "(", "\n", "self", ".", "bottleneck", ",", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.SEModule._round_width": [[26, 35], ["max", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_round_width", "(", "width", ",", "multiplier", ",", "min_width", "=", "8", ",", "divisor", "=", "8", ")", ":", "\n", "        ", "width", "*=", "multiplier", "\n", "min_width", "=", "min_width", "or", "divisor", "\n", "width_out", "=", "max", "(", "min_width", ",", "\n", "int", "(", "width", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "if", "width_out", "<", "0.9", "*", "width", ":", "\n", "            ", "width_out", "+=", "divisor", "\n", "", "return", "int", "(", "width_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.SEModule.forward": [[36, 44], ["x3d.SEModule.avg_pool", "x3d.SEModule.fc1", "x3d.SEModule.relu", "x3d.SEModule.fc2", "x3d.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.BlockX3D.__init__": [[67, 132], ["dict", "dict", "dict", "torch.Module.__init__", "dict", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.build_activation_layer", "mmcv.cnn.Swish", "torch.Identity", "x3d.SEModule"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "outplanes", ",", "\n", "spatial_stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "se_ratio", "=", "None", ",", "\n", "use_swish", "=", "True", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv3d'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN3d'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "outplanes", "=", "outplanes", "\n", "self", ".", "spatial_stride", "=", "spatial_stride", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "se_ratio", "=", "se_ratio", "\n", "self", ".", "use_swish", "=", "use_swish", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "act_cfg_swish", "=", "dict", "(", "type", "=", "'Swish'", ")", "\n", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "in_channels", "=", "inplanes", ",", "\n", "out_channels", "=", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "# Here we use the channel-wise conv", "\n", "self", ".", "conv2", "=", "ConvModule", "(", "\n", "in_channels", "=", "planes", ",", "\n", "out_channels", "=", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "(", "1", ",", "self", ".", "spatial_stride", ",", "self", ".", "spatial_stride", ")", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "planes", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "self", ".", "swish", "=", "Swish", "(", ")", "if", "self", ".", "use_swish", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "conv3", "=", "ConvModule", "(", "\n", "in_channels", "=", "planes", ",", "\n", "out_channels", "=", "outplanes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "if", "self", ".", "se_ratio", "is", "not", "None", ":", "\n", "            ", "self", ".", "se_module", "=", "SEModule", "(", "planes", ",", "self", ".", "se_ratio", ")", "\n", "\n", "", "self", ".", "relu", "=", "build_activation_layer", "(", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.BlockX3D.forward": [[133, 158], ["x3d.BlockX3D.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\"\"\"", "\n", "\n", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "\"\"\"Forward wrapper for utilizing checkpoint.\"\"\"", "\n", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "se_ratio", "is", "not", "None", ":", "\n", "                ", "out", "=", "self", ".", "se_module", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "swish", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "identity", "\n", "return", "out", "\n", "\n", "", "out", "=", "_inner_forward", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.X3D.__init__": [[199, 298], ["dict", "dict", "dict", "torch.Module.__init__", "x3d.X3D._round_width", "x3d.X3D._make_stem_layer", "enumerate", "mmcv.cnn.ConvModule", "int", "x3d.X3D._round_repeats", "len", "int", "x3d.X3D.make_res_layer", "x3d.X3D.add_module", "x3d.X3D.res_layers.append", "int", "len"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.X3D._round_width", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._make_stem_layer", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.X3D._round_repeats", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.make_res_layer"], ["def", "__init__", "(", "self", ",", "\n", "gamma_w", "=", "1.0", ",", "\n", "gamma_b", "=", "2.25", ",", "\n", "gamma_d", "=", "2.2", ",", "\n", "pretrained", "=", "None", ",", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "24", ",", "\n", "num_stages", "=", "4", ",", "\n", "stage_blocks", "=", "(", "1", ",", "2", ",", "5", ",", "3", ")", ",", "\n", "spatial_strides", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "se_style", "=", "'half'", ",", "\n", "se_ratio", "=", "1", "/", "16", ",", "\n", "use_swish", "=", "True", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv3d'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN3d'", ",", "requires_grad", "=", "True", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ",", "inplace", "=", "True", ")", ",", "\n", "norm_eval", "=", "False", ",", "\n", "zero_init_residual", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma_w", "=", "gamma_w", "\n", "self", ".", "gamma_b", "=", "gamma_b", "\n", "self", ".", "gamma_d", "=", "gamma_d", "\n", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "# Hard coded, can be changed by gamma_w", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "self", ".", "stage_blocks", "=", "stage_blocks", "\n", "\n", "# apply parameters gamma_w and gamma_d", "\n", "self", ".", "base_channels", "=", "self", ".", "_round_width", "(", "self", ".", "base_channels", ",", "\n", "self", ".", "gamma_w", ")", "\n", "\n", "self", ".", "stage_blocks", "=", "[", "\n", "self", ".", "_round_repeats", "(", "x", ",", "self", ".", "gamma_d", ")", "for", "x", "in", "self", ".", "stage_blocks", "\n", "]", "\n", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "assert", "1", "<=", "num_stages", "<=", "4", "\n", "self", ".", "spatial_strides", "=", "spatial_strides", "\n", "assert", "len", "(", "spatial_strides", ")", "==", "num_stages", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "\n", "self", ".", "se_style", "=", "se_style", "\n", "assert", "self", ".", "se_style", "in", "[", "'all'", ",", "'half'", "]", "\n", "self", ".", "se_ratio", "=", "se_ratio", "\n", "assert", "(", "self", ".", "se_ratio", "is", "None", ")", "or", "(", "self", ".", "se_ratio", ">", "0", ")", "\n", "self", ".", "use_swish", "=", "use_swish", "\n", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "\n", "self", ".", "block", "=", "BlockX3D", "\n", "self", ".", "stage_blocks", "=", "self", ".", "stage_blocks", "[", ":", "num_stages", "]", "\n", "self", ".", "layer_inplanes", "=", "self", ".", "base_channels", "\n", "self", ".", "_make_stem_layer", "(", ")", "\n", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "spatial_stride", "=", "spatial_strides", "[", "i", "]", "\n", "inplanes", "=", "self", ".", "base_channels", "*", "2", "**", "i", "\n", "planes", "=", "int", "(", "inplanes", "*", "self", ".", "gamma_b", ")", "\n", "\n", "res_layer", "=", "self", ".", "make_res_layer", "(", "\n", "self", ".", "block", ",", "\n", "self", ".", "layer_inplanes", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "spatial_stride", "=", "spatial_stride", ",", "\n", "se_style", "=", "self", ".", "se_style", ",", "\n", "se_ratio", "=", "self", ".", "se_ratio", ",", "\n", "use_swish", "=", "self", ".", "use_swish", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "layer_inplanes", "=", "inplanes", "\n", "layer_name", "=", "f'layer{i + 1}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "feat_dim", "=", "self", ".", "base_channels", "*", "2", "**", "(", "len", "(", "self", ".", "stage_blocks", ")", "-", "1", ")", "\n", "self", ".", "conv5", "=", "ConvModule", "(", "\n", "self", ".", "feat_dim", ",", "\n", "int", "(", "self", ".", "feat_dim", "*", "self", ".", "gamma_b", ")", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "feat_dim", "=", "int", "(", "self", ".", "feat_dim", "*", "self", ".", "gamma_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.X3D._round_width": [[299, 312], ["max", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_round_width", "(", "width", ",", "multiplier", ",", "min_depth", "=", "8", ",", "divisor", "=", "8", ")", ":", "\n", "        ", "\"\"\"Round width of filters based on width multiplier.\"\"\"", "\n", "if", "not", "multiplier", ":", "\n", "            ", "return", "width", "\n", "\n", "", "width", "*=", "multiplier", "\n", "min_depth", "=", "min_depth", "or", "divisor", "\n", "new_filters", "=", "max", "(", "min_depth", ",", "\n", "int", "(", "width", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "if", "new_filters", "<", "0.9", "*", "width", ":", "\n", "            ", "new_filters", "+=", "divisor", "\n", "", "return", "int", "(", "new_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.X3D._round_repeats": [[313, 319], ["int", "math.ceil"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_round_repeats", "(", "repeats", ",", "multiplier", ")", ":", "\n", "        ", "\"\"\"Round number of layers based on depth multiplier.\"\"\"", "\n", "if", "not", "multiplier", ":", "\n", "            ", "return", "repeats", "\n", "", "return", "int", "(", "math", ".", "ceil", "(", "multiplier", "*", "repeats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.X3D.make_res_layer": [[322, 415], ["layers.append", "range", "torch.Sequential", "mmcv.cnn.ConvModule", "block", "layers.append", "block", "range"], "methods", ["None"], ["", "def", "make_res_layer", "(", "self", ",", "\n", "block", ",", "\n", "layer_inplanes", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "spatial_stride", "=", "1", ",", "\n", "se_style", "=", "'half'", ",", "\n", "se_ratio", "=", "None", ",", "\n", "use_swish", "=", "True", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Build residual layer for ResNet3D.\n\n        Args:\n            block (nn.Module): Residual module to be built.\n            layer_inplanes (int): Number of channels for the input feature\n                of the res layer.\n            inplanes (int): Number of channels for the input feature in each\n                block, which equals to base_channels * gamma_w.\n            planes (int): Number of channels for the output feature in each\n                block, which equals to base_channel * gamma_w * gamma_b.\n            blocks (int): Number of residual blocks.\n            spatial_stride (int): Spatial strides in residual and conv layers.\n                Default: 1.\n            se_style (str): The style of inserting SE modules into BlockX3D,\n                'half' denotes insert into half of the blocks, while 'all'\n                denotes insert into all blocks. Default: 'half'.\n            se_ratio (float | None): The reduction ratio of squeeze and\n                excitation unit. If set as None, it means not using SE unit.\n                Default: None.\n            use_swish (bool): Whether to use swish as the activation function\n                before and after the 3x3x3 conv. Default: True.\n            conv_cfg (dict | None): Config for norm layers. Default: None.\n            norm_cfg (dict | None): Config for norm layers. Default: None.\n            act_cfg (dict | None): Config for activate layers. Default: None.\n\n        Returns:\n            nn.Module: A residual layer for the given config.\n        \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "spatial_stride", "!=", "1", "or", "layer_inplanes", "!=", "inplanes", ":", "\n", "            ", "downsample", "=", "ConvModule", "(", "\n", "layer_inplanes", ",", "\n", "inplanes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "(", "1", ",", "spatial_stride", ",", "spatial_stride", ")", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "", "use_se", "=", "[", "False", "]", "*", "blocks", "\n", "if", "self", ".", "se_style", "==", "'all'", ":", "\n", "            ", "use_se", "=", "[", "True", "]", "*", "blocks", "\n", "", "elif", "self", ".", "se_style", "==", "'half'", ":", "\n", "            ", "use_se", "=", "[", "i", "%", "2", "==", "0", "for", "i", "in", "range", "(", "blocks", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "layer_inplanes", ",", "\n", "planes", ",", "\n", "inplanes", ",", "\n", "spatial_stride", "=", "spatial_stride", ",", "\n", "downsample", "=", "downsample", ",", "\n", "se_ratio", "=", "se_ratio", "if", "use_se", "[", "0", "]", "else", "None", ",", "\n", "use_swish", "=", "use_swish", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "**", "kwargs", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "inplanes", ",", "\n", "spatial_stride", "=", "1", ",", "\n", "se_ratio", "=", "se_ratio", "if", "use_se", "[", "i", "]", "else", "None", ",", "\n", "use_swish", "=", "use_swish", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "**", "kwargs", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.X3D._make_stem_layer": [[416, 440], ["mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["None"], ["", "def", "_make_stem_layer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Construct the stem layers consists of a conv+norm+act module and a\n        pooling layer.\"\"\"", "\n", "self", ".", "conv1_s", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "base_channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ")", "\n", "self", ".", "conv1_t", "=", "ConvModule", "(", "\n", "self", ".", "base_channels", ",", "\n", "self", ".", "base_channels", ",", "\n", "kernel_size", "=", "(", "5", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "2", ",", "0", ",", "0", ")", ",", "\n", "groups", "=", "self", ".", "base_channels", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.X3D._freeze_stages": [[441, 457], ["range", "x3d.X3D.conv1_s.eval", "x3d.X3D.conv1_t.eval", "x3d.X3D.conv1_s.parameters", "x3d.X3D.conv1_t.parameters", "getattr", "getattr.eval", "getattr.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "\"\"\"Prevent all the parameters from being optimized before\n        ``self.frozen_stages``.\"\"\"", "\n", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "self", ".", "conv1_s", ".", "eval", "(", ")", "\n", "self", ".", "conv1_t", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "conv1_s", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "conv1_t", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "m", "=", "getattr", "(", "self", ",", "f'layer{i}'", ")", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.X3D.init_weights": [[458, 477], ["x3d.X3D.modules", "isinstance", "isinstance", "x3d.X3D.modules", "utils.get_root_logger", "utils.get_root_logger.info", "utils.cache_checkpoint", "mmcv.runner.load_checkpoint", "mmcv.cnn.kaiming_init", "isinstance", "isinstance", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.get_root_logger", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.cache_checkpoint"], ["", "", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initiate the parameters either from existing checkpoint or from\n        scratch.\"\"\"", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n", "", "", "if", "self", ".", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "BlockX3D", ")", ":", "\n", "                    ", "constant_init", "(", "m", ".", "conv3", ".", "bn", ",", "0", ")", "\n", "\n", "", "", "", "if", "isinstance", "(", "self", ".", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "logger", ".", "info", "(", "f'load model from: {self.pretrained}'", ")", "\n", "self", ".", "pretrained", "=", "cache_checkpoint", "(", "self", ".", "pretrained", ")", "\n", "load_checkpoint", "(", "self", ",", "self", ".", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.X3D.forward": [[478, 495], ["x3d.X3D.conv1_s", "x3d.X3D.conv1_t", "x3d.X3D.conv5", "getattr", "getattr."], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\n\n        Args:\n            x (torch.Tensor): The input data.\n\n        Returns:\n            torch.Tensor: The feature of the input\n            samples extracted by the backbone.\n        \"\"\"", "\n", "x", "=", "self", ".", "conv1_s", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1_t", "(", "x", ")", "\n", "for", "layer_name", "in", "self", ".", "res_layers", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "res_layer", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.x3d.X3D.train": [[496, 504], ["super().train", "x3d.X3D._freeze_stages", "x3d.X3D.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.potion.PoTion.train", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._freeze_stages"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Set the optimization status when training.\"\"\"", "\n", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.BasicBlock3d.__init__": [[29, 74], ["dict", "dict", "dict", "torch.Module.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.build_activation_layer"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "downsample", "=", "None", ",", "\n", "inflate", "=", "True", ",", "\n", "inflate_style", "=", "'3x3x3'", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv3d'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN3d'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "inflate_style", "==", "'3x3x3'", "\n", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "inflate", "=", "inflate", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "3", "if", "self", ".", "inflate", "else", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "self", ".", "stride", "[", "0", "]", ",", "self", ".", "stride", "[", "1", "]", ",", "self", ".", "stride", "[", "1", "]", ")", ",", "\n", "padding", "=", "1", "if", "self", ".", "inflate", "else", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "self", ".", "conv2", "=", "ConvModule", "(", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "3", "if", "self", ".", "inflate", "else", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "if", "self", ".", "inflate", "else", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "relu", "=", "build_activation_layer", "(", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.BasicBlock3d.forward": [[75, 95], ["resnet3d.BasicBlock3d.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\"\"\"", "\n", "\n", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "\"\"\"Forward wrapper for utilizing checkpoint.\"\"\"", "\n", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "identity", "\n", "return", "out", "\n", "\n", "", "out", "=", "_inner_forward", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.Bottleneck3d.__init__": [[114, 176], ["dict", "dict", "dict", "torch.Module.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.build_activation_layer"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "downsample", "=", "None", ",", "\n", "inflate", "=", "True", ",", "\n", "inflate_style", "=", "'3x1x1'", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv3d'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN3d'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "inflate_style", "in", "[", "'3x1x1'", ",", "'3x3x3'", "]", "\n", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "inflate", "=", "inflate", "\n", "self", ".", "inflate_style", "=", "inflate_style", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "\n", "mode", "=", "'no_inflate'", "if", "not", "self", ".", "inflate", "else", "self", ".", "inflate_style", "\n", "conv1_kernel_size", "=", "{", "'no_inflate'", ":", "1", ",", "'3x1x1'", ":", "(", "3", ",", "1", ",", "1", ")", ",", "'3x3x3'", ":", "1", "}", "\n", "conv1_padding", "=", "{", "'no_inflate'", ":", "0", ",", "'3x1x1'", ":", "(", "1", ",", "0", ",", "0", ")", ",", "'3x3x3'", ":", "0", "}", "\n", "conv2_kernel_size", "=", "{", "'no_inflate'", ":", "(", "1", ",", "3", ",", "3", ")", ",", "'3x1x1'", ":", "(", "1", ",", "3", ",", "3", ")", ",", "'3x3x3'", ":", "3", "}", "\n", "conv2_padding", "=", "{", "'no_inflate'", ":", "(", "0", ",", "1", ",", "1", ")", ",", "'3x1x1'", ":", "(", "0", ",", "1", ",", "1", ")", ",", "'3x3x3'", ":", "1", "}", "\n", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "conv1_kernel_size", "[", "mode", "]", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "conv1_padding", "[", "mode", "]", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "self", ".", "conv2", "=", "ConvModule", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "conv2_kernel_size", "[", "mode", "]", ",", "\n", "stride", "=", "(", "self", ".", "stride", "[", "0", "]", ",", "self", ".", "stride", "[", "1", "]", ",", "self", ".", "stride", "[", "1", "]", ")", ",", "\n", "padding", "=", "conv2_padding", "[", "mode", "]", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "self", ".", "conv3", "=", "ConvModule", "(", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "# No activation in the third ConvModule for bottleneck", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "relu", "=", "build_activation_layer", "(", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.Bottleneck3d.forward": [[177, 198], ["resnet3d.Bottleneck3d.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\"\"\"", "\n", "\n", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "\"\"\"Forward wrapper for utilizing checkpoint.\"\"\"", "\n", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "identity", "\n", "return", "out", "\n", "\n", "", "out", "=", "_inner_forward", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d.__init__": [[240, 327], ["dict", "dict", "dict", "torch.Module.__init__", "resnet3d.ResNet3d._make_stem_layer", "enumerate", "KeyError", "max", "len", "len", "torch.nn.modules.utils._ntuple", "resnet3d.ResNet3d.make_res_layer", "resnet3d.ResNet3d.add_module", "resnet3d.ResNet3d.res_layers.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._make_stem_layer", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.make_res_layer"], ["def", "__init__", "(", "self", ",", "\n", "depth", "=", "50", ",", "\n", "pretrained", "=", "None", ",", "\n", "stage_blocks", "=", "None", ",", "\n", "pretrained2d", "=", "True", ",", "\n", "in_channels", "=", "3", ",", "\n", "num_stages", "=", "4", ",", "\n", "base_channels", "=", "64", ",", "\n", "out_indices", "=", "(", "3", ",", ")", ",", "\n", "spatial_strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "temporal_strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "conv1_kernel", "=", "(", "3", ",", "7", ",", "7", ")", ",", "\n", "conv1_stride", "=", "(", "1", ",", "2", ")", ",", "\n", "pool1_stride", "=", "(", "1", ",", "2", ")", ",", "\n", "advanced", "=", "False", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "inflate", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "inflate_style", "=", "'3x1x1'", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv3d'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN3d'", ",", "requires_grad", "=", "True", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ",", "inplace", "=", "True", ")", ",", "\n", "norm_eval", "=", "False", ",", "\n", "zero_init_residual", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "f'invalid depth {depth} for resnet'", ")", "\n", "", "self", ".", "depth", "=", "depth", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "pretrained2d", "=", "pretrained2d", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "assert", "1", "<=", "num_stages", "<=", "4", "\n", "self", ".", "stage_blocks", "=", "stage_blocks", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "assert", "max", "(", "out_indices", ")", "<", "num_stages", "\n", "self", ".", "spatial_strides", "=", "spatial_strides", "\n", "self", ".", "temporal_strides", "=", "temporal_strides", "\n", "assert", "len", "(", "spatial_strides", ")", "==", "len", "(", "temporal_strides", ")", "==", "num_stages", "\n", "if", "self", ".", "stage_blocks", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "self", ".", "stage_blocks", ")", "==", "num_stages", "\n", "\n", "", "self", ".", "conv1_kernel", "=", "conv1_kernel", "\n", "self", ".", "conv1_stride", "=", "conv1_stride", "\n", "self", ".", "pool1_stride", "=", "pool1_stride", "\n", "self", ".", "advanced", "=", "advanced", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "stage_inflations", "=", "_ntuple", "(", "num_stages", ")", "(", "inflate", ")", "\n", "self", ".", "inflate_style", "=", "inflate_style", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "\n", "self", ".", "block", ",", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "\n", "if", "self", ".", "stage_blocks", "is", "None", ":", "\n", "            ", "self", ".", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "\n", "", "self", ".", "inplanes", "=", "self", ".", "base_channels", "\n", "\n", "self", ".", "_make_stem_layer", "(", ")", "\n", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "spatial_stride", "=", "spatial_strides", "[", "i", "]", "\n", "temporal_stride", "=", "temporal_strides", "[", "i", "]", "\n", "planes", "=", "self", ".", "base_channels", "*", "2", "**", "i", "\n", "res_layer", "=", "self", ".", "make_res_layer", "(", "\n", "self", ".", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "(", "temporal_stride", ",", "spatial_stride", ")", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "advanced", "=", "self", ".", "advanced", ",", "\n", "inflate", "=", "self", ".", "stage_inflations", "[", "i", "]", ",", "\n", "inflate_style", "=", "self", ".", "inflate_style", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "layer_name", "=", "f'layer{i + 1}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "feat_dim", "=", "self", ".", "block", ".", "expansion", "*", "self", ".", "base_channels", "*", "2", "**", "(", "len", "(", "self", ".", "stage_blocks", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d.make_res_layer": [[328, 414], ["layers.append", "range", "torch.Sequential", "len", "block", "layers.append", "isinstance", "mmcv.cnn.ConvModule", "torch.AvgPool3d", "torch.Sequential", "mmcv.cnn.ConvModule", "block"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "make_res_layer", "(", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "inflate", "=", "1", ",", "\n", "inflate_style", "=", "'3x1x1'", ",", "\n", "advanced", "=", "False", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ",", "\n", "conv_cfg", "=", "None", ")", ":", "\n", "        ", "\"\"\"Build residual layer for ResNet3D.\n\n        Args:\n            block (nn.Module): Residual module to be built.\n            inplanes (int): Number of channels for the input feature in each block.\n            planes (int): Number of channels for the output feature in each block.\n            blocks (int): Number of residual blocks.\n            stride (tuple[int]): Stride (temporal, spatial) in residual and conv layers. Default: (1, 1).\n            inflate (int | tuple[int]): Determine whether to inflate for each block. Default: 1.\n            inflate_style (str): '3x1x1' or '3x3x3'. which determines the kernel sizes and padding strides\n                for conv1 and conv2 in each block. Default: '3x1x1'.\n            conv_cfg (dict | None): Config for norm layers. Default: None.\n            norm_cfg (dict | None): Config for norm layers. Default: None.\n            act_cfg (dict | None): Config for activate layers. Default: None.\n\n        Returns:\n            nn.Module: A residual layer for the given config.\n        \"\"\"", "\n", "inflate", "=", "inflate", "if", "not", "isinstance", "(", "inflate", ",", "int", ")", "else", "(", "inflate", ",", ")", "*", "blocks", "\n", "assert", "len", "(", "inflate", ")", "==", "blocks", "\n", "downsample", "=", "None", "\n", "if", "stride", "[", "1", "]", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "advanced", ":", "\n", "                ", "conv", "=", "ConvModule", "(", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "pool", "=", "nn", ".", "AvgPool3d", "(", "\n", "kernel_size", "=", "(", "stride", "[", "0", "]", ",", "stride", "[", "1", "]", ",", "stride", "[", "1", "]", ")", ",", "\n", "stride", "=", "(", "stride", "[", "0", "]", ",", "stride", "[", "1", "]", ",", "stride", "[", "1", "]", ")", ",", "\n", "ceil_mode", "=", "True", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "conv", ",", "pool", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "ConvModule", "(", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "(", "stride", "[", "0", "]", ",", "stride", "[", "1", "]", ",", "stride", "[", "1", "]", ")", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "downsample", "=", "downsample", ",", "\n", "inflate", "=", "(", "inflate", "[", "0", "]", "==", "1", ")", ",", "\n", "inflate_style", "=", "inflate_style", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "(", "1", ",", "1", ")", ",", "\n", "inflate", "=", "(", "inflate", "[", "i", "]", "==", "1", ")", ",", "\n", "inflate_style", "=", "inflate_style", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d._inflate_conv_params": [[415, 438], ["conv3d.weight.data.copy_", "inflated_param_names.append", "conv2d_weight.data.unsqueeze().expand_as", "getattr", "conv3d.bias.data.copy_", "inflated_param_names.append", "conv2d_weight.data.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_inflate_conv_params", "(", "conv3d", ",", "state_dict_2d", ",", "module_name_2d", ",", "inflated_param_names", ")", ":", "\n", "        ", "\"\"\"Inflate a conv module from 2d to 3d.\n\n        Args:\n            conv3d (nn.Module): The destination conv3d module.\n            state_dict_2d (OrderedDict): The state dict of pretrained 2d model.\n            module_name_2d (str): The name of corresponding conv module in the 2d model.\n            inflated_param_names (list[str]): List of parameters that have been inflated.\n        \"\"\"", "\n", "weight_2d_name", "=", "module_name_2d", "+", "'.weight'", "\n", "\n", "conv2d_weight", "=", "state_dict_2d", "[", "weight_2d_name", "]", "\n", "kernel_t", "=", "conv3d", ".", "weight", ".", "data", ".", "shape", "[", "2", "]", "\n", "\n", "new_weight", "=", "conv2d_weight", ".", "data", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "conv3d", ".", "weight", ")", "/", "kernel_t", "\n", "conv3d", ".", "weight", ".", "data", ".", "copy_", "(", "new_weight", ")", "\n", "inflated_param_names", ".", "append", "(", "weight_2d_name", ")", "\n", "\n", "if", "getattr", "(", "conv3d", ",", "'bias'", ")", "is", "not", "None", ":", "\n", "            ", "bias_2d_name", "=", "module_name_2d", "+", "'.bias'", "\n", "conv3d", ".", "bias", ".", "data", ".", "copy_", "(", "state_dict_2d", "[", "bias_2d_name", "]", ")", "\n", "inflated_param_names", ".", "append", "(", "bias_2d_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d._inflate_bn_params": [[439, 467], ["bn3d.named_parameters", "bn3d.named_buffers", "param.data.copy_", "inflated_param_names.append", "warnings.warn", "param.data.copy_", "inflated_param_names.append"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_inflate_bn_params", "(", "bn3d", ",", "state_dict_2d", ",", "module_name_2d", ",", "\n", "inflated_param_names", ")", ":", "\n", "        ", "\"\"\"Inflate a norm module from 2d to 3d.\n\n        Args:\n            bn3d (nn.Module): The destination bn3d module.\n            state_dict_2d (OrderedDict): The state dict of pretrained 2d model.\n            module_name_2d (str): The name of corresponding bn module in the 2d model.\n            inflated_param_names (list[str]): List of parameters that have been inflated.\n        \"\"\"", "\n", "for", "param_name", ",", "param", "in", "bn3d", ".", "named_parameters", "(", ")", ":", "\n", "            ", "param_2d_name", "=", "f'{module_name_2d}.{param_name}'", "\n", "param_2d", "=", "state_dict_2d", "[", "param_2d_name", "]", "\n", "if", "param", ".", "data", ".", "shape", "!=", "param_2d", ".", "shape", ":", "\n", "                ", "warnings", ".", "warn", "(", "f'The parameter of {module_name_2d} is not loaded due to incompatible shapes. '", ")", "\n", "return", "\n", "\n", "", "param", ".", "data", ".", "copy_", "(", "param_2d", ")", "\n", "inflated_param_names", ".", "append", "(", "param_2d_name", ")", "\n", "\n", "", "for", "param_name", ",", "param", "in", "bn3d", ".", "named_buffers", "(", ")", ":", "\n", "            ", "param_2d_name", "=", "f'{module_name_2d}.{param_name}'", "\n", "# some buffers like num_batches_tracked may not exist in old checkpoints", "\n", "if", "param_2d_name", "in", "state_dict_2d", ":", "\n", "                ", "param_2d", "=", "state_dict_2d", "[", "param_2d_name", "]", "\n", "param", ".", "data", ".", "copy_", "(", "param_2d", ")", "\n", "inflated_param_names", ".", "append", "(", "param_2d_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d._inflate_weights": [[468, 522], ["mmcv.runner._load_checkpoint", "resnet3d.ResNet3d.named_modules", "isinstance", "set", "set", "logger.info", "mmcv.runner._load_checkpoint.keys", "name.replace", "logger.warning", "logger.warning", "resnet3d.ResNet3d._inflate_bn_params", "logger.warning", "resnet3d.ResNet3d._inflate_conv_params"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d._inflate_bn_params", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowfast.ResNet3dPathway._inflate_conv_params"], ["", "", "", "@", "staticmethod", "\n", "def", "_inflate_weights", "(", "self", ",", "logger", ")", ":", "\n", "        ", "\"\"\"Inflate the resnet2d parameters to resnet3d.\n\n        The differences between resnet3d and resnet2d mainly lie in an extra\n        axis of conv kernel. To utilize the pretrained parameters in 2d model,\n        the weight of conv2d models should be inflated to fit in the shapes of\n        the 3d counterpart.\n\n        Args:\n            logger (logging.Logger): The logger used to print\n                debugging information.\n        \"\"\"", "\n", "\n", "state_dict_r2d", "=", "_load_checkpoint", "(", "self", ".", "pretrained", ")", "\n", "if", "'state_dict'", "in", "state_dict_r2d", ":", "\n", "            ", "state_dict_r2d", "=", "state_dict_r2d", "[", "'state_dict'", "]", "\n", "\n", "", "inflated_param_names", "=", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "ConvModule", ")", ":", "\n", "# we use a ConvModule to wrap conv+bn+relu layers, thus the name mapping is needed", "\n", "                ", "if", "'downsample'", "in", "name", ":", "\n", "# layer{X}.{Y}.downsample.conv->layer{X}.{Y}.downsample.0", "\n", "                    ", "original_conv_name", "=", "name", "+", "'.0'", "\n", "# layer{X}.{Y}.downsample.bn->layer{X}.{Y}.downsample.1", "\n", "original_bn_name", "=", "name", "+", "'.1'", "\n", "", "else", ":", "\n", "# layer{X}.{Y}.conv{n}.conv->layer{X}.{Y}.conv{n}", "\n", "                    ", "original_conv_name", "=", "name", "\n", "# layer{X}.{Y}.conv{n}.bn->layer{X}.{Y}.bn{n}", "\n", "original_bn_name", "=", "name", ".", "replace", "(", "'conv'", ",", "'bn'", ")", "\n", "", "if", "original_conv_name", "+", "'.weight'", "not", "in", "state_dict_r2d", ":", "\n", "                    ", "logger", ".", "warning", "(", "f'Module not exist in the state_dict_r2d: {original_conv_name}'", ")", "\n", "", "else", ":", "\n", "                    ", "shape_2d", "=", "state_dict_r2d", "[", "original_conv_name", "+", "'.weight'", "]", ".", "shape", "\n", "shape_3d", "=", "module", ".", "conv", ".", "weight", ".", "data", ".", "shape", "\n", "if", "shape_2d", "!=", "shape_3d", "[", ":", "2", "]", "+", "shape_3d", "[", "3", ":", "]", ":", "\n", "                        ", "logger", ".", "warning", "(", "f'Weight shape mismatch for: {original_conv_name}: '", "\n", "f'3d weight shape: {shape_3d}; 2d weight shape: {shape_2d}.'", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "_inflate_conv_params", "(", "\n", "module", ".", "conv", ",", "state_dict_r2d", ",", "original_conv_name", ",", "inflated_param_names", "\n", ")", "\n", "\n", "", "", "if", "original_bn_name", "+", "'.weight'", "not", "in", "state_dict_r2d", ":", "\n", "                    ", "logger", ".", "warning", "(", "f'Module not exist in the state_dict_r2d: {original_bn_name}'", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_inflate_bn_params", "(", "module", ".", "bn", ",", "state_dict_r2d", ",", "original_bn_name", ",", "inflated_param_names", ")", "\n", "\n", "# check if any parameters in the 2d checkpoint are not loaded", "\n", "", "", "", "remaining_names", "=", "set", "(", "state_dict_r2d", ".", "keys", "(", ")", ")", "-", "set", "(", "inflated_param_names", ")", "\n", "if", "remaining_names", ":", "\n", "            ", "logger", ".", "info", "(", "f'These parameters in the 2d checkpoint are not loaded: {remaining_names}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d.inflate_weights": [[523, 525], ["resnet3d.ResNet3d._inflate_weights"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d._inflate_weights"], ["", "", "def", "inflate_weights", "(", "self", ",", "logger", ")", ":", "\n", "        ", "self", ".", "_inflate_weights", "(", "self", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d._make_stem_layer": [[526, 544], ["mmcv.cnn.ConvModule", "torch.MaxPool3d", "tuple", "torch.nn.modules.utils._triple"], "methods", ["None"], ["", "def", "_make_stem_layer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Construct the stem layers consists of a conv+norm+act module and a\n        pooling layer.\"\"\"", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "base_channels", ",", "\n", "kernel_size", "=", "self", ".", "conv1_kernel", ",", "\n", "stride", "=", "(", "self", ".", "conv1_stride", "[", "0", "]", ",", "self", ".", "conv1_stride", "[", "1", "]", ",", "self", ".", "conv1_stride", "[", "1", "]", ")", ",", "\n", "padding", "=", "tuple", "(", "[", "(", "k", "-", "1", ")", "//", "2", "for", "k", "in", "_triple", "(", "self", ".", "conv1_kernel", ")", "]", ")", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "self", ".", "pool1_stride", "[", "0", "]", ",", "self", ".", "pool1_stride", "[", "1", "]", ",", "self", ".", "pool1_stride", "[", "1", "]", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d._freeze_stages": [[545, 558], ["range", "resnet3d.ResNet3d.conv1.eval", "resnet3d.ResNet3d.conv1.parameters", "getattr", "getattr.eval", "getattr.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "\"\"\"Prevent all the parameters from being optimized before\n        'self.frozen_stages'.\"\"\"", "\n", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "self", ".", "conv1", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "conv1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "m", "=", "getattr", "(", "self", ",", "f'layer{i}'", ")", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d._init_weights": [[559, 592], ["resnet3d.ResNet3d.modules", "isinstance", "isinstance", "resnet3d.ResNet3d.modules", "utils.get_root_logger", "utils.get_root_logger.info", "mmcv.cnn.kaiming_init", "isinstance", "isinstance", "resnet3d.ResNet3d.inflate_weights", "utils.cache_checkpoint", "mmcv.runner.load_checkpoint", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.get_root_logger", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowfast.ResNet3dPathway.inflate_weights", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.cache_checkpoint"], ["", "", "", "@", "staticmethod", "\n", "def", "_init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initiate the parameters either from existing checkpoint or from\n        scratch.\n\n        Args:\n            pretrained (str | None): The path of the pretrained weight. Will override the original 'pretrained' if set.\n                The arg is added to be compatible with mmdet. Default: None.\n        \"\"\"", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n", "", "", "if", "self", ".", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck3d", ")", ":", "\n", "                    ", "constant_init", "(", "m", ".", "conv3", ".", "bn", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock3d", ")", ":", "\n", "                    ", "constant_init", "(", "m", ".", "conv2", ".", "bn", ",", "0", ")", "\n", "\n", "", "", "", "if", "pretrained", ":", "\n", "            ", "self", ".", "pretrained", "=", "pretrained", "\n", "", "if", "isinstance", "(", "self", ".", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "logger", ".", "info", "(", "f'load model from: {self.pretrained}'", ")", "\n", "\n", "if", "self", ".", "pretrained2d", ":", "\n", "                ", "self", ".", "inflate_weights", "(", "logger", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "pretrained", "=", "cache_checkpoint", "(", "self", ".", "pretrained", ")", "\n", "load_checkpoint", "(", "self", ",", "self", ".", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d.init_weights": [[593, 595], ["resnet3d.ResNet3d._init_weights"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d._init_weights"], ["", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "self", ".", "_init_weights", "(", "self", ",", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d.forward": [[596, 618], ["resnet3d.ResNet3d.conv1", "resnet3d.ResNet3d.maxpool", "enumerate", "tuple", "getattr", "getattr.", "len", "outs.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\n\n        Args:\n            x (torch.Tensor): The input data.\n\n        Returns:\n            torch.Tensor: The feature of the input\n            samples extracted by the backbone.\n        \"\"\"", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "res_layers", ")", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "res_layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "if", "len", "(", "outs", ")", "==", "1", ":", "\n", "            ", "return", "outs", "[", "0", "]", "\n", "\n", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d.train": [[619, 627], ["super().train", "resnet3d.ResNet3d._freeze_stages", "resnet3d.ResNet3d.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.potion.PoTion.train", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._freeze_stages"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Set the optimization status when training.\"\"\"", "\n", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowfast.ResNet3dPathway.__init__": [[28, 73], ["resnet3d.ResNet3d.__init__", "range", "mmcv.cnn.ConvModule", "len", "setattr", "resnet3d_slowfast.ResNet3dPathway.lateral_connections.append", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "lateral", "=", "False", ",", "\n", "speed_ratio", "=", "8", ",", "\n", "channel_ratio", "=", "8", ",", "\n", "fusion_kernel", "=", "7", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "lateral", "=", "lateral", "\n", "self", ".", "speed_ratio", "=", "speed_ratio", "\n", "self", ".", "channel_ratio", "=", "channel_ratio", "\n", "self", ".", "fusion_kernel", "=", "fusion_kernel", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "base_channels", "\n", "if", "self", ".", "lateral", ":", "\n", "            ", "self", ".", "conv1_lateral", "=", "ConvModule", "(", "\n", "self", ".", "inplanes", "//", "self", ".", "channel_ratio", ",", "\n", "self", ".", "inplanes", "*", "2", "//", "self", ".", "channel_ratio", ",", "\n", "kernel_size", "=", "(", "fusion_kernel", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "self", ".", "speed_ratio", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "fusion_kernel", "-", "1", ")", "//", "2", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "", "self", ".", "lateral_connections", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "stage_blocks", ")", ")", ":", "\n", "            ", "planes", "=", "self", ".", "base_channels", "*", "2", "**", "i", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "\n", "if", "lateral", "and", "i", "!=", "self", ".", "num_stages", "-", "1", ":", "\n", "# no lateral connection needed in final stage", "\n", "                ", "lateral_name", "=", "f'layer{(i + 1)}_lateral'", "\n", "setattr", "(", "\n", "self", ",", "lateral_name", ",", "\n", "ConvModule", "(", "\n", "self", ".", "inplanes", "//", "self", ".", "channel_ratio", ",", "\n", "self", ".", "inplanes", "*", "2", "//", "self", ".", "channel_ratio", ",", "\n", "kernel_size", "=", "(", "fusion_kernel", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "self", ".", "speed_ratio", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "(", "fusion_kernel", "-", "1", ")", "//", "2", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ")", ")", "\n", "self", ".", "lateral_connections", ".", "append", "(", "lateral_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowfast.ResNet3dPathway.make_res_layer": [[74, 95], ["super().make_res_layer"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.make_res_layer"], ["", "", "", "def", "make_res_layer", "(", "self", ",", "\n", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Build residual layer for Slowfast. Basically, it's the same as ResNet3d make_res_layer.\n        However, the inplanes used will be: self.lateral * inplanes * (2 // self.channel_ratio) + inplanes.\n\n        Args:\n            block (nn.Module): Residual module to be built.\n            inplanes (int): Number of channels for the input feature in each block.\n            planes (int): Number of channels for the output feature in each block.\n            blocks (int): Number of residual blocks.\n\n        Returns:\n            nn.Module: A residual layer for the given config.\n        \"\"\"", "\n", "lateral_inplanes", "=", "inplanes", "*", "2", "//", "self", ".", "channel_ratio", "if", "self", ".", "lateral", "else", "0", "\n", "return", "super", "(", ")", ".", "make_res_layer", "(", "block", ",", "inplanes", "+", "lateral_inplanes", ",", "planes", ",", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowfast.ResNet3dPathway.inflate_weights": [[96, 142], ["mmcv.runner._load_checkpoint", "resnet3d_slowfast.ResNet3dPathway.named_modules", "isinstance", "set", "set", "logger.info", "mmcv.runner._load_checkpoint.keys", "name.replace", "logger.warning", "resnet3d_slowfast.ResNet3dPathway._inflate_conv_params", "logger.warning", "resnet3d_slowfast.ResNet3dPathway._inflate_bn_params"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowfast.ResNet3dPathway._inflate_conv_params", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d.ResNet3d._inflate_bn_params"], ["", "def", "inflate_weights", "(", "self", ",", "logger", ")", ":", "\n", "        ", "\"\"\"Inflate the resnet2d parameters to resnet3d pathway.\n\n        The differences between resnet3d and resnet2d mainly lie in an extra\n        axis of conv kernel. To utilize the pretrained parameters in 2d model,\n        the weight of conv2d models should be inflated to fit in the shapes of\n        the 3d counterpart. For pathway the 'lateral_connection' part should\n        not be inflated from 2d weights.\n\n        Args:\n            logger (logging.Logger): The logger used to print debugging information.\n        \"\"\"", "\n", "\n", "state_dict_r2d", "=", "_load_checkpoint", "(", "self", ".", "pretrained", ")", "\n", "if", "'state_dict'", "in", "state_dict_r2d", ":", "\n", "            ", "state_dict_r2d", "=", "state_dict_r2d", "[", "'state_dict'", "]", "\n", "\n", "", "inflated_param_names", "=", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'lateral'", "in", "name", ":", "\n", "                ", "continue", "\n", "", "if", "isinstance", "(", "module", ",", "ConvModule", ")", ":", "\n", "# we use a ConvModule to wrap conv+bn+relu layers, thus the name mapping is needed", "\n", "                ", "if", "'downsample'", "in", "name", ":", "\n", "# layer{X}.{Y}.downsample.conv->layer{X}.{Y}.downsample.0", "\n", "                    ", "original_conv_name", "=", "name", "+", "'.0'", "\n", "# layer{X}.{Y}.downsample.bn->layer{X}.{Y}.downsample.1", "\n", "original_bn_name", "=", "name", "+", "'.1'", "\n", "", "else", ":", "\n", "# layer{X}.{Y}.conv{n}.conv->layer{X}.{Y}.conv{n}", "\n", "                    ", "original_conv_name", "=", "name", "\n", "# layer{X}.{Y}.conv{n}.bn->layer{X}.{Y}.bn{n}", "\n", "original_bn_name", "=", "name", ".", "replace", "(", "'conv'", ",", "'bn'", ")", "\n", "", "if", "original_conv_name", "+", "'.weight'", "not", "in", "state_dict_r2d", ":", "\n", "                    ", "logger", ".", "warning", "(", "f'Module not exist in the state_dict_r2d: {original_conv_name}'", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_inflate_conv_params", "(", "module", ".", "conv", ",", "state_dict_r2d", ",", "original_conv_name", ",", "inflated_param_names", ")", "\n", "", "if", "original_bn_name", "+", "'.weight'", "not", "in", "state_dict_r2d", ":", "\n", "                    ", "logger", ".", "warning", "(", "f'Module not exist in the state_dict_r2d: {original_bn_name}'", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_inflate_bn_params", "(", "module", ".", "bn", ",", "state_dict_r2d", ",", "original_bn_name", ",", "inflated_param_names", ")", "\n", "\n", "# check if any parameters in the 2d checkpoint are not loaded", "\n", "", "", "", "remaining_names", "=", "set", "(", "state_dict_r2d", ".", "keys", "(", ")", ")", "-", "set", "(", "inflated_param_names", ")", "\n", "if", "remaining_names", ":", "\n", "            ", "logger", ".", "info", "(", "f'These parameters in the 2d checkpoint are not loaded: {remaining_names}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowfast.ResNet3dPathway._inflate_conv_params": [[143, 184], ["conv3d.weight.data.copy_", "inflated_param_names.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.data.unsqueeze().expand_as", "torch.cat.data.unsqueeze().expand_as", "getattr", "conv3d.bias.data.copy_", "inflated_param_names.append", "warnings.warn", "torch.zeros().type_as().to", "torch.zeros().type_as().to", "torch.zeros().type_as().to", "torch.zeros().type_as().to", "torch.cat.data.unsqueeze", "torch.cat.data.unsqueeze", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "def", "_inflate_conv_params", "(", "self", ",", "conv3d", ",", "state_dict_2d", ",", "module_name_2d", ",", "inflated_param_names", ")", ":", "\n", "        ", "\"\"\"Inflate a conv module from 2d to 3d.\n\n        The differences of conv modules betweene 2d and 3d in Pathway\n        mainly lie in the inplanes due to lateral connections. To fit the\n        shapes of the lateral connection counterpart, it will expand\n        parameters by concatting conv2d parameters and extra zero paddings.\n\n        Args:\n            conv3d (nn.Module): The destination conv3d module.\n            state_dict_2d (OrderedDict): The state dict of pretrained 2d model.\n            module_name_2d (str): The name of corresponding conv module in the 2d model.\n            inflated_param_names (list[str]): List of parameters that have been inflated.\n        \"\"\"", "\n", "weight_2d_name", "=", "module_name_2d", "+", "'.weight'", "\n", "conv2d_weight", "=", "state_dict_2d", "[", "weight_2d_name", "]", "\n", "old_shape", "=", "conv2d_weight", ".", "shape", "\n", "new_shape", "=", "conv3d", ".", "weight", ".", "data", ".", "shape", "\n", "kernel_t", "=", "new_shape", "[", "2", "]", "\n", "\n", "if", "new_shape", "[", "1", "]", "!=", "old_shape", "[", "1", "]", ":", "\n", "            ", "if", "new_shape", "[", "1", "]", "<", "old_shape", "[", "1", "]", ":", "\n", "                ", "warnings", ".", "warn", "(", "f'The parameter of {module_name_2d} is not'", "\n", "'loaded due to incompatible shapes. '", ")", "\n", "return", "\n", "# Inplanes may be different due to lateral connections", "\n", "", "new_channels", "=", "new_shape", "[", "1", "]", "-", "old_shape", "[", "1", "]", "\n", "pad_shape", "=", "old_shape", "\n", "pad_shape", "=", "pad_shape", "[", ":", "1", "]", "+", "(", "new_channels", ",", ")", "+", "pad_shape", "[", "2", ":", "]", "\n", "# Expand parameters by concat extra channels", "\n", "conv2d_weight", "=", "torch", ".", "cat", "(", "\n", "(", "conv2d_weight", ",", "torch", ".", "zeros", "(", "pad_shape", ")", ".", "type_as", "(", "conv2d_weight", ")", ".", "to", "(", "conv2d_weight", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "new_weight", "=", "conv2d_weight", ".", "data", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "conv3d", ".", "weight", ")", "/", "kernel_t", "\n", "conv3d", ".", "weight", ".", "data", ".", "copy_", "(", "new_weight", ")", "\n", "inflated_param_names", ".", "append", "(", "weight_2d_name", ")", "\n", "\n", "if", "getattr", "(", "conv3d", ",", "'bias'", ")", "is", "not", "None", ":", "\n", "            ", "bias_2d_name", "=", "module_name_2d", "+", "'.bias'", "\n", "conv3d", ".", "bias", ".", "data", ".", "copy_", "(", "state_dict_2d", "[", "bias_2d_name", "]", ")", "\n", "inflated_param_names", ".", "append", "(", "bias_2d_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowfast.ResNet3dPathway._freeze_stages": [[185, 205], ["range", "resnet3d_slowfast.ResNet3dPathway.conv1.eval", "resnet3d_slowfast.ResNet3dPathway.conv1.parameters", "getattr", "getattr.eval", "getattr.parameters", "getattr", "getattr.eval", "getattr.parameters", "len"], "methods", ["None"], ["", "", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "\"\"\"Prevent all the parameters from being optimized before'self.frozen_stages'. \"\"\"", "\n", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "self", ".", "conv1", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "conv1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "m", "=", "getattr", "(", "self", ",", "f'layer{i}'", ")", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "if", "i", "!=", "len", "(", "self", ".", "res_layers", ")", "and", "self", ".", "lateral", ":", "\n", "# No fusion needed in the final stage", "\n", "                ", "lateral_name", "=", "self", ".", "lateral_connections", "[", "i", "-", "1", "]", "\n", "conv_lateral", "=", "getattr", "(", "self", ",", "lateral_name", ")", "\n", "conv_lateral", ".", "eval", "(", ")", "\n", "for", "param", "in", "conv_lateral", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowfast.ResNet3dPathway.init_weights": [[206, 218], ["super().init_weights", "getattr", "getattr.modules", "isinstance", "mmcv.cnn.kaiming_init"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights"], ["", "", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initiate the parameters either from existing checkpoint or from\n        scratch.\"\"\"", "\n", "if", "pretrained", ":", "\n", "            ", "self", ".", "pretrained", "=", "pretrained", "\n", "\n", "", "super", "(", ")", ".", "init_weights", "(", ")", "\n", "for", "module_name", "in", "self", ".", "lateral_connections", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "module_name", ")", "\n", "for", "m", "in", "layer", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv3d", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowfast.ResNet3dSlowFast.__init__": [[243, 270], ["dict", "dict", "torch.Module.__init__", "resnet3d_slowfast.ResNet3dPathway", "resnet3d_slowfast.ResNet3dPathway"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "pretrained", "=", "None", ",", "\n", "resample_rate", "=", "8", ",", "\n", "speed_ratio", "=", "8", ",", "\n", "channel_ratio", "=", "8", ",", "\n", "slow_pathway", "=", "dict", "(", "\n", "depth", "=", "50", ",", "\n", "lateral", "=", "True", ",", "\n", "conv1_kernel", "=", "(", "1", ",", "7", ",", "7", ")", ",", "\n", "inflate", "=", "(", "0", ",", "0", ",", "1", ",", "1", ")", ")", ",", "\n", "fast_pathway", "=", "dict", "(", "\n", "depth", "=", "50", ",", "\n", "lateral", "=", "False", ",", "\n", "base_channels", "=", "8", ",", "\n", "conv1_kernel", "=", "(", "5", ",", "7", ",", "7", ")", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "resample_rate", "=", "resample_rate", "\n", "self", ".", "speed_ratio", "=", "speed_ratio", "\n", "self", ".", "channel_ratio", "=", "channel_ratio", "\n", "\n", "if", "slow_pathway", "[", "'lateral'", "]", ":", "\n", "            ", "slow_pathway", "[", "'speed_ratio'", "]", "=", "speed_ratio", "\n", "slow_pathway", "[", "'channel_ratio'", "]", "=", "channel_ratio", "\n", "\n", "", "self", ".", "slow_path", "=", "ResNet3dPathway", "(", "**", "slow_pathway", ")", "\n", "self", ".", "fast_path", "=", "ResNet3dPathway", "(", "**", "fast_pathway", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowfast.ResNet3dSlowFast.init_weights": [[271, 290], ["isinstance", "utils.get_root_logger", "mmcv.utils.print_log", "utils.cache_checkpoint", "mmcv.runner.load_checkpoint", "resnet3d_slowfast.ResNet3dSlowFast.fast_path.init_weights", "resnet3d_slowfast.ResNet3dSlowFast.slow_path.init_weights", "TypeError"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.get_root_logger", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.cache_checkpoint", "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights", "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initiate the parameters either from existing checkpoint or from\n        scratch.\"\"\"", "\n", "if", "pretrained", ":", "\n", "            ", "self", ".", "pretrained", "=", "pretrained", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "msg", "=", "f'load model from: {self.pretrained}'", "\n", "print_log", "(", "msg", ",", "logger", "=", "logger", ")", "\n", "# Directly load 3D model.", "\n", "self", ".", "pretrained", "=", "cache_checkpoint", "(", "self", ".", "pretrained", ")", "\n", "load_checkpoint", "(", "self", ",", "self", ".", "pretrained", ",", "strict", "=", "True", ",", "logger", "=", "logger", ")", "\n", "", "elif", "self", ".", "pretrained", "is", "None", ":", "\n", "# Init two branch separately.", "\n", "            ", "self", ".", "fast_path", ".", "init_weights", "(", ")", "\n", "self", ".", "slow_path", ".", "init_weights", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowfast.ResNet3dSlowFast.forward": [[291, 329], ["torch.functional.interpolate", "torch.functional.interpolate", "resnet3d_slowfast.ResNet3dSlowFast.slow_path.conv1", "resnet3d_slowfast.ResNet3dSlowFast.slow_path.maxpool", "torch.functional.interpolate", "torch.functional.interpolate", "resnet3d_slowfast.ResNet3dSlowFast.fast_path.conv1", "resnet3d_slowfast.ResNet3dSlowFast.fast_path.maxpool", "enumerate", "resnet3d_slowfast.ResNet3dSlowFast.slow_path.conv1_lateral", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr", "getattr.", "getattr", "getattr.", "getattr", "getattr.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\n\n        Args:\n            x (torch.Tensor): The input data.\n\n        Returns:\n            tuple[torch.Tensor]: The feature of the input samples extracted by the backbone.\n        \"\"\"", "\n", "x_slow", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "x", ",", "mode", "=", "'nearest'", ",", "scale_factor", "=", "(", "1.0", "/", "self", ".", "resample_rate", ",", "1.0", ",", "1.0", ")", ")", "\n", "x_slow", "=", "self", ".", "slow_path", ".", "conv1", "(", "x_slow", ")", "\n", "x_slow", "=", "self", ".", "slow_path", ".", "maxpool", "(", "x_slow", ")", "\n", "\n", "x_fast", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "x", ",", "mode", "=", "'nearest'", ",", "scale_factor", "=", "(", "1.0", "/", "(", "self", ".", "resample_rate", "//", "self", ".", "speed_ratio", ")", ",", "1.0", ",", "1.0", ")", ")", "\n", "x_fast", "=", "self", ".", "fast_path", ".", "conv1", "(", "x_fast", ")", "\n", "x_fast", "=", "self", ".", "fast_path", ".", "maxpool", "(", "x_fast", ")", "\n", "\n", "if", "self", ".", "slow_path", ".", "lateral", ":", "\n", "            ", "x_fast_lateral", "=", "self", ".", "slow_path", ".", "conv1_lateral", "(", "x_fast", ")", "\n", "x_slow", "=", "torch", ".", "cat", "(", "(", "x_slow", ",", "x_fast_lateral", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "slow_path", ".", "res_layers", ")", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ".", "slow_path", ",", "layer_name", ")", "\n", "x_slow", "=", "res_layer", "(", "x_slow", ")", "\n", "res_layer_fast", "=", "getattr", "(", "self", ".", "fast_path", ",", "layer_name", ")", "\n", "x_fast", "=", "res_layer_fast", "(", "x_fast", ")", "\n", "if", "(", "i", "!=", "len", "(", "self", ".", "slow_path", ".", "res_layers", ")", "-", "1", "and", "self", ".", "slow_path", ".", "lateral", ")", ":", "\n", "# No fusion needed in the final stage", "\n", "                ", "lateral_name", "=", "self", ".", "slow_path", ".", "lateral_connections", "[", "i", "]", "\n", "conv_lateral", "=", "getattr", "(", "self", ".", "slow_path", ",", "lateral_name", ")", "\n", "x_fast_lateral", "=", "conv_lateral", "(", "x_fast", ")", "\n", "x_slow", "=", "torch", ".", "cat", "(", "(", "x_slow", ",", "x_fast_lateral", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "out", "=", "(", "x_slow", ",", "x_fast", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.BasicBlock.__init__": [[26, 61], ["dict", "dict", "dict", "torch.Module.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ",", "inplace", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "\n", "self", ".", "conv2", "=", "ConvModule", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.BasicBlock.forward": [[62, 83], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\n\n        Args:\n            x (torch.Tensor): The input data.\n\n        Returns:\n            torch.Tensor: The output of the module.\n        \"\"\"", "\n", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.Bottleneck.__init__": [[101, 147], ["dict", "dict", "dict", "torch.Module.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ",", "inplace", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "conv1_stride", "=", "1", "\n", "self", ".", "conv2_stride", "=", "stride", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "self", ".", "conv2", "=", "ConvModule", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "\n", "self", ".", "conv3", "=", "ConvModule", "(", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.Bottleneck.forward": [[148, 177], ["resnet.Bottleneck.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\n\n        Args:\n            x (torch.Tensor): The input data.\n\n        Returns:\n            torch.Tensor: The output of the module.\n        \"\"\"", "\n", "\n", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "\"\"\"Forward wrapper for utilizing checkpoint.\"\"\"", "\n", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "out", "+", "identity", "\n", "\n", "return", "out", "\n", "\n", "", "out", "=", "_inner_forward", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet.__init__": [[266, 324], ["dict", "dict", "dict", "torch.Module.__init__", "resnet.ResNet._make_stem_layer", "enumerate", "KeyError", "max", "len", "resnet.make_res_layer", "resnet.ResNet.add_module", "resnet.ResNet.res_layers.append", "len"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._make_stem_layer", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.make_res_layer"], ["def", "__init__", "(", "self", ",", "\n", "depth", "=", "50", ",", "\n", "pretrained", "=", "None", ",", "\n", "torchvision_pretrain", "=", "True", ",", "\n", "in_channels", "=", "3", ",", "\n", "num_stages", "=", "4", ",", "\n", "out_indices", "=", "(", "3", ",", ")", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN2d'", ",", "requires_grad", "=", "True", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ",", "inplace", "=", "True", ")", ",", "\n", "norm_eval", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "f'invalid depth {depth} for resnet'", ")", "\n", "", "self", ".", "depth", "=", "depth", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "torchvision_pretrain", "=", "torchvision_pretrain", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "assert", "1", "<=", "num_stages", "<=", "4", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "assert", "max", "(", "out_indices", ")", "<", "num_stages", "\n", "self", ".", "strides", "=", "strides", "\n", "assert", "len", "(", "strides", ")", "==", "num_stages", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "\n", "self", ".", "block", ",", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "self", ".", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "self", ".", "inplanes", "=", "64", "\n", "\n", "self", ".", "_make_stem_layer", "(", ")", "\n", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "planes", "=", "64", "*", "2", "**", "i", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "self", ".", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "layer_name", "=", "f'layer{i + 1}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "feat_dim", "=", "self", ".", "block", ".", "expansion", "*", "64", "*", "2", "**", "(", "\n", "len", "(", "self", ".", "stage_blocks", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._make_stem_layer": [[325, 339], ["mmcv.cnn.ConvModule", "torch.MaxPool2d"], "methods", ["None"], ["", "def", "_make_stem_layer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Construct the stem layers consists of a conv+norm+act module and a\n        pooling layer.\"\"\"", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._load_conv_params": [[340, 361], ["conv.weight.data.copy_", "loaded_param_names.append", "getattr", "conv.bias.data.copy_", "loaded_param_names.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_load_conv_params", "(", "conv", ",", "state_dict_tv", ",", "module_name_tv", ",", "loaded_param_names", ")", ":", "\n", "        ", "\"\"\"Load the conv parameters of resnet from torchvision.\n\n        Args:\n            conv (nn.Module): The destination conv module.\n            state_dict_tv (OrderedDict): The state dict of pretrained torchvision model.\n            module_name_tv (str): The name of corresponding conv module in the torchvision model.\n            loaded_param_names (list[str]): List of parameters that have been loaded.\n        \"\"\"", "\n", "\n", "weight_tv_name", "=", "module_name_tv", "+", "'.weight'", "\n", "if", "conv", ".", "weight", ".", "data", ".", "shape", "==", "state_dict_tv", "[", "weight_tv_name", "]", ".", "shape", ":", "\n", "            ", "conv", ".", "weight", ".", "data", ".", "copy_", "(", "state_dict_tv", "[", "weight_tv_name", "]", ")", "\n", "loaded_param_names", ".", "append", "(", "weight_tv_name", ")", "\n", "\n", "", "if", "getattr", "(", "conv", ",", "'bias'", ")", "is", "not", "None", ":", "\n", "            ", "bias_tv_name", "=", "module_name_tv", "+", "'.bias'", "\n", "if", "conv", ".", "bias", ".", "data", ".", "shape", "==", "state_dict_tv", "[", "bias_tv_name", "]", ".", "shape", ":", "\n", "                ", "conv", ".", "bias", ".", "data", ".", "copy_", "(", "state_dict_tv", "[", "bias_tv_name", "]", ")", "\n", "loaded_param_names", ".", "append", "(", "bias_tv_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._load_bn_params": [[362, 388], ["bn.named_parameters", "bn.named_buffers", "param.data.copy_", "loaded_param_names.append", "param.data.copy_", "loaded_param_names.append"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "_load_bn_params", "(", "bn", ",", "state_dict_tv", ",", "module_name_tv", ",", "loaded_param_names", ")", ":", "\n", "        ", "\"\"\"Load the bn parameters of resnet from torchvision.\n\n        Args:\n            bn (nn.Module): The destination bn module.\n            state_dict_tv (OrderedDict): The state dict of pretrained torchvision model.\n            module_name_tv (str): The name of corresponding bn module in the torchvision model.\n            loaded_param_names (list[str]): List of parameters that have been loaded.\n        \"\"\"", "\n", "\n", "for", "param_name", ",", "param", "in", "bn", ".", "named_parameters", "(", ")", ":", "\n", "            ", "param_tv_name", "=", "f'{module_name_tv}.{param_name}'", "\n", "param_tv", "=", "state_dict_tv", "[", "param_tv_name", "]", "\n", "if", "param", ".", "data", ".", "shape", "==", "param_tv", ".", "shape", ":", "\n", "                ", "param", ".", "data", ".", "copy_", "(", "param_tv", ")", "\n", "loaded_param_names", ".", "append", "(", "param_tv_name", ")", "\n", "\n", "", "", "for", "param_name", ",", "param", "in", "bn", ".", "named_buffers", "(", ")", ":", "\n", "            ", "param_tv_name", "=", "f'{module_name_tv}.{param_name}'", "\n", "# some buffers like num_batches_tracked may not exist", "\n", "if", "param_tv_name", "in", "state_dict_tv", ":", "\n", "                ", "param_tv", "=", "state_dict_tv", "[", "param_tv_name", "]", "\n", "if", "param", ".", "data", ".", "shape", "==", "param_tv", ".", "shape", ":", "\n", "                    ", "param", ".", "data", ".", "copy_", "(", "param_tv", ")", "\n", "loaded_param_names", ".", "append", "(", "param_tv_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._load_torchvision_checkpoint": [[389, 416], ["mmcv.runner._load_checkpoint", "resnet.ResNet.named_modules", "isinstance", "set", "set", "logger.info", "resnet.ResNet._load_conv_params", "resnet.ResNet._load_bn_params", "mmcv.runner._load_checkpoint.keys", "name.replace"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._load_conv_params", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._load_bn_params"], ["", "", "", "", "def", "_load_torchvision_checkpoint", "(", "self", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initiate the parameters from torchvision pretrained checkpoint.\"\"\"", "\n", "state_dict_torchvision", "=", "_load_checkpoint", "(", "self", ".", "pretrained", ")", "\n", "if", "'state_dict'", "in", "state_dict_torchvision", ":", "\n", "            ", "state_dict_torchvision", "=", "state_dict_torchvision", "[", "'state_dict'", "]", "\n", "\n", "", "loaded_param_names", "=", "[", "]", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "ConvModule", ")", ":", "\n", "# we use a ConvModule to wrap conv+bn+relu layers, thus the name mapping is needed", "\n", "                ", "if", "'downsample'", "in", "name", ":", "\n", "# layer{X}.{Y}.downsample.conv->layer{X}.{Y}.downsample.0", "\n", "                    ", "original_conv_name", "=", "name", "+", "'.0'", "\n", "# layer{X}.{Y}.downsample.bn->layer{X}.{Y}.downsample.1", "\n", "original_bn_name", "=", "name", "+", "'.1'", "\n", "", "else", ":", "\n", "# layer{X}.{Y}.conv{n}.conv->layer{X}.{Y}.conv{n}", "\n", "                    ", "original_conv_name", "=", "name", "\n", "# layer{X}.{Y}.conv{n}.bn->layer{X}.{Y}.bn{n}", "\n", "original_bn_name", "=", "name", ".", "replace", "(", "'conv'", ",", "'bn'", ")", "\n", "", "self", ".", "_load_conv_params", "(", "module", ".", "conv", ",", "state_dict_torchvision", ",", "original_conv_name", ",", "loaded_param_names", ")", "\n", "self", ".", "_load_bn_params", "(", "module", ".", "bn", ",", "state_dict_torchvision", ",", "original_bn_name", ",", "loaded_param_names", ")", "\n", "\n", "# check if any parameters in the 2d checkpoint are not loaded", "\n", "", "", "remaining_names", "=", "set", "(", "state_dict_torchvision", ".", "keys", "(", ")", ")", "-", "set", "(", "loaded_param_names", ")", "\n", "if", "remaining_names", ":", "\n", "            ", "logger", ".", "info", "(", "f'These parameters in pretrained checkpoint are not loaded: {remaining_names}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet.init_weights": [[417, 433], ["resnet.ResNet.modules", "isinstance", "isinstance", "utils.get_root_logger", "mmcv.cnn.kaiming_init", "isinstance", "resnet.ResNet._load_torchvision_checkpoint", "utils.cache_checkpoint", "mmcv.runner.load_checkpoint", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.get_root_logger", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._load_torchvision_checkpoint", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.cache_checkpoint"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initiate the parameters either from existing checkpoint or from\n        scratch.\"\"\"", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n", "", "", "if", "isinstance", "(", "self", ".", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "if", "self", ".", "torchvision_pretrain", ":", "\n", "                ", "self", ".", "_load_torchvision_checkpoint", "(", "logger", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "pretrained", "=", "cache_checkpoint", "(", "self", ".", "pretrained", ")", "\n", "load_checkpoint", "(", "self", ",", "self", ".", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet.forward": [[434, 456], ["resnet.ResNet.conv1", "resnet.ResNet.maxpool", "enumerate", "tuple", "getattr", "getattr.", "len", "outs.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\n\n        Args:\n            x (torch.Tensor): The input data.\n\n        Returns:\n            torch.Tensor: The feature of the input samples extracted\n            by the backbone.\n        \"\"\"", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "res_layers", ")", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "res_layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "if", "len", "(", "outs", ")", "==", "1", ":", "\n", "            ", "return", "outs", "[", "0", "]", "\n", "\n", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._freeze_stages": [[457, 470], ["range", "resnet.ResNet.conv1.bn.eval", "resnet.ResNet.conv1.modules", "getattr", "getattr.eval", "getattr.parameters", "getattr.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "\"\"\"Prevent all the parameters from being optimized before self.frozen_stages.\"\"\"", "\n", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "self", ".", "conv1", ".", "bn", ".", "eval", "(", ")", "\n", "for", "m", "in", "self", ".", "conv1", ".", "modules", "(", ")", ":", "\n", "                ", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "m", "=", "getattr", "(", "self", ",", "f'layer{i}'", ")", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet.train": [[471, 479], ["super().train", "resnet.ResNet._freeze_stages", "resnet.ResNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.potion.PoTion.train", "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.ResNet._freeze_stages"], ["", "", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Set the optimization status when training.\"\"\"", "\n", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet.make_res_layer": [[179, 236], ["layers.append", "range", "torch.Sequential", "mmcv.cnn.ConvModule", "block", "layers.append", "block"], "function", ["None"], ["", "", "def", "make_res_layer", "(", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build residual layer for ResNet.\n\n    Args:\n        block: (nn.Module): Residual module to be built.\n        inplanes (int): Number of channels for the input feature in each block.\n        planes (int): Number of channels for the output feature in each block.\n        blocks (int): Number of residual blocks.\n        stride (int): Stride in the conv layer. Default: 1.\n        conv_cfg (dict | None): Config for norm layers. Default: None.\n        norm_cfg (dict | None): Config for norm layers. Default: None.\n        act_cfg (dict | None): Config for activate layers. Default: None.\n\n    Returns:\n        nn.Module: A residual layer for the given config.\n    \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "        ", "downsample", "=", "ConvModule", "(", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.resnet3d_slowonly.ResNet3dSlowOnly.__init__": [[16, 18], ["resnet3d.ResNet3d.__init__"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "conv1_kernel", "=", "(", "1", ",", "7", ",", "7", ")", ",", "inflate", "=", "(", "0", ",", "0", ",", "1", ",", "1", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "conv1_kernel", "=", "conv1_kernel", ",", "inflate", "=", "inflate", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.potion.PoTion.__init__": [[10, 52], ["dict", "dict", "dict", "torch.nn.Module.__init__", "enumerate", "len", "len", "zip", "layer_names.append", "range", "torch.nn.Sequential", "setattr", "mmcv.cnn.ConvModule", "torch.nn.Sequential.append", "torch.nn.Sequential.append", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "channels", "=", "[", "128", ",", "256", ",", "512", "]", ",", "\n", "num_layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "lw_dropout", "=", "0", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv'", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ",", "inplace", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "lw_dropout", "=", "lw_dropout", "\n", "assert", "len", "(", "self", ".", "channels", ")", "==", "len", "(", "self", ".", "num_layers", ")", "\n", "\n", "layer_names", "=", "[", "]", "\n", "inplanes", "=", "in_channels", "\n", "for", "i", ",", "(", "ch", ",", "num_layer", ")", "in", "enumerate", "(", "zip", "(", "channels", ",", "num_layers", ")", ")", ":", "\n", "            ", "layer_name", "=", "f'layer{i + 1}'", "\n", "layer_names", ".", "append", "(", "layer_name", ")", "\n", "layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_layer", ")", ":", "\n", "                ", "stride", "=", "2", "if", "j", "==", "0", "else", "1", "\n", "conv", "=", "ConvModule", "(", "\n", "inplanes", ",", "\n", "ch", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "layer", ".", "append", "(", "conv", ")", "\n", "if", "self", ".", "lw_dropout", ">", "0", ":", "\n", "                    ", "layer", ".", "append", "(", "nn", ".", "Dropout", "(", "self", ".", "lw_dropout", ")", ")", "\n", "", "inplanes", "=", "ch", "\n", "\n", "", "layer", "=", "nn", ".", "Sequential", "(", "*", "layer", ")", "\n", "setattr", "(", "self", ",", "layer_name", ",", "layer", ")", "\n", "\n", "", "self", ".", "layer_names", "=", "layer_names", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.potion.PoTion.init_weights": [[53, 61], ["potion.PoTion.modules", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initiate the parameters either from existing checkpoint or from\n        scratch.\"\"\"", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.potion.PoTion.forward": [[62, 77], ["getattr", "getattr."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\n\n        Args:\n            x (torch.Tensor): The input data.\n\n        Returns:\n            torch.Tensor: The feature of the input samples extracted\n            by the backbone.\n        \"\"\"", "\n", "for", "layer_name", "in", "self", ".", "layer_names", ":", "\n", "            ", "layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.potion.PoTion.train": [[78, 81], ["super().train"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.cnns.potion.PoTion.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Set the optimization status when training.\"\"\"", "\n", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.aagcn.AAGCNBlock.__init__": [[13, 40], ["torch.Module.__init__", "tcn_kwargs.pop", "gcn_kwargs.pop", "utils.unit_aagcn", "torch.ReLU", "torch.ReLU", "len", "utils.unit_tcn", "kwargs.items", "kwargs.items", "kwargs.items", "utils.mstcn", "utils.unit_tcn"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "A", ",", "stride", "=", "1", ",", "residual", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "gcn_kwargs", "=", "{", "k", "[", "4", ":", "]", ":", "v", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", "[", ":", "4", "]", "==", "'gcn_'", "}", "\n", "tcn_kwargs", "=", "{", "k", "[", "4", ":", "]", ":", "v", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", "[", ":", "4", "]", "==", "'tcn_'", "}", "\n", "kwargs", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", "[", ":", "4", "]", "not", "in", "[", "'gcn_'", ",", "'tcn_'", "]", "}", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", ",", "f'Invalid arguments: {kwargs}'", "\n", "\n", "tcn_type", "=", "tcn_kwargs", ".", "pop", "(", "'type'", ",", "'unit_tcn'", ")", "\n", "assert", "tcn_type", "in", "[", "'unit_tcn'", ",", "'mstcn'", "]", "\n", "gcn_type", "=", "gcn_kwargs", ".", "pop", "(", "'type'", ",", "'unit_aagcn'", ")", "\n", "assert", "gcn_type", "in", "[", "'unit_aagcn'", "]", "\n", "\n", "self", ".", "gcn", "=", "unit_aagcn", "(", "in_channels", ",", "out_channels", ",", "A", ",", "**", "gcn_kwargs", ")", "\n", "\n", "if", "tcn_type", "==", "'unit_tcn'", ":", "\n", "            ", "self", ".", "tcn", "=", "unit_tcn", "(", "out_channels", ",", "out_channels", ",", "9", ",", "stride", "=", "stride", ",", "**", "tcn_kwargs", ")", "\n", "", "elif", "tcn_type", "==", "'mstcn'", ":", "\n", "            ", "self", ".", "tcn", "=", "mstcn", "(", "out_channels", ",", "out_channels", ",", "stride", "=", "stride", ",", "**", "tcn_kwargs", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "if", "not", "residual", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "0", "\n", "", "elif", "(", "in_channels", "==", "out_channels", ")", "and", "(", "stride", "==", "1", ")", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "            ", "self", ".", "residual", "=", "unit_tcn", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.aagcn.AAGCNBlock.init_weights": [[41, 44], ["aagcn.AAGCNBlock.tcn.init_weights", "aagcn.AAGCNBlock.gcn.init_weights"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights", "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "tcn", ".", "init_weights", "(", ")", "\n", "self", ".", "gcn", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.aagcn.AAGCNBlock.forward": [[45, 47], ["aagcn.AAGCNBlock.relu", "aagcn.AAGCNBlock.tcn", "aagcn.AAGCNBlock.residual", "aagcn.AAGCNBlock.gcn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "relu", "(", "self", ".", "tcn", "(", "self", ".", "gcn", "(", "x", ")", ")", "+", "self", ".", "residual", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.aagcn.AAGCN.__init__": [[51, 108], ["torch.Module.__init__", "utils.Graph", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "aagcn.AAGCN.register_buffer", "kwargs.items", "lw_kwargs[].pop", "range", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm1d", "torch.BatchNorm1d", "copy.deepcopy", "modules.append", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Identity", "torch.Identity", "range", "isinstance", "range", "aagcn.AAGCNBlock", "aagcn.AAGCNBlock", "torch.tensor.size", "torch.tensor.size", "len", "torch.tensor.clone", "torch.tensor.clone", "torch.tensor.clone", "torch.tensor.clone", "torch.tensor.size", "torch.tensor.size"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "graph_cfg", ",", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "data_bn_type", "=", "'MVC'", ",", "\n", "num_person", "=", "2", ",", "\n", "num_stages", "=", "10", ",", "\n", "inflate_stages", "=", "[", "5", ",", "8", "]", ",", "\n", "down_stages", "=", "[", "5", ",", "8", "]", ",", "\n", "pretrained", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "graph", "=", "Graph", "(", "**", "graph_cfg", ")", "\n", "A", "=", "torch", ".", "tensor", "(", "self", ".", "graph", ".", "A", ",", "dtype", "=", "torch", ".", "float32", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "register_buffer", "(", "'A'", ",", "A", ")", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n", "assert", "data_bn_type", "in", "[", "'MVC'", ",", "'VC'", ",", "None", "]", "\n", "self", ".", "data_bn_type", "=", "data_bn_type", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "self", ".", "num_person", "=", "num_person", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "self", ".", "inflate_stages", "=", "inflate_stages", "\n", "self", ".", "down_stages", "=", "down_stages", "\n", "\n", "if", "self", ".", "data_bn_type", "==", "'MVC'", ":", "\n", "            ", "self", ".", "data_bn", "=", "nn", ".", "BatchNorm1d", "(", "num_person", "*", "in_channels", "*", "A", ".", "size", "(", "1", ")", ")", "\n", "", "elif", "self", ".", "data_bn_type", "==", "'VC'", ":", "\n", "            ", "self", ".", "data_bn", "=", "nn", ".", "BatchNorm1d", "(", "in_channels", "*", "A", ".", "size", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_bn", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "lw_kwargs", "=", "[", "cp", ".", "deepcopy", "(", "kwargs", ")", "for", "i", "in", "range", "(", "num_stages", ")", "]", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "tuple", ")", "and", "len", "(", "v", ")", "==", "num_stages", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_stages", ")", ":", "\n", "                    ", "lw_kwargs", "[", "i", "]", "[", "k", "]", "=", "v", "[", "i", "]", "\n", "", "", "", "lw_kwargs", "[", "0", "]", ".", "pop", "(", "'tcn_dropout'", ",", "None", ")", "\n", "\n", "modules", "=", "[", "]", "\n", "if", "self", ".", "in_channels", "!=", "self", ".", "base_channels", ":", "\n", "            ", "modules", "=", "[", "AAGCNBlock", "(", "in_channels", ",", "base_channels", ",", "A", ".", "clone", "(", ")", ",", "1", ",", "residual", "=", "False", ",", "**", "lw_kwargs", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "2", ",", "num_stages", "+", "1", ")", ":", "\n", "            ", "in_channels", "=", "base_channels", "\n", "out_channels", "=", "base_channels", "*", "(", "1", "+", "(", "i", "in", "inflate_stages", ")", ")", "\n", "stride", "=", "1", "+", "(", "i", "in", "down_stages", ")", "\n", "modules", ".", "append", "(", "AAGCNBlock", "(", "base_channels", ",", "out_channels", ",", "A", ".", "clone", "(", ")", ",", "stride", "=", "stride", ",", "**", "lw_kwargs", "[", "i", "-", "1", "]", ")", ")", "\n", "base_channels", "=", "out_channels", "\n", "\n", "", "if", "self", ".", "in_channels", "==", "self", ".", "base_channels", ":", "\n", "            ", "self", ".", "num_stages", "-=", "1", "\n", "\n", "", "self", ".", "gcn", "=", "nn", ".", "ModuleList", "(", "modules", ")", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.aagcn.AAGCN.init_weights": [[109, 116], ["utils.bn_init", "isinstance", "module.init_weights", "utils.cache_checkpoint", "mmcv.runner.load_checkpoint"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.init_func.bn_init", "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights", "home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.cache_checkpoint"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "bn_init", "(", "self", ".", "data_bn", ",", "1", ")", "\n", "for", "module", "in", "self", ".", "gcn", ":", "\n", "            ", "module", ".", "init_weights", "(", ")", "\n", "", "if", "isinstance", "(", "self", ".", "pretrained", ",", "str", ")", ":", "\n", "            ", "self", ".", "pretrained", "=", "cache_checkpoint", "(", "self", ".", "pretrained", ")", "\n", "load_checkpoint", "(", "self", ",", "self", ".", "pretrained", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.aagcn.AAGCN.forward": [[117, 132], ["aagcn.AAGCN.size", "aagcn.AAGCN.permute().contiguous", "aagcn.AAGCN.view().permute().contiguous().view", "range", "aagcn.AAGCN.reshape", "aagcn.AAGCN.data_bn", "aagcn.AAGCN.data_bn", "aagcn.AAGCN.permute", "aagcn.AAGCN.view", "aagcn.AAGCN.view", "aagcn.AAGCN.view().permute().contiguous", "aagcn.AAGCN.view().permute", "aagcn.AAGCN.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "M", ",", "T", ",", "V", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "self", ".", "data_bn_type", "==", "'MVC'", ":", "\n", "            ", "x", "=", "self", ".", "data_bn", "(", "x", ".", "view", "(", "N", ",", "M", "*", "V", "*", "C", ",", "T", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "data_bn", "(", "x", ".", "view", "(", "N", "*", "M", ",", "V", "*", "C", ",", "T", ")", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "N", ",", "M", ",", "V", ",", "C", ",", "T", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "M", ",", "C", ",", "T", ",", "V", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "x", "=", "self", ".", "gcn", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "reshape", "(", "(", "N", ",", "M", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.sgn.SGN.__init__": [[12, 46], ["torch.nn.Module.__init__", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "sgn.SGN.embed_mlp", "sgn.SGN.embed_mlp", "sgn.SGN.embed_mlp", "sgn.SGN.embed_mlp", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "torch.nn.Sequential", "utils.unit_sgn", "utils.unit_sgn", "utils.unit_sgn", "torch.nn.AdaptiveMaxPool2d", "mmcv.cnn.ConvModule", "torch.nn.Dropout", "mmcv.cnn.ConvModule", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__", "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.sgn.SGN.embed_mlp", "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.sgn.SGN.embed_mlp", "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.sgn.SGN.embed_mlp", "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.sgn.SGN.embed_mlp"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_joints", "=", "25", ",", "\n", "T", "=", "30", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "SGN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "num_joints", "=", "num_joints", "\n", "self", ".", "base_channel", "=", "base_channels", "\n", "\n", "self", ".", "joint_bn", "=", "nn", ".", "BatchNorm1d", "(", "in_channels", "*", "num_joints", ")", "\n", "self", ".", "motion_bn", "=", "nn", ".", "BatchNorm1d", "(", "in_channels", "*", "num_joints", ")", "\n", "\n", "self", ".", "t_embed", "=", "self", ".", "embed_mlp", "(", "self", ".", "T", ",", "base_channels", "*", "4", ",", "base_channels", ",", "bias", "=", "bias", ")", "\n", "self", ".", "s_embed", "=", "self", ".", "embed_mlp", "(", "self", ".", "num_joints", ",", "base_channels", ",", "base_channels", ",", "bias", "=", "bias", ")", "\n", "self", ".", "joint_embed", "=", "self", ".", "embed_mlp", "(", "in_channels", ",", "base_channels", ",", "base_channels", ",", "bias", "=", "bias", ")", "\n", "self", ".", "motion_embed", "=", "self", ".", "embed_mlp", "(", "in_channels", ",", "base_channels", ",", "base_channels", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "compute_A1", "=", "ConvModule", "(", "base_channels", "*", "2", ",", "base_channels", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "compute_A2", "=", "ConvModule", "(", "base_channels", "*", "2", ",", "base_channels", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "tcn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveMaxPool2d", "(", "(", "20", ",", "1", ")", ")", ",", "\n", "ConvModule", "(", "base_channels", "*", "4", ",", "base_channels", "*", "4", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ",", "bias", "=", "bias", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN2d'", ")", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.2", ")", ",", "\n", "ConvModule", "(", "base_channels", "*", "4", ",", "base_channels", "*", "8", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ",", "norm_cfg", "=", "dict", "(", "type", "=", "'BN2d'", ")", ")", "\n", ")", "\n", "\n", "self", ".", "gcn1", "=", "unit_sgn", "(", "base_channels", "*", "2", ",", "base_channels", "*", "2", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gcn2", "=", "unit_sgn", "(", "base_channels", "*", "2", ",", "base_channels", "*", "4", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gcn3", "=", "unit_sgn", "(", "base_channels", "*", "4", ",", "base_channels", "*", "4", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.sgn.SGN.init_weights": [[47, 56], ["sgn.SGN.modules", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "\n", "", "", "nn", ".", "init", ".", "constant_", "(", "self", ".", "gcn1", ".", "conv", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "gcn2", ".", "conv", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "gcn3", ".", "conv", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.sgn.SGN.embed_mlp": [[57, 61], ["torch.nn.Sequential", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["None"], ["", "def", "embed_mlp", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "64", ",", "bias", "=", "False", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "ConvModule", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", ",", "\n", "ConvModule", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "bias", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.sgn.SGN.compute_A": [[63, 69], ["sgn.SGN.compute_A1().permute().contiguous", "sgn.SGN.compute_A2().permute().contiguous", "sgn.SGN.matmul", "torch.nn.Softmax", "sgn.SGN.compute_A1().permute", "sgn.SGN.compute_A2().permute", "sgn.SGN.compute_A1", "sgn.SGN.compute_A2"], "methods", ["None"], ["", "def", "compute_A", "(", "self", ",", "x", ")", ":", "\n", "# X: N, C, T, V", "\n", "        ", "A1", "=", "self", ".", "compute_A1", "(", "x", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "A2", "=", "self", ".", "compute_A2", "(", "x", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "A", "=", "A1", ".", "matmul", "(", "A2", ")", "\n", "return", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.sgn.SGN.forward": [[70, 103], ["joint.view().permute().contiguous.view().permute().contiguous.reshape", "joint.view().permute().contiguous.view().permute().contiguous.permute().contiguous", "torch.diff", "sgn.SGN.joint_bn", "sgn.SGN.motion_bn", "joint.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "motion.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "sgn.SGN.joint_embed", "sgn.SGN.motion_embed", "torch.eye().to", "t_code[].repeat", "torch.eye().to", "s_code[].repeat", "sgn.SGN.t_embed().permute().contiguous", "sgn.SGN.s_embed().permute().contiguous", "torch.cat", "sgn.SGN.compute_A", "sgn.SGN.tcn", "gcn.reshape", "joint.view().permute().contiguous.view().permute().contiguous.view", "motion.view().permute().contiguous.view().permute().contiguous.view", "gcn", "joint.view().permute().contiguous.view().permute().contiguous.permute", "torch.zeros().to", "joint.view().permute().contiguous.view().permute().contiguous.view().permute", "motion.view().permute().contiguous.view().permute().contiguous.view().permute", "torch.eye", "torch.eye", "sgn.SGN.t_embed().permute", "sgn.SGN.s_embed().permute", "torch.zeros", "joint.view().permute().contiguous.view().permute().contiguous.view", "motion.view().permute().contiguous.view().permute().contiguous.view", "sgn.SGN.t_embed", "sgn.SGN.s_embed"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.sgn.SGN.compute_A"], ["", "def", "forward", "(", "self", ",", "joint", ")", ":", "\n", "        ", "N", ",", "M", ",", "T", ",", "V", ",", "C", "=", "joint", ".", "shape", "\n", "\n", "joint", "=", "joint", ".", "reshape", "(", "N", "*", "M", ",", "T", ",", "V", ",", "C", ")", "\n", "joint", "=", "joint", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# NM, C, V, T", "\n", "motion", "=", "torch", ".", "diff", "(", "joint", ",", "dim", "=", "3", ",", "append", "=", "torch", ".", "zeros", "(", "N", "*", "M", ",", "C", ",", "V", ",", "1", ")", ".", "to", "(", "joint", ".", "device", ")", ")", "\n", "joint", "=", "self", ".", "joint_bn", "(", "joint", ".", "view", "(", "N", "*", "M", ",", "C", "*", "V", ",", "T", ")", ")", "\n", "motion", "=", "self", ".", "motion_bn", "(", "motion", ".", "view", "(", "N", "*", "M", ",", "C", "*", "V", ",", "T", ")", ")", "\n", "joint", "=", "joint", ".", "view", "(", "N", "*", "M", ",", "C", ",", "V", ",", "T", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "motion", "=", "motion", ".", "view", "(", "N", "*", "M", ",", "C", ",", "V", ",", "T", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "joint_embed", "=", "self", ".", "joint_embed", "(", "joint", ")", "\n", "motion_embed", "=", "self", ".", "motion_embed", "(", "motion", ")", "\n", "# N * M, C, T, V", "\n", "t_code", "=", "torch", ".", "eye", "(", "T", ")", ".", "to", "(", "joint", ".", "device", ")", "\n", "t_code", "=", "t_code", "[", "None", ",", ":", ",", "None", "]", ".", "repeat", "(", "N", "*", "M", ",", "1", ",", "V", ",", "1", ")", "\n", "s_code", "=", "torch", ".", "eye", "(", "V", ")", ".", "to", "(", "joint", ".", "device", ")", "\n", "s_code", "=", "s_code", "[", "None", ",", "...", ",", "None", "]", ".", "repeat", "(", "N", "*", "M", ",", "1", ",", "1", ",", "T", ")", "\n", "t_embed", "=", "self", ".", "t_embed", "(", "t_code", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "s_embed", "=", "self", ".", "s_embed", "(", "s_code", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "joint_embed", "+", "motion_embed", ",", "s_embed", "]", ",", "1", ")", "\n", "# N * M, 2base, V, T", "\n", "A", "=", "self", ".", "compute_A", "(", "x", ")", "\n", "# N * M, T, V, V", "\n", "for", "gcn", "in", "[", "self", ".", "gcn1", ",", "self", ".", "gcn2", ",", "self", ".", "gcn3", "]", ":", "\n", "            ", "x", "=", "gcn", "(", "x", ",", "A", ")", "\n", "\n", "", "x", "=", "x", "+", "t_embed", "\n", "x", "=", "self", ".", "tcn", "(", "x", ")", "\n", "# N * M, C, T, V", "\n", "return", "x", ".", "reshape", "(", "(", "N", ",", "M", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.ctrgcn.CTRGCNBlock.__init__": [[10, 36], ["torch.Module.__init__", "utils.unit_ctrgcn", "utils.MSTCN", "torch.ReLU", "torch.ReLU", "utils.unit_tcn"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "A", ",", "\n", "stride", "=", "1", ",", "\n", "residual", "=", "True", ",", "\n", "kernel_size", "=", "5", ",", "\n", "dilations", "=", "[", "1", ",", "2", "]", ",", "\n", "tcn_dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "CTRGCNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gcn1", "=", "unit_ctrgcn", "(", "in_channels", ",", "out_channels", ",", "A", ")", "\n", "self", ".", "tcn1", "=", "MSTCN", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "dilations", "=", "dilations", ",", "\n", "residual", "=", "False", ",", "\n", "tcn_dropout", "=", "tcn_dropout", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "not", "residual", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "0", "\n", "", "elif", "(", "in_channels", "==", "out_channels", ")", "and", "(", "stride", "==", "1", ")", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "            ", "self", ".", "residual", "=", "unit_tcn", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.ctrgcn.CTRGCNBlock.forward": [[37, 40], ["ctrgcn.CTRGCNBlock.relu", "ctrgcn.CTRGCNBlock.tcn1", "ctrgcn.CTRGCNBlock.residual", "ctrgcn.CTRGCNBlock.gcn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "relu", "(", "self", ".", "tcn1", "(", "self", ".", "gcn1", "(", "x", ")", ")", "+", "self", ".", "residual", "(", "x", ")", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.ctrgcn.CTRGCNBlock.init_weights": [[41, 44], ["ctrgcn.CTRGCNBlock.tcn1.init_weights", "ctrgcn.CTRGCNBlock.gcn1.init_weights"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights", "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "tcn1", ".", "init_weights", "(", ")", "\n", "self", ".", "gcn1", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.ctrgcn.CTRGCN.__init__": [[48, 78], ["torch.Module.__init__", "utils.Graph", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "ctrgcn.CTRGCN.register_buffer", "torch.BatchNorm1d", "torch.BatchNorm1d", "range", "torch.ModuleList", "torch.ModuleList", "ctrgcn.CTRGCNBlock", "modules.append", "torch.tensor.size", "torch.tensor.size", "kwargs.items", "torch.tensor.clone", "torch.tensor.clone", "ctrgcn.CTRGCNBlock", "torch.tensor.clone", "torch.tensor.clone"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "graph_cfg", ",", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "num_stages", "=", "10", ",", "\n", "inflate_stages", "=", "[", "5", ",", "8", "]", ",", "\n", "down_stages", "=", "[", "5", ",", "8", "]", ",", "\n", "pretrained", "=", "None", ",", "\n", "num_person", "=", "2", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CTRGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "graph", "=", "Graph", "(", "**", "graph_cfg", ")", "\n", "A", "=", "torch", ".", "tensor", "(", "self", ".", "graph", ".", "A", ",", "dtype", "=", "torch", ".", "float32", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "register_buffer", "(", "'A'", ",", "A", ")", "\n", "\n", "self", ".", "num_person", "=", "num_person", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "\n", "self", ".", "data_bn", "=", "nn", ".", "BatchNorm1d", "(", "num_person", "*", "in_channels", "*", "A", ".", "size", "(", "1", ")", ")", "\n", "\n", "kwargs0", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", "!=", "'tcn_dropout'", "}", "\n", "modules", "=", "[", "CTRGCNBlock", "(", "in_channels", ",", "base_channels", ",", "A", ".", "clone", "(", ")", ",", "residual", "=", "False", ",", "**", "kwargs0", ")", "]", "\n", "for", "i", "in", "range", "(", "2", ",", "num_stages", "+", "1", ")", ":", "\n", "            ", "in_channels", "=", "base_channels", "\n", "out_channels", "=", "base_channels", "*", "(", "1", "+", "(", "i", "in", "inflate_stages", ")", ")", "\n", "stride", "=", "1", "+", "(", "i", "in", "down_stages", ")", "\n", "modules", ".", "append", "(", "CTRGCNBlock", "(", "base_channels", ",", "out_channels", ",", "A", ".", "clone", "(", ")", ",", "stride", "=", "stride", ",", "**", "kwargs", ")", ")", "\n", "base_channels", "=", "out_channels", "\n", "", "self", ".", "net", "=", "nn", ".", "ModuleList", "(", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.ctrgcn.CTRGCN.init_weights": [[79, 82], ["module.init_weights"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "net", ":", "\n", "            ", "module", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.ctrgcn.CTRGCN.forward": [[83, 94], ["gcn.size", "gcn.permute().contiguous", "ctrgcn.CTRGCN.data_bn", "gcn.view().permute().contiguous().view", "gcn.reshape", "gcn.view", "gcn", "gcn.permute", "gcn.view().permute().contiguous", "gcn.view().permute", "gcn.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "M", ",", "T", ",", "V", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "self", ".", "data_bn", "(", "x", ".", "view", "(", "N", ",", "M", "*", "V", "*", "C", ",", "T", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "M", ",", "V", ",", "C", ",", "T", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "M", ",", "C", ",", "T", ",", "V", ")", "\n", "\n", "for", "gcn", "in", "self", ".", "net", ":", "\n", "            ", "x", "=", "gcn", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "reshape", "(", "(", "N", ",", "M", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.msg3d.MSG3D.__init__": [[12, 57], ["torch.Module.__init__", "utils.graph.Graph", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "msg3d.MSG3D.register_buffer", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "utils.MW_MSG3DBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Identity", "utils.MSTCN", "utils.MW_MSG3DBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Identity", "utils.MSTCN", "utils.MW_MSG3DBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Identity", "utils.MSTCN", "utils.MSGCN", "utils.MSTCN", "utils.MSTCN", "utils.MSGCN", "utils.MSTCN", "utils.MSTCN", "utils.MSGCN", "utils.MSTCN", "utils.MSTCN"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "graph_cfg", ",", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "96", ",", "\n", "num_gcn_scales", "=", "13", ",", "\n", "num_g3d_scales", "=", "6", ",", "\n", "num_person", "=", "2", ",", "\n", "tcn_dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "graph", "=", "Graph", "(", "**", "graph_cfg", ")", "\n", "# Note that A is a 2D tensor", "\n", "A", "=", "torch", ".", "tensor", "(", "self", ".", "graph", ".", "A", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "register_buffer", "(", "'A'", ",", "A", ")", "\n", "self", ".", "num_point", "=", "A", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "\n", "self", ".", "data_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_point", "*", "in_channels", "*", "num_person", ")", "\n", "c1", ",", "c2", ",", "c3", "=", "base_channels", ",", "base_channels", "*", "2", ",", "base_channels", "*", "4", "\n", "\n", "# r=3 STGC blocks", "\n", "self", ".", "gcn3d1", "=", "MW_MSG3DBlock", "(", "3", ",", "c1", ",", "A", ",", "num_g3d_scales", ",", "window_stride", "=", "1", ")", "\n", "self", ".", "sgcn1", "=", "nn", ".", "Sequential", "(", "\n", "MSGCN", "(", "num_gcn_scales", ",", "3", ",", "c1", ",", "A", ")", ",", "\n", "MSTCN", "(", "c1", ",", "c1", ")", ",", "\n", "MSTCN", "(", "c1", ",", "c1", ")", ")", "\n", "self", ".", "sgcn1", "[", "-", "1", "]", ".", "act", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "tcn1", "=", "MSTCN", "(", "c1", ",", "c1", ",", "tcn_dropout", "=", "tcn_dropout", ")", "\n", "\n", "self", ".", "gcn3d2", "=", "MW_MSG3DBlock", "(", "c1", ",", "c2", ",", "A", ",", "num_g3d_scales", ",", "window_stride", "=", "2", ")", "\n", "self", ".", "sgcn2", "=", "nn", ".", "Sequential", "(", "\n", "MSGCN", "(", "num_gcn_scales", ",", "c1", ",", "c1", ",", "A", ")", ",", "\n", "MSTCN", "(", "c1", ",", "c2", ",", "stride", "=", "2", ")", ",", "\n", "MSTCN", "(", "c2", ",", "c2", ")", ")", "\n", "self", ".", "sgcn2", "[", "-", "1", "]", ".", "act", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "tcn2", "=", "MSTCN", "(", "c2", ",", "c2", ",", "tcn_dropout", "=", "tcn_dropout", ")", "\n", "\n", "self", ".", "gcn3d3", "=", "MW_MSG3DBlock", "(", "c2", ",", "c3", ",", "A", ",", "num_g3d_scales", ",", "window_stride", "=", "2", ")", "\n", "self", ".", "sgcn3", "=", "nn", ".", "Sequential", "(", "\n", "MSGCN", "(", "num_gcn_scales", ",", "c2", ",", "c2", ",", "A", ")", ",", "\n", "MSTCN", "(", "c2", ",", "c3", ",", "stride", "=", "2", ")", ",", "\n", "MSTCN", "(", "c3", ",", "c3", ")", ")", "\n", "self", ".", "sgcn3", "[", "-", "1", "]", ".", "act", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "tcn3", "=", "MSTCN", "(", "c3", ",", "c3", ",", "tcn_dropout", "=", "tcn_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.msg3d.MSG3D.forward": [[58, 76], ["msg3d.MSG3D.size", "msg3d.MSG3D.permute().contiguous().reshape", "msg3d.MSG3D.data_bn", "msg3d.MSG3D.reshape().permute().contiguous", "torch.relu", "torch.relu", "torch.relu", "msg3d.MSG3D.tcn1", "torch.relu", "torch.relu", "torch.relu", "msg3d.MSG3D.tcn2", "torch.relu", "torch.relu", "torch.relu", "msg3d.MSG3D.tcn3", "msg3d.MSG3D.reshape", "msg3d.MSG3D.permute().contiguous", "msg3d.MSG3D.reshape().permute", "msg3d.MSG3D.sgcn1", "msg3d.MSG3D.gcn3d1", "msg3d.MSG3D.sgcn2", "msg3d.MSG3D.gcn3d2", "msg3d.MSG3D.sgcn3", "msg3d.MSG3D.gcn3d3", "msg3d.MSG3D.permute", "msg3d.MSG3D.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "M", ",", "T", ",", "V", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", ".", "reshape", "(", "N", ",", "M", "*", "V", "*", "C", ",", "T", ")", "\n", "x", "=", "self", ".", "data_bn", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "N", "*", "M", ",", "V", ",", "C", ",", "T", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "# Apply activation to the sum of the pathways", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "sgcn1", "(", "x", ")", "+", "self", ".", "gcn3d1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "tcn1", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "sgcn2", "(", "x", ")", "+", "self", ".", "gcn3d2", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "tcn2", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "sgcn3", "(", "x", ")", "+", "self", ".", "gcn3d3", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "tcn3", "(", "x", ")", "\n", "\n", "# N * M, C, T, V", "\n", "return", "x", ".", "reshape", "(", "(", "N", ",", "M", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.msg3d.MSG3D.init_weights": [[77, 79], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.stgcn.STGCNBlock.__init__": [[16, 49], ["torch.Module.__init__", "tcn_kwargs.pop", "gcn_kwargs.pop", "utils.unit_gcn", "torch.ReLU", "torch.ReLU", "len", "utils.unit_tcn", "kwargs.items", "kwargs.items", "kwargs.items", "utils.mstcn", "utils.unit_tcn"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "A", ",", "\n", "stride", "=", "1", ",", "\n", "residual", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "gcn_kwargs", "=", "{", "k", "[", "4", ":", "]", ":", "v", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", "[", ":", "4", "]", "==", "'gcn_'", "}", "\n", "tcn_kwargs", "=", "{", "k", "[", "4", ":", "]", ":", "v", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", "[", ":", "4", "]", "==", "'tcn_'", "}", "\n", "kwargs", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", "[", ":", "4", "]", "not", "in", "[", "'gcn_'", ",", "'tcn_'", "]", "}", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", ",", "f'Invalid arguments: {kwargs}'", "\n", "\n", "tcn_type", "=", "tcn_kwargs", ".", "pop", "(", "'type'", ",", "'unit_tcn'", ")", "\n", "assert", "tcn_type", "in", "[", "'unit_tcn'", ",", "'mstcn'", "]", "\n", "gcn_type", "=", "gcn_kwargs", ".", "pop", "(", "'type'", ",", "'unit_gcn'", ")", "\n", "assert", "gcn_type", "in", "[", "'unit_gcn'", "]", "\n", "\n", "self", ".", "gcn", "=", "unit_gcn", "(", "in_channels", ",", "out_channels", ",", "A", ",", "**", "gcn_kwargs", ")", "\n", "\n", "if", "tcn_type", "==", "'unit_tcn'", ":", "\n", "            ", "self", ".", "tcn", "=", "unit_tcn", "(", "out_channels", ",", "out_channels", ",", "9", ",", "stride", "=", "stride", ",", "**", "tcn_kwargs", ")", "\n", "", "elif", "tcn_type", "==", "'mstcn'", ":", "\n", "            ", "self", ".", "tcn", "=", "mstcn", "(", "out_channels", ",", "out_channels", ",", "stride", "=", "stride", ",", "**", "tcn_kwargs", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "if", "not", "residual", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "0", "\n", "", "elif", "(", "in_channels", "==", "out_channels", ")", "and", "(", "stride", "==", "1", ")", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "x", "\n", "", "else", ":", "\n", "            ", "self", ".", "residual", "=", "unit_tcn", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.stgcn.STGCNBlock.forward": [[50, 55], ["stgcn.STGCNBlock.residual", "stgcn.STGCNBlock.relu", "stgcn.STGCNBlock.tcn", "stgcn.STGCNBlock.gcn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "A", "=", "None", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\"\"\"", "\n", "res", "=", "self", ".", "residual", "(", "x", ")", "\n", "x", "=", "self", ".", "tcn", "(", "self", ".", "gcn", "(", "x", ",", "A", ")", ")", "+", "res", "\n", "return", "self", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.stgcn.STGCN.__init__": [[60, 119], ["torch.Module.__init__", "utils.Graph", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "kwargs.items", "lw_kwargs[].pop", "range", "torch.ModuleList", "torch.ModuleList", "torch.BatchNorm1d", "torch.BatchNorm1d", "copy.deepcopy", "int", "modules.append", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Identity", "torch.Identity", "range", "isinstance", "range", "stgcn.STGCNBlock", "stgcn.STGCNBlock", "torch.tensor.size", "torch.tensor.size", "len", "torch.tensor.clone", "torch.tensor.clone", "torch.tensor.clone", "torch.tensor.clone", "torch.tensor.size", "torch.tensor.size"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "graph_cfg", ",", "\n", "in_channels", "=", "3", ",", "\n", "base_channels", "=", "64", ",", "\n", "data_bn_type", "=", "'VC'", ",", "\n", "ch_ratio", "=", "2", ",", "\n", "num_person", "=", "2", ",", "# * Only used when data_bn_type == 'MVC'", "\n", "num_stages", "=", "10", ",", "\n", "inflate_stages", "=", "[", "5", ",", "8", "]", ",", "\n", "down_stages", "=", "[", "5", ",", "8", "]", ",", "\n", "pretrained", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "graph", "=", "Graph", "(", "**", "graph_cfg", ")", "\n", "A", "=", "torch", ".", "tensor", "(", "self", ".", "graph", ".", "A", ",", "dtype", "=", "torch", ".", "float32", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "data_bn_type", "=", "data_bn_type", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n", "if", "data_bn_type", "==", "'MVC'", ":", "\n", "            ", "self", ".", "data_bn", "=", "nn", ".", "BatchNorm1d", "(", "num_person", "*", "in_channels", "*", "A", ".", "size", "(", "1", ")", ")", "\n", "", "elif", "data_bn_type", "==", "'VC'", ":", "\n", "            ", "self", ".", "data_bn", "=", "nn", ".", "BatchNorm1d", "(", "in_channels", "*", "A", ".", "size", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_bn", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "lw_kwargs", "=", "[", "cp", ".", "deepcopy", "(", "kwargs", ")", "for", "i", "in", "range", "(", "num_stages", ")", "]", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "tuple", ")", "and", "len", "(", "v", ")", "==", "num_stages", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_stages", ")", ":", "\n", "                    ", "lw_kwargs", "[", "i", "]", "[", "k", "]", "=", "v", "[", "i", "]", "\n", "", "", "", "lw_kwargs", "[", "0", "]", ".", "pop", "(", "'tcn_dropout'", ",", "None", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "base_channels", "=", "base_channels", "\n", "self", ".", "ch_ratio", "=", "ch_ratio", "\n", "self", ".", "inflate_stages", "=", "inflate_stages", "\n", "self", ".", "down_stages", "=", "down_stages", "\n", "\n", "modules", "=", "[", "]", "\n", "if", "self", ".", "in_channels", "!=", "self", ".", "base_channels", ":", "\n", "            ", "modules", "=", "[", "STGCNBlock", "(", "in_channels", ",", "base_channels", ",", "A", ".", "clone", "(", ")", ",", "1", ",", "residual", "=", "False", ",", "**", "lw_kwargs", "[", "0", "]", ")", "]", "\n", "\n", "", "inflate_times", "=", "0", "\n", "for", "i", "in", "range", "(", "2", ",", "num_stages", "+", "1", ")", ":", "\n", "            ", "stride", "=", "1", "+", "(", "i", "in", "down_stages", ")", "\n", "in_channels", "=", "base_channels", "\n", "if", "i", "in", "inflate_stages", ":", "\n", "                ", "inflate_times", "+=", "1", "\n", "", "out_channels", "=", "int", "(", "self", ".", "base_channels", "*", "self", ".", "ch_ratio", "**", "inflate_times", "+", "EPS", ")", "\n", "base_channels", "=", "out_channels", "\n", "modules", ".", "append", "(", "STGCNBlock", "(", "in_channels", ",", "out_channels", ",", "A", ".", "clone", "(", ")", ",", "stride", ",", "**", "lw_kwargs", "[", "i", "-", "1", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "in_channels", "==", "self", ".", "base_channels", ":", "\n", "            ", "num_stages", "-=", "1", "\n", "\n", "", "self", ".", "num_stages", "=", "num_stages", "\n", "self", ".", "gcn", "=", "nn", ".", "ModuleList", "(", "modules", ")", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.stgcn.STGCN.init_weights": [[120, 124], ["isinstance", "utils.cache_checkpoint", "mmcv.runner.load_checkpoint"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.utils.misc.cache_checkpoint"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "pretrained", ",", "str", ")", ":", "\n", "            ", "self", ".", "pretrained", "=", "cache_checkpoint", "(", "self", ".", "pretrained", ")", "\n", "load_checkpoint", "(", "self", ",", "self", ".", "pretrained", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.gcns.stgcn.STGCN.forward": [[125, 139], ["stgcn.STGCN.size", "stgcn.STGCN.permute().contiguous", "stgcn.STGCN.view().permute().contiguous().view", "range", "stgcn.STGCN.reshape", "stgcn.STGCN.data_bn", "stgcn.STGCN.data_bn", "stgcn.STGCN.permute", "stgcn.STGCN.view", "stgcn.STGCN.view", "stgcn.STGCN.view().permute().contiguous", "stgcn.STGCN.view().permute", "stgcn.STGCN.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "M", ",", "T", ",", "V", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "self", ".", "data_bn_type", "==", "'MVC'", ":", "\n", "            ", "x", "=", "self", ".", "data_bn", "(", "x", ".", "view", "(", "N", ",", "M", "*", "V", "*", "C", ",", "T", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "data_bn", "(", "x", ".", "view", "(", "N", "*", "M", ",", "V", "*", "C", ",", "T", ")", ")", "\n", "", "x", "=", "x", ".", "view", "(", "N", ",", "M", ",", "V", ",", "C", ",", "T", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "M", ",", "C", ",", "T", ",", "V", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "x", "=", "self", ".", "gcn", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "reshape", "(", "(", "N", ",", "M", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.base.BaseHead.__init__": [[30, 42], ["dict", "torch.Module.__init__", "builder.build_loss"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__", "home.repos.pwc.inspect_result.kennymckormick_pyskl.models.builder.build_loss"], []], "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.base.BaseHead.init_weights": [[43, 47], ["None"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "\n", "ann_file", ",", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.base.BaseHead.forward": [[48, 51], ["None"], "methods", ["None"], ["pipeline", ",", "\n", "data_prefix", "=", "''", ",", "\n", "test_mode", "=", "False", ",", "\n", "multi_class", "=", "False", ",", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.base.BaseHead.loss": [[52, 89], ["dict", "base.BaseHead.loss_cls", "isinstance", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "label.unsqueeze.unsqueeze.unsqueeze", "core.top_k_accuracy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "dict.update", "label.unsqueeze.unsqueeze.unsqueeze", "cls_score.size", "label.unsqueeze.unsqueeze.size", "cls_score.detach().cpu().numpy", "label.unsqueeze.unsqueeze.detach().cpu().numpy", "label.unsqueeze.unsqueeze.dim", "label.unsqueeze.unsqueeze.size", "cls_score.size", "cls_score.detach().cpu", "label.unsqueeze.unsqueeze.detach().cpu", "cls_score.detach", "label.unsqueeze.unsqueeze.detach"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.top_k_accuracy"], ["num_classes", "=", "None", ",", "\n", "start_index", "=", "1", ",", "\n", "modality", "=", "'RGB'", ",", "\n", "memcached", "=", "False", ",", "\n", "mc_cfg", "=", "(", "'localhost'", ",", "22077", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ann_file", "=", "ann_file", "\n", "self", ".", "data_prefix", "=", "data_prefix", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "multi_class", "=", "multi_class", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "start_index", "=", "start_index", "\n", "self", ".", "modality", "=", "modality", "\n", "# Note: Currently, memcached only works for PoseDataset", "\n", "self", ".", "memcached", "=", "memcached", "\n", "self", ".", "mc_cfg", "=", "mc_cfg", "\n", "self", ".", "cli", "=", "None", "\n", "\n", "self", ".", "pipeline", "=", "Compose", "(", "pipeline", ")", "\n", "self", ".", "video_infos", "=", "self", ".", "load_annotations", "(", ")", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the annotation according to ann_file into video_infos.\"\"\"", "\n", "\n", "# json annotations already looks like video_infos, so for each dataset,", "\n", "# this func should be the same", "\n", "", "def", "load_json_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load json annotation file to get video information.\"\"\"", "\n", "video_infos", "=", "mmcv", ".", "load", "(", "self", ".", "ann_file", ")", "\n", "num_videos", "=", "len", "(", "video_infos", ")", "\n", "path_key", "=", "'frame_dir'", "if", "'frame_dir'", "in", "video_infos", "[", "0", "]", "else", "'filename'", "\n", "for", "i", "in", "range", "(", "num_videos", ")", ":", "\n", "            ", "path_value", "=", "video_infos", "[", "i", "]", "[", "path_key", "]", "\n", "path_value", "=", "osp", ".", "join", "(", "self", ".", "data_prefix", ",", "path_value", ")", "\n", "video_infos", "[", "i", "]", "[", "path_key", "]", "=", "path_value", "\n", "if", "self", ".", "multi_class", ":", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.__init__": [[23, 44], ["dict", "base.BaseHead.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "loss_cls", "=", "dict", "(", "type", "=", "'CrossEntropyLoss'", ")", ",", "\n", "dropout", "=", "0.5", ",", "\n", "init_std", "=", "0.01", ",", "\n", "mode", "=", "'3D'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "in_channels", ",", "loss_cls", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "dropout_ratio", "=", "dropout", "\n", "self", ".", "init_std", "=", "init_std", "\n", "if", "self", ".", "dropout_ratio", "!=", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_ratio", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "", "assert", "mode", "in", "[", "'3D'", ",", "'GCN'", ",", "'2D'", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "self", ".", "in_c", "=", "in_channels", "\n", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "self", ".", "in_c", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.init_weights": [[45, 48], ["mmcv.cnn.normal_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initiate the parameters from scratch.\"\"\"", "\n", "normal_init", "(", "self", ".", "fc_cls", ",", "std", "=", "self", ".", "init_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.SimpleHead.forward": [[49, 95], ["isinstance", "simple_head.SimpleHead.fc_cls", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "simple_head.SimpleHead.dropout", "item.mean", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.cat.reshape", "torch.cat.reshape", "torch.AdaptiveAvgPool2d.", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.mean", "torch.cat.mean", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool2d.", "torch.cat.view", "torch.cat.view", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.cat.reshape", "torch.cat.reshape", "torch.AdaptiveAvgPool2d.", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.mean", "torch.cat.mean", "len", "len", "isinstance", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\n\n        Args:\n            x (torch.Tensor): The input data.\n\n        Returns:\n            torch.Tensor: The classification scores for input samples.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "for", "item", "in", "x", ":", "\n", "                ", "assert", "len", "(", "item", ".", "shape", ")", "==", "2", "\n", "", "x", "=", "[", "item", ".", "mean", "(", "dim", "=", "0", ")", "for", "item", "in", "x", "]", "\n", "x", "=", "torch", ".", "stack", "(", "x", ")", "\n", "\n", "", "if", "len", "(", "x", ".", "shape", ")", "!=", "2", ":", "\n", "            ", "if", "self", ".", "mode", "==", "'2D'", ":", "\n", "                ", "assert", "len", "(", "x", ".", "shape", ")", "==", "5", "\n", "N", ",", "S", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "x", "=", "x", ".", "reshape", "(", "N", "*", "S", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "pool", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "N", ",", "S", ",", "C", ")", "\n", "x", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "if", "self", ".", "mode", "==", "'3D'", ":", "\n", "                ", "pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "1", ")", "\n", "if", "isinstance", "(", "x", ",", "tuple", ")", "or", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "                    ", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "\n", "", "x", "=", "pool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", ":", "2", "]", ")", "\n", "", "if", "self", ".", "mode", "==", "'GCN'", ":", "\n", "                ", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "N", ",", "M", ",", "C", ",", "T", ",", "V", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "N", "*", "M", ",", "C", ",", "T", ",", "V", ")", "\n", "\n", "x", "=", "pool", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "N", ",", "M", ",", "C", ")", "\n", "x", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "in_c", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "cls_score", "=", "self", ".", "fc_cls", "(", "x", ")", "\n", "return", "cls_score", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.I3DHead.__init__": [[100, 114], ["dict", "simple_head.SimpleHead.__init__"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "loss_cls", "=", "dict", "(", "type", "=", "'CrossEntropyLoss'", ")", ",", "\n", "dropout", "=", "0.5", ",", "\n", "init_std", "=", "0.01", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "\n", "in_channels", ",", "\n", "loss_cls", "=", "loss_cls", ",", "\n", "dropout", "=", "dropout", ",", "\n", "init_std", "=", "init_std", ",", "\n", "mode", "=", "'3D'", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.GCNHead.__init__": [[124, 138], ["dict", "simple_head.SimpleHead.__init__"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "loss_cls", "=", "dict", "(", "type", "=", "'CrossEntropyLoss'", ")", ",", "\n", "dropout", "=", "0.", ",", "\n", "init_std", "=", "0.01", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "\n", "in_channels", ",", "\n", "loss_cls", "=", "loss_cls", ",", "\n", "dropout", "=", "dropout", ",", "\n", "init_std", "=", "init_std", ",", "\n", "mode", "=", "'GCN'", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.heads.simple_head.TSNHead.__init__": [[143, 157], ["dict", "base.BaseHead.__init__"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "loss_cls", "=", "dict", "(", "type", "=", "'CrossEntropyLoss'", ")", ",", "\n", "dropout", "=", "0.5", ",", "\n", "init_std", "=", "0.01", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "\n", "in_channels", ",", "\n", "loss_cls", "=", "loss_cls", ",", "\n", "dropout", "=", "dropout", ",", "\n", "init_std", "=", "init_std", ",", "\n", "mode", "=", "'2D'", ",", "\n", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.losses.base.BaseWeightedLoss.__init__": [[18, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["\n", "class", "BaseDataset", "(", "Dataset", ",", "metaclass", "=", "ABCMeta", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.losses.base.BaseWeightedLoss._forward": [[22, 25], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.kennymckormick_pyskl.losses.base.BaseWeightedLoss.forward": [[26, 46], ["base.BaseWeightedLoss._forward", "isinstance"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.losses.cross_entropy_loss.BCELossWithLogits._forward"], ["\n", "\n", "def", "__init__", "(", "self", ",", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.losses.cross_entropy_loss.CrossEntropyLoss.__init__": [[33, 38], ["base.BaseWeightedLoss.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "loss_weight", "=", "1.0", ",", "class_weight", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "loss_weight", "=", "loss_weight", ")", "\n", "self", ".", "class_weight", "=", "None", "\n", "if", "class_weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "class_weight", "=", "torch", ".", "Tensor", "(", "class_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.losses.cross_entropy_loss.CrossEntropyLoss._forward": [[39, 83], ["cls_score.size", "label.size", "torch.log_softmax", "torch.log_softmax", "torch.cross_entropy", "torch.cross_entropy", "cls_score.dim", "len", "cross_entropy_loss.CrossEntropyLoss.class_weight.to", "loss_cls.mean.mean.mean", "cross_entropy_loss.CrossEntropyLoss.class_weight.to", "cross_entropy_loss.CrossEntropyLoss.class_weight.unsqueeze", "loss_cls.mean.mean.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "cross_entropy_loss.CrossEntropyLoss.class_weight.unsqueeze"], "methods", ["None"], ["", "", "def", "_forward", "(", "self", ",", "cls_score", ",", "label", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Forward function.\n\n        Args:\n            cls_score (torch.Tensor): The class score.\n            label (torch.Tensor): The ground truth label.\n            kwargs: Any keyword argument to be used to calculate\n                CrossEntropy loss.\n\n        Returns:\n            torch.Tensor: The returned CrossEntropy loss.\n        \"\"\"", "\n", "if", "cls_score", ".", "size", "(", ")", "==", "label", ".", "size", "(", ")", ":", "\n", "# calculate loss for soft label", "\n", "\n", "            ", "assert", "cls_score", ".", "dim", "(", ")", "==", "2", ",", "'Only support 2-dim soft label'", "\n", "assert", "len", "(", "kwargs", ")", "==", "0", ",", "(", "'For now, no extra args are supported for soft label, '", "\n", "f'but get {kwargs}'", ")", "\n", "\n", "lsm", "=", "F", ".", "log_softmax", "(", "cls_score", ",", "1", ")", "\n", "if", "self", ".", "class_weight", "is", "not", "None", ":", "\n", "                ", "self", ".", "class_weight", "=", "self", ".", "class_weight", ".", "to", "(", "cls_score", ".", "device", ")", "\n", "lsm", "=", "lsm", "*", "self", ".", "class_weight", ".", "unsqueeze", "(", "0", ")", "\n", "", "loss_cls", "=", "-", "(", "label", "*", "lsm", ")", ".", "sum", "(", "1", ")", "\n", "\n", "# default reduction 'mean'", "\n", "if", "self", ".", "class_weight", "is", "not", "None", ":", "\n", "# Use weighted average as pytorch CrossEntropyLoss does.", "\n", "# For more information, please visit https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html # noqa", "\n", "                ", "loss_cls", "=", "loss_cls", ".", "sum", "(", ")", "/", "torch", ".", "sum", "(", "\n", "self", ".", "class_weight", ".", "unsqueeze", "(", "0", ")", "*", "label", ")", "\n", "", "else", ":", "\n", "                ", "loss_cls", "=", "loss_cls", ".", "mean", "(", ")", "\n", "", "", "else", ":", "\n", "# calculate loss for hard label", "\n", "\n", "            ", "if", "self", ".", "class_weight", "is", "not", "None", ":", "\n", "                ", "assert", "'weight'", "not", "in", "kwargs", ",", "\"The key 'weight' already exists.\"", "\n", "kwargs", "[", "'weight'", "]", "=", "self", ".", "class_weight", ".", "to", "(", "cls_score", ".", "device", ")", "\n", "", "loss_cls", "=", "F", ".", "cross_entropy", "(", "cls_score", ",", "label", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "loss_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.losses.cross_entropy_loss.BCELossWithLogits.__init__": [[98, 103], ["base.BaseWeightedLoss.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "loss_weight", "=", "1.0", ",", "class_weight", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "loss_weight", "=", "loss_weight", ")", "\n", "self", ".", "class_weight", "=", "None", "\n", "if", "class_weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "class_weight", "=", "torch", ".", "Tensor", "(", "class_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.losses.cross_entropy_loss.BCELossWithLogits._forward": [[104, 122], ["torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "cross_entropy_loss.BCELossWithLogits.class_weight.to"], "methods", ["None"], ["", "", "def", "_forward", "(", "self", ",", "cls_score", ",", "label", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Forward function.\n\n        Args:\n            cls_score (torch.Tensor): The class score.\n            label (torch.Tensor): The ground truth label.\n            kwargs: Any keyword argument to be used to calculate\n                bce loss with logits.\n\n        Returns:\n            torch.Tensor: The returned bce loss with logits.\n        \"\"\"", "\n", "if", "self", ".", "class_weight", "is", "not", "None", ":", "\n", "            ", "assert", "'weight'", "not", "in", "kwargs", ",", "\"The key 'weight' already exists.\"", "\n", "kwargs", "[", "'weight'", "]", "=", "self", ".", "class_weight", ".", "to", "(", "cls_score", ".", "device", ")", "\n", "", "loss_cls", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "cls_score", ",", "label", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss_cls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.hooks.OutputHook.__init__": [[18, 24], ["hooks.OutputHook.register"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.hooks.OutputHook.register"], ["def", "__init__", "(", "self", ",", "module", ",", "outputs", "=", "None", ",", "as_tensor", "=", "False", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "outputs", "\n", "self", ".", "as_tensor", "=", "as_tensor", "\n", "self", ".", "layer_outputs", "=", "{", "}", "\n", "self", ".", "handles", "=", "[", "]", "\n", "self", ".", "register", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.hooks.OutputHook.register": [[25, 49], ["isinstance", "hooks.OutputHook.handles.append", "isinstance", "warnings.warn", "hooks.rgetattr", "rgetattr.register_forward_hook", "output.detach().cpu().numpy", "hooks.OutputHook.register.hook_wrapper"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.hooks.rgetattr"], ["", "def", "register", "(", "self", ",", "module", ")", ":", "\n", "\n", "        ", "def", "hook_wrapper", "(", "name", ")", ":", "\n", "\n", "            ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "output", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "warnings", ".", "warn", "(", "f'Directly return the output from {name}, '", "\n", "f'since it is not a tensor'", ")", "\n", "self", ".", "layer_outputs", "[", "name", "]", "=", "output", "\n", "", "elif", "self", ".", "as_tensor", ":", "\n", "                    ", "self", ".", "layer_outputs", "[", "name", "]", "=", "output", "\n", "", "else", ":", "\n", "                    ", "self", ".", "layer_outputs", "[", "name", "]", "=", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "hook", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "outputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "for", "name", "in", "self", ".", "outputs", ":", "\n", "                ", "try", ":", "\n", "                    ", "layer", "=", "rgetattr", "(", "module", ",", "name", ")", "\n", "h", "=", "layer", ".", "register_forward_hook", "(", "hook_wrapper", "(", "name", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "raise", "AttributeError", "(", "f'Module {name} not found'", ")", "\n", "", "self", ".", "handles", ".", "append", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.hooks.OutputHook.remove": [[50, 53], ["h.remove"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.hooks.OutputHook.remove"], ["", "", "", "def", "remove", "(", "self", ")", ":", "\n", "        ", "for", "h", "in", "self", ".", "handles", ":", "\n", "            ", "h", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.hooks.OutputHook.__enter__": [[54, 56], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.hooks.OutputHook.__exit__": [[57, 59], ["hooks.OutputHook.remove"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.hooks.OutputHook.remove"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "self", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.hooks.rgetattr": [[63, 69], ["functools.reduce", "getattr", "attr.split"], "function", ["None"], ["", "", "def", "rgetattr", "(", "obj", ",", "attr", ",", "*", "args", ")", ":", "\n", "\n", "    ", "def", "_getattr", "(", "obj", ",", "attr", ")", ":", "\n", "        ", "return", "getattr", "(", "obj", ",", "attr", ",", "*", "args", ")", "\n", "\n", "", "return", "functools", ".", "reduce", "(", "_getattr", ",", "[", "obj", "]", "+", "attr", ".", "split", "(", "'.'", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__": [[12, 14], ["mmcv.runner.DistEvalHook.__init__"], "methods", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.DistEvalHook.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "save_best", "=", "'auto'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "save_best", "=", "save_best", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.confusion_matrix": [[16, 78], ["isinstance", "isinstance", "numpy.unique", "len", "numpy.zeros", "enumerate", "numpy.bincount().reshape", "ValueError", "numpy.array", "isinstance", "TypeError", "TypeError", "numpy.array", "isinstance", "TypeError", "TypeError", "numpy.concatenate", "numpy.errstate", "numpy.nan_to_num", "numpy.bincount", "np.nan_to_num.sum", "type", "type", "np.nan_to_num.sum", "np.nan_to_num.sum"], "function", ["None"], ["", "", "def", "confusion_matrix", "(", "y_pred", ",", "y_real", ",", "normalize", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute confusion matrix.\n\n    Args:\n        y_pred (list[int] | np.ndarray[int]): Prediction labels.\n        y_real (list[int] | np.ndarray[int]): Ground truth labels.\n        normalize (str | None): Normalizes confusion matrix over the true\n            (rows), predicted (columns) conditions or all the population.\n            If None, confusion matrix will not be normalized. Options are\n            \"true\", \"pred\", \"all\", None. Default: None.\n\n    Returns:\n        np.ndarray: Confusion matrix.\n    \"\"\"", "\n", "if", "normalize", "not", "in", "[", "'true'", ",", "'pred'", ",", "'all'", ",", "None", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"normalize must be one of {'true', 'pred', \"", "\n", "\"'all', None}\"", ")", "\n", "\n", "", "if", "isinstance", "(", "y_pred", ",", "list", ")", ":", "\n", "        ", "y_pred", "=", "np", ".", "array", "(", "y_pred", ")", "\n", "", "if", "not", "isinstance", "(", "y_pred", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "f'y_pred must be list or np.ndarray, but got {type(y_pred)}'", ")", "\n", "", "if", "not", "y_pred", ".", "dtype", "==", "np", ".", "int64", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "f'y_pred dtype must be np.int64, but got {y_pred.dtype}'", ")", "\n", "\n", "", "if", "isinstance", "(", "y_real", ",", "list", ")", ":", "\n", "        ", "y_real", "=", "np", ".", "array", "(", "y_real", ")", "\n", "", "if", "not", "isinstance", "(", "y_real", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "f'y_real must be list or np.ndarray, but got {type(y_real)}'", ")", "\n", "", "if", "not", "y_real", ".", "dtype", "==", "np", ".", "int64", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "f'y_real dtype must be np.int64, but got {y_real.dtype}'", ")", "\n", "\n", "", "label_set", "=", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "y_pred", ",", "y_real", ")", ")", ")", "\n", "num_labels", "=", "len", "(", "label_set", ")", "\n", "max_label", "=", "label_set", "[", "-", "1", "]", "\n", "label_map", "=", "np", ".", "zeros", "(", "max_label", "+", "1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "label_set", ")", ":", "\n", "        ", "label_map", "[", "label", "]", "=", "i", "\n", "\n", "", "y_pred_mapped", "=", "label_map", "[", "y_pred", "]", "\n", "y_real_mapped", "=", "label_map", "[", "y_real", "]", "\n", "\n", "confusion_mat", "=", "np", ".", "bincount", "(", "\n", "num_labels", "*", "y_real_mapped", "+", "y_pred_mapped", ",", "\n", "minlength", "=", "num_labels", "**", "2", ")", ".", "reshape", "(", "num_labels", ",", "num_labels", ")", "\n", "\n", "with", "np", ".", "errstate", "(", "all", "=", "'ignore'", ")", ":", "\n", "        ", "if", "normalize", "==", "'true'", ":", "\n", "            ", "confusion_mat", "=", "(", "\n", "confusion_mat", "/", "confusion_mat", ".", "sum", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "", "elif", "normalize", "==", "'pred'", ":", "\n", "            ", "confusion_mat", "=", "(", "\n", "confusion_mat", "/", "confusion_mat", ".", "sum", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "", "elif", "normalize", "==", "'all'", ":", "\n", "            ", "confusion_mat", "=", "(", "confusion_mat", "/", "confusion_mat", ".", "sum", "(", ")", ")", "\n", "", "confusion_mat", "=", "np", ".", "nan_to_num", "(", "confusion_mat", ")", "\n", "\n", "", "return", "confusion_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.mean_class_accuracy": [[80, 100], ["numpy.argmax", "confusion_matrix().astype", "confusion_matrix().astype.sum", "numpy.diag", "numpy.mean", "evaluation.confusion_matrix", "zip"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.confusion_matrix"], ["", "def", "mean_class_accuracy", "(", "scores", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Calculate mean class accuracy.\n\n    Args:\n        scores (list[np.ndarray]): Prediction scores for each class.\n        labels (list[int]): Ground truth labels.\n\n    Returns:\n        np.ndarray: Mean class accuracy.\n    \"\"\"", "\n", "pred", "=", "np", ".", "argmax", "(", "scores", ",", "axis", "=", "1", ")", "\n", "cf_mat", "=", "confusion_matrix", "(", "pred", ",", "labels", ")", ".", "astype", "(", "float", ")", "\n", "\n", "cls_cnt", "=", "cf_mat", ".", "sum", "(", "axis", "=", "1", ")", "\n", "cls_hit", "=", "np", ".", "diag", "(", "cf_mat", ")", "\n", "\n", "mean_class_acc", "=", "np", ".", "mean", "(", "\n", "[", "hit", "/", "cnt", "if", "cnt", "else", "0.0", "for", "cnt", ",", "hit", "in", "zip", "(", "cls_cnt", ",", "cls_hit", ")", "]", ")", "\n", "\n", "return", "mean_class_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.top_k_accuracy": [[102, 122], ["numpy.array", "numpy.logical_or.reduce", "res.append", "np.logical_or.reduce.sum", "numpy.argsort"], "function", ["None"], ["", "def", "top_k_accuracy", "(", "scores", ",", "labels", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Calculate top k accuracy score.\n\n    Args:\n        scores (list[np.ndarray]): Prediction scores for each class.\n        labels (list[int]): Ground truth labels.\n        topk (tuple[int]): K value for top_k_accuracy. Default: (1, ).\n\n    Returns:\n        list[float]: Top k accuracy score for each k.\n    \"\"\"", "\n", "res", "=", "[", "]", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "max_k_preds", "=", "np", ".", "argsort", "(", "scores", ",", "axis", "=", "1", ")", "[", ":", ",", "-", "k", ":", "]", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "match_array", "=", "np", ".", "logical_or", ".", "reduce", "(", "max_k_preds", "==", "labels", ",", "axis", "=", "1", ")", "\n", "topk_acc_score", "=", "match_array", ".", "sum", "(", ")", "/", "match_array", ".", "shape", "[", "0", "]", "\n", "res", ".", "append", "(", "topk_acc_score", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.mean_average_precision": [[124, 148], ["zip", "numpy.mean", "numpy.stack", "numpy.stack", "evaluation.binary_precision_recall_curve", "results.append", "numpy.sum", "numpy.isnan", "numpy.diff", "numpy.array"], "function", ["home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.binary_precision_recall_curve"], ["", "def", "mean_average_precision", "(", "scores", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Mean average precision for multi-label recognition.\n\n    Args:\n        scores (list[np.ndarray]): Prediction scores of different classes for\n            each sample.\n        labels (list[np.ndarray]): Ground truth many-hot vector for each\n            sample.\n\n    Returns:\n        np.float: The mean average precision.\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "scores", "=", "np", ".", "stack", "(", "scores", ")", ".", "T", "\n", "labels", "=", "np", ".", "stack", "(", "labels", ")", ".", "T", "\n", "\n", "for", "score", ",", "label", "in", "zip", "(", "scores", ",", "labels", ")", ":", "\n", "        ", "precision", ",", "recall", ",", "_", "=", "binary_precision_recall_curve", "(", "score", ",", "label", ")", "\n", "ap", "=", "-", "np", ".", "sum", "(", "np", ".", "diff", "(", "recall", ")", "*", "np", ".", "array", "(", "precision", ")", "[", ":", "-", "1", "]", ")", "\n", "results", ".", "append", "(", "ap", ")", "\n", "", "results", "=", "[", "x", "for", "x", "in", "results", "if", "not", "np", ".", "isnan", "(", "x", ")", "]", "\n", "if", "results", "==", "[", "]", ":", "\n", "        ", "return", "np", ".", "nan", "\n", "", "return", "np", ".", "mean", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennymckormick_pyskl.core.evaluation.binary_precision_recall_curve": [[150, 192], ["isinstance", "isinstance", "tps.searchsorted", "slice", "numpy.argsort", "numpy.where", "numpy.cumsum", "numpy.diff", "numpy.isnan"], "function", ["None"], ["", "def", "binary_precision_recall_curve", "(", "y_score", ",", "y_true", ")", ":", "\n", "    ", "\"\"\"Calculate the binary precision recall curve at step thresholds.\n\n    Args:\n        y_score (np.ndarray): Prediction scores for each class.\n            Shape should be (num_classes, ).\n        y_true (np.ndarray): Ground truth many-hot vector.\n            Shape should be (num_classes, ).\n\n    Returns:\n        precision (np.ndarray): The precision of different thresholds.\n        recall (np.ndarray): The recall of different thresholds.\n        thresholds (np.ndarray): Different thresholds at which precision and\n            recall are tested.\n    \"\"\"", "\n", "assert", "isinstance", "(", "y_score", ",", "np", ".", "ndarray", ")", "\n", "assert", "isinstance", "(", "y_true", ",", "np", ".", "ndarray", ")", "\n", "assert", "y_score", ".", "shape", "==", "y_true", ".", "shape", "\n", "\n", "# make y_true a boolean vector", "\n", "y_true", "=", "(", "y_true", "==", "1", ")", "\n", "# sort scores and corresponding truth values", "\n", "desc_score_indices", "=", "np", ".", "argsort", "(", "y_score", ",", "kind", "=", "'mergesort'", ")", "[", ":", ":", "-", "1", "]", "\n", "y_score", "=", "y_score", "[", "desc_score_indices", "]", "\n", "y_true", "=", "y_true", "[", "desc_score_indices", "]", "\n", "# There may be ties in values, therefore find the `distinct_value_inds`", "\n", "distinct_value_inds", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score", ")", ")", "[", "0", "]", "\n", "threshold_inds", "=", "np", ".", "r_", "[", "distinct_value_inds", ",", "y_true", ".", "size", "-", "1", "]", "\n", "# accumulate the true positives with decreasing threshold", "\n", "tps", "=", "np", ".", "cumsum", "(", "y_true", ")", "[", "threshold_inds", "]", "\n", "fps", "=", "1", "+", "threshold_inds", "-", "tps", "\n", "thresholds", "=", "y_score", "[", "threshold_inds", "]", "\n", "\n", "precision", "=", "tps", "/", "(", "tps", "+", "fps", ")", "\n", "precision", "[", "np", ".", "isnan", "(", "precision", ")", "]", "=", "0", "\n", "recall", "=", "tps", "/", "tps", "[", "-", "1", "]", "\n", "# stop when full recall attained", "\n", "# and reverse the outputs so recall is decreasing", "\n", "last_ind", "=", "tps", ".", "searchsorted", "(", "tps", "[", "-", "1", "]", ")", "\n", "sl", "=", "slice", "(", "last_ind", ",", "None", ",", "-", "1", ")", "\n", "\n", "return", "np", ".", "r_", "[", "precision", "[", "sl", "]", ",", "1", "]", ",", "np", ".", "r_", "[", "recall", "[", "sl", "]", ",", "0", "]", ",", "thresholds", "[", "sl", "]", "\n", "", ""]]}