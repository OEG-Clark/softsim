{"home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.main_overlapping.train": [[48, 99], ["model.eval", "model.parameters", "model.train", "optimizer.zero_grad", "model.encode", "model.recon_loss", "loss.backward", "optimizer.step", "model.eval", "model.parameters", "model.train", "optimizer.zero_grad", "model.encode", "model.community_dists_probs", "torch.gumbel_softmax", "model.recon_loss", "loss.backward", "optimizer.step", "model.eval", "model.parameters", "model.train", "optimizer.zero_grad", "model.encode", "model.community_dists_probs", "torch.gumbel_softmax", "model.recon_loss", "loss.backward", "optimizer.step", "model.kl_loss", "torch.distributions.kl_divergence().mean", "torch.distributions.kl_divergence().mean", "model.kl_loss", "model.kl_loss", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence"], "function", ["home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.main_non_overlapping.train", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.recon_loss", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.main_non_overlapping.train", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.community_dists_probs", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.recon_loss", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.main_non_overlapping.train", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.community_dists_probs", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.recon_loss"], ["def", "train", "(", "train_type", ")", ":", "\n", "    ", "if", "train_type", "==", "0", ":", "# simple VGAE trained", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "model", ".", "psi", ".", "requires_grad", "=", "False", "\n", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "model", ".", "encode", "(", "x", ",", "train_pos_edge_index", ")", "\n", "l_kl_z", "=", "1.0", "*", "model", ".", "kl_loss", "(", ")", "/", "data", ".", "num_nodes", "\n", "l_recon", "=", "model", ".", "recon_loss", "(", "z", ",", "train_pos_edge_index", ")", "\n", "l_kl_c", "=", "0", "\n", "loss", "=", "l_recon", "+", "l_kl_z", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "elif", "train_type", "==", "1", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "psi", ".", "requires_grad", "=", "True", "\n", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "model", ".", "encode", "(", "x", ",", "train_pos_edge_index", ")", "\n", "pc_given_Z", ",", "qc_given_ZA", "=", "model", ".", "community_dists_probs", "(", "z", ",", "train_pos_edge_index", ")", "\n", "c", "=", "F", ".", "gumbel_softmax", "(", "qc_given_ZA", ".", "logits", ",", "tau", "=", "1", ",", "hard", "=", "True", ")", "\n", "l_kl_z", "=", "1.0", "*", "model", ".", "kl_loss", "(", ")", "/", "data", ".", "num_nodes", "\n", "l_recon", "=", "model", ".", "recon_loss", "(", "(", "z", ",", "c", ")", ",", "train_pos_edge_index", ")", "\n", "l_kl_c", "=", "1.0", "*", "kl_divergence", "(", "qc_given_ZA", ",", "pc_given_Z", ")", ".", "mean", "(", ")", "\n", "loss", "=", "l_recon", "+", "l_kl_z", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "model", ".", "encode", "(", "x", ",", "train_pos_edge_index", ")", "\n", "pc_given_Z", ",", "qc_given_ZA", "=", "model", ".", "community_dists_probs", "(", "z", ",", "train_pos_edge_index", ")", "\n", "c", "=", "F", ".", "gumbel_softmax", "(", "qc_given_ZA", ".", "logits", ",", "tau", "=", "1", ",", "hard", "=", "True", ")", "\n", "l_kl_z", "=", "1.0", "*", "model", ".", "kl_loss", "(", ")", "/", "data", ".", "num_nodes", "\n", "l_kl_c", "=", "1.0", "*", "kl_divergence", "(", "qc_given_ZA", ",", "pc_given_Z", ")", ".", "mean", "(", ")", "\n", "l_recon", "=", "model", ".", "recon_loss", "(", "(", "z", ",", "c", ")", ",", "train_pos_edge_index", ")", "\n", "loss", "=", "l_recon", "+", "l_kl_z", "+", "l_kl_c", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "l_recon", ",", "l_kl_z", ",", "l_kl_c", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.main_non_overlapping.train": [[53, 104], ["model.eval", "model.parameters", "model.train", "optimizer.zero_grad", "model.encode", "model.recon_loss", "loss.backward", "optimizer.step", "model.eval", "model.parameters", "model.train", "optimizer.zero_grad", "model.encode", "model.community_dists_probs", "torch.gumbel_softmax", "model.recon_loss", "loss.backward", "optimizer.step", "model.eval", "model.parameters", "model.train", "optimizer.zero_grad", "model.encode", "model.community_dists_probs", "torch.gumbel_softmax", "model.recon_loss", "loss.backward", "optimizer.step", "model.kl_loss", "torch.distributions.kl_divergence().mean", "torch.distributions.kl_divergence().mean", "model.kl_loss", "model.kl_loss", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence"], "function", ["home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.main_non_overlapping.train", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.recon_loss", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.main_non_overlapping.train", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.community_dists_probs", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.recon_loss", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.main_non_overlapping.train", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.community_dists_probs", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.recon_loss"], ["def", "train", "(", "train_type", ")", ":", "\n", "    ", "if", "train_type", "==", "0", ":", "# simple VGAE trained", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "model", ".", "psi", ".", "requires_grad", "=", "False", "\n", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "model", ".", "encode", "(", "x", ",", "train_pos_edge_index", ")", "\n", "l_kl_z", "=", "1.0", "*", "model", ".", "kl_loss", "(", ")", "/", "data", ".", "num_nodes", "\n", "l_recon", "=", "model", ".", "recon_loss", "(", "z", ",", "train_pos_edge_index", ")", "\n", "l_kl_c", "=", "0", "\n", "loss", "=", "l_recon", "+", "l_kl_z", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "elif", "train_type", "==", "1", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "psi", ".", "requires_grad", "=", "True", "\n", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "model", ".", "encode", "(", "x", ",", "train_pos_edge_index", ")", "\n", "pc_given_Z", ",", "qc_given_ZA", "=", "model", ".", "community_dists_probs", "(", "z", ",", "train_pos_edge_index", ")", "\n", "c", "=", "F", ".", "gumbel_softmax", "(", "qc_given_ZA", ".", "logits", ",", "tau", "=", "1", ",", "hard", "=", "True", ")", "\n", "l_kl_z", "=", "1.0", "*", "model", ".", "kl_loss", "(", ")", "/", "data", ".", "num_nodes", "\n", "l_recon", "=", "model", ".", "recon_loss", "(", "(", "z", ",", "c", ")", ",", "train_pos_edge_index", ")", "\n", "l_kl_c", "=", "1.0", "*", "kl_divergence", "(", "qc_given_ZA", ",", "pc_given_Z", ")", ".", "mean", "(", ")", "\n", "loss", "=", "l_recon", "+", "l_kl_z", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "model", ".", "encode", "(", "x", ",", "train_pos_edge_index", ")", "\n", "pc_given_Z", ",", "qc_given_ZA", "=", "model", ".", "community_dists_probs", "(", "z", ",", "train_pos_edge_index", ")", "\n", "c", "=", "F", ".", "gumbel_softmax", "(", "qc_given_ZA", ".", "logits", ",", "tau", "=", "1", ",", "hard", "=", "True", ")", "\n", "l_kl_z", "=", "1.0", "*", "model", ".", "kl_loss", "(", ")", "/", "data", ".", "num_nodes", "\n", "l_kl_c", "=", "1.0", "*", "kl_divergence", "(", "qc_given_ZA", ",", "pc_given_Z", ")", ".", "mean", "(", ")", "\n", "l_recon", "=", "model", ".", "recon_loss", "(", "(", "z", ",", "c", ")", ",", "train_pos_edge_index", ")", "\n", "loss", "=", "l_recon", "+", "l_kl_z", "+", "l_kl_c", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "l_recon", ",", "l_kl_z", ",", "l_kl_c", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.dataset_loaders.load_non_overlapping_dataset": [[43, 53], ["torch_geometric.NormalizeFeatures", "os.join", "type", "torch_geometric.datasets.Planetoid", "type", "Exception", "torch_geometric.datasets.CitationFull"], "function", ["None"], ["", "def", "load_non_overlapping_dataset", "(", "dataset_name", ":", "PlanetoidDataset", "or", "CitationFullDataset", ",", "transform", "=", "T", ".", "NormalizeFeatures", "(", ")", ")", "->", "Data", ":", "\n", "    ", "path", "=", "osp", ".", "join", "(", "DATASETS_DIR", ",", "dataset_name", ".", "value", ")", "\n", "\n", "if", "type", "(", "dataset_name", ")", "==", "PlanetoidDataset", ":", "\n", "        ", "data", "=", "Planetoid", "(", "path", ",", "dataset_name", ".", "value", ",", "transform", "=", "transform", ")", "[", "0", "]", "\n", "", "elif", "type", "(", "dataset_name", ")", "==", "CitationFullDataset", ":", "\n", "        ", "data", "=", "CitationFull", "(", "path", ",", "dataset_name", ".", "value", ",", "transform", "=", "transform", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown dataset name\"", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.dataset_loaders.load_facebook_dataset": [[55, 72], ["os.join", "torch_geometric.datasets.SNAPDataset", "numpy.zeros", "helpers.matrix_to_cnl_format", "torch_geometric.NormalizeFeatures", "torch.eye", "torch_geometric.datasets.SNAPDataset.circle_batch.max", "torch_geometric.datasets.SNAPDataset.x.size", "torch_geometric.datasets.SNAPDataset.x.size"], "function", ["home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.helpers.matrix_to_cnl_format"], ["", "def", "load_facebook_dataset", "(", "dataset_name", ":", "FacebookDataset", ",", "allow_features", "=", "True", ")", "->", "Data", ":", "\n", "    ", "path", "=", "osp", ".", "join", "(", "DATASETS_DIR", ",", "dataset_name", ".", "value", "[", ":", "12", "]", ")", "\n", "facebook_idx_map", "=", "{", "\"0\"", ":", "0", ",", "\"107\"", ":", "1", ",", "\"1684\"", ":", "2", ",", "\"1912\"", ":", "3", ",", "\"3437\"", ":", "4", ",", "\"348\"", ":", "5", ",", "\"3980\"", ":", "6", ",", "\"414\"", ":", "7", ",", "\"686\"", ":", "8", ",", "\"698\"", ":", "9", ",", "}", "\n", "data", "=", "SNAPDataset", "(", "path", ",", "dataset_name", ".", "value", "[", ":", "12", "]", ",", "T", ".", "NormalizeFeatures", "(", ")", ")", "\n", "\n", "data", "=", "data", "[", "facebook_idx_map", "[", "dataset_name", ".", "value", "[", "12", ":", "]", "]", "]", "\n", "\n", "if", "not", "allow_features", ":", "\n", "        ", "data", ".", "x", "=", "torch", ".", "eye", "(", "data", ".", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "data", ".", "num_communities", "=", "data", ".", "circle_batch", ".", "max", "(", ")", "+", "1", "\n", "communities", "=", "np", ".", "zeros", "(", "(", "data", ".", "num_communities", ",", "data", ".", "x", ".", "size", "(", "0", ")", ")", ")", "\n", "communities", "[", "data", ".", "circle_batch", ",", "data", ".", "circle", "]", "=", "1", "\n", "data", ".", "communities", "=", "communities", "\n", "data", ".", "communities_cnl_format", "=", "matrix_to_cnl_format", "(", "communities", ",", "data", ".", "num_communities", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.dataset_loaders.load_large_dataset": [[74, 106], ["os.join", "communities.sort", "set", "sorted", "range", "torch_geometric.data.Data", "len", "open", "list", "len", "open", "torch_sparse.coalesce", "os.join", "line.strip().split", "enumerate", "os.join", "line.strip().split", "len", "len", "torch.eye", "f.readlines", "len", "int", "list", "f.readlines", "torch.from_numpy", "len", "line.strip", "int", "line.strip", "int", "int", "numpy.array"], "function", ["None"], ["", "def", "load_large_dataset", "(", "dataset_name", ",", "NUM_COMMUNITIES", "=", "5", ")", ":", "\n", "# TODO: Add more datasets if required, from https://snap.stanford.edu/data/#communities", "\n", "#  This will be simple as you already have the code and only need to put files in the", "\n", "#  folders as done in amazon/youtube/dlbp case", "\n", "    ", "path", "=", "osp", ".", "join", "(", "DATASETS_DIR", ",", "dataset_name", ".", "value", ")", "\n", "edges_file", "=", "'com-{}.ungraph.txt'", ".", "format", "(", "dataset_name", ".", "value", ",", "dataset_name", ")", "\n", "communities_file", "=", "'com-{}.top5000.cmty.txt'", ".", "format", "(", "dataset_name", ".", "value", ",", "dataset_name", ")", "\n", "\n", "with", "open", "(", "osp", ".", "join", "(", "path", ",", "communities_file", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "communities", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "communities", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", ")", ",", "reverse", "=", "True", ")", "\n", "communities", "=", "communities", "[", ":", "NUM_COMMUNITIES", "]", "\n", "nodes_in_communities_set", "=", "set", "(", "x", "for", "r", "in", "communities", "for", "x", "in", "r", ")", "\n", "nodes_in_communities_sorted", "=", "sorted", "(", "list", "(", "int", "(", "x", ")", "for", "x", "in", "nodes_in_communities_set", ")", ")", "\n", "nodes_idx_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "list", "(", "nodes_in_communities_sorted", ")", ")", "}", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "communities", ")", ")", ":", "\n", "        ", "communities", "[", "i", "]", "=", "[", "nodes_idx_map", "[", "int", "(", "x", ")", "]", "for", "x", "in", "communities", "[", "i", "]", "]", "\n", "", "with", "open", "(", "osp", ".", "join", "(", "path", ",", "edges_file", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "edges", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "]", "\n", "\n", "", "edges", "=", "[", "edge", "for", "edge", "in", "edges", "if", "edge", "[", "0", "]", "in", "nodes_in_communities_set", "and", "edge", "[", "1", "]", "in", "nodes_in_communities_set", "]", "\n", "\n", "edges", "=", "[", "[", "nodes_idx_map", "[", "int", "(", "edge", "[", "0", "]", ")", "]", ",", "nodes_idx_map", "[", "int", "(", "edge", "[", "1", "]", ")", "]", "]", "for", "edge", "in", "edges", "]", "\n", "edges", "=", "coalesce", "(", "\n", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "edges", ")", ")", ".", "T", ",", "None", ",", "\n", "len", "(", "nodes_in_communities_sorted", ")", ",", "len", "(", "nodes_in_communities_sorted", ")", ")", "[", "0", "]", "\n", "data", "=", "Data", "(", "x", "=", "torch", ".", "eye", "(", "len", "(", "nodes_in_communities_sorted", ")", ")", ",", "edge_index", "=", "edges", ",", "communities", "=", "communities", ")", "\n", "data", ".", "num_communities", "=", "len", "(", "data", ".", "communities", ")", "\n", "data", ".", "communities_cnl_format", "=", "data", ".", "communities", "\n", "\n", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.SimpleEncoder.__init__": [[13, 17], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.NF1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "SimpleEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mu", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "in_channels", ",", "out_channels", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "logvar", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "in_channels", ",", "out_channels", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.SimpleEncoder.forward": [[18, 20], ["x.matmul", "x.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "return", "x", ".", "matmul", "(", "self", ".", "mu", ")", ",", "x", ".", "matmul", "(", "self", ".", "logvar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Encoder.__init__": [[23, 28], ["torch.nn.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv"], "methods", ["home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.NF1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "GCNConv", "(", "in_channels", ",", "2", "*", "out_channels", ",", "cached", "=", "True", ")", "\n", "self", ".", "conv_mu", "=", "GCNConv", "(", "2", "*", "out_channels", ",", "out_channels", ",", "cached", "=", "True", ")", "\n", "self", ".", "conv_logvar", "=", "GCNConv", "(", "2", "*", "out_channels", ",", "out_channels", ",", "cached", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Encoder.forward": [[29, 32], ["torch.leaky_relu", "torch.leaky_relu", "model.Encoder.conv1", "model.Encoder.conv_mu", "model.Encoder.conv_logvar"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1", "(", "x", ",", "edge_index", ")", ")", "\n", "return", "self", ".", "conv_mu", "(", "x", ",", "edge_index", ")", ",", "self", ".", "conv_logvar", "(", "x", ",", "edge_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.InnerProductDecoder.forward": [[35, 50], ["type", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "z", ",", "edge_index", ",", "weights", ",", "sigmoid", "=", "True", ",", "psi", "=", "None", ")", ":", "\n", "        ", "if", "type", "(", "z", ")", "is", "tuple", ":", "\n", "            ", "z", ",", "c", "=", "z", "\n", "weights", "=", "{", "\"vz\"", ":", "weights", "*", "1", ",", "\"vc\"", ":", "weights", "*", "1", ",", "\"vcz\"", ":", "weights", "*", "1", ",", "\"vzc\"", ":", "weights", "*", "1", "}", "\n", "c", "=", "(", "c", "[", ":", ",", ":", ",", "None", "]", "*", "psi", "[", "None", ",", ":", ",", ":", "]", ")", ".", "sum", "(", "1", ")", "\n", "v_cz", "=", "(", "c", "[", "edge_index", "[", "0", "]", "]", "*", "z", "[", "edge_index", "[", "1", "]", "]", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "v_zc", "=", "(", "z", "[", "edge_index", "[", "0", "]", "]", "*", "c", "[", "edge_index", "[", "1", "]", "]", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "(", "\n", "torch", ".", "sigmoid", "(", "weights", "[", "\"vzc\"", "]", "*", "v_zc", ")", "+", "\n", "torch", ".", "sigmoid", "(", "weights", "[", "\"vcz\"", "]", "*", "v_cz", ")", "\n", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "value", "=", "(", "z", "[", "edge_index", "[", "0", "]", "]", "*", "z", "[", "edge_index", "[", "1", "]", "]", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "torch", ".", "sigmoid", "(", "value", ")", "if", "sigmoid", "else", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.__init__": [[53, 58], ["torch_geometric.nn.VGAE.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.NF1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_dim", ",", "z_dim", ",", "num_communities", ",", "q_alpha", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "# TODO think about initialization if needed", "\n", "self", ".", "psi", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_communities", ",", "z_dim", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "q_alpha", "=", "q_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.community_dists_probs": [[59, 65], ["torch_scatter.scatter_mean", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "z.size"], "methods", ["None"], ["", "def", "community_dists_probs", "(", "self", ",", "z", ",", "edge_index", ")", ":", "\n", "        ", "dot_products", "=", "(", "self", ".", "psi", "[", "None", ",", ":", ",", ":", "]", "*", "z", "[", ":", ",", "None", ",", ":", "]", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "row", ",", "col", "=", "edge_index", "\n", "dot_products_avg_over_Ni", "=", "scatter_mean", "(", "src", "=", "dot_products", "[", "row", "]", ",", "index", "=", "col", ",", "dim", "=", "0", ",", "dim_size", "=", "z", ".", "size", "(", "0", ")", ")", "\n", "weighted_dot_products", "=", "self", ".", "q_alpha", "*", "dot_products", "+", "(", "1", "-", "self", ".", "q_alpha", ")", "*", "dot_products_avg_over_Ni", "\n", "return", "Categorical", "(", "logits", "=", "dot_products", ")", ",", "Categorical", "(", "logits", "=", "weighted_dot_products", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.recon_loss": [[66, 72], ["torch_geometric.utils.negative_sampling", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "z[].size", "z.size", "torch.log", "torch.log", "torch.log", "torch.log", "type", "torch.log", "torch.log", "torch.log", "torch.log", "model.Model.decoder", "model.Model.decoder"], "methods", ["None"], ["", "def", "recon_loss", "(", "self", ",", "z", ",", "pos_edge_index", ")", ":", "\n", "        ", "pos_w", ",", "neg_w", "=", "1.0", ",", "1.0", "\n", "pos_loss", "=", "-", "torch", ".", "log", "(", "self", ".", "decoder", "(", "z", ",", "pos_edge_index", ",", "pos_w", ",", "sigmoid", "=", "True", ",", "psi", "=", "self", ".", "psi", ")", "+", "EPS", ")", ".", "mean", "(", ")", "\n", "neg_edge_index", "=", "negative_sampling", "(", "pos_edge_index", ",", "z", "[", "0", "]", ".", "size", "(", "0", ")", "if", "type", "(", "z", ")", "is", "tuple", "else", "z", ".", "size", "(", "0", ")", ")", "\n", "neg_loss", "=", "-", "torch", ".", "log", "(", "1", "-", "self", ".", "decoder", "(", "z", ",", "neg_edge_index", ",", "neg_w", ",", "sigmoid", "=", "True", ",", "psi", "=", "self", ".", "psi", ")", "+", "EPS", ")", ".", "mean", "(", ")", "\n", "return", "pos_loss", "+", "neg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.model.Model.test": [[73, 85], ["model.Model.encode", "model.Model.new_ones", "model.Model.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Model.decoder", "model.Model.decoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Exception", "test_pos_edge_index.size", "test_neg_edge_index.size"], "methods", ["None"], ["", "def", "test", "(", "self", ",", "x", ",", "train_pos_edge_index", ",", "test_pos_edge_index", ",", "test_neg_edge_index", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "raise", "Exception", "(", "\"Cannot test in training mode\"", ")", "\n", "", "z", "=", "self", ".", "encode", "(", "x", ",", "train_pos_edge_index", ")", "\n", "pos_y", "=", "z", ".", "new_ones", "(", "test_pos_edge_index", ".", "size", "(", "1", ")", ")", "\n", "neg_y", "=", "z", ".", "new_zeros", "(", "test_neg_edge_index", ".", "size", "(", "1", ")", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "pos_y", ",", "neg_y", "]", ",", "dim", "=", "0", ")", "\n", "\n", "pos_pred", "=", "self", ".", "decoder", "(", "z", ",", "test_pos_edge_index", ",", "1", ",", "sigmoid", "=", "True", ",", "psi", "=", "self", ".", "psi", ")", "\n", "neg_pred", "=", "self", ".", "decoder", "(", "z", ",", "test_neg_edge_index", ",", "1", ",", "sigmoid", "=", "True", ",", "psi", "=", "self", ".", "psi", ")", "\n", "pred", "=", "torch", ".", "cat", "(", "[", "pos_pred", ",", "neg_pred", "]", ",", "dim", "=", "0", ")", "\n", "return", "y", ",", "pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.helpers.AutoName._generate_next_value_": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "_generate_next_value_", "(", "name", ",", "start", ",", "count", ",", "last_values", ")", ":", "\n", "        ", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.helpers.map_labels": [[26, 34], ["numpy.zeros", "range", "scipy.optimize.linear_sum_assignment", "max", "Y_pred.max", "Y.max", "np.zeros.max"], "function", ["None"], ["", "def", "map_labels", "(", "Y_pred", ",", "Y", ")", ":", "\n", "    ", "assert", "Y_pred", ".", "size", "==", "Y", ".", "size", "\n", "D", "=", "max", "(", "Y_pred", ".", "max", "(", ")", ",", "Y", ".", "max", "(", ")", ")", "+", "1", "\n", "w", "=", "np", ".", "zeros", "(", "(", "D", ",", "D", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "for", "i", "in", "range", "(", "Y_pred", ".", "size", ")", ":", "\n", "        ", "w", "[", "Y_pred", "[", "i", "]", ",", "Y", "[", "i", "]", "]", "+=", "1", "\n", "", "ind", "=", "linear_sum_assignment", "(", "w", ".", "max", "(", ")", "-", "w", ")", "\n", "return", "ind", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.helpers.matrix_to_cnl_format": [[36, 38], ["[].tolist", "range", "numpy.where"], "function", ["None"], ["", "def", "matrix_to_cnl_format", "(", "communities_assignment_matrix", ",", "num_communities", ")", ":", "\n", "    ", "return", "[", "np", ".", "where", "(", "communities_assignment_matrix", "[", "i", "]", ")", "[", "0", "]", ".", "tolist", "(", ")", "for", "i", "in", "range", "(", "num_communities", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.helpers.predict_node_classification": [[40, 47], ["sklearn.linear_model.LogisticRegression().fit", "LogisticRegression().fit.predict().astype", "train_z.detach().cpu().numpy", "train_y.detach().cpu().numpy", "sklearn.linear_model.LogisticRegression", "LogisticRegression().fit.predict", "train_z.detach().cpu", "train_y.detach().cpu", "test_z.detach().cpu().numpy", "train_z.detach", "train_y.detach", "test_z.detach().cpu", "test_z.detach"], "function", ["None"], ["", "def", "predict_node_classification", "(", "train_z", ",", "train_y", ",", "test_z", ",", "\n", "# solver='lbfgs',", "\n", "solver", "=", "'liblinear'", ",", "multi_class", "=", "'auto'", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "clf", "=", "LogisticRegression", "(", "solver", "=", "solver", ",", "multi_class", "=", "multi_class", ",", "*", "args", ",", "**", "kwargs", ")", ".", "fit", "(", "train_z", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "train_y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "return", "clf", ".", "predict", "(", "test_z", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.helpers.kv_to_print_str": [[49, 51], ["str().replace", "kvs.items", "str"], "function", ["None"], ["", "def", "kv_to_print_str", "(", "kvs", ")", ":", "\n", "    ", "return", "\"\"", ".", "join", "(", "[", "\"{}: {:.4f}||\\t\"", ".", "format", "(", "str", "(", "k", ")", ".", "replace", "(", "\"Scores.\"", ",", "\"\"", ")", ",", "v", ")", "for", "k", ",", "v", "in", "kvs", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.helpers.scores": [[53, 82], ["print", "sklearn.metrics.adjusted_rand_score", "helpers.kv_to_print_str", "sklearn.metrics.normalized_mutual_info_score", "helpers.map_labels", "helpers.map_labels", "utils_from_vgraph.calc_f1", "utils_from_vgraph.calc_jaccard", "sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "Exception"], "function", ["home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.helpers.kv_to_print_str", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.helpers.map_labels", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.helpers.map_labels", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.calc_f1", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.calc_jaccard"], ["", "def", "scores", "(", "keys", ",", "match_labels", "=", "True", ",", "print_down", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "match_labels", ":", "\n", "        ", "if", "'communities'", "in", "kwargs", "and", "'communities_pred'", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'communities_pred'", "]", "=", "map_labels", "(", "kwargs", "[", "'communities_pred'", "]", ",", "kwargs", "[", "'communities'", "]", ")", "[", "1", "]", "[", "kwargs", "[", "'communities_pred'", "]", "]", "\n", "", "if", "'node_classes'", "in", "kwargs", "and", "'node_classes'", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'node_classes_pred'", "]", "=", "map_labels", "(", "kwargs", "[", "'node_classes_pred'", "]", ",", "kwargs", "[", "'node_classes'", "]", ")", "[", "1", "]", "[", "kwargs", "[", "'node_classes_pred'", "]", "]", "\n", "\n", "", "", "ret", "=", "{", "}", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "if", "key", "==", "Scores", ".", "COMMUNITY_ARI", ":", "\n", "            ", "v", "=", "adjusted_rand_score", "(", "kwargs", "[", "'communities'", "]", ",", "kwargs", "[", "'communities_pred'", "]", ")", "\n", "", "elif", "key", "==", "Scores", ".", "COMMUNITY_NMI", ":", "\n", "            ", "v", "=", "normalized_mutual_info_score", "(", "kwargs", "[", "'communities'", "]", ",", "kwargs", "[", "'communities_pred'", "]", ",", "average_method", "=", "'arithmetic'", ")", "\n", "", "elif", "key", "==", "Scores", ".", "COMMUNITY_OVERLAPPING_F1", ":", "\n", "            ", "v", "=", "calc_f1", "(", "kwargs", "[", "'communities_cnl_pred'", "]", ",", "kwargs", "[", "'communities_cnl'", "]", ")", "\n", "", "elif", "key", "==", "Scores", ".", "COMMUNITY_OVERLAPPING_JACCARD", ":", "\n", "            ", "v", "=", "calc_jaccard", "(", "kwargs", "[", "'communities_cnl_pred'", "]", ",", "kwargs", "[", "'communities_cnl'", "]", ")", "\n", "", "elif", "key", "==", "Scores", ".", "NODE_CLASSIFICATION_ACCURACY", ":", "\n", "            ", "v", "=", "accuracy_score", "(", "kwargs", "[", "'node_classes'", "]", ",", "kwargs", "[", "'node_classes_pred'", "]", ")", "\n", "", "elif", "key", "==", "Scores", ".", "NODE_CLASSIFICATION_F1_MICRO", ":", "\n", "            ", "v", "=", "f1_score", "(", "kwargs", "[", "'node_classes'", "]", ",", "kwargs", "[", "'node_classes_pred'", "]", ",", "average", "=", "'micro'", ")", "\n", "", "elif", "key", "==", "Scores", ".", "NODE_CLASSIFICATION_F1_MACRO", ":", "\n", "            ", "v", "=", "f1_score", "(", "kwargs", "[", "'node_classes'", "]", ",", "kwargs", "[", "'node_classes_pred'", "]", ",", "average", "=", "'macro'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Unknown key\"", ")", "\n", "", "ret", "[", "key", "]", "=", "v", "\n", "", "if", "print_down", ":", "\n", "        ", "print", "(", "kv_to_print_str", "(", "ret", ")", ")", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.NF1.__init__": [[9, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "communities", ",", "ground_truth", ")", ":", "\n", "        ", "self", ".", "matched_gt", "=", "{", "}", "\n", "self", ".", "gt_count", "=", "0", "\n", "self", ".", "id_count", "=", "0", "\n", "self", ".", "gt_nodes", "=", "{", "}", "\n", "self", ".", "id_nodes", "=", "{", "}", "\n", "self", ".", "communities", "=", "communities", "\n", "self", ".", "ground_truth", "=", "ground_truth", "\n", "self", ".", "prl", "=", "[", "]", "\n", "# self.__compute_precision_recall()", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.NF1.get_f1": [[20, 42], ["gt_coms.items", "ext_coms.items", "f1_list.append", "f2_list.append", "enumerate", "enumerate", "utils_from_vgraph.NF1.__compute_f1", "numpy.max", "utils_from_vgraph.NF1.__compute_f1", "numpy.max", "numpy.mean", "numpy.mean", "ext_coms.items", "gt_coms.items"], "methods", ["home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.NF1.__compute_f1", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.NF1.__compute_f1"], ["", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :param prl: list of tuples (precision, recall)\n        :return: a tuple composed by (average_f1, std_f1)\n        \"\"\"", "\n", "\n", "gt_coms", "=", "{", "cid", ":", "nodes", "for", "cid", ",", "nodes", "in", "enumerate", "(", "self", ".", "ground_truth", ")", "}", "\n", "ext_coms", "=", "{", "cid", ":", "nodes", "for", "cid", ",", "nodes", "in", "enumerate", "(", "self", ".", "communities", ")", "}", "\n", "\n", "f1_list", "=", "[", "]", "\n", "for", "cid", ",", "nodes", "in", "gt_coms", ".", "items", "(", ")", ":", "\n", "            ", "tmp", "=", "[", "self", ".", "__compute_f1", "(", "nodes2", ",", "nodes", ")", "for", "_", ",", "nodes2", "in", "ext_coms", ".", "items", "(", ")", "]", "\n", "f1_list", ".", "append", "(", "np", ".", "max", "(", "tmp", ")", ")", "\n", "\n", "", "f2_list", "=", "[", "]", "\n", "for", "cid", ",", "nodes", "in", "ext_coms", ".", "items", "(", ")", ":", "\n", "            ", "tmp", "=", "[", "self", ".", "__compute_f1", "(", "nodes", ",", "nodes2", ")", "for", "_", ",", "nodes2", "in", "gt_coms", ".", "items", "(", ")", "]", "\n", "f2_list", ".", "append", "(", "np", ".", "max", "(", "tmp", ")", ")", "\n", "\n", "# print(f1_list, f2_list)", "\n", "", "return", "(", "np", ".", "mean", "(", "f1_list", ")", "+", "np", ".", "mean", "(", "f2_list", ")", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.NF1.__compute_f1": [[43, 56], ["set", "set", "float", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "__compute_f1", "(", "self", ",", "c", ",", "gt", ")", ":", "\n", "        ", "c", "=", "set", "(", "c", ")", "\n", "gt", "=", "set", "(", "gt", ")", "\n", "\n", "try", ":", "\n", "            ", "precision", "=", "len", "(", "[", "x", "for", "x", "in", "c", "if", "x", "in", "gt", "]", ")", "/", "len", "(", "c", ")", "\n", "recall", "=", "len", "(", "[", "x", "for", "x", "in", "gt", "if", "x", "in", "c", "]", ")", "/", "len", "(", "gt", ")", "\n", "x", ",", "y", "=", "precision", ",", "recall", "\n", "z", "=", "2", "*", "(", "x", "*", "y", ")", "/", "(", "x", "+", "y", ")", "\n", "z", "=", "float", "(", "\"%.2f\"", "%", "z", ")", "\n", "return", "z", "\n", "", "except", "ZeroDivisionError", ":", "\n", "            ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.calc_jaccard": [[58, 78], ["gt_coms.items", "ext_coms.items", "f1_list.append", "f2_list.append", "set", "set", "len", "len", "enumerate", "enumerate", "utils_from_vgraph.calc_jaccard.func"], "function", ["None"], ["", "", "", "def", "calc_jaccard", "(", "result_comm_list", ",", "ground_truth_comm_list", ")", ":", "\n", "    ", "def", "func", "(", "s1", ",", "s2", ")", ":", "\n", "        ", "s1", ",", "s2", "=", "set", "(", "s1", ")", ",", "set", "(", "s2", ")", "\n", "return", "len", "(", "s1", ".", "intersection", "(", "s2", ")", ")", "/", "len", "(", "s1", ".", "union", "(", "s2", ")", ")", "\n", "\n", "", "gt_coms", "=", "{", "cid", ":", "nodes", "for", "cid", ",", "nodes", "in", "enumerate", "(", "ground_truth_comm_list", ")", "}", "\n", "ext_coms", "=", "{", "cid", ":", "nodes", "for", "cid", ",", "nodes", "in", "enumerate", "(", "result_comm_list", ")", "}", "\n", "\n", "f1_list", "=", "[", "]", "\n", "for", "_", ",", "nodes", "in", "gt_coms", ".", "items", "(", ")", ":", "\n", "        ", "tmp", "=", "[", "func", "(", "nodes2", ",", "nodes", ")", "for", "_", ",", "nodes2", "in", "ext_coms", ".", "items", "(", ")", "]", "\n", "f1_list", ".", "append", "(", "np", ".", "max", "(", "tmp", ")", ")", "\n", "\n", "", "f2_list", "=", "[", "]", "\n", "for", "_", ",", "nodes", "in", "ext_coms", ".", "items", "(", ")", ":", "\n", "        ", "tmp", "=", "[", "func", "(", "nodes", ",", "nodes2", ")", "for", "_", ",", "nodes2", "in", "gt_coms", ".", "items", "(", ")", "]", "\n", "f2_list", ".", "append", "(", "np", ".", "max", "(", "tmp", ")", ")", "\n", "\n", "# print(f1_list, f2_list)", "\n", "", "return", "(", "np", ".", "mean", "(", "f1_list", ")", "+", "np", ".", "mean", "(", "f2_list", ")", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.calc_f1": [[80, 85], ["utils_from_vgraph.NF1", "utils_from_vgraph.NF1.get_f1", "len", "len"], "function", ["home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.NF1.get_f1"], ["", "def", "calc_f1", "(", "result_comm_list", ",", "ground_truth_comm_list", ")", ":", "\n", "# print(len(result_comm_list), len(ground_truth_comm_list))", "\n", "    ", "assert", "len", "(", "result_comm_list", ")", "==", "len", "(", "ground_truth_comm_list", ")", "\n", "nf", "=", "NF1", "(", "result_comm_list", ",", "ground_truth_comm_list", ")", "\n", "return", "nf", ".", "get_f1", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.write_to_file": [[87, 91], ["open", "f.write", "map"], "function", ["None"], ["", "def", "write_to_file", "(", "fpath", ",", "clist", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "c", "in", "clist", ":", "\n", "            ", "f", ".", "write", "(", "' '", ".", "join", "(", "map", "(", "str", ",", "c", ")", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.calc_overlapping_nmi": [[93, 100], ["utils_from_vgraph.write_to_file", "utils_from_vgraph.write_to_file", "subprocess.check_output().decode", "os.remove", "os.remove", "float", "subprocess.check_output", "check_output().decode.split"], "function", ["home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.write_to_file", "home.repos.pwc.inspect_result.RayyanRiaz_vecoder.None.utils_from_vgraph.write_to_file"], ["", "", "", "def", "calc_overlapping_nmi", "(", "communities_pred_cnl_format", ",", "communities_cnl_format", ")", ":", "\n", "    ", "write_to_file", "(", "'./gt'", ",", "communities_cnl_format", ")", "\n", "write_to_file", "(", "'./pred'", ",", "communities_pred_cnl_format", ")", "\n", "ret", "=", "check_output", "(", "[", "\"./onmi\"", ",", "\"pred\"", ",", "\"gt\"", "]", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "os", ".", "remove", "(", "'./gt'", ")", "\n", "os", ".", "remove", "(", "'./pred'", ")", "\n", "return", "float", "(", "ret", ".", "split", "(", "'\\n'", ")", "[", "2", "]", ")", "\n", "", ""]]}