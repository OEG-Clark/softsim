{"home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.Mesh_to_Image.Mesh_to_Image.__init__": [[73, 89], ["Mesh_to_Image.get_angles", "Mesh_to_Image.Mesh_to_Image.genrete_Image", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.Mesh_to_Image.get_angles", "home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.Mesh_to_Image.Mesh_to_Image.genrete_Image"], ["    ", "def", "__init__", "(", "self", ",", "image_folder", "=", "'data_train'", ",", "files_list", "=", "'file_list.txt'", ",", "rot_angle", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param image_folder: Folder where all the images of mesh model will be saved\n        :param files_list: .txt file which contain all mesh models name\n        :param rot_angle: tuple of set of angles from which the model is rotated and taken images\n        \"\"\"", "\n", "rot_angle", "=", "get_angles", "(", ")", "\n", "\n", "if", "rot_angle", "==", "None", ":", "\n", "            ", "rot_angle", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "180", ")", ",", "(", "0", ",", "90", ")", ",", "(", "0", ",", "270", ")", ",", "(", "90", ",", "0", ")", ",", "(", "-", "90", ",", "0", ")", "]", "\n", "", "if", "not", "path", ".", "exists", "(", "image_folder", ")", ":", "\n", "            ", "makedirs", "(", "image_folder", ")", "\n", "", "self", ".", "rot_angle", "=", "rot_angle", "\n", "self", ".", "files_list", "=", "files_list", "\n", "self", ".", "image_folder", "=", "image_folder", "\n", "self", ".", "genrete_Image", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.Mesh_to_Image.Mesh_to_Image.genrete_Image": [[90, 144], ["open", "os.path.splitext", "print", "matplotlib.pyplot.figure", "mpl_toolkits.mplot3d.Axes3D", "stl.mesh.Mesh.from_file", "mpl_toolkits.mplot3d.Axes3D.add_collection3d", "stl.mesh.Mesh.from_file.points.flatten", "mpl_toolkits.mplot3d.Axes3D.auto_scale_xyz", "mpl_toolkits.mplot3d.Axes3D.set_axis_off", "mpl_toolkits.mplot3d.art3d.Poly3DCollection", "mpl_toolkits.mplot3d.Axes3D.view_init", "os.path.splitext", "os.path.join", "os.path.join", "matplotlib.pyplot.figure.canvas.draw", "numpy.fromstring", "data.reshape.reshape.reshape", "Mesh_to_Image.get_trim_image", "get_trim_image.save", "print", "file_path.split", "os.path.basename", "os.path.exists", "os.makedirs", "print", "matplotlib.pyplot.figure.canvas.tostring_rgb", "str", "str", "str", "matplotlib.pyplot.figure.canvas.get_width_height", "str", "str"], "methods", ["home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.Mesh_to_Image.get_trim_image"], ["", "def", "genrete_Image", "(", "self", ")", ":", "\n", "        ", "file_no", "=", "0", "\n", "files", "=", "open", "(", "self", ".", "files_list", ",", "'r'", ")", "\n", "for", "file", "in", "files", ":", "\n", "            ", "file_no", "+=", "1", "\n", "file_path", "=", "file", "[", ":", "-", "1", "]", "\n", "self", ".", "file_name", ",", "exe", "=", "path", ".", "splitext", "(", "file_path", ")", "\n", "print", "(", "str", "(", "file_no", ")", "+", "\" \"", "+", "self", ".", "file_name", "+", "exe", ")", "\n", "# Create a new plot", "\n", "figure", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "axes", "=", "mplot3d", ".", "Axes3D", "(", "figure", ")", "\n", "\n", "# Load the STL files and add the vectors to the plot", "\n", "Mesh", "=", "mesh", ".", "Mesh", ".", "from_file", "(", "file_path", ")", "\n", "axes", ".", "add_collection3d", "(", "mplot3d", ".", "art3d", ".", "Poly3DCollection", "(", "Mesh", ".", "vectors", ",", "edgecolor", "=", "'k'", ")", ")", "\n", "\n", "# Auto scale to the mesh size", "\n", "scale", "=", "Mesh", ".", "points", ".", "flatten", "(", "1", ")", "\n", "axes", ".", "auto_scale_xyz", "(", "scale", ",", "scale", ",", "scale", ")", "\n", "axes", ".", "set_axis_off", "(", ")", "\n", "\n", "# Generate Image from Different angle", "\n", "angle_no", "=", "0", "\n", "for", "angle", "in", "self", ".", "rot_angle", ":", "\n", "                ", "angle_no", "+=", "1", "\n", "axes", ".", "view_init", "(", "angle", "[", "0", "]", ",", "angle", "[", "1", "]", ")", "\n", "category_folder", "=", "file_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "\n", "# if angle == self.rot_angle[0] or angle == self.rot_angle[1]:", "\n", "#     folder_path = path.join(self.image_folder, 'data_1', category_folder)", "\n", "# elif angle == self.rot_angle[2] or angle == self.rot_angle[3]:", "\n", "#     folder_path = path.join(self.image_folder, 'data_2', category_folder)", "\n", "# elif angle == self.rot_angle[4] or angle == self.rot_angle[5]:", "\n", "#     folder_path = path.join(self.image_folder, 'data_3', category_folder)", "\n", "# else:", "\n", "#     raise Exception(\"self.rot_angle are more then 6\")", "\n", "\n", "\n", "file_base_name", ",", "_", "=", "path", ".", "splitext", "(", "path", ".", "basename", "(", "file_path", ")", ")", "\n", "folder_path", "=", "path", ".", "join", "(", "self", ".", "image_folder", ",", "category_folder", ",", "file_base_name", ")", "\n", "file_name", "=", "str", "(", "angle", "[", "0", "]", ")", "+", "\"_\"", "+", "str", "(", "angle", "[", "1", "]", ")", "+", "\".png\"", "\n", "image_file_path", "=", "path", ".", "join", "(", "folder_path", ",", "file_name", ")", "\n", "if", "not", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "                    ", "makedirs", "(", "folder_path", ")", "\n", "print", "(", "'Folder Created '", ",", "folder_path", ")", "\n", "\n", "# Image Creation", "\n", "", "figure", ".", "canvas", ".", "draw", "(", ")", "\n", "# Now we can save it to a numpy array.", "\n", "data", "=", "np", ".", "fromstring", "(", "figure", ".", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "''", ")", "\n", "data", "=", "data", ".", "reshape", "(", "figure", ".", "canvas", ".", "get_width_height", "(", ")", "[", ":", ":", "-", "1", "]", "+", "(", "3", ",", ")", ")", "\n", "image", "=", "get_trim_image", "(", "data", ")", "\n", "image", ".", "save", "(", "image_file_path", ")", "\n", "print", "(", "str", "(", "file_no", ")", "+", "\",\"", "+", "str", "(", "angle_no", ")", "+", "\" >> \"", "+", "image_file_path", "+", "\"  Done!\"", ")", "\n", "# figure.clf()", "\n"]], "home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.Mesh_to_Image.get_image": [[8, 29], ["numpy.array", "range", "PIL.Image.fromarray", "range", "tuple"], "function", ["None"], ["def", "get_image", "(", "data", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "data", ")", "\n", "(", "X", ",", "Y", ",", "A", ")", "=", "img", ".", "shape", "\n", "x_min", ",", "y_min", "=", "X", ",", "Y", "\n", "x_max", ",", "y_max", "=", "0", ",", "0", "\n", "\n", "for", "x", "in", "range", "(", "X", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "Y", ")", ":", "\n", "            ", "if", "tuple", "(", "img", "[", "x", ",", "y", "]", ")", "!=", "(", "255", ",", "255", ",", "255", ")", ":", "\n", "                ", "if", "x", "<", "x_min", ":", "\n", "                    ", "x_min", "=", "x", "\n", "", "if", "y", "<", "y_min", ":", "\n", "                    ", "y_min", "=", "y", "\n", "", "if", "x", ">", "x_max", ":", "\n", "                    ", "x_max", "=", "x", "\n", "", "if", "y", ">", "y_max", ":", "\n", "                    ", "y_max", "=", "y", "\n", "\n", "", "", "", "", "offset", "=", "5", "\n", "my_image", "=", "data", "[", "x_min", "-", "offset", ":", "x_max", "+", "offset", ",", "y_min", "-", "offset", ":", "y_max", "+", "offset", "]", "\n", "return", "Image", ".", "fromarray", "(", "my_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.Mesh_to_Image.get_trim_image": [[30, 43], ["PIL.Image.fromarray", "Image.fromarray.thumbnail", "Mesh_to_Image.get_trim_image.trim"], "function", ["None"], ["", "def", "get_trim_image", "(", "data", ")", ":", "\n", "\n", "    ", "def", "trim", "(", "im", ",", "border", ")", ":", "\n", "      ", "bg", "=", "Image", ".", "new", "(", "im", ".", "mode", ",", "im", ".", "size", ",", "border", ")", "\n", "diff", "=", "ImageChops", ".", "difference", "(", "im", ",", "bg", ")", "\n", "bbox", "=", "diff", ".", "getbbox", "(", ")", "\n", "if", "bbox", ":", "\n", "        ", "print", "(", "bbox", ")", "\n", "return", "im", ".", "crop", "(", "bbox", ")", "\n", "\n", "", "", "image", "=", "Image", ".", "fromarray", "(", "data", ")", "\n", "image", ".", "thumbnail", "(", "(", "500", ",", "500", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "return", "trim", "(", "image", ",", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.Mesh_to_Image.get_angles": [[44, 69], ["numpy.hypot", "numpy.hypot", "numpy.arctan2", "numpy.arctan2", "angles.append", "numpy.sqrt", "float", "float", "float", "Mesh_to_Image.get_angles.cart2sph"], "function", ["None"], ["", "def", "get_angles", "(", ")", ":", "\n", "    ", "the", "=", "(", "1", "+", "np", ".", "sqrt", "(", "5", ")", ")", "/", "2", "\n", "in_the", "=", "1", "/", "the", "\n", "\n", "def", "cart2sph", "(", "coordinates", ")", ":", "\n", "        ", "(", "x", ",", "y", ",", "z", ")", "=", "coordinates", "\n", "hxy", "=", "np", ".", "hypot", "(", "x", ",", "y", ")", "\n", "r", "=", "np", ".", "hypot", "(", "hxy", ",", "z", ")", "\n", "el", "=", "np", ".", "arctan2", "(", "z", ",", "hxy", ")", "\n", "az", "=", "np", ".", "arctan2", "(", "y", ",", "x", ")", "\n", "az", ",", "el", ",", "r", "=", "float", "(", "\"{0:.2f}\"", ".", "format", "(", "np", ".", "rad2deg", "(", "az", ")", ")", ")", ",", "float", "(", "\"{0:.2f}\"", ".", "format", "(", "np", ".", "rad2deg", "(", "el", ")", ")", ")", ",", "float", "(", "\"{0:.2f}\"", ".", "format", "(", "r", ")", ")", "\n", "return", "(", "el", ",", "az", ",", "r", ")", "\n", "\n", "", "Cartesian_coordinates", "=", "[", "(", "1", ",", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ",", "1", ")", ",", "(", "1", ",", "-", "1", ",", "1", ")", ",", "(", "-", "1", ",", "-", "1", ",", "1", ")", ",", "(", "1", ",", "1", ",", "-", "1", ")", ",", "(", "-", "1", ",", "1", ",", "-", "1", ")", ",", "(", "1", ",", "-", "1", ",", "-", "1", ")", ",", "(", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "\n", "(", "0", ",", "the", ",", "in_the", ")", ",", "(", "0", ",", "-", "the", ",", "in_the", ")", ",", "(", "0", ",", "the", ",", "-", "in_the", ")", ",", "(", "0", ",", "-", "the", ",", "-", "in_the", ")", ",", "\n", "(", "in_the", ",", "0", ",", "the", ")", ",", "(", "-", "in_the", ",", "0", ",", "the", ")", ",", "(", "in_the", ",", "0", ",", "-", "the", ")", ",", "(", "-", "in_the", ",", "0", ",", "-", "the", ")", ",", "\n", "(", "the", ",", "in_the", ",", "0", ")", ",", "(", "-", "the", ",", "in_the", ",", "0", ")", ",", "(", "the", ",", "-", "in_the", ",", "0", ")", ",", "(", "-", "the", ",", "-", "in_the", ",", "0", ")", "]", "\n", "\n", "angles", "=", "[", "]", "\n", "for", "cc", "in", "Cartesian_coordinates", ":", "\n", "        ", "angles", ".", "append", "(", "cart2sph", "(", "cc", ")", ")", "\n", "\n", "", "return", "angles", "\n", "\n"]], "home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.LFD_CNN.network": [[17, 177], ["keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "math.ceil", "class_weight.compute_class_weight", "LFD_CNN.network.model_v3"], "function", ["None"], ["def", "network", "(", ")", ":", "\n", "\n", "    ", "train_folder", "=", "'Data_lfd_split_train_test/train_dir'", "\n", "test_folder", "=", "'Data_lfd_split_train_test/test_dir'", "\n", "target_size", "=", "(", "256", ",", "256", ")", "\n", "batch_size", "=", "20", "\n", "np_epochs", "=", "100", "\n", "dropout", "=", "0.2", "\n", "\n", "train_datagen", "=", "ImageDataGenerator", "(", "rescale", "=", "1.", "/", "255", ",", "\n", "shear_range", "=", "0.2", ",", "\n", "zoom_range", "=", "0.2", ",", "\n", "horizontal_flip", "=", "True", ")", "\n", "\n", "test_datagen", "=", "ImageDataGenerator", "(", "rescale", "=", "1.", "/", "255", ")", "\n", "\n", "training_set", "=", "train_datagen", ".", "flow_from_directory", "(", "train_folder", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "target_size", "=", "target_size", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "class_mode", "=", "\"categorical\"", ")", "\n", "\n", "test_set", "=", "test_datagen", ".", "flow_from_directory", "(", "test_folder", ",", "\n", "color_mode", "=", "'grayscale'", ",", "\n", "target_size", "=", "target_size", ",", "\n", "batch_size", "=", "1", ",", "\n", "class_mode", "=", "\"categorical\"", ")", "\n", "\n", "steps_per_epoch", "=", "ceil", "(", "training_set", ".", "samples", "/", "batch_size", ")", "\n", "\n", "# Optimise the class weight because of class imbalance", "\n", "from", "sklearn", ".", "utils", "import", "class_weight", "\n", "class_weights", "=", "class_weight", ".", "compute_class_weight", "(", "'balanced'", ",", "\n", "np", ".", "unique", "(", "training_set", ".", "classes", ")", ",", "\n", "training_set", ".", "classes", ")", "\n", "\n", "# Initialising the CNN", "\n", "from", "keras", ".", "models", "import", "Model", ",", "Input", "\n", "from", "keras", ".", "optimizers", "import", "Adam", "\n", "from", "keras", ".", "layers", "import", "Dense", ",", "Conv2D", ",", "MaxPooling2D", ",", "Flatten", ",", "AveragePooling2D", ",", "Dropout", ",", "BatchNormalization", ",", "Activation", ",", "add", "\n", "from", "keras", "import", "metrics", "\n", "\n", "\n", "def", "Unit", "(", "x", ",", "filters", ",", "pool", "=", "False", ")", ":", "\n", "        ", "res", "=", "x", "\n", "if", "pool", ":", "\n", "            ", "x", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", "(", "x", ")", "\n", "res", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "[", "1", ",", "1", "]", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"same\"", ")", "(", "res", ")", "\n", "", "out", "=", "BatchNormalization", "(", ")", "(", "x", ")", "\n", "out", "=", "Activation", "(", "\"relu\"", ")", "(", "out", ")", "\n", "out", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "[", "3", ",", "3", "]", ",", "strides", "=", "[", "1", ",", "1", "]", ",", "padding", "=", "\"same\"", ")", "(", "out", ")", "\n", "\n", "out", "=", "BatchNormalization", "(", ")", "(", "out", ")", "\n", "out", "=", "Activation", "(", "\"relu\"", ")", "(", "out", ")", "\n", "out", "=", "Conv2D", "(", "filters", "=", "filters", ",", "kernel_size", "=", "[", "3", ",", "3", "]", ",", "strides", "=", "[", "1", ",", "1", "]", ",", "padding", "=", "\"same\"", ")", "(", "out", ")", "\n", "\n", "out", "=", "add", "(", "[", "res", ",", "out", "]", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "def", "model_v3", "(", ")", ":", "\n", "        ", "images", "=", "Input", "(", "(", "256", ",", "256", ",", "1", ")", ")", "\n", "\n", "net", "=", "Conv2D", "(", "32", ",", "(", "7", ",", "7", ")", ",", "activation", "=", "'relu'", ",", "padding", "=", "\"same\"", ")", "(", "images", ")", "\n", "\n", "# TODO: check the accuracy with net = Conv2D(64, (7, 7), activation='relu',padding=\"same\")(images) and coment out next three 32 lines", "\n", "\n", "net", "=", "Unit", "(", "net", ",", "32", ")", "\n", "net", "=", "Unit", "(", "net", ",", "32", ")", "\n", "net", "=", "Unit", "(", "net", ",", "32", ")", "\n", "\n", "net", "=", "Unit", "(", "net", ",", "64", ",", "pool", "=", "True", ")", "\n", "net", "=", "Unit", "(", "net", ",", "64", ")", "\n", "net", "=", "Unit", "(", "net", ",", "64", ")", "\n", "\n", "net", "=", "Unit", "(", "net", ",", "128", ",", "pool", "=", "True", ")", "\n", "net", "=", "Unit", "(", "net", ",", "128", ")", "\n", "net", "=", "Unit", "(", "net", ",", "128", ")", "\n", "\n", "net", "=", "Unit", "(", "net", ",", "256", ",", "pool", "=", "True", ")", "\n", "net", "=", "Unit", "(", "net", ",", "256", ")", "\n", "net", "=", "Unit", "(", "net", ",", "256", ")", "\n", "\n", "net", "=", "Unit", "(", "net", ",", "512", ",", "pool", "=", "True", ")", "\n", "net", "=", "Unit", "(", "net", ",", "512", ")", "\n", "net", "=", "Unit", "(", "net", ",", "512", ")", "\n", "\n", "net", "=", "BatchNormalization", "(", ")", "(", "net", ")", "\n", "net", "=", "Activation", "(", "\"relu\"", ")", "(", "net", ")", "\n", "net", "=", "Dropout", "(", "0.25", ")", "(", "net", ")", "\n", "\n", "net", "=", "AveragePooling2D", "(", "pool_size", "=", "(", "4", ",", "4", ")", ")", "(", "net", ")", "\n", "net", "=", "Flatten", "(", ")", "(", "net", ")", "\n", "net", "=", "Dense", "(", "units", "=", "512", ",", "activation", "=", "\"relu\"", ")", "(", "net", ")", "\n", "net", "=", "Dense", "(", "units", "=", "512", ",", "activation", "=", "\"relu\"", ")", "(", "net", ")", "\n", "net", "=", "Dense", "(", "units", "=", "test_set", ".", "num_classes", ",", "activation", "=", "\"softmax\"", ")", "(", "net", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "images", ",", "outputs", "=", "net", ")", "\n", "\n", "return", "model", "\n", "\n", "", "model", "=", "model_v3", "(", ")", "\n", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "model", ".", "compile", "(", "optimizer", "=", "Adam", "(", "0.001", ")", ",", "loss", "=", "\"categorical_crossentropy\"", ",", "metrics", "=", "[", "'acc'", ",", "metrics", ".", "mae", "]", ")", "\n", "\n", "# Time the network modul", "\n", "def", "printTime", "(", "start", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "duration", "=", "end", "-", "start", "\n", "if", "duration", "<", "60", ":", "\n", "            ", "return", "\"used: \"", "+", "str", "(", "round", "(", "duration", ",", "2", ")", ")", "+", "\"s.\"", "\n", "", "else", ":", "\n", "            ", "mins", "=", "int", "(", "duration", "/", "60", ")", "\n", "secs", "=", "round", "(", "duration", "%", "60", ",", "2", ")", "\n", "if", "mins", "<", "60", ":", "\n", "                ", "return", "\"used: \"", "+", "str", "(", "mins", ")", "+", "\"m \"", "+", "str", "(", "secs", ")", "+", "\"s.\"", "\n", "", "else", ":", "\n", "                ", "hours", "=", "int", "(", "duration", "/", "3600", ")", "\n", "mins", "=", "mins", "%", "60", "\n", "return", "\"used: \"", "+", "str", "(", "hours", ")", "+", "\"h \"", "+", "str", "(", "mins", ")", "+", "\"m \"", "+", "str", "(", "secs", ")", "+", "\"s.\"", "\n", "\n", "", "", "", "set_time", "=", "time", ".", "time", "(", ")", "\n", "plot_dir", "=", "f'Plot/{set_time}/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "plot_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "plot_dir", ")", "\n", "\n", "", "WEIGHT_FOLDER_NAME", "=", "f\"weights/{set_time}/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "WEIGHT_FOLDER_NAME", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "WEIGHT_FOLDER_NAME", ")", "\n", "\n", "# serialize model to JSON", "\n", "", "model_json", "=", "model", ".", "to_json", "(", ")", "\n", "with", "open", "(", "WEIGHT_FOLDER_NAME", "+", "str", "(", "time", ".", "time", "(", ")", ")", "+", "\".json\"", ",", "\"w\"", ")", "as", "json_file", ":", "\n", "        ", "json_file", ".", "write", "(", "model_json", ")", "\n", "\n", "\n", "", "plot_losses", "=", "TrainingPlot", "(", "filename", "=", "plot_dir", "+", "str", "(", "np_epochs", ")", "+", "'.jpg'", ")", "\n", "tensorboard", "=", "TensorBoard", "(", "log_dir", "=", "'TFlogs/CADNET_LFD_Logs/{}'", ".", "format", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "checkpoint", "=", "ModelCheckpoint", "(", "WEIGHT_FOLDER_NAME", "+", "\"{epoch:02d}-{val_acc:.2f}.model\"", ",", "monitor", "=", "'val_acc'", ",", "\n", "verbose", "=", "1", ",", "save_best_only", "=", "True", ",", "mode", "=", "'max'", ")", "# saves only the best ones", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "history", "=", "model", ".", "fit_generator", "(", "training_set", ",", "\n", "steps_per_epoch", "=", "steps_per_epoch", ",", "\n", "epochs", "=", "np_epochs", ",", "\n", "validation_data", "=", "test_set", ",", "\n", "validation_steps", "=", "test_set", ".", "samples", ",", "\n", "class_weight", "=", "class_weights", ",", "\n", "callbacks", "=", "[", "tensorboard", ",", "checkpoint", "]", ",", "\n", "verbose", "=", "1", ")", "\n", "\n", "training_time", "=", "printTime", "(", "start", ")", "\n", "\n", "\n", "[", "Loss", ",", "Accuracy", ",", "Mean_square_error", "]", "=", "model", ".", "evaluate_generator", "(", "test_set", ",", "steps", "=", "len", "(", "test_set", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.File_Searcher.File_Searcher.__init__": [[5, 20], ["os.path.isdir", "File_Searcher.File_Searcher.generate_file"], "methods", ["home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.File_Searcher.File_Searcher.generate_file"], ["    ", "def", "__init__", "(", "self", ",", "file_extension", "=", "None", ",", "search_folder", "=", "'Model_File_Folder'", ",", "output_file", "=", "'file_list'", ",", "limit", "=", "2000", ")", ":", "\n", "        ", "\"\"\"\n        :param file_extension: tuple of strings of file extensions which need to search in the search_folder. by default\n          file_extension = ['.STL', '.stl']\n        :param search_folder: Folder name where files will be searched\n        :param output_file: .txt file name which will have all the file path which have file extension == file_extension\n        \"\"\"", "\n", "assert", "path", ".", "isdir", "(", "search_folder", ")", "\n", "self", ".", "output_file", "=", "output_file", "\n", "self", ".", "limit", "=", "limit", "\n", "self", ".", "search_folder", "=", "search_folder", "\n", "if", "file_extension", "is", "None", ":", "\n", "            ", "file_extension", "=", "[", "'.STL'", ",", "'.stl'", "]", "\n", "", "self", ".", "file_extension", "=", "file_extension", "\n", "self", ".", "generate_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.File_Searcher.File_Searcher.generate_file": [[21, 36], ["open", "os.walk", "os.path.splitext", "open.write", "open.close", "open", "os.path.join"], "methods", ["None"], ["", "def", "generate_file", "(", "self", ")", ":", "\n", "        ", "output_file_count", "=", "1", "\n", "text_file", "=", "open", "(", "f\"{self.output_file}_{output_file_count}.txt\"", ",", "'w'", ")", "\n", "count", "=", "0", "\n", "for", "r", ",", "d", ",", "files", "in", "walk", "(", "self", ".", "search_folder", ")", ":", "\n", "            ", "for", "file", "in", "files", ":", "\n", "                ", "_", ",", "extension", "=", "path", ".", "splitext", "(", "file", ")", "\n", "if", "extension", "in", "self", ".", "file_extension", ":", "\n", "                    ", "text_file", ".", "write", "(", "path", ".", "join", "(", "r", ",", "file", ")", "+", "'\\n'", ")", "\n", "count", "+=", "1", "\n", "if", "count", ">=", "self", ".", "limit", ":", "\n", "                        ", "text_file", ".", "close", "(", ")", "\n", "output_file_count", "+=", "1", "\n", "text_file", "=", "open", "(", "f\"{self.output_file}_{output_file_count}.txt\"", ",", "'w'", ")", "\n", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bharadwaj-manda_CADNET-Dataset.None.split_train_test.split_train_test": [[4, 37], ["os.listdir", "os.path.exists", "Exception", "os.path.join", "os.listdir", "len", "range", "random.choice", "os.listdir.remove", "os.path.join", "os.path.join", "shutil.copytree", "os.path.join", "os.path.join", "shutil.copytree"], "function", ["None"], ["def", "split_train_test", "(", "dir", ",", "test_split", "=", "5", ")", ":", "\n", "\n", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"dir Not exist!\"", ")", "\n", "\n", "", "output_dir", "=", "dir", "+", "\"_split_train_test\"", "\n", "\n", "class_dir_list", "=", "os", ".", "listdir", "(", "dir", ")", "\n", "\n", "for", "class_dir", "in", "class_dir_list", ":", "\n", "        ", "class_dir_path", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "class_dir", ")", "\n", "\n", "model_dir_list", "=", "os", ".", "listdir", "(", "class_dir_path", ")", "\n", "file_no", "=", "len", "(", "model_dir_list", ")", "\n", "test_file_no", "=", "file_no", "//", "test_split", "\n", "for", "_", "in", "range", "(", "test_file_no", ")", ":", "\n", "            ", "test_dir", "=", "random", ".", "choice", "(", "model_dir_list", ")", "\n", "model_dir_list", ".", "remove", "(", "test_dir", ")", "\n", "source_dir", "=", "os", ".", "path", ".", "join", "(", "class_dir_path", ",", "test_dir", ")", "\n", "destination_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"test_dir\"", ",", "class_dir", ",", "test_dir", ")", "\n", "\n", "#print(\"source_dir: \", source_dir)", "\n", "#print(\"destination_dir: \", destination_dir)", "\n", "\n", "\n", "shutil", ".", "copytree", "(", "source_dir", ",", "destination_dir", ",", "symlinks", "=", "True", ",", "ignore", "=", "None", ")", "\n", "\n", "", "for", "train_dir", "in", "model_dir_list", ":", "\n", "            ", "source_dir", "=", "os", ".", "path", ".", "join", "(", "class_dir_path", ",", "train_dir", ")", "\n", "destination_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"train_dir\"", ",", "class_dir", ",", "train_dir", ")", "\n", "\n", "shutil", ".", "copytree", "(", "source_dir", ",", "destination_dir", ",", "symlinks", "=", "False", ",", "ignore", "=", "None", ")", "\n", "\n"]]}