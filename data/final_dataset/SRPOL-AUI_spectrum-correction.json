{"home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._main": [[38, 105], ["random.seed", "numpy.random.seed", "logger.info", "experiment.dcase.get_split", "prepare-dcase._print_stats", "train_frame.label.cat.categories.tolist", "train_frame.device.cat.categories.tolist", "logger.info", "logger.info", "args.data_dir.mkdir", "experiment.dcase.download", "prepare-dcase._preprocess_features", "len", "prepare-dcase.get_aligned_correction", "prepare-dcase.get_unaligned_correction", "h5py.File", "json.dumps", "json.dumps", "json.dumps", "json.dumps", "logger.info", "prepare-dcase._load_subset", "logger.info", "logger.info", "os.remove", "prepare-dcase._load_subset", "prepare-dcase._load_subset", "prepare-dcase.standardize_grouped", "prepare-dcase.standardize"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.get_split", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._print_stats", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.download", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._preprocess_features", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase.get_aligned_correction", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase.get_unaligned_correction", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._load_subset", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._load_subset", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._load_subset", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase.standardize_grouped", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase.standardize"], ["def", "_main", "(", "args", ")", ":", "\n", "    ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", "+", "1", ")", "\n", "\n", "assert", "args", ".", "no_correction", "or", "not", "args", ".", "grouped", "\n", "\n", "if", "not", "(", "args", ".", "data_dir", "/", "_DCASE_FOLDER", ")", ".", "exists", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Downloading the DCASE 2019 dataset.'", ")", "\n", "args", ".", "data_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "dcase", ".", "download", "(", "args", ".", "data_dir", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Loading metadata and preparing the split.'", ")", "\n", "train_frame", ",", "dev_frame", "=", "dcase", ".", "get_split", "(", "\n", "args", ".", "data_dir", "/", "_DCASE_FOLDER", ",", "\n", "args", ".", "split", ",", "\n", "args", ".", "validation_fraction", ",", "\n", "args", ".", "reuse", ",", "\n", "args", ".", "holdout_cities", ",", "\n", "retries", "=", "16", ",", "\n", "full_paths", "=", "True", ",", "\n", ")", "\n", "\n", "_print_stats", "(", "train_frame", ",", "dev_frame", ")", "\n", "if", "args", ".", "no_correction", ":", "\n", "        ", "correction", "=", "None", "\n", "", "elif", "args", ".", "aligned", ":", "\n", "        ", "correction", "=", "get_aligned_correction", "(", "args", ",", "train_frame", ")", "\n", "", "else", ":", "\n", "        ", "correction", "=", "get_unaligned_correction", "(", "args", ",", "train_frame", ")", "\n", "\n", "", "input_shape", "=", "_preprocess_features", "(", "train_frame", ".", "iloc", "[", "0", "]", ",", "correction", ",", "args", ")", ".", "shape", "\n", "classes", "=", "train_frame", ".", "label", ".", "cat", ".", "categories", ".", "tolist", "(", ")", "\n", "devices", "=", "train_frame", ".", "device", ".", "cat", ".", "categories", ".", "tolist", "(", ")", "\n", "class_weights", "=", "[", "1.0", "]", "*", "len", "(", "train_frame", ".", "label", ".", "cat", ".", "categories", ")", "\n", "\n", "try", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "args", ".", "output", ",", "'w'", ")", "as", "h5", ":", "\n", "            ", "h5", ".", "attrs", "[", "'name'", "]", "=", "'DCASE 2019 Mobile'", "\n", "\n", "h5", ".", "attrs", "[", "'input_shape'", "]", "=", "json", ".", "dumps", "(", "input_shape", ")", "\n", "h5", ".", "attrs", "[", "'classes'", "]", "=", "json", ".", "dumps", "(", "classes", ")", "\n", "h5", ".", "attrs", "[", "'devices'", "]", "=", "json", ".", "dumps", "(", "devices", ")", "\n", "h5", ".", "attrs", "[", "'class_weights'", "]", "=", "json", ".", "dumps", "(", "class_weights", ")", "\n", "\n", "logger", ".", "info", "(", "'Processing training files.'", ")", "\n", "_load_subset", "(", "h5", ",", "'train/all'", ",", "train_frame", ",", "input_shape", ",", "correction", ",", "args", ")", "\n", "for", "device", "in", "devices", ":", "\n", "                ", "current_frame", "=", "train_frame", "[", "train_frame", ".", "device", "==", "device", "]", "\n", "_load_subset", "(", "h5", ",", "f'train/{device}'", ",", "current_frame", ",", "input_shape", ",", "correction", ",", "args", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Processing development files.'", ")", "\n", "for", "device", "in", "devices", ":", "\n", "                ", "current_frame", "=", "dev_frame", "[", "dev_frame", ".", "device", "==", "device", "]", "\n", "_load_subset", "(", "h5", ",", "f'dev/{device}'", ",", "current_frame", ",", "input_shape", ",", "correction", ",", "args", ")", "\n", "\n", "", "if", "not", "args", ".", "no_standardization", ":", "\n", "                ", "if", "args", ".", "grouped", ":", "\n", "                    ", "standardize_grouped", "(", "h5", ",", "devices", ")", "\n", "", "else", ":", "\n", "                    ", "standardize", "(", "h5", ",", "devices", ")", "\n", "\n", "", "", "", "", "except", ":", "\n", "        ", "logger", ".", "info", "(", "'Deleting the dataset.'", ")", "\n", "os", ".", "remove", "(", "args", ".", "output", ")", "\n", "raise", "\n", "\n", "", "logger", ".", "info", "(", "'Done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._load_subset": [[107, 118], ["frame.label.cat.codes.tolist", "frame.device.cat.codes.tolist", "h5.create_dataset", "enumerate", "tqdm.tqdm", "prepare-dcase._preprocess_features", "frame.iterrows", "list", "len", "len", "experiment.correction", "experiment.correction", "experiment.correction"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._preprocess_features"], ["", "def", "_load_subset", "(", "h5", ",", "name", ",", "frame", ",", "input_shape", ",", "correction", ",", "args", ")", ":", "\n", "    ", "h5", "[", "f'{name}/label'", "]", "=", "frame", ".", "label", ".", "cat", ".", "codes", ".", "tolist", "(", ")", "\n", "h5", "[", "f'{name}/device'", "]", "=", "frame", ".", "device", ".", "cat", ".", "codes", ".", "tolist", "(", ")", "\n", "dataset", "=", "h5", ".", "create_dataset", "(", "\n", "f'{name}/features'", ",", "\n", "shape", "=", "[", "len", "(", "frame", ")", "]", "+", "list", "(", "input_shape", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "\n", "for", "i", ",", "(", "_", ",", "row", ")", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "frame", ".", "iterrows", "(", ")", ",", "total", "=", "len", "(", "frame", ")", ",", "unit", "=", "'file'", ")", ")", ":", "\n", "        ", "dataset", "[", "i", "]", "=", "_preprocess_features", "(", "row", ",", "correction", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._preprocess_features": [[120, 132], ["experiment.preprocessing.spectrogram", "numpy.expand_dims", "experiment.correction", "experiment.correction"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.spectrogram"], ["", "", "def", "_preprocess_features", "(", "row", ",", "correction", ",", "args", ")", ":", "\n", "    ", "features", "=", "preprocessing", ".", "spectrogram", "(", "\n", "row", ",", "\n", "correction", ",", "\n", "args", ".", "num_fft", ",", "\n", "args", ".", "hop_length", ",", "\n", "args", ".", "power", ",", "\n", "args", ".", "num_mels", ",", "\n", "args", ".", "htk", ",", "\n", "not", "args", ".", "no_norm", ",", "\n", ")", "\n", "return", "np", ".", "expand_dims", "(", "features", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._proportions": [[134, 151], ["training[].value_counts", "validation[].value_counts", "pandas.concat", "props.fillna.fillna", "pandas.MultiIndex.from_product", "len", "len"], "function", ["None"], ["", "def", "_proportions", "(", "training", ",", "validation", ",", "column", ")", ":", "\n", "    ", "training_counts", "=", "training", "[", "column", "]", ".", "value_counts", "(", ")", "\n", "validation_counts", "=", "validation", "[", "column", "]", ".", "value_counts", "(", ")", "\n", "\n", "props", "=", "pd", ".", "concat", "(", "[", "\n", "training_counts", ",", "\n", "validation_counts", ",", "\n", "training_counts", "/", "len", "(", "training", ")", ",", "\n", "validation_counts", "/", "len", "(", "validation", ")", ",", "\n", "]", ",", "axis", "=", "1", ")", "\n", "\n", "props", "=", "props", ".", "fillna", "(", "0", ")", "\n", "props", ".", "columns", "=", "pd", ".", "MultiIndex", ".", "from_product", "(", "[", "\n", "[", "'count'", ",", "'fraction'", "]", ",", "\n", "[", "'training'", ",", "'validation'", "]", "\n", "]", ")", "\n", "return", "props", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._print_stats": [[153, 172], ["len", "len", "prepare-dcase._proportions", "prepare-dcase._proportions", "prepare-dcase._proportions", "print", "len", "len"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._proportions", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._proportions", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase._proportions"], ["", "def", "_print_stats", "(", "training", ",", "validation", ")", ":", "\n", "    ", "training_size", "=", "len", "(", "training", ")", "\n", "validation_size", "=", "len", "(", "validation", ")", "\n", "total_size", "=", "len", "(", "validation", ")", "+", "len", "(", "training", ")", "\n", "labels", "=", "_proportions", "(", "training", ",", "validation", ",", "'label'", ")", "\n", "devices", "=", "_proportions", "(", "training", ",", "validation", ",", "'device'", ")", "\n", "cities", "=", "_proportions", "(", "training", ",", "validation", ",", "'city'", ")", "\n", "\n", "print", "(", "\n", "f'Training size = {training_size}, validation size = {validation_size}, total = {total_size}'", ",", "\n", "'labels stats:'", ",", "\n", "labels", ",", "\n", "''", ",", "\n", "'devices stats:'", ",", "\n", "devices", ",", "\n", "''", ",", "\n", "'cities stats:'", ",", "\n", "cities", ",", "\n", "sep", "=", "'\\n'", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase.get_aligned_correction": [[175, 194], ["experiment.dcase.get_aligned_recordings", "sc.AlignedSpectrumCorrection.fit", "experiment.correction.AlignedSpectrumCorrectionFIR", "logger.info", "experiment.correction.AlignedSpectrumCorrection", "logger.info", "experiment.preprocessing.read_wave", "row.items"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.get_aligned_recordings", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.fit", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.read_wave"], ["", "def", "get_aligned_correction", "(", "args", ",", "train_frame", ")", ":", "\n", "    ", "if", "args", ".", "fir", ":", "\n", "        ", "correction", "=", "sc", ".", "AlignedSpectrumCorrectionFIR", "(", "args", ".", "num_taps", ",", "args", ".", "num_fft", ",", "args", ".", "hop_length", ")", "\n", "logger", ".", "info", "(", "'Computing correction coefficients for FIR filters (aligned).'", ")", "\n", "", "else", ":", "\n", "        ", "correction", "=", "sc", ".", "AlignedSpectrumCorrection", "(", "args", ".", "num_fft", ",", "args", ".", "hop_length", ")", "\n", "logger", ".", "info", "(", "'Computing correction coefficients. (aligned)'", ")", "\n", "\n", "", "aligned_recordings", "=", "dcase", ".", "get_aligned_recordings", "(", "train_frame", ",", "args", ".", "num_samples", ")", "\n", "# generator of dicts (load on the fly)", "\n", "aligned_recordings", "=", "(", "\n", "{", "\n", "device", ":", "preprocessing", ".", "read_wave", "(", "path", ")", "[", "0", "]", "\n", "for", "device", ",", "path", "in", "row", ".", "items", "(", ")", "\n", "}", "for", "row", "in", "aligned_recordings", "\n", ")", "\n", "correction", ".", "fit", "(", "aligned_recordings", ",", "args", ".", "reference", ")", "\n", "\n", "return", "correction", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase.get_unaligned_correction": [[196, 213], ["experiment.dcase.get_unaligned_recordings", "sc.UnalignedSpectrumCorrection.fit", "experiment.correction.UnalignedSpectrumCorrectionFIR", "logger.info", "experiment.correction.UnalignedSpectrumCorrection", "logger.info", "dcase.get_unaligned_recordings.items", "experiment.preprocessing.read_wave"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.get_unaligned_recordings", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.fit", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.read_wave"], ["", "def", "get_unaligned_correction", "(", "args", ",", "train_frame", ")", ":", "\n", "    ", "if", "args", ".", "fir", ":", "\n", "        ", "correction", "=", "sc", ".", "UnalignedSpectrumCorrectionFIR", "(", "args", ".", "num_taps", ",", "args", ".", "num_fft", ",", "args", ".", "hop_length", ")", "\n", "logger", ".", "info", "(", "'Computing correction coefficients for FIR filters (unaligned).'", ")", "\n", "", "else", ":", "\n", "        ", "correction", "=", "sc", ".", "UnalignedSpectrumCorrection", "(", "args", ".", "num_fft", ",", "args", ".", "hop_length", ")", "\n", "logger", ".", "info", "(", "'Computing correction coefficients. (unaligned)'", ")", "\n", "\n", "", "shuffled_recordings", "=", "dcase", ".", "get_unaligned_recordings", "(", "train_frame", ",", "args", ".", "num_samples", ")", "\n", "# dict of generators/iterables (load on the fly)", "\n", "shuffled_recordings", "=", "{", "\n", "device", ":", "(", "preprocessing", ".", "read_wave", "(", "path", ")", "[", "0", "]", "for", "path", "in", "paths", ")", "\n", "for", "device", ",", "paths", "in", "shuffled_recordings", ".", "items", "(", ")", "\n", "}", "\n", "correction", ".", "fit", "(", "shuffled_recordings", ",", "args", ".", "reference", ")", "\n", "\n", "return", "correction", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase.standardize": [[215, 229], ["logger.info", "experiment.preprocessing.compute_standardization", "logger.info", "experiment.preprocessing.apply_standardization", "logger.info", "experiment.preprocessing.apply_standardization", "logger.info", "experiment.preprocessing.apply_standardization"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.compute_standardization", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.apply_standardization", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.apply_standardization", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.apply_standardization"], ["", "def", "standardize", "(", "h5", ",", "devices", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'Computing standardization.'", ")", "\n", "standardization", "=", "preprocessing", ".", "compute_standardization", "(", "\n", "h5", "[", "'train/all/features'", "]", ",", "\n", "axes", "=", "[", "0", ",", "2", "]", ",", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "'Applying standardization to training features.'", ")", "\n", "preprocessing", ".", "apply_standardization", "(", "h5", "[", "'train/all/features'", "]", ",", "standardization", ")", "\n", "for", "device", "in", "devices", ":", "\n", "        ", "logger", ".", "info", "(", "'Applying standardization to training features (device %s).'", ",", "device", ")", "\n", "preprocessing", ".", "apply_standardization", "(", "h5", "[", "'train'", "]", "[", "device", "]", "[", "'features'", "]", ",", "standardization", ")", "\n", "logger", ".", "info", "(", "'Applying standardization to developement features (device %s).'", ",", "device", ")", "\n", "preprocessing", ".", "apply_standardization", "(", "h5", "[", "'dev'", "]", "[", "device", "]", "[", "'features'", "]", ",", "standardization", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.prepare-dcase.standardize_grouped": [[231, 249], ["logger.info", "experiment.preprocessing.apply_grouped_standardization", "experiment.preprocessing.compute_standardization", "logger.info", "experiment.preprocessing.apply_grouped_standardization", "logger.info", "experiment.preprocessing.apply_grouped_standardization"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.apply_grouped_standardization", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.compute_standardization", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.apply_grouped_standardization", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.apply_grouped_standardization"], ["", "", "def", "standardize_grouped", "(", "h5", ",", "devices", ")", ":", "\n", "    ", "standardization", "=", "[", "\n", "preprocessing", ".", "compute_standardization", "(", "\n", "h5", "[", "'train'", "]", "[", "device", "]", "[", "'features'", "]", ",", "\n", "axes", "=", "[", "0", ",", "2", "]", ",", "\n", ")", "for", "device", "in", "devices", "\n", "]", "\n", "logger", ".", "info", "(", "'Applying standardization to training features.'", ")", "\n", "preprocessing", ".", "apply_grouped_standardization", "(", "h5", "[", "'train/all/features'", "]", ",", "h5", "[", "'train/all/device'", "]", ",", "\n", "standardization", ")", "\n", "for", "device", "in", "devices", ":", "\n", "        ", "logger", ".", "info", "(", "'Applying standardization to training features (device %s).'", ",", "device", ")", "\n", "preprocessing", ".", "apply_grouped_standardization", "(", "h5", "[", "'train'", "]", "[", "device", "]", "[", "'features'", "]", ",", "\n", "h5", "[", "'train'", "]", "[", "device", "]", "[", "'device'", "]", ",", "\n", "standardization", ")", "\n", "logger", ".", "info", "(", "'Applying standardization to developement features (device %s).'", ",", "device", ")", "\n", "preprocessing", ".", "apply_grouped_standardization", "(", "h5", "[", "'dev'", "]", "[", "device", "]", "[", "'features'", "]", ",", "\n", "h5", "[", "'dev'", "]", "[", "device", "]", "[", "'device'", "]", ",", "standardization", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.train._train": [[20, 97], ["experiment.utils.setup_experiment", "str", "experiment.sequences.HDF5Batch", "experiment.sequences.Sparse2OneHot", "experiment.models.build_model", "experiment.models.build_model.compile", "experiment.models.build_model.fit_generator", "print", "h5py.File", "json.loads", "json.loads", "json.loads", "len", "experiment.sequences.Mixup", "train._validation_hooks", "train._validation_hooks", "experiment.callbacks.Timer", "tensorflow.python.keras.callbacks.ModelCheckpoint", "tensorflow.python.keras.callbacks.ReduceLROnPlateau", "experiment.callbacks.TensorBoard", "tensorflow.python.keras.callbacks.TerminateOnNaN", "len", "tensorflow.python.keras.optimizer_v2.adadelta.Adadelta", "experiment.models.build_model.load_weights", "len", "len", "str", "str"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.utils.setup_experiment", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.models.build_model", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.train._validation_hooks", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.train._validation_hooks"], ["def", "_train", "(", "hparams", ")", ":", "\n", "    ", "log_dir", ",", "start_time", "=", "utils", ".", "setup_experiment", "(", "\n", "hparams", "[", "'logs'", "]", ",", "\n", "hparams", "[", "'name'", "]", ",", "\n", "hparams", "[", "'seed'", "]", ",", "\n", "save_diff", "=", "False", ",", "# set to True to export uncommitted git changes", "\n", ")", "\n", "hparams", "[", "'time'", "]", "=", "str", "(", "start_time", ")", "\n", "\n", "with", "h5py", ".", "File", "(", "hparams", "[", "'data'", "]", ",", "'r'", ")", "as", "h5", ":", "\n", "        ", "classes", "=", "json", ".", "loads", "(", "h5", ".", "attrs", "[", "'classes'", "]", ")", "\n", "devices", "=", "json", ".", "loads", "(", "h5", ".", "attrs", "[", "'devices'", "]", ")", "\n", "input_shape", "=", "json", ".", "loads", "(", "h5", ".", "attrs", "[", "'input_shape'", "]", ")", "\n", "has_eval", "=", "'eval'", "in", "h5", "\n", "has_dev", "=", "'dev'", "in", "h5", "\n", "\n", "", "train_sequence", "=", "HDF5Batch", "(", "hparams", "[", "'batch_size'", "]", ",", "hparams", "[", "'data'", "]", ",", "'train/all/features'", ",", "'train/all/label'", ")", "\n", "train_sequence", "=", "Sparse2OneHot", "(", "train_sequence", ",", "len", "(", "classes", ")", ")", "\n", "if", "hparams", "[", "'mixup'", "]", ":", "\n", "        ", "train_sequence", "=", "Mixup", "(", "train_sequence", ",", "hparams", "[", "'mixup'", "]", ",", "hparams", "[", "'mixup_exp'", "]", ")", "\n", "\n", "", "hooks", "=", "[", "]", "\n", "losses", "=", "[", "'categorical_crossentropy'", "]", "\n", "metrics", "=", "[", "'categorical_accuracy'", "]", "\n", "averages", "=", "{", "\n", "'abc'", ":", "(", "'categorical_accuracy'", ",", "'a|b|c'", ")", ",", "\n", "'bc'", ":", "(", "'categorical_accuracy'", ",", "'b|c'", ")", ",", "\n", "}", "\n", "target_metric", "=", "'categorical_accuracy/bc/dev'", "\n", "\n", "if", "has_dev", ":", "\n", "        ", "hooks", "+=", "_validation_hooks", "(", "'dev'", ",", "devices", ",", "len", "(", "classes", ")", ",", "hparams", ",", "averages", ")", "\n", "", "if", "has_eval", ":", "\n", "        ", "hooks", "+=", "_validation_hooks", "(", "'eval'", ",", "devices", ",", "len", "(", "classes", ")", ",", "hparams", ",", "averages", ")", "\n", "\n", "", "hooks", "+=", "[", "\n", "callbacks", ".", "Timer", "(", ")", ",", "\n", "keras", ".", "callbacks", ".", "ModelCheckpoint", "(", "\n", "str", "(", "log_dir", "/", "'weights.hdf5'", ")", ",", "\n", "monitor", "=", "target_metric", ",", "\n", "verbose", "=", "1", ",", "\n", "save_best_only", "=", "True", ",", "\n", "save_weights_only", "=", "True", ",", "\n", ")", ",", "\n", "keras", ".", "callbacks", ".", "ReduceLROnPlateau", "(", "\n", "monitor", "=", "target_metric", ",", "\n", "factor", "=", "hparams", "[", "'reduction_factor'", "]", ",", "\n", "patience", "=", "hparams", "[", "'reduction_patience'", "]", ",", "\n", "min_delta", "=", "hparams", "[", "'reduction_delta'", "]", ",", "\n", "verbose", "=", "1", ",", "\n", ")", ",", "\n", "callbacks", ".", "TensorBoard", "(", "str", "(", "log_dir", ")", ",", "update_freq", "=", "'batch'", ",", "hparams", "=", "hparams", ")", ",", "\n", "keras", ".", "callbacks", ".", "TerminateOnNaN", "(", ")", ",", "\n", "]", "\n", "\n", "model", "=", "build_model", "(", "hparams", "[", "'model'", "]", ",", "len", "(", "classes", ")", ",", "input_shape", ",", "hparams", ")", "\n", "model", ".", "compile", "(", "\n", "Adadelta", "(", "hparams", "[", "'lr'", "]", ",", "rho", "=", "hparams", "[", "'rho'", "]", ")", ",", "\n", "loss", "=", "losses", ",", "\n", "loss_weights", "=", "None", ",", "\n", "metrics", "=", "metrics", ",", "\n", "run_eagerly", "=", "hparams", "[", "'eager'", "]", ",", "\n", ")", "\n", "\n", "if", "hparams", "[", "'load'", "]", ":", "\n", "        ", "model", ".", "load_weights", "(", "hparams", "[", "'load'", "]", ")", "\n", "\n", "", "model", ".", "fit_generator", "(", "\n", "train_sequence", ",", "\n", "shuffle", "=", "True", ",", "\n", "epochs", "=", "hparams", "[", "'epochs'", "]", ",", "\n", "max_queue_size", "=", "hparams", "[", "'queue'", "]", ",", "\n", "callbacks", "=", "hooks", ",", "\n", "verbose", "=", "1", ",", "\n", ")", "\n", "\n", "print", "(", "'DONE'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.None.train._validation_hooks": [[99, 135], ["h5py.File", "averages.items", "experiment.sequences.Sparse2OneHot", "hooks.append", "hooks.append", "experiment.sequences.HDF5Batch", "experiment.callbacks.Validate", "experiment.callbacks.MacroAverage", "re.match"], "function", ["None"], ["", "def", "_validation_hooks", "(", "subset", ",", "devices", ",", "depth", ",", "hparams", ",", "averages", ",", "every_epoch", "=", "True", ")", ":", "\n", "    ", "h5", "=", "h5py", ".", "File", "(", "hparams", "[", "'data'", "]", ",", "mode", "=", "'r'", ")", "\n", "hooks", "=", "[", "]", "\n", "\n", "for", "device", "in", "devices", ":", "\n", "        ", "if", "f'{subset}/{device}'", "not", "in", "h5", ":", "\n", "            ", "continue", "\n", "\n", "", "sequence", "=", "Sparse2OneHot", "(", "\n", "HDF5Batch", "(", "\n", "hparams", "[", "'batch_size'", "]", ",", "\n", "h5", ",", "\n", "f'{subset}/{device}/features'", ",", "\n", "f'{subset}/{device}/label'", ",", "\n", ")", ",", "\n", "depth", ",", "\n", ")", "\n", "\n", "hooks", ".", "append", "(", "callbacks", ".", "Validate", "(", "\n", "sequence", ",", "\n", "suffix", "=", "f'{device}/{subset}'", ",", "\n", "batch_size", "=", "hparams", "[", "'batch_size'", "]", ",", "\n", "every_epoch", "=", "every_epoch", ")", ",", "\n", ")", "\n", "\n", "", "for", "name", ",", "(", "metric", ",", "pattern", ")", "in", "averages", ".", "items", "(", ")", ":", "\n", "        ", "hooks", ".", "append", "(", "callbacks", ".", "MacroAverage", "(", "\n", "f'{metric}/{name}/{subset}'", ",", "\n", "[", "\n", "f'{metric}/{device}/{subset}'", "\n", "for", "device", "in", "devices", "\n", "if", "re", ".", "match", "(", "pattern", ",", "device", ")", "\n", "]", ",", "\n", ")", ")", "\n", "\n", "", "return", "hooks", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.models.basic": [[7, 27], ["tensorflow.python.keras.Sequential", "tensorflow.python.keras.layers.Conv2D", "tensorflow.python.keras.layers.BatchNormalization", "tensorflow.python.keras.layers.Conv2D", "tensorflow.python.keras.layers.BatchNormalization", "tensorflow.python.keras.layers.Conv2D", "tensorflow.python.keras.layers.BatchNormalization", "tensorflow.python.keras.layers.Conv2D", "tensorflow.python.keras.layers.BatchNormalization", "tensorflow.python.keras.layers.Conv2D", "tensorflow.python.keras.layers.BatchNormalization", "tensorflow.python.keras.layers.GlobalAveragePooling2D", "tensorflow.python.keras.layers.Dense"], "function", ["None"], ["def", "basic", "(", "num_classes", ",", "input_shape", ",", "hparams", ")", ":", "\n", "    ", "return", "keras", ".", "Sequential", "(", "[", "\n", "layers", ".", "Conv2D", "(", "16", ",", "3", ",", "input_shape", "=", "input_shape", ",", "activation", "=", "'relu'", ")", ",", "\n", "layers", ".", "BatchNormalization", "(", "center", "=", "False", ",", "scale", "=", "False", ")", ",", "\n", "\n", "layers", ".", "Conv2D", "(", "32", ",", "3", ",", "2", ",", "activation", "=", "'relu'", ")", ",", "\n", "layers", ".", "BatchNormalization", "(", "center", "=", "False", ",", "scale", "=", "False", ")", ",", "\n", "\n", "layers", ".", "Conv2D", "(", "32", ",", "3", ",", "1", ",", "activation", "=", "'relu'", ")", ",", "\n", "layers", ".", "BatchNormalization", "(", "center", "=", "False", ",", "scale", "=", "False", ")", ",", "\n", "\n", "layers", ".", "Conv2D", "(", "64", ",", "3", ",", "2", ",", "activation", "=", "'relu'", ")", ",", "\n", "layers", ".", "BatchNormalization", "(", "center", "=", "False", ",", "scale", "=", "False", ")", ",", "\n", "\n", "layers", ".", "Conv2D", "(", "64", ",", "3", ",", "1", ",", "activation", "=", "'relu'", ")", ",", "\n", "layers", ".", "BatchNormalization", "(", "center", "=", "False", ",", "scale", "=", "False", ")", ",", "\n", "\n", "layers", ".", "GlobalAveragePooling2D", "(", ")", ",", "\n", "\n", "layers", ".", "Dense", "(", "num_classes", ",", "activation", "=", "'softmax'", ",", "name", "=", "'label'", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.models.build_model": [[30, 34], ["None"], "function", ["None"], ["", "def", "build_model", "(", "name", ",", "num_classes", ",", "input_shape", ",", "hparams", ")", ":", "\n", "    ", "return", "{", "\n", "'basic'", ":", "basic", ",", "\n", "}", "[", "name", "]", "(", "num_classes", ",", "input_shape", ",", "hparams", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.sequences.HDF5Batch.__init__": [[19, 30], ["tensorflow.python.keras.utils.Sequence.__init__", "isinstance", "h5py.File", "len", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.__init__"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "file", ",", "features_dataset", ",", "labels_dataset", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "\n", "h5", "=", "file", "if", "isinstance", "(", "file", ",", "h5py", ".", "File", ")", "else", "h5py", ".", "File", "(", "file", ",", "'r'", ")", "\n", "self", ".", "_features", "=", "h5", "[", "features_dataset", "]", "\n", "self", ".", "_labels", "=", "h5", "[", "labels_dataset", "]", "\n", "\n", "if", "len", "(", "self", ".", "_features", ")", "!=", "len", "(", "self", ".", "_labels", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Datasets must have the same length.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.sequences.HDF5Batch.__len__": [[31, 33], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_labels", ")", "//", "self", ".", "_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.sequences.HDF5Batch.__getitem__": [[34, 38], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "(", "\n", "self", ".", "_features", "[", "index", "*", "self", ".", "_batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "_batch_size", "]", ",", "\n", "self", ".", "_labels", "[", "index", "*", "self", ".", "_batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "_batch_size", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.sequences.Sparse2OneHot.__init__": [[49, 53], ["tensorflow.python.keras.utils.Sequence.__init__"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.__init__"], ["def", "__init__", "(", "self", ",", "sequence", ",", "depth", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sequence", "=", "sequence", "\n", "self", ".", "depth", "=", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.sequences.Sparse2OneHot.__len__": [[54, 56], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.sequences.Sparse2OneHot.__getitem__": [[57, 61], ["numpy.eye"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "examples", ",", "labels", "=", "self", ".", "sequence", "[", "index", "]", "\n", "labels", "=", "np", ".", "eye", "(", "self", ".", "depth", ")", "[", "labels", "]", "\n", "return", "examples", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.sequences.Mixup.__init__": [[72, 77], ["tensorflow.python.keras.utils.Sequence.__init__"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.__init__"], ["def", "__init__", "(", "self", ",", "sequence", ",", "alpha", ",", "use_exp", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sequence", "=", "sequence", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "use_exp", "=", "use_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.sequences.Mixup.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.sequences.Mixup.__getitem__": [[81, 101], ["numpy.random.randint", "numpy.array_equal", "numpy.random.beta", "len", "numpy.exp", "numpy.exp", "numpy.einsum", "numpy.einsum", "numpy.einsum", "numpy.einsum", "numpy.log"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "other_index", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "sequence", ")", ")", "\n", "examples", ",", "labels", "=", "self", ".", "sequence", "[", "index", "]", "\n", "other_examples", ",", "other_labels", "=", "self", ".", "sequence", "[", "other_index", "]", "\n", "\n", "assert", "np", ".", "array_equal", "(", "examples", ".", "shape", ",", "other_examples", ".", "shape", ")", "\n", "a", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "alpha", ",", "self", ".", "alpha", ",", "examples", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "use_exp", ":", "\n", "            ", "examples", "=", "np", ".", "exp", "(", "examples", ")", "\n", "other_examples", "=", "np", ".", "exp", "(", "other_examples", ")", "\n", "\n", "", "format", "=", "'i...,i...->i...'", "\n", "labels", "=", "np", ".", "einsum", "(", "format", ",", "a", ",", "labels", ")", "+", "np", ".", "einsum", "(", "format", ",", "1", "-", "a", ",", "other_labels", ")", "\n", "examples", "=", "np", ".", "einsum", "(", "format", ",", "a", ",", "examples", ")", "+", "np", ".", "einsum", "(", "format", ",", "1", "-", "a", ",", "other_examples", ")", "\n", "\n", "if", "self", ".", "use_exp", ":", "\n", "            ", "examples", "=", "np", ".", "log", "(", "examples", ")", "\n", "\n", "", "return", "examples", ",", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._parse_path": [[64, 68], ["str().split", "len", "str", "pathlib.Path"], "function", ["None"], ["def", "_parse_path", "(", "path", ")", ":", "\n", "    ", "splits", "=", "str", "(", "pathlib", ".", "Path", "(", "path", ")", ".", "stem", ")", ".", "split", "(", "'-'", ")", "\n", "assert", "len", "(", "splits", ")", "==", "5", "\n", "return", "splits", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._expand_frame": [[70, 81], ["zip", "pandas.DataFrame", "pandas.Categorical", "pandas.Categorical", "pandas.Categorical", "dcase._parse_path"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._parse_path"], ["", "def", "_expand_frame", "(", "files", ")", ":", "\n", "    ", "labels", ",", "cities", ",", "locations", ",", "segments", ",", "ds", "=", "zip", "(", "*", "[", "\n", "_parse_path", "(", "path", ")", "for", "path", "in", "files", "\n", "]", ")", "\n", "return", "pd", ".", "DataFrame", "(", "{", "\n", "'file'", ":", "files", ",", "\n", "'label'", ":", "pd", ".", "Categorical", "(", "labels", ",", "categories", "=", "CLASSES", ")", ",", "\n", "'device'", ":", "pd", ".", "Categorical", "(", "ds", ",", "categories", "=", "DEVICES", ")", ",", "\n", "'city'", ":", "pd", ".", "Categorical", "(", "cities", ")", ",", "\n", "'location'", ":", "locations", ",", "\n", "'segment'", ":", "segments", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.download": [[84, 113], ["tensorflow.python.keras.utils.get_file", "_URL.format", "str", "logger.error"], "function", ["None"], ["", "def", "download", "(", "data_dir", ",", "retries", "=", "16", ")", ":", "\n", "    ", "\"\"\"Download the dataset to the specified directory.\n\n    Args:\n        data_dir: output directory\n        retries: number of retries\n    \"\"\"", "\n", "for", "file", "in", "_FILES", ":", "\n", "        ", "retry", "=", "0", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "keras", ".", "utils", ".", "get_file", "(", "\n", "file", ",", "\n", "_URL", ".", "format", "(", "file", "=", "file", ")", ",", "\n", "extract", "=", "True", ",", "\n", "cache_subdir", "=", "''", ",", "\n", "cache_dir", "=", "str", "(", "data_dir", ")", ",", "\n", ")", "\n", "break", "\n", "", "except", ":", "\n", "                ", "if", "retry", "<", "retries", ":", "\n", "                    ", "retry", "+=", "1", "\n", "logger", ".", "error", "(", "\n", "f'There was an error while downloading \"{file}\". '", "\n", "f'Retrying download ({retry}/{retries}).'", "\n", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.get_correction_recordings": [[115, 139], ["dcase_frame.set_index().unstack().dropna", "recordings.sample.columns.droplevel", "recordings.sample.sample", "dcase_frame.set_index().unstack", "dcase_frame.set_index"], "function", ["None"], ["", "", "", "", "", "def", "get_correction_recordings", "(", "dcase_frame", ",", "num_samples", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"Aggregates a list of recordings.\n\n    Args:\n        dcase_frame (pd.DataFrame): dataframe with metadata for the dataset\n        num_samples (int): number of examples to select, use all if evaluates to False\n        random_state: random state for the sampling\n\n    Returns:\n        a list of dictionaries where each device is represented by a different key\n        and value is the path to the recording\n    \"\"\"", "\n", "recordings", "=", "dcase_frame", ".", "set_index", "(", "[", "'label'", ",", "'city'", ",", "'location'", ",", "'segment'", ",", "'device'", "]", ")", ".", "unstack", "(", "'device'", ")", ".", "dropna", "(", ")", "\n", "recordings", ".", "columns", "=", "recordings", ".", "columns", ".", "droplevel", "(", ")", "\n", "\n", "if", "num_samples", ":", "\n", "        ", "recordings", "=", "recordings", ".", "sample", "(", "\n", "n", "=", "num_samples", ",", "\n", "replace", "=", "False", ",", "\n", "random_state", "=", "random_state", "\n", ")", "\n", "", "return", "recordings", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.get_aligned_recordings": [[141, 155], ["dcase.get_correction_recordings", "get_correction_recordings.to_dict"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.get_correction_recordings"], ["", "def", "get_aligned_recordings", "(", "dcase_frame", ",", "num_samples", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"Aggregates a list of aligned recordings.\n\n    Args:\n        dcase_frame (pd.DataFrame): dataframe with metadata for the dataset\n        num_samples (int): number of examples to select, use all if evaluates to False\n        random_state: random state for the sampling\n\n    Returns:\n        a list of dictionaries where each device is represented by a different key\n        and value is the path to the recording\n    \"\"\"", "\n", "recordings", "=", "get_correction_recordings", "(", "dcase_frame", ",", "num_samples", ",", "random_state", ")", "\n", "return", "recordings", ".", "to_dict", "(", "'records'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.get_unaligned_recordings": [[157, 173], ["dcase.get_correction_recordings", "column.sample", "get_correction_recordings.iteritems", "len"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.get_correction_recordings"], ["", "def", "get_unaligned_recordings", "(", "dcase_frame", ",", "num_samples", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "\"\"\"Aggregates a list of unaligned recordings.\n\n    Args:\n        dcase_frame (pd.DataFrame): dataframe with metadata for the dataset\n        num_samples (int): number of examples to select, use all if evaluates to False\n        random_state: random state for the sampling\n\n    Returns:\n        a list of dictionaries where each device is represented by a different key\n        and value is the path to the recording\n    \"\"\"", "\n", "recordings", "=", "get_correction_recordings", "(", "dcase_frame", ",", "num_samples", ",", "random_state", ")", "\n", "return", "{", "\n", "device", ":", "column", ".", "sample", "(", "len", "(", "column", ")", ",", "random_state", "=", "random_state", ")", ".", "values", "\n", "for", "device", ",", "column", "in", "recordings", ".", "iteritems", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._read_protocol": [[176, 178], ["pandas.read_csv", "pathlib.Path"], "function", ["None"], ["", "def", "_read_protocol", "(", "dataset_path", ",", "protocol", ")", ":", "\n", "    ", "return", "pd", ".", "read_csv", "(", "pathlib", ".", "Path", "(", "dataset_path", ")", "/", "protocol", ",", "sep", "=", "_SEP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._get_dev_frame": [[180, 183], ["dcase._read_protocol", "dcase._expand_frame"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._read_protocol", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._expand_frame"], ["", "def", "_get_dev_frame", "(", "dataset_path", ")", ":", "\n", "    ", "protocol", "=", "_read_protocol", "(", "dataset_path", ",", "_DEV_PATH", ")", "\n", "return", "_expand_frame", "(", "protocol", ".", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._get_training_frame": [[185, 188], ["dcase._read_protocol", "dcase._expand_frame"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._read_protocol", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._expand_frame"], ["", "def", "_get_training_frame", "(", "dataset_path", ")", ":", "\n", "    ", "protocol", "=", "_read_protocol", "(", "dataset_path", ",", "_TRAIN_PATH", ")", "\n", "return", "_expand_frame", "(", "protocol", ".", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.get_split": [[190, 238], ["dcase._get_training_frame", "dcase._get_dev_frame", "pd.concat.sample", "validation.sample.sample", "dcase._split", "pd.concat.file.map", "validation.sample.file.map", "pandas.concat", "int", "len", "len", "str", "str"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._get_training_frame", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._get_dev_frame", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._split"], ["", "def", "get_split", "(", "\n", "data_dir", ",", "\n", "split", "=", "'official'", ",", "\n", "validation_fraction", "=", "0.3", ",", "\n", "reuse", "=", "False", ",", "\n", "holdout_cities", "=", "None", ",", "\n", "retries", "=", "32", ",", "\n", "full_paths", "=", "True", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Loads the official dataset split or creates a randomly selected train/validation split.\n\n    Args:\n        data_dir: where the dataset is stored\n        split ('official'/int): use 'official' to select the official split\n            or int for a randomly generated one\n        validation_fraction: fraction of examples used for the validation subset\n        reuse: use examples from the developement set\n        holdout_cities: which cities to used only in the validation subset\n        retries: number of retries\n        full_paths: use full paths to the audio files\n\n    Returns:\n        pd.DataFrame: training examples\n        pd.DataFrame: validation/testing examples\n    \"\"\"", "\n", "\n", "training", "=", "_get_training_frame", "(", "data_dir", ")", "\n", "validation", "=", "_get_dev_frame", "(", "data_dir", ")", "\n", "\n", "if", "split", "!=", "'official'", ":", "\n", "        ", "if", "reuse", ":", "\n", "            ", "training", "=", "pd", ".", "concat", "(", "[", "training", ",", "validation", "]", ")", "\n", "", "training", ",", "validation", "=", "_split", "(", "\n", "training", ",", "\n", "validation_fraction", ",", "\n", "holdout_cities", "or", "[", "]", ",", "\n", "int", "(", "split", ")", ",", "\n", "retries", "\n", ")", "\n", "\n", "", "if", "full_paths", ":", "\n", "        ", "training", ".", "file", "=", "training", ".", "file", ".", "map", "(", "lambda", "f", ":", "str", "(", "data_dir", "/", "f", ")", ")", "\n", "validation", ".", "file", "=", "validation", ".", "file", ".", "map", "(", "lambda", "f", ":", "str", "(", "data_dir", "/", "f", ")", ")", "\n", "\n", "", "training", "=", "training", ".", "sample", "(", "n", "=", "len", "(", "training", ")", ",", "replace", "=", "False", ")", "\n", "validation", "=", "validation", ".", "sample", "(", "n", "=", "len", "(", "validation", ")", ",", "replace", "=", "False", ")", "\n", "\n", "return", "training", ",", "validation", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.__split": [[240, 271], ["dataset.groupby", "group.groupby().size", "per_chunk.sample.sample", "per_chunk.sample.cumsum", "numpy.roll", "pandas.merge", "validation.append", "training.append", "pandas.concat", "pandas.concat", "len", "numpy.abs", "numpy.abs", "selection.to_frame().reset_index", "split[].drop", "split[].drop", "group.groupby", "per_chunk[].sum", "per_chunk[].sum", "selection.to_frame"], "function", ["None"], ["", "def", "__split", "(", "dataset", ",", "fraction", ",", "maintain", ",", "separate", ",", "random_state", ")", ":", "\n", "    ", "training", "=", "[", "]", "\n", "validation", "=", "[", "]", "\n", "\n", "for", "_", ",", "group", "in", "dataset", ".", "groupby", "(", "maintain", ")", ":", "\n", "        ", "per_chunk", "=", "group", ".", "groupby", "(", "separate", ",", "as_index", "=", "False", ")", ".", "size", "(", ")", "\n", "per_chunk", "=", "per_chunk", ".", "sample", "(", "per_chunk", ".", "shape", "[", "0", "]", ",", "random_state", "=", "random_state", ")", "\n", "\n", "target", "=", "fraction", "*", "len", "(", "group", ")", "\n", "num_selected", "=", "per_chunk", ".", "cumsum", "(", ")", "\n", "last_smaller", "=", "num_selected", "<", "target", "\n", "first_larger", "=", "np", ".", "roll", "(", "last_smaller", ",", "1", ")", "\n", "first_larger", "[", "0", "]", "=", "True", "\n", "if", "np", ".", "abs", "(", "per_chunk", "[", "last_smaller", "]", ".", "sum", "(", ")", "-", "target", ")", "<", "np", ".", "abs", "(", "per_chunk", "[", "first_larger", "]", ".", "sum", "(", ")", "-", "target", ")", ":", "\n", "            ", "selection", "=", "per_chunk", ".", "index", "[", "last_smaller", "]", "\n", "", "else", ":", "\n", "            ", "selection", "=", "per_chunk", ".", "index", "[", "first_larger", "]", "\n", "\n", "", "split", "=", "pd", ".", "merge", "(", "\n", "group", ",", "\n", "selection", ".", "to_frame", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", ",", "\n", "on", "=", "separate", ",", "\n", "how", "=", "'outer'", ",", "\n", "indicator", "=", "True", ",", "\n", ")", "\n", "\n", "validation", ".", "append", "(", "split", "[", "split", "[", "'_merge'", "]", "==", "'both'", "]", ".", "drop", "(", "columns", "=", "'_merge'", ")", ")", "\n", "training", ".", "append", "(", "split", "[", "split", "[", "'_merge'", "]", "==", "'left_only'", "]", ".", "drop", "(", "columns", "=", "'_merge'", ")", ")", "\n", "\n", "", "return", "pd", ".", "concat", "(", "training", ",", "axis", "=", "0", ")", ",", "pd", ".", "concat", "(", "validation", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._split": [[273, 306], ["max", "isinstance", "range", "len", "len", "numpy.random.RandomState", "max", "dcase.__split", "pandas.concat", "dcase._split_error", "set", "numpy.isin", "len", "len", "numpy.isin", "len"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase.__split", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._split_error"], ["", "def", "_split", "(", "examples", ",", "fraction", ",", "holdout_cities", ",", "seed", ",", "retries", ")", ":", "\n", "    ", "assert", "len", "(", "set", "(", "examples", "[", "'file'", "]", ")", ")", "==", "len", "(", "examples", ")", "\n", "retries", "=", "max", "(", "1", ",", "retries", ")", "\n", "\n", "if", "isinstance", "(", "seed", ",", "np", ".", "random", ".", "RandomState", ")", ":", "\n", "        ", "random_state", "=", "seed", "\n", "", "else", ":", "\n", "        ", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n", "", "best_split", "=", "None", "\n", "best_error", "=", "None", "\n", "for", "_", "in", "range", "(", "retries", ")", ":", "\n", "        ", "holdout", "=", "examples", "[", "np", ".", "isin", "(", "examples", "[", "'city'", "]", ",", "holdout_cities", ")", "]", "\n", "splitable", "=", "examples", "[", "~", "np", ".", "isin", "(", "examples", "[", "'city'", "]", ",", "holdout_cities", ")", "]", "\n", "\n", "# Official split would discard examples from holdout_cities", "\n", "validation_size", "=", "max", "(", "fraction", "*", "len", "(", "examples", ")", "-", "len", "(", "holdout", ")", ",", "0", ")", "\n", "training", ",", "validation", "=", "__split", "(", "\n", "splitable", ",", "\n", "validation_size", "/", "len", "(", "splitable", ")", ",", "\n", "maintain", "=", "[", "'label'", ",", "'city'", "]", ",", "\n", "separate", "=", "[", "'city'", ",", "'location'", "]", ",", "\n", "random_state", "=", "random_state", ",", "\n", ")", "\n", "\n", "validation", "=", "pd", ".", "concat", "(", "[", "validation", ",", "holdout", "]", ",", "axis", "=", "0", ")", "\n", "\n", "error", "=", "_split_error", "(", "training", ",", "validation", ",", "[", "'label'", ",", "'city'", ",", "'device'", "]", ")", "\n", "if", "best_error", "is", "None", "or", "best_error", ">", "error", ":", "\n", "            ", "best_split", "=", "training", ",", "validation", "\n", "best_error", "=", "error", "\n", "\n", "", "", "return", "best_split", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.dcase._split_error": [[308, 315], ["max", "training[].value_counts", "len", "validation[].value_counts", "len", "numpy.max", "numpy.abs"], "function", ["None"], ["", "def", "_split_error", "(", "training", ",", "validation", ",", "columns", ")", ":", "\n", "    ", "error", "=", "0.0", "\n", "for", "column", "in", "columns", ":", "\n", "        ", "training_", "=", "training", "[", "column", "]", ".", "value_counts", "(", ")", "/", "len", "(", "training", ")", "\n", "validation_", "=", "validation", "[", "column", "]", ".", "value_counts", "(", ")", "/", "len", "(", "validation", ")", "\n", "error", "=", "max", "(", "error", ",", "np", ".", "max", "(", "np", ".", "abs", "(", "training_", "-", "validation_", ")", ")", ")", "\n", "", "return", "error", "\n", "", ""]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.read_wave": [[12, 38], ["soundfile.SoundFile", "sf.SoundFile.seek", "sf.SoundFile.read", "math.floor", "numpy.mean", "numpy.squeeze", "math.ceil"], "function", ["None"], ["def", "read_wave", "(", "path", ",", "start", "=", "0", ",", "stop", "=", "None", ")", ":", "\n", "    ", "\"\"\"Reads wave file form `start` to `stop`.\n\n    Args:\n        path (str): path to the wave file\n        start: start in seconds\n        stop: stop in seconds\n\n    Returns:\n        np.ndarray: mono audio sequence\n        int: sample rate\n    \"\"\"", "\n", "file", "=", "sf", ".", "SoundFile", "(", "path", ")", "\n", "\n", "start", "=", "floor", "(", "start", "*", "file", ".", "samplerate", ")", "if", "start", "else", "0", "\n", "frames", "=", "ceil", "(", "stop", "*", "file", ".", "samplerate", ")", "-", "start", "if", "stop", "else", "-", "1", "\n", "\n", "file", ".", "seek", "(", "start", ")", "\n", "audio", "=", "file", ".", "read", "(", "frames", ",", "always_2d", "=", "True", ")", "\n", "\n", "if", "audio", ".", "shape", "[", "-", "1", "]", ">", "1", ":", "\n", "        ", "audio", "=", "np", ".", "mean", "(", "audio", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "audio", "=", "np", ".", "squeeze", "(", "audio", ")", "\n", "\n", "", "return", "audio", ",", "file", ".", "samplerate", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.normalize_amplitude": [[40, 54], ["numpy.mean", "numpy.std"], "function", ["None"], ["", "def", "normalize_amplitude", "(", "audio", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"Normalize amplitude using RMS\n\n    Args:\n        audio (np.array): audio sequence\n        eps (float): epsilon for numerical stability\n\n    Returns:\n        np.array: normalized audio sequence\n    \"\"\"", "\n", "assert", "audio", ".", "ndim", "==", "1", "\n", "audio", "-=", "np", ".", "mean", "(", "audio", ")", "\n", "audio", "/=", "np", ".", "std", "(", "audio", ")", "+", "eps", "\n", "return", "audio", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.wave": [[56, 84], ["preprocessing.read_wave", "getattr", "getattr", "preprocessing.normalize_amplitude", "correction.transform_wave", "numpy.sign", "numpy.log", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.read_wave", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.normalize_amplitude", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.transform_wave"], ["", "def", "wave", "(", "example", ",", "correction", ",", "normalize", ",", "log_scale", ")", ":", "\n", "    ", "\"\"\"Read and preprocess an audio file to its raw waveform.\n\n    Args:\n        example: row representing the example\n        correction: spectrum correction object or None\n        normalize (bool): normalize the waveform\n        log_scale (bool): use log scaling\n\n    Returns:\n        np.array: audio sequence\n    \"\"\"", "\n", "audio", ",", "sample_rate", "=", "read_wave", "(", "\n", "example", ".", "file", ",", "\n", "getattr", "(", "example", ",", "'start'", ",", "0", ")", ",", "\n", "getattr", "(", "example", ",", "'stop'", ",", "None", ")", "\n", ")", "\n", "\n", "if", "normalize", ":", "\n", "        ", "audio", "=", "normalize_amplitude", "(", "audio", ")", "\n", "\n", "", "if", "correction", ":", "\n", "        ", "audio", "=", "correction", ".", "transform_wave", "(", "audio", ",", "example", ".", "device", ")", "\n", "\n", "", "if", "log_scale", ":", "\n", "        ", "audio", "=", "np", ".", "sign", "(", "audio", ")", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "audio", ")", "+", "1", ")", "\n", "\n", "", "return", "audio", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.spectrogram": [[86, 127], ["preprocessing.read_wave", "numpy.abs", "librosa.feature.melspectrogram", "numpy.log", "getattr", "getattr", "preprocessing.normalize_amplitude", "correction.transform_wave", "librosa.core.stft"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.read_wave", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.normalize_amplitude", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.transform_wave"], ["", "def", "spectrogram", "(", "example", ",", "correction", ",", "num_fft", ",", "hop_length", ",", "power", ",", "num_mels", ",", "htk", ",", "norm", ",", "normalize", "=", "False", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"Read and preprocess an audio file to a log-melspectrogram.\n\n    Args:\n        example: row representing the example\n        correction: spectrum correction object or None\n        num_fft (int): number of frequency bins in STFT\n        hop_length (int): length of the hop for STFT\n        power (float): power of the spectrogram\n        num_mels (int): number of mel bins in the final melspectrogram\n        htk (bool): use HTK formula instead of Slaney\n        norm (bool): normalization of the mel bands\n        normalize (bool): normalize the waveform\n        eps (float): epsilon for numerical stability\n\n    Returns:\n        np.array [shape=(num_mels, t)]: log-melspectrogram\n    \"\"\"", "\n", "audio", ",", "sample_rate", "=", "read_wave", "(", "\n", "example", ".", "file", ",", "\n", "getattr", "(", "example", ",", "'start'", ",", "0", ")", ",", "\n", "getattr", "(", "example", ",", "'stop'", ",", "None", ")", "\n", ")", "\n", "\n", "if", "normalize", ":", "\n", "        ", "audio", "=", "normalize_amplitude", "(", "audio", ")", "\n", "\n", "", "if", "correction", ":", "\n", "        ", "assert", "correction", ".", "num_fft", "==", "num_fft", "\n", "stft", "=", "correction", ".", "transform_wave", "(", "audio", ",", "example", ".", "device", ",", "return_stft", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "stft", "=", "librosa", ".", "core", ".", "stft", "(", "audio", ",", "n_fft", "=", "num_fft", ",", "hop_length", "=", "hop_length", ")", "\n", "\n", "", "spec", "=", "np", ".", "abs", "(", "stft", ")", "\n", "spec", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "\n", "S", "=", "spec", "**", "power", ",", "sr", "=", "sample_rate", ",", "n_mels", "=", "num_mels", ",", "htk", "=", "htk", ",", "norm", "=", "1", "if", "norm", "else", "None", "\n", ")", "\n", "\n", "spec", "=", "np", ".", "log", "(", "spec", "+", "eps", ")", "\n", "\n", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.compute_standardization": [[129, 148], ["list", "dask.from_array", "da.from_array.mean().compute", "da.from_array.std().compute", "da.from_array.mean", "da.from_array.std"], "function", ["None"], ["", "def", "compute_standardization", "(", "dataset", ",", "axes", ",", "chunk", "=", "128", ")", ":", "\n", "    ", "\"\"\"Compute standardization for the entire dataset.\n\n    Args:\n        dataset: array like\n        axes (int/sequence of ints): which axes to standardize\n        chunk (int): size of the chunk for processing\n\n    Returns:\n        np.array: mean\n        np.array: standard deviation\n    \"\"\"", "\n", "chunks", "=", "list", "(", "dataset", ".", "shape", ")", "\n", "chunks", "[", "0", "]", "=", "chunk", "\n", "array", "=", "da", ".", "from_array", "(", "dataset", ",", "chunks", "=", "chunks", ")", "\n", "\n", "return", "(", "\n", "array", ".", "mean", "(", "axes", ",", "keepdims", "=", "True", ")", ".", "compute", "(", ")", ",", "\n", "array", ".", "std", "(", "axes", ",", "keepdims", "=", "True", ")", ".", "compute", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.apply_standardization": [[151, 165], ["list", "dask.from_array", "da.from_array.store"], "function", ["None"], ["", "def", "apply_standardization", "(", "dataset", ",", "standardization", ",", "chunk", "=", "128", ")", ":", "\n", "    ", "\"\"\"Standardize the entire dataset using previously computed mean and variance.\n\n    Args:\n        dataset: array like\n        standardization: mean and variance\n        chunk (int): size of the chunk for processing\n    \"\"\"", "\n", "mean", ",", "std", "=", "standardization", "\n", "chunks", "=", "list", "(", "dataset", ".", "shape", ")", "\n", "chunks", "[", "0", "]", "=", "chunk", "\n", "array", "=", "da", ".", "from_array", "(", "dataset", ",", "chunks", "=", "chunks", ")", "\n", "array", "=", "(", "array", "-", "mean", ")", "/", "std", "\n", "array", ".", "store", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.preprocessing.apply_grouped_standardization": [[167, 188], ["list", "dask.from_array", "dask.from_array", "enumerate", "da.from_array.store", "dask.where", "dask.where"], "function", ["None"], ["", "def", "apply_grouped_standardization", "(", "dataset", ",", "groups", ",", "standardization", ",", "chunk", "=", "128", ")", ":", "\n", "    ", "\"\"\"Standardize the entire dataset using previously computed mean and variance.\n\n    Args:\n        dataset: array like\n        standardization: mean and variance for each group\n        chunk (int): size of the chunk for processing\n    \"\"\"", "\n", "chunks", "=", "list", "(", "dataset", ".", "shape", ")", "\n", "chunks", "[", "0", "]", "=", "100", "\n", "array", "=", "da", ".", "from_array", "(", "dataset", ",", "chunks", "=", "chunks", ")", "\n", "groups", "=", "da", ".", "from_array", "(", "groups", ",", "chunks", "=", "chunk", ")", "\n", "\n", "# workaround for piecewise", "\n", "for", "key", ",", "(", "mean", ",", "std", ")", "in", "enumerate", "(", "standardization", ")", ":", "\n", "        ", "selection", "=", "(", "groups", "==", "key", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "mean", "=", "da", ".", "where", "(", "selection", ",", "mean", ",", "0", ")", "\n", "std", "=", "da", ".", "where", "(", "selection", ",", "std", ",", "1", ")", "\n", "array", "=", "(", "array", "-", "mean", ")", "/", "std", "\n", "\n", "", "array", ".", "store", "(", "dataset", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.Validate.__init__": [[25, 43], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "x", ",", "\n", "y", "=", "None", ",", "\n", "steps", "=", "None", ",", "\n", "suffix", "=", "None", ",", "\n", "batch_size", "=", "None", ",", "\n", "verbose", "=", "1", ",", "\n", "every_epoch", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "suffix", "=", "suffix", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "every_epoch", "=", "every_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.Validate.on_epoch_end": [[44, 58], ["super().on_epoch_end", "callbacks.Validate.model.evaluate", "zip", "callbacks.Validate._format_label"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.TensorBoard.on_epoch_end", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.Validate._format_label"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "on_epoch_end", "(", "epoch", ",", "logs", ")", "\n", "\n", "if", "self", ".", "every_epoch", "is", "True", "or", "epoch", "%", "self", ".", "every_epoch", "==", "0", ":", "\n", "            ", "results", "=", "self", ".", "model", ".", "evaluate", "(", "\n", "self", ".", "x", ",", "\n", "self", ".", "y", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "verbose", "=", "self", ".", "verbose", ",", "\n", "steps", "=", "self", ".", "steps", ",", "\n", ")", "\n", "\n", "for", "label", ",", "result", "in", "zip", "(", "self", ".", "model", ".", "metrics_names", ",", "results", ")", ":", "\n", "                ", "logs", "[", "self", ".", "_format_label", "(", "label", ")", "]", "=", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.Validate._format_label": [[59, 64], ["None"], "methods", ["None"], ["", "", "", "def", "_format_label", "(", "self", ",", "label", ")", ":", "\n", "        ", "if", "self", ".", "suffix", ":", "\n", "            ", "return", "label", "+", "'/'", "+", "self", ".", "suffix", "\n", "", "else", ":", "\n", "            ", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.Timer.__init__": [[69, 72], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_last_batch", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.Timer.on_train_begin": [[73, 75], ["time.time"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "_last_batch", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.Timer.on_epoch_end": [[76, 81], ["time.time"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "now", "=", "time", ".", "time", "(", ")", "\n", "logs", "[", "'time/per_epoch'", "]", "=", "now", "-", "self", ".", "_last_batch", "\n", "logs", "[", "'time/num_epochs'", "]", "=", "epoch", "+", "1", "\n", "self", ".", "_last_batch", "=", "now", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.MacroAverage.__init__": [[91, 95], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "metrics", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_metrics", "=", "metrics", "\n", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.MacroAverage._push_average": [[96, 98], ["numpy.nanmean", "logs.get"], "methods", ["None"], ["", "def", "_push_average", "(", "self", ",", "logs", ")", ":", "\n", "        ", "logs", "[", "self", ".", "_name", "]", "=", "np", ".", "nanmean", "(", "[", "logs", ".", "get", "(", "key", ",", "np", ".", "nan", ")", "for", "key", "in", "self", ".", "_metrics", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.MacroAverage.on_epoch_end": [[99, 101], ["callbacks.MacroAverage._push_average"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.MacroAverage._push_average"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "_push_average", "(", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.TensorBoard.__init__": [[112, 128], ["super().__init__", "tensorflow.summary.create_file_writer"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.__init__"], ["def", "__init__", "(", "self", ",", "log_dir", "=", "'logs'", ",", "update_freq", "=", "'batch'", ",", "hparams", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "self", ".", "_hparams", "=", "hparams", "\n", "\n", "if", "update_freq", "==", "'batch'", ":", "\n", "            ", "self", ".", "update_freq", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "update_freq", "=", "update_freq", "\n", "\n", "", "self", ".", "_samples_seen", "=", "0", "\n", "self", ".", "_samples_seen_at_last_write", "=", "0", "\n", "self", ".", "_total_batches_seen", "=", "0", "\n", "\n", "self", ".", "_writer", "=", "tf", ".", "summary", ".", "create_file_writer", "(", "self", ".", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.TensorBoard.on_train_begin": [[129, 133], ["callbacks.TensorBoard._writer.as_default", "tensorflow.summary.record_if", "tensorboard.plugins.hparams.api.hparams"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "_hparams", ":", "\n", "            ", "with", "self", ".", "_writer", ".", "as_default", "(", ")", ",", "tf", ".", "summary", ".", "record_if", "(", "True", ")", ":", "\n", "                ", "hp", ".", "hparams", "(", "self", ".", "_hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.TensorBoard.on_batch_end": [[134, 143], ["logs.get", "callbacks.TensorBoard._log_metrics"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.TensorBoard._log_metrics"], ["", "", "", "def", "on_batch_end", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "\n", "self", ".", "_samples_seen", "+=", "logs", ".", "get", "(", "'size'", ",", "1", ")", "\n", "samples_seen_since", "=", "self", ".", "_samples_seen", "-", "self", ".", "_samples_seen_at_last_write", "\n", "if", "self", ".", "update_freq", "!=", "'epoch'", "and", "samples_seen_since", ">=", "self", ".", "update_freq", ":", "\n", "            ", "self", ".", "_log_metrics", "(", "logs", ",", "suffix", "=", "'batch'", ")", "\n", "self", ".", "_samples_seen_at_last_write", "=", "self", ".", "_samples_seen", "\n", "", "self", ".", "_total_batches_seen", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.TensorBoard.on_epoch_end": [[144, 146], ["callbacks.TensorBoard._log_metrics"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.TensorBoard._log_metrics"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "_log_metrics", "(", "logs", ",", "suffix", "=", "'epoch'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.TensorBoard.on_train_end": [[147, 149], ["callbacks.TensorBoard._writer.close"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.TensorBoard._format_tag": [[150, 152], ["None"], "methods", ["None"], ["", "def", "_format_tag", "(", "self", ",", "name", ",", "time_scale", ")", ":", "\n", "        ", "return", "f'{name}/{time_scale}'", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.TensorBoard._log_metrics": [[153, 168], ["callbacks.TensorBoard._writer.as_default", "tensorflow.summary.record_if", "logs.items", "callbacks.TensorBoard._writer.flush", "tensorflow.summary.scalar", "callbacks.TensorBoard._format_tag"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.callbacks.TensorBoard._format_tag"], ["", "def", "_log_metrics", "(", "self", ",", "logs", ",", "suffix", ")", ":", "\n", "        ", "logs", "=", "logs", "or", "{", "}", "\n", "\n", "with", "self", ".", "_writer", ".", "as_default", "(", ")", ",", "tf", ".", "summary", ".", "record_if", "(", "True", ")", ":", "\n", "            ", "for", "(", "name", ",", "value", ")", "in", "logs", ".", "items", "(", ")", ":", "\n", "                ", "if", "name", "in", "(", "'batch'", ",", "'size'", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "tf", ".", "summary", ".", "scalar", "(", "\n", "self", ".", "_format_tag", "(", "name", ",", "suffix", ")", ",", "\n", "value", ",", "\n", "step", "=", "self", ".", "_samples_seen", ",", "\n", ")", "\n", "\n", "", "self", ".", "_writer", ".", "flush", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.utils._dump_git": [[16, 45], ["pathlib.Path", "pathlib.Path.mkdir", "tempfile.TemporaryDirectory", "git.cmd.Git", "str", "git.cmd.Git.custom_environment", "git.cmd.Git.add", "git.cmd.Git.status", "git.cmd.Git.diff", "git.cmd.Git.log", "str", "git.cmd.Git.get_object_header", "head.decode", "git.cmd.Git.diff", "pathlib.Path"], "function", ["None"], ["def", "_dump_git", "(", "code_dir", ",", "output_dir", ")", ":", "\n", "    ", "output_dir", "=", "Path", "(", "output_dir", ")", "\n", "output_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "index_dir", ":", "\n", "        ", "repo", "=", "git", ".", "cmd", ".", "Git", "(", "str", "(", "code_dir", ")", ")", "\n", "with", "repo", ".", "custom_environment", "(", "GIT_INDEX_FILE", "=", "str", "(", "Path", "(", "index_dir", ")", "/", "'index'", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "status", "=", "repo", ".", "status", "(", ")", "\n", "(", "output_dir", "/", "'git-status.txt'", ")", ".", "write_text", "(", "status", ")", "\n", "", "except", "git", ".", "exc", ".", "GitCommandError", ":", "\n", "                ", "return", "\n", "\n", "", "repo", ".", "add", "(", "'-A'", ")", "\n", "try", ":", "\n", "                ", "head", "=", "repo", ".", "get_object_header", "(", "'HEAD'", ")", "[", "0", "]", "\n", "(", "output_dir", "/", "'git-head.txt'", ")", ".", "write_text", "(", "head", ".", "decode", "(", "'ascii'", ")", ")", "\n", "\n", "changes", "=", "repo", ".", "diff", "(", "'HEAD'", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "changes", "=", "repo", ".", "diff", "(", "'--cached'", ")", "\n", "\n", "", "(", "output_dir", "/", "'git-diff.txt'", ")", ".", "write_text", "(", "changes", ")", "\n", "\n", "try", ":", "\n", "                ", "log", "=", "repo", ".", "log", "(", ")", "\n", "(", "output_dir", "/", "'git-log.txt'", ")", ".", "write_text", "(", "log", ")", "\n", "", "except", "git", ".", "exc", ".", "GitCommandError", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.utils._dump_args": [[47, 50], ["output_path.open", "json.dump"], "function", ["None"], ["", "", "", "", "def", "_dump_args", "(", "output_path", ")", ":", "\n", "    ", "with", "output_path", ".", "open", "(", "'wt'", ")", "as", "config_file", ":", "\n", "        ", "json", ".", "dump", "(", "sys", ".", "argv", ",", "config_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.utils.setup_experiment": [[52, 88], ["time.time", "pathlib.Path", "log_dir.mkdir", "utils._dump_args", "random.seed", "numpy.random.seed", "tensorflow.random.set_seed", "str", "pathlib.Path().expanduser().resolve", "utils._dump_git", "pathlib.Path().expanduser", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.utils._dump_args", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.utils._dump_git"], ["", "", "def", "setup_experiment", "(", "results_path", ",", "name", ",", "seed", ",", "save_diff", "=", "True", ")", ":", "\n", "    ", "\"\"\"Performs experiment setup including:\n        * setting the seeds for random number generators\n        * creating a directory for the results\n        * saving git state including code diff\n        * saving script's arguments to a file\n\n    Make sure to add all large files to `.gitignore` when `save_diff` is set to True.\n\n    Args:\n        results_path (str): parent directory for all of the experiments\n        name (str): name for the experiment\n        seed (int): seed for the random number generators\n        save_diff (bool): saves git diff if True\n\n    Returns:\n        str: path to the directory for the results\n        float: start time.\n    \"\"\"", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "+", "1", ")", "\n", "tf", ".", "random", ".", "set_seed", "(", "seed", "+", "2", ")", "\n", "\n", "", "results_path", "=", "Path", "(", "results_path", ")", "\n", "log_dir", "=", "results_path", "/", "name", "/", "str", "(", "start_time", ")", "\n", "log_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "if", "save_diff", ":", "\n", "        ", "script_path", "=", "Path", "(", "sys", ".", "argv", "[", "0", "]", ")", ".", "expanduser", "(", ")", ".", "resolve", "(", ")", "\n", "_dump_git", "(", "script_path", ".", "parent", ",", "log_dir", "/", "'git'", ")", "\n", "", "_dump_args", "(", "log_dir", "/", "'args.json'", ")", "\n", "\n", "return", "log_dir", ",", "start_time", "\n", "", ""]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection.__init__": [[23, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_fft", ",", "hop_length", ",", "sub_mean", "=", "True", ")", ":", "\n", "        ", "self", ".", "_num_fft", "=", "num_fft", "\n", "self", ".", "_hop_length", "=", "hop_length", "\n", "self", ".", "_sub_mean", "=", "sub_mean", "\n", "self", ".", "coefficients", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection.num_fft": [[29, 32], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_fft", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_fft", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection.hop_length": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hop_length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hop_length", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection.sub_mean": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sub_mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sub_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection._stft": [[41, 45], ["librosa.stft", "numpy.mean"], "methods", ["None"], ["", "def", "_stft", "(", "self", ",", "audio", ")", ":", "\n", "        ", "if", "self", ".", "_sub_mean", ":", "\n", "            ", "audio", "-=", "np", ".", "mean", "(", "audio", ")", "\n", "", "return", "librosa", ".", "stft", "(", "audio", ",", "n_fft", "=", "self", ".", "_num_fft", ",", "hop_length", "=", "self", ".", "_hop_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection._correction": [[46, 49], ["scipy.stats.gmean"], "methods", ["None"], ["", "def", "_correction", "(", "self", ",", "spec_a", ",", "spec_b", ")", ":", "\n", "        ", "ratio", "=", "spec_a", "/", "spec_b", "\n", "return", "gmean", "(", "ratio", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection.fit": [[50, 53], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "fit", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection.transform_stft": [[54, 68], ["numpy.ones", "correction._SpectrumCorrection.coefficients[].reshape"], "methods", ["None"], ["", "def", "transform_stft", "(", "self", ",", "stft", ",", "device", ",", "frequency_axis", "=", "0", ")", ":", "\n", "        ", "\"\"\"Apply spectrum correction to a STFT.\n\n        Args:\n            stft (np.array): STFT of the signal\n            device: which device produced the recording\n            frequency_axis: which is the frequency axis\n\n        Returns:\n            np.array: transformed STFT\n        \"\"\"", "\n", "shape", "=", "np", ".", "ones", "(", "stft", ".", "ndim", ",", "int", ")", "\n", "shape", "[", "frequency_axis", "]", "=", "-", "1", "\n", "return", "stft", "*", "self", ".", "coefficients", "[", "device", "]", ".", "reshape", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection.transform_wave": [[69, 87], ["correction._SpectrumCorrection._stft", "correction._SpectrumCorrection.transform_stft", "librosa.istft", "len"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection._stft", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.transform_stft"], ["", "def", "transform_wave", "(", "self", ",", "recording", ",", "device", ",", "return_stft", "=", "False", ")", ":", "\n", "        ", "\"\"\"Apply spectrum correction to a raw waveform.\n\n        Args:\n            recording (np.array): raw audio sequence\n            device: which device produced the recording\n            return_stft: return the STFT of the signal instead of the waveform\n\n        Returns:\n            np.array: transformed waveform or STFT if selected\n        \"\"\"", "\n", "stft", "=", "self", ".", "_stft", "(", "recording", ")", "\n", "stft", "=", "self", ".", "transform_stft", "(", "stft", ",", "device", ",", "frequency_axis", "=", "0", ")", "\n", "\n", "if", "return_stft", ":", "\n", "            ", "return", "stft", "\n", "", "else", ":", "\n", "            ", "return", "librosa", ".", "istft", "(", "stft", ",", "hop_length", "=", "self", ".", "_hop_length", ",", "length", "=", "len", "(", "recording", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.AlignedSpectrumCorrection.fit": [[94, 121], ["stfts.items", "scipy.stats.gmean", "numpy.abs", "correction.AlignedSpectrumCorrection.AlignedSpectrumCorrection._correction", "coefficients.setdefault().append", "coefficients.items", "correction.AlignedSpectrumCorrection.AlignedSpectrumCorrection._stft", "segment.items", "numpy.isnan().any", "coefficients.setdefault", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection._correction", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection._stft"], ["def", "fit", "(", "self", ",", "aligned_segments", ",", "reference", ")", ":", "\n", "        ", "\"\"\"Computes coefficients for spectrum correction.\n\n        Args:\n            aligned_segments (iterable): Each element is a dictionary of aligned in time recordings,\n                keys correspond to device names and values are raw waveforms.\n            reference (str): Reference device.\n        \"\"\"", "\n", "coefficients", "=", "{", "}", "\n", "\n", "for", "segment", "in", "aligned_segments", ":", "\n", "            ", "stfts", "=", "{", "\n", "device", ":", "np", ".", "abs", "(", "self", ".", "_stft", "(", "audio", ")", ")", "\n", "for", "device", ",", "audio", "in", "segment", ".", "items", "(", ")", "\n", "if", "not", "np", ".", "isnan", "(", "audio", ")", ".", "any", "(", ")", "\n", "}", "\n", "\n", "ref_stft", "=", "stfts", "[", "reference", "]", "\n", "\n", "for", "device", ",", "spec", "in", "stfts", ".", "items", "(", ")", ":", "\n", "# TODO possible div by zero + use less memory", "\n", "                ", "correction", "=", "self", ".", "_correction", "(", "ref_stft", ",", "spec", ")", "\n", "coefficients", ".", "setdefault", "(", "device", ",", "[", "]", ")", ".", "append", "(", "correction", ")", "\n", "\n", "", "", "self", ".", "coefficients", "=", "{", "\n", "device", ":", "gmean", "(", "spectra", ",", "axis", "=", "0", ")", "\n", "for", "device", ",", "spectra", "in", "coefficients", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.UnalignedSpectrumCorrection.fit": [[129, 148], ["scipy.stats.gmean", "numpy.array", "segments.items", "correction.UnalignedSpectrumCorrection.coefficients.items", "correction.UnalignedSpectrumCorrection._correction", "numpy.abs", "correction.UnalignedSpectrumCorrection._stft"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection._correction", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._SpectrumCorrection._stft"], ["def", "fit", "(", "self", ",", "segments", ",", "reference", "=", "None", ")", ":", "\n", "        ", "\"\"\"Computes coefficients for spectrum correction.\n\n        Args:\n            segments (dict): A dictionary of iterables of recordings,\n                keys correspond to device names.\n        \"\"\"", "\n", "self", ".", "coefficients", "=", "{", "\n", "device", ":", "gmean", "(", "np", ".", "array", "(", "[", "\n", "self", ".", "_correction", "(", "1", ",", "np", ".", "abs", "(", "self", ".", "_stft", "(", "recording", ")", ")", ")", "\n", "for", "recording", "in", "recordings", "\n", "]", ")", ",", "axis", "=", "0", ")", "\n", "for", "device", ",", "recordings", "in", "segments", ".", "items", "(", ")", "\n", "}", "\n", "if", "reference", ":", "\n", "            ", "ref", "=", "self", ".", "coefficients", "[", "reference", "]", "\n", "self", ".", "coefficients", "=", "{", "\n", "device", ":", "coeffs", "/", "ref", "\n", "for", "device", ",", "coeffs", "in", "self", ".", "coefficients", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._FIRMixin.__init__": [[163, 167], ["correction._SpectrumCorrection.__init__"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.__init__"], ["def", "__init__", "(", "self", ",", "num_taps", ",", "num_fft", ",", "hop_length", ",", "sub_mean", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_fft", ",", "hop_length", ",", "sub_mean", ")", "\n", "self", ".", "num_taps", "=", "num_taps", "\n", "self", ".", "firs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._FIRMixin.fit": [[168, 175], ["correction._SpectrumCorrection.fit", "librosa.core.fft_frequencies", "scipy.signal.firls", "correction._bands", "correction._bands", "correction._FIRMixin.coefficients.items"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.fit", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._bands", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._bands"], ["", "def", "fit", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "fit", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "freqs", "=", "librosa", ".", "core", ".", "fft_frequencies", "(", "sr", "=", "2", ",", "n_fft", "=", "self", ".", "num_fft", ")", "\n", "self", ".", "firs", "=", "{", "\n", "device", ":", "signal", ".", "firls", "(", "self", ".", "num_taps", ",", "_bands", "(", "freqs", ")", ",", "_bands", "(", "coefficients", ")", ",", "fs", "=", "2", ")", "\n", "for", "device", ",", "coefficients", "in", "self", ".", "coefficients", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._FIRMixin.transform_wave": [[177, 182], ["scipy.signal.lfilter", "librosa.stft"], "methods", ["None"], ["", "def", "transform_wave", "(", "self", ",", "recording", ",", "device", ",", "return_stft", "=", "False", ")", ":", "\n", "        ", "recording", "=", "signal", ".", "lfilter", "(", "self", ".", "firs", "[", "device", "]", ",", "1", ",", "recording", ")", "\n", "if", "return_stft", ":", "\n", "            ", "return", "librosa", ".", "stft", "(", "recording", ",", "n_fft", "=", "self", ".", "_num_fft", ",", "hop_length", "=", "self", ".", "_hop_length", ")", "\n", "", "return", "recording", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.__init__": [[203, 208], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_fft", ",", "hop_length", ",", "sub_mean", "=", "True", ")", ":", "\n", "        ", "self", ".", "_num_fft", "=", "num_fft", "\n", "self", ".", "_hop_length", "=", "hop_length", "\n", "self", ".", "_sub_mean", "=", "sub_mean", "\n", "self", ".", "coefficients", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.num_fft": [[209, 212], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_fft", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_fft", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.hop_length": [[213, 216], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hop_length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hop_length", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.sub_mean": [[217, 220], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sub_mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sub_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection._spectrum": [[221, 226], ["librosa.stft", "numpy.mean", "numpy.mean", "numpy.abs"], "methods", ["None"], ["", "def", "_spectrum", "(", "self", ",", "audio", ")", ":", "\n", "        ", "if", "self", ".", "_sub_mean", ":", "\n", "            ", "audio", "-=", "np", ".", "mean", "(", "audio", ")", "\n", "", "stft", "=", "librosa", ".", "stft", "(", "audio", ",", "n_fft", "=", "self", ".", "_num_fft", ",", "hop_length", "=", "self", ".", "_hop_length", ")", "\n", "return", "np", ".", "mean", "(", "np", ".", "abs", "(", "stft", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection._reduce": [[227, 232], ["numpy.median", "numpy.mean"], "methods", ["None"], ["", "def", "_reduce", "(", "self", ",", "spectra", ",", "use_median", ",", "axis", ")", ":", "\n", "        ", "if", "use_median", ":", "\n", "            ", "return", "np", ".", "median", "(", "spectra", ",", "axis", "=", "axis", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "mean", "(", "spectra", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.fit": [[233, 263], ["correction.DCASESpectrumCorrection._reference_spectrum", "spectra.items", "correction.DCASESpectrumCorrection._reduce", "correction.DCASESpectrumCorrection._spectrum", "coefficients.setdefault().append", "coefficients.items", "segment.items", "numpy.isnan().any", "coefficients.setdefault", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection._reference_spectrum", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection._reduce", "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection._spectrum"], ["", "", "def", "fit", "(", "self", ",", "aligned_segments", ",", "reference", ",", "regex", "=", "False", ",", "use_median", "=", "False", ")", ":", "\n", "        ", "\"\"\"Computes coefficients for spectrum correction.\n\n        Args:\n            aligned_segments (iterable): Each element is a dictionary of aligned in time recordings,\n                keys correspond to device names and values are raw waveforms.\n                Waves for non-reference devices can be missing.\n            reference (str/list/None): Reference device or list of reference devices.\n                When `None` all devices are used as reference.\n            regex (bool): If `True` assume `reference` is a regex.\n            use_median (bool): If `True` use median instead of mean.\n        \"\"\"", "\n", "coefficients", "=", "{", "}", "\n", "\n", "for", "segment", "in", "aligned_segments", ":", "\n", "            ", "spectra", "=", "{", "\n", "device", ":", "self", ".", "_spectrum", "(", "audio", ")", "\n", "for", "device", ",", "audio", "in", "segment", ".", "items", "(", ")", "\n", "if", "not", "np", ".", "isnan", "(", "audio", ")", ".", "any", "(", ")", "\n", "}", "\n", "\n", "base_spec", "=", "self", ".", "_reference_spectrum", "(", "reference", ",", "spectra", ",", "regex", "=", "regex", ")", "\n", "\n", "for", "device", ",", "spec", "in", "spectra", ".", "items", "(", ")", ":", "\n", "# TODO possible div by zero + use less memory", "\n", "                ", "coefficients", ".", "setdefault", "(", "device", ",", "[", "]", ")", ".", "append", "(", "base_spec", "/", "spec", ")", "\n", "\n", "", "", "self", ".", "coefficients", "=", "{", "\n", "device", ":", "self", ".", "_reduce", "(", "spectra", ",", "use_median", ",", "axis", "=", "0", ")", "\n", "for", "device", ",", "spectra", "in", "coefficients", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection._reference_spectrum": [[265, 275], ["numpy.mean", "RuntimeError", "re.match"], "methods", ["None"], ["", "def", "_reference_spectrum", "(", "self", ",", "reference", ",", "spectra", ",", "regex", "=", "False", ")", ":", "\n", "        ", "if", "regex", ":", "\n", "            ", "spectra", "=", "[", "spectra", "[", "key", "]", "for", "key", "in", "spectra", "if", "re", ".", "match", "(", "reference", ",", "key", ")", "]", "\n", "", "else", ":", "\n", "            ", "spectra", "=", "[", "spectra", "[", "key", "]", "for", "key", "in", "spectra", "if", "reference", "==", "key", "]", "\n", "\n", "", "if", "not", "spectra", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Unamble to find reference spectra.'", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "spectra", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.transform_stft": [[276, 290], ["numpy.ones", "correction.DCASESpectrumCorrection.coefficients[].reshape"], "methods", ["None"], ["", "def", "transform_stft", "(", "self", ",", "stft", ",", "device", ",", "frequency_axis", "=", "0", ")", ":", "\n", "        ", "\"\"\"Apply spectrum correction to a STFT.\n\n        Args:\n            stft (np.array): STFT of the signal\n            device: which device produced the recording\n            frequency_axis: which is the frequency axis\n\n        Returns:\n            np.array: transformed STFT\n        \"\"\"", "\n", "shape", "=", "np", ".", "ones", "(", "stft", ".", "ndim", ",", "int", ")", "\n", "shape", "[", "frequency_axis", "]", "=", "-", "1", "\n", "return", "stft", "*", "self", ".", "coefficients", "[", "device", "]", ".", "reshape", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.transform_wave": [[291, 311], ["librosa.stft", "correction.DCASESpectrumCorrection.transform_stft", "librosa.istft", "numpy.mean", "len"], "methods", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction.DCASESpectrumCorrection.transform_stft"], ["", "def", "transform_wave", "(", "self", ",", "recording", ",", "device", ",", "return_stft", "=", "False", ")", ":", "\n", "        ", "\"\"\"Apply spectrum correction to a raw waveform.\n\n        Args:\n            recording (np.array): raw audio sequence\n            device: which device produced the recording\n            return_stft: return the STFT of the signal instead of the waveform\n\n        Returns:\n            np.array: transformed waveform or STFT if selected\n        \"\"\"", "\n", "if", "self", ".", "_sub_mean", ":", "\n", "            ", "recording", "=", "recording", "-", "np", ".", "mean", "(", "recording", ")", "\n", "\n", "", "stft", "=", "librosa", ".", "stft", "(", "recording", ",", "n_fft", "=", "self", ".", "_num_fft", ",", "hop_length", "=", "self", ".", "_hop_length", ")", "\n", "stft", "=", "self", ".", "transform_stft", "(", "stft", ",", "device", ",", "frequency_axis", "=", "0", ")", "\n", "\n", "if", "return_stft", ":", "\n", "            ", "return", "stft", "\n", "", "return", "librosa", ".", "istft", "(", "stft", ",", "hop_length", "=", "self", ".", "_hop_length", ",", "length", "=", "len", "(", "recording", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.correction._bands": [[313, 315], ["numpy.stack"], "function", ["None"], ["", "", "def", "_bands", "(", "freqs", ")", ":", "\n", "    ", "return", "np", ".", "stack", "(", "[", "freqs", "[", ":", "-", "1", "]", ",", "freqs", "[", "1", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.losses.categorical_focal_loss": [[8, 40], ["tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "target.shape.assert_same_rank", "tf.convert_to_tensor.shape.assert_has_rank", "tensorflow.clip_by_value", "tensorflow.reduce_sum", "tensorflow.python.keras.backend.epsilon", "tensorflow.reduce_sum", "tensorflow.convert_to_tensor", "tf.convert_to_tensor.shape.assert_has_rank", "tensorflow.tensordot", "tensorflow.reduce_sum", "tensorflow.math.log", "tensorflow.pow"], "function", ["None"], ["def", "categorical_focal_loss", "(", "target", ",", "predictions", ",", "power", "=", "1.0", ",", "weights", "=", "None", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Categorical focal loss for Keras.\n\n    Args:\n        target: ground truth categories with at least one dimension\n        predictions: batched outputs of the network, same shape as `target`\n        power (float): power parameter\n        weights (floats): weights\n        axis (int): axis containing categories\n\n    Returns:\n        score for givent pairs of predictions and targets\n    \"\"\"", "\n", "power", "=", "tf", ".", "convert_to_tensor", "(", "power", ",", "tf", ".", "float32", ")", "\n", "eps", "=", "tf", ".", "convert_to_tensor", "(", "K", ".", "epsilon", "(", ")", ",", "predictions", ".", "dtype", ".", "base_dtype", ")", "\n", "\n", "target", ".", "shape", ".", "assert_same_rank", "(", "predictions", ".", "shape", ")", "\n", "power", ".", "shape", ".", "assert_has_rank", "(", "0", ")", "\n", "\n", "predictions", "=", "predictions", "/", "tf", ".", "reduce_sum", "(", "predictions", ",", "axis", ",", "True", ")", "\n", "predictions", "=", "tf", ".", "clip_by_value", "(", "predictions", ",", "eps", ",", "1.0", "-", "eps", ")", "\n", "\n", "p", "=", "tf", ".", "reduce_sum", "(", "target", "*", "predictions", ",", "axis", ")", "\n", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "weights", "=", "tf", ".", "convert_to_tensor", "(", "weights", ")", "\n", "weights", ".", "shape", ".", "assert_has_rank", "(", "1", ")", "\n", "a", "=", "tf", ".", "tensordot", "(", "target", ",", "weights", ",", "[", "[", "axis", "]", ",", "[", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "a", "=", "tf", ".", "reduce_sum", "(", "target", ",", "axis", ")", "\n", "\n", "", "return", "-", "a", "*", "tf", ".", "pow", "(", "1", "-", "p", ",", "power", ")", "*", "tf", ".", "math", ".", "log", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.losses.sparse_categorical_focal_loss": [[42, 57], ["tensorflow.one_hot", "losses.categorical_focal_loss", "tensorflow.squeeze", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.SRPOL-AUI_spectrum-correction.experiment.losses.categorical_focal_loss"], ["", "def", "sparse_categorical_focal_loss", "(", "target", ",", "predictions", ",", "power", "=", "1.0", ",", "weights", "=", "None", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Sparse categorical focal loss for Keras.\n\n    Args:\n        target: ground truth categories with at least one dimension\n        predictions: batched outputs of the network, same shape as `target`\n        power (float): power parameter\n        weights (floats): weights\n        axis (int): axis containing categories\n\n    Returns:\n        score for givent pairs of predictions and targets\n    \"\"\"", "\n", "target", "=", "tf", ".", "one_hot", "(", "tf", ".", "squeeze", "(", "tf", ".", "cast", "(", "target", ",", "tf", ".", "int32", ")", ")", ",", "predictions", ".", "shape", "[", "axis", "]", ")", "\n", "return", "categorical_focal_loss", "(", "target", ",", "predictions", ",", "power", ",", "weights", ",", "axis", ")", "\n", "", ""]]}