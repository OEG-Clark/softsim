{"home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.html.HTML.__init__": [[7, 21], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "reflesh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "# print(self.img_dir)", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "reflesh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"reflesh\"", ",", "content", "=", "str", "(", "reflesh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.html.HTML.get_image_dir": [[22, 24], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.html.HTML.add_header": [[25, 28], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.html.HTML.add_table": [[29, 32], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.html.HTML.add_images": [[33, 44], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "width", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.html.HTML.save": [[45, 50], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.png.encode": [[4, 33], ["len", "range", "struct.pack", "struct.pack", "png.encode.chunk"], "function", ["None"], ["def", "encode", "(", "buf", ",", "width", ",", "height", ")", ":", "\n", "  ", "\"\"\" buf: must be bytes or a bytearray in py3, a regular string in py2. formatted RGBRGB... \"\"\"", "\n", "assert", "(", "width", "*", "height", "*", "3", "==", "len", "(", "buf", ")", ")", "\n", "bpp", "=", "3", "\n", "\n", "def", "raw_data", "(", ")", ":", "\n", "# reverse the vertical line order and add null bytes at the start", "\n", "    ", "row_bytes", "=", "width", "*", "bpp", "\n", "for", "row_start", "in", "range", "(", "(", "height", "-", "1", ")", "*", "width", "*", "bpp", ",", "-", "1", ",", "-", "row_bytes", ")", ":", "\n", "      ", "yield", "b'\\x00'", "\n", "yield", "buf", "[", "row_start", ":", "row_start", "+", "row_bytes", "]", "\n", "\n", "", "", "def", "chunk", "(", "tag", ",", "data", ")", ":", "\n", "    ", "return", "[", "\n", "struct", ".", "pack", "(", "\"!I\"", ",", "len", "(", "data", ")", ")", ",", "\n", "tag", ",", "\n", "data", ",", "\n", "struct", ".", "pack", "(", "\"!I\"", ",", "0xFFFFFFFF", "&", "zlib", ".", "crc32", "(", "data", ",", "zlib", ".", "crc32", "(", "tag", ")", ")", ")", "\n", "]", "\n", "\n", "", "SIGNATURE", "=", "b'\\x89PNG\\r\\n\\x1a\\n'", "\n", "COLOR_TYPE_RGB", "=", "2", "\n", "COLOR_TYPE_RGBA", "=", "6", "\n", "bit_depth", "=", "8", "\n", "return", "b''", ".", "join", "(", "\n", "[", "SIGNATURE", "]", "+", "\n", "chunk", "(", "b'IHDR'", ",", "struct", ".", "pack", "(", "\"!2I5B\"", ",", "width", ",", "height", ",", "bit_depth", ",", "COLOR_TYPE_RGB", ",", "0", ",", "0", ",", "0", ")", ")", "+", "\n", "chunk", "(", "b'IDAT'", ",", "zlib", ".", "compress", "(", "b''", ".", "join", "(", "raw_data", "(", ")", ")", ",", "9", ")", ")", "+", "\n", "chunk", "(", "b'IEND'", ",", "b''", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.image_pool.ImagePool.__init__": [[6, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.image_pool.ImagePool.query": [[12, 33], ["torch.autograd.Variable", "torch.unsqueeze", "torch.cat", "image_pool.ImagePool.images.append", "torch.autograd.Variable.append", "random.uniform", "random.randint", "image_pool.ImagePool.images[].clone", "torch.autograd.Variable.append", "torch.autograd.Variable.append"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "pool_size", "==", "0", ":", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ".", "data", ":", "\n", "            ", "image", "=", "torch", ".", "unsqueeze", "(", "image", ",", "0", ")", "\n", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "return_images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", "]", ".", "clone", "(", ")", "\n", "self", ".", "images", "[", "random_id", "]", "=", "image", "\n", "return_images", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "return_images", ".", "append", "(", "image", ")", "\n", "", "", "", "return_images", "=", "Variable", "(", "torch", ".", "cat", "(", "return_images", ",", "0", ")", ")", "\n", "return", "return_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.visualizer.Visualizer.__init__": [[9, 29], ["os.path.join", "visdom.Visdom", "os.path.join", "os.path.join", "print", "util.mkdirs", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "# self.opt = opt", "\n", "        ", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "if", "self", ".", "display_id", ">", "0", ":", "\n", "            ", "import", "visdom", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "port", "=", "opt", ".", "display_port", ")", "\n", "self", ".", "display_single_pane_ncols", "=", "opt", ".", "display_single_pane_ncols", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.visualizer.Visualizer.display_current_results": [[31, 93], ["visuals.items", "html.HTML", "range", "html.HTML.save", "int", "visuals.items", "visualizer.Visualizer.vis.images", "visualizer.Visualizer.vis.text", "visuals.items", "os.path.join", "util.save_image", "html.HTML.add_header", "visuals.items", "html.HTML.add_images", "numpy.ceil", "images.append", "numpy.ones_like", "images.append", "visualizer.Visualizer.vis.image", "ims.append", "txts.append", "links.append", "next", "image_numpy.transpose", "image_numpy.transpose", "dict", "dict", "image_numpy.transpose", "iter", "len", "dict", "visuals.values", "visuals.items"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.save", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.save_image", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.html.HTML.add_header", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.html.HTML.add_images"], ["", "", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "display_id", ">", "0", ":", "# show images in the browser", "\n", "            ", "if", "self", ".", "display_single_pane_ncols", ">", "0", ":", "\n", "                ", "h", ",", "w", "=", "next", "(", "iter", "(", "visuals", ".", "values", "(", ")", ")", ")", ".", "shape", "[", ":", "2", "]", "\n", "table_css", "=", "\"\"\"<style>\n    table {border-collapse: separate; border-spacing:4px; white-space:nowrap; text-align:center}\n    table td {width: %dpx; height: %dpx; padding: 4px; outline: 4px solid black}\n</style>\"\"\"", "%", "(", "w", ",", "h", ")", "\n", "ncols", "=", "self", ".", "display_single_pane_ncols", "\n", "title", "=", "self", ".", "name", "\n", "label_html", "=", "''", "\n", "label_html_row", "=", "''", "\n", "nrows", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "visuals", ".", "items", "(", ")", ")", "/", "ncols", ")", ")", "\n", "images", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "label_html_row", "+=", "'<td>%s</td>'", "%", "label", "\n", "images", ".", "append", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "\n", "idx", "+=", "1", "\n", "if", "idx", "%", "ncols", "==", "0", ":", "\n", "                        ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "label_html_row", "=", "''", "\n", "", "", "white_image", "=", "np", ".", "ones_like", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "*", "255", "\n", "while", "idx", "%", "ncols", "!=", "0", ":", "\n", "                    ", "images", ".", "append", "(", "white_image", ")", "\n", "label_html_row", "+=", "'<td></td>'", "\n", "idx", "+=", "1", "\n", "", "if", "label_html_row", "!=", "''", ":", "\n", "                    ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "# pane col = image row", "\n", "", "self", ".", "vis", ".", "images", "(", "images", ",", "nrow", "=", "ncols", ",", "win", "=", "self", ".", "display_id", "+", "1", ",", "\n", "padding", "=", "2", ",", "opts", "=", "dict", "(", "title", "=", "title", "+", "' images'", ")", ")", "\n", "label_html", "=", "'<table>%s</table>'", "%", "label_html", "\n", "self", ".", "vis", ".", "text", "(", "table_css", "+", "label_html", ",", "win", "=", "self", ".", "display_id", "+", "2", ",", "\n", "opts", "=", "dict", "(", "title", "=", "title", "+", "' labels'", ")", ")", "\n", "", "else", ":", "\n", "                ", "idx", "=", "1", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "#image_numpy = np.flipud(image_numpy)", "\n", "                    ", "self", ".", "vis", ".", "image", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ",", "opts", "=", "dict", "(", "title", "=", "label", ")", ",", "\n", "win", "=", "self", ".", "display_id", "+", "idx", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "if", "self", ".", "use_html", ":", "# save images to a html file", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.png'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "# update website", "\n", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "reflesh", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "img_path", "=", "'epoch%.3d_%s.png'", "%", "(", "n", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.visualizer.Visualizer.plot_current_errors": [[95, 109], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.vis.line", "hasattr", "list", "numpy.stack", "numpy.array", "errors.keys", "len", "numpy.array"], "methods", ["None"], ["", "", "def", "plot_current_errors", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "errors", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "errors", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "errors", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' loss over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'loss'", "}", ",", "\n", "win", "=", "self", ".", "display_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.visualizer.Visualizer.print_current_errors": [[111, 119], ["errors.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "def", "print_current_errors", "(", "self", ",", "epoch", ",", "i", ",", "errors", ",", "t", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ")", "\n", "for", "k", ",", "v", "in", "errors", ".", "items", "(", ")", ":", "\n", "            ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.visualizer.Visualizer.save_images": [[121, 140], ["webpage.get_image_dir", "ntpath.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.html.HTML.add_header", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.html.HTML.add_images", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.save_image"], ["", "", "def", "save_images", "(", "self", ",", "webpage", ",", "visuals", ",", "image_path", ")", ":", "\n", "        ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "\n", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", "=", "[", "]", "\n", "txts", "=", "[", "]", "\n", "links", "=", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "            ", "image_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData.__init__": [[29, 36], ["url_dict.get", "technique.lower"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData.get"], ["def", "__init__", "(", "self", ",", "technique", "=", "'cyclegan'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "url_dict", "=", "{", "\n", "'pix2pix'", ":", "'https://people.eecs.berkeley.edu/~tinghuiz/projects/pix2pix/datasets'", ",", "\n", "'cyclegan'", ":", "'https://people.eecs.berkeley.edu/~taesung_park/CycleGAN/datasets'", "\n", "}", "\n", "self", ".", "url", "=", "url_dict", ".", "get", "(", "technique", ".", "lower", "(", ")", ")", "\n", "self", ".", "_verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData._print": [[37, 40], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "_verbose", ":", "\n", "            ", "print", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData._get_options": [[41, 47], ["bs4.BeautifulSoup", "bs4.BeautifulSoup.find_all", "h.text.endswith"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_options", "(", "r", ")", ":", "\n", "        ", "soup", "=", "BeautifulSoup", "(", "r", ".", "text", ",", "'lxml'", ")", "\n", "options", "=", "[", "h", ".", "text", "for", "h", "in", "soup", ".", "find_all", "(", "'a'", ",", "href", "=", "True", ")", "\n", "if", "h", ".", "text", ".", "endswith", "(", "(", "'.zip'", ",", "'tar.gz'", ")", ")", "]", "\n", "return", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData._present_options": [[48, 57], ["requests.get", "get_data.GetData._get_options", "print", "enumerate", "input", "print", "int"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData.get", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData._get_options"], ["", "def", "_present_options", "(", "self", ")", ":", "\n", "        ", "r", "=", "requests", ".", "get", "(", "self", ".", "url", ")", "\n", "options", "=", "self", ".", "_get_options", "(", "r", ")", "\n", "print", "(", "'Options:\\n'", ")", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "options", ")", ":", "\n", "            ", "print", "(", "\"{0}: {1}\"", ".", "format", "(", "i", ",", "o", ")", ")", "\n", "", "choice", "=", "input", "(", "\"\\nPlease enter the number of the \"", "\n", "\"dataset above you wish to download:\"", ")", "\n", "return", "options", "[", "int", "(", "choice", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData._download_data": [[58, 80], ["os.path.basename", "os.path.join", "os.path.basename.endswith", "get_data.GetData._print", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.remove", "os.path.isdir", "os.makedirs", "open", "requests.get", "f.write", "tarfile.open", "os.path.basename.endswith", "zipfile.ZipFile", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData._print", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData.get"], ["", "def", "_download_data", "(", "self", ",", "dataset_url", ",", "save_path", ")", ":", "\n", "        ", "if", "not", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "base", "=", "basename", "(", "dataset_url", ")", "\n", "temp_save_path", "=", "join", "(", "save_path", ",", "base", ")", "\n", "\n", "with", "open", "(", "temp_save_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "r", "=", "requests", ".", "get", "(", "dataset_url", ")", "\n", "f", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "", "if", "base", ".", "endswith", "(", "'.tar.gz'", ")", ":", "\n", "            ", "obj", "=", "tarfile", ".", "open", "(", "temp_save_path", ")", "\n", "", "elif", "base", ".", "endswith", "(", "'.zip'", ")", ":", "\n", "            ", "obj", "=", "ZipFile", "(", "temp_save_path", ",", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown File Type: {0}.\"", ".", "format", "(", "base", ")", ")", "\n", "\n", "", "self", ".", "_print", "(", "\"Unpacking Data...\"", ")", "\n", "obj", ".", "extractall", "(", "save_path", ")", "\n", "obj", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "temp_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData.get": [[81, 116], ["os.path.join", "os.path.isdir", "os.path.abspath", "get_data.GetData._present_options", "warnings.warn", "get_data.GetData._print", "get_data.GetData._download_data", "get_data.GetData.split"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData._present_options", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData._print", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.get_data.GetData._download_data"], ["", "def", "get", "(", "self", ",", "save_path", ",", "dataset", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Download a dataset.\n\n        Args:\n            save_path : str\n                A directory to save the data to.\n            dataset : str, optional\n                A specific dataset to download.\n                Note: this must include the file extension.\n                If None, options will be presented for you\n                to choose from.\n\n        Returns:\n            save_path_full : str\n                The absolute path to the downloaded data.\n\n        \"\"\"", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "selected_dataset", "=", "self", ".", "_present_options", "(", ")", "\n", "", "else", ":", "\n", "            ", "selected_dataset", "=", "dataset", "\n", "\n", "", "save_path_full", "=", "join", "(", "save_path", ",", "selected_dataset", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "if", "isdir", "(", "save_path_full", ")", ":", "\n", "            ", "warn", "(", "\"\\n'{0}' already exists. Voiding Download.\"", ".", "format", "(", "\n", "save_path_full", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_print", "(", "'Downloading Data...'", ")", "\n", "url", "=", "\"{0}/{1}\"", ".", "format", "(", "self", ".", "url", ",", "selected_dataset", ")", "\n", "self", ".", "_download_data", "(", "url", ",", "save_path", "=", "save_path", ")", "\n", "\n", "", "return", "abspath", "(", "save_path_full", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im": [[12, 17], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "#print(image_numpy.shape)", "\n", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2pil": [[18, 25], ["image_tensor[].cpu().float().numpy", "image_tensor[].cpu().float().numpy.astype", "PIL.Image.fromarray", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["", "def", "tensor2pil", "(", "image_tensor", ",", "bbox", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "image", "=", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "y", ",", "x", ",", "w", ",", "h", "=", "bbox", "\n", "image_pil", "=", "Image", ".", "fromarray", "(", "image", "[", "y", "[", "0", "]", ":", "h", "[", "0", "]", ",", "x", "[", "0", "]", ":", "w", "[", "0", "]", "]", ")", "\n", "return", "image_pil", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.diagnose_network": [[27, 38], ["net.parameters", "print", "print", "torch.mean", "torch.abs"], "function", ["None"], ["", "def", "diagnose_network", "(", "net", ",", "name", "=", "'network'", ")", ":", "\n", "    ", "mean", "=", "0.0", "\n", "count", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "mean", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "param", ".", "grad", ".", "data", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "mean", "=", "mean", "/", "count", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.save_image": [[40, 43], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.info": [[44, 53], ["print", "dir", "isinstance", "getattr", "s.split", "method.ljust", "processFunc", "str", "getattr"], "function", ["None"], ["", "def", "info", "(", "object", ",", "spacing", "=", "10", ",", "collapse", "=", "1", ")", ":", "\n", "    ", "\"\"\"Print methods and doc strings.\n    Takes module, class, list, dictionary, or string.\"\"\"", "\n", "methodList", "=", "[", "e", "for", "e", "in", "dir", "(", "object", ")", "if", "isinstance", "(", "getattr", "(", "object", ",", "e", ")", ",", "collections", ".", "Callable", ")", "]", "\n", "processFunc", "=", "collapse", "and", "(", "lambda", "s", ":", "\" \"", ".", "join", "(", "s", ".", "split", "(", ")", ")", ")", "or", "(", "lambda", "s", ":", "s", ")", "\n", "print", "(", "\"\\n\"", ".", "join", "(", "[", "\"%s %s\"", "%", "\n", "(", "method", ".", "ljust", "(", "spacing", ")", ",", "\n", "processFunc", "(", "str", "(", "getattr", "(", "object", ",", "method", ")", ".", "__doc__", ")", ")", ")", "\n", "for", "method", "in", "methodList", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.varname": [[54, 59], ["inspect.getframeinfo", "re.search", "re.search.group", "inspect.currentframe"], "function", ["None"], ["", "def", "varname", "(", "p", ")", ":", "\n", "    ", "for", "line", "in", "inspect", ".", "getframeinfo", "(", "inspect", ".", "currentframe", "(", ")", ".", "f_back", ")", "[", "3", "]", ":", "\n", "        ", "m", "=", "re", ".", "search", "(", "r'\\bvarname\\s*\\(\\s*([A-Za-z_][A-Za-z0-9_]*)\\s*\\)'", ",", "line", ")", "\n", "if", "m", ":", "\n", "            ", "return", "m", ".", "group", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.print_numpy": [[60, 68], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], ["", "", "", "def", "print_numpy", "(", "x", ",", "val", "=", "True", ",", "shp", "=", "False", ")", ":", "\n", "    ", "x", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "shp", ":", "\n", "        ", "print", "(", "'shape,'", ",", "x", ".", "shape", ")", "\n", "", "if", "val", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "print", "(", "'mean = %3.3f, min = %3.3f, max = %3.3f, median = %3.3f, std=%3.3f'", "%", "(", "\n", "np", ".", "mean", "(", "x", ")", ",", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "median", "(", "x", ")", ",", "np", ".", "std", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.mkdirs": [[70, 76], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.mkdir", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.mkdir": [[78, 81], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.models.create_model": [[2, 22], ["print", "TestModel.initialize", "print", "CycleGANModel", "Pix2PixModel", "TestModel.name", "TestModel", "ValueError"], "function", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.unaligned_dataset.UnalignedDataset.name"], ["def", "create_model", "(", "opt", ")", ":", "\n", "    ", "model", "=", "None", "\n", "print", "(", "opt", ".", "model", ")", "\n", "if", "opt", ".", "model", "==", "'cycle_gan'", ":", "\n", "        ", "assert", "(", "opt", ".", "dataset_mode", "==", "'unaligned'", ")", "\n", "from", ".", "cycle_gan_model", "import", "CycleGANModel", "\n", "model", "=", "CycleGANModel", "(", ")", "\n", "", "elif", "opt", ".", "model", "==", "'pix2pix'", ":", "\n", "        ", "assert", "(", "opt", ".", "dataset_mode", "==", "'aligned'", ")", "\n", "from", ".", "pix2pix_model", "import", "Pix2PixModel", "\n", "model", "=", "Pix2PixModel", "(", ")", "\n", "", "elif", "opt", ".", "model", "==", "'test'", ":", "\n", "        ", "assert", "(", "opt", ".", "dataset_mode", "==", "'single'", ")", "\n", "from", ".", "test_model", "import", "TestModel", "\n", "model", "=", "TestModel", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Model [%s] not recognized.\"", "%", "opt", ".", "model", ")", "\n", "", "model", ".", "initialize", "(", "opt", ")", "\n", "print", "(", "\"model [%s] was created\"", "%", "(", "model", ".", "name", "(", ")", ")", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.GANLoss.__init__": [[114, 127], ["torch.Module.__init__", "print", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ",", "\n", "tensor", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "real_label", "=", "target_real_label", "\n", "self", ".", "fake_label", "=", "target_fake_label", "\n", "self", ".", "real_label_var", "=", "None", "\n", "self", ".", "fake_label_var", "=", "None", "\n", "self", ".", "Tensor", "=", "tensor", "\n", "print", "(", "use_lsgan", ")", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.GANLoss.get_target_tensor": [[128, 145], ["networks.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks.GANLoss.Tensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "networks.GANLoss.real_label_var.numel", "input.numel", "networks.GANLoss.fake_label_var.numel", "input.numel", "networks.GANLoss.Tensor", "networks.GANLoss.Tensor", "input.size", "input.size"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "None", "\n", "if", "target_is_real", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "real_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "real_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "real_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "real_label", ")", "\n", "self", ".", "real_label_var", "=", "Variable", "(", "real_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "real_label_var", "\n", "", "else", ":", "\n", "            ", "create_label", "=", "(", "(", "self", ".", "fake_label_var", "is", "None", ")", "or", "\n", "(", "self", ".", "fake_label_var", ".", "numel", "(", ")", "!=", "input", ".", "numel", "(", ")", ")", ")", "\n", "if", "create_label", ":", "\n", "                ", "fake_tensor", "=", "self", ".", "Tensor", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "self", ".", "fake_label", ")", "\n", "self", ".", "fake_label_var", "=", "Variable", "(", "fake_tensor", ",", "requires_grad", "=", "False", ")", "\n", "", "target_tensor", "=", "self", ".", "fake_label_var", "\n", "", "return", "target_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.GANLoss.__call__": [[146, 149], ["networks.GANLoss.get_target_tensor", "networks.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.ResnetGenerator.__init__": [[156, 193], ["torch.Module.__init__", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "gpu_ids", "=", "[", "]", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_nc", "=", "input_nc", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "self", ".", "ngf", "=", "ngf", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.ResnetGenerator.forward": [[194, 199], ["isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "networks.ResnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "gpu_ids", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model", ",", "input", ",", "self", ".", "gpu_ids", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.ResnetBlock.__init__": [[203, 206], ["torch.Module.__init__", "networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.ResnetBlock.build_conv_block": [[207, 238], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.ResnetBlock.forward": [[239, 242], ["networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.UnetGenerator.__init__": [[249, 267], ["torch.Module.__init__", "networks.UnetSkipConnectionBlock", "range", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "num_downs", ",", "ngf", "=", "64", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "UnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "# currently support only input_nc == output_nc", "\n", "assert", "(", "input_nc", "==", "output_nc", ")", "\n", "\n", "# construct unet structure", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "model", "=", "unet_block", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.UnetGenerator.forward": [[268, 273], ["isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "networks.UnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "gpu_ids", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model", ",", "input", ",", "self", ".", "gpu_ids", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.UnetSkipConnectionBlock.__init__": [[279, 318], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "norm_layer", "torch.ReLU", "torch.ReLU", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "\n", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outermost", "=", "outermost", "\n", "\n", "downconv", "=", "nn", ".", "Conv2d", "(", "outer_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", "\n", "down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "model", "=", "down", "+", "up", "\n", "", "else", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.UnetSkipConnectionBlock.forward": [[319, 324], ["networks.UnetSkipConnectionBlock.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UnetSkipConnectionBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "self", ".", "model", "(", "x", ")", ",", "x", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.NLayerDiscriminator.__init__": [[328, 366], ["torch.Module.__init__", "int", "range", "min", "torch.Sequential", "torch.Sequential", "numpy.ceil", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.NLayerDiscriminator.forward": [[367, 372], ["len", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "networks.NLayerDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "gpu_ids", ")", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model", ",", "input", ",", "self", ".", "gpu_ids", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.PersonDiscriminator.__init__": [[375, 397], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "PersonDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "# input is (nc) x 64 x 64", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf) x 32 x 32", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 16 x 16", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*4) x 8 x 8", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*8) x 4 x 4", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.PersonDiscriminator.forward": [[398, 403], ["len", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "networks.PersonDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "gpu_ids", ")", "and", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "return", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "model", ",", "input", ",", "self", ".", "gpu_ids", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.SPP_NET.__init__": [[405, 431], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "input_nc", ",", "ndf", "=", "64", ",", "use_sigmoid", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "SPP_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "self", ".", "output_num", "=", "[", "4", ",", "2", ",", "1", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "LReLU1", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", "\n", "self", ".", "LReLU2", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", "\n", "self", ".", "LReLU3", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", "\n", "self", ".", "LReLU4", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "# print('hehe')", "\n", "# print(use_sigmoid)", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "self", ".", "ac", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "# self.ReLU = nn.ReLU(True)", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.SPP_NET.spatial_pyramid_pool": [[436, 462], ["range", "len", "int", "int", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d.", "math.ceil", "math.ceil", "nn.MaxPool2d.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nn.MaxPool2d.view"], "methods", ["None"], ["", "", "def", "spatial_pyramid_pool", "(", "self", ",", "previous_conv", ",", "num_sample", ",", "previous_conv_size", ",", "out_pool_size", ")", ":", "\n", "        ", "'''\n        previous_conv: a tensor vector of previous convolution layer\n        num_sample: an int number of image in the batch\n        previous_conv_size: an int vector [height, width] of the matrix features size of previous convolution layer\n        out_pool_size: a int vector of expected output size of max pooling layer\n    \n        returns: a tensor vector with shape [1 x n] is the concentration of multi-level pooling\n        '''", "\n", "# print(previous_conv.size())", "\n", "for", "i", "in", "range", "(", "len", "(", "out_pool_size", ")", ")", ":", "\n", "# print(previous_conv_size)", "\n", "\n", "            ", "h_wid", "=", "int", "(", "math", ".", "ceil", "(", "previous_conv_size", "[", "0", "]", "/", "out_pool_size", "[", "i", "]", ")", ")", "\n", "w_wid", "=", "int", "(", "math", ".", "ceil", "(", "previous_conv_size", "[", "1", "]", "/", "out_pool_size", "[", "i", "]", ")", ")", "\n", "h_pad", "=", "(", "h_wid", "*", "out_pool_size", "[", "i", "]", "-", "previous_conv_size", "[", "0", "]", "+", "1", ")", "/", "2", "\n", "w_pad", "=", "(", "w_wid", "*", "out_pool_size", "[", "i", "]", "-", "previous_conv_size", "[", "1", "]", "+", "1", ")", "/", "2", "\n", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "(", "h_wid", ",", "w_wid", ")", ",", "stride", "=", "(", "h_wid", ",", "w_wid", ")", ",", "padding", "=", "(", "h_pad", ",", "w_pad", ")", ")", "\n", "x", "=", "maxpool", "(", "previous_conv", ")", "\n", "if", "(", "i", "==", "0", ")", ":", "\n", "                ", "spp", "=", "x", ".", "view", "(", "num_sample", ",", "-", "1", ")", "\n", "# print(\"spp size:\",spp.size())", "\n", "", "else", ":", "\n", "# print(\"size:\",spp.size())", "\n", "                ", "spp", "=", "torch", ".", "cat", "(", "(", "spp", ",", "x", ".", "view", "(", "num_sample", ",", "-", "1", ")", ")", ",", "1", ")", "\n", "", "", "return", "spp", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.SPP_NET.forward": [[463, 499], ["networks.SPP_NET.conv1", "networks.SPP_NET.LReLU1", "networks.SPP_NET.conv2", "networks.SPP_NET.LReLU2", "networks.SPP_NET.conv3", "networks.SPP_NET.LReLU3", "networks.SPP_NET.conv4", "networks.SPP_NET.LReLU4", "networks.SPP_NET.conv5", "networks.SPP_NET.spatial_pyramid_pool", "networks.SPP_NET.BN1", "networks.SPP_NET.BN2", "networks.SPP_NET.BN3", "networks.SPP_NET.ac", "int", "int", "networks.SPP_NET.size", "networks.SPP_NET.size"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.SPP_NET.spatial_pyramid_pool"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "LReLU1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "#x = F.leaky_relu(self.BN1(x))", "\n", "x", "=", "self", ".", "LReLU2", "(", "self", ".", "BN1", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "#x = F.leaky_relu(self.BN2(x))", "\n", "x", "=", "self", ".", "LReLU3", "(", "self", ".", "BN2", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "# x = F.leaky_relu(self.BN3(x))", "\n", "x", "=", "self", ".", "LReLU4", "(", "self", ".", "BN3", "(", "x", ")", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "# print(x.size())", "\n", "spp", "=", "self", ".", "spatial_pyramid_pool", "(", "x", ",", "1", ",", "[", "int", "(", "x", ".", "size", "(", "2", ")", ")", ",", "int", "(", "x", ".", "size", "(", "3", ")", ")", "]", ",", "self", ".", "output_num", ")", "\n", "# print(spp.size())", "\n", "# fc1 = self.fc1(spp)", "\n", "# fc2 = self.fc2(fc1)", "\n", "# s = nn.Sigmoid()", "\n", "# output = s(fc2)", "\n", "#print(spp)", "\n", "#out = F.leaky_relu(spp)", "\n", "#out = F.relu(spp)", "\n", "#out = self.output(spp.view(x.size(0), -1))", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "out", "=", "self", ".", "ac", "(", "spp", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "spp", "\n", "#self.output = nn.Linear(30*30*1, 1)", "\n", "\n", "#return output.mean(0).view(-1)", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.weights_init": [[13, 20], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.get_norm_layer": [[22, 30], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.define_G": [[32, 54], ["networks.get_norm_layer", "UnetGenerator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "networks.ResnetGenerator", "len", "UnetGenerator.cuda", "networks.ResnetGenerator", "networks.UnetGenerator", "networks.UnetGenerator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.get_norm_layer"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "which_model_netG", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "netG", "=", "None", "\n", "use_gpu", "=", "len", "(", "gpu_ids", ")", ">", "0", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "\n", "", "if", "which_model_netG", "==", "'resnet_9blocks'", ":", "\n", "        ", "netG", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "9", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "elif", "which_model_netG", "==", "'resnet_6blocks'", ":", "\n", "        ", "netG", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "6", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "elif", "which_model_netG", "==", "'unet_128'", ":", "\n", "        ", "netG", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "7", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "elif", "which_model_netG", "==", "'unet_256'", ":", "\n", "        ", "netG", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "8", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model name [%s] is not recognized'", "%", "which_model_netG", ")", "\n", "", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "netG", ".", "cuda", "(", "device", "=", "gpu_ids", "[", "0", "]", ")", "\n", "", "netG", ".", "apply", "(", "weights_init", ")", "\n", "return", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.define_image_D": [[56, 75], ["networks.get_norm_layer", "NLayerDiscriminator.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "networks.NLayerDiscriminator", "NLayerDiscriminator.cuda", "networks.NLayerDiscriminator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.get_norm_layer"], ["", "def", "define_image_D", "(", "input_nc", ",", "ndf", ",", "which_model_netD", ",", "\n", "n_layers_D", "=", "3", ",", "norm", "=", "'batch'", ",", "use_sigmoid", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "netD", "=", "None", "\n", "use_gpu", "=", "len", "(", "gpu_ids", ")", ">", "0", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "", "if", "which_model_netD", "==", "'basic'", ":", "\n", "        ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "elif", "which_model_netD", "==", "'n_layers'", ":", "\n", "        ", "netD", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Discriminator model name [%s] is not recognized'", "%", "\n", "which_model_netD", ")", "\n", "", "if", "use_gpu", ":", "\n", "        ", "netD", ".", "cuda", "(", "device", "=", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.define_person_D": [[76, 94], ["SPP_NET.apply", "len", "torch.cuda.is_available", "torch.cuda.is_available", "networks.PersonDiscriminator", "networks.SPP_NET", "SPP_NET.cuda"], "function", ["None"], ["", "def", "define_person_D", "(", "input_nc", ",", "ndf", ",", "opt", ",", "use_sigmoid", "=", "False", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "netD", "=", "None", "\n", "use_gpu", "=", "len", "(", "gpu_ids", ")", ">", "0", "\n", "# print('haha')", "\n", "# print(use_sigmoid)", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "", "if", "(", "opt", ".", "use_spp", "==", "False", ")", ":", "\n", "        ", "netD", "=", "PersonDiscriminator", "(", "input_nc", ",", "ndf", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "", "else", ":", "\n", "        ", "netD", "=", "SPP_NET", "(", "opt", ",", "input_nc", ",", "ndf", ",", "use_sigmoid", ",", "gpu_ids", "=", "gpu_ids", ")", "\n", "\n", "", "if", "use_gpu", ":", "\n", "        ", "netD", ".", "cuda", "(", "\n", "_id", "=", "gpu_ids", "[", "0", "]", ")", "\n", "", "netD", ".", "apply", "(", "weights_init", ")", "\n", "return", "netD", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.print_network": [[96, 102], ["net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "net", ")", "\n", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.test_model.TestModel.name": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'TestModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.test_model.TestModel.initialize": [[12, 27], ["base_model.BaseModel.initialize", "test_model.TestModel.Tensor", "networks.define_G", "test_model.TestModel.load_network", "print", "networks.print_network", "print"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.define_G", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.print_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "assert", "(", "not", "opt", ".", "isTrain", ")", "\n", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "input_A", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "input_nc", ",", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "\n", "opt", ".", "ngf", ",", "opt", ".", "which_model_netG", ",", "\n", "opt", ".", "norm", ",", "not", "opt", ".", "no_dropout", ",", "\n", "self", ".", "gpu_ids", ")", "\n", "which_epoch", "=", "opt", ".", "which_epoch", "\n", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "which_epoch", ")", "\n", "\n", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netG", ")", "\n", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.test_model.TestModel.set_input": [[28, 33], ["test_model.TestModel.input_A.resize_().copy_", "test_model.TestModel.input_A.resize_", "input_A.size"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "# we need to use single_dataset mode", "\n", "        ", "input_A", "=", "input", "[", "'A'", "]", "\n", "self", ".", "input_A", ".", "resize_", "(", "input_A", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_A", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.test_model.TestModel.test": [[34, 37], ["torch.autograd.Variable", "test_model.TestModel.netG.forward"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_A", "=", "Variable", "(", "self", ".", "input_A", ")", "\n", "self", ".", "fake_B", "=", "self", ".", "netG", ".", "forward", "(", "self", ".", "real_A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.test_model.TestModel.get_image_paths": [[39, 41], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.test_model.TestModel.get_current_visuals": [[42, 46], ["util.tensor2im", "util.tensor2im", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "real_A", "=", "util", ".", "tensor2im", "(", "self", ".", "real_A", ".", "data", ")", "\n", "fake_B", "=", "util", ".", "tensor2im", "(", "self", ".", "fake_B", ".", "data", ")", "\n", "return", "OrderedDict", "(", "[", "(", "'real_A'", ",", "real_A", ")", ",", "(", "'fake_B'", ",", "fake_B", ")", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.name": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'CycleGANModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.initialize": [[18, 72], ["base_model.BaseModel.initialize", "cycle_gan_model.CycleGANModel.Tensor", "cycle_gan_model.CycleGANModel.Tensor", "networks.define_G", "networks.define_G", "print", "networks.print_network", "networks.print_network", "print", "networks.define_D", "networks.define_D", "cycle_gan_model.CycleGANModel.load_network", "cycle_gan_model.CycleGANModel.load_network", "util.image_pool.ImagePool", "util.image_pool.ImagePool", "networks.GANLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "networks.print_network", "networks.print_network", "cycle_gan_model.CycleGANModel.load_network", "cycle_gan_model.CycleGANModel.load_network", "itertools.chain", "cycle_gan_model.CycleGANModel.netD_A.parameters", "cycle_gan_model.CycleGANModel.netD_B.parameters", "cycle_gan_model.CycleGANModel.netG_A.parameters", "cycle_gan_model.CycleGANModel.netG_B.parameters"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.define_G", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.define_G", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.print_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.print_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.print_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.print_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "nb", "=", "opt", ".", "batchSize", "\n", "size", "=", "opt", ".", "fineSize", "\n", "self", ".", "input_A", "=", "self", ".", "Tensor", "(", "nb", ",", "opt", ".", "input_nc", ",", "size", ",", "size", ")", "\n", "self", ".", "input_B", "=", "self", ".", "Tensor", "(", "nb", ",", "opt", ".", "output_nc", ",", "size", ",", "size", ")", "\n", "\n", "# load/define networks", "\n", "# The naming conversion is different from those used in the paper", "\n", "# Code (paper): G_A (G), G_B (F), D_A (D_Y), D_B (D_X)", "\n", "\n", "self", ".", "netG_A", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "\n", "opt", ".", "ngf", ",", "opt", ".", "which_model_netG", ",", "opt", ".", "norm", ",", "not", "opt", ".", "no_dropout", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "netG_B", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "input_nc", ",", "\n", "opt", ".", "ngf", ",", "opt", ".", "which_model_netG", ",", "opt", ".", "norm", ",", "not", "opt", ".", "no_dropout", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "self", ".", "netD_A", "=", "networks", ".", "define_D", "(", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "\n", "opt", ".", "which_model_netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "netD_B", "=", "networks", ".", "define_D", "(", "opt", ".", "input_nc", ",", "opt", ".", "ndf", ",", "\n", "opt", ".", "which_model_netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "self", ".", "gpu_ids", ")", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "which_epoch", "=", "opt", ".", "which_epoch", "\n", "self", ".", "load_network", "(", "self", ".", "netG_A", ",", "'G_A'", ",", "which_epoch", ")", "\n", "self", ".", "load_network", "(", "self", ".", "netG_B", ",", "'G_B'", ",", "which_epoch", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD_A", ",", "'D_A'", ",", "which_epoch", ")", "\n", "self", ".", "load_network", "(", "self", ".", "netD_B", ",", "'D_B'", ",", "which_epoch", ")", "\n", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "self", ".", "fake_A_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "fake_B_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionCycle", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionIdt", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "# initialize optimizers", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_A", ".", "parameters", "(", ")", ",", "self", ".", "netG_B", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D_A", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD_A", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D_B", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD_B", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netG_A", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netG_B", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "networks", ".", "print_network", "(", "self", ".", "netD_A", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netD_B", ")", "\n", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.set_input": [[73, 80], ["cycle_gan_model.CycleGANModel.input_A.resize_().copy_", "cycle_gan_model.CycleGANModel.input_B.resize_().copy_", "cycle_gan_model.CycleGANModel.input_A.resize_", "cycle_gan_model.CycleGANModel.input_B.resize_", "input_A.size", "input_B.size"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "AtoB", "=", "self", ".", "opt", ".", "which_direction", "==", "'AtoB'", "\n", "input_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", "\n", "input_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", "\n", "self", ".", "input_A", ".", "resize_", "(", "input_A", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_A", ")", "\n", "self", ".", "input_B", ".", "resize_", "(", "input_B", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_B", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.forward": [[81, 84], ["torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_A", "=", "Variable", "(", "self", ".", "input_A", ")", "\n", "self", ".", "real_B", "=", "Variable", "(", "self", ".", "input_B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.test": [[85, 93], ["torch.autograd.Variable", "cycle_gan_model.CycleGANModel.netG_A.forward", "cycle_gan_model.CycleGANModel.netG_B.forward", "torch.autograd.Variable", "cycle_gan_model.CycleGANModel.netG_B.forward", "cycle_gan_model.CycleGANModel.netG_A.forward"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_A", "=", "Variable", "(", "self", ".", "input_A", ",", "volatile", "=", "True", ")", "\n", "self", ".", "fake_B", "=", "self", ".", "netG_A", ".", "forward", "(", "self", ".", "real_A", ")", "\n", "self", ".", "rec_A", "=", "self", ".", "netG_B", ".", "forward", "(", "self", ".", "fake_B", ")", "\n", "\n", "self", ".", "real_B", "=", "Variable", "(", "self", ".", "input_B", ",", "volatile", "=", "True", ")", "\n", "self", ".", "fake_A", "=", "self", ".", "netG_B", ".", "forward", "(", "self", ".", "real_B", ")", "\n", "self", ".", "rec_B", "=", "self", ".", "netG_A", ".", "forward", "(", "self", ".", "fake_A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.get_image_paths": [[95, 97], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.backward_D_basic": [[98, 110], ["netD.forward", "cycle_gan_model.CycleGANModel.criterionGAN", "netD.forward", "cycle_gan_model.CycleGANModel.criterionGAN", "loss_D.backward", "fake.detach"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward"], ["", "def", "backward_D_basic", "(", "self", ",", "netD", ",", "real", ",", "fake", ")", ":", "\n", "# Real", "\n", "        ", "pred_real", "=", "netD", ".", "forward", "(", "real", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "# Fake", "\n", "pred_fake", "=", "netD", ".", "forward", "(", "fake", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "# Combined loss", "\n", "loss_D", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "# backward", "\n", "loss_D", ".", "backward", "(", ")", "\n", "return", "loss_D", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.backward_D_A": [[111, 114], ["cycle_gan_model.CycleGANModel.fake_B_pool.query", "cycle_gan_model.CycleGANModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.backward_D_basic"], ["", "def", "backward_D_A", "(", "self", ")", ":", "\n", "        ", "fake_B", "=", "self", ".", "fake_B_pool", ".", "query", "(", "self", ".", "fake_B", ")", "\n", "self", ".", "loss_D_A", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD_A", ",", "self", ".", "real_B", ",", "fake_B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.backward_D_B": [[115, 118], ["cycle_gan_model.CycleGANModel.fake_A_pool.query", "cycle_gan_model.CycleGANModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.backward_D_basic"], ["", "def", "backward_D_B", "(", "self", ")", ":", "\n", "        ", "fake_A", "=", "self", ".", "fake_A_pool", ".", "query", "(", "self", ".", "fake_A", ")", "\n", "self", ".", "loss_D_B", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD_B", ",", "self", ".", "real_A", ",", "fake_A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.backward_G": [[119, 153], ["cycle_gan_model.CycleGANModel.netG_A.forward", "cycle_gan_model.CycleGANModel.netD_A.forward", "cycle_gan_model.CycleGANModel.criterionGAN", "cycle_gan_model.CycleGANModel.netG_B.forward", "cycle_gan_model.CycleGANModel.netD_B.forward", "cycle_gan_model.CycleGANModel.criterionGAN", "cycle_gan_model.CycleGANModel.netG_B.forward", "cycle_gan_model.CycleGANModel.netG_A.forward", "cycle_gan_model.CycleGANModel.loss_G.backward", "cycle_gan_model.CycleGANModel.netG_A.forward", "cycle_gan_model.CycleGANModel.netG_B.forward", "cycle_gan_model.CycleGANModel.criterionCycle", "cycle_gan_model.CycleGANModel.criterionCycle", "cycle_gan_model.CycleGANModel.criterionIdt", "cycle_gan_model.CycleGANModel.criterionIdt"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "        ", "lambda_idt", "=", "self", ".", "opt", ".", "identity", "\n", "lambda_A", "=", "self", ".", "opt", ".", "lambda_A", "\n", "lambda_B", "=", "self", ".", "opt", ".", "lambda_B", "\n", "# Identity loss", "\n", "if", "lambda_idt", ">", "0", ":", "\n", "# G_A should be identity if real_B is fed.", "\n", "            ", "self", ".", "idt_A", "=", "self", ".", "netG_A", ".", "forward", "(", "self", ".", "real_B", ")", "\n", "self", ".", "loss_idt_A", "=", "self", ".", "criterionIdt", "(", "self", ".", "idt_A", ",", "self", ".", "real_B", ")", "*", "lambda_B", "*", "lambda_idt", "\n", "# G_B should be identity if real_A is fed.", "\n", "self", ".", "idt_B", "=", "self", ".", "netG_B", ".", "forward", "(", "self", ".", "real_A", ")", "\n", "self", ".", "loss_idt_B", "=", "self", ".", "criterionIdt", "(", "self", ".", "idt_B", ",", "self", ".", "real_A", ")", "*", "lambda_A", "*", "lambda_idt", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_idt_A", "=", "0", "\n", "self", ".", "loss_idt_B", "=", "0", "\n", "\n", "# GAN loss", "\n", "# D_A(G_A(A))", "\n", "", "self", ".", "fake_B", "=", "self", ".", "netG_A", ".", "forward", "(", "self", ".", "real_A", ")", "\n", "pred_fake", "=", "self", ".", "netD_A", ".", "forward", "(", "self", ".", "fake_B", ")", "\n", "self", ".", "loss_G_A", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "# D_B(G_B(B))", "\n", "self", ".", "fake_A", "=", "self", ".", "netG_B", ".", "forward", "(", "self", ".", "real_B", ")", "\n", "pred_fake", "=", "self", ".", "netD_B", ".", "forward", "(", "self", ".", "fake_A", ")", "\n", "self", ".", "loss_G_B", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "# Forward cycle loss", "\n", "self", ".", "rec_A", "=", "self", ".", "netG_B", ".", "forward", "(", "self", ".", "fake_B", ")", "\n", "self", ".", "loss_cycle_A", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_A", ",", "self", ".", "real_A", ")", "*", "lambda_A", "\n", "# Backward cycle loss", "\n", "self", ".", "rec_B", "=", "self", ".", "netG_A", ".", "forward", "(", "self", ".", "fake_A", ")", "\n", "self", ".", "loss_cycle_B", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_B", ",", "self", ".", "real_B", ")", "*", "lambda_B", "\n", "# combined loss", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_A", "+", "self", ".", "loss_G_B", "+", "self", ".", "loss_cycle_A", "+", "self", ".", "loss_cycle_B", "+", "self", ".", "loss_idt_A", "+", "self", ".", "loss_idt_B", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.optimize_parameters": [[154, 169], ["cycle_gan_model.CycleGANModel.forward", "cycle_gan_model.CycleGANModel.optimizer_G.zero_grad", "cycle_gan_model.CycleGANModel.backward_G", "cycle_gan_model.CycleGANModel.optimizer_G.step", "cycle_gan_model.CycleGANModel.optimizer_D_A.zero_grad", "cycle_gan_model.CycleGANModel.backward_D_A", "cycle_gan_model.CycleGANModel.optimizer_D_A.step", "cycle_gan_model.CycleGANModel.optimizer_D_B.zero_grad", "cycle_gan_model.CycleGANModel.backward_D_B", "cycle_gan_model.CycleGANModel.optimizer_D_B.step"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.backward_G", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.backward_D_A", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.backward_D_B"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "# forward", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "# G_A and G_B", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "# D_A", "\n", "self", ".", "optimizer_D_A", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D_A", "(", ")", "\n", "self", ".", "optimizer_D_A", ".", "step", "(", ")", "\n", "# D_B", "\n", "self", ".", "optimizer_D_B", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D_B", "(", ")", "\n", "self", ".", "optimizer_D_B", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.get_current_errors": [[170, 185], ["collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "D_A", "=", "self", ".", "loss_D_A", ".", "data", "[", "0", "]", "\n", "G_A", "=", "self", ".", "loss_G_A", ".", "data", "[", "0", "]", "\n", "Cyc_A", "=", "self", ".", "loss_cycle_A", ".", "data", "[", "0", "]", "\n", "D_B", "=", "self", ".", "loss_D_B", ".", "data", "[", "0", "]", "\n", "G_B", "=", "self", ".", "loss_G_B", ".", "data", "[", "0", "]", "\n", "Cyc_B", "=", "self", ".", "loss_cycle_B", ".", "data", "[", "0", "]", "\n", "if", "self", ".", "opt", ".", "identity", ">", "0.0", ":", "\n", "            ", "idt_A", "=", "self", ".", "loss_idt_A", ".", "data", "[", "0", "]", "\n", "idt_B", "=", "self", ".", "loss_idt_B", ".", "data", "[", "0", "]", "\n", "return", "OrderedDict", "(", "[", "(", "'D_A'", ",", "D_A", ")", ",", "(", "'G_A'", ",", "G_A", ")", ",", "(", "'Cyc_A'", ",", "Cyc_A", ")", ",", "(", "'idt_A'", ",", "idt_A", ")", ",", "\n", "(", "'D_B'", ",", "D_B", ")", ",", "(", "'G_B'", ",", "G_B", ")", ",", "(", "'Cyc_B'", ",", "Cyc_B", ")", ",", "(", "'idt_B'", ",", "idt_B", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "OrderedDict", "(", "[", "(", "'D_A'", ",", "D_A", ")", ",", "(", "'G_A'", ",", "G_A", ")", ",", "(", "'Cyc_A'", ",", "Cyc_A", ")", ",", "\n", "(", "'D_B'", ",", "D_B", ")", ",", "(", "'G_B'", ",", "G_B", ")", ",", "(", "'Cyc_B'", ",", "Cyc_B", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.get_current_visuals": [[186, 201], ["util.tensor2im", "util.tensor2im", "util.tensor2im", "util.tensor2im", "util.tensor2im", "util.tensor2im", "util.tensor2im", "util.tensor2im", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im"], ["", "", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "real_A", "=", "util", ".", "tensor2im", "(", "self", ".", "real_A", ".", "data", ")", "\n", "fake_B", "=", "util", ".", "tensor2im", "(", "self", ".", "fake_B", ".", "data", ")", "\n", "rec_A", "=", "util", ".", "tensor2im", "(", "self", ".", "rec_A", ".", "data", ")", "\n", "real_B", "=", "util", ".", "tensor2im", "(", "self", ".", "real_B", ".", "data", ")", "\n", "fake_A", "=", "util", ".", "tensor2im", "(", "self", ".", "fake_A", ".", "data", ")", "\n", "rec_B", "=", "util", ".", "tensor2im", "(", "self", ".", "rec_B", ".", "data", ")", "\n", "if", "self", ".", "opt", ".", "identity", ">", "0.0", ":", "\n", "            ", "idt_A", "=", "util", ".", "tensor2im", "(", "self", ".", "idt_A", ".", "data", ")", "\n", "idt_B", "=", "util", ".", "tensor2im", "(", "self", ".", "idt_B", ".", "data", ")", "\n", "return", "OrderedDict", "(", "[", "(", "'real_A'", ",", "real_A", ")", ",", "(", "'fake_B'", ",", "fake_B", ")", ",", "(", "'rec_A'", ",", "rec_A", ")", ",", "(", "'idt_B'", ",", "idt_B", ")", ",", "\n", "(", "'real_B'", ",", "real_B", ")", ",", "(", "'fake_A'", ",", "fake_A", ")", ",", "(", "'rec_B'", ",", "rec_B", ")", ",", "(", "'idt_A'", ",", "idt_A", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "OrderedDict", "(", "[", "(", "'real_A'", ",", "real_A", ")", ",", "(", "'fake_B'", ",", "fake_B", ")", ",", "(", "'rec_A'", ",", "rec_A", ")", ",", "\n", "(", "'real_B'", ",", "real_B", ")", ",", "(", "'fake_A'", ",", "fake_A", ")", ",", "(", "'rec_B'", ",", "rec_B", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.save": [[202, 207], ["cycle_gan_model.CycleGANModel.save_network", "cycle_gan_model.CycleGANModel.save_network", "cycle_gan_model.CycleGANModel.save_network", "cycle_gan_model.CycleGANModel.save_network"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.save_network"], ["", "", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG_A", ",", "'G_A'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD_A", ",", "'D_A'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netG_B", ",", "'G_B'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD_B", ",", "'D_B'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.cycle_gan_model.CycleGANModel.update_learning_rate": [[208, 220], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D_A", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_D_B", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "self", ".", "old_lr", "=", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.name": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.initialize": [[9, 15], ["os.path.join"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "Tensor", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "self", ".", "gpu_ids", "else", "torch", ".", "Tensor", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.set_input": [[16, 18], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.forward": [[19, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.test": [[23, 25], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.get_image_paths": [[26, 28], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.optimize_parameters": [[29, 31], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.get_current_visuals": [[32, 34], ["None"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.get_current_errors": [[35, 37], ["None"], "methods", ["None"], ["", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.save": [[38, 40], ["None"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.save_network": [[42, 48], ["os.path.join", "torch.save", "network.cpu().state_dict", "len", "torch.cuda.is_available", "network.cuda", "network.cpu"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.save"], ["", "def", "save_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ",", "gpu_ids", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "torch", ".", "save", "(", "network", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "if", "len", "(", "gpu_ids", ")", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "network", ".", "cuda", "(", "device_id", "=", "gpu_ids", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.load_network": [[50, 54], ["os.path.join", "network.load_state_dict", "torch.load"], "methods", ["None"], ["", "", "def", "load_network", "(", "self", ",", "network", ",", "network_label", ",", "epoch_label", ")", ":", "\n", "        ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch_label", ",", "network_label", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "network", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.update_learning_rate": [[55, 57], ["None"], "methods", ["None"], ["", "def", "update_learning_rate", "(", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.name": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.initialize": [[18, 75], ["base_model.BaseModel.initialize", "pix2pix_model.Pix2PixModel.Tensor", "pix2pix_model.Pix2PixModel.Tensor", "torchvision.Compose", "networks.define_G", "print", "networks.print_network", "print", "torchvision.ToTensor", "torchvision.Normalize", "networks.define_image_D", "networks.define_person_D", "pix2pix_model.Pix2PixModel.load_network", "util.image_pool.ImagePool", "networks.GANLoss", "networks.GANLoss", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "networks.print_network", "networks.print_network", "pix2pix_model.Pix2PixModel.load_network", "pix2pix_model.Pix2PixModel.load_network", "pix2pix_model.Pix2PixModel.netG.parameters", "pix2pix_model.Pix2PixModel.netD_image.parameters", "pix2pix_model.Pix2PixModel.netD_person.parameters"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.define_G", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.print_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.define_image_D", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.define_person_D", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.print_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.networks.print_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.load_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.load_network"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "# self.opt = opt", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "# define tensors", "\n", "self", ".", "input_A", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "input_nc", ",", "\n", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "self", ".", "input_B", "=", "self", ".", "Tensor", "(", "opt", ".", "batchSize", ",", "opt", ".", "output_nc", ",", "\n", "opt", ".", "fineSize", ",", "opt", ".", "fineSize", ")", "\n", "\n", "transform_list", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "# load/define networks", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "\n", "opt", ".", "which_model_netG", ",", "opt", ".", "norm", ",", "not", "opt", ".", "no_dropout", ",", "self", ".", "gpu_ids", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "self", ".", "netD_image", "=", "networks", ".", "define_image_D", "(", "opt", ".", "input_nc", "+", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "\n", "opt", ".", "which_model_netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "self", ".", "gpu_ids", ")", "\n", "use_sigmoid", "=", "not", "opt", ".", "no_lsgan", "\n", "self", ".", "netD_person", "=", "networks", ".", "define_person_D", "(", "opt", ".", "input_nc", ",", "opt", ".", "ndf", ",", "opt", ",", "use_sigmoid", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "self", ".", "load_network", "(", "self", ".", "netG", ",", "'G'", ",", "opt", ".", "which_epoch", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "netD_image", ",", "'D_image'", ",", "opt", ".", "which_epoch", ")", "\n", "self", ".", "load_network", "(", "self", ".", "netD_person", ",", "'D_person'", ",", "opt", ".", "which_epoch", ")", "\n", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "fake_AB_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "old_lr", "=", "opt", ".", "lr", "\n", "# define loss functions", "\n", "#print('haha'+ str(opt.no_lsgan))", "\n", "# self.criterionGAN = networks.GANLoss(use_lsgan=not opt.no_lsgan, tensor=self.Tensor)", "\n", "self", ".", "criterionGAN_image", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionGAN_person", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "opt", ".", "no_lsgan", ",", "tensor", "=", "self", ".", "Tensor", ")", "\n", "self", ".", "criterionL1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "# initialize optimizers", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D_image", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD_image", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D_person", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD_person", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "\n", "", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netG", ")", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "networks", ".", "print_network", "(", "self", ".", "netD_image", ")", "\n", "networks", ".", "print_network", "(", "self", ".", "netD_person", ")", "\n", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.set_input": [[76, 86], ["pix2pix_model.Pix2PixModel.input_A.resize_().copy_", "pix2pix_model.Pix2PixModel.input_B.resize_().copy_", "pix2pix_model.Pix2PixModel.input_A.resize_", "pix2pix_model.Pix2PixModel.input_B.resize_", "input_A.size", "input_B.size"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "AtoB", "=", "self", ".", "opt", ".", "which_direction", "==", "'AtoB'", "\n", "input_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", "\n", "input_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", "\n", "#print(input_A.size())", "\n", "self", ".", "bbox", "=", "input", "[", "'bbox'", "]", "\n", "self", ".", "input_A", ".", "resize_", "(", "input_A", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_A", ")", "\n", "self", ".", "input_B", ".", "resize_", "(", "input_B", ".", "size", "(", ")", ")", ".", "copy_", "(", "input_B", ")", "\n", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward": [[87, 95], ["torch.autograd.Variable", "pix2pix_model.Pix2PixModel.netG.forward", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_A", "=", "Variable", "(", "self", ".", "input_A", ")", "\n", "self", ".", "fake_B", "=", "self", ".", "netG", ".", "forward", "(", "self", ".", "real_A", ")", "\n", "self", ".", "real_B", "=", "Variable", "(", "self", ".", "input_B", ")", "\n", "\n", "y", ",", "x", ",", "w", ",", "h", "=", "self", ".", "bbox", "\n", "self", ".", "person_crop_real", "=", "self", ".", "real_B", "[", ":", ",", ":", ",", "y", "[", "0", "]", ":", "h", "[", "0", "]", ",", "x", "[", "0", "]", ":", "w", "[", "0", "]", "]", "\n", "self", ".", "person_crop_fake", "=", "self", ".", "fake_B", "[", ":", ",", ":", ",", "y", "[", "0", "]", ":", "h", "[", "0", "]", ",", "x", "[", "0", "]", ":", "w", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.test": [[97, 105], ["torch.autograd.Variable", "pix2pix_model.Pix2PixModel.netG.forward", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "real_A", "=", "Variable", "(", "self", ".", "input_A", ",", "volatile", "=", "True", ")", "\n", "self", ".", "fake_B", "=", "self", ".", "netG", ".", "forward", "(", "self", ".", "real_A", ")", "\n", "self", ".", "real_B", "=", "Variable", "(", "self", ".", "input_B", ",", "volatile", "=", "True", ")", "\n", "\n", "y", ",", "x", ",", "w", ",", "h", "=", "self", ".", "bbox", "\n", "self", ".", "person_crop_real", "=", "self", ".", "real_B", "[", ":", ",", ":", ",", "y", "[", "0", "]", ":", "h", "[", "0", "]", ",", "x", "[", "0", "]", ":", "w", "[", "0", "]", "]", "\n", "self", ".", "person_crop_fake", "=", "self", ".", "fake_B", "[", ":", ",", ":", ",", "y", "[", "0", "]", ":", "h", "[", "0", "]", ",", "x", "[", "0", "]", ":", "w", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.get_image_paths": [[107, 109], ["None"], "methods", ["None"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.backward_D_image": [[110, 128], ["pix2pix_model.Pix2PixModel.fake_AB_pool.query", "pix2pix_model.Pix2PixModel.netD_image.forward", "pix2pix_model.Pix2PixModel.criterionGAN_image", "torch.cat", "pix2pix_model.Pix2PixModel.netD_image.forward", "pix2pix_model.Pix2PixModel.criterionGAN_image", "pix2pix_model.Pix2PixModel.loss_D_image.backward", "torch.cat", "pix2pix_model.Pix2PixModel.detach"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward"], ["", "def", "backward_D_image", "(", "self", ")", ":", "\n", "# Fake", "\n", "# stop backprop to the generator by detaching fake_B", "\n", "        ", "fake_AB", "=", "self", ".", "fake_AB_pool", ".", "query", "(", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", ",", "1", ")", ")", "\n", "self", ".", "pred_fake", "=", "self", ".", "netD_image", ".", "forward", "(", "fake_AB", ".", "detach", "(", ")", ")", "\n", "# self.loss_D_image_fake = self.criterionGAN(self.pred_fake, False)", "\n", "self", ".", "loss_D_image_fake", "=", "self", ".", "criterionGAN_image", "(", "self", ".", "pred_fake", ",", "False", ")", "\n", "\n", "# Real", "\n", "real_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "real_B", ")", ",", "1", ")", "\n", "self", ".", "pred_real", "=", "self", ".", "netD_image", ".", "forward", "(", "real_AB", ")", "\n", "# self.loss_D_image_real = self.criterionGAN(self.pred_real, True)", "\n", "self", ".", "loss_D_image_real", "=", "self", ".", "criterionGAN_image", "(", "self", ".", "pred_real", ",", "True", ")", "\n", "\n", "# Combined loss", "\n", "self", ".", "loss_D_image", "=", "(", "self", ".", "loss_D_image_fake", "+", "self", ".", "loss_D_image_real", ")", "*", "0.5", "\n", "\n", "self", ".", "loss_D_image", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.backward_D_person": [[129, 143], ["pix2pix_model.Pix2PixModel.netD_person.forward", "pix2pix_model.Pix2PixModel.criterionGAN_person", "pix2pix_model.Pix2PixModel.netD_person.forward", "pix2pix_model.Pix2PixModel.criterionGAN_person", "pix2pix_model.Pix2PixModel.loss_D_person.backward"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward"], ["", "def", "backward_D_person", "(", "self", ")", ":", "\n", "#Fake", "\n", "        ", "self", ".", "person_fake", "=", "self", ".", "netD_person", ".", "forward", "(", "self", ".", "person_crop_fake", ")", "\n", "# self.loss_D_person_fake = self.criterionGAN(self.person_fake, False)", "\n", "self", ".", "loss_D_person_fake", "=", "self", ".", "criterionGAN_person", "(", "self", ".", "person_fake", ",", "False", ")", "\n", "\n", "#Real", "\n", "self", ".", "person_real", "=", "self", ".", "netD_person", ".", "forward", "(", "self", ".", "person_crop_real", ")", "\n", "# self.loss_D_person_real = self.criterionGAN(self.person_real, True)", "\n", "self", ".", "loss_D_person_real", "=", "self", ".", "criterionGAN_person", "(", "self", ".", "person_real", ",", "True", ")", "\n", "\n", "#Combine loss", "\n", "self", ".", "loss_D_person", "=", "(", "self", ".", "loss_D_person_fake", "+", "self", ".", "loss_D_person_real", ")", "*", "0.5", "\n", "self", ".", "loss_D_person", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.backward_G": [[145, 166], ["torch.cat", "pix2pix_model.Pix2PixModel.netD_image.forward", "pix2pix_model.Pix2PixModel.criterionGAN_image", "pix2pix_model.Pix2PixModel.netD_person.forward", "pix2pix_model.Pix2PixModel.criterionGAN_person", "pix2pix_model.Pix2PixModel.loss_G.backward", "pix2pix_model.Pix2PixModel.criterionL1"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "# First, G(A) should fake the discriminator1 and discriminator1", "\n", "# discriminator1", "\n", "        ", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", ",", "1", ")", "\n", "pred_fake_image", "=", "self", ".", "netD_image", ".", "forward", "(", "fake_AB", ")", "\n", "# self.loss_G_GAN_image = self.criterionGAN(pred_fake_image, True)", "\n", "self", ".", "loss_G_GAN_image", "=", "self", ".", "criterionGAN_image", "(", "pred_fake_image", ",", "True", ")", "\n", "# Second, G(A) = B", "\n", "self", ".", "loss_G_L1", "=", "self", ".", "criterionL1", "(", "self", ".", "fake_B", ",", "self", ".", "real_B", ")", "*", "self", ".", "opt", ".", "lambda_A", "\n", "#self.loss_G_L1 = self.criterionL1(self.fake_B, self.real_B)", "\n", "\n", "pred_fake_person", "=", "self", ".", "netD_person", ".", "forward", "(", "self", ".", "person_crop_fake", ")", "\n", "# self.loss_G_GAN_person = self.criterionGAN(pred_fake_person, True)", "\n", "self", ".", "loss_G_GAN_person", "=", "self", ".", "criterionGAN_person", "(", "pred_fake_person", ",", "True", ")", "\n", "\n", "#self.loss_G_L1_person = self.criterionL1(self.person_crop_fake, self.person_crop_real)", "\n", "\n", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_GAN_image", "+", "self", ".", "loss_G_L1", "+", "self", ".", "loss_G_GAN_person", "\n", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.optimize_parameters": [[170, 187], ["pix2pix_model.Pix2PixModel.forward", "pix2pix_model.Pix2PixModel.optimizer_D_image.zero_grad", "pix2pix_model.Pix2PixModel.backward_D_image", "pix2pix_model.Pix2PixModel.optimizer_D_image.step", "pix2pix_model.Pix2PixModel.forward", "pix2pix_model.Pix2PixModel.optimizer_D_person.zero_grad", "pix2pix_model.Pix2PixModel.backward_D_person", "pix2pix_model.Pix2PixModel.optimizer_D_person.step", "pix2pix_model.Pix2PixModel.forward", "pix2pix_model.Pix2PixModel.optimizer_G.zero_grad", "pix2pix_model.Pix2PixModel.backward_G", "pix2pix_model.Pix2PixModel.optimizer_G.step"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.backward_D_image", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.backward_D_person", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.forward", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ",", "only_d", ")", ":", "\n", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer_D_image", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D_image", "(", ")", "\n", "self", ".", "optimizer_D_image", ".", "step", "(", ")", "\n", "\n", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer_D_person", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D_person", "(", ")", "\n", "self", ".", "optimizer_D_person", ".", "step", "(", ")", "\n", "\n", "if", "only_d", "==", "False", ":", "\n", "            ", "self", ".", "forward", "(", ")", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.get_current_errors": [[188, 197], ["collections.OrderedDict"], "methods", ["None"], ["", "", "def", "get_current_errors", "(", "self", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "[", "(", "'G_GAN_image'", ",", "self", ".", "loss_G_GAN_image", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'G_GAN_person'", ",", "self", ".", "loss_G_GAN_person", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'G_L1'", ",", "self", ".", "loss_G_L1", ".", "data", "[", "0", "]", ")", ",", "\n", "#('G_L1_person', self.loss_G_L1_person.data[0]),", "\n", "(", "'D_image_real'", ",", "self", ".", "loss_D_image_real", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'D_image_fake'", ",", "self", ".", "loss_D_image_fake", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'D_person_real'", ",", "self", ".", "loss_D_person_real", ".", "data", "[", "0", "]", ")", ",", "\n", "(", "'D_person_fake'", ",", "self", ".", "loss_D_person_fake", ".", "data", "[", "0", "]", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.get_current_visuals": [[199, 210], ["util.tensor2im", "util.tensor2im", "util.tensor2im", "util.tensor2im", "util.tensor2im", "copy.deepcopy", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.tensor2im"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "real_A", "=", "util", ".", "tensor2im", "(", "self", ".", "real_A", ".", "data", ")", "\n", "fake_B", "=", "util", ".", "tensor2im", "(", "self", ".", "fake_B", ".", "data", ")", "\n", "real_B", "=", "util", ".", "tensor2im", "(", "self", ".", "real_B", ".", "data", ")", "\n", "D2_fake", "=", "util", ".", "tensor2im", "(", "self", ".", "person_crop_fake", ".", "data", ")", "\n", "D2_real", "=", "util", ".", "tensor2im", "(", "self", ".", "person_crop_real", ".", "data", ")", "\n", "y", ",", "x", ",", "w", ",", "h", "=", "self", ".", "bbox", "\n", "display", "=", "deepcopy", "(", "real_A", ")", "\n", "#print(display.shape)", "\n", "display", "[", "y", "[", "0", "]", ":", "h", "[", "0", "]", ",", "x", "[", "0", "]", ":", "w", "[", "0", "]", ",", ":", "]", "=", "D2_fake", "\n", "return", "OrderedDict", "(", "[", "(", "'real_A'", ",", "real_A", ")", ",", "(", "'fake_B'", ",", "fake_B", ")", ",", "(", "'real_B'", ",", "real_B", ")", ",", "(", "'display'", ",", "display", ")", ",", "(", "'D2_fake'", ",", "D2_fake", ")", ",", "(", "'D2_real'", ",", "D2_real", ")", "]", ")", "\n", "#return OrderedDict([('real_A', real_A), ('fake_B', fake_B), ('real_B', real_B)])", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.save": [[212, 216], ["pix2pix_model.Pix2PixModel.save_network", "pix2pix_model.Pix2PixModel.save_network", "pix2pix_model.Pix2PixModel.save_network"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.save_network", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.base_model.BaseModel.save_network"], ["", "def", "save", "(", "self", ",", "label", ")", ":", "\n", "        ", "self", ".", "save_network", "(", "self", ".", "netG", ",", "'G'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD_image", ",", "'D_image'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "save_network", "(", "self", ".", "netD_person", ",", "'D_person'", ",", "label", ",", "self", ".", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.models.pix2pix_model.Pix2PixModel.update_learning_rate": [[217, 228], ["print"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "lrd", "=", "self", ".", "opt", ".", "lr", "/", "self", ".", "opt", ".", "niter_decay", "\n", "lr", "=", "self", ".", "old_lr", "-", "lrd", "\n", "for", "param_group", "in", "self", ".", "optimizer_D_image", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_D_person", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "for", "param_group", "in", "self", ".", "optimizer_G", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "print", "(", "'update learning rate: %f -> %f'", "%", "(", "self", ".", "old_lr", ",", "lr", ")", ")", "\n", "self", ".", "old_lr", "=", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.aligned_dataset.AlignedDataset.initialize": [[12, 30], ["os.path.join", "os.path.join", "data.image_folder.make_dataset", "sorted", "sorted", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.image_folder.make_dataset"], ["    ", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dir_AB", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'images'", ",", "opt", ".", "phase", ")", "\n", "self", ".", "dir_bbox", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'bbox'", ",", "opt", ".", "phase", ")", "\n", "\n", "#self.AB_paths, self.bbox_paths = sorted(make_dataset(self.dir_AB, self.dir_bbox))", "\n", "self", ".", "AB_paths", ",", "self", ".", "bbox_paths", "=", "make_dataset", "(", "self", ".", "dir_AB", ",", "self", ".", "dir_bbox", ")", "\n", "self", ".", "AB_paths", "=", "sorted", "(", "self", ".", "AB_paths", ")", "\n", "self", ".", "bbox_paths", "=", "sorted", "(", "self", ".", "bbox_paths", ")", "\n", "\n", "assert", "(", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ")", "\n", "\n", "transform_list", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.aligned_dataset.AlignedDataset.__getitem__": [[31, 85], ["int", "random.randint", "random.randint", "json.load", "max", "max", "max", "max", "max", "max", "open", "int", "int", "int", "int", "PIL.Image.open().convert", "aligned_dataset.AlignedDataset.resize", "aligned_dataset.AlignedDataset.transform", "PIL.Image.open().convert", "aligned_dataset.AlignedDataset.resize", "aligned_dataset.AlignedDataset.transform", "torch.LongTensor", "A.index_select.index_select.index_select", "B.index_select.index_select.index_select", "random.random", "PIL.Image.open", "PIL.Image.open", "range", "A.index_select.index_select.size", "A.index_select.index_select.size", "A.index_select.index_select.size"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "AB_path", "=", "self", ".", "AB_paths", "[", "index", "]", "\n", "#print(AB_path)", "\n", "bbox_path", "=", "self", ".", "bbox_paths", "[", "index", "]", "\n", "#print(bbox_path)", "\n", "\n", "w_total", "=", "self", ".", "opt", ".", "loadSize", "*", "2", "\n", "w", "=", "int", "(", "w_total", "/", "2", ")", "\n", "h", "=", "self", ".", "opt", ".", "loadSize", "\n", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "w", "-", "self", ".", "opt", ".", "fineSize", "-", "1", ")", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "h", "-", "self", ".", "opt", ".", "fineSize", "-", "1", ")", ")", "\n", "\n", "bbox", "=", "json", ".", "load", "(", "open", "(", "bbox_path", ")", ")", "\n", "#bbox = [bbox['y'], bbox['x'], bbox['w'], bbox['h']]", "\n", "#print(bbox['y'], bbox['x'], bbox['w'], bbox['h'])", "\n", "bbox_x", "=", "max", "(", "int", "(", "(", "bbox", "[", "'x'", "]", "/", "self", ".", "opt", ".", "fineSize", ")", "*", "self", ".", "opt", ".", "loadSize", ")", ",", "0", ")", "\n", "bbox_y", "=", "max", "(", "int", "(", "(", "bbox", "[", "'y'", "]", "/", "self", ".", "opt", ".", "fineSize", ")", "*", "self", ".", "opt", ".", "loadSize", ")", ",", "0", ")", "\n", "bbox_w", "=", "max", "(", "int", "(", "(", "bbox", "[", "'w'", "]", "/", "self", ".", "opt", ".", "fineSize", ")", "*", "self", ".", "opt", ".", "loadSize", ")", ",", "0", ")", "\n", "bbox_h", "=", "max", "(", "int", "(", "(", "bbox", "[", "'h'", "]", "/", "self", ".", "opt", ".", "fineSize", ")", "*", "self", ".", "opt", ".", "loadSize", ")", ",", "0", ")", "\n", "\n", "if", "bbox_y", "<=", "h_offset", "or", "bbox_x", "<=", "w_offset", ":", "\n", "            ", "AB", "=", "Image", ".", "open", "(", "AB_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "AB", "=", "AB", ".", "resize", "(", "(", "self", ".", "opt", ".", "fineSize", "*", "2", ",", "self", ".", "opt", ".", "fineSize", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "AB", "=", "self", ".", "transform", "(", "AB", ")", "\n", "A", "=", "AB", "[", ":", ",", ":", "self", ".", "opt", ".", "fineSize", ",", "\n", ":", "self", ".", "opt", ".", "fineSize", "]", "\n", "B", "=", "AB", "[", ":", ",", ":", "self", ".", "opt", ".", "fineSize", ",", "\n", "self", ".", "opt", ".", "fineSize", ":", "2", "*", "self", ".", "opt", ".", "fineSize", "]", "\n", "bbox", "=", "[", "bbox", "[", "'y'", "]", ",", "bbox", "[", "'x'", "]", ",", "bbox", "[", "'w'", "]", ",", "bbox", "[", "'h'", "]", "]", "\n", "", "else", ":", "\n", "            ", "AB", "=", "Image", ".", "open", "(", "AB_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "AB", "=", "AB", ".", "resize", "(", "(", "self", ".", "opt", ".", "loadSize", "*", "2", ",", "self", ".", "opt", ".", "loadSize", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "AB", "=", "self", ".", "transform", "(", "AB", ")", "\n", "A", "=", "AB", "[", ":", ",", "h_offset", ":", "h_offset", "+", "self", ".", "opt", ".", "fineSize", ",", "\n", "w_offset", ":", "w_offset", "+", "self", ".", "opt", ".", "fineSize", "]", "\n", "B", "=", "AB", "[", ":", ",", "h_offset", ":", "h_offset", "+", "self", ".", "opt", ".", "fineSize", ",", "\n", "w", "+", "w_offset", ":", "w", "+", "w_offset", "+", "self", ".", "opt", ".", "fineSize", "]", "\n", "bbox", "=", "[", "bbox_y", "-", "h_offset", ",", "bbox_x", "-", "w_offset", ",", "bbox_w", ",", "bbox_h", "]", "\n", "# print('haha')", "\n", "# print(bbox)", "\n", "\n", "\n", "", "if", "(", "not", "self", ".", "opt", ".", "no_flip", ")", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "A", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "idx", ")", "\n", "A", "=", "A", ".", "index_select", "(", "2", ",", "idx", ")", "\n", "B", "=", "B", ".", "index_select", "(", "2", ",", "idx", ")", "\n", "#print A.size(2)", "\n", "bbox", "=", "[", "bbox", "[", "0", "]", ",", "A", ".", "size", "(", "2", ")", "-", "bbox", "[", "2", "]", ",", "A", ".", "size", "(", "2", ")", "-", "bbox", "[", "1", "]", ",", "bbox", "[", "3", "]", "]", "\n", "# print('hehe')", "\n", "# print(bbox)", "\n", "#print(A.size())", "\n", "", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "'bbox'", ":", "bbox", ",", "\n", "'A_paths'", ":", "AB_path", ",", "'B_paths'", ":", "AB_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.aligned_dataset.AlignedDataset.__len__": [[86, 88], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "AB_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.aligned_dataset.AlignedDataset.name": [[89, 91], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'AlignedDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.data_loader.CreateDataLoader": [[2, 8], ["CustomDatasetDataLoader", "print", "CustomDatasetDataLoader.initialize", "CustomDatasetDataLoader.name"], "function", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.unaligned_dataset.UnalignedDataset.name"], ["def", "CreateDataLoader", "(", "opt", ")", ":", "\n", "    ", "from", "data", ".", "custom_dataset_data_loader", "import", "CustomDatasetDataLoader", "\n", "data_loader", "=", "CustomDatasetDataLoader", "(", ")", "\n", "print", "(", "data_loader", ".", "name", "(", ")", ")", "\n", "data_loader", ".", "initialize", "(", "opt", ")", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.base_dataset.BaseDataset.__init__": [[6, 8], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.base_dataset.BaseDataset.name": [[9, 11], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.base_dataset.BaseDataset.initialize": [[12, 14], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.base_dataset.get_transform": [[15, 38], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Scale", "torchvision.RandomCrop", "transform_list.append", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "transform_list.append", "torchvision.Lambda", "transform_list.append", "transform_list.append", "torchvision.Lambda", "torchvision.RandomCrop", "base_dataset.__scale_width", "base_dataset.__scale_width"], "function", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.base_dataset.__scale_width"], ["", "", "def", "get_transform", "(", "opt", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "loadSize", ",", "opt", ".", "loadSize", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Scale", "(", "osize", ",", "Image", ".", "BICUBIC", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "fineSize", ")", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width_and_crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "loadSize", ")", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.base_dataset.__scale_width": [[39, 46], ["int", "img.resize"], "function", ["None"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "if", "(", "ow", "==", "target_width", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "h", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.custom_dataset_data_loader.CustomDatasetDataLoader.name": [[25, 27], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'CustomDatasetDataLoader'", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.custom_dataset_data_loader.CustomDatasetDataLoader.initialize": [[28, 36], ["data.base_data_loader.BaseDataLoader.initialize", "custom_dataset_data_loader.CreateDataset", "torch.utils.data.DataLoader", "int"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.custom_dataset_data_loader.CreateDataset"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseDataLoader", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "dataset", "=", "CreateDataset", "(", "opt", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n", "batch_size", "=", "opt", ".", "batchSize", ",", "\n", "shuffle", "=", "not", "opt", ".", "serial_batches", ",", "\n", "num_workers", "=", "int", "(", "opt", ".", "nThreads", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.custom_dataset_data_loader.CustomDatasetDataLoader.load_data": [[37, 39], ["None"], "methods", ["None"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.custom_dataset_data_loader.CustomDatasetDataLoader.__len__": [[40, 42], ["min", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "len", "(", "self", ".", "dataset", ")", ",", "self", ".", "opt", ".", "max_dataset_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.custom_dataset_data_loader.CreateDataset": [[5, 22], ["print", "SingleDataset.initialize", "AlignedDataset", "UnalignedDataset", "SingleDataset.name", "SingleDataset", "ValueError"], "function", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.unaligned_dataset.UnalignedDataset.name"], ["def", "CreateDataset", "(", "opt", ")", ":", "\n", "    ", "dataset", "=", "None", "\n", "if", "opt", ".", "dataset_mode", "==", "'aligned'", ":", "\n", "        ", "from", "data", ".", "aligned_dataset", "import", "AlignedDataset", "\n", "dataset", "=", "AlignedDataset", "(", ")", "\n", "", "elif", "opt", ".", "dataset_mode", "==", "'unaligned'", ":", "\n", "        ", "from", "data", ".", "unaligned_dataset", "import", "UnalignedDataset", "\n", "dataset", "=", "UnalignedDataset", "(", ")", "\n", "", "elif", "opt", ".", "dataset_mode", "==", "'single'", ":", "\n", "        ", "from", "data", ".", "single_dataset", "import", "SingleDataset", "\n", "dataset", "=", "SingleDataset", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Dataset [%s] not recognized.\"", "%", "opt", ".", "dataset_mode", ")", "\n", "\n", "", "print", "(", "\"dataset [%s] was created\"", "%", "(", "dataset", ".", "name", "(", ")", ")", ")", "\n", "dataset", ".", "initialize", "(", "opt", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.single_dataset.SingleDataset.initialize": [[9, 19], ["os.path.join", "data.image_folder.make_dataset", "sorted", "data.base_dataset.get_transform"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.base_dataset.get_transform"], ["    ", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ")", "\n", "\n", "self", ".", "A_paths", "=", "make_dataset", "(", "self", ".", "dir_A", ")", "\n", "\n", "self", ".", "A_paths", "=", "sorted", "(", "self", ".", "A_paths", ")", "\n", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.single_dataset.SingleDataset.__getitem__": [[20, 28], ["PIL.Image.open().convert", "single_dataset.SingleDataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "]", "\n", "\n", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "A_img", "=", "self", ".", "transform", "(", "A_img", ")", "\n", "\n", "return", "{", "'A'", ":", "A_img", ",", "'A_paths'", ":", "A_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.single_dataset.SingleDataset.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "A_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.single_dataset.SingleDataset.name": [[32, 34], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'SingleImageDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.image_folder.ImageFolder.__init__": [[44, 57], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.image_folder.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.image_folder.ImageFolder.__getitem__": [[58, 67], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.image_folder.ImageFolder.__len__": [[68, 70], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.image_folder.is_image_file": [[19, 21], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.image_folder.make_dataset": [[22, 37], ["os.path.isdir", "os.path.isdir", "sorted", "os.walk", "os.walk", "image_folder.is_image_file", "os.path.join", "os.path.join", "images.append", "bbox.append", "os.path.join", "os.path.join", "fname.split"], "function", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.image_folder.is_image_file"], ["", "def", "make_dataset", "(", "dir_img", ",", "dir_bbox", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "bbox", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir_img", ")", ",", "'%s is not a valid directory'", "%", "dir_img", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir_img", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "img_path", ")", "\n", "bbox_path", "=", "os", ".", "path", ".", "join", "(", "dir_bbox", ",", "fname", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "+", "'.json'", "\n", "#print(bbox_path)", "\n", "bbox", ".", "append", "(", "bbox_path", ")", "\n", "\n", "", "", "", "return", "images", ",", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.image_folder.default_loader": [[38, 40], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.base_data_loader.BaseDataLoader.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.base_data_loader.BaseDataLoader.initialize": [[6, 9], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.base_data_loader.BaseDataLoader.load_data": [[10, 12], ["None"], "methods", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.unaligned_dataset.UnalignedDataset.initialize": [[11, 25], ["os.path.join", "os.path.join", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "sorted", "sorted", "len", "len", "data.base_dataset.get_transform"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.image_folder.make_dataset", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.base_dataset.get_transform"], ["    ", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'A'", ")", "\n", "self", ".", "dir_B", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'B'", ")", "\n", "\n", "self", ".", "A_paths", "=", "make_dataset", "(", "self", ".", "dir_A", ")", "\n", "self", ".", "B_paths", "=", "make_dataset", "(", "self", ".", "dir_B", ")", "\n", "\n", "self", ".", "A_paths", "=", "sorted", "(", "self", ".", "A_paths", ")", "\n", "self", ".", "B_paths", "=", "sorted", "(", "self", ".", "B_paths", ")", "\n", "self", ".", "A_size", "=", "len", "(", "self", ".", "A_paths", ")", "\n", "self", ".", "B_size", "=", "len", "(", "self", ".", "B_paths", ")", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.unaligned_dataset.UnalignedDataset.__getitem__": [[26, 38], ["PIL.Image.open().convert", "PIL.Image.open().convert", "unaligned_dataset.UnalignedDataset.transform", "unaligned_dataset.UnalignedDataset.transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "%", "self", ".", "A_size", "]", "\n", "B_path", "=", "self", ".", "B_paths", "[", "index", "%", "self", ".", "B_size", "]", "\n", "\n", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "B_img", "=", "Image", ".", "open", "(", "B_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "A_img", "=", "self", ".", "transform", "(", "A_img", ")", "\n", "B_img", "=", "self", ".", "transform", "(", "B_img", ")", "\n", "\n", "return", "{", "'A'", ":", "A_img", ",", "'B'", ":", "B_img", ",", "\n", "'A_paths'", ":", "A_path", ",", "'B_paths'", ":", "B_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.unaligned_dataset.UnalignedDataset.__len__": [[39, 41], ["max"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "A_size", ",", "self", ".", "B_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.data.unaligned_dataset.UnalignedDataset.name": [[42, 44], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'UnalignedDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.test_options.TestOptions.initialize": [[5, 14], ["base_options.BaseOptions.initialize", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "test_options.TestOptions.parser.add_argument", "float"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--how_many'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'how many test images to run'", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.train_options.TrainOptions.initialize": [[5, 27], ["base_options.BaseOptions.initialize", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument", "train_options.TrainOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "# self.parser.add_argument('--niter', type=int, default=200, help='# of iter at starting learning rate')", "\n", "# self.parser.add_argument('--niter_decay', type=int, default=200, help='# of iter to linearly decay learning rate to zero')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "# self.parser.add_argument('--lr', type=float, default=0.0002, help='initial learning rate for adam')", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do *not* use least square GAN, if false, use vanilla GAN'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_A'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lambda_B'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (B -> A -> B)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "self", ".", "isTrain", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.__init__": [[7, 10], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.initialize": [[11, 44], ["base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "base_options.BaseOptions.parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "required", "=", "True", ",", "help", "=", "'path to images (should have subfolders trainA, trainB, valA, valB, etc)'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "286", ",", "help", "=", "'scale images to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'then crop to this size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_model_netD'", ",", "type", "=", "str", ",", "default", "=", "'basic'", ",", "help", "=", "'selects model to use for netD'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_model_netG'", ",", "type", "=", "str", ",", "default", "=", "'resnet_9blocks'", ",", "help", "=", "'selects model to use for netG'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if which_model_netD==n_layers'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'experiment_name'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dataset_mode'", ",", "type", "=", "str", ",", "default", "=", "'unaligned'", ",", "help", "=", "'chooses how datasets are loaded. [unaligned | aligned | single]'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'cycle_gan'", ",", "\n", "help", "=", "'chooses which model to use. cycle_gan, pix2pix, test'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--which_direction'", ",", "type", "=", "str", ",", "default", "=", "'AtoB'", ",", "help", "=", "'AtoB or BtoA'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--nThreads'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'display window size'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_id'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'window id of the web display'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'visdom port of the web display'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--display_single_pane_ncols'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'if positive, display all images in a single visdom web panel with certain number of images per row.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--identity'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'use identity mapping. Setting identity other than 1 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set optidentity = 0.1'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_dropout'", ",", "action", "=", "'store_true'", ",", "help", "=", "'no dropout for the generator'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'resize_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop|crop|scale_width|scale_width_and_crop]'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data augmentation'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--use_spp'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use spp layer in D'", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.parse": [[45, 79], ["base_options.BaseOptions.parser.parse_args", "base_options.BaseOptions.opt.gpu_ids.split", "vars", "print", "sorted", "print", "os.path.join", "util.util.util.mkdirs", "os.path.join", "base_options.BaseOptions.initialize", "int", "len", "torch.cuda.set_device", "vars.items", "print", "open", "opt_file.write", "sorted", "opt_file.write", "base_options.BaseOptions.opt.gpu_ids.append", "vars.items", "opt_file.write", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.util.util.mkdirs", "home.repos.pwc.inspect_result.yueruchen_Pedestrian-Synthesis-GAN.options.base_options.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "str_ids", "=", "self", ".", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "self", ".", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "self", ".", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "\n", "# set gpu ids", "\n", "", "", "if", "len", "(", "self", ".", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "args", "=", "vars", "(", "self", ".", "opt", ")", "\n", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "checkpoints_dir", ",", "self", ".", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "'------------ Options -------------\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "                ", "opt_file", ".", "write", "(", "'%s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "opt_file", ".", "write", "(", "'-------------- End ----------------\\n'", ")", "\n", "", "return", "self", ".", "opt", "\n", "", "", ""]]}