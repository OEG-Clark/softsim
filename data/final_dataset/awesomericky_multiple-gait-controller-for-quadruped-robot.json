{"home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.helper.raisim_gym_helper.ConfigurationSaver.__init__": [[9, 17], ["os.makedirs", "datetime.datetime.now().strftime", "ntpath.basename", "shutil.copyfile", "datetime.datetime.now"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "save_items", ")", ":", "\n", "        ", "self", ".", "_data_dir", "=", "log_dir", "+", "'/'", "+", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "_data_dir", ")", "\n", "\n", "if", "save_items", "is", "not", "None", ":", "\n", "            ", "for", "save_item", "in", "save_items", ":", "\n", "                ", "base_file_name", "=", "ntpath", ".", "basename", "(", "save_item", ")", "\n", "copyfile", "(", "save_item", ",", "self", ".", "_data_dir", "+", "'/'", "+", "base_file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.helper.raisim_gym_helper.ConfigurationSaver.data_dir": [[18, 21], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "data_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.helper.raisim_gym_helper.tensorboard_launcher": [[23, 31], ["program.TensorBoard", "program.TensorBoard.configure", "program.TensorBoard.launch", "print"], "function", ["None"], ["", "", "def", "tensorboard_launcher", "(", "directory_path", ")", ":", "\n", "    ", "from", "tensorboard", "import", "program", "\n", "import", "webbrowser", "\n", "# learning visualizer", "\n", "tb", "=", "program", ".", "TensorBoard", "(", ")", "\n", "tb", ".", "configure", "(", "argv", "=", "[", "None", ",", "'--logdir'", ",", "directory_path", "]", ")", "\n", "url", "=", "tb", ".", "launch", "(", ")", "\n", "print", "(", "\"[RAISIM_GYM] Tensorboard session created: \"", "+", "url", ")", "\n", "# webbrowser.open_new(url)  # not wanted to be automatically opened", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.helper.raisim_gym_helper.load_param": [[34, 69], ["print", "env.load_scaling", "torch.load", "Exception", "[].rsplit", "os.makedirs", "actor.architecture.load_state_dict", "actor.distribution.load_state_dict", "critic.architecture.load_state_dict", "optimizer.load_state_dict", "weight_path.rsplit", "shutil.copyfile", "actor.architecture.load_state_dict", "actor.distribution.load_state_dict", "critic.architecture.load_state_dict", "optimizer.load_state_dict", "[].rsplit", "[].split", "item_to_save.rsplit", "weight_path.rsplit", "weight_path.rsplit"], "function", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.load_scaling"], ["", "def", "load_param", "(", "weight_path", ",", "env", ",", "actor", ",", "critic", ",", "optimizer", ",", "data_dir", ",", "type", "=", "None", ")", ":", "\n", "    ", "assert", "type", "in", "[", "'CPG'", ",", "'local'", "]", ",", "'Unavailable loading parameter type'", "\n", "\n", "if", "weight_path", "==", "\"\"", ":", "\n", "        ", "raise", "Exception", "(", "\"\\nCan't find the pre-trained weight, please provide a pre-trained weight with --weight switch\\n\"", ")", "\n", "", "print", "(", "\"\\nRetraining from the checkpoint:\"", ",", "weight_path", "+", "\"\\n\"", ")", "\n", "\n", "iteration_number", "=", "weight_path", ".", "rsplit", "(", "'/'", ",", "1", ")", "[", "1", "]", ".", "split", "(", "'_'", ",", "1", ")", "[", "1", "]", ".", "rsplit", "(", "'.'", ",", "1", ")", "[", "0", "]", "\n", "weight_dir", "=", "weight_path", ".", "rsplit", "(", "'/'", ",", "1", ")", "[", "0", "]", "+", "'/'", "\n", "\n", "mean_csv_path", "=", "weight_dir", "+", "'mean'", "+", "iteration_number", "+", "'.csv'", "\n", "var_csv_path", "=", "weight_dir", "+", "'var'", "+", "iteration_number", "+", "'.csv'", "\n", "items_to_save", "=", "[", "weight_path", ",", "mean_csv_path", ",", "var_csv_path", ",", "weight_dir", "+", "\"cfg.yaml\"", ",", "weight_dir", "+", "\"Environment.hpp\"", "]", "\n", "\n", "if", "items_to_save", "is", "not", "None", ":", "\n", "        ", "pretrained_data_dir", "=", "data_dir", "+", "'/pretrained_'", "+", "weight_path", ".", "rsplit", "(", "'/'", ",", "1", ")", "[", "0", "]", ".", "rsplit", "(", "'/'", ",", "1", ")", "[", "1", "]", "\n", "os", ".", "makedirs", "(", "pretrained_data_dir", ")", "\n", "for", "item_to_save", "in", "items_to_save", ":", "\n", "            ", "copyfile", "(", "item_to_save", ",", "pretrained_data_dir", "+", "'/'", "+", "item_to_save", ".", "rsplit", "(", "'/'", ",", "1", ")", "[", "1", "]", ")", "\n", "\n", "# load observation scaling from files of pre-trained model", "\n", "", "", "env", ".", "load_scaling", "(", "weight_dir", ",", "iteration_number", ")", "\n", "\n", "# load actor and critic parameters from full checkpoint", "\n", "checkpoint", "=", "torch", ".", "load", "(", "weight_path", ")", "\n", "if", "type", "==", "'CPG'", ":", "\n", "        ", "actor", ".", "architecture", ".", "load_state_dict", "(", "checkpoint", "[", "'CPG_actor_architecture_state_dict'", "]", ")", "\n", "actor", ".", "distribution", ".", "load_state_dict", "(", "checkpoint", "[", "'CPG_actor_distribution_state_dict'", "]", ")", "\n", "critic", ".", "architecture", ".", "load_state_dict", "(", "checkpoint", "[", "'CPG_critic_architecture_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'CPG_optimizer_state_dict'", "]", ")", "\n", "", "elif", "type", "==", "'local'", "or", "type", "==", "None", ":", "\n", "        ", "actor", ".", "architecture", ".", "load_state_dict", "(", "checkpoint", "[", "'actor_architecture_state_dict'", "]", ")", "\n", "actor", ".", "distribution", ".", "load_state_dict", "(", "checkpoint", "[", "'actor_distribution_state_dict'", "]", ")", "\n", "critic", ".", "architecture", ".", "load_state_dict", "(", "checkpoint", "[", "'critic_architecture_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.helper.utils.joint_angle_plotting": [[5, 65], ["matplotlib.subplots", "ax[].plot", "ax[].plot", "ax[].set_xlabel", "ax[].set_title", "ax[].plot", "ax[].plot", "ax[].set_xlabel", "ax[].set_title", "ax[].plot", "ax[].plot", "ax[].set_xlabel", "ax[].set_title", "ax[].plot", "ax[].plot", "ax[].set_xlabel", "ax[].set_title", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "matplotlib.subplots", "ax[].plot", "ax[].set_title", "ax[].set_xlabel", "ax[].plot", "ax[].set_title", "ax[].set_xlabel", "ax[].plot", "ax[].set_title", "ax[].set_xlabel", "ax[].plot", "ax[].set_title", "ax[].set_xlabel", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close"], "function", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.close", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.close"], ["def", "joint_angle_plotting", "(", "update", ",", "t_range", ",", "CPG_signal", ",", "FR_thigh_joint_history", ",", "FL_thigh_joint_history", ",", "RR_thigh_joint_history", ",", "RL_thigh_joint_history", ",", "FR_calf_joint_history", ",", "FL_calf_joint_history", ",", "RR_calf_joint_history", ",", "RL_calf_joint_history", ")", ":", "\n", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "2", ",", "figsize", "=", "(", "28", ",", "15", ")", ")", "\n", "\n", "# FR_thigh", "\n", "ax", "[", "0", ",", "0", "]", ".", "plot", "(", "t_range", ",", "FR_thigh_joint_history", ",", "'o'", ",", "label", "=", "'joint angle [rad]'", ")", "\n", "ax", "[", "0", ",", "0", "]", ".", "plot", "(", "t_range", ",", "CPG_signal", "[", "0", "]", ",", "label", "=", "'signal'", ")", "\n", "ax", "[", "0", ",", "0", "]", ".", "set_xlabel", "(", "'time [s]'", ",", "fontsize", "=", "20", ")", "\n", "ax", "[", "0", ",", "0", "]", ".", "set_title", "(", "'FR'", ",", "fontsize", "=", "25", ")", "\n", "\n", "# FL_thigh", "\n", "ax", "[", "0", ",", "1", "]", ".", "plot", "(", "t_range", ",", "FL_thigh_joint_history", ",", "'o'", ",", "label", "=", "'joint angle [rad]'", ")", "\n", "ax", "[", "0", ",", "1", "]", ".", "plot", "(", "t_range", ",", "CPG_signal", "[", "1", "]", ",", "label", "=", "'signal'", ")", "\n", "ax", "[", "0", ",", "1", "]", ".", "set_xlabel", "(", "'time [s]'", ",", "fontsize", "=", "20", ")", "\n", "ax", "[", "0", ",", "1", "]", ".", "set_title", "(", "'FL'", ",", "fontsize", "=", "25", ")", "\n", "\n", "# RR_thigh", "\n", "ax", "[", "1", ",", "0", "]", ".", "plot", "(", "t_range", ",", "RR_thigh_joint_history", ",", "'o'", ",", "label", "=", "'joint angle [rad]'", ")", "\n", "ax", "[", "1", ",", "0", "]", ".", "plot", "(", "t_range", ",", "CPG_signal", "[", "2", "]", ",", "label", "=", "'signal'", ")", "\n", "ax", "[", "1", ",", "0", "]", ".", "set_xlabel", "(", "'time [s]'", ",", "fontsize", "=", "20", ")", "\n", "ax", "[", "1", ",", "0", "]", ".", "set_title", "(", "'RR'", ",", "fontsize", "=", "25", ")", "\n", "\n", "# RL_thigh", "\n", "ax", "[", "1", ",", "1", "]", ".", "plot", "(", "t_range", ",", "RL_thigh_joint_history", ",", "'o'", ",", "label", "=", "'joint angle [rad]'", ")", "\n", "ax", "[", "1", ",", "1", "]", ".", "plot", "(", "t_range", ",", "CPG_signal", "[", "3", "]", ",", "label", "=", "'signal'", ")", "\n", "ax", "[", "1", ",", "1", "]", ".", "set_xlabel", "(", "'time [s]'", ",", "fontsize", "=", "20", ")", "\n", "ax", "[", "1", ",", "1", "]", ".", "set_title", "(", "'RL'", ",", "fontsize", "=", "25", ")", "\n", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "f'joint_plot/Thigh_joint_angle_{update}.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "2", ",", "figsize", "=", "(", "28", ",", "15", ")", ")", "\n", "\n", "# FR_calf", "\n", "ax", "[", "0", ",", "0", "]", ".", "plot", "(", "t_range", ",", "FR_calf_joint_history", ",", "'o'", ",", "label", "=", "'joint angle [rad]'", ")", "\n", "ax", "[", "0", ",", "0", "]", ".", "set_title", "(", "'FR'", ",", "fontsize", "=", "25", ")", "\n", "ax", "[", "0", ",", "0", "]", ".", "set_xlabel", "(", "'time [s]'", ",", "fontsize", "=", "20", ")", "\n", "\n", "# FL_calf", "\n", "ax", "[", "0", ",", "1", "]", ".", "plot", "(", "t_range", ",", "FL_calf_joint_history", ",", "'o'", ",", "label", "=", "'joint angle [rad]'", ")", "\n", "ax", "[", "0", ",", "1", "]", ".", "set_title", "(", "'FL'", ",", "fontsize", "=", "25", ")", "\n", "ax", "[", "0", ",", "1", "]", ".", "set_xlabel", "(", "'time [s]'", ",", "fontsize", "=", "20", ")", "\n", "\n", "# RR_calf", "\n", "ax", "[", "1", ",", "0", "]", ".", "plot", "(", "t_range", ",", "RR_calf_joint_history", ",", "'o'", ",", "label", "=", "'joint angle [rad]'", ")", "\n", "ax", "[", "1", ",", "0", "]", ".", "set_title", "(", "'RR'", ",", "fontsize", "=", "25", ")", "\n", "ax", "[", "1", ",", "0", "]", ".", "set_xlabel", "(", "'time [s]'", ",", "fontsize", "=", "20", ")", "\n", "\n", "# RL_calf", "\n", "ax", "[", "1", ",", "1", "]", ".", "plot", "(", "t_range", ",", "RL_calf_joint_history", ",", "'o'", ",", "label", "=", "'joint angle [rad]'", ")", "\n", "ax", "[", "1", ",", "1", "]", ".", "set_title", "(", "'RL'", ",", "fontsize", "=", "25", ")", "\n", "ax", "[", "1", ",", "1", "]", ".", "set_xlabel", "(", "'time [s]'", ",", "fontsize", "=", "20", ")", "\n", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "f'joint_plot/Calf_joint_angle_{update}.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.helper.utils.contact_plotting": [[66, 83], ["matplotlib.subplots", "ax.imshow", "ax.set_xticks", "ax.set_yticks", "ax.set_xticklabels", "ax.set_yticklabels", "fig.colorbar", "ax.set_title", "ax.set_xlabel", "matplotlib.savefig", "matplotlib.close", "range", "range"], "function", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.close"], ["", "def", "contact_plotting", "(", "update", ",", "contact_log", ")", ":", "\n", "    ", "start", "=", "100", "\n", "total_step", "=", "200", "\n", "single_step", "=", "50", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "20", ",", "10", ")", ")", "\n", "img", "=", "ax", ".", "imshow", "(", "contact_log", "[", ":", ",", "start", ":", "start", "+", "total_step", "]", ",", "aspect", "=", "'auto'", ")", "\n", "x_label_list", "=", "[", "i", "*", "0.01", "for", "i", "in", "range", "(", "start", "+", "single_step", ",", "start", "+", "total_step", "+", "1", ",", "single_step", ")", "]", "\n", "y_label_list", "=", "[", "'FR'", ",", "'FL'", ",", "'RR'", ",", "'RL'", "]", "\n", "ax", ".", "set_xticks", "(", "[", "i", "for", "i", "in", "range", "(", "single_step", ",", "total_step", "+", "1", ",", "single_step", ")", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "ax", ".", "set_xticklabels", "(", "x_label_list", ")", "\n", "ax", ".", "set_yticklabels", "(", "y_label_list", ")", "\n", "fig", ".", "colorbar", "(", "img", ")", "\n", "ax", ".", "set_title", "(", "'contact'", ",", "fontsize", "=", "20", ")", "\n", "ax", ".", "set_xlabel", "(", "'time [s]'", ")", "\n", "plt", ".", "savefig", "(", "f'contact_plot/contact_{update}.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.helper.utils.CPG_and_velocity_plotting": [[84, 94], ["matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.close"], ["", "def", "CPG_and_velocity_plotting", "(", "update", ",", "n_steps", ",", "CPG_signal_period_traj", ",", "target_velocity_traj", ",", "real_velocity_traj", ")", ":", "\n", "    ", "time_axis", "=", "np", ".", "arange", "(", "n_steps", ")", "*", "0.01", "\n", "plt", ".", "plot", "(", "time_axis", ",", "CPG_signal_period_traj", ",", "label", "=", "'CPG_period'", ")", "\n", "plt", ".", "plot", "(", "time_axis", ",", "target_velocity_traj", ",", "label", "=", "'target_velocity'", ")", "\n", "plt", ".", "plot", "(", "time_axis", ",", "real_velocity_traj", ",", "label", "=", "'real_velocity'", ")", "\n", "plt", ".", "title", "(", "'CPG and velocity'", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'time [s]'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "f'CPG_and_velocity_plot/CPG_vel_{update}.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.__init__": [[16, 38], ["RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.init", "RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.getObDim", "RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.getActionDim", "gym.spaces.Box", "gym.spaces.Box", "stable_baselines3.common.vec_env.base_vec_env.VecEnv.__init__", "numpy.zeros", "RaisimSbGymVecEnv.RunningMeanStd", "numpy.zeros", "numpy.zeros", "RaisimSbGymVecEnv.RaisimSbGymVecEnv.seed", "platform.system", "numpy.full", "numpy.full", "RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.getNumOfEnvs", "numpy.full", "numpy.full", "range"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.seed"], ["def", "__init__", "(", "self", ",", "impl", ",", "cfg", ",", "normalize_ob", "=", "True", ",", "seed", "=", "0", ",", "normalize_rew", "=", "True", ",", "clip_obs", "=", "10.", ")", ":", "\n", "        ", "if", "platform", ".", "system", "(", ")", "==", "\"Darwin\"", ":", "\n", "            ", "os", ".", "environ", "[", "'KMP_DUPLICATE_LIB_OK'", "]", "=", "'True'", "\n", "\n", "", "self", ".", "normalize_ob", "=", "normalize_ob", "\n", "self", ".", "normalize_rew", "=", "normalize_rew", "\n", "self", ".", "clip_obs", "=", "clip_obs", "\n", "self", ".", "wrapper", "=", "impl", "\n", "self", ".", "wrapper", ".", "init", "(", ")", "\n", "self", ".", "num_obs", "=", "self", ".", "wrapper", ".", "getObDim", "(", ")", "\n", "self", ".", "num_acts", "=", "self", ".", "wrapper", ".", "getActionDim", "(", ")", "\n", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "-", "np", ".", "full", "(", "self", ".", "num_obs", ",", "np", ".", "inf", ")", ",", "np", ".", "full", "(", "self", ".", "num_obs", ",", "np", ".", "inf", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "-", "np", ".", "full", "(", "self", ".", "num_acts", ",", "np", ".", "inf", ")", ",", "np", ".", "full", "(", "self", ".", "num_acts", ",", "np", ".", "inf", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "super", "(", "RaisimSbGymVecEnv", ",", "self", ")", ".", "__init__", "(", "self", ".", "wrapper", ".", "getNumOfEnvs", "(", ")", ",", "self", ".", "observation_space", ",", "self", ".", "action_space", ")", "\n", "\n", "self", ".", "_observation", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_envs", ",", "self", ".", "num_obs", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "obs_rms", "=", "RunningMeanStd", "(", "shape", "=", "[", "self", ".", "num_envs", ",", "self", ".", "num_obs", "]", ")", "\n", "self", ".", "_reward", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_done", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "rewards", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", "self", ".", "seed", "(", "seed", ")", "\n", "self", ".", "actions", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.seed": [[39, 41], ["RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.setSeed"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "setSeed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.turn_on_visualization": [[42, 44], ["RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.turnOnVisualization"], "methods", ["None"], ["", "def", "turn_on_visualization", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "turnOnVisualization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.turn_off_visualization": [[45, 47], ["RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.turnOffVisualization"], "methods", ["None"], ["", "def", "turn_off_visualization", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "turnOffVisualization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.start_video_recording": [[48, 50], ["RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.startRecordingVideo"], "methods", ["None"], ["", "def", "start_video_recording", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "startRecordingVideo", "(", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.stop_video_recording": [[51, 53], ["RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.stopRecordingVideo"], "methods", ["None"], ["", "def", "stop_video_recording", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "stopRecordingVideo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.step_async": [[54, 56], ["None"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "actions", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "        ", "self", ".", "actions", "=", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.step_wait": [[57, 60], ["RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.step", "RaisimSbGymVecEnv.RaisimSbGymVecEnv.observe", "RaisimSbGymVecEnv.RaisimSbGymVecEnv._reward.copy", "RaisimSbGymVecEnv.RaisimSbGymVecEnv._done.copy"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.step", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.observe"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "step", "(", "self", ".", "actions", ",", "self", ".", "_reward", ",", "self", ".", "_done", ")", "\n", "return", "self", ".", "observe", "(", "True", ")", ",", "self", ".", "_reward", ".", "copy", "(", ")", ",", "self", ".", "_done", ".", "copy", "(", ")", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.env_method": [[61, 63], ["None"], "methods", ["None"], ["", "def", "env_method", "(", "self", ",", "method_name", ":", "str", ",", "*", "method_args", ",", "indices", ":", "VecEnvIndices", "=", "None", ",", "**", "method_kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.get_attr": [[64, 66], ["None"], "methods", ["None"], ["", "def", "get_attr", "(", "self", ",", "attr_name", ":", "str", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.set_attr": [[67, 69], ["None"], "methods", ["None"], ["", "def", "set_attr", "(", "self", ",", "attr_name", ":", "str", ",", "value", ":", "Any", ",", "indices", ":", "VecEnvIndices", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.load_scaling": [[70, 76], ["numpy.loadtxt", "numpy.loadtxt", "str", "str"], "methods", ["None"], ["", "def", "load_scaling", "(", "self", ",", "dir_name", ",", "iteration", ",", "count", "=", "1e5", ")", ":", "\n", "        ", "mean_file_name", "=", "dir_name", "+", "\"/mean\"", "+", "str", "(", "iteration", ")", "+", "\".csv\"", "\n", "var_file_name", "=", "dir_name", "+", "\"/var\"", "+", "str", "(", "iteration", ")", "+", "\".csv\"", "\n", "self", ".", "obs_rms", ".", "count", "=", "count", "\n", "self", ".", "obs_rms", ".", "mean", "=", "np", ".", "loadtxt", "(", "mean_file_name", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "obs_rms", ".", "var", "=", "np", ".", "loadtxt", "(", "var_file_name", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.save_scaling": [[77, 82], ["numpy.savetxt", "numpy.savetxt"], "methods", ["None"], ["", "def", "save_scaling", "(", "self", ",", "dir_name", ",", "iteration", ")", ":", "\n", "        ", "mean_file_name", "=", "dir_name", "+", "\"/mean\"", "+", "iteration", "+", "\".csv\"", "\n", "var_file_name", "=", "dir_name", "+", "\"/var\"", "+", "iteration", "+", "\".csv\"", "\n", "np", ".", "savetxt", "(", "mean_file_name", ",", "self", ".", "obs_rms", ".", "mean", ")", "\n", "np", ".", "savetxt", "(", "var_file_name", ",", "self", ".", "obs_rms", ".", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.observe": [[83, 93], ["RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.observe", "RaisimSbGymVecEnv.RaisimSbGymVecEnv._normalize_observation", "RaisimSbGymVecEnv.RaisimSbGymVecEnv._observation.copy", "RaisimSbGymVecEnv.RaisimSbGymVecEnv.obs_rms.update"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.observe", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv._normalize_observation", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.update"], ["", "def", "observe", "(", "self", ",", "update_mean", "=", "True", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "observe", "(", "self", ".", "_observation", ")", "\n", "\n", "if", "self", ".", "normalize_ob", ":", "\n", "            ", "if", "update_mean", ":", "\n", "                ", "self", ".", "obs_rms", ".", "update", "(", "self", ".", "_observation", ")", "\n", "\n", "", "return", "self", ".", "_normalize_observation", "(", "self", ".", "_observation", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_observation", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.reset": [[94, 98], ["numpy.zeros", "RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.reset", "RaisimSbGymVecEnv.RaisimSbGymVecEnv.observe"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.reset", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.observe"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_reward", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "wrapper", ".", "reset", "(", ")", "\n", "return", "self", ".", "observe", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv._normalize_observation": [[99, 106], ["numpy.clip", "numpy.sqrt"], "methods", ["None"], ["", "def", "_normalize_observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "normalize_ob", ":", "\n", "\n", "            ", "return", "np", ".", "clip", "(", "(", "obs", "-", "self", ".", "obs_rms", ".", "mean", ")", "/", "np", ".", "sqrt", "(", "self", ".", "obs_rms", ".", "var", "+", "1e-8", ")", ",", "-", "self", ".", "clip_obs", ",", "\n", "self", ".", "clip_obs", ")", "\n", "", "else", ":", "\n", "            ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.close": [[107, 109], ["RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.close"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.curriculum_callback": [[110, 112], ["RaisimSbGymVecEnv.RaisimSbGymVecEnv.wrapper.curriculumUpdate"], "methods", ["None"], ["", "def", "curriculum_callback", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "curriculumUpdate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RaisimSbGymVecEnv.render": [[113, 115], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RunningMeanStd.__init__": [[118, 126], ["numpy.zeros", "numpy.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-4", ",", "shape", "=", "(", ")", ")", ":", "\n", "        ", "\"\"\"\n        :param epsilon: (float) helps with arithmetic issues\n        :param shape: (tuple) the shape of the data stream's output\n        \"\"\"", "\n", "self", ".", "mean", "=", "np", ".", "zeros", "(", "shape", ",", "'float32'", ")", "\n", "self", ".", "var", "=", "np", ".", "ones", "(", "shape", ",", "'float32'", ")", "\n", "self", ".", "count", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RunningMeanStd.update": [[127, 132], ["numpy.mean", "numpy.var", "RaisimSbGymVecEnv.RunningMeanStd.update_from_moments"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RunningMeanStd.update_from_moments"], ["", "def", "update", "(", "self", ",", "arr", ")", ":", "\n", "        ", "batch_mean", "=", "np", ".", "mean", "(", "arr", ",", "axis", "=", "0", ")", "\n", "batch_var", "=", "np", ".", "var", "(", "arr", ",", "axis", "=", "0", ")", "\n", "batch_count", "=", "arr", ".", "shape", "[", "0", "]", "\n", "self", ".", "update_from_moments", "(", "batch_mean", ",", "batch_var", ",", "batch_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.stable_baselines3.RaisimSbGymVecEnv.RunningMeanStd.update_from_moments": [[133, 148], ["numpy.square"], "methods", ["None"], ["", "def", "update_from_moments", "(", "self", ",", "batch_mean", ",", "batch_var", ",", "batch_count", ")", ":", "\n", "        ", "delta", "=", "batch_mean", "-", "self", ".", "mean", "\n", "tot_count", "=", "self", ".", "count", "+", "batch_count", "\n", "\n", "new_mean", "=", "self", ".", "mean", "+", "delta", "*", "batch_count", "/", "tot_count", "\n", "m_a", "=", "self", ".", "var", "*", "self", ".", "count", "\n", "m_b", "=", "batch_var", "*", "batch_count", "\n", "m_2", "=", "m_a", "+", "m_b", "+", "np", ".", "square", "(", "delta", ")", "*", "(", "self", ".", "count", "*", "batch_count", "/", "(", "self", ".", "count", "+", "batch_count", ")", ")", "\n", "new_var", "=", "m_2", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "\n", "new_count", "=", "batch_count", "+", "self", ".", "count", "\n", "\n", "self", ".", "mean", "=", "new_mean", "\n", "self", ".", "var", "=", "new_var", "\n", "self", ".", "count", "=", "new_count", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.__init__": [[14, 35], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.getObDim", "RaisimGymVecEnv.RaisimGymVecEnv.wrapper.getActionDim", "numpy.zeros", "RaisimGymVecEnv.RunningMeanStd", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "platform.system", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "impl", ",", "cfg", ",", "normalize_ob", "=", "True", ",", "seed", "=", "0", ",", "normalize_rew", "=", "True", ",", "clip_obs", "=", "5.", ")", ":", "# 10.", "\n", "        ", "if", "platform", ".", "system", "(", ")", "==", "\"Darwin\"", ":", "\n", "            ", "os", ".", "environ", "[", "'KMP_DUPLICATE_LIB_OK'", "]", "=", "'True'", "\n", "", "self", ".", "normalize_ob", "=", "normalize_ob", "\n", "self", ".", "normalize_rew", "=", "normalize_rew", "\n", "self", ".", "clip_obs", "=", "clip_obs", "\n", "self", ".", "wrapper", "=", "impl", "\n", "self", ".", "num_obs", "=", "self", ".", "wrapper", ".", "getObDim", "(", ")", "\n", "self", ".", "num_acts", "=", "self", ".", "wrapper", ".", "getActionDim", "(", ")", "\n", "self", ".", "_observation", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_envs", ",", "self", ".", "num_obs", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "obs_rms", "=", "RunningMeanStd", "(", "shape", "=", "[", "self", ".", "num_envs", ",", "self", ".", "num_obs", "]", ")", "\n", "self", ".", "_reward", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_CPG_reward", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_done", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "rewards", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", "self", ".", "reward_log", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_envs", ",", "cfg", "[", "\"n_reward\"", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "contact_log", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_envs", ",", "4", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# logging", "\n", "self", ".", "update_count", "=", "0", "\n", "self", ".", "joint_angle", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.seed": [[36, 38], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.setSeed"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "setSeed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.turn_on_visualization": [[39, 41], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.turnOnVisualization"], "methods", ["None"], ["", "def", "turn_on_visualization", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "turnOnVisualization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.turn_off_visualization": [[42, 44], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.turnOffVisualization"], "methods", ["None"], ["", "def", "turn_off_visualization", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "turnOffVisualization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.start_video_recording": [[45, 47], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.startRecordingVideo"], "methods", ["None"], ["", "def", "start_video_recording", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "startRecordingVideo", "(", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.stop_video_recording": [[48, 50], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.stopRecordingVideo"], "methods", ["None"], ["", "def", "stop_video_recording", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "stopRecordingVideo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.step": [[51, 54], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.step", "RaisimGymVecEnv.RaisimGymVecEnv._reward.copy", "RaisimGymVecEnv.RaisimGymVecEnv._done.copy"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "step", "(", "action", ",", "self", ".", "_reward", ",", "self", ".", "_done", ")", "\n", "return", "self", ".", "_reward", ".", "copy", "(", ")", ",", "self", ".", "_done", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.load_scaling": [[55, 61], ["numpy.loadtxt", "numpy.loadtxt", "str", "str"], "methods", ["None"], ["", "def", "load_scaling", "(", "self", ",", "dir_name", ",", "iteration", ",", "count", "=", "1e5", ")", ":", "\n", "        ", "mean_file_name", "=", "dir_name", "+", "\"/mean\"", "+", "str", "(", "iteration", ")", "+", "\".csv\"", "\n", "var_file_name", "=", "dir_name", "+", "\"/var\"", "+", "str", "(", "iteration", ")", "+", "\".csv\"", "\n", "self", ".", "obs_rms", ".", "count", "=", "count", "\n", "self", ".", "obs_rms", ".", "mean", "=", "np", ".", "loadtxt", "(", "mean_file_name", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "obs_rms", ".", "var", "=", "np", ".", "loadtxt", "(", "var_file_name", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.save_scaling": [[62, 67], ["numpy.savetxt", "numpy.savetxt"], "methods", ["None"], ["", "def", "save_scaling", "(", "self", ",", "dir_name", ",", "iteration", ")", ":", "\n", "        ", "mean_file_name", "=", "dir_name", "+", "\"/mean\"", "+", "iteration", "+", "\".csv\"", "\n", "var_file_name", "=", "dir_name", "+", "\"/var\"", "+", "iteration", "+", "\".csv\"", "\n", "np", ".", "savetxt", "(", "mean_file_name", ",", "self", ".", "obs_rms", ".", "mean", ")", "\n", "np", ".", "savetxt", "(", "var_file_name", ",", "self", ".", "obs_rms", ".", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.observe": [[68, 78], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.observe", "RaisimGymVecEnv.RaisimGymVecEnv._normalize_observation", "RaisimGymVecEnv.RaisimGymVecEnv._observation.copy", "RaisimGymVecEnv.RaisimGymVecEnv.obs_rms.update"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.observe", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv._normalize_observation", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.update"], ["", "def", "observe", "(", "self", ",", "update_mean", "=", "True", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "observe", "(", "self", ".", "_observation", ")", "\n", "\n", "if", "self", ".", "normalize_ob", ":", "\n", "            ", "if", "update_mean", ":", "\n", "                ", "self", ".", "obs_rms", ".", "update", "(", "self", ".", "_observation", ")", "\n", "\n", "", "return", "self", ".", "_normalize_observation", "(", "self", ".", "_observation", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_observation", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.observe_logging": [[79, 90], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.observe", "RaisimGymVecEnv.RaisimGymVecEnv._observation.copy", "RaisimGymVecEnv.RaisimGymVecEnv._observation.copy", "RaisimGymVecEnv.RaisimGymVecEnv.obs_rms.update", "RaisimGymVecEnv.RaisimGymVecEnv._normalize_observation"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.observe", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.update", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv._normalize_observation"], ["", "", "def", "observe_logging", "(", "self", ",", "update_mean", "=", "True", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "observe", "(", "self", ".", "_observation", ")", "\n", "not_normalized_obs", "=", "self", ".", "_observation", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "normalize_ob", ":", "\n", "            ", "if", "update_mean", ":", "\n", "                ", "self", ".", "obs_rms", ".", "update", "(", "self", ".", "_observation", ")", "\n", "\n", "", "return", "self", ".", "_normalize_observation", "(", "self", ".", "_observation", ")", ",", "not_normalized_obs", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_observation", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.reset": [[91, 94], ["numpy.zeros", "RaisimGymVecEnv.RaisimGymVecEnv.wrapper.reset"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.reset"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_reward", "=", "np", ".", "zeros", "(", "self", ".", "num_envs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "wrapper", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv._normalize_observation": [[95, 101], ["numpy.clip", "numpy.sqrt"], "methods", ["None"], ["", "def", "_normalize_observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "normalize_ob", ":", "\n", "            ", "return", "np", ".", "clip", "(", "(", "obs", "-", "self", ".", "obs_rms", ".", "mean", ")", "/", "np", ".", "sqrt", "(", "self", ".", "obs_rms", ".", "var", "+", "1e-8", ")", ",", "-", "self", ".", "clip_obs", ",", "\n", "self", ".", "clip_obs", ")", "\n", "", "else", ":", "\n", "            ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.close": [[102, 104], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.close"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.curriculum_callback": [[105, 107], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.curriculumUpdate"], "methods", ["None"], ["", "def", "curriculum_callback", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "curriculumUpdate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.reward_logging": [[108, 110], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.reward_logging"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.reward_logging"], ["", "def", "reward_logging", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "reward_logging", "(", "self", ".", "reward_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.contact_logging": [[111, 113], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.contact_logging"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.contact_logging"], ["", "def", "contact_logging", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "contact_logging", "(", "self", ".", "contact_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.set_target_velocity": [[114, 116], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.set_target_velocity"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.set_target_velocity"], ["", "def", "set_target_velocity", "(", "self", ",", "target_velocity", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "set_target_velocity", "(", "target_velocity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.get_CPG_reward": [[117, 119], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.get_CPG_reward"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.get_CPG_reward"], ["", "def", "get_CPG_reward", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "get_CPG_reward", "(", "self", ".", "_CPG_reward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.increase_cost_scale": [[120, 122], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.increase_cost_scale"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.increase_cost_scale"], ["", "def", "increase_cost_scale", "(", "self", ")", ":", "\n", "        ", "self", ".", "wrapper", ".", "increase_cost_scale", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RaisimGymVecEnv.num_envs": [[123, 126], ["RaisimGymVecEnv.RaisimGymVecEnv.wrapper.getNumOfEnvs"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_envs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "wrapper", ".", "getNumOfEnvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RunningMeanStd.__init__": [[129, 140], ["numpy.zeros", "numpy.ones"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-4", ",", "shape", "=", "(", ")", ")", ":", "\n", "        ", "\"\"\"\n        calulates the running mean and std of a data stream\n        https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Parallel_algorithm\n\n        :param epsilon: (float) helps with arithmetic issues\n        :param shape: (tuple) the shape of the data stream's output\n        \"\"\"", "\n", "self", ".", "mean", "=", "np", ".", "zeros", "(", "shape", ",", "'float32'", ")", "\n", "self", ".", "var", "=", "np", ".", "ones", "(", "shape", ",", "'float32'", ")", "\n", "self", ".", "count", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RunningMeanStd.update": [[141, 146], ["numpy.mean", "numpy.var", "RaisimGymVecEnv.RunningMeanStd.update_from_moments"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RunningMeanStd.update_from_moments"], ["", "def", "update", "(", "self", ",", "arr", ")", ":", "\n", "        ", "batch_mean", "=", "np", ".", "mean", "(", "arr", ",", "axis", "=", "0", ")", "\n", "batch_var", "=", "np", ".", "var", "(", "arr", ",", "axis", "=", "0", ")", "\n", "batch_count", "=", "arr", ".", "shape", "[", "0", "]", "\n", "self", ".", "update_from_moments", "(", "batch_mean", ",", "batch_var", ",", "batch_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.env.RaisimGymVecEnv.RunningMeanStd.update_from_moments": [[147, 162], ["numpy.square"], "methods", ["None"], ["", "def", "update_from_moments", "(", "self", ",", "batch_mean", ",", "batch_var", ",", "batch_count", ")", ":", "\n", "        ", "delta", "=", "batch_mean", "-", "self", ".", "mean", "\n", "tot_count", "=", "self", ".", "count", "+", "batch_count", "\n", "\n", "new_mean", "=", "self", ".", "mean", "+", "delta", "*", "batch_count", "/", "tot_count", "\n", "m_a", "=", "self", ".", "var", "*", "self", ".", "count", "\n", "m_b", "=", "batch_var", "*", "batch_count", "\n", "m_2", "=", "m_a", "+", "m_b", "+", "np", ".", "square", "(", "delta", ")", "*", "(", "self", ".", "count", "*", "batch_count", "/", "(", "self", ".", "count", "+", "batch_count", ")", ")", "\n", "new_var", "=", "m_2", "/", "(", "self", ".", "count", "+", "batch_count", ")", "\n", "\n", "new_count", "=", "batch_count", "+", "self", ".", "count", "\n", "\n", "self", ".", "mean", "=", "new_mean", "\n", "self", ".", "var", "=", "new_var", "\n", "self", ".", "count", "=", "new_count", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal.runner.sin": [[29, 31], ["numpy.sin"], "function", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal_transfer.tester.sin"], ["def", "sin", "(", "x", ",", "a", ",", "b", ",", "c", ",", "d", ")", ":", "\n", "    ", "return", "a", "*", "np", ".", "sin", "(", "b", "*", "x", "+", "c", ")", "+", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal.runner.shift_sin_param": [[33, 38], ["None"], "function", ["None"], ["", "def", "shift_sin_param", "(", "param1", ",", "param2", ",", "mean_param", ")", ":", "\n", "    ", "new_param", "=", "(", "param2", "-", "param1", ")", "/", "mean_param", "\n", "new_param", "-=", "(", "new_param", "//", "(", "2", "*", "np", ".", "pi", ")", ")", "*", "(", "2", "*", "np", ".", "pi", ")", "\n", "assert", "(", "0", "<=", "new_param", ")", ".", "all", "(", ")", "and", "(", "new_param", "<", "2", "*", "np", ".", "pi", ")", ".", "all", "(", ")", "\n", "return", "new_param", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal.tester.sin": [[20, 22], ["numpy.sin"], "function", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal_transfer.tester.sin"], ["def", "sin", "(", "x", ",", "a", ",", "b", ",", "c", ",", "d", ")", ":", "\n", "    ", "return", "a", "*", "np", ".", "sin", "(", "b", "*", "x", "+", "c", ")", "+", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal_transfer.runner_ver2.sin": [[29, 31], ["numpy.sin"], "function", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal_transfer.tester.sin"], ["def", "sin", "(", "x", ",", "a", ",", "b", ")", ":", "\n", "    ", "return", "np", ".", "sin", "(", "a", "*", "x", "+", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal_transfer.runner_ver2.sin_derivatice": [[32, 34], ["numpy.cos"], "function", ["None"], ["", "def", "sin_derivatice", "(", "x", ",", "a", ",", "b", ")", ":", "\n", "    ", "return", "a", "*", "np", ".", "cos", "(", "a", "*", "x", "+", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal_transfer.continuous_CPG_runner.sin": [[29, 31], ["numpy.sin"], "function", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal_transfer.tester.sin"], ["def", "sin", "(", "x", ",", "a", ",", "b", ",", "c", ",", "d", ")", ":", "\n", "    ", "return", "a", "*", "np", ".", "sin", "(", "b", "*", "x", "+", "c", ")", "+", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal_transfer.discrete_CPG_runner.sin": [[28, 30], ["numpy.sin"], "function", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal_transfer.tester.sin"], ["def", "sin", "(", "x", ",", "a", ",", "b", ")", ":", "\n", "    ", "return", "np", ".", "sin", "(", "a", "*", "x", "+", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal_transfer.discrete_CPG_runner.sin_derivatice": [[31, 33], ["numpy.cos"], "function", ["None"], ["", "def", "sin_derivatice", "(", "x", ",", "a", ",", "b", ")", ":", "\n", "    ", "return", "a", "*", "np", ".", "cos", "(", "a", "*", "x", "+", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal_transfer.tester.sin": [[21, 23], ["numpy.sin"], "function", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.multigait_anymal_transfer.tester.sin"], ["    ", "return", "a", "*", "np", ".", "sin", "(", "b", "*", "x", "+", "c", ")", "+", "d", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Actor.__init__": [[9, 17], ["super().__init__", "module.Actor.architecture.to", "module.Actor.distribution.to"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "architecture", ",", "distribution", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "Actor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "architecture", "=", "architecture", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "architecture", ".", "to", "(", "device", ")", "\n", "self", ".", "distribution", ".", "to", "(", "device", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Actor.sample": [[18, 44], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "module.Actor.distribution.sample", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.clamp.cpu().detach", "torch.clamp.cpu().detach", "torch.clamp.cpu().detach", "log_prob.cpu().detach", "module.Actor.architecture.architecture", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "module.Actor.distribution.sample", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "module.Actor.architecture.architecture", "torch.clamp.cpu().detach", "torch.clamp.cpu().detach", "torch.clamp.cpu().detach", "log_prob.cpu().detach", "torch.clamp.cpu", "torch.clamp.cpu", "torch.clamp.cpu", "log_prob.cpu", "torch.clamp.cpu", "torch.clamp.cpu", "torch.clamp.cpu", "log_prob.cpu"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.sample", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.sample"], ["", "def", "sample", "(", "self", ",", "obs", ",", "PPO_type", ")", ":", "\n", "        ", "if", "PPO_type", "==", "'CPG'", ":", "\n", "            ", "logits", "=", "torch", ".", "clamp", "(", "torch", ".", "relu", "(", "self", ".", "architecture", ".", "architecture", "(", "obs", ")", ")", ",", "min", "=", "0.1", ",", "max", "=", "1.", ")", "\n", "actions", ",", "log_prob", "=", "self", ".", "distribution", ".", "sample", "(", "logits", ")", "\n", "\n", "## For real action ##", "\n", "actions", "=", "torch", ".", "clamp", "(", "torch", ".", "relu", "(", "actions", ")", ",", "min", "=", "0.1", ",", "max", "=", "1.", ")", "# clipping amplitude (Architecture 5)", "\n", "# actions[:, 1:] = torch.tanh(actions[:, 1:])", "\n", "# actions[:, 2:] = torch.clamp(actions[:, 2:], min=-1, max=1)", "\n", "return", "actions", ".", "cpu", "(", ")", ".", "detach", "(", ")", ",", "log_prob", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "elif", "PPO_type", "==", "'local'", "or", "PPO_type", "==", "None", ":", "\n", "            ", "logits", "=", "self", ".", "architecture", ".", "architecture", "(", "obs", ")", "\n", "logits", "[", ":", ",", "0", "]", "=", "torch", ".", "relu", "(", "logits", "[", ":", ",", "0", "]", ")", "# clipping amplitude (Architecture 5)", "\n", "# logits[:, 2:] = torch.clamp(logits[:, 2:], min=-1.3, max=1.3)  # clipping shaft & calf (Architecture 5)", "\n", "# logits[:, 1:] = torch.clamp(logits[:, 1:], min=-1.3, max=1.3)  # clipping shaft & calf (Architecture 5)", "\n", "actions", ",", "log_prob", "=", "self", ".", "distribution", ".", "sample", "(", "logits", ")", "\n", "# actions[:, :4] = F.relu(actions[:, :4])  # clipping amplitude (Architecture 4)", "\n", "\n", "## For real action ##", "\n", "actions", "[", ":", ",", "0", "]", "=", "torch", ".", "relu", "(", "actions", "[", ":", ",", "0", "]", ")", "# clipping amplitude (Architecture 5)", "\n", "# actions[:, 2:] = torch.clamp(actions[:, 2:], min=-1.3, max=1.3)", "\n", "# actions[:, 1:] = torch.clamp(actions[:, 1:], min=-1.3, max=1.3)", "\n", "# actions[:, 1:] = torch.tanh(actions[:, 1:])", "\n", "# actions[:, 2:] = torch.clamp(actions[:, 2:], min=-1, max=1)", "\n", "return", "actions", ".", "cpu", "(", ")", ".", "detach", "(", ")", ",", "log_prob", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Actor.evaluate": [[45, 55], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "module.Actor.distribution.evaluate", "module.Actor.architecture.architecture", "module.Actor.architecture.architecture", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module.Actor.distribution.evaluate", "torch.relu().unsqueeze", "torch.relu().unsqueeze", "torch.relu().unsqueeze", "torch.relu().unsqueeze", "torch.relu().unsqueeze", "torch.relu().unsqueeze", "torch.relu().unsqueeze", "torch.relu().unsqueeze", "torch.relu().unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.evaluate", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.evaluate"], ["", "", "def", "evaluate", "(", "self", ",", "obs", ",", "actions", ",", "PPO_type", ")", ":", "\n", "        ", "if", "PPO_type", "==", "'CPG'", ":", "\n", "            ", "action_mean", "=", "torch", ".", "relu", "(", "self", ".", "architecture", ".", "architecture", "(", "obs", ")", ")", "\n", "return", "self", ".", "distribution", ".", "evaluate", "(", "obs", ",", "action_mean", ",", "actions", ")", "\n", "", "elif", "PPO_type", "==", "'local'", "or", "PPO_type", "==", "None", ":", "\n", "            ", "action_mean", "=", "self", ".", "architecture", ".", "architecture", "(", "obs", ")", "\n", "# action_mean_clipped = torch.cat((F.relu(action_mean[:, :4]), action_mean[:, 4:]), dim=1)  # clipping amplitude (Architecture 4)", "\n", "# action_mean_clipped = torch.cat((torch.relu(action_mean[:, 0]).unsqueeze(-1), torch.tanh(action_mean[:, 1:])), dim=1)  # clipping amplitude & shaft & calf (Architecture 5)", "\n", "action_mean_clipped", "=", "torch", ".", "cat", "(", "(", "torch", ".", "relu", "(", "action_mean", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "action_mean", "[", ":", ",", "1", ":", "]", ")", ",", "dim", "=", "1", ")", "# clipping amplitude & shaft & calf (Architecture 5)", "\n", "return", "self", ".", "distribution", ".", "evaluate", "(", "obs", ",", "action_mean_clipped", ",", "actions", ")", "# clipping amplitude (Architecture 4, 5)", "\n", "# return self.distribution.evaluate(obs, action_mean, actions)", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Actor.parameters": [[57, 59], ["module.Actor.architecture.parameters", "module.Actor.distribution.parameters"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.parameters", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.parameters"], ["", "", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "*", "self", ".", "architecture", ".", "parameters", "(", ")", ",", "*", "self", ".", "distribution", ".", "parameters", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Actor.noiseless_action": [[60, 62], ["module.Actor.architecture.architecture", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "noiseless_action", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "self", ".", "architecture", ".", "architecture", "(", "torch", ".", "from_numpy", "(", "obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Actor.save_deterministic_graph": [[63, 67], ["torch.jit.trace", "torch.jit.trace", "torch.jit.trace", "torch.jit.trace", "torch.jit.trace", "torch.jit.trace", "torch.jit.trace", "torch.jit.trace", "torch.jit.trace", "torch.jit.save", "torch.jit.save", "torch.jit.save", "torch.jit.save", "torch.jit.save", "torch.jit.save", "torch.jit.save", "torch.jit.save", "torch.jit.save", "module.Actor.architecture.architecture.to", "module.Actor.architecture.architecture.to"], "methods", ["None"], ["", "def", "save_deterministic_graph", "(", "self", ",", "file_name", ",", "example_input", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "transferred_graph", "=", "torch", ".", "jit", ".", "trace", "(", "self", ".", "architecture", ".", "architecture", ".", "to", "(", "device", ")", ",", "example_input", ")", "\n", "torch", ".", "jit", ".", "save", "(", "transferred_graph", ",", "file_name", ")", "\n", "self", ".", "architecture", ".", "architecture", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Actor.deterministic_parameters": [[68, 70], ["module.Actor.architecture.parameters"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.parameters"], ["", "def", "deterministic_parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "architecture", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Actor.obs_shape": [[71, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obs_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "architecture", ".", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Actor.action_shape": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "action_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "architecture", ".", "output_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.__init__": [[81, 85], ["super().__init__", "module.Critic.architecture.to"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "architecture", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "architecture", "=", "architecture", "\n", "self", ".", "architecture", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.predict": [[86, 88], ["module.Critic.architecture.architecture().detach", "module.Critic.architecture.architecture"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "self", ".", "architecture", ".", "architecture", "(", "obs", ")", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.evaluate": [[89, 91], ["module.Critic.architecture.architecture"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "self", ".", "architecture", ".", "architecture", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.parameters": [[92, 94], ["module.Critic.architecture.parameters"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.parameters"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "[", "*", "self", ".", "architecture", ".", "parameters", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.obs_shape": [[95, 98], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "obs_shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "architecture", ".", "input_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MLP.__init__": [[101, 121], ["torch.Module.__init__", "range", "modules.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "scale.append", "module.MLP.init_weights", "torch.Linear", "torch.Linear", "torch.Linear", "module.MLP.activation_fn", "numpy.sqrt", "modules.append", "modules.append", "scale.append", "torch.Linear", "torch.Linear", "torch.Linear", "numpy.sqrt", "len", "torch.Linear", "torch.Linear", "torch.Linear", "module.MLP.activation_fn", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.__init__", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MLP.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "shape", ",", "actionvation_fn", ",", "input_size", ",", "output_size", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation_fn", "=", "actionvation_fn", "\n", "\n", "modules", "=", "[", "nn", ".", "Linear", "(", "input_size", ",", "shape", "[", "0", "]", ")", ",", "self", ".", "activation_fn", "(", ")", "]", "\n", "scale", "=", "[", "np", ".", "sqrt", "(", "2", ")", "]", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "shape", ")", "-", "1", ")", ":", "\n", "            ", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "shape", "[", "idx", "]", ",", "shape", "[", "idx", "+", "1", "]", ")", ")", "\n", "modules", ".", "append", "(", "self", ".", "activation_fn", "(", ")", ")", "\n", "scale", ".", "append", "(", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "\n", "", "modules", ".", "append", "(", "nn", ".", "Linear", "(", "shape", "[", "-", "1", "]", ",", "output_size", ")", ")", "\n", "\n", "self", ".", "architecture", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "scale", ".", "append", "(", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "\n", "self", ".", "init_weights", "(", "self", ".", "architecture", ",", "scale", ")", "\n", "self", ".", "input_shape", "=", "[", "input_size", "]", "\n", "self", ".", "output_shape", "=", "[", "output_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MLP.init_weights": [[122, 126], ["torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "enumerate", "isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "init_weights", "(", "sequential", ",", "scales", ")", ":", "\n", "        ", "[", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "module", ".", "weight", ",", "gain", "=", "scales", "[", "idx", "]", ")", "for", "idx", ",", "module", "in", "\n", "enumerate", "(", "mod", "for", "mod", "in", "sequential", "if", "isinstance", "(", "mod", ",", "nn", ".", "Linear", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.__init__": [[129, 138], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "init_std", ",", "type", "=", "None", ")", ":", "\n", "        ", "super", "(", "MultivariateGaussianDiagonalCovariance", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "if", "type", "==", "'CPG'", ":", "\n", "            ", "self", ".", "std", "=", "init_std", "*", "torch", ".", "ones", "(", "dim", ")", "# fixed", "\n", "", "else", ":", "\n", "            ", "self", ".", "std", "=", "nn", ".", "Parameter", "(", "init_std", "*", "torch", ".", "ones", "(", "dim", ")", ")", "# trainable", "\n", "\n", "", "self", ".", "distribution", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.sample": [[139, 146], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "module.MultivariateGaussianDiagonalCovariance.distribution.sample", "module.MultivariateGaussianDiagonalCovariance.distribution.log_prob().sum", "module.MultivariateGaussianDiagonalCovariance.std.reshape", "module.MultivariateGaussianDiagonalCovariance.distribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.sample"], ["", "def", "sample", "(", "self", ",", "logits", ")", ":", "\n", "        ", "self", ".", "distribution", "=", "Normal", "(", "logits", ",", "self", ".", "std", ".", "reshape", "(", "self", ".", "dim", ")", ")", "\n", "\n", "samples", "=", "self", ".", "distribution", ".", "sample", "(", ")", "\n", "log_prob", "=", "self", ".", "distribution", ".", "log_prob", "(", "samples", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "samples", ",", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.evaluate": [[147, 159], ["distribution.log_prob().sum", "distribution.entropy().sum", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "module.MultivariateGaussianDiagonalCovariance.std.reshape", "print", "distribution.log_prob", "distribution.entropy"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.entropy"], ["", "def", "evaluate", "(", "self", ",", "inputs", ",", "logits", ",", "outputs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "past_distribution", "=", "Normal", "(", "logits", ",", "self", ".", "std", ".", "reshape", "(", "self", ".", "dim", ")", ")", "\n", "distribution", "=", "self", ".", "past_distribution", "\n", "", "except", ":", "\n", "            ", "distribution", "=", "self", ".", "past_distribution", "\n", "print", "(", "\"logit error occurred! (Nan)\"", ")", "\n", "\n", "", "actions_log_prob", "=", "distribution", ".", "log_prob", "(", "outputs", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "entropy", "=", "distribution", ".", "entropy", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "return", "actions_log_prob", ",", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.entropy": [[160, 162], ["module.MultivariateGaussianDiagonalCovariance.distribution.entropy"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.entropy"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "distribution", ".", "entropy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.enforce_minimum_std": [[163, 167], ["module.MultivariateGaussianDiagonalCovariance.std.detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max().detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "min_std.detach"], "methods", ["None"], ["", "def", "enforce_minimum_std", "(", "self", ",", "min_std", ")", ":", "\n", "        ", "current_std", "=", "self", ".", "std", ".", "detach", "(", ")", "\n", "new_std", "=", "torch", ".", "max", "(", "current_std", ",", "min_std", ".", "detach", "(", ")", ")", ".", "detach", "(", ")", "\n", "self", ".", "std", ".", "data", "=", "new_std", "\n", "", "", ""]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.storage.RolloutStorage.__init__": [[6, 30], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().byte().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().byte", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_envs", ",", "num_transitions_per_env", ",", "actor_obs_shape", ",", "critic_obs_shape", ",", "actions_shape", ",", "device", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "\n", "# Core", "\n", "self", ".", "critic_obs", "=", "torch", ".", "zeros", "(", "num_transitions_per_env", ",", "num_envs", ",", "*", "critic_obs_shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "actor_obs", "=", "torch", ".", "zeros", "(", "num_transitions_per_env", ",", "num_envs", ",", "*", "actor_obs_shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "rewards", "=", "torch", ".", "zeros", "(", "num_transitions_per_env", ",", "num_envs", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "actions", "=", "torch", ".", "zeros", "(", "num_transitions_per_env", ",", "num_envs", ",", "*", "actions_shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "dones", "=", "torch", ".", "zeros", "(", "num_transitions_per_env", ",", "num_envs", ",", "1", ")", ".", "byte", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# For PPO", "\n", "self", ".", "actions_log_prob", "=", "torch", ".", "zeros", "(", "num_transitions_per_env", ",", "num_envs", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "values", "=", "torch", ".", "zeros", "(", "num_transitions_per_env", ",", "num_envs", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "returns", "=", "torch", ".", "zeros", "(", "num_transitions_per_env", ",", "num_envs", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "advantages", "=", "torch", ".", "zeros", "(", "num_transitions_per_env", ",", "num_envs", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "num_transitions_per_env", "=", "num_transitions_per_env", "\n", "self", ".", "num_envs", "=", "num_envs", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "step", "=", "0", "\n", "\n", "self", ".", "reward_normalize_type", "=", "1", "\n", "assert", "self", ".", "reward_normalize_type", "in", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "f\"Unavailable reward normalize method {self.reward_normalize_type}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.storage.RolloutStorage.add_transitions": [[31, 58], ["storage.RolloutStorage.critic_obs[].copy_", "storage.RolloutStorage.actor_obs[].copy_", "storage.RolloutStorage.actions[].copy_", "storage.RolloutStorage.rewards[].copy_", "storage.RolloutStorage.dones[].copy_", "storage.RolloutStorage.values[].copy_", "storage.RolloutStorage.actions_log_prob[].copy_", "AssertionError", "torch.from_numpy().to", "torch.from_numpy().to", "actions.to", "torch.from_numpy().view().to", "torch.from_numpy().view().to", "values.to", "actions_log_prob.view().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().view", "torch.from_numpy().view", "actions_log_prob.view", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "add_transitions", "(", "self", ",", "actor_obs", ",", "critic_obs", ",", "actions", ",", "rewards", ",", "dones", ",", "values", ",", "actions_log_prob", ")", ":", "\n", "        ", "\"\"\"\n        Function saving (s, a, r(s, a), v(s)) pairs\n\n        Dimension: \n            - actor_obs : (n_env, 34)\n            - critic_obs : (n_env, 26)\n            - actions : (n_env, 8)\n            - rewards : (n_env, )\n            - dones : (n_env, )\n            - values : (n_env, 1)\n            - actions_log_prob : (n_env)\n        \n        cf) 34 = obs_dim + CPG_signal_dim\n            26 = obs_dim\n            8 = action_dim (= n_joint)\n        \"\"\"", "\n", "if", "self", ".", "step", ">=", "self", ".", "num_transitions_per_env", ":", "\n", "            ", "raise", "AssertionError", "(", "\"Rollout buffer overflow\"", ")", "\n", "", "self", ".", "critic_obs", "[", "self", ".", "step", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "critic_obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "actor_obs", "[", "self", ".", "step", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "actor_obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "actions", "[", "self", ".", "step", "]", ".", "copy_", "(", "actions", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "rewards", "[", "self", ".", "step", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "rewards", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "dones", "[", "self", ".", "step", "]", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "dones", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "values", "[", "self", ".", "step", "]", ".", "copy_", "(", "values", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "actions_log_prob", "[", "self", ".", "step", "]", ".", "copy_", "(", "actions_log_prob", ".", "view", "(", "-", "1", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.storage.RolloutStorage.clear": [[59, 61], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.storage.RolloutStorage.add_auxiliary_reward": [[62, 68], ["torch.maximum", "storage.RolloutStorage.dones.float", "torch.sum", "torch.tensor().to", "torch.from_numpy().to", "each_step_auxiliary_loss.unsqueeze", "torch.tensor", "torch.from_numpy"], "methods", ["None"], ["", "def", "add_auxiliary_reward", "(", "self", ",", "auxiliary_reward", ")", ":", "\n", "# self.dones = torch.zeros(num_transitions_per_env, num_envs, 1).byte().to(self.device)", "\n", "        ", "not_dones", "=", "1.0", "-", "self", ".", "dones", ".", "float", "(", ")", "\n", "n_states_before_done", "=", "torch", ".", "maximum", "(", "torch", ".", "sum", "(", "not_dones", ",", "axis", "=", "0", ")", ",", "torch", ".", "tensor", "(", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "each_step_auxiliary_loss", "=", "torch", ".", "from_numpy", "(", "auxiliary_reward", ")", ".", "to", "(", "self", ".", "device", ")", "/", "n_states_before_done", "# (n_envs, 1)", "\n", "self", ".", "rewards", "+=", "not_dones", "*", "each_step_auxiliary_loss", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.storage.RolloutStorage.reward_normalize": [[69, 84], ["torch.mean", "torch.std", "torch.mean().unsqueeze", "torch.std().unsqueeze", "torch.mean().unsqueeze", "torch.std().unsqueeze", "torch.mean", "torch.std", "torch.mean", "torch.std"], "methods", ["None"], ["", "def", "reward_normalize", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "reward_normalize_type", "==", "0", ":", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "reward_normalize_type", "==", "1", ":", "\n", "# normalize 1 (normalize total)", "\n", "            ", "self", ".", "rewards", "-=", "torch", ".", "mean", "(", "self", ".", "rewards", ")", "\n", "self", ".", "rewards", "/=", "torch", ".", "std", "(", "self", ".", "rewards", ")", "\n", "", "elif", "self", ".", "reward_normalize_type", "==", "2", ":", "\n", "# normalize 2 (normalize for each env data) ==> layer normalization", "\n", "            ", "self", ".", "rewards", "-=", "torch", ".", "mean", "(", "self", ".", "rewards", ",", "axis", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "rewards", "/=", "torch", ".", "std", "(", "self", ".", "rewards", ",", "axis", "=", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "self", ".", "reward_normalize_type", "==", "3", ":", "\n", "# normalize 3 (normalize for each step) ==> batch normalization", "\n", "            ", "self", ".", "rewards", "-=", "torch", ".", "mean", "(", "self", ".", "rewards", ",", "axis", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "self", ".", "rewards", "/=", "torch", ".", "std", "(", "self", ".", "rewards", ",", "axis", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.storage.RolloutStorage.compute_returns": [[85, 105], ["storage.RolloutStorage.reward_normalize", "reversed", "range", "storage.RolloutStorage.dones[].float", "storage.RolloutStorage.advantages.mean", "storage.RolloutStorage.advantages.std"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.storage.RolloutStorage.reward_normalize"], ["", "", "def", "compute_returns", "(", "self", ",", "last_values", ",", "gamma", ",", "lam", ")", ":", "\n", "        ", "self", ".", "reward_normalize", "(", ")", "# normalize reward", "\n", "\n", "advantage", "=", "0", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "num_transitions_per_env", ")", ")", ":", "\n", "            ", "if", "step", "==", "self", ".", "num_transitions_per_env", "-", "1", ":", "\n", "                ", "next_values", "=", "last_values", "\n", "# next_is_not_terminal = 1.0 - self.dones[step].float()", "\n", "", "else", ":", "\n", "                ", "next_values", "=", "self", ".", "values", "[", "step", "+", "1", "]", "\n", "# next_is_not_terminal = 1.0 - self.dones[step+1].float()", "\n", "\n", "", "next_is_not_terminal", "=", "1.0", "-", "self", ".", "dones", "[", "step", "]", ".", "float", "(", ")", "\n", "delta", "=", "self", ".", "rewards", "[", "step", "]", "+", "next_is_not_terminal", "*", "gamma", "*", "next_values", "-", "self", ".", "values", "[", "step", "]", "\n", "advantage", "=", "delta", "+", "next_is_not_terminal", "*", "gamma", "*", "lam", "*", "advantage", "\n", "self", ".", "returns", "[", "step", "]", "=", "advantage", "+", "self", ".", "values", "[", "step", "]", "\n", "\n", "# Compute and normalize the advantages", "\n", "", "self", ".", "advantages", "=", "self", ".", "returns", "-", "self", ".", "values", "\n", "self", ".", "advantages", "=", "(", "self", ".", "advantages", "-", "self", ".", "advantages", ".", "mean", "(", ")", ")", "/", "(", "self", ".", "advantages", ".", "std", "(", ")", "+", "1e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.storage.RolloutStorage.mini_batch_generator_shuffle": [[106, 119], ["torch.utils.data.sampler.BatchSampler", "torch.utils.data.sampler.SubsetRandomSampler", "range", "storage.RolloutStorage.actor_obs.view", "storage.RolloutStorage.critic_obs.view", "storage.RolloutStorage.actions.view", "storage.RolloutStorage.values.view", "storage.RolloutStorage.returns.view", "storage.RolloutStorage.actions_log_prob.view", "storage.RolloutStorage.advantages.view", "storage.RolloutStorage.actions.size", "storage.RolloutStorage.actor_obs.size", "storage.RolloutStorage.critic_obs.size"], "methods", ["None"], ["", "def", "mini_batch_generator_shuffle", "(", "self", ",", "num_mini_batches", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "num_envs", "*", "self", ".", "num_transitions_per_env", "\n", "mini_batch_size", "=", "batch_size", "//", "num_mini_batches", "\n", "\n", "for", "indices", "in", "BatchSampler", "(", "SubsetRandomSampler", "(", "range", "(", "batch_size", ")", ")", ",", "mini_batch_size", ",", "drop_last", "=", "True", ")", ":", "\n", "            ", "actor_obs_batch", "=", "self", ".", "actor_obs", ".", "view", "(", "-", "1", ",", "*", "self", ".", "actor_obs", ".", "size", "(", ")", "[", "2", ":", "]", ")", "[", "indices", "]", "\n", "critic_obs_batch", "=", "self", ".", "critic_obs", ".", "view", "(", "-", "1", ",", "*", "self", ".", "critic_obs", ".", "size", "(", ")", "[", "2", ":", "]", ")", "[", "indices", "]", "\n", "actions_batch", "=", "self", ".", "actions", ".", "view", "(", "-", "1", ",", "self", ".", "actions", ".", "size", "(", "-", "1", ")", ")", "[", "indices", "]", "\n", "values_batch", "=", "self", ".", "values", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "returns_batch", "=", "self", ".", "returns", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "old_actions_log_prob_batch", "=", "self", ".", "actions_log_prob", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "advantages_batch", "=", "self", ".", "advantages", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "yield", "actor_obs_batch", ",", "critic_obs_batch", ",", "actions_batch", ",", "values_batch", ",", "advantages_batch", ",", "returns_batch", ",", "old_actions_log_prob_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.storage.RolloutStorage.mini_batch_generator_inorder": [[120, 132], ["range", "storage.RolloutStorage.actor_obs.view", "storage.RolloutStorage.critic_obs.view", "storage.RolloutStorage.actions.view", "storage.RolloutStorage.values.view", "storage.RolloutStorage.advantages.view", "storage.RolloutStorage.returns.view", "storage.RolloutStorage.actions_log_prob.view", "storage.RolloutStorage.actions.size", "storage.RolloutStorage.actor_obs.size", "storage.RolloutStorage.critic_obs.size"], "methods", ["None"], ["", "", "def", "mini_batch_generator_inorder", "(", "self", ",", "num_mini_batches", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "num_envs", "*", "self", ".", "num_transitions_per_env", "\n", "mini_batch_size", "=", "batch_size", "//", "num_mini_batches", "\n", "\n", "for", "batch_id", "in", "range", "(", "num_mini_batches", ")", ":", "\n", "            ", "yield", "self", ".", "actor_obs", ".", "view", "(", "-", "1", ",", "*", "self", ".", "actor_obs", ".", "size", "(", ")", "[", "2", ":", "]", ")", "[", "batch_id", "*", "mini_batch_size", ":", "(", "batch_id", "+", "1", ")", "*", "mini_batch_size", "]", ",", "self", ".", "critic_obs", ".", "view", "(", "-", "1", ",", "*", "self", ".", "critic_obs", ".", "size", "(", ")", "[", "2", ":", "]", ")", "[", "batch_id", "*", "mini_batch_size", ":", "(", "batch_id", "+", "1", ")", "*", "mini_batch_size", "]", ",", "self", ".", "actions", ".", "view", "(", "-", "1", ",", "self", ".", "actions", ".", "size", "(", "-", "1", ")", ")", "[", "batch_id", "*", "mini_batch_size", ":", "(", "batch_id", "+", "1", ")", "*", "mini_batch_size", "]", ",", "self", ".", "values", ".", "view", "(", "-", "1", ",", "1", ")", "[", "batch_id", "*", "mini_batch_size", ":", "(", "batch_id", "+", "1", ")", "*", "mini_batch_size", "]", ",", "self", ".", "advantages", ".", "view", "(", "-", "1", ",", "1", ")", "[", "batch_id", "*", "mini_batch_size", ":", "(", "batch_id", "+", "1", ")", "*", "mini_batch_size", "]", ",", "self", ".", "returns", ".", "view", "(", "-", "1", ",", "1", ")", "[", "batch_id", "*", "mini_batch_size", ":", "(", "batch_id", "+", "1", ")", "*", "mini_batch_size", "]", ",", "self", ".", "actions_log_prob", ".", "view", "(", "-", "1", ",", "1", ")", "[", "batch_id", "*", "mini_batch_size", ":", "(", "batch_id", "+", "1", ")", "*", "mini_batch_size", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.__init__": [[16, 88], ["storage.RolloutStorage", "torch.Adam", "torch.Adam", "torch.Adam", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "ppo.PPO.actor.parameters", "ppo.PPO.critic.parameters", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.parameters", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "actor", ",", "\n", "critic", ",", "\n", "num_envs", ",", "\n", "num_transitions_per_env", ",", "\n", "num_learning_epochs", ",", "\n", "num_mini_batches", ",", "\n", "PPO_type", "=", "None", ",", "\n", "clip_param", "=", "0.2", ",", "\n", "gamma", "=", "0.998", ",", "\n", "lam", "=", "0.95", ",", "\n", "value_loss_coef", "=", "0.5", ",", "\n", "entropy_coef", "=", "0.0", ",", "\n", "learning_rate", "=", "5e-4", ",", "\n", "max_grad_norm", "=", "0.5", ",", "\n", "use_clipped_value_loss", "=", "True", ",", "\n", "log_dir", "=", "'run'", ",", "\n", "device", "=", "'cpu'", ",", "\n", "shuffle_batch", "=", "True", ",", "\n", "logger", "=", "'tb'", ")", ":", "\n", "\n", "        ", "assert", "PPO_type", "in", "[", "'CPG'", ",", "'local'", ",", "None", "]", ",", "'Unavailable PPO type'", "\n", "self", ".", "PPO_type", "=", "PPO_type", "\n", "\n", "# PPO components", "\n", "self", ".", "actor", "=", "actor", "\n", "self", ".", "critic", "=", "critic", "\n", "self", ".", "storage", "=", "RolloutStorage", "(", "num_envs", ",", "num_transitions_per_env", ",", "actor", ".", "obs_shape", ",", "critic", ".", "obs_shape", ",", "actor", ".", "action_shape", ",", "device", ")", "\n", "\n", "if", "shuffle_batch", ":", "\n", "            ", "self", ".", "batch_sampler", "=", "self", ".", "storage", ".", "mini_batch_generator_shuffle", "\n", "", "else", ":", "\n", "            ", "self", ".", "batch_sampler", "=", "self", ".", "storage", ".", "mini_batch_generator_inorder", "\n", "\n", "", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "[", "*", "self", ".", "actor", ".", "parameters", "(", ")", ",", "*", "self", ".", "critic", ".", "parameters", "(", ")", "]", ",", "lr", "=", "learning_rate", ")", "\n", "self", ".", "device", "=", "device", "\n", "\n", "# env parameters", "\n", "self", ".", "num_transitions_per_env", "=", "num_transitions_per_env", "\n", "self", ".", "num_envs", "=", "num_envs", "\n", "\n", "# PPO parameters", "\n", "self", ".", "clip_param", "=", "clip_param", "\n", "self", ".", "num_learning_epochs", "=", "num_learning_epochs", "\n", "self", ".", "num_mini_batches", "=", "num_mini_batches", "\n", "self", ".", "value_loss_coef", "=", "value_loss_coef", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "lam", "=", "lam", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "use_clipped_value_loss", "=", "use_clipped_value_loss", "\n", "\n", "# Log", "\n", "if", "logger", "==", "'tb'", ":", "\n", "            ", "if", "PPO_type", "==", "'CPG'", ":", "\n", "                ", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%b%d_%H-%M-%S'", ")", "+", "'_CPG'", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "log_dir", ",", "flush_secs", "=", "10", ")", "\n", "", "elif", "PPO_type", "==", "'local'", ":", "\n", "                ", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%b%d_%H-%M-%S'", ")", "+", "'_Local'", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "log_dir", ",", "flush_secs", "=", "10", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%b%d_%H-%M-%S'", ")", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "log_dir", ",", "flush_secs", "=", "10", ")", "\n", "\n", "", "self", ".", "tot_timesteps", "=", "0", "\n", "self", ".", "tot_time", "=", "0", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "# temps", "\n", "", "self", ".", "actions", "=", "None", "\n", "self", ".", "actions_log_prob", "=", "None", "\n", "self", ".", "actor_obs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.observe": [[89, 94], ["ppo.PPO.actor.sample", "ppo.PPO.actions.cpu().numpy", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "ppo.PPO.actions.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.sample"], ["", "def", "observe", "(", "self", ",", "actor_obs", ")", ":", "\n", "        ", "self", ".", "actor_obs", "=", "actor_obs", "\n", "self", ".", "actions", ",", "self", ".", "actions_log_prob", "=", "self", ".", "actor", ".", "sample", "(", "torch", ".", "from_numpy", "(", "actor_obs", ")", ".", "to", "(", "self", ".", "device", ")", ",", "self", ".", "PPO_type", ")", "\n", "# self.actions = np.clip(self.actions.numpy(), self.env.action_space.low, self.env.action_space.high)", "\n", "return", "self", ".", "actions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.step": [[95, 103], ["ppo.PPO.storage.add_transitions", "ppo.PPO.critic.predict", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "ppo.PPO.critic.predict", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.storage.RolloutStorage.add_transitions", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.predict", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.predict"], ["", "def", "step", "(", "self", ",", "value_obs", ",", "rews", ",", "dones", ")", ":", "\n", "        ", "if", "self", ".", "PPO_type", "==", "'local'", "or", "self", ".", "PPO_type", "==", "None", ":", "\n", "            ", "values", "=", "self", ".", "critic", ".", "predict", "(", "torch", ".", "from_numpy", "(", "value_obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "elif", "self", ".", "PPO_type", "==", "'CPG'", ":", "\n", "# values = torch.zeros(rews.shape).to(self.device)", "\n", "            ", "values", "=", "self", ".", "critic", ".", "predict", "(", "torch", ".", "from_numpy", "(", "value_obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "self", ".", "storage", ".", "add_transitions", "(", "self", ".", "actor_obs", ",", "value_obs", ",", "self", ".", "actions", ",", "rews", ",", "dones", ",", "values", ",", "\n", "self", ".", "actions_log_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.update": [[104, 121], ["ppo.PPO.storage.compute_returns", "ppo.PPO._train_step", "ppo.PPO.storage.clear", "ppo.PPO.critic.predict", "ppo.PPO.to", "ppo.PPO.log", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "ppo.PPO.critic.predict", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "locals", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.storage.RolloutStorage.compute_returns", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO._train_step", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.storage.RolloutStorage.clear", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.predict", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.log", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.predict"], ["", "def", "update", "(", "self", ",", "actor_obs", ",", "value_obs", ",", "log_this_iteration", ",", "update", ",", "auxilory_value", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "PPO_type", "==", "'local'", "or", "self", ".", "PPO_type", "==", "None", ":", "\n", "            ", "last_values", "=", "self", ".", "critic", ".", "predict", "(", "torch", ".", "from_numpy", "(", "value_obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "elif", "self", ".", "PPO_type", "==", "'CPG'", ":", "\n", "# last_values = torch.zeros((value_obs.shape[0], 1))", "\n", "            ", "last_values", "=", "self", ".", "critic", ".", "predict", "(", "torch", ".", "from_numpy", "(", "value_obs", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "\n", "# Add auxilary reward for each step", "\n", "# self.storage.add_auxiliary_reward(auxilory_value)", "\n", "\n", "# Learning step", "\n", "", "self", ".", "storage", ".", "compute_returns", "(", "last_values", ".", "to", "(", "self", ".", "device", ")", ",", "self", ".", "gamma", ",", "self", ".", "lam", ")", "\n", "mean_value_loss", ",", "mean_surrogate_loss", ",", "infos", "=", "self", ".", "_train_step", "(", ")", "\n", "self", ".", "storage", ".", "clear", "(", ")", "\n", "\n", "if", "log_this_iteration", ":", "\n", "            ", "self", ".", "log", "(", "{", "**", "locals", "(", ")", ",", "**", "infos", ",", "'it'", ":", "update", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.log": [[122, 144], ["ppo.PPO.actor.distribution.std.mean", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "wandb.log", "ppo.PPO.item", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.item", "ppo.PPO.item", "ppo.PPO.item"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.log"], ["", "", "def", "log", "(", "self", ",", "variables", ",", "width", "=", "80", ",", "pad", "=", "28", ")", ":", "\n", "        ", "self", ".", "tot_timesteps", "+=", "self", ".", "num_transitions_per_env", "*", "self", ".", "num_envs", "\n", "mean_std", "=", "self", ".", "actor", ".", "distribution", ".", "std", ".", "mean", "(", ")", "\n", "\n", "if", "self", ".", "logger", "==", "'tb'", ":", "\n", "            ", "if", "self", ".", "PPO_type", "==", "'CPG'", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "'CPG/Loss/value_function'", ",", "variables", "[", "'mean_value_loss'", "]", ",", "variables", "[", "'it'", "]", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'CPG/Loss/surrogate'", ",", "variables", "[", "'mean_surrogate_loss'", "]", ",", "variables", "[", "'it'", "]", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'CPG/Policy/mean_noise_std'", ",", "mean_std", ".", "item", "(", ")", ",", "variables", "[", "'it'", "]", ")", "\n", "", "elif", "self", ".", "PPO_type", "==", "'local'", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Loss/value_function'", ",", "variables", "[", "'mean_value_loss'", "]", ",", "variables", "[", "'it'", "]", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Loss/surrogate'", ",", "variables", "[", "'mean_surrogate_loss'", "]", ",", "variables", "[", "'it'", "]", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Policy/mean_noise_std'", ",", "mean_std", ".", "item", "(", ")", ",", "variables", "[", "'it'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "'Loss/value_function'", ",", "variables", "[", "'mean_value_loss'", "]", ",", "variables", "[", "'it'", "]", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Loss/surrogate'", ",", "variables", "[", "'mean_surrogate_loss'", "]", ",", "variables", "[", "'it'", "]", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Policy/mean_noise_std'", ",", "mean_std", ".", "item", "(", ")", ",", "variables", "[", "'it'", "]", ")", "\n", "\n", "", "", "elif", "self", ".", "logger", "==", "'wandb'", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "'Loss/value_function'", ":", "variables", "[", "'mean_value_loss'", "]", ",", "'Loss/surrogate'", ":", "variables", "[", "'mean_surrogate_loss'", "]", ",", "'Policy/mean_noise_std'", ":", "mean_std", ".", "item", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.extra_log": [[145, 265], ["ppo.PPO.writer.add_scalar", "wandb.log", "numpy.mean", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "wandb.log", "wandb.log", "numpy.mean", "ppo.PPO.writer.add_scalar", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "ppo.PPO.writer.add_scalar", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.log", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.log", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.log"], ["", "", "def", "extra_log", "(", "self", ",", "log_value", ",", "step", ",", "type", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "logger", "==", "'tb'", ":", "\n", "            ", "if", "self", ".", "PPO_type", "==", "'CPG'", ":", "\n", "                ", "if", "type", "==", "'reward'", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'CPG/Reward/mean'", ",", "np", ".", "mean", "(", "log_value", ")", ",", "step", ")", "\n", "", "elif", "type", "==", "'action'", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'CPG/period/mean'", ",", "np", ".", "mean", "(", "log_value", ")", ",", "step", ")", "\n", "# self.writer.add_scalar('CPG/FR_phase/mean', np.mean(log_value[:, 1]), step)", "\n", "# self.writer.add_scalar('CPG/FL_phase/mean', np.mean(log_value[:, 2]), step)", "\n", "# self.writer.add_scalar('CPG/RR_phase/mean', np.mean(log_value[:, 3]), step)", "\n", "# self.writer.add_scalar('CPG/RL_phase/mean', np.mean(log_value[:, 4]), step)", "\n", "", "elif", "type", "==", "'target_veloicty'", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'CPG/target_velocity/mean'", ",", "np", ".", "mean", "(", "log_value", ")", ",", "step", ")", "\n", "", "", "elif", "self", ".", "PPO_type", "==", "'local'", ":", "\n", "                ", "if", "type", "==", "'reward'", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Reward/joint_torque/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "0", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Reward/linear_vel_error/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "1", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Reward/angular_vel_error/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "2", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Reward/foot_clearance/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "3", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Reward/foot_slip/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "4", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Reward/foot_z_vel/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "5", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Reward/joint_vel/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "6", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Reward/previous_action_smooth/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "7", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Reward/orientation/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "8", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/Reward/height/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "9", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/cost_scale/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "10", "]", ")", ",", "step", ")", "\n", "\n", "# self.writer.add_scalar('Local/Reward/torque/mean', np.mean(log_value[:, 0]), step)", "\n", "# self.writer.add_scalar('Reward/torque/std', np.std(log_value[:, 0]), step)", "\n", "# self.writer.add_scalar('Local/Reward/velocity/mean', np.mean(log_value[:, 1]), step)", "\n", "# self.writer.add_scalar('Reward/velocity/std', np.std(log_value[:, 1]), step)", "\n", "# self.writer.add_scalar('Local/Reward/height/mean', np.mean(log_value[:, 2]), step)", "\n", "# self.writer.add_scalar('Local/Reward/orientation/mean', np.mean(log_value[:, 3]), step)", "\n", "# self.writer.add_scalar('CPG/Reward/GRF_entropy/mean', np.mean(log_value[:, 4]), step)", "\n", "# self.writer.add_scalar('Reward/LegWorkEntropy/mean', np.mean(log_value[:, 4]), step)", "\n", "# self.writer.add_scalar('Reward/uncontactPenalty/mean', np.mean(log_value[:, 5]), step)", "\n", "# self.writer.add_scalar('Reward/GRF_entropy/mean', np.mean(log_value[:, 4]), step)", "\n", "# self.writer.add_scalar('Reward/GRF_entropy/std', np.std(log_value[:, 2]), step)", "\n", "# self.writer.add_scalar('Reward/impulse/mean', np.mean(log_value[:, 5]), step)", "\n", "", "elif", "type", "==", "'action'", ":", "\n", "# Architecture 5", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'Local/CPG_tranform/Thigh_amplitude/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "0", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/CPG_tranform/Thigh_shaft/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "1", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/CPG_tranform/FR_calf/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "2", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/CPG_tranform/FL_calf/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "3", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Local/CPG_tranform/RR_calf/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "4", "]", ")", ",", "step", ")", "\n", "# self.writer.add_scalar('Local/CPG_tranform/RL_calf/mean', np.mean(log_value[:, 5]), step)", "\n", "", "", "else", ":", "\n", "                ", "if", "type", "==", "'reward'", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'Reward/torque/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "0", "]", ")", ",", "step", ")", "\n", "# self.writer.add_scalar('Reward/torque/std', np.std(log_value[:, 0]), step)", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Reward/velocity/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "1", "]", ")", ",", "step", ")", "\n", "# self.writer.add_scalar('Reward/velocity/std', np.std(log_value[:, 1]), step)", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Reward/height/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "2", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Reward/orientation/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "3", "]", ")", ",", "step", ")", "\n", "# self.writer.add_scalar('Reward/LegWorkEntropy/mean', np.mean(log_value[:, 4]), step)", "\n", "# self.writer.add_scalar('Reward/uncontactPenalty/mean', np.mean(log_value[:, 5]), step)", "\n", "# self.writer.add_scalar('Reward/GRF_entropy/mean', np.mean(log_value[:, 4]), step)", "\n", "# self.writer.add_scalar('Reward/GRF_entropy/std', np.std(log_value[:, 2]), step)", "\n", "# self.writer.add_scalar('Reward/impulse/mean', np.mean(log_value[:, 5]), step)", "\n", "", "elif", "type", "==", "'action'", ":", "\n", "# Architecture 5", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'CPG_tranform/Thigh_amplitude/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "0", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'CPG_tranform/Thigh_shaft/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "1", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'CPG_tranform/FR_calf/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "2", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'CPG_tranform/FL_calf/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "3", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'CPG_tranform/RR_calf/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "4", "]", ")", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'CPG_tranform/RL_calf/mean'", ",", "np", ".", "mean", "(", "log_value", "[", ":", ",", "5", "]", ")", ",", "step", ")", "\n", "\n", "\n", "", "\"\"\"\n                # Architecture 4\n                # amplitude\n                self.writer.add_scalar('CPG_tranform/FR_amplitude/mean', np.mean(log_value[:, 0]), step)\n                # self.writer.add_scalar('CPG_tranform/FR_amplitude/std', np.std(log_value[:, 0]), step)\n                self.writer.add_scalar('CPG_tranform/FL_amplitude/mean', np.mean(log_value[:, 1]), step)\n                # self.writer.add_scalar('CPG_tranform/FL_amplitude/std', np.std(log_value[:, 1]), step)\n                self.writer.add_scalar('CPG_tranform/RR_amplitude/mean', np.mean(log_value[:, 2]), step)\n                # self.writer.add_scalar('CPG_tranform/RR_amplitude/std', np.std(log_value[:, 2]), step)\n                self.writer.add_scalar('CPG_tranform/RL_amplitude/mean', np.mean(log_value[:, 3]), step)\n                # self.writer.add_scalar('CPG_tranform/RL_amplitude/std', np.std(log_value[:, 3]), step)\n\n                # shaft position\n                self.writer.add_scalar('CPG_tranform/FR_shaft/mean', np.mean(log_value[:, 4]), step)\n                # self.writer.add_scalar('CPG_tranform/FR_shaft/std', np.std(log_value[:, 4]), step)\n                self.writer.add_scalar('CPG_tranform/FL_shaft/mean', np.mean(log_value[:, 5]), step)\n                # self.writer.add_scalar('CPG_tranform/FL_shaft/std', np.std(log_value[:, 5]), step)\n                self.writer.add_scalar('CPG_tranform/RR_shaft/mean', np.mean(log_value[:, 6]), step)\n                # self.writer.add_scalar('CPG_tranform/RR_shaft/std', np.std(log_value[:, 6]), step)\n                self.writer.add_scalar('CPG_tranform/RL_shaft/mean', np.mean(log_value[:, 7]), step)\n                # self.writer.add_scalar('CPG_tranform/RL_shaft/std', np.std(log_value[:, 7]), step)\n                \"\"\"", "\n", "\n", "\n", "", "", "elif", "self", ".", "logger", "==", "'wandb'", ":", "\n", "            ", "if", "type", "==", "'reward'", ":", "\n", "                ", "wandb", ".", "log", "(", "{", "'Reward/torque/mean'", ":", "np", ".", "mean", "(", "log_value", "[", ":", ",", "0", "]", ")", ",", "'Reward/torque/std'", ":", "np", ".", "std", "(", "log_value", "[", ":", ",", "0", "]", ")", ",", "'Reward/velocity/mean'", ":", "np", ".", "mean", "(", "log_value", "[", ":", ",", "1", "]", ")", ",", "'Reward/velocity/std'", ":", "np", ".", "std", "(", "log_value", "[", ":", ",", "1", "]", ")", ",", "'Reward/GRF_entropy/mean'", ":", "np", ".", "mean", "(", "log_value", "[", ":", ",", "2", "]", ")", ",", "'Reward/GRF_entropy/std'", ":", "np", ".", "std", "(", "log_value", "[", ":", ",", "2", "]", ")", "}", ",", "step", "=", "step", ")", "\n", "", "elif", "type", "==", "'action'", ":", "\n", "# amplitude", "\n", "                ", "wandb", ".", "log", "(", "{", "'CPG_tranform/FR_amplitude/mean'", ":", "np", ".", "mean", "(", "log_value", "[", ":", ",", "0", "]", ")", ",", "'CPG_tranform/FR_amplitude/std'", ":", "np", ".", "std", "(", "log_value", "[", ":", ",", "0", "]", ")", ",", "'CPG_tranform/FL_amplitude/mean'", ":", "np", ".", "mean", "(", "log_value", "[", ":", ",", "1", "]", ")", ",", "'CPG_tranform/FL_amplitude/std'", ":", "np", ".", "std", "(", "log_value", "[", ":", ",", "1", "]", ")", ",", "\n", "'CPG_tranform/RR_amplitude/mean'", ":", "np", ".", "mean", "(", "log_value", "[", ":", ",", "2", "]", ")", ",", "'CPG_tranform/RR_amplitude/std'", ":", "np", ".", "std", "(", "log_value", "[", ":", ",", "2", "]", ")", ",", "'CPG_tranform/RL_amplitude/mean'", ":", "np", ".", "mean", "(", "log_value", "[", ":", ",", "3", "]", ")", ",", "'CPG_tranform/RL_amplitude/std'", ":", "np", ".", "std", "(", "log_value", "[", ":", ",", "3", "]", ")", "}", ",", "step", "=", "step", ")", "\n", "\n", "# shaft position", "\n", "wandb", ".", "log", "(", "{", "'CPG_tranform/FR_shaft/mean'", ":", "np", ".", "mean", "(", "log_value", "[", ":", ",", "4", "]", ")", ",", "'CPG_tranform/FR_shaft/std'", ":", "np", ".", "std", "(", "log_value", "[", ":", ",", "4", "]", ")", ",", "'CPG_tranform/FL_shaft/mean'", ":", "np", ".", "mean", "(", "log_value", "[", ":", ",", "5", "]", ")", ",", "'CPG_tranform/FL_shaft/std'", ":", "np", ".", "std", "(", "log_value", "[", ":", ",", "5", "]", ")", ",", "\n", "'CPG_tranform/RR_shaft/mean'", ":", "np", ".", "mean", "(", "log_value", "[", ":", ",", "6", "]", ")", ",", "'CPG_tranform/RR_shaft/std'", ":", "np", ".", "std", "(", "log_value", "[", ":", ",", "6", "]", ")", ",", "'CPG_tranform/RL_shaft/mean'", ":", "np", ".", "mean", "(", "log_value", "[", ":", ",", "7", "]", ")", ",", "'CPG_tranform/RL_shaft/std'", ":", "np", ".", "std", "(", "log_value", "[", ":", ",", "7", "]", ")", "}", ",", "step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO._train_step": [[266, 309], ["range", "ppo.PPO.batch_sampler", "locals", "ppo.PPO.actor.evaluate", "ppo.PPO.critic.evaluate", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "ppo.PPO.optimizer.zero_grad", "loss.backward", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "ppo.PPO.optimizer.step", "torch.max().mean.item", "torch.max().mean.item", "torch.max().mean.item", "torch.max().mean.item", "torch.max().mean.item", "torch.max().mean.item", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "entropy_batch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "ppo.PPO.actor.parameters", "ppo.PPO.critic.parameters"], "methods", ["home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.evaluate", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.MultivariateGaussianDiagonalCovariance.evaluate", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.ppo.PPO.step", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.parameters", "home.repos.pwc.inspect_result.awesomericky_multiple-gait-controller-for-quadruped-robot.ppo.module.Critic.parameters"], ["", "", "", "def", "_train_step", "(", "self", ")", ":", "\n", "        ", "mean_value_loss", "=", "0", "\n", "mean_surrogate_loss", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "num_learning_epochs", ")", ":", "\n", "            ", "for", "actor_obs_batch", ",", "critic_obs_batch", ",", "actions_batch", ",", "target_values_batch", ",", "advantages_batch", ",", "returns_batch", ",", "old_actions_log_prob_batch", "in", "self", ".", "batch_sampler", "(", "self", ".", "num_mini_batches", ")", ":", "\n", "\n", "                ", "actions_log_prob_batch", ",", "entropy_batch", "=", "self", ".", "actor", ".", "evaluate", "(", "actor_obs_batch", ",", "actions_batch", ",", "self", ".", "PPO_type", ")", "\n", "value_batch", "=", "self", ".", "critic", ".", "evaluate", "(", "critic_obs_batch", ")", "\n", "\n", "# Surrogate loss", "\n", "ratio", "=", "torch", ".", "exp", "(", "actions_log_prob_batch", "-", "torch", ".", "squeeze", "(", "old_actions_log_prob_batch", ")", ")", "\n", "surrogate", "=", "-", "torch", ".", "squeeze", "(", "advantages_batch", ")", "*", "ratio", "\n", "surrogate_clipped", "=", "-", "torch", ".", "squeeze", "(", "advantages_batch", ")", "*", "torch", ".", "clamp", "(", "ratio", ",", "1.0", "-", "self", ".", "clip_param", ",", "\n", "1.0", "+", "self", ".", "clip_param", ")", "\n", "surrogate_loss", "=", "torch", ".", "max", "(", "surrogate", ",", "surrogate_clipped", ")", ".", "mean", "(", ")", "\n", "\n", "# Value function loss", "\n", "if", "self", ".", "use_clipped_value_loss", ":", "\n", "                    ", "value_clipped", "=", "target_values_batch", "+", "(", "value_batch", "-", "target_values_batch", ")", ".", "clamp", "(", "-", "self", ".", "clip_param", ",", "\n", "self", ".", "clip_param", ")", "\n", "value_losses", "=", "(", "value_batch", "-", "returns_batch", ")", ".", "pow", "(", "2", ")", "\n", "value_losses_clipped", "=", "(", "value_clipped", "-", "returns_batch", ")", ".", "pow", "(", "2", ")", "\n", "value_loss", "=", "torch", ".", "max", "(", "value_losses", ",", "value_losses_clipped", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "value_loss", "=", "(", "returns_batch", "-", "value_batch", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "", "loss", "=", "surrogate_loss", "+", "self", ".", "value_loss_coef", "*", "value_loss", "-", "self", ".", "entropy_coef", "*", "entropy_batch", ".", "mean", "(", ")", "\n", "\n", "# Gradient step", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "[", "*", "self", ".", "actor", ".", "parameters", "(", ")", ",", "*", "self", ".", "critic", ".", "parameters", "(", ")", "]", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "mean_value_loss", "+=", "value_loss", ".", "item", "(", ")", "\n", "mean_surrogate_loss", "+=", "surrogate_loss", ".", "item", "(", ")", "\n", "\n", "", "", "num_updates", "=", "self", ".", "num_learning_epochs", "*", "self", ".", "num_mini_batches", "\n", "mean_value_loss", "/=", "num_updates", "\n", "mean_surrogate_loss", "/=", "num_updates", "\n", "\n", "return", "mean_value_loss", ",", "mean_surrogate_loss", ",", "locals", "(", ")", "\n", "", "", ""]]}