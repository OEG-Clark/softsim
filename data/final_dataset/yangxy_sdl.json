{"home.repos.pwc.inspect_result.yangxy_sdl.None.sdl_test.SDLWrap.__init__": [[29, 35], ["basicsr.utils.FileClient", "sdl_test.SDLWrap.load_model"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.None.sdl_test.SDLWrap.load_model"], ["    ", "def", "__init__", "(", "self", ",", "model_path", ",", "split", "=", "0.5", ",", "in_ch", "=", "6", ",", "key", "=", "None", ")", ":", "\n", "        ", "self", ".", "split", "=", "split", "\n", "self", ".", "model_path", "=", "model_path", "\n", "self", ".", "file_client", "=", "FileClient", "(", "backend", "=", "'disk'", ")", "\n", "\n", "self", ".", "load_model", "(", "in_ch", ",", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.None.sdl_test.SDLWrap.load_model": [[36, 48], ["archs.sdl_arch.SDLNet", "torch.load", "copy.deepcopy().items", "sdl_test.SDLWrap.net.load_state_dict", "sdl_test.SDLWrap.net.cuda", "sdl_test.SDLWrap.net.eval", "k.startswith", "copy.deepcopy", "torch.load.pop"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "in_ch", ",", "key", "=", "None", ")", ":", "\n", "        ", "self", ".", "net", "=", "SDLNet", "(", "in_ch", ",", "3", ",", "self", ".", "split", ")", "\n", "load_net", "=", "torch", ".", "load", "(", "self", ".", "model_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "if", "key", "is", "not", "None", ":", "load_net", "=", "load_net", "[", "key", "]", "\n", "# remove unnecessary 'module.'", "\n", "for", "k", ",", "v", "in", "deepcopy", "(", "load_net", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "                ", "load_net", "[", "k", "[", "7", ":", "]", "]", "=", "v", "\n", "load_net", ".", "pop", "(", "k", ")", "\n", "", "", "self", ".", "net", ".", "load_state_dict", "(", "load_net", ",", "strict", "=", "True", ")", "\n", "self", ".", "net", ".", "cuda", "(", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.None.sdl_test.SDLWrap.validate_vfi": [[49, 92], ["sdl_test.make_cit_dataset", "enumerate", "print", "len", "sdl_test.SDLWrap.file_client.get", "basicsr.utils.imfrombytes", "sdl_test.SDLWrap.file_client.get", "basicsr.utils.imfrombytes", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "basicsr.utils.img2tensor", "torch.cat().unsqueeze().cuda", "range", "print", "sdl_test.SDLWrap.file_client.get", "basicsr.utils.imfrombytes", "basicsr.utils.img2tensor().unsqueeze().cuda", "basicsr.utils.tensor2img", "basicsr.utils.tensor2img", "basicsr.metrics.psnr_ssim.calculate_psnr", "basicsr.metrics.psnr_ssim.calculate_ssim", "math.ceil", "math.ceil", "torch.cat().unsqueeze", "torch.no_grad", "torch.FloatTensor().unsqueeze().cuda", "sdl_test.SDLWrap.net", "os.path.dirname", "basicsr.utils.imwrite", "basicsr.utils.img2tensor().unsqueeze", "os.path.join", "len", "torch.cat", "torch.FloatTensor().unsqueeze", "basicsr.utils.img2tensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.data.cit_dataset.make_cit_dataset"], ["", "def", "validate_vfi", "(", "self", ",", "val_path", ",", "save_img", "=", "False", ")", ":", "\n", "        ", "scenes", "=", "make_cit_dataset", "(", "val_path", ")", "\n", "psnr_sum", "=", "0", "\n", "ssim_sum", "=", "0", "\n", "num", "=", "0", "\n", "for", "n", ",", "scene", "in", "enumerate", "(", "scenes", "[", ":", "]", ")", ":", "\n", "            ", "if", "n", "%", "100", "==", "0", ":", "print", "(", "f'{n}/{len(scenes)}'", ")", "\n", "l", "=", "len", "(", "scene", ")", "\n", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "scene", "[", "0", "]", ",", "'frame0'", ")", "\n", "img_0", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "scene", "[", "-", "1", "]", ",", "'frame0'", ")", "\n", "img_1", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "\n", "h", ",", "w", "=", "img_0", ".", "shape", "[", ":", "2", "]", "\n", "hh", ",", "ww", "=", "math", ".", "ceil", "(", "h", "/", "32", ")", "*", "32", ",", "math", ".", "ceil", "(", "w", "/", "32", ")", "*", "32", "\n", "img_0", "=", "cv2", ".", "copyMakeBorder", "(", "img_0", ",", "0", ",", "hh", "-", "h", ",", "0", ",", "ww", "-", "w", ",", "cv2", ".", "BORDER_REFLECT", ")", "\n", "img_1", "=", "cv2", ".", "copyMakeBorder", "(", "img_1", ",", "0", ",", "hh", "-", "h", ",", "0", ",", "ww", "-", "w", ",", "cv2", ".", "BORDER_REFLECT", ")", "\n", "\n", "img_0", ",", "img_1", "=", "img2tensor", "(", "[", "img_0", ",", "img_1", "]", ",", "bgr2rgb", "=", "True", ",", "float32", "=", "True", ")", "\n", "img_01", "=", "torch", ".", "cat", "(", "(", "img_0", ",", "img_1", ")", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "#for idx in range(0, l):", "\n", "for", "idx", "in", "range", "(", "1", ",", "l", "-", "1", ")", ":", "\n", "                ", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "scene", "[", "idx", "]", ",", "'framet'", ")", "\n", "img_gt", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "img_gt", "=", "img2tensor", "(", "img_gt", ",", "bgr2rgb", "=", "True", ",", "float32", "=", "True", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "img_gt", "=", "tensor2img", "(", "img_gt", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "t", "=", "torch", ".", "FloatTensor", "(", "[", "idx", "/", "(", "l", "-", "1", ")", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "img_t", "=", "self", ".", "net", "(", "img_01", ",", "t", ")", "\n", "", "img_t", "=", "tensor2img", "(", "img_t", ")", "\n", "img_t", "=", "img_t", "[", ":", "h", ",", ":", "w", "]", "\n", "if", "save_img", ":", "\n", "                    ", "save_path", "=", "os", ".", "path", ".", "dirname", "(", "scene", "[", "0", "]", ")", "\n", "imwrite", "(", "img_t", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'{idx:02d}_sdl.png'", ")", ")", "\n", "", "psnr", "=", "calculate_psnr", "(", "img_t", ",", "img_gt", ",", "0", ")", "\n", "ssim", "=", "calculate_ssim", "(", "img_t", ",", "img_gt", ",", "0", ")", "\n", "psnr_sum", "+=", "psnr", "\n", "ssim_sum", "+=", "ssim", "\n", "num", "+=", "1", "\n", "#print(psnr)", "\n", "", "", "print", "(", "'total:'", ",", "psnr_sum", "/", "num", ",", "ssim_sum", "/", "num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.None.sdl_test.SDLWrap.test_vfi": [[93, 113], ["sdl_test.SDLWrap.file_client.get", "basicsr.utils.imfrombytes", "sdl_test.SDLWrap.file_client.get", "basicsr.utils.imfrombytes", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "basicsr.utils.img2tensor", "torch.cat().unsqueeze().cuda", "range", "basicsr.utils.tensor2img", "basicsr.utils.imwrite", "math.ceil", "math.ceil", "torch.cat().unsqueeze", "torch.no_grad", "torch.FloatTensor().unsqueeze().cuda", "sdl_test.SDLWrap.net", "os.path.join", "torch.cat", "torch.FloatTensor().unsqueeze", "torch.FloatTensor"], "methods", ["None"], ["", "def", "test_vfi", "(", "self", ",", "source", ",", "target", ",", "save_path", ",", "num", "=", "1", ")", ":", "\n", "        ", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "source", ",", "'frame0'", ")", "\n", "img_0", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "target", ",", "'frame1'", ")", "\n", "img_1", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "\n", "h", ",", "w", "=", "img_0", ".", "shape", "[", ":", "2", "]", "\n", "hh", ",", "ww", "=", "math", ".", "ceil", "(", "h", "/", "32", ")", "*", "32", ",", "math", ".", "ceil", "(", "w", "/", "32", ")", "*", "32", "\n", "img_0", "=", "cv2", ".", "copyMakeBorder", "(", "img_0", ",", "0", ",", "hh", "-", "h", ",", "0", ",", "ww", "-", "w", ",", "cv2", ".", "BORDER_REFLECT", ")", "\n", "img_1", "=", "cv2", ".", "copyMakeBorder", "(", "img_1", ",", "0", ",", "hh", "-", "h", ",", "0", ",", "ww", "-", "w", ",", "cv2", ".", "BORDER_REFLECT", ")", "\n", "\n", "img_0", ",", "img_1", "=", "img2tensor", "(", "[", "img_0", ",", "img_1", "]", ",", "bgr2rgb", "=", "True", ",", "float32", "=", "True", ")", "\n", "img_01", "=", "torch", ".", "cat", "(", "(", "img_0", ",", "img_1", ")", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "num", "+", "1", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "t", "=", "torch", ".", "FloatTensor", "(", "[", "j", "/", "(", "num", "+", "1", ")", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "img_t", "=", "self", ".", "net", "(", "img_01", ",", "t", ")", "\n", "", "img_t", "=", "tensor2img", "(", "img_t", ")", "\n", "imwrite", "(", "img_t", "[", ":", "h", ",", ":", "w", "]", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'{j:02d}_sdl.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.None.sdl_test.SDLWrap.test_vfi_dir": [[114, 151], ["os.makedirs", "sorted", "len", "range", "glob.glob", "sdl_test.SDLWrap.file_client.get", "basicsr.utils.imfrombytes", "sdl_test.SDLWrap.file_client.get", "basicsr.utils.imfrombytes", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "basicsr.utils.img2tensor", "torch.cat().unsqueeze().cuda", "range", "shutil.copyfile", "os.path.join", "print", "shutil.copyfile", "basicsr.utils.tensor2img", "basicsr.utils.imwrite", "math.ceil", "math.ceil", "torch.cat().unsqueeze", "torch.no_grad", "torch.FloatTensor().unsqueeze().cuda", "sdl_test.SDLWrap.net", "torch.cat", "torch.FloatTensor().unsqueeze", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "test_vfi_dir", "(", "self", ",", "in_path", ",", "save_path", ",", "num", "=", "1", ",", "copy_flag", "=", "True", ",", "ext", "=", "'.png'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "in_path", ",", "'*'", "+", "ext", ")", ")", ")", "\n", "num_frame", "=", "len", "(", "files", ")", "\n", "\n", "cur", "=", "0", "\n", "for", "idx", "in", "range", "(", "num_frame", "-", "1", ")", ":", "\n", "            ", "if", "idx", "%", "10", "==", "0", ":", "print", "(", "files", "[", "idx", "]", ")", "\n", "if", "copy_flag", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "files", "[", "idx", "]", ",", "f'{save_path}/{cur:03d}{ext}'", ")", "\n", "cur", "+=", "1", "\n", "\n", "", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "files", "[", "idx", "]", ",", "'frame0'", ")", "\n", "img_0", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "files", "[", "idx", "+", "1", "]", ",", "'frame1'", ")", "\n", "img_1", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "\n", "h", ",", "w", "=", "img_0", ".", "shape", "[", ":", "2", "]", "\n", "hh", ",", "ww", "=", "math", ".", "ceil", "(", "h", "/", "32", ")", "*", "32", ",", "math", ".", "ceil", "(", "w", "/", "32", ")", "*", "32", "\n", "img_0", "=", "cv2", ".", "copyMakeBorder", "(", "img_0", ",", "0", ",", "hh", "-", "h", ",", "0", ",", "ww", "-", "w", ",", "cv2", ".", "BORDER_REFLECT", ")", "\n", "img_1", "=", "cv2", ".", "copyMakeBorder", "(", "img_1", ",", "0", ",", "hh", "-", "h", ",", "0", ",", "ww", "-", "w", ",", "cv2", ".", "BORDER_REFLECT", ")", "\n", "\n", "img_0", ",", "img_1", "=", "img2tensor", "(", "[", "img_0", ",", "img_1", "]", ",", "bgr2rgb", "=", "True", ",", "float32", "=", "True", ")", "\n", "img_01", "=", "torch", ".", "cat", "(", "(", "img_0", ",", "img_1", ")", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "start", "=", "1", "if", "copy_flag", "else", "0", "\n", "end", "=", "num", "if", "(", "idx", "!=", "num_frame", "-", "2", "or", "copy_flag", ")", "else", "num", "+", "1", "\n", "for", "i", "in", "range", "(", "start", ",", "end", "+", "1", ")", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "t", "=", "torch", ".", "FloatTensor", "(", "[", "i", "/", "(", "num", "+", "1", ")", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "img_t", "=", "self", ".", "net", "(", "img_01", ",", "t", ")", "\n", "", "img_t", "=", "tensor2img", "(", "img_t", ")", "\n", "imwrite", "(", "img_t", "[", ":", "h", ",", ":", "w", "]", ",", "f'{save_path}/{cur:03d}{ext}'", ")", "\n", "cur", "+=", "1", "\n", "\n", "", "", "if", "copy_flag", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "files", "[", "-", "1", "]", ",", "f'{save_path}/{cur:03d}{ext}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.None.sdl_test.SDLWrap.test_morphing": [[152, 173], ["sdl_test.SDLWrap.file_client.get", "basicsr.utils.imfrombytes", "sdl_test.SDLWrap.file_client.get", "basicsr.utils.imfrombytes", "max", "cv2.resize", "cv2.resize", "basicsr.utils.img2tensor", "torch.cat().unsqueeze().cuda", "range", "min", "basicsr.utils.tensor2img", "basicsr.utils.imwrite", "torch.cat().unsqueeze", "torch.no_grad", "torch.FloatTensor().unsqueeze().cuda", "sdl_test.SDLWrap.net", "os.path.join", "torch.cat", "torch.FloatTensor().unsqueeze", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "test_morphing", "(", "self", ",", "source", ",", "target", ",", "save_path", ",", "size", "=", "512", ",", "num", "=", "7", ")", ":", "\n", "        ", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "source", ",", "'frame0'", ")", "\n", "img_0", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "target", ",", "'frame1'", ")", "\n", "img_1", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "\n", "size", "=", "max", "(", "32", ",", "min", "(", "512", ",", "size", ")", ")", "# size: {32, 64, ..., 512}", "\n", "size", "=", "size", "//", "32", "*", "32", "\n", "\n", "img_0", "=", "cv2", ".", "resize", "(", "img_0", ",", "(", "size", ",", "size", ")", ")", "\n", "img_1", "=", "cv2", ".", "resize", "(", "img_1", ",", "(", "size", ",", "size", ")", ")", "\n", "\n", "img_0", ",", "img_1", "=", "img2tensor", "(", "[", "img_0", ",", "img_1", "]", ",", "bgr2rgb", "=", "True", ",", "float32", "=", "True", ")", "\n", "img_01", "=", "torch", ".", "cat", "(", "(", "img_0", ",", "img_1", ")", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "num", "+", "1", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "t", "=", "torch", ".", "FloatTensor", "(", "[", "j", "/", "(", "num", "+", "1", ")", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "img_t", "=", "self", ".", "net", "(", "img_01", ",", "t", ")", "\n", "", "img_t", "=", "tensor2img", "(", "img_t", ")", "\n", "imwrite", "(", "img_t", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'{j:02d}_sdl.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.None.sdl_test.SDLWrap.test_i2i": [[174, 193], ["sdl_test.SDLWrap.file_client.get", "basicsr.utils.imfrombytes", "max", "cv2.resize", "basicsr.utils.img2tensor", "img_0.unsqueeze().cuda.unsqueeze().cuda.unsqueeze().cuda", "range", "min", "basicsr.utils.tensor2img", "basicsr.utils.imwrite", "img_0.unsqueeze().cuda.unsqueeze().cuda.unsqueeze", "torch.no_grad", "torch.FloatTensor().unsqueeze().cuda", "sdl_test.SDLWrap.net", "os.path.join", "torch.FloatTensor().unsqueeze", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "test_i2i", "(", "self", ",", "source", ",", "save_path", ",", "size", "=", "512", ",", "num", "=", "7", ",", "extend_t", "=", "False", ")", ":", "\n", "        ", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "files", "[", "i", "]", ",", "'frame0'", ")", "\n", "img_0", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "\n", "size", "=", "max", "(", "32", ",", "min", "(", "512", ",", "size", ")", ")", "# size: {32, 64, ..., 512}", "\n", "size", "=", "size", "//", "32", "*", "32", "\n", "\n", "img_0", "=", "cv2", ".", "resize", "(", "img_0", ",", "(", "size", ",", "size", ")", ")", "\n", "\n", "img_0", "=", "img2tensor", "(", "img_0", ",", "bgr2rgb", "=", "True", ",", "float32", "=", "True", ")", "\n", "img_0", "=", "img_0", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "start", "=", "-", "num", "if", "extend_t", "else", "0", "\n", "for", "j", "in", "range", "(", "start", ",", "num", "+", "1", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "t", "=", "torch", ".", "FloatTensor", "(", "[", "j", "/", "(", "num", "+", "1", ")", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "img_t", "=", "self", ".", "net", "(", "img_0", ",", "t", ")", "\n", "", "img_t", "=", "tensor2img", "(", "img_t", ")", "\n", "imwrite", "(", "img_t", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'{j-start:02d}_sdl.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.None.sdl_test.SDLWrap.test_style_transfer": [[194, 215], ["sdl_test.SDLWrap.file_client.get", "basicsr.utils.imfrombytes", "sdl_test.SDLWrap.file_client.get", "basicsr.utils.imfrombytes", "cv2.resize", "basicsr.utils.img2tensor", "torch.cat().unsqueeze().cuda", "range", "basicsr.utils.tensor2img", "basicsr.utils.imwrite", "torch.cat().unsqueeze", "torch.no_grad", "torch.FloatTensor().unsqueeze().cuda", "sdl_test.SDLWrap.net", "os.path.join", "torch.cat", "torch.FloatTensor().unsqueeze", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "test_style_transfer", "(", "self", ",", "content", ",", "style", ",", "save_path", ",", "num", "=", "7", ")", ":", "\n", "        ", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "content", ",", "'frame0'", ")", "\n", "img_0", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "style", ",", "'frame1'", ")", "\n", "img_1", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "\n", "img_1", "=", "cv2", ".", "resize", "(", "img_1", ",", "img_0", ".", "shape", "[", ":", "2", "]", "[", ":", ":", "-", "1", "]", ")", "\n", "\n", "h", ",", "w", "=", "img_0", ".", "shape", "[", ":", "2", "]", "\n", "hh", ",", "ww", "=", "h", "//", "32", "*", "32", ",", "w", "//", "32", "*", "32", "\n", "img_0", ",", "img_1", "=", "img_0", "[", ":", "hh", ",", ":", "ww", "]", ",", "img_1", "[", ":", "hh", ",", ":", "ww", "]", "\n", "\n", "img_0", ",", "img_1", "=", "img2tensor", "(", "[", "img_0", ",", "img_1", "]", ",", "bgr2rgb", "=", "True", ",", "float32", "=", "True", ")", "\n", "img_01", "=", "torch", ".", "cat", "(", "(", "img_0", ",", "img_1", ")", ",", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "num", "+", "1", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "t", "=", "torch", ".", "FloatTensor", "(", "[", "j", "/", "(", "num", "+", "1", ")", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "img_t", "=", "self", ".", "net", "(", "img_01", ",", "t", ")", "\n", "", "img_t", "=", "tensor2img", "(", "img_t", ")", "\n", "imwrite", "(", "img_t", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "f'{j:02d}_sdl.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.None.sdl_test.make_cit_dataset": [[15, 27], ["enumerate", "os.listdir", "os.path.join", "clips_path.append", "sorted", "os.path.isdir", "os.listdir", "clips_path[].append", "os.path.join"], "function", ["None"], ["def", "make_cit_dataset", "(", "path", ")", ":", "\n", "    ", "clips_path", "=", "[", "]", "\n", "\n", "for", "index", ",", "folder", "in", "enumerate", "(", "os", ".", "listdir", "(", "path", ")", ")", ":", "\n", "        ", "clips_folder", "=", "os", ".", "path", ".", "join", "(", "path", ",", "folder", ")", "\n", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "clips_folder", ")", ")", ":", "\n", "            ", "continue", "\n", "", "clips_path", ".", "append", "(", "[", "]", ")", "\n", "\n", "for", "image", "in", "sorted", "(", "os", ".", "listdir", "(", "clips_folder", ")", ")", ":", "\n", "            ", "clips_path", "[", "index", "]", ".", "append", "(", "os", ".", "path", ".", "join", "(", "clips_folder", ",", "image", ")", ")", "\n", "", "", "return", "clips_path", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.LateralBlock.__init__": [[9, 19], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "ch_out", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_out", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "ch_out", ")", "\n", ")", "\n", "if", "ch_in", "!=", "ch_out", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.LateralBlock.forward": [[20, 26], ["sdl_arch.LateralBlock.f", "sdl_arch.LateralBlock.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fx", "=", "self", ".", "f", "(", "x", ")", "\n", "if", "fx", ".", "shape", "[", "1", "]", "!=", "x", ".", "shape", "[", "1", "]", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "\n", "", "return", "fx", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.DownSamplingBlock.__init__": [[29, 36], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "ch_out", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_out", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "ch_out", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.DownSamplingBlock.forward": [[38, 40], ["sdl_arch.DownSamplingBlock.f"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "f", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.UpSamplingBlock.__init__": [[42, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "f", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "ch_out", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_out", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "ch_out", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.UpSamplingBlock.forward": [[52, 54], ["sdl_arch.UpSamplingBlock.f"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "f", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.GridNet.__init__": [[56, 79], ["torch.Module.__init__", "sdl_arch.LateralBlock", "enumerate", "enumerate", "enumerate", "sdl_arch.LateralBlock", "len", "range", "zip", "range", "zip", "range", "setattr", "int", "setattr", "int", "setattr", "sdl_arch.LateralBlock", "sdl_arch.DownSamplingBlock", "sdl_arch.UpSamplingBlock"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_chs", ",", "out_chs", ",", "grid_chs", "=", "[", "32", ",", "64", ",", "96", "]", ",", "nrow", "=", "3", ",", "ncol", "=", "6", ")", ":", "\n", "        ", "super", "(", "GridNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_row", "=", "nrow", "\n", "self", ".", "n_col", "=", "ncol", "\n", "self", ".", "n_chs", "=", "grid_chs", "\n", "assert", "len", "(", "grid_chs", ")", "==", "self", ".", "n_row", ",", "'should give num channels for each row (scale stream)'", "\n", "\n", "self", ".", "lateral_init", "=", "LateralBlock", "(", "in_chs", ",", "self", ".", "n_chs", "[", "0", "]", ")", "\n", "\n", "for", "r", ",", "n_ch", "in", "enumerate", "(", "self", ".", "n_chs", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "self", ".", "n_col", "-", "1", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "f'lateral_{r}_{c}'", ",", "LateralBlock", "(", "n_ch", ",", "n_ch", ")", ")", "\n", "\n", "", "", "for", "r", ",", "(", "in_ch", ",", "out_ch", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "n_chs", "[", ":", "-", "1", "]", ",", "self", ".", "n_chs", "[", "1", ":", "]", ")", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "int", "(", "self", ".", "n_col", "/", "2", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "f'down_{r}_{c}'", ",", "DownSamplingBlock", "(", "in_ch", ",", "out_ch", ")", ")", "\n", "\n", "", "", "for", "r", ",", "(", "in_ch", ",", "out_ch", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "n_chs", "[", "1", ":", "]", ",", "self", ".", "n_chs", "[", ":", "-", "1", "]", ")", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "int", "(", "self", ".", "n_col", "/", "2", ")", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "f'up_{r}_{c}'", ",", "UpSamplingBlock", "(", "in_ch", ",", "out_ch", ")", ")", "\n", "\n", "", "", "self", ".", "lateral_final", "=", "LateralBlock", "(", "self", ".", "n_chs", "[", "0", "]", ",", "out_chs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.GridNet.forward": [[80, 83], ["getattr", "getattr."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "forward_func", "=", "getattr", "(", "self", ",", "f'forward_{self.n_row}{self.n_col}'", ")", "\n", "return", "forward_func", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.GridNet.forward_36": [[84, 110], ["sdl_arch.GridNet.lateral_init", "sdl_arch.GridNet.down_0_0", "sdl_arch.GridNet.down_1_0", "sdl_arch.GridNet.lateral_0_0", "sdl_arch.GridNet.lateral_0_1", "sdl_arch.GridNet.lateral_2_2", "sdl_arch.GridNet.lateral_2_3", "sdl_arch.GridNet.lateral_2_4", "sdl_arch.GridNet.lateral_final", "sdl_arch.GridNet.down_0_1", "sdl_arch.GridNet.lateral_1_0", "sdl_arch.GridNet.down_1_1", "sdl_arch.GridNet.lateral_2_0", "sdl_arch.GridNet.down_0_2", "sdl_arch.GridNet.lateral_1_1", "sdl_arch.GridNet.down_1_2", "sdl_arch.GridNet.lateral_2_1", "sdl_arch.GridNet.up_1_0", "sdl_arch.GridNet.lateral_1_2", "sdl_arch.GridNet.up_0_0", "sdl_arch.GridNet.lateral_0_2", "sdl_arch.GridNet.up_1_1", "sdl_arch.GridNet.lateral_1_3", "sdl_arch.GridNet.up_0_1", "sdl_arch.GridNet.lateral_0_3", "sdl_arch.GridNet.up_1_2", "sdl_arch.GridNet.lateral_1_4", "sdl_arch.GridNet.up_0_2", "sdl_arch.GridNet.lateral_0_4"], "methods", ["None"], ["", "def", "forward_36", "(", "self", ",", "x", ")", ":", "\n", "        ", "state_00", "=", "self", ".", "lateral_init", "(", "x", ")", "\n", "state_10", "=", "self", ".", "down_0_0", "(", "state_00", ")", "\n", "state_20", "=", "self", ".", "down_1_0", "(", "state_10", ")", "\n", "\n", "state_01", "=", "self", ".", "lateral_0_0", "(", "state_00", ")", "\n", "state_11", "=", "self", ".", "down_0_1", "(", "state_01", ")", "+", "self", ".", "lateral_1_0", "(", "state_10", ")", "\n", "state_21", "=", "self", ".", "down_1_1", "(", "state_11", ")", "+", "self", ".", "lateral_2_0", "(", "state_20", ")", "\n", "\n", "state_02", "=", "self", ".", "lateral_0_1", "(", "state_01", ")", "\n", "state_12", "=", "self", ".", "down_0_2", "(", "state_02", ")", "+", "self", ".", "lateral_1_1", "(", "state_11", ")", "\n", "state_22", "=", "self", ".", "down_1_2", "(", "state_12", ")", "+", "self", ".", "lateral_2_1", "(", "state_21", ")", "\n", "\n", "state_23", "=", "self", ".", "lateral_2_2", "(", "state_22", ")", "\n", "state_13", "=", "self", ".", "up_1_0", "(", "state_23", ")", "+", "self", ".", "lateral_1_2", "(", "state_12", ")", "\n", "state_03", "=", "self", ".", "up_0_0", "(", "state_13", ")", "+", "self", ".", "lateral_0_2", "(", "state_02", ")", "\n", "\n", "state_24", "=", "self", ".", "lateral_2_3", "(", "state_23", ")", "\n", "state_14", "=", "self", ".", "up_1_1", "(", "state_24", ")", "+", "self", ".", "lateral_1_3", "(", "state_13", ")", "\n", "state_04", "=", "self", ".", "up_0_1", "(", "state_14", ")", "+", "self", ".", "lateral_0_3", "(", "state_03", ")", "\n", "\n", "state_25", "=", "self", ".", "lateral_2_4", "(", "state_24", ")", "\n", "state_15", "=", "self", ".", "up_1_2", "(", "state_25", ")", "+", "self", ".", "lateral_1_4", "(", "state_14", ")", "\n", "state_05", "=", "self", ".", "up_0_2", "(", "state_15", ")", "+", "self", ".", "lateral_0_4", "(", "state_04", ")", "\n", "\n", "return", "self", ".", "lateral_final", "(", "state_05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.GridNet.forward_34": [[111, 129], ["sdl_arch.GridNet.lateral_init", "sdl_arch.GridNet.down_0_0", "sdl_arch.GridNet.down_1_0", "sdl_arch.GridNet.lateral_0_0", "sdl_arch.GridNet.lateral_2_1", "sdl_arch.GridNet.lateral_2_2", "sdl_arch.GridNet.lateral_final", "sdl_arch.GridNet.down_0_1", "sdl_arch.GridNet.lateral_1_0", "sdl_arch.GridNet.down_1_1", "sdl_arch.GridNet.lateral_2_0", "sdl_arch.GridNet.up_1_0", "sdl_arch.GridNet.lateral_1_1", "sdl_arch.GridNet.up_0_0", "sdl_arch.GridNet.lateral_0_1", "sdl_arch.GridNet.up_1_1", "sdl_arch.GridNet.lateral_1_2", "sdl_arch.GridNet.up_0_1", "sdl_arch.GridNet.lateral_0_2"], "methods", ["None"], ["", "def", "forward_34", "(", "self", ",", "x", ")", ":", "\n", "        ", "state_00", "=", "self", ".", "lateral_init", "(", "x", ")", "\n", "state_10", "=", "self", ".", "down_0_0", "(", "state_00", ")", "\n", "state_20", "=", "self", ".", "down_1_0", "(", "state_10", ")", "\n", "\n", "state_01", "=", "self", ".", "lateral_0_0", "(", "state_00", ")", "\n", "state_11", "=", "self", ".", "down_0_1", "(", "state_01", ")", "+", "self", ".", "lateral_1_0", "(", "state_10", ")", "\n", "state_21", "=", "self", ".", "down_1_1", "(", "state_11", ")", "+", "self", ".", "lateral_2_0", "(", "state_20", ")", "\n", "\n", "state_22", "=", "self", ".", "lateral_2_1", "(", "state_21", ")", "\n", "state_12", "=", "self", ".", "up_1_0", "(", "state_22", ")", "+", "self", ".", "lateral_1_1", "(", "state_11", ")", "\n", "state_02", "=", "self", ".", "up_0_0", "(", "state_12", ")", "+", "self", ".", "lateral_0_1", "(", "state_01", ")", "\n", "\n", "state_23", "=", "self", ".", "lateral_2_2", "(", "state_22", ")", "\n", "state_13", "=", "self", ".", "up_1_1", "(", "state_23", ")", "+", "self", ".", "lateral_1_2", "(", "state_12", ")", "\n", "state_03", "=", "self", ".", "up_0_1", "(", "state_13", ")", "+", "self", ".", "lateral_0_2", "(", "state_02", ")", "\n", "\n", "return", "self", ".", "lateral_final", "(", "state_03", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.GridNet.forward_32": [[130, 140], ["sdl_arch.GridNet.lateral_init", "sdl_arch.GridNet.down_0_0", "sdl_arch.GridNet.down_1_0", "sdl_arch.GridNet.lateral_2_0", "sdl_arch.GridNet.lateral_final", "sdl_arch.GridNet.up_1_0", "sdl_arch.GridNet.lateral_1_0", "sdl_arch.GridNet.up_0_0", "sdl_arch.GridNet.lateral_0_0"], "methods", ["None"], ["", "def", "forward_32", "(", "self", ",", "x", ")", ":", "\n", "        ", "state_00", "=", "self", ".", "lateral_init", "(", "x", ")", "\n", "state_10", "=", "self", ".", "down_0_0", "(", "state_00", ")", "\n", "state_20", "=", "self", ".", "down_1_0", "(", "state_10", ")", "\n", "\n", "state_21", "=", "self", ".", "lateral_2_0", "(", "state_20", ")", "\n", "state_11", "=", "self", ".", "up_1_0", "(", "state_21", ")", "+", "self", ".", "lateral_1_0", "(", "state_10", ")", "\n", "state_01", "=", "self", ".", "up_0_0", "(", "state_11", ")", "+", "self", ".", "lateral_0_0", "(", "state_00", ")", "\n", "\n", "return", "self", ".", "lateral_final", "(", "state_01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.GridNet.forward_30": [[141, 145], ["sdl_arch.GridNet.lateral_init", "sdl_arch.GridNet.lateral_final"], "methods", ["None"], ["", "def", "forward_30", "(", "self", ",", "x", ")", ":", "\n", "        ", "state_00", "=", "self", ".", "lateral_init", "(", "x", ")", "\n", "\n", "return", "self", ".", "lateral_final", "(", "state_00", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.GridNet.forward_24": [[146, 160], ["sdl_arch.GridNet.lateral_init", "sdl_arch.GridNet.down_0_0", "sdl_arch.GridNet.lateral_0_0", "sdl_arch.GridNet.lateral_1_1", "sdl_arch.GridNet.lateral_1_2", "sdl_arch.GridNet.lateral_final", "sdl_arch.GridNet.down_0_1", "sdl_arch.GridNet.lateral_1_0", "sdl_arch.GridNet.up_0_0", "sdl_arch.GridNet.lateral_0_1", "sdl_arch.GridNet.up_0_1", "sdl_arch.GridNet.lateral_0_2"], "methods", ["None"], ["", "def", "forward_24", "(", "self", ",", "x", ")", ":", "\n", "        ", "state_00", "=", "self", ".", "lateral_init", "(", "x", ")", "\n", "state_10", "=", "self", ".", "down_0_0", "(", "state_00", ")", "\n", "\n", "state_01", "=", "self", ".", "lateral_0_0", "(", "state_00", ")", "\n", "state_11", "=", "self", ".", "down_0_1", "(", "state_01", ")", "+", "self", ".", "lateral_1_0", "(", "state_10", ")", "\n", "\n", "state_12", "=", "self", ".", "lateral_1_1", "(", "state_11", ")", "\n", "state_02", "=", "self", ".", "up_0_0", "(", "state_12", ")", "+", "self", ".", "lateral_0_1", "(", "state_01", ")", "\n", "\n", "state_13", "=", "self", ".", "lateral_1_2", "(", "state_12", ")", "\n", "state_03", "=", "self", ".", "up_0_1", "(", "state_13", ")", "+", "self", ".", "lateral_0_2", "(", "state_02", ")", "\n", "\n", "return", "self", ".", "lateral_final", "(", "state_03", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.GridNet.forward_22": [[161, 169], ["sdl_arch.GridNet.lateral_init", "sdl_arch.GridNet.down_0_0", "sdl_arch.GridNet.lateral_1_0", "sdl_arch.GridNet.lateral_final", "sdl_arch.GridNet.up_0_0", "sdl_arch.GridNet.lateral_0_0"], "methods", ["None"], ["", "def", "forward_22", "(", "self", ",", "x", ")", ":", "\n", "        ", "state_00", "=", "self", ".", "lateral_init", "(", "x", ")", "\n", "state_10", "=", "self", ".", "down_0_0", "(", "state_00", ")", "\n", "\n", "state_11", "=", "self", ".", "lateral_1_0", "(", "state_10", ")", "\n", "state_01", "=", "self", ".", "up_0_0", "(", "state_11", ")", "+", "self", ".", "lateral_0_0", "(", "state_00", ")", "\n", "\n", "return", "self", ".", "lateral_final", "(", "state_01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.down.__init__": [[171, 180], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_in_ch", ",", "num_out_ch", ")", ":", "\n", "        ", "super", "(", "down", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_in_ch", ",", "num_out_ch", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "num_out_ch", ")", ",", "\n", "nn", ".", "Conv2d", "(", "num_out_ch", ",", "num_out_ch", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "num_out_ch", ")", ",", "\n", "nn", ".", "Conv2d", "(", "num_out_ch", ",", "num_out_ch", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "num_out_ch", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.down.forward": [[182, 186], ["sdl_arch.down.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.up.__init__": [[188, 203], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_in_ch", ",", "num_out_ch", ",", "split", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "num_in_ch", ",", "num_out_ch", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "num_out_ch", ")", "\n", ")", "\n", "self", ".", "decouple", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "num_out_ch", ",", "num_out_ch", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "num_out_ch", ")", "\n", ")", "\n", "self", ".", "merge", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_out_ch", ",", "num_out_ch", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "num_out_ch", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.up.forward": [[205, 214], ["sdl_arch.up.head", "sdl_arch.up.decouple", "int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sdl_arch.up.merge", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "skip_ch", ",", "t", ")", ":", "\n", "        ", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "decouple", "(", "torch", ".", "cat", "(", "(", "x", ",", "skip_ch", ")", ",", "1", ")", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "p", "=", "int", "(", "c", "*", "self", ".", "split", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", "[", ":", ",", ":", "p", "]", "*", "t", ",", "x", "[", ":", ",", "p", ":", "]", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "merge", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.SDLNet.__init__": [[221, 247], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sdl_arch.down", "sdl_arch.down", "sdl_arch.down", "sdl_arch.down", "sdl_arch.down", "sdl_arch.up", "sdl_arch.up", "sdl_arch.up", "sdl_arch.up", "sdl_arch.up", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sdl_arch.GridNet", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__"], ["def", "__init__", "(", "self", ",", "num_in_ch", ",", "num_out_ch", ",", "split", "=", "0.5", ",", "num_feat", "=", "32", ",", "nrow", "=", "3", ",", "ncol", "=", "6", ")", ":", "\n", "        ", "super", "(", "SDLNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_in_ch", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "PReLU", "(", "32", ")", "\n", ")", "\n", "self", ".", "down1", "=", "down", "(", "32", ",", "64", ")", "\n", "self", ".", "down2", "=", "down", "(", "64", ",", "128", ")", "\n", "self", ".", "down3", "=", "down", "(", "128", ",", "256", ")", "\n", "self", ".", "down4", "=", "down", "(", "256", ",", "512", ")", "\n", "self", ".", "down5", "=", "down", "(", "512", ",", "512", ")", "\n", "\n", "self", ".", "up1", "=", "up", "(", "512", ",", "512", ",", "split", ")", "\n", "self", ".", "up2", "=", "up", "(", "512", ",", "256", ",", "split", ")", "\n", "self", ".", "up3", "=", "up", "(", "256", ",", "128", ",", "split", ")", "\n", "self", ".", "up4", "=", "up", "(", "128", ",", "64", ",", "split", ")", "\n", "self", ".", "up5", "=", "up", "(", "64", ",", "32", ",", "split", ")", "\n", "self", ".", "tail", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "# 32", "\n", "nn", ".", "PReLU", "(", "32", ")", "\n", ")", "\n", "\n", "self", ".", "gridnet", "=", "GridNet", "(", "32", ",", "num_out_ch", ",", "nrow", "=", "nrow", ",", "ncol", "=", "ncol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.SDLNet.preforward": [[248, 266], ["t.view.view.view", "sdl_arch.SDLNet.head", "sdl_arch.SDLNet.down1", "sdl_arch.SDLNet.down2", "sdl_arch.SDLNet.down3", "sdl_arch.SDLNet.down4", "sdl_arch.SDLNet.down5", "sdl_arch.SDLNet.up1", "sdl_arch.SDLNet.up2", "sdl_arch.SDLNet.up3", "sdl_arch.SDLNet.up4", "sdl_arch.SDLNet.up5", "sdl_arch.SDLNet.tail"], "methods", ["None"], ["", "def", "preforward", "(", "self", ",", "x", ",", "t", ")", ":", "\n", "        ", "t", "=", "t", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "s1", "=", "self", ".", "head", "(", "x", ")", "\n", "s2", "=", "self", ".", "down1", "(", "s1", ")", "\n", "s3", "=", "self", ".", "down2", "(", "s2", ")", "\n", "s4", "=", "self", ".", "down3", "(", "s3", ")", "\n", "s5", "=", "self", ".", "down4", "(", "s4", ")", "\n", "x", "=", "self", ".", "down5", "(", "s5", ")", "\n", "\n", "x", "=", "self", ".", "up1", "(", "x", ",", "s5", ",", "t", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "s4", ",", "t", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "s3", ",", "t", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "s2", ",", "t", ")", "\n", "x", "=", "self", ".", "up5", "(", "x", ",", "s1", ",", "t", ")", "\n", "x", "=", "self", ".", "tail", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.SDLNet.forward": [[267, 279], ["sdl_arch.SDLNet.preforward", "sdl_arch.SDLNet.gridnet"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.archs.sdl_arch.SDLNet.preforward"], ["", "def", "forward", "(", "self", ",", "x", ",", "t", ")", ":", "\n", "        ", "x_01", "=", "self", ".", "preforward", "(", "x", ",", "t", ")", "\n", "'''\n        idx_rvs = torch.LongTensor(range(-3, 3))\n        x_rvs = x[:,idx_rvs]\n        x_10 = self.preforward(x_rvs, 1-t)\n         \n        x = self.gridnet(torch.cat((x_01, x_10), 1))\n        '''", "\n", "x", "=", "self", ".", "gridnet", "(", "x_01", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.patchgan_discriminator_arch.PatchGANDiscriminator.__init__": [[14, 54], ["torch.nn.Module.__init__", "patchgan_discriminator_arch.PatchGANDiscriminator.get_norm_layer", "int", "range", "min", "torch.nn.Sequential", "range", "patchgan_discriminator_arch.PatchGANDiscriminator.model.apply", "numpy.ceil", "min", "len", "patchgan_discriminator_arch.PatchGANDiscriminator.model.add_module", "patchgan_discriminator_arch.PatchGANDiscriminator.use_spectral_norm", "torch.nn.LeakyReLU", "patchgan_discriminator_arch.PatchGANDiscriminator.use_spectral_norm", "patchgan_discriminator_arch.PatchGANDiscriminator.", "torch.nn.LeakyReLU", "patchgan_discriminator_arch.PatchGANDiscriminator.use_spectral_norm", "torch.nn.Sequential", "torch.nn.Conv2d", "patchgan_discriminator_arch.PatchGANDiscriminator.use_spectral_norm", "patchgan_discriminator_arch.PatchGANDiscriminator.", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "str", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__", "home.repos.pwc.inspect_result.yangxy_sdl.archs.patchgan_discriminator_arch.PatchGANDiscriminator.get_norm_layer", "home.repos.pwc.inspect_result.yangxy_sdl.archs.patchgan_discriminator_arch.PatchGANDiscriminator.use_spectral_norm", "home.repos.pwc.inspect_result.yangxy_sdl.archs.patchgan_discriminator_arch.PatchGANDiscriminator.use_spectral_norm", "home.repos.pwc.inspect_result.yangxy_sdl.archs.patchgan_discriminator_arch.PatchGANDiscriminator.use_spectral_norm", "home.repos.pwc.inspect_result.yangxy_sdl.archs.patchgan_discriminator_arch.PatchGANDiscriminator.use_spectral_norm"], ["    ", "def", "__init__", "(", "self", ",", "num_in_ch", "=", "3", ",", "num_feat", "=", "64", ",", "n_layers", "=", "3", ",", "norm_type", "=", "'spectral'", ")", ":", "\n", "        ", "'''PatchGAN discriminator, receptive field = 70x70 if n_layers = 3\n        Args:\n            input_nc: number of input channels \n            ndf: base channel number\n            n_layers: number of conv layer with stride 2\n            norm_type:  'batch', 'instance', 'spectral', 'batchspectral', instancespectral'\n        Returns:\n            tensor: score\n        '''", "\n", "super", "(", "PatchGANDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_nc", ",", "ndf", "=", "num_in_ch", ",", "num_feat", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "norm_layer", "=", "self", ".", "get_norm_layer", "(", "norm_type", "=", "norm_type", ")", "\n", "\n", "kw", "=", "4", "\n", "padw", "=", "int", "(", "np", ".", "ceil", "(", "(", "kw", "-", "1.0", ")", "/", "2", ")", ")", "\n", "sequence", "=", "[", "[", "self", ".", "use_spectral_norm", "(", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "norm_type", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "nf", "=", "ndf", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "self", ".", "use_spectral_norm", "(", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "norm_type", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "", "nf_prev", "=", "nf", "\n", "nf", "=", "min", "(", "nf", "*", "2", ",", "512", ")", "\n", "sequence", "+=", "[", "[", "self", ".", "use_spectral_norm", "(", "nn", ".", "Conv2d", "(", "nf_prev", ",", "nf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "norm_type", ")", ",", "\n", "norm_layer", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "]", "\n", "\n", "sequence", "+=", "[", "[", "self", ".", "use_spectral_norm", "(", "nn", ".", "Conv2d", "(", "nf", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", ",", "norm_type", ")", "]", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "n", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "            ", "self", ".", "model", ".", "add_module", "(", "'child'", "+", "str", "(", "n", ")", ",", "nn", ".", "Sequential", "(", "*", "sequence", "[", "n", "]", ")", ")", "\n", "\n", "", "self", ".", "model", ".", "apply", "(", "self", ".", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.patchgan_discriminator_arch.PatchGANDiscriminator.use_spectral_norm": [[55, 59], ["torch.nn.utils.spectral_norm"], "methods", ["None"], ["", "def", "use_spectral_norm", "(", "self", ",", "module", ",", "norm_type", "=", "'spectral'", ")", ":", "\n", "        ", "if", "'spectral'", "in", "norm_type", ":", "\n", "            ", "return", "spectral_norm", "(", "module", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.patchgan_discriminator_arch.PatchGANDiscriminator.get_norm_layer": [[60, 68], ["functools.partial", "functools.partial", "functools.partial"], "methods", ["None"], ["", "def", "get_norm_layer", "(", "self", ",", "norm_type", "=", "'instance'", ")", ":", "\n", "        ", "if", "'batch'", "in", "norm_type", ":", "\n", "            ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "'instance'", "in", "norm_type", ":", "\n", "            ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "Identity", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.patchgan_discriminator_arch.PatchGANDiscriminator.weights_init": [[69, 76], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.archs.patchgan_discriminator_arch.PatchGANDiscriminator.forward": [[77, 79], ["patchgan_discriminator_arch.PatchGANDiscriminator.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdlstyle_model.SDLStyleModel.init_training_settings": [[21, 58], ["sdlstyle_model.SDLStyleModel.net_g.train", "train_opt.get", "train_opt.get", "train_opt.get", "sdlstyle_model.SDLStyleModel.setup_optimizers", "sdlstyle_model.SDLStyleModel.setup_schedulers", "basicsr.utils.get_root_logger", "basicsr.utils.get_root_logger.info", "basicsr.archs.build_network().to", "sdlstyle_model.SDLStyleModel.opt[].get", "sdlstyle_model.SDLStyleModel.net_g_ema.eval", "losses.build_loss_().to", "losses.build_loss_().to", "ValueError", "sdlstyle_model.SDLStyleModel.load_network", "sdlstyle_model.SDLStyleModel.model_ema", "basicsr.archs.build_network", "sdlstyle_model.SDLStyleModel.opt[].get", "losses.build_loss_", "losses.build_loss_"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.__init__.build_loss_", "home.repos.pwc.inspect_result.yangxy_sdl.losses.__init__.build_loss_"], ["def", "init_training_settings", "(", "self", ")", ":", "\n", "        ", "self", ".", "net_g", ".", "train", "(", ")", "\n", "train_opt", "=", "self", ".", "opt", "[", "'train'", "]", "\n", "\n", "self", ".", "ema_decay", "=", "train_opt", ".", "get", "(", "'ema_decay'", ",", "0", ")", "\n", "if", "self", ".", "ema_decay", ">", "0", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "logger", ".", "info", "(", "f'Use Exponential Moving Average with decay: {self.ema_decay}'", ")", "\n", "# define network net_g with Exponential Moving Average (EMA)", "\n", "# net_g_ema is used only for testing on one GPU and saving", "\n", "# There is no need to wrap with DistributedDataParallel", "\n", "self", ".", "net_g_ema", "=", "build_network", "(", "self", ".", "opt", "[", "'network_g'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# load pretrained model", "\n", "load_path", "=", "self", ".", "opt", "[", "'path'", "]", ".", "get", "(", "'pretrain_network_g'", ",", "None", ")", "\n", "if", "load_path", "is", "not", "None", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "net_g_ema", ",", "load_path", ",", "self", ".", "opt", "[", "'path'", "]", ".", "get", "(", "'strict_load_g'", ",", "True", ")", ",", "'params_ema'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model_ema", "(", "0", ")", "# copy net_g weight", "\n", "", "self", ".", "net_g_ema", ".", "eval", "(", ")", "\n", "\n", "# define losses", "\n", "", "if", "train_opt", ".", "get", "(", "'contentstyle_opt'", ")", ":", "\n", "            ", "self", ".", "cri_cs", "=", "build_loss_", "(", "train_opt", "[", "'contentstyle_opt'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cri_cs", "=", "None", "\n", "\n", "", "if", "train_opt", ".", "get", "(", "'contentstylerelt_opt'", ")", ":", "\n", "            ", "self", ".", "cri_csr", "=", "build_loss_", "(", "train_opt", "[", "'contentstylerelt_opt'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cri_csr", "=", "None", "\n", "\n", "", "if", "self", ".", "cri_cs", "is", "None", "and", "self", ".", "cri_csr", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Both pixel and perceptual losses are None.'", ")", "\n", "\n", "# set up optimizers and schedulers", "\n", "", "self", ".", "setup_optimizers", "(", ")", "\n", "self", ".", "setup_schedulers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdlstyle_model.SDLStyleModel.feed_data": [[59, 70], ["data[].to", "data[].to", "data[].to", "torch.cat", "numpy.random.random", "numpy.random.random"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "content", "=", "data", "[", "'content'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "style", "=", "data", "[", "'style'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "t", "=", "data", "[", "'t'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "input", "=", "torch", ".", "cat", "(", "(", "self", ".", "content", ",", "self", ".", "style", ")", ",", "dim", "=", "1", ")", "\n", "\n", "self", ".", "tv", "=", "1.0", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "self", ".", "tv", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "", "self", ".", "t", "=", "self", ".", "t", "*", "0", "+", "self", ".", "tv", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdlstyle_model.SDLStyleModel.optimize_parameters": [[71, 98], ["sdlstyle_model.SDLStyleModel.optimizer_g.zero_grad", "sdlstyle_model.SDLStyleModel.net_g", "collections.OrderedDict", "l_total.backward", "sdlstyle_model.SDLStyleModel.optimizer_g.step", "sdlstyle_model.SDLStyleModel.reduce_loss_dict", "sdlstyle_model.SDLStyleModel.cri_cs", "sdlstyle_model.SDLStyleModel.cri_csr", "sdlstyle_model.SDLStyleModel.model_ema"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ",", "current_iter", ")", ":", "\n", "        ", "self", ".", "optimizer_g", ".", "zero_grad", "(", ")", "\n", "self", ".", "output", "=", "self", ".", "net_g", "(", "self", ".", "input", ",", "self", ".", "t", ")", "\n", "\n", "l_total", "=", "0", "\n", "loss_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "if", "self", ".", "cri_cs", ":", "\n", "            ", "l_content", ",", "l_style", "=", "self", ".", "cri_cs", "(", "self", ".", "output", ",", "self", ".", "content", ",", "self", ".", "style", ",", "norm", "=", "True", ")", "\n", "l_cs", "=", "l_content", "+", "self", ".", "tv", "*", "l_style", "\n", "l_total", "+=", "l_cs", "\n", "loss_dict", "[", "'l_content'", "]", "=", "l_content", "\n", "loss_dict", "[", "'l_style'", "]", "=", "l_style", "\n", "", "if", "self", ".", "cri_csr", ":", "\n", "            ", "l_content_r", ",", "l_style_r", "=", "self", ".", "cri_csr", "(", "self", ".", "output", ",", "self", ".", "content", ",", "self", ".", "style", ")", "\n", "l_csr", "=", "l_content_r", "+", "self", ".", "tv", "*", "l_style_r", "\n", "l_total", "+=", "l_csr", "\n", "loss_dict", "[", "'l_content_r'", "]", "=", "l_content_r", "\n", "loss_dict", "[", "'l_style_r'", "]", "=", "l_style_r", "\n", "\n", "", "l_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_g", ".", "step", "(", ")", "\n", "\n", "self", ".", "log_dict", "=", "self", ".", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "\n", "if", "self", ".", "ema_decay", ">", "0", ":", "\n", "            ", "self", ".", "model_ema", "(", "decay", "=", "self", ".", "ema_decay", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdlgan_model.SDLGANModel.feed_data": [[22, 35], ["data[].to", "data[].to", "data[].to", "numpy.random.random", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "numpy.random.randint"], "methods", ["None"], ["def", "feed_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "input", "=", "data", "[", "'in'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "t", "=", "data", "[", "'t'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "'gt'", "in", "data", ":", "\n", "            ", "self", ".", "gt", "=", "data", "[", "'gt'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# optional tricks", "\n", "", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "b", ",", "c", ",", "h", ",", "w", "=", "self", ".", "input", ".", "shape", "\n", "size", "=", "(", "np", ".", "random", ".", "randint", "(", "h", "//", "32", ")", "+", "1", ")", "*", "32", "\n", "self", ".", "input", "=", "F", ".", "interpolate", "(", "self", ".", "input", ",", "(", "size", ",", "size", ")", ")", "\n", "if", "'gt'", "in", "data", ":", "\n", "                ", "self", ".", "gt", "=", "F", ".", "interpolate", "(", "self", ".", "gt", ",", "(", "size", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdlgan_model.SDLGANModel.optimize_parameters": [[36, 108], ["sdlgan_model.SDLGANModel.net_d.parameters", "sdlgan_model.SDLGANModel.optimizer_g.zero_grad", "sdlgan_model.SDLGANModel.net_g", "collections.OrderedDict", "sdlgan_model.SDLGANModel.net_d.parameters", "sdlgan_model.SDLGANModel.optimizer_d.zero_grad", "sdlgan_model.SDLGANModel.net_d().detach", "sdlgan_model.SDLGANModel.net_d", "l_d_real.backward", "sdlgan_model.SDLGANModel.net_d", "l_d_fake.backward", "sdlgan_model.SDLGANModel.optimizer_d.step", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "sdlgan_model.SDLGANModel.reduce_loss_dict", "sdlgan_model.SDLGANModel.net_d().detach", "sdlgan_model.SDLGANModel.net_d", "sdlgan_model.SDLGANModel.cri_gan", "sdlgan_model.SDLGANModel.cri_gan", "l_g_total.backward", "sdlgan_model.SDLGANModel.optimizer_g.step", "sdlgan_model.SDLGANModel.cri_gan", "sdlgan_model.SDLGANModel.output.detach", "sdlgan_model.SDLGANModel.cri_gan", "sdlgan_model.SDLGANModel.detach", "sdlgan_model.SDLGANModel.detach", "sdlgan_model.SDLGANModel.model_ema", "sdlgan_model.SDLGANModel.cri_pix", "sdlgan_model.SDLGANModel.cri_perceptual", "sdlgan_model.SDLGANModel.net_d", "sdlgan_model.SDLGANModel.net_d", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "sdlgan_model.SDLGANModel.detach"], "methods", ["None"], ["", "", "", "def", "optimize_parameters", "(", "self", ",", "current_iter", ")", ":", "\n", "# optimize net_g", "\n", "        ", "for", "p", "in", "self", ".", "net_d", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "optimizer_g", ".", "zero_grad", "(", ")", "\n", "self", ".", "output", "=", "self", ".", "net_g", "(", "self", ".", "input", ",", "self", ".", "t", ")", "\n", "\n", "l_g_total", "=", "0", "\n", "loss_dict", "=", "OrderedDict", "(", ")", "\n", "if", "(", "current_iter", "%", "self", ".", "net_d_iters", "==", "0", "and", "current_iter", ">", "self", ".", "net_d_init_iters", ")", ":", "\n", "# pixel loss", "\n", "            ", "if", "self", ".", "cri_pix", ":", "\n", "                ", "l_g_pix", "=", "self", ".", "cri_pix", "(", "self", ".", "output", ",", "self", ".", "gt", ")", "\n", "l_g_total", "+=", "l_g_pix", "\n", "loss_dict", "[", "'l_g_pix'", "]", "=", "l_g_pix", "\n", "# perceptual loss", "\n", "", "if", "self", ".", "cri_perceptual", ":", "\n", "                ", "l_g_percep", ",", "l_g_style", "=", "self", ".", "cri_perceptual", "(", "self", ".", "output", ",", "self", ".", "gt", ")", "\n", "if", "l_g_percep", "is", "not", "None", ":", "\n", "                    ", "l_g_total", "+=", "l_g_percep", "\n", "loss_dict", "[", "'l_g_percep'", "]", "=", "l_g_percep", "\n", "", "if", "l_g_style", "is", "not", "None", ":", "\n", "                    ", "l_g_total", "+=", "l_g_style", "\n", "loss_dict", "[", "'l_g_style'", "]", "=", "l_g_style", "\n", "# gan loss (relativistic gan)", "\n", "", "", "real_d_pred", "=", "self", ".", "net_d", "(", "self", ".", "gt", ")", ".", "detach", "(", ")", "\n", "fake_g_pred", "=", "self", ".", "net_d", "(", "self", ".", "output", ")", "\n", "l_g_real", "=", "self", ".", "cri_gan", "(", "real_d_pred", "-", "torch", ".", "mean", "(", "fake_g_pred", ")", ",", "False", ",", "is_disc", "=", "False", ")", "\n", "l_g_fake", "=", "self", ".", "cri_gan", "(", "fake_g_pred", "-", "torch", ".", "mean", "(", "real_d_pred", ")", ",", "True", ",", "is_disc", "=", "False", ")", "\n", "l_g_gan", "=", "(", "l_g_real", "+", "l_g_fake", ")", "/", "2", "\n", "\n", "l_g_total", "+=", "l_g_gan", "\n", "loss_dict", "[", "'l_g_gan'", "]", "=", "l_g_gan", "\n", "\n", "l_g_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_g", ".", "step", "(", ")", "\n", "\n", "# optimize net_d", "\n", "", "for", "p", "in", "self", ".", "net_d", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "True", "\n", "\n", "", "self", ".", "optimizer_d", ".", "zero_grad", "(", ")", "\n", "# gan loss (relativistic gan)", "\n", "\n", "# In order to avoid the error in distributed training:", "\n", "# \"Error detected in CudnnBatchNormBackward: RuntimeError: one of", "\n", "# the variables needed for gradient computation has been modified by", "\n", "# an inplace operation\",", "\n", "# we separate the backwards for real and fake, and also detach the", "\n", "# tensor for calculating mean.", "\n", "\n", "# real", "\n", "fake_d_pred", "=", "self", ".", "net_d", "(", "self", ".", "output", ")", ".", "detach", "(", ")", "\n", "real_d_pred", "=", "self", ".", "net_d", "(", "self", ".", "gt", ")", "\n", "l_d_real", "=", "self", ".", "cri_gan", "(", "real_d_pred", "-", "torch", ".", "mean", "(", "fake_d_pred", ")", ",", "True", ",", "is_disc", "=", "True", ")", "*", "0.5", "\n", "l_d_real", ".", "backward", "(", ")", "\n", "# fake", "\n", "fake_d_pred", "=", "self", ".", "net_d", "(", "self", ".", "output", ".", "detach", "(", ")", ")", "\n", "l_d_fake", "=", "self", ".", "cri_gan", "(", "fake_d_pred", "-", "torch", ".", "mean", "(", "real_d_pred", ".", "detach", "(", ")", ")", ",", "False", ",", "is_disc", "=", "True", ")", "*", "0.5", "\n", "l_d_fake", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_d", ".", "step", "(", ")", "\n", "\n", "loss_dict", "[", "'l_d_real'", "]", "=", "l_d_real", "\n", "loss_dict", "[", "'l_d_fake'", "]", "=", "l_d_fake", "\n", "loss_dict", "[", "'out_d_real'", "]", "=", "torch", ".", "mean", "(", "real_d_pred", ".", "detach", "(", ")", ")", "\n", "loss_dict", "[", "'out_d_fake'", "]", "=", "torch", ".", "mean", "(", "fake_d_pred", ".", "detach", "(", ")", ")", "\n", "\n", "self", ".", "log_dict", "=", "self", ".", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "\n", "if", "self", ".", "ema_decay", ">", "0", ":", "\n", "            ", "self", ".", "model_ema", "(", "decay", "=", "self", ".", "ema_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdlgan_model.SDLGANModel.test": [[109, 119], ["hasattr", "sdlgan_model.SDLGANModel.net_g_ema.eval", "sdlgan_model.SDLGANModel.net_g.eval", "sdlgan_model.SDLGANModel.net_g.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sdlgan_model.SDLGANModel.net_g_ema", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sdlgan_model.SDLGANModel.net_g"], "methods", ["None"], ["", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'net_g_ema'", ")", ":", "\n", "            ", "putself", ".", "net_g_ema", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "output", "=", "self", ".", "net_g_ema", "(", "self", ".", "input", ",", "self", ".", "t", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "net_g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "output", "=", "self", ".", "net_g", "(", "self", ".", "input", ",", "self", ".", "t", ")", "\n", "", "self", ".", "net_g", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdlgan_model.SDLGANModel.nondist_validation": [[120, 169], ["enumerate", "sdlgan_model.SDLGANModel.opt[].get", "sdlgan_model.SDLGANModel.feed_data", "sdlgan_model.SDLGANModel.test", "sdlgan_model.SDLGANModel.get_current_visuals", "basicsr.utils.tensor2img", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "sdlgan_model.SDLGANModel.metric_results.keys", "sdlgan_model.SDLGANModel._log_validation_metric_values", "os.path.splitext", "basicsr.utils.tensor2img", "basicsr.utils.imwrite", "[].items", "[].keys", "os.path.basename", "os.path.join", "dict", "basicsr.metrics.calculate_metric", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.models.sdl_model.SDLModel.feed_data", "home.repos.pwc.inspect_result.yangxy_sdl.models.sdl_model.SDLModel.test", "home.repos.pwc.inspect_result.yangxy_sdl.models.sdl_model.SDLModel.get_current_visuals"], ["", "", "def", "nondist_validation", "(", "self", ",", "dataloader", ",", "current_iter", ",", "tb_logger", ",", "save_img", ")", ":", "\n", "        ", "dataset_name", "=", "dataloader", ".", "dataset", ".", "opt", "[", "'name'", "]", "\n", "with_metrics", "=", "self", ".", "opt", "[", "'val'", "]", ".", "get", "(", "'metrics'", ")", "is", "not", "None", "\n", "if", "with_metrics", ":", "\n", "            ", "self", ".", "metric_results", "=", "{", "metric", ":", "0", "for", "metric", "in", "self", ".", "opt", "[", "'val'", "]", "[", "'metrics'", "]", ".", "keys", "(", ")", "}", "\n", "#pbar = tqdm(total=len(dataloader), unit='image')", "\n", "\n", "", "for", "idx", ",", "val_data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "img_name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "val_data", "[", "'lq_path'", "]", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "self", ".", "feed_data", "(", "val_data", ")", "\n", "self", ".", "test", "(", ")", "\n", "\n", "visuals", "=", "self", ".", "get_current_visuals", "(", ")", "\n", "res_img", "=", "tensor2img", "(", "[", "visuals", "[", "'result'", "]", "]", ")", "\n", "if", "'gt'", "in", "visuals", ":", "\n", "                ", "gt_img", "=", "tensor2img", "(", "[", "visuals", "[", "'gt'", "]", "]", ")", "\n", "del", "self", ".", "gt", "\n", "\n", "# tentative for out of GPU memory", "\n", "", "del", "self", ".", "input", "\n", "del", "self", ".", "output", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "if", "save_img", ":", "\n", "                ", "if", "self", ".", "opt", "[", "'is_train'", "]", ":", "\n", "                    ", "save_img_path", "=", "osp", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'visualization'", "]", ",", "img_name", ",", "\n", "f'{img_name}_{current_iter}.png'", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "opt", "[", "'val'", "]", "[", "'suffix'", "]", ":", "\n", "                        ", "save_img_path", "=", "osp", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'visualization'", "]", ",", "dataset_name", ",", "\n", "f'{img_name}_{self.opt[\"val\"][\"suffix\"]}.png'", ")", "\n", "", "else", ":", "\n", "                        ", "save_img_path", "=", "osp", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'visualization'", "]", ",", "dataset_name", ",", "\n", "f'{img_name}_{self.opt[\"name\"]}.png'", ")", "\n", "", "", "imwrite", "(", "res_img", ",", "save_img_path", ")", "\n", "\n", "", "if", "with_metrics", ":", "\n", "# calculate metrics", "\n", "                ", "for", "name", ",", "opt_", "in", "self", ".", "opt", "[", "'val'", "]", "[", "'metrics'", "]", ".", "items", "(", ")", ":", "\n", "                    ", "metric_data", "=", "dict", "(", "img", "=", "res_img", ",", "img2", "=", "gt_img", ")", "\n", "self", ".", "metric_results", "[", "name", "]", "+=", "calculate_metric", "(", "metric_data", ",", "opt_", ")", "\n", "#pbar.update(1)", "\n", "#pbar.set_description(f'Test {img_name}')", "\n", "#pbar.close()", "\n", "\n", "", "", "", "if", "with_metrics", ":", "\n", "            ", "for", "metric", "in", "self", ".", "metric_results", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "metric_results", "[", "metric", "]", "/=", "(", "idx", "+", "1", ")", "\n", "", "self", ".", "_log_validation_metric_values", "(", "current_iter", ",", "dataset_name", ",", "tb_logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdlgan_model.SDLGANModel.get_current_visuals": [[170, 176], ["collections.OrderedDict", "sdlgan_model.SDLGANModel.output.detach().cpu", "hasattr", "sdlgan_model.SDLGANModel.gt.detach().cpu", "sdlgan_model.SDLGANModel.output.detach", "sdlgan_model.SDLGANModel.gt.detach"], "methods", ["None"], ["", "", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'result'", "]", "=", "self", ".", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "if", "hasattr", "(", "self", ",", "'gt'", ")", ":", "\n", "            ", "out_dict", "[", "'gt'", "]", "=", "self", ".", "gt", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdl_model.SDLModel.init_training_settings": [[22, 64], ["sdl_model.SDLModel.net_g.train", "train_opt.get", "train_opt.get", "train_opt.get", "train_opt.get", "sdl_model.SDLModel.setup_optimizers", "sdl_model.SDLModel.setup_schedulers", "basicsr.utils.get_root_logger", "basicsr.utils.get_root_logger.info", "basicsr.archs.build_network().to", "sdl_model.SDLModel.opt[].get", "sdl_model.SDLModel.net_g_ema.eval", "basicsr.losses.build_loss().to", "losses.build_loss_().to", "basicsr.losses.build_loss().to", "ValueError", "sdl_model.SDLModel.load_network", "sdl_model.SDLModel.model_ema", "basicsr.archs.build_network", "sdl_model.SDLModel.opt[].get", "basicsr.losses.build_loss", "losses.build_loss_", "basicsr.losses.build_loss"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.__init__.build_loss_"], ["def", "init_training_settings", "(", "self", ")", ":", "\n", "        ", "self", ".", "net_g", ".", "train", "(", ")", "\n", "train_opt", "=", "self", ".", "opt", "[", "'train'", "]", "\n", "\n", "self", ".", "ema_decay", "=", "train_opt", ".", "get", "(", "'ema_decay'", ",", "0", ")", "\n", "if", "self", ".", "ema_decay", ">", "0", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "logger", ".", "info", "(", "f'Use Exponential Moving Average with decay: {self.ema_decay}'", ")", "\n", "# define network net_g with Exponential Moving Average (EMA)", "\n", "# net_g_ema is used only for testing on one GPU and saving", "\n", "# There is no need to wrap with DistributedDataParallel", "\n", "self", ".", "net_g_ema", "=", "build_network", "(", "self", ".", "opt", "[", "'network_g'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# load pretrained model", "\n", "load_path", "=", "self", ".", "opt", "[", "'path'", "]", ".", "get", "(", "'pretrain_network_g'", ",", "None", ")", "\n", "if", "load_path", "is", "not", "None", ":", "\n", "                ", "self", ".", "load_network", "(", "self", ".", "net_g_ema", ",", "load_path", ",", "self", ".", "opt", "[", "'path'", "]", ".", "get", "(", "'strict_load_g'", ",", "True", ")", ",", "'params_ema'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model_ema", "(", "0", ")", "# copy net_g weight", "\n", "", "self", ".", "net_g_ema", ".", "eval", "(", ")", "\n", "\n", "# define losses", "\n", "", "if", "train_opt", ".", "get", "(", "'pixel_opt'", ")", ":", "\n", "            ", "self", ".", "cri_pix", "=", "build_loss", "(", "train_opt", "[", "'pixel_opt'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cri_pix", "=", "None", "\n", "\n", "", "if", "train_opt", ".", "get", "(", "'charbonnier_opt'", ")", ":", "\n", "            ", "self", ".", "cri_cb", "=", "build_loss_", "(", "train_opt", "[", "'charbonnier_opt'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cri_cb", "=", "None", "\n", "\n", "", "if", "train_opt", ".", "get", "(", "'perceptual_opt'", ")", ":", "\n", "            ", "self", ".", "cri_perceptual", "=", "build_loss", "(", "train_opt", "[", "'perceptual_opt'", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cri_perceptual", "=", "None", "\n", "\n", "", "if", "self", ".", "cri_pix", "is", "None", "and", "self", ".", "cri_perceptual", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Both pixel and perceptual losses are None.'", ")", "\n", "\n", "# set up optimizers and schedulers", "\n", "", "self", ".", "setup_optimizers", "(", ")", "\n", "self", ".", "setup_schedulers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdl_model.SDLModel.feed_data": [[65, 70], ["data[].to", "data[].to", "data[].to"], "methods", ["None"], ["", "def", "feed_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "input", "=", "data", "[", "'in'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "t", "=", "data", "[", "'t'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "'gt'", "in", "data", ":", "\n", "            ", "self", ".", "gt", "=", "data", "[", "'gt'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdl_model.SDLModel.optimize_parameters": [[71, 104], ["sdl_model.SDLModel.optimizer_g.zero_grad", "sdl_model.SDLModel.net_g", "collections.OrderedDict", "l_total.backward", "sdl_model.SDLModel.optimizer_g.step", "sdl_model.SDLModel.reduce_loss_dict", "sdl_model.SDLModel.cri_pix", "sdl_model.SDLModel.cri_cb", "sdl_model.SDLModel.cri_perceptual", "sdl_model.SDLModel.model_ema"], "methods", ["None"], ["", "", "def", "optimize_parameters", "(", "self", ",", "current_iter", ")", ":", "\n", "        ", "self", ".", "optimizer_g", ".", "zero_grad", "(", ")", "\n", "self", ".", "output", "=", "self", ".", "net_g", "(", "self", ".", "input", ",", "self", ".", "t", ")", "\n", "\n", "l_total", "=", "0", "\n", "loss_dict", "=", "OrderedDict", "(", ")", "\n", "# pixel loss", "\n", "if", "self", ".", "cri_pix", ":", "\n", "            ", "l_pix", "=", "self", ".", "cri_pix", "(", "self", ".", "output", ",", "self", ".", "gt", ")", "\n", "l_total", "+=", "l_pix", "\n", "loss_dict", "[", "'l_pix'", "]", "=", "l_pix", "\n", "#charbonnier loss", "\n", "", "if", "self", ".", "cri_cb", ":", "\n", "            ", "l_cb", "=", "self", ".", "cri_cb", "(", "self", ".", "output", ",", "self", ".", "gt", ")", "\n", "l_total", "+=", "l_cb", "\n", "loss_dict", "[", "'l_cb'", "]", "=", "l_cb", "\n", "# perceptual loss", "\n", "", "if", "self", ".", "cri_perceptual", ":", "\n", "            ", "l_percep", ",", "l_style", "=", "self", ".", "cri_perceptual", "(", "self", ".", "output", ",", "self", ".", "gt", ")", "\n", "if", "l_percep", "is", "not", "None", ":", "\n", "                ", "l_total", "+=", "l_percep", "\n", "loss_dict", "[", "'l_percep'", "]", "=", "l_percep", "\n", "", "if", "l_style", "is", "not", "None", ":", "\n", "                ", "l_total", "+=", "l_style", "\n", "loss_dict", "[", "'l_style'", "]", "=", "l_style", "\n", "\n", "", "", "l_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_g", ".", "step", "(", ")", "\n", "\n", "self", ".", "log_dict", "=", "self", ".", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "\n", "if", "self", ".", "ema_decay", ">", "0", ":", "\n", "            ", "self", ".", "model_ema", "(", "decay", "=", "self", ".", "ema_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdl_model.SDLModel.test": [[105, 115], ["hasattr", "sdl_model.SDLModel.net_g_ema.eval", "sdl_model.SDLModel.net_g.eval", "sdl_model.SDLModel.net_g.train", "torch.no_grad", "sdl_model.SDLModel.net_g_ema", "torch.no_grad", "sdl_model.SDLModel.net_g"], "methods", ["None"], ["", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'net_g_ema'", ")", ":", "\n", "            ", "self", ".", "net_g_ema", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "output", "=", "self", ".", "net_g_ema", "(", "self", ".", "input", ",", "self", ".", "t", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "net_g", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "output", "=", "self", ".", "net_g", "(", "self", ".", "input", ",", "self", ".", "t", ")", "\n", "", "self", ".", "net_g", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdl_model.SDLModel.nondist_validation": [[116, 165], ["enumerate", "sdl_model.SDLModel.opt[].get", "sdl_model.SDLModel.feed_data", "sdl_model.SDLModel.test", "sdl_model.SDLModel.get_current_visuals", "basicsr.utils.tensor2img", "torch.cuda.empty_cache", "sdl_model.SDLModel.metric_results.keys", "sdl_model.SDLModel._log_validation_metric_values", "os.path.splitext", "basicsr.utils.tensor2img", "basicsr.utils.imwrite", "[].items", "[].keys", "os.path.basename", "os.path.join", "dict", "basicsr.metrics.calculate_metric", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.models.sdl_model.SDLModel.feed_data", "home.repos.pwc.inspect_result.yangxy_sdl.models.sdl_model.SDLModel.test", "home.repos.pwc.inspect_result.yangxy_sdl.models.sdl_model.SDLModel.get_current_visuals"], ["", "", "def", "nondist_validation", "(", "self", ",", "dataloader", ",", "current_iter", ",", "tb_logger", ",", "save_img", ")", ":", "\n", "        ", "dataset_name", "=", "dataloader", ".", "dataset", ".", "opt", "[", "'name'", "]", "\n", "with_metrics", "=", "self", ".", "opt", "[", "'val'", "]", ".", "get", "(", "'metrics'", ")", "is", "not", "None", "\n", "if", "with_metrics", ":", "\n", "            ", "self", ".", "metric_results", "=", "{", "metric", ":", "0", "for", "metric", "in", "self", ".", "opt", "[", "'val'", "]", "[", "'metrics'", "]", ".", "keys", "(", ")", "}", "\n", "#pbar = tqdm(total=len(dataloader), unit='image')", "\n", "\n", "", "for", "idx", ",", "val_data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "img_name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "val_data", "[", "'lq_path'", "]", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "self", ".", "feed_data", "(", "val_data", ")", "\n", "self", ".", "test", "(", ")", "\n", "\n", "visuals", "=", "self", ".", "get_current_visuals", "(", ")", "\n", "res_img", "=", "tensor2img", "(", "[", "visuals", "[", "'result'", "]", "]", ")", "\n", "if", "'gt'", "in", "visuals", ":", "\n", "                ", "gt_img", "=", "tensor2img", "(", "[", "visuals", "[", "'gt'", "]", "]", ")", "\n", "del", "self", ".", "gt", "\n", "\n", "# tentative for out of GPU memory", "\n", "", "del", "self", ".", "input", "\n", "del", "self", ".", "output", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "if", "save_img", ":", "\n", "                ", "if", "self", ".", "opt", "[", "'is_train'", "]", ":", "\n", "                    ", "save_img_path", "=", "osp", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'visualization'", "]", ",", "img_name", ",", "\n", "f'{img_name}_{current_iter}.png'", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "opt", "[", "'val'", "]", "[", "'suffix'", "]", ":", "\n", "                        ", "save_img_path", "=", "osp", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'visualization'", "]", ",", "dataset_name", ",", "\n", "f'{img_name}_{self.opt[\"val\"][\"suffix\"]}.png'", ")", "\n", "", "else", ":", "\n", "                        ", "save_img_path", "=", "osp", ".", "join", "(", "self", ".", "opt", "[", "'path'", "]", "[", "'visualization'", "]", ",", "dataset_name", ",", "\n", "f'{img_name}_{self.opt[\"name\"]}.png'", ")", "\n", "", "", "imwrite", "(", "res_img", ",", "save_img_path", ")", "\n", "\n", "", "if", "with_metrics", ":", "\n", "# calculate metrics", "\n", "                ", "for", "name", ",", "opt_", "in", "self", ".", "opt", "[", "'val'", "]", "[", "'metrics'", "]", ".", "items", "(", ")", ":", "\n", "                    ", "metric_data", "=", "dict", "(", "img", "=", "res_img", ",", "img2", "=", "gt_img", ")", "\n", "self", ".", "metric_results", "[", "name", "]", "+=", "calculate_metric", "(", "metric_data", ",", "opt_", ")", "\n", "#pbar.update(1)", "\n", "#pbar.set_description(f'Test {img_name}')", "\n", "#pbar.close()", "\n", "\n", "", "", "", "if", "with_metrics", ":", "\n", "            ", "for", "metric", "in", "self", ".", "metric_results", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "metric_results", "[", "metric", "]", "/=", "(", "idx", "+", "1", ")", "\n", "", "self", ".", "_log_validation_metric_values", "(", "current_iter", ",", "dataset_name", ",", "tb_logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.models.sdl_model.SDLModel.get_current_visuals": [[166, 172], ["collections.OrderedDict", "sdl_model.SDLModel.output.detach().cpu", "hasattr", "sdl_model.SDLModel.gt.detach().cpu", "sdl_model.SDLModel.output.detach", "sdl_model.SDLModel.gt.detach"], "methods", ["None"], ["", "", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "out_dict", "=", "OrderedDict", "(", ")", "\n", "out_dict", "[", "'result'", "]", "=", "self", ".", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "if", "hasattr", "(", "self", ",", "'gt'", ")", ":", "\n", "            ", "out_dict", "[", "'gt'", "]", "=", "self", ".", "gt", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "out_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.yangxy_sdl.data.cit_dataset.CITDataset.__init__": [[32, 48], ["torch.utils.data.Dataset.__init__", "cit_dataset.make_cit_dataset"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__", "home.repos.pwc.inspect_result.yangxy_sdl.data.cit_dataset.make_cit_dataset"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "CITDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "# file client (io backend)", "\n", "self", ".", "file_client", "=", "None", "\n", "self", ".", "io_backend_opt", "=", "opt", "[", "'io_backend'", "]", "\n", "self", ".", "mean", "=", "opt", "[", "'mean'", "]", "if", "'mean'", "in", "opt", "else", "None", "\n", "self", ".", "std", "=", "opt", "[", "'std'", "]", "if", "'std'", "in", "opt", "else", "None", "\n", "self", ".", "task", "=", "opt", "[", "'task'", "]", "\n", "self", ".", "extend_t", "=", "opt", "[", "'extend_t'", "]", "if", "'extend_t'", "in", "opt", "else", "False", "\n", "\n", "self", ".", "cit_folders", "=", "opt", "[", "'dataroot_cit'", "]", "\n", "\n", "self", ".", "paths", "=", "[", "]", "\n", "for", "cit_folder", "in", "self", ".", "cit_folders", ":", "\n", "            ", "self", ".", "paths", "+=", "make_cit_dataset", "(", "cit_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.data.cit_dataset.CITDataset.__getitem__": [[49, 112], ["len", "sorted", "numpy.float32", "cit_dataset.CITDataset.file_client.get", "basicsr.utils.imfrombytes", "cit_dataset.CITDataset.file_client.get", "basicsr.utils.imfrombytes", "cit_dataset.CITDataset.file_client.get", "basicsr.utils.imfrombytes", "basicsr.utils.img2tensor", "basicsr.utils.FileClient", "random.sample", "basicsr.data.transforms.augment", "torchvision.transforms.functional.normalize", "torchvision.transforms.functional.normalize", "torchvision.transforms.functional.normalize", "torch.cat", "cit_dataset.CITDataset.io_backend_opt.pop", "range", "random.random", "sorted.reverse", "random.random", "basicsr.data.transforms.paired_random_crop", "cv2.resize", "cv2.resize", "cv2.resize", "random.random"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "file_client", "is", "None", ":", "\n", "            ", "self", ".", "file_client", "=", "FileClient", "(", "self", ".", "io_backend_opt", ".", "pop", "(", "'type'", ")", ",", "**", "self", ".", "io_backend_opt", ")", "\n", "\n", "# Load gt and lq images. Dimension order: HWC; channel order: BGR;", "\n", "# image range: [0, 1], float32.", "\n", "", "num_frame", "=", "len", "(", "self", ".", "paths", "[", "index", "]", ")", "\n", "idxes", "=", "sorted", "(", "random", ".", "sample", "(", "range", "(", "num_frame", ")", ",", "3", ")", ")", "\n", "if", "self", ".", "task", "==", "'i2i'", "or", "self", ".", "task", "==", "'morphing'", ":", "\n", "            ", "idxes", "[", "0", "]", ",", "idxes", "[", "2", "]", "=", "0", ",", "num_frame", "-", "1", "\n", "\n", "", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "idxes", ".", "reverse", "(", ")", "\n", "\n", "# optional tricks", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.25", "and", "self", ".", "task", "!=", "'vfi'", ":", "\n", "                ", "idxes", "[", "1", "]", "=", "num_frame", "-", "1", "if", "self", ".", "task", "==", "'i2i'", "else", "(", "num_frame", "-", "1", ")", "//", "2", "\n", "\n", "", "", "t", "=", "np", ".", "float32", "(", "(", "idxes", "[", "1", "]", "-", "idxes", "[", "0", "]", ")", "/", "(", "idxes", "[", "2", "]", "-", "idxes", "[", "0", "]", ")", ")", "# float32", "\n", "\n", "# extend t from [0, 1] to [-1, 1]", "\n", "if", "self", ".", "extend_t", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "idxes", "=", "[", "num_frame", "-", "1", "-", "idx", "for", "idx", "in", "idxes", "]", "\n", "t", "=", "-", "t", "\n", "\n", "", "frame_paths", "=", "[", "self", ".", "paths", "[", "index", "]", "[", "idx", "]", "for", "idx", "in", "idxes", "]", "\n", "\n", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "frame_paths", "[", "1", "]", ",", "'frame_gt'", ")", "\n", "img_gt", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "frame_paths", "[", "0", "]", ",", "'frame_0'", ")", "\n", "img_0", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "frame_paths", "[", "2", "]", ",", "'frame_1'", ")", "\n", "img_1", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "\n", "# augmentation for training", "\n", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "            ", "gt_size", "=", "self", ".", "opt", "[", "'gt_size'", "]", "\n", "if", "self", ".", "task", "==", "'vfi'", ":", "\n", "# random crop", "\n", "                ", "img_gt", ",", "img_in", "=", "paired_random_crop", "(", "img_gt", ",", "[", "img_0", ",", "img_1", "]", ",", "gt_size", ",", "1", ")", "\n", "img_0", ",", "img_1", "=", "img_in", "\n", "", "else", ":", "\n", "                ", "img_gt", "=", "cv2", ".", "resize", "(", "img_gt", ",", "(", "gt_size", ",", "gt_size", ")", ")", "\n", "img_0", "=", "cv2", ".", "resize", "(", "img_0", ",", "(", "gt_size", ",", "gt_size", ")", ")", "\n", "img_1", "=", "cv2", ".", "resize", "(", "img_1", ",", "(", "gt_size", ",", "gt_size", ")", ")", "\n", "# flip, rotation", "\n", "", "img_gt", ",", "img_0", ",", "img_1", "=", "augment", "(", "[", "img_gt", ",", "img_0", ",", "img_1", "]", ",", "self", ".", "opt", "[", "'use_flip'", "]", ",", "self", ".", "opt", "[", "'use_rot'", "]", ")", "\n", "", "else", ":", "\n", "            ", "h", ",", "w", "=", "img_gt", ".", "shape", "[", ":", "2", "]", "\n", "nh", ",", "nw", "=", "h", "//", "32", "*", "32", ",", "w", "//", "32", "*", "32", "\n", "img_gt", ",", "img_0", ",", "img_1", "=", "img_gt", "[", ":", "nh", ",", ":", "nw", "]", ",", "img_0", "[", ":", "nh", ",", ":", "nw", "]", ",", "img_1", "[", ":", "nh", ",", ":", "nw", "]", "\n", "\n", "# BGR to RGB, HWC to CHW, numpy to tensor", "\n", "", "img_gt", ",", "img_0", ",", "img_1", "=", "img2tensor", "(", "[", "img_gt", ",", "img_0", ",", "img_1", "]", ",", "bgr2rgb", "=", "True", ",", "float32", "=", "True", ")", "\n", "# normalize", "\n", "if", "self", ".", "mean", "is", "not", "None", "or", "self", ".", "std", "is", "not", "None", ":", "\n", "            ", "normalize", "(", "img_0", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "inplace", "=", "True", ")", "\n", "normalize", "(", "img_1", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "inplace", "=", "True", ")", "\n", "normalize", "(", "img_gt", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "inplace", "=", "True", ")", "\n", "\n", "", "inputs", "=", "img_0", "if", "self", ".", "task", "==", "'i2i'", "else", "torch", ".", "cat", "(", "(", "img_0", ",", "img_1", ")", ",", "0", ")", "\n", "return", "{", "'in'", ":", "inputs", ",", "'gt'", ":", "img_gt", ",", "'t'", ":", "t", ",", "'lq_path'", ":", "frame_paths", "[", "0", "]", ",", "'gt_path'", ":", "frame_paths", "[", "1", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.data.cit_dataset.CITDataset.__len__": [[113, 115], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yangxy_sdl.data.cit_dataset.make_cit_dataset": [[14, 26], ["enumerate", "os.listdir", "os.path.join", "clips_path.append", "sorted", "os.path.isdir", "os.listdir", "clips_path[].append", "os.path.join"], "function", ["None"], ["def", "make_cit_dataset", "(", "path", ")", ":", "\n", "    ", "clips_path", "=", "[", "]", "\n", "\n", "for", "index", ",", "folder", "in", "enumerate", "(", "os", ".", "listdir", "(", "path", ")", ")", ":", "\n", "        ", "clips_folder", "=", "os", ".", "path", ".", "join", "(", "path", ",", "folder", ")", "\n", "if", "not", "(", "os", ".", "path", ".", "isdir", "(", "clips_folder", ")", ")", ":", "\n", "            ", "continue", "\n", "", "clips_path", ".", "append", "(", "[", "]", ")", "\n", "\n", "for", "image", "in", "sorted", "(", "os", ".", "listdir", "(", "clips_folder", ")", ")", ":", "\n", "            ", "clips_path", "[", "index", "]", ".", "append", "(", "os", ".", "path", ".", "join", "(", "clips_folder", ",", "image", ")", ")", "\n", "", "", "return", "clips_path", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.data.style_dataset.StyleDataset.__init__": [[19, 38], ["torch.utils.data.Dataset.__init__", "sorted", "sorted", "list", "list", "basicsr.utils.scandir", "basicsr.utils.scandir"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "StyleDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "# file client (io backend)", "\n", "self", ".", "file_client", "=", "None", "\n", "self", ".", "io_backend_opt", "=", "opt", "[", "'io_backend'", "]", "\n", "self", ".", "mean", "=", "opt", "[", "'mean'", "]", "if", "'mean'", "in", "opt", "else", "None", "\n", "self", ".", "std", "=", "opt", "[", "'std'", "]", "if", "'std'", "in", "opt", "else", "None", "\n", "self", ".", "task", "=", "opt", "[", "'task'", "]", "\n", "\n", "self", ".", "content_folders", "=", "opt", "[", "'dataroot_content'", "]", "\n", "self", ".", "style_folders", "=", "opt", "[", "'dataroot_style'", "]", "\n", "\n", "self", ".", "paths", ",", "self", ".", "paths_style", "=", "[", "]", ",", "[", "]", "\n", "for", "content_folder", "in", "self", ".", "content_folders", ":", "\n", "            ", "self", ".", "paths", "+=", "sorted", "(", "list", "(", "scandir", "(", "content_folder", ",", "recursive", "=", "True", ",", "full_path", "=", "True", ")", ")", ")", "\n", "\n", "", "for", "style_folder", "in", "self", ".", "style_folders", ":", "\n", "            ", "self", ".", "paths_style", "+=", "sorted", "(", "list", "(", "scandir", "(", "style_folder", ",", "recursive", "=", "True", ",", "full_path", "=", "True", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.data.style_dataset.StyleDataset.__getitem__": [[39, 73], ["random.randint", "numpy.float32", "style_dataset.StyleDataset.file_client.get", "basicsr.utils.imfrombytes", "style_dataset.StyleDataset.file_client.get", "basicsr.utils.imfrombytes", "cv2.resize", "cv2.resize", "basicsr.utils.img2tensor", "basicsr.utils.FileClient", "random.random", "basicsr.data.transforms.paired_random_crop", "basicsr.data.transforms.augment", "torchvision.transforms.functional.normalize", "torchvision.transforms.functional.normalize", "style_dataset.StyleDataset.io_backend_opt.pop", "len"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "file_client", "is", "None", ":", "\n", "            ", "self", ".", "file_client", "=", "FileClient", "(", "self", ".", "io_backend_opt", ".", "pop", "(", "'type'", ")", ",", "**", "self", ".", "io_backend_opt", ")", "\n", "\n", "# Load gt and lq images. Dimension order: HWC; channel order: BGR;", "\n", "# image range: [0, 1], float32.", "\n", "", "index_s", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "paths_style", ")", "-", "1", ")", "\n", "\n", "t", "=", "np", ".", "float32", "(", "random", ".", "random", "(", ")", ")", "# float32", "\n", "\n", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "self", ".", "paths", "[", "index", "]", ",", "'content'", ")", "\n", "img_content", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "self", ".", "paths_style", "[", "index_s", "]", ",", "'style'", ")", "\n", "img_style", "=", "imfrombytes", "(", "img_bytes", ",", "float32", "=", "True", ")", "\n", "\n", "img_content", "=", "cv2", ".", "resize", "(", "img_content", ",", "(", "512", ",", "512", ")", ")", "\n", "img_style", "=", "cv2", ".", "resize", "(", "img_style", ",", "(", "512", ",", "512", ")", ")", "\n", "\n", "# augmentation for training", "\n", "if", "self", ".", "opt", "[", "'phase'", "]", "==", "'train'", ":", "\n", "            ", "gt_size", "=", "self", ".", "opt", "[", "'gt_size'", "]", "\n", "# random crop", "\n", "img_content", ",", "img_style", "=", "paired_random_crop", "(", "img_content", ",", "img_style", ",", "gt_size", ",", "1", ")", "\n", "# flip, rotation", "\n", "img_content", ",", "img_style", "=", "augment", "(", "[", "img_content", ",", "img_style", "]", ",", "self", ".", "opt", "[", "'use_flip'", "]", ",", "self", ".", "opt", "[", "'use_rot'", "]", ")", "\n", "\n", "# BGR to RGB, HWC to CHW, numpy to tensor", "\n", "", "img_content", ",", "img_style", "=", "img2tensor", "(", "[", "img_content", ",", "img_style", "]", ",", "bgr2rgb", "=", "True", ",", "float32", "=", "True", ")", "\n", "# normalize", "\n", "if", "self", ".", "mean", "is", "not", "None", "or", "self", ".", "std", "is", "not", "None", ":", "\n", "            ", "normalize", "(", "img_content", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "inplace", "=", "True", ")", "\n", "normalize", "(", "img_style", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "inplace", "=", "True", ")", "\n", "\n", "", "return", "{", "'content'", ":", "img_content", ",", "'style'", ":", "img_style", ",", "'t'", ":", "t", ",", "'content_path'", ":", "self", ".", "paths", "[", "index", "]", ",", "'style_path'", ":", "self", ".", "paths_style", "[", "index_s", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.data.style_dataset.StyleDataset.__len__": [[74, 76], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yangxy_sdl.losses.__init__.build_loss_": [[12, 25], ["copy.deepcopy", "copy.deepcopy.pop", "basicsr.utils.get_root_logger", "basicsr.utils.get_root_logger.info", "basicsr.utils.registry.LOSS_REGISTRY.get"], "function", ["None"], [""]], "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.CharbonnierLoss.__init__": [[30, 38], ["torch.nn.Module.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__"], ["def", "__init__", "(", "self", ",", "loss_weight", "=", "1.0", ",", "reduction", "=", "'mean'", ",", "eps", "=", "1e-12", ")", ":", "\n", "        ", "super", "(", "CharbonnierLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "reduction", "not", "in", "[", "'none'", ",", "'mean'", ",", "'sum'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unsupported reduction mode: {reduction}. '", "f'Supported ones are: {_reduction_modes}'", ")", "\n", "\n", "", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.CharbonnierLoss.forward": [[39, 48], ["losses.charbonnier_loss"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.charbonnier_loss"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "weight", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pred (Tensor): of shape (N, C, H, W). Predicted tensor.\n            target (Tensor): of shape (N, C, H, W). Ground truth tensor.\n            weight (Tensor, optional): of shape (N, C, H, W). Element-wise\n                weights. Default: None.\n        \"\"\"", "\n", "return", "self", ".", "loss_weight", "*", "charbonnier_loss", "(", "pred", ",", "target", ",", "weight", ",", "eps", "=", "self", ".", "eps", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleReltLoss.__init__": [[109, 125], ["torch.nn.Module.__init__", "basicsr.archs.vgg_arch.VGGFeatureExtractor", "list", "layer_weights.keys"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__"], ["def", "__init__", "(", "self", ",", "\n", "layer_weights", ",", "\n", "vgg_type", "=", "'vgg19'", ",", "\n", "use_input_norm", "=", "True", ",", "\n", "range_norm", "=", "False", ",", "\n", "content_weight", "=", "1.0", ",", "\n", "style_weight", "=", "1.0", ",", "\n", "criterion", "=", "'l1'", ")", ":", "\n", "        ", "super", "(", "ContentStyleReltLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "content_weight", "=", "content_weight", "\n", "self", ".", "style_weight", "=", "style_weight", "\n", "self", ".", "vgg", "=", "VGGFeatureExtractor", "(", "\n", "layer_name_list", "=", "list", "(", "layer_weights", ".", "keys", "(", ")", ")", ",", "\n", "vgg_type", "=", "vgg_type", ",", "\n", "use_input_norm", "=", "use_input_norm", ",", "\n", "range_norm", "=", "range_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleReltLoss.forward": [[126, 155], ["losses.ContentStyleReltLoss.vgg", "losses.ContentStyleReltLoss.vgg", "losses.ContentStyleReltLoss.vgg", "losses.ContentStyleReltLoss.keys", "content.detach", "style.detach", "losses.calc_emd_loss", "losses.calc_emd_loss", "losses.calc_emd_loss", "calc_emd_loss.sum", "calc_emd_loss.sum", "torch.max", "calc_emd_loss.min", "calc_emd_loss.min", "m1.mean", "m2.mean", "torch.abs().mean", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.calc_emd_loss", "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.calc_emd_loss", "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.calc_emd_loss"], ["", "def", "forward", "(", "self", ",", "x", ",", "content", ",", "style", ")", ":", "\n", "        ", "\"\"\"Forward Function.\n        Args:\n            pred (Tensor): of shape (N, C, H, W). Predicted tensor.\n            target (Tensor): of shape (N, C, H, W). Ground truth tensor.\n        \"\"\"", "\n", "x_features", "=", "self", ".", "vgg", "(", "x", ")", "\n", "c_features", "=", "self", ".", "vgg", "(", "content", ".", "detach", "(", ")", ")", "\n", "s_features", "=", "self", ".", "vgg", "(", "style", ".", "detach", "(", ")", ")", "\n", "\n", "style_loss", ",", "content_loss", "=", "0", ",", "0", "\n", "for", "k", "in", "x_features", ".", "keys", "(", ")", ":", "\n", "            ", "dM", "=", "1.", "\n", "Mx", "=", "calc_emd_loss", "(", "x_features", "[", "k", "]", ",", "x_features", "[", "k", "]", ")", "\n", "Mx", "=", "Mx", "/", "Mx", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "My", "=", "calc_emd_loss", "(", "c_features", "[", "k", "]", ",", "c_features", "[", "k", "]", ")", "\n", "My", "=", "My", "/", "My", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "content_loss", "=", "content_loss", "+", "torch", ".", "abs", "(", "dM", "*", "(", "Mx", "-", "My", ")", ")", ".", "mean", "(", ")", "*", "x_features", "[", "k", "]", ".", "shape", "[", "2", "]", "*", "x_features", "[", "k", "]", ".", "shape", "[", "3", "]", "\n", "\n", "CX_M", "=", "calc_emd_loss", "(", "x_features", "[", "k", "]", ",", "s_features", "[", "k", "]", ")", "\n", "#m1 = CX_M.min(2)", "\n", "#m2 = CX_M.min(1)", "\n", "#m = torch.cat([m1.mean(), m2.mean()])", "\n", "#style_loss = style_loss + torch.max(m)", "\n", "m1", "=", "CX_M", ".", "min", "(", "2", ")", "[", "0", "]", ".", "data", "\n", "m2", "=", "CX_M", ".", "min", "(", "1", ")", "[", "0", "]", ".", "data", "\n", "style_loss", "=", "style_loss", "+", "torch", ".", "max", "(", "m1", ".", "mean", "(", ")", ",", "m2", ".", "mean", "(", ")", ")", "\n", "\n", "", "return", "self", ".", "content_weight", "*", "content_loss", ",", "self", ".", "style_weight", "*", "style_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__": [[161, 178], ["torch.nn.Module.__init__", "torch.nn.MSELoss", "basicsr.archs.vgg_arch.VGGFeatureExtractor", "list", "layer_weights.keys"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.__init__"], ["def", "__init__", "(", "self", ",", "\n", "layer_weights", ",", "\n", "vgg_type", "=", "'vgg19'", ",", "\n", "use_input_norm", "=", "True", ",", "\n", "range_norm", "=", "False", ",", "\n", "content_weight", "=", "1.0", ",", "\n", "style_weight", "=", "1.0", ",", "\n", "criterion", "=", "'l1'", ")", ":", "\n", "        ", "super", "(", "ContentStyleLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "content_weight", "=", "content_weight", "\n", "self", ".", "style_weight", "=", "style_weight", "\n", "self", ".", "vgg", "=", "VGGFeatureExtractor", "(", "\n", "layer_name_list", "=", "list", "(", "layer_weights", ".", "keys", "(", ")", ")", ",", "\n", "vgg_type", "=", "vgg_type", ",", "\n", "use_input_norm", "=", "use_input_norm", ",", "\n", "range_norm", "=", "range_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.ContentStyleLoss.forward": [[179, 203], ["losses.ContentStyleLoss.vgg", "losses.ContentStyleLoss.vgg", "losses.ContentStyleLoss.vgg", "losses.ContentStyleLoss.keys", "content.detach", "style.detach", "losses.calc_mean_std", "losses.calc_mean_std", "losses.ContentStyleLoss.mse_loss", "losses.ContentStyleLoss.mse_loss", "losses.ContentStyleLoss.mse_loss", "losses.ContentStyleLoss.mse_loss", "losses.mean_variance_norm", "losses.mean_variance_norm"], "methods", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.calc_mean_std", "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.calc_mean_std", "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.mean_variance_norm", "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.mean_variance_norm"], ["", "def", "forward", "(", "self", ",", "x", ",", "content", ",", "style", ",", "norm", "=", "False", ")", ":", "\n", "        ", "\"\"\"Forward Function.\n        Args:\n            pred (Tensor): of shape (N, C, H, W). Predicted tensor.\n            target (Tensor): of shape (N, C, H, W). Ground truth tensor.\n            norm(Bool): whether use mean_variance_norm for pred and target\n        \"\"\"", "\n", "x_features", "=", "self", ".", "vgg", "(", "x", ")", "\n", "c_features", "=", "self", ".", "vgg", "(", "content", ".", "detach", "(", ")", ")", "\n", "s_features", "=", "self", ".", "vgg", "(", "style", ".", "detach", "(", ")", ")", "\n", "\n", "style_loss", ",", "content_loss", "=", "0", ",", "0", "\n", "for", "k", "in", "x_features", ".", "keys", "(", ")", ":", "\n", "            ", "if", "(", "norm", "==", "False", ")", ":", "\n", "                ", "content_loss", "=", "content_loss", "+", "self", ".", "mse_loss", "(", "x_features", "[", "k", "]", ",", "c_features", "[", "k", "]", ")", "\n", "", "else", ":", "\n", "                ", "content_loss", "=", "content_loss", "+", "self", ".", "mse_loss", "(", "mean_variance_norm", "(", "x_features", "[", "k", "]", ")", ",", "\n", "mean_variance_norm", "(", "c_features", "[", "k", "]", ")", ")", "\n", "\n", "", "pred_mean", ",", "pred_std", "=", "calc_mean_std", "(", "x_features", "[", "k", "]", ")", "\n", "target_mean", ",", "target_std", "=", "calc_mean_std", "(", "s_features", "[", "k", "]", ")", "\n", "style_loss", "=", "style_loss", "+", "self", ".", "mse_loss", "(", "pred_mean", ",", "target_mean", ")", "+", "self", ".", "mse_loss", "(", "pred_std", ",", "target_std", ")", "\n", "\n", "", "return", "self", ".", "content_weight", "*", "content_loss", ",", "self", ".", "style_weight", "*", "style_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.charbonnier_loss": [[13, 16], ["torch.sqrt"], "function", ["None"], ["@", "weighted_loss", "\n", "def", "charbonnier_loss", "(", "pred", ",", "target", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "return", "torch", ".", "sqrt", "(", "(", "pred", "-", "target", ")", "**", "2", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.calc_emd_loss": [[53, 69], ["pred.permute.reshape", "torch.sqrt", "pred.permute.permute", "target.reshape", "torch.sqrt", "torch.bmm"], "function", ["None"], ["def", "calc_emd_loss", "(", "pred", ",", "target", ")", ":", "\n", "    ", "\"\"\"calculate emd loss.\n    Args:\n        pred (Tensor): of shape (N, C, H, W). Predicted tensor.\n        target (Tensor): of shape (N, C, H, W). Ground truth tensor.\n    \"\"\"", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "pred", ".", "shape", "\n", "pred", "=", "pred", ".", "reshape", "(", "[", "b", ",", "-", "1", ",", "w", "*", "h", "]", ")", "\n", "pred_norm", "=", "torch", ".", "sqrt", "(", "(", "pred", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "reshape", "(", "[", "b", ",", "-", "1", ",", "1", "]", ")", ")", "\n", "#pred = pred.transpose([0, 2, 1])", "\n", "pred", "=", "pred", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "target_t", "=", "target", ".", "reshape", "(", "[", "b", ",", "-", "1", ",", "w", "*", "h", "]", ")", "\n", "target_norm", "=", "torch", ".", "sqrt", "(", "(", "target", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "reshape", "(", "[", "b", ",", "1", ",", "-", "1", "]", ")", ")", "\n", "similarity", "=", "torch", ".", "bmm", "(", "pred", ",", "target_t", ")", "/", "pred_norm", "/", "target_norm", "\n", "dist", "=", "1.", "-", "similarity", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.calc_mean_std": [[70, 90], ["feat.reshape", "torch.sqrt", "feat_std.reshape.reshape", "feat.reshape", "torch.mean", "feat_mean.reshape.reshape", "len", "torch.var"], "function", ["None"], ["", "def", "calc_mean_std", "(", "feat", ",", "eps", "=", "1e-5", ")", ":", "\n", "    ", "\"\"\"calculate mean and standard deviation.\n    Args:\n        feat (Tensor): Tensor with shape (N, C, H, W).\n        eps (float): Default: 1e-5.\n    Return:\n        mean and std of feat\n        shape: [N, C, 1, 1]\n    \"\"\"", "\n", "size", "=", "feat", ".", "shape", "\n", "assert", "(", "len", "(", "size", ")", "==", "4", ")", "\n", "N", ",", "C", "=", "size", "[", ":", "2", "]", "\n", "feat_var", "=", "feat", ".", "reshape", "(", "[", "N", ",", "C", ",", "-", "1", "]", ")", "\n", "feat_var", "=", "torch", ".", "var", "(", "feat_var", ",", "axis", "=", "2", ")", "+", "eps", "\n", "feat_std", "=", "torch", ".", "sqrt", "(", "feat_var", ")", "\n", "feat_std", "=", "feat_std", ".", "reshape", "(", "[", "N", ",", "C", ",", "1", ",", "1", "]", ")", "\n", "feat_mean", "=", "feat", ".", "reshape", "(", "[", "N", ",", "C", ",", "-", "1", "]", ")", "\n", "feat_mean", "=", "torch", ".", "mean", "(", "feat_mean", ",", "axis", "=", "2", ")", "\n", "feat_mean", "=", "feat_mean", ".", "reshape", "(", "[", "N", ",", "C", ",", "1", ",", "1", "]", ")", "\n", "return", "feat_mean", ",", "feat_std", "\n", "\n"]], "home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.mean_variance_norm": [[92, 103], ["losses.calc_mean_std", "std.expand", "mean.expand"], "function", ["home.repos.pwc.inspect_result.yangxy_sdl.losses.losses.calc_mean_std"], ["", "def", "mean_variance_norm", "(", "feat", ")", ":", "\n", "    ", "\"\"\"mean_variance_norm.\n    Args:\n        feat (Tensor): Tensor with shape (N, C, H, W).\n    Return:\n        Normalized feat with shape (N, C, H, W)\n    \"\"\"", "\n", "size", "=", "feat", ".", "shape", "\n", "mean", ",", "std", "=", "calc_mean_std", "(", "feat", ")", "\n", "normalized_feat", "=", "(", "feat", "-", "mean", ".", "expand", "(", "size", ")", ")", "/", "std", ".", "expand", "(", "size", ")", "\n", "return", "normalized_feat", "\n", "\n"]]}