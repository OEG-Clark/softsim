{"home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.correlate": [[6, 36], ["numpy.apply_along_axis", "np.swapaxes.reshape", "numpy.swapaxes", "numpy.swapaxes", "numpy.correlate", "np.swapaxes.reshape", "len", "len"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.correlate"], ["def", "correlate", "(", "x", ",", "filt", ",", "axis", "=", "-", "1", ",", "mode", "=", "'same'", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        x:\n        filt:\n        axis:\n        mode:\n\n    Returns:\n\n    \"\"\"", "\n", "assert", "mode", "in", "[", "\"valid\"", ",", "\"same\"", ",", "\"full\"", "]", ",", "mode", "\n", "if", "axis", "<", "0", ":", "\n", "        ", "axis", "=", "x", ".", "ndim", "+", "axis", "\n", "", "if", "axis", "!=", "x", ".", "ndim", "-", "1", ":", "\n", "        ", "x", "=", "np", ".", "swapaxes", "(", "x", ",", "axis", ",", "-", "1", ")", "\n", "", "shape", "=", "x", ".", "shape", "\n", "y", "=", "np", ".", "apply_along_axis", "(", "\n", "lambda", "m", ":", "np", ".", "correlate", "(", "m", ",", "filt", ",", "mode", "=", "mode", ")", ",", "\n", "axis", "=", "-", "1", ",", "arr", "=", "x", ".", "reshape", "(", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", ")", "\n", ")", "\n", "if", "mode", "==", "\"full\"", ":", "\n", "        ", "shape", "=", "(", "*", "shape", "[", ":", "-", "1", "]", ",", "shape", "[", "-", "1", "]", "+", "len", "(", "filt", ")", "-", "1", ")", "\n", "", "elif", "mode", "==", "\"valid\"", ":", "\n", "        ", "shape", "=", "(", "*", "shape", "[", ":", "-", "1", "]", ",", "shape", "[", "-", "1", "]", "-", "(", "len", "(", "filt", ")", "-", "1", ")", ")", "\n", "", "y", "=", "y", ".", "reshape", "(", "shape", ")", "\n", "if", "axis", "!=", "x", ".", "ndim", "-", "1", ":", "\n", "        ", "y", "=", "np", ".", "swapaxes", "(", "y", ",", "axis", ",", "-", "1", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.meanfilt": [[38, 54], ["filters.correlate", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.correlate"], ["", "def", "meanfilt", "(", "x", ",", "n", ",", "axis", "=", "-", "1", ",", "mode", "=", "'same'", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        x:\n        n:\n        axis:\n\n    Returns:\n\n    >>> x = np.ones((2, 5, 3)).cumsum(1)\n    >>> x[0] **= 2\n    >>> meanfilt(x, 3, axis=1).shape\n    \"\"\"", "\n", "filt", "=", "np", ".", "ones", "(", "n", ")", "/", "n", "\n", "return", "correlate", "(", "x", ",", "filt", ",", "axis", "=", "axis", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.medfilt": [[56, 84], ["numpy.apply_along_axis().reshape", "numpy.swapaxes", "numpy.swapaxes", "numpy.apply_along_axis", "scipy.signal.medfilt", "np.swapaxes.reshape"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.medfilt"], ["", "def", "medfilt", "(", "x", ",", "n", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        x:\n        n:\n        axis:\n\n    Returns:\n\n    >>> x = np.ones((2, 5, 3)).cumsum(1)\n    >>> x[0] **= 2\n    >>> medfilt(x, 3, axis=1).shape\n    \"\"\"", "\n", "if", "n", "==", "1", ":", "\n", "        ", "return", "x", "\n", "", "if", "axis", "<", "0", ":", "\n", "        ", "axis", "=", "x", ".", "ndim", "+", "axis", "\n", "", "if", "axis", "!=", "x", ".", "ndim", "-", "1", ":", "\n", "        ", "x", "=", "np", ".", "swapaxes", "(", "x", ",", "axis", ",", "-", "1", ")", "\n", "", "shape", "=", "x", ".", "shape", "\n", "y", "=", "np", ".", "apply_along_axis", "(", "\n", "lambda", "m", ":", "signal", ".", "medfilt", "(", "m", ",", "n", ")", ",", "\n", "axis", "=", "-", "1", ",", "arr", "=", "x", ".", "reshape", "(", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", ")", "\n", ")", ".", "reshape", "(", "shape", ")", "\n", "if", "axis", "!=", "x", ".", "ndim", "-", "1", ":", "\n", "        ", "y", "=", "np", ".", "swapaxes", "(", "y", ",", "axis", ",", "-", "1", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.maxfilt": [[86, 110], ["numpy.pad", "paderbox.array.segment.segment_axis().max", "range", "paderbox.array.segment.segment_axis"], "function", ["None"], ["", "def", "maxfilt", "(", "x", ",", "n", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        x:\n        n:\n        axis:\n\n    Returns:\n\n    >>> x = np.ones((2, 5, 3)).cumsum(1)\n    >>> x[0] **= 2\n    >>> maxfilt(x, 3, axis=1).shape\n    \"\"\"", "\n", "assert", "n", "%", "2", "==", "1", ",", "n", "\n", "if", "axis", "<", "0", ":", "\n", "        ", "axis", "=", "x", ".", "ndim", "+", "axis", "\n", "", "pad_width", "=", "[", "[", "0", ",", "0", "]", "for", "_", "in", "range", "(", "x", ".", "ndim", ")", "]", "\n", "pad_width", "[", "axis", "]", "=", "[", "(", "n", "-", "1", ")", "//", "2", ",", "(", "n", "-", "1", ")", "//", "2", "]", "\n", "x", "=", "np", ".", "pad", "(", "x", ",", "pad_width", ",", "mode", "=", "\"constant\"", ")", "\n", "x", "=", "segment_axis", "(", "\n", "x", ",", "n", ",", "shift", "=", "1", ",", "axis", "=", "axis", ",", "pad_mode", "=", "\"cut\"", "\n", ")", ".", "max", "(", "axis", "+", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.stepfilt": [[112, 136], ["numpy.pad", "filters.correlate", "numpy.concatenate", "range", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.correlate"], ["", "def", "stepfilt", "(", "x", ",", "n", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        x:\n        n:\n        axis:\n\n    Returns:\n\n    >>> x = np.ones((2, 5, 3)).cumsum(1)\n    >>> x[0] **= 2\n    >>> stepfilt(x, 4, axis=1).shape\n    \"\"\"", "\n", "assert", "n", "%", "2", "==", "0", "\n", "if", "axis", "<", "0", ":", "\n", "        ", "axis", "=", "x", ".", "ndim", "+", "axis", "\n", "", "step_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "-", "np", ".", "ones", "(", "n", "//", "2", ")", ",", "np", ".", "ones", "(", "n", "//", "2", ")", ")", "\n", ")", "/", "(", "n", "//", "2", ")", "\n", "pad_width", "=", "[", "[", "0", ",", "0", "]", "for", "_", "in", "range", "(", "x", ".", "ndim", ")", "]", "\n", "pad_width", "[", "axis", "]", "=", "[", "n", "//", "2", ",", "n", "//", "2", "-", "1", "]", "\n", "x", "=", "np", ".", "pad", "(", "x", ",", "pad_width", ",", "mode", "=", "\"constant\"", ")", "\n", "return", "correlate", "(", "x", ",", "step_filter", ",", "axis", "=", "axis", ",", "mode", "=", "\"valid\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.utils.segment.segment_batch": [[7, 49], ["max", "padertorch.data.segment.Segmenter", "padertorch.data.segment.Segmenter.", "len", "print", "enumerate", "min", "max", "max"], "function", ["None"], ["def", "segment_batch", "(", "batch", ",", "max_length", ",", "overlap", ",", "keys", "=", "(", "'stft'", ",", ")", ",", "axis", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        batch:\n        max_length:\n        overlap:\n        keys:\n        axis:\n\n    Returns:\n\n    >>> batch = {'example_id': ['a', 'b', 'c'], 'stft': np.cumsum(np.ones((3,1,50,7,2)), 2), 'seq_len':[50,47,46]}\n    >>> segments = segment_batch(batch,12,2)\n    >>> segments\n    >>> len(segments), segments[0].keys(), segments[0]['stft'].shape\n    \"\"\"", "\n", "sequence_lengths_batch", "=", "batch", "[", "\"seq_len\"", "]", "\n", "if", "max", "(", "sequence_lengths_batch", ")", ">", "max_length", ":", "\n", "        ", "segmenter", "=", "Segmenter", "(", "\n", "length", "=", "max_length", ",", "shift", "=", "max_length", "-", "overlap", ",", "\n", "include_keys", "=", "keys", ",", "copy_keys", "=", "(", "'example_id'", ",", ")", ",", "axis", "=", "axis", ",", "\n", "mode", "=", "'constant'", ",", "padding", "=", "True", ",", "\n", ")", "\n", "segments", "=", "segmenter", "(", "batch", ")", "\n", "m", "=", "len", "(", "segments", ")", "\n", "print", "(", "\n", "f'Split batch with sequence length {max(sequence_lengths_batch)} '", "\n", "f'into {m} segments.'", ")", "\n", "for", "i", ",", "segment", "in", "enumerate", "(", "segments", ")", ":", "\n", "            ", "segment", "[", "'example_id'", "]", "=", "[", "\n", "f'{example_id}_!segment!_{i}_{m}'", "\n", "for", "example_id", "in", "segment", "[", "'example_id'", "]", "\n", "]", "\n", "segment", "[", "'seq_len'", "]", "=", "[", "\n", "min", "(", "max_length", ",", "sl", "-", "segment", "[", "'segment_start'", "]", ")", "\n", "for", "sl", "in", "sequence_lengths_batch", "\n", "]", "\n", "segment", "[", "'stft'", "]", "=", "segment", "[", "'stft'", "]", "[", ":", ",", ":", ",", ":", "max", "(", "segment", "[", "'seq_len'", "]", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "segments", "=", "[", "batch", "]", "\n", "", "return", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.utils.segment.merge_segments": [[51, 72], ["sorted", "segmental_output.keys", "audio_id.split", "int", "range", "numpy.concatenate", "merged_output[].append", "math.ceil"], "function", ["None"], ["", "def", "merge_segments", "(", "segmental_output", ",", "segment_overlap", ")", ":", "\n", "    ", "merged_output", "=", "{", "}", "\n", "for", "audio_id", "in", "sorted", "(", "segmental_output", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "\"_!segment!_0_\"", "in", "audio_id", ":", "\n", "            ", "audio_id", ",", "n_segments", "=", "audio_id", ".", "split", "(", "\"_!segment!_0_\"", ")", "\n", "n_segments", "=", "int", "(", "n_segments", ")", "\n", "merged_output", "[", "audio_id", "]", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_segments", ")", ":", "\n", "                ", "score_arr", "=", "segmental_output", "[", "\n", "f'{audio_id}_!segment!_{i}_{n_segments}'", "]", "\n", "if", "i", "<", "(", "n_segments", "-", "1", ")", "and", "segment_overlap", ">", "0", ":", "\n", "                    ", "score_arr", "=", "score_arr", "[", "...", ",", ":", "-", "ceil", "(", "segment_overlap", "/", "2", ")", ",", ":", "]", "\n", "", "if", "i", ">", "0", "and", "segment_overlap", ">", "0", ":", "\n", "                    ", "score_arr", "=", "score_arr", "[", "...", ",", "segment_overlap", "//", "2", ":", ",", ":", "]", "\n", "", "merged_output", "[", "audio_id", "]", ".", "append", "(", "score_arr", ")", "\n", "", "merged_output", "[", "audio_id", "]", "=", "np", ".", "concatenate", "(", "\n", "merged_output", "[", "audio_id", "]", ",", "axis", "=", "-", "2", "\n", ")", "\n", "", "elif", "\"_!segment!_\"", "not", "in", "audio_id", ":", "\n", "            ", "merged_output", "[", "audio_id", "]", "=", "segmental_output", "[", "audio_id", "]", "\n", "", "", "return", "merged_output", "\n", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label_crnn.tuning.config": [[26, 67], ["paderbox.io.json_module.load_json", "isinstance", "paderbox.io.json_module.load_json", "paderbox.io.json_module.load_json.get", "str", "pb_sed.experiments.strong_label_crnn.inference.ex.observers.append", "len", "len", "sorted", "sorted", "len", "pathlib.Path().exists", "sacred.observers.FileStorageObserver.create", "paderbox.utils.timer.timeStamped", "pathlib.Path", "str", "str", "pathlib.Path", "pathlib.Path", "pathlib.Path().glob", "d.is_dir", "pathlib.Path().glob", "d.is_dir", "pathlib.Path", "pathlib.Path"], "function", ["None"], ["@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "debug", "=", "False", "\n", "timestamp", "=", "timeStamped", "(", "''", ")", "[", "1", ":", "]", "+", "(", "'_debug'", "if", "debug", "else", "''", ")", "\n", "\n", "weak_label_crnn_hyper_params_dir", "=", "''", "\n", "assert", "len", "(", "weak_label_crnn_hyper_params_dir", ")", ">", "0", ",", "'Set weak_label_crnn_hyper_params_dir on the command line.'", "\n", "weak_label_crnn_tuning_config", "=", "load_json", "(", "Path", "(", "weak_label_crnn_hyper_params_dir", ")", "/", "'1'", "/", "'config.json'", ")", "\n", "weak_label_crnn_dirs", "=", "weak_label_crnn_tuning_config", "[", "'crnn_dirs'", "]", "\n", "assert", "len", "(", "weak_label_crnn_dirs", ")", ">", "0", ",", "'weak_label_crnn_dirs must not be empty.'", "\n", "weak_label_crnn_checkpoints", "=", "weak_label_crnn_tuning_config", "[", "'crnn_checkpoints'", "]", "\n", "del", "weak_label_crnn_tuning_config", "\n", "\n", "strong_label_crnn_group_dir", "=", "''", "\n", "if", "isinstance", "(", "strong_label_crnn_group_dir", ",", "list", ")", ":", "\n", "        ", "strong_label_crnn_dirs", "=", "sorted", "(", "[", "\n", "str", "(", "d", ")", "for", "g", "in", "strong_label_crnn_group_dir", "for", "d", "in", "Path", "(", "g", ")", ".", "glob", "(", "'202*'", ")", "if", "d", ".", "is_dir", "(", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "strong_label_crnn_dirs", "=", "sorted", "(", "[", "str", "(", "d", ")", "for", "d", "in", "Path", "(", "strong_label_crnn_group_dir", ")", ".", "glob", "(", "'202*'", ")", "if", "d", ".", "is_dir", "(", ")", "]", ")", "\n", "", "assert", "len", "(", "strong_label_crnn_dirs", ")", ">", "0", ",", "'strong_label_crnn_dirs must not be empty.'", "\n", "strong_label_crnn_checkpoints", "=", "'ckpt_best_macro_fscore_strong.pth'", "\n", "strong_crnn_config", "=", "load_json", "(", "Path", "(", "strong_label_crnn_dirs", "[", "0", "]", ")", "/", "'1'", "/", "'config.json'", ")", "\n", "data_provider", "=", "strong_crnn_config", "[", "'data_provider'", "]", "\n", "database_name", "=", "strong_crnn_config", ".", "get", "(", "'database_name'", ",", "'desed'", ")", "\n", "storage_dir", "=", "str", "(", "storage_root", "/", "'strong_label_crnn'", "/", "database_name", "/", "'hyper_params'", "/", "timestamp", ")", "\n", "assert", "not", "Path", "(", "storage_dir", ")", ".", "exists", "(", ")", "\n", "del", "strong_crnn_config", "\n", "data_provider", "[", "'min_audio_length'", "]", "=", ".01", "\n", "data_provider", "[", "'cached_datasets'", "]", "=", "None", "\n", "\n", "device", "=", "0", "\n", "\n", "validation_set_name", "=", "'validation'", "\n", "validation_ground_truth_filepath", "=", "None", "\n", "eval_set_name", "=", "'eval_public'", "\n", "eval_ground_truth_filepath", "=", "None", "\n", "\n", "medfilt_lengths", "=", "[", "31", "]", "if", "debug", "else", "[", "301", ",", "251", ",", "201", ",", "151", ",", "101", ",", "81", ",", "61", ",", "51", ",", "41", ",", "31", ",", "21", ",", "11", "]", "\n", "\n", "ex", ".", "observers", ".", "append", "(", "FileStorageObserver", ".", "create", "(", "storage_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label_crnn.tuning.main": [[69, 216], ["print", "print", "print", "sacred.commands.print_config", "print", "pathlib.Path", "pb_sed.database.desed.provider.DESEDProvider.from_config", "DESEDProvider.from_config.test_transform.label_encoder.initialize_labels", "DESEDProvider.from_config.get_dataset", "pb_sed.experiments.weak_label_crnn.inference.tagging", "pb_sed.models.strong_label.crnn.tune_sound_event_detection", "paderbox.io.json_module.dump_json", "sed_scores_eval.collar_based.best_fscore", "paderbox.io.json_module.dump_json", "sed_scores_eval.collar_based.best_fscore", "paderbox.io.json_module.dump_json", "print", "isinstance", "isinstance", "pb_sed.models.weak_label.CRNN.from_storage_dir", "isinstance", "pathlib.Path().exists", "numpy.array", "functools.partial", "functools.partial", "functools.partial", "isinstance", "isinstance", "pb_sed.models.strong_label.CRNN.from_storage_dir", "numpy.array", "numpy.arange", "data_provider.get_dataset.map", "os.makedirs", "pb_sed.experiments.strong_label_crnn.inference.ex.run", "len", "zip", "range", "DESEDProvider.from_config.db.get_dataset", "len", "zip", "pathlib.Path", "str", "len", "pathlib.Path", "str", "pathlib.Path", "pathlib.Path", "DESEDProvider.from_config.get_raw", "DESEDProvider.from_config.get_raw"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.tagging", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_sound_event_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_raw", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_raw"], ["", "@", "ex", ".", "automain", "\n", "def", "main", "(", "\n", "_run", ",", "storage_dir", ",", "debug", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "weak_label_crnn_dirs", ",", "weak_label_crnn_checkpoints", ",", "\n", "strong_label_crnn_dirs", ",", "strong_label_crnn_checkpoints", ",", "\n", "data_provider", ",", "validation_set_name", ",", "validation_ground_truth_filepath", ",", "\n", "eval_set_name", ",", "eval_ground_truth_filepath", ",", "\n", "medfilt_lengths", ",", "device", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'##### Tuning #####'", ")", "\n", "print", "(", ")", "\n", "print_config", "(", "_run", ")", "\n", "print", "(", "storage_dir", ")", "\n", "storage_dir", "=", "Path", "(", "storage_dir", ")", "\n", "\n", "if", "not", "isinstance", "(", "weak_label_crnn_checkpoints", ",", "list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "weak_label_crnn_checkpoints", ",", "str", ")", ",", "weak_label_crnn_checkpoints", "\n", "weak_label_crnn_checkpoints", "=", "len", "(", "weak_label_crnn_dirs", ")", "*", "[", "weak_label_crnn_checkpoints", "]", "\n", "", "weak_label_crnns", "=", "[", "\n", "weak_label", ".", "CRNN", ".", "from_storage_dir", "(", "\n", "storage_dir", "=", "crnn_dir", ",", "config_name", "=", "'1/config.json'", ",", "\n", "checkpoint_name", "=", "crnn_checkpoint", "\n", ")", "\n", "for", "crnn_dir", ",", "crnn_checkpoint", "in", "zip", "(", "weak_label_crnn_dirs", ",", "weak_label_crnn_checkpoints", ")", "\n", "]", "\n", "data_provider", "=", "DESEDProvider", ".", "from_config", "(", "data_provider", ")", "\n", "data_provider", ".", "test_transform", ".", "label_encoder", ".", "initialize_labels", "(", ")", "\n", "event_classes", "=", "data_provider", ".", "test_transform", ".", "label_encoder", ".", "inverse_label_mapping", "\n", "event_classes", "=", "[", "event_classes", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "event_classes", ")", ")", "]", "\n", "frame_shift", "=", "data_provider", ".", "test_transform", ".", "stft", ".", "shift", "\n", "frame_shift", "/=", "data_provider", ".", "audio_reader", ".", "target_sample_rate", "\n", "\n", "if", "validation_set_name", "==", "'validation'", "and", "not", "validation_ground_truth_filepath", ":", "\n", "        ", "database_root", "=", "Path", "(", "data_provider", ".", "get_raw", "(", "'validation'", ")", "[", "0", "]", "[", "'audio_path'", "]", ")", ".", "parent", ".", "parent", ".", "parent", ".", "parent", "\n", "validation_ground_truth_filepath", "=", "database_root", "/", "'metadata'", "/", "'validation'", "/", "'validation.tsv'", "\n", "", "elif", "validation_set_name", "==", "'eval_public'", "and", "not", "validation_ground_truth_filepath", ":", "\n", "        ", "database_root", "=", "Path", "(", "data_provider", ".", "get_raw", "(", "'eval_public'", ")", "[", "0", "]", "[", "'audio_path'", "]", ")", ".", "parent", ".", "parent", ".", "parent", ".", "parent", "\n", "validation_ground_truth_filepath", "=", "database_root", "/", "'metadata'", "/", "'eval'", "/", "'public.tsv'", "\n", "", "assert", "isinstance", "(", "validation_ground_truth_filepath", ",", "(", "str", ",", "Path", ")", ")", "and", "Path", "(", "validation_ground_truth_filepath", ")", ".", "exists", "(", ")", ",", "validation_ground_truth_filepath", "\n", "\n", "dataset", "=", "data_provider", ".", "get_dataset", "(", "validation_set_name", ")", "\n", "audio_durations", "=", "{", "\n", "example", "[", "'example_id'", "]", ":", "example", "[", "'audio_length'", "]", "\n", "for", "example", "in", "data_provider", ".", "db", ".", "get_dataset", "(", "validation_set_name", ")", "\n", "}", "\n", "\n", "timestamps", "=", "{", "\n", "audio_id", ":", "np", ".", "array", "(", "[", "0.", ",", "audio_durations", "[", "audio_id", "]", "]", ")", "\n", "for", "audio_id", "in", "audio_durations", "\n", "}", "\n", "tags", ",", "tagging_scores", ",", "_", "=", "tagging", "(", "\n", "weak_label_crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "None", ",", "None", ",", "\n", ")", "\n", "\n", "collar_based_params", "=", "{", "\n", "'onset_collar'", ":", ".2", ",", "\n", "'offset_collar'", ":", ".2", ",", "\n", "'offset_collar_rate'", ":", ".2", ",", "\n", "}", "\n", "psds_scenario_1", "=", "{", "\n", "'dtc_threshold'", ":", "0.7", ",", "\n", "'gtc_threshold'", ":", "0.7", ",", "\n", "'cttc_threshold'", ":", "None", ",", "\n", "'alpha_ct'", ":", ".0", ",", "\n", "'alpha_st'", ":", "1.", ",", "\n", "}", "\n", "psds_scenario_2", "=", "{", "\n", "'dtc_threshold'", ":", "0.1", ",", "\n", "'gtc_threshold'", ":", "0.1", ",", "\n", "'cttc_threshold'", ":", "0.3", ",", "\n", "'alpha_ct'", ":", ".5", ",", "\n", "'alpha_st'", ":", "1.", ",", "\n", "}", "\n", "metrics", "=", "{", "\n", "'f'", ":", "partial", "(", "\n", "base", ".", "f_collar", ",", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "return_onset_offset_bias", "=", "True", ",", "num_jobs", "=", "8", ",", "\n", "**", "collar_based_params", ",", "\n", ")", ",", "\n", "'auc1'", ":", "partial", "(", "\n", "base", ".", "psd_auc", ",", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "audio_durations", "=", "audio_durations", ",", "num_jobs", "=", "8", ",", "\n", "**", "psds_scenario_1", ",", "\n", ")", ",", "\n", "'auc2'", ":", "partial", "(", "\n", "base", ".", "psd_auc", ",", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "audio_durations", "=", "audio_durations", ",", "num_jobs", "=", "8", ",", "\n", "**", "psds_scenario_2", ",", "\n", ")", "\n", "}", "\n", "\n", "if", "not", "isinstance", "(", "strong_label_crnn_checkpoints", ",", "list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "strong_label_crnn_checkpoints", ",", "str", ")", ",", "strong_label_crnn_checkpoints", "\n", "strong_label_crnn_checkpoints", "=", "len", "(", "strong_label_crnn_dirs", ")", "*", "[", "strong_label_crnn_checkpoints", "]", "\n", "", "strong_label_crnns", "=", "[", "\n", "strong_label", ".", "CRNN", ".", "from_storage_dir", "(", "\n", "storage_dir", "=", "crnn_dir", ",", "config_name", "=", "'1/config.json'", ",", "\n", "checkpoint_name", "=", "crnn_checkpoint", "\n", ")", "\n", "for", "crnn_dir", ",", "crnn_checkpoint", "in", "zip", "(", "\n", "strong_label_crnn_dirs", ",", "strong_label_crnn_checkpoints", ")", "\n", "]", "\n", "\n", "def", "add_tag_condition", "(", "example", ")", ":", "\n", "        ", "example", "[", "\"tag_condition\"", "]", "=", "np", ".", "array", "(", "[", "\n", "tags", "[", "example_id", "]", "for", "example_id", "in", "example", "[", "\"example_id\"", "]", "]", ")", "\n", "return", "example", "\n", "\n", "", "timestamps", "=", "np", ".", "arange", "(", "0", ",", "10000", ")", "*", "frame_shift", "\n", "leaderboard", "=", "strong_label", ".", "crnn", ".", "tune_sound_event_detection", "(", "\n", "strong_label_crnns", ",", "dataset", ".", "map", "(", "add_tag_condition", ")", ",", "device", ",", "timestamps", ",", "\n", "event_classes", ",", "tags", ",", "metrics", ",", "\n", "tag_masking", "=", "{", "'f'", ":", "True", ",", "'auc1'", ":", "'?'", ",", "'auc2'", ":", "'?'", "}", ",", "\n", "medfilt_lengths", "=", "medfilt_lengths", ",", "\n", ")", "\n", "dump_json", "(", "leaderboard", "[", "'f'", "]", "[", "1", "]", ",", "storage_dir", "/", "f'sed_hyper_params_f.json'", ")", "\n", "f", ",", "p", ",", "r", ",", "thresholds", ",", "_", "=", "collar_based", ".", "best_fscore", "(", "\n", "scores", "=", "leaderboard", "[", "'auc1'", "]", "[", "2", "]", ",", "\n", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "**", "collar_based_params", ",", "num_jobs", "=", "8", "\n", ")", "\n", "for", "event_class", "in", "thresholds", ":", "\n", "        ", "leaderboard", "[", "'auc1'", "]", "[", "1", "]", "[", "event_class", "]", "[", "'threshold'", "]", "=", "thresholds", "[", "event_class", "]", "\n", "", "dump_json", "(", "leaderboard", "[", "'auc1'", "]", "[", "1", "]", ",", "storage_dir", "/", "'sed_hyper_params_psds1.json'", ")", "\n", "f", ",", "p", ",", "r", ",", "thresholds", ",", "_", "=", "collar_based", ".", "best_fscore", "(", "\n", "scores", "=", "leaderboard", "[", "'auc2'", "]", "[", "2", "]", ",", "\n", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "**", "collar_based_params", ",", "num_jobs", "=", "8", "\n", ")", "\n", "for", "event_class", "in", "thresholds", ":", "\n", "        ", "leaderboard", "[", "'auc2'", "]", "[", "1", "]", "[", "event_class", "]", "[", "'threshold'", "]", "=", "thresholds", "[", "event_class", "]", "\n", "", "dump_json", "(", "leaderboard", "[", "'auc2'", "]", "[", "1", "]", ",", "storage_dir", "/", "'sed_hyper_params_psds2.json'", ")", "\n", "for", "crnn_dir", "in", "strong_label_crnn_dirs", ":", "\n", "        ", "tuning_dir", "=", "Path", "(", "crnn_dir", ")", "/", "'hyper_params'", "\n", "os", ".", "makedirs", "(", "str", "(", "tuning_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "(", "tuning_dir", "/", "storage_dir", ".", "name", ")", ".", "symlink_to", "(", "storage_dir", ")", "\n", "", "print", "(", "storage_dir", ")", "\n", "\n", "if", "eval_set_name", ":", "\n", "        ", "evaluation", ".", "run", "(", "\n", "config_updates", "=", "{", "\n", "'debug'", ":", "debug", ",", "\n", "'strong_label_crnn_hyper_params_dir'", ":", "str", "(", "storage_dir", ")", ",", "\n", "'dataset_name'", ":", "eval_set_name", ",", "\n", "'ground_truth_filepath'", ":", "eval_ground_truth_filepath", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label_crnn.inference.config": [[30, 78], ["paderbox.io.json_module.load_json", "str", "paderbox.io.json_module.load_json", "ex.observers.append", "len", "len", "pathlib.Path().exists", "len", "len", "sacred.observers.FileStorageObserver.create", "paderbox.utils.timer.timeStamped", "pathlib.Path", "pathlib.Path", "pathlib.Path"], "function", ["None"], ["@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "debug", "=", "False", "\n", "timestamp", "=", "timeStamped", "(", "''", ")", "[", "1", ":", "]", "+", "(", "'_debug'", "if", "debug", "else", "''", ")", "\n", "\n", "strong_label_crnn_hyper_params_dir", "=", "''", "\n", "assert", "len", "(", "strong_label_crnn_hyper_params_dir", ")", ">", "0", ",", "'Set strong_label_crnn_hyper_params_dir on the command line.'", "\n", "strong_label_crnn_tuning_config", "=", "load_json", "(", "Path", "(", "strong_label_crnn_hyper_params_dir", ")", "/", "'1'", "/", "'config.json'", ")", "\n", "strong_label_crnn_dirs", "=", "strong_label_crnn_tuning_config", "[", "'strong_label_crnn_dirs'", "]", "\n", "assert", "len", "(", "strong_label_crnn_dirs", ")", ">", "0", ",", "'strong_label_crnn_dirs must not be empty.'", "\n", "strong_label_crnn_checkpoints", "=", "strong_label_crnn_tuning_config", "[", "'strong_label_crnn_checkpoints'", "]", "\n", "data_provider", "=", "strong_label_crnn_tuning_config", "[", "'data_provider'", "]", "\n", "database_name", "=", "strong_label_crnn_tuning_config", "[", "'database_name'", "]", "\n", "storage_dir", "=", "str", "(", "storage_root", "/", "'strong_label_crnn'", "/", "database_name", "/", "'inference'", "/", "timestamp", ")", "\n", "assert", "not", "Path", "(", "storage_dir", ")", ".", "exists", "(", ")", "\n", "\n", "weak_label_crnn_hyper_params_dir", "=", "strong_label_crnn_tuning_config", "[", "'weak_label_crnn_hyper_params_dir'", "]", "\n", "assert", "len", "(", "weak_label_crnn_hyper_params_dir", ")", ">", "0", ",", "'Set weak_label_crnn_hyper_params_dir on the command line.'", "\n", "weak_label_crnn_tuning_config", "=", "load_json", "(", "Path", "(", "weak_label_crnn_hyper_params_dir", ")", "/", "'1'", "/", "'config.json'", ")", "\n", "weak_label_crnn_dirs", "=", "weak_label_crnn_tuning_config", "[", "'crnn_dirs'", "]", "\n", "assert", "len", "(", "weak_label_crnn_dirs", ")", ">", "0", ",", "'weak_label_crnn_dirs must not be empty.'", "\n", "weak_label_crnn_checkpoints", "=", "weak_label_crnn_tuning_config", "[", "'crnn_checkpoints'", "]", "\n", "\n", "del", "strong_label_crnn_tuning_config", "\n", "del", "weak_label_crnn_tuning_config", "\n", "\n", "sed_hyper_params_name", "=", "[", "'f'", ",", "'psds1'", ",", "'psds2'", "]", "\n", "\n", "device", "=", "0", "\n", "\n", "dataset_name", "=", "'eval_public'", "\n", "ground_truth_filepath", "=", "None", "\n", "\n", "max_segment_length", "=", "None", "\n", "if", "max_segment_length", "is", "None", ":", "\n", "        ", "segment_overlap", "=", "None", "\n", "", "else", ":", "\n", "        ", "segment_overlap", "=", "100", "\n", "", "save_scores", "=", "False", "\n", "save_detections", "=", "False", "\n", "\n", "weak_pseudo_labeling", "=", "False", "\n", "strong_pseudo_labeling", "=", "False", "\n", "pseudo_labelled_dataset_name", "=", "dataset_name", "\n", "\n", "pseudo_widening", "=", ".0", "\n", "\n", "ex", ".", "observers", ".", "append", "(", "FileStorageObserver", ".", "create", "(", "storage_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label_crnn.inference.sound_event_detection": [[80, 222], ["print", "print", "isinstance", "isinstance", "isinstance", "isinstance", "numpy.zeros", "numpy.zeros", "enumerate", "pb_sed.models.base.sound_event_detection", "enumerate", "paderbox.io.json_module.load_json", "isinstance", "isinstance", "enumerate", "results.append", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "print", "print", "sed_scores_eval.io.write_detections_for_multiple_thresholds", "event_detections.append", "event_detections.append", "range", "pathlib.Path", "ValueError", "ValueError", "sed_scores_eval.base_modules.detection.scores_to_event_list", "sed_scores_eval.io.write_detection", "sed_scores_eval.collar_based.fscore", "print", "print", "print", "isinstance", "len", "sed_scores_eval.intersection_based.psds", "print", "classwise_rocs.items", "sed_scores_eval.intersection_based.reference.approximate_psds", "print", "classwise_rocs.items", "pathlib.Path", "pathlib.Path", "numpy.linspace", "results[].update", "max", "sed_scores_eval.utils.auc.staircase_auc", "sed_scores_eval.intersection_based.psds", "print", "sed_scores_eval.utils.auc.staircase_auc", "sed_scores_eval.intersection_based.reference.approximate_psds_from_detections_dir", "print", "pathlib.Path", "results[].update", "[].get", "events_in_clip.append", "psds_params[].get", "numpy.linspace", "psds_params[].get", "[].get", "numpy.linspace", "max", "max"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.sound_event_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.fscore"], ["", "def", "sound_event_detection", "(", "\n", "crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "tags", ",", "\n", "hyper_params_dir", ",", "hyper_params_name", ",", "\n", "ground_truth", ",", "audio_durations", ",", "\n", "collar_based_params", "=", "(", ")", ",", "psds_params", "=", "(", ")", ",", "\n", "max_segment_length", "=", "None", ",", "segment_overlap", "=", "None", ",", "pseudo_widening", "=", ".0", ",", "\n", "score_storage_dir", "=", "None", ",", "detection_storage_dir", "=", "None", ",", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'Sound Event Detection'", ")", "\n", "if", "isinstance", "(", "hyper_params_name", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "hyper_params_name", "=", "[", "hyper_params_name", "]", "\n", "", "assert", "isinstance", "(", "hyper_params_name", ",", "(", "list", ",", "tuple", ")", ")", "\n", "hyper_params", "=", "[", "\n", "load_json", "(", "Path", "(", "hyper_params_dir", ")", "/", "f'sed_hyper_params_{name}.json'", ")", "\n", "for", "name", "in", "hyper_params_name", "\n", "]", "\n", "\n", "if", "isinstance", "(", "score_storage_dir", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "assert", "len", "(", "score_storage_dir", ")", "==", "len", "(", "hyper_params", ")", ",", "(", "len", "(", "score_storage_dir", ")", ",", "len", "(", "hyper_params", ")", ")", "\n", "", "elif", "isinstance", "(", "score_storage_dir", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "score_storage_dir", "=", "[", "\n", "Path", "(", "score_storage_dir", ")", "/", "name", "for", "name", "in", "hyper_params_name", "\n", "]", "\n", "", "elif", "score_storage_dir", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'score_storage_dir must be list, str, Path or None.'", ")", "\n", "\n", "", "if", "isinstance", "(", "detection_storage_dir", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "assert", "len", "(", "detection_storage_dir", ")", "==", "len", "(", "hyper_params", ")", ",", "(", "len", "(", "detection_storage_dir", ")", ",", "len", "(", "hyper_params", ")", ")", "\n", "", "elif", "isinstance", "(", "detection_storage_dir", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "detection_storage_dir", "=", "[", "\n", "Path", "(", "detection_storage_dir", ")", "/", "name", "for", "name", "in", "hyper_params_name", "\n", "]", "\n", "", "elif", "detection_storage_dir", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'detection_storage_dir must be list, str, Path or None.'", ")", "\n", "\n", "", "medfilt_lengths", "=", "np", ".", "zeros", "(", "(", "len", "(", "hyper_params", ")", ",", "len", "(", "event_classes", ")", ")", ")", "\n", "tag_masked", "=", "np", ".", "zeros", "(", "(", "len", "(", "hyper_params", ")", ",", "len", "(", "event_classes", ")", ")", ")", "\n", "for", "i", ",", "hyper_params_i", "in", "enumerate", "(", "hyper_params", ")", ":", "\n", "        ", "for", "j", ",", "event_class", "in", "enumerate", "(", "event_classes", ")", ":", "\n", "            ", "medfilt_lengths", "[", "i", ",", "j", "]", "=", "hyper_params_i", "[", "event_class", "]", "[", "'medfilt_length'", "]", "\n", "tag_masked", "[", "i", ",", "j", "]", "=", "hyper_params_i", "[", "event_class", "]", "[", "'tag_masked'", "]", "\n", "", "", "detection_scores", "=", "base", ".", "sound_event_detection", "(", "\n", "crnns", ",", "dataset", ",", "device", ",", "\n", "medfilt_length", "=", "medfilt_lengths", ",", "apply_mask", "=", "tag_masked", ",", "masks", "=", "tags", ",", "\n", "timestamps", "=", "timestamps", ",", "event_classes", "=", "event_classes", ",", "\n", "max_segment_length", "=", "max_segment_length", ",", "segment_overlap", "=", "segment_overlap", ",", "\n", "merge_score_segments", "=", "True", ",", "score_segment_overlap", "=", "segment_overlap", ",", "\n", "score_storage_dir", "=", "score_storage_dir", ",", "\n", ")", "\n", "event_detections", "=", "[", "]", "\n", "results", "=", "[", "]", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "hyper_params_name", ")", ":", "\n", "        ", "if", "ground_truth", ":", "\n", "            ", "print", "(", ")", "\n", "print", "(", "name", ")", "\n", "", "results", ".", "append", "(", "{", "}", ")", "\n", "if", "detection_storage_dir", "and", "detection_storage_dir", "[", "i", "]", ":", "\n", "            ", "io", ".", "write_detections_for_multiple_thresholds", "(", "\n", "detection_scores", "[", "i", "]", ",", "thresholds", "=", "np", ".", "linspace", "(", ".01", ",", ".99", ",", "50", ")", ",", "\n", "dir_path", "=", "detection_storage_dir", "[", "i", "]", ",", "\n", ")", "\n", "", "if", "'threshold'", "in", "hyper_params", "[", "i", "]", "[", "event_classes", "[", "0", "]", "]", ":", "\n", "            ", "thresholds", "=", "{", "\n", "event_class", ":", "hyper_params", "[", "i", "]", "[", "event_class", "]", "[", "'threshold'", "]", "\n", "for", "event_class", "in", "event_classes", "\n", "}", "\n", "event_detections", ".", "append", "(", "\n", "scores_to_event_list", "(", "\n", "detection_scores", "[", "i", "]", ",", "thresholds", ",", "event_classes", "=", "event_classes", ")", "\n", ")", "\n", "if", "detection_storage_dir", "and", "detection_storage_dir", "[", "i", "]", ":", "\n", "                ", "io", ".", "write_detection", "(", "\n", "detection_scores", "[", "i", "]", ",", "thresholds", ",", "\n", "Path", "(", "detection_storage_dir", "[", "i", "]", ")", "/", "'cbf.tsv'", ",", "\n", ")", "\n", "", "if", "ground_truth", "and", "collar_based_params", ":", "\n", "                ", "f", ",", "p", ",", "r", ",", "stats", "=", "collar_based", ".", "fscore", "(", "\n", "detection_scores", "[", "i", "]", ",", "ground_truth", ",", "thresholds", ",", "\n", "**", "collar_based_params", ",", "\n", "return_onset_offset_dist_sum", "=", "True", ",", "num_jobs", "=", "8", ",", "\n", ")", "\n", "print", "(", "'f'", ",", "f", ")", "\n", "print", "(", "'p'", ",", "p", ")", "\n", "print", "(", "'r'", ",", "r", ")", "\n", "for", "key", "in", "f", ":", "\n", "                    ", "results", "[", "-", "1", "]", ".", "update", "(", "{", "\n", "f'{key}_f'", ":", "f", "[", "key", "]", ",", "\n", "f'{key}_p'", ":", "p", "[", "key", "]", ",", "\n", "f'{key}_r'", ":", "r", "[", "key", "]", ",", "\n", "}", ")", "\n", "if", "key", "in", "stats", ":", "\n", "                        ", "results", "[", "-", "1", "]", ".", "update", "(", "{", "\n", "f'{key}_onset_bias'", ":", "stats", "[", "key", "]", "[", "'onset_dist_sum'", "]", "/", "max", "(", "stats", "[", "key", "]", "[", "'tps'", "]", ",", "1", ")", ",", "\n", "f'{key}_offset_bias'", ":", "stats", "[", "key", "]", "[", "'offset_dist_sum'", "]", "/", "max", "(", "stats", "[", "key", "]", "[", "'tps'", "]", ",", "1", ")", ",", "\n", "}", ")", "\n", "\n", "", "", "", "for", "clip_id", "in", "event_detections", "[", "-", "1", "]", ":", "\n", "                ", "events_in_clip", "=", "[", "]", "\n", "for", "onset", ",", "offset", ",", "event_label", "in", "event_detections", "[", "-", "1", "]", "[", "clip_id", "]", ":", "\n", "                    ", "onset", "=", "max", "(", "onset", "-", "pseudo_widening", "-", "hyper_params", "[", "i", "]", "[", "event_label", "]", ".", "get", "(", "'onset_bias'", ",", "0", ")", ",", "0", ")", "\n", "offset", "=", "offset", "+", "pseudo_widening", "-", "hyper_params", "[", "i", "]", "[", "event_label", "]", ".", "get", "(", "'offset_bias'", ",", "0", ")", "\n", "if", "offset", ">", "onset", ":", "\n", "                        ", "events_in_clip", ".", "append", "(", "(", "onset", ",", "offset", ",", "event_label", ")", ")", "\n", "", "", "event_detections", "[", "-", "1", "]", "[", "clip_id", "]", "=", "events_in_clip", "\n", "", "", "else", ":", "\n", "            ", "event_detections", ".", "append", "(", "None", ")", "\n", "", "if", "ground_truth", ":", "\n", "            ", "if", "not", "isinstance", "(", "psds_params", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "psds_params", "=", "[", "psds_params", "]", "\n", "", "for", "j", "in", "range", "(", "len", "(", "psds_params", ")", ")", ":", "\n", "                ", "psds", ",", "psd_roc", ",", "classwise_rocs", "=", "intersection_based", ".", "psds", "(", "\n", "detection_scores", "[", "i", "]", ",", "ground_truth", ",", "audio_durations", ",", "\n", "**", "psds_params", "[", "j", "]", ",", "num_jobs", "=", "8", ",", "\n", ")", "\n", "print", "(", "f'psds[{j}]'", ",", "psds", ")", "\n", "results", "[", "-", "1", "]", "[", "f'psds[{j}]'", "]", "=", "psds", "\n", "for", "event_class", ",", "(", "tpr", ",", "efpr", ",", "*", "_", ")", "in", "classwise_rocs", ".", "items", "(", ")", ":", "\n", "                    ", "results", "[", "-", "1", "]", "[", "f'{event_class}_auc[{j}]'", "]", "=", "staircase_auc", "(", "\n", "tpr", ",", "efpr", ",", "psds_params", "[", "j", "]", ".", "get", "(", "'max_efpr'", ",", "100", ")", ")", "\n", "", "if", "score_storage_dir", "and", "score_storage_dir", "[", "i", "]", "is", "not", "None", ":", "\n", "                    ", "psds", ",", "psd_roc", ",", "classwise_rocs", "=", "intersection_based", ".", "psds", "(", "\n", "score_storage_dir", "[", "i", "]", ",", "ground_truth", ",", "audio_durations", ",", "\n", "**", "psds_params", "[", "j", "]", ",", "num_jobs", "=", "8", ",", "\n", ")", "\n", "print", "(", "f'psds[{j}] (from files)'", ",", "psds", ")", "\n", "", "psds", ",", "psd_roc", ",", "classwise_rocs", "=", "intersection_based", ".", "reference", ".", "approximate_psds", "(", "\n", "detection_scores", "[", "i", "]", ",", "ground_truth", ",", "audio_durations", ",", "\n", "**", "psds_params", "[", "j", "]", ",", "thresholds", "=", "np", ".", "linspace", "(", ".01", ",", ".99", ",", "50", ")", ",", "\n", ")", "\n", "print", "(", "f'approx_psds[{j}]'", ",", "psds", ")", "\n", "results", "[", "-", "1", "]", "[", "f'approx_psds[{j}]'", "]", "=", "psds", "\n", "for", "event_class", ",", "(", "tpr", ",", "efpr", ",", "*", "_", ")", "in", "classwise_rocs", ".", "items", "(", ")", ":", "\n", "                    ", "results", "[", "-", "1", "]", "[", "f'{event_class}_approx_auc[{j}]'", "]", "=", "staircase_auc", "(", "\n", "tpr", ",", "efpr", ",", "psds_params", "[", "j", "]", ".", "get", "(", "'max_efpr'", ",", "100", ")", ")", "\n", "", "if", "detection_storage_dir", "and", "detection_storage_dir", "[", "i", "]", "is", "not", "None", ":", "\n", "                    ", "psds", ",", "psd_roc", ",", "classwise_rocs", "=", "intersection_based", ".", "reference", ".", "approximate_psds_from_detections_dir", "(", "\n", "detection_storage_dir", "[", "i", "]", ",", "ground_truth", ",", "audio_durations", ",", "\n", "**", "psds_params", "[", "j", "]", ",", "thresholds", "=", "np", ".", "linspace", "(", ".01", ",", ".99", ",", "50", ")", ",", "\n", ")", "\n", "print", "(", "f'approx_psds[{j}] (from files)'", ",", "psds", ")", "\n", "", "", "", "", "return", "event_detections", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label_crnn.inference.main": [[224, 414], ["print", "print", "print", "sacred.commands.print_config", "print", "codecarbon.EmissionsTracker", "codecarbon.EmissionsTracker.start", "pathlib.Path", "print", "print", "print", "print", "pb_sed.database.desed.provider.DESEDProvider.from_config", "DESEDProvider.from_config.test_transform.label_encoder.initialize_labels", "copy.deepcopy", "range", "any", "os.makedirs", "codecarbon.EmissionsTracker.stop", "print", "isinstance", "isinstance", "pb_sed.models.weak_label.CRNN.from_storage_dir", "sum", "sum", "isinstance", "isinstance", "pb_sed.models.strong_label.CRNN.from_storage_dir", "sum", "sum", "isinstance", "isinstance", "len", "len", "isinstance", "len", "len", "isinstance", "len", "len", "len", "print", "print", "DESEDProvider.from_config.get_dataset", "pb_sed.experiments.weak_label_crnn.inference.tagging", "dataset.map().unbatch.map", "numpy.round", "inference.sound_event_detection", "enumerate", "paderbox.io.json_module.dump_json", "pathlib.Path", "str", "len", "zip", "len", "zip", "range", "len", "len", "dataset.map().unbatch.map().unbatch", "numpy.array", "isinstance", "pb_sed.models.base.pseudo_label", "p.numel", "p.numel", "p.numel", "p.numel", "len", "DESEDProvider.from_config.db.get_dataset", "numpy.array", "numpy.arange", "numpy.concatenate", "numpy.arange", "paderbox.io.json_module.dump_json", "fid.write", "events[].items", "crnn.parameters", "crnn.cnn.cnn_2d.parameters", "crnn.parameters", "crnn.cnn.cnn_2d.parameters", "dataset.map().unbatch.map", "pathlib.Path", "functools.partial", "len", "fid.write", "fid.write", "pathlib.Path", "pathlib.Path", "DESEDProvider.from_config.get_raw", "DESEDProvider.from_config.get_raw"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.tagging", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.sound_event_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.pseudo_label.pseudo_label", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_raw", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_raw"], ["", "@", "ex", ".", "automain", "\n", "def", "main", "(", "\n", "_run", ",", "\n", "storage_dir", ",", "strong_label_crnn_hyper_params_dir", ",", "sed_hyper_params_name", ",", "\n", "strong_label_crnn_dirs", ",", "strong_label_crnn_checkpoints", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "weak_label_crnn_dirs", ",", "weak_label_crnn_checkpoints", ",", "\n", "device", ",", "data_provider", ",", "dataset_name", ",", "ground_truth_filepath", ",", "\n", "save_scores", ",", "save_detections", ",", "max_segment_length", ",", "segment_overlap", ",", "\n", "strong_pseudo_labeling", ",", "pseudo_widening", ",", "pseudo_labelled_dataset_name", ",", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'##### Inference #####'", ")", "\n", "print", "(", ")", "\n", "print_config", "(", "_run", ")", "\n", "print", "(", "storage_dir", ")", "\n", "emissions_tracker", "=", "EmissionsTracker", "(", "\n", "output_dir", "=", "storage_dir", ",", "on_csv_write", "=", "\"update\"", ",", "log_level", "=", "'error'", ")", "\n", "emissions_tracker", ".", "start", "(", ")", "\n", "storage_dir", "=", "Path", "(", "storage_dir", ")", "\n", "\n", "collar_based_params", "=", "{", "\n", "'onset_collar'", ":", ".2", ",", "\n", "'offset_collar'", ":", ".2", ",", "\n", "'offset_collar_rate'", ":", ".2", ",", "\n", "}", "\n", "psds_scenario_1", "=", "{", "\n", "'dtc_threshold'", ":", "0.7", ",", "\n", "'gtc_threshold'", ":", "0.7", ",", "\n", "'cttc_threshold'", ":", "None", ",", "\n", "'alpha_ct'", ":", ".0", ",", "\n", "'alpha_st'", ":", "1.", ",", "\n", "}", "\n", "psds_scenario_2", "=", "{", "\n", "'dtc_threshold'", ":", "0.1", ",", "\n", "'gtc_threshold'", ":", "0.1", ",", "\n", "'cttc_threshold'", ":", "0.3", ",", "\n", "'alpha_ct'", ":", ".5", ",", "\n", "'alpha_st'", ":", "1.", ",", "\n", "}", "\n", "\n", "if", "not", "isinstance", "(", "weak_label_crnn_checkpoints", ",", "list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "weak_label_crnn_checkpoints", ",", "str", ")", ",", "weak_label_crnn_checkpoints", "\n", "weak_label_crnn_checkpoints", "=", "len", "(", "weak_label_crnn_dirs", ")", "*", "[", "weak_label_crnn_checkpoints", "]", "\n", "", "weak_label_crnns", "=", "[", "\n", "weak_label", ".", "CRNN", ".", "from_storage_dir", "(", "\n", "storage_dir", "=", "crnn_dir", ",", "config_name", "=", "'1/config.json'", ",", "\n", "checkpoint_name", "=", "crnn_checkpoint", "\n", ")", "\n", "for", "crnn_dir", ",", "crnn_checkpoint", "in", "zip", "(", "weak_label_crnn_dirs", ",", "weak_label_crnn_checkpoints", ")", "\n", "]", "\n", "print", "(", "'Weak Label CRNN Params'", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "crnn", "in", "weak_label_crnns", "for", "p", "in", "crnn", ".", "parameters", "(", ")", "]", ")", ")", "\n", "print", "(", "'Weak Label CNN2d Params'", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "crnn", "in", "weak_label_crnns", "for", "p", "in", "crnn", ".", "cnn", ".", "cnn_2d", ".", "parameters", "(", ")", "]", ")", ")", "\n", "if", "not", "isinstance", "(", "strong_label_crnn_checkpoints", ",", "list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "strong_label_crnn_checkpoints", ",", "str", ")", ",", "strong_label_crnn_checkpoints", "\n", "strong_label_crnn_checkpoints", "=", "len", "(", "strong_label_crnn_dirs", ")", "*", "[", "strong_label_crnn_checkpoints", "]", "\n", "", "strong_label_crnns", "=", "[", "\n", "strong_label", ".", "CRNN", ".", "from_storage_dir", "(", "\n", "storage_dir", "=", "crnn_dir", ",", "config_name", "=", "'1/config.json'", ",", "\n", "checkpoint_name", "=", "crnn_checkpoint", "\n", ")", "\n", "for", "crnn_dir", ",", "crnn_checkpoint", "in", "zip", "(", "strong_label_crnn_dirs", ",", "strong_label_crnn_checkpoints", ")", "\n", "]", "\n", "print", "(", "'Strong Label CRNN Params'", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "crnn", "in", "strong_label_crnns", "for", "p", "in", "crnn", ".", "parameters", "(", ")", "]", ")", ")", "\n", "print", "(", "'Strong Label CNN2d Params'", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "crnn", "in", "strong_label_crnns", "for", "p", "in", "crnn", ".", "cnn", ".", "cnn_2d", ".", "parameters", "(", ")", "]", ")", ")", "\n", "data_provider", "=", "DESEDProvider", ".", "from_config", "(", "data_provider", ")", "\n", "data_provider", ".", "test_transform", ".", "label_encoder", ".", "initialize_labels", "(", ")", "\n", "event_classes", "=", "data_provider", ".", "test_transform", ".", "label_encoder", ".", "inverse_label_mapping", "\n", "event_classes", "=", "[", "event_classes", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "event_classes", ")", ")", "]", "\n", "frame_shift", "=", "data_provider", ".", "test_transform", ".", "stft", ".", "shift", "\n", "frame_shift", "/=", "data_provider", ".", "audio_reader", ".", "target_sample_rate", "\n", "\n", "if", "not", "isinstance", "(", "dataset_name", ",", "list", ")", ":", "\n", "        ", "dataset_name", "=", "[", "dataset_name", "]", "\n", "", "if", "ground_truth_filepath", "is", "None", ":", "\n", "        ", "ground_truth_filepath", "=", "len", "(", "dataset_name", ")", "*", "[", "ground_truth_filepath", "]", "\n", "", "elif", "isinstance", "(", "ground_truth_filepath", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "ground_truth_filepath", "=", "[", "ground_truth_filepath", "]", "\n", "", "assert", "len", "(", "ground_truth_filepath", ")", "==", "len", "(", "dataset_name", ")", "\n", "if", "not", "isinstance", "(", "strong_pseudo_labeling", ",", "list", ")", ":", "\n", "        ", "strong_pseudo_labeling", "=", "len", "(", "dataset_name", ")", "*", "[", "strong_pseudo_labeling", "]", "\n", "", "assert", "len", "(", "strong_pseudo_labeling", ")", "==", "len", "(", "dataset_name", ")", "\n", "if", "not", "isinstance", "(", "pseudo_labelled_dataset_name", ",", "list", ")", ":", "\n", "        ", "pseudo_labelled_dataset_name", "=", "[", "pseudo_labelled_dataset_name", "]", "\n", "", "assert", "len", "(", "pseudo_labelled_dataset_name", ")", "==", "len", "(", "dataset_name", ")", "\n", "\n", "database", "=", "deepcopy", "(", "data_provider", ".", "db", ".", "data", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset_name", ")", ")", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "dataset_name", "[", "i", "]", ")", "\n", "if", "dataset_name", "[", "i", "]", "==", "'eval_public'", "and", "not", "ground_truth_filepath", "[", "i", "]", ":", "\n", "            ", "database_root", "=", "Path", "(", "data_provider", ".", "get_raw", "(", "'eval_public'", ")", "[", "0", "]", "[", "'audio_path'", "]", ")", ".", "parent", ".", "parent", ".", "parent", ".", "parent", "\n", "ground_truth_filepath", "[", "i", "]", "=", "database_root", "/", "'metadata'", "/", "'eval'", "/", "'public.tsv'", "\n", "", "elif", "dataset_name", "[", "i", "]", "==", "'validation'", "and", "not", "ground_truth_filepath", "[", "i", "]", ":", "\n", "            ", "database_root", "=", "Path", "(", "data_provider", ".", "get_raw", "(", "'validation'", ")", "[", "0", "]", "[", "'audio_path'", "]", ")", ".", "parent", ".", "parent", ".", "parent", ".", "parent", "\n", "ground_truth_filepath", "[", "i", "]", "=", "database_root", "/", "'metadata'", "/", "'validation'", "/", "'validation.tsv'", "\n", "\n", "", "dataset", "=", "data_provider", ".", "get_dataset", "(", "dataset_name", "[", "i", "]", ")", "\n", "audio_durations", "=", "{", "\n", "example", "[", "'example_id'", "]", ":", "example", "[", "'audio_length'", "]", "\n", "for", "example", "in", "data_provider", ".", "db", ".", "get_dataset", "(", "dataset_name", "[", "i", "]", ")", "\n", "}", "\n", "\n", "score_storage_dir", "=", "storage_dir", "/", "'scores'", "/", "dataset_name", "[", "i", "]", "\n", "detection_storage_dir", "=", "storage_dir", "/", "'detections'", "/", "dataset_name", "[", "i", "]", "\n", "\n", "if", "max_segment_length", "is", "None", ":", "\n", "            ", "timestamps", "=", "{", "\n", "audio_id", ":", "np", ".", "array", "(", "[", "0.", ",", "audio_durations", "[", "audio_id", "]", "]", ")", "\n", "for", "audio_id", "in", "audio_durations", "\n", "}", "\n", "", "else", ":", "\n", "            ", "timestamps", "=", "{", "}", "\n", "for", "audio_id", "in", "audio_durations", ":", "\n", "                ", "ts", "=", "np", ".", "arange", "(", "\n", "(", "2", "+", "max_segment_length", ")", "*", "frame_shift", ",", "\n", "audio_durations", "[", "audio_id", "]", ",", "\n", "(", "max_segment_length", "-", "segment_overlap", ")", "*", "frame_shift", "\n", ")", "\n", "timestamps", "[", "audio_id", "]", "=", "np", ".", "concatenate", "(", "(", "\n", "[", "0.", "]", ",", "ts", "-", "segment_overlap", "/", "2", "*", "frame_shift", ",", "\n", "[", "audio_durations", "[", "audio_id", "]", "]", "\n", ")", ")", "\n", "", "", "if", "max_segment_length", "is", "not", "None", ":", "\n", "            ", "dataset", "=", "dataset", ".", "map", "(", "partial", "(", "\n", "segment_batch", ",", "\n", "max_length", "=", "max_segment_length", ",", "\n", "overlap", "=", "segment_overlap", "\n", ")", ")", ".", "unbatch", "(", ")", "\n", "", "tags", ",", "tagging_scores", ",", "_", "=", "tagging", "(", "\n", "weak_label_crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "None", ",", "None", ",", "\n", ")", "\n", "\n", "def", "add_tag_condition", "(", "example", ")", ":", "\n", "            ", "example", "[", "\"tag_condition\"", "]", "=", "np", ".", "array", "(", "[", "\n", "tags", "[", "example_id", "]", "for", "example_id", "in", "example", "[", "\"example_id\"", "]", "]", ")", "\n", "return", "example", "\n", "\n", "", "dataset", "=", "dataset", ".", "map", "(", "add_tag_condition", ")", "\n", "\n", "timestamps", "=", "np", ".", "round", "(", "np", ".", "arange", "(", "0", ",", "100000", ")", "*", "frame_shift", ",", "decimals", "=", "6", ")", "\n", "if", "not", "isinstance", "(", "sed_hyper_params_name", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "sed_hyper_params_name", "=", "[", "sed_hyper_params_name", "]", "\n", "", "events", ",", "sed_results", "=", "sound_event_detection", "(", "\n", "strong_label_crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "tags", ",", "\n", "strong_label_crnn_hyper_params_dir", ",", "sed_hyper_params_name", ",", "\n", "ground_truth_filepath", "[", "i", "]", ",", "audio_durations", ",", "\n", "collar_based_params", ",", "[", "psds_scenario_1", ",", "psds_scenario_2", "]", ",", "\n", "max_segment_length", "=", "max_segment_length", ",", "\n", "segment_overlap", "=", "segment_overlap", ",", "\n", "pseudo_widening", "=", "pseudo_widening", ",", "\n", "score_storage_dir", "=", "[", "score_storage_dir", "/", "name", "for", "name", "in", "sed_hyper_params_name", "]", "\n", "if", "save_scores", "else", "None", ",", "\n", "detection_storage_dir", "=", "[", "detection_storage_dir", "/", "name", "for", "name", "in", "sed_hyper_params_name", "]", "\n", "if", "save_detections", "else", "None", ",", "\n", ")", "\n", "for", "j", ",", "sed_results_j", "in", "enumerate", "(", "sed_results", ")", ":", "\n", "            ", "if", "sed_results_j", ":", "\n", "                ", "dump_json", "(", "\n", "sed_results_j", ",", "\n", "storage_dir", "/", "f'sed_{sed_hyper_params_name[j]}_results_{dataset_name[i]}.json'", "\n", ")", "\n", "", "", "if", "strong_pseudo_labeling", "[", "i", "]", ":", "\n", "            ", "database", "[", "'datasets'", "]", "[", "pseudo_labelled_dataset_name", "[", "i", "]", "]", "=", "base", ".", "pseudo_label", "(", "\n", "database", "[", "'datasets'", "]", "[", "dataset_name", "[", "i", "]", "]", ",", "event_classes", ",", "\n", "False", ",", "False", ",", "strong_pseudo_labeling", "[", "i", "]", ",", "\n", "None", ",", "None", ",", "events", "[", "0", "]", ",", "\n", ")", "\n", "with", "(", "storage_dir", "/", "f'{dataset_name[i]}_pseudo_labeled.tsv'", ")", ".", "open", "(", "'w'", ")", "as", "fid", ":", "\n", "                ", "fid", ".", "write", "(", "'filename\\tonset\\toffset\\tevent_label\\n'", ")", "\n", "for", "key", ",", "event_list", "in", "events", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "                    ", "if", "len", "(", "event_list", ")", "==", "0", ":", "\n", "                        ", "fid", ".", "write", "(", "f'{key}.wav\\t\\t\\t\\n'", ")", "\n", "", "for", "t_on", ",", "t_off", ",", "event_label", "in", "event_list", ":", "\n", "                        ", "fid", ".", "write", "(", "\n", "f'{key}.wav\\t{t_on}\\t{t_off}\\t{event_label}\\n'", ")", "\n", "\n", "", "", "", "", "", "if", "any", "(", "strong_pseudo_labeling", ")", ":", "\n", "        ", "dump_json", "(", "\n", "database", ",", "\n", "storage_dir", "/", "Path", "(", "data_provider", ".", "json_path", ")", ".", "name", ",", "\n", "create_path", "=", "True", ",", "\n", "indent", "=", "4", ",", "\n", "ensure_ascii", "=", "False", ",", "\n", ")", "\n", "", "inference_dir", "=", "Path", "(", "strong_label_crnn_hyper_params_dir", ")", "/", "'inference'", "\n", "os", ".", "makedirs", "(", "str", "(", "inference_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "(", "inference_dir", "/", "storage_dir", ".", "name", ")", ".", "symlink_to", "(", "storage_dir", ")", "\n", "emissions_tracker", ".", "stop", "(", ")", "\n", "print", "(", "storage_dir", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label_crnn.training.config": [[33, 232], ["str", "padertorch.train.trainer.Trainer.get_config", "pb_sed.experiments.strong_label_crnn.tuning.ex.observers.append", "pb_sed.database.desed.provider.DESEDProvider.get_config", "ValueError", "sacred.observers.FileStorageObserver.create", "paderbox.utils.timer.timeStamped", "str", "ValueError", "pathlib.Path().exists", "int", "int", "int", "int", "min", "pathlib.Path", "numpy.log", "min"], "function", ["None"], ["@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "delay", "=", "0", "\n", "debug", "=", "False", "\n", "timestamp", "=", "timeStamped", "(", "''", ")", "[", "1", ":", "]", "+", "(", "'_debug'", "if", "debug", "else", "''", ")", "\n", "group_name", "=", "timestamp", "\n", "database_name", "=", "'desed'", "\n", "storage_dir", "=", "str", "(", "storage_root", "/", "'strong_label_crnn'", "/", "database_name", "/", "'training'", "/", "group_name", "/", "timestamp", ")", "\n", "\n", "# Data provider", "\n", "if", "database_name", "==", "'desed'", ":", "\n", "        ", "batch_size", "=", "32", "\n", "data_provider", "=", "{", "\n", "'factory'", ":", "DESEDProvider", ",", "\n", "'json_path'", ":", "str", "(", "database_jsons_dir", "/", "'desed_pseudo_labeled.json'", ")", ",", "\n", "'train_set'", ":", "{", "\n", "'train_weak'", ":", "10", ",", "\n", "'train_strong'", ":", "10", ",", "\n", "'train_synthetic20'", ":", "2", ",", "\n", "'train_synthetic21'", ":", "1", ",", "\n", "'train_unlabel_in_domain'", ":", "2", ",", "\n", "}", ",", "\n", "'cached_datasets'", ":", "None", "if", "debug", "else", "[", "'train_weak'", ",", "'train_synthetic20'", "]", ",", "\n", "'train_fetcher'", ":", "{", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'prefetch_workers'", ":", "batch_size", ",", "\n", "'min_dataset_examples_in_batch'", ":", "{", "\n", "'train_weak'", ":", "int", "(", "3", "*", "batch_size", "/", "32", ")", ",", "\n", "'train_strong'", ":", "int", "(", "6", "*", "batch_size", "/", "32", ")", ",", "\n", "'train_synthetic20'", ":", "int", "(", "1", "*", "batch_size", "/", "32", ")", ",", "\n", "'train_synthetic21'", ":", "int", "(", "2", "*", "batch_size", "/", "32", ")", ",", "\n", "'train_unlabel_in_domain'", ":", "0", ",", "\n", "}", ",", "\n", "}", ",", "\n", "'storage_dir'", ":", "storage_dir", ",", "\n", "}", "\n", "num_events", "=", "10", "\n", "DESEDProvider", ".", "get_config", "(", "data_provider", ")", "\n", "\n", "validation_set_name", "=", "'validation'", "\n", "validation_ground_truth_filepath", "=", "None", "\n", "weak_label_crnn_hyper_params_dir", "=", "''", "\n", "eval_set_name", "=", "'eval_public'", "\n", "eval_ground_truth_filepath", "=", "None", "\n", "\n", "num_iterations", "=", "30000", "+", "15000", "*", "(", "data_provider", "[", "'train_set'", "]", "[", "'train_unlabel_in_domain'", "]", ">", "0", ")", "\n", "checkpoint_interval", "=", "1000", "\n", "summary_interval", "=", "100", "\n", "back_off_patience", "=", "None", "\n", "lr_decay_step", "=", "20000", "+", "10000", "*", "(", "data_provider", "[", "'train_set'", "]", "[", "'train_unlabel_in_domain'", "]", ">", "0", ")", "if", "back_off_patience", "is", "None", "else", "None", "\n", "lr_decay_factor", "=", "1", "/", "5", "\n", "lr_rampup_steps", "=", "1000", "\n", "\n", "gradient_clipping", "=", "1e10", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown database {database_name}.'", ")", "\n", "\n", "# Trainer configuration", "\n", "", "net_config", "=", "'shallow'", "\n", "if", "net_config", "==", "'shallow'", ":", "\n", "        ", "m", "=", "1", "\n", "cnn", "=", "{", "\n", "'cnn_2d'", ":", "{", "\n", "'out_channels'", ":", "[", "\n", "16", "*", "m", ",", "16", "*", "m", ",", "32", "*", "m", ",", "32", "*", "m", ",", "64", "*", "m", ",", "64", "*", "m", ",", "128", "*", "m", ",", "128", "*", "m", ",", "min", "(", "256", "*", "m", ",", "512", ")", ",", "\n", "]", ",", "\n", "'pool_size'", ":", "4", "*", "[", "1", ",", "(", "2", ",", "1", ")", "]", "+", "[", "1", "]", ",", "\n", "'kernel_size'", ":", "3", ",", "\n", "'norm'", ":", "'batch'", ",", "\n", "'norm_kwargs'", ":", "{", "'eps'", ":", "1e-3", "}", ",", "\n", "'activation_fn'", ":", "'relu'", ",", "\n", "'dropout'", ":", ".0", ",", "\n", "'output_layer'", ":", "False", ",", "\n", "}", ",", "\n", "'cnn_1d'", ":", "{", "\n", "'out_channels'", ":", "3", "*", "[", "256", "*", "m", "]", ",", "\n", "'kernel_size'", ":", "3", ",", "\n", "'norm'", ":", "'batch'", ",", "\n", "'norm_kwargs'", ":", "{", "'eps'", ":", "1e-3", "}", ",", "\n", "'activation_fn'", ":", "'relu'", ",", "\n", "'dropout'", ":", ".0", ",", "\n", "'output_layer'", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "", "elif", "net_config", "==", "'deep'", ":", "\n", "        ", "m", "=", "2", "\n", "cnn", "=", "{", "\n", "'cnn_2d'", ":", "{", "\n", "'out_channels'", ":", "(", "\n", "4", "*", "[", "16", "*", "m", "]", "+", "4", "*", "[", "32", "*", "m", "]", "+", "4", "*", "[", "64", "*", "m", "]", "+", "4", "*", "[", "128", "*", "m", "]", "+", "[", "256", "*", "m", ",", "min", "(", "256", "*", "m", ",", "512", ")", "]", "\n", ")", ",", "\n", "'pool_size'", ":", "4", "*", "[", "1", ",", "1", ",", "1", ",", "(", "2", ",", "1", ")", "]", "+", "[", "1", ",", "1", "]", ",", "\n", "'kernel_size'", ":", "9", "*", "[", "3", ",", "1", "]", ",", "\n", "'residual_connections'", ":", "[", "\n", "None", ",", "None", ",", "4", ",", "None", ",", "\n", "6", ",", "None", ",", "8", ",", "None", ",", "\n", "10", ",", "None", ",", "12", ",", "None", ",", "\n", "14", ",", "None", ",", "16", ",", "None", ",", "\n", "None", ",", "None", "\n", "]", ",", "\n", "'norm'", ":", "'batch'", ",", "\n", "'norm_kwargs'", ":", "{", "'eps'", ":", "1e-3", "}", ",", "\n", "'activation_fn'", ":", "'relu'", ",", "\n", "'pre_activation'", ":", "True", ",", "\n", "'dropout'", ":", ".0", ",", "\n", "'output_layer'", ":", "False", ",", "\n", "}", ",", "\n", "'cnn_1d'", ":", "{", "\n", "'out_channels'", ":", "8", "*", "[", "256", "*", "m", "]", ",", "\n", "'kernel_size'", ":", "[", "1", "]", "+", "3", "*", "[", "3", ",", "1", "]", "+", "[", "1", "]", ",", "\n", "'residual_connections'", ":", "[", "None", ",", "3", ",", "None", ",", "5", ",", "None", ",", "7", ",", "None", ",", "None", "]", ",", "\n", "'norm'", ":", "'batch'", ",", "\n", "'norm_kwargs'", ":", "{", "'eps'", ":", "1e-3", "}", ",", "\n", "'activation_fn'", ":", "'relu'", ",", "\n", "'pre_activation'", ":", "True", ",", "\n", "'dropout'", ":", ".0", ",", "\n", "'output_layer'", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown net_config {net_config}'", ")", "\n", "", "trainer", "=", "{", "\n", "'model'", ":", "{", "\n", "'factory'", ":", "strong_label", ".", "CRNN", ",", "\n", "'feature_extractor'", ":", "{", "\n", "'sample_rate'", ":", "\n", "data_provider", "[", "'audio_reader'", "]", "[", "'target_sample_rate'", "]", ",", "\n", "'stft_size'", ":", "data_provider", "[", "'train_transform'", "]", "[", "'stft'", "]", "[", "'size'", "]", ",", "\n", "'number_of_filters'", ":", "128", ",", "\n", "'frequency_warping_fn'", ":", "{", "\n", "'factory'", ":", "MelWarping", ",", "\n", "'warp_factor_sampling_fn'", ":", "{", "\n", "'factory'", ":", "LogTruncatedNormal", ",", "\n", "'scale'", ":", ".08", ",", "\n", "'truncation'", ":", "np", ".", "log", "(", "1.3", ")", ",", "\n", "}", ",", "\n", "'boundary_frequency_ratio_sampling_fn'", ":", "{", "\n", "'factory'", ":", "TruncatedExponential", ",", "\n", "'scale'", ":", ".5", ",", "\n", "'truncation'", ":", "5.", ",", "\n", "}", ",", "\n", "'highest_frequency'", ":", "data_provider", "[", "'audio_reader'", "]", "[", "'target_sample_rate'", "]", "/", "2", "\n", "}", ",", "\n", "# 'blur_sigma': .5,", "\n", "'n_time_masks'", ":", "1", ",", "\n", "'max_masked_time_steps'", ":", "70", ",", "\n", "'max_masked_time_rate'", ":", ".2", ",", "\n", "'n_frequency_masks'", ":", "1", ",", "\n", "'max_masked_frequency_bands'", ":", "20", ",", "\n", "'max_masked_frequency_rate'", ":", ".2", ",", "\n", "'max_noise_scale'", ":", ".2", ",", "\n", "}", ",", "\n", "'cnn'", ":", "cnn", ",", "\n", "'rnn'", ":", "{", "\n", "'hidden_size'", ":", "256", "*", "m", ",", "\n", "'num_layers'", ":", "2", ",", "\n", "'dropout'", ":", ".0", ",", "\n", "'output_net'", ":", "{", "\n", "'out_channels'", ":", "[", "\n", "256", "*", "m", ",", "\n", "num_events", "\n", "]", ",", "\n", "'kernel_size'", ":", "1", ",", "\n", "'norm'", ":", "'batch'", ",", "\n", "'activation_fn'", ":", "'relu'", ",", "\n", "'dropout'", ":", ".0", ",", "\n", "}", "\n", "}", ",", "\n", "'labelwise_metrics'", ":", "(", "'fscore_strong'", ",", ")", ",", "\n", "}", ",", "\n", "'optimizer'", ":", "{", "\n", "'factory'", ":", "Adam", ",", "\n", "'lr'", ":", "5e-4", ",", "\n", "'gradient_clipping'", ":", "gradient_clipping", ",", "\n", "# 'weight_decay': 1e-6,", "\n", "}", ",", "\n", "'summary_trigger'", ":", "(", "summary_interval", ",", "'iteration'", ")", ",", "\n", "'checkpoint_trigger'", ":", "(", "checkpoint_interval", ",", "'iteration'", ")", ",", "\n", "'stop_trigger'", ":", "(", "num_iterations", ",", "'iteration'", ")", ",", "\n", "'storage_dir'", ":", "storage_dir", ",", "\n", "}", "\n", "del", "cnn", "\n", "use_transformer", "=", "False", "\n", "if", "use_transformer", ":", "\n", "        ", "trainer", "[", "'model'", "]", "[", "'rnn'", "]", "[", "'factory'", "]", "=", "TransformerStack", "\n", "trainer", "[", "'model'", "]", "[", "'rnn'", "]", "[", "'hidden_size'", "]", "=", "320", "\n", "trainer", "[", "'model'", "]", "[", "'rnn'", "]", "[", "'num_heads'", "]", "=", "10", "\n", "trainer", "[", "'model'", "]", "[", "'rnn'", "]", "[", "'num_layers'", "]", "=", "3", "\n", "trainer", "[", "'model'", "]", "[", "'rnn'", "]", "[", "'dropout'", "]", "=", "0.1", "\n", "\n", "", "Trainer", ".", "get_config", "(", "trainer", ")", "\n", "\n", "init_ckpt_path", "=", "None", "\n", "frozen_cnn_2d_layers", "=", "0", "\n", "frozen_cnn_1d_layers", "=", "0", "\n", "\n", "resume", "=", "False", "\n", "assert", "resume", "or", "not", "Path", "(", "trainer", "[", "'storage_dir'", "]", ")", ".", "exists", "(", ")", "\n", "ex", ".", "observers", ".", "append", "(", "FileStorageObserver", ".", "create", "(", "trainer", "[", "'storage_dir'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label_crnn.training.train": [[234, 323], ["print", "print", "print", "sacred.commands.print_config", "pb_sed.database.desed.provider.DESEDProvider.from_config", "DESEDProvider.from_config.train_transform.label_encoder.initialize_labels", "DESEDProvider.from_config.test_transform.label_encoder.initialize_labels", "padertorch.train.trainer.Trainer.from_config", "sorted", "print", "DESEDProvider.from_config.get_train_set().map", "DESEDProvider.from_config.get_validate_set().map", "Trainer.from_config.train", "print", "time.sleep", "DESEDProvider.from_config.train_transform.label_encoder.inverse_label_mapping.items", "Trainer.from_config.model.label_mapping.append", "sum", "print", "paderbox.utils.nested.deflatten", "Trainer.from_config.model.cnn.load_state_dict", "print", "Trainer.from_config.model.cnn.cnn_2d.freeze", "print", "Trainer.from_config.model.cnn.cnn_1d.freeze", "Trainer.from_config.test_run", "Trainer.from_config.register_validation_hook", "len", "isinstance", "pb_sed.experiments.strong_label_crnn.tuning.ex.run", "DESEDProvider.from_config.db.get_dataset", "len", "len", "label.replace().replace().replace().replace().replace", "DESEDProvider.from_config.get_train_set", "DESEDProvider.from_config.get_validate_set", "sorted", "Trainer.from_config.register_hook", "p.numel", "torch.load", "Trainer.from_config.optimizer.keys", "padertorch.train.hooks.LRAnnealingHook", "label.replace().replace().replace().replace", "Trainer.from_config.model.parameters", "padertorch.train.trigger.AllTrigger", "str", "label.replace().replace().replace", "padertorch.train.trigger.NotTrigger", "padertorch.train.trigger.EndTrigger", "label.replace().replace", "label.replace"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label_crnn.training.train", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_train_set", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_validate_set"], ["", "@", "ex", ".", "automain", "\n", "def", "train", "(", "\n", "_run", ",", "debug", ",", "\n", "data_provider", ",", "trainer", ",", "\n", "lr_rampup_steps", ",", "back_off_patience", ",", "lr_decay_step", ",", "lr_decay_factor", ",", "\n", "init_ckpt_path", ",", "frozen_cnn_2d_layers", ",", "frozen_cnn_1d_layers", ",", "\n", "resume", ",", "delay", ",", "\n", "validation_set_name", ",", "validation_ground_truth_filepath", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "\n", "eval_set_name", ",", "eval_ground_truth_filepath", ",", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'##### Training #####'", ")", "\n", "print", "(", ")", "\n", "print_config", "(", "_run", ")", "\n", "assert", "(", "back_off_patience", "is", "None", ")", "or", "(", "lr_decay_step", "is", "None", ")", ",", "(", "back_off_patience", ",", "lr_decay_step", ")", "\n", "if", "delay", ">", "0", ":", "\n", "        ", "print", "(", "f'Sleep for {delay} seconds.'", ")", "\n", "time", ".", "sleep", "(", "delay", ")", "\n", "\n", "", "data_provider", "=", "DESEDProvider", ".", "from_config", "(", "data_provider", ")", "\n", "data_provider", ".", "train_transform", ".", "label_encoder", ".", "initialize_labels", "(", "\n", "dataset", "=", "data_provider", ".", "db", ".", "get_dataset", "(", "data_provider", ".", "validate_set", ")", ",", "\n", "verbose", "=", "True", "\n", ")", "\n", "data_provider", ".", "test_transform", ".", "label_encoder", ".", "initialize_labels", "(", ")", "\n", "trainer", "=", "Trainer", ".", "from_config", "(", "trainer", ")", "\n", "trainer", ".", "model", ".", "label_mapping", "=", "[", "]", "\n", "for", "idx", ",", "label", "in", "sorted", "(", "data_provider", ".", "train_transform", ".", "label_encoder", ".", "inverse_label_mapping", ".", "items", "(", ")", ")", ":", "\n", "        ", "assert", "idx", "==", "len", "(", "trainer", ".", "model", ".", "label_mapping", ")", ",", "(", "idx", ",", "label", ",", "len", "(", "trainer", ".", "model", ".", "label_mapping", ")", ")", "\n", "trainer", ".", "model", ".", "label_mapping", ".", "append", "(", "label", ".", "replace", "(", "', '", ",", "'__'", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "replace", "(", "'('", ",", "'_'", ")", ".", "replace", "(", "')'", ",", "'_'", ")", ".", "replace", "(", "\"'\"", ",", "''", ")", ")", "\n", "", "print", "(", "'Params'", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "trainer", ".", "model", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "if", "init_ckpt_path", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Load init params'", ")", "\n", "state_dict", "=", "deflatten", "(", "torch", ".", "load", "(", "init_ckpt_path", ",", "map_location", "=", "'cpu'", ")", "[", "'model'", "]", ",", "maxdepth", "=", "1", ")", "\n", "trainer", ".", "model", ".", "cnn", ".", "load_state_dict", "(", "state_dict", "[", "'cnn'", "]", ")", "\n", "", "if", "frozen_cnn_2d_layers", ":", "\n", "        ", "print", "(", "f'Freeze {frozen_cnn_2d_layers} cnn_2d layers'", ")", "\n", "trainer", ".", "model", ".", "cnn", ".", "cnn_2d", ".", "freeze", "(", "frozen_cnn_2d_layers", ")", "\n", "", "if", "frozen_cnn_1d_layers", ":", "\n", "        ", "print", "(", "f'Freeze {frozen_cnn_1d_layers} cnn_1d layers'", ")", "\n", "trainer", ".", "model", ".", "cnn", ".", "cnn_1d", ".", "freeze", "(", "frozen_cnn_1d_layers", ")", "\n", "\n", "", "def", "add_tag_condition", "(", "example", ")", ":", "\n", "        ", "example", "[", "\"tag_condition\"", "]", "=", "example", "[", "\"weak_targets\"", "]", "\n", "return", "example", "\n", "\n", "", "train_set", "=", "data_provider", ".", "get_train_set", "(", ")", ".", "map", "(", "add_tag_condition", ")", "\n", "validate_set", "=", "data_provider", ".", "get_validate_set", "(", ")", ".", "map", "(", "add_tag_condition", ")", "\n", "\n", "if", "validate_set", "is", "not", "None", ":", "\n", "        ", "trainer", ".", "test_run", "(", "train_set", ",", "validate_set", ")", "\n", "trainer", ".", "register_validation_hook", "(", "\n", "validate_set", ",", "metric", "=", "'macro_fscore_strong'", ",", "maximize", "=", "True", ",", "\n", ")", "\n", "\n", "", "breakpoints", "=", "[", "]", "\n", "if", "lr_rampup_steps", "is", "not", "None", ":", "\n", "        ", "breakpoints", "+=", "[", "(", "0", ",", "0.", ")", ",", "(", "lr_rampup_steps", ",", "1.", ")", "]", "\n", "", "if", "lr_decay_step", "is", "not", "None", ":", "\n", "        ", "breakpoints", "+=", "[", "(", "lr_decay_step", ",", "1.", ")", ",", "(", "lr_decay_step", ",", "lr_decay_factor", ")", "]", "\n", "", "if", "len", "(", "breakpoints", ")", ">", "0", ":", "\n", "        ", "if", "isinstance", "(", "trainer", ".", "optimizer", ",", "dict", ")", ":", "\n", "            ", "names", "=", "sorted", "(", "trainer", ".", "optimizer", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "names", "=", "[", "None", "]", "\n", "", "for", "name", "in", "names", ":", "\n", "            ", "trainer", ".", "register_hook", "(", "LRAnnealingHook", "(", "\n", "trigger", "=", "AllTrigger", "(", "\n", "(", "100", ",", "'iteration'", ")", ",", "\n", "NotTrigger", "(", "EndTrigger", "(", "breakpoints", "[", "-", "1", "]", "[", "0", "]", "+", "100", ",", "'iteration'", ")", ")", ",", "\n", ")", ",", "\n", "breakpoints", "=", "breakpoints", ",", "\n", "unit", "=", "'iteration'", ",", "\n", "name", "=", "name", ",", "\n", ")", ")", "\n", "", "", "trainer", ".", "train", "(", "train_set", ",", "resume", "=", "resume", ")", "\n", "\n", "if", "validation_set_name", ":", "\n", "        ", "tuning", ".", "run", "(", "\n", "config_updates", "=", "{", "\n", "'debug'", ":", "debug", ",", "\n", "'weak_label_crnn_hyper_params_dir'", ":", "weak_label_crnn_hyper_params_dir", ",", "\n", "'strong_label_crnn_dirs'", ":", "[", "str", "(", "trainer", ".", "storage_dir", ")", "]", ",", "\n", "'validation_set_name'", ":", "validation_set_name", ",", "\n", "'validation_ground_truth_filepath'", ":", "validation_ground_truth_filepath", ",", "\n", "'eval_set_name'", ":", "eval_set_name", ",", "\n", "'eval_ground_truth_filepath'", ":", "eval_ground_truth_filepath", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label_crnn.tuning.config": [[25, 68], ["isinstance", "paderbox.io.json_module.load_json", "paderbox.io.json_module.load_json.get", "str", "pb_sed.experiments.weak_label_crnn.inference.ex.observers.append", "sorted", "sorted", "len", "pathlib.Path().exists", "sacred.observers.FileStorageObserver.create", "paderbox.utils.timer.timeStamped", "str", "str", "pathlib.Path", "pathlib.Path", "pathlib.Path().glob", "d.is_dir", "pathlib.Path().glob", "d.is_dir", "pathlib.Path", "pathlib.Path"], "function", ["None"], ["\n", "@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "debug", "=", "False", "\n", "timestamp", "=", "timeStamped", "(", "''", ")", "[", "1", ":", "]", "+", "(", "'_debug'", "if", "debug", "else", "''", ")", "\n", "\n", "weak_label_crnn_hyper_params_dir", "=", "''", "\n", "assert", "len", "(", "weak_label_crnn_hyper_params_dir", ")", ">", "0", ",", "'Set weak_label_crnn_hyper_params_dir on the command line.'", "\n", "weak_label_crnn_tuning_config", "=", "load_json", "(", "Path", "(", "weak_label_crnn_hyper_params_dir", ")", "/", "'1'", "/", "'config.json'", ")", "\n", "weak_label_crnn_dirs", "=", "weak_label_crnn_tuning_config", "[", "'crnn_dirs'", "]", "\n", "assert", "len", "(", "weak_label_crnn_dirs", ")", ">", "0", ",", "'weak_label_crnn_dirs must not be empty.'", "\n", "weak_label_crnn_checkpoints", "=", "weak_label_crnn_tuning_config", "[", "'crnn_checkpoints'", "]", "\n", "del", "weak_label_crnn_tuning_config", "\n", "\n", "strong_label_crnn_group_dir", "=", "''", "\n", "if", "isinstance", "(", "strong_label_crnn_group_dir", ",", "list", ")", ":", "\n", "        ", "strong_label_crnn_dirs", "=", "sorted", "(", "[", "\n", "str", "(", "d", ")", "for", "g", "in", "strong_label_crnn_group_dir", "for", "d", "in", "Path", "(", "g", ")", ".", "glob", "(", "'202*'", ")", "if", "d", ".", "is_dir", "(", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "strong_label_crnn_dirs", "=", "sorted", "(", "[", "str", "(", "d", ")", "for", "d", "in", "Path", "(", "strong_label_crnn_group_dir", ")", ".", "glob", "(", "'202*'", ")", "if", "d", ".", "is_dir", "(", ")", "]", ")", "\n", "", "assert", "len", "(", "strong_label_crnn_dirs", ")", ">", "0", ",", "'strong_label_crnn_dirs must not be empty.'", "\n", "strong_label_crnn_checkpoints", "=", "'ckpt_best_macro_fscore_strong.pth'", "\n", "strong_crnn_config", "=", "load_json", "(", "Path", "(", "strong_label_crnn_dirs", "[", "0", "]", ")", "/", "'1'", "/", "'config.json'", ")", "\n", "data_provider", "=", "strong_crnn_config", "[", "'data_provider'", "]", "\n", "database_name", "=", "strong_crnn_config", ".", "get", "(", "'database_name'", ",", "'desed'", ")", "\n", "storage_dir", "=", "str", "(", "storage_root", "/", "'strong_label_crnn'", "/", "database_name", "/", "'hyper_params'", "/", "timestamp", ")", "\n", "assert", "not", "Path", "(", "storage_dir", ")", ".", "exists", "(", ")", "\n", "del", "strong_crnn_config", "\n", "data_provider", "[", "'min_audio_length'", "]", "=", ".01", "\n", "data_provider", "[", "'cached_datasets'", "]", "=", "None", "\n", "\n", "device", "=", "0", "\n", "\n", "validation_set_name", "=", "'validation'", "\n", "validation_ground_truth_filepath", "=", "None", "\n", "eval_set_name", "=", "'eval_public'", "\n", "eval_ground_truth_filepath", "=", "None", "\n", "\n", "medfilt_lengths", "=", "[", "31", "]", "if", "debug", "else", "[", "301", ",", "251", ",", "201", ",", "151", ",", "101", ",", "81", ",", "61", ",", "51", ",", "41", ",", "31", ",", "21", ",", "11", "]", "\n", "\n", "ex", ".", "observers", ".", "append", "(", "FileStorageObserver", ".", "create", "(", "storage_dir", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label_crnn.tuning.main": [[70, 268], ["print", "print", "print", "sacred.commands.print_config", "print", "codecarbon.EmissionsTracker", "codecarbon.EmissionsTracker.start", "pathlib.Path", "pb_sed.data_preparation.provider.DataProvider.from_config", "DataProvider.from_config.test_transform.label_encoder.initialize_labels", "DataProvider.from_config.get_dataset", "pb_sed.models.weak_label.crnn.tune_tagging", "numpy.array", "pb_sed.models.base.boundaries_from_events", "pb_sed.models.weak_label.crnn.tune_boundary_detection", "codecarbon.EmissionsTracker.stop", "print", "isinstance", "isinstance", "pb_sed.models.weak_label.CRNN.from_storage_dir", "isinstance", "pathlib.Path().exists", "numpy.array", "functools.partial", "numpy.arange", "functools.partial", "pb_sed.models.weak_label.crnn.tune_sound_event_detection", "paderbox.io.json_module.dump_json", "sed_scores_eval.collar_based.best_fscore", "paderbox.io.json_module.dump_json", "pb_sed.models.weak_label.crnn.tune_sound_event_detection", "sed_scores_eval.collar_based.best_fscore", "paderbox.io.json_module.dump_json", "os.makedirs", "len", "zip", "range", "DataProvider.from_config.db.get_dataset", "[].to_numpy", "functools.partial", "functools.partial", "functools.partial", "pathlib.Path", "str", "pb_sed.experiments.weak_label_crnn.inference.ex.run", "pb_sed.experiments.weak_label_crnn.inference.ex.run", "len", "pathlib.Path", "pathlib.Path", "str", "str", "pathlib.Path", "DataProvider.from_config.get_raw", "DataProvider.from_config.get_raw"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_tagging", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.boundaries_from_events", "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.tune_boundary_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_sound_event_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_sound_event_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_raw", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_raw"], ["def", "main", "(", "\n", "_run", ",", "storage_dir", ",", "debug", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "weak_label_crnn_dirs", ",", "weak_label_crnn_checkpoints", ",", "\n", "strong_label_crnn_dirs", ",", "strong_label_crnn_checkpoints", ",", "\n", "data_provider", ",", "validation_set_name", ",", "validation_ground_truth_filepath", ",", "\n", "eval_set_name", ",", "eval_ground_truth_filepath", ",", "\n", "medfilt_lengths", ",", "device", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'##### Tuning #####'", ")", "\n", "print", "(", ")", "\n", "print_config", "(", "_run", ")", "\n", "print", "(", "storage_dir", ")", "\n", "storage_dir", "=", "Path", "(", "storage_dir", ")", "\n", "\n", "if", "not", "isinstance", "(", "weak_label_crnn_checkpoints", ",", "list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "weak_label_crnn_checkpoints", ",", "str", ")", ",", "weak_label_crnn_checkpoints", "\n", "weak_label_crnn_checkpoints", "=", "len", "(", "weak_label_crnn_dirs", ")", "*", "[", "weak_label_crnn_checkpoints", "]", "\n", "", "weak_label_crnns", "=", "[", "\n", "weak_label", ".", "CRNN", ".", "from_storage_dir", "(", "\n", "storage_dir", "=", "crnn_dir", ",", "config_name", "=", "'1/config.json'", ",", "\n", "checkpoint_name", "=", "crnn_checkpoint", "\n", ")", "\n", "for", "crnn_dir", ",", "crnn_checkpoint", "in", "zip", "(", "weak_label_crnn_dirs", ",", "weak_label_crnn_checkpoints", ")", "\n", "]", "\n", "data_provider", "=", "DESEDProvider", ".", "from_config", "(", "data_provider", ")", "\n", "data_provider", ".", "test_transform", ".", "label_encoder", ".", "initialize_labels", "(", ")", "\n", "event_classes", "=", "data_provider", ".", "test_transform", ".", "label_encoder", ".", "inverse_label_mapping", "\n", "event_classes", "=", "[", "event_classes", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "event_classes", ")", ")", "]", "\n", "frame_shift", "=", "data_provider", ".", "test_transform", ".", "stft", ".", "shift", "\n", "frame_shift", "/=", "data_provider", ".", "audio_reader", ".", "target_sample_rate", "\n", "\n", "if", "validation_set_name", "==", "'validation'", "and", "not", "validation_ground_truth_filepath", ":", "\n", "        ", "database_root", "=", "Path", "(", "data_provider", ".", "get_raw", "(", "'validation'", ")", "[", "0", "]", "[", "'audio_path'", "]", ")", ".", "parent", ".", "parent", ".", "parent", ".", "parent", "\n", "validation_ground_truth_filepath", "=", "database_root", "/", "'metadata'", "/", "'validation'", "/", "'validation.tsv'", "\n", "", "elif", "validation_set_name", "==", "'eval_public'", "and", "not", "validation_ground_truth_filepath", ":", "\n", "        ", "database_root", "=", "Path", "(", "data_provider", ".", "get_raw", "(", "'eval_public'", ")", "[", "0", "]", "[", "'audio_path'", "]", ")", ".", "parent", ".", "parent", ".", "parent", ".", "parent", "\n", "validation_ground_truth_filepath", "=", "database_root", "/", "'metadata'", "/", "'eval'", "/", "'public.tsv'", "\n", "", "assert", "isinstance", "(", "validation_ground_truth_filepath", ",", "(", "str", ",", "Path", ")", ")", "and", "Path", "(", "validation_ground_truth_filepath", ")", ".", "exists", "(", ")", ",", "validation_ground_truth_filepath", "\n", "\n", "dataset", "=", "data_provider", ".", "get_dataset", "(", "validation_set_name", ")", "\n", "audio_durations", "=", "{", "\n", "example", "[", "'example_id'", "]", ":", "example", "[", "'audio_length'", "]", "\n", "for", "example", "in", "data_provider", ".", "db", ".", "get_dataset", "(", "validation_set_name", ")", "\n", "}", "\n", "\n", "timestamps", "=", "{", "\n", "audio_id", ":", "np", ".", "array", "(", "[", "0.", ",", "audio_durations", "[", "audio_id", "]", "]", ")", "\n", "for", "audio_id", "in", "audio_durations", "\n", "}", "\n", "tags", ",", "tagging_scores", ",", "_", "=", "tagging", "(", "\n", "weak_label_crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "None", ",", "None", ",", "\n", ")", "\n", "\n", "collar_based_params", "=", "{", "\n", "'onset_collar'", ":", ".2", ",", "\n", "'offset_collar'", ":", ".2", ",", "\n", "'offset_collar_rate'", ":", ".2", ",", "\n", "}", "\n", "psds_scenario_1", "=", "{", "\n", "'dtc_threshold'", ":", "0.7", ",", "\n", "'gtc_threshold'", ":", "0.7", ",", "\n", "'cttc_threshold'", ":", "None", ",", "\n", "'alpha_ct'", ":", ".0", ",", "\n", "'alpha_st'", ":", "1.", ",", "\n", "}", "\n", "psds_scenario_2", "=", "{", "\n", "'dtc_threshold'", ":", "0.1", ",", "\n", "'gtc_threshold'", ":", "0.1", ",", "\n", "'cttc_threshold'", ":", "0.3", ",", "\n", "'alpha_ct'", ":", ".5", ",", "\n", "'alpha_st'", ":", "1.", ",", "\n", "}", "\n", "metrics", "=", "{", "\n", "'f'", ":", "partial", "(", "\n", "base", ".", "f_collar", ",", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "return_onset_offset_bias", "=", "True", ",", "num_jobs", "=", "8", ",", "\n", "**", "collar_based_params", ",", "\n", ")", ",", "\n", "'auc1'", ":", "partial", "(", "\n", "base", ".", "psd_auc", ",", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "audio_durations", "=", "audio_durations", ",", "num_jobs", "=", "8", ",", "\n", "**", "psds_scenario_1", ",", "\n", ")", ",", "\n", "'auc2'", ":", "partial", "(", "\n", "base", ".", "psd_auc", ",", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "audio_durations", "=", "audio_durations", ",", "num_jobs", "=", "8", ",", "\n", "**", "psds_scenario_2", ",", "\n", ")", "\n", "}", "\n", "\n", "if", "not", "isinstance", "(", "strong_label_crnn_checkpoints", ",", "list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "strong_label_crnn_checkpoints", ",", "str", ")", ",", "strong_label_crnn_checkpoints", "\n", "strong_label_crnn_checkpoints", "=", "len", "(", "strong_label_crnn_dirs", ")", "*", "[", "strong_label_crnn_checkpoints", "]", "\n", "", "strong_label_crnns", "=", "[", "\n", "strong_label", ".", "CRNN", ".", "from_storage_dir", "(", "\n", "storage_dir", "=", "crnn_dir", ",", "config_name", "=", "'1/config.json'", ",", "\n", "checkpoint_name", "=", "crnn_checkpoint", "\n", ")", "\n", "for", "crnn_dir", ",", "crnn_checkpoint", "in", "zip", "(", "\n", "strong_label_crnn_dirs", ",", "strong_label_crnn_checkpoints", ")", "\n", "]", "\n", "\n", "def", "add_tag_condition", "(", "example", ")", ":", "\n", "        ", "example", "[", "\"tag_condition\"", "]", "=", "np", ".", "array", "(", "[", "\n", "tags", "[", "example_id", "]", "for", "example_id", "in", "example", "[", "\"example_id\"", "]", "]", ")", "\n", "return", "example", "\n", "\n", "", "timestamps", "=", "np", ".", "arange", "(", "0", ",", "10000", ")", "*", "frame_shift", "\n", "leaderboard", "=", "strong_label", ".", "crnn", ".", "tune_sound_event_detection", "(", "\n", "strong_label_crnns", ",", "dataset", ".", "map", "(", "add_tag_condition", ")", ",", "device", ",", "timestamps", ",", "\n", "event_classes", ",", "tags", ",", "metrics", ",", "\n", "tag_masking", "=", "{", "'f'", ":", "True", ",", "'auc1'", ":", "'?'", ",", "'auc2'", ":", "'?'", "}", ",", "\n", "medfilt_lengths", "=", "medfilt_lengths", ",", "\n", ")", "\n", "dump_json", "(", "leaderboard", "[", "'f'", "]", "[", "1", "]", ",", "storage_dir", "/", "f'sed_hyper_params_f.json'", ")", "\n", "f", ",", "p", ",", "r", ",", "thresholds", ",", "_", "=", "collar_based", ".", "best_fscore", "(", "\n", "scores", "=", "leaderboard", "[", "'auc1'", "]", "[", "2", "]", ",", "\n", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "**", "collar_based_params", ",", "num_jobs", "=", "8", "\n", ")", "\n", "for", "event_class", "in", "thresholds", ":", "\n", "        ", "leaderboard", "[", "'auc1'", "]", "[", "1", "]", "[", "event_class", "]", "[", "'threshold'", "]", "=", "thresholds", "[", "event_class", "]", "\n", "", "dump_json", "(", "leaderboard", "[", "'auc1'", "]", "[", "1", "]", ",", "storage_dir", "/", "'sed_hyper_params_psds1.json'", ")", "\n", "f", ",", "p", ",", "r", ",", "thresholds", ",", "_", "=", "collar_based", ".", "best_fscore", "(", "\n", "scores", "=", "leaderboard", "[", "'auc2'", "]", "[", "2", "]", ",", "\n", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "**", "collar_based_params", ",", "num_jobs", "=", "8", "\n", ")", "\n", "for", "event_class", "in", "thresholds", ":", "\n", "        ", "leaderboard", "[", "'auc2'", "]", "[", "1", "]", "[", "event_class", "]", "[", "'threshold'", "]", "=", "thresholds", "[", "event_class", "]", "\n", "", "dump_json", "(", "leaderboard", "[", "'auc2'", "]", "[", "1", "]", ",", "storage_dir", "/", "'sed_hyper_params_psds2.json'", ")", "\n", "for", "crnn_dir", "in", "strong_label_crnn_dirs", ":", "\n", "        ", "tuning_dir", "=", "Path", "(", "crnn_dir", ")", "/", "'hyper_params'", "\n", "os", ".", "makedirs", "(", "str", "(", "tuning_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "(", "tuning_dir", "/", "storage_dir", ".", "name", ")", ".", "symlink_to", "(", "storage_dir", ")", "\n", "", "print", "(", "storage_dir", ")", "\n", "\n", "if", "eval_set_name", ":", "\n", "        ", "evaluation", ".", "run", "(", "\n", "config_updates", "=", "{", "\n", "'debug'", ":", "debug", ",", "\n", "'strong_label_crnn_hyper_params_dir'", ":", "str", "(", "storage_dir", ")", ",", "\n", "'dataset_name'", ":", "eval_set_name", ",", "\n", "'ground_truth_filepath'", ":", "eval_ground_truth_filepath", ",", "\n", "}", ",", "\n", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label_crnn.inference.config": [[27, 64], ["paderbox.io.json_module.load_json", "str", "ex.observers.append", "len", "len", "pathlib.Path().exists", "sacred.observers.FileStorageObserver.create", "paderbox.utils.timer.timeStamped", "pathlib.Path", "pathlib.Path"], "function", ["None"], ["ex", "=", "Exp", "(", "ex_name", ")", "\n", "\n", "\n", "@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "debug", "=", "False", "\n", "timestamp", "=", "timeStamped", "(", "''", ")", "[", "1", ":", "]", "+", "(", "'_debug'", "if", "debug", "else", "''", ")", "\n", "\n", "strong_label_crnn_hyper_params_dir", "=", "''", "\n", "assert", "len", "(", "strong_label_crnn_hyper_params_dir", ")", ">", "0", ",", "'Set strong_label_crnn_hyper_params_dir on the command line.'", "\n", "strong_label_crnn_tuning_config", "=", "load_json", "(", "Path", "(", "strong_label_crnn_hyper_params_dir", ")", "/", "'1'", "/", "'config.json'", ")", "\n", "strong_label_crnn_dirs", "=", "strong_label_crnn_tuning_config", "[", "'strong_label_crnn_dirs'", "]", "\n", "assert", "len", "(", "strong_label_crnn_dirs", ")", ">", "0", ",", "'strong_label_crnn_dirs must not be empty.'", "\n", "strong_label_crnn_checkpoints", "=", "strong_label_crnn_tuning_config", "[", "'strong_label_crnn_checkpoints'", "]", "\n", "data_provider", "=", "strong_label_crnn_tuning_config", "[", "'data_provider'", "]", "\n", "database_name", "=", "strong_label_crnn_tuning_config", "[", "'database_name'", "]", "\n", "storage_dir", "=", "str", "(", "storage_root", "/", "'strong_label_crnn'", "/", "database_name", "/", "'inference'", "/", "timestamp", ")", "\n", "assert", "not", "Path", "(", "storage_dir", ")", ".", "exists", "(", ")", "\n", "\n", "weak_label_crnn_hyper_params_dir", "=", "strong_label_crnn_tuning_config", "[", "'weak_label_crnn_hyper_params_dir'", "]", "\n", "assert", "len", "(", "weak_label_crnn_hyper_params_dir", ")", ">", "0", ",", "'Set weak_label_crnn_hyper_params_dir on the command line.'", "\n", "weak_label_crnn_tuning_config", "=", "load_json", "(", "Path", "(", "weak_label_crnn_hyper_params_dir", ")", "/", "'1'", "/", "'config.json'", ")", "\n", "weak_label_crnn_dirs", "=", "weak_label_crnn_tuning_config", "[", "'crnn_dirs'", "]", "\n", "assert", "len", "(", "weak_label_crnn_dirs", ")", ">", "0", ",", "'weak_label_crnn_dirs must not be empty.'", "\n", "weak_label_crnn_checkpoints", "=", "weak_label_crnn_tuning_config", "[", "'crnn_checkpoints'", "]", "\n", "\n", "del", "strong_label_crnn_tuning_config", "\n", "del", "weak_label_crnn_tuning_config", "\n", "\n", "sed_hyper_params_name", "=", "[", "'f'", ",", "'psds1'", ",", "'psds2'", "]", "\n", "\n", "device", "=", "0", "\n", "\n", "dataset_name", "=", "'eval_public'", "\n", "ground_truth_filepath", "=", "None", "\n", "\n", "max_segment_length", "=", "None", "\n", "if", "max_segment_length", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label_crnn.inference.tagging": [[66, 136], ["print", "print", "paderbox.io.json_module.load_json", "pb_sed.models.base.tagging", "numpy.array", "pb_sed.utils.segment.merge_segments", "pb_sed.models.base.scores_to_dataframes", "pathlib.Path", "sed_scores_eval.clip_based.fscore", "print", "print", "print", "range", "base.tagging.keys", "base.tagging.keys", "results.update", "len", "sed_scores_eval.intersection_based.psds", "print", "classwise_rocs.items", "sed_scores_eval.intersection_based.reference.approximate_psds", "print", "classwise_rocs.items", "sed_scores_eval.utils.auc.staircase_auc", "sed_scores_eval.utils.auc.staircase_auc", "psds_params[].get", "numpy.linspace", "psds_params[].get"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.tagging", "home.repos.pwc.inspect_result.fgnt_pb_sed.utils.segment.merge_segments", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.scores_to_dataframes", "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.fscore"], ["", "else", ":", "\n", "        ", "segment_overlap", "=", "100", "\n", "", "save_scores", "=", "False", "\n", "save_detections", "=", "False", "\n", "\n", "weak_pseudo_labeling", "=", "False", "\n", "strong_pseudo_labeling", "=", "False", "\n", "pseudo_labelled_dataset_name", "=", "dataset_name", "\n", "\n", "pseudo_widening", "=", ".0", "\n", "\n", "ex", ".", "observers", ".", "append", "(", "FileStorageObserver", ".", "create", "(", "storage_dir", ")", ")", "\n", "\n", "\n", "", "def", "sound_event_detection", "(", "\n", "crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "tags", ",", "\n", "hyper_params_dir", ",", "hyper_params_name", ",", "\n", "ground_truth", ",", "audio_durations", ",", "\n", "collar_based_params", "=", "(", ")", ",", "psds_params", "=", "(", ")", ",", "\n", "max_segment_length", "=", "None", ",", "segment_overlap", "=", "None", ",", "pseudo_widening", "=", ".0", ",", "\n", "score_storage_dir", "=", "None", ",", "detection_storage_dir", "=", "None", ",", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'Sound Event Detection'", ")", "\n", "if", "isinstance", "(", "hyper_params_name", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "hyper_params_name", "=", "[", "hyper_params_name", "]", "\n", "", "assert", "isinstance", "(", "hyper_params_name", ",", "(", "list", ",", "tuple", ")", ")", "\n", "hyper_params", "=", "[", "\n", "load_json", "(", "Path", "(", "hyper_params_dir", ")", "/", "f'sed_hyper_params_{name}.json'", ")", "\n", "for", "name", "in", "hyper_params_name", "\n", "]", "\n", "\n", "if", "isinstance", "(", "score_storage_dir", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "assert", "len", "(", "score_storage_dir", ")", "==", "len", "(", "hyper_params", ")", ",", "(", "len", "(", "score_storage_dir", ")", ",", "len", "(", "hyper_params", ")", ")", "\n", "", "elif", "isinstance", "(", "score_storage_dir", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "score_storage_dir", "=", "[", "\n", "Path", "(", "score_storage_dir", ")", "/", "name", "for", "name", "in", "hyper_params_name", "\n", "]", "\n", "", "elif", "score_storage_dir", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'score_storage_dir must be list, str, Path or None.'", ")", "\n", "\n", "", "if", "isinstance", "(", "detection_storage_dir", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "assert", "len", "(", "detection_storage_dir", ")", "==", "len", "(", "hyper_params", ")", ",", "(", "len", "(", "detection_storage_dir", ")", ",", "len", "(", "hyper_params", ")", ")", "\n", "", "elif", "isinstance", "(", "detection_storage_dir", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "detection_storage_dir", "=", "[", "\n", "Path", "(", "detection_storage_dir", ")", "/", "name", "for", "name", "in", "hyper_params_name", "\n", "]", "\n", "", "elif", "detection_storage_dir", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'detection_storage_dir must be list, str, Path or None.'", ")", "\n", "\n", "", "medfilt_lengths", "=", "np", ".", "zeros", "(", "(", "len", "(", "hyper_params", ")", ",", "len", "(", "event_classes", ")", ")", ")", "\n", "tag_masked", "=", "np", ".", "zeros", "(", "(", "len", "(", "hyper_params", ")", ",", "len", "(", "event_classes", ")", ")", ")", "\n", "for", "i", ",", "hyper_params_i", "in", "enumerate", "(", "hyper_params", ")", ":", "\n", "        ", "for", "j", ",", "event_class", "in", "enumerate", "(", "event_classes", ")", ":", "\n", "            ", "medfilt_lengths", "[", "i", ",", "j", "]", "=", "hyper_params_i", "[", "event_class", "]", "[", "'medfilt_length'", "]", "\n", "tag_masked", "[", "i", ",", "j", "]", "=", "hyper_params_i", "[", "event_class", "]", "[", "'tag_masked'", "]", "\n", "", "", "detection_scores", "=", "base", ".", "sound_event_detection", "(", "\n", "crnns", ",", "dataset", ",", "device", ",", "\n", "medfilt_length", "=", "medfilt_lengths", ",", "apply_mask", "=", "tag_masked", ",", "masks", "=", "tags", ",", "\n", "timestamps", "=", "timestamps", ",", "event_classes", "=", "event_classes", ",", "\n", "max_segment_length", "=", "max_segment_length", ",", "segment_overlap", "=", "segment_overlap", ",", "\n", "merge_score_segments", "=", "True", ",", "score_segment_overlap", "=", "segment_overlap", ",", "\n", "score_storage_dir", "=", "score_storage_dir", ",", "\n", ")", "\n", "event_detections", "=", "[", "]", "\n", "results", "=", "[", "]", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "hyper_params_name", ")", ":", "\n", "        ", "if", "ground_truth", ":", "\n", "            ", "print", "(", ")", "\n", "print", "(", "name", ")", "\n", "", "results", ".", "append", "(", "{", "}", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label_crnn.inference.boundaries_detection": [[138, 198], ["print", "print", "paderbox.io.json_module.load_json", "numpy.array", "pb_sed.models.base.boundaries_detection", "sed_scores_eval.base_modules.detection.scores_to_event_list", "pb_sed.models.base.tuning.boundaries_from_events", "sed_scores_eval.collar_based.fscore", "print", "print", "print", "pathlib.Path", "results.update", "max", "numpy.round", "results.update", "numpy.round", "boundaries_in_clip.append", "max", "max"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.boundaries_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.boundaries_from_events", "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.fscore"], ["            ", "io", ".", "write_detections_for_multiple_thresholds", "(", "\n", "detection_scores", "[", "i", "]", ",", "thresholds", "=", "np", ".", "linspace", "(", ".01", ",", ".99", ",", "50", ")", ",", "\n", "dir_path", "=", "detection_storage_dir", "[", "i", "]", ",", "\n", ")", "\n", "", "if", "'threshold'", "in", "hyper_params", "[", "i", "]", "[", "event_classes", "[", "0", "]", "]", ":", "\n", "            ", "thresholds", "=", "{", "\n", "event_class", ":", "hyper_params", "[", "i", "]", "[", "event_class", "]", "[", "'threshold'", "]", "\n", "for", "event_class", "in", "event_classes", "\n", "}", "\n", "event_detections", ".", "append", "(", "\n", "scores_to_event_list", "(", "\n", "detection_scores", "[", "i", "]", ",", "thresholds", ",", "event_classes", "=", "event_classes", ")", "\n", ")", "\n", "if", "detection_storage_dir", "and", "detection_storage_dir", "[", "i", "]", ":", "\n", "                ", "io", ".", "write_detection", "(", "\n", "detection_scores", "[", "i", "]", ",", "thresholds", ",", "\n", "Path", "(", "detection_storage_dir", "[", "i", "]", ")", "/", "'cbf.tsv'", ",", "\n", ")", "\n", "", "if", "ground_truth", "and", "collar_based_params", ":", "\n", "                ", "f", ",", "p", ",", "r", ",", "stats", "=", "collar_based", ".", "fscore", "(", "\n", "detection_scores", "[", "i", "]", ",", "ground_truth", ",", "thresholds", ",", "\n", "**", "collar_based_params", ",", "\n", "return_onset_offset_dist_sum", "=", "True", ",", "num_jobs", "=", "8", ",", "\n", ")", "\n", "print", "(", "'f'", ",", "f", ")", "\n", "print", "(", "'p'", ",", "p", ")", "\n", "print", "(", "'r'", ",", "r", ")", "\n", "for", "key", "in", "f", ":", "\n", "                    ", "results", "[", "-", "1", "]", ".", "update", "(", "{", "\n", "f'{key}_f'", ":", "f", "[", "key", "]", ",", "\n", "f'{key}_p'", ":", "p", "[", "key", "]", ",", "\n", "f'{key}_r'", ":", "r", "[", "key", "]", ",", "\n", "}", ")", "\n", "if", "key", "in", "stats", ":", "\n", "                        ", "results", "[", "-", "1", "]", ".", "update", "(", "{", "\n", "f'{key}_onset_bias'", ":", "stats", "[", "key", "]", "[", "'onset_dist_sum'", "]", "/", "max", "(", "stats", "[", "key", "]", "[", "'tps'", "]", ",", "1", ")", ",", "\n", "f'{key}_offset_bias'", ":", "stats", "[", "key", "]", "[", "'offset_dist_sum'", "]", "/", "max", "(", "stats", "[", "key", "]", "[", "'tps'", "]", ",", "1", ")", ",", "\n", "}", ")", "\n", "\n", "", "", "", "for", "clip_id", "in", "event_detections", "[", "-", "1", "]", ":", "\n", "                ", "events_in_clip", "=", "[", "]", "\n", "for", "onset", ",", "offset", ",", "event_label", "in", "event_detections", "[", "-", "1", "]", "[", "clip_id", "]", ":", "\n", "                    ", "onset", "=", "max", "(", "onset", "-", "pseudo_widening", "-", "hyper_params", "[", "i", "]", "[", "event_label", "]", ".", "get", "(", "'onset_bias'", ",", "0", ")", ",", "0", ")", "\n", "offset", "=", "offset", "+", "pseudo_widening", "-", "hyper_params", "[", "i", "]", "[", "event_label", "]", ".", "get", "(", "'offset_bias'", ",", "0", ")", "\n", "if", "offset", ">", "onset", ":", "\n", "                        ", "events_in_clip", ".", "append", "(", "(", "onset", ",", "offset", ",", "event_label", ")", ")", "\n", "", "", "event_detections", "[", "-", "1", "]", "[", "clip_id", "]", "=", "events_in_clip", "\n", "", "", "else", ":", "\n", "            ", "event_detections", ".", "append", "(", "None", ")", "\n", "", "if", "ground_truth", ":", "\n", "            ", "if", "not", "isinstance", "(", "psds_params", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "psds_params", "=", "[", "psds_params", "]", "\n", "", "for", "j", "in", "range", "(", "len", "(", "psds_params", ")", ")", ":", "\n", "                ", "psds", ",", "psd_roc", ",", "classwise_rocs", "=", "intersection_based", ".", "psds", "(", "\n", "detection_scores", "[", "i", "]", ",", "ground_truth", ",", "audio_durations", ",", "\n", "**", "psds_params", "[", "j", "]", ",", "num_jobs", "=", "8", ",", "\n", ")", "\n", "print", "(", "f'psds[{j}]'", ",", "psds", ")", "\n", "results", "[", "-", "1", "]", "[", "f'psds[{j}]'", "]", "=", "psds", "\n", "for", "event_class", ",", "(", "tpr", ",", "efpr", ",", "*", "_", ")", "in", "classwise_rocs", ".", "items", "(", ")", ":", "\n", "                    ", "results", "[", "-", "1", "]", "[", "f'{event_class}_auc[{j}]'", "]", "=", "staircase_auc", "(", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label_crnn.inference.sound_event_detection": [[200, 357], ["print", "print", "isinstance", "isinstance", "isinstance", "isinstance", "numpy.zeros", "numpy.zeros", "numpy.zeros", "set", "enumerate", "pb_sed.models.base.sound_event_detection", "enumerate", "paderbox.io.json_module.load_json", "isinstance", "isinstance", "enumerate", "ValueError", "list", "results.append", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "set.add", "len", "print", "print", "sed_scores_eval.io.write_detections_for_multiple_thresholds", "event_detections.append", "event_detections.append", "range", "pathlib.Path", "ValueError", "ValueError", "sed_scores_eval.base_modules.detection.scores_to_event_list", "sed_scores_eval.io.write_detection", "sed_scores_eval.collar_based.fscore", "print", "print", "print", "isinstance", "len", "sed_scores_eval.intersection_based.psds", "print", "classwise_rocs.items", "sed_scores_eval.intersection_based.reference.approximate_psds", "print", "classwise_rocs.items", "pathlib.Path", "pathlib.Path", "numpy.linspace", "results[].update", "max", "sed_scores_eval.utils.auc.staircase_auc", "sed_scores_eval.intersection_based.psds", "print", "sed_scores_eval.utils.auc.staircase_auc", "sed_scores_eval.intersection_based.reference.approximate_psds_from_detections_dir", "print", "pathlib.Path", "results[].update", "[].get", "events_in_clip.append", "psds_params[].get", "numpy.linspace", "psds_params[].get", "[].get", "numpy.linspace", "max", "max"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.sound_event_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.fscore"], ["", "if", "score_storage_dir", "and", "score_storage_dir", "[", "i", "]", "is", "not", "None", ":", "\n", "                    ", "psds", ",", "psd_roc", ",", "classwise_rocs", "=", "intersection_based", ".", "psds", "(", "\n", "score_storage_dir", "[", "i", "]", ",", "ground_truth", ",", "audio_durations", ",", "\n", "**", "psds_params", "[", "j", "]", ",", "num_jobs", "=", "8", ",", "\n", ")", "\n", "print", "(", "f'psds[{j}] (from files)'", ",", "psds", ")", "\n", "", "psds", ",", "psd_roc", ",", "classwise_rocs", "=", "intersection_based", ".", "reference", ".", "approximate_psds", "(", "\n", "detection_scores", "[", "i", "]", ",", "ground_truth", ",", "audio_durations", ",", "\n", "**", "psds_params", "[", "j", "]", ",", "thresholds", "=", "np", ".", "linspace", "(", ".01", ",", ".99", ",", "50", ")", ",", "\n", ")", "\n", "print", "(", "f'approx_psds[{j}]'", ",", "psds", ")", "\n", "results", "[", "-", "1", "]", "[", "f'approx_psds[{j}]'", "]", "=", "psds", "\n", "for", "event_class", ",", "(", "tpr", ",", "efpr", ",", "*", "_", ")", "in", "classwise_rocs", ".", "items", "(", ")", ":", "\n", "                    ", "results", "[", "-", "1", "]", "[", "f'{event_class}_approx_auc[{j}]'", "]", "=", "staircase_auc", "(", "\n", "tpr", ",", "efpr", ",", "psds_params", "[", "j", "]", ".", "get", "(", "'max_efpr'", ",", "100", ")", ")", "\n", "", "if", "detection_storage_dir", "and", "detection_storage_dir", "[", "i", "]", "is", "not", "None", ":", "\n", "                    ", "psds", ",", "psd_roc", ",", "classwise_rocs", "=", "intersection_based", ".", "reference", ".", "approximate_psds_from_detections_dir", "(", "\n", "detection_storage_dir", "[", "i", "]", ",", "ground_truth", ",", "audio_durations", ",", "\n", "**", "psds_params", "[", "j", "]", ",", "thresholds", "=", "np", ".", "linspace", "(", ".01", ",", ".99", ",", "50", ")", ",", "\n", ")", "\n", "print", "(", "f'approx_psds[{j}] (from files)'", ",", "psds", ")", "\n", "", "", "", "", "return", "event_detections", ",", "results", "\n", "\n", "\n", "", "@", "ex", ".", "automain", "\n", "def", "main", "(", "\n", "_run", ",", "\n", "storage_dir", ",", "strong_label_crnn_hyper_params_dir", ",", "sed_hyper_params_name", ",", "\n", "strong_label_crnn_dirs", ",", "strong_label_crnn_checkpoints", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "weak_label_crnn_dirs", ",", "weak_label_crnn_checkpoints", ",", "\n", "device", ",", "data_provider", ",", "dataset_name", ",", "ground_truth_filepath", ",", "\n", "save_scores", ",", "save_detections", ",", "max_segment_length", ",", "segment_overlap", ",", "\n", "strong_pseudo_labeling", ",", "pseudo_widening", ",", "pseudo_labelled_dataset_name", ",", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'##### Inference #####'", ")", "\n", "print", "(", ")", "\n", "print_config", "(", "_run", ")", "\n", "print", "(", "storage_dir", ")", "\n", "emissions_tracker", "=", "EmissionsTracker", "(", "\n", "output_dir", "=", "storage_dir", ",", "on_csv_write", "=", "\"update\"", ",", "log_level", "=", "'error'", ")", "\n", "emissions_tracker", ".", "start", "(", ")", "\n", "storage_dir", "=", "Path", "(", "storage_dir", ")", "\n", "\n", "collar_based_params", "=", "{", "\n", "'onset_collar'", ":", ".2", ",", "\n", "'offset_collar'", ":", ".2", ",", "\n", "'offset_collar_rate'", ":", ".2", ",", "\n", "}", "\n", "psds_scenario_1", "=", "{", "\n", "'dtc_threshold'", ":", "0.7", ",", "\n", "'gtc_threshold'", ":", "0.7", ",", "\n", "'cttc_threshold'", ":", "None", ",", "\n", "'alpha_ct'", ":", ".0", ",", "\n", "'alpha_st'", ":", "1.", ",", "\n", "}", "\n", "psds_scenario_2", "=", "{", "\n", "'dtc_threshold'", ":", "0.1", ",", "\n", "'gtc_threshold'", ":", "0.1", ",", "\n", "'cttc_threshold'", ":", "0.3", ",", "\n", "'alpha_ct'", ":", ".5", ",", "\n", "'alpha_st'", ":", "1.", ",", "\n", "}", "\n", "\n", "if", "not", "isinstance", "(", "weak_label_crnn_checkpoints", ",", "list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "weak_label_crnn_checkpoints", ",", "str", ")", ",", "weak_label_crnn_checkpoints", "\n", "weak_label_crnn_checkpoints", "=", "len", "(", "weak_label_crnn_dirs", ")", "*", "[", "weak_label_crnn_checkpoints", "]", "\n", "", "weak_label_crnns", "=", "[", "\n", "weak_label", ".", "CRNN", ".", "from_storage_dir", "(", "\n", "storage_dir", "=", "crnn_dir", ",", "config_name", "=", "'1/config.json'", ",", "\n", "checkpoint_name", "=", "crnn_checkpoint", "\n", ")", "\n", "for", "crnn_dir", ",", "crnn_checkpoint", "in", "zip", "(", "weak_label_crnn_dirs", ",", "weak_label_crnn_checkpoints", ")", "\n", "]", "\n", "print", "(", "'Weak Label CRNN Params'", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "crnn", "in", "weak_label_crnns", "for", "p", "in", "crnn", ".", "parameters", "(", ")", "]", ")", ")", "\n", "print", "(", "'Weak Label CNN2d Params'", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "crnn", "in", "weak_label_crnns", "for", "p", "in", "crnn", ".", "cnn", ".", "cnn_2d", ".", "parameters", "(", ")", "]", ")", ")", "\n", "if", "not", "isinstance", "(", "strong_label_crnn_checkpoints", ",", "list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "strong_label_crnn_checkpoints", ",", "str", ")", ",", "strong_label_crnn_checkpoints", "\n", "strong_label_crnn_checkpoints", "=", "len", "(", "strong_label_crnn_dirs", ")", "*", "[", "strong_label_crnn_checkpoints", "]", "\n", "", "strong_label_crnns", "=", "[", "\n", "strong_label", ".", "CRNN", ".", "from_storage_dir", "(", "\n", "storage_dir", "=", "crnn_dir", ",", "config_name", "=", "'1/config.json'", ",", "\n", "checkpoint_name", "=", "crnn_checkpoint", "\n", ")", "\n", "for", "crnn_dir", ",", "crnn_checkpoint", "in", "zip", "(", "strong_label_crnn_dirs", ",", "strong_label_crnn_checkpoints", ")", "\n", "]", "\n", "print", "(", "'Strong Label CRNN Params'", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "crnn", "in", "strong_label_crnns", "for", "p", "in", "crnn", ".", "parameters", "(", ")", "]", ")", ")", "\n", "print", "(", "'Strong Label CNN2d Params'", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "crnn", "in", "strong_label_crnns", "for", "p", "in", "crnn", ".", "cnn", ".", "cnn_2d", ".", "parameters", "(", ")", "]", ")", ")", "\n", "data_provider", "=", "DESEDProvider", ".", "from_config", "(", "data_provider", ")", "\n", "data_provider", ".", "test_transform", ".", "label_encoder", ".", "initialize_labels", "(", ")", "\n", "event_classes", "=", "data_provider", ".", "test_transform", ".", "label_encoder", ".", "inverse_label_mapping", "\n", "event_classes", "=", "[", "event_classes", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "event_classes", ")", ")", "]", "\n", "frame_shift", "=", "data_provider", ".", "test_transform", ".", "stft", ".", "shift", "\n", "frame_shift", "/=", "data_provider", ".", "audio_reader", ".", "target_sample_rate", "\n", "\n", "if", "not", "isinstance", "(", "dataset_name", ",", "list", ")", ":", "\n", "        ", "dataset_name", "=", "[", "dataset_name", "]", "\n", "", "if", "ground_truth_filepath", "is", "None", ":", "\n", "        ", "ground_truth_filepath", "=", "len", "(", "dataset_name", ")", "*", "[", "ground_truth_filepath", "]", "\n", "", "elif", "isinstance", "(", "ground_truth_filepath", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "ground_truth_filepath", "=", "[", "ground_truth_filepath", "]", "\n", "", "assert", "len", "(", "ground_truth_filepath", ")", "==", "len", "(", "dataset_name", ")", "\n", "if", "not", "isinstance", "(", "strong_pseudo_labeling", ",", "list", ")", ":", "\n", "        ", "strong_pseudo_labeling", "=", "len", "(", "dataset_name", ")", "*", "[", "strong_pseudo_labeling", "]", "\n", "", "assert", "len", "(", "strong_pseudo_labeling", ")", "==", "len", "(", "dataset_name", ")", "\n", "if", "not", "isinstance", "(", "pseudo_labelled_dataset_name", ",", "list", ")", ":", "\n", "        ", "pseudo_labelled_dataset_name", "=", "[", "pseudo_labelled_dataset_name", "]", "\n", "", "assert", "len", "(", "pseudo_labelled_dataset_name", ")", "==", "len", "(", "dataset_name", ")", "\n", "\n", "database", "=", "deepcopy", "(", "data_provider", ".", "db", ".", "data", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset_name", ")", ")", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "dataset_name", "[", "i", "]", ")", "\n", "if", "dataset_name", "[", "i", "]", "==", "'eval_public'", "and", "not", "ground_truth_filepath", "[", "i", "]", ":", "\n", "            ", "database_root", "=", "Path", "(", "data_provider", ".", "get_raw", "(", "'eval_public'", ")", "[", "0", "]", "[", "'audio_path'", "]", ")", ".", "parent", ".", "parent", ".", "parent", ".", "parent", "\n", "ground_truth_filepath", "[", "i", "]", "=", "database_root", "/", "'metadata'", "/", "'eval'", "/", "'public.tsv'", "\n", "", "elif", "dataset_name", "[", "i", "]", "==", "'validation'", "and", "not", "ground_truth_filepath", "[", "i", "]", ":", "\n", "            ", "database_root", "=", "Path", "(", "data_provider", ".", "get_raw", "(", "'validation'", ")", "[", "0", "]", "[", "'audio_path'", "]", ")", ".", "parent", ".", "parent", ".", "parent", ".", "parent", "\n", "ground_truth_filepath", "[", "i", "]", "=", "database_root", "/", "'metadata'", "/", "'validation'", "/", "'validation.tsv'", "\n", "\n", "", "dataset", "=", "data_provider", ".", "get_dataset", "(", "dataset_name", "[", "i", "]", ")", "\n", "audio_durations", "=", "{", "\n", "example", "[", "'example_id'", "]", ":", "example", "[", "'audio_length'", "]", "\n", "for", "example", "in", "data_provider", ".", "db", ".", "get_dataset", "(", "dataset_name", "[", "i", "]", ")", "\n", "}", "\n", "\n", "score_storage_dir", "=", "storage_dir", "/", "'scores'", "/", "dataset_name", "[", "i", "]", "\n", "detection_storage_dir", "=", "storage_dir", "/", "'detections'", "/", "dataset_name", "[", "i", "]", "\n", "\n", "if", "max_segment_length", "is", "None", ":", "\n", "            ", "timestamps", "=", "{", "\n", "audio_id", ":", "np", ".", "array", "(", "[", "0.", ",", "audio_durations", "[", "audio_id", "]", "]", ")", "\n", "for", "audio_id", "in", "audio_durations", "\n", "}", "\n", "", "else", ":", "\n", "            ", "timestamps", "=", "{", "}", "\n", "for", "audio_id", "in", "audio_durations", ":", "\n", "                ", "ts", "=", "np", ".", "arange", "(", "\n", "(", "2", "+", "max_segment_length", ")", "*", "frame_shift", ",", "\n", "audio_durations", "[", "audio_id", "]", ",", "\n", "(", "max_segment_length", "-", "segment_overlap", ")", "*", "frame_shift", "\n", ")", "\n", "timestamps", "[", "audio_id", "]", "=", "np", ".", "concatenate", "(", "(", "\n", "[", "0.", "]", ",", "ts", "-", "segment_overlap", "/", "2", "*", "frame_shift", ",", "\n", "[", "audio_durations", "[", "audio_id", "]", "]", "\n", ")", ")", "\n", "", "", "if", "max_segment_length", "is", "not", "None", ":", "\n", "            ", "dataset", "=", "dataset", ".", "map", "(", "partial", "(", "\n", "segment_batch", ",", "\n", "max_length", "=", "max_segment_length", ",", "\n", "overlap", "=", "segment_overlap", "\n", ")", ")", ".", "unbatch", "(", ")", "\n", "", "tags", ",", "tagging_scores", ",", "_", "=", "tagging", "(", "\n", "weak_label_crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "None", ",", "None", ",", "\n", ")", "\n", "\n", "def", "add_tag_condition", "(", "example", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label_crnn.inference.main": [[359, 554], ["print", "print", "print", "sacred.commands.print_config", "print", "codecarbon.EmissionsTracker", "codecarbon.EmissionsTracker.start", "pathlib.Path", "print", "print", "pb_sed.data_preparation.provider.DataProvider.from_config", "DataProvider.from_config.test_transform.label_encoder.initialize_labels", "copy.deepcopy", "range", "os.makedirs", "codecarbon.EmissionsTracker.stop", "print", "isinstance", "isinstance", "pb_sed.models.weak_label.CRNN.from_storage_dir", "sum", "sum", "isinstance", "isinstance", "len", "len", "isinstance", "len", "len", "isinstance", "len", "len", "isinstance", "len", "len", "isinstance", "len", "len", "len", "print", "print", "DataProvider.from_config.get_dataset", "inference.tagging", "numpy.round", "pb_sed.models.base.pseudo_label", "any", "any", "any", "paderbox.io.json_module.dump_json", "pathlib.Path", "str", "len", "zip", "range", "len", "len", "len", "len", "paderbox.io.json_module.dump_json", "inference.boundaries_detection", "isinstance", "inference.sound_event_detection", "enumerate", "p.numel", "p.numel", "len", "DataProvider.from_config.db.get_dataset", "numpy.array", "numpy.arange", "numpy.concatenate", "numpy.arange", "paderbox.io.json_module.dump_json", "crnn.parameters", "crnn.cnn.cnn_2d.parameters", "paderbox.io.json_module.dump_json", "pathlib.Path", "pathlib.Path", "pathlib.Path", "DataProvider.from_config.get_raw", "DataProvider.from_config.get_raw"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.tagging", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.pseudo_label.pseudo_label", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.boundaries_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.sound_event_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_raw", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_raw"], ["tags", "[", "example_id", "]", "for", "example_id", "in", "example", "[", "\"example_id\"", "]", "]", ")", "\n", "return", "example", "\n", "\n", "", "dataset", "=", "dataset", ".", "map", "(", "add_tag_condition", ")", "\n", "\n", "timestamps", "=", "np", ".", "round", "(", "np", ".", "arange", "(", "0", ",", "100000", ")", "*", "frame_shift", ",", "decimals", "=", "6", ")", "\n", "if", "not", "isinstance", "(", "sed_hyper_params_name", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "sed_hyper_params_name", "=", "[", "sed_hyper_params_name", "]", "\n", "", "events", ",", "sed_results", "=", "sound_event_detection", "(", "\n", "strong_label_crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "tags", ",", "\n", "strong_label_crnn_hyper_params_dir", ",", "sed_hyper_params_name", ",", "\n", "ground_truth_filepath", "[", "i", "]", ",", "audio_durations", ",", "\n", "collar_based_params", ",", "[", "psds_scenario_1", ",", "psds_scenario_2", "]", ",", "\n", "max_segment_length", "=", "max_segment_length", ",", "\n", "segment_overlap", "=", "segment_overlap", ",", "\n", "pseudo_widening", "=", "pseudo_widening", ",", "\n", "score_storage_dir", "=", "[", "score_storage_dir", "/", "name", "for", "name", "in", "sed_hyper_params_name", "]", "\n", "if", "save_scores", "else", "None", ",", "\n", "detection_storage_dir", "=", "[", "detection_storage_dir", "/", "name", "for", "name", "in", "sed_hyper_params_name", "]", "\n", "if", "save_detections", "else", "None", ",", "\n", ")", "\n", "for", "j", ",", "sed_results_j", "in", "enumerate", "(", "sed_results", ")", ":", "\n", "            ", "if", "sed_results_j", ":", "\n", "                ", "dump_json", "(", "\n", "sed_results_j", ",", "\n", "storage_dir", "/", "f'sed_{sed_hyper_params_name[j]}_results_{dataset_name[i]}.json'", "\n", ")", "\n", "", "", "if", "strong_pseudo_labeling", "[", "i", "]", ":", "\n", "            ", "database", "[", "'datasets'", "]", "[", "pseudo_labelled_dataset_name", "[", "i", "]", "]", "=", "base", ".", "pseudo_label", "(", "\n", "database", "[", "'datasets'", "]", "[", "dataset_name", "[", "i", "]", "]", ",", "event_classes", ",", "\n", "False", ",", "False", ",", "strong_pseudo_labeling", "[", "i", "]", ",", "\n", "None", ",", "None", ",", "events", "[", "0", "]", ",", "\n", ")", "\n", "with", "(", "storage_dir", "/", "f'{dataset_name[i]}_pseudo_labeled.tsv'", ")", ".", "open", "(", "'w'", ")", "as", "fid", ":", "\n", "                ", "fid", ".", "write", "(", "'filename\\tonset\\toffset\\tevent_label\\n'", ")", "\n", "for", "key", ",", "event_list", "in", "events", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "                    ", "if", "len", "(", "event_list", ")", "==", "0", ":", "\n", "                        ", "fid", ".", "write", "(", "f'{key}.wav\\t\\t\\t\\n'", ")", "\n", "", "for", "t_on", ",", "t_off", ",", "event_label", "in", "event_list", ":", "\n", "                        ", "fid", ".", "write", "(", "\n", "f'{key}.wav\\t{t_on}\\t{t_off}\\t{event_label}\\n'", ")", "\n", "\n", "", "", "", "", "", "if", "any", "(", "strong_pseudo_labeling", ")", ":", "\n", "        ", "dump_json", "(", "\n", "database", ",", "\n", "storage_dir", "/", "Path", "(", "data_provider", ".", "json_path", ")", ".", "name", ",", "\n", "create_path", "=", "True", ",", "\n", "indent", "=", "4", ",", "\n", "ensure_ascii", "=", "False", ",", "\n", ")", "\n", "", "inference_dir", "=", "Path", "(", "strong_label_crnn_hyper_params_dir", ")", "/", "'inference'", "\n", "os", ".", "makedirs", "(", "str", "(", "inference_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "(", "inference_dir", "/", "storage_dir", ".", "name", ")", ".", "symlink_to", "(", "storage_dir", ")", "\n", "emissions_tracker", ".", "stop", "(", ")", "\n", "print", "(", "storage_dir", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label_crnn.training.config": [[35, 270], ["str", "padertorch.train.trainer.Trainer.get_config", "pb_sed.experiments.weak_label_crnn.tuning.ex.observers.append", "pb_sed.database.desed.provider.DESEDProvider.get_config", "sacred.observers.FileStorageObserver.create", "paderbox.utils.timer.timeStamped", "pb_sed.database.audioset.provider.AudioSetProvider.get_config", "ValueError", "ValueError", "pathlib.Path().exists", "int", "int", "int", "int", "min", "pathlib.Path", "numpy.log", "min"], "function", ["None"], ["    ", "delay", "=", "0", "\n", "debug", "=", "False", "\n", "timestamp", "=", "timeStamped", "(", "''", ")", "[", "1", ":", "]", "+", "(", "'_debug'", "if", "debug", "else", "''", ")", "\n", "group_name", "=", "timestamp", "\n", "database_name", "=", "'desed'", "\n", "storage_dir", "=", "str", "(", "storage_root", "/", "'strong_label_crnn'", "/", "database_name", "/", "'training'", "/", "group_name", "/", "timestamp", ")", "\n", "\n", "# Data provider", "\n", "if", "database_name", "==", "'desed'", ":", "\n", "        ", "batch_size", "=", "32", "\n", "data_provider", "=", "{", "\n", "'factory'", ":", "DESEDProvider", ",", "\n", "'json_path'", ":", "str", "(", "database_jsons_dir", "/", "'desed_pseudo_labeled.json'", ")", ",", "\n", "'train_set'", ":", "{", "\n", "'train_weak'", ":", "10", ",", "\n", "'train_strong'", ":", "10", ",", "\n", "'train_synthetic20'", ":", "2", ",", "\n", "'train_synthetic21'", ":", "1", ",", "\n", "'train_unlabel_in_domain'", ":", "2", ",", "\n", "}", ",", "\n", "'cached_datasets'", ":", "None", "if", "debug", "else", "[", "'train_weak'", ",", "'train_synthetic20'", "]", ",", "\n", "'train_fetcher'", ":", "{", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'prefetch_workers'", ":", "batch_size", ",", "\n", "'min_dataset_examples_in_batch'", ":", "{", "\n", "'train_weak'", ":", "int", "(", "3", "*", "batch_size", "/", "32", ")", ",", "\n", "'train_strong'", ":", "int", "(", "6", "*", "batch_size", "/", "32", ")", ",", "\n", "'train_synthetic20'", ":", "int", "(", "1", "*", "batch_size", "/", "32", ")", ",", "\n", "'train_synthetic21'", ":", "int", "(", "2", "*", "batch_size", "/", "32", ")", ",", "\n", "'train_unlabel_in_domain'", ":", "0", ",", "\n", "}", ",", "\n", "}", ",", "\n", "'storage_dir'", ":", "storage_dir", ",", "\n", "}", "\n", "num_events", "=", "10", "\n", "DESEDProvider", ".", "get_config", "(", "data_provider", ")", "\n", "\n", "validation_set_name", "=", "'validation'", "\n", "validation_ground_truth_filepath", "=", "None", "\n", "weak_label_crnn_hyper_params_dir", "=", "''", "\n", "eval_set_name", "=", "'eval_public'", "\n", "eval_ground_truth_filepath", "=", "None", "\n", "\n", "num_iterations", "=", "30000", "+", "15000", "*", "(", "data_provider", "[", "'train_set'", "]", "[", "'train_unlabel_in_domain'", "]", ">", "0", ")", "\n", "checkpoint_interval", "=", "1000", "\n", "summary_interval", "=", "100", "\n", "back_off_patience", "=", "None", "\n", "lr_decay_step", "=", "20000", "+", "10000", "*", "(", "data_provider", "[", "'train_set'", "]", "[", "'train_unlabel_in_domain'", "]", ">", "0", ")", "if", "back_off_patience", "is", "None", "else", "None", "\n", "lr_decay_factor", "=", "1", "/", "5", "\n", "lr_rampup_steps", "=", "1000", "\n", "\n", "gradient_clipping", "=", "1e10", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown database {database_name}.'", ")", "\n", "\n", "# Trainer configuration", "\n", "", "net_config", "=", "'shallow'", "\n", "if", "net_config", "==", "'shallow'", ":", "\n", "        ", "m", "=", "1", "\n", "cnn", "=", "{", "\n", "'cnn_2d'", ":", "{", "\n", "'out_channels'", ":", "[", "\n", "16", "*", "m", ",", "16", "*", "m", ",", "32", "*", "m", ",", "32", "*", "m", ",", "64", "*", "m", ",", "64", "*", "m", ",", "128", "*", "m", ",", "128", "*", "m", ",", "min", "(", "256", "*", "m", ",", "512", ")", ",", "\n", "]", ",", "\n", "'pool_size'", ":", "4", "*", "[", "1", ",", "(", "2", ",", "1", ")", "]", "+", "[", "1", "]", ",", "\n", "'kernel_size'", ":", "3", ",", "\n", "'norm'", ":", "'batch'", ",", "\n", "'norm_kwargs'", ":", "{", "'eps'", ":", "1e-3", "}", ",", "\n", "'activation_fn'", ":", "'relu'", ",", "\n", "'dropout'", ":", ".0", ",", "\n", "'output_layer'", ":", "False", ",", "\n", "}", ",", "\n", "'cnn_1d'", ":", "{", "\n", "'out_channels'", ":", "3", "*", "[", "256", "*", "m", "]", ",", "\n", "'kernel_size'", ":", "3", ",", "\n", "'norm'", ":", "'batch'", ",", "\n", "'norm_kwargs'", ":", "{", "'eps'", ":", "1e-3", "}", ",", "\n", "'activation_fn'", ":", "'relu'", ",", "\n", "'dropout'", ":", ".0", ",", "\n", "'output_layer'", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "", "elif", "net_config", "==", "'deep'", ":", "\n", "        ", "m", "=", "2", "\n", "cnn", "=", "{", "\n", "'cnn_2d'", ":", "{", "\n", "'out_channels'", ":", "(", "\n", "4", "*", "[", "16", "*", "m", "]", "+", "4", "*", "[", "32", "*", "m", "]", "+", "4", "*", "[", "64", "*", "m", "]", "+", "4", "*", "[", "128", "*", "m", "]", "+", "[", "256", "*", "m", ",", "min", "(", "256", "*", "m", ",", "512", ")", "]", "\n", ")", ",", "\n", "'pool_size'", ":", "4", "*", "[", "1", ",", "1", ",", "1", ",", "(", "2", ",", "1", ")", "]", "+", "[", "1", ",", "1", "]", ",", "\n", "'kernel_size'", ":", "9", "*", "[", "3", ",", "1", "]", ",", "\n", "'residual_connections'", ":", "[", "\n", "None", ",", "None", ",", "4", ",", "None", ",", "\n", "6", ",", "None", ",", "8", ",", "None", ",", "\n", "10", ",", "None", ",", "12", ",", "None", ",", "\n", "14", ",", "None", ",", "16", ",", "None", ",", "\n", "None", ",", "None", "\n", "]", ",", "\n", "'norm'", ":", "'batch'", ",", "\n", "'norm_kwargs'", ":", "{", "'eps'", ":", "1e-3", "}", ",", "\n", "'activation_fn'", ":", "'relu'", ",", "\n", "'pre_activation'", ":", "True", ",", "\n", "'dropout'", ":", ".0", ",", "\n", "'output_layer'", ":", "False", ",", "\n", "}", ",", "\n", "'cnn_1d'", ":", "{", "\n", "'out_channels'", ":", "8", "*", "[", "256", "*", "m", "]", ",", "\n", "'kernel_size'", ":", "[", "1", "]", "+", "3", "*", "[", "3", ",", "1", "]", "+", "[", "1", "]", ",", "\n", "'residual_connections'", ":", "[", "None", ",", "3", ",", "None", ",", "5", ",", "None", ",", "7", ",", "None", ",", "None", "]", ",", "\n", "'norm'", ":", "'batch'", ",", "\n", "'norm_kwargs'", ":", "{", "'eps'", ":", "1e-3", "}", ",", "\n", "'activation_fn'", ":", "'relu'", ",", "\n", "'pre_activation'", ":", "True", ",", "\n", "'dropout'", ":", ".0", ",", "\n", "'output_layer'", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown net_config {net_config}'", ")", "\n", "", "trainer", "=", "{", "\n", "'model'", ":", "{", "\n", "'factory'", ":", "strong_label", ".", "CRNN", ",", "\n", "'feature_extractor'", ":", "{", "\n", "'sample_rate'", ":", "\n", "data_provider", "[", "'audio_reader'", "]", "[", "'target_sample_rate'", "]", ",", "\n", "'stft_size'", ":", "data_provider", "[", "'train_transform'", "]", "[", "'stft'", "]", "[", "'size'", "]", ",", "\n", "'number_of_filters'", ":", "128", ",", "\n", "'frequency_warping_fn'", ":", "{", "\n", "'factory'", ":", "MelWarping", ",", "\n", "'warp_factor_sampling_fn'", ":", "{", "\n", "'factory'", ":", "LogTruncatedNormal", ",", "\n", "'scale'", ":", ".08", ",", "\n", "'truncation'", ":", "np", ".", "log", "(", "1.3", ")", ",", "\n", "}", ",", "\n", "'boundary_frequency_ratio_sampling_fn'", ":", "{", "\n", "'factory'", ":", "TruncatedExponential", ",", "\n", "'scale'", ":", ".5", ",", "\n", "'truncation'", ":", "5.", ",", "\n", "}", ",", "\n", "'highest_frequency'", ":", "data_provider", "[", "'audio_reader'", "]", "[", "'target_sample_rate'", "]", "/", "2", "\n", "}", ",", "\n", "# 'blur_sigma': .5,", "\n", "'n_time_masks'", ":", "1", ",", "\n", "'max_masked_time_steps'", ":", "70", ",", "\n", "'max_masked_time_rate'", ":", ".2", ",", "\n", "'n_frequency_masks'", ":", "1", ",", "\n", "'max_masked_frequency_bands'", ":", "20", ",", "\n", "'max_masked_frequency_rate'", ":", ".2", ",", "\n", "'max_noise_scale'", ":", ".2", ",", "\n", "}", ",", "\n", "'cnn'", ":", "cnn", ",", "\n", "'rnn'", ":", "{", "\n", "'hidden_size'", ":", "256", "*", "m", ",", "\n", "'num_layers'", ":", "2", ",", "\n", "'dropout'", ":", ".0", ",", "\n", "'output_net'", ":", "{", "\n", "'out_channels'", ":", "[", "\n", "256", "*", "m", ",", "\n", "num_events", "\n", "]", ",", "\n", "'kernel_size'", ":", "1", ",", "\n", "'norm'", ":", "'batch'", ",", "\n", "'activation_fn'", ":", "'relu'", ",", "\n", "'dropout'", ":", ".0", ",", "\n", "}", "\n", "}", ",", "\n", "'labelwise_metrics'", ":", "(", "'fscore_strong'", ",", ")", ",", "\n", "}", ",", "\n", "'optimizer'", ":", "{", "\n", "'factory'", ":", "Adam", ",", "\n", "'lr'", ":", "5e-4", ",", "\n", "'gradient_clipping'", ":", "gradient_clipping", ",", "\n", "# 'weight_decay': 1e-6,", "\n", "}", ",", "\n", "'summary_trigger'", ":", "(", "summary_interval", ",", "'iteration'", ")", ",", "\n", "'checkpoint_trigger'", ":", "(", "checkpoint_interval", ",", "'iteration'", ")", ",", "\n", "'stop_trigger'", ":", "(", "num_iterations", ",", "'iteration'", ")", ",", "\n", "'storage_dir'", ":", "storage_dir", ",", "\n", "}", "\n", "del", "cnn", "\n", "use_transformer", "=", "False", "\n", "if", "use_transformer", ":", "\n", "        ", "trainer", "[", "'model'", "]", "[", "'rnn'", "]", "[", "'factory'", "]", "=", "TransformerStack", "\n", "trainer", "[", "'model'", "]", "[", "'rnn'", "]", "[", "'hidden_size'", "]", "=", "320", "\n", "trainer", "[", "'model'", "]", "[", "'rnn'", "]", "[", "'num_heads'", "]", "=", "10", "\n", "trainer", "[", "'model'", "]", "[", "'rnn'", "]", "[", "'num_layers'", "]", "=", "3", "\n", "trainer", "[", "'model'", "]", "[", "'rnn'", "]", "[", "'dropout'", "]", "=", "0.1", "\n", "\n", "", "Trainer", ".", "get_config", "(", "trainer", ")", "\n", "\n", "init_ckpt_path", "=", "None", "\n", "frozen_cnn_2d_layers", "=", "0", "\n", "frozen_cnn_1d_layers", "=", "0", "\n", "\n", "resume", "=", "False", "\n", "assert", "resume", "or", "not", "Path", "(", "trainer", "[", "'storage_dir'", "]", ")", ".", "exists", "(", ")", "\n", "ex", ".", "observers", ".", "append", "(", "FileStorageObserver", ".", "create", "(", "trainer", "[", "'storage_dir'", "]", ")", ")", "\n", "\n", "\n", "", "@", "ex", ".", "automain", "\n", "def", "train", "(", "\n", "_run", ",", "debug", ",", "\n", "data_provider", ",", "trainer", ",", "\n", "lr_rampup_steps", ",", "back_off_patience", ",", "lr_decay_step", ",", "lr_decay_factor", ",", "\n", "init_ckpt_path", ",", "frozen_cnn_2d_layers", ",", "frozen_cnn_1d_layers", ",", "\n", "resume", ",", "delay", ",", "\n", "validation_set_name", ",", "validation_ground_truth_filepath", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "\n", "eval_set_name", ",", "eval_ground_truth_filepath", ",", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'##### Training #####'", ")", "\n", "print", "(", ")", "\n", "print_config", "(", "_run", ")", "\n", "assert", "(", "back_off_patience", "is", "None", ")", "or", "(", "lr_decay_step", "is", "None", ")", ",", "(", "back_off_patience", ",", "lr_decay_step", ")", "\n", "if", "delay", ">", "0", ":", "\n", "        ", "print", "(", "f'Sleep for {delay} seconds.'", ")", "\n", "time", ".", "sleep", "(", "delay", ")", "\n", "\n", "", "data_provider", "=", "DESEDProvider", ".", "from_config", "(", "data_provider", ")", "\n", "data_provider", ".", "train_transform", ".", "label_encoder", ".", "initialize_labels", "(", "\n", "dataset", "=", "data_provider", ".", "db", ".", "get_dataset", "(", "data_provider", ".", "validate_set", ")", ",", "\n", "verbose", "=", "True", "\n", ")", "\n", "data_provider", ".", "test_transform", ".", "label_encoder", ".", "initialize_labels", "(", ")", "\n", "trainer", "=", "Trainer", ".", "from_config", "(", "trainer", ")", "\n", "trainer", ".", "model", ".", "label_mapping", "=", "[", "]", "\n", "for", "idx", ",", "label", "in", "sorted", "(", "data_provider", ".", "train_transform", ".", "label_encoder", ".", "inverse_label_mapping", ".", "items", "(", ")", ")", ":", "\n", "        ", "assert", "idx", "==", "len", "(", "trainer", ".", "model", ".", "label_mapping", ")", ",", "(", "idx", ",", "label", ",", "len", "(", "trainer", ".", "model", ".", "label_mapping", ")", ")", "\n", "trainer", ".", "model", ".", "label_mapping", ".", "append", "(", "label", ".", "replace", "(", "', '", ",", "'__'", ")", ".", "replace", "(", "' '", ",", "''", ")", ".", "replace", "(", "'('", ",", "'_'", ")", ".", "replace", "(", "')'", ",", "'_'", ")", ".", "replace", "(", "\"'\"", ",", "''", ")", ")", "\n", "", "print", "(", "'Params'", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "trainer", ".", "model", ".", "parameters", "(", ")", ")", ")", "\n", "\n", "if", "init_ckpt_path", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Load init params'", ")", "\n", "state_dict", "=", "deflatten", "(", "torch", ".", "load", "(", "init_ckpt_path", ",", "map_location", "=", "'cpu'", ")", "[", "'model'", "]", ",", "maxdepth", "=", "1", ")", "\n", "trainer", ".", "model", ".", "cnn", ".", "load_state_dict", "(", "state_dict", "[", "'cnn'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label_crnn.training.train": [[272, 387], ["print", "print", "print", "sacred.commands.print_config", "pb_sed.data_preparation.provider.DataProvider.from_config", "DataProvider.from_config.train_transform.label_encoder.initialize_labels", "DataProvider.from_config.test_transform.label_encoder.initialize_labels", "padertorch.train.trainer.Trainer.from_config", "sorted", "print", "print", "DataProvider.from_config.get_train_set", "DataProvider.from_config.get_validate_set", "Trainer.from_config.train", "print", "time.sleep", "DataProvider.from_config.train_transform.label_encoder.inverse_label_mapping.items", "Trainer.from_config.model.label_mapping.append", "sum", "sum", "print", "paderbox.utils.nested.deflatten", "Trainer.from_config.model.cnn.load_state_dict", "Trainer.from_config.model.rnn_fwd.rnn.load_state_dict", "Trainer.from_config.model.rnn_bwd.rnn.load_state_dict", "sorted", "zip", "Trainer.from_config.model.rnn_fwd.output_net.load_state_dict", "Trainer.from_config.model.rnn_bwd.output_net.load_state_dict", "print", "Trainer.from_config.model.cnn.cnn_2d.freeze", "print", "Trainer.from_config.model.cnn.cnn_1d.freeze", "Trainer.from_config.test_run", "Trainer.from_config.register_validation_hook", "len", "isinstance", "pb_sed.experiments.weak_label_crnn.tuning.ex.run", "DataProvider.from_config.db.get_dataset", "len", "len", "label.replace().replace().replace().replace().replace", "paderbox.utils.nested.flatten", "[].keys", "json.load", "sorted", "Trainer.from_config.register_hook", "p.numel", "p.numel", "torch.load", "key.split", "[].pop", "[].pop", "Trainer.from_config.optimizer.keys", "padertorch.train.hooks.LRAnnealingHook", "label.replace().replace().replace().replace", "Trainer.from_config.model.parameters", "Trainer.from_config.model.cnn.parameters", "clip_id.rsplit", "list", "list", "[].keys", "[].keys", "padertorch.train.trigger.AllTrigger", "str", "label.replace().replace().replace", "padertorch.train.trigger.NotTrigger", "padertorch.train.trigger.EndTrigger", "label.replace().replace", "label.replace"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_train_set", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_validate_set", "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label_crnn.training.train", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset"], ["        ", "print", "(", "f'Freeze {frozen_cnn_2d_layers} cnn_2d layers'", ")", "\n", "trainer", ".", "model", ".", "cnn", ".", "cnn_2d", ".", "freeze", "(", "frozen_cnn_2d_layers", ")", "\n", "", "if", "frozen_cnn_1d_layers", ":", "\n", "        ", "print", "(", "f'Freeze {frozen_cnn_1d_layers} cnn_1d layers'", ")", "\n", "trainer", ".", "model", ".", "cnn", ".", "cnn_1d", ".", "freeze", "(", "frozen_cnn_1d_layers", ")", "\n", "\n", "", "def", "add_tag_condition", "(", "example", ")", ":", "\n", "        ", "example", "[", "\"tag_condition\"", "]", "=", "example", "[", "\"weak_targets\"", "]", "\n", "return", "example", "\n", "\n", "", "train_set", "=", "data_provider", ".", "get_train_set", "(", ")", ".", "map", "(", "add_tag_condition", ")", "\n", "validate_set", "=", "data_provider", ".", "get_validate_set", "(", ")", ".", "map", "(", "add_tag_condition", ")", "\n", "\n", "if", "validate_set", "is", "not", "None", ":", "\n", "        ", "trainer", ".", "test_run", "(", "train_set", ",", "validate_set", ")", "\n", "trainer", ".", "register_validation_hook", "(", "\n", "validate_set", ",", "metric", "=", "'macro_fscore_strong'", ",", "maximize", "=", "True", ",", "\n", ")", "\n", "\n", "", "breakpoints", "=", "[", "]", "\n", "if", "lr_rampup_steps", "is", "not", "None", ":", "\n", "        ", "breakpoints", "+=", "[", "(", "0", ",", "0.", ")", ",", "(", "lr_rampup_steps", ",", "1.", ")", "]", "\n", "", "if", "lr_decay_step", "is", "not", "None", ":", "\n", "        ", "breakpoints", "+=", "[", "(", "lr_decay_step", ",", "1.", ")", ",", "(", "lr_decay_step", ",", "lr_decay_factor", ")", "]", "\n", "", "if", "len", "(", "breakpoints", ")", ">", "0", ":", "\n", "        ", "if", "isinstance", "(", "trainer", ".", "optimizer", ",", "dict", ")", ":", "\n", "            ", "names", "=", "sorted", "(", "trainer", ".", "optimizer", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "names", "=", "[", "None", "]", "\n", "", "for", "name", "in", "names", ":", "\n", "            ", "trainer", ".", "register_hook", "(", "LRAnnealingHook", "(", "\n", "trigger", "=", "AllTrigger", "(", "\n", "(", "100", ",", "'iteration'", ")", ",", "\n", "NotTrigger", "(", "EndTrigger", "(", "breakpoints", "[", "-", "1", "]", "[", "0", "]", "+", "100", ",", "'iteration'", ")", ")", ",", "\n", ")", ",", "\n", "breakpoints", "=", "breakpoints", ",", "\n", "unit", "=", "'iteration'", ",", "\n", "name", "=", "name", ",", "\n", ")", ")", "\n", "", "", "trainer", ".", "train", "(", "train_set", ",", "resume", "=", "resume", ")", "\n", "\n", "if", "validation_set_name", ":", "\n", "        ", "tuning", ".", "run", "(", "\n", "config_updates", "=", "{", "\n", "'debug'", ":", "debug", ",", "\n", "'weak_label_crnn_hyper_params_dir'", ":", "weak_label_crnn_hyper_params_dir", ",", "\n", "'strong_label_crnn_dirs'", ":", "[", "str", "(", "trainer", ".", "storage_dir", ")", "]", ",", "\n", "'validation_set_name'", ":", "validation_set_name", ",", "\n", "'validation_ground_truth_filepath'", ":", "validation_ground_truth_filepath", ",", "\n", "'eval_set_name'", ":", "eval_set_name", ",", "\n", "'eval_ground_truth_filepath'", ":", "eval_ground_truth_filepath", ",", "\n", "}", "\n", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.__init__": [[38, 58], ["pb_sed.models.base.SoundEventModel.__init__", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.desed.database.DESED.__init__"], ["def", "__init__", "(", "\n", "self", ",", "feature_extractor", ",", "cnn", ",", "rnn_fwd", ",", "rnn_bwd", ",", "*", ",", "\n", "minimum_score", "=", "1e-5", ",", "label_smoothing", "=", "0.", ",", "\n", "labelwise_metrics", "=", "(", ")", ",", "label_mapping", "=", "None", ",", "test_labels", "=", "None", ",", "\n", "slat", "=", "False", ",", "strong_fwd_bwd_loss_weight", "=", "1.", ",", "class_weights", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "labelwise_metrics", "=", "labelwise_metrics", ",", "\n", "label_mapping", "=", "label_mapping", ",", "\n", "test_labels", "=", "test_labels", ",", "\n", ")", "\n", "self", ".", "feature_extractor", "=", "feature_extractor", "\n", "self", ".", "cnn", "=", "cnn", "\n", "self", ".", "rnn_fwd", "=", "rnn_fwd", "\n", "self", ".", "rnn_bwd", "=", "rnn_bwd", "\n", "self", ".", "minimum_score", "=", "minimum_score", "\n", "self", ".", "label_smoothing", "=", "label_smoothing", "\n", "self", ".", "slat", "=", "slat", "\n", "self", ".", "strong_fwd_bwd_loss_weight", "=", "strong_fwd_bwd_loss_weight", "\n", "self", ".", "class_weights", "=", "None", "if", "class_weights", "is", "None", "else", "torch", ".", "Tensor", "(", "class_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.sigmoid": [[59, 61], ["torch.nn.Sigmoid"], "methods", ["None"], ["", "def", "sigmoid", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "self", ".", "minimum_score", "+", "(", "1", "-", "2", "*", "self", ".", "minimum_score", ")", "*", "nn", ".", "Sigmoid", "(", ")", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.fwd_tagging": [[62, 65], ["crnn.CRNN.rnn_fwd", "crnn.CRNN.sigmoid"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.sigmoid"], ["", "def", "fwd_tagging", "(", "self", ",", "h", ",", "seq_len", ")", ":", "\n", "        ", "y", ",", "seq_len_y", "=", "self", ".", "rnn_fwd", "(", "h", ",", "seq_len", "=", "seq_len", ")", "\n", "return", "self", ".", "sigmoid", "(", "y", ")", ",", "seq_len_y", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.bwd_tagging": [[66, 69], ["crnn.CRNN.rnn_bwd", "crnn.CRNN.sigmoid"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.sigmoid"], ["", "def", "bwd_tagging", "(", "self", ",", "h", ",", "seq_len", ")", ":", "\n", "        ", "y", ",", "seq_len_y", "=", "self", ".", "rnn_bwd", "(", "h", ",", "seq_len", "=", "seq_len", ")", "\n", "return", "self", ".", "sigmoid", "(", "y", ")", ",", "seq_len_y", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.forward": [[70, 102], ["numpy.array", "crnn.CRNN.cnn", "crnn.CRNN.fwd_tagging", "inputs.pop", "crnn.CRNN.read_targets", "crnn.CRNN.feature_extractor", "crnn.CRNN.feature_extractor", "crnn.CRNN.bwd_tagging"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.fwd_tagging", "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.read_targets", "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.bwd_tagging"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        forward used in trainer\n\n        Args:\n            inputs: example dict\n\n        Returns:\n\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "x", "=", "inputs", ".", "pop", "(", "'stft'", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "inputs", "[", "'stft'", "]", "\n", "", "seq_len", "=", "np", ".", "array", "(", "inputs", "[", "'seq_len'", "]", ")", "\n", "if", "\"weak_targets\"", "in", "inputs", ":", "\n", "            ", "targets", "=", "self", ".", "read_targets", "(", "inputs", ")", "\n", "x", ",", "seq_len_x", ",", "targets", "=", "self", ".", "feature_extractor", "(", "\n", "x", ",", "seq_len", "=", "seq_len", ",", "targets", "=", "targets", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x", ",", "seq_len_x", "=", "self", ".", "feature_extractor", "(", "x", ",", "seq_len", "=", "seq_len", ")", "\n", "targets", "=", "None", "\n", "\n", "", "h", ",", "seq_len_h", "=", "self", ".", "cnn", "(", "x", ",", "seq_len_x", ")", "\n", "y_fwd", ",", "seq_len_y", "=", "self", ".", "fwd_tagging", "(", "h", ",", "seq_len_h", ")", "\n", "if", "self", ".", "rnn_bwd", "is", "None", ":", "\n", "            ", "y_bwd", "=", "None", "\n", "", "else", ":", "\n", "            ", "y_bwd", ",", "seq_len_y_", "=", "self", ".", "bwd_tagging", "(", "h", ",", "seq_len_h", ")", "\n", "assert", "(", "seq_len_y_", "==", "seq_len_y", ")", ".", "all", "(", ")", "\n", "", "return", "y_fwd", ",", "y_bwd", ",", "seq_len_y", ",", "x", ",", "seq_len_x", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.read_targets": [[103, 107], ["None"], "methods", ["None"], ["", "def", "read_targets", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "weak_targets", "=", "inputs", "[", "'weak_targets'", "]", "\n", "boundary_targets", "=", "inputs", "[", "'boundary_targets'", "]", "\n", "return", "weak_targets", ",", "boundary_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.review": [[108, 174], ["dict", "weak_targets[].expand", "crnn.CRNN.compute_weak_fwd_bwd_loss", "crnn.CRNN.compute_strong_fwd_bwd_loss", "padertorch.contrib.je.modules.reduce.Mean", "crnn.CRNN.class_weights.to", "weights.sum", "padertorch.contrib.je.modules.reduce.TakeLast", "y_weak.detach().cpu().numpy", "weak_targets.detach().cpu().numpy", "dict", "dict", "dict", "boundary_targets_mask.float().mean", "weak_targets_mask.detach().cpu().numpy", "y_weak.detach().cpu", "weak_targets.detach().cpu", "numpy.mean", "weak_targets_mask.detach().cpu().numpy().mean", "boundary_targets_mask.detach().cpu().numpy().mean", "boundary_targets_mask.float", "weak_targets_mask.detach().cpu", "y_weak.detach", "weak_targets.detach", "weak_targets_mask.detach().cpu().numpy", "boundary_targets_mask.detach().cpu().numpy", "weak_targets_mask.detach", "weak_targets_mask.detach().cpu", "boundary_targets_mask.detach().cpu", "weak_targets_mask.detach", "boundary_targets_mask.detach"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.compute_weak_fwd_bwd_loss", "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.compute_strong_fwd_bwd_loss"], ["", "def", "review", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"compute loss and metrics\n\n        Args:\n            inputs:\n            outputs:\n\n        Returns:\n\n        \"\"\"", "\n", "y_fwd", ",", "y_bwd", ",", "seq_len", ",", "x", ",", "_", ",", "targets", "=", "outputs", "\n", "assert", "targets", "is", "not", "None", "\n", "weak_targets", ",", "boundary_targets", ",", "*", "_", "=", "targets", "\n", "weak_targets_mask", "=", "(", "weak_targets", "<", ".01", ")", "+", "(", "weak_targets", ">", ".99", ")", "\n", "weak_targets", "=", "weak_targets", "*", "weak_targets_mask", "\n", "\n", "if", "self", ".", "slat", ":", "\n", "            ", "boundary_targets", "=", "weak_targets", "[", "...", ",", "None", "]", ".", "expand", "(", "\n", "boundary_targets", ".", "shape", ")", "\n", "", "boundary_targets_mask", "=", "(", "boundary_targets", ">", ".99", ")", "+", "(", "boundary_targets", "<", ".01", ")", "\n", "boundary_targets_mask", "=", "boundary_targets_mask", "*", "(", "boundary_targets_mask", ".", "float", "(", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", ">", ".999", ")", "*", "(", "weak_targets", ">", ".99", ")", "[", "...", ",", "None", "]", "\n", "\n", "loss", "=", "(", "\n", "self", ".", "compute_weak_fwd_bwd_loss", "(", "y_fwd", ",", "y_bwd", ",", "weak_targets", ",", "seq_len", ")", "\n", "*", "weak_targets_mask", "[", "...", ",", "None", "]", "\n", ")", "\n", "\n", "if", "(", "boundary_targets_mask", "==", "1", ")", ".", "any", "(", ")", "and", "self", ".", "strong_fwd_bwd_loss_weight", ">", "0.", ":", "\n", "            ", "strong_label_loss", "=", "self", ".", "compute_strong_fwd_bwd_loss", "(", "\n", "y_fwd", ",", "y_bwd", ",", "boundary_targets", ")", "\n", "strong_fwd_bwd_loss_weight", "=", "(", "\n", "boundary_targets_mask", "*", "self", ".", "strong_fwd_bwd_loss_weight", ")", "\n", "loss", "=", "strong_fwd_bwd_loss_weight", "*", "strong_label_loss", "+", "(", "1.", "-", "strong_fwd_bwd_loss_weight", ")", "*", "loss", "\n", "\n", "", "loss", "=", "Mean", "(", "axis", "=", "-", "1", ")", "(", "loss", ",", "seq_len", ")", "\n", "if", "self", ".", "class_weights", "is", "None", ":", "\n", "            ", "weights", "=", "weak_targets_mask", "\n", "", "else", ":", "\n", "            ", "self", ".", "class_weights", "=", "self", ".", "class_weights", ".", "to", "(", "loss", ".", "device", ")", "\n", "weights", "=", "weak_targets_mask", "*", "self", ".", "class_weights", "\n", "", "loss", "=", "(", "loss", "*", "weights", ")", ".", "sum", "(", ")", "/", "weights", ".", "sum", "(", ")", "\n", "\n", "labeled_examples_idx", "=", "(", "\n", "weak_targets_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "==", "1", "\n", ")", ".", "all", "(", "-", "1", ")", "\n", "y_weak", "=", "TakeLast", "(", "axis", "=", "2", ")", "(", "y_fwd", ",", "seq_len", "=", "seq_len", ")", "\n", "if", "y_bwd", "is", "not", "None", ":", "\n", "            ", "y_weak", "=", "y_weak", "/", "2", "+", "y_bwd", "[", "...", ",", "0", "]", "/", "2", "\n", "", "y_weak", "=", "y_weak", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "labeled_examples_idx", "]", "\n", "weak_targets", "=", "weak_targets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "labeled_examples_idx", "]", "\n", "review", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "\n", "scalars", "=", "dict", "(", "\n", "seq_len", "=", "np", ".", "mean", "(", "inputs", "[", "'seq_len'", "]", ")", ",", "\n", "weak_label_rate", "=", "weak_targets_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "mean", "(", ")", ",", "\n", "boundary_label_rate", "=", "boundary_targets_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "mean", "(", ")", ",", "\n", ")", ",", "\n", "images", "=", "dict", "(", "\n", "features", "=", "x", "[", ":", "3", "]", ",", "\n", ")", ",", "\n", "buffers", "=", "dict", "(", "\n", "y_weak", "=", "y_weak", ",", "\n", "targets_weak", "=", "weak_targets", ",", "\n", ")", ",", "\n", ")", "\n", "return", "review", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.compute_weak_fwd_bwd_loss": [[175, 188], ["torch.clip", "[].expand", "torch.maximum", "targets[].expand", "padertorch.contrib.je.modules.reduce.TakeLast", "torch.nn.BCELoss", "torch.nn.BCELoss"], "methods", ["None"], ["", "def", "compute_weak_fwd_bwd_loss", "(", "self", ",", "y_fwd", ",", "y_bwd", ",", "targets", ",", "seq_len", ")", ":", "\n", "        ", "if", "self", ".", "label_smoothing", ">", "0.", ":", "\n", "            ", "targets", "=", "torch", ".", "clip", "(", "\n", "targets", ",", "min", "=", "self", ".", "label_smoothing", ",", "max", "=", "1", "-", "self", ".", "label_smoothing", ")", "\n", "", "if", "y_bwd", "is", "None", ":", "\n", "            ", "y_weak", "=", "TakeLast", "(", "axis", "=", "2", ")", "(", "y_fwd", ",", "seq_len", "=", "seq_len", ")", "\n", "# y_weak = y_weak + 0.1 * (weak_targets - y_weak)", "\n", "return", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "(", "y_weak", ",", "targets", ")", "[", "...", ",", "None", "]", ".", "expand", "(", "y_fwd", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "y_weak", "=", "torch", ".", "maximum", "(", "y_fwd", ",", "y_bwd", ")", "\n", "targets", "=", "targets", "[", "...", ",", "None", "]", ".", "expand", "(", "y_weak", ".", "shape", ")", "\n", "# y_weak = y_weak + 0.1 * (weak_targets_ - y_weak)", "\n", "return", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "(", "y_weak", ",", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.compute_strong_fwd_bwd_loss": [[189, 202], ["[].flip", "torch.clip", "torch.cummax", "torch.nn.BCELoss", "torch.cummax", "torch.clip.flip", "torch.nn.BCELoss"], "methods", ["None"], ["", "", "def", "compute_strong_fwd_bwd_loss", "(", "self", ",", "y_fwd", ",", "y_bwd", ",", "targets", ")", ":", "\n", "        ", "if", "self", ".", "label_smoothing", ">", "0.", ":", "\n", "            ", "targets", "=", "torch", ".", "clip", "(", "\n", "targets", ",", "min", "=", "self", ".", "label_smoothing", ",", "max", "=", "1", "-", "self", ".", "label_smoothing", ")", "\n", "", "strong_targets_fwd", "=", "torch", ".", "cummax", "(", "targets", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "strong_targets_bwd", "=", "torch", ".", "cummax", "(", "targets", ".", "flip", "(", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "flip", "(", "-", "1", ")", "\n", "loss", "=", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "(", "y_fwd", ",", "strong_targets_fwd", ")", "\n", "if", "y_bwd", "is", "not", "None", ":", "\n", "            ", "loss", "=", "(", "\n", "loss", "/", "2", "\n", "+", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "(", "y_bwd", ",", "strong_targets_bwd", ")", "/", "2", "\n", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.modify_summary": [[203, 217], ["super().modify_summary", "crnn.CRNN.add_metrics_to_summary"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.modify_summary", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.add_metrics_to_summary"], ["", "def", "modify_summary", "(", "self", ",", "summary", ")", ":", "\n", "        ", "\"\"\"called by the trainer before dumping a summary\n\n        Args:\n            summary:\n\n        Returns:\n\n        \"\"\"", "\n", "if", "f'targets_weak'", "in", "summary", "[", "'buffers'", "]", ":", "\n", "# Computes fscores from scores and targets", "\n", "            ", "self", ".", "add_metrics_to_summary", "(", "summary", ",", "'weak'", ")", "\n", "", "summary", "=", "super", "(", ")", ".", "modify_summary", "(", "summary", ")", "\n", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.tagging": [[218, 229], ["crnn.CRNN.forward", "numpy.ones_like", "padertorch.contrib.je.modules.reduce.TakeLast", "padertorch.contrib.je.modules.reduce.TakeLast"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.CRNN.forward"], ["", "def", "tagging", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "y_fwd", ",", "y_bwd", ",", "seq_len_y", ",", "*", "_", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "seq_len", "=", "np", ".", "ones_like", "(", "seq_len_y", ")", "\n", "if", "y_bwd", "is", "None", ":", "\n", "            ", "return", "TakeLast", "(", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "(", "y_fwd", ",", "seq_len_y", ")", ",", "seq_len", "\n", "", "return", "(", "\n", "(", "\n", "TakeLast", "(", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "(", "y_fwd", ",", "seq_len_y", ")", "\n", "+", "y_bwd", "[", "...", ",", ":", "1", "]", "\n", ")", "/", "2", ",", "\n", "seq_len", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.boundaries_detection": [[231, 235], ["crnn.CRNN.forward", "padertorch.ops.sequence.mask.compute_mask", "torch.minimum"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.CRNN.forward"], ["", "def", "boundaries_detection", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "y_fwd", ",", "y_bwd", ",", "seq_len_y", ",", "*", "_", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "seq_mask", "=", "compute_mask", "(", "y_fwd", ",", "seq_len_y", ",", "batch_axis", "=", "0", ",", "sequence_axis", "=", "-", "1", ")", "\n", "return", "torch", ".", "minimum", "(", "y_fwd", "*", "seq_mask", ",", "y_bwd", "*", "seq_mask", ")", ",", "seq_len_y", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.sound_event_detection": [[236, 278], ["numpy.array", "numpy.array", "crnn.CRNN.feature_extractor", "crnn.CRNN.cnn", "numpy.unique", "enumerate", "crnn.CRNN._single_window_length_sed", "numpy.broadcast_to.flatten", "crnn.CRNN._single_window_length_sed", "torch.zeros", "torch.from_numpy().to", "numpy.broadcast_to", "ValueError", "torch.from_numpy", "numpy.broadcast_to.copy"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN._single_window_length_sed", "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN._single_window_length_sed", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.copy"], ["", "def", "sound_event_detection", "(", "self", ",", "inputs", ",", "window_length", ",", "window_shift", "=", "1", ")", ":", "\n", "        ", "\"\"\"SED by applying the model to small segments around each frame\n\n        Args:\n            inputs:\n            window_length:\n            window_shift:\n\n        Returns:\n\n        \"\"\"", "\n", "window_length", "=", "np", ".", "array", "(", "window_length", ",", "dtype", "=", "np", ".", "int", ")", "\n", "x", "=", "inputs", "[", "'stft'", "]", "\n", "seq_len", "=", "np", ".", "array", "(", "inputs", "[", "'seq_len'", "]", ")", "\n", "x", ",", "seq_len", "=", "self", ".", "feature_extractor", "(", "x", ",", "seq_len", "=", "seq_len", ")", "\n", "h", ",", "seq_len", "=", "self", ".", "cnn", "(", "x", ",", "seq_len", ")", "\n", "if", "window_length", ".", "ndim", "==", "0", ":", "\n", "            ", "return", "self", ".", "_single_window_length_sed", "(", "\n", "h", ",", "seq_len", ",", "window_length", ",", "window_shift", "\n", ")", "\n", "", "window_lengths_flat", "=", "np", ".", "unique", "(", "window_length", ".", "flatten", "(", ")", ")", "\n", "y", "=", "None", "\n", "for", "i", ",", "win_len", "in", "enumerate", "(", "window_lengths_flat", ")", ":", "\n", "            ", "yi", ",", "seq_len_y", "=", "self", ".", "_single_window_length_sed", "(", "\n", "h", ",", "seq_len", ",", "win_len", ",", "window_shift", "\n", ")", "\n", "b", ",", "k", ",", "t", "=", "yi", ".", "shape", "\n", "if", "window_length", ".", "ndim", "==", "1", ":", "\n", "                ", "assert", "window_length", ".", "shape", "[", "0", "]", "in", "[", "1", ",", "k", "]", ",", "window_length", ".", "shape", "\n", "", "elif", "window_length", ".", "ndim", "==", "2", ":", "\n", "                ", "assert", "window_length", ".", "shape", "[", "1", "]", "in", "[", "1", ",", "k", "]", ",", "window_length", ".", "shape", "\n", "n", "=", "window_length", ".", "shape", "[", "0", "]", "\n", "window_length", "=", "np", ".", "broadcast_to", "(", "window_length", ",", "(", "n", ",", "k", ")", ")", "\n", "yi", "=", "yi", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'window_length.ndim must not be greater than 2.'", ")", "\n", "", "if", "y", "is", "None", ":", "\n", "                ", "y", "=", "torch", ".", "zeros", "(", "(", "b", ",", "*", "window_length", ".", "shape", ",", "t", ")", ",", "device", "=", "yi", ".", "device", ")", "\n", "", "mask", "=", "torch", ".", "from_numpy", "(", "window_length", ".", "copy", "(", ")", ")", ".", "to", "(", "yi", ".", "device", ")", "==", "win_len", "\n", "y", "+=", "mask", "[", "...", ",", "None", "]", "*", "yi", "\n", "", "return", "y", ",", "seq_len_y", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN._single_window_length_sed": [[279, 298], ["numpy.arange", "len", "torch.cat", "crnn.CRNN.fwd_tagging", "einops.rearrange", "padertorch.contrib.je.modules.conv.Pad", "crnn.CRNN.bwd_tagging", "einops.rearrange", "padertorch.contrib.je.modules.conv.Pad"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.fwd_tagging", "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.bwd_tagging"], ["", "def", "_single_window_length_sed", "(", "\n", "self", ",", "h", ",", "seq_len", ",", "window_length", ",", "window_shift", "\n", ")", ":", "\n", "        ", "b", ",", "f", ",", "t", "=", "h", ".", "shape", "\n", "if", "window_length", ">", "window_shift", ":", "\n", "            ", "h", "=", "Pad", "(", "'both'", ")", "(", "h", ",", "(", "window_length", "-", "window_shift", ")", ")", "\n", "", "h", "=", "Pad", "(", "'end'", ")", "(", "h", ",", "window_shift", "-", "1", ")", "\n", "indices", "=", "np", ".", "arange", "(", "0", ",", "t", ",", "window_shift", ")", "\n", "h", "=", "[", "h", "[", "...", ",", "i", ":", "i", "+", "window_length", "]", "for", "i", "in", "indices", "]", "\n", "n", "=", "len", "(", "h", ")", "\n", "h", "=", "torch", ".", "cat", "(", "h", ",", "dim", "=", "0", ")", "\n", "y", ",", "_", "=", "self", ".", "fwd_tagging", "(", "h", ",", "seq_len", "=", "None", ")", "\n", "y", "=", "rearrange", "(", "y", "[", "...", ",", "-", "1", "]", ",", "'(n b) k -> b k n'", ",", "b", "=", "b", ",", "n", "=", "n", ")", "\n", "if", "self", ".", "rnn_bwd", "is", "not", "None", ":", "\n", "            ", "y_bwd", ",", "_", "=", "self", ".", "bwd_tagging", "(", "h", ",", "seq_len", "=", "None", ")", "\n", "y_bwd", "=", "rearrange", "(", "y_bwd", "[", "...", ",", "0", "]", ",", "'(n b) k -> b k n'", ",", "b", "=", "b", ",", "n", "=", "n", ")", "\n", "y", "=", "(", "y", "+", "y_bwd", ")", "/", "2", "\n", "", "seq_len", "=", "1", "+", "(", "seq_len", "-", "1", ")", "//", "window_shift", "\n", "return", "y", ",", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.CRNN.finalize_dogmatic_config": [[299, 341], ["config[].update", "config[].update", "config[].to_dict"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "finalize_dogmatic_config", "(", "cls", ",", "config", ")", ":", "\n", "        ", "\"\"\"Automatically prepares/completes the configuration of the model.\n\n        You do not need to understand how this is working as there is a lot of\n        magic in the background which serves convenience and is not crucial to\n        run the model.\n\n        Args:\n            config:\n\n        Returns:\n\n        \"\"\"", "\n", "config", "[", "'feature_extractor'", "]", "=", "{", "'factory'", ":", "NormalizedLogMelExtractor", "}", "\n", "config", "[", "'cnn'", "]", "=", "{", "'factory'", ":", "CNN", "}", "\n", "config", "[", "'rnn_fwd'", "]", "=", "{", "'factory'", ":", "GRU", "}", "\n", "config", "[", "'rnn_bwd'", "]", "=", "{", "}", "\n", "input_size", "=", "config", "[", "'feature_extractor'", "]", "[", "'number_of_filters'", "]", "\n", "in_channels", "=", "(", "\n", "1", "+", "config", "[", "'feature_extractor'", "]", "[", "'add_deltas'", "]", "\n", "+", "config", "[", "'feature_extractor'", "]", "[", "'add_delta_deltas'", "]", "\n", "+", "config", "[", "'cnn'", "]", "[", "'positional_encoding'", "]", "\n", ")", "\n", "config", "[", "'cnn'", "]", "[", "'cnn_2d'", "]", "[", "'in_channels'", "]", "=", "in_channels", "\n", "config", "[", "'cnn'", "]", "[", "'input_height'", "]", "=", "input_size", "\n", "input_size", "=", "config", "[", "'cnn'", "]", "[", "'cnn_1d'", "]", "[", "'out_channels'", "]", "[", "-", "1", "]", "\n", "\n", "if", "config", "[", "'rnn_fwd'", "]", "[", "'factory'", "]", "==", "GRU", ":", "\n", "            ", "config", "[", "'rnn_fwd'", "]", ".", "update", "(", "{", "\n", "'num_layers'", ":", "1", ",", "\n", "'bias'", ":", "True", ",", "\n", "'dropout'", ":", "0.", ",", "\n", "'bidirectional'", ":", "False", "\n", "}", ")", "\n", "\n", "", "if", "input_size", "is", "not", "None", ":", "\n", "            ", "config", "[", "'rnn_fwd'", "]", "[", "'input_size'", "]", "=", "input_size", "\n", "\n", "", "if", "config", "[", "'rnn_bwd'", "]", "is", "not", "None", ":", "\n", "# assert config['rnn_bwd']['factory'] == config['rnn_fwd']['factory'], (config['rnn_fwd']['factory'], config['rnn_bwd']['factory'])", "\n", "            ", "config", "[", "'rnn_bwd'", "]", ".", "update", "(", "config", "[", "'rnn_fwd'", "]", ".", "to_dict", "(", ")", ",", "reverse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.tune_tagging": [[343, 356], ["print", "print", "pb_sed.models.base.tagging", "pb_sed.models.base.tune_tagging"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.tagging", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_tagging"], ["", "", "", "def", "tune_tagging", "(", "\n", "crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "metrics", ",", "\n", "minimize", "=", "False", ",", "storage_dir", "=", "None", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'Tagging Tuning'", ")", "\n", "tagging_scores", "=", "base", ".", "tagging", "(", "\n", "crnns", ",", "dataset", ",", "device", ",", "\n", "timestamps", "=", "timestamps", ",", "event_classes", "=", "event_classes", ",", "\n", ")", "\n", "return", "base", ".", "tune_tagging", "(", "\n", "tagging_scores", ",", "medfilt_length_candidates", "=", "[", "1", "]", ",", "\n", "metrics", "=", "metrics", ",", "minimize", "=", "minimize", ",", "storage_dir", "=", "storage_dir", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.tune_boundary_detection": [[359, 376], ["print", "print", "pb_sed.models.base.boundaries_detection", "pb_sed.models.base.tune_boundaries_detection"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.boundaries_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_boundaries_detection"], ["", "def", "tune_boundary_detection", "(", "\n", "crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "tags", ",", "metrics", ",", "\n", "stepfilt_lengths", ",", "minimize", "=", "False", ",", "tag_masking", "=", "'?'", ",", "storage_dir", "=", "None", ",", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'Boundaries Detection Tuning'", ")", "\n", "boundaries_scores", "=", "base", ".", "boundaries_detection", "(", "\n", "crnns", ",", "dataset", ",", "device", ",", "\n", "stepfilt_length", "=", "None", ",", "apply_mask", "=", "False", ",", "masks", "=", "tags", ",", "\n", "timestamps", "=", "timestamps", ",", "event_classes", "=", "event_classes", ",", "\n", ")", "\n", "return", "base", ".", "tune_boundaries_detection", "(", "\n", "boundaries_scores", ",", "medfilt_length_candidates", "=", "[", "1", "]", ",", "\n", "stepfilt_length_candidates", "=", "stepfilt_lengths", ",", "\n", "tags", "=", "tags", ",", "metrics", "=", "metrics", ",", "minimize", "=", "minimize", ",", "\n", "tag_masking", "=", "tag_masking", ",", "\n", "storage_dir", "=", "storage_dir", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.weak_label.crnn.tune_sound_event_detection": [[379, 422], ["print", "print", "print", "print", "print", "print", "pb_sed.models.base.sound_event_detection", "pb_sed.models.base.tune_sound_event_detection", "print", "print", "print", "pb_sed.models.base.update_leaderboard"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.sound_event_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_sound_event_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.update_leaderboard"], ["", "def", "tune_sound_event_detection", "(", "\n", "crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "tags", ",", "metrics", ",", "\n", "window_lengths", ",", "window_shift", ",", "medfilt_lengths", ",", "\n", "minimize", "=", "False", ",", "tag_masking", "=", "'?'", ",", "storage_dir", "=", "None", ",", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'Sound Event Detection Tuning'", ")", "\n", "leaderboard", "=", "{", "}", "\n", "for", "win_len", "in", "window_lengths", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "f'### window_length={win_len} ###'", ")", "\n", "detection_scores", "=", "base", ".", "sound_event_detection", "(", "\n", "crnns", ",", "dataset", ",", "device", ",", "\n", "model_kwargs", "=", "{", "\n", "'window_length'", ":", "win_len", ",", "'window_shift'", ":", "window_shift", "\n", "}", ",", "\n", "timestamps", "=", "timestamps", "[", ":", ":", "window_shift", "]", ",", "event_classes", "=", "event_classes", ",", "\n", ")", "\n", "leaderboard_for_winlen", "=", "base", ".", "tune_sound_event_detection", "(", "\n", "detection_scores", ",", "medfilt_lengths", ",", "tags", ",", "\n", "metrics", "=", "metrics", ",", "minimize", "=", "minimize", ",", "\n", "tag_masking", "=", "tag_masking", ",", "\n", "storage_dir", "=", "storage_dir", ",", "\n", ")", "\n", "for", "metric_name", "in", "leaderboard_for_winlen", ":", "\n", "            ", "metric_values", "=", "leaderboard_for_winlen", "[", "metric_name", "]", "[", "0", "]", "\n", "hyper_params", "=", "leaderboard_for_winlen", "[", "metric_name", "]", "[", "1", "]", "\n", "scores", "=", "leaderboard_for_winlen", "[", "metric_name", "]", "[", "2", "]", "\n", "for", "event_class", "in", "event_classes", ":", "\n", "                ", "hyper_params", "[", "event_class", "]", "[", "'window_length'", "]", "=", "win_len", "\n", "hyper_params", "[", "event_class", "]", "[", "'window_shift'", "]", "=", "window_shift", "\n", "", "leaderboard", "=", "base", ".", "update_leaderboard", "(", "\n", "leaderboard", ",", "metric_name", ",", "metric_values", ",", "hyper_params", ",", "scores", ",", "\n", "minimize", "=", "minimize", ",", "\n", ")", "\n", "", "", "print", "(", ")", "\n", "print", "(", "'best overall:'", ")", "\n", "for", "metric_name", "in", "metrics", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "metric_name", ",", "':'", ")", "\n", "print", "(", "leaderboard", "[", "metric_name", "]", "[", "0", "]", ")", "\n", "\n", "", "return", "leaderboard", "\n", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.CRNN.__init__": [[38, 50], ["pb_sed.models.base.SoundEventModel.__init__"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.desed.database.DESED.__init__"], ["def", "__init__", "(", "\n", "self", ",", "feature_extractor", ",", "cnn", ",", "rnn_fwd", ",", "rnn_bwd", ",", "*", ",", "\n", "minimum_score", "=", "1e-5", ",", "label_smoothing", "=", "0.", ",", "\n", "labelwise_metrics", "=", "(", ")", ",", "label_mapping", "=", "None", ",", "test_labels", "=", "None", ",", "\n", "slat", "=", "False", ",", "strong_fwd_bwd_loss_weight", "=", "1.", ",", "class_weights", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "labelwise_metrics", "=", "labelwise_metrics", ",", "\n", "label_mapping", "=", "label_mapping", ",", "\n", "test_labels", "=", "test_labels", ",", "\n", ")", "\n", "self", ".", "feature_extractor", "=", "feature_extractor", "\n", "self", ".", "cnn", "=", "cnn", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.CRNN.forward": [[51, 85], ["numpy.array", "crnn.CRNN.cnn", "crnn.CRNN.rnn", "inputs.pop", "crnn.CRNN.feature_extractor", "crnn.CRNN.feature_extractor", "inputs[].unsqueeze", "torch.broadcast_to", "torch.cat", "torch.nn.Sigmoid"], "methods", ["None"], ["self", ".", "rnn_fwd", "=", "rnn_fwd", "\n", "self", ".", "rnn_bwd", "=", "rnn_bwd", "\n", "self", ".", "minimum_score", "=", "minimum_score", "\n", "self", ".", "label_smoothing", "=", "label_smoothing", "\n", "self", ".", "slat", "=", "slat", "\n", "self", ".", "strong_fwd_bwd_loss_weight", "=", "strong_fwd_bwd_loss_weight", "\n", "self", ".", "class_weights", "=", "None", "if", "class_weights", "is", "None", "else", "torch", ".", "Tensor", "(", "class_weights", ")", "\n", "\n", "", "def", "sigmoid", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "self", ".", "minimum_score", "+", "(", "1", "-", "2", "*", "self", ".", "minimum_score", ")", "*", "nn", ".", "Sigmoid", "(", ")", "(", "y", ")", "\n", "\n", "", "def", "fwd_tagging", "(", "self", ",", "h", ",", "seq_len", ")", ":", "\n", "        ", "y", ",", "seq_len_y", "=", "self", ".", "rnn_fwd", "(", "h", ",", "seq_len", "=", "seq_len", ")", "\n", "return", "self", ".", "sigmoid", "(", "y", ")", ",", "seq_len_y", "\n", "\n", "", "def", "bwd_tagging", "(", "self", ",", "h", ",", "seq_len", ")", ":", "\n", "        ", "y", ",", "seq_len_y", "=", "self", ".", "rnn_bwd", "(", "h", ",", "seq_len", "=", "seq_len", ")", "\n", "return", "self", ".", "sigmoid", "(", "y", ")", ",", "seq_len_y", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        forward used in trainer\n\n        Args:\n            inputs: example dict\n\n        Returns:\n\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "x", "=", "inputs", ".", "pop", "(", "'stft'", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "inputs", "[", "'stft'", "]", "\n", "", "seq_len", "=", "np", ".", "array", "(", "inputs", "[", "'seq_len'", "]", ")", "\n", "if", "\"weak_targets\"", "in", "inputs", ":", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.CRNN.review": [[86, 124], ["numpy.argwhere().flatten", "y.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "strong_targets.detach().cpu().numpy", "dict", "strong_targets_mask.sum", "torch.nn.BCELoss", "numpy.argwhere", "y.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "strong_targets.detach().cpu", "dict", "dict", "dict", "padertorch.contrib.je.modules.reduce.Sum", "y.detach().cpu().numpy.detach().cpu().numpy.detach", "strong_targets.detach", "numpy.mean", "strong_targets_mask.detach().cpu().numpy().mean", "numpy.concatenate", "numpy.concatenate", "strong_targets_mask.detach().cpu().numpy", "strong_targets_mask.detach().cpu", "strong_targets_mask.detach", "padertorch.contrib.je.modules.reduce.Mean"], "methods", ["None"], ["            ", "targets", "=", "self", ".", "read_targets", "(", "inputs", ")", "\n", "x", ",", "seq_len_x", ",", "targets", "=", "self", ".", "feature_extractor", "(", "\n", "x", ",", "seq_len", "=", "seq_len", ",", "targets", "=", "targets", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x", ",", "seq_len_x", "=", "self", ".", "feature_extractor", "(", "x", ",", "seq_len", "=", "seq_len", ")", "\n", "targets", "=", "None", "\n", "\n", "", "h", ",", "seq_len_h", "=", "self", ".", "cnn", "(", "x", ",", "seq_len_x", ")", "\n", "y_fwd", ",", "seq_len_y", "=", "self", ".", "fwd_tagging", "(", "h", ",", "seq_len_h", ")", "\n", "if", "self", ".", "rnn_bwd", "is", "None", ":", "\n", "            ", "y_bwd", "=", "None", "\n", "", "else", ":", "\n", "            ", "y_bwd", ",", "seq_len_y_", "=", "self", ".", "bwd_tagging", "(", "h", ",", "seq_len_h", ")", "\n", "assert", "(", "seq_len_y_", "==", "seq_len_y", ")", ".", "all", "(", ")", "\n", "", "return", "y_fwd", ",", "y_bwd", ",", "seq_len_y", ",", "x", ",", "seq_len_x", ",", "targets", "\n", "\n", "", "def", "read_targets", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "weak_targets", "=", "inputs", "[", "'weak_targets'", "]", "\n", "boundary_targets", "=", "inputs", "[", "'boundary_targets'", "]", "\n", "return", "weak_targets", ",", "boundary_targets", "\n", "\n", "", "def", "review", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"compute loss and metrics\n\n        Args:\n            inputs:\n            outputs:\n\n        Returns:\n\n        \"\"\"", "\n", "y_fwd", ",", "y_bwd", ",", "seq_len", ",", "x", ",", "_", ",", "targets", "=", "outputs", "\n", "assert", "targets", "is", "not", "None", "\n", "weak_targets", ",", "boundary_targets", ",", "*", "_", "=", "targets", "\n", "weak_targets_mask", "=", "(", "weak_targets", "<", ".01", ")", "+", "(", "weak_targets", ">", ".99", ")", "\n", "weak_targets", "=", "weak_targets", "*", "weak_targets_mask", "\n", "\n", "if", "self", ".", "slat", ":", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.CRNN.modify_summary": [[125, 139], ["super().modify_summary", "crnn.CRNN.add_metrics_to_summary"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.modify_summary", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.add_metrics_to_summary"], ["            ", "boundary_targets", "=", "weak_targets", "[", "...", ",", "None", "]", ".", "expand", "(", "\n", "boundary_targets", ".", "shape", ")", "\n", "", "boundary_targets_mask", "=", "(", "boundary_targets", ">", ".99", ")", "+", "(", "boundary_targets", "<", ".01", ")", "\n", "boundary_targets_mask", "=", "boundary_targets_mask", "*", "(", "boundary_targets_mask", ".", "float", "(", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", ">", ".999", ")", "*", "(", "weak_targets", ">", ".99", ")", "[", "...", ",", "None", "]", "\n", "\n", "loss", "=", "(", "\n", "self", ".", "compute_weak_fwd_bwd_loss", "(", "y_fwd", ",", "y_bwd", ",", "weak_targets", ",", "seq_len", ")", "\n", "*", "weak_targets_mask", "[", "...", ",", "None", "]", "\n", ")", "\n", "\n", "if", "(", "boundary_targets_mask", "==", "1", ")", ".", "any", "(", ")", "and", "self", ".", "strong_fwd_bwd_loss_weight", ">", "0.", ":", "\n", "            ", "strong_label_loss", "=", "self", ".", "compute_strong_fwd_bwd_loss", "(", "\n", "y_fwd", ",", "y_bwd", ",", "boundary_targets", ")", "\n", "strong_fwd_bwd_loss_weight", "=", "(", "\n", "boundary_targets_mask", "*", "self", ".", "strong_fwd_bwd_loss_weight", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.CRNN.finalize_dogmatic_config": [[140, 183], ["config[].update"], "methods", ["None"], ["loss", "=", "strong_fwd_bwd_loss_weight", "*", "strong_label_loss", "+", "(", "1.", "-", "strong_fwd_bwd_loss_weight", ")", "*", "loss", "\n", "\n", "", "loss", "=", "Mean", "(", "axis", "=", "-", "1", ")", "(", "loss", ",", "seq_len", ")", "\n", "if", "self", ".", "class_weights", "is", "None", ":", "\n", "            ", "weights", "=", "weak_targets_mask", "\n", "", "else", ":", "\n", "            ", "self", ".", "class_weights", "=", "self", ".", "class_weights", ".", "to", "(", "loss", ".", "device", ")", "\n", "weights", "=", "weak_targets_mask", "*", "self", ".", "class_weights", "\n", "", "loss", "=", "(", "loss", "*", "weights", ")", ".", "sum", "(", ")", "/", "weights", ".", "sum", "(", ")", "\n", "\n", "labeled_examples_idx", "=", "(", "\n", "weak_targets_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "==", "1", "\n", ")", ".", "all", "(", "-", "1", ")", "\n", "y_weak", "=", "TakeLast", "(", "axis", "=", "2", ")", "(", "y_fwd", ",", "seq_len", "=", "seq_len", ")", "\n", "if", "y_bwd", "is", "not", "None", ":", "\n", "            ", "y_weak", "=", "y_weak", "/", "2", "+", "y_bwd", "[", "...", ",", "0", "]", "/", "2", "\n", "", "y_weak", "=", "y_weak", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "labeled_examples_idx", "]", "\n", "weak_targets", "=", "weak_targets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "labeled_examples_idx", "]", "\n", "review", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "\n", "scalars", "=", "dict", "(", "\n", "seq_len", "=", "np", ".", "mean", "(", "inputs", "[", "'seq_len'", "]", ")", ",", "\n", "weak_label_rate", "=", "weak_targets_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "mean", "(", ")", ",", "\n", "boundary_label_rate", "=", "boundary_targets_mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "mean", "(", ")", ",", "\n", ")", ",", "\n", "images", "=", "dict", "(", "\n", "features", "=", "x", "[", ":", "3", "]", ",", "\n", ")", ",", "\n", "buffers", "=", "dict", "(", "\n", "y_weak", "=", "y_weak", ",", "\n", "targets_weak", "=", "weak_targets", ",", "\n", ")", ",", "\n", ")", "\n", "return", "review", "\n", "\n", "", "def", "compute_weak_fwd_bwd_loss", "(", "self", ",", "y_fwd", ",", "y_bwd", ",", "targets", ",", "seq_len", ")", ":", "\n", "        ", "if", "self", ".", "label_smoothing", ">", "0.", ":", "\n", "            ", "targets", "=", "torch", ".", "clip", "(", "\n", "targets", ",", "min", "=", "self", ".", "label_smoothing", ",", "max", "=", "1", "-", "self", ".", "label_smoothing", ")", "\n", "", "if", "y_bwd", "is", "None", ":", "\n", "            ", "y_weak", "=", "TakeLast", "(", "axis", "=", "2", ")", "(", "y_fwd", ",", "seq_len", "=", "seq_len", ")", "\n", "# y_weak = y_weak + 0.1 * (weak_targets - y_weak)", "\n", "return", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "(", "y_weak", ",", "targets", ")", "[", "...", ",", "None", "]", ".", "expand", "(", "y_fwd", ".", "shape", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.CRNN.tagging": [[184, 187], ["crnn.CRNN.forward", "numpy.ones_like", "padertorch.contrib.je.modules.reduce.Max"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.CRNN.forward"], ["            ", "y_weak", "=", "torch", ".", "maximum", "(", "y_fwd", ",", "y_bwd", ")", "\n", "targets", "=", "targets", "[", "...", ",", "None", "]", ".", "expand", "(", "y_weak", ".", "shape", ")", "\n", "# y_weak = y_weak + 0.1 * (weak_targets_ - y_weak)", "\n", "return", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "(", "y_weak", ",", "targets", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.CRNN.boundaries_detection": [[188, 190], ["crnn.CRNN.sound_event_detection"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.sound_event_detection"], ["\n", "", "", "def", "compute_strong_fwd_bwd_loss", "(", "self", ",", "y_fwd", ",", "y_bwd", ",", "targets", ")", ":", "\n", "        ", "if", "self", ".", "label_smoothing", ">", "0.", ":", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.CRNN.sound_event_detection": [[191, 195], ["crnn.CRNN.forward", "padertorch.ops.sequence.mask.compute_mask"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.CRNN.forward"], ["            ", "targets", "=", "torch", ".", "clip", "(", "\n", "targets", ",", "min", "=", "self", ".", "label_smoothing", ",", "max", "=", "1", "-", "self", ".", "label_smoothing", ")", "\n", "", "strong_targets_fwd", "=", "torch", ".", "cummax", "(", "targets", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "strong_targets_bwd", "=", "torch", ".", "cummax", "(", "targets", ".", "flip", "(", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ".", "flip", "(", "-", "1", ")", "\n", "loss", "=", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "(", "y_fwd", ",", "strong_targets_fwd", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.tune_tagging": [[197, 210], ["print", "print", "pb_sed.models.base.tagging", "pb_sed.models.base.tune_tagging"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.tagging", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_tagging"], ["            ", "loss", "=", "(", "\n", "loss", "/", "2", "\n", "+", "nn", ".", "BCELoss", "(", "reduction", "=", "'none'", ")", "(", "y_bwd", ",", "strong_targets_bwd", ")", "/", "2", "\n", ")", "\n", "", "return", "loss", "\n", "\n", "", "def", "modify_summary", "(", "self", ",", "summary", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.tune_boundary_detection": [[213, 229], ["print", "print", "pb_sed.models.base.boundaries_detection", "pb_sed.models.base.tune_boundaries_detection"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.boundaries_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_boundaries_detection"], ["# Computes fscores from scores and targets", "\n", "            ", "self", ".", "add_metrics_to_summary", "(", "summary", ",", "'weak'", ")", "\n", "", "summary", "=", "super", "(", ")", ".", "modify_summary", "(", "summary", ")", "\n", "return", "summary", "\n", "\n", "", "def", "tagging", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "y_fwd", ",", "y_bwd", ",", "seq_len_y", ",", "*", "_", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "seq_len", "=", "np", ".", "ones_like", "(", "seq_len_y", ")", "\n", "if", "y_bwd", "is", "None", ":", "\n", "            ", "return", "TakeLast", "(", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "(", "y_fwd", ",", "seq_len_y", ")", ",", "seq_len", "\n", "", "return", "(", "\n", "(", "\n", "TakeLast", "(", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "(", "y_fwd", ",", "seq_len_y", ")", "\n", "+", "y_bwd", "[", "...", ",", ":", "1", "]", "\n", ")", "/", "2", ",", "\n", "seq_len", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.strong_label.crnn.tune_sound_event_detection": [[232, 246], ["print", "print", "pb_sed.models.base.sound_event_detection", "pb_sed.models.base.tune_sound_event_detection"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.sound_event_detection", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_sound_event_detection"], ["        ", "y_fwd", ",", "y_bwd", ",", "seq_len_y", ",", "*", "_", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "seq_mask", "=", "compute_mask", "(", "y_fwd", ",", "seq_len_y", ",", "batch_axis", "=", "0", ",", "sequence_axis", "=", "-", "1", ")", "\n", "return", "torch", ".", "minimum", "(", "y_fwd", "*", "seq_mask", ",", "y_bwd", "*", "seq_mask", ")", ",", "seq_len_y", "\n", "\n", "", "def", "sound_event_detection", "(", "self", ",", "inputs", ",", "window_length", ",", "window_shift", "=", "1", ")", ":", "\n", "        ", "\"\"\"SED by applying the model to small segments around each frame\n\n        Args:\n            inputs:\n            window_length:\n            window_shift:\n\n        Returns:\n\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.update_leaderboard": [[13, 48], ["float", "hyper_params_and_other_values.keys", "numpy.mean", "copy.deepcopy", "copy.deepcopy", "isinstance", "isinstance", "[].update", "[].keys", "hyper_params_and_other_values.keys"], "function", ["None"], ["from", "pb_sed", ".", "paths", "import", "storage_root", "\n", "from", "pb_sed", ".", "models", "import", "weak_label", "\n", "from", "pb_sed", ".", "models", "import", "strong_label", "\n", "from", "pb_sed", ".", "models", "import", "base", "\n", "from", "pb_sed", ".", "database", ".", "desed", ".", "provider", "import", "DESEDProvider", "\n", "from", "pb_sed", ".", "experiments", ".", "weak_label_crnn", ".", "inference", "import", "tagging", "\n", "from", "pb_sed", ".", "experiments", ".", "strong_label_crnn", ".", "inference", "import", "ex", "as", "evaluation", "\n", "\n", "\n", "ex_name", "=", "'strong_label_crnn_hyper_params'", "\n", "ex", "=", "Exp", "(", "ex_name", ")", "\n", "\n", "\n", "@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "debug", "=", "False", "\n", "timestamp", "=", "timeStamped", "(", "''", ")", "[", "1", ":", "]", "+", "(", "'_debug'", "if", "debug", "else", "''", ")", "\n", "\n", "weak_label_crnn_hyper_params_dir", "=", "''", "\n", "assert", "len", "(", "weak_label_crnn_hyper_params_dir", ")", ">", "0", ",", "'Set weak_label_crnn_hyper_params_dir on the command line.'", "\n", "weak_label_crnn_tuning_config", "=", "load_json", "(", "Path", "(", "weak_label_crnn_hyper_params_dir", ")", "/", "'1'", "/", "'config.json'", ")", "\n", "weak_label_crnn_dirs", "=", "weak_label_crnn_tuning_config", "[", "'crnn_dirs'", "]", "\n", "assert", "len", "(", "weak_label_crnn_dirs", ")", ">", "0", ",", "'weak_label_crnn_dirs must not be empty.'", "\n", "weak_label_crnn_checkpoints", "=", "weak_label_crnn_tuning_config", "[", "'crnn_checkpoints'", "]", "\n", "del", "weak_label_crnn_tuning_config", "\n", "\n", "strong_label_crnn_group_dir", "=", "''", "\n", "if", "isinstance", "(", "strong_label_crnn_group_dir", ",", "list", ")", ":", "\n", "        ", "strong_label_crnn_dirs", "=", "sorted", "(", "[", "\n", "str", "(", "d", ")", "for", "g", "in", "strong_label_crnn_group_dir", "for", "d", "in", "Path", "(", "g", ")", ".", "glob", "(", "'202*'", ")", "if", "d", ".", "is_dir", "(", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "strong_label_crnn_dirs", "=", "sorted", "(", "[", "str", "(", "d", ")", "for", "d", "in", "Path", "(", "strong_label_crnn_group_dir", ")", ".", "glob", "(", "'202*'", ")", "if", "d", ".", "is_dir", "(", ")", "]", ")", "\n", "", "assert", "len", "(", "strong_label_crnn_dirs", ")", ">", "0", ",", "'strong_label_crnn_dirs must not be empty.'", "\n", "strong_label_crnn_checkpoints", "=", "'ckpt_best_macro_fscore_strong.pth'", "\n", "strong_crnn_config", "=", "load_json", "(", "Path", "(", "strong_label_crnn_dirs", "[", "0", "]", ")", "/", "'1'", "/", "'config.json'", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_tagging": [[50, 101], ["sorted", "print", "print", "tagging_scores.keys", "metrics.items", "print", "print", "copy.deepcopy", "metric_fn", "print", "print", "print", "tuning.update_leaderboard", "paderbox.io.json_module.dump_json", "sed_scores_eval.utils.scores.validate_score_dataframe", "[].to_numpy", "pb_sed.filters.medfilt", "event_class.endswith", "other_values.get", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.update_leaderboard", "home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.medfilt"], ["database_name", "=", "strong_crnn_config", ".", "get", "(", "'database_name'", ",", "'desed'", ")", "\n", "storage_dir", "=", "str", "(", "storage_root", "/", "'strong_label_crnn'", "/", "database_name", "/", "'hyper_params'", "/", "timestamp", ")", "\n", "assert", "not", "Path", "(", "storage_dir", ")", ".", "exists", "(", ")", "\n", "del", "strong_crnn_config", "\n", "data_provider", "[", "'min_audio_length'", "]", "=", ".01", "\n", "data_provider", "[", "'cached_datasets'", "]", "=", "None", "\n", "\n", "device", "=", "0", "\n", "\n", "validation_set_name", "=", "'validation'", "\n", "validation_ground_truth_filepath", "=", "None", "\n", "eval_set_name", "=", "'eval_public'", "\n", "eval_ground_truth_filepath", "=", "None", "\n", "\n", "medfilt_lengths", "=", "[", "31", "]", "if", "debug", "else", "[", "301", ",", "251", ",", "201", ",", "151", ",", "101", ",", "81", ",", "61", ",", "51", ",", "41", ",", "31", ",", "21", ",", "11", "]", "\n", "\n", "ex", ".", "observers", ".", "append", "(", "FileStorageObserver", ".", "create", "(", "storage_dir", ")", ")", "\n", "\n", "\n", "", "@", "ex", ".", "automain", "\n", "def", "main", "(", "\n", "_run", ",", "storage_dir", ",", "debug", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "weak_label_crnn_dirs", ",", "weak_label_crnn_checkpoints", ",", "\n", "strong_label_crnn_dirs", ",", "strong_label_crnn_checkpoints", ",", "\n", "data_provider", ",", "validation_set_name", ",", "validation_ground_truth_filepath", ",", "\n", "eval_set_name", ",", "eval_ground_truth_filepath", ",", "\n", "medfilt_lengths", ",", "device", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'##### Tuning #####'", ")", "\n", "print", "(", ")", "\n", "print_config", "(", "_run", ")", "\n", "print", "(", "storage_dir", ")", "\n", "storage_dir", "=", "Path", "(", "storage_dir", ")", "\n", "\n", "if", "not", "isinstance", "(", "weak_label_crnn_checkpoints", ",", "list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "weak_label_crnn_checkpoints", ",", "str", ")", ",", "weak_label_crnn_checkpoints", "\n", "weak_label_crnn_checkpoints", "=", "len", "(", "weak_label_crnn_dirs", ")", "*", "[", "weak_label_crnn_checkpoints", "]", "\n", "", "weak_label_crnns", "=", "[", "\n", "weak_label", ".", "CRNN", ".", "from_storage_dir", "(", "\n", "storage_dir", "=", "crnn_dir", ",", "config_name", "=", "'1/config.json'", ",", "\n", "checkpoint_name", "=", "crnn_checkpoint", "\n", ")", "\n", "for", "crnn_dir", ",", "crnn_checkpoint", "in", "zip", "(", "weak_label_crnn_dirs", ",", "weak_label_crnn_checkpoints", ")", "\n", "]", "\n", "data_provider", "=", "DESEDProvider", ".", "from_config", "(", "data_provider", ")", "\n", "data_provider", ".", "test_transform", ".", "label_encoder", ".", "initialize_labels", "(", ")", "\n", "event_classes", "=", "data_provider", ".", "test_transform", ".", "label_encoder", ".", "inverse_label_mapping", "\n", "event_classes", "=", "[", "event_classes", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "event_classes", ")", ")", "]", "\n", "frame_shift", "=", "data_provider", ".", "test_transform", ".", "stft", ".", "shift", "\n", "frame_shift", "/=", "data_provider", ".", "audio_reader", ".", "target_sample_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.boundaries_from_events": [[103, 123], ["isinstance", "io.read_ground_truth_events.items", "sed_scores_eval.io.read_ground_truth_events", "boundaries_ground_truth[].items"], "function", ["None"], ["        ", "database_root", "=", "Path", "(", "data_provider", ".", "get_raw", "(", "'validation'", ")", "[", "0", "]", "[", "'audio_path'", "]", ")", ".", "parent", ".", "parent", ".", "parent", ".", "parent", "\n", "validation_ground_truth_filepath", "=", "database_root", "/", "'metadata'", "/", "'validation'", "/", "'validation.tsv'", "\n", "", "elif", "validation_set_name", "==", "'eval_public'", "and", "not", "validation_ground_truth_filepath", ":", "\n", "        ", "database_root", "=", "Path", "(", "data_provider", ".", "get_raw", "(", "'eval_public'", ")", "[", "0", "]", "[", "'audio_path'", "]", ")", ".", "parent", ".", "parent", ".", "parent", ".", "parent", "\n", "validation_ground_truth_filepath", "=", "database_root", "/", "'metadata'", "/", "'eval'", "/", "'public.tsv'", "\n", "", "assert", "isinstance", "(", "validation_ground_truth_filepath", ",", "(", "str", ",", "Path", ")", ")", "and", "Path", "(", "validation_ground_truth_filepath", ")", ".", "exists", "(", ")", ",", "validation_ground_truth_filepath", "\n", "\n", "dataset", "=", "data_provider", ".", "get_dataset", "(", "validation_set_name", ")", "\n", "audio_durations", "=", "{", "\n", "example", "[", "'example_id'", "]", ":", "example", "[", "'audio_length'", "]", "\n", "for", "example", "in", "data_provider", ".", "db", ".", "get_dataset", "(", "validation_set_name", ")", "\n", "}", "\n", "\n", "timestamps", "=", "{", "\n", "audio_id", ":", "np", ".", "array", "(", "[", "0.", ",", "audio_durations", "[", "audio_id", "]", "]", ")", "\n", "for", "audio_id", "in", "audio_durations", "\n", "}", "\n", "tags", ",", "tagging_scores", ",", "_", "=", "tagging", "(", "\n", "weak_label_crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "None", ",", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_boundaries_detection": [[125, 208], ["isinstance", "all", "sorted", "print", "print", "tag_masking.keys", "metrics.keys", "tag_masking.keys", "metrics.keys", "detection_scores.keys", "print", "print", "print", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "metrics.items", "paderbox.io.json_module.dump_json", "metrics.keys", "tag_masking.values", "sed_scores_eval.utils.scores.validate_score_dataframe", "[].to_numpy", "pb_sed.filters.medfilt", "sed_scores_eval.utils.scores.validate_score_dataframe", "[].to_numpy", "pb_sed.models.base.inference.boundariesfilt", "sed_scores_eval.utils.scores.validate_score_dataframe", "metric_fn", "print", "print", "print", "tuning.update_leaderboard", "pathlib.Path", "event_class.endswith", "other_values.get"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.medfilt", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.boundariesfilt", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.update_leaderboard"], ["collar_based_params", "=", "{", "\n", "'onset_collar'", ":", ".2", ",", "\n", "'offset_collar'", ":", ".2", ",", "\n", "'offset_collar_rate'", ":", ".2", ",", "\n", "}", "\n", "psds_scenario_1", "=", "{", "\n", "'dtc_threshold'", ":", "0.7", ",", "\n", "'gtc_threshold'", ":", "0.7", ",", "\n", "'cttc_threshold'", ":", "None", ",", "\n", "'alpha_ct'", ":", ".0", ",", "\n", "'alpha_st'", ":", "1.", ",", "\n", "}", "\n", "psds_scenario_2", "=", "{", "\n", "'dtc_threshold'", ":", "0.1", ",", "\n", "'gtc_threshold'", ":", "0.1", ",", "\n", "'cttc_threshold'", ":", "0.3", ",", "\n", "'alpha_ct'", ":", ".5", ",", "\n", "'alpha_st'", ":", "1.", ",", "\n", "}", "\n", "metrics", "=", "{", "\n", "'f'", ":", "partial", "(", "\n", "base", ".", "f_collar", ",", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "return_onset_offset_bias", "=", "True", ",", "num_jobs", "=", "8", ",", "\n", "**", "collar_based_params", ",", "\n", ")", ",", "\n", "'auc1'", ":", "partial", "(", "\n", "base", ".", "psd_auc", ",", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "audio_durations", "=", "audio_durations", ",", "num_jobs", "=", "8", ",", "\n", "**", "psds_scenario_1", ",", "\n", ")", ",", "\n", "'auc2'", ":", "partial", "(", "\n", "base", ".", "psd_auc", ",", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "audio_durations", "=", "audio_durations", ",", "num_jobs", "=", "8", ",", "\n", "**", "psds_scenario_2", ",", "\n", ")", "\n", "}", "\n", "\n", "if", "not", "isinstance", "(", "strong_label_crnn_checkpoints", ",", "list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "strong_label_crnn_checkpoints", ",", "str", ")", ",", "strong_label_crnn_checkpoints", "\n", "strong_label_crnn_checkpoints", "=", "len", "(", "strong_label_crnn_dirs", ")", "*", "[", "strong_label_crnn_checkpoints", "]", "\n", "", "strong_label_crnns", "=", "[", "\n", "strong_label", ".", "CRNN", ".", "from_storage_dir", "(", "\n", "storage_dir", "=", "crnn_dir", ",", "config_name", "=", "'1/config.json'", ",", "\n", "checkpoint_name", "=", "crnn_checkpoint", "\n", ")", "\n", "for", "crnn_dir", ",", "crnn_checkpoint", "in", "zip", "(", "\n", "strong_label_crnn_dirs", ",", "strong_label_crnn_checkpoints", ")", "\n", "]", "\n", "\n", "def", "add_tag_condition", "(", "example", ")", ":", "\n", "        ", "example", "[", "\"tag_condition\"", "]", "=", "np", ".", "array", "(", "[", "\n", "tags", "[", "example_id", "]", "for", "example_id", "in", "example", "[", "\"example_id\"", "]", "]", ")", "\n", "return", "example", "\n", "\n", "", "timestamps", "=", "np", ".", "arange", "(", "0", ",", "10000", ")", "*", "frame_shift", "\n", "leaderboard", "=", "strong_label", ".", "crnn", ".", "tune_sound_event_detection", "(", "\n", "strong_label_crnns", ",", "dataset", ".", "map", "(", "add_tag_condition", ")", ",", "device", ",", "timestamps", ",", "\n", "event_classes", ",", "tags", ",", "metrics", ",", "\n", "tag_masking", "=", "{", "'f'", ":", "True", ",", "'auc1'", ":", "'?'", ",", "'auc2'", ":", "'?'", "}", ",", "\n", "medfilt_lengths", "=", "medfilt_lengths", ",", "\n", ")", "\n", "dump_json", "(", "leaderboard", "[", "'f'", "]", "[", "1", "]", ",", "storage_dir", "/", "f'sed_hyper_params_f.json'", ")", "\n", "f", ",", "p", ",", "r", ",", "thresholds", ",", "_", "=", "collar_based", ".", "best_fscore", "(", "\n", "scores", "=", "leaderboard", "[", "'auc1'", "]", "[", "2", "]", ",", "\n", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "**", "collar_based_params", ",", "num_jobs", "=", "8", "\n", ")", "\n", "for", "event_class", "in", "thresholds", ":", "\n", "        ", "leaderboard", "[", "'auc1'", "]", "[", "1", "]", "[", "event_class", "]", "[", "'threshold'", "]", "=", "thresholds", "[", "event_class", "]", "\n", "", "dump_json", "(", "leaderboard", "[", "'auc1'", "]", "[", "1", "]", ",", "storage_dir", "/", "'sed_hyper_params_psds1.json'", ")", "\n", "f", ",", "p", ",", "r", ",", "thresholds", ",", "_", "=", "collar_based", ".", "best_fscore", "(", "\n", "scores", "=", "leaderboard", "[", "'auc2'", "]", "[", "2", "]", ",", "\n", "ground_truth", "=", "validation_ground_truth_filepath", ",", "\n", "**", "collar_based_params", ",", "num_jobs", "=", "8", "\n", ")", "\n", "for", "event_class", "in", "thresholds", ":", "\n", "        ", "leaderboard", "[", "'auc2'", "]", "[", "1", "]", "[", "event_class", "]", "[", "'threshold'", "]", "=", "thresholds", "[", "event_class", "]", "\n", "", "dump_json", "(", "leaderboard", "[", "'auc2'", "]", "[", "1", "]", ",", "storage_dir", "/", "'sed_hyper_params_psds2.json'", ")", "\n", "for", "crnn_dir", "in", "strong_label_crnn_dirs", ":", "\n", "        ", "tuning_dir", "=", "Path", "(", "crnn_dir", ")", "/", "'hyper_params'", "\n", "os", ".", "makedirs", "(", "str", "(", "tuning_dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "(", "tuning_dir", "/", "storage_dir", ".", "name", ")", ".", "symlink_to", "(", "storage_dir", ")", "\n", "", "print", "(", "storage_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.tune_sound_event_detection": [[210, 282], ["isinstance", "all", "sorted", "print", "print", "tag_masking.keys", "metrics.keys", "tag_masking.keys", "metrics.keys", "detection_scores.keys", "copy.deepcopy", "metrics.items", "print", "print", "print", "copy.deepcopy", "sed_scores_eval.utils.scores.validate_score_dataframe", "paderbox.io.json_module.dump_json", "metrics.keys", "tag_masking.values", "sed_scores_eval.utils.scores.validate_score_dataframe", "[].to_numpy", "pb_sed.filters.medfilt", "metric_fn", "print", "print", "print", "tuning.update_leaderboard", "event_class.endswith", "pathlib.Path", "other_values.get"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.medfilt", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.update_leaderboard"], ["        ", "evaluation", ".", "run", "(", "\n", "config_updates", "=", "{", "\n", "'debug'", ":", "debug", ",", "\n", "'strong_label_crnn_hyper_params_dir'", ":", "str", "(", "storage_dir", ")", ",", "\n", "'dataset_name'", ":", "eval_set_name", ",", "\n", "'ground_truth_filepath'", ":", "eval_ground_truth_filepath", ",", "\n", "}", ",", "\n", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.f_tag": [[284, 290], ["sed_scores_eval.clip_based.best_fscore"], "function", ["None"], []], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.f_collar": [[293, 323], ["sed_scores_eval.collar_based.best_fscore", "sed_scores_eval.collar_based.fscore", "max", "max"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.fscore"], []], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.tuning.psd_auc": [[326, 344], ["sed_scores_eval.intersection_based.psds", "sed_scores_eval.utils.auc.staircase_auc", "classwise_rocs.items"], "function", ["None"], []], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.tagging": [[12, 34], ["inference.inference", "x.max"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.inference"], ["from", "paderbox", ".", "io", ".", "json_module", "import", "load_json", ",", "dump_json", "\n", "from", "sed_scores_eval", "import", "intersection_based", ",", "collar_based", "\n", "from", "sed_scores_eval", ".", "base_modules", ".", "detection", "import", "scores_to_event_list", "\n", "from", "sed_scores_eval", ".", "utils", ".", "auc", "import", "staircase_auc", "\n", "from", "sed_scores_eval", "import", "io", "\n", "\n", "from", "pb_sed", ".", "paths", "import", "storage_root", "\n", "from", "pb_sed", ".", "models", "import", "weak_label", "\n", "from", "pb_sed", ".", "models", "import", "strong_label", "\n", "from", "pb_sed", ".", "models", "import", "base", "\n", "from", "pb_sed", ".", "database", ".", "desed", ".", "provider", "import", "DESEDProvider", "\n", "from", "pb_sed", ".", "experiments", ".", "weak_label_crnn", ".", "inference", "import", "tagging", "\n", "from", "pb_sed", ".", "utils", ".", "segment", "import", "segment_batch", ",", "merge_segments", "\n", "\n", "ex_name", "=", "'strong_label_crnn_inference'", "\n", "ex", "=", "Exp", "(", "ex_name", ")", "\n", "\n", "\n", "@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "debug", "=", "False", "\n", "timestamp", "=", "timeStamped", "(", "''", ")", "[", "1", ":", "]", "+", "(", "'_debug'", "if", "debug", "else", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.boundaries_detection": [[37, 59], ["inference.inference"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.inference"], ["strong_label_crnn_tuning_config", "=", "load_json", "(", "Path", "(", "strong_label_crnn_hyper_params_dir", ")", "/", "'1'", "/", "'config.json'", ")", "\n", "strong_label_crnn_dirs", "=", "strong_label_crnn_tuning_config", "[", "'strong_label_crnn_dirs'", "]", "\n", "assert", "len", "(", "strong_label_crnn_dirs", ")", ">", "0", ",", "'strong_label_crnn_dirs must not be empty.'", "\n", "strong_label_crnn_checkpoints", "=", "strong_label_crnn_tuning_config", "[", "'strong_label_crnn_checkpoints'", "]", "\n", "data_provider", "=", "strong_label_crnn_tuning_config", "[", "'data_provider'", "]", "\n", "database_name", "=", "strong_label_crnn_tuning_config", "[", "'database_name'", "]", "\n", "storage_dir", "=", "str", "(", "storage_root", "/", "'strong_label_crnn'", "/", "database_name", "/", "'inference'", "/", "timestamp", ")", "\n", "assert", "not", "Path", "(", "storage_dir", ")", ".", "exists", "(", ")", "\n", "\n", "weak_label_crnn_hyper_params_dir", "=", "strong_label_crnn_tuning_config", "[", "'weak_label_crnn_hyper_params_dir'", "]", "\n", "assert", "len", "(", "weak_label_crnn_hyper_params_dir", ")", ">", "0", ",", "'Set weak_label_crnn_hyper_params_dir on the command line.'", "\n", "weak_label_crnn_tuning_config", "=", "load_json", "(", "Path", "(", "weak_label_crnn_hyper_params_dir", ")", "/", "'1'", "/", "'config.json'", ")", "\n", "weak_label_crnn_dirs", "=", "weak_label_crnn_tuning_config", "[", "'crnn_dirs'", "]", "\n", "assert", "len", "(", "weak_label_crnn_dirs", ")", ">", "0", ",", "'weak_label_crnn_dirs must not be empty.'", "\n", "weak_label_crnn_checkpoints", "=", "weak_label_crnn_tuning_config", "[", "'crnn_checkpoints'", "]", "\n", "\n", "del", "strong_label_crnn_tuning_config", "\n", "del", "weak_label_crnn_tuning_config", "\n", "\n", "sed_hyper_params_name", "=", "[", "'f'", ",", "'psds1'", ",", "'psds2'", "]", "\n", "\n", "device", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.sound_event_detection": [[62, 83], ["inference.inference"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.inference"], ["\n", "max_segment_length", "=", "None", "\n", "if", "max_segment_length", "is", "None", ":", "\n", "        ", "segment_overlap", "=", "None", "\n", "", "else", ":", "\n", "        ", "segment_overlap", "=", "100", "\n", "", "save_scores", "=", "False", "\n", "save_detections", "=", "False", "\n", "\n", "weak_pseudo_labeling", "=", "False", "\n", "strong_pseudo_labeling", "=", "False", "\n", "pseudo_labelled_dataset_name", "=", "dataset_name", "\n", "\n", "pseudo_widening", "=", ".0", "\n", "\n", "ex", ".", "observers", ".", "append", "(", "FileStorageObserver", ".", "create", "(", "storage_dir", ")", ")", "\n", "\n", "\n", "", "def", "sound_event_detection", "(", "\n", "crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "tags", ",", "\n", "hyper_params_dir", ",", "hyper_params_name", ",", "\n", "ground_truth", ",", "audio_durations", ",", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.inference": [[86, 223], ["numpy.array", "numpy.array", "range", "isinstance", "isinstance", "len", "hasattr", "model[].to", "model[].eval", "torch.no_grad", "tqdm.tqdm", "len", "len", "len", "len", "len", "batch.pop", "batch.pop", "batch.pop", "pb_sed.utils.segment.segment_batch", "model[].example_to_device", "range", "numpy.mean", "padertorch.ops.sequence.mask.compute_mask().numpy", "inference.filtering", "pb_sed.utils.segment.merge_segments.update", "np.array.any", "inference.scores_to_dataframes", "len", "filtering.append", "numpy.array", "inference.filtering", "[].split", "int", "int", "isinstance", "getattr", "yi.detach().cpu().numpy", "padertorch.ops.sequence.mask.compute_mask", "inference.tagging.post_processing_fn"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.utils.segment.segment_batch", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.filtering", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.scores_to_dataframes", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.filtering"], ["score_storage_dir", "=", "None", ",", "detection_storage_dir", "=", "None", ",", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'Sound Event Detection'", ")", "\n", "if", "isinstance", "(", "hyper_params_name", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "hyper_params_name", "=", "[", "hyper_params_name", "]", "\n", "", "assert", "isinstance", "(", "hyper_params_name", ",", "(", "list", ",", "tuple", ")", ")", "\n", "hyper_params", "=", "[", "\n", "load_json", "(", "Path", "(", "hyper_params_dir", ")", "/", "f'sed_hyper_params_{name}.json'", ")", "\n", "for", "name", "in", "hyper_params_name", "\n", "]", "\n", "\n", "if", "isinstance", "(", "score_storage_dir", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "assert", "len", "(", "score_storage_dir", ")", "==", "len", "(", "hyper_params", ")", ",", "(", "len", "(", "score_storage_dir", ")", ",", "len", "(", "hyper_params", ")", ")", "\n", "", "elif", "isinstance", "(", "score_storage_dir", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "score_storage_dir", "=", "[", "\n", "Path", "(", "score_storage_dir", ")", "/", "name", "for", "name", "in", "hyper_params_name", "\n", "]", "\n", "", "elif", "score_storage_dir", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'score_storage_dir must be list, str, Path or None.'", ")", "\n", "\n", "", "if", "isinstance", "(", "detection_storage_dir", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "assert", "len", "(", "detection_storage_dir", ")", "==", "len", "(", "hyper_params", ")", ",", "(", "len", "(", "detection_storage_dir", ")", ",", "len", "(", "hyper_params", ")", ")", "\n", "", "elif", "isinstance", "(", "detection_storage_dir", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "detection_storage_dir", "=", "[", "\n", "Path", "(", "detection_storage_dir", ")", "/", "name", "for", "name", "in", "hyper_params_name", "\n", "]", "\n", "", "elif", "detection_storage_dir", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'detection_storage_dir must be list, str, Path or None.'", ")", "\n", "\n", "", "medfilt_lengths", "=", "np", ".", "zeros", "(", "(", "len", "(", "hyper_params", ")", ",", "len", "(", "event_classes", ")", ")", ")", "\n", "tag_masked", "=", "np", ".", "zeros", "(", "(", "len", "(", "hyper_params", ")", ",", "len", "(", "event_classes", ")", ")", ")", "\n", "for", "i", ",", "hyper_params_i", "in", "enumerate", "(", "hyper_params", ")", ":", "\n", "        ", "for", "j", ",", "event_class", "in", "enumerate", "(", "event_classes", ")", ":", "\n", "            ", "medfilt_lengths", "[", "i", ",", "j", "]", "=", "hyper_params_i", "[", "event_class", "]", "[", "'medfilt_length'", "]", "\n", "tag_masked", "[", "i", ",", "j", "]", "=", "hyper_params_i", "[", "event_class", "]", "[", "'tag_masked'", "]", "\n", "", "", "detection_scores", "=", "base", ".", "sound_event_detection", "(", "\n", "crnns", ",", "dataset", ",", "device", ",", "\n", "medfilt_length", "=", "medfilt_lengths", ",", "apply_mask", "=", "tag_masked", ",", "masks", "=", "tags", ",", "\n", "timestamps", "=", "timestamps", ",", "event_classes", "=", "event_classes", ",", "\n", "max_segment_length", "=", "max_segment_length", ",", "segment_overlap", "=", "segment_overlap", ",", "\n", "merge_score_segments", "=", "True", ",", "score_segment_overlap", "=", "segment_overlap", ",", "\n", "score_storage_dir", "=", "score_storage_dir", ",", "\n", ")", "\n", "event_detections", "=", "[", "]", "\n", "results", "=", "[", "]", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "hyper_params_name", ")", ":", "\n", "        ", "if", "ground_truth", ":", "\n", "            ", "print", "(", ")", "\n", "print", "(", "name", ")", "\n", "", "results", ".", "append", "(", "{", "}", ")", "\n", "if", "detection_storage_dir", "and", "detection_storage_dir", "[", "i", "]", ":", "\n", "            ", "io", ".", "write_detections_for_multiple_thresholds", "(", "\n", "detection_scores", "[", "i", "]", ",", "thresholds", "=", "np", ".", "linspace", "(", ".01", ",", ".99", ",", "50", ")", ",", "\n", "dir_path", "=", "detection_storage_dir", "[", "i", "]", ",", "\n", ")", "\n", "", "if", "'threshold'", "in", "hyper_params", "[", "i", "]", "[", "event_classes", "[", "0", "]", "]", ":", "\n", "            ", "thresholds", "=", "{", "\n", "event_class", ":", "hyper_params", "[", "i", "]", "[", "event_class", "]", "[", "'threshold'", "]", "\n", "for", "event_class", "in", "event_classes", "\n", "}", "\n", "event_detections", ".", "append", "(", "\n", "scores_to_event_list", "(", "\n", "detection_scores", "[", "i", "]", ",", "thresholds", ",", "event_classes", "=", "event_classes", ")", "\n", ")", "\n", "if", "detection_storage_dir", "and", "detection_storage_dir", "[", "i", "]", ":", "\n", "                ", "io", ".", "write_detection", "(", "\n", "detection_scores", "[", "i", "]", ",", "thresholds", ",", "\n", "Path", "(", "detection_storage_dir", "[", "i", "]", ")", "/", "'cbf.tsv'", ",", "\n", ")", "\n", "", "if", "ground_truth", "and", "collar_based_params", ":", "\n", "                ", "f", ",", "p", ",", "r", ",", "stats", "=", "collar_based", ".", "fscore", "(", "\n", "detection_scores", "[", "i", "]", ",", "ground_truth", ",", "thresholds", ",", "\n", "**", "collar_based_params", ",", "\n", "return_onset_offset_dist_sum", "=", "True", ",", "num_jobs", "=", "8", ",", "\n", ")", "\n", "print", "(", "'f'", ",", "f", ")", "\n", "print", "(", "'p'", ",", "p", ")", "\n", "print", "(", "'r'", ",", "r", ")", "\n", "for", "key", "in", "f", ":", "\n", "                    ", "results", "[", "-", "1", "]", ".", "update", "(", "{", "\n", "f'{key}_f'", ":", "f", "[", "key", "]", ",", "\n", "f'{key}_p'", ":", "p", "[", "key", "]", ",", "\n", "f'{key}_r'", ":", "r", "[", "key", "]", ",", "\n", "}", ")", "\n", "if", "key", "in", "stats", ":", "\n", "                        ", "results", "[", "-", "1", "]", ".", "update", "(", "{", "\n", "f'{key}_onset_bias'", ":", "stats", "[", "key", "]", "[", "'onset_dist_sum'", "]", "/", "max", "(", "stats", "[", "key", "]", "[", "'tps'", "]", ",", "1", ")", ",", "\n", "f'{key}_offset_bias'", ":", "stats", "[", "key", "]", "[", "'offset_dist_sum'", "]", "/", "max", "(", "stats", "[", "key", "]", "[", "'tps'", "]", ",", "1", ")", ",", "\n", "}", ")", "\n", "\n", "", "", "", "for", "clip_id", "in", "event_detections", "[", "-", "1", "]", ":", "\n", "                ", "events_in_clip", "=", "[", "]", "\n", "for", "onset", ",", "offset", ",", "event_label", "in", "event_detections", "[", "-", "1", "]", "[", "clip_id", "]", ":", "\n", "                    ", "onset", "=", "max", "(", "onset", "-", "pseudo_widening", "-", "hyper_params", "[", "i", "]", "[", "event_label", "]", ".", "get", "(", "'onset_bias'", ",", "0", ")", ",", "0", ")", "\n", "offset", "=", "offset", "+", "pseudo_widening", "-", "hyper_params", "[", "i", "]", "[", "event_label", "]", ".", "get", "(", "'offset_bias'", ",", "0", ")", "\n", "if", "offset", ">", "onset", ":", "\n", "                        ", "events_in_clip", ".", "append", "(", "(", "onset", ",", "offset", ",", "event_label", ")", ")", "\n", "", "", "event_detections", "[", "-", "1", "]", "[", "clip_id", "]", "=", "events_in_clip", "\n", "", "", "else", ":", "\n", "            ", "event_detections", ".", "append", "(", "None", ")", "\n", "", "if", "ground_truth", ":", "\n", "            ", "if", "not", "isinstance", "(", "psds_params", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "psds_params", "=", "[", "psds_params", "]", "\n", "", "for", "j", "in", "range", "(", "len", "(", "psds_params", ")", ")", ":", "\n", "                ", "psds", ",", "psd_roc", ",", "classwise_rocs", "=", "intersection_based", ".", "psds", "(", "\n", "detection_scores", "[", "i", "]", ",", "ground_truth", ",", "audio_durations", ",", "\n", "**", "psds_params", "[", "j", "]", ",", "num_jobs", "=", "8", ",", "\n", ")", "\n", "print", "(", "f'psds[{j}]'", ",", "psds", ")", "\n", "results", "[", "-", "1", "]", "[", "f'psds[{j}]'", "]", "=", "psds", "\n", "for", "event_class", ",", "(", "tpr", ",", "efpr", ",", "*", "_", ")", "in", "classwise_rocs", ".", "items", "(", ")", ":", "\n", "                    ", "results", "[", "-", "1", "]", "[", "f'{event_class}_auc[{j}]'", "]", "=", "staircase_auc", "(", "\n", "tpr", ",", "efpr", ",", "psds_params", "[", "j", "]", ".", "get", "(", "'max_efpr'", ",", "100", ")", ")", "\n", "", "if", "score_storage_dir", "and", "score_storage_dir", "[", "i", "]", "is", "not", "None", ":", "\n", "                    ", "psds", ",", "psd_roc", ",", "classwise_rocs", "=", "intersection_based", ".", "psds", "(", "\n", "score_storage_dir", "[", "i", "]", ",", "ground_truth", ",", "audio_durations", ",", "\n", "**", "psds_params", "[", "j", "]", ",", "num_jobs", "=", "8", ",", "\n", ")", "\n", "print", "(", "f'psds[{j}] (from files)'", ",", "psds", ")", "\n", "", "psds", ",", "psd_roc", ",", "classwise_rocs", "=", "intersection_based", ".", "reference", ".", "approximate_psds", "(", "\n", "detection_scores", "[", "i", "]", ",", "ground_truth", ",", "audio_durations", ",", "\n", "**", "psds_params", "[", "j", "]", ",", "thresholds", "=", "np", ".", "linspace", "(", ".01", ",", ".99", ",", "50", ")", ",", "\n", ")", "\n", "print", "(", "f'approx_psds[{j}]'", ",", "psds", ")", "\n", "results", "[", "-", "1", "]", "[", "f'approx_psds[{j}]'", "]", "=", "psds", "\n", "for", "event_class", ",", "(", "tpr", ",", "efpr", ",", "*", "_", ")", "in", "classwise_rocs", ".", "items", "(", ")", ":", "\n", "                    ", "results", "[", "-", "1", "]", "[", "f'{event_class}_approx_auc[{j}]'", "]", "=", "staircase_auc", "(", "\n", "tpr", ",", "efpr", ",", "psds_params", "[", "j", "]", ".", "get", "(", "'max_efpr'", ",", "100", ")", ")", "\n", "", "if", "detection_storage_dir", "and", "detection_storage_dir", "[", "i", "]", "is", "not", "None", ":", "\n", "                    ", "psds", ",", "psd_roc", ",", "classwise_rocs", "=", "intersection_based", ".", "reference", ".", "approximate_psds_from_detections_dir", "(", "\n", "detection_storage_dir", "[", "i", "]", ",", "ground_truth", ",", "audio_durations", ",", "\n", "**", "psds_params", "[", "j", "]", ",", "thresholds", "=", "np", ".", "linspace", "(", ".01", ",", ".99", ",", "50", ")", ",", "\n", ")", "\n", "print", "(", "f'approx_psds[{j}] (from files)'", ",", "psds", ")", "\n", "", "", "", "", "return", "event_detections", ",", "results", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.filtering": [[225, 264], ["enumerate", "range", "ValueError", "numpy.broadcast_to().copy", "ValueError", "range", "numpy.broadcast_to", "pb_sed.filters.medfilt", "inference.boundariesfilt"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.copy", "home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.medfilt", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.boundariesfilt"], ["def", "main", "(", "\n", "_run", ",", "\n", "storage_dir", ",", "strong_label_crnn_hyper_params_dir", ",", "sed_hyper_params_name", ",", "\n", "strong_label_crnn_dirs", ",", "strong_label_crnn_checkpoints", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "weak_label_crnn_dirs", ",", "weak_label_crnn_checkpoints", ",", "\n", "device", ",", "data_provider", ",", "dataset_name", ",", "ground_truth_filepath", ",", "\n", "save_scores", ",", "save_detections", ",", "max_segment_length", ",", "segment_overlap", ",", "\n", "strong_pseudo_labeling", ",", "pseudo_widening", ",", "pseudo_labelled_dataset_name", ",", "\n", ")", ":", "\n", "    ", "print", "(", ")", "\n", "print", "(", "'##### Inference #####'", ")", "\n", "print", "(", ")", "\n", "print_config", "(", "_run", ")", "\n", "print", "(", "storage_dir", ")", "\n", "emissions_tracker", "=", "EmissionsTracker", "(", "\n", "output_dir", "=", "storage_dir", ",", "on_csv_write", "=", "\"update\"", ",", "log_level", "=", "'error'", ")", "\n", "emissions_tracker", ".", "start", "(", ")", "\n", "storage_dir", "=", "Path", "(", "storage_dir", ")", "\n", "\n", "collar_based_params", "=", "{", "\n", "'onset_collar'", ":", ".2", ",", "\n", "'offset_collar'", ":", ".2", ",", "\n", "'offset_collar_rate'", ":", ".2", ",", "\n", "}", "\n", "psds_scenario_1", "=", "{", "\n", "'dtc_threshold'", ":", "0.7", ",", "\n", "'gtc_threshold'", ":", "0.7", ",", "\n", "'cttc_threshold'", ":", "None", ",", "\n", "'alpha_ct'", ":", ".0", ",", "\n", "'alpha_st'", ":", "1.", ",", "\n", "}", "\n", "psds_scenario_2", "=", "{", "\n", "'dtc_threshold'", ":", "0.1", ",", "\n", "'gtc_threshold'", ":", "0.1", ",", "\n", "'cttc_threshold'", ":", "0.3", ",", "\n", "'alpha_ct'", ":", ".5", ",", "\n", "'alpha_st'", ":", "1.", ",", "\n", "}", "\n", "\n", "if", "not", "isinstance", "(", "weak_label_crnn_checkpoints", ",", "list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.boundariesfilt": [[266, 288], ["numpy.minimum", "pb_sed.filters.stepfilt", "pb_sed.filters.stepfilt", "numpy.flip", "[].numpy", "numpy.flip", "numpy.flip", "[].numpy", "torch.cummax", "torch.from_numpy", "torch.cummax", "pb_sed.filters.stepfilt.copy", "torch.from_numpy", "np.flip.copy"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.stepfilt", "home.repos.pwc.inspect_result.fgnt_pb_sed.pb_sed.filters.stepfilt", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.copy", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.copy"], ["weak_label_crnn_checkpoints", "=", "len", "(", "weak_label_crnn_dirs", ")", "*", "[", "weak_label_crnn_checkpoints", "]", "\n", "", "weak_label_crnns", "=", "[", "\n", "weak_label", ".", "CRNN", ".", "from_storage_dir", "(", "\n", "storage_dir", "=", "crnn_dir", ",", "config_name", "=", "'1/config.json'", ",", "\n", "checkpoint_name", "=", "crnn_checkpoint", "\n", ")", "\n", "for", "crnn_dir", ",", "crnn_checkpoint", "in", "zip", "(", "weak_label_crnn_dirs", ",", "weak_label_crnn_checkpoints", ")", "\n", "]", "\n", "print", "(", "'Weak Label CRNN Params'", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "crnn", "in", "weak_label_crnns", "for", "p", "in", "crnn", ".", "parameters", "(", ")", "]", ")", ")", "\n", "print", "(", "'Weak Label CNN2d Params'", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "crnn", "in", "weak_label_crnns", "for", "p", "in", "crnn", ".", "cnn", ".", "cnn_2d", ".", "parameters", "(", ")", "]", ")", ")", "\n", "if", "not", "isinstance", "(", "strong_label_crnn_checkpoints", ",", "list", ")", ":", "\n", "        ", "assert", "isinstance", "(", "strong_label_crnn_checkpoints", ",", "str", ")", ",", "strong_label_crnn_checkpoints", "\n", "strong_label_crnn_checkpoints", "=", "len", "(", "strong_label_crnn_dirs", ")", "*", "[", "strong_label_crnn_checkpoints", "]", "\n", "", "strong_label_crnns", "=", "[", "\n", "strong_label", ".", "CRNN", ".", "from_storage_dir", "(", "\n", "storage_dir", "=", "crnn_dir", ",", "config_name", "=", "'1/config.json'", ",", "\n", "checkpoint_name", "=", "crnn_checkpoint", "\n", ")", "\n", "for", "crnn_dir", ",", "crnn_checkpoint", "in", "zip", "(", "strong_label_crnn_dirs", ",", "strong_label_crnn_checkpoints", ")", "\n", "]", "\n", "print", "(", "'Strong Label CRNN Params'", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "crnn", "in", "strong_label_crnns", "for", "p", "in", "crnn", ".", "parameters", "(", ")", "]", ")", ")", "\n", "print", "(", "'Strong Label CNN2d Params'", ",", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "crnn", "in", "strong_label_crnns", "for", "p", "in", "crnn", ".", "cnn", ".", "cnn_2d", ".", "parameters", "(", ")", "]", ")", ")", "\n", "data_provider", "=", "DESEDProvider", ".", "from_config", "(", "data_provider", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.scores_to_dataframes": [[292, 355], ["isinstance", "isinstance", "type", "sorted", "sed_scores_eval.utils.scores.create_score_dataframe", "sed_scores_eval.utils.scores.create_score_dataframe.keys", "isinstance", "len", "len", "len", "sed_scores_eval.io.write_sed_scores", "isinstance", "range", "inference.scores_to_dataframes", "isinstance", "inference.scores_to_dataframes", "isinstance", "type", "pathlib.Path", "pathlib.Path.mkdir", "sed_scores_eval.io.lazy_sed_scores_loader", "sed_scores_eval.io.lazy_sed_scores_loader", "ValueError", "inference.scores_to_dataframes", "isinstance", "type", "pathlib.Path", "storage_path[].mkdir", "pathlib.Path", "len", "len", "range", "type"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.scores_to_dataframes", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.scores_to_dataframes", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.inference.scores_to_dataframes"], ["frame_shift", "=", "data_provider", ".", "test_transform", ".", "stft", ".", "shift", "\n", "frame_shift", "/=", "data_provider", ".", "audio_reader", ".", "target_sample_rate", "\n", "\n", "if", "not", "isinstance", "(", "dataset_name", ",", "list", ")", ":", "\n", "        ", "dataset_name", "=", "[", "dataset_name", "]", "\n", "", "if", "ground_truth_filepath", "is", "None", ":", "\n", "        ", "ground_truth_filepath", "=", "len", "(", "dataset_name", ")", "*", "[", "ground_truth_filepath", "]", "\n", "", "elif", "isinstance", "(", "ground_truth_filepath", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "        ", "ground_truth_filepath", "=", "[", "ground_truth_filepath", "]", "\n", "", "assert", "len", "(", "ground_truth_filepath", ")", "==", "len", "(", "dataset_name", ")", "\n", "if", "not", "isinstance", "(", "strong_pseudo_labeling", ",", "list", ")", ":", "\n", "        ", "strong_pseudo_labeling", "=", "len", "(", "dataset_name", ")", "*", "[", "strong_pseudo_labeling", "]", "\n", "", "assert", "len", "(", "strong_pseudo_labeling", ")", "==", "len", "(", "dataset_name", ")", "\n", "if", "not", "isinstance", "(", "pseudo_labelled_dataset_name", ",", "list", ")", ":", "\n", "        ", "pseudo_labelled_dataset_name", "=", "[", "pseudo_labelled_dataset_name", "]", "\n", "", "assert", "len", "(", "pseudo_labelled_dataset_name", ")", "==", "len", "(", "dataset_name", ")", "\n", "\n", "database", "=", "deepcopy", "(", "data_provider", ".", "db", ".", "data", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset_name", ")", ")", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "dataset_name", "[", "i", "]", ")", "\n", "if", "dataset_name", "[", "i", "]", "==", "'eval_public'", "and", "not", "ground_truth_filepath", "[", "i", "]", ":", "\n", "            ", "database_root", "=", "Path", "(", "data_provider", ".", "get_raw", "(", "'eval_public'", ")", "[", "0", "]", "[", "'audio_path'", "]", ")", ".", "parent", ".", "parent", ".", "parent", ".", "parent", "\n", "ground_truth_filepath", "[", "i", "]", "=", "database_root", "/", "'metadata'", "/", "'eval'", "/", "'public.tsv'", "\n", "", "elif", "dataset_name", "[", "i", "]", "==", "'validation'", "and", "not", "ground_truth_filepath", "[", "i", "]", ":", "\n", "            ", "database_root", "=", "Path", "(", "data_provider", ".", "get_raw", "(", "'validation'", ")", "[", "0", "]", "[", "'audio_path'", "]", ")", ".", "parent", ".", "parent", ".", "parent", ".", "parent", "\n", "ground_truth_filepath", "[", "i", "]", "=", "database_root", "/", "'metadata'", "/", "'validation'", "/", "'validation.tsv'", "\n", "\n", "", "dataset", "=", "data_provider", ".", "get_dataset", "(", "dataset_name", "[", "i", "]", ")", "\n", "audio_durations", "=", "{", "\n", "example", "[", "'example_id'", "]", ":", "example", "[", "'audio_length'", "]", "\n", "for", "example", "in", "data_provider", ".", "db", ".", "get_dataset", "(", "dataset_name", "[", "i", "]", ")", "\n", "}", "\n", "\n", "score_storage_dir", "=", "storage_dir", "/", "'scores'", "/", "dataset_name", "[", "i", "]", "\n", "detection_storage_dir", "=", "storage_dir", "/", "'detections'", "/", "dataset_name", "[", "i", "]", "\n", "\n", "if", "max_segment_length", "is", "None", ":", "\n", "            ", "timestamps", "=", "{", "\n", "audio_id", ":", "np", ".", "array", "(", "[", "0.", ",", "audio_durations", "[", "audio_id", "]", "]", ")", "\n", "for", "audio_id", "in", "audio_durations", "\n", "}", "\n", "", "else", ":", "\n", "            ", "timestamps", "=", "{", "}", "\n", "for", "audio_id", "in", "audio_durations", ":", "\n", "                ", "ts", "=", "np", ".", "arange", "(", "\n", "(", "2", "+", "max_segment_length", ")", "*", "frame_shift", ",", "\n", "audio_durations", "[", "audio_id", "]", ",", "\n", "(", "max_segment_length", "-", "segment_overlap", ")", "*", "frame_shift", "\n", ")", "\n", "timestamps", "[", "audio_id", "]", "=", "np", ".", "concatenate", "(", "(", "\n", "[", "0.", "]", ",", "ts", "-", "segment_overlap", "/", "2", "*", "frame_shift", ",", "\n", "[", "audio_durations", "[", "audio_id", "]", "]", "\n", ")", ")", "\n", "", "", "if", "max_segment_length", "is", "not", "None", ":", "\n", "            ", "dataset", "=", "dataset", ".", "map", "(", "partial", "(", "\n", "segment_batch", ",", "\n", "max_length", "=", "max_segment_length", ",", "\n", "overlap", "=", "segment_overlap", "\n", ")", ")", ".", "unbatch", "(", ")", "\n", "", "tags", ",", "tagging_scores", ",", "_", "=", "tagging", "(", "\n", "weak_label_crnns", ",", "dataset", ",", "device", ",", "timestamps", ",", "event_classes", ",", "\n", "weak_label_crnn_hyper_params_dir", ",", "None", ",", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.__init__": [[10, 15], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.desed.database.DESED.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "labelwise_metrics", "=", "(", ")", ",", "label_mapping", "=", "None", ",", "test_labels", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "labelwise_metrics", "=", "labelwise_metrics", "\n", "self", ".", "label_mapping", "=", "label_mapping", "\n", "self", ".", "test_labels", "=", "test_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.tagging": [[16, 19], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "tagging", "(", "self", ",", "inputs", ",", "**", "params", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.boundaries_detection": [[20, 23], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "boundaries_detection", "(", "self", ",", "inputs", ",", "**", "params", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.sound_event_detection": [[24, 27], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "sound_event_detection", "(", "self", ",", "inputs", ",", "**", "params", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.modify_summary": [[28, 43], ["summary[].items", "summary[].items", "numpy.mean", "torchvision.utils.make_grid", "image.unsqueeze.unsqueeze.dim", "image.unsqueeze.unsqueeze.unsqueeze", "image.unsqueeze.unsqueeze.flip", "image.unsqueeze.unsqueeze.dim"], "methods", ["None"], ["", "def", "modify_summary", "(", "self", ",", "summary", ")", ":", "\n", "        ", "for", "key", ",", "scalar", "in", "summary", "[", "'scalars'", "]", ".", "items", "(", ")", ":", "\n", "# average scalar metrics over batches", "\n", "            ", "summary", "[", "'scalars'", "]", "[", "key", "]", "=", "np", ".", "mean", "(", "scalar", ")", "\n", "\n", "", "for", "key", ",", "image", "in", "summary", "[", "'images'", "]", ".", "items", "(", ")", ":", "\n", "# prepare image grid for tensorboard", "\n", "            ", "if", "image", ".", "dim", "(", ")", "==", "4", "and", "image", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "                ", "image", "=", "image", "[", ":", ",", "0", "]", "\n", "", "if", "image", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "image", "=", "image", ".", "unsqueeze", "(", "1", ")", "\n", "", "summary", "[", "'images'", "]", "[", "key", "]", "=", "make_grid", "(", "\n", "image", ".", "flip", "(", "2", ")", ",", "normalize", "=", "True", ",", "scale_each", "=", "False", ",", "nrow", "=", "1", "\n", ")", "\n", "", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.model.SoundEventModel.add_metrics_to_summary": [[44, 89], ["numpy.concatenate", "len", "numpy.concatenate", "pb_sed.evaluation.instance_based.get_best_fscore_thresholds", "f.mean", "model.SoundEventModel.add_metrics_to_summary.maybe_add_label_wise"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.get_best_fscore_thresholds"], ["", "def", "add_metrics_to_summary", "(", "self", ",", "summary", ",", "suffix", ")", ":", "\n", "        ", "y", "=", "np", ".", "concatenate", "(", "summary", "[", "'buffers'", "]", ".", "pop", "(", "f'y_{suffix}'", ")", ")", "\n", "if", "y", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "summary", "[", "'scalars'", "]", "[", "f'num_examples_{suffix}'", "]", "=", "len", "(", "y", ")", "\n", "targets", "=", "np", ".", "concatenate", "(", "summary", "[", "'buffers'", "]", ".", "pop", "(", "f'targets_{suffix}'", ")", ")", "\n", "\n", "test_labels", "=", "self", ".", "test_labels", "\n", "if", "test_labels", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "test_labels", "[", "0", "]", ",", "str", ")", ":", "\n", "                ", "assert", "self", ".", "label_mapping", "is", "not", "None", "\n", "test_labels", "=", "[", "self", ".", "label_mapping", ".", "index", "(", "label", ")", "for", "label", "in", "test_labels", "]", "\n", "", "y", "=", "y", "[", "...", ",", "test_labels", "]", "\n", "targets", "=", "targets", "[", "...", ",", "test_labels", "]", "\n", "\n", "", "def", "maybe_add_label_wise", "(", "key", ",", "values", ")", ":", "\n", "            ", "if", "key", "in", "self", ".", "labelwise_metrics", ":", "\n", "                ", "for", "event_class", ",", "value", "in", "enumerate", "(", "values", ")", ":", "\n", "                    ", "if", "test_labels", "is", "not", "None", ":", "\n", "                        ", "event_class", "=", "test_labels", "[", "event_class", "]", "\n", "", "if", "self", ".", "label_mapping", "is", "not", "None", ":", "\n", "                        ", "event_class", "=", "self", ".", "label_mapping", "[", "event_class", "]", "\n", "", "summary", "[", "'scalars'", "]", "[", "f'z/{key}/{event_class}'", "]", "=", "value", "\n", "\n", "", "", "", "_", ",", "f", ",", "p", ",", "r", "=", "instance_based", ".", "get_best_fscore_thresholds", "(", "targets", ",", "y", ")", "\n", "summary", "[", "'scalars'", "]", "[", "f'macro_fscore_{suffix}'", "]", "=", "f", ".", "mean", "(", ")", "\n", "maybe_add_label_wise", "(", "f'fscore_{suffix}'", ",", "f", ")", "\n", "\n", "_", ",", "er", ",", "ir", ",", "dr", "=", "instance_based", ".", "get_best_er_thresholds", "(", "targets", ",", "y", ")", "\n", "summary", "[", "'scalars'", "]", "[", "f'macro_error_rate_{suffix}'", "]", "=", "er", ".", "mean", "(", ")", "\n", "maybe_add_label_wise", "(", "f'error_rate_{suffix}'", ",", "er", ")", "\n", "\n", "lwlrap", ",", "per_class_lwlrap", ",", "weight_per_class", "=", "instance_based", ".", "lwlrap", "(", "targets", ",", "y", ")", "\n", "summary", "[", "'scalars'", "]", "[", "f'lwlrap_{suffix}'", "]", "=", "lwlrap", "\n", "maybe_add_label_wise", "(", "f'lwlrap_{suffix}'", ",", "per_class_lwlrap", ")", "\n", "\n", "if", "(", "targets", ".", "sum", "(", "0", ")", ">", "1", ")", ".", "all", "(", ")", ":", "\n", "            ", "ap", "=", "metrics", ".", "average_precision_score", "(", "targets", ",", "y", ",", "average", "=", "None", ")", "\n", "summary", "[", "'scalars'", "]", "[", "f'map_{suffix}'", "]", "=", "np", ".", "mean", "(", "ap", ")", "\n", "maybe_add_label_wise", "(", "f'ap_{suffix}'", ",", "ap", ")", "\n", "\n", "auc", "=", "metrics", ".", "roc_auc_score", "(", "targets", ",", "y", ",", "average", "=", "None", ")", "\n", "summary", "[", "'scalars'", "]", "[", "f'mauc_{suffix}'", "]", "=", "np", ".", "mean", "(", "auc", ")", "\n", "maybe_add_label_wise", "(", "f'auc_{suffix}'", ",", "auc", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.pseudo_label.pseudo_label": [[5, 46], ["copy.deepcopy", "sorted", "print", "print", "any", "copy.deepcopy.keys", "numpy.mean", "print", "sorted", "len", "pseudo_label.set_onset_offset_times", "numpy.mean", "pseudo_label.set_onset_offset_times", "len", "sorted", "zip", "copy.deepcopy.keys", "sorted", "copy.deepcopy.keys"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.base.pseudo_label.set_onset_offset_times", "home.repos.pwc.inspect_result.fgnt_pb_sed.base.pseudo_label.set_onset_offset_times"], ["def", "pseudo_label", "(", "\n", "dataset", ",", "event_classes", ",", "\n", "pseudo_tags", ",", "pseudo_boundaries", ",", "pseudo_events", ",", "\n", "tags", ",", "boundaries", ",", "events", ",", "\n", ")", ":", "\n", "    ", "if", "not", "any", "(", "[", "pseudo_tags", ",", "pseudo_boundaries", ",", "pseudo_events", "]", ")", ":", "\n", "        ", "return", "dataset", "\n", "", "dataset", "=", "deepcopy", "(", "dataset", ")", "\n", "assert", "not", "(", "pseudo_events", "and", "pseudo_boundaries", ")", "\n", "for", "audio_id", "in", "sorted", "(", "dataset", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "pseudo_tags", ":", "\n", "            ", "dataset", "[", "audio_id", "]", "[", "'events'", "]", "=", "sorted", "(", "[", "\n", "event_class", "for", "value", ",", "event_class", "in", "zip", "(", "\n", "tags", "[", "audio_id", "]", ",", "event_classes", "\n", ")", "if", "value", ">", "0.5", "\n", "]", ")", "\n", "", "dataset", "[", "audio_id", "]", "[", "'label_types'", "]", "=", "len", "(", "dataset", "[", "audio_id", "]", "[", "'events'", "]", ")", "*", "[", "'weak'", "]", "\n", "if", "pseudo_events", ":", "\n", "            ", "set_onset_offset_times", "(", "\n", "dataset", "[", "audio_id", "]", ",", "events", "[", "audio_id", "]", ",", "\"strong\"", ")", "\n", "", "elif", "pseudo_boundaries", ":", "\n", "            ", "set_onset_offset_times", "(", "\n", "dataset", "[", "audio_id", "]", ",", "boundaries", "[", "audio_id", "]", ",", "\"boundaries\"", ")", "\n", "", "", "print", "(", ")", "\n", "print", "(", "\n", "'label rate'", ",", "\n", "np", ".", "mean", "(", "[", "\n", "len", "(", "dataset", "[", "audio_id", "]", "[", "'events'", "]", ")", ">", "0", "\n", "for", "audio_id", "in", "sorted", "(", "dataset", ".", "keys", "(", ")", ")", "\n", "]", ")", "\n", ")", "\n", "for", "label_type", "in", "[", "'weak'", ",", "'boundaries'", ",", "'strong'", "]", ":", "\n", "        ", "print", "(", "\n", "f'pseudo {label_type} labels rate'", ",", "\n", "np", ".", "mean", "(", "[", "\n", "t", "==", "label_type", "\n", "for", "audio_id", "in", "sorted", "(", "dataset", ".", "keys", "(", ")", ")", "\n", "for", "t", "in", "dataset", "[", "audio_id", "]", "[", "'label_types'", "]", "\n", "]", ")", "\n", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.base.pseudo_label.set_onset_offset_times": [[48, 69], ["sorted", "example.keys", "sorted", "sorted", "set", "list", "zip"], "function", ["None"], ["", "def", "set_onset_offset_times", "(", "example", ",", "detections", ",", "label_type", "=", "'strong'", ")", ":", "\n", "    ", "event_labels", "=", "sorted", "(", "{", "\n", "event_label", "for", "_", ",", "_", ",", "event_label", "in", "detections", "}", ")", "\n", "assert", "\"events\"", "in", "example", ",", "example", ".", "keys", "(", ")", "\n", "tags", "=", "sorted", "(", "set", "(", "example", "[", "'events'", "]", ")", ")", "\n", "events", "=", "sorted", "(", "\n", "[", "\n", "event", "for", "event", "in", "detections", "if", "event", "[", "2", "]", "in", "tags", "\n", "]", "+", "[", "\n", "(", "0.", ",", "example", "[", "'audio_length'", "]", ",", "event_class", ")", "\n", "for", "event_class", "in", "tags", "if", "event_class", "not", "in", "event_labels", "\n", "]", "\n", ")", "\n", "(", "\n", "example", "[", "'events_start_times'", "]", ",", "\n", "example", "[", "'events_stop_times'", "]", ",", "\n", "example", "[", "'events'", "]", ",", "\n", ")", "=", "list", "(", "zip", "(", "*", "events", ")", ")", "if", "events", "else", "(", "[", "]", ",", "[", "]", ",", "[", "]", ")", "\n", "example", "[", "'label_types'", "]", "=", "[", "\n", "label_type", "if", "event", "in", "event_labels", "else", "\"weak\"", "\n", "for", "event", "in", "example", "[", "'events'", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.__post_init__": [[44, 47], ["lazy_dataset.database.JsonDatabase"], "methods", ["None"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "json_path", "is", "not", "None", "\n", "self", ".", "db", "=", "JsonDatabase", "(", "json_path", "=", "self", ".", "json_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_train_set": [[48, 50], ["provider.DataProvider.get_dataset"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset"], ["", "def", "get_train_set", "(", "self", ",", "filter_example_ids", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "get_dataset", "(", "self", ".", "train_set", ",", "train", "=", "True", ",", "filter_example_ids", "=", "filter_example_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_validate_set": [[51, 53], ["provider.DataProvider.get_dataset"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset"], ["", "def", "get_validate_set", "(", "self", ",", "filter_example_ids", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "get_dataset", "(", "self", ".", "validate_set", ",", "train", "=", "False", ",", "filter_example_ids", "=", "filter_example_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset": [[54, 58], ["provider.DataProvider.prepare_audio", "provider.DataProvider.segment_transform_and_fetch"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.prepare_audio", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.segment_transform_and_fetch"], ["", "def", "get_dataset", "(", "self", ",", "dataset_names_or_raw_datasets", ",", "train", "=", "False", ",", "filter_example_ids", "=", "None", ")", ":", "\n", "        ", "ds", "=", "self", ".", "prepare_audio", "(", "dataset_names_or_raw_datasets", ",", "train", "=", "train", ",", "filter_example_ids", "=", "filter_example_ids", ")", "\n", "ds", "=", "self", ".", "segment_transform_and_fetch", "(", "ds", ",", "train", "=", "train", ")", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.prepare_audio": [[59, 89], ["provider.DataProvider._load_audio", "provider.DataProvider._tile_and_intersperse", "print", "isinstance", "isinstance", "type", "provider.DataProvider.get_raw", "provider.DataProvider._count_labels", "provider.DataProvider._compute_label_repetitions", "provider.DataProvider._build_repetition_groups", "provider.DataProvider._tile_and_intersperse", "provider.DataProvider.scale_and_mix", "len"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._load_audio", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._tile_and_intersperse", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_raw", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._count_labels", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._compute_label_repetitions", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._build_repetition_groups", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._tile_and_intersperse", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.scale_and_mix"], ["", "def", "prepare_audio", "(", "self", ",", "dataset_names_or_raw_datasets", ",", "train", "=", "False", ",", "filter_example_ids", "=", "None", ")", ":", "\n", "        ", "individual_audio_datasets", "=", "self", ".", "_load_audio", "(", "\n", "dataset_names_or_raw_datasets", ",", "train", "=", "train", ",", "filter_example_ids", "=", "filter_example_ids", ")", "\n", "if", "not", "isinstance", "(", "individual_audio_datasets", ",", "list", ")", ":", "\n", "            ", "assert", "isinstance", "(", "individual_audio_datasets", ",", "lazy_dataset", ".", "Dataset", ")", ",", "type", "(", "individual_audio_datasets", ")", "\n", "individual_audio_datasets", "=", "[", "(", "individual_audio_datasets", ",", "1", ")", "]", "\n", "", "combined_audio_dataset", "=", "self", ".", "_tile_and_intersperse", "(", "\n", "individual_audio_datasets", ",", "shuffle", "=", "train", ")", "\n", "if", "train", "and", "self", ".", "min_class_examples_per_epoch", ">", "0", ":", "\n", "            ", "assert", "self", ".", "label_key", "is", "not", "None", "\n", "raw_datasets", "=", "self", ".", "get_raw", "(", "\n", "dataset_names_or_raw_datasets", ",", "\n", "discard_labelless_examples", "=", "self", ".", "discard_labelless_train_examples", ",", "\n", "filter_example_ids", "=", "filter_example_ids", ",", "\n", ")", "\n", "label_counts", ",", "labels", "=", "self", ".", "_count_labels", "(", "\n", "raw_datasets", ",", "self", ".", "label_key", ")", "\n", "label_reps", "=", "self", ".", "_compute_label_repetitions", "(", "\n", "label_counts", ",", "min_counts", "=", "self", ".", "min_class_examples_per_epoch", ")", "\n", "repetition_groups", "=", "self", ".", "_build_repetition_groups", "(", "\n", "individual_audio_datasets", ",", "labels", ",", "label_reps", ")", "\n", "dataset", "=", "self", ".", "_tile_and_intersperse", "(", "\n", "repetition_groups", ",", "shuffle", "=", "train", ")", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "combined_audio_dataset", "\n", "", "if", "train", ":", "\n", "# dataset = self.scale_and_mix(dataset, combined_audio_dataset)", "\n", "            ", "dataset", "=", "self", ".", "scale_and_mix", "(", "dataset", ",", "dataset", ")", "\n", "", "print", "(", "f'Total data set length:'", ",", "len", "(", "dataset", ")", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._load_audio": [[90, 134], ["isinstance", "provider.DataProvider.get_raw().map", "isinstance", "print", "enumerate", "isinstance", "ds.cache.cache.cache", "len", "ds.cache.cache.append", "provider.DataProvider.get_raw", "isinstance", "isinstance", "provider.DataProvider._load_audio", "isinstance"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_raw", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._load_audio"], ["", "def", "_load_audio", "(", "self", ",", "dataset_names_or_raw_datasets", ",", "train", "=", "False", ",", "filter_example_ids", "=", "None", ",", "idx", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "dataset_names_or_raw_datasets", ",", "(", "dict", ",", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "ds", "=", "[", "]", "\n", "for", "i", ",", "name_or_ds", "in", "enumerate", "(", "dataset_names_or_raw_datasets", ")", ":", "\n", "                ", "num_reps", "=", "(", "\n", "dataset_names_or_raw_datasets", "[", "name_or_ds", "]", "\n", "if", "isinstance", "(", "dataset_names_or_raw_datasets", ",", "dict", ")", "\n", "else", "name_or_ds", "[", "1", "]", "if", "isinstance", "(", "name_or_ds", ",", "(", "list", ",", "tuple", ")", ")", "\n", "else", "1", "\n", ")", "\n", "if", "num_reps", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "ds", ".", "append", "(", "(", "\n", "self", ".", "_load_audio", "(", "\n", "name_or_ds", "[", "0", "]", "if", "isinstance", "(", "name_or_ds", ",", "(", "list", ",", "tuple", ")", ")", "\n", "else", "name_or_ds", ",", "\n", "train", "=", "train", ",", "filter_example_ids", "=", "filter_example_ids", ",", "idx", "=", "i", ",", "\n", ")", ",", "\n", "num_reps", "\n", ")", ")", "\n", "", "return", "ds", "\n", "", "ds", "=", "self", ".", "get_raw", "(", "\n", "dataset_names_or_raw_datasets", ",", "\n", "discard_labelless_examples", "=", "(", "\n", "train", "and", "self", ".", "discard_labelless_train_examples", "\n", ")", ",", "\n", "filter_example_ids", "=", "filter_example_ids", ",", "\n", ")", ".", "map", "(", "self", ".", "audio_reader", ")", "\n", "cache", "=", "(", "\n", "self", ".", "cached_datasets", "is", "not", "None", "\n", "and", "isinstance", "(", "dataset_names_or_raw_datasets", ",", "str", ")", "\n", "and", "dataset_names_or_raw_datasets", "in", "self", ".", "cached_datasets", "\n", ")", "\n", "if", "cache", ":", "\n", "            ", "ds", "=", "ds", ".", "cache", "(", "lazy", "=", "False", ")", "\n", "\n", "", "if", "isinstance", "(", "dataset_names_or_raw_datasets", ",", "str", ")", ":", "\n", "            ", "ds_name", "=", "\" \"", "+", "dataset_names_or_raw_datasets", "\n", "", "else", ":", "\n", "            ", "ds_name", "=", "\"\"", "\n", "", "if", "idx", "is", "not", "None", ":", "\n", "            ", "ds_name", "+=", "f\" [{idx}]\"", "\n", "", "print", "(", "f'Single data set length{ds_name}:'", ",", "len", "(", "ds", ")", ")", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_raw": [[135, 177], ["isinstance", "provider.DataProvider.filter", "list", "isinstance", "provider.DataProvider.filter", "provider.DataProvider.filter", "filter", "provider.DataProvider.db.get_dataset", "isinstance", "type", "provider.DataProvider.get_raw", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_dataset", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.get_raw"], ["", "def", "get_raw", "(", "\n", "self", ",", "dataset_names_or_raw_datasets", ",", "\n", "discard_labelless_examples", "=", "False", ",", "\n", "filter_example_ids", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "isinstance", "(", "dataset_names_or_raw_datasets", ",", "(", "dict", ",", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "list", "(", "filter", "(", "\n", "lambda", "x", ":", "x", "[", "1", "]", ">", "0", ",", "\n", "[", "\n", "(", "\n", "self", ".", "get_raw", "(", "\n", "name_or_ds", "[", "0", "]", "if", "isinstance", "(", "name_or_ds", ",", "(", "list", ",", "tuple", ")", ")", "\n", "else", "name_or_ds", ",", "\n", "discard_labelless_examples", "=", "discard_labelless_examples", ",", "\n", "filter_example_ids", "=", "filter_example_ids", ",", "\n", ")", ",", "\n", "(", "\n", "dataset_names_or_raw_datasets", "[", "name_or_ds", "]", "\n", "if", "isinstance", "(", "dataset_names_or_raw_datasets", ",", "dict", ")", "\n", "else", "name_or_ds", "[", "1", "]", "if", "isinstance", "(", "name_or_ds", ",", "(", "list", ",", "tuple", ")", ")", "\n", "else", "1", "\n", ")", ",", "\n", ")", "\n", "for", "name_or_ds", "in", "dataset_names_or_raw_datasets", "\n", "]", "\n", ")", ")", "\n", "", "elif", "isinstance", "(", "dataset_names_or_raw_datasets", ",", "str", ")", ":", "\n", "            ", "ds", "=", "self", ".", "db", ".", "get_dataset", "(", "dataset_names_or_raw_datasets", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "dataset_names_or_raw_datasets", ",", "lazy_dataset", ".", "Dataset", ")", ",", "type", "(", "dataset_names_or_raw_datasets", ")", "\n", "ds", "=", "dataset_names_or_raw_datasets", "\n", "", "if", "discard_labelless_examples", ":", "\n", "            ", "ds", "=", "ds", ".", "filter", "(", "\n", "lambda", "ex", ":", "self", ".", "label_key", "in", "ex", "and", "ex", "[", "self", ".", "label_key", "]", ",", "\n", "lazy", "=", "False", "\n", ")", "\n", "", "if", "filter_example_ids", "is", "not", "None", ":", "\n", "            ", "ds", "=", "ds", ".", "filter", "(", "\n", "lambda", "ex", ":", "ex", "[", "'example_id'", "]", "not", "in", "filter_example_ids", ",", "lazy", "=", "False", "\n", ")", "\n", "", "return", "ds", ".", "filter", "(", "\n", "lambda", "ex", ":", "'audio_length'", "in", "ex", "and", "ex", "[", "'audio_length'", "]", ">", "self", ".", "min_audio_length", ",", "lazy", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._tile_and_intersperse": [[179, 187], ["lazy_dataset.intersperse", "ds.shuffle", "ds.tile"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_tile_and_intersperse", "(", "datasets", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "if", "shuffle", ":", "\n", "            ", "datasets", "=", "[", "\n", "(", "ds", ".", "shuffle", "(", "reshuffle", "=", "True", ")", ",", "reps", ")", "for", "ds", ",", "reps", "in", "datasets", "\n", "]", "\n", "", "return", "lazy_dataset", ".", "intersperse", "(", "\n", "*", "[", "ds", ".", "tile", "(", "reps", ")", "for", "ds", ",", "reps", "in", "datasets", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.scale_and_mix": [[189, 210], ["pb_sed.data_preparation.mix.MixtureDataset.map", "mixin_dataset.map.map.map", "pb_sed.data_preparation.mix.MixtureDataset", "provider.DataProvider.scale_sampling_fn"], "methods", ["None"], ["", "def", "scale_and_mix", "(", "self", ",", "dataset", ",", "mixin_dataset", "=", "None", ")", ":", "\n", "        ", "if", "mixin_dataset", "is", "None", ":", "\n", "            ", "mixin_dataset", "=", "dataset", "\n", "", "if", "self", ".", "scale_sampling_fn", "is", "not", "None", ":", "\n", "            ", "def", "scale", "(", "example", ")", ":", "\n", "                ", "w", "=", "self", ".", "scale_sampling_fn", "(", ")", "\n", "example", "[", "'audio_data'", "]", "=", "example", "[", "'audio_data'", "]", "*", "w", "\n", "return", "example", "\n", "", "dataset", "=", "dataset", ".", "map", "(", "scale", ")", "\n", "mixin_dataset", "=", "mixin_dataset", ".", "map", "(", "scale", ")", "\n", "\n", "", "if", "self", ".", "mix_interval", "is", "not", "None", ":", "\n", "# mixin_dataset = mixin_dataset.tile(", "\n", "#     math.ceil(len(dataset)/len(combined_audio_dataset)))", "\n", "            ", "assert", "self", ".", "mix_fn", "is", "not", "None", "\n", "dataset", "=", "MixtureDataset", "(", "\n", "dataset", ",", "mixin_dataset", ",", "\n", "mix_interval", "=", "self", ".", "mix_interval", ",", "\n", "mix_fn", "=", "self", ".", "mix_fn", "\n", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._count_labels": [[211, 231], ["isinstance", "collections.defaultdict", "sorted", "labels.append", "provider.DataProvider._count_labels", "labels.append", "set", "padertorch.utils.to_list"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._count_labels"], ["", "def", "_count_labels", "(", "self", ",", "raw_datasets", ",", "label_key", ",", "label_counts", "=", "None", ",", "reps", "=", "1", ")", ":", "\n", "        ", "if", "label_counts", "is", "None", ":", "\n", "            ", "label_counts", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "", "if", "isinstance", "(", "raw_datasets", ",", "list", ")", ":", "\n", "            ", "labels", "=", "[", "]", "\n", "for", "ds", ",", "ds_reps", "in", "raw_datasets", ":", "\n", "                ", "label_counts", ",", "cur_labels", "=", "self", ".", "_count_labels", "(", "\n", "ds", ",", "label_key", ",", "label_counts", "=", "label_counts", ",", "reps", "=", "ds_reps", "*", "reps", "\n", ")", "\n", "labels", ".", "append", "(", "cur_labels", ")", "\n", "", "return", "label_counts", ",", "labels", "\n", "\n", "", "labels", "=", "[", "]", "\n", "for", "example", "in", "raw_datasets", ":", "\n", "            ", "cur_labels", "=", "sorted", "(", "set", "(", "to_list", "(", "example", "[", "label_key", "]", ")", ")", ")", "\n", "labels", ".", "append", "(", "cur_labels", ")", "\n", "for", "label", "in", "cur_labels", ":", "\n", "                ", "label_counts", "[", "label", "]", "+=", "reps", "\n", "# print(label_counts)", "\n", "", "", "return", "label_counts", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._compute_label_repetitions": [[232, 247], ["max", "isinstance", "label_counts.values", "math.ceil", "isinstance", "math.ceil", "label_counts.items"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_compute_label_repetitions", "(", "label_counts", ",", "min_counts", ")", ":", "\n", "        ", "max_count", "=", "max", "(", "label_counts", ".", "values", "(", ")", ")", "\n", "if", "isinstance", "(", "min_counts", ",", "float", ")", ":", "\n", "            ", "assert", "0.", "<", "min_counts", "<", "1.", ",", "min_counts", "\n", "min_counts", "=", "math", ".", "ceil", "(", "max_count", "*", "min_counts", ")", "\n", "", "assert", "isinstance", "(", "min_counts", ",", "int", ")", "and", "min_counts", ">", "1", ",", "min_counts", "\n", "assert", "min_counts", "-", "1", "<=", "0.9", "*", "max_count", ",", "(", "min_counts", ",", "max_count", ")", "\n", "base_rep", "=", "1", "//", "(", "1", "-", "(", "min_counts", "-", "1", ")", "/", "max_count", ")", "\n", "min_counts", "*=", "base_rep", "\n", "label_repetitions", "=", "{", "\n", "label", ":", "math", ".", "ceil", "(", "min_counts", "/", "count", ")", "\n", "for", "label", ",", "count", "in", "label_counts", ".", "items", "(", ")", "\n", "}", "\n", "return", "label_repetitions", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._build_repetition_groups": [[248, 274], ["isinstance", "set", "sorted", "len", "len", "len", "len", "max", "numpy.argwhere().flatten().tolist", "rep_groups.items", "datasets.append", "zip", "provider.DataProvider._build_repetition_groups", "numpy.argwhere().flatten", "numpy.argwhere", "sorted", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider._build_repetition_groups"], ["", "def", "_build_repetition_groups", "(", "self", ",", "dataset", ",", "labels", ",", "label_repetitions", ")", ":", "\n", "        ", "assert", "len", "(", "dataset", ")", "==", "len", "(", "labels", ")", ",", "(", "len", "(", "dataset", ")", ",", "len", "(", "labels", ")", ")", "\n", "if", "isinstance", "(", "dataset", ",", "list", ")", ":", "\n", "            ", "return", "[", "\n", "(", "group_ds", ",", "ds_reps", "*", "group_reps", ")", "\n", "for", "(", "ds", ",", "ds_reps", ")", ",", "cur_labels", "in", "zip", "(", "dataset", ",", "labels", ")", "\n", "for", "group_ds", ",", "group_reps", "in", "self", ".", "_build_repetition_groups", "(", "\n", "ds", ",", "cur_labels", ",", "label_repetitions", "\n", ")", "\n", "]", "\n", "", "idx_reps", "=", "[", "\n", "max", "(", "[", "label_repetitions", "[", "label", "]", "for", "label", "in", "idx_labels", "]", ")", "\n", "for", "idx_labels", "in", "labels", "\n", "]", "\n", "rep_groups", "=", "{", "}", "\n", "for", "n_reps", "in", "set", "(", "idx_reps", ")", ":", "\n", "            ", "rep_groups", "[", "n_reps", "]", "=", "np", ".", "argwhere", "(", "\n", "np", ".", "array", "(", "idx_reps", ")", "==", "n_reps", "\n", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "", "datasets", "=", "[", "]", "\n", "for", "n_reps", ",", "indices", "in", "sorted", "(", "\n", "rep_groups", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", "\n", ")", ":", "\n", "            ", "datasets", ".", "append", "(", "(", "dataset", "[", "sorted", "(", "indices", ")", "]", ",", "n_reps", ")", ")", "\n", "# ds = lazy_dataset.intersperse(*datasets)", "\n", "", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.segment_transform_and_fetch": [[275, 295], ["dataset.map.map.map", "fetcher", "dataset.map.map.batch_map", "dataset.map.map.map"], "methods", ["None"], ["", "def", "segment_transform_and_fetch", "(", "\n", "self", ",", "dataset", ",", "segment", "=", "True", ",", "transform", "=", "True", ",", "fetch", "=", "True", ",", "\n", "train", "=", "False", ",", "\n", ")", ":", "\n", "        ", "segmenter", "=", "self", ".", "train_segmenter", "if", "train", "else", "self", ".", "test_segmenter", "\n", "segment", "=", "segment", "and", "segmenter", "is", "not", "None", "\n", "if", "segment", ":", "\n", "            ", "dataset", "=", "dataset", ".", "map", "(", "segmenter", ")", "\n", "", "if", "transform", ":", "\n", "            ", "transform", "=", "self", ".", "train_transform", "if", "train", "else", "self", ".", "test_transform", "\n", "assert", "transform", "is", "not", "None", "\n", "if", "segment", ":", "\n", "                ", "dataset", "=", "dataset", ".", "batch_map", "(", "transform", ")", "\n", "", "else", ":", "\n", "                ", "dataset", "=", "dataset", ".", "map", "(", "transform", ")", "\n", "", "", "if", "fetch", ":", "\n", "            ", "fetcher", "=", "self", ".", "train_fetcher", "if", "train", "else", "self", ".", "test_fetcher", "\n", "assert", "fetcher", "is", "not", "None", "\n", "dataset", "=", "fetcher", "(", "dataset", ",", "batched_input", "=", "segment", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.provider.DataProvider.finalize_dogmatic_config": [[296, 370], ["numpy.log"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "finalize_dogmatic_config", "(", "cls", ",", "config", ")", ":", "\n", "        ", "config", "[", "'audio_reader'", "]", "=", "{", "\n", "'factory'", ":", "AudioReader", ",", "\n", "'source_sample_rate'", ":", "None", ",", "\n", "'target_sample_rate'", ":", "16000", ",", "\n", "'average_channels'", ":", "True", ",", "\n", "'normalization_domain'", ":", "'instance'", ",", "\n", "'normalization_type'", ":", "'max'", ",", "\n", "'alignment_keys'", ":", "[", "'events'", "]", ",", "\n", "}", "\n", "config", "[", "'train_transform'", "]", "=", "{", "\n", "'factory'", ":", "Transform", ",", "\n", "'stft'", ":", "{", "\n", "'factory'", ":", "STFT", ",", "\n", "'shift'", ":", "320", ",", "\n", "'window_length'", ":", "960", ",", "\n", "'size'", ":", "1024", ",", "\n", "'fading'", ":", "'half'", ",", "\n", "'pad'", ":", "True", ",", "\n", "'alignment_keys'", ":", "[", "'events'", "]", ",", "\n", "}", ",", "\n", "'label_encoder'", ":", "{", "\n", "'factory'", ":", "MultiHotAlignmentEncoder", ",", "\n", "'label_key'", ":", "'events'", ",", "\n", "'storage_dir'", ":", "config", "[", "'storage_dir'", "]", ",", "\n", "}", ",", "\n", "'anchor_sampling_fn'", ":", "{", "\n", "'factory'", ":", "Uniform", ",", "\n", "'low'", ":", "0.4", ",", "\n", "'high'", ":", "0.6", ",", "\n", "}", ",", "\n", "'anchor_shift_sampling_fn'", ":", "{", "\n", "'factory'", ":", "Uniform", ",", "\n", "'low'", ":", "-", "0.1", ",", "\n", "'high'", ":", "0.1", ",", "\n", "}", ",", "\n", "}", "\n", "config", "[", "'test_transform'", "]", "=", "{", "\n", "'factory'", ":", "Transform", ",", "\n", "'stft'", ":", "config", "[", "'train_transform'", "]", "[", "'stft'", "]", ",", "\n", "'label_encoder'", ":", "config", "[", "'train_transform'", "]", "[", "'label_encoder'", "]", ",", "\n", "}", "\n", "config", "[", "'train_fetcher'", "]", "=", "{", "\n", "'factory'", ":", "DataFetcher", ",", "\n", "'prefetch_workers'", ":", "16", ",", "\n", "'batch_size'", ":", "16", ",", "\n", "'max_padding_rate'", ":", ".05", ",", "\n", "'drop_incomplete'", ":", "True", ",", "\n", "'global_shuffle'", ":", "False", ",", "# already shuffled in prepare_audio", "\n", "}", "\n", "config", "[", "'train_fetcher'", "]", "[", "'bucket_expiration'", "]", "=", "(", "\n", "2000", "*", "config", "[", "'train_fetcher'", "]", "[", "'batch_size'", "]", ")", "\n", "config", "[", "'test_fetcher'", "]", "=", "{", "\n", "'factory'", ":", "DataFetcher", ",", "\n", "'prefetch_workers'", ":", "config", "[", "'train_fetcher'", "]", "[", "'prefetch_workers'", "]", ",", "\n", "'batch_size'", ":", "2", "*", "config", "[", "'train_fetcher'", "]", "[", "'batch_size'", "]", ",", "\n", "'max_padding_rate'", ":", "config", "[", "'train_fetcher'", "]", "[", "'max_padding_rate'", "]", ",", "\n", "'bucket_expiration'", ":", "config", "[", "'train_fetcher'", "]", "[", "'bucket_expiration'", "]", ",", "\n", "'drop_incomplete'", ":", "False", ",", "\n", "'global_shuffle'", ":", "False", ",", "\n", "}", "\n", "config", "[", "'scale_sampling_fn'", "]", "=", "{", "\n", "'factory'", ":", "LogTruncatedNormal", ",", "\n", "'loc'", ":", "0.", ",", "\n", "'scale'", ":", "1.", ",", "\n", "'truncation'", ":", "np", ".", "log", "(", "3.", ")", ",", "\n", "}", "\n", "if", "config", "[", "'mix_interval'", "]", "is", "not", "None", ":", "\n", "            ", "config", "[", "'mix_fn'", "]", "=", "{", "\n", "'factory'", ":", "SuperposeEvents", ",", "\n", "'min_overlap'", ":", "1.", ",", "\n", "'fade_length'", ":", "config", "[", "'train_transform'", "]", "[", "'stft'", "]", "[", "'window_length'", "]", ",", "\n", "'label_key'", ":", "'events'", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.fetcher.DataFetcher.__call__": [[18, 53], ["dataset.shuffle.shuffle.shuffle", "dataset.shuffle.shuffle.prefetch", "dataset.shuffle.shuffle.unbatch", "AssertionError", "dataset.shuffle.shuffle.batch_dynamic_bucket().map().prefetch", "dataset.shuffle.shuffle.shuffle", "dataset.shuffle.shuffle.batch_dynamic_bucket().map", "padertorch.contrib.je.data.transforms.Collate", "dataset.shuffle.shuffle.batch_dynamic_bucket"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "dataset", ",", "batched_input", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "global_shuffle", ":", "\n", "            ", "dataset", "=", "dataset", ".", "shuffle", "(", "reshuffle", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "prefetch_workers", ">", "0", ":", "\n", "            ", "dataset", "=", "dataset", ".", "prefetch", "(", "\n", "self", ".", "prefetch_workers", ",", "2", "*", "self", ".", "prefetch_workers", "\n", ")", "\n", "\n", "", "if", "batched_input", ":", "\n", "            ", "dataset", "=", "dataset", ".", "unbatch", "(", ")", "\n", "\n", "", "if", "self", ".", "global_shuffle", "and", "not", "batched_input", "and", "self", ".", "local_shuffle_buffer_size", ">", "0", ":", "\n", "            ", "raise", "AssertionError", "(", "'using local_shuffle_buffer_size > 0 when global_shuffle is True and batched_input is False has no effect and is therefore inefficient'", ")", "\n", "", "elif", "self", ".", "local_shuffle_buffer_size", ">", "0", ":", "\n", "            ", "dataset", "=", "dataset", ".", "shuffle", "(", "\n", "reshuffle", "=", "True", ",", "buffer_size", "=", "self", ".", "local_shuffle_buffer_size", "\n", ")", "\n", "\n", "", "if", "self", ".", "batch_size", "is", "not", "None", ":", "\n", "            ", "dataset", "=", "dataset", ".", "batch_dynamic_bucket", "(", "\n", "bucket_cls", "=", "DynamicExtendedTimeSeriesBucket", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "max_padding_rate", "=", "self", ".", "max_padding_rate", ",", "\n", "len_key", "=", "\"seq_len\"", ",", "\n", "min_label_diversity", "=", "self", ".", "min_label_diversity_in_batch", ",", "\n", "label_key", "=", "\"weak_targets\"", ",", "\n", "min_dataset_examples", "=", "self", ".", "min_dataset_examples_in_batch", ",", "\n", "expiration", "=", "self", ".", "bucket_expiration", ",", "\n", "drop_incomplete", "=", "self", ".", "drop_incomplete", ",", "\n", "sort_key", "=", "\"seq_len\"", ",", "reverse_sort", "=", "True", ",", "\n", ")", ".", "map", "(", "Collate", "(", ")", ")", ".", "prefetch", "(", "\n", "num_workers", "=", "1", ",", "buffer_size", "=", "2", "*", "self", ".", "batch_size", ",", "\n", ")", "\n", "", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.__init__": [[14, 30], ["len", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_dataset", ",", "mixin_dataset", ",", "mix_interval", ",", "mix_fn", ")", ":", "\n", "        ", "\"\"\"\n        Mixes examples from input_dataset and mixin_dataset.\n\n        Args:\n            input_dataset: lazy dataset providing example dict with key audio_length.\n            mixin_dataset:\n            mix_interval:\n            mix_fn:\n        \"\"\"", "\n", "assert", "len", "(", "mixin_dataset", ")", ">=", "len", "(", "input_dataset", ")", ",", "(", "len", "(", "mixin_dataset", ")", ",", "len", "(", "input_dataset", ")", ")", "\n", "self", ".", "input_dataset", "=", "input_dataset", "\n", "self", ".", "mixin_dataset", "=", "mixin_dataset", "\n", "assert", "mix_interval", ">=", "1", "\n", "self", ".", "mix_interval", "=", "mix_interval", "\n", "self", ".", "mix_fn", "=", "mix_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.__len__": [[31, 33], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "input_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.__getitem__": [[34, 45], ["isinstance", "lazy_dataset.Dataset.__getitem__", "int", "mix.MixtureDataset.mix_fn"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "numbers", ".", "Integral", ")", ":", "\n", "            ", "example", "=", "self", ".", "input_dataset", "[", "item", "]", "\n", "if", "(", "item", "%", "self", ".", "mix_interval", ")", "<", "1", ":", "\n", "                ", "mixin_item", "=", "int", "(", "item", "//", "self", ".", "mix_interval", ")", "\n", "mixin_example", "=", "self", ".", "mixin_dataset", "[", "mixin_item", "]", "\n", "return", "self", ".", "mix_fn", "(", "[", "example", ",", "mixin_example", "]", ")", "\n", "", "else", ":", "\n", "                ", "return", "example", "\n", "", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "__getitem__", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.__iter__": [[46, 54], ["iter", "enumerate", "next", "mix.MixtureDataset.mix_fn"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "mixin_iter", "=", "iter", "(", "self", ".", "mixin_dataset", ")", "\n", "for", "i", ",", "example", "in", "enumerate", "(", "self", ".", "input_dataset", ")", ":", "\n", "            ", "if", "(", "i", "%", "self", ".", "mix_interval", ")", "<", "1", ":", "\n", "                ", "mixin_example", "=", "next", "(", "mixin_iter", ")", "\n", "yield", "self", ".", "mix_fn", "(", "[", "example", ",", "mixin_example", "]", ")", "\n", "", "else", ":", "\n", "                ", "yield", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.copy": [[55, 61], ["mix.MixtureDataset.__class__", "mix.MixtureDataset.input_dataset.copy", "mix.MixtureDataset.mixin_dataset.copy"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.copy", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.copy"], ["", "", "", "def", "copy", "(", "self", ",", "freeze", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "\n", "input_dataset", "=", "self", ".", "input_dataset", ".", "copy", "(", "freeze", "=", "freeze", ")", ",", "\n", "mixin_dataset", "=", "self", ".", "mixin_dataset", ".", "copy", "(", "freeze", "=", "freeze", ")", ",", "\n", "mix_interval", "=", "self", ".", "mix_interval", ",", "\n", "mix_fn", "=", "self", ".", "mix_fn", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.indexable": [[63, 66], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "indexable", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_dataset", ".", "indexable", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.SuperposeEvents.__init__": [[76, 84], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "min_overlap", "=", "1.", ",", "max_length_in_samples", "=", "None", ",", "fade_length", "=", "0", ",", "\n", "label_key", "=", "'events'", "\n", ")", ":", "\n", "        ", "self", ".", "min_overlap", "=", "min_overlap", "\n", "self", ".", "max_length_in_samples", "=", "max_length_in_samples", "\n", "self", ".", "fade_length", "=", "fade_length", "\n", "self", ".", "label_key", "=", "label_key", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.SuperposeEvents.__call__": [[85, 157], ["numpy.array", "numpy.array", "numpy.array.min", "numpy.array.min", "list", "numpy.array.max", "numpy.zeros", "zip", "len", "pb_sed.data_preparation.utils.add_label_types", "min", "int", "numpy.array.append", "numpy.array.append", "numpy.copy", "events.extend", "label_types.extend", "comp.keys", "comp.keys", "events_start_samples.extend", "events_stop_samples.extend", "any", "numpy.ceil", "max", "min", "int", "sorted", "numpy.floor", "set", "max", "numpy.cos", "min", "numpy.random.rand", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.utils.add_label_types", "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.mix.MixtureDataset.copy"], ["", "def", "__call__", "(", "self", ",", "components", ")", ":", "\n", "        ", "assert", "len", "(", "components", ")", ">", "0", "\n", "components", "=", "[", "add_label_types", "(", "comp", ")", "for", "comp", "in", "components", "]", "\n", "start_indices", "=", "[", "0", "]", "\n", "stop_indices", "=", "[", "components", "[", "0", "]", "[", "'audio_data'", "]", ".", "shape", "[", "1", "]", "]", "\n", "for", "comp", "in", "components", "[", "1", ":", "]", ":", "\n", "            ", "seq_len", "=", "comp", "[", "'audio_data'", "]", ".", "shape", "[", "1", "]", "\n", "seq_len_min", "=", "min", "(", "seq_len", ",", "components", "[", "0", "]", "[", "'audio_data'", "]", ".", "shape", "[", "1", "]", ")", "\n", "min_overlap", "=", "int", "(", "np", ".", "ceil", "(", "seq_len_min", "*", "self", ".", "min_overlap", ")", ")", "\n", "min_start", "=", "-", "(", "seq_len", "-", "min_overlap", ")", "\n", "max_start", "=", "components", "[", "0", "]", "[", "'audio_data'", "]", ".", "shape", "[", "1", "]", "-", "min_overlap", "\n", "if", "self", ".", "max_length_in_samples", "is", "not", "None", ":", "\n", "                ", "assert", "seq_len", "<=", "self", ".", "max_length_in_samples", ",", "(", "seq_len", ",", "self", ".", "max_length_in_samples", ")", "\n", "min_start", "=", "max", "(", "\n", "min_start", ",", "max", "(", "stop_indices", ")", "-", "self", ".", "max_length_in_samples", "\n", ")", "\n", "max_start", "=", "min", "(", "\n", "max_start", ",", "min", "(", "start_indices", ")", "+", "self", ".", "max_length_in_samples", "-", "seq_len", "\n", ")", "\n", "", "start_indices", ".", "append", "(", "\n", "int", "(", "np", ".", "floor", "(", "min_start", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "max_start", "-", "min_start", "+", "1", ")", ")", ")", "\n", ")", "\n", "stop_indices", ".", "append", "(", "start_indices", "[", "-", "1", "]", "+", "seq_len", ")", "\n", "", "start_indices", "=", "np", ".", "array", "(", "start_indices", ")", "\n", "stop_indices", "=", "np", ".", "array", "(", "stop_indices", ")", "\n", "stop_indices", "-=", "start_indices", ".", "min", "(", ")", "\n", "start_indices", "-=", "start_indices", ".", "min", "(", ")", "\n", "\n", "audio_shape", "=", "list", "(", "components", "[", "0", "]", "[", "'audio_data'", "]", ".", "shape", ")", "\n", "audio_shape", "[", "1", "]", "=", "stop_indices", ".", "max", "(", ")", "\n", "mixed_audio", "=", "np", ".", "zeros", "(", "audio_shape", ",", "dtype", "=", "components", "[", "0", "]", "[", "'audio_data'", "]", ".", "dtype", ")", "\n", "events", "=", "[", "]", "\n", "label_types", "=", "[", "]", "\n", "events_start_samples", "=", "[", "]", "\n", "events_stop_samples", "=", "[", "]", "\n", "for", "comp", ",", "start", ",", "stop", "in", "zip", "(", "components", ",", "start_indices", ",", "stop_indices", ")", ":", "\n", "            ", "mixin_audio", "=", "np", ".", "copy", "(", "comp", "[", "'audio_data'", "]", ")", "\n", "if", "self", ".", "fade_length", ">", "0", ":", "\n", "                ", "assert", "mixin_audio", ".", "shape", "[", "1", "]", ">", "2", "*", "self", ".", "fade_length", ",", "mixin_audio", ".", "shape", "\n", "raised_cos", "=", "1", "/", "2", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "np", ".", "arange", "(", "1", ",", "self", ".", "fade_length", "+", "1", ")", "/", "(", "self", ".", "fade_length", "+", "1", ")", ")", "/", "2", "\n", "if", "start", ">", "0", ":", "\n", "                    ", "mixin_audio", "[", ":", ",", ":", "self", ".", "fade_length", "]", "*=", "raised_cos", "[", ":", ":", "-", "1", "]", "\n", "", "if", "stop", "<", "audio_shape", "[", "1", "]", ":", "\n", "                    ", "assert", "mixin_audio", ".", "shape", "[", "1", "]", ">", "self", ".", "fade_length", ",", "mixin_audio", ".", "shape", "\n", "mixin_audio", "[", ":", ",", "-", "self", ".", "fade_length", ":", "]", "*=", "raised_cos", "\n", "", "", "mixed_audio", "[", ":", ",", "start", ":", "stop", "]", "+=", "mixin_audio", "\n", "events", ".", "extend", "(", "comp", "[", "self", ".", "label_key", "]", ")", "\n", "label_types", ".", "extend", "(", "comp", "[", "'label_types'", "]", ")", "\n", "assert", "f'{self.label_key}_start_samples'", "in", "comp", ",", "comp", ".", "keys", "(", ")", "\n", "assert", "f'{self.label_key}_stop_samples'", "in", "comp", ",", "comp", ".", "keys", "(", ")", "\n", "events_start_samples", ".", "extend", "(", "[", "\n", "event_start", "+", "start", "\n", "for", "event_start", "in", "comp", "[", "f'{self.label_key}_start_samples'", "]", "\n", "]", ")", "\n", "events_stop_samples", ".", "extend", "(", "[", "\n", "event_stop", "+", "start", "\n", "for", "event_stop", "in", "comp", "[", "f'{self.label_key}_stop_samples'", "]", "\n", "]", ")", "\n", "# mixed_audio /= np.sqrt(len(components))", "\n", "\n", "", "mix", "=", "{", "\n", "'example_id'", ":", "'+'", ".", "join", "(", "[", "comp", "[", "'example_id'", "]", "for", "comp", "in", "components", "]", ")", ",", "\n", "'dataset'", ":", "'+'", ".", "join", "(", "sorted", "(", "set", "(", "[", "comp", "[", "'dataset'", "]", "for", "comp", "in", "components", "]", ")", ")", ")", ",", "\n", "'audio_data'", ":", "mixed_audio", ",", "\n", "'seq_len'", ":", "mixed_audio", ".", "shape", "[", "1", "]", ",", "\n", "self", ".", "label_key", ":", "events", ",", "\n", "f'{self.label_key}_start_samples'", ":", "events_start_samples", ",", "\n", "f'{self.label_key}_stop_samples'", ":", "events_stop_samples", ",", "\n", "'label_types'", ":", "label_types", ",", "\n", "'unlabeled'", ":", "any", "(", "[", "comp", "[", "'unlabeled'", "]", "for", "comp", "in", "components", "]", ")", ",", "\n", "}", "\n", "return", "mix", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.transform.Transform.__post_init__": [[19, 23], ["isinstance", "isinstance", "type", "padertorch.contrib.je.data.transforms.STFT"], "methods", ["None"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "stft", ",", "dict", ")", ":", "\n", "            ", "self", ".", "stft", "=", "STFT", "(", "**", "self", ".", "stft", ")", "\n", "", "assert", "isinstance", "(", "self", ".", "stft", ",", "STFT", ")", ",", "type", "(", "self", ".", "stft", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.transform.Transform.__call__": [[24, 118], ["pb_sed.data_preparation.utils.add_label_types", "padertorch.contrib.je.data.transforms.TimeWarpedSTFT.pop", "padertorch.contrib.je.data.transforms.TimeWarpedSTFT.pop", "padertorch.contrib.je.data.transforms.TimeWarpedSTFT.", "enumerate", "transform.Transform.label_encoder.encode_alignment", "transform.Transform.label_encoder.encode_alignment", "callable", "type", "callable", "type", "padertorch.contrib.je.data.transforms.TimeWarpedSTFT", "transform.Transform.label_encoder.encode_alignment", "transform.Transform.label_encoder.encode", "transform.Transform.label_encoder.encode", "transform.Transform.label_encoder.encode", "enumerate", "transform.Transform.label_encoder", "min", "max"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.utils.add_label_types"], ["", "def", "__call__", "(", "self", ",", "example", ")", ":", "\n", "        ", "\"\"\"\n        >>> mix_fn = Transform(min_overlap=1.)\n        >>> example1 = {'example_id': '0', 'dataset': '0', 'audio_data': np.zeros((1, 16000)), 'events': ['a', 'a'], 'events_start_samples': [2000,12000], 'events_stop_samples': [8000,14000], 'label_types': ['strong','strong'],}\n        >>> example2 = {'example_id': '1', 'dataset': '1', 'audio_data': np.zeros((1, 16000)), 'events': ['a', 'b'], 'events_start_samples': [0, 1000], 'events_stop_samples': [16000, 4000], 'label_types': ['weak', 'strong']}\n        >>> ex = mix_fn([example1, example2])\n        >>> stft = STFT(200, 801, alignment_keys=['events'], pad=False, fading='half')\n        >>> label_enc = MultiHotAlignmentEncoder('events')\n        >>> label_enc.initialize_labels(['a','b'])\n        >>> transform = Transform(stft, label_enc)\n        >>> transform(ex)\n        \"\"\"", "\n", "if", "(", "\n", "self", ".", "anchor_shift_sampling_fn", "is", "not", "None", "\n", ")", ":", "\n", "            ", "assert", "callable", "(", "self", ".", "anchor_sampling_fn", ")", ",", "type", "(", "self", ".", "anchor_sampling_fn", ")", "\n", "assert", "callable", "(", "self", ".", "anchor_shift_sampling_fn", ")", ",", "type", "(", "self", ".", "anchor_shift_sampling_fn", ")", "\n", "stft", "=", "TimeWarpedSTFT", "(", "\n", "base_stft", "=", "self", ".", "stft", ",", "\n", "anchor_sampling_fn", "=", "self", ".", "anchor_sampling_fn", ",", "\n", "anchor_shift_sampling_fn", "=", "self", ".", "anchor_shift_sampling_fn", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "stft", "=", "self", ".", "stft", "\n", "\n", "", "example", "=", "add_label_types", "(", "example", ")", "\n", "label_types", "=", "example", ".", "pop", "(", "'label_types'", ")", "\n", "unlabeled", "=", "example", ".", "pop", "(", "'unlabeled'", ")", "\n", "\n", "example", "=", "stft", "(", "example", ")", "\n", "seq_len", "=", "example", "[", "'stft'", "]", ".", "shape", "[", "1", "]", "\n", "\n", "weak_labels", "=", "[", "\n", "(", "0", ",", "1", ",", "self", ".", "label_encoder", ".", "encode", "(", "event_label", ")", ")", "\n", "for", "event_label", "in", "example", "[", "self", ".", "label_encoder", ".", "label_key", "]", "\n", "]", "\n", "weak_targets", "=", "self", ".", "label_encoder", ".", "encode_alignment", "(", "\n", "weak_labels", ",", "seq_len", "=", "1", ")", "[", "0", "]", "\n", "\n", "boundary_labels", "=", "{", "}", "\n", "start_frames_key", "=", "f'{self.label_encoder.label_key}_start_frames'", "\n", "stop_frames_key", "=", "f'{self.label_encoder.label_key}_stop_frames'", "\n", "for", "i", ",", "event_label", "in", "enumerate", "(", "example", "[", "self", ".", "label_encoder", ".", "label_key", "]", ")", ":", "\n", "            ", "if", "label_types", "[", "i", "]", "not", "in", "[", "'boundaries'", ",", "'strong'", "]", ":", "\n", "                ", "continue", "\n", "", "if", "event_label", "not", "in", "boundary_labels", ":", "\n", "                ", "boundary_labels", "[", "event_label", "]", "=", "(", "\n", "example", "[", "start_frames_key", "]", "[", "i", "]", ",", "\n", "example", "[", "stop_frames_key", "]", "[", "i", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "boundary_labels", "[", "event_label", "]", "=", "(", "\n", "min", "(", "boundary_labels", "[", "event_label", "]", "[", "0", "]", ",", "example", "[", "start_frames_key", "]", "[", "i", "]", ")", ",", "\n", "max", "(", "boundary_labels", "[", "event_label", "]", "[", "1", "]", ",", "example", "[", "stop_frames_key", "]", "[", "i", "]", ")", ",", "\n", ")", "\n", "\n", "", "", "boundary_labels", "=", "[", "\n", "(", "\n", "boundary_labels", "[", "event_label", "]", "[", "0", "]", ",", "\n", "boundary_labels", "[", "event_label", "]", "[", "1", "]", ",", "\n", "self", ".", "label_encoder", ".", "encode", "(", "event_label", ")", ",", "\n", ")", "for", "event_label", "in", "boundary_labels", "\n", "]", "\n", "boundary_targets", "=", "self", ".", "label_encoder", ".", "encode_alignment", "(", "\n", "boundary_labels", ",", "seq_len", "=", "seq_len", ")", "\n", "\n", "strong_labels", "=", "[", "\n", "(", "\n", "example", "[", "start_frames_key", "]", "[", "i", "]", ",", "\n", "example", "[", "stop_frames_key", "]", "[", "i", "]", ",", "\n", "self", ".", "label_encoder", ".", "encode", "(", "event_label", ")", ",", "\n", ")", "for", "i", ",", "event_label", "in", "enumerate", "(", "example", "[", "self", ".", "label_encoder", ".", "label_key", "]", ")", "\n", "if", "label_types", "[", "i", "]", "==", "'strong'", "\n", "]", "\n", "strong_targets", "=", "self", ".", "label_encoder", ".", "encode_alignment", "(", "\n", "strong_labels", ",", "seq_len", "=", "seq_len", ")", "\n", "\n", "if", "unlabeled", ":", "\n", "            ", "weak_targets", "+=", "(", "1", "-", "weak_targets", ")", "*", "0.5", "\n", "boundary_targets", "+=", "(", "1", "-", "boundary_targets", ")", "*", "0.5", "\n", "strong_targets", "+=", "(", "1", "-", "strong_targets", ")", "*", "0.5", "\n", "", "else", ":", "\n", "            ", "overall_targets", "=", "self", ".", "label_encoder", "(", "example", ")", "[", "'events'", "]", "\n", "boundary_targets", "+=", "(", "1", "-", "boundary_targets", ")", "*", "0.5", "*", "overall_targets", "\n", "strong_targets", "+=", "(", "1", "-", "strong_targets", ")", "*", "0.5", "*", "overall_targets", "\n", "\n", "", "return", "{", "\n", "'dataset'", ":", "example", "[", "'dataset'", "]", ",", "\n", "'example_id'", ":", "example", "[", "'example_id'", "]", ",", "\n", "'stft'", ":", "example", "[", "'stft'", "]", ",", "\n", "'seq_len'", ":", "example", "[", "'stft'", "]", ".", "shape", "[", "1", "]", ",", "\n", "'weak_targets'", ":", "weak_targets", ",", "\n", "'boundary_targets'", ":", "boundary_targets", ".", "T", ",", "\n", "'strong_targets'", ":", "strong_targets", ".", "T", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.data_preparation.utils.add_label_types": [[3, 32], ["example.keys", "len", "len"], "function", ["None"], ["def", "add_label_types", "(", "example", ")", ":", "\n", "    ", "if", "'events_start_samples'", "in", "example", "or", "'events_stop_samples'", "in", "example", ":", "\n", "# strong labels", "\n", "        ", "assert", "(", "\n", "'events'", "in", "example", "\n", "and", "'events_start_samples'", "in", "example", "\n", "and", "'events_stop_samples'", "in", "example", "\n", ")", ",", "example", ".", "keys", "(", ")", "\n", "if", "'label_types'", "not", "in", "example", ":", "\n", "            ", "example", "[", "'label_types'", "]", "=", "len", "(", "example", "[", "'events'", "]", ")", "*", "[", "'strong'", "]", "\n", "", "if", "'unlabeled'", "not", "in", "example", ":", "\n", "            ", "example", "[", "'unlabeled'", "]", "=", "False", "\n", "", "", "elif", "'events'", "in", "example", ":", "\n", "# weak labels", "\n", "        ", "example", "[", "'events_start_samples'", "]", "=", "[", "0", "for", "_", "in", "example", "[", "'events'", "]", "]", "\n", "example", "[", "'events_stop_samples'", "]", "=", "[", "\n", "example", "[", "'audio_data'", "]", ".", "shape", "[", "-", "1", "]", "for", "_", "in", "example", "[", "'events'", "]", "]", "\n", "if", "'label_types'", "not", "in", "example", ":", "\n", "            ", "example", "[", "'label_types'", "]", "=", "len", "(", "example", "[", "'events'", "]", ")", "*", "[", "'weak'", "]", "\n", "", "if", "'unlabeled'", "not", "in", "example", ":", "\n", "            ", "example", "[", "'unlabeled'", "]", "=", "False", "\n", "", "", "else", ":", "\n", "# no labels", "\n", "        ", "example", "[", "'events'", "]", "=", "[", "]", "\n", "example", "[", "'events_start_samples'", "]", "=", "[", "]", "\n", "example", "[", "'events_stop_samples'", "]", "=", "[", "]", "\n", "example", "[", "'label_types'", "]", "=", "[", "]", "\n", "example", "[", "'unlabeled'", "]", "=", "True", "\n", "", "return", "example", "\n", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.database.helper.prepare_sound_dataset": [[7, 31], ["set", "concurrent.futures.ThreadPoolExecutor", "tqdm.tqdm", "ex.map", "examples.items", "len", "set.add", "postprocess_fn"], "function", ["None"], ["def", "prepare_sound_dataset", "(", "examples", ",", "postprocess_fn", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    filters unavailable audio files and adds audio length to examples\n    Args:\n        examples:\n        max_examples:\n        postprocess_fn:\n\n    Returns:\n\n    \"\"\"", "\n", "dataset", "=", "{", "}", "\n", "missing", "=", "set", "(", ")", "\n", "with", "concurrent", ".", "futures", ".", "ThreadPoolExecutor", "(", ")", "as", "ex", ":", "\n", "        ", "for", "available", ",", "example_id", ",", "example", "in", "tqdm", "(", "\n", "ex", ".", "map", "(", "prepare_sound_example", ",", "examples", ".", "items", "(", ")", ")", ",", "\n", "total", "=", "len", "(", "examples", ")", "\n", ")", ":", "\n", "            ", "if", "not", "available", ":", "\n", "                ", "missing", ".", "add", "(", "example_id", ")", "\n", "", "if", "postprocess_fn", "is", "not", "None", ":", "\n", "                ", "example", "=", "postprocess_fn", "(", "example", ")", "\n", "", "dataset", "[", "example_id", "]", "=", "example", "\n", "", "", "return", "dataset", ",", "missing", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.database.helper.prepare_sound_example": [[33, 50], ["example.pop", "soundfile.SoundFile", "str", "len"], "function", ["None"], ["", "def", "prepare_sound_example", "(", "item", ":", "(", "str", ",", "dict", ")", ")", "->", "(", "bool", ",", "str", ",", "dict", ")", ":", "\n", "    ", "\"\"\"\n    Adds audio length to example dict.\n    \"\"\"", "\n", "example_id", ",", "example", "=", "item", "\n", "audio_path", "=", "example", "[", "'audio_path'", "]", "\n", "try", ":", "\n", "        ", "with", "soundfile", ".", "SoundFile", "(", "str", "(", "audio_path", ")", ")", "as", "f", ":", "\n", "            ", "length", "=", "len", "(", "f", ")", "/", "f", ".", "samplerate", "\n", "", "", "except", ":", "\n", "        ", "length", "=", "0.", "\n", "", "if", "length", ">", "0.", ":", "\n", "        ", "example", "[", "'audio_length'", "]", "=", "length", "\n", "return", "True", ",", "example_id", ",", "example", "\n", "", "else", ":", "\n", "        ", "example", ".", "pop", "(", "'audio_path'", ")", "\n", "return", "False", ",", "example_id", ",", "example", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.provider.DESEDProvider.finalize_dogmatic_config": [[10, 39], ["str", "super().finalize_dogmatic_config", "min", "sum", "min_dataset_examples_in_batch.keys", "dataset_lengths.values", "config[].get"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.provider.AudioSetProvider.finalize_dogmatic_config"], ["from", "paderbox", ".", "utils", ".", "random_utils", "import", "LogTruncatedNormal", ",", "Uniform", "\n", "from", "padertorch", "import", "Configurable", "\n", "from", "padertorch", ".", "utils", "import", "to_list", "\n", "from", "padertorch", ".", "contrib", ".", "je", ".", "data", ".", "transforms", "import", "(", "\n", "AudioReader", ",", "STFT", ",", "MultiHotAlignmentEncoder", "\n", ")", "\n", "from", "pb_sed", ".", "data_preparation", ".", "mix", "import", "MixtureDataset", ",", "SuperposeEvents", "\n", "from", "pb_sed", ".", "data_preparation", ".", "fetcher", "import", "DataFetcher", "\n", "from", "pb_sed", ".", "data_preparation", ".", "transform", "import", "Transform", "\n", "\n", "\n", "@", "dataclasses", ".", "dataclass", "\n", "class", "DataProvider", "(", "Configurable", ")", ":", "\n", "    ", "json_path", ":", "str", "\n", "audio_reader", ":", "Callable", "\n", "train_set", ":", "dict", "\n", "validate_set", ":", "str", "=", "None", "\n", "cached_datasets", ":", "list", "=", "None", "\n", "min_audio_length", ":", "float", "=", "1.", "\n", "train_segmenter", ":", "float", "=", "None", "\n", "test_segmenter", ":", "float", "=", "None", "\n", "train_transform", ":", "Callable", "=", "None", "\n", "test_transform", ":", "Callable", "=", "None", "\n", "train_fetcher", ":", "Callable", "=", "None", "\n", "test_fetcher", ":", "Callable", "=", "None", "\n", "label_key", ":", "str", "=", "'events'", "\n", "discard_labelless_train_examples", ":", "bool", "=", "True", "\n", "storage_dir", ":", "str", "=", "None", "\n", "# augmentation", "\n", "min_class_examples_per_epoch", ":", "int", "=", "0", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.download.main": [[33, 158], ["click.command", "click.option", "click.option", "click.option", "pathlib.Path().absolute", "Path().absolute.mkdir", "desed.download.download_real", "shutil.move", "paderbox.io.download.download_file_list", "desed.download.download_audioset_files_from_csv", "str", "str", "str", "str", "str", "desed.generate_files_from_jams", "desed.generate_tsv_from_jams", "audio_target_path.exists", "audio_source_path.glob", "audio_source_path.glob", "audio_source_path.rename", "ground_truth_file.rename", "pathlib.Path", "pathlib.Path().absolute", "str", "soundbank20_path.exists", "desed.download.download_desed_soundbank", "jams20_path.exists", "paderbox.io.download.download_file_list", "str", "str", "synthetic21_path.exists", "paderbox.io.download.download_file_list", "file.unlink", "file.unlink", "str", "desed.download.split_desed_soundbank_train_val", "audio_source_path.glob", "pathlib.Path", "str"], "function", ["None"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--database_path'", ",", "\n", "'-db'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'./DESED'", ",", "\n", "help", "=", "f'Base directory for the databases. Defaults to \"./DESED\"'", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--n_jobs'", ",", "\n", "'-j'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "8", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--chunk_size'", ",", "\n", "'-c'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", ")", "\n", "def", "main", "(", "database_path", ",", "n_jobs", ",", "chunk_size", ")", ":", "\n", "    ", "\"\"\"Download dataset packages over the internet to a local path\n\n    Args:\n        database_path:\n        n_jobs:\n        chunk_size:\n\n    Returns:\n\n    \"\"\"", "\n", "database_path", "=", "Path", "(", "database_path", ")", ".", "absolute", "(", ")", "\n", "database_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# ##########", "\n", "# Real data", "\n", "# ##########", "\n", "desed", ".", "download", ".", "download_real", "(", "\n", "str", "(", "database_path", ")", ",", "\n", "n_jobs", "=", "n_jobs", ",", "chunk_size", "=", "chunk_size", ",", "\n", "eval", "=", "not", "(", "database_path", "/", "'audio'", "/", "'eval'", "/", "'public'", ")", ".", "exists", "(", ")", ",", "\n", ")", "\n", "(", "database_path", "/", "'metadata'", "/", "'validation'", "/", "'test_dcase2018.tsv'", ")", ".", "unlink", "(", ")", "\n", "(", "database_path", "/", "'metadata'", "/", "'validation'", "/", "'eval_dcase2018.tsv'", ")", ".", "unlink", "(", ")", "\n", "(", "database_path", "/", "'metadata'", "/", "'validation'", "/", "'._test_dcase2018.tsv'", ")", ".", "unlink", "(", ")", "\n", "(", "database_path", "/", "'metadata'", "/", "'validation'", "/", "'._eval_dcase2018.tsv'", ")", ".", "unlink", "(", ")", "\n", "shutil", ".", "move", "(", "str", "(", "Path", "(", "'missing_files'", ")", ".", "absolute", "(", ")", ")", ",", "str", "(", "database_path", "/", "'missing_files'", ")", ")", "\n", "download_file_list", "(", "\n", "[", "\"https://zenodo.org/record/6444477/files/audioset_strong.tsv\"", "]", ",", "\n", "database_path", "/", "'metadata'", "/", "'train'", "\n", ")", "\n", "(", "database_path", "/", "'metadata'", "/", "'train'", "/", "'audioset_strong.tsv'", ")", ".", "absolute", "(", ")", ".", "rename", "(", "\n", "database_path", "/", "'metadata'", "/", "'train'", "/", "'strong.tsv'", ")", "\n", "desed", ".", "download", ".", "download_audioset_files_from_csv", "(", "\n", "str", "(", "database_path", "/", "'metadata'", "/", "'train'", "/", "'strong.tsv'", ")", ",", "\n", "str", "(", "database_path", "/", "\"audio\"", "/", "\"train\"", "/", "\"strong\"", ")", ",", "\n", "missing_files_tsv", "=", "str", "(", "database_path", "/", "'missing_files'", "/", "\"missing_files_strong.tsv\"", ")", ",", "\n", "n_jobs", "=", "n_jobs", ",", "\n", ")", "\n", "\n", "# ##########", "\n", "# Synthetic soundscapes DCASE 2020", "\n", "# ##########", "\n", "synthetic_path", "=", "database_path", "/", "'synthetic'", "\n", "soundbank20_path", "=", "synthetic_path", "/", "'soundbank20'", "\n", "jams20_path", "=", "synthetic_path", "/", "'jams20'", "\n", "# Generate audio files. We can loop because it is the same structure of folders for the three sets.", "\n", "for", "purpose", "in", "[", "\"train\"", ",", "\"validation\"", ",", "\"eval\"", "]", ":", "\n", "# Download the soundbank if needed", "\n", "        ", "if", "not", "soundbank20_path", ".", "exists", "(", ")", ":", "\n", "            ", "desed", ".", "download", ".", "download_desed_soundbank", "(", "\n", "str", "(", "soundbank20_path", ")", ",", "sins_bg", "=", "True", ",", "tut_bg", "=", "True", "\n", ")", "\n", "", "elif", "not", "(", "soundbank20_path", "/", "\"audio\"", "/", "\"validation\"", ")", ".", "exists", "(", ")", ":", "\n", "# If you don't have the validation split, rearrange the soundbank in train-valid (split in 90%/10%)", "\n", "            ", "split_desed_soundbank_train_val", "(", "str", "(", "soundbank20_path", ")", ")", "\n", "# Download jams if needed", "\n", "", "if", "not", "jams20_path", ".", "exists", "(", ")", ":", "\n", "            ", "download_file_list", "(", "\n", "[", "\n", "\"https://zenodo.org/record/6026841/files/DESED_synth_dcase20_train_val_jams.tar.gz\"", ",", "\n", "\"https://zenodo.org/record/6026841/files/DESED_synth_dcase20_eval_jams.tar.gz\"", ",", "\n", "]", ",", "\n", "jams20_path", "\n", ")", "\n", "\n", "", "audio_source_path", "=", "jams20_path", "/", "\"audio\"", "/", "purpose", "/", "(", "\"synthetic20_\"", "+", "purpose", ")", "/", "\"soundscapes\"", "\n", "list_jams", "=", "[", "str", "(", "f", ")", "for", "f", "in", "audio_source_path", ".", "glob", "(", "\"*.jams\"", ")", "]", "\n", "fg_path", "=", "soundbank20_path", "/", "\"audio\"", "/", "purpose", "/", "\"soundbank\"", "/", "\"foreground\"", "\n", "bg_path", "=", "soundbank20_path", "/", "\"audio\"", "/", "purpose", "/", "\"soundbank\"", "/", "\"background\"", "\n", "out_tsv", "=", "database_path", "/", "\"metadata\"", "/", "purpose", "/", "\"synthetic20.tsv\"", "\n", "target_path", "=", "database_path", "/", "'audio'", "/", "purpose", "/", "'synthetic20'", "\n", "\n", "desed", ".", "generate_files_from_jams", "(", "\n", "list_jams", ",", "\n", "fg_path", "=", "fg_path", ",", "\n", "bg_path", "=", "bg_path", ",", "\n", "out_folder", "=", "target_path", ",", "\n", "out_folder_jams", "=", "None", ",", "\n", "save_isolated_events", "=", "False", ",", "\n", "overwrite_exist_audio", "=", "False", ",", "\n", ")", "\n", "desed", ".", "generate_tsv_from_jams", "(", "list_jams", ",", "str", "(", "out_tsv", ")", ")", "\n", "\n", "# ##########", "\n", "# Synthetic soundscapes DCASE 2021", "\n", "# ##########", "\n", "", "synthetic21_path", "=", "synthetic_path", "/", "'dcase_synth'", "\n", "for", "purpose", "in", "[", "\"train\"", ",", "\"validation\"", "]", ":", "\n", "        ", "audio_target_path", "=", "database_path", "/", "'audio'", "/", "purpose", "/", "'synthetic21'", "\n", "if", "audio_target_path", ".", "exists", "(", ")", ":", "\n", "            ", "continue", "\n", "", "if", "not", "synthetic21_path", ".", "exists", "(", ")", ":", "\n", "            ", "download_file_list", "(", "\n", "[", "\"https://zenodo.org/record/6026841/files/dcase_synth.zip\"", "]", ",", "\n", "synthetic_path", "\n", ")", "\n", "", "audio_source_path", "=", "synthetic21_path", "/", "\"audio\"", "/", "purpose", "/", "(", "\"synthetic21_\"", "+", "purpose", ")", "/", "\"soundscapes\"", "\n", "for", "file", "in", "audio_source_path", ".", "glob", "(", "\"*.jams\"", ")", ":", "\n", "            ", "file", ".", "unlink", "(", ")", "\n", "", "for", "file", "in", "audio_source_path", ".", "glob", "(", "\"*.txt\"", ")", ":", "\n", "            ", "file", ".", "unlink", "(", ")", "\n", "", "audio_source_path", ".", "rename", "(", "audio_target_path", ")", "\n", "ground_truth_file", "=", "synthetic21_path", "/", "'metadata'", "/", "purpose", "/", "(", "\"synthetic21_\"", "+", "purpose", ")", "/", "\"soundscapes.tsv\"", "\n", "ground_truth_file", ".", "rename", "(", "database_path", "/", "\"metadata\"", "/", "purpose", "/", "\"synthetic21.tsv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.construct_json": [[44, 101], ["print", "dict", "audio_base_dir.iterdir", "len", "natsort.natsorted", "pb_sed.database.helper.prepare_sound_dataset", "print", "print", "database[].values", "ds.values", "example.get", "ground_truth_file.exists", "create_json.read_ground_truth_file", "read_ground_truth_file.keys", "create_json.add_strong_labels", "len", "pathlib.Path", "str", "create_json.add_weak_labels", "[].values", "example.get", "audio_dir.glob", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.database.helper.prepare_sound_dataset", "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.read_ground_truth_file", "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.add_strong_labels", "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.add_weak_labels"], ["def", "construct_json", "(", "database_path", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        database_path:\n\n    Returns:\n\n    \"\"\"", "\n", "database", "=", "{", "\n", "'datasets'", ":", "dict", "(", ")", "\n", "}", "\n", "for", "purpose", "in", "[", "'train'", ",", "'validation'", ",", "'eval'", "]", ":", "\n", "        ", "audio_base_dir", "=", "database_path", "/", "'audio'", "/", "purpose", "\n", "for", "subdir", "in", "audio_base_dir", ".", "iterdir", "(", ")", ":", "\n", "            ", "name", "=", "subdir", ".", "name", "\n", "if", "name", "==", "purpose", ":", "\n", "                ", "dataset_name", "=", "purpose", "\n", "", "else", ":", "\n", "                ", "dataset_name", "=", "f'{purpose}_{name}'", "\n", "", "ground_truth_file", "=", "database_path", "/", "'metadata'", "/", "purpose", "/", "f\"{name}.tsv\"", "\n", "audio_dir", "=", "audio_base_dir", "/", "name", "\n", "if", "ground_truth_file", ".", "exists", "(", ")", "and", "name", "!=", "'unlabel_in_domain'", ":", "\n", "                ", "ground_truth", "=", "read_ground_truth_file", "(", "ground_truth_file", ")", "\n", "clip_ids", "=", "ground_truth", ".", "keys", "(", ")", "\n", "", "else", ":", "\n", "                ", "ground_truth", "=", "None", "\n", "clip_ids", "=", "[", "audio_file", ".", "name", "[", ":", "-", "len", "(", "\".wav\"", ")", "]", "for", "audio_file", "in", "audio_dir", ".", "glob", "(", "\"*.wav\"", ")", "]", "\n", "", "examples", "=", "{", "}", "\n", "for", "clip_id", "in", "natsorted", "(", "clip_ids", ")", ":", "\n", "                ", "audio_path", "=", "Path", "(", "audio_dir", ")", "/", "f'{clip_id}.wav'", "\n", "examples", "[", "clip_id", "]", "=", "{", "\n", "'audio_path'", ":", "str", "(", "audio_path", ")", ",", "\n", "}", "\n", "", "if", "'synthetic'", "in", "name", "or", "dataset_name", "in", "[", "'validation'", ",", "'eval_public'", ",", "'train_strong'", "]", ":", "\n", "                ", "assert", "ground_truth", "is", "not", "None", "\n", "add_strong_labels", "(", "examples", ",", "ground_truth", ")", "\n", "", "elif", "ground_truth", ":", "\n", "                ", "assert", "dataset_name", "==", "'train_weak'", ",", "name", "\n", "add_weak_labels", "(", "examples", ",", "ground_truth", ")", "\n", "", "database", "[", "'datasets'", "]", "[", "dataset_name", "]", ",", "missing", "=", "prepare_sound_dataset", "(", "examples", ")", "\n", "print", "(", "f'{len(missing)} from {len(clip_ids)} files missing in {dataset_name}'", ")", "\n", "events", "=", "{", "\n", "event", "\n", "for", "example", "in", "database", "[", "\"datasets\"", "]", "[", "dataset_name", "]", ".", "values", "(", ")", "\n", "for", "event", "in", "example", ".", "get", "(", "'events'", ",", "[", "]", ")", "\n", "}", "\n", "print", "(", "f'Number of event labels in {dataset_name}:'", ",", "len", "(", "events", ")", ")", "\n", "\n", "", "", "events", "=", "{", "\n", "event", "\n", "for", "ds", "in", "database", "[", "'datasets'", "]", ".", "values", "(", ")", "\n", "for", "example", "in", "ds", ".", "values", "(", ")", "\n", "for", "event", "in", "example", ".", "get", "(", "'events'", ",", "[", "]", ")", "\n", "}", "\n", "print", "(", "'Number of event labels:'", ",", "len", "(", "events", ")", ")", "\n", "return", "database", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.read_ground_truth_file": [[103, 109], ["pandas.read_csv", "sed_scores_eval.io.read_ground_truth_events", "sed_scores_eval.io.read_ground_truth_tags"], "function", ["None"], ["", "def", "read_ground_truth_file", "(", "filepath", ")", ":", "\n", "    ", "file", "=", "pd", ".", "read_csv", "(", "filepath", ",", "sep", "=", "'\\t'", ")", "\n", "if", "'onset'", "in", "file", ".", "columns", ":", "\n", "# events", "\n", "        ", "return", "io", ".", "read_ground_truth_events", "(", "filepath", ")", "\n", "", "return", "io", ".", "read_ground_truth_tags", "(", "filepath", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.add_strong_labels": [[111, 127], ["len", "isinstance", "list", "zip", "print"], "function", ["None"], ["", "def", "add_strong_labels", "(", "examples", ",", "events", ")", ":", "\n", "    ", "for", "clip_id", "in", "examples", ":", "\n", "        ", "event_list", "=", "events", "[", "clip_id", "]", "\n", "if", "len", "(", "event_list", ")", ">", "0", ":", "\n", "            ", "assert", "isinstance", "(", "event_list", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ",", "event_list", "\n", "event_list", "=", "[", "event", "for", "event", "in", "event_list", "if", "event", "[", "2", "]", "in", "target_events", "]", "\n", "for", "event", "in", "event_list", ":", "\n", "                ", "if", "event", "[", "2", "]", "not", "in", "target_events", ":", "\n", "                    ", "print", "(", "events", "[", "2", "]", ")", "\n", "", "", "event_onsets", ",", "event_offsets", ",", "event_list", "=", "list", "(", "zip", "(", "*", "event_list", ")", ")", "\n", "", "else", ":", "\n", "            ", "event_onsets", ",", "event_offsets", ",", "event_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "examples", "[", "clip_id", "]", "[", "f'events_start_times'", "]", "=", "event_onsets", "\n", "examples", "[", "clip_id", "]", "[", "f'events_stop_times'", "]", "=", "event_offsets", "\n", "examples", "[", "clip_id", "]", "[", "'events'", "]", "=", "event_list", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.add_weak_labels": [[129, 139], ["isinstance", "list", "len", "zip"], "function", ["None"], ["", "def", "add_weak_labels", "(", "examples", ",", "events", ")", ":", "\n", "    ", "for", "clip_id", "in", "examples", ":", "\n", "        ", "event_list", "=", "events", "[", "clip_id", "]", "\n", "if", "len", "(", "event_list", ")", ">", "0", "and", "isinstance", "(", "event_list", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "event_list", "=", "[", "event", "for", "event", "in", "event_list", "if", "event", "[", "2", "]", "in", "target_events", "]", "\n", "event_onsets", ",", "event_offsets", ",", "event_list", "=", "list", "(", "zip", "(", "*", "event_list", ")", ")", "\n", "", "examples", "[", "clip_id", "]", "[", "'events'", "]", "=", "[", "\n", "event", "for", "event", "in", "event_list", "if", "event", "in", "target_events", "\n", "]", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.create_jsons": [[141, 171], ["database_path.is_dir", "create_json.construct_json", "paderbox.io.json_module.dump_json", "print", "create_json.add_strong_labels", "create_json.add_strong_labels", "paderbox.io.json_module.dump_json", "print", "create_json.read_ground_truth_file", "create_json.read_ground_truth_file", "str", "database_path.absolute"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.create_json.construct_json", "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.add_strong_labels", "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.add_strong_labels", "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.read_ground_truth_file", "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.read_ground_truth_file"], ["", "def", "create_jsons", "(", "database_path", ":", "Path", ",", "json_path", ":", "Path", ",", "indent", "=", "4", ")", ":", "\n", "    ", "assert", "database_path", ".", "is_dir", "(", ")", ",", "(", "\n", "f'Path \"{str(database_path.absolute())}\" is not a directory.'", "\n", ")", "\n", "database", "=", "construct_json", "(", "database_path", ")", "\n", "dump_json", "(", "\n", "database", ",", "\n", "json_path", "/", "'desed.json'", ",", "\n", "create_path", "=", "True", ",", "\n", "indent", "=", "indent", ",", "\n", "ensure_ascii", "=", "False", ",", "\n", ")", "\n", "print", "(", "f'Dumped json {json_path / \"desed.json\"}'", ")", "\n", "pseudo_labels_dir", "=", "pb_sed_root", "/", "'exp'", "/", "'strong_label_crnn_inference'", "/", "'2022-05-04-09-05-53'", "\n", "add_strong_labels", "(", "\n", "database", "[", "'datasets'", "]", "[", "'train_weak'", "]", ",", "\n", "read_ground_truth_file", "(", "pseudo_labels_dir", "/", "'train_weak_pseudo_labeled.tsv'", ")", "\n", ")", "\n", "add_strong_labels", "(", "\n", "database", "[", "'datasets'", "]", "[", "'train_unlabel_in_domain'", "]", ",", "\n", "read_ground_truth_file", "(", "pseudo_labels_dir", "/", "'train_unlabel_in_domain_pseudo_labeled.tsv'", ")", "\n", ")", "\n", "dump_json", "(", "\n", "database", ",", "\n", "json_path", "/", "'desed_pseudo_labeled.json'", ",", "\n", "create_path", "=", "True", ",", "\n", "indent", "=", "indent", ",", "\n", "ensure_ascii", "=", "False", ",", "\n", ")", "\n", "print", "(", "f'Dumped json {json_path / \"desed_pseudo_labeled.json\"}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.main": [[173, 188], ["click.command", "click.option", "click.option", "create_json.create_jsons", "pathlib.Path().absolute", "pathlib.Path().absolute", "click.Path", "str", "click.Path", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.desed.create_json.create_jsons"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--database-path'", ",", "'-db'", ",", "\n", "help", "=", "'Path where the database is located.'", ",", "\n", "type", "=", "click", ".", "Path", "(", ")", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--json-path'", ",", "'-j'", ",", "\n", "default", "=", "str", "(", "database_jsons_dir", ")", ",", "\n", "help", "=", "f'Directory path where to save the generated JSON files. If a file '", "\n", "f'already exists, it gets overwritten. Defaults to \"{database_jsons_dir}\".'", ",", "\n", "type", "=", "click", ".", "Path", "(", ")", ",", "\n", ")", "\n", "def", "main", "(", "database_path", ",", "json_path", ")", ":", "\n", "    ", "create_jsons", "(", "Path", "(", "database_path", ")", ".", "absolute", "(", ")", ",", "Path", "(", "json_path", ")", ".", "absolute", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.desed.database.DESED.__init__": [[7, 9], ["lazy_dataset.database.JsonDatabase.__init__"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.desed.database.DESED.__init__"], ["    ", "def", "__init__", "(", "self", ",", "json_path", "=", "database_jsons_dir", "/", "'desed.json'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "json_path", "=", "json_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.provider.AudioSetProvider.finalize_dogmatic_config": [[10, 18], ["str", "super().finalize_dogmatic_config", "min"], "methods", ["home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.provider.AudioSetProvider.finalize_dogmatic_config"], ["from", "paderbox", ".", "utils", ".", "random_utils", "import", "LogTruncatedNormal", ",", "Uniform", "\n", "from", "padertorch", "import", "Configurable", "\n", "from", "padertorch", ".", "utils", "import", "to_list", "\n", "from", "padertorch", ".", "contrib", ".", "je", ".", "data", ".", "transforms", "import", "(", "\n", "AudioReader", ",", "STFT", ",", "MultiHotAlignmentEncoder", "\n", ")", "\n", "from", "pb_sed", ".", "data_preparation", ".", "mix", "import", "MixtureDataset", ",", "SuperposeEvents", "\n", "from", "pb_sed", ".", "data_preparation", ".", "fetcher", "import", "DataFetcher", "\n", "from", "pb_sed", ".", "data_preparation", ".", "transform", "import", "Transform", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.download.suppress_stderr": [[19, 28], ["open"], "function", ["None"], ["\n", "\n", "import", "click", "\n", "import", "desed", "\n", "from", "desed", ".", "download", "import", "split_desed_soundbank_train_val", "\n", "from", "pathlib", "import", "Path", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.download._format_audio": [[30, 40], ["subprocess.check_output", "pathlib.Path().unlink", "pathlib.Path"], "function", ["None"], ["from", "paderbox", ".", "io", ".", "download", "import", "download_file_list", "\n", "\n", "\n", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--database_path'", ",", "\n", "'-db'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'./DESED'", ",", "\n", "help", "=", "f'Base directory for the databases. Defaults to \"./DESED\"'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.download._download_clip": [[42, 58], ["timeout_decorator.timeout", "output_file.exists", "info_file.exists", "ydl.extract_info", "info_file.open", "json.dump", "download._format_audio", "str", "str"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.download._format_audio"], ["'--n_jobs'", ",", "\n", "'-j'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "8", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--chunk_size'", ",", "\n", "'-c'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", ")", "\n", "def", "main", "(", "database_path", ",", "n_jobs", ",", "chunk_size", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.download._worker": [[60, 84], ["str", "download.suppress_stderr", "yt_dlp.YoutubeDL", "input_queue.empty", "input_queue.get", "download._download_clip", "output_queue.put", "output_queue.put", "print", "str", "str", "str", "type"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.download.suppress_stderr", "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.download._download_clip"], ["\n", "database_path", "=", "Path", "(", "database_path", ")", ".", "absolute", "(", ")", "\n", "database_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# ##########", "\n", "# Real data", "\n", "# ##########", "\n", "desed", ".", "download", ".", "download_real", "(", "\n", "str", "(", "database_path", ")", ",", "\n", "n_jobs", "=", "n_jobs", ",", "chunk_size", "=", "chunk_size", ",", "\n", "eval", "=", "not", "(", "database_path", "/", "'audio'", "/", "'eval'", "/", "'public'", ")", ".", "exists", "(", ")", ",", "\n", ")", "\n", "(", "database_path", "/", "'metadata'", "/", "'validation'", "/", "'test_dcase2018.tsv'", ")", ".", "unlink", "(", ")", "\n", "(", "database_path", "/", "'metadata'", "/", "'validation'", "/", "'eval_dcase2018.tsv'", ")", ".", "unlink", "(", ")", "\n", "(", "database_path", "/", "'metadata'", "/", "'validation'", "/", "'._test_dcase2018.tsv'", ")", ".", "unlink", "(", ")", "\n", "(", "database_path", "/", "'metadata'", "/", "'validation'", "/", "'._eval_dcase2018.tsv'", ")", ".", "unlink", "(", ")", "\n", "shutil", ".", "move", "(", "str", "(", "Path", "(", "'missing_files'", ")", ".", "absolute", "(", ")", ")", ",", "str", "(", "database_path", "/", "'missing_files'", ")", ")", "\n", "download_file_list", "(", "\n", "[", "\"https://zenodo.org/record/6444477/files/audioset_strong.tsv\"", "]", ",", "\n", "database_path", "/", "'metadata'", "/", "'train'", "\n", ")", "\n", "(", "database_path", "/", "'metadata'", "/", "'train'", "/", "'audioset_strong.tsv'", ")", ".", "absolute", "(", ")", ".", "rename", "(", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.download.download_clips": [[86, 135], ["os.makedirs", "os.makedirs", "multiprocessing.Queue", "multiprocessing.Queue", "range", "tqdm.tqdm", "str", "str", "multiprocessing.Queue.put", "workers.append", "workers[].start", "time.sleep", "tqdm.tqdm.close", "range", "shutil.copyfile", "multiprocessing.Process", "len", "multiprocessing.Queue.empty", "time.sleep", "multiprocessing.Queue.empty", "multiprocessing.Queue.get", "tqdm.tqdm.update", "len", "pathlib.Path().expanduser", "multiprocessing.Queue.empty", "multiprocessing.Queue.get", "tqdm.tqdm.update", "pathlib.Path"], "function", ["None"], ["desed", ".", "download", ".", "download_audioset_files_from_csv", "(", "\n", "str", "(", "database_path", "/", "'metadata'", "/", "'train'", "/", "'strong.tsv'", ")", ",", "\n", "str", "(", "database_path", "/", "\"audio\"", "/", "\"train\"", "/", "\"strong\"", ")", ",", "\n", "missing_files_tsv", "=", "str", "(", "database_path", "/", "'missing_files'", "/", "\"missing_files_strong.tsv\"", ")", ",", "\n", "n_jobs", "=", "n_jobs", ",", "\n", ")", "\n", "\n", "# ##########", "\n", "# Synthetic soundscapes DCASE 2020", "\n", "# ##########", "\n", "synthetic_path", "=", "database_path", "/", "'synthetic'", "\n", "soundbank20_path", "=", "synthetic_path", "/", "'soundbank20'", "\n", "jams20_path", "=", "synthetic_path", "/", "'jams20'", "\n", "# Generate audio files. We can loop because it is the same structure of folders for the three sets.", "\n", "for", "purpose", "in", "[", "\"train\"", ",", "\"validation\"", ",", "\"eval\"", "]", ":", "\n", "# Download the soundbank if needed", "\n", "        ", "if", "not", "soundbank20_path", ".", "exists", "(", ")", ":", "\n", "            ", "desed", ".", "download", ".", "download_desed_soundbank", "(", "\n", "str", "(", "soundbank20_path", ")", ",", "sins_bg", "=", "True", ",", "tut_bg", "=", "True", "\n", ")", "\n", "", "elif", "not", "(", "soundbank20_path", "/", "\"audio\"", "/", "\"validation\"", ")", ".", "exists", "(", ")", ":", "\n", "# If you don't have the validation split, rearrange the soundbank in train-valid (split in 90%/10%)", "\n", "            ", "split_desed_soundbank_train_val", "(", "str", "(", "soundbank20_path", ")", ")", "\n", "# Download jams if needed", "\n", "", "if", "not", "jams20_path", ".", "exists", "(", ")", ":", "\n", "            ", "download_file_list", "(", "\n", "[", "\n", "\"https://zenodo.org/record/6026841/files/DESED_synth_dcase20_train_val_jams.tar.gz\"", ",", "\n", "\"https://zenodo.org/record/6026841/files/DESED_synth_dcase20_eval_jams.tar.gz\"", ",", "\n", "]", ",", "\n", "jams20_path", "\n", ")", "\n", "\n", "", "audio_source_path", "=", "jams20_path", "/", "\"audio\"", "/", "purpose", "/", "(", "\"synthetic20_\"", "+", "purpose", ")", "/", "\"soundscapes\"", "\n", "list_jams", "=", "[", "str", "(", "f", ")", "for", "f", "in", "audio_source_path", ".", "glob", "(", "\"*.jams\"", ")", "]", "\n", "fg_path", "=", "soundbank20_path", "/", "\"audio\"", "/", "purpose", "/", "\"soundbank\"", "/", "\"foreground\"", "\n", "bg_path", "=", "soundbank20_path", "/", "\"audio\"", "/", "purpose", "/", "\"soundbank\"", "/", "\"background\"", "\n", "out_tsv", "=", "database_path", "/", "\"metadata\"", "/", "purpose", "/", "\"synthetic20.tsv\"", "\n", "target_path", "=", "database_path", "/", "'audio'", "/", "purpose", "/", "'synthetic20'", "\n", "\n", "desed", ".", "generate_files_from_jams", "(", "\n", "list_jams", ",", "\n", "fg_path", "=", "fg_path", ",", "\n", "bg_path", "=", "bg_path", ",", "\n", "out_folder", "=", "target_path", ",", "\n", "out_folder_jams", "=", "None", ",", "\n", "save_isolated_events", "=", "False", ",", "\n", "overwrite_exist_audio", "=", "False", ",", "\n", ")", "\n", "desed", ".", "generate_tsv_from_jams", "(", "list_jams", ",", "str", "(", "out_tsv", ")", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.download.download_clips_from_csv": [[137, 149], ["download.download_clips", "csv_file.open", "csv.reader", "len", "row[].startswith"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.download.download_clips"], ["# ##########", "\n", "# Synthetic soundscapes DCASE 2021", "\n", "# ##########", "\n", "", "synthetic21_path", "=", "synthetic_path", "/", "'dcase_synth'", "\n", "for", "purpose", "in", "[", "\"train\"", ",", "\"validation\"", "]", ":", "\n", "        ", "audio_target_path", "=", "database_path", "/", "'audio'", "/", "purpose", "/", "'synthetic21'", "\n", "if", "audio_target_path", ".", "exists", "(", ")", ":", "\n", "            ", "continue", "\n", "", "if", "not", "synthetic21_path", ".", "exists", "(", ")", ":", "\n", "            ", "download_file_list", "(", "\n", "[", "\"https://zenodo.org/record/6026841/files/dcase_synth.zip\"", "]", ",", "\n", "synthetic_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.download.download": [[152, 220], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "datasets.split.split", "os.makedirs", "pathlib.Path().expanduser().absolute", "remote_files.append", "remote_files.append", "remote_files.append", "remote_files.append", "zip", "zip", "urllib.request.urlretrieve", "print", "download.download_clips_from_csv", "pathlib.Path().expanduser", "str", "file.split", "len", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.download.download_clips_from_csv"], ["            ", "file", ".", "unlink", "(", ")", "\n", "", "for", "file", "in", "audio_source_path", ".", "glob", "(", "\"*.txt\"", ")", ":", "\n", "            ", "file", ".", "unlink", "(", ")", "\n", "", "audio_source_path", ".", "rename", "(", "audio_target_path", ")", "\n", "ground_truth_file", "=", "synthetic21_path", "/", "'metadata'", "/", "purpose", "/", "(", "\"synthetic21_\"", "+", "purpose", ")", "/", "\"soundscapes.tsv\"", "\n", "ground_truth_file", ".", "rename", "(", "database_path", "/", "\"metadata\"", "/", "purpose", "/", "\"synthetic21.tsv\"", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.create_json.construct_json": [[12, 120], ["set", "set", "create_json.read_strong_label_files", "create_json.read_strong_label_files", "sorted", "print", "print", "database_path.glob", "segment_file.name.replace", "create_json.read_weak_label_file", "read_weak_label_file.items", "pb_sed.database.helper.prepare_sound_dataset", "print", "print", "print", "print", "len", "len", "row[].strip", "set.update", "pathlib.Path().open", "csv.reader", "csv.DictReader", "copy.deepcopy", "list", "len", "set.update", "strong_examples[].update", "len", "list", "[].update", "pathlib.Path().open", "sorted", "zip", "zip", "pathlib.Path", "fid[].write", "len", "len", "list", "list", "list", "[].get", "len", "len", "list", "list", "list", "pathlib.Path", "str", "audio_dir.absolute"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.create_json.read_strong_label_files", "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.create_json.read_strong_label_files", "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.create_json.read_weak_label_file", "home.repos.pwc.inspect_result.fgnt_pb_sed.database.helper.prepare_sound_dataset"], ["\n", "\n", "import", "pandas", "as", "pd", "\n", "from", "natsort", "import", "natsorted", "\n", "from", "pathlib", "import", "Path", "\n", "import", "click", "\n", "from", "paderbox", ".", "io", ".", "json_module", "import", "dump_json", "\n", "from", "pb_sed", ".", "paths", "import", "database_jsons_dir", ",", "pb_sed_root", "\n", "from", "pb_sed", ".", "database", ".", "helper", "import", "prepare_sound_dataset", "\n", "from", "sed_scores_eval", "import", "io", "\n", "\n", "\n", "target_events", "=", "[", "\n", "'Alarm_bell_ringing'", ",", "\n", "'Blender'", ",", "\n", "'Cat'", ",", "\n", "'Dishes'", ",", "\n", "'Dog'", ",", "\n", "'Electric_shaver_toothbrush'", ",", "\n", "'Frying'", ",", "\n", "'Running_water'", ",", "\n", "'Speech'", ",", "\n", "'Vacuum_cleaner'", ",", "\n", "]", "\n", "\n", "\n", "def", "construct_json", "(", "database_path", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        database_path:\n\n    Returns:\n\n    \"\"\"", "\n", "database", "=", "{", "\n", "'datasets'", ":", "dict", "(", ")", "\n", "}", "\n", "for", "purpose", "in", "[", "'train'", ",", "'validation'", ",", "'eval'", "]", ":", "\n", "        ", "audio_base_dir", "=", "database_path", "/", "'audio'", "/", "purpose", "\n", "for", "subdir", "in", "audio_base_dir", ".", "iterdir", "(", ")", ":", "\n", "            ", "name", "=", "subdir", ".", "name", "\n", "if", "name", "==", "purpose", ":", "\n", "                ", "dataset_name", "=", "purpose", "\n", "", "else", ":", "\n", "                ", "dataset_name", "=", "f'{purpose}_{name}'", "\n", "", "ground_truth_file", "=", "database_path", "/", "'metadata'", "/", "purpose", "/", "f\"{name}.tsv\"", "\n", "audio_dir", "=", "audio_base_dir", "/", "name", "\n", "if", "ground_truth_file", ".", "exists", "(", ")", "and", "name", "!=", "'unlabel_in_domain'", ":", "\n", "                ", "ground_truth", "=", "read_ground_truth_file", "(", "ground_truth_file", ")", "\n", "clip_ids", "=", "ground_truth", ".", "keys", "(", ")", "\n", "", "else", ":", "\n", "                ", "ground_truth", "=", "None", "\n", "clip_ids", "=", "[", "audio_file", ".", "name", "[", ":", "-", "len", "(", "\".wav\"", ")", "]", "for", "audio_file", "in", "audio_dir", ".", "glob", "(", "\"*.wav\"", ")", "]", "\n", "", "examples", "=", "{", "}", "\n", "for", "clip_id", "in", "natsorted", "(", "clip_ids", ")", ":", "\n", "                ", "audio_path", "=", "Path", "(", "audio_dir", ")", "/", "f'{clip_id}.wav'", "\n", "examples", "[", "clip_id", "]", "=", "{", "\n", "'audio_path'", ":", "str", "(", "audio_path", ")", ",", "\n", "}", "\n", "", "if", "'synthetic'", "in", "name", "or", "dataset_name", "in", "[", "'validation'", ",", "'eval_public'", ",", "'train_strong'", "]", ":", "\n", "                ", "assert", "ground_truth", "is", "not", "None", "\n", "add_strong_labels", "(", "examples", ",", "ground_truth", ")", "\n", "", "elif", "ground_truth", ":", "\n", "                ", "assert", "dataset_name", "==", "'train_weak'", ",", "name", "\n", "add_weak_labels", "(", "examples", ",", "ground_truth", ")", "\n", "", "database", "[", "'datasets'", "]", "[", "dataset_name", "]", ",", "missing", "=", "prepare_sound_dataset", "(", "examples", ")", "\n", "print", "(", "f'{len(missing)} from {len(clip_ids)} files missing in {dataset_name}'", ")", "\n", "events", "=", "{", "\n", "event", "\n", "for", "example", "in", "database", "[", "\"datasets\"", "]", "[", "dataset_name", "]", ".", "values", "(", ")", "\n", "for", "event", "in", "example", ".", "get", "(", "'events'", ",", "[", "]", ")", "\n", "}", "\n", "print", "(", "f'Number of event labels in {dataset_name}:'", ",", "len", "(", "events", ")", ")", "\n", "\n", "", "", "events", "=", "{", "\n", "event", "\n", "for", "ds", "in", "database", "[", "'datasets'", "]", ".", "values", "(", ")", "\n", "for", "example", "in", "ds", ".", "values", "(", ")", "\n", "for", "event", "in", "example", ".", "get", "(", "'events'", ",", "[", "]", ")", "\n", "}", "\n", "print", "(", "'Number of event labels:'", ",", "len", "(", "events", ")", ")", "\n", "return", "database", "\n", "\n", "\n", "", "def", "read_ground_truth_file", "(", "filepath", ")", ":", "\n", "    ", "file", "=", "pd", ".", "read_csv", "(", "filepath", ",", "sep", "=", "'\\t'", ")", "\n", "if", "'onset'", "in", "file", ".", "columns", ":", "\n", "# events", "\n", "        ", "return", "io", ".", "read_ground_truth_events", "(", "filepath", ")", "\n", "", "return", "io", ".", "read_ground_truth_tags", "(", "filepath", ")", "[", "0", "]", "\n", "\n", "\n", "", "def", "add_strong_labels", "(", "examples", ",", "events", ")", ":", "\n", "    ", "for", "clip_id", "in", "examples", ":", "\n", "        ", "event_list", "=", "events", "[", "clip_id", "]", "\n", "if", "len", "(", "event_list", ")", ">", "0", ":", "\n", "            ", "assert", "isinstance", "(", "event_list", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ",", "event_list", "\n", "event_list", "=", "[", "event", "for", "event", "in", "event_list", "if", "event", "[", "2", "]", "in", "target_events", "]", "\n", "for", "event", "in", "event_list", ":", "\n", "                ", "if", "event", "[", "2", "]", "not", "in", "target_events", ":", "\n", "                    ", "print", "(", "events", "[", "2", "]", ")", "\n", "", "", "event_onsets", ",", "event_offsets", ",", "event_list", "=", "list", "(", "zip", "(", "*", "event_list", ")", ")", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.create_json.read_weak_label_file": [[122, 132], ["csv_file.open", "csv.reader", "re.findall", "row[].startswith"], "function", ["None"], ["            ", "event_onsets", ",", "event_offsets", ",", "event_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "", "examples", "[", "clip_id", "]", "[", "f'events_start_times'", "]", "=", "event_onsets", "\n", "examples", "[", "clip_id", "]", "[", "f'events_stop_times'", "]", "=", "event_offsets", "\n", "examples", "[", "clip_id", "]", "[", "'events'", "]", "=", "event_list", "\n", "", "return", "examples", "\n", "\n", "\n", "", "def", "add_weak_labels", "(", "examples", ",", "events", ")", ":", "\n", "    ", "for", "clip_id", "in", "examples", ":", "\n", "        ", "event_list", "=", "events", "[", "clip_id", "]", "\n", "if", "len", "(", "event_list", ")", ">", "0", "and", "isinstance", "(", "event_list", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.create_json.read_strong_label_files": [[134, 149], ["tsv_file.open", "enumerate", "sorted", "csv.reader", "strong_labels[].append", "clip_id.rsplit", "float", "float"], "function", ["None"], ["event_onsets", ",", "event_offsets", ",", "event_list", "=", "list", "(", "zip", "(", "*", "event_list", ")", ")", "\n", "", "examples", "[", "clip_id", "]", "[", "'events'", "]", "=", "[", "\n", "event", "for", "event", "in", "event_list", "if", "event", "in", "target_events", "\n", "]", "\n", "", "return", "examples", "\n", "\n", "\n", "", "def", "create_jsons", "(", "database_path", ":", "Path", ",", "json_path", ":", "Path", ",", "indent", "=", "4", ")", ":", "\n", "    ", "assert", "database_path", ".", "is_dir", "(", ")", ",", "(", "\n", "f'Path \"{str(database_path.absolute())}\" is not a directory.'", "\n", ")", "\n", "database", "=", "construct_json", "(", "database_path", ")", "\n", "dump_json", "(", "\n", "database", ",", "\n", "json_path", "/", "'desed.json'", ",", "\n", "create_path", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.create_json.create_json": [[151, 159], ["create_json.construct_json", "paderbox.io.json_module.dump_json"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.create_json.construct_json"], ["ensure_ascii", "=", "False", ",", "\n", ")", "\n", "print", "(", "f'Dumped json {json_path / \"desed.json\"}'", ")", "\n", "pseudo_labels_dir", "=", "pb_sed_root", "/", "'exp'", "/", "'strong_label_crnn_inference'", "/", "'2022-05-04-09-05-53'", "\n", "add_strong_labels", "(", "\n", "database", "[", "'datasets'", "]", "[", "'train_weak'", "]", ",", "\n", "read_ground_truth_file", "(", "pseudo_labels_dir", "/", "'train_weak_pseudo_labeled.tsv'", ")", "\n", ")", "\n", "add_strong_labels", "(", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.create_json.main": [[162, 179], ["click.command", "click.option", "click.option", "create_json.create_json", "pathlib.Path().expanduser().absolute", "pathlib.Path", "click.Path", "str", "click.Path", "pathlib.Path().expanduser", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.audioset.create_json.create_json"], [")", "\n", "dump_json", "(", "\n", "database", ",", "\n", "json_path", "/", "'desed_pseudo_labeled.json'", ",", "\n", "create_path", "=", "True", ",", "\n", "indent", "=", "indent", ",", "\n", "ensure_ascii", "=", "False", ",", "\n", ")", "\n", "print", "(", "f'Dumped json {json_path / \"desed_pseudo_labeled.json\"}'", ")", "\n", "\n", "\n", "", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\n", "'--database-path'", ",", "'-db'", ",", "\n", "help", "=", "'Path where the database is located.'", ",", "\n", "type", "=", "click", ".", "Path", "(", ")", ",", "\n", ")", "\n", "@", "click", ".", "option", "(", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.tp_fp_tn_fn": [[4, 31], ["numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "tp_fp_tn_fn", "(", "target_mat", ",", "decision_mat", ",", "reduce_axis", "=", "None", ")", ":", "\n", "    ", "\"\"\"Counts true positives, false positives, true negatives and false negatives.\n\n    Args:\n        target_mat: multi-hot matrix indicating ground truth\n            (num_instances, num_classes)\n        decision_mat: multi-hot matrix indicating detected (event) classes\n            (N, num_instances, num_classes)\n        reduce_axis:\n\n    Returns:\n        true positives:\n        false positives:\n        true negatives:\n        false negatives:\n\n    \"\"\"", "\n", "tp", "=", "target_mat", "*", "decision_mat", "\n", "fp", "=", "(", "1.", "-", "target_mat", ")", "*", "decision_mat", "\n", "tn", "=", "(", "1.", "-", "target_mat", ")", "*", "(", "1.", "-", "decision_mat", ")", "\n", "fn", "=", "target_mat", "*", "(", "1.", "-", "decision_mat", ")", "\n", "if", "reduce_axis", "is", "not", "None", ":", "\n", "        ", "tp", "=", "np", ".", "sum", "(", "tp", ",", "axis", "=", "reduce_axis", ")", "\n", "fp", "=", "np", ".", "sum", "(", "fp", ",", "axis", "=", "reduce_axis", ")", "\n", "tn", "=", "np", ".", "sum", "(", "tn", ",", "axis", "=", "reduce_axis", ")", "\n", "fn", "=", "np", ".", "sum", "(", "fn", ",", "axis", "=", "reduce_axis", ")", "\n", "", "return", "tp", ",", "fp", ",", "tn", ",", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.fscore": [[33, 58], ["instance_based.tp_fp_tn_fn", "numpy.maximum", "numpy.maximum", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.tp_fp_tn_fn"], ["", "def", "fscore", "(", "target_mat", ",", "decision_mat", ",", "beta", "=", "1.", ",", "event_wise", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes instance-based f-score given binary decisions, i.e. after a decision threshold has been applied.\n\n    Args:\n        target_mat: multi-hot matrix indicating ground truth\n            (num_instances, num_classes)\n        decision_mat: multi-hot matrix indicating detected (event) classes\n            (N, num_instances, num_classes)\n        event_wise:\n        beta:\n\n    Returns:\n        fscore:\n        precision:\n        recall:\n\n    \"\"\"", "\n", "reduce_axis", "=", "-", "2", "if", "event_wise", "else", "(", "-", "2", ",", "-", "1", ")", "\n", "tp", ",", "fp", ",", "tn", ",", "fn", "=", "tp_fp_tn_fn", "(", "target_mat", ",", "decision_mat", ",", "reduce_axis", ")", "\n", "precision", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "1", ")", "\n", "recall", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fn", ",", "1", ")", "\n", "f_beta", "=", "(", "1", "+", "beta", "**", "2", ")", "*", "precision", "*", "recall", "/", "np", ".", "maximum", "(", "\n", "beta", "**", "2", "*", "precision", "+", "recall", ",", "1e-15", "\n", ")", "\n", "return", "f_beta", ",", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.substitutions_insertions_deletions": [[60, 101], ["instance_based.tp_fp_tn_fn", "numpy.sum", "numpy.sum", "numpy.minimum", "numpy.zeros_like", "numpy.sum", "numpy.sum", "numpy.sum", "isinstance"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.tp_fp_tn_fn"], ["", "def", "substitutions_insertions_deletions", "(", "\n", "target_mat", ",", "decision_mat", ",", "reduce_axis", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Counts substitutions, insertions and deletions for computation of an error rate\n\n    Args:\n        target_mat: multi-hot matrix indicating ground truth\n            (num_instances, num_classes)\n        decision_mat: multi-hot matrix indicating detected (event) classes\n            (num_instances, num_classes)\n        reduce_axis:\n\n    Returns:\n        substitutions:\n        insertions:\n        deletions:\n\n    \"\"\"", "\n", "_", ",", "insertions", ",", "_", ",", "deletions", "=", "tp_fp_tn_fn", "(", "\n", "target_mat", ",", "decision_mat", ",", "reduce_axis", "=", "None", "\n", ")", "\n", "if", "reduce_axis", "is", "not", "None", "and", "(", "\n", "reduce_axis", "in", "[", "-", "1", ",", "decision_mat", ".", "ndim", "-", "1", "]", "\n", "or", "(", "\n", "isinstance", "(", "reduce_axis", ",", "(", "list", ",", "tuple", ")", ")", "\n", "and", "(", "-", "1", "in", "reduce_axis", "or", "(", "decision_mat", ".", "ndim", "-", "1", ")", "in", "reduce_axis", ")", ")", "\n", ")", ":", "\n", "# substitute", "\n", "            ", "insertions", "=", "np", ".", "sum", "(", "insertions", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "deletions", "=", "np", ".", "sum", "(", "deletions", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "substitutions", "=", "np", ".", "minimum", "(", "insertions", ",", "deletions", ")", "\n", "insertions", "-=", "substitutions", "\n", "deletions", "-=", "substitutions", "\n", "", "else", ":", "\n", "        ", "substitutions", "=", "np", ".", "zeros_like", "(", "insertions", ")", "\n", "", "if", "reduce_axis", "is", "not", "None", ":", "\n", "        ", "substitutions", "=", "np", ".", "sum", "(", "substitutions", ",", "axis", "=", "reduce_axis", ")", "\n", "insertions", "=", "np", ".", "sum", "(", "insertions", ",", "axis", "=", "reduce_axis", ")", "\n", "deletions", "=", "np", ".", "sum", "(", "deletions", ",", "axis", "=", "reduce_axis", ")", "\n", "\n", "", "return", "substitutions", ",", "insertions", ",", "deletions", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.error_rate": [[103, 127], ["instance_based.substitutions_insertions_deletions", "numpy.maximum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.substitutions_insertions_deletions"], ["", "def", "error_rate", "(", "target_mat", ",", "decision_mat", ",", "event_wise", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes instance-based error rate given binary decisions, i.e. after a decision threshold has been applied.\n\n    Args:\n        target_mat: multi-hot matrix indicating ground truth\n            (num_instances, num_classes)\n        decision_mat: multi-hot matrix indicating detected (event) classes\n            (num_instances, num_classes)\n        event_wise:\n\n    Returns:\n        error_rate:\n        substitution_rate:\n        insertion_rate:\n        deletion_rate:\n\n    \"\"\"", "\n", "reduce_axis", "=", "-", "2", "if", "event_wise", "else", "(", "-", "2", ",", "-", "1", ")", "\n", "substitutions", ",", "insertions", ",", "deletions", "=", "substitutions_insertions_deletions", "(", "\n", "target_mat", ",", "decision_mat", ",", "reduce_axis", "=", "reduce_axis", "\n", ")", "\n", "n_ref", "=", "np", ".", "maximum", "(", "np", ".", "sum", "(", "target_mat", ",", "axis", "=", "reduce_axis", ")", ",", "1", ")", "\n", "er", "=", "(", "insertions", "+", "deletions", "+", "substitutions", ")", "/", "n_ref", "\n", "return", "er", ",", "substitutions", "/", "n_ref", ",", "insertions", "/", "n_ref", ",", "deletions", "/", "n_ref", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.positive_class_precisions": [[129, 159], ["numpy.cumsum", "numpy.cumsum", "numpy.cumsum", "target_mat.any", "numpy.argsort", "numpy.ones_like", "class_indices[].astype", "numpy.ones_like", "numpy.array", "numpy.array", "numpy.arange"], "function", ["None"], ["", "def", "positive_class_precisions", "(", "target_mat", ",", "score_mat", ")", ":", "\n", "    ", "\"\"\"Calculate precisions for each true class.\n    Core calculation of label precisions for one test sample.\n\n    Args:\n      target_mat: np.array of (num_samples, num_classes) bools indicating which classes are true.\n      score_mat: np.array of (num_samples, num_classes) giving the individual classifier scores.\n\n    Returns:\n      class_indices: np.array of indices of the true classes.\n      precision_at_hits: np.array of precisions corresponding to each of those\n        classes.\n    \"\"\"", "\n", "num_samples", ",", "num_classes", "=", "score_mat", ".", "shape", "\n", "class_indices", "=", "np", ".", "cumsum", "(", "np", ".", "ones_like", "(", "score_mat", ")", ",", "axis", "=", "-", "1", ")", "-", "1", "\n", "target_mat", "=", "target_mat", ">", "0", "\n", "# Only calculate precisions if there are some true classes.", "\n", "if", "not", "target_mat", ".", "any", "(", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", "\n", "# Retrieval list of classes for this sample.", "\n", "", "retrieved_classes", "=", "np", ".", "argsort", "(", "score_mat", ",", "axis", "=", "-", "1", ")", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "sort_idx", "=", "(", "np", ".", "arange", "(", "num_samples", ")", "[", ":", ",", "None", "]", ",", "retrieved_classes", ")", "\n", "class_indices", "=", "class_indices", "[", "sort_idx", "]", "\n", "target_mat", "=", "target_mat", "[", "sort_idx", "]", "\n", "# Num hits for every truncated retrieval list.", "\n", "retrieved_cumulative_hits", "=", "np", ".", "cumsum", "(", "target_mat", ",", "axis", "=", "-", "1", ")", "\n", "ranks", "=", "np", ".", "cumsum", "(", "np", ".", "ones_like", "(", "retrieved_cumulative_hits", ")", ",", "axis", "=", "-", "1", ")", "\n", "# Precision of retrieval list truncated at each hit, in order of pos_labels.", "\n", "precision_at_hits", "=", "(", "retrieved_cumulative_hits", "[", "target_mat", "]", "/", "ranks", "[", "target_mat", "]", ")", "\n", "return", "class_indices", "[", "target_mat", "]", ".", "astype", "(", "np", ".", "int", ")", ",", "precision_at_hits", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.lwlrap_from_precisions": [[161, 188], ["numpy.zeros", "numpy.add.at", "numpy.zeros", "numpy.add.at", "numpy.maximum", "numpy.sum", "float", "numpy.max", "numpy.sum"], "function", ["None"], ["", "def", "lwlrap_from_precisions", "(", "precision_at_hits", ",", "class_indices", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate label-weighted label-ranking average precision.\n\n    Arguments:\n        precision_at_hits:\n        class_indices:\n\n    Returns:\n      lwlrap: overall unbalanced lwlrap which is simply\n        np.sum(per_class_lwlrap * weight_per_class)\n      per_class_lwlrap: np.array of (num_classes,) giving the lwlrap for each\n        class.\n      weight_per_class: np.array of (num_classes,) giving the prior of each\n        class within the truth labels.\n\n    \"\"\"", "\n", "\n", "if", "num_classes", "is", "None", ":", "\n", "        ", "num_classes", "=", "np", ".", "max", "(", "class_indices", ")", "+", "1", "\n", "", "per_class_lwlrap", "=", "np", ".", "zeros", "(", "num_classes", ")", "\n", "np", ".", "add", ".", "at", "(", "per_class_lwlrap", ",", "class_indices", ",", "precision_at_hits", ")", "\n", "labels_per_class", "=", "np", ".", "zeros", "(", "num_classes", ")", "\n", "np", ".", "add", ".", "at", "(", "labels_per_class", ",", "class_indices", ",", "1", ")", "\n", "per_class_lwlrap", "/=", "np", ".", "maximum", "(", "1", ",", "labels_per_class", ")", "\n", "weight_per_class", "=", "labels_per_class", "/", "float", "(", "np", ".", "sum", "(", "labels_per_class", ")", ")", "\n", "lwlrap", "=", "np", ".", "sum", "(", "per_class_lwlrap", "*", "weight_per_class", ")", "\n", "return", "lwlrap", ",", "per_class_lwlrap", ",", "weight_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.lwlrap": [[190, 229], ["instance_based.positive_class_precisions", "instance_based.lwlrap_from_precisions", "target_mat.any", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.positive_class_precisions", "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.lwlrap_from_precisions"], ["", "def", "lwlrap", "(", "target_mat", ",", "score_mat", ")", ":", "\n", "    ", "\"\"\"Calculate label-weighted label-ranking average precision.\n    All-in-one calculation of per-class lwlrap.\n\n    Arguments:\n      target_mat: np.array of (num_samples, num_classes) giving boolean ground-truth\n        of presence of that class in that sample.\n      score_mat: np.array of (num_samples, num_classes) giving the classifier-under-\n        test's real-valued score for each class for each sample.\n\n    Returns:\n      lwlrap: overall unbalanced lwlrap which is simply\n        np.sum(per_class_lwlrap * weight_per_class)\n      per_class_lwlrap: np.array of (num_classes,) giving the lwlrap for each\n        class.\n      weight_per_class: np.array of (num_classes,) giving the prior of each\n        class within the truth labels.\n\n\n    >>> num_samples = 100\n    >>> num_labels = 20\n\n    >>> truth = np.random.rand(num_samples, num_labels) > 0.5\n    >>> truth[0:1, :] = False # Ensure at least some samples with no truth labels.\n    >>> scores = np.random.rand(num_samples, num_labels)\n\n    >>> per_class_lwlrap = lwlrap(truth, scores)\n    \"\"\"", "\n", "if", "not", "target_mat", ".", "any", "(", ")", ":", "\n", "        ", "return", "0.0", ",", "np", ".", "zeros", "(", "target_mat", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "assert", "score_mat", ".", "ndim", "==", "2", ",", "score_mat", ".", "shape", "\n", "assert", "target_mat", ".", "shape", "==", "score_mat", ".", "shape", "\n", "pos_class_indices", ",", "precision_at_hits", "=", "positive_class_precisions", "(", "\n", "target_mat", ",", "score_mat", "\n", ")", "\n", "lwlrap_score", ",", "per_class_lwlrap", ",", "weight_per_class", "=", "lwlrap_from_precisions", "(", "\n", "precision_at_hits", ",", "pos_class_indices", ",", "num_classes", "=", "target_mat", ".", "shape", "[", "1", "]", "\n", ")", "\n", "return", "lwlrap_score", ",", "per_class_lwlrap", ",", "weight_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based._positives_curve": [[231, 254], ["numpy.argsort", "numpy.concatenate", "numpy.unique", "numpy.concatenate", "numpy.cumsum", "len", "numpy.arange", "numpy.concatenate", "len"], "function", ["None"], ["", "def", "_positives_curve", "(", "targets", ",", "scores", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        targets:\n        scores:\n\n    Returns:\n        metric values:\n        thresholds:\n    \"\"\"", "\n", "sort_indices", "=", "np", ".", "argsort", "(", "scores", ")", "\n", "scores", "=", "np", ".", "concatenate", "(", "(", "scores", "[", "sort_indices", "]", ",", "[", "np", ".", "inf", "]", ")", ")", "\n", "targets", "=", "targets", "[", "sort_indices", "]", "\n", "\n", "tps", "=", "np", ".", "cumsum", "(", "np", ".", "concatenate", "(", "(", "targets", ",", "[", "0", "]", ")", ")", "[", ":", ":", "-", "1", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "n_sys", "=", "len", "(", "scores", ")", "-", "np", ".", "arange", "(", "len", "(", "scores", ")", ")", "-", "1", "\n", "\n", "scores", ",", "index", ",", "inverse", "=", "np", ".", "unique", "(", "scores", ",", "return_index", "=", "True", ",", "return_inverse", "=", "True", ")", "\n", "tps", "=", "tps", "[", "index", "]", "[", "inverse", "]", "\n", "n_sys", "=", "n_sys", "[", "index", "]", "[", "inverse", "]", "\n", "thresholds", "=", "np", ".", "concatenate", "(", "(", "[", "-", "np", ".", "inf", "]", ",", "(", "scores", "[", "1", ":", "]", "+", "scores", "[", ":", "-", "1", "]", ")", "/", "2", ")", ")", "\n", "return", "thresholds", "[", "inverse", "]", ",", "n_sys", ",", "tps", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.fscore_curve": [[256, 294], ["instance_based._positives_curve", "list", "numpy.maximum", "numpy.maximum", "zip", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "instance_based.fscore_curve", "zip"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based._positives_curve", "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.fscore_curve"], ["", "def", "fscore_curve", "(", "targets", ",", "scores", ",", "beta", "=", "1.", ",", "tp_bias", "=", "0", ",", "n_ref_bias", "=", "0", ",", "n_pos_bias", "=", "0", ")", ":", "\n", "    ", "\"\"\"Computes fscore for decision thresholds between two adjacent scores.\n\n    Args:\n        targets: binary targets indicating ground truth (num_instances,)\n        scores: binary classification scores (num_instances,)\n\n    Returns:\n        f1_scores: len(set(score_vec)+1) f1 scores\n        thresholds: len(set(score_vec)+1) decision thresholds\n\n    >>> targets = np.array([1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0])\n    >>> scores = np.array([0.6, 0.2, 0.5, 0.4, 0.3, 0.1, 0.7, 0.0, 0.0])\n    >>> fscore_curve(targets, scores)\n    (array([-inf, 0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65,  inf]), array([0.5       , 0.6       , 0.66666667, 0.5       , 0.57142857,\n           0.33333333, 0.4       , 0.        , 0.        ]), array([0.33333333, 0.42857143, 0.5       , 0.4       , 0.5       ,\n           0.33333333, 0.5       , 0.        , 0.        ]), array([1.        , 1.        , 1.        , 0.66666667, 0.66666667,\n           0.33333333, 0.33333333, 0.        , 0.        ]))\n    >>> targets = np.array([1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0])\n    >>> scores = np.array([0.6, 0.2, 0.5, 0.4, 0.3, 0.1, 0.7, 0.0, 0.0])\n    >>> fscore_curve(np.stack([targets, targets]).T, np.stack([scores, scores]).T)\n    (array([-inf, 0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65,  inf]), array([0.5       , 0.6       , 0.66666667, 0.5       , 0.57142857,\n           0.33333333, 0.4       , 0.        , 0.        ]), array([0.33333333, 0.42857143, 0.5       , 0.4       , 0.5       ,\n           0.33333333, 0.5       , 0.        , 0.        ]), array([1.        , 1.        , 1.        , 0.66666667, 0.66666667,\n           0.33333333, 0.33333333, 0.        , 0.        ]))\n\n    \"\"\"", "\n", "assert", "0", "<", "scores", ".", "ndim", "<=", "2", ",", "scores", ".", "shape", "\n", "assert", "scores", ".", "shape", "==", "targets", ".", "shape", ",", "(", "scores", ".", "shape", ",", "targets", ".", "shape", ")", "\n", "if", "scores", ".", "ndim", "==", "2", ":", "\n", "        ", "thresholds", ",", "f", ",", "p", ",", "r", "=", "list", "(", "zip", "(", "*", "[", "fscore_curve", "(", "t", ",", "s", ")", "for", "t", ",", "s", "in", "zip", "(", "targets", ".", "T", ",", "scores", ".", "T", ")", "]", ")", ")", "\n", "return", "np", ".", "array", "(", "thresholds", ")", ".", "T", ",", "np", ".", "array", "(", "f", ")", ".", "T", ",", "np", ".", "array", "(", "p", ")", ".", "T", ",", "np", ".", "array", "(", "r", ")", ".", "T", "\n", "", "thresholds", ",", "n_pos", ",", "tps", "=", "_positives_curve", "(", "targets", ",", "scores", ")", "\n", "n_ref", "=", "tps", "[", "0", "]", "\n", "p", "=", "(", "tps", "+", "tp_bias", ")", "/", "np", ".", "maximum", "(", "n_pos", "+", "n_pos_bias", ",", "1", ")", "\n", "r", "=", "(", "tps", "+", "tp_bias", ")", "/", "np", ".", "maximum", "(", "n_ref", "+", "n_ref_bias", ",", "1", ")", "\n", "f", "=", "(", "1", "+", "beta", "**", "2", ")", "*", "p", "*", "r", "/", "(", "beta", "**", "2", "*", "p", "+", "r", "+", "1e-18", ")", "\n", "return", "thresholds", ",", "f", ",", "p", ",", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.get_best_fscore_thresholds": [[296, 325], ["instance_based.fscore_curve", "numpy.argmax", "numpy.arange", "AssertionError"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.fscore_curve"], ["", "def", "get_best_fscore_thresholds", "(", "targets", ",", "scores", ",", "beta", "=", "1.", ",", "min_precision", "=", "0.", ",", "min_recall", "=", "0.", ",", "tp_bias", "=", "0", ",", "n_ref_bias", "=", "0", ",", "n_pos_bias", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    >>> target_mat = np.array([[1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0]])\n    >>> score_mat = np.array([[0.6], [0.2], [0.5], [.4], [0.3], [0.1], [0.7], [0.0], [0.0]])\n    >>> get_best_fscore_thresholds(target_mat, score_mat)\n    (array([0.15]), array([0.66666667]), array([0.5]), array([1.]))\n    >>> get_best_fscore_thresholds(target_mat.flatten(), score_mat.flatten())\n    (0.15000000000000002, 0.6666666666666666, 0.5, 1.0)\n    >>> get_best_fscore_thresholds(target_mat.flatten(), score_mat.flatten(), min_precision=.5)\n    (0.15000000000000002, 0.6666666666666666, 0.5, 1.0)\n    >>> get_best_fscore_thresholds(target_mat.flatten(), score_mat.flatten(), min_precision=.51)\n    (inf, 0.0, 0.0, 0.0)\n    >>> get_best_fscore_thresholds(target_mat.flatten(), score_mat.flatten(), min_recall=1.0)\n    (0.15000000000000002, 0.6666666666666666, 0.5, 1.0)\n    >>> get_best_fscore_thresholds(target_mat.flatten(), score_mat.flatten(), tp_bias=1, n_ref_bias=1, n_pos_bias=1)\n    (0.15000000000000002, 0.6666666666666666, 0.5, 1.0)\n    \"\"\"", "\n", "thresholds", ",", "f", ",", "p", ",", "r", "=", "fscore_curve", "(", "targets", ",", "scores", ",", "beta", ",", "tp_bias", "=", "tp_bias", ",", "n_ref_bias", "=", "n_ref_bias", ",", "n_pos_bias", "=", "n_pos_bias", ")", "\n", "assert", "min_precision", "==", "0.", "or", "min_recall", "==", "0.", "\n", "f", "[", "p", "<", "min_precision", "]", "=", "0.", "\n", "f", "[", "r", "<", "min_recall", "]", "=", "0.", "\n", "best_idx", "=", "(", "-", "1", "-", "np", ".", "argmax", "(", "f", "[", ":", ":", "-", "1", "]", ",", "axis", "=", "0", ")", ")", "\n", "if", "thresholds", ".", "ndim", "==", "1", ":", "\n", "        ", "return", "thresholds", "[", "best_idx", "]", ",", "f", "[", "best_idx", "]", ",", "p", "[", "best_idx", "]", ",", "r", "[", "best_idx", "]", "\n", "", "elif", "thresholds", ".", "ndim", "==", "2", ":", "\n", "        ", "class_idx", "=", "np", ".", "arange", "(", "targets", ".", "shape", "[", "1", "]", ")", "\n", "return", "thresholds", "[", "best_idx", ",", "class_idx", "]", ",", "f", "[", "best_idx", ",", "class_idx", "]", ",", "p", "[", "best_idx", ",", "class_idx", "]", ",", "r", "[", "best_idx", ",", "class_idx", "]", "\n", "", "else", ":", "\n", "        ", "raise", "AssertionError", "(", "'ndim must be less equal 2.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.er_curve": [[327, 352], ["instance_based._positives_curve", "list", "numpy.maximum", "numpy.maximum", "numpy.maximum", "zip", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "instance_based.er_curve", "zip"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based._positives_curve", "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.er_curve"], ["", "", "def", "er_curve", "(", "targets", ",", "scores", ")", ":", "\n", "    ", "\"\"\"Given single-class soft scores computes error rate for each threshold between two adjacent score values.\n\n    Args:\n        targets: binary targets indicating ground truth (num_instances,)\n        scores: binary classification scores (num_instances,)\n\n    Returns:\n        error_rates: len(set(score_vec)+1) f1 error_rates\n        thresholds: len(set(score_vec)+1) decision thresholds\n\n    \"\"\"", "\n", "assert", "0", "<", "scores", ".", "ndim", "<=", "2", ",", "scores", ".", "shape", "\n", "assert", "scores", ".", "shape", "==", "targets", ".", "shape", ",", "(", "scores", ".", "shape", ",", "targets", ".", "shape", ")", "\n", "if", "scores", ".", "ndim", "==", "2", ":", "\n", "        ", "thresholds", ",", "f", ",", "p", ",", "r", "=", "list", "(", "zip", "(", "*", "[", "er_curve", "(", "t", ",", "s", ")", "for", "t", ",", "s", "in", "zip", "(", "targets", ".", "T", ",", "scores", ".", "T", ")", "]", ")", ")", "\n", "return", "np", ".", "array", "(", "thresholds", ")", ".", "T", ",", "np", ".", "array", "(", "f", ")", ".", "T", ",", "np", ".", "array", "(", "p", ")", ".", "T", ",", "np", ".", "array", "(", "r", ")", ".", "T", "\n", "", "thresholds", ",", "n_pos", ",", "tps", "=", "_positives_curve", "(", "targets", ",", "scores", ")", "\n", "n_ref", "=", "tps", "[", "0", "]", "\n", "i", "=", "n_pos", "-", "tps", "\n", "d", "=", "n_ref", "-", "tps", "\n", "er", "=", "(", "i", "+", "d", ")", "/", "np", ".", "maximum", "(", "n_ref", ",", "1", ")", "\n", "ir", "=", "i", "/", "np", ".", "maximum", "(", "n_ref", ",", "1", ")", "\n", "dr", "=", "d", "/", "np", ".", "maximum", "(", "n_ref", ",", "1", ")", "\n", "return", "thresholds", ",", "er", ",", "ir", ",", "dr", "\n", "\n"]], "home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.get_best_er_thresholds": [[354, 376], ["instance_based.er_curve", "numpy.argmin", "numpy.arange", "AssertionError"], "function", ["home.repos.pwc.inspect_result.fgnt_pb_sed.evaluation.instance_based.er_curve"], ["", "def", "get_best_er_thresholds", "(", "targets", ",", "scores", ",", "max_insertion_rate", "=", "None", ",", "max_deletion_rate", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    >>> target_mat = np.array([[1.0], [1.0], [0.0], [1.0], [0.0], [0.0], [0.0], [0.0], [0.0]])\n    >>> score_mat = np.array([[0.6], [0.2], [0.5], [.4], [0.3], [0.1], [0.7], [0.0], [0.0]])\n    >>> get_best_er_thresholds(target_mat, score_mat)\n    (array([inf]), array([1.]), array([0.]), array([1.]))\n    >>> get_best_er_thresholds(target_mat.flatten(), score_mat.flatten())\n    (inf, 1.0, 0.0, 1.0)\n    \"\"\"", "\n", "thresholds", ",", "er", ",", "ir", ",", "dr", "=", "er_curve", "(", "targets", ",", "scores", ")", "\n", "if", "max_insertion_rate", "is", "not", "None", ":", "\n", "        ", "er", "[", "ir", ">", "max_insertion_rate", "]", "=", "np", ".", "inf", "\n", "", "if", "max_deletion_rate", "is", "not", "None", ":", "\n", "        ", "er", "[", "dr", ">", "max_deletion_rate", "]", "=", "np", ".", "inf", "\n", "", "best_idx", "=", "(", "-", "1", "-", "np", ".", "argmin", "(", "er", "[", ":", ":", "-", "1", "]", ",", "axis", "=", "0", ")", ")", "\n", "if", "thresholds", ".", "ndim", "==", "1", ":", "\n", "        ", "return", "thresholds", "[", "best_idx", "]", ",", "er", "[", "best_idx", "]", ",", "ir", "[", "best_idx", "]", ",", "dr", "[", "best_idx", "]", "\n", "", "elif", "thresholds", ".", "ndim", "==", "2", ":", "\n", "        ", "class_idx", "=", "np", ".", "arange", "(", "targets", ".", "shape", "[", "1", "]", ")", "\n", "return", "thresholds", "[", "best_idx", ",", "class_idx", "]", ",", "er", "[", "best_idx", ",", "class_idx", "]", ",", "ir", "[", "best_idx", ",", "class_idx", "]", ",", "dr", "[", "best_idx", ",", "class_idx", "]", "\n", "", "else", ":", "\n", "        ", "raise", "AssertionError", "(", "'ndim must be less equal 2.'", ")", "\n", "", "", ""]]}