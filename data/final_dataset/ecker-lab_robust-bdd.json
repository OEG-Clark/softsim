{"home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.output_fusion.DeepMerge.__init__": [[164, 177], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "loc_model", ",", "\n", "dmg_model", ",", "\n", "n_classes", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "DeepMerge", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "loc_model", "=", "loc_model", "\n", "self", ".", "dmg_model", "=", "dmg_model", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Conv2d", "(", "96", ",", "n_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.output_fusion.DeepMerge.forward": [[178, 185], ["output_fusion.DeepMerge.loc_model", "output_fusion.DeepMerge.dmg_model", "output_fusion.DeepMerge.out", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "loc_features", "=", "self", ".", "loc_model", "(", "x", ",", "return_features", "=", "\"dec1\"", ")", "\n", "_", ",", "dmg_features", "=", "self", ".", "dmg_model", "(", "x", ",", "return_features", "=", "\"last\"", ")", "\n", "\n", "x", "=", "self", ".", "out", "(", "torch", ".", "cat", "(", "(", "loc_features", ",", "dmg_features", ")", ",", "1", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.output_fusion.copy_twomodel_preds": [[23, 127], ["sorted", "sorted", "os.path.join", "tqdm.tqdm", "shutil.copytree", "shutil.copytree", "ValueError", "len", "len", "ValueError", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "zip", "os.path.join", "os.path.join", "shutil.copy", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "len", "ValueError", "shutil.copy", "numpy.array().astype", "numpy.unique", "interpolate.griddata.astype", "PIL.Image.fromarray", "colorize_mask_", "Image.fromarray.save", "os.listdir", "pred.startswith", "os.listdir", "pred.startswith", "len", "len", "locpred.split", "dmgpred.split", "numpy.array", "skimage.label", "measure.label.max", "numpy.zeros", "range", "np.zeros.astype", "os.path.join", "os.path.join", "os.path.join", "numpy.array", "len", "PIL.Image.open", "int", "numpy.where", "numpy.where", "PIL.Image.open", "len", "numpy.arange", "numpy.arange", "numpy.ma.masked_invalid", "numpy.meshgrid", "scipy.interpolate.griddata", "numpy.zeros", "round", "dmg_new.ravel", "dmg_region[].mean", "numpy.unique", "numpy.median", "numpy.argmax", "numpy.unique", "unique_counts.copy", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "sum", "sum", "sum", "unique_counts.copy.cumsum", "int", "sum"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.colorize_mask_", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.mean", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax"], ["def", "copy_twomodel_preds", "(", "loc_folder", ",", "dmg_folder", ",", "output_folder", ",", "mode", "=", "\"interpolate\"", ")", ":", "\n", "    ", "\"\"\"Merge predictions from two models\n\n    Args:\n        loc_folder (str): Path to localization predictions\n        dmg_folder (str): Path to damage predictions\n        output_folder (str): Output path\n        mode (str, optional): One of copy, interpolate, meanfreq, maxfreq, medianfreq, weightedfreq. Defaults to \"interpolate\".\n    \"\"\"", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "loc_folder", ")", "and", "os", ".", "path", ".", "exists", "(", "dmg_folder", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Paths do not exist\"", ")", "\n", "", "locpreds", "=", "sorted", "(", "[", "pred", "for", "pred", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "loc_folder", ",", "\"predictions\"", ")", ")", "if", "pred", ".", "startswith", "(", "\"test_localization_\"", ")", "]", ")", "\n", "dmgpreds", "=", "sorted", "(", "[", "pred", "for", "pred", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "dmg_folder", ",", "\"predictions\"", ")", ")", "if", "pred", ".", "startswith", "(", "\"test_damage_\"", ")", "]", ")", "\n", "\n", "if", "len", "(", "locpreds", ")", "!=", "len", "(", "dmgpreds", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Folders do not contain the same amount of predictions... locpreds: {}, dmgpreds:\u00a0{}\"", ".", "format", "(", "len", "(", "locpreds", ")", ",", "len", "(", "dmgpreds", ")", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "output_folder", ")", "\n", "", "pred_folder", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"predictions\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pred_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "pred_folder", ")", "\n", "\n", "", "for", "locpred", ",", "dmgpred", "in", "tqdm", "(", "zip", "(", "locpreds", ",", "dmgpreds", ")", ",", "total", "=", "len", "(", "locpreds", ")", ")", ":", "\n", "        ", "if", "locpred", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", "!=", "dmgpred", ".", "split", "(", "\"_\"", ")", "[", "-", "2", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Predictions {} and {} dont match!\"", ".", "format", "(", "locpred", ",", "dmgpred", ")", ")", "\n", "\n", "", "locpath", "=", "os", ".", "path", ".", "join", "(", "loc_folder", ",", "\"predictions\"", ",", "locpred", ")", "\n", "dmgpath", "=", "os", ".", "path", ".", "join", "(", "dmg_folder", ",", "\"predictions\"", ",", "dmgpred", ")", "\n", "\n", "shutil", ".", "copy", "(", "locpath", ",", "pred_folder", ")", "\n", "if", "mode", "==", "\"copy\"", ":", "\n", "            ", "shutil", ".", "copy", "(", "dmgpath", ",", "pred_folder", ")", "\n", "", "else", ":", "\n", "            ", "dmg", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "dmgpath", ")", ")", ".", "astype", "(", "float", ")", "\n", "v", "=", "np", ".", "unique", "(", "dmg", ")", "\n", "if", "0", "not", "in", "v", ":", "\n", "                ", "dmg_interpolated", "=", "dmg", "\n", "", "elif", "len", "(", "v", ")", "==", "2", ":", "\n", "                ", "dmg", "[", "dmg", "==", "0", "]", "=", "v", "[", "1", "]", "\n", "dmg_interpolated", "=", "dmg", "\n", "", "elif", "len", "(", "v", ")", "==", "1", ":", "\n", "                ", "dmg", "[", "dmg", "==", "0", "]", "=", "1", "\n", "dmg_interpolated", "=", "dmg", "\n", "", "else", ":", "\n", "                ", "dmg", "[", "dmg", "==", "0", "]", "=", "np", ".", "nan", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "dmg", ".", "shape", "[", "1", "]", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "dmg", ".", "shape", "[", "0", "]", ")", "\n", "#mask invalid values", "\n", "dmg", "=", "np", ".", "ma", ".", "masked_invalid", "(", "dmg", ")", "\n", "xx", ",", "yy", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "#get only the valid values", "\n", "x1", "=", "xx", "[", "~", "dmg", ".", "mask", "]", "\n", "y1", "=", "yy", "[", "~", "dmg", ".", "mask", "]", "\n", "dmg_new", "=", "dmg", "[", "~", "dmg", ".", "mask", "]", "\n", "\n", "dmg_interpolated", "=", "interpolate", ".", "griddata", "(", "(", "x1", ",", "y1", ")", ",", "dmg_new", ".", "ravel", "(", ")", ",", "(", "xx", ",", "yy", ")", ",", "method", "=", "'nearest'", ")", "\n", "", "dmg", "=", "dmg_interpolated", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "\n", "if", "mode", "in", "[", "\"meanfreq\"", ",", "\"maxfreq\"", ",", "\"medianfreq\"", ",", "\"weightedfreq\"", "]", ":", "\n", "                ", "loc", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "locpath", ")", ")", "\n", "labels", "=", "measure", ".", "label", "(", "loc", ",", "connectivity", "=", "1", ")", "\n", "num_labels", "=", "labels", ".", "max", "(", ")", "\n", "empty", "=", "np", ".", "zeros", "(", "dmg", ".", "shape", ")", "\n", "for", "labeli", "in", "range", "(", "1", ",", "int", "(", "num_labels", ")", ")", ":", "\n", "                    ", "dmg_region", "=", "np", ".", "where", "(", "labels", "==", "labeli", ",", "dmg", ",", "np", ".", "zeros", "(", "dmg", ".", "shape", ")", ")", "\n", "if", "mode", "==", "\"meanfreq\"", ":", "\n", "                        ", "value", "=", "round", "(", "dmg_region", "[", "dmg_region", "!=", "0", "]", ".", "mean", "(", ")", ")", "\n", "", "elif", "mode", "==", "\"maxfreq\"", ":", "\n", "                        ", "unique_values", ",", "unique_counts", "=", "np", ".", "unique", "(", "dmg_region", "[", "dmg_region", "!=", "0", "]", ",", "return_counts", "=", "True", ")", "\n", "value", "=", "unique_values", "[", "np", ".", "argmax", "(", "unique_counts", ")", "]", "\n", "", "elif", "mode", "==", "\"medianfreq\"", ":", "\n", "                        ", "value", "=", "np", ".", "median", "(", "dmg_region", "[", "dmg_region", "!=", "0", "]", ")", "\n", "", "elif", "mode", "==", "\"weightedfreq\"", ":", "\n", "                        ", "unique_values", ",", "unique_counts", "=", "np", ".", "unique", "(", "dmg_region", "[", "dmg_region", "!=", "0", "]", ",", "return_counts", "=", "True", ")", "\n", "new_counts", "=", "unique_counts", ".", "copy", "(", ")", "\n", "if", "2", "in", "unique_values", ":", "\n", "                            ", "idx", "=", "np", ".", "where", "(", "unique_values", "==", "2", ")", "[", "0", "]", "\n", "count2", "=", "unique_counts", "[", "idx", "]", "\n", "if", "count2", "/", "sum", "(", "unique_counts", ")", ">=", "0.1", ":", "\n", "                                ", "new_counts", "[", "idx", "]", "=", "8", "*", "count2", "\n", "", "", "if", "3", "in", "unique_values", ":", "\n", "                            ", "idx", "=", "np", ".", "where", "(", "unique_values", "==", "3", ")", "[", "0", "]", "\n", "count3", "=", "unique_counts", "[", "idx", "]", "\n", "if", "count3", "/", "sum", "(", "unique_counts", ")", ">=", "0.1", ":", "\n", "                                ", "new_counts", "[", "idx", "]", "=", "4", "*", "count3", "\n", "", "", "if", "4", "in", "unique_values", ":", "\n", "                            ", "idx", "=", "np", ".", "where", "(", "unique_values", "==", "4", ")", "[", "0", "]", "\n", "count4", "=", "unique_counts", "[", "idx", "]", "\n", "if", "count4", "/", "sum", "(", "unique_counts", ")", ">=", "0.1", ":", "\n", "                                ", "new_counts", "[", "idx", "]", "=", "2", "*", "count4", "\n", "", "", "idx", "=", "np", ".", "where", "(", "new_counts", ".", "cumsum", "(", ")", ">=", "int", "(", "sum", "(", "new_counts", ")", "/", "2", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "value", "=", "unique_values", "[", "idx", "]", "\n", "", "empty", "+=", "np", ".", "where", "(", "dmg_region", "==", "0", ",", "dmg_region", ",", "value", ")", "\n", "", "dmg", "=", "empty", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "dmg_img", "=", "Image", ".", "fromarray", "(", "dmg", ")", "\n", "colorize_mask_", "(", "dmg_img", ")", "\n", "dmg_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "pred_folder", ",", "dmgpred", ")", ")", "\n", "\n", "\n", "", "", "shutil", ".", "copytree", "(", "os", ".", "path", ".", "join", "(", "loc_folder", ",", "\"images\"", ")", ",", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"images\"", ")", ")", "\n", "shutil", ".", "copytree", "(", "os", ".", "path", ".", "join", "(", "loc_folder", ",", "\"targets\"", ")", ",", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"targets\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.output_fusion.max_freq_per_component_fusion": [[136, 156], ["torch.argmax", "torch.argmax", "torch.zeros_like", "torch.zeros_like", "range", "skimage.label", "torch.Tensor().to", "torch.Tensor().to", "torch.max", "torch.max", "range", "torch.max.long", "torch.where", "torch.where", "torch.unique", "torch.unique", "torch.where", "torch.where", "loc_batch[].squeeze().cpu", "torch.Tensor", "torch.Tensor", "torch.zeros_like", "torch.zeros_like", "torch.argmax", "torch.argmax", "loc_batch[].squeeze"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax"], ["", "def", "max_freq_per_component_fusion", "(", "loc_batch", ",", "dmg_batch", ")", ":", "\n", "    ", "\"\"\"LEGACY\n    \"\"\"", "\n", "#print(loc_batch.shape)", "\n", "dmg_map", "=", "torch", ".", "argmax", "(", "dmg_batch", ",", "1", ")", "\n", "empty_map", "=", "torch", ".", "zeros_like", "(", "dmg_map", ")", "\n", "for", "i", "in", "range", "(", "loc_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "#print(measure.label)", "\n", "        ", "labels", "=", "measure", ".", "label", "(", "loc_batch", "[", "i", ",", ":", ",", ":", ",", ":", "]", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "connectivity", "=", "1", ")", "\n", "labeled_loc", "=", "torch", ".", "Tensor", "(", "labels", ")", ".", "to", "(", "0", ")", "\n", "num_labels", "=", "torch", ".", "max", "(", "labeled_loc", ")", "\n", "#print(num_labels)", "\n", "for", "labeli", "in", "range", "(", "1", ",", "num_labels", ".", "long", "(", ")", ")", ":", "\n", "            ", "dmg_region", "=", "torch", ".", "where", "(", "labeled_loc", "==", "labeli", ",", "dmg_map", "[", "i", ",", ":", ",", ":", "]", ",", "torch", ".", "zeros_like", "(", "dmg_map", "[", "i", ",", ":", ",", ":", "]", ")", ")", "\n", "unique_values", ",", "unique_counts", "=", "torch", ".", "unique", "(", "dmg_region", "[", "dmg_region", "!=", "0", "]", ",", "return_counts", "=", "True", ")", "\n", "max_freq", "=", "unique_values", "[", "torch", ".", "argmax", "(", "unique_counts", ")", "]", "\n", "#print(max_freq)", "\n", "empty_map", "[", "i", ",", ":", ",", ":", "]", "+=", "torch", ".", "where", "(", "dmg_region", "==", "0", ",", "dmg_region", ",", "max_freq", ")", "\n", "\n", "", "", "return", "empty_map", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.augment.cut_and_resize": [[16, 39], ["PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "print", "range", "range", "Image.open.crop", "Image.open.crop", "Image.open.crop", "Img_Pre.crop.resize", "Img_Post.crop.resize", "Mask.crop.resize", "int", "Img_Pre_crop.resize.save", "Img_Post_crop.resize.save", "Mask_crop.resize.save"], "function", ["None"], ["def", "cut_and_resize", "(", "IMAGE_FOLDER", ",", "IMAGE_PRE_FILE", ",", "IMAGE_POST_FILE", ",", "MASK_FOLDER", ",", "MASK_FILE", ",", "OUTPUT_FOLDER_IMAGES", ",", "OUTPUT_FOLDER_MASKS", ",", "cutwidth", ",", "resizewidth", ")", ":", "\n", "    ", "\"\"\"\n    Cuts square input Image and Mask into (image width/cutwidth)**2 tiles and resizes each of them to size resizewidthxresizewidth\n    \"\"\"", "\n", "Img_Pre", "=", "Image", ".", "open", "(", "IMAGE_FOLDER", "+", "IMAGE_PRE_FILE", ")", "\n", "Img_Post", "=", "Image", ".", "open", "(", "IMAGE_FOLDER", "+", "IMAGE_PRE_FILE", ")", "\n", "Mask", "=", "Image", ".", "open", "(", "MASK_FOLDER", "+", "MASK_FILE", ")", "\n", "imgwidth", ",", "imgheight", "=", "Img_Pre", ".", "size", "\n", "print", "(", "imgwidth", "/", "cutwidth", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "imgheight", ",", "cutwidth", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "imgwidth", ",", "cutwidth", ")", ":", "\n", "            ", "box", "=", "(", "j", ",", "i", ",", "j", "+", "cutwidth", ",", "i", "+", "cutwidth", ")", "\n", "Img_Pre_crop", "=", "Img_Pre", ".", "crop", "(", "box", ")", "\n", "Img_Post_crop", "=", "Img_Post", ".", "crop", "(", "box", ")", "\n", "Mask_crop", "=", "Mask", ".", "crop", "(", "box", ")", "\n", "newsize", "=", "(", "resizewidth", ",", "resizewidth", ")", "\n", "Img_Pre_resize", "=", "Img_Pre_crop", ".", "resize", "(", "newsize", ")", "\n", "Img_Post_resize", "=", "Img_Post_crop", ".", "resize", "(", "newsize", ")", "\n", "Mask_resize", "=", "Mask_crop", ".", "resize", "(", "newsize", ")", "\n", "num", "=", "int", "(", "imgwidth", "/", "cutwidth", "**", "2", "*", "j", "+", "i", "/", "cutwidth", ")", "\n", "Img_Pre_resize", ".", "save", "(", "OUTPUT_FOLDER_IMAGES", "+", "IMAGE_PRE_FILE", "[", ":", "-", "4", "]", "+", "\"_Tile_%s.png\"", "%", "num", ")", "\n", "Img_Post_resize", ".", "save", "(", "OUTPUT_FOLDER_IMAGES", "+", "IMAGE_POST_FILE", "[", ":", "-", "4", "]", "+", "\"_Tile_%s.png\"", "%", "num", ")", "\n", "Mask_resize", ".", "save", "(", "OUTPUT_FOLDER_MASKS", "+", "MASK_FILE", "[", ":", "-", "4", "]", "+", "\"_Tile_%s.png\"", "%", "num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.augment.cut_and_resize_one": [[40, 60], ["PIL.Image.open", "Image.open.resize", "Img_crop.resize.save", "range", "range", "Image.open.crop", "Img.crop.resize", "int", "Img_crop.resize.save"], "function", ["None"], ["", "", "", "def", "cut_and_resize_one", "(", "IN_FOLDER", ",", "FILE", ",", "OUT_FOLDER", ",", "cutwidth", ",", "resizewidth", ")", ":", "\n", "    ", "\"\"\"\n    Cuts square Input into (image width/cutwidth)**2 tiles and resizes each of them to size resizewidthxresizewidth\n    \"\"\"", "\n", "Img", "=", "Image", ".", "open", "(", "IN_FOLDER", "+", "FILE", ")", "\n", "imgwidth", ",", "imgheight", "=", "Img", ".", "size", "\n", "if", "imgheight", "==", "cutwidth", ":", "\n", "        ", "newsize", "=", "(", "resizewidth", ",", "resizewidth", ")", "\n", "Img_resize", "=", "Img", ".", "resize", "(", "newsize", ")", "\n", "Img_resize", ".", "save", "(", "OUT_FOLDER", "+", "FILE", ")", "\n", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "imgheight", ",", "cutwidth", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "imgwidth", ",", "cutwidth", ")", ":", "\n", "                ", "box", "=", "(", "j", ",", "i", ",", "j", "+", "cutwidth", ",", "i", "+", "cutwidth", ")", "\n", "Img_crop", "=", "Img", ".", "crop", "(", "box", ")", "\n", "newsize", "=", "(", "resizewidth", ",", "resizewidth", ")", "\n", "Img_resize", "=", "Img_crop", ".", "resize", "(", "newsize", ")", "\n", "num", "=", "int", "(", "imgwidth", "/", "cutwidth", "**", "2", "*", "j", "+", "i", "/", "cutwidth", ")", "\n", "Img_resize", ".", "save", "(", "OUT_FOLDER", "+", "FILE", "[", ":", "-", "4", "]", "+", "\"_Tile_%s.png\"", "%", "num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.polygons_to_mask": [[24, 55], ["json.load", "numpy.zeros", "open", "numpy.maximum", "list", "polygons.append", "numpy.zeros", "cv2.fillPoly", "numpy.maximum", "numpy.ones", "numpy.maximum", "numpy.zeros", "cv2.fillPoly", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.array", "numpy.maximum", "shapely.geometry.mapping", "shapely.geometry.mapping", "shapely.wkt.loads", "shapely.wkt.loads"], "function", ["None"], ["def", "polygons_to_mask", "(", "PATH", ",", "out_type", "=", "\"one\"", ")", ":", "\n", "    ", "\"\"\"\n    :param PATH: A path to a JSON with Polygons\n    :param out_type: changes output type\n    :returns: If output type is one, returns a 1024x1024 np.array with values 1-4 corresponding to building dmg scales 0-4, where if polygons overlapped in the input, the maximum dmg was used. If output type is many returns a 1024x1024x4 np.array with values 0 or 1 corresponding to no building vs. building of dmg type x in channel x.\n    \"\"\"", "\n", "JSON", "=", "json", ".", "load", "(", "open", "(", "PATH", ")", ")", "\n", "polygons", "=", "[", "]", "\n", "for", "polygon", "in", "JSON", "[", "'features'", "]", "[", "\"xy\"", "]", ":", "\n", "        ", "if", "(", "polygon", "[", "'properties'", "]", "[", "'subtype'", "]", "!=", "'un-classified'", ")", ":", "\n", "            ", "dmgtype", "=", "DMG_CLASSES", "[", "polygon", "[", "'properties'", "]", "[", "'subtype'", "]", "]", "\n", "coords", "=", "list", "(", "shapely", ".", "geometry", ".", "mapping", "(", "shapely", ".", "wkt", ".", "loads", "(", "polygon", "[", "'wkt'", "]", ")", ")", "[", "'coordinates'", "]", "[", "0", "]", ")", "\n", "polygons", ".", "append", "(", "(", "dmgtype", ",", "np", ".", "array", "(", "coords", ",", "np", ".", "int32", ")", ")", ")", "\n", "", "", "size", "=", "(", "1024", ",", "1024", ",", "5", ")", "\n", "mask_img", "=", "np", ".", "zeros", "(", "size", ",", "np", ".", "uint8", ")", "\n", "\n", "if", "out_type", "==", "\"many\"", ":", "\n", "        ", "for", "poly", "in", "polygons", ":", "\n", "            ", "blank", "=", "np", ".", "zeros", "(", "(", "1024", ",", "1024", ")", ",", "np", ".", "uint8", ")", "\n", "fillPoly", "(", "blank", ",", "[", "poly", "[", "1", "]", "]", ",", "color", "=", "1", ")", "\n", "mask_img", "[", ":", ",", ":", ",", "poly", "[", "0", "]", "+", "1", "]", "=", "np", ".", "maximum", "(", "mask_img", "[", ":", ",", ":", ",", "poly", "[", "0", "]", "+", "1", "]", ",", "blank", ")", "\n", "", "mask_img", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "ones", "(", "(", "1024", ",", "1024", ")", ")", "-", "np", ".", "maximum", "(", "np", ".", "maximum", "(", "np", ".", "maximum", "(", "mask_img", "[", ":", ",", ":", ",", "1", "]", ",", "mask_img", "[", ":", ",", ":", ",", "2", "]", ")", ",", "mask_img", "[", ":", ",", ":", ",", "3", "]", ")", ",", "mask_img", "[", ":", ",", ":", ",", "4", "]", ")", "\n", "return", "mask_img", "\n", "\n", "", "else", ":", "\n", "        ", "for", "poly", "in", "polygons", ":", "\n", "            ", "blank", "=", "np", ".", "zeros", "(", "(", "1024", ",", "1024", ")", ",", "np", ".", "uint8", ")", "\n", "fillPoly", "(", "blank", ",", "[", "poly", "[", "1", "]", "]", ",", "color", "=", "poly", "[", "0", "]", "+", "1", ")", "\n", "mask_img", "[", ":", ",", ":", ",", "poly", "[", "0", "]", "+", "1", "]", "=", "np", ".", "maximum", "(", "mask_img", "[", ":", ",", ":", ",", "poly", "[", "0", "]", "+", "1", "]", ",", "blank", ")", "\n", "", "mask_all", "=", "np", ".", "maximum", "(", "np", ".", "maximum", "(", "np", ".", "maximum", "(", "mask_img", "[", ":", ",", ":", ",", "1", "]", ",", "mask_img", "[", ":", ",", ":", ",", "2", "]", ")", ",", "mask_img", "[", ":", ",", ":", ",", "3", "]", ")", ",", "mask_img", "[", ":", ",", ":", ",", "4", "]", ")", "\n", "return", "mask_all", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.create_mask_png": [[56, 66], ["load.polygons_to_mask", "PIL.Image.fromarray", "load.colorize_mask_", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.polygons_to_mask", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.colorize_mask_"], ["", "", "def", "create_mask_png", "(", "IN_FOLDER", ",", "IN_FILE", ",", "OUT_FOLDER", ")", ":", "\n", "    ", "\"\"\"\n    :param IN_FOLDER: A path to the input folder with jsons\n    :param IN_FILE: name of input json\n    :param OUT_FOLDER: Path to output folder for mask pngs\n    \"\"\"", "\n", "mask_all", "=", "polygons_to_mask", "(", "IN_FOLDER", "+", "IN_FILE", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask_all", ")", "\n", "colorize_mask_", "(", "mask", ")", "\n", "mask", ".", "save", "(", "OUT_FOLDER", "+", "IN_FILE", "[", ":", "-", "19", "]", "+", "\"_mask.png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.create_multiple_mask_pngs": [[67, 79], ["load.polygons_to_mask", "PIL.Image.fromarray().save", "PIL.Image.fromarray().save", "PIL.Image.fromarray().save", "PIL.Image.fromarray().save", "PIL.Image.fromarray().save", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.polygons_to_mask"], ["", "def", "create_multiple_mask_pngs", "(", "IN_FOLDER", ",", "IN_FILE", ",", "OUT_FOLDER", ")", ":", "\n", "    ", "\"\"\"\n    :param IN_FOLDER: A path to the input folder with jsons\n    :param IN_FILE: name of input json\n    :param OUT_FOLDER: Path to output folder for mask pngs\n    \"\"\"", "\n", "mask_img", "=", "polygons_to_mask", "(", "IN_FOLDER", "+", "IN_FILE", ",", "out_type", "=", "\"many\"", ")", "\n", "Image", ".", "fromarray", "(", "mask_img", "[", ":", ",", ":", ",", "0", "]", ")", ".", "save", "(", "OUT_FOLDER", "+", "IN_FILE", "[", ":", "-", "19", "]", "+", "\"_mask0.png\"", ")", "\n", "Image", ".", "fromarray", "(", "mask_img", "[", ":", ",", ":", ",", "1", "]", ")", ".", "save", "(", "OUT_FOLDER", "+", "IN_FILE", "[", ":", "-", "19", "]", "+", "\"_mask1.png\"", ")", "\n", "Image", ".", "fromarray", "(", "mask_img", "[", ":", ",", ":", ",", "2", "]", ")", ".", "save", "(", "OUT_FOLDER", "+", "IN_FILE", "[", ":", "-", "19", "]", "+", "\"_mask2.png\"", ")", "\n", "Image", ".", "fromarray", "(", "mask_img", "[", ":", ",", ":", ",", "3", "]", ")", ".", "save", "(", "OUT_FOLDER", "+", "IN_FILE", "[", ":", "-", "19", "]", "+", "\"_mask3.png\"", ")", "\n", "Image", ".", "fromarray", "(", "mask_img", "[", ":", ",", ":", ",", "4", "]", ")", ".", "save", "(", "OUT_FOLDER", "+", "IN_FILE", "[", ":", "-", "19", "]", "+", "\"_mask4.png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.colorize_mask_": [[80, 97], ["mask.putpalette", "numpy.array", "color_map.astype"], "function", ["None"], ["", "def", "colorize_mask_", "(", "mask", ",", "color_map", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Attaches a color palette to a PIL image. So long as the image is saved as a PNG, it will render visibly using the\n    provided color map.\n    :param mask: PIL image whose values are only 0 to 4 inclusive\n    :param color_map: np.ndarray or list of 3-tuples with 5 rows\n    :return:\n    \"\"\"", "\n", "color_map", "=", "color_map", "or", "np", ".", "array", "(", "[", "(", "0", ",", "0", ",", "0", ")", ",", "# 0=background --> black", "\n", "(", "128", ",", "255", ",", "0", ")", ",", "# no damage (or just 'building' for localization) --> green", "\n", "(", "255", ",", "255", ",", "0", ")", ",", "# minor damage --> yellow", "\n", "(", "255", ",", "128", ",", "0", ")", ",", "# major damage --> orange", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "# destroyed --> red", "\n", "]", ")", "\n", "assert", "color_map", ".", "shape", "==", "(", "5", ",", "3", ")", "\n", "mask", ".", "putpalette", "(", "color_map", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.load_mask_png": [[98, 105], ["numpy.array", "PIL.Image.open"], "function", ["None"], ["", "def", "load_mask_png", "(", "PATH", ")", ":", "\n", "    ", "\"\"\"\n    :param PATH: Input mask png PATH\n    :returns: Numpy array of mask\n    \"\"\"", "\n", "mask_all", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "PATH", ")", ")", "\n", "return", "mask_all", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.make_output_directory": [[107, 166], ["os.listdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "file.endswith", "print", "numpy.load().astype", "numpy.load().astype", "range", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "numpy.load", "numpy.load", "numpy.moveaxis", "numpy.moveaxis", "numpy.load", "file.replace", "file.replace", "str", "str", "str", "str", "str", "str", "file.replace().replace", "file.replace().replace", "file.replace().replace", "file.replace().replace", "file.replace().replace", "file.replace().replace", "file.replace", "file.replace", "file.replace", "file.replace", "file.replace", "file.replace"], "function", ["None"], ["", "def", "make_output_directory", "(", "INPUT_PATH", ",", "OUTPUT_PATH", ")", ":", "\n", "    ", "\"\"\"\n    :param INPUT_PATH: Input Path of all numpy arrays\n    :param OUTPUT_PATH: Output Path where all the images get saved structured likes this:\n        \u251c\u2500\u2500 images\n        \u2502   \u251c\u2500\u2500 test_damage_00000_image.png\n        \u2502   \u251c\u2500\u2500 test_damage_00001_image.png\n        \u2502   \u251c\u2500\u2500 test_localization_00000_image.png\n        \u2502   \u251c\u2500\u2500 test_localization_00001_image.png\n        \u2502   \u2514\u2500\u2500 ...\n        \u251c\u2500\u2500 predictions\n        \u2502   \u251c\u2500\u2500 test_damage_00000_prediction.png\n        \u2502   \u251c\u2500\u2500 test_damage_00001_prediction.png\n        \u2502   \u251c\u2500\u2500 test_localization_00000_prediction.png\n        \u2502   \u251c\u2500\u2500 test_localization_00001_prediction.png\n        \u2502   \u2514\u2500\u2500 ...\n        \u2514\u2500\u2500 targets\n            \u251c\u2500\u2500 test_damage_00000_target.png\n            \u251c\u2500\u2500 test_damage_00001_target.png\n            \u251c\u2500\u2500 test_localization_00000_target.png\n            \u251c\u2500\u2500 test_localization_00001_target.png\n            \u2514\u2500\u2500 ...\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "OUTPUT_PATH", "+", "\"images/\"", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "OUTPUT_PATH", "+", "\"images/\"", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "OUTPUT_PATH", "+", "\"predictions/\"", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "OUTPUT_PATH", "+", "\"predictions/\"", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "OUTPUT_PATH", "+", "\"targets/\"", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "OUTPUT_PATH", "+", "\"targets/\"", ")", "\n", "\n", "", "for", "file", "in", "os", ".", "listdir", "(", "INPUT_PATH", ")", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "\"-images.npy\"", ")", ":", "\n", "            ", "print", "(", "file", ")", "\n", "img", "=", "(", "np", ".", "load", "(", "INPUT_PATH", "+", "file", ")", "*", "256", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "pred", "=", "(", "np", ".", "load", "(", "INPUT_PATH", "+", "file", ".", "replace", "(", "\"-images.npy\"", ",", "\"-outs.npy\"", ")", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "targ", "=", "(", "np", ".", "load", "(", "INPUT_PATH", "+", "file", ".", "replace", "(", "\"-images.npy\"", ",", "\"-masks.npy\"", ")", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "#pred_dmg = np.argmax(pred,axis=1)", "\n", "#targ_dmg = np.argmax(targ,axis=1)", "\n", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "imwrite", "(", "OUTPUT_PATH", "+", "\"images/test_damage_\"", "+", "(", "file", ".", "replace", "(", "\"-images.npy\"", ",", "\"00\"", ")", ".", "replace", "(", "\"OutMasks-unetsmall-batch-\"", ",", "\"\"", ")", ")", "+", "str", "(", "i", ")", "+", "\"_pre.png\"", ",", "np", ".", "moveaxis", "(", "img", "[", "i", ",", ":", "3", ",", ":", ",", ":", "]", ",", "0", ",", "-", "1", ")", ")", "\n", "imwrite", "(", "OUTPUT_PATH", "+", "\"images/test_damage_\"", "+", "file", ".", "replace", "(", "\"-images.npy\"", ",", "\"00\"", ")", ".", "replace", "(", "\"OutMasks-unetsmall-batch-\"", ",", "\"\"", ")", "+", "str", "(", "i", ")", "+", "\"_post.png\"", ",", "np", ".", "moveaxis", "(", "img", "[", "i", ",", "3", ":", ",", ":", ",", ":", "]", ",", "0", ",", "-", "1", ")", ")", "\n", "\n", "\n", "\n", "#pred_max = pred[i,0,:,:]", "\n", "#for i in range(1,5):", "\n", "#    pred_max, pred_dmg = np.maximum(pred_max,pred[i,i,:,:])", "\n", "#pred_dmg = np.maximum(np.maximum(np.maximum(1*pred[i,0,:,:],2*pred[i,1,:,:]),3*pred[i,2,:,:]),4*pred[i,3,:,:])", "\n", "imwrite", "(", "OUTPUT_PATH", "+", "\"predictions/test_damage_\"", "+", "file", ".", "replace", "(", "\"-images.npy\"", ",", "\"00\"", ")", ".", "replace", "(", "\"OutMasks-unetsmall-batch-\"", ",", "\"\"", ")", "+", "str", "(", "i", ")", "+", "\"_prediction.png\"", ",", "pred", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "pred", "[", "pred", "!=", "0", "]", "=", "1", "\n", "imwrite", "(", "OUTPUT_PATH", "+", "\"predictions/test_localization_\"", "+", "file", ".", "replace", "(", "\"-images.npy\"", ",", "\"00\"", ")", ".", "replace", "(", "\"OutMasks-unetsmall-batch-\"", ",", "\"\"", ")", "+", "str", "(", "i", ")", "+", "\"_prediction.png\"", ",", "pred", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "\n", "#targ_dmg = np.maximum(np.maximum(np.maximum(1*targ[i,0,:,:],2*targ[i,1,:,:]),3*targ[i,2,:,:]),4*targ[i,3,:,:])", "\n", "imwrite", "(", "OUTPUT_PATH", "+", "\"targets/test_damage_\"", "+", "file", ".", "replace", "(", "\"-images.npy\"", ",", "\"00\"", ")", ".", "replace", "(", "\"OutMasks-unetsmall-batch-\"", ",", "\"\"", ")", "+", "str", "(", "i", ")", "+", "\"_target.png\"", ",", "targ", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "targ", "[", "targ", "!=", "0", "]", "=", "1", "\n", "imwrite", "(", "OUTPUT_PATH", "+", "\"targets/test_localization_\"", "+", "file", ".", "replace", "(", "\"-images.npy\"", ",", "\"00\"", ")", ".", "replace", "(", "\"OutMasks-unetsmall-batch-\"", ",", "\"\"", ")", "+", "str", "(", "i", ")", "+", "\"_target.png\"", ",", "targ", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.dataset.DisastersDatasetUnet.__init__": [[68, 133], ["torchvision.ToTensor", "len", "sorted", "os.listdir", "file.replace.replace.endswith", "filename.split", "list", "os.path.splitext", "len", "len", "set", "set", "file.replace.replace.replace", "dataset.DisastersDatasetUnet.__mask0.append", "dataset.DisastersDatasetUnet.__mask1.append", "dataset.DisastersDatasetUnet.__mask2.append", "dataset.DisastersDatasetUnet.__mask3.append", "dataset.DisastersDatasetUnet.__mask4.append", "dataset.DisastersDatasetUnet.__file.append", "dataset.DisastersDatasetUnet.__pre.append", "dataset.DisastersDatasetUnet.__post.append", "filename.replace", "file.replace.replace.replace", "file.replace.replace.replace", "file.replace.replace.replace", "file.replace.replace.replace", "file.replace.replace.replace", "file.replace.replace.replace"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset_folders", ",", "train", "=", "True", ",", "im_size", "=", "[", "256", ",", "256", "]", ",", "transform", "=", "tr", ".", "ToTensor", "(", ")", ",", "normalize", "=", "False", ",", "flip", "=", "False", ",", "rotate", "=", "False", ",", "rotate10", "=", "False", ",", "color", "=", "False", ",", "cut", "=", "False", ",", "disaster_list", "=", "None", ",", "SWA", "=", "False", ")", ":", "\n", "        ", "\"\"\"Initialize dataset\n\n        Args:\n            dataset_folders (list): List of Paths to dataset folders\n            train (bool, optional): If disaster_list is not given, use predefined Train/Test split (split II). Defaults to True.\n            im_size (list, optional): Input image size. Defaults to [256,256].\n            transform (torch Transforms, optional): Torch transforms to apply onto images. Defaults to tr.ToTensor().\n            normalize (bool, optional): Whether to normalize to imagenet values, this is deprecated!. Defaults to False.\n            flip (bool, optional): If True randomly flips images. Defaults to False.\n            rotate (bool, optional): If True randomly randomly makes true-grid transforms. Overwrites Flip. Defaults to False.\n            rotate10 (bool, optional): If True, rotates by angles of 10 degrees and resizes. Defaults to False.\n            color (bool, optional): If True uses color augmentations. Defaults to False.\n            disaster_list (list, optional): List of disasters to include. Overwrites train if given, else use all disasters according to flag train. Defaults to None.\n            SWA (bool, optional): For Stochastic weight averaging, outputs concated pre- and post-images in getitem. Defaults to False.\n        \"\"\"", "\n", "self", ".", "__train", "=", "train", "\n", "self", ".", "__file", "=", "[", "]", "\n", "self", ".", "__pre", "=", "[", "]", "\n", "self", ".", "__post", "=", "[", "]", "\n", "if", "self", ".", "__train", ":", "\n", "            ", "self", ".", "__mask0", "=", "[", "]", "\n", "self", ".", "__mask1", "=", "[", "]", "\n", "self", ".", "__mask2", "=", "[", "]", "\n", "self", ".", "__mask3", "=", "[", "]", "\n", "self", ".", "__mask4", "=", "[", "]", "\n", "\n", "", "self", ".", "im_ht", "=", "im_size", "[", "0", "]", "\n", "self", ".", "im_wd", "=", "im_size", "[", "1", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "flip", "=", "flip", "\n", "self", ".", "rotate", "=", "rotate", "\n", "self", ".", "rotate10", "=", "rotate10", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "cut", "=", "cut", "\n", "self", ".", "SWA", "=", "SWA", "\n", "\n", "keywords", "=", "[", "\"mask0\"", "]", "\n", "\n", "for", "folder", "in", "dataset_folders", ":", "\n", "            ", "for", "file", "in", "sorted", "(", "os", ".", "listdir", "(", "folder", ")", ")", ":", "\n", "                ", "if", "file", ".", "endswith", "(", "\".png\"", ")", ":", "\n", "                    ", "filename", "=", "os", ".", "path", ".", "splitext", "(", "file", ")", "[", "0", "]", "\n", "filename_fragments", "=", "filename", ".", "split", "(", "\"_\"", ")", "\n", "samekeywords", "=", "list", "(", "set", "(", "filename_fragments", ")", "&", "set", "(", "keywords", ")", ")", "\n", "if", "len", "(", "samekeywords", ")", "==", "len", "(", "keywords", ")", ":", "\n", "\n", "                        ", "if", "(", "(", "disaster_list", "is", "None", ")", "and", "(", "self", ".", "__train", "and", "self", ".", "disasters_in_training", "[", "filename_fragments", "[", "0", "]", "]", ")", "or", "(", "(", "not", "self", ".", "__train", ")", "and", "(", "not", "self", ".", "disasters_in_training", "[", "filename_fragments", "[", "0", "]", "]", ")", ")", ")", "or", "(", "(", "disaster_list", "is", "not", "None", ")", "and", "(", "filename_fragments", "[", "0", "]", "in", "disaster_list", ")", ")", ":", "\n", "# 1. read mask", "\n", "                            ", "file", "=", "file", ".", "replace", "(", "\"._\"", ",", "\"\"", ")", "\n", "self", ".", "__mask0", ".", "append", "(", "folder", "+", "file", ")", "\n", "self", ".", "__mask1", ".", "append", "(", "folder", "+", "file", ".", "replace", "(", "\"mask0\"", ",", "\"mask1\"", ")", ")", "\n", "self", ".", "__mask2", ".", "append", "(", "folder", "+", "file", ".", "replace", "(", "\"mask0\"", ",", "\"mask2\"", ")", ")", "\n", "self", ".", "__mask3", ".", "append", "(", "folder", "+", "file", ".", "replace", "(", "\"mask0\"", ",", "\"mask3\"", ")", ")", "\n", "self", ".", "__mask4", ".", "append", "(", "folder", "+", "file", ".", "replace", "(", "\"mask0\"", ",", "\"mask4\"", ")", ")", "\n", "# 2. read file name", "\n", "self", ".", "__file", ".", "append", "(", "filename", ".", "replace", "(", "\"_mask0\"", ",", "\"\"", ")", ")", "\n", "# 3. read pre image", "\n", "self", ".", "__pre", ".", "append", "(", "folder", "+", "file", ".", "replace", "(", "\"_mask0\"", ",", "\"_pre_disaster\"", ")", ")", "\n", "# 4. read post image", "\n", "self", ".", "__post", ".", "append", "(", "folder", "+", "file", ".", "replace", "(", "\"_mask0\"", ",", "\"_post_disaster\"", ")", ")", "\n", "\n", "", "", "", "", "", "self", ".", "dataset_size", "=", "len", "(", "self", ".", "__file", ")", "\n", "self", ".", "files", "=", "self", ".", "__file", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.dataset.DisastersDatasetUnet.__getitem__": [[135, 238], ["PIL.Image.open", "PIL.Image.open", "PIL.ImageEnhance.Sharpness().enhance.resize", "PIL.ImageEnhance.Sharpness().enhance.resize", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "mask0.rotate.rotate.resize", "mask1.rotate.rotate.resize", "mask2.rotate.rotate.resize", "mask3.rotate.rotate.resize", "mask4.rotate.rotate.resize", "dataset.DisastersDatasetUnet.transform", "dataset.DisastersDatasetUnet.transform", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "dataset.DisastersDatasetUnet.normalizer", "dataset.DisastersDatasetUnet.normalizer", "random.randint", "random.randint", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "random.random", "PIL.ImageEnhance.Sharpness().enhance.transpose", "PIL.ImageEnhance.Sharpness().enhance.transpose", "mask0.rotate.rotate.transpose", "mask1.rotate.rotate.transpose", "mask2.rotate.rotate.transpose", "mask3.rotate.rotate.transpose", "mask4.rotate.rotate.transpose", "PIL.ImageEnhance.Sharpness().enhance.transpose", "PIL.ImageEnhance.Sharpness().enhance.transpose", "mask0.rotate.rotate.transpose", "mask1.rotate.rotate.transpose", "mask2.rotate.rotate.transpose", "mask3.rotate.rotate.transpose", "mask4.rotate.rotate.transpose", "random.random", "random.gauss", "PIL.ImageEnhance.Sharpness().enhance.rotate", "PIL.ImageEnhance.Sharpness().enhance.rotate", "mask0.rotate.rotate.rotate", "mask1.rotate.rotate.rotate", "mask2.rotate.rotate.rotate", "mask3.rotate.rotate.rotate", "mask4.rotate.rotate.rotate", "random.random", "random.gauss", "random.gauss", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "random.random", "random.gauss", "random.gauss", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "random.random", "random.gauss", "random.gauss", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "random.random", "random.gauss", "random.gauss", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "random.random", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "int", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "random.random"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_pre", "=", "Image", ".", "open", "(", "self", ".", "__pre", "[", "index", "]", ")", "\n", "img_post", "=", "Image", ".", "open", "(", "self", ".", "__post", "[", "index", "]", ")", "\n", "img_pre", "=", "img_pre", ".", "resize", "(", "(", "self", ".", "im_ht", ",", "self", ".", "im_wd", ")", ")", "\n", "img_post", "=", "img_post", ".", "resize", "(", "(", "self", ".", "im_ht", ",", "self", ".", "im_wd", ")", ")", "\n", "\n", "mask0", "=", "Image", ".", "open", "(", "self", ".", "__mask0", "[", "index", "]", ")", "\n", "mask1", "=", "Image", ".", "open", "(", "self", ".", "__mask1", "[", "index", "]", ")", "\n", "mask2", "=", "Image", ".", "open", "(", "self", ".", "__mask2", "[", "index", "]", ")", "\n", "mask3", "=", "Image", ".", "open", "(", "self", ".", "__mask3", "[", "index", "]", ")", "\n", "mask4", "=", "Image", ".", "open", "(", "self", ".", "__mask4", "[", "index", "]", ")", "\n", "\n", "mask0", "=", "mask0", ".", "resize", "(", "(", "self", ".", "im_ht", ",", "self", ".", "im_wd", ")", ")", "\n", "mask1", "=", "mask1", ".", "resize", "(", "(", "self", ".", "im_ht", ",", "self", ".", "im_wd", ")", ")", "\n", "mask2", "=", "mask2", ".", "resize", "(", "(", "self", ".", "im_ht", ",", "self", ".", "im_wd", ")", ")", "\n", "mask3", "=", "mask3", ".", "resize", "(", "(", "self", ".", "im_ht", ",", "self", ".", "im_wd", ")", ")", "\n", "mask4", "=", "mask4", ".", "resize", "(", "(", "self", ".", "im_ht", ",", "self", ".", "im_wd", ")", ")", "\n", "\n", "if", "self", ".", "flip", "and", "not", "self", ".", "rotate", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "op", "=", "[", "Image", ".", "FLIP_LEFT_RIGHT", ",", "Image", ".", "FLIP_TOP_BOTTOM", "]", "[", "int", "(", "random", ".", "random", "(", ")", "*", "1.9999", ")", "]", "\n", "img_pre", "=", "img_pre", ".", "transpose", "(", "op", ")", "\n", "img_post", "=", "img_post", ".", "transpose", "(", "op", ")", "\n", "mask0", "=", "mask0", ".", "transpose", "(", "op", ")", "\n", "mask1", "=", "mask1", ".", "transpose", "(", "op", ")", "\n", "mask2", "=", "mask2", ".", "transpose", "(", "op", ")", "\n", "mask3", "=", "mask3", ".", "transpose", "(", "op", ")", "\n", "mask4", "=", "mask4", ".", "transpose", "(", "op", ")", "\n", "\n", "", "", "if", "self", ".", "rotate", ":", "\n", "            ", "opidx", "=", "int", "(", "random", ".", "random", "(", ")", "*", "7.9999", ")", "\n", "op", "=", "[", "None", ",", "None", ",", "Image", ".", "FLIP_LEFT_RIGHT", ",", "Image", ".", "FLIP_TOP_BOTTOM", ",", "Image", ".", "ROTATE_90", ",", "Image", ".", "ROTATE_180", ",", "Image", ".", "ROTATE_270", ",", "Image", ".", "TRANSPOSE", "]", "[", "opidx", "]", "\n", "if", "op", "is", "not", "None", ":", "\n", "                ", "img_pre", "=", "img_pre", ".", "transpose", "(", "op", ")", "\n", "img_post", "=", "img_post", ".", "transpose", "(", "op", ")", "\n", "mask0", "=", "mask0", ".", "transpose", "(", "op", ")", "\n", "mask1", "=", "mask1", ".", "transpose", "(", "op", ")", "\n", "mask2", "=", "mask2", ".", "transpose", "(", "op", ")", "\n", "mask3", "=", "mask3", ".", "transpose", "(", "op", ")", "\n", "mask4", "=", "mask4", ".", "transpose", "(", "op", ")", "\n", "\n", "", "", "if", "self", ".", "rotate10", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.3", ":", "\n", "                ", "angle", "=", "random", ".", "gauss", "(", "0", ",", "5", ")", "\n", "img_pre", "=", "img_pre", ".", "rotate", "(", "angle", ")", "\n", "img_post", "=", "img_post", ".", "rotate", "(", "angle", ")", "\n", "mask0", "=", "mask0", ".", "rotate", "(", "angle", ")", "\n", "mask1", "=", "mask1", ".", "rotate", "(", "angle", ")", "\n", "mask2", "=", "mask2", ".", "rotate", "(", "angle", ")", "\n", "mask3", "=", "mask3", ".", "rotate", "(", "angle", ")", "\n", "mask4", "=", "mask4", ".", "rotate", "(", "angle", ")", "\n", "\n", "\n", "", "", "if", "self", ".", "color", ">", "0", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "color", "*", "0.4", ":", "\n", "                ", "brightness_pre", "=", "random", ".", "gauss", "(", "1", ",", "0.06", ")", "\n", "brightness_post", "=", "random", ".", "gauss", "(", "1", ",", "0.06", ")", "\n", "img_pre", "=", "ImageEnhance", ".", "Brightness", "(", "img_pre", ")", ".", "enhance", "(", "brightness_pre", ")", "\n", "img_post", "=", "ImageEnhance", ".", "Brightness", "(", "img_post", ")", ".", "enhance", "(", "brightness_post", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "color", "*", "0.4", ":", "\n", "                ", "contrast_pre", "=", "random", ".", "gauss", "(", "1", ",", "0.06", ")", "\n", "contrast_post", "=", "random", ".", "gauss", "(", "1", ",", "0.06", ")", "\n", "img_pre", "=", "ImageEnhance", ".", "Contrast", "(", "img_pre", ")", ".", "enhance", "(", "contrast_pre", ")", "\n", "img_post", "=", "ImageEnhance", ".", "Contrast", "(", "img_post", ")", ".", "enhance", "(", "contrast_post", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "color", "*", "0.3", ":", "\n", "                ", "color_pre", "=", "random", ".", "gauss", "(", "1", ",", "0.03", ")", "\n", "color_post", "=", "random", ".", "gauss", "(", "1", ",", "0.03", ")", "\n", "img_pre", "=", "ImageEnhance", ".", "Color", "(", "img_pre", ")", ".", "enhance", "(", "color_pre", ")", "\n", "img_post", "=", "ImageEnhance", ".", "Color", "(", "img_post", ")", ".", "enhance", "(", "color_post", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "color", "*", "0.3", ":", "\n", "                ", "sharpness_pre", "=", "random", ".", "gauss", "(", "1", ",", "0.03", ")", "\n", "sharpness_post", "=", "random", ".", "gauss", "(", "1", ",", "0.03", ")", "\n", "img_pre", "=", "ImageEnhance", ".", "Sharpness", "(", "img_pre", ")", ".", "enhance", "(", "sharpness_pre", ")", "\n", "img_post", "=", "ImageEnhance", ".", "Sharpness", "(", "img_post", ")", ".", "enhance", "(", "sharpness_post", ")", "\n", "\n", "\n", "\n", "", "", "img_pre_tr", "=", "self", ".", "transform", "(", "img_pre", ")", "\n", "img_post_tr", "=", "self", ".", "transform", "(", "img_post", ")", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "img_pre_tr", "=", "self", ".", "normalizer", "(", "img_pre_tr", ")", "\n", "img_post_tr", "=", "self", ".", "normalizer", "(", "img_post_tr", ")", "\n", "\n", "\n", "", "mask0_tr", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "mask0", ")", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "mask1_tr", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "mask1", ")", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "mask2_tr", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "mask2", ")", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "mask3_tr", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "mask3", ")", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "mask4_tr", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "mask4", ")", ")", ".", "unsqueeze_", "(", "0", ")", "\n", "mask_input_tr", "=", "torch", ".", "cat", "(", "(", "mask0_tr", ",", "mask1_tr", ",", "mask2_tr", ",", "mask3_tr", ",", "mask4_tr", ")", ",", "0", ")", "\n", "\n", "if", "self", ".", "cut", ":", "\n", "            ", "i", "=", "random", ".", "randint", "(", "0", ",", "511", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "511", ")", "\n", "img_pre_tr", "=", "img_pre_tr", "[", ":", ",", "i", ":", "i", "+", "512", ",", "j", ":", "j", "+", "512", "]", "\n", "img_post_tr", "=", "img_post_tr", "[", ":", ",", "i", ":", "i", "+", "512", ",", "j", ":", "j", "+", "512", "]", "\n", "mask_input_tr", "=", "mask_input_tr", "[", ":", ",", "i", ":", "i", "+", "512", ",", "j", ":", "j", "+", "512", "]", "\n", "\n", "", "if", "not", "self", ".", "SWA", ":", "\n", "            ", "return", "img_pre_tr", ",", "img_post_tr", ",", "mask_input_tr", ",", "index", ",", "self", ".", "__file", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "(", "img_pre_tr", ",", "img_post_tr", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.dataset.DisastersDatasetUnet.getfilename": [[239, 241], ["None"], "methods", ["None"], ["", "", "def", "getfilename", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "__file", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.dataset.DisastersDatasetUnet.__len__": [[242, 244], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.download.DownloadProgressBar.update_to": [[34, 38], ["download.DownloadProgressBar.update"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.update"], ["    ", "def", "update_to", "(", "self", ",", "b", "=", "1", ",", "bsize", "=", "1", ",", "tsize", "=", "None", ")", ":", "\n", "        ", "if", "tsize", "is", "not", "None", ":", "\n", "            ", "self", ".", "total", "=", "tsize", "\n", "", "self", ".", "update", "(", "b", "*", "bsize", "-", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.download.download_weights": [[39, 51], ["print", "os.path.isfile", "print", "print", "download.DownloadProgressBar", "urllib.request.urlretrieve", "dl_path.split"], "function", ["None"], ["", "", "def", "download_weights", "(", "setting_name", ")", ":", "\n", "#TODO Put here the right setting -> downloadpath conversion", "\n", "    ", "dl_path", ",", "outfile", "=", "DL_LINKS", "[", "setting_name", "]", "\n", "filepath", "=", "\"../weights/\"", "+", "outfile", "\n", "print", "(", "\"Downloading from {} to {}\"", ".", "format", "(", "dl_path", ",", "filepath", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "        ", "with", "DownloadProgressBar", "(", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ",", "miniters", "=", "1", ",", "desc", "=", "dl_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "as", "t", ":", "\n", "            ", "urllib", ".", "request", ".", "urlretrieve", "(", "dl_path", ",", "filename", "=", "filepath", ",", "reporthook", "=", "t", ".", "update_to", ")", "\n", "", "print", "(", "\"Downloaded!\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"File existed allready!\"", ")", "\n", "", "return", "filepath", "\n", "", ""]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.make_dataset.process_one": [[21, 34], ["file.endswith", "filename.split", "list", "os.path.splitext", "len", "len", "load.create_multiple_mask_pngs", "augment.cut_and_resize_one", "augment.cut_and_resize_one", "range", "set", "set", "augment.cut_and_resize_one"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.create_multiple_mask_pngs", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.augment.cut_and_resize_one", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.augment.cut_and_resize_one", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.augment.cut_and_resize_one"], ["def", "process_one", "(", "file", ",", "keywords", ",", "LABEL_FOLDER", ",", "IMG_FOLDER", ",", "MASK_FOLDER", ",", "args", ")", ":", "\n", "    ", "if", "file", ".", "endswith", "(", "\".json\"", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "splitext", "(", "file", ")", "[", "0", "]", "\n", "filename_fragments", "=", "filename", ".", "split", "(", "\"_\"", ")", "\n", "samekeywords", "=", "list", "(", "set", "(", "filename_fragments", ")", "&", "set", "(", "keywords", ")", ")", "#um nur die post jsons auszuw\u00e4hlen", "\n", "if", "len", "(", "samekeywords", ")", "==", "len", "(", "keywords", ")", ":", "\n", "#print(LABEL_FOLDER)", "\n", "#print(file)", "\n", "            ", "load", ".", "create_multiple_mask_pngs", "(", "LABEL_FOLDER", ",", "file", ",", "MASK_FOLDER", ")", "\n", "augment", ".", "cut_and_resize_one", "(", "IMG_FOLDER", ",", "file", "[", ":", "-", "19", "]", "+", "\"_pre_disaster.png\"", ",", "args", ".", "output_folder", ",", "args", ".", "cutwidth", ",", "args", ".", "resizewidth", ")", "\n", "augment", ".", "cut_and_resize_one", "(", "IMG_FOLDER", ",", "file", "[", ":", "-", "5", "]", "+", "\".png\"", ",", "args", ".", "output_folder", ",", "args", ".", "cutwidth", ",", "args", ".", "resizewidth", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                ", "augment", ".", "cut_and_resize_one", "(", "MASK_FOLDER", ",", "file", "[", ":", "-", "19", "]", "+", "\"_mask%s.png\"", "%", "i", ",", "args", ".", "output_folder", ",", "args", ".", "cutwidth", ",", "args", ".", "resizewidth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.PathHandler.__init__": [[66, 87], ["isinstance", "pred_dir.is_dir", "isinstance", "targ_dir.is_dir", "type", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pred_dir", ":", "Path", ",", "targ_dir", ":", "Path", ",", "img_id", ":", "str", ",", "test_hold", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pred_dir  (Path): directory of localization and damage predictions\n            targ_dir  (Path): directory of localization and damage targets\n            img_id    (str) : 5 digit string of image id\n            test_hold (str) : either 'test' or 'hold'. Most likely 'test' unless you have access to holdout set\n        \"\"\"", "\n", "assert", "isinstance", "(", "pred_dir", ",", "Path", ")", ",", "f\"pred_dir should be of type Path, got {type(pred_dir)}\"", "\n", "assert", "pred_dir", ".", "is_dir", "(", ")", ",", "f\"Directory '{pred_dir}' does not exist or is not a directory\"", "\n", "\n", "assert", "isinstance", "(", "targ_dir", ",", "Path", ")", ",", "f\"targ_dir '{targ_dir}' should be of type Path, got {type(pred_dir)}\"", "\n", "assert", "targ_dir", ".", "is_dir", "(", ")", ",", "f\"Directory '{targ_dir}' does not exist or is not a directory\"", "\n", "\n", "assert", "test_hold", "in", "[", "'test'", ",", "'hold'", "]", ",", "f\"test_hold '{test_hold}' was not one of 'test' or 'hold'\"", "\n", "\n", "self", ".", "lp", "=", "pred_dir", "/", "f\"{test_hold}_localization_{img_id}_prediction.png\"", "# localization prediction", "\n", "self", ".", "dp", "=", "pred_dir", "/", "f\"{test_hold}_damage_{img_id}_prediction.png\"", "# damage prediction", "\n", "self", ".", "lt", "=", "targ_dir", "/", "f\"{test_hold}_localization_{img_id}_target.png\"", "# localization target", "\n", "self", ".", "dt", "=", "targ_dir", "/", "f\"{test_hold}_damage_{img_id}_target.png\"", "# damage target", "\n", "self", ".", "paths", "=", "(", "self", ".", "lp", ",", "self", ".", "dp", ",", "self", ".", "lt", ",", "self", ".", "dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.PathHandler.load_and_validate_image": [[88, 99], ["path.is_file", "numpy.array", "PIL.Image.open", "set", "numpy.unique", "numpy.unique"], "methods", ["None"], ["", "def", "load_and_validate_image", "(", "self", ",", "path", ")", ":", "\n", "        ", "assert", "path", ".", "is_file", "(", ")", ",", "f\"file '{path}' does not exist or is not a file\"", "\n", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "path", ")", ")", "\n", "assert", "img", ".", "dtype", "==", "np", ".", "uint8", ",", "f\"{path.name} is of wrong format {img.dtype} - should be np.uint8\"", "\n", "if", "\"damage\"", "in", "path", ".", "name", ":", "\n", "            ", "img", "[", "img", "==", "255", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "img", "[", "img", "==", "255", "]", "=", "1", "\n", "", "assert", "set", "(", "np", ".", "unique", "(", "img", ")", ")", "<=", "{", "0", ",", "1", ",", "2", ",", "3", ",", "4", "}", ",", "f\"values must ints 0-4, found {np.unique(img)}, path: {path}\"", "\n", "#assert img.shape == (1024,1024), f\"{path} must be a 1024x1024 image\"", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.PathHandler.load_images": [[100, 102], ["xview2_metrics.PathHandler.load_and_validate_image"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.PathHandler.load_and_validate_image"], ["", "def", "load_images", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "load_and_validate_image", "(", "path", ")", "for", "path", "in", "self", ".", "paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.RowPairCalculator.extract_buildings": [[108, 114], ["x.copy"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "extract_buildings", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\" Returns a mask of the buildings in x \"\"\"", "\n", "buildings", "=", "x", ".", "copy", "(", ")", "\n", "buildings", "[", "x", ">", "0", "]", "=", "1", "\n", "return", "buildings", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.RowPairCalculator.compute_tp_fn_fp": [[115, 129], ["numpy.logical_and().sum", "numpy.logical_and().sum", "numpy.logical_and().sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_tp_fn_fp", "(", "pred", ":", "np", ".", "ndarray", ",", "targ", ":", "np", ".", "ndarray", ",", "c", ":", "int", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "\"\"\"\n        Computes the number of TPs, FNs, FPs, between a prediction (x) and a target (y) for the desired class (c)\n\n        Args:\n            pred (np.ndarray): prediction\n            targ (np.ndarray): target\n            c (int): positive class\n        \"\"\"", "\n", "TP", "=", "np", ".", "logical_and", "(", "pred", "==", "c", ",", "targ", "==", "c", ")", ".", "sum", "(", ")", "\n", "FN", "=", "np", ".", "logical_and", "(", "pred", "!=", "c", ",", "targ", "==", "c", ")", ".", "sum", "(", ")", "\n", "FP", "=", "np", ".", "logical_and", "(", "pred", "==", "c", ",", "targ", "!=", "c", ")", ".", "sum", "(", ")", "\n", "return", "[", "TP", ",", "FN", ",", "FP", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.RowPairCalculator.get_row_pair": [[130, 149], ["ph.load_images", "map", "cls.compute_tp_fn_fp", "range", "cls.compute_tp_fn_fp"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.PathHandler.load_images", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.compute_tp_fn_fp", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.compute_tp_fn_fp"], ["", "@", "classmethod", "\n", "def", "get_row_pair", "(", "cls", ",", "ph", ":", "PathHandler", ")", ":", "\n", "        ", "\"\"\"\n        Builds a row of TPs, FNs, and FPs for both the localization dataframe and the damage dataframe.\n        This pair of rows are built in the same function as damages are only assessed where buildings are predicted. \n\n        Args:\n            ph (PathHandler): used to load the required prediction and target images\n        \"\"\"", "\n", "lp", ",", "dp", ",", "lt", ",", "dt", "=", "ph", ".", "load_images", "(", ")", "\n", "lp_b", ",", "lt_b", ",", "dt_b", "=", "map", "(", "cls", ".", "extract_buildings", ",", "(", "lp", ",", "lt", ",", "dt", ")", ")", "# convert all damage scores 1-4 to 1", "\n", "\n", "dp", "=", "dp", "*", "lp_b", "# only give credit to damages where buildings are predicted", "\n", "dp", ",", "dt", "=", "dp", "[", "dt_b", "==", "1", "]", ",", "dt", "[", "dt_b", "==", "1", "]", "# only score damage where there exist buildings in target damage", "\n", "\n", "lrow", "=", "cls", ".", "compute_tp_fn_fp", "(", "lp_b", ",", "lt_b", ",", "1", ")", "\n", "drow", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "5", ")", ":", "drow", "+=", "cls", ".", "compute_tp_fn_fp", "(", "dp", ",", "dt", ",", "i", ")", "\n", "return", "lrow", ",", "drow", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.F1Recorder.__init__": [[156, 168], ["xview2_metrics.F1Recorder.precision", "xview2_metrics.F1Recorder.recall", "xview2_metrics.F1Recorder.f1"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.F1Recorder.precision", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.F1Recorder.recall", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.F1Recorder.f1"], ["def", "__init__", "(", "self", ",", "TP", ",", "FP", ",", "FN", ",", "name", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            TP (int): true positives\n            FP (int): false positives\n            FN (int): false negatives\n            name (str): optional name when printing\n        \"\"\"", "\n", "self", ".", "TP", ",", "self", ".", "FN", ",", "self", ".", "FP", ",", "self", ".", "name", "=", "TP", ",", "FN", ",", "FP", ",", "name", "\n", "self", ".", "P", "=", "self", ".", "precision", "(", ")", "\n", "self", ".", "R", "=", "self", ".", "recall", "(", ")", "\n", "self", ".", "f1", "=", "self", ".", "f1", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.F1Recorder.__repr__": [[169, 171], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.name} | f1: {self.f1:.4f}, precision: {self.P:.4f}, recall: {self.R:.4f}'", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.F1Recorder.precision": [[172, 177], ["None"], "methods", ["None"], ["", "def", "precision", "(", "self", ")", ":", "\n", "        ", "\"\"\" calculates the precision using the true positives (self.TP) and false positives (self.FP)\"\"\"", "\n", "assert", "self", ".", "TP", ">=", "0", "and", "self", ".", "FP", ">=", "0", "\n", "if", "self", ".", "TP", "==", "0", ":", "return", "0", "\n", "else", ":", "return", "self", ".", "TP", "/", "(", "self", ".", "TP", "+", "self", ".", "FP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.F1Recorder.recall": [[178, 183], ["None"], "methods", ["None"], ["", "def", "recall", "(", "self", ")", ":", "\n", "        ", "\"\"\" calculates recall using the true positives (self.TP) and false negatives (self.FN) \"\"\"", "\n", "assert", "self", ".", "TP", ">=", "0", "and", "self", ".", "FN", ">=", "0", "\n", "if", "self", ".", "TP", "==", "0", ":", "return", "0", "\n", "return", "self", ".", "TP", "/", "(", "self", ".", "TP", "+", "self", ".", "FN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.F1Recorder.f1": [[184, 189], ["None"], "methods", ["None"], ["", "def", "f1", "(", "self", ")", ":", "\n", "        ", "\"\"\" calculates the f1 score using precision (self.P) and recall (self.R) \"\"\"", "\n", "assert", "0", "<=", "self", ".", "P", "<=", "1", "and", "0", "<=", "self", ".", "R", "<=", "1", "\n", "if", "self", ".", "P", "==", "0", "or", "self", ".", "R", "==", "0", ":", "return", "0", "\n", "return", "(", "2", "*", "self", ".", "P", "*", "self", ".", "R", ")", "/", "(", "self", ".", "P", "+", "self", ".", "R", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.XviewMetrics.__init__": [[211, 225], ["xview2_metrics.XviewMetrics.pred_dir.is_dir", "xview2_metrics.XviewMetrics.targ_dir.is_dir", "xview2_metrics.XviewMetrics.get_path_handlers", "xview2_metrics.XviewMetrics.get_dfs", "xview2_metrics.XviewMetrics.get_lf1r", "xview2_metrics.XviewMetrics.get_df1rs", "pathlib.Path", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.get_path_handlers", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.get_dfs", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.get_lf1r", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.get_df1rs"], ["def", "__init__", "(", "self", ",", "pred_dir", ",", "targ_dir", ")", ":", "\n", "        ", "self", ".", "pred_dir", ",", "self", ".", "targ_dir", "=", "Path", "(", "pred_dir", ")", ",", "Path", "(", "targ_dir", ")", "\n", "assert", "self", ".", "pred_dir", ".", "is_dir", "(", ")", ",", "f\"Could not find prediction directory: '{pred_dir}'\"", "\n", "assert", "self", ".", "targ_dir", ".", "is_dir", "(", ")", ",", "f\"Could not find target directory: '{targ_dir}'\"", "\n", "\n", "self", ".", "dmg2str", "=", "{", "1", ":", "f'No damage     (1) '", ",", "\n", "2", ":", "f'Minor damage  (2) '", ",", "\n", "3", ":", "f'Major damage  (3) '", ",", "\n", "4", ":", "f'Destroyed     (4) '", "}", "\n", "\n", "self", ".", "get_path_handlers", "(", ")", "\n", "self", ".", "get_dfs", "(", ")", "\n", "self", ".", "get_lf1r", "(", ")", "\n", "self", ".", "get_df1rs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.XviewMetrics.__repr__": [[226, 238], ["s.rstrip"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "'Localization:\\n'", "\n", "s", "+=", "f'    {self.lf1r}\\n'", "\n", "\n", "s", "+=", "'\\nDamage:\\n'", "\n", "for", "F1Rec", "in", "self", ".", "df1rs", ":", "\n", "            ", "s", "+=", "f'    {F1Rec}\\n'", "\n", "", "s", "+=", "f'    Harmonic mean dmgs | f1: {self.df1:.4f}\\n'", "\n", "\n", "s", "+=", "'\\nScore:\\n'", "\n", "s", "+=", "f'    Score | f1: {self.score:.4f}\\n'", "\n", "return", "s", ".", "rstrip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.XviewMetrics.get_path_handlers": [[239, 247], ["xview2_metrics.XviewMetrics.targ_dir.glob", "path.name.rstrip().split", "xview2_metrics.XviewMetrics.path_handlers.append", "path.name.rstrip", "xview2_metrics.PathHandler"], "methods", ["None"], ["", "def", "get_path_handlers", "(", "self", ")", ":", "\n", "        ", "self", ".", "path_handlers", "=", "[", "]", "\n", "for", "path", "in", "self", ".", "targ_dir", ".", "glob", "(", "'*.png'", ")", ":", "\n", "            ", "test_hold", ",", "loc_dmg", ",", "img_id", ",", "target", "=", "path", ".", "name", ".", "rstrip", "(", "'.png'", ")", ".", "split", "(", "'_'", ")", "\n", "assert", "loc_dmg", "in", "[", "'localization'", ",", "'damage'", "]", ",", "f\"target filenames must have 'localization' or 'damage' in filename, got {path}\"", "\n", "assert", "target", "==", "'target'", ",", "f\"{target} should equal 'target' when getting path handlers\"", "\n", "if", "loc_dmg", "==", "'localization'", ":", "# localization or damage is fine here", "\n", "                ", "self", ".", "path_handlers", ".", "append", "(", "PathHandler", "(", "self", ".", "pred_dir", ",", "self", ".", "targ_dir", ",", "img_id", ",", "test_hold", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.XviewMetrics.get_dfs": [[248, 262], ["pandas.DataFrame", "pandas.DataFrame", "multiprocessing.Pool", "p.map"], "methods", ["None"], ["", "", "", "def", "get_dfs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        builds the localization dataframe (self.ldf) and damage dataframe (self.ddf) from\n        path handlers (self.path_handlers)\n        \"\"\"", "\n", "with", "Pool", "(", ")", "as", "p", ":", "\n", "            ", "all_rows", "=", "p", ".", "map", "(", "RowPairCalculator", ".", "get_row_pair", ",", "self", ".", "path_handlers", ")", "\n", "\n", "", "lcolumns", "=", "[", "'lTP'", ",", "'lFN'", ",", "'lFP'", "]", "\n", "self", ".", "ldf", "=", "pd", ".", "DataFrame", "(", "[", "lrow", "for", "lrow", ",", "drow", "in", "all_rows", "]", ",", "columns", "=", "lcolumns", ")", "\n", "\n", "dcolumns", "=", "[", "'dTP1'", ",", "'dFN1'", ",", "'dFP1'", ",", "'dTP2'", ",", "'dFN2'", ",", "'dFP2'", ",", "\n", "'dTP3'", ",", "'dFN3'", ",", "'dFP3'", ",", "'dTP4'", ",", "'dFN4'", ",", "'dFP4'", "]", "\n", "self", ".", "ddf", "=", "pd", ".", "DataFrame", "(", "[", "drow", "for", "lrow", ",", "drow", "in", "all_rows", "]", ",", "columns", "=", "dcolumns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.XviewMetrics.get_lf1r": [[263, 269], ["xview2_metrics.XviewMetrics.ldf[].sum", "xview2_metrics.XviewMetrics.ldf[].sum", "xview2_metrics.XviewMetrics.ldf[].sum", "xview2_metrics.F1Recorder"], "methods", ["None"], ["", "def", "get_lf1r", "(", "self", ")", ":", "\n", "        ", "\"\"\" localization f1 recorder \"\"\"", "\n", "TP", "=", "self", ".", "ldf", "[", "'lTP'", "]", ".", "sum", "(", ")", "\n", "FP", "=", "self", ".", "ldf", "[", "'lFP'", "]", ".", "sum", "(", ")", "\n", "FN", "=", "self", ".", "ldf", "[", "'lFN'", "]", ".", "sum", "(", ")", "\n", "self", ".", "lf1r", "=", "F1Recorder", "(", "TP", ",", "FP", ",", "FN", ",", "'Buildings'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.XviewMetrics.lf1": [[270, 274], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "lf1", "(", "self", ")", ":", "\n", "        ", "\"\"\" localization f1 \"\"\"", "\n", "return", "self", ".", "lf1r", ".", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.XviewMetrics.get_df1rs": [[275, 283], ["range", "xview2_metrics.XviewMetrics.ddf[].sum", "xview2_metrics.XviewMetrics.ddf[].sum", "xview2_metrics.XviewMetrics.ddf[].sum", "xview2_metrics.XviewMetrics.df1rs.append", "xview2_metrics.F1Recorder"], "methods", ["None"], ["", "def", "get_df1rs", "(", "self", ")", ":", "\n", "        ", "\"\"\" damage f1 recorders \"\"\"", "\n", "self", ".", "df1rs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "            ", "TP", "=", "self", ".", "ddf", "[", "f'dTP{i}'", "]", ".", "sum", "(", ")", "\n", "FP", "=", "self", ".", "ddf", "[", "f'dFP{i}'", "]", ".", "sum", "(", ")", "\n", "FN", "=", "self", ".", "ddf", "[", "f'dFN{i}'", "]", ".", "sum", "(", ")", "\n", "self", ".", "df1rs", ".", "append", "(", "F1Recorder", "(", "TP", ",", "FP", ",", "FN", ",", "self", ".", "dmg2str", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.XviewMetrics.df1s": [[284, 288], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "df1s", "(", "self", ")", ":", "\n", "        ", "\"\"\" damage f1s \"\"\"", "\n", "return", "[", "F1", ".", "f1", "for", "F1", "in", "self", ".", "df1rs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.XviewMetrics.df1": [[289, 294], ["harmonic_mean", "len", "sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "df1", "(", "self", ")", ":", "\n", "        ", "\"\"\" damage f1. Computed using harmonic mean of damage f1s \"\"\"", "\n", "harmonic_mean", "=", "lambda", "xs", ":", "len", "(", "xs", ")", "/", "sum", "(", "(", "x", "+", "1e-6", ")", "**", "-", "1", "for", "x", "in", "xs", ")", "\n", "return", "harmonic_mean", "(", "self", ".", "df1s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.XviewMetrics.score": [[295, 299], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "score", "(", "self", ")", ":", "\n", "        ", "\"\"\" xview2 score computed as a weighted average of the localization f1 and damage f1 \"\"\"", "\n", "return", "0.3", "*", "self", ".", "lf1", "+", "0.7", "*", "self", ".", "df1", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.XviewMetrics.compute_score": [[300, 322], ["print", "cls", "print", "print", "open", "json.dump", "multiprocessing.cpu_count"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "compute_score", "(", "cls", ",", "pred_dir", ",", "targ_dir", ",", "out_fp", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pred_dir (str): directory of localization and damage predictions\n            targ_dir (str): directory of localization and damage targets\n            out_fp   (str): output json - folder must already exist\n        \"\"\"", "\n", "print", "(", "f\"Calculating metrics using {cpu_count()} cpus...\"", ")", "\n", "\n", "self", "=", "cls", "(", "pred_dir", ",", "targ_dir", ")", "\n", "\n", "d", "=", "{", "'score'", ":", "self", ".", "score", ",", "\n", "'damage_f1'", ":", "self", ".", "df1", ",", "\n", "'localization_f1'", ":", "self", ".", "lf1", "}", "\n", "d", "[", "'damage_f1_no_damage'", "]", "=", "self", ".", "df1s", "[", "0", "]", "\n", "d", "[", "'damage_f1_minor_damage'", "]", "=", "self", ".", "df1s", "[", "1", "]", "\n", "d", "[", "'damage_f1_major_damage'", "]", "=", "self", ".", "df1s", "[", "2", "]", "\n", "d", "[", "'damage_f1_destroyed'", "]", "=", "self", ".", "df1s", "[", "3", "]", "\n", "print", "(", "d", ")", "\n", "with", "open", "(", "out_fp", ",", "'w'", ")", "as", "f", ":", "json", ".", "dump", "(", "d", ",", "f", ")", "\n", "print", "(", "f\"Wrote metrics to {out_fp}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.xview2_metrics.compute_tp_fn_fp": [[59, 64], ["numpy.logical_and().sum", "numpy.logical_and().sum", "numpy.logical_and().sum", "numpy.array", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "function", ["None"], ["def", "compute_tp_fn_fp", "(", "pred", ",", "targ", ",", "c", ")", ":", "\n", "    ", "TP", "=", "np", ".", "logical_and", "(", "pred", "==", "c", ",", "targ", "==", "c", ")", ".", "sum", "(", ")", "\n", "FN", "=", "np", ".", "logical_and", "(", "pred", "!=", "c", ",", "targ", "==", "c", ")", ".", "sum", "(", ")", "\n", "FP", "=", "np", ".", "logical_and", "(", "pred", "==", "c", ",", "targ", "!=", "c", ")", ".", "sum", "(", ")", "\n", "return", "np", ".", "array", "(", "[", "TP", ",", "FN", ",", "FP", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller._get_momenta": [[37, 40], ["issubclass"], "function", ["None"], ["def", "_get_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "momenta", "[", "module", "]", "=", "module", ".", "momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller._set_momenta": [[42, 45], ["issubclass"], "function", ["None"], ["", "", "def", "_set_momenta", "(", "module", ",", "momenta", ")", ":", "\n", "    ", "if", "issubclass", "(", "module", ".", "__class__", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "        ", "module", ".", "momentum", "=", "momenta", "[", "module", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.adjust_learning_rate": [[46, 50], ["float"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "base_lr", ",", "max_iters", ",", "cur_iters", ",", "power", "=", "0.9", ")", ":", "\n", "    ", "lr", "=", "base_lr", "*", "(", "(", "1", "-", "float", "(", "cur_iters", ")", "/", "max_iters", ")", "**", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.train": [[52, 333], ["torch.device", "torch.device", "torch.device", "time.time", "str", "range", "model.load_state_dict", "datetime.datetime.now().timestamp", "torch.lr_scheduler.ReduceLROnPlateau", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "sum", "torch.load", "torch.load", "torch.load", "datetime.datetime.now", "model.train", "print", "os.path.join", "len", "sorted", "random.sample", "enumerate", "enumerate", "numpy.zeros", "torch.save", "torch.save", "torch.save", "time.time", "print", "sorted", "list", "len", "len", "iter", "next", "optimizer.zero_grad", "torch.argmax.to().long", "torch.cat", "torch.cat", "torch.cat", "images.to.to", "criterion.backward", "optimizer.step", "print", "optimizer.zero_grad", "torch.argmax.to().long", "torch.cat", "torch.cat", "torch.cat", "images.to.to", "criterion.backward", "optimizer.step", "print", "len", "numpy.zeros", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "utils.xview2_metrics.F1Recorder", "enumerate", "sum", "model.state_dict", "optimizer.state_dict", "os.path.join", "open", "json.dump", "optim.lr_scheduler.ReduceLROnPlateau.step", "list", "dataloaders[].keys", "dataloaders[].keys", "caller.adjust_learning_rate", "torch.argmax", "torch.argmax", "torch.argmax", "model", "criterion", "model", "criterion", "criterion.item", "len", "caller.adjust_learning_rate", "torch.argmax", "torch.argmax", "torch.argmax", "model", "criterion", "model", "criterion", "criterion.item", "len", "range", "sorted", "enumerate", "dmgF1s.append", "model.load_state_dict", "os.path.join", "dataloaders[].keys", "range", "torch.argmax.to", "torch.argmax.to", "list", "print", "len", "model.train", "model.apply", "tqdm.tqdm", "model.eval", "model.apply", "print", "tqdm.tqdm", "torch.argmax.to().long", "torch.cat", "torch.cat", "torch.cat", "images.to.to", "torch.where", "torch.where", "torch.where", "utils.xview2_metrics.compute_tp_fn_fp", "len", "len", "dataloaders[].keys", "enumerate", "torch.cat", "torch.cat", "torch.cat", "images.to.to", "momenta.keys", "model", "enumerate", "torch.argmax.to().long", "torch.cat", "torch.cat", "torch.cat", "images.to.to", "torch.where", "torch.where", "torch.where", "utils.xview2_metrics.compute_tp_fn_fp", "torch.argmax", "torch.argmax", "torch.argmax", "model", "criterion", "model", "criterion", "torch.argmax", "torch.argmax", "torch.argmax", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.argmax", "torch.argmax", "torch.argmax", "torch.where", "torch.where", "torch.where", "torch.where.data.byte().cpu().numpy", "torch.where.data.byte().cpu().numpy", "range", "criterion.item", "len", "utils.xview2_metrics.F1Recorder", "torch.load", "torch.load", "torch.load", "criterion.item", "len", "criterion.item", "caller._get_momenta", "len", "float", "caller._set_momenta", "len", "torch.argmax", "torch.argmax", "torch.argmax", "model", "criterion", "model", "criterion", "torch.argmax", "torch.argmax", "torch.argmax", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.argmax", "torch.argmax", "torch.argmax", "torch.where", "torch.where", "torch.where", "torch.where.data.byte().cpu().numpy", "torch.where.data.byte().cpu().numpy", "range", "criterion.item", "len", "torch.argmax.to", "len", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "utils.xview2_metrics.compute_tp_fn_fp", "os.path.join", "len", "len", "len", "len", "torch.argmax.to", "len", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "utils.xview2_metrics.compute_tp_fn_fp", "torch.where.data.byte().cpu", "torch.where.data.byte().cpu", "torch.argmax.data.byte().cpu().numpy", "dmg_target.data.byte().cpu().numpy", "torch.where.data.byte().cpu", "torch.where.data.byte().cpu", "torch.argmax.data.byte().cpu().numpy", "dmg_target.data.byte().cpu().numpy", "torch.where.data.byte", "torch.where.data.byte", "torch.argmax.data.byte().cpu", "dmg_target.data.byte().cpu", "torch.where.data.byte", "torch.where.data.byte", "torch.argmax.data.byte().cpu", "dmg_target.data.byte().cpu", "torch.argmax.data.byte", "dmg_target.data.byte", "torch.argmax.data.byte", "dmg_target.data.byte"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.compute_tp_fn_fp", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.compute_tp_fn_fp", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._get_momenta", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._set_momenta", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.compute_tp_fn_fp", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.compute_tp_fn_fp"], ["", "def", "train", "(", "model", ",", "dataloaders", ",", "criterion", ",", "optimizer", ",", "num_epochs", ",", "output_path_loss", ",", "output_path_weights", ",", "start_epoch", "=", "1", ",", "loss_dict", "=", "{", "}", ",", "lr_patience", "=", "5", ",", "lr_factor", "=", "0.1", ",", "dice", "=", "False", ",", "seperate_loss", "=", "False", ",", "adabn", "=", "False", ",", "own_sheduler", "=", "True", ")", ":", "\n", "  ", "\"\"\"Caller function to train model\n\n  Call this function to train a model on the xBD dataset. Creates checkpoints of weights, optimizer state, epoch number and loss dictionary at each epoch. Uses a learning rate sheduler when validation loss does not improve. Run validation on validation dataset after each epoch. Outputs loss as a json.\n\n  Example:\n    Training a TwoStream ResNet50:\n    >>> model = TwoStream_Resnet50_Diff()\n    >>> optimizer = optim.Adam(model.parameters(), lr=0.001, betas=(0.9, 0.999))\n    >>> criterion = nn.CrossEntropyLoss()\n    >>> dataloaders = {'train': train_loader, 'val': val_loader}\n    >>> train(model, dataloaders, criterion, optimizer, 10, '/logs/', '/weights/')\n  \n  Args:\n      model (torch.nn.Module): The PyTorch model to use\n      dataloaders (dict): Is a dict with two keys 'train' and 'val' which correspond to the train resp. validation PyTorch dataloaders\n      criterion (torch.nn.Module): PyTorch criterion to calculate loss\n      optimizer (torch.optim.Optimizer): PyTorch optimizer\n      num_epochs (int): number of epochs to train for\n      output_path_loss (str): Path to output file with loss-list to\n      output_path_weights (str): Path to output weights to\n      start_epoch (int, optional): Epoch from which to start training, used for checkpointing. Defaults to 1.\n      loss_dict (dict, optional): Loss_dict of previous epochs, needs to be aligned with start_epoch. Defaults to {}.\n      lr_patience (int, optional): Patience used for learning rate sheduler, if there has been no improvement for lr_patience epochs in the validation loss, then learning rate is adjusted by factor lr_factor and weights are restored from best weights so far. Defaults to 5.\n      lr_factor (float, optional): factor to adjust learning rate by if sheduler is triggered. Defaults to 0.1.\n      dice (bool, optional): If using dice-loss or another loss that requires masks not to be argmaxed set to True. Defaults to False.\n      seperate_loss (bool, optional): If using a model with two seperate heads for localization and damage set to True. Does not work with dice=True. Defaults to False.\n  \"\"\"", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "starttime", "=", "time", ".", "time", "(", ")", "\n", "starttimestamp", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "timestamp", "(", ")", ")", "\n", "if", "own_sheduler", ":", "\n", "    ", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "lr_factor", ",", "patience", "=", "lr_patience", ",", "min_lr", "=", "0.000001", ")", "\n", "", "else", ":", "\n", "    ", "base_lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "if", "not", "adabn", ":", "\n", "      ", "iters_per_epoch", "=", "len", "(", "dataloaders", "[", "\"train\"", "]", ")", "\n", "total_iters", "=", "iters_per_epoch", "*", "num_epochs", "\n", "", "else", ":", "\n", "      ", "iters_per_epoch", "=", "sum", "(", "[", "len", "(", "dataloaders", "[", "\"train\"", "]", "[", "dis", "]", ")", "for", "dis", "in", "sorted", "(", "list", "(", "dataloaders", "[", "\"train\"", "]", ".", "keys", "(", ")", ")", ")", "]", ")", "\n", "total_iters", "=", "iters_per_epoch", "*", "num_epochs", "\n", "", "", "best_epoch", "=", "1", "\n", "best_val_loss", "=", "100", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "start_epoch", "+", "num_epochs", ")", ":", "\n", "    ", "if", "not", "own_sheduler", ":", "\n", "      ", "cur_iters", "=", "epoch", "*", "iters_per_epoch", "\n", "", "for", "phase", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "      ", "if", "phase", "==", "'train'", ":", "\n", "\n", "        ", "model", ".", "train", "(", ")", "\n", "running_loss", "=", "0.0", "\n", "\n", "if", "adabn", ":", "\n", "          ", "all_batches", "=", "[", "]", "\n", "total_len", "=", "0", "\n", "for", "disaster", "in", "sorted", "(", "list", "(", "dataloaders", "[", "phase", "]", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "all_batches", "+=", "[", "(", "disaster", ",", "idx", ")", "for", "idx", "in", "range", "(", "len", "(", "dataloaders", "[", "phase", "]", "[", "disaster", "]", ")", ")", "]", "\n", "total_len", "+=", "len", "(", "dataloaders", "[", "phase", "]", "[", "disaster", "]", ".", "dataset", ")", "\n", "", "all_batches", "=", "random", ".", "sample", "(", "all_batches", ",", "len", "(", "all_batches", ")", ")", "\n", "\n", "iterators", "=", "{", "disaster", ":", "iter", "(", "dataloaders", "[", "phase", "]", "[", "disaster", "]", ")", "for", "disaster", "in", "dataloaders", "[", "phase", "]", ".", "keys", "(", ")", "}", "\n", "\n", "for", "batch_idx", ",", "(", "disaster", ",", "idx", ")", "in", "enumerate", "(", "all_batches", ")", ":", "\n", "            ", "if", "not", "own_sheduler", ":", "\n", "              ", "lr", "=", "adjust_learning_rate", "(", "optimizer", ",", "base_lr", ",", "total_iters", ",", "batch_idx", "+", "cur_iters", ")", "\n", "", "images_pre", ",", "images_post", ",", "masks", ",", "_", ",", "_", "=", "next", "(", "iterators", "[", "disaster", "]", ")", "\n", "if", "not", "dice", ":", "\n", "              ", "masks", "=", "torch", ".", "argmax", "(", "masks", ",", "dim", "=", "1", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "masks", "=", "masks", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "images", "=", "torch", ".", "cat", "(", "(", "images_pre", ",", "images_post", ")", ",", "1", ")", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "if", "seperate_loss", ":", "\n", "              ", "loc", ",", "dmg", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "loc", ",", "dmg", ",", "masks", ")", "\n", "", "else", ":", "\n", "              ", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "masks", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tBatch Loss: {:.6f}\\tDisaster: {}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "images", ")", ",", "total_len", ",", "100.", "*", "batch_idx", "/", "len", "(", "all_batches", ")", ",", "loss", ".", "item", "(", ")", ",", "disaster", ")", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")", ")", "\n", "#print(torch.cuda.memory_summary(0))", "\n", "#print(torch.cuda.memory_summary(1))", "\n", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "*", "len", "(", "images", ")", "\n", "", "epoch_loss", "=", "running_loss", "/", "total_len", "\n", "del", "iterators", "\n", "\n", "", "else", ":", "\n", "          ", "for", "batch_idx", ",", "(", "images_pre", ",", "images_post", ",", "masks", ",", "_", ",", "_", ")", "in", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ":", "\n", "            ", "if", "not", "own_sheduler", ":", "\n", "              ", "lr", "=", "adjust_learning_rate", "(", "optimizer", ",", "base_lr", ",", "total_iters", ",", "batch_idx", "+", "cur_iters", ")", "\n", "", "if", "not", "dice", ":", "\n", "              ", "masks", "=", "torch", ".", "argmax", "(", "masks", ",", "dim", "=", "1", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "masks", "=", "masks", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "images", "=", "torch", ".", "cat", "(", "(", "images_pre", ",", "images_post", ")", ",", "1", ")", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "if", "seperate_loss", ":", "\n", "              ", "loc", ",", "dmg", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "loc", ",", "dmg", ",", "masks", ")", "\n", "", "else", ":", "\n", "              ", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "masks", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tBatch Loss: {:.6f}'", ".", "format", "(", "epoch", ",", "batch_idx", "*", "len", "(", "images", ")", ",", "len", "(", "dataloaders", "[", "phase", "]", ".", "dataset", ")", ",", "100.", "*", "batch_idx", "/", "len", "(", "dataloaders", "[", "phase", "]", ")", ",", "loss", ".", "item", "(", ")", ")", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")", ")", "\n", "\n", "#print(torch.cuda.memory_summary(0))", "\n", "#print(torch.cuda.memory_summary(1))", "\n", "#print(lr)", "\n", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "*", "len", "(", "images", ")", "\n", "", "epoch_loss", "=", "running_loss", "/", "len", "(", "dataloaders", "[", "phase", "]", ".", "dataset", ")", "\n", "\n", "\n", "", "", "elif", "phase", "==", "'val'", ":", "\n", "        ", "lrow", "=", "np", ".", "zeros", "(", "3", ")", "\n", "drow", "=", "[", "np", ".", "zeros", "(", "3", ")", "for", "k", "in", "range", "(", "4", ")", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "model", ".", "eval", "(", ")", "\n", "running_loss", "=", "0.0", "\n", "\n", "if", "adabn", ":", "\n", "            ", "total_len", "=", "0", "\n", "for", "disaster", "in", "sorted", "(", "list", "(", "dataloaders", "[", "phase", "]", ".", "keys", "(", ")", ")", ")", ":", "\n", "              ", "print", "(", "\"Adapting {} for validation\"", ".", "format", "(", "disaster", ")", ")", "\n", "total_len", "+=", "len", "(", "dataloaders", "[", "phase", "]", "[", "disaster", "]", ".", "dataset", ")", "\n", "n", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "momenta", "=", "{", "}", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_get_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "for", "batch_idx", ",", "(", "images_pre", ",", "images_post", ",", "masks", ",", "_", ",", "_", ")", "in", "tqdm", "(", "enumerate", "(", "dataloaders", "[", "phase", "]", "[", "disaster", "]", ")", ",", "total", "=", "len", "(", "dataloaders", "[", "phase", "]", "[", "disaster", "]", ")", ")", ":", "\n", "                ", "images", "=", "torch", ".", "cat", "(", "(", "images_pre", ",", "images_post", ")", ",", "1", ")", "\n", "images", "=", "images", ".", "to", "(", "0", ")", "\n", "b", "=", "images", ".", "shape", "[", "0", "]", "\n", "#new_imgs = []", "\n", "#for i in range(images.shape[0]):", "\n", "#  curr = images[i,...]", "\n", "#  if (1.0*(curr.sum(0) == 0)).mean() < 0.03:", "\n", "#    new_imgs.append(curr)", "\n", "#b = len(new_imgs)", "\n", "#if b > 0:", "\n", "#  images = torch.stack(new_imgs,0)", "\n", "#  images = images.to(0)", "\n", "#  limit = 128 if images.shape[-1] == 1024 else 512", "\n", "#  if len(dataloader)*images_pre.shape[0] < limit:", "\n", "#    momentum = b / float(n + b + (limit-len(dataloader)*images_pre.shape[0]))", "\n", "#  else:", "\n", "momentum", "=", "b", "/", "float", "(", "n", "+", "b", ")", "\n", "for", "module", "in", "momenta", ".", "keys", "(", ")", ":", "\n", "                  ", "module", ".", "momentum", "=", "momentum", "\n", "", "_", "=", "model", "(", "images", ")", "\n", "n", "+=", "b", "\n", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_set_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "#if len(dataloader) > 0:", "\n", "#  print(len(dataloader)*images_pre.shape[0], n)", "\n", "\n", "print", "(", "\"evaluating\"", ")", "\n", "for", "batch_idx", ",", "(", "images_pre", ",", "images_post", ",", "masks", ",", "_", ",", "_", ")", "in", "tqdm", "(", "enumerate", "(", "dataloaders", "[", "phase", "]", "[", "disaster", "]", ")", ",", "total", "=", "len", "(", "dataloaders", "[", "phase", "]", "[", "disaster", "]", ")", ")", ":", "\n", "                ", "if", "not", "dice", ":", "\n", "                  ", "masks", "=", "torch", ".", "argmax", "(", "masks", ",", "dim", "=", "1", ")", "\n", "", "masks", "=", "masks", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "images", "=", "torch", ".", "cat", "(", "(", "images_pre", ",", "images_post", ")", ",", "1", ")", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "if", "seperate_loss", ":", "\n", "                  ", "loc", ",", "dmg", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "loc", ",", "dmg", ",", "masks", ")", "\n", "", "else", ":", "\n", "                  ", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "masks", ")", "\n", "\n", "", "dmg_target", "=", "masks", "if", "not", "dice", "else", "torch", ".", "argmax", "(", "masks", ",", "1", ")", "\n", "loc_target", "=", "torch", ".", "where", "(", "dmg_target", ">", "0", ",", "torch", ".", "ones_like", "(", "dmg_target", ")", ",", "torch", ".", "zeros_like", "(", "dmg_target", ")", ")", "\n", "if", "output", ".", "shape", "[", "1", "]", "!=", "1", "and", "len", "(", "output", ".", "shape", ")", "==", "4", ":", "\n", "                  ", "dmg_pred", "=", "torch", ".", "argmax", "(", "output", ",", "1", ")", "\n", "loc_mode", "=", "False", "\n", "loc_pred", "=", "torch", ".", "where", "(", "dmg_pred", ">", "0", ",", "torch", ".", "ones_like", "(", "dmg_pred", ")", ",", "torch", ".", "zeros_like", "(", "dmg_pred", ")", ")", "\n", "", "else", ":", "\n", "                  ", "loc_mode", "=", "True", "\n", "loc_pred", "=", "(", "1", "*", "(", "output", ">", "0.5", ")", ")", "\n", "if", "len", "(", "loc_pred", ".", "shape", ")", "==", "4", ":", "\n", "                    ", "loc_pred", "=", "loc_pred", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "\n", "", "", "lrow", "+=", "compute_tp_fn_fp", "(", "loc_pred", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "loc_target", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "1", ")", "\n", "\n", "if", "not", "loc_mode", ":", "\n", "                  ", "for", "c", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "                    ", "drow", "[", "c", "-", "1", "]", "+=", "compute_tp_fn_fp", "(", "dmg_pred", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dmg_target", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "c", ")", "\n", "\n", "", "", "running_loss", "+=", "loss", ".", "item", "(", ")", "*", "len", "(", "images", ")", "\n", "", "", "epoch_loss", "=", "running_loss", "/", "total_len", "\n", "\n", "", "else", ":", "\n", "            ", "for", "batch_idx", ",", "(", "images_pre", ",", "images_post", ",", "masks", ",", "_", ",", "_", ")", "in", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ":", "\n", "              ", "if", "not", "dice", ":", "\n", "                ", "masks", "=", "torch", ".", "argmax", "(", "masks", ",", "dim", "=", "1", ")", "\n", "", "masks", "=", "masks", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "images", "=", "torch", ".", "cat", "(", "(", "images_pre", ",", "images_post", ")", ",", "1", ")", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "if", "seperate_loss", ":", "\n", "                ", "loc", ",", "dmg", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "loc", ",", "dmg", ",", "masks", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "masks", ")", "\n", "\n", "", "dmg_target", "=", "masks", "if", "not", "dice", "else", "torch", ".", "argmax", "(", "masks", ",", "1", ")", "\n", "loc_target", "=", "torch", ".", "where", "(", "dmg_target", ">", "0", ",", "torch", ".", "ones_like", "(", "dmg_target", ")", ",", "torch", ".", "zeros_like", "(", "dmg_target", ")", ")", "\n", "if", "output", ".", "shape", "[", "1", "]", "!=", "1", "and", "len", "(", "output", ".", "shape", ")", "==", "4", ":", "\n", "                ", "dmg_pred", "=", "torch", ".", "argmax", "(", "output", ",", "1", ")", "\n", "loc_mode", "=", "False", "\n", "loc_pred", "=", "torch", ".", "where", "(", "dmg_pred", ">", "0", ",", "torch", ".", "ones_like", "(", "dmg_pred", ")", ",", "torch", ".", "zeros_like", "(", "dmg_pred", ")", ")", "\n", "", "else", ":", "\n", "                ", "loc_mode", "=", "True", "\n", "loc_pred", "=", "(", "1", "*", "(", "output", ">", "0.5", ")", ")", "\n", "if", "len", "(", "loc_pred", ".", "shape", ")", "==", "4", ":", "\n", "                  ", "loc_pred", "=", "loc_pred", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "\n", "", "", "lrow", "+=", "compute_tp_fn_fp", "(", "loc_pred", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "loc_target", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "1", ")", "\n", "\n", "if", "not", "loc_mode", ":", "\n", "                ", "for", "c", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "                  ", "drow", "[", "c", "-", "1", "]", "+=", "compute_tp_fn_fp", "(", "dmg_pred", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dmg_target", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "c", ")", "\n", "\n", "", "", "running_loss", "+=", "loss", ".", "item", "(", ")", "*", "len", "(", "images", ")", "\n", "", "epoch_loss", "=", "running_loss", "/", "len", "(", "dataloaders", "[", "phase", "]", ".", "dataset", ")", "\n", "\n", "", "", "", "if", "phase", "==", "'train'", ":", "\n", "        ", "loss_dict", "[", "epoch", "]", "=", "(", "epoch_loss", ",", ")", "\n", "print", "(", "'Epoch {}\\nTrain Loss: {}'", ".", "format", "(", "epoch", ",", "epoch_loss", ")", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")", ")", "\n", "", "elif", "phase", "==", "'val'", ":", "\n", "        ", "loss_dict", "[", "epoch", "]", "+=", "(", "epoch_loss", ",", ")", "\n", "locF1", "=", "F1Recorder", "(", "lrow", "[", "0", "]", ",", "lrow", "[", "1", "]", ",", "lrow", "[", "2", "]", ",", "'Buildings'", ")", ".", "f1", "\n", "if", "not", "loc_mode", ":", "\n", "          ", "dmgF1s", "=", "[", "]", "\n", "for", "idx", ",", "key", "in", "enumerate", "(", "[", "f'No damage     (1) '", ",", "f'Minor damage  (2) '", ",", "f'Major damage  (3) '", ",", "f'Destroyed     (4) '", "]", ",", "1", ")", ":", "\n", "            ", "dmgF1s", ".", "append", "(", "F1Recorder", "(", "drow", "[", "idx", "-", "1", "]", "[", "0", "]", ",", "drow", "[", "idx", "-", "1", "]", "[", "1", "]", ",", "drow", "[", "idx", "-", "1", "]", "[", "2", "]", ",", "key", ")", ".", "f1", ")", "\n", "", "", "else", ":", "\n", "          ", "dmgF1s", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "dmgF1", "=", "4", "/", "sum", "(", "(", "x", "+", "1e-6", ")", "**", "-", "1", "for", "x", "in", "dmgF1s", ")", "\n", "score", "=", "0.3", "*", "locF1", "+", "0.7", "*", "dmgF1", "\n", "loss_dict", "[", "epoch", "]", "+=", "(", "score", ",", "locF1", ",", "dmgF1", ",", "dmgF1s", "[", "0", "]", ",", "dmgF1s", "[", "1", "]", ",", "dmgF1s", "[", "2", "]", ",", "dmgF1s", "[", "3", "]", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss_dict'", ":", "loss_dict", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "output_path_weights", ",", "'weights_{}.pt'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "if", "epoch_loss", "<=", "best_val_loss", ":", "\n", "          ", "best_val_loss", "=", "epoch_loss", "\n", "best_epoch", "=", "epoch", "\n", "", "else", ":", "\n", "          ", "if", "epoch", "-", "best_epoch", ">", "lr_patience", "and", "own_sheduler", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "output_path_weights", ",", "'weights_{}.pt'", ".", "format", "(", "best_epoch", ")", ")", ")", "[", "'state_dict'", "]", ")", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_path_loss", ",", "'loss-{}.json'", ".", "format", "(", "starttimestamp", ")", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "          ", "json", ".", "dump", "(", "loss_dict", ",", "fp", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "", "currenttime", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Validation Loss: {}\\nValidation Score:\u00a0{}\\nLocF1: {} DmgF1: {} F1_1: {} F1_2: {} F1_3: {} F1_4:\u00a0{}\\n Time elapsed: {}s\\nAverage Time per Epoch: {}s\\nProgress: {:.0f}%\\n'", ".", "format", "(", "epoch_loss", ",", "score", ",", "locF1", ",", "dmgF1", ",", "dmgF1s", "[", "0", "]", ",", "dmgF1s", "[", "1", "]", ",", "dmgF1s", "[", "2", "]", ",", "dmgF1s", "[", "3", "]", ",", "currenttime", "-", "starttime", ",", "(", "currenttime", "-", "starttime", ")", "/", "epoch", ",", "100.", "*", "epoch", "/", "num_epochs", ")", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")", ")", "\n", "if", "own_sheduler", ":", "\n", "          ", "scheduler", ".", "step", "(", "epoch_loss", ")", "#scheduler.step(score) #scheduler.step(epoch_loss)", "\n", "if", "epoch", "==", "100", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0.00005", "\n", "", "elif", "epoch", "==", "125", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0.00001", "\n", "", "elif", "epoch", "==", "150", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0.000005", "\n", "", "elif", "epoch", "==", "175", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0.000001", "\n", "\n", "", "", "", "", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "output_path_weights", ",", "'weights_{}.pt'", ".", "format", "(", "best_epoch", ")", ")", ")", "[", "'state_dict'", "]", ")", "\n", "return", "best_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.test": [[334, 479], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torchvision.ToPILImage", "model.eval", "print", "tqdm.tqdm", "model.train", "model.apply", "tqdm.tqdm", "model.eval", "model.apply", "enumerate", "torch.cat", "torch.cat", "torch.cat", "images.to.to", "masks.data.byte().cpu().numpy.to().long", "torch.nn.Softmax.", "torch.argmax", "torch.argmax", "torch.argmax", "images.to.cpu", "model.data.byte().cpu().numpy", "torch.argmax", "torch.argmax", "torch.argmax", "masks.data.byte().cpu().numpy.data.byte().cpu().numpy", "enumerate", "enumerate", "torch.cat", "torch.cat", "torch.cat", "images.to.to", "range", "len", "len", "print", "len", "model", "torch.argmax", "torch.argmax", "torch.argmax", "torch.cat", "torch.cat", "torch.cat", "model", "indices.long().cpu().numpy", "str().zfill", "numpy.squeeze().astype", "np.squeeze().astype.copy().astype", "numpy.unique", "PIL.Image.fromarray", "utils.load.colorize_mask_", "Image.fromarray.save", "PIL.Image.fromarray", "utils.load.colorize_mask_", "Image.fromarray.save", "numpy.squeeze().astype", "PIL.Image.fromarray", "utils.load.colorize_mask_", "Image.fromarray.save", "PIL.Image.fromarray", "utils.load.colorize_mask_", "Image.fromarray.save", "caller._get_momenta", "len", "torch.stack", "torch.stack", "torch.stack", "images.to.to", "momenta.keys", "model", "caller._set_momenta", "masks.data.byte().cpu().numpy.to", "model.data.byte().cpu", "masks.data.byte().cpu().numpy.data.byte().cpu", "interpolate.griddata.astype", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "new_imgs.append", "len", "indices.long().cpu", "str", "numpy.squeeze", "np.squeeze().astype.copy", "len", "numpy.squeeze", "len", "float", "float", "torch.cat", "torch.cat", "torch.cat", "model.data.byte", "masks.data.byte().cpu().numpy.data.byte", "len", "numpy.arange", "numpy.arange", "numpy.ma.masked_invalid", "numpy.meshgrid", "scipy.interpolate.griddata", "indices.long", "pred_dmg_new.ravel", "curr.sum", "torch.argmax.unsqueeze", "len"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.colorize_mask_", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.colorize_mask_", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.colorize_mask_", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.colorize_mask_", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._get_momenta", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._set_momenta"], ["", "def", "test", "(", "model", ",", "dataloader", ",", "output_path_directory", ",", "seperate_loss", "=", "False", ",", "adapt", "=", "False", ",", "start_idx", "=", "0", ")", ":", "\n", "  ", "\"\"\"Caller function for inference\n  \n  Predicts building damage maps on the images in the dataloader and outputs them to the output directory, attention, subfolders must exist already.\n\n  Example:\n    Inference of a trained TwoStream ResNet50:\n    >>> model = TwoStream_Resnet50_Diff()\n    >>> model.load_state_dict(torch.load(WEIGHTS)['state_dict'])\n    >>> test(model, dataloader, '/output/')\n\n  Args:\n      model (torch.nn.Module): The PyTorch model to use\n      dataloader (torch.utils.data.DataLoader): PyTorch dataloader with images to perform inference on\n      output_path_directory (str): Path to output predicted masks to (together with ground truth masks and images) like this:\n        \u251c\u2500\u2500 images\n        \u2502   \u251c\u2500\u2500 test_damage_00000_post.png\n        \u2502   \u251c\u2500\u2500 test_damage_00001_post.png\n        \u2502   \u251c\u2500\u2500 test_damage_00000_pre.png\n        \u2502   \u251c\u2500\u2500 test_damage_00001_pre.png\n        \u2502   \u2514\u2500\u2500 ...\n        \u251c\u2500\u2500 predictions\n        \u2502   \u251c\u2500\u2500 test_damage_00000_prediction.png\n        \u2502   \u251c\u2500\u2500 test_damage_00001_prediction.png\n        \u2502   \u251c\u2500\u2500 test_localization_00000_prediction.png\n        \u2502   \u251c\u2500\u2500 test_localization_00001_prediction.png\n        \u2502   \u2514\u2500\u2500 ...\n        \u2514\u2500\u2500 targets\n            \u251c\u2500\u2500 test_damage_00000_target.png\n            \u251c\u2500\u2500 test_damage_00001_target.png\n            \u251c\u2500\u2500 test_localization_00000_target.png\n            \u251c\u2500\u2500 test_localization_00001_target.png\n            \u2514\u2500\u2500 ...\n      seperate_loss (bool, optional): If using a model with two seperate heads for localization and damage set to True. Defaults to False.\n  \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "smax", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "topil", "=", "tr", ".", "ToPILImage", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "print", "(", "\"Saving Images to Output Path, Mode = Validation\"", ")", "\n", "\n", "if", "adapt", ":", "\n", "      ", "n", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "momenta", "=", "{", "}", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_get_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "for", "batch_idx", ",", "(", "images_pre", ",", "images_post", ",", "masks", ",", "indices", ",", "filenames", ")", "in", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "total", "=", "len", "(", "dataloader", ")", ")", ":", "\n", "        ", "images", "=", "torch", ".", "cat", "(", "(", "images_pre", ",", "images_post", ")", ",", "1", ")", "\n", "images", "=", "images", ".", "to", "(", "0", ")", "\n", "new_imgs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "          ", "curr", "=", "images", "[", "i", ",", "...", "]", "\n", "if", "(", "1.0", "*", "(", "curr", ".", "sum", "(", "0", ")", "==", "0", ")", ")", ".", "mean", "(", ")", "<", "0.03", ":", "\n", "            ", "new_imgs", ".", "append", "(", "curr", ")", "\n", "", "", "b", "=", "len", "(", "new_imgs", ")", "\n", "if", "b", ">", "0", ":", "\n", "          ", "images", "=", "torch", ".", "stack", "(", "new_imgs", ",", "0", ")", "\n", "images", "=", "images", ".", "to", "(", "0", ")", "\n", "limit", "=", "128", "if", "images", ".", "shape", "[", "-", "1", "]", "==", "1024", "else", "512", "\n", "if", "len", "(", "dataloader", ")", "*", "images_pre", ".", "shape", "[", "0", "]", "<", "limit", ":", "\n", "            ", "momentum", "=", "b", "/", "float", "(", "n", "+", "b", "+", "(", "limit", "-", "len", "(", "dataloader", ")", "*", "images_pre", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "momentum", "=", "b", "/", "float", "(", "n", "+", "b", ")", "\n", "", "for", "module", "in", "momenta", ".", "keys", "(", ")", ":", "\n", "            ", "module", ".", "momentum", "=", "momentum", "\n", "", "_", "=", "model", "(", "images", ")", "\n", "n", "+=", "b", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_set_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "if", "len", "(", "dataloader", ")", ">", "0", ":", "\n", "        ", "print", "(", "len", "(", "dataloader", ")", "*", "images_pre", ".", "shape", "[", "0", "]", ",", "n", ")", "\n", "\n", "", "", "for", "batch_idx", ",", "(", "images_pre", ",", "images_post", ",", "masks", ",", "indices", ",", "filenames", ")", "in", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "total", "=", "len", "(", "dataloader", ")", ")", ":", "\n", "      ", "images", "=", "torch", ".", "cat", "(", "(", "images_pre", ",", "images_post", ")", ",", "1", ")", "\n", "images", "=", "images", ".", "to", "(", "0", ")", "\n", "\n", "if", "seperate_loss", ":", "\n", "        ", "loc", ",", "dmg", "=", "model", "(", "images", ")", "\n", "loc_mask", "=", "torch", ".", "argmax", "(", "loc", ",", "dim", "=", "1", ")", "\n", "output", "=", "torch", ".", "cat", "(", "(", "(", "1", "-", "loc_mask", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "dmg", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "*", "torch", ".", "cat", "(", "4", "*", "[", "loc_mask", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "model", "(", "images", ")", "\n", "", "masks", "=", "masks", ".", "to", "(", "0", ")", ".", "long", "(", ")", "\n", "output", "=", "smax", "(", "output", ")", "\n", "output", "=", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "#images = images.data.float().cpu().numpy()", "\n", "images", "=", "images", ".", "cpu", "(", ")", "\n", "output", "=", "output", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "masks", "=", "torch", ".", "argmax", "(", "masks", ",", "dim", "=", "1", ")", "\n", "masks", "=", "masks", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#print(masks.shape)", "\n", "#masks = np.argmax(masks[:,1:,:,:], axis=1)", "\n", "for", "i", ",", "index", "in", "enumerate", "(", "indices", ".", "long", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ":", "\n", "# HERE : SAVE ALL INDIVIDUAL IMAGES TO THEIR ORIGINAL NAMES AS PNGS", "\n", "        ", "str_index", "=", "str", "(", "index", "+", "start_idx", ")", ".", "zfill", "(", "6", ")", "\n", "#pre = (np.moveaxis(images[i,:3,:,:],0,-1)*256).astype(np.uint8)", "\n", "#imwrite(output_path_directory+\"images/test_damage_\"+str_index+\"_pre.png\",pre)", "\n", "#pre = topil(images[i,:3,:,:])", "\n", "#pre.save(os.path.join(output_path_directory,\"images/test_damage_\"+str_index+\"_pre.png\"))", "\n", "\n", "#post = (np.moveaxis(images[i,3:,:,:],0,-1)*256).astype(np.uint8)", "\n", "#imwrite(output_path_directory+\"images/test_damage_\"+str_index+\"_post.png\",post)", "\n", "#post = topil(images[i,3:,:,:])", "\n", "#post.save(os.path.join(output_path_directory,\"images/test_damage_\"+str_index+\"_post.png\"))", "\n", "\n", "pred", "=", "np", ".", "squeeze", "(", "output", "[", "i", ",", ":", ",", ":", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "pred_dmg", "=", "pred", ".", "copy", "(", ")", ".", "astype", "(", "float", ")", "\n", "v", "=", "np", ".", "unique", "(", "pred_dmg", ")", "\n", "if", "True", ":", "#0 not in v:", "\n", "          ", "pred_dmg_interpolated", "=", "pred_dmg", "\n", "", "elif", "len", "(", "v", ")", "==", "2", ":", "\n", "          ", "pred_dmg", "[", "pred_dmg", "==", "0", "]", "=", "v", "[", "1", "]", "\n", "pred_dmg_interpolated", "=", "pred_dmg", "\n", "", "elif", "len", "(", "v", ")", "==", "1", ":", "\n", "          ", "pred_dmg", "[", "pred_dmg", "==", "0", "]", "=", "1", "\n", "pred_dmg_interpolated", "=", "pred_dmg", "\n", "", "else", ":", "\n", "          ", "pred_dmg", "[", "pred_dmg", "==", "0", "]", "=", "np", ".", "nan", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "pred_dmg", ".", "shape", "[", "1", "]", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "pred_dmg", ".", "shape", "[", "0", "]", ")", "\n", "#mask invalid values", "\n", "pred_dmg", "=", "np", ".", "ma", ".", "masked_invalid", "(", "pred_dmg", ")", "\n", "xx", ",", "yy", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "#get only the valid values", "\n", "x1", "=", "xx", "[", "~", "pred_dmg", ".", "mask", "]", "\n", "y1", "=", "yy", "[", "~", "pred_dmg", ".", "mask", "]", "\n", "pred_dmg_new", "=", "pred_dmg", "[", "~", "pred_dmg", ".", "mask", "]", "\n", "\n", "pred_dmg_interpolated", "=", "interpolate", ".", "griddata", "(", "(", "x1", ",", "y1", ")", ",", "pred_dmg_new", ".", "ravel", "(", ")", ",", "(", "xx", ",", "yy", ")", ",", "method", "=", "'nearest'", ")", "\n", "", "pred_dmg_image", "=", "Image", ".", "fromarray", "(", "pred_dmg_interpolated", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "colorize_mask_", "(", "pred_dmg_image", ")", "\n", "pred_dmg_image", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_path_directory", ",", "\"predictions/test_damage_\"", "+", "str_index", "+", "\"_prediction.png\"", ")", ")", "\n", "pred", "[", "pred", "!=", "0", "]", "=", "1", "\n", "pred_loc", "=", "Image", ".", "fromarray", "(", "pred", ")", "\n", "colorize_mask_", "(", "pred_loc", ")", "\n", "pred_loc", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_path_directory", ",", "\"predictions/test_localization_\"", "+", "str_index", "+", "\"_prediction.png\"", ")", ")", "\n", "\n", "targ", "=", "np", ".", "squeeze", "(", "masks", "[", "i", ",", ":", ",", ":", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "targ_dmg", "=", "Image", ".", "fromarray", "(", "targ", ")", "\n", "colorize_mask_", "(", "targ_dmg", ")", "\n", "targ_dmg", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_path_directory", ",", "\"targets/test_damage_\"", "+", "str_index", "+", "\"_target.png\"", ")", ")", "\n", "targ", "[", "targ", "!=", "0", "]", "=", "1", "\n", "targ_loc", "=", "Image", ".", "fromarray", "(", "targ", ")", "\n", "colorize_mask_", "(", "targ_loc", ")", "\n", "targ_loc", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_path_directory", ",", "\"targets/test_localization_\"", "+", "str_index", "+", "\"_target.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.test_twostage": [[482, 652], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torchvision.ToPILImage", "loc_model.eval", "dmg_model.eval", "print", "tqdm.tqdm", "tqdm.tqdm", "enumerate", "torch.cat", "torch.cat", "torch.cat", "images.to.to", "dmg_model", "torch.nn.Softmax.", "masks.data.byte().cpu().numpy.to().long", "images.to.cpu", "torch.argmax", "torch.argmax", "torch.argmax", "masks.data.byte().cpu().numpy.data.byte().cpu().numpy", "enumerate", "enumerate", "torch.cat", "torch.cat", "torch.cat", "images.to.to", "range", "len", "len", "loc_model", "torch.nn.Sigmoid.", "torch.where", "torch.where", "torch.where", "torch.cat", "torch.cat", "torch.cat", "torch.argmax", "torch.argmax", "torch.argmax", "output.data.byte().cpu().numpy.data.byte().cpu().numpy", "indices.long().cpu().numpy", "str().zfill", "tr.ToPILImage.", "topil.save", "tr.ToPILImage.", "topil.save", "numpy.squeeze().astype", "PIL.Image.fromarray", "utils.load.colorize_mask_", "Image.fromarray.save", "PIL.Image.fromarray", "utils.load.colorize_mask_", "Image.fromarray.save", "utils.load.colorize_mask_", "Image.fromarray.save", "utils.load.colorize_mask_", "Image.fromarray.save", "len", "torch.stack", "torch.stack", "torch.stack", "images.to.to", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "masks.data.byte().cpu().numpy.to", "loc.data.byte().cpu().numpy.data.byte().cpu().numpy", "dmg.data.byte().cpu().numpy.data.byte().cpu().numpy", "masks.data.byte().cpu().numpy.data.byte().cpu", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.squeeze().astype", "np.squeeze().astype.copy().astype", "numpy.unique", "PIL.Image.fromarray", "numpy.squeeze().astype", "PIL.Image.fromarray", "numpy.squeeze().astype", "PIL.Image.fromarray", "PIL.Image.fromarray", "os.path.join", "os.path.join", "new_imgs.append", "float", "model.train", "model.apply", "momenta.keys", "model", "model.eval", "model.apply", "output.data.byte().cpu().numpy.data.byte().cpu", "torch.argmax", "torch.argmax", "torch.argmax", "torch.where", "torch.where", "torch.where", "loc.data.byte().cpu().numpy.data.byte().cpu().numpy", "dmg.data.byte().cpu().numpy.data.byte().cpu().numpy", "indices.long().cpu", "str", "numpy.squeeze", "interpolate.griddata.astype", "loc.data.byte().cpu().numpy.data.byte().cpu", "torch.argmax", "torch.argmax", "torch.argmax", "dmg.data.byte().cpu().numpy.data.byte().cpu", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.argmax", "torch.argmax", "torch.argmax", "utils.output_fusion.max_freq_per_component_fusion", "dmg.data.byte().cpu().numpy.data.byte().cpu().numpy", "loc.data.byte().cpu().numpy.data.byte().cpu().numpy", "masks.data.byte().cpu().numpy.data.byte", "numpy.squeeze", "np.squeeze().astype.copy", "len", "numpy.squeeze", "numpy.squeeze", "caller._get_momenta", "caller._set_momenta", "torch.cat", "torch.cat", "torch.cat", "output.data.byte().cpu().numpy.data.byte", "loc.data.byte().cpu().numpy.data.byte().cpu", "torch.argmax", "torch.argmax", "torch.argmax", "dmg.data.byte().cpu().numpy.data.byte().cpu", "indices.long", "len", "numpy.arange", "numpy.arange", "numpy.ma.masked_invalid", "numpy.meshgrid", "scipy.interpolate.griddata", "images[].sum", "loc.data.byte().cpu().numpy.data.byte", "dmg.data.byte().cpu().numpy.data.byte", "dmg.data.byte().cpu().numpy.data.byte().cpu", "loc.data.byte().cpu().numpy.data.byte().cpu", "pred_dmg_new.ravel", "loc.data.byte().cpu().numpy.data.byte", "dmg.data.byte().cpu().numpy.data.byte", "dmg.data.byte().cpu().numpy.data.byte", "loc.data.byte().cpu().numpy.data.byte"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.colorize_mask_", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.colorize_mask_", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.colorize_mask_", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.load.colorize_mask_", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.utils.output_fusion.max_freq_per_component_fusion", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._get_momenta", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._set_momenta", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax"], ["", "", "", "", "def", "test_twostage", "(", "loc_model", ",", "dmg_model", ",", "dataloader", ",", "output_path_directory", ",", "fusion_style", "=", "'simple'", ",", "adapt", "=", "False", ",", "start_idx", "=", "0", ")", ":", "\n", "  ", "\"\"\"Caller function for inference\n  \n  Predicts building damage maps on the images in the dataloader and outputs them to the output directory, attention, subfolders must exist already.\n\n  Example:\n    Inference of a trained TwoStream ResNet50:\n    >>> loc_model = RotEqUNet()\n    >>> loc_model.load_state_dict(torch.load(loc_weights)['state_dict'])\n    >>> dmg_model = TwoStream_Resnet50_Diff()\n    >>> dmg_model.load_state_dict(torch.load(dmg_weights)['state_dict'])\n    >>> test_twostage(loc_model, dmg_model, dataloader, '/output/')\n\n  Args:\n      model (torch.nn.Module): The PyTorch model to use\n      dataloader (torch.utils.data.DataLoader): PyTorch dataloader with images to perform inference on\n      output_path_directory (str): Path to output predicted masks to (together with ground truth masks and images) like this:\n        \u251c\u2500\u2500 images\n        \u2502   \u251c\u2500\u2500 test_damage_00000_post.png\n        \u2502   \u251c\u2500\u2500 test_damage_00001_post.png\n        \u2502   \u251c\u2500\u2500 test_damage_00000_pre.png\n        \u2502   \u251c\u2500\u2500 test_damage_00001_pre.png\n        \u2502   \u2514\u2500\u2500 ...\n        \u251c\u2500\u2500 predictions\n        \u2502   \u251c\u2500\u2500 test_damage_00000_prediction.png\n        \u2502   \u251c\u2500\u2500 test_damage_00001_prediction.png\n        \u2502   \u251c\u2500\u2500 test_localization_00000_prediction.png\n        \u2502   \u251c\u2500\u2500 test_localization_00001_prediction.png\n        \u2502   \u2514\u2500\u2500 ...\n        \u2514\u2500\u2500 targets\n            \u251c\u2500\u2500 test_damage_00000_target.png\n            \u251c\u2500\u2500 test_damage_00001_target.png\n            \u251c\u2500\u2500 test_localization_00000_target.png\n            \u251c\u2500\u2500 test_localization_00001_target.png\n            \u2514\u2500\u2500 ...\n      seperate_loss (bool, optional): If using a model with two seperate heads for localization and damage set to True. Defaults to False.\n  \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "smax", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "smoid", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "topil", "=", "tr", ".", "ToPILImage", "(", ")", "\n", "loc_model", ".", "eval", "(", ")", "\n", "dmg_model", ".", "eval", "(", ")", "\n", "print", "(", "\"Saving Images to Output Path\"", ")", "\n", "\n", "if", "adapt", ":", "\n", "      ", "n", "=", "0", "\n", "for", "batch_idx", ",", "(", "images_pre", ",", "images_post", ",", "masks", ",", "indices", ",", "filenames", ")", "in", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "total", "=", "len", "(", "dataloader", ")", ")", ":", "\n", "        ", "images", "=", "torch", ".", "cat", "(", "(", "images_pre", ",", "images_post", ")", ",", "1", ")", "\n", "images", "=", "images", ".", "to", "(", "0", ")", "\n", "new_imgs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "          ", "if", "(", "images", "[", "i", ",", "...", "]", ".", "sum", "(", "0", ")", "==", "0", ")", ".", "mean", "(", ")", "<", "0.03", ":", "\n", "            ", "new_imgs", ".", "append", "(", "images", "[", "i", ",", "...", "]", ")", "\n", "", "", "b", "=", "len", "(", "new_imgs", ")", "\n", "if", "b", ">", "0", ":", "\n", "          ", "images", "=", "torch", ".", "stack", "(", "new_imgs", ",", "0", ")", "\n", "images", "=", "images", ".", "to", "(", "0", ")", "\n", "momentum", "=", "b", "/", "float", "(", "n", "+", "b", ")", "\n", "for", "model", "in", "[", "loc_model", ",", "dmg_model", "]", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "momenta", "=", "{", "}", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_get_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "for", "module", "in", "momenta", ".", "keys", "(", ")", ":", "\n", "                    ", "module", ".", "momentum", "=", "momentum", "\n", "", "_", "=", "model", "(", "images", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "apply", "(", "lambda", "module", ":", "_set_momenta", "(", "module", ",", "momenta", ")", ")", "\n", "", "n", "+=", "b", "\n", "\n", "", "", "", "for", "batch_idx", ",", "(", "images_pre", ",", "images_post", ",", "masks", ",", "indices", ",", "filenames", ")", "in", "tqdm", "(", "enumerate", "(", "dataloader", ")", ",", "total", "=", "len", "(", "dataloader", ")", ")", ":", "\n", "      ", "images", "=", "torch", ".", "cat", "(", "(", "images_pre", ",", "images_post", ")", ",", "1", ")", "\n", "images", "=", "images", ".", "to", "(", "0", ")", "\n", "\n", "if", "fusion_style", "!=", "'dmg'", ":", "\n", "        ", "loc", "=", "loc_model", "(", "images", ")", "\n", "loc", "=", "smoid", "(", "loc", ")", "\n", "loc", "=", "torch", ".", "where", "(", "loc", ">=", "0.5", ",", "torch", ".", "ones_like", "(", "loc", ")", ",", "torch", ".", "zeros_like", "(", "loc", ")", ")", "\n", "", "dmg", "=", "dmg_model", "(", "images", ")", "\n", "dmg", "=", "smax", "(", "dmg", ")", "\n", "masks", "=", "masks", ".", "to", "(", "0", ")", ".", "long", "(", ")", "\n", "#images = images.data.float().cpu().numpy()", "\n", "images", "=", "images", ".", "cpu", "(", ")", "\n", "masks", "=", "torch", ".", "argmax", "(", "masks", ",", "dim", "=", "1", ")", "\n", "if", "fusion_style", "==", "'simple'", ":", "\n", "        ", "output", "=", "torch", ".", "cat", "(", "(", "(", "1", "-", "loc", ")", ".", "float", "(", ")", ",", "(", "dmg", "*", "torch", ".", "cat", "(", "4", "*", "[", "loc", "]", ",", "1", ")", ")", "+", "1", ")", ",", "1", ")", "\n", "output", "=", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "output", "=", "output", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "fusion_style", "==", "'none'", ":", "\n", "        ", "loc", "=", "loc", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "dmg", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "          ", "dmg", "=", "torch", ".", "argmax", "(", "dmg", ",", "dim", "=", "1", ")", "+", "1", "\n", "", "else", ":", "\n", "          ", "dmg", "=", "torch", ".", "argmax", "(", "dmg", ",", "dim", "=", "1", ")", "\n", "", "dmg", "=", "dmg", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "fusion_style", "==", "'dmg'", ":", "\n", "        ", "loc", "=", "torch", ".", "where", "(", "masks", "!=", "0", ",", "torch", ".", "ones_like", "(", "masks", ")", ",", "torch", ".", "zeros_like", "(", "masks", ")", ")", "\n", "loc", "=", "loc", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "dmg", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "          ", "dmg", "=", "torch", ".", "argmax", "(", "dmg", ",", "dim", "=", "1", ")", "+", "1", "\n", "", "else", ":", "\n", "          ", "dmg", "=", "torch", ".", "argmax", "(", "dmg", ",", "dim", "=", "1", ")", "\n", "", "dmg", "=", "dmg", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "fusion_style", "==", "'max_freq_per_component'", ":", "\n", "        ", "dmg", "=", "max_freq_per_component_fusion", "(", "loc", ",", "dmg", ")", "\n", "dmg", "=", "dmg", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "loc", "=", "loc", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "masks", "=", "masks", ".", "data", ".", "byte", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "#print(masks.shape)", "\n", "#masks = np.argmax(masks[:,1:,:,:], axis=1)", "\n", "for", "i", ",", "index", "in", "enumerate", "(", "indices", ".", "long", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ":", "\n", "# HERE : SAVE ALL INDIVIDUAL IMAGES TO THEIR ORIGINAL NAMES AS PNGS", "\n", "        ", "str_index", "=", "str", "(", "index", "+", "start_idx", ")", ".", "zfill", "(", "6", ")", "\n", "#pre = (np.moveaxis(images[i,:3,:,:],0,-1)*256).astype(np.uint8)", "\n", "#imwrite(output_path_directory+\"images/test_damage_\"+str_index+\"_pre.png\",pre)", "\n", "pre", "=", "topil", "(", "images", "[", "i", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "pre", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_path_directory", ",", "\"images\"", ",", "\"test_damage_\"", "+", "str_index", "+", "\"_pre.png\"", ")", ")", "\n", "\n", "#post = (np.moveaxis(images[i,3:,:,:],0,-1)*256).astype(np.uint8)", "\n", "#imwrite(output_path_directory+\"images/test_damage_\"+str_index+\"_post.png\",post)", "\n", "post", "=", "topil", "(", "images", "[", "i", ",", "3", ":", ",", ":", ",", ":", "]", ")", "\n", "post", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_path_directory", ",", "\"images\"", ",", "\"test_damage_\"", "+", "str_index", "+", "\"_post.png\"", ")", ")", "\n", "\n", "targ", "=", "np", ".", "squeeze", "(", "masks", "[", "i", ",", ":", ",", ":", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "targ_dmg", "=", "Image", ".", "fromarray", "(", "targ", ")", "\n", "colorize_mask_", "(", "targ_dmg", ")", "\n", "targ_dmg", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_path_directory", ",", "\"targets\"", ",", "\"test_damage_\"", "+", "str_index", "+", "\"_target.png\"", ")", ")", "\n", "targ", "[", "targ", "!=", "0", "]", "=", "1", "\n", "targ_loc", "=", "Image", ".", "fromarray", "(", "targ", ")", "\n", "colorize_mask_", "(", "targ_loc", ")", "\n", "targ_loc", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_path_directory", ",", "\"targets\"", ",", "\"test_localization_\"", "+", "str_index", "+", "\"_target.png\"", ")", ")", "\n", "if", "fusion_style", "in", "[", "'none'", ",", "'dmg'", ",", "'max_freq_per_component'", "]", ":", "\n", "          ", "pred", "=", "np", ".", "squeeze", "(", "dmg", "[", "i", ",", ":", ",", ":", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "pred_dmg", "=", "pred", ".", "copy", "(", ")", ".", "astype", "(", "float", ")", "\n", "v", "=", "np", ".", "unique", "(", "pred_dmg", ")", "\n", "if", "0", "not", "in", "v", ":", "\n", "            ", "pred_dmg_interpolated", "=", "pred_dmg", "\n", "", "elif", "len", "(", "v", ")", "==", "2", ":", "\n", "            ", "pred_dmg", "[", "pred_dmg", "==", "0", "]", "=", "v", "[", "1", "]", "\n", "pred_dmg_interpolated", "=", "pred_dmg", "\n", "", "elif", "len", "(", "v", ")", "==", "1", ":", "\n", "            ", "pred_dmg", "[", "pred_dmg", "==", "0", "]", "=", "1", "\n", "pred_dmg_interpolated", "=", "pred_dmg", "\n", "", "else", ":", "\n", "            ", "pred_dmg", "[", "pred_dmg", "==", "0", "]", "=", "np", ".", "nan", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "pred_dmg", ".", "shape", "[", "1", "]", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "pred_dmg", ".", "shape", "[", "0", "]", ")", "\n", "#mask invalid values", "\n", "pred_dmg", "=", "np", ".", "ma", ".", "masked_invalid", "(", "pred_dmg", ")", "\n", "xx", ",", "yy", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "#get only the valid values", "\n", "x1", "=", "xx", "[", "~", "pred_dmg", ".", "mask", "]", "\n", "y1", "=", "yy", "[", "~", "pred_dmg", ".", "mask", "]", "\n", "pred_dmg_new", "=", "pred_dmg", "[", "~", "pred_dmg", ".", "mask", "]", "\n", "\n", "pred_dmg_interpolated", "=", "interpolate", ".", "griddata", "(", "(", "x1", ",", "y1", ")", ",", "pred_dmg_new", ".", "ravel", "(", ")", ",", "(", "xx", ",", "yy", ")", ",", "method", "=", "'nearest'", ")", "\n", "", "pred_dmg_image", "=", "Image", ".", "fromarray", "(", "pred_dmg_interpolated", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "pred", "=", "np", ".", "squeeze", "(", "loc", "[", "i", ",", ":", ",", ":", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "pred_loc", "=", "Image", ".", "fromarray", "(", "pred", ")", "\n", "", "else", ":", "\n", "          ", "pred", "=", "np", ".", "squeeze", "(", "output", "[", "i", ",", ":", ",", ":", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "pred_dmg_img", "=", "Image", ".", "fromarray", "(", "pred", ")", "\n", "pred", "[", "pred", "!=", "0", "]", "=", "1", "\n", "pred_loc", "=", "Image", ".", "fromarray", "(", "pred", ")", "\n", "", "colorize_mask_", "(", "pred_dmg_img", ")", "\n", "pred_dmg_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_path_directory", ",", "\"predictions\"", ",", "\"test_damage_\"", "+", "str_index", "+", "\"_prediction.png\"", ")", ")", "\n", "colorize_mask_", "(", "pred_loc", ")", "\n", "pred_loc", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_path_directory", ",", "\"predictions\"", ",", "\"test_localization_\"", "+", "str_index", "+", "\"_prediction.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.twostream_resnet50_diff.TwoStream_Resnet50_Diff.__init__": [[20, 85], ["torch.Module.__init__", "torchvision.models.resnet50", "copy.deepcopy", "copy.deepcopy", "list", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "twostream_resnet50_diff.Bridge", "up_blocks.append", "up_blocks.append", "up_blocks.append", "up_blocks.append", "up_blocks.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.resnet.children", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "twostream_resnet50_diff.UpBlockForUNetWithResNet50", "twostream_resnet50_diff.UpBlockForUNetWithResNet50", "twostream_resnet50_diff.UpBlockForUNetWithResNet50", "twostream_resnet50_diff.UpBlockForUNetWithResNet50", "twostream_resnet50_diff.UpBlockForUNetWithResNet50", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "list", "down_blocks1.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.resnet.children", "copy.deepcopy", "down_blocks2.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "list", "copy.deepcopy", "int", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.resnet.children", "list", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.resnet.children"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", "=", "6", ",", "\n", "n_classes", "=", "5", ",", "\n", "seperate_loss", "=", "False", ",", "\n", "pretrained", "=", "True", ",", "\n", "output_features", "=", "False", ",", "\n", "shared", "=", "False", ",", "\n", "diff", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\"Initialize model\n        \n        Args:\n            in_channels (int, optional): Number of input channels, please keep!. Defaults to 6.\n            n_classes (int, optional): Number of classes. Defaults to 5.\n            seperate_loss (bool, optional): If True, two seperate heads for localization and damage predictions are used. Defaults to False.\n            pretrained (bool, optional): If True uses ImageNet pretrained weights for the two ResNet50 encoders. Defaults to True.\n            output_features (bool, optional): If True forward pass outputs feature maps after bridge. Defaults to False\n            shared (bool, optional): If True, model is siamese (shared encoder). Defaults to False.\n            diff (bool, optional): If True, difference is fed to decoder, else an intermediate 1x1 conv merges the two downstream features. Defaults to True.\n        \"\"\"", "\n", "\n", "super", "(", "TwoStream_Resnet50_Diff", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resnet", "=", "models", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "seperate_loss", "=", "seperate_loss", "\n", "self", ".", "output_features", "=", "output_features", "\n", "self", ".", "shared", "=", "shared", "\n", "self", ".", "diff", "=", "diff", "\n", "down_blocks1", "=", "[", "]", "\n", "up_blocks", "=", "[", "]", "\n", "self", ".", "input_block1", "=", "copy", ".", "deepcopy", "(", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "resnet", ".", "children", "(", ")", ")", ")", "[", ":", "3", "]", ")", "\n", "if", "not", "shared", ":", "\n", "            ", "down_blocks2", "=", "[", "]", "\n", "self", ".", "input_block2", "=", "copy", ".", "deepcopy", "(", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "resnet", ".", "children", "(", ")", ")", ")", "[", ":", "3", "]", ")", "\n", "", "self", ".", "input_pool", "=", "copy", ".", "deepcopy", "(", "list", "(", "self", ".", "resnet", ".", "children", "(", ")", ")", "[", "3", "]", ")", "\n", "for", "bottleneck", "in", "list", "(", "self", ".", "resnet", ".", "children", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "bottleneck", ",", "nn", ".", "Sequential", ")", ":", "\n", "                ", "down_blocks1", ".", "append", "(", "copy", ".", "deepcopy", "(", "bottleneck", ")", ")", "\n", "if", "not", "shared", ":", "\n", "                    ", "down_blocks2", ".", "append", "(", "copy", ".", "deepcopy", "(", "bottleneck", ")", ")", "\n", "", "", "", "self", ".", "down_blocks1", "=", "nn", ".", "ModuleList", "(", "down_blocks1", ")", "\n", "if", "not", "shared", ":", "\n", "            ", "self", ".", "down_blocks2", "=", "nn", ".", "ModuleList", "(", "down_blocks2", ")", "\n", "", "self", ".", "bridge", "=", "Bridge", "(", "2048", ",", "2048", ")", "\n", "\n", "if", "not", "diff", ":", "\n", "            ", "self", ".", "concat_blocks", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv2d", "(", "n", ",", "int", "(", "n", "/", "2", ")", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "for", "n", "in", "[", "4096", ",", "2048", ",", "1024", ",", "512", ",", "128", ",", "6", "]", "]", ")", "\n", "\n", "", "up_blocks", ".", "append", "(", "UpBlockForUNetWithResNet50", "(", "2048", ",", "1024", ")", ")", "\n", "up_blocks", ".", "append", "(", "UpBlockForUNetWithResNet50", "(", "1024", ",", "512", ")", ")", "\n", "up_blocks", ".", "append", "(", "UpBlockForUNetWithResNet50", "(", "512", ",", "256", ")", ")", "\n", "up_blocks", ".", "append", "(", "UpBlockForUNetWithResNet50", "(", "in_channels", "=", "128", "+", "64", ",", "out_channels", "=", "128", ",", "\n", "up_conv_in_channels", "=", "256", ",", "up_conv_out_channels", "=", "128", ")", ")", "\n", "up_blocks", ".", "append", "(", "UpBlockForUNetWithResNet50", "(", "in_channels", "=", "64", "+", "3", ",", "out_channels", "=", "64", ",", "\n", "up_conv_in_channels", "=", "128", ",", "up_conv_out_channels", "=", "64", ")", ")", "\n", "\n", "self", ".", "up_blocks", "=", "nn", ".", "ModuleList", "(", "up_blocks", ")", "\n", "\n", "if", "self", ".", "seperate_loss", ":", "\n", "            ", "self", ".", "out_loc", "=", "nn", ".", "Conv2d", "(", "64", ",", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "out_dmg", "=", "nn", ".", "Conv2d", "(", "64", ",", "5", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "out", "=", "nn", ".", "Conv2d", "(", "64", ",", "n_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "", "del", "self", ".", "resnet", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.twostream_resnet50_diff.TwoStream_Resnet50_Diff.forward": [[87, 154], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "dict", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.input_block1", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.input_pool", "enumerate", "dict", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.input_pool", "enumerate", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.bridge", "enumerate", "block", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.input_block2", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.input_block1", "block", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.out_loc", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.out_dmg", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.out", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.out", "twostream_resnet50_diff.TwoStream_Resnet50_Diff.out"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_features", "=", "None", ")", ":", "\n", "        ", "\"\"\"Forward pass\n        \n        Args:\n            x (torch.Tensor): The 6-channel input\n        \n        Returns:\n            torch.Tensor: A 5-channel output activations map\n        \"\"\"", "\n", "x1", ",", "x2", "=", "torch", ".", "split", "(", "x", ",", "3", ",", "dim", "=", "1", ")", "\n", "del", "x", "\n", "pre_pools1", "=", "dict", "(", ")", "\n", "pre_pools1", "[", "f\"layer_0\"", "]", "=", "x1", "\n", "x1", "=", "self", ".", "input_block1", "(", "x1", ")", "\n", "pre_pools1", "[", "f\"layer_1\"", "]", "=", "x1", "\n", "x1", "=", "self", ".", "input_pool", "(", "x1", ")", "\n", "\n", "for", "i", ",", "block", "in", "enumerate", "(", "self", ".", "down_blocks1", ",", "2", ")", ":", "\n", "            ", "x1", "=", "block", "(", "x1", ")", "\n", "if", "i", "==", "(", "5", ")", ":", "\n", "                ", "continue", "\n", "", "pre_pools1", "[", "f\"layer_{i}\"", "]", "=", "x1", "\n", "\n", "", "pre_pools2", "=", "dict", "(", ")", "\n", "pre_pools2", "[", "f\"layer_0\"", "]", "=", "x2", "\n", "if", "not", "self", ".", "shared", ":", "\n", "            ", "x2", "=", "self", ".", "input_block2", "(", "x2", ")", "\n", "", "else", ":", "\n", "            ", "x2", "=", "self", ".", "input_block1", "(", "x2", ")", "\n", "", "pre_pools2", "[", "f\"layer_1\"", "]", "=", "x2", "\n", "x2", "=", "self", ".", "input_pool", "(", "x2", ")", "\n", "\n", "if", "not", "self", ".", "shared", ":", "\n", "            ", "tmp_down", "=", "self", ".", "down_blocks2", "\n", "", "else", ":", "\n", "            ", "tmp_down", "=", "self", ".", "down_blocks1", "\n", "", "for", "i", ",", "block", "in", "enumerate", "(", "tmp_down", ",", "2", ")", ":", "\n", "            ", "x2", "=", "block", "(", "x2", ")", "\n", "if", "i", "==", "(", "5", ")", ":", "\n", "                ", "continue", "\n", "", "pre_pools2", "[", "f\"layer_{i}\"", "]", "=", "x2", "\n", "\n", "", "if", "self", ".", "diff", ":", "\n", "            ", "x", "=", "torch", ".", "add", "(", "x1", ",", "-", "1", ",", "x2", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "concat_blocks", "[", "0", "]", "(", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "1", ")", ")", "\n", "", "x", "=", "self", ".", "bridge", "(", "x", ")", "\n", "if", "self", ".", "output_features", ":", "\n", "            ", "features", "=", "x", "\n", "\n", "", "for", "i", ",", "block", "in", "enumerate", "(", "self", ".", "up_blocks", ",", "1", ")", ":", "\n", "            ", "key", "=", "f\"layer_{5 - i}\"", "\n", "if", "self", ".", "diff", ":", "\n", "                ", "skip", "=", "torch", ".", "add", "(", "pre_pools1", "[", "key", "]", ",", "-", "1", ",", "pre_pools2", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "                ", "skip", "=", "self", ".", "concat_blocks", "[", "i", "]", "(", "torch", ".", "cat", "(", "[", "pre_pools1", "[", "key", "]", ",", "pre_pools2", "[", "key", "]", "]", ",", "1", ")", ")", "\n", "", "x", "=", "block", "(", "x", ",", "skip", ")", "\n", "", "del", "pre_pools1", ",", "pre_pools2", ",", "skip", "\n", "if", "self", ".", "seperate_loss", ":", "\n", "            ", "return", "self", ".", "out_loc", "(", "x", ")", ",", "self", ".", "out_dmg", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "output_features", ":", "\n", "                ", "return", "self", ".", "out", "(", "x", ")", ",", "features", "\n", "", "elif", "return_features", ":", "\n", "                ", "return", "self", ".", "out", "(", "x", ")", ",", "x", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "out", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.twostream_resnet50_diff.ConvBlock.__init__": [[160, 166], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "padding", "=", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "with_nonlinearity", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "padding", "=", "padding", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "with_nonlinearity", "=", "with_nonlinearity", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.twostream_resnet50_diff.ConvBlock.forward": [[167, 173], ["twostream_resnet50_diff.ConvBlock.conv", "twostream_resnet50_diff.ConvBlock.bn", "twostream_resnet50_diff.ConvBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "if", "self", ".", "with_nonlinearity", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.twostream_resnet50_diff.Bridge.__init__": [[180, 185], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "twostream_resnet50_diff.ConvBlock", "twostream_resnet50_diff.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bridge", "=", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "in_channels", ",", "out_channels", ")", ",", "\n", "ConvBlock", "(", "out_channels", ",", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.twostream_resnet50_diff.Bridge.forward": [[187, 189], ["twostream_resnet50_diff.Bridge.bridge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bridge", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.twostream_resnet50_diff.UpBlockForUNetWithResNet50.__init__": [[196, 214], ["torch.Module.__init__", "twostream_resnet50_diff.ConvBlock", "twostream_resnet50_diff.ConvBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "up_conv_in_channels", "=", "None", ",", "up_conv_out_channels", "=", "None", ",", "\n", "upsampling_method", "=", "\"nearest\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "up_conv_in_channels", "==", "None", ":", "\n", "            ", "up_conv_in_channels", "=", "in_channels", "\n", "", "if", "up_conv_out_channels", "==", "None", ":", "\n", "            ", "up_conv_out_channels", "=", "out_channels", "\n", "\n", "", "if", "upsampling_method", "==", "\"conv_transpose\"", ":", "\n", "            ", "self", ".", "upsample", "=", "nn", ".", "ConvTranspose2d", "(", "up_conv_in_channels", ",", "up_conv_out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "elif", "upsampling_method", "==", "\"nearest\"", ":", "\n", "            ", "self", ".", "upsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "mode", "=", "'nearest'", ",", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "up_conv_in_channels", ",", "up_conv_out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", ")", "\n", "", "self", ".", "conv_block_1", "=", "ConvBlock", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "conv_block_2", "=", "ConvBlock", "(", "out_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.twostream_resnet50_diff.UpBlockForUNetWithResNet50.forward": [[215, 226], ["twostream_resnet50_diff.UpBlockForUNetWithResNet50.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "twostream_resnet50_diff.UpBlockForUNetWithResNet50.conv_block_1", "twostream_resnet50_diff.UpBlockForUNetWithResNet50.conv_block_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "up_x", ",", "down_x", ")", ":", "\n", "        ", "\"\"\"\n        :param up_x: this is the output from the previous up block\n        :param down_x: this is the output from the down block\n        :return: upsampled feature map\n        \"\"\"", "\n", "x", "=", "self", ".", "upsample", "(", "up_x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "down_x", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_block_1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_block_2", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.StableBCELoss.__init__": [[132, 134], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "StableBCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.StableBCELoss.forward": [[135, 139], ["loss.mean", "input.abs", "input.clamp", "neg_abs.exp"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.mean"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "neg_abs", "=", "-", "input", ".", "abs", "(", ")", "\n", "loss", "=", "input", ".", "clamp", "(", "min", "=", "0", ")", "-", "input", "*", "target", "+", "(", "1", "+", "neg_abs", ".", "exp", "(", ")", ")", ".", "log", "(", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.lovasz_grad": [[19, 32], ["len", "gt_sorted.sum", "gt_sorted.float().cumsum", "gt_sorted.float"], "function", ["None"], ["", "def", "lovasz_grad", "(", "gt_sorted", ")", ":", "\n", "    ", "\"\"\"\n    Computes gradient of the Lovasz extension w.r.t sorted errors\n    See Alg. 1 in paper\n    \"\"\"", "\n", "p", "=", "len", "(", "gt_sorted", ")", "\n", "gts", "=", "gt_sorted", ".", "sum", "(", ")", "\n", "intersection", "=", "gts", "-", "gt_sorted", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "union", "=", "gts", "+", "(", "1", "-", "gt_sorted", ")", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "jaccard", "=", "1.", "-", "intersection", "/", "union", "\n", "if", "p", ">", "1", ":", "# cover 1-pixel case", "\n", "        ", "jaccard", "[", "1", ":", "p", "]", "=", "jaccard", "[", "1", ":", "p", "]", "-", "jaccard", "[", "0", ":", "-", "1", "]", "\n", "", "return", "jaccard", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.iou_binary": [[34, 52], ["zip", "lovasz.mean", "ious.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.mean"], ["", "def", "iou_binary", "(", "preds", ",", "labels", ",", "EMPTY", "=", "1.", ",", "ignore", "=", "None", ",", "per_image", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    IoU for foreground class\n    binary: 1 foreground, 0 background\n    \"\"\"", "\n", "if", "not", "per_image", ":", "\n", "        ", "preds", ",", "labels", "=", "(", "preds", ",", ")", ",", "(", "labels", ",", ")", "\n", "", "ious", "=", "[", "]", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "intersection", "=", "(", "(", "label", "==", "1", ")", "&", "(", "pred", "==", "1", ")", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "(", "label", "==", "1", ")", "|", "(", "(", "pred", "==", "1", ")", "&", "(", "label", "!=", "ignore", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "not", "union", ":", "\n", "            ", "iou", "=", "EMPTY", "\n", "", "else", ":", "\n", "            ", "iou", "=", "float", "(", "intersection", ")", "/", "float", "(", "union", ")", "\n", "", "ious", ".", "append", "(", "iou", ")", "\n", "", "iou", "=", "mean", "(", "ious", ")", "# mean accross images if per_image", "\n", "return", "100", "*", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.iou": [[54, 74], ["zip", "range", "ious.append", "lovasz.mean", "numpy.array", "zip", "iou.append", "iou.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.mean"], ["", "def", "iou", "(", "preds", ",", "labels", ",", "C", ",", "EMPTY", "=", "1.", ",", "ignore", "=", "None", ",", "per_image", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Array of IoU for each (non ignored) class\n    \"\"\"", "\n", "if", "not", "per_image", ":", "\n", "        ", "preds", ",", "labels", "=", "(", "preds", ",", ")", ",", "(", "labels", ",", ")", "\n", "", "ious", "=", "[", "]", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "iou", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "C", ")", ":", "\n", "            ", "if", "i", "!=", "ignore", ":", "# The ignored label is sometimes among predicted classes (ENet - CityScapes)", "\n", "                ", "intersection", "=", "(", "(", "label", "==", "i", ")", "&", "(", "pred", "==", "i", ")", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "(", "label", "==", "i", ")", "|", "(", "(", "pred", "==", "i", ")", "&", "(", "label", "!=", "ignore", ")", ")", ")", ".", "sum", "(", ")", "\n", "if", "not", "union", ":", "\n", "                    ", "iou", ".", "append", "(", "EMPTY", ")", "\n", "", "else", ":", "\n", "                    ", "iou", ".", "append", "(", "float", "(", "intersection", ")", "/", "float", "(", "union", ")", ")", "\n", "", "", "", "ious", ".", "append", "(", "iou", ")", "\n", "", "ious", "=", "[", "mean", "(", "iou", ")", "for", "iou", "in", "zip", "(", "*", "ious", ")", "]", "# mean accross images if per_image", "\n", "return", "100", "*", "np", ".", "array", "(", "ious", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.lovasz_hinge": [[79, 94], ["lovasz.mean", "lovasz.lovasz_hinge_flat", "logits.size", "labels.size", "lovasz.lovasz_hinge_flat", "lovasz.flatten_binary_scores", "zip", "lovasz.flatten_binary_scores", "log.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.mean", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.lovasz_hinge_flat", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.lovasz_hinge_flat", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.flatten_binary_scores", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.flatten_binary_scores"], ["", "def", "lovasz_hinge", "(", "logits", ",", "labels", ",", "per_image", "=", "True", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      per_image: compute the loss per image instead of per batch\n      ignore: void class id\n    \"\"\"", "\n", "assert", "logits", ".", "size", "(", ")", "[", "1", ":", "3", "]", "==", "labels", ".", "size", "(", ")", "[", "1", ":", "3", "]", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_hinge_flat", "(", "*", "flatten_binary_scores", "(", "log", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ")", "\n", "for", "log", ",", "lab", "in", "zip", "(", "logits", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_hinge_flat", "(", "*", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.lovasz_hinge_flat": [[96, 114], ["torch.sort", "torch.sort", "lovasz.lovasz_grad", "torch.dot", "torch.dot", "len", "torch.relu", "torch.autograd.Variable", "logits.sum", "labels.float", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.lovasz_grad"], ["", "def", "lovasz_hinge_flat", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "\"\"\"\n    Binary Lovasz hinge loss\n      logits: [P] Variable, logits at each prediction (between -\\infty and +\\infty)\n      labels: [P] Tensor, binary ground truth labels (0 or 1)\n      ignore: label to ignore\n    \"\"\"", "\n", "if", "len", "(", "labels", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "logits", ".", "sum", "(", ")", "*", "0.", "\n", "", "signs", "=", "2.", "*", "labels", ".", "float", "(", ")", "-", "1.", "\n", "errors", "=", "(", "1.", "-", "logits", "*", "Variable", "(", "signs", ")", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "gt_sorted", "=", "labels", "[", "perm", "]", "\n", "grad", "=", "lovasz_grad", "(", "gt_sorted", ")", "\n", "loss", "=", "torch", ".", "dot", "(", "F", ".", "relu", "(", "errors_sorted", ")", ",", "Variable", "(", "grad", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.flatten_binary_scores": [[116, 129], ["scores.view.view", "labels.view.view"], "function", ["None"], ["", "def", "flatten_binary_scores", "(", "scores", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch (binary case)\n    Remove labels equal to 'ignore'\n    \"\"\"", "\n", "scores", "=", "scores", ".", "view", "(", "-", "1", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "scores", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vscores", "=", "scores", "[", "valid", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vscores", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.binary_xloss": [[141, 151], ["lovasz.flatten_binary_scores", "lovasz.StableBCELoss", "torch.autograd.Variable", "labels.float"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.flatten_binary_scores"], ["", "", "def", "binary_xloss", "(", "logits", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Binary Cross entropy loss\n      logits: [B, H, W] Variable, logits at each pixel (between -\\infty and +\\infty)\n      labels: [B, H, W] Tensor, binary ground truth masks (0 or 1)\n      ignore: void class id\n    \"\"\"", "\n", "logits", ",", "labels", "=", "flatten_binary_scores", "(", "logits", ",", "labels", ",", "ignore", ")", "\n", "loss", "=", "StableBCELoss", "(", ")", "(", "logits", ",", "Variable", "(", "labels", ".", "float", "(", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.lovasz_softmax": [[156, 174], ["lovasz.mean", "lovasz.lovasz_softmax_flat", "probas.size", "labels.size", "lovasz.lovasz_softmax_flat", "lovasz.flatten_probas", "zip", "lovasz.flatten_probas", "prob.unsqueeze", "lab.unsqueeze"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.mean", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.lovasz_softmax_flat", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.lovasz_softmax_flat", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.flatten_probas", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.flatten_probas"], ["", "def", "lovasz_softmax", "(", "probas", ",", "labels", ",", "classes", "=", "'present'", ",", "per_image", "=", "False", ",", "ignore", "=", "None", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      probas: [B, C, H, W] Variable, class probabilities at each prediction (between 0 and 1).\n              Interpreted as binary (sigmoid) output with outputs of size [B, H, W].\n      labels: [B, H, W] Tensor, ground truth labels (between 0 and C - 1)\n      classes: 'all' for all, 'present' for classes present in labels, or a list of classes to average.\n      per_image: compute the loss per image instead of per batch\n      ignore: void class labels\n    \"\"\"", "\n", "assert", "probas", ".", "size", "(", ")", "[", "2", ":", "4", "]", "==", "labels", ".", "size", "(", ")", "[", "1", ":", "3", "]", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "mean", "(", "lovasz_softmax_flat", "(", "*", "flatten_probas", "(", "prob", ".", "unsqueeze", "(", "0", ")", ",", "lab", ".", "unsqueeze", "(", "0", ")", ",", "ignore", ")", ",", "classes", "=", "classes", ",", "\n", "weights", "=", "weights", ")", "\n", "for", "prob", ",", "lab", "in", "zip", "(", "probas", ",", "labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_softmax_flat", "(", "*", "flatten_probas", "(", "probas", ",", "labels", ",", "ignore", ")", ",", "classes", "=", "classes", ",", "weights", "=", "weights", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.lovasz_softmax_flat": [[176, 212], ["probas.size", "lovasz.mean", "probas.numel", "list", "torch.sort", "torch.sort", "losses.append", "len", "range", "fg.sum", "len", "ValueError", "torch.dot", "torch.dot", "torch.autograd.Variable", "torch.autograd.Variable", "lovasz.lovasz_grad"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.mean", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.lovasz_grad"], ["", "def", "lovasz_softmax_flat", "(", "probas", ",", "labels", ",", "classes", "=", "'present'", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Multi-class Lovasz-Softmax loss\n      probas: [P, C] Variable, class probabilities at each prediction (between 0 and 1)\n      labels: [P] Tensor, ground truth labels (between 0 and C - 1)\n      classes: 'all' for all, 'present' for classes present in labels, or a list of classes to average.\n    \"\"\"", "\n", "if", "probas", ".", "numel", "(", ")", "<", "2", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "(", "probas", "*", "0.", ")", "#.unsqueeze(0)", "\n", "", "C", "=", "probas", ".", "size", "(", "1", ")", "\n", "losses", "=", "[", "]", "\n", "class_to_sum", "=", "list", "(", "range", "(", "C", ")", ")", "if", "classes", "in", "[", "'all'", ",", "'present'", "]", "else", "classes", "\n", "if", "weights", "is", "None", ":", "\n", "        ", "weights", "=", "[", "1.", "]", "*", "C", "\n", "\n", "", "for", "c", "in", "class_to_sum", ":", "\n", "        ", "fg", "=", "(", "labels", "==", "c", ")", ".", "float", "(", ")", "# foreground for class c", "\n", "if", "classes", "is", "'present'", "and", "fg", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "C", "==", "1", ":", "\n", "            ", "if", "len", "(", "classes", ")", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'Sigmoid output possible only with 1 class'", ")", "\n", "", "class_pred", "=", "probas", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "class_pred", "=", "probas", "[", ":", ",", "c", "]", "\n", "", "errors", "=", "(", "Variable", "(", "fg", ")", "-", "class_pred", ")", ".", "abs", "(", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "fg_sorted", "=", "fg", "[", "perm", "]", "\n", "losses", ".", "append", "(", "weights", "[", "c", "]", "*", "torch", ".", "dot", "(", "errors_sorted", ",", "Variable", "(", "lovasz_grad", "(", "fg_sorted", ")", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "losses", ")", "==", "0", ":", "\n", "        ", "return", "probas", "*", "0.", "\n", "\n", "", "return", "mean", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.flatten_probas": [[214, 233], ["probas.view.size", "probas.view.permute().contiguous().view", "labels.view.view", "probas.view.dim", "probas.view.size", "probas.view.view", "vprobas.numel", "probas.view.permute().contiguous", "valid.nonzero().squeeze", "probas.view.permute", "valid.nonzero"], "function", ["None"], ["", "def", "flatten_probas", "(", "probas", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Flattens predictions in the batch\n    \"\"\"", "\n", "if", "probas", ".", "dim", "(", ")", "==", "3", ":", "\n", "# assumes output of a sigmoid layer", "\n", "        ", "B", ",", "H", ",", "W", "=", "probas", ".", "size", "(", ")", "\n", "probas", "=", "probas", ".", "view", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "", "B", ",", "C", ",", "H", ",", "W", "=", "probas", ".", "size", "(", ")", "\n", "probas", "=", "probas", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "C", ")", "# B * H * W, C = P, C", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore", "is", "None", ":", "\n", "        ", "return", "probas", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore", ")", "\n", "vprobas", "=", "probas", "[", "valid", ".", "nonzero", "(", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "]", "\n", "if", "vprobas", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "probas", "[", "0", ",", "0", "]", ",", "labels", "[", "0", "]", "\n", "", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vprobas", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.xloss": [[235, 240], ["torch.cross_entropy", "torch.autograd.Variable"], "function", ["None"], ["", "def", "xloss", "(", "logits", ",", "labels", ",", "ignore", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Cross entropy loss\n    \"\"\"", "\n", "return", "F", ".", "cross_entropy", "(", "logits", ",", "Variable", "(", "labels", ")", ",", "ignore_index", "=", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.isnan": [[243, 245], ["None"], "function", ["None"], ["", "def", "isnan", "(", "x", ")", ":", "\n", "    ", "return", "x", "!=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.mean": [[247, 266], ["iter", "enumerate", "ifilterfalse", "next", "ValueError", "lovasz.iou"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.iou"], ["", "def", "mean", "(", "l", ",", "ignore_nan", "=", "False", ",", "empty", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    nanmean compatible with generators.\n    \"\"\"", "\n", "l", "=", "iter", "(", "l", ")", "\n", "if", "ignore_nan", ":", "\n", "        ", "l", "=", "ifilterfalse", "(", "isnan", ",", "l", ")", "\n", "", "try", ":", "\n", "        ", "n", "=", "1", "\n", "acc", "=", "next", "(", "l", ")", "\n", "", "except", "StopIteration", ":", "\n", "        ", "if", "empty", "==", "'raise'", ":", "\n", "            ", "raise", "ValueError", "(", "'Empty mean'", ")", "\n", "", "return", "empty", "\n", "", "for", "n", ",", "v", "in", "enumerate", "(", "l", ",", "2", ")", ":", "\n", "        ", "acc", "+=", "v", "\n", "", "if", "n", "==", "1", ":", "\n", "        ", "return", "acc", "\n", "", "return", "acc", "/", "n", "\n", "", ""]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.__init__": [[36, 87], ["bool", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "xview2.XView2Dataset.add_samples_train", "xview2.XView2Dataset.add_samples_train", "torchvision.Compose", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "xview2.XView2Dataset.add_samples_train", "xview2.XView2Dataset.add_samples_train", "xview2.XView2Dataset.add_samples_train", "xview2.XView2Dataset.add_samples_train", "os.listdir", "torchvision.ToTensor", "torchvision.Normalize", "xview2.XView2Dataset.sample_files.append", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.add_samples_train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.add_samples_train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.add_samples_train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.add_samples_train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.add_samples_train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.add_samples_train"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "rgb_bgr", "=", "'rgb'", ",", "preprocessing", "=", "None", ",", "mode", "=", "'train'", ",", "single_disaster", "=", "None", ")", ":", "\n", "#assert mode in ('train', 'test', 'oodtrain', 'oodtest', 'oodhold',\"guptatrain\",\"guptahold\")", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "root", "=", "root_dir", "\n", "assert", "rgb_bgr", "in", "(", "'rgb'", ",", "'bgr'", ")", "\n", "self", ".", "rgb", "=", "bool", "(", "rgb_bgr", "==", "'rgb'", ")", "\n", "self", ".", "preprocessing", "=", "preprocessing", "\n", "self", ".", "dirs", "=", "{", "'train_imgs'", ":", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'train'", ",", "'images'", ")", ",", "\n", "'train_labs'", ":", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'train'", ",", "'labels'", ")", ",", "\n", "'tier3_imgs'", ":", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'tier3'", ",", "'images'", ")", ",", "\n", "'tier3_labs'", ":", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'tier3'", ",", "'labels'", ")", ",", "\n", "'test_imgs'", ":", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'test'", ",", "'images'", ")", ",", "\n", "'test_labs'", ":", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'test'", ",", "'labels'", ")", ",", "\n", "'hold_imgs'", ":", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'hold'", ",", "'images'", ")", ",", "\n", "'hold_labs'", ":", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'hold'", ",", "'labels'", ")", "}", "\n", "train_imgs", "=", "[", "s", "for", "s", "in", "os", ".", "listdir", "(", "self", ".", "dirs", "[", "'train_imgs'", "]", ")", "]", "\n", "tier3_imgs", "=", "[", "s", "for", "s", "in", "os", ".", "listdir", "(", "self", ".", "dirs", "[", "'tier3_imgs'", "]", ")", "]", "\n", "train_labs", "=", "[", "s", "for", "s", "in", "os", ".", "listdir", "(", "self", ".", "dirs", "[", "'train_labs'", "]", ")", "]", "\n", "tier3_labs", "=", "[", "s", "for", "s", "in", "os", ".", "listdir", "(", "self", ".", "dirs", "[", "'tier3_labs'", "]", ")", "]", "\n", "test_imgs", "=", "[", "s", "for", "s", "in", "os", ".", "listdir", "(", "self", ".", "dirs", "[", "'test_imgs'", "]", ")", "]", "\n", "test_labs", "=", "[", "s", "for", "s", "in", "os", ".", "listdir", "(", "self", ".", "dirs", "[", "'test_labs'", "]", ")", "]", "\n", "hold_imgs", "=", "[", "s", "for", "s", "in", "os", ".", "listdir", "(", "self", ".", "dirs", "[", "'hold_imgs'", "]", ")", "]", "\n", "hold_labs", "=", "[", "s", "for", "s", "in", "os", ".", "listdir", "(", "self", ".", "dirs", "[", "'hold_labs'", "]", ")", "]", "\n", "\n", "self", ".", "sample_files", "=", "[", "]", "\n", "self", ".", "neg_sample_files", "=", "[", "]", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "add_samples_train", "(", "self", ".", "dirs", "[", "'train_imgs'", "]", ",", "self", ".", "dirs", "[", "'train_labs'", "]", ",", "train_imgs", ",", "train_labs", ",", "single_disaster", "=", "single_disaster", ")", "\n", "self", ".", "add_samples_train", "(", "self", ".", "dirs", "[", "'tier3_imgs'", "]", ",", "self", ".", "dirs", "[", "'tier3_labs'", "]", ",", "tier3_imgs", ",", "tier3_labs", ",", "single_disaster", "=", "single_disaster", ")", "\n", "", "elif", "self", ".", "mode", "in", "[", "'oodtrain'", ",", "'oodtest'", ",", "'guptatrain'", ",", "'guptatest'", ",", "\"ood2train\"", ",", "\"ood2test\"", ",", "\"ood3train\"", ",", "\"ood3test\"", ",", "\"singletrain\"", ",", "\"singletest\"", "]", ":", "\n", "            ", "self", ".", "add_samples_train", "(", "self", ".", "dirs", "[", "'train_imgs'", "]", ",", "self", ".", "dirs", "[", "'train_labs'", "]", ",", "train_imgs", ",", "train_labs", ",", "mode", "=", "self", ".", "mode", ",", "single_disaster", "=", "single_disaster", ")", "\n", "self", ".", "add_samples_train", "(", "self", ".", "dirs", "[", "'tier3_imgs'", "]", ",", "self", ".", "dirs", "[", "'tier3_labs'", "]", ",", "tier3_imgs", ",", "tier3_labs", ",", "mode", "=", "self", ".", "mode", ",", "single_disaster", "=", "single_disaster", ")", "\n", "self", ".", "add_samples_train", "(", "self", ".", "dirs", "[", "'test_imgs'", "]", ",", "self", ".", "dirs", "[", "'test_labs'", "]", ",", "test_imgs", ",", "test_labs", ",", "mode", "=", "self", ".", "mode", ",", "single_disaster", "=", "single_disaster", ")", "\n", "", "elif", "self", ".", "mode", "in", "[", "'oodhold'", ",", "'guptahold'", ",", "\"ood2hold\"", ",", "\"ood3hold\"", ",", "\"singlehold\"", "]", ":", "\n", "            ", "self", ".", "add_samples_train", "(", "self", ".", "dirs", "[", "'hold_imgs'", "]", ",", "self", ".", "dirs", "[", "'hold_labs'", "]", ",", "hold_imgs", ",", "hold_labs", ",", "mode", "=", "self", ".", "mode", ",", "single_disaster", "=", "single_disaster", ")", "\n", "", "else", ":", "\n", "            ", "for", "pre", "in", "os", ".", "listdir", "(", "self", ".", "dirs", "[", "'test_imgs'", "]", ")", ":", "\n", "                ", "if", "pre", "[", ":", "9", "]", "!=", "'test_pre_'", ":", "\n", "                    ", "continue", "\n", "", "img_id", "=", "pre", "[", "9", ":", "]", "[", ":", "-", "4", "]", "\n", "post", "=", "'test_post_'", "+", "pre", "[", "9", ":", "]", "\n", "assert", "post", "in", "test_imgs", "\n", "files", "=", "{", "'img_id'", ":", "img_id", ",", "\n", "'pre_img'", ":", "os", ".", "path", ".", "join", "(", "self", ".", "dirs", "[", "'test_imgs'", "]", ",", "pre", ")", ",", "\n", "'post_img'", ":", "os", ".", "path", ".", "join", "(", "self", ".", "dirs", "[", "'test_imgs'", "]", ",", "post", ")", "}", "\n", "self", ".", "sample_files", ".", "append", "(", "files", ")", "\n", "\n", "", "", "if", "mode", "in", "[", "'test'", ",", "'oodtest'", ",", "'oodhold'", ",", "'guptatest'", ",", "'guptahold'", ",", "\"ood2test\"", ",", "\"ood2hold\"", ",", "\"ood3test\"", ",", "\"ood3hold\"", ",", "\"singletest\"", ",", "\"singlehold\"", "]", ":", "\n", "            ", "self", ".", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.add_samples_train": [[89, 110], ["os.listdir", "pre[].split", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "xview2.XView2Dataset.sample_files.append", "mode.startswith"], "methods", ["None"], ["", "", "def", "add_samples_train", "(", "self", ",", "img_dirs", ",", "lab_dirs", ",", "imgs", ",", "labs", ",", "mode", "=", "'train'", ",", "single_disaster", "=", "None", ")", ":", "\n", "        ", "for", "pre", "in", "os", ".", "listdir", "(", "img_dirs", ")", ":", "\n", "            ", "if", "pre", "[", "-", "17", ":", "]", "!=", "'_pre_disaster.png'", ":", "\n", "                ", "continue", "\n", "", "chop", "=", "pre", "[", ":", "-", "4", "]", ".", "split", "(", "'_'", ")", "\n", "disaster", "=", "chop", "[", "0", "]", "\n", "img_id", "=", "'_'", ".", "join", "(", "chop", "[", ":", "2", "]", ")", "\n", "post", "=", "img_id", "+", "'_post_disaster.png'", "\n", "pre_json", "=", "img_id", "+", "'_pre_disaster.json'", "\n", "post_json", "=", "img_id", "+", "'_post_disaster.json'", "\n", "assert", "post", "in", "imgs", "\n", "assert", "pre_json", "in", "labs", "\n", "assert", "post_json", "in", "labs", "\n", "assert", "img_id", "not", "in", "self", ".", "sample_files", "\n", "files", "=", "{", "'img_id'", ":", "img_id", ",", "\n", "'pre_img'", ":", "os", ".", "path", ".", "join", "(", "img_dirs", ",", "pre", ")", ",", "\n", "'post_img'", ":", "os", ".", "path", ".", "join", "(", "img_dirs", ",", "post", ")", ",", "\n", "'pre_json'", ":", "os", ".", "path", ".", "join", "(", "lab_dirs", ",", "pre_json", ")", ",", "\n", "'post_json'", ":", "os", ".", "path", ".", "join", "(", "lab_dirs", ",", "post_json", ")", "}", "\n", "if", "mode", "==", "'train'", "or", "(", "mode", "in", "[", "'oodtrain'", ",", "'oodhold'", "]", "and", "disaster", "in", "holdout_train", ")", "or", "(", "mode", "==", "'oodtest'", "and", "disaster", "in", "holdout_test", ")", "or", "(", "mode", "in", "[", "'guptatrain'", ",", "'guptahold'", "]", "and", "disaster", "in", "gupta_train", ")", "or", "(", "mode", "==", "'guptatest'", "and", "disaster", "in", "gupta_test", ")", "or", "(", "mode", "in", "[", "'ood2train'", ",", "'ood2hold'", "]", "and", "disaster", "in", "holdout2_train", ")", "or", "(", "mode", "==", "'ood2test'", "and", "disaster", "in", "holdout2_test", ")", "or", "(", "mode", "in", "[", "'ood3train'", ",", "'ood3hold'", "]", "and", "disaster", "in", "holdout3_train", ")", "or", "(", "mode", "==", "'ood3test'", "and", "disaster", "in", "holdout3_test", ")", "or", "(", "mode", ".", "startswith", "(", "\"single\"", ")", "and", "disaster", "==", "single_disaster", ")", ":", "\n", "                ", "self", ".", "sample_files", ".", "append", "(", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.get_sample_info": [[111, 141], ["cv2.imread", "cv2.imread", "json.loads", "json.loads", "cv2.cvtColor", "cv2.cvtColor", "open().read", "open().read", "dict", "dict", "dict", "shapely.geometry.Polygon", "list", "shapely.geometry.Polygon", "list", "shapely.wkt.loads", "shapely.wkt.loads", "list", "open", "open"], "methods", ["None"], ["", "", "", "def", "get_sample_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "files", "=", "self", ".", "sample_files", "[", "idx", "]", "\n", "pre_img", "=", "cv2", ".", "imread", "(", "files", "[", "'pre_img'", "]", ")", "\n", "post_img", "=", "cv2", ".", "imread", "(", "files", "[", "'post_img'", "]", ")", "\n", "if", "self", ".", "rgb", ":", "\n", "            ", "pre_img", "=", "cv2", ".", "cvtColor", "(", "pre_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "post_img", "=", "cv2", ".", "cvtColor", "(", "post_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "pre_json", "=", "json", ".", "loads", "(", "open", "(", "files", "[", "'pre_json'", "]", ")", ".", "read", "(", ")", ")", "\n", "post_json", "=", "json", ".", "loads", "(", "open", "(", "files", "[", "'post_json'", "]", ")", ".", "read", "(", ")", ")", "\n", "sample", "=", "{", "'pre_img'", ":", "pre_img", ",", "'post_img'", ":", "post_img", ",", "'image_id'", ":", "files", "[", "'img_id'", "]", ",", "\n", "'im_width'", ":", "post_json", "[", "'metadata'", "]", "[", "'width'", "]", ",", "\n", "'im_height'", ":", "post_json", "[", "'metadata'", "]", "[", "'height'", "]", ",", "\n", "'disaster'", ":", "post_json", "[", "'metadata'", "]", "[", "'disaster_type'", "]", ",", "\n", "'pre_meta'", ":", "{", "m", ":", "pre_json", "[", "'metadata'", "]", "[", "m", "]", "for", "m", "in", "pre_json", "[", "'metadata'", "]", "}", ",", "\n", "'post_meta'", ":", "{", "m", ":", "post_json", "[", "'metadata'", "]", "[", "m", "]", "for", "m", "in", "post_json", "[", "'metadata'", "]", "}", ",", "\n", "'pre_builds'", ":", "dict", "(", ")", ",", "'post_builds'", ":", "dict", "(", ")", ",", "'builds'", ":", "dict", "(", ")", "}", "\n", "for", "b", "in", "pre_json", "[", "'features'", "]", "[", "'xy'", "]", ":", "\n", "            ", "buid", "=", "b", "[", "'properties'", "]", "[", "'uid'", "]", "\n", "sample", "[", "'pre_builds'", "]", "[", "buid", "]", "=", "{", "p", ":", "b", "[", "'properties'", "]", "[", "p", "]", "for", "p", "in", "b", "[", "'properties'", "]", "}", "\n", "poly", "=", "Polygon", "(", "wkt", ".", "loads", "(", "b", "[", "'wkt'", "]", ")", ")", "\n", "sample", "[", "'pre_builds'", "]", "[", "buid", "]", "[", "'poly'", "]", "=", "list", "(", "poly", ".", "exterior", ".", "coords", ")", "\n", "", "for", "b", "in", "post_json", "[", "'features'", "]", "[", "'xy'", "]", ":", "\n", "            ", "buid", "=", "b", "[", "'properties'", "]", "[", "'uid'", "]", "\n", "sample", "[", "'post_builds'", "]", "[", "buid", "]", "=", "{", "p", ":", "b", "[", "'properties'", "]", "[", "p", "]", "for", "p", "in", "b", "[", "'properties'", "]", "}", "\n", "poly", "=", "Polygon", "(", "wkt", ".", "loads", "(", "b", "[", "'wkt'", "]", ")", ")", "\n", "sample", "[", "'post_builds'", "]", "[", "buid", "]", "[", "'poly'", "]", "=", "list", "(", "poly", ".", "exterior", ".", "coords", ")", "\n", "sample", "[", "'builds'", "]", "[", "buid", "]", "=", "{", "'poly'", ":", "list", "(", "poly", ".", "exterior", ".", "coords", ")", ",", "\n", "'subtype'", ":", "b", "[", "'properties'", "]", "[", "'subtype'", "]", "}", "\n", "# sample['mask_img'] = self.make_mask_img(**sample)", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.__getitem__": [[142, 173], ["cv2.imread", "cv2.imread", "cv2.cvtColor", "cv2.cvtColor", "xview2.XView2Dataset.get_sample_with_mask", "utils.preprocess", "xview2.XView2Dataset.data_transforms", "xview2.XView2Dataset.data_transforms", "json.loads", "xview2.XView2Dataset._get_building_from_json", "xview2.XView2Dataset.make_mask_img", "xview2.XView2Dataset.data_transforms", "xview2.XView2Dataset.data_transforms", "open().read", "open"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.get_sample_with_mask", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.preprocess", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset._get_building_from_json", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.make_mask_img"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "files", "=", "self", ".", "sample_files", "[", "idx", "]", "\n", "pre_img", "=", "cv2", ".", "imread", "(", "files", "[", "'pre_img'", "]", ")", "\n", "post_img", "=", "cv2", ".", "imread", "(", "files", "[", "'post_img'", "]", ")", "\n", "if", "self", ".", "rgb", ":", "\n", "            ", "pre_img", "=", "cv2", ".", "cvtColor", "(", "pre_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "post_img", "=", "cv2", ".", "cvtColor", "(", "post_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "", "if", "self", ".", "mode", "in", "[", "'train'", ",", "'oodtrain'", ",", "'guptatrain'", ",", "\"ood2train\"", ",", "\"ood3train\"", ",", "\"singletrain\"", "]", ":", "\n", "            ", "sample", "=", "self", ".", "get_sample_with_mask", "(", "files", ",", "pre_img", ",", "post_img", ")", "\n", "sample", "[", "'image_id'", "]", "=", "files", "[", "'img_id'", "]", "\n", "if", "self", ".", "preprocessing", "is", "not", "None", ":", "\n", "                ", "transformed", "=", "preprocess", "(", "sample", "[", "'pre_img'", "]", ",", "sample", "[", "'post_img'", "]", ",", "sample", "[", "'mask_img'", "]", ",", "\n", "flip", "=", "self", ".", "preprocessing", "[", "'flip'", "]", ",", "\n", "scale", "=", "self", ".", "preprocessing", "[", "'scale'", "]", ",", "\n", "crop", "=", "self", ".", "preprocessing", "[", "'crop'", "]", ")", "\n", "sample", "[", "'pre_img'", "]", "=", "transformed", "[", "0", "]", "\n", "sample", "[", "'post_img'", "]", "=", "transformed", "[", "1", "]", "\n", "sample", "[", "'mask_img'", "]", "=", "transformed", "[", "2", "]", "\n", "", "", "elif", "self", ".", "mode", "in", "[", "'oodtest'", ",", "'oodhold'", ",", "'guptatest'", ",", "'guptahold'", ",", "\"ood2test\"", ",", "\"ood2hold\"", ",", "\"ood3test\"", ",", "\"ood3hold\"", ",", "\"singletest\"", ",", "\"singlehold\"", "]", ":", "\n", "            ", "pre_img", "=", "self", ".", "data_transforms", "(", "pre_img", ")", "\n", "post_img", "=", "self", ".", "data_transforms", "(", "post_img", ")", "\n", "sample", "=", "{", "'pre_img'", ":", "pre_img", ",", "'post_img'", ":", "post_img", ",", "'image_id'", ":", "files", "[", "'img_id'", "]", "}", "\n", "post_json", "=", "json", ".", "loads", "(", "open", "(", "files", "[", "'post_json'", "]", ")", ".", "read", "(", ")", ")", "\n", "buildings", "=", "self", ".", "_get_building_from_json", "(", "post_json", ")", "\n", "sample", "[", "'mask_img'", "]", "=", "self", ".", "make_mask_img", "(", "**", "buildings", ")", "\n", "", "else", ":", "\n", "            ", "pre_img", "=", "self", ".", "data_transforms", "(", "pre_img", ")", "\n", "post_img", "=", "self", ".", "data_transforms", "(", "post_img", ")", "\n", "sample", "=", "{", "'pre_img'", ":", "pre_img", ",", "'post_img'", ":", "post_img", ",", "'image_id'", ":", "files", "[", "'img_id'", "]", "}", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset._get_building_from_json": [[174, 183], ["dict", "shapely.geometry.Polygon", "shapely.wkt.loads", "list"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_building_from_json", "(", "post_json", ")", ":", "\n", "        ", "buildings", "=", "dict", "(", ")", "\n", "for", "b", "in", "post_json", "[", "'features'", "]", "[", "'xy'", "]", ":", "\n", "            ", "buid", "=", "b", "[", "'properties'", "]", "[", "'uid'", "]", "\n", "poly", "=", "Polygon", "(", "wkt", ".", "loads", "(", "b", "[", "'wkt'", "]", ")", ")", "\n", "buildings", "[", "buid", "]", "=", "{", "'poly'", ":", "list", "(", "poly", ".", "exterior", ".", "coords", ")", ",", "\n", "'subtype'", ":", "b", "[", "'properties'", "]", "[", "'subtype'", "]", "}", "\n", "", "return", "buildings", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.get_sample_with_mask": [[184, 192], ["json.loads", "xview2.XView2Dataset._get_building_from_json", "xview2.XView2Dataset.make_mask_img", "open().read", "open"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset._get_building_from_json", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.make_mask_img"], ["", "def", "get_sample_with_mask", "(", "self", ",", "files", ",", "pre_img", ",", "post_img", ")", ":", "\n", "        ", "post_json", "=", "json", ".", "loads", "(", "open", "(", "files", "[", "'post_json'", "]", ")", ".", "read", "(", ")", ")", "\n", "sample", "=", "{", "'pre_img'", ":", "pre_img", ",", "'post_img'", ":", "post_img", ",", "'image_id'", ":", "files", "[", "'img_id'", "]", ",", "\n", "'disaster'", ":", "self", ".", "diaster_type", "[", "post_json", "[", "'metadata'", "]", "[", "'disaster_type'", "]", "]", "}", "\n", "\n", "buildings", "=", "self", ".", "_get_building_from_json", "(", "post_json", ")", "\n", "sample", "[", "'mask_img'", "]", "=", "self", ".", "make_mask_img", "(", "**", "buildings", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.make_mask_img": [[193, 205], ["numpy.zeros", "cv2.fillPoly", "numpy.array().round().astype().reshape", "numpy.array().round().astype", "numpy.array().round", "numpy.array"], "methods", ["None"], ["", "def", "make_mask_img", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "width", "=", "1024", "\n", "height", "=", "1024", "\n", "builings", "=", "kwargs", "\n", "\n", "mask_img", "=", "np", ".", "zeros", "(", "[", "height", ",", "width", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "dmg", "in", "self", ".", "dmg_type", ":", "\n", "            ", "polys_dmg", "=", "[", "np", ".", "array", "(", "builings", "[", "p", "]", "[", "'poly'", "]", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", "\n", "for", "p", "in", "builings", "if", "builings", "[", "p", "]", "[", "'subtype'", "]", "==", "dmg", "]", "\n", "cv2", ".", "fillPoly", "(", "mask_img", ",", "polys_dmg", ",", "[", "self", ".", "dmg_type", "[", "dmg", "]", "]", ")", "\n", "\n", "", "return", "mask_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.show_sample": [[206, 208], ["None"], "methods", ["None"], ["", "def", "show_sample", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.xview2.XView2Dataset.__len__": [[209, 211], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sample_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.train.ModelLossWraper.__init__": [[131, 143], ["torch.Module.__init__", "model.cuda"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__"], ["img_size", "=", "setting_dict", "[", "\"data\"", "]", "[", "\"img_size\"", "]", "\n", "batch_size", "=", "setting_dict", "[", "\"data\"", "]", "[", "\"batch_size\"", "]", "\n", "disaster_list", "=", "disaster_dict", "[", "setting_dict", "[", "\"data\"", "]", "[", "\"disasters\"", "]", "]", "\n", "augment_plus", "=", "setting_dict", "[", "\"data\"", "]", "[", "\"augment_plus\"", "]", "\n", "cpu_count", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "cpu_count", "=", "cpu_count", "if", "cpu_count", "<", "16", "else", "cpu_count", "//", "8", "\n", "\n", "\n", "dataset", "=", "DisastersDatasetUnet", "(", "data_folder", ",", "train", "=", "True", ",", "im_size", "=", "[", "img_size", ",", "img_size", "]", ",", "transform", "=", "tr", ".", "ToTensor", "(", ")", ",", "normalize", "=", "False", ",", "flip", "=", "True", ",", "rotate", "=", "augment_plus", ",", "rotate10", "=", "augment_plus", ",", "color", "=", "augment_plus", "*", "(", "0.2", "if", "setting_dict", "[", "\"data\"", "]", "[", "\"disasters\"", "]", "==", "\"big\"", "else", "1", ")", ",", "cut", "=", "(", "setting_dict", "[", "\"data\"", "]", "[", "\"disasters\"", "]", "==", "\"big\"", "and", "img_size", "==", "1024", ")", ",", "disaster_list", "=", "disaster_list", ")", "\n", "\n", "if", "setting_dict", "[", "\"data\"", "]", "[", "\"disasters\"", "]", "==", "\"big\"", ":", "\n", "        ", "train_size", "=", "int", "(", "0.95", "*", "dataset", ".", "dataset_size", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.train.ModelLossWraper.forward": [[144, 188], ["train.ModelLossWraper.model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.softmax", "torch.softmax", "torch.softmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.autograd.Variable().cuda.clone", "torch.autograd.Variable().cuda.clone", "train.ModelLossWraper.criterion", "train.ModelLossWraper.criterion", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "train.ModelLossWraper.criterion", "torch.autograd.Variable().cuda.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable().cuda.size"], "methods", ["None"], ["        ", "train_size", "=", "int", "(", "0.8", "*", "dataset", ".", "dataset_size", ")", "\n", "", "val_size", "=", "dataset", ".", "dataset_size", "-", "train_size", "\n", "\n", "\n", "torch", ".", "manual_seed", "(", "setting_dict", "[", "\"seed\"", "]", ")", "\n", "train_dataset", ",", "val_dataset", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "dataset", ",", "[", "train_size", ",", "val_size", "]", ")", "\n", "val_dataset", ".", "dataset", ".", "flip", "=", "False", "\n", "val_dataset", ".", "dataset", ".", "rotate", "=", "False", "\n", "val_dataset", ".", "dataset", ".", "rotate10", "=", "False", "\n", "val_dataset", ".", "dataset", ".", "color", "=", "False", "\n", "\n", "if", "not", "setting_dict", "[", "\"data\"", "]", "[", "\"adabn_train\"", "]", ":", "\n", "        ", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "cpu_count", ",", "pin_memory", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "cpu_count", ",", "pin_memory", "=", "True", ")", "\n", "dataloaders", "=", "{", "'train'", ":", "train_loader", ",", "'val'", ":", "val_loader", "}", "\n", "", "else", ":", "\n", "        ", "train_loaders", "=", "{", "}", "\n", "val_loaders", "=", "{", "}", "\n", "for", "disaster", "in", "disaster_list", ":", "\n", "            ", "cur_subset", "=", "deepcopy", "(", "train_dataset", ")", "\n", "#import IPython; IPython.embed(); exit(1)", "\n", "cur_set", "=", "deepcopy", "(", "cur_subset", ".", "dataset", ")", "\n", "cur_list", "=", "[", "cur_set", ".", "_DisastersDatasetUnet__mask0", "[", "i", "]", "for", "i", "in", "cur_subset", ".", "indices", "]", "\n", "filt_list", "=", "[", "f", "for", "f", "in", "cur_list", "if", "disaster", "in", "f", "]", "\n", "cur_set", ".", "_DisastersDatasetUnet__mask0", "=", "filt_list", "\n", "cur_set", ".", "_DisastersDatasetUnet__mask1", "=", "[", "f", ".", "replace", "(", "\"mask0\"", ",", "\"mask1\"", ")", "for", "f", "in", "filt_list", "]", "\n", "cur_set", ".", "_DisastersDatasetUnet__mask2", "=", "[", "f", ".", "replace", "(", "\"mask0\"", ",", "\"mask2\"", ")", "for", "f", "in", "filt_list", "]", "\n", "cur_set", ".", "_DisastersDatasetUnet__mask3", "=", "[", "f", ".", "replace", "(", "\"mask0\"", ",", "\"mask3\"", ")", "for", "f", "in", "filt_list", "]", "\n", "cur_set", ".", "_DisastersDatasetUnet__mask4", "=", "[", "f", ".", "replace", "(", "\"mask0\"", ",", "\"mask4\"", ")", "for", "f", "in", "filt_list", "]", "\n", "cur_set", ".", "_DisastersDatasetUnet__pre", "=", "[", "f", ".", "replace", "(", "\"_mask0\"", ",", "\"_pre_disaster\"", ")", "for", "f", "in", "filt_list", "]", "\n", "cur_set", ".", "_DisastersDatasetUnet__post", "=", "[", "f", ".", "replace", "(", "\"_mask0\"", ",", "\"_post_disaster\"", ")", "for", "f", "in", "filt_list", "]", "\n", "cur_set", ".", "dataset_size", "=", "len", "(", "filt_list", ")", "\n", "\n", "train_loaders", "[", "disaster", "]", "=", "DataLoader", "(", "cur_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "cpu_count", ",", "pin_memory", "=", "True", ")", "\n", "\n", "cur_subset", "=", "deepcopy", "(", "val_dataset", ")", "\n", "cur_set", "=", "deepcopy", "(", "cur_subset", ".", "dataset", ")", "\n", "cur_list", "=", "[", "cur_set", ".", "_DisastersDatasetUnet__mask0", "[", "i", "]", "for", "i", "in", "cur_subset", ".", "indices", "]", "\n", "filt_list", "=", "[", "f", "for", "f", "in", "cur_list", "if", "disaster", "in", "f", "]", "\n", "cur_set", ".", "_DisastersDatasetUnet__mask0", "=", "filt_list", "\n", "cur_set", ".", "_DisastersDatasetUnet__mask1", "=", "[", "f", ".", "replace", "(", "\"mask0\"", ",", "\"mask1\"", ")", "for", "f", "in", "filt_list", "]", "\n", "cur_set", ".", "_DisastersDatasetUnet__mask2", "=", "[", "f", ".", "replace", "(", "\"mask0\"", ",", "\"mask2\"", ")", "for", "f", "in", "filt_list", "]", "\n", "cur_set", ".", "_DisastersDatasetUnet__mask3", "=", "[", "f", ".", "replace", "(", "\"mask0\"", ",", "\"mask3\"", ")", "for", "f", "in", "filt_list", "]", "\n", "cur_set", ".", "_DisastersDatasetUnet__mask4", "=", "[", "f", ".", "replace", "(", "\"mask0\"", ",", "\"mask4\"", ")", "for", "f", "in", "filt_list", "]", "\n", "cur_set", ".", "_DisastersDatasetUnet__pre", "=", "[", "f", ".", "replace", "(", "\"_mask0\"", ",", "\"_pre_disaster\"", ")", "for", "f", "in", "filt_list", "]", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.train.bn_update": [[29, 75], ["model.train", "torch.device", "torch.device", "torch.device", "model.apply", "model.apply", "tqdm.tqdm", "model.apply", "model.train", "train._check_bn", "inputs_pre.size", "momenta.keys", "model", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "train._get_momenta", "float", "inputs_pre.to", "inputs_post.to", "train._set_momenta"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._check_bn", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._get_momenta", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._set_momenta"], ["\"model_args\"", ":", "{", "\"in_channels\"", ":", "6", ",", "\"n_classes\"", ":", "5", ",", "\"seperate_loss\"", ":", "False", ",", "\"pretrained\"", ":", "True", ",", "\"output_features\"", ":", "False", "}", ",", "\n", "}", ",", "\n", "\"data\"", ":", "{", "\n", "\"data_folder\"", ":", "[", "'datasets/resize128/'", ",", "'datasets/resize128_3/'", "]", ",", "\n", "\"viz_folder\"", ":", "[", "'datasets/viz/all/'", "]", ",", "\n", "\"holdout_folder\"", ":", "[", "'datasets/hold/all/'", "]", ",", "\n", "\"img_size\"", ":", "128", ",", "\n", "\"batch_size\"", ":", "44", ",", "\n", "\"disasters\"", ":", "\"all\"", ",", "\n", "\"augment_plus\"", ":", "True", ",", "\n", "\"adabn\"", ":", "False", ",", "\n", "\"adabn_train\"", ":", "False", "\n", "}", ",", "\n", "\"objective\"", ":", "{", "\n", "\"name\"", ":", "\"CE\"", ",", "\n", "\"params\"", ":", "{", "\n", "\"weights\"", ":", "[", "0.1197", ",", "0.7166", ",", "1.2869", ",", "1.0000", ",", "1.3640", "]", ",", "\n", "}", "\n", "}", ",", "\n", "\"optimizer\"", ":", "{", "\n", "\"name\"", ":", "\"adam\"", ",", "\n", "\"learning_rate\"", ":", "0.001", ",", "\n", "\"sheduler\"", ":", "{", "\n", "\"patience\"", ":", "2", ",", "\n", "\"factor\"", ":", "0.1", "\n", "}", ",", "\n", "\"longshedule\"", ":", "False", "\n", "}", ",", "\n", "\"epochs\"", ":", "25", ",", "\n", "\"seed\"", ":", "42", "\n", "}", "\n", "\n", "model_dict", "=", "{", "\n", "\"twostream_resnet50\"", ":", "TwoStream_Resnet50_Diff", "\n", "}", "\n", "\n", "disaster_dict", "=", "{", "\n", "\"all\"", ":", "None", ",", "\n", "\"holdout\"", ":", "holdout_train", ",", "\n", "\"holdout2\"", ":", "holdout2_train", ",", "\n", "\"holdout3\"", ":", "holdout3_train", ",", "\n", "\"gupta\"", ":", "gupta_train", ",", "\n", "\"big\"", ":", "big_train", ",", "\n", "\"debug\"", ":", "[", "\"lower-puna-volcano\"", "]", "\n", "}", "\n", "\n", "objective_dict", "=", "{", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.train._check_bn_apply": [[78, 81], ["issubclass"], "function", ["None"], ["\n", "optimizer_dict", "=", "{", "\n", "\"adam\"", ":", "optim", ".", "Adam", ",", "\n", "\"SWA\"", ":", "optim", ".", "Adam", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.train._check_bn": [[83, 87], ["model.apply", "train._check_bn_apply"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._check_bn_apply"], ["\n", "\n", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train according to a given setting\"", ")", "\n", "parser", ".", "add_argument", "(", "'setting'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "metavar", "=", "'str'", ",", "help", "=", "'path to setting json'", ")", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.train._reset_bn": [[89, 93], ["issubclass", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--weights'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "metavar", "=", "'str'", ",", "help", "=", "'path to weights pt file'", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "setting_name", "=", "args", ".", "setting", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.train._get_momenta": [[95, 98], ["issubclass"], "function", ["None"], ["        ", "setting_path", "=", "\"experiments/default_twostream_resnet50.json\"", "\n", "setting_name", "=", "\"default_twostream_resnet50\"", "\n", "with", "open", "(", "setting_path", ",", "'w'", ")", "as", "JSON", ":", "\n", "            ", "json", ".", "dump", "(", "default_dict", ",", "JSON", ")", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.train._set_momenta": [[100, 103], ["issubclass"], "function", ["None"], ["        ", "setting_path", "=", "\"experiments/\"", "+", "setting_name", "+", "\".json\"", "\n", "\n", "", "weight_path", "=", "args", ".", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.train.main": [[190, 415], ["print", "models.dual_hrnet.get_model", "ModelLossWraper().cuda", "torch.device", "torch.device", "torch.device", "nn.DataParallel.to", "multiprocessing.cpu_count", "CfgNode.load_cfg.mode.startswith", "models.dual_hrnet.get_model.train", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "utils.AverageMeter", "models.dual_hrnet.get_model.train", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "xview2.XView2Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "torchcontrib.optim.SWA", "CfgNode.load_cfg.mode.startswith", "torch.save", "torch.save", "torch.save", "torchcontrib.optim.SWA.swap_swa_sgd", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train.bn_update", "torch.save", "torch.save", "torch.save", "args.config_path.endswith", "open", "yacs.config.CfgNode.load_cfg", "train.ModelLossWraper", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "xview2.XView2Dataset", "sorted", "random.sample", "enumerate", "enumerate", "os.path.join", "os.path.join", "len", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "print", "print", "multiprocessing.cpu_count", "filter", "list", "len", "len", "iter", "len", "next", "samples[].to", "samples[].to", "samples[].to", "nn.DataParallel.", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "utils.AverageMeter.update", "torch.sum", "torch.sum", "torch.sum", "torch.sum.backward", "torchcontrib.optim.SWA.step", "torchcontrib.optim.SWA.zero_grad", "len", "samples[].to", "samples[].to", "samples[].to", "nn.DataParallel.", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "torch.sum().detach().cpu", "utils.AverageMeter.update", "torch.sum", "torch.sum", "torch.sum", "torch.sum.backward", "torchcontrib.optim.SWA.step", "torchcontrib.optim.SWA.zero_grad", "torch.save", "torch.save", "torch.save", "models.dual_hrnet.get_model.state_dict", "torchcontrib.optim.SWA.state_dict", "multiprocessing.cpu_count", "models.dual_hrnet.get_model.state_dict", "torchcontrib.optim.SWA.state_dict", "models.dual_hrnet.get_model.parameters", "trainset_loaders.keys", "trainset_loaders.keys", "len", "utils.adjust_learning_rate", "numpy.isnan", "numpy.isinf", "print", "logger.info", "utils.adjust_learning_rate", "numpy.isnan", "numpy.isinf", "print", "logger.info", "os.path.join", "len", "range", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "models.dual_hrnet.get_model.state_dict", "torchcontrib.optim.SWA.state_dict", "len", "len", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.get_model", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.bn_update", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.update", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.update", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.isnan", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.adjust_learning_rate", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.isnan"], ["cur_set", ".", "dataset_size", "=", "len", "(", "filt_list", ")", "\n", "\n", "val_loaders", "[", "disaster", "]", "=", "DataLoader", "(", "cur_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "cpu_count", ",", "pin_memory", "=", "True", ")", "\n", "\n", "", "dataloaders", "=", "{", "'train'", ":", "train_loaders", ",", "'val'", ":", "val_loaders", "}", "\n", "\n", "\n", "\n", "\n", "\n", "# Model", "\n", "\n", "", "print", "(", "\"Initializing model\"", ")", "\n", "\n", "model_name", "=", "setting_dict", "[", "\"model\"", "]", "[", "\"name\"", "]", "\n", "model_args", "=", "setting_dict", "[", "\"model\"", "]", "[", "\"model_args\"", "]", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "torch", ".", "manual_seed", "(", "setting_dict", "[", "\"seed\"", "]", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "model", "=", "model_dict", "[", "model_name", "]", "(", "**", "model_args", ")", "\n", "\n", "if", "weight_path", "is", "not", "None", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "try", ":", "\n", "                ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "weight_path", ")", "[", "\"state_dict\"", "]", ")", "\n", "print", "(", "\"Loaded pretrained weights from file!\"", ")", "\n", "loaded", "=", "True", "\n", "", "except", ":", "\n", "                ", "loaded", "=", "False", "\n", "\n", "", "", "print", "(", "\"dataparallel\"", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "if", "weight_path", "is", "not", "None", ":", "\n", "            ", "if", "not", "loaded", ":", "\n", "                ", "print", "(", "\"loading weights\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "weight_path", ")", "[", "\"state_dict\"", "]", ")", "\n", "print", "(", "\"Loaded pretrained weights from file!\"", ")", "\n", "\n", "\n", "\n", "# Objective", "\n", "\n", "", "", "print", "(", "\"Setting Objective function\"", ")", "\n", "\n", "objective_name", "=", "setting_dict", "[", "'objective'", "]", "[", "'name'", "]", "\n", "objective_params", "=", "setting_dict", "[", "'objective'", "]", "[", "'params'", "]", "\n", "\n", "if", "objective_name", "==", "\"CE\"", ":", "\n", "        ", "class_weights", "=", "torch", ".", "FloatTensor", "(", "objective_params", "[", "\"weights\"", "]", ")", ".", "to", "(", "device", ")", "\n", "objective", "=", "objective_dict", "[", "objective_name", "]", "(", "weight", "=", "class_weights", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'objective not supported yet'", ")", "\n", "\n", "# Optimizer", "\n", "\n", "", "print", "(", "\"Initializing Optimizer\"", ")", "\n", "\n", "optimizer_name", "=", "setting_dict", "[", "'optimizer'", "]", "[", "'name'", "]", "\n", "lr", "=", "setting_dict", "[", "'optimizer'", "]", "[", "'learning_rate'", "]", "\n", "\n", "if", "optimizer_name", "==", "\"SWA\"", ":", "\n", "        ", "base_opt", "=", "optimizer_dict", "[", "optimizer_name", "]", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "if", "not", "setting_dict", "[", "\"data\"", "]", "[", "\"adabn_train\"", "]", ":", "\n", "            ", "steps_per_epoch", "=", "len", "(", "train_loader", ")", "\n", "", "else", ":", "\n", "            ", "steps_per_epoch", "=", "sum", "(", "[", "len", "(", "dataloader", ")", "for", "dataloader", "in", "train_loaders", "]", ")", "\n", "", "swa_kick", "=", "setting_dict", "[", "'optimizer'", "]", "[", "'swa_kick'", "]", "\n", "#optimizer = SWA(base_opt, swa_start=100, swa_freq=50, swa_lr=lr/2)", "\n", "optimizer", "=", "SWA", "(", "base_opt", ",", "swa_start", "=", "swa_kick", "*", "steps_per_epoch", ",", "swa_freq", "=", "steps_per_epoch", ",", "swa_lr", "=", "lr", "/", "2", ")", "\n", "", "else", ":", "\n", "        ", "if", "model_name", "==", "\"loc_wrapper\"", ":", "\n", "            ", "optimizer", "=", "optimizer_dict", "[", "optimizer_name", "]", "(", "model", ".", "dmg_model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "", "else", ":", "\n", "            ", "optimizer", "=", "optimizer_dict", "[", "optimizer_name", "]", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "# Call", "\n", "\n", "", "", "print", "(", "\"Starting model training....\"", ")", "\n", "\n", "n_epochs", "=", "setting_dict", "[", "'epochs'", "]", "\n", "lr_patience", "=", "setting_dict", "[", "'optimizer'", "]", "[", "'sheduler'", "]", "[", "'patience'", "]", "\n", "lr_factor", "=", "setting_dict", "[", "'optimizer'", "]", "[", "'sheduler'", "]", "[", "'factor'", "]", "\n", "\n", "if", "weight_path", "is", "None", ":", "\n", "        ", "best_epoch", "=", "train", "(", "model", ",", "dataloaders", ",", "objective", ",", "optimizer", ",", "n_epochs", ",", "Path_list", "[", "1", "]", ",", "Path_list", "[", "2", "]", ",", "lr_patience", "=", "lr_patience", ",", "lr_factor", "=", "lr_factor", ",", "dice", "=", "False", ",", "seperate_loss", "=", "False", ",", "adabn", "=", "setting_dict", "[", "\"data\"", "]", "[", "\"adabn_train\"", "]", ",", "own_sheduler", "=", "(", "not", "setting_dict", "[", "\"optimizer\"", "]", "[", "\"longshedule\"", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "weight_path", ")", "[", "\"optimizer\"", "]", ")", "\n", "best_epoch", "=", "train", "(", "model", ",", "dataloaders", ",", "objective", ",", "optimizer", ",", "n_epochs", "-", "torch", ".", "load", "(", "weight_path", ")", "[", "\"epoch\"", "]", ",", "Path_list", "[", "1", "]", ",", "Path_list", "[", "2", "]", ",", "start_epoch", "=", "torch", ".", "load", "(", "weight_path", ")", "[", "\"epoch\"", "]", "+", "1", ",", "loss_dict", "=", "torch", ".", "load", "(", "weight_path", ")", "[", "\"loss_dict\"", "]", ",", "lr_patience", "=", "lr_patience", ",", "lr_factor", "=", "lr_factor", ",", "dice", "=", "False", ",", "seperate_loss", "=", "False", ",", "adabn", "=", "setting_dict", "[", "\"data\"", "]", "[", "\"adabn_train\"", "]", ",", "own_sheduler", "=", "(", "not", "setting_dict", "[", "\"optimizer\"", "]", "[", "\"longshedule\"", "]", ")", ")", "\n", "\n", "", "print", "(", "\"model training finished! yey!\"", ")", "\n", "\n", "if", "optimizer_name", "==", "\"SWA\"", ":", "\n", "        ", "print", "(", "\"Updating batch norm pars for SWA\"", ")", "\n", "train_dataset", ".", "dataset", ".", "SWA", "=", "True", "\n", "SWA_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "cpu_count", ")", "\n", "optimizer", ".", "swap_swa_sgd", "(", ")", "\n", "optimizer", ".", "bn_update", "(", "SWA_loader", ",", "model", ",", "device", "=", "'cuda'", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "n_epochs", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss_dict'", ":", "{", "}", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "Path_list", "[", "2", "]", ",", "'weights_SWA.pt'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.ModelWraper.__init__": [[131, 139], ["torch.Module.__init__", "model.cuda"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__"], ["print", "(", "set", "(", "[", "d", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "for", "d", "in", "hold_dataset", ".", "files", "]", ")", ")", "\n", "viz_dataset", "=", "DisastersDatasetUnet", "(", "viz_folder", ",", "train", "=", "True", ",", "im_size", "=", "[", "1024", ",", "1024", "]", ",", "transform", "=", "tr", ".", "ToTensor", "(", ")", ",", "normalize", "=", "False", ",", "flip", "=", "False", ")", "\n", "\n", "batchsizefactor", "=", "4", "if", "model_number", "==", "1", "else", "2", "\n", "\n", "val_loader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "batchsizefactor", "*", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "cpu_count", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "batchsizefactor", "*", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "cpu_count", ")", "\n", "hold_loader", "=", "DataLoader", "(", "hold_dataset", ",", "batch_size", "=", "max", "(", "1", ",", "int", "(", "batch_size", "*", "(", "batchsizefactor", "/", "16", ")", ")", ")", ",", "shuffle", "=", "False", ",", "num_workers", "=", "cpu_count", ")", "\n", "viz_loader", "=", "DataLoader", "(", "viz_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.ModelWraper.forward": [[140, 157], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "test.ModelWraper.model", "torch.interpolate", "torch.interpolate", "torch.interpolate", "inputs_pre.cuda.cuda.cuda", "inputs_post.cuda.cuda.cuda", "torch.interpolate", "torch.interpolate", "torch.interpolate", "inputs_pre.cuda.cuda.size", "inputs_post.cuda.cuda.size"], "methods", ["None"], ["\n", "", "else", ":", "\n", "        ", "batchsizefactor", "=", "4", "if", "model_number", "==", "1", "else", "2", "\n", "test_loaders", "=", "[", "]", "\n", "for", "disaster", "in", "disaster_list_test", ":", "\n", "            ", "test_dataset", "=", "DisastersDatasetUnet", "(", "data_folder", ",", "train", "=", "True", ",", "im_size", "=", "[", "img_size", ",", "img_size", "]", ",", "transform", "=", "tr", ".", "ToTensor", "(", ")", ",", "normalize", "=", "False", ",", "flip", "=", "False", ",", "disaster_list", "=", "[", "disaster", "]", ")", "\n", "print", "(", "disaster", ")", "\n", "print", "(", "set", "(", "[", "d", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "for", "d", "in", "test_dataset", ".", "files", "]", ")", ")", "\n", "test_loaders", ".", "append", "(", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "batchsizefactor", "*", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "cpu_count", ")", ")", "\n", "", "hold_loaders", "=", "[", "]", "\n", "for", "disaster", "in", "disaster_list_train", ":", "\n", "            ", "hold_dataset", "=", "DisastersDatasetUnet", "(", "holdout_folder", ",", "train", "=", "True", ",", "im_size", "=", "[", "1024", ",", "1024", "]", ",", "transform", "=", "tr", ".", "ToTensor", "(", ")", ",", "normalize", "=", "False", ",", "flip", "=", "False", ",", "disaster_list", "=", "[", "disaster", "]", ")", "\n", "print", "(", "disaster", ")", "\n", "print", "(", "set", "(", "[", "d", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "for", "d", "in", "hold_dataset", ".", "files", "]", ")", ")", "\n", "hold_loaders", ".", "append", "(", "DataLoader", "(", "hold_dataset", ",", "batch_size", "=", "max", "(", "1", ",", "int", "(", "batch_size", "*", "(", "batchsizefactor", "/", "16", ")", ")", ")", ",", "shuffle", "=", "False", ",", "num_workers", "=", "cpu_count", ")", ")", "\n", "", "viz_dataset", "=", "DisastersDatasetUnet", "(", "viz_folder", ",", "train", "=", "True", ",", "im_size", "=", "[", "1024", ",", "1024", "]", ",", "transform", "=", "tr", ".", "ToTensor", "(", ")", ",", "normalize", "=", "False", ",", "flip", "=", "False", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "batchsizefactor", "*", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "cpu_count", ")", "\n", "viz_loader", "=", "DataLoader", "(", "viz_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.bn_update": [[29, 75], ["model.train", "torch.device", "torch.device", "torch.device", "model.apply", "model.apply", "tqdm.tqdm", "model.apply", "model.train", "test._check_bn", "inputs_pre.size", "momenta.keys", "model", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "test._get_momenta", "float", "inputs_pre.to", "inputs_post.to", "test._set_momenta"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.model.caller.train", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._check_bn", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._get_momenta", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._set_momenta"], ["disaster_dict", "=", "{", "\n", "\"all\"", ":", "(", "None", ",", "None", ")", ",", "\n", "\"holdout\"", ":", "(", "holdout_train", ",", "holdout_test", ")", ",", "\n", "\"holdout2\"", ":", "(", "holdout2_train", ",", "holdout2_test", ")", ",", "\n", "\"holdout3\"", ":", "(", "holdout3_train", ",", "holdout3_test", ")", ",", "\n", "\"gupta\"", ":", "(", "gupta_train", ",", "gupta_test", ")", ",", "\n", "\"big\"", ":", "(", "big_train", ",", "big_test", ")", ",", "\n", "\"hold\"", ":", "(", "big_train", ",", "big_test", ")", "\n", "}", "\n", "\n", "\n", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train according to a given setting\"", ")", "\n", "parser", ".", "add_argument", "(", "'setting'", ",", "type", "=", "str", ",", "metavar", "=", "'setting.json'", ",", "help", "=", "'path to setting json'", ")", "\n", "parser", ".", "add_argument", "(", "'--weights'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "metavar", "=", "'str'", ",", "help", "=", "'path to weights pt file'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "\"both\"", ",", "metavar", "=", "'test hold both'", ",", "help", "=", "'mode'", ")", "\n", "parser", ".", "add_argument", "(", "'--second_model'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "metavar", "=", "'setting.json'", ",", "help", "=", "'path to setting json of second model'", ")", "\n", "parser", ".", "add_argument", "(", "'--second_model_weights'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "metavar", "=", "'str'", ",", "help", "=", "'path to weights pt file'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_folder'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "setting_name", "=", "args", ".", "setting", "\n", "setting_name_components", "=", "setting_name", ".", "split", "(", "\"_\"", ")", "\n", "if", "setting_name_components", "[", "2", "]", ".", "startswith", "(", "\"multi\"", ")", ":", "\n", "        ", "setting_name_components", "[", "2", "]", "=", "\"multi\"", "\n", "", "else", ":", "\n", "        ", "setting_name_components", "[", "2", "]", "=", "\"plain\"", "\n", "", "setting_path", "=", "\"experiments/\"", "+", "\"_\"", ".", "join", "(", "setting_name_components", ")", "+", "\".json\"", "\n", "\n", "second_model_path", "=", "args", ".", "second_model", "\n", "if", "args", ".", "weights", "==", "\"paper\"", ":", "\n", "        ", "weight_path", "=", "download_weights", "(", "setting_name", ")", "\n", "", "else", ":", "\n", "        ", "weight_path", "=", "args", ".", "weights", "\n", "", "second_weight_path", "=", "args", ".", "second_model_weights", "\n", "\n", "print", "(", "\"Creating folders\"", ")", "\n", "\n", "Path_list", "=", "[", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'val'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'viz'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'test'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'val'", ",", "'images'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'val'", ",", "'predictions'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'val'", ",", "'targets'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'viz'", ",", "'images'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'viz'", ",", "'predictions'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'viz'", ",", "'targets'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'test'", ",", "'images'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'test'", ",", "'predictions'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'test'", ",", "'targets'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'hold'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'hold'", ",", "'images'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'hold'", ",", "'targets'", ")", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "'output'", ",", "'hold'", ",", "'predictions'", ")", "]", "\n", "#Path_list = [os.path.join('/local/jobs/5314827/', p) for p in Path_list]", "\n", "for", "Path", "in", "Path_list", "+", "[", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ")", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "Path", ")", ":", "\n", "            ", "print", "(", "\"Created folder {}\"", ".", "format", "(", "Path", ")", ")", "\n", "os", ".", "mkdir", "(", "Path", ")", "\n", "\n", "", "", "print", "(", "\"Loading settings\"", ")", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._check_bn_apply": [[78, 81], ["issubclass"], "function", ["None"], ["        ", "setting_dict", "=", "json", ".", "load", "(", "JSON", ")", "\n", "\n", "", "if", "second_model_path", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "second_model_path", ",", "'r'", ")", "as", "JSON", ":", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._check_bn": [[83, 87], ["model.apply", "test._check_bn_apply"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._check_bn_apply"], ["\n", "", "", "for", "k", ",", "v", "in", "default_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "setting_dict", ":", "\n", "            ", "setting_dict", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._reset_bn": [[89, 93], ["issubclass", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["                ", "for", "kk", ",", "vv", "in", "v", ".", "items", "(", ")", ":", "\n", "                    ", "if", "kk", "not", "in", "setting_dict", "[", "k", "]", ":", "\n", "                        ", "setting_dict", "[", "k", "]", "[", "kk", "]", "=", "vv", "\n", "\n", "", "", "", "", "", "model_type", "=", "setting_dict", "[", "\"model\"", "]", "[", "\"type\"", "]", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._get_momenta": [[95, 98], ["issubclass"], "function", ["None"], ["if", "model_type", "in", "[", "\"twostageloc\"", ",", "\"twostagedmg\"", "]", ":", "\n", "        ", "model_number", "=", "2", "\n", "", "else", ":", "\n", "        ", "model_number", "=", "1", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test._set_momenta": [[100, 103], ["issubclass"], "function", ["None"], ["# Dataloader regime", "\n", "\n", "", "print", "(", "\"Preparing dataset\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax": [[159, 167], ["torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax"], ["# Model", "\n", "\n", "", "print", "(", "\"Initializing model(s)\"", ")", "\n", "\n", "if", "model_number", "==", "1", ":", "\n", "\n", "        ", "model_name", "=", "setting_dict", "[", "\"model\"", "]", "[", "\"name\"", "]", "\n", "model_args", "=", "setting_dict", "[", "\"model\"", "]", "[", "\"model_args\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.main": [[169, 332], ["print", "models.dual_hrnet.get_model", "models.dual_hrnet.get_model.load_state_dict", "models.dual_hrnet.get_model.eval", "test.ModelWraper", "ModelWraper.eval", "utils.download_weights", "os.makedirs", "utils.safe_mkdir", "utils.safe_mkdir", "utils.safe_mkdir", "dataset_mode.startswith", "scoring.xview2_metrics.XviewMetrics", "scoring.xview2_metrics.XviewMetrics.compute_score", "torch.load", "torch.load", "torch.load", "os.path.join", "os.path.join", "xview2.XView2Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "enumerate", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "yacs.config.CfgNode.load_cfg", "open", "yacs.config.CfgNode.load_cfg", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sorted", "tqdm.tqdm", "ModelWraper.", "enumerate", "os.listdir", "xview2.XView2Dataset", "list", "print", "test.bn_update", "enumerate", "test.argmax", "loc.detach().cpu().numpy().astype.detach().cpu().numpy().astype", "copy.deepcopy.detach().cpu().numpy().astype", "torch.argmax", "torch.argmax", "torch.argmax", "loc.detach().cpu().numpy().astype.detach().cpu().numpy().astype", "copy.deepcopy", "zip", "skimage.io.imsave", "skimage.io.imsave", "os.path.join", "os.rename", "os.rename", "p.replace.replace", "os.rename", "os.rename", "len", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "testset_loaders.keys", "len", "tqdm.tqdm", "ModelWraper.", "enumerate", "os.path.join", "os.path.join", "mask.cpu().numpy().astype.cpu().numpy().astype", "skimage.io.imsave", "skimage.io.imsave", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "test.argmax", "loc.detach().cpu().numpy().astype.detach().cpu().numpy().astype", "copy.deepcopy.detach().cpu().numpy().astype", "torch.argmax", "torch.argmax", "torch.argmax", "loc.detach().cpu().numpy().astype.detach().cpu().numpy().astype", "copy.deepcopy", "zip", "skimage.io.imsave", "skimage.io.imsave", "loc.detach().cpu().numpy().astype.detach().cpu().numpy", "copy.deepcopy.detach().cpu().numpy", "loc.detach().cpu().numpy().astype.detach().cpu().numpy", "os.path.join", "os.path.join", "p.replace.replace", "p.replace.replace", "len", "os.path.join", "os.path.join", "mask.cpu().numpy().astype.cpu().numpy().astype", "skimage.io.imsave", "skimage.io.imsave", "mask.cpu().numpy().astype.cpu().numpy", "loc.detach().cpu().numpy().astype.detach().cpu().numpy", "copy.deepcopy.detach().cpu().numpy", "loc.detach().cpu().numpy().astype.detach().cpu().numpy", "os.path.join", "os.path.join", "loc.detach().cpu().numpy().astype.detach().cpu", "copy.deepcopy.detach().cpu", "loc.detach().cpu().numpy().astype.detach().cpu", "mask.cpu().numpy().astype.cpu().numpy", "mask.cpu().numpy().astype.cpu", "loc.detach().cpu().numpy().astype.detach().cpu", "copy.deepcopy.detach().cpu", "loc.detach().cpu().numpy().astype.detach().cpu", "loc.detach().cpu().numpy().astype.detach", "copy.deepcopy.detach", "loc.detach().cpu().numpy().astype.detach", "p.replace.split", "str().zfill", "p.replace.split", "str().zfill", "p.replace.split", "p.replace.split", "str().zfill", "p.replace.split", "str().zfill", "p.replace.split", "mask.cpu().numpy().astype.cpu", "loc.detach().cpu().numpy().astype.detach", "copy.deepcopy.detach", "loc.detach().cpu().numpy().astype.detach", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.get_model", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.download_weights", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.safe_mkdir", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.safe_mkdir", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.safe_mkdir", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.compute_score", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.bn_update", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax"], ["device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "\"seed\"", ")", "\n", "torch", ".", "manual_seed", "(", "42", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "print", "(", "\"load model\"", ")", "\n", "model", "=", "model_dict", "[", "model_name", "]", "(", "**", "model_args", ")", "\n", "print", "(", "\"load weights\"", ")", "\n", "\n", "if", "weight_path", "is", "not", "None", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "try", ":", "\n", "                ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "weight_path", ")", "[", "\"state_dict\"", "]", ")", "\n", "loaded", "=", "True", "\n", "", "except", ":", "\n", "                ", "loaded", "=", "False", "\n", "\n", "", "", "print", "(", "\"dataparallel\"", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", "or", "(", "(", "weight_path", "is", "not", "None", ")", "and", "(", "not", "loaded", ")", ")", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "if", "weight_path", "is", "not", "None", ":", "\n", "            ", "if", "not", "loaded", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "weight_path", ")", "[", "\"state_dict\"", "]", ")", "\n", "\n", "", "", "print", "(", "\"to gpu\"", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "\n", "print", "(", "\"set tester\"", ")", "\n", "model_tester", "=", "partial", "(", "test", ",", "model", "=", "model", ")", "\n", "\n", "\n", "", "elif", "model_number", "==", "2", ":", "\n", "        ", "fusion_style", "=", "'none'", "\n", "models", "=", "{", "}", "\n", "for", "stage", "in", "[", "\"twostageloc\"", ",", "\"twostagedmg\"", "]", ":", "\n", "            ", "if", "model_type", "==", "stage", ":", "\n", "                ", "current_dict", "=", "setting_dict", "\n", "current_weight", "=", "weight_path", "\n", "", "elif", "second_model_path", "is", "not", "None", ":", "\n", "                ", "current_dict", "=", "second_dict", "\n", "current_weight", "=", "second_weight_path", "\n", "", "else", ":", "\n", "                ", "if", "stage", "==", "\"twostageloc\"", ":", "\n", "                    ", "current_dict", "=", "{", "\"model\"", ":", "{", "\"name\"", ":", "\"unet\"", ",", "\"model_args\"", ":", "{", "\"in_channels\"", ":", "6", ",", "\"n_classes\"", ":", "1", ",", "\"depth\"", ":", "2", ",", "\"wf\"", ":", "3", ",", "\"padding\"", ":", "True", ",", "\"batch_norm\"", ":", "True", ",", "\"dropout\"", ":", "False", ",", "\"up_mode\"", ":", "\"upsample\"", ",", "\"seperate_loss\"", ":", "False", "}", "}", "}", "\n", "fusion_style", "=", "'dmg'", "\n", "", "elif", "stage", "==", "\"twostagedmg\"", ":", "\n", "                    ", "current_dict", "=", "{", "\"model\"", ":", "{", "\"name\"", ":", "\"unet\"", ",", "\"model_args\"", ":", "{", "\"in_channels\"", ":", "6", ",", "\"n_classes\"", ":", "5", ",", "\"depth\"", ":", "2", ",", "\"wf\"", ":", "3", ",", "\"padding\"", ":", "True", ",", "\"batch_norm\"", ":", "True", ",", "\"dropout\"", ":", "False", ",", "\"up_mode\"", ":", "\"upsample\"", ",", "\"seperate_loss\"", ":", "False", "}", "}", "}", "\n", "", "current_weight", "=", "None", "\n", "", "current_name", "=", "current_dict", "[", "\"model\"", "]", "[", "\"name\"", "]", "\n", "current_args", "=", "current_dict", "[", "\"model\"", "]", "[", "\"model_args\"", "]", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "torch", ".", "manual_seed", "(", "42", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "current_model", "=", "model_dict", "[", "current_name", "]", "(", "**", "current_args", ")", "\n", "current_model", ".", "to", "(", "device", ")", "\n", "\n", "if", "current_weight", "is", "not", "None", ":", "\n", "                ", "current_model", ".", "eval", "(", ")", "\n", "current_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "current_weight", ")", "[", "\"state_dict\"", "]", ")", "\n", "\n", "", "models", "[", "stage", "]", "=", "current_model", "\n", "\n", "", "model_tester", "=", "partial", "(", "test_twostage", ",", "loc_model", "=", "models", "[", "\"twostageloc\"", "]", ",", "dmg_model", "=", "models", "[", "\"twostagedmg\"", "]", ",", "fusion_style", "=", "fusion_style", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "(", "\"This is the weirdest error ever because you somehow managed to give a different number of models to the script which is by definition of the model number impossible.\"", ")", "\n", "\n", "\n", "# Viz prediction", "\n", "\n", "\n", "", "print", "(", "\"Prediction on small viz dataset (for debugging purposes) started\"", ")", "\n", "\n", "#model_tester(dataloader = viz_loader, output_path_directory = Path_list[3])", "\n", "\n", "# Val prediction", "\n", "\n", "print", "(", "\"Prediction on validation dataset started\"", ")", "\n", "\n", "#model_tester(dataloader = val_loader, output_path_directory = Path_list[2])", "\n", "\n", "MetricsInstance", "=", "XviewMetrics", "(", "Path_list", "[", "6", "]", ",", "Path_list", "[", "7", "]", ")", "\n", "\n", "#MetricsInstance.compute_score(Path_list[6],Path_list[7], os.path.join(Path_list[0],\"Results_val.json\"))", "\n", "\n", "# Test prediction", "\n", "\n", "print", "(", "\"Prediction on test dataset started\"", ")", "\n", "\n", "if", "args", ".", "mode", "in", "[", "\"test\"", ",", "\"both\"", "]", ":", "\n", "        ", "if", "not", "setting_dict", "[", "\"data\"", "]", "[", "\"adabn\"", "]", ":", "\n", "            ", "model_tester", "(", "dataloader", "=", "test_loader", ",", "output_path_directory", "=", "Path_list", "[", "4", "]", ",", "adapt", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "for", "idx", ",", "dataloader", "in", "enumerate", "(", "test_loaders", ")", ":", "\n", "#base_path = os.path.join(Path_list[4],disaster_list_test[idx])", "\n", "#os.makedirs(base_path, exist_ok = True)", "\n", "#os.makedirs(os.path.join(base_path,\"images\"))", "\n", "#os.makedirs(os.path.join(base_path,\"targets\"))", "\n", "#os.makedirs(os.path.join(base_path,\"predictions\"))", "\n", "#model_tester(dataloader = dataloader, output_path_directory = base_path, adapt = False, start_idx = idx*200000)", "\n", "#MetricsInstance.compute_score(os.path.join(base_path,\"predictions\"),os.path.join(base_path,\"targets\"), os.path.join('experiments',setting_name,\"Results_test_{}.json\".format(disaster_list_test[idx])))", "\n", "                ", "model_tester", "(", "dataloader", "=", "dataloader", ",", "output_path_directory", "=", "Path_list", "[", "4", "]", ",", "adapt", "=", "True", ",", "start_idx", "=", "idx", "*", "200000", ")", "\n", "\n", "", "", "MetricsInstance", ".", "compute_score", "(", "Path_list", "[", "12", "]", ",", "Path_list", "[", "13", "]", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "\"Results_OOD.json\"", ")", ")", "\n", "\n", "# Hold prediction", "\n", "\n", "", "print", "(", "\"Prediction on holdout dataset started\"", ")", "\n", "if", "args", ".", "mode", "in", "[", "\"hold\"", ",", "\"both\"", "]", ":", "\n", "        ", "if", "not", "setting_dict", "[", "\"data\"", "]", "[", "\"adabn\"", "]", ":", "\n", "            ", "model_tester", "(", "dataloader", "=", "hold_loader", ",", "output_path_directory", "=", "Path_list", "[", "14", "]", ",", "adapt", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "for", "idx", ",", "dataloader", "in", "enumerate", "(", "hold_loaders", ")", ":", "\n", "#base_path = os.path.join(Path_list[14],disaster_list_train[idx])", "\n", "#os.makedirs(base_path, exist_ok = True)", "\n", "#os.makedirs(os.path.join(base_path,\"images\"))", "\n", "#os.makedirs(os.path.join(base_path,\"targets\"))", "\n", "#os.makedirs(os.path.join(base_path,\"predictions\"))", "\n", "                ", "if", "len", "(", "dataloader", ")", ">", "0", ":", "\n", "#model_tester(dataloader = dataloader, output_path_directory = base_path, adapt = False, start_idx = idx*200000)", "\n", "#MetricsInstance.compute_score(os.path.join(base_path,\"predictions\"),os.path.join(base_path,\"targets\"), os.path.join('experiments',setting_name,\"Results_hold_{}.json\".format(disaster_list_train[idx])))", "\n", "                    ", "model_tester", "(", "dataloader", "=", "dataloader", ",", "output_path_directory", "=", "Path_list", "[", "14", "]", ",", "adapt", "=", "True", ",", "start_idx", "=", "idx", "*", "100000", ")", "\n", "\n", "", "", "", "MetricsInstance", ".", "compute_score", "(", "Path_list", "[", "17", "]", ",", "Path_list", "[", "16", "]", ",", "os", ".", "path", ".", "join", "(", "'experiments'", ",", "setting_name", ",", "\"Results_IID.json\"", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.__init__": [[21, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "None", "\n", "self", ".", "sum", "=", "None", "\n", "self", ".", "cnt", "=", "None", "\n", "self", ".", "avg", "=", "None", "\n", "self", ".", "ema", "=", "None", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.update": [[29, 34], ["utils.AverageMeter.initialize", "utils.AverageMeter.add"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.initialize", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", "val", ",", "n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add", "(", "val", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.initialize": [[35, 42], ["None"], "methods", ["None"], ["", "", "def", "initialize", "(", "self", ",", "val", ",", "n", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "=", "val", "*", "n", "\n", "self", ".", "cnt", "=", "n", "\n", "self", ".", "avg", "=", "val", "\n", "self", ".", "ema", "=", "val", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.add": [[43, 49], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "val", ",", "n", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "self", ".", "ema", "=", "self", ".", "ema", "*", "0.99", "+", "self", ".", "val", "*", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.OhemCrossEntropy.__init__": [[129, 138], ["torch.Module.__init__", "max", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", "=", "-", "1", ",", "thres", "=", "0.7", ",", "\n", "min_kept", "=", "100000", ",", "weight", "=", "None", ")", ":", "\n", "        ", "super", "(", "OhemCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "thresh", "=", "thres", "\n", "self", ".", "min_kept", "=", "max", "(", "1", ",", "min_kept", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "\n", "ignore_index", "=", "ignore_label", ",", "\n", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.OhemCrossEntropy.forward": [[139, 158], ["torch.softmax", "torch.softmax", "torch.softmax", "utils.OhemCrossEntropy.criterion().contiguous().view", "target.clone", "pred.gather.gather.gather", "[].contiguous().sort", "max", "utils.OhemCrossEntropy.mean", "torch.upsample.size", "torch.upsample.size", "target.size", "target.size", "torch.upsample", "torch.upsample", "torch.upsample", "target.contiguous().view", "target.clone.unsqueeze", "utils.OhemCrossEntropy.criterion().contiguous", "[].contiguous", "min", "target.contiguous", "utils.OhemCrossEntropy.criterion", "pred.gather.gather.numel", "pred.gather.gather.contiguous().view", "pred.gather.gather.contiguous"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.lovasz.mean"], ["", "def", "forward", "(", "self", ",", "score", ",", "target", ",", "**", "kwargs", ")", ":", "\n", "        ", "ph", ",", "pw", "=", "score", ".", "size", "(", "2", ")", ",", "score", ".", "size", "(", "3", ")", "\n", "h", ",", "w", "=", "target", ".", "size", "(", "1", ")", ",", "target", ".", "size", "(", "2", ")", "\n", "if", "ph", "!=", "h", "or", "pw", "!=", "w", ":", "\n", "            ", "score", "=", "F", ".", "upsample", "(", "input", "=", "score", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "", "pred", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "1", ")", "\n", "pixel_losses", "=", "self", ".", "criterion", "(", "score", ",", "target", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "mask", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "!=", "self", ".", "ignore_label", "\n", "\n", "tmp_target", "=", "target", ".", "clone", "(", ")", "\n", "tmp_target", "[", "tmp_target", "==", "self", ".", "ignore_label", "]", "=", "0", "\n", "pred", "=", "pred", ".", "gather", "(", "1", ",", "tmp_target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "pred", ",", "ind", "=", "pred", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", ")", "[", "mask", "]", ".", "contiguous", "(", ")", ".", "sort", "(", ")", "\n", "min_value", "=", "pred", "[", "min", "(", "self", ".", "min_kept", ",", "pred", ".", "numel", "(", ")", "-", "1", ")", "]", "\n", "threshold", "=", "max", "(", "min_value", ",", "self", ".", "thresh", ")", "\n", "\n", "pixel_losses", "=", "pixel_losses", "[", "mask", "]", "[", "ind", "]", "\n", "pixel_losses", "=", "pixel_losses", "[", "pred", "<", "threshold", "]", "\n", "return", "pixel_losses", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.CRF_Refiner.__init__": [[167, 171], ["__import__", "utils.CRF_Refiner.dcrf.DenseCRF"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ")", ":", "\n", "        ", "self", ".", "dcrf", "=", "__import__", "(", "'pydensecrf.densecrf'", ")", "\n", "\n", "self", ".", "d", "=", "self", ".", "dcrf", ".", "DenseCRF", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.CRF_Refiner.__call__": [[172, 205], ["utils.CRF_Refiner.dcrf.utils.softmax_to_unary", "numpy.ascontiguousarray", "utils.CRF_Refiner.d.setUnaryEnergy", "utils.CRF_Refiner.dcrf.utils.create_pairwise_gaussian", "utils.CRF_Refiner.d.addPairwiseEnergy", "utils.CRF_Refiner.dcrf.utils.create_pairwise_bilateral", "utils.CRF_Refiner.d.addPairwiseEnergy", "utils.CRF_Refiner.d.inference", "numpy.argmax().reshape", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.test.argmax"], ["", "def", "__call__", "(", "self", ",", "softmax", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        :param softmax: [C, H, W]\n        :param image: [H, W, 3]\n        :return:\n        \"\"\"", "\n", "# The input should be the negative of the logarithm of probability values", "\n", "# Look up the definition of the softmax_to_unary for more information", "\n", "unary", "=", "self", ".", "dcrf", ".", "utils", ".", "softmax_to_unary", "(", "softmax", ")", "\n", "\n", "# The inputs should be C-continious -- we are using Cython wrapper", "\n", "unary", "=", "np", ".", "ascontiguousarray", "(", "unary", ")", "\n", "self", ".", "d", ".", "setUnaryEnergy", "(", "unary", ")", "\n", "\n", "# This potential penalizes small pieces of segmentation that are", "\n", "# spatially isolated -- enforces more spatially consistent segmentations", "\n", "feats", "=", "self", ".", "dcrf", ".", "utils", ".", "create_pairwise_gaussian", "(", "sdims", "=", "(", "10", ",", "10", ")", ",", "shape", "=", "image", ".", "shape", "[", ":", "2", "]", ")", "\n", "\n", "self", ".", "d", ".", "addPairwiseEnergy", "(", "feats", ",", "compat", "=", "3", ",", "\n", "kernel", "=", "self", ".", "dcrf", ".", "DIAG_KERNEL", ",", "\n", "normalization", "=", "self", ".", "dcrf", ".", "NORMALIZE_SYMMETRIC", ")", "\n", "\n", "# This creates the color-dependent features --", "\n", "# because the segmentation that we get from CNN are too coarse", "\n", "# and we can use local color features to refine them", "\n", "feats", "=", "self", ".", "dcrf", ".", "utils", ".", "create_pairwise_bilateral", "(", "sdims", "=", "(", "50", ",", "50", ")", ",", "schan", "=", "(", "20", ",", "20", ",", "20", ")", ",", "img", "=", "image", ",", "chdim", "=", "2", ")", "\n", "\n", "self", ".", "d", ".", "addPairwiseEnergy", "(", "feats", ",", "compat", "=", "10", ",", "\n", "kernel", "=", "self", ".", "dcrf", ".", "DIAG_KERNEL", ",", "\n", "normalization", "=", "self", ".", "dcrf", ".", "NORMALIZE_SYMMETRIC", ")", "\n", "Q", "=", "self", ".", "d", ".", "inference", "(", "5", ")", "\n", "res", "=", "np", ".", "argmax", "(", "Q", ",", "axis", "=", "0", ")", ".", "reshape", "(", "(", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.DownloadProgressBar.update_to": [[242, 246], ["utils.DownloadProgressBar.update"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.update"], ["    ", "def", "update_to", "(", "self", ",", "b", "=", "1", ",", "bsize", "=", "1", ",", "tsize", "=", "None", ")", ":", "\n", "        ", "if", "tsize", "is", "not", "None", ":", "\n", "            ", "self", ".", "total", "=", "tsize", "\n", "", "self", ".", "update", "(", "b", "*", "bsize", "-", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.inter_and_union": [[51, 67], ["numpy.asarray().copy", "numpy.asarray().copy", "numpy.histogram", "numpy.histogram", "numpy.histogram", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "", "def", "inter_and_union", "(", "pred", ",", "mask", ",", "num_class", ")", ":", "\n", "    ", "pred", "=", "np", ".", "asarray", "(", "pred", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "copy", "(", ")", "\n", "mask", "=", "np", ".", "asarray", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "copy", "(", ")", "\n", "\n", "# 255 -> 0", "\n", "pred", "+=", "1", "\n", "mask", "+=", "1", "\n", "pred", "=", "pred", "*", "(", "mask", ">", "0", ")", "\n", "\n", "inter", "=", "pred", "*", "(", "pred", "==", "mask", ")", "\n", "(", "area_inter", ",", "_", ")", "=", "np", ".", "histogram", "(", "inter", ",", "bins", "=", "num_class", ",", "range", "=", "(", "1", ",", "num_class", ")", ")", "\n", "(", "area_pred", ",", "_", ")", "=", "np", ".", "histogram", "(", "pred", ",", "bins", "=", "num_class", ",", "range", "=", "(", "1", ",", "num_class", ")", ")", "\n", "(", "area_mask", ",", "_", ")", "=", "np", ".", "histogram", "(", "mask", ",", "bins", "=", "num_class", ",", "range", "=", "(", "1", ",", "num_class", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_mask", "-", "area_inter", "\n", "\n", "return", "area_inter", ",", "area_union", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.preprocess": [[69, 126], ["isinstance", "isinstance", "isinstance", "transform_list.append", "transform_list.append", "torchvision.Compose", "transforms.Compose.", "transforms.Compose.", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "math.pow", "image1.transpose.resize", "image2.transpose.resize", "mask.transpose.resize", "torchvision.ToTensor", "torchvision.Normalize", "numpy.array().astype", "max", "max", "random.randint", "random.randint", "random.random", "image1.transpose.transpose", "image2.transpose.transpose", "mask.transpose.transpose", "random.random", "image1.transpose.transpose", "image2.transpose.transpose", "mask.transpose.transpose", "random.random", "image1.transpose.transpose", "image2.transpose.transpose", "mask.transpose.transpose", "math.log", "int", "int", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "torch.nn.ConstantPad2d", "torch.nn.ConstantPad2d", "torch.nn.ConstantPad2d", "random.random", "round", "round", "numpy.array", "math.log", "math.log"], "function", ["None"], ["", "def", "preprocess", "(", "image1", ",", "image2", ",", "mask", ",", "flip", "=", "False", ",", "scale", "=", "False", ",", "crop", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "image1", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "image1", "=", "Image", ".", "fromarray", "(", "image1", ")", "\n", "", "if", "isinstance", "(", "image2", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "image2", "=", "Image", ".", "fromarray", "(", "image2", ")", "\n", "", "if", "isinstance", "(", "mask", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "mask", "=", "Image", ".", "fromarray", "(", "mask", ")", "\n", "", "if", "flip", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image1", "=", "image1", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "image2", "=", "image2", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image1", "=", "image1", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "image2", "=", "image2", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "image1", "=", "image1", ".", "transpose", "(", "Image", ".", "ROTATE_90", ")", "\n", "image2", "=", "image2", ".", "transpose", "(", "Image", ".", "ROTATE_90", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "ROTATE_90", ")", "\n", "\n", "", "", "if", "scale", ":", "\n", "        ", "w", ",", "h", "=", "image1", ".", "size", "\n", "rand_log_scale", "=", "math", ".", "log", "(", "scale", "[", "0", "]", ",", "2", ")", "+", "random", ".", "random", "(", ")", "*", "(", "math", ".", "log", "(", "scale", "[", "1", "]", ",", "2", ")", "-", "math", ".", "log", "(", "scale", "[", "0", "]", ",", "2", ")", ")", "\n", "random_scale", "=", "math", ".", "pow", "(", "2", ",", "rand_log_scale", ")", "\n", "new_size", "=", "(", "int", "(", "round", "(", "w", "*", "random_scale", ")", ")", ",", "int", "(", "round", "(", "h", "*", "random_scale", ")", ")", ")", "\n", "image1", "=", "image1", ".", "resize", "(", "new_size", ",", "Image", ".", "ANTIALIAS", ")", "\n", "image2", "=", "image2", ".", "resize", "(", "new_size", ",", "Image", ".", "ANTIALIAS", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "new_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "transform_list", "=", "[", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ")", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "image1", "=", "data_transforms", "(", "image1", ")", "\n", "image2", "=", "data_transforms", "(", "image2", ")", "\n", "mask", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "\n", "if", "crop", ":", "\n", "        ", "h", ",", "w", "=", "image1", ".", "shape", "[", "1", "]", ",", "image1", ".", "shape", "[", "2", "]", "\n", "pad_tb", "=", "max", "(", "0", ",", "crop", "[", "0", "]", "-", "h", ")", "\n", "pad_lr", "=", "max", "(", "0", ",", "crop", "[", "1", "]", "-", "w", ")", "\n", "image1", "=", "torch", ".", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "pad_lr", ",", "0", ",", "pad_tb", ")", ")", "(", "image1", ")", "\n", "image2", "=", "torch", ".", "nn", ".", "ZeroPad2d", "(", "(", "0", ",", "pad_lr", ",", "0", ",", "pad_tb", ")", ")", "(", "image2", ")", "\n", "mask", "=", "torch", ".", "nn", ".", "ConstantPad2d", "(", "(", "0", ",", "pad_lr", ",", "0", ",", "pad_tb", ")", ",", "255", ")", "(", "mask", ")", "\n", "\n", "h", ",", "w", "=", "image1", ".", "shape", "[", "1", "]", ",", "image1", ".", "shape", "[", "2", "]", "\n", "i", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop", "[", "0", "]", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop", "[", "1", "]", ")", "\n", "image1", "=", "image1", "[", ":", ",", "i", ":", "i", "+", "crop", "[", "0", "]", ",", "j", ":", "j", "+", "crop", "[", "1", "]", "]", "\n", "image2", "=", "image2", "[", ":", ",", "i", ":", "i", "+", "crop", "[", "0", "]", ",", "j", ":", "j", "+", "crop", "[", "1", "]", "]", "\n", "mask", "=", "mask", "[", "i", ":", "i", "+", "crop", "[", "0", "]", ",", "j", ":", "j", "+", "crop", "[", "1", "]", "]", "\n", "\n", "", "return", "image1", ",", "image2", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.adjust_learning_rate": [[160, 164], ["float"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "base_lr", ",", "max_iters", ",", "cur_iters", ",", "power", "=", "0.9", ")", ":", "\n", "    ", "lr", "=", "base_lr", "*", "(", "(", "1", "-", "float", "(", "cur_iters", ")", "/", "max_iters", ")", "**", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.safe_mkdir": [[207, 213], ["os.makedirs", "os.makedirs"], "function", ["None"], ["", "", "def", "safe_mkdir", "(", "directory", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.download_weights": [[247, 259], ["print", "os.path.isfile", "os.path.isfile", "print", "print", "utils.DownloadProgressBar", "urllib.request.urlretrieve", "dl_path.split"], "function", ["None"], ["", "", "def", "download_weights", "(", "setting_name", ")", ":", "\n", "#TODO Put here the right setting -> downloadpath conversion", "\n", "    ", "dl_path", ",", "outfile", "=", "DL_LINKS", "[", "setting_name", "]", "\n", "filepath", "=", "\"../weights/\"", "+", "outfile", "\n", "print", "(", "\"Downloading from {} to {}\"", ".", "format", "(", "dl_path", ",", "filepath", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "        ", "with", "DownloadProgressBar", "(", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ",", "miniters", "=", "1", ",", "desc", "=", "dl_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "as", "t", ":", "\n", "            ", "urllib", ".", "request", ".", "urlretrieve", "(", "dl_path", ",", "filename", "=", "filepath", ",", "reporthook", "=", "t", ".", "update_to", ")", "\n", "", "print", "(", "\"Downloaded!\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"File existed allready!\"", ")", "\n", "", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.PathHandler.__init__": [[66, 87], ["isinstance", "pred_dir.is_dir", "isinstance", "targ_dir.is_dir", "type", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pred_dir", ":", "Path", ",", "targ_dir", ":", "Path", ",", "img_id", ":", "str", ",", "test_hold", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pred_dir  (Path): directory of localization and damage predictions\n            targ_dir  (Path): directory of localization and damage targets\n            img_id    (str) : 5 digit string of image id\n            test_hold (str) : either 'test' or 'hold'. Most likely 'test' unless you have access to holdout set\n        \"\"\"", "\n", "assert", "isinstance", "(", "pred_dir", ",", "Path", ")", ",", "f\"pred_dir should be of type Path, got {type(pred_dir)}\"", "\n", "assert", "pred_dir", ".", "is_dir", "(", ")", ",", "f\"Directory '{pred_dir}' does not exist or is not a directory\"", "\n", "\n", "assert", "isinstance", "(", "targ_dir", ",", "Path", ")", ",", "f\"targ_dir '{targ_dir}' should be of type Path, got {type(pred_dir)}\"", "\n", "assert", "targ_dir", ".", "is_dir", "(", ")", ",", "f\"Directory '{targ_dir}' does not exist or is not a directory\"", "\n", "\n", "assert", "test_hold", "in", "[", "'test'", ",", "'hold'", "]", ",", "f\"test_hold '{test_hold}' was not one of 'test' or 'hold'\"", "\n", "\n", "self", ".", "lp", "=", "pred_dir", "/", "f\"{test_hold}_localization_{img_id}_prediction.png\"", "# localization prediction", "\n", "self", ".", "dp", "=", "pred_dir", "/", "f\"{test_hold}_damage_{img_id}_prediction.png\"", "# damage prediction", "\n", "self", ".", "lt", "=", "targ_dir", "/", "f\"{test_hold}_localization_{img_id}_target.png\"", "# localization target", "\n", "self", ".", "dt", "=", "targ_dir", "/", "f\"{test_hold}_damage_{img_id}_target.png\"", "# damage target", "\n", "self", ".", "paths", "=", "(", "self", ".", "lp", ",", "self", ".", "dp", ",", "self", ".", "lt", ",", "self", ".", "dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.PathHandler.load_and_validate_image": [[88, 99], ["path.is_file", "numpy.array", "PIL.Image.open", "set", "numpy.unique", "numpy.unique"], "methods", ["None"], ["", "def", "load_and_validate_image", "(", "self", ",", "path", ")", ":", "\n", "        ", "assert", "path", ".", "is_file", "(", ")", ",", "f\"file '{path}' does not exist or is not a file\"", "\n", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "path", ")", ")", "\n", "assert", "img", ".", "dtype", "==", "np", ".", "uint8", ",", "f\"{path.name} is of wrong format {img.dtype} - should be np.uint8\"", "\n", "if", "\"damage\"", "in", "path", ".", "name", ":", "\n", "            ", "img", "[", "img", "==", "255", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "img", "[", "img", "==", "255", "]", "=", "1", "\n", "", "assert", "set", "(", "np", ".", "unique", "(", "img", ")", ")", "<=", "{", "0", ",", "1", ",", "2", ",", "3", ",", "4", "}", ",", "f\"values must ints 0-4, found {np.unique(img)}, path: {path}\"", "\n", "#assert img.shape == (1024,1024), f\"{path} must be a 1024x1024 image\"", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.PathHandler.load_images": [[100, 102], ["xview2_metrics.PathHandler.load_and_validate_image"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.PathHandler.load_and_validate_image"], ["", "def", "load_images", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "load_and_validate_image", "(", "path", ")", "for", "path", "in", "self", ".", "paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.RowPairCalculator.extract_buildings": [[108, 114], ["x.copy"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "extract_buildings", "(", "x", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\" Returns a mask of the buildings in x \"\"\"", "\n", "buildings", "=", "x", ".", "copy", "(", ")", "\n", "buildings", "[", "x", ">", "0", "]", "=", "1", "\n", "return", "buildings", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.RowPairCalculator.compute_tp_fn_fp": [[115, 129], ["numpy.logical_and().sum", "numpy.logical_and().sum", "numpy.logical_and().sum", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_tp_fn_fp", "(", "pred", ":", "np", ".", "ndarray", ",", "targ", ":", "np", ".", "ndarray", ",", "c", ":", "int", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "\"\"\"\n        Computes the number of TPs, FNs, FPs, between a prediction (x) and a target (y) for the desired class (c)\n\n        Args:\n            pred (np.ndarray): prediction\n            targ (np.ndarray): target\n            c (int): positive class\n        \"\"\"", "\n", "TP", "=", "np", ".", "logical_and", "(", "pred", "==", "c", ",", "targ", "==", "c", ")", ".", "sum", "(", ")", "\n", "FN", "=", "np", ".", "logical_and", "(", "pred", "!=", "c", ",", "targ", "==", "c", ")", ".", "sum", "(", ")", "\n", "FP", "=", "np", ".", "logical_and", "(", "pred", "==", "c", ",", "targ", "!=", "c", ")", ".", "sum", "(", ")", "\n", "return", "[", "TP", ",", "FN", ",", "FP", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.RowPairCalculator.get_row_pair": [[130, 149], ["ph.load_images", "map", "cls.compute_tp_fn_fp", "range", "cls.compute_tp_fn_fp"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.PathHandler.load_images", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.compute_tp_fn_fp", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.compute_tp_fn_fp"], ["", "@", "classmethod", "\n", "def", "get_row_pair", "(", "cls", ",", "ph", ":", "PathHandler", ")", ":", "\n", "        ", "\"\"\"\n        Builds a row of TPs, FNs, and FPs for both the localization dataframe and the damage dataframe.\n        This pair of rows are built in the same function as damages are only assessed where buildings are predicted. \n\n        Args:\n            ph (PathHandler): used to load the required prediction and target images\n        \"\"\"", "\n", "lp", ",", "dp", ",", "lt", ",", "dt", "=", "ph", ".", "load_images", "(", ")", "\n", "lp_b", ",", "lt_b", ",", "dt_b", "=", "map", "(", "cls", ".", "extract_buildings", ",", "(", "lp", ",", "lt", ",", "dt", ")", ")", "# convert all damage scores 1-4 to 1", "\n", "\n", "dp", "=", "dp", "*", "lp_b", "# only give credit to damages where buildings are predicted", "\n", "dp", ",", "dt", "=", "dp", "[", "dt_b", "==", "1", "]", ",", "dt", "[", "dt_b", "==", "1", "]", "# only score damage where there exist buildings in target damage", "\n", "\n", "lrow", "=", "cls", ".", "compute_tp_fn_fp", "(", "lp_b", ",", "lt_b", ",", "1", ")", "\n", "drow", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "5", ")", ":", "drow", "+=", "cls", ".", "compute_tp_fn_fp", "(", "dp", ",", "dt", ",", "i", ")", "\n", "return", "lrow", ",", "drow", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.F1Recorder.__init__": [[156, 168], ["xview2_metrics.F1Recorder.precision", "xview2_metrics.F1Recorder.recall", "xview2_metrics.F1Recorder.f1"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.F1Recorder.precision", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.F1Recorder.recall", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.F1Recorder.f1"], ["def", "__init__", "(", "self", ",", "TP", ",", "FP", ",", "FN", ",", "name", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            TP (int): true positives\n            FP (int): false positives\n            FN (int): false negatives\n            name (str): optional name when printing\n        \"\"\"", "\n", "self", ".", "TP", ",", "self", ".", "FN", ",", "self", ".", "FP", ",", "self", ".", "name", "=", "TP", ",", "FN", ",", "FP", ",", "name", "\n", "self", ".", "P", "=", "self", ".", "precision", "(", ")", "\n", "self", ".", "R", "=", "self", ".", "recall", "(", ")", "\n", "self", ".", "f1", "=", "self", ".", "f1", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.F1Recorder.__repr__": [[169, 171], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.name} | f1: {self.f1:.4f}, precision: {self.P:.4f}, recall: {self.R:.4f}'", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.F1Recorder.precision": [[172, 177], ["None"], "methods", ["None"], ["", "def", "precision", "(", "self", ")", ":", "\n", "        ", "\"\"\" calculates the precision using the true positives (self.TP) and false positives (self.FP)\"\"\"", "\n", "assert", "self", ".", "TP", ">=", "0", "and", "self", ".", "FP", ">=", "0", "\n", "if", "self", ".", "TP", "==", "0", ":", "return", "0", "\n", "else", ":", "return", "self", ".", "TP", "/", "(", "self", ".", "TP", "+", "self", ".", "FP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.F1Recorder.recall": [[178, 183], ["None"], "methods", ["None"], ["", "def", "recall", "(", "self", ")", ":", "\n", "        ", "\"\"\" calculates recall using the true positives (self.TP) and false negatives (self.FN) \"\"\"", "\n", "assert", "self", ".", "TP", ">=", "0", "and", "self", ".", "FN", ">=", "0", "\n", "if", "self", ".", "TP", "==", "0", ":", "return", "0", "\n", "return", "self", ".", "TP", "/", "(", "self", ".", "TP", "+", "self", ".", "FN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.F1Recorder.f1": [[184, 189], ["None"], "methods", ["None"], ["", "def", "f1", "(", "self", ")", ":", "\n", "        ", "\"\"\" calculates the f1 score using precision (self.P) and recall (self.R) \"\"\"", "\n", "assert", "0", "<=", "self", ".", "P", "<=", "1", "and", "0", "<=", "self", ".", "R", "<=", "1", "\n", "if", "self", ".", "P", "==", "0", "or", "self", ".", "R", "==", "0", ":", "return", "0", "\n", "return", "(", "2", "*", "self", ".", "P", "*", "self", ".", "R", ")", "/", "(", "self", ".", "P", "+", "self", ".", "R", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.__init__": [[211, 225], ["xview2_metrics.XviewMetrics.pred_dir.is_dir", "xview2_metrics.XviewMetrics.targ_dir.is_dir", "xview2_metrics.XviewMetrics.get_path_handlers", "xview2_metrics.XviewMetrics.get_dfs", "xview2_metrics.XviewMetrics.get_lf1r", "xview2_metrics.XviewMetrics.get_df1rs", "pathlib.Path", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.get_path_handlers", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.get_dfs", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.get_lf1r", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.get_df1rs"], ["def", "__init__", "(", "self", ",", "pred_dir", ",", "targ_dir", ")", ":", "\n", "        ", "self", ".", "pred_dir", ",", "self", ".", "targ_dir", "=", "Path", "(", "pred_dir", ")", ",", "Path", "(", "targ_dir", ")", "\n", "assert", "self", ".", "pred_dir", ".", "is_dir", "(", ")", ",", "f\"Could not find prediction directory: '{pred_dir}'\"", "\n", "assert", "self", ".", "targ_dir", ".", "is_dir", "(", ")", ",", "f\"Could not find target directory: '{targ_dir}'\"", "\n", "\n", "self", ".", "dmg2str", "=", "{", "1", ":", "f'No damage     (1) '", ",", "\n", "2", ":", "f'Minor damage  (2) '", ",", "\n", "3", ":", "f'Major damage  (3) '", ",", "\n", "4", ":", "f'Destroyed     (4) '", "}", "\n", "\n", "self", ".", "get_path_handlers", "(", ")", "\n", "self", ".", "get_dfs", "(", ")", "\n", "self", ".", "get_lf1r", "(", ")", "\n", "self", ".", "get_df1rs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.__repr__": [[226, 238], ["s.rstrip"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "'Localization:\\n'", "\n", "s", "+=", "f'    {self.lf1r}\\n'", "\n", "\n", "s", "+=", "'\\nDamage:\\n'", "\n", "for", "F1Rec", "in", "self", ".", "df1rs", ":", "\n", "            ", "s", "+=", "f'    {F1Rec}\\n'", "\n", "", "s", "+=", "f'    Harmonic mean dmgs | f1: {self.df1:.4f}\\n'", "\n", "\n", "s", "+=", "'\\nScore:\\n'", "\n", "s", "+=", "f'    Score | f1: {self.score:.4f}\\n'", "\n", "return", "s", ".", "rstrip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.get_path_handlers": [[239, 247], ["xview2_metrics.XviewMetrics.targ_dir.glob", "path.name.rstrip().split", "xview2_metrics.XviewMetrics.path_handlers.append", "path.name.rstrip", "xview2_metrics.PathHandler"], "methods", ["None"], ["", "def", "get_path_handlers", "(", "self", ")", ":", "\n", "        ", "self", ".", "path_handlers", "=", "[", "]", "\n", "for", "path", "in", "self", ".", "targ_dir", ".", "glob", "(", "'*.png'", ")", ":", "\n", "            ", "test_hold", ",", "loc_dmg", ",", "img_id", ",", "target", "=", "path", ".", "name", ".", "rstrip", "(", "'.png'", ")", ".", "split", "(", "'_'", ")", "\n", "assert", "loc_dmg", "in", "[", "'localization'", ",", "'damage'", "]", ",", "f\"target filenames must have 'localization' or 'damage' in filename, got {path}\"", "\n", "assert", "target", "==", "'target'", ",", "f\"{target} should equal 'target' when getting path handlers\"", "\n", "if", "loc_dmg", "==", "'localization'", ":", "# localization or damage is fine here", "\n", "                ", "self", ".", "path_handlers", ".", "append", "(", "PathHandler", "(", "self", ".", "pred_dir", ",", "self", ".", "targ_dir", ",", "img_id", ",", "test_hold", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.get_dfs": [[248, 262], ["pandas.DataFrame", "pandas.DataFrame", "multiprocessing.Pool", "p.map"], "methods", ["None"], ["", "", "", "def", "get_dfs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        builds the localization dataframe (self.ldf) and damage dataframe (self.ddf) from\n        path handlers (self.path_handlers)\n        \"\"\"", "\n", "with", "Pool", "(", ")", "as", "p", ":", "\n", "            ", "all_rows", "=", "p", ".", "map", "(", "RowPairCalculator", ".", "get_row_pair", ",", "self", ".", "path_handlers", ")", "\n", "\n", "", "lcolumns", "=", "[", "'lTP'", ",", "'lFN'", ",", "'lFP'", "]", "\n", "self", ".", "ldf", "=", "pd", ".", "DataFrame", "(", "[", "lrow", "for", "lrow", ",", "drow", "in", "all_rows", "]", ",", "columns", "=", "lcolumns", ")", "\n", "\n", "dcolumns", "=", "[", "'dTP1'", ",", "'dFN1'", ",", "'dFP1'", ",", "'dTP2'", ",", "'dFN2'", ",", "'dFP2'", ",", "\n", "'dTP3'", ",", "'dFN3'", ",", "'dFP3'", ",", "'dTP4'", ",", "'dFN4'", ",", "'dFP4'", "]", "\n", "self", ".", "ddf", "=", "pd", ".", "DataFrame", "(", "[", "drow", "for", "lrow", ",", "drow", "in", "all_rows", "]", ",", "columns", "=", "dcolumns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.get_lf1r": [[263, 269], ["xview2_metrics.XviewMetrics.ldf[].sum", "xview2_metrics.XviewMetrics.ldf[].sum", "xview2_metrics.XviewMetrics.ldf[].sum", "xview2_metrics.F1Recorder"], "methods", ["None"], ["", "def", "get_lf1r", "(", "self", ")", ":", "\n", "        ", "\"\"\" localization f1 recorder \"\"\"", "\n", "TP", "=", "self", ".", "ldf", "[", "'lTP'", "]", ".", "sum", "(", ")", "\n", "FP", "=", "self", ".", "ldf", "[", "'lFP'", "]", ".", "sum", "(", ")", "\n", "FN", "=", "self", ".", "ldf", "[", "'lFN'", "]", ".", "sum", "(", ")", "\n", "self", ".", "lf1r", "=", "F1Recorder", "(", "TP", ",", "FP", ",", "FN", ",", "'Buildings'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.lf1": [[270, 274], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "lf1", "(", "self", ")", ":", "\n", "        ", "\"\"\" localization f1 \"\"\"", "\n", "return", "self", ".", "lf1r", ".", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.get_df1rs": [[275, 283], ["range", "xview2_metrics.XviewMetrics.ddf[].sum", "xview2_metrics.XviewMetrics.ddf[].sum", "xview2_metrics.XviewMetrics.ddf[].sum", "xview2_metrics.XviewMetrics.df1rs.append", "xview2_metrics.F1Recorder"], "methods", ["None"], ["", "def", "get_df1rs", "(", "self", ")", ":", "\n", "        ", "\"\"\" damage f1 recorders \"\"\"", "\n", "self", ".", "df1rs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "            ", "TP", "=", "self", ".", "ddf", "[", "f'dTP{i}'", "]", ".", "sum", "(", ")", "\n", "FP", "=", "self", ".", "ddf", "[", "f'dFP{i}'", "]", ".", "sum", "(", ")", "\n", "FN", "=", "self", ".", "ddf", "[", "f'dFN{i}'", "]", ".", "sum", "(", ")", "\n", "self", ".", "df1rs", ".", "append", "(", "F1Recorder", "(", "TP", ",", "FP", ",", "FN", ",", "self", ".", "dmg2str", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.df1s": [[284, 288], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "df1s", "(", "self", ")", ":", "\n", "        ", "\"\"\" damage f1s \"\"\"", "\n", "return", "[", "F1", ".", "f1", "for", "F1", "in", "self", ".", "df1rs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.df1": [[289, 294], ["harmonic_mean", "len", "sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "df1", "(", "self", ")", ":", "\n", "        ", "\"\"\" damage f1. Computed using harmonic mean of damage f1s \"\"\"", "\n", "harmonic_mean", "=", "lambda", "xs", ":", "len", "(", "xs", ")", "/", "sum", "(", "(", "x", "+", "1e-6", ")", "**", "-", "1", "for", "x", "in", "xs", ")", "\n", "return", "harmonic_mean", "(", "self", ".", "df1s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.score": [[295, 299], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "score", "(", "self", ")", ":", "\n", "        ", "\"\"\" xview2 score computed as a weighted average of the localization f1 and damage f1 \"\"\"", "\n", "return", "0.3", "*", "self", ".", "lf1", "+", "0.7", "*", "self", ".", "df1", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.XviewMetrics.compute_score": [[300, 322], ["print", "cls", "print", "print", "open", "json.dump", "multiprocessing.cpu_count"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "compute_score", "(", "cls", ",", "pred_dir", ",", "targ_dir", ",", "out_fp", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pred_dir (str): directory of localization and damage predictions\n            targ_dir (str): directory of localization and damage targets\n            out_fp   (str): output json - folder must already exist\n        \"\"\"", "\n", "print", "(", "f\"Calculating metrics using {cpu_count()} cpus...\"", ")", "\n", "\n", "self", "=", "cls", "(", "pred_dir", ",", "targ_dir", ")", "\n", "\n", "d", "=", "{", "'score'", ":", "self", ".", "score", ",", "\n", "'damage_f1'", ":", "self", ".", "df1", ",", "\n", "'localization_f1'", ":", "self", ".", "lf1", "}", "\n", "d", "[", "'damage_f1_no_damage'", "]", "=", "self", ".", "df1s", "[", "0", "]", "\n", "d", "[", "'damage_f1_minor_damage'", "]", "=", "self", ".", "df1s", "[", "1", "]", "\n", "d", "[", "'damage_f1_major_damage'", "]", "=", "self", ".", "df1s", "[", "2", "]", "\n", "d", "[", "'damage_f1_destroyed'", "]", "=", "self", ".", "df1s", "[", "3", "]", "\n", "print", "(", "d", ")", "\n", "with", "open", "(", "out_fp", ",", "'w'", ")", "as", "f", ":", "json", ".", "dump", "(", "d", ",", "f", ")", "\n", "print", "(", "f\"Wrote metrics to {out_fp}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.scoring.xview2_metrics.compute_tp_fn_fp": [[59, 64], ["numpy.logical_and().sum", "numpy.logical_and().sum", "numpy.logical_and().sum", "numpy.array", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "function", ["None"], ["def", "compute_tp_fn_fp", "(", "pred", ",", "targ", ",", "c", ")", ":", "\n", "    ", "TP", "=", "np", ".", "logical_and", "(", "pred", "==", "c", ",", "targ", "==", "c", ")", ".", "sum", "(", ")", "\n", "FN", "=", "np", ".", "logical_and", "(", "pred", "!=", "c", ",", "targ", "==", "c", ")", ".", "sum", "(", ")", "\n", "FP", "=", "np", ".", "logical_and", "(", "pred", "==", "c", ",", "targ", "!=", "c", ")", ".", "sum", "(", ")", "\n", "return", "np", ".", "array", "(", "[", "TP", ",", "FN", ",", "FP", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.AtrousSpatialPyramidPoolingModule.__init__": [[47, 82], ["torch.Module.__init__", "dual_hrnet.AtrousSpatialPyramidPoolingModule.features.append", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dual_hrnet.AtrousSpatialPyramidPoolingModule.features.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "reduction_dim", "=", "256", ",", "output_stride", "=", "16", ",", "rates", "=", "[", "6", ",", "12", ",", "18", "]", ")", ":", "\n", "        ", "super", "(", "AtrousSpatialPyramidPoolingModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Check if we are using distributed BN and use the nn from encoding.nn", "\n", "# library rather than using standard pytorch.nn", "\n", "\n", "if", "output_stride", "==", "8", ":", "\n", "            ", "rates", "=", "[", "2", "*", "r", "for", "r", "in", "rates", "]", "\n", "", "elif", "output_stride", "==", "16", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "'output stride of {} not supported'", ".", "format", "(", "output_stride", ")", "\n", "\n", "", "self", ".", "features", "=", "[", "]", "\n", "# 1x1", "\n", "self", ".", "features", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "reduction_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "reduction_dim", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "# other rates", "\n", "for", "r", "in", "rates", ":", "\n", "            ", "self", ".", "features", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "reduction_dim", ",", "kernel_size", "=", "3", ",", "\n", "dilation", "=", "r", ",", "padding", "=", "r", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "reduction_dim", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "", "self", ".", "features", "=", "torch", ".", "nn", ".", "ModuleList", "(", "self", ".", "features", ")", "\n", "\n", "# img level features", "\n", "self", ".", "img_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "img_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "reduction_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "reduction_dim", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.AtrousSpatialPyramidPoolingModule.forward": [[83, 95], ["x.size", "dual_hrnet.AtrousSpatialPyramidPoolingModule.img_pooling", "dual_hrnet.AtrousSpatialPyramidPoolingModule.img_conv", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "f", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_size", "=", "x", ".", "size", "(", ")", "\n", "\n", "img_features", "=", "self", ".", "img_pooling", "(", "x", ")", "\n", "img_features", "=", "self", ".", "img_conv", "(", "img_features", ")", "\n", "img_features", "=", "F", ".", "interpolate", "(", "img_features", ",", "x_size", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "out", "=", "img_features", "\n", "\n", "for", "f", "in", "self", ".", "features", ":", "\n", "            ", "y", "=", "f", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "y", ")", ",", "1", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.BasicBlock.__init__": [[100, 109], ["torch.Module.__init__", "dual_hrnet.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "dual_hrnet.conv3x3", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.conv3x3", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.BasicBlock.forward": [[110, 127], ["dual_hrnet.BasicBlock.conv1", "dual_hrnet.BasicBlock.bn1", "dual_hrnet.BasicBlock.relu", "dual_hrnet.BasicBlock.conv2", "dual_hrnet.BasicBlock.bn2", "dual_hrnet.BasicBlock.relu", "dual_hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.Bottleneck.__init__": [[132, 146], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.Bottleneck.forward": [[147, 168], ["dual_hrnet.Bottleneck.conv1", "dual_hrnet.Bottleneck.bn1", "dual_hrnet.Bottleneck.relu", "dual_hrnet.Bottleneck.conv2", "dual_hrnet.Bottleneck.bn2", "dual_hrnet.Bottleneck.relu", "dual_hrnet.Bottleneck.conv3", "dual_hrnet.Bottleneck.bn3", "dual_hrnet.Bottleneck.relu", "dual_hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionModule.__init__": [[171, 187], ["torch.Module.__init__", "dual_hrnet.HighResolutionModule._check_branches", "dual_hrnet.HighResolutionModule._make_branches", "dual_hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionModule._check_branches": [[188, 207], ["len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "logger.error", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "logger", ".", "error", "(", "error_msg", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionModule._make_one_branch": [[208, 231], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionModule._make_branches": [[232, 240], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "dual_hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionModule._make_fuse_layers": [[241, 286], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionModule.get_num_inchannels": [[287, 289], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionModule.forward": [[290, 315], ["range", "range", "len", "range", "x_fuse.append", "dual_hrnet.HighResolutionModule.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "x", "[", "0", "]", "if", "i", "==", "0", "else", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "elif", "j", ">", "i", ":", "\n", "                    ", "width_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "1", "]", "\n", "height_output", "=", "x", "[", "i", "]", ".", "shape", "[", "-", "2", "]", "\n", "y", "=", "y", "+", "F", ".", "interpolate", "(", "\n", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", ",", "\n", "size", "=", "[", "height_output", ",", "width_output", "]", ",", "\n", "mode", "=", "'bilinear'", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet.__init__": [[325, 383], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "dual_hrnet.HighResolutionNet._make_layer", "dual_hrnet.HighResolutionNet.transitions.append", "dual_hrnet.HighResolutionNet._make_stage", "dual_hrnet.HighResolutionNet.transitions.append", "dual_hrnet.HighResolutionNet._make_stage", "dual_hrnet.HighResolutionNet.transitions.append", "dual_hrnet.HighResolutionNet._make_stage", "numpy.int", "dual_hrnet.HighResolutionNet._make_transition_layer", "dual_hrnet.HighResolutionNet._make_transition_layer", "dual_hrnet.HighResolutionNet._make_transition_layer", "numpy.sum", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet._make_transition_layer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "n_classes", "=", "None", ")", ":", "\n", "        ", "extra", "=", "config", ".", "MODEL", ".", "EXTRA", "\n", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "transitions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "# stem net", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "stage1_cfg", "=", "extra", "[", "'STAGE1'", "]", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'NUM_CHANNELS'", "]", "[", "0", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage1_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'NUM_BLOCKS'", "]", "[", "0", "]", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ")", "\n", "stage1_out_channel", "=", "block", ".", "expansion", "*", "num_channels", "\n", "\n", "self", ".", "stage2_cfg", "=", "extra", "[", "'STAGE2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage2_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transitions", ".", "append", "(", "self", ".", "_make_transition_layer", "(", "\n", "[", "stage1_out_channel", "]", ",", "num_channels", ")", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage3_cfg", "=", "extra", "[", "'STAGE3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage3_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transitions", ".", "append", "(", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "stage4_cfg", "=", "extra", "[", "'STAGE4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "self", ".", "stage4_cfg", "[", "'BLOCK'", "]", "]", "\n", "num_channels", "=", "[", "\n", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transitions", ".", "append", "(", "self", ".", "_make_transition_layer", "(", "\n", "pre_stage_channels", ",", "num_channels", ")", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ",", "multi_scale_output", "=", "True", ")", "\n", "\n", "self", ".", "sum_stage4_channels", "=", "np", ".", "int", "(", "np", ".", "sum", "(", "pre_stage_channels", ")", ")", "\n", "\n", "if", "n_classes", "is", "None", ":", "\n", "            ", "n_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", "\n", "", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "final_conv_kernel", "=", "extra", ".", "FINAL_CONV_KERNEL", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet.mask_last_layer": [[384, 404], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "mask_last_layer", "(", "self", ",", "last_inp_channels", "=", "None", ")", ":", "\n", "        ", "if", "last_inp_channels", "is", "None", ":", "\n", "            ", "last_inp_channels", "=", "self", ".", "sum_stage4_channels", "\n", "", "self", ".", "last_inp_channels", "=", "last_inp_channels", "\n", "\n", "self", ".", "last_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "last_inp_channels", ",", "\n", "out_channels", "=", "last_inp_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", "BatchNorm2d", "(", "last_inp_channels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "last_inp_channels", ",", "\n", "out_channels", "=", "self", ".", "n_classes", ",", "\n", "kernel_size", "=", "self", ".", "final_conv_kernel", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "if", "self", ".", "final_conv_kernel", "==", "3", "else", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet._make_transition_layer": [[406, 441], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "outchannels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet._make_layer": [[442, 458], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet._make_stage": [[459, 487], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "dual_hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionModule.get_num_inchannels"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'NUM_MODULES'", "]", "\n", "num_branches", "=", "layer_config", "[", "'NUM_BRANCHES'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'NUM_BLOCKS'", "]", "\n", "num_channels", "=", "layer_config", "[", "'NUM_CHANNELS'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'BLOCK'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'FUSE_METHOD'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet.forward": [[488, 532], ["dual_hrnet.HighResolutionNet.conv1", "dual_hrnet.HighResolutionNet.bn1", "dual_hrnet.HighResolutionNet.relu", "dual_hrnet.HighResolutionNet.conv2", "dual_hrnet.HighResolutionNet.bn2", "dual_hrnet.HighResolutionNet.relu", "dual_hrnet.HighResolutionNet.layer1", "range", "dual_hrnet.HighResolutionNet.stage2", "range", "dual_hrnet.HighResolutionNet.stage3", "range", "dual_hrnet.HighResolutionNet.stage4", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dual_hrnet.HighResolutionNet.last_layer", "x[].size", "x[].size", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transitions", "[", "0", "]", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transitions", "[", "1", "]", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'NUM_BRANCHES'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transitions", "[", "2", "]", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "x", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "# Upsampling", "\n", "x0_h", ",", "x0_w", "=", "x", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "upsample", "(", "x", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x2", "=", "F", ".", "upsample", "(", "x", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x3", "=", "F", ".", "upsample", "(", "x", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet.init_weights": [[533, 552], ["logger.info", "dual_hrnet.HighResolutionNet.modules", "os.path.isfile", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "dual_hrnet.HighResolutionNet.state_dict", "dual_hrnet.HighResolutionNet.update", "dual_hrnet.HighResolutionNet.load_state_dict", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "dual_hrnet.HighResolutionNet.keys"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.dualhrnet.utils.AverageMeter.update"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "''", ",", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'=> init weights from normal distribution'", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "pretrained", ")", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "logger", ".", "info", "(", "'=> loading pretrained model {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "#for k, _ in pretrained_dict.items():", "\n", "#    print(", "\n", "#        '=> loading {} pretrained model {}'.format(k, pretrained))", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__": [[556, 608], ["torch.Module.__init__", "dual_hrnet.DualHRNet._make_fuse_layer", "dual_hrnet.DualHRNet._make_fuse_layer", "dual_hrnet.DualHRNet._make_fuse_layer", "dual_hrnet.DualHRNet._make_fuse_layer", "dual_hrnet.DualHRNet._make_fuse_layer", "dual_hrnet.DualHRNet._make_fuse_layer", "dual_hrnet.HighResolutionNet", "dual_hrnet.HighResolutionNet", "dual_hrnet.HighResolutionNet", "dual_hrnet.HighResolutionNet", "dual_hrnet.DualHRNet._make_fpn_layer", "dual_hrnet.DualHRNet._make_fpn_layer", "dual_hrnet.DualHRNet.loc_net.mask_last_layer", "dual_hrnet.DualHRNet.cls_net.mask_last_layer", "dual_hrnet.DualHRNet._make_fuse_layer", "dual_hrnet.DualHRNet.loc_net.mask_last_layer", "dual_hrnet.DualHRNet._make_disaster_layer"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.__init__", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_fpn_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_fpn_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet.mask_last_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet.mask_last_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet.mask_last_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_disaster_layer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DualHRNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "is_split_loss", "=", "config", ".", "MODEL", ".", "IS_SPLIT_LOSS", "\n", "if", "self", ".", "is_split_loss", ":", "\n", "            ", "self", ".", "loc_net", "=", "HighResolutionNet", "(", "config", ",", "n_classes", "=", "2", ")", "\n", "self", ".", "cls_net", "=", "HighResolutionNet", "(", "config", ",", "n_classes", "=", "4", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loc_net", "=", "HighResolutionNet", "(", "config", ",", "n_classes", "=", "config", ".", "DATASET", ".", "NUM_CLASSES", ")", "\n", "self", ".", "cls_net", "=", "HighResolutionNet", "(", "config", ",", "n_classes", "=", "None", ")", "\n", "\n", "", "self", ".", "fuse_loc_stage1", "=", "self", ".", "_make_fuse_layer", "(", "[", "n_ch", "*", "2", "for", "n_ch", "in", "self", ".", "loc_net", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "]", ",", "\n", "self", ".", "loc_net", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", ",", "\n", "config", ")", "\n", "self", ".", "fuse_cls_stage1", "=", "self", ".", "_make_fuse_layer", "(", "[", "n_ch", "*", "2", "for", "n_ch", "in", "self", ".", "cls_net", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", "]", ",", "\n", "self", ".", "cls_net", ".", "stage2_cfg", "[", "'NUM_CHANNELS'", "]", ",", "\n", "config", ")", "\n", "\n", "self", ".", "fuse_loc_stage2", "=", "self", ".", "_make_fuse_layer", "(", "[", "n_ch", "*", "2", "for", "n_ch", "in", "self", ".", "loc_net", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "]", ",", "\n", "self", ".", "loc_net", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", ",", "\n", "config", ")", "\n", "self", ".", "fuse_cls_stage2", "=", "self", ".", "_make_fuse_layer", "(", "[", "n_ch", "*", "2", "for", "n_ch", "in", "self", ".", "cls_net", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", "]", ",", "\n", "self", ".", "cls_net", ".", "stage3_cfg", "[", "'NUM_CHANNELS'", "]", ",", "\n", "config", ")", "\n", "\n", "self", ".", "fuse_loc_stage3", "=", "self", ".", "_make_fuse_layer", "(", "[", "n_ch", "*", "2", "for", "n_ch", "in", "self", ".", "loc_net", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "]", ",", "\n", "self", ".", "loc_net", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", ",", "\n", "config", ")", "\n", "self", ".", "fuse_cls_stage3", "=", "self", ".", "_make_fuse_layer", "(", "[", "n_ch", "*", "2", "for", "n_ch", "in", "self", ".", "cls_net", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "]", ",", "\n", "self", ".", "cls_net", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", ",", "\n", "config", ")", "\n", "\n", "self", ".", "is_use_fpn", "=", "config", ".", "MODEL", ".", "USE_FPN", "\n", "if", "self", ".", "is_use_fpn", ":", "\n", "            ", "self", ".", "fpn_loc", "=", "self", ".", "_make_fpn_layer", "(", "self", ".", "loc_net", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", ")", "\n", "self", ".", "fpn_cls", "=", "self", ".", "_make_fpn_layer", "(", "self", ".", "cls_net", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fpn_loc", "=", "None", "\n", "self", ".", "fpn_cls", "=", "None", "\n", "\n", "", "if", "self", ".", "is_split_loss", ":", "\n", "            ", "self", ".", "loc_net", ".", "mask_last_layer", "(", ")", "\n", "self", ".", "cls_net", ".", "mask_last_layer", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fuse_last", "=", "self", ".", "_make_fuse_layer", "(", "[", "n_ch", "*", "2", "for", "n_ch", "in", "self", ".", "loc_net", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", "]", ",", "\n", "self", ".", "loc_net", ".", "stage4_cfg", "[", "'NUM_CHANNELS'", "]", ",", "\n", "config", ")", "\n", "self", ".", "loc_net", ".", "mask_last_layer", "(", ")", "\n", "\n", "", "self", ".", "is_disaster_prediction", "=", "config", ".", "MODEL", ".", "IS_DISASTER_PRED", "\n", "if", "self", ".", "is_disaster_prediction", ":", "\n", "            ", "self", ".", "disaster_layer", "=", "self", ".", "_make_disaster_layer", "(", "self", ".", "cls_net", ".", "last_inp_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_fuse_layer": [[609, 623], ["len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "max"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_make_fuse_layer", "(", "in_channels", ",", "out_channels", ",", "config", ")", ":", "\n", "        ", "num_branches", "=", "len", "(", "in_channels", ")", "\n", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "fuse_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "[", "idx", "]", ",", "out_channels", "[", "idx", "]", ",", "kernel_size", "=", "config", ".", "MODEL", ".", "FUSE_CONV_K_SIZE", ",", "stride", "=", "1", ",", "\n", "padding", "=", "max", "(", "0", ",", "config", ".", "MODEL", ".", "FUSE_CONV_K_SIZE", "-", "2", ")", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "out_channels", "[", "idx", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_disaster_layer": [[624, 631], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_make_disaster_layer", "(", "in_channels", ",", "n_disaster", "=", "6", ")", ":", "\n", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "n_disaster", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._make_fpn_layer": [[633, 661], ["fpn_layers.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "range", "fpn_layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "fpn_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_make_fpn_layer", "(", "in_channels", ",", "channels_per_group", "=", "8", ")", ":", "\n", "        ", "fpn_layers", "=", "[", "]", "\n", "fpn_layers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "[", "0", "]", ",", "in_channels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "in_channels", "[", "0", "]", "//", "channels_per_group", ",", "\n", "num_channels", "=", "in_channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", ")", "\n", "for", "branch", "in", "range", "(", "1", ",", "len", "(", "in_channels", ")", ")", ":", "\n", "            ", "fpn_layer", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "branch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "in_channel", "=", "in_channels", "[", "idx", "]", "\n", "out_channel", "=", "in_channels", "[", "idx", "-", "1", "]", "\n", "fpn_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "out_channel", "//", "channels_per_group", ",", "num_channels", "=", "out_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", "\n", ")", "\n", ")", "\n", "", "fpn_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "fpn_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fpn_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_stage1": [[662, 673], ["net.conv1", "net.bn1", "net.conv2", "net.relu", "net.bn2", "net.relu", "net.layer1"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_forward_stage1", "(", "net", ",", "x", ")", ":", "\n", "        ", "x", "=", "net", ".", "conv1", "(", "x", ")", "\n", "x", "=", "net", ".", "bn1", "(", "x", ")", "\n", "x", "=", "net", ".", "conv2", "(", "x", ")", "\n", "x", "=", "net", ".", "relu", "(", "x", ")", "\n", "x", "=", "net", ".", "bn2", "(", "x", ")", "\n", "x", "=", "net", ".", "relu", "(", "x", ")", "\n", "x", "=", "net", ".", "layer1", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_transition": [[674, 685], ["range", "len", "x_trans_list.append", "x_trans_list.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_forward_transition", "(", "net", ",", "x_list", ",", "n_stage", ")", ":", "\n", "        ", "n_stage", "=", "n_stage", "-", "1", "\n", "x_trans_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "net", ".", "transitions", "[", "n_stage", "]", ")", ")", ":", "\n", "            ", "if", "net", ".", "transitions", "[", "n_stage", "]", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_trans_list", ".", "append", "(", "net", ".", "transitions", "[", "n_stage", "]", "[", "i", "]", "(", "x_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_trans_list", ".", "append", "(", "x_list", "[", "i", "]", ")", "\n", "\n", "", "", "return", "x_trans_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_fuse_layer": [[686, 693], ["zip", "x_fuse_list.append", "fuse_layer"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_forward_fuse_layer", "(", "x_list", ",", "fuse_layers", ")", ":", "\n", "        ", "x_fuse_list", "=", "[", "]", "\n", "for", "x", ",", "fuse_layer", "in", "zip", "(", "x_list", ",", "fuse_layers", ")", ":", "\n", "            ", "x_fuse_list", ".", "append", "(", "fuse_layer", "(", "x", ")", ")", "\n", "\n", "", "return", "x_fuse_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._concat_features": [[694, 701], ["list", "zip", "list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_concat_features", "(", "x1_list", ",", "x2_list", ")", ":", "\n", "        ", "x_cat_list", "=", "list", "(", ")", "\n", "for", "x1", ",", "x2", "in", "zip", "(", "x1_list", ",", "x2_list", ")", ":", "\n", "            ", "x_cat_list", ".", "append", "(", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "return", "x_cat_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._upsampling": [[702, 715], ["list", "zip", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fpn_layer", "x_list[].size", "x_list[].size"], "methods", ["None"], ["", "def", "_upsampling", "(", "self", ",", "x_list", ",", "fpn_layers", ")", ":", "\n", "        ", "x_up_list", "=", "list", "(", ")", "\n", "if", "self", ".", "is_use_fpn", ":", "\n", "            ", "x", "=", "fpn_layers", "[", "0", "]", "(", "x_list", "[", "0", "]", ")", "\n", "for", "_x", ",", "fpn_layer", "in", "zip", "(", "x_list", "[", "1", ":", "]", ",", "fpn_layers", "[", "1", ":", "]", ")", ":", "\n", "                ", "x", "+=", "fpn_layer", "(", "_x", ")", "\n", "", "", "else", ":", "\n", "            ", "x0_h", ",", "x0_w", "=", "x_list", "[", "0", "]", ".", "size", "(", "2", ")", ",", "x_list", "[", "0", "]", ".", "size", "(", "3", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x_list", "[", "1", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x2", "=", "F", ".", "interpolate", "(", "x_list", "[", "2", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x3", "=", "F", ".", "interpolate", "(", "x_list", "[", "3", "]", ",", "size", "=", "(", "x0_h", ",", "x0_w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x_list", "[", "0", "]", ",", "x1", ",", "x2", ",", "x3", "]", ",", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet.forward": [[716, 795], ["dual_hrnet.DualHRNet._forward_stage1", "dual_hrnet.DualHRNet._forward_stage1", "dual_hrnet.DualHRNet._forward_transition", "dual_hrnet.DualHRNet._forward_transition", "dual_hrnet.DualHRNet._concat_features", "dual_hrnet.DualHRNet._forward_fuse_layer", "dual_hrnet.DualHRNet._forward_fuse_layer", "dual_hrnet.DualHRNet.loc_net.stage2", "dual_hrnet.DualHRNet.cls_net.stage2", "dual_hrnet.DualHRNet._forward_transition", "dual_hrnet.DualHRNet._forward_transition", "dual_hrnet.DualHRNet._concat_features", "dual_hrnet.DualHRNet._forward_fuse_layer", "dual_hrnet.DualHRNet._forward_fuse_layer", "dual_hrnet.DualHRNet.loc_net.stage3", "dual_hrnet.DualHRNet.cls_net.stage3", "dual_hrnet.DualHRNet._forward_transition", "dual_hrnet.DualHRNet._forward_transition", "dual_hrnet.DualHRNet._concat_features", "dual_hrnet.DualHRNet._forward_fuse_layer", "dual_hrnet.DualHRNet._forward_fuse_layer", "dual_hrnet.DualHRNet.loc_net.stage4", "dual_hrnet.DualHRNet.cls_net.stage4", "dual_hrnet.DualHRNet.loc_net.last_layer", "gc.collect", "dual_hrnet.DualHRNet._upsampling", "dual_hrnet.DualHRNet._upsampling", "dual_hrnet.DualHRNet._concat_features", "dual_hrnet.DualHRNet._forward_fuse_layer", "dual_hrnet.DualHRNet._upsampling", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "gc.collect", "dual_hrnet.DualHRNet.cls_net.last_layer", "dual_hrnet.DualHRNet.disaster_layer", "gc.collect", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_stage1", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_stage1", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_transition", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_transition", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._concat_features", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_transition", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_transition", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._concat_features", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_transition", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_transition", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._concat_features", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._upsampling", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._upsampling", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._concat_features", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._forward_fuse_layer", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.DualHRNet._upsampling"], ["", "def", "forward", "(", "self", ",", "x_pre", ",", "x_post", ")", ":", "\n", "# Stage 1", "\n", "        ", "x_pre", "=", "self", ".", "_forward_stage1", "(", "self", ".", "loc_net", ",", "x_pre", ")", "\n", "x_post", "=", "self", ".", "_forward_stage1", "(", "self", ".", "cls_net", ",", "x_post", ")", "\n", "\n", "x_pre_list", "=", "self", ".", "_forward_transition", "(", "self", ".", "loc_net", ",", "[", "x_pre", "]", ",", "n_stage", "=", "1", ")", "\n", "x_post_list", "=", "self", ".", "_forward_transition", "(", "self", ".", "cls_net", ",", "[", "x_post", "]", ",", "n_stage", "=", "1", ")", "\n", "\n", "x_cat_list", "=", "self", ".", "_concat_features", "(", "x_pre_list", ",", "x_post_list", ")", "\n", "x_pre_list", "=", "self", ".", "_forward_fuse_layer", "(", "x_cat_list", ",", "self", ".", "fuse_loc_stage1", ")", "\n", "x_post_list", "=", "self", ".", "_forward_fuse_layer", "(", "x_cat_list", ",", "self", ".", "fuse_cls_stage1", ")", "\n", "\n", "# Stage 2", "\n", "x_pre_list", "=", "self", ".", "loc_net", ".", "stage2", "(", "x_pre_list", ")", "\n", "x_post_list", "=", "self", ".", "cls_net", ".", "stage2", "(", "x_post_list", ")", "\n", "\n", "x_pre_list", "=", "self", ".", "_forward_transition", "(", "self", ".", "loc_net", ",", "x_pre_list", ",", "n_stage", "=", "2", ")", "\n", "x_post_list", "=", "self", ".", "_forward_transition", "(", "self", ".", "cls_net", ",", "x_post_list", ",", "n_stage", "=", "2", ")", "\n", "\n", "x_cat_list", "=", "self", ".", "_concat_features", "(", "x_pre_list", ",", "x_post_list", ")", "\n", "x_pre_list", "=", "self", ".", "_forward_fuse_layer", "(", "x_cat_list", ",", "self", ".", "fuse_loc_stage2", ")", "\n", "x_post_list", "=", "self", ".", "_forward_fuse_layer", "(", "x_cat_list", ",", "self", ".", "fuse_cls_stage2", ")", "\n", "\n", "# Stage 3", "\n", "x_pre_list", "=", "self", ".", "loc_net", ".", "stage3", "(", "x_pre_list", ")", "\n", "x_post_list", "=", "self", ".", "cls_net", ".", "stage3", "(", "x_post_list", ")", "\n", "\n", "x_pre_list", "=", "self", ".", "_forward_transition", "(", "self", ".", "loc_net", ",", "x_pre_list", ",", "n_stage", "=", "3", ")", "\n", "x_post_list", "=", "self", ".", "_forward_transition", "(", "self", ".", "cls_net", ",", "x_post_list", ",", "n_stage", "=", "3", ")", "\n", "\n", "x_cat_list", "=", "self", ".", "_concat_features", "(", "x_pre_list", ",", "x_post_list", ")", "\n", "x_pre_list", "=", "self", ".", "_forward_fuse_layer", "(", "x_cat_list", ",", "self", ".", "fuse_loc_stage3", ")", "\n", "x_post_list", "=", "self", ".", "_forward_fuse_layer", "(", "x_cat_list", ",", "self", ".", "fuse_cls_stage3", ")", "\n", "\n", "# Stage 4", "\n", "x_pre_list", "=", "self", ".", "loc_net", ".", "stage4", "(", "x_pre_list", ")", "\n", "x_post_list", "=", "self", ".", "cls_net", ".", "stage4", "(", "x_post_list", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "gc", ".", "collect", "(", ")", "\n", "\n", "", "if", "self", ".", "is_split_loss", ":", "\n", "# Upsampling", "\n", "            ", "x_pre", "=", "self", ".", "_upsampling", "(", "x_pre_list", ",", "self", ".", "fpn_loc", ")", "\n", "x_post", "=", "self", ".", "_upsampling", "(", "x_post_list", ",", "self", ".", "fpn_cls", ")", "\n", "", "else", ":", "\n", "            ", "x_cat_list", "=", "self", ".", "_concat_features", "(", "x_pre_list", ",", "x_post_list", ")", "\n", "x_pre_list", "=", "self", ".", "_forward_fuse_layer", "(", "x_cat_list", ",", "self", ".", "fuse_last", ")", "\n", "x_pre", "=", "self", ".", "_upsampling", "(", "x_pre_list", ",", "self", ".", "fpn_loc", ")", "\n", "\n", "# to avoid shortage of memory due to \"docker run --memory=8g\"", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "            ", "torch", ".", "save", "(", "x_post", ",", "'x_post.ph'", ")", "\n", "del", "x_pre_list", "\n", "del", "x_post_list", "\n", "del", "x_post", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "# Last layer", "\n", "", "loc", "=", "self", ".", "loc_net", ".", "last_layer", "(", "x_pre", ")", "\n", "\n", "if", "self", ".", "is_split_loss", ":", "\n", "            ", "if", "not", "self", ".", "training", ":", "\n", "                ", "del", "x_pre", "\n", "gc", ".", "collect", "(", ")", "\n", "x_post", "=", "torch", ".", "load", "(", "'x_post.ph'", ")", "\n", "\n", "", "cls", "=", "self", ".", "cls_net", ".", "last_layer", "(", "x_post", ")", "\n", "", "else", ":", "\n", "            ", "cls", "=", "None", "\n", "\n", "", "pred_dict", "=", "{", "'loc'", ":", "loc", ",", "'cls'", ":", "cls", "}", "\n", "\n", "# Optional: prediction for disaster_type", "\n", "if", "self", ".", "is_disaster_prediction", ":", "\n", "            ", "disaster", "=", "self", ".", "disaster_layer", "(", "x_post", ")", "\n", "pred_dict", "[", "'disaster'", "]", "=", "disaster", "\n", "\n", "", "return", "pred_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.conv3x3": [[29, 33], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.get_model": [[797, 803], ["dual_hrnet.DualHRNet", "DualHRNet.loc_net.init_weights", "DualHRNet.cls_net.init_weights"], "function", ["home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet.init_weights", "home.repos.pwc.inspect_result.ecker-lab_robust-bdd.models.dual_hrnet.HighResolutionNet.init_weights"], ["", "", "def", "get_model", "(", "config", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DualHRNet", "(", "config", ",", "**", "kwargs", ")", "\n", "model", ".", "loc_net", ".", "init_weights", "(", "config", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "model", ".", "cls_net", ".", "init_weights", "(", "config", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "\n", "return", "model", "\n", "\n"]]}