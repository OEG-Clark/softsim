{"home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry.Registry.__init__": [[31, 33], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry.Registry.register": [[34, 46], ["registry._register_generic", "registry._register_generic"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry._register_generic", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry._register_generic"], ["", "def", "register", "(", "self", ",", "module_name", ",", "module", "=", "None", ")", ":", "\n", "# used as function call", "\n", "        ", "if", "module", "is", "not", "None", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "module", ")", "\n", "return", "\n", "\n", "# used as decorator", "\n", "", "def", "register_fn", "(", "fn", ")", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "fn", ")", "\n", "return", "fn", "\n", "\n", "", "return", "register_fn", "", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry._register_generic": [[4, 7], ["None"], "function", ["None"], ["def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ")", ":", "\n", "    ", "assert", "module_name", "not", "in", "module_dict", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.lr_scheduler.WarmupMultiStepLR.__init__": [[5, 32], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_epochs", "=", "5", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_epochs", "=", "warmup_epochs", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.lr_scheduler.WarmupMultiStepLR.get_lr": [[33, 46], ["bisect.bisect_right", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_epochs", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "warmup_epochs", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.utils.create_logger": [[10, 33], ["os.path.join", "time.strftime", "os.path.join", "print", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.getLogger().addHandler", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "os.path.exists", "os.makedirs", "str", "logging.getLogger"], "function", ["None"], ["def", "create_logger", "(", "cfg", ")", ":", "\n", "    ", "dataset", "=", "cfg", ".", "DATASET", ".", "DATASET", "\n", "net_type", "=", "cfg", ".", "BACKBONE", ".", "TYPE", "\n", "module_type", "=", "cfg", ".", "MODULE", ".", "TYPE", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "cfg", ".", "NAME", ",", "\"logs\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "time_str", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M\"", ")", "\n", "log_name", "=", "\"{}_{}_{}_{}.log\"", ".", "format", "(", "dataset", ",", "net_type", ",", "module_type", ",", "time_str", ")", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "log_name", ")", "\n", "# set up logger", "\n", "print", "(", "\"=> creating log {}\"", ".", "format", "(", "log_file", ")", ")", "\n", "head", "=", "\"%(asctime)-15s %(message)s\"", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "str", "(", "log_file", ")", ",", "format", "=", "head", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "logging", ".", "getLogger", "(", "\"\"", ")", ".", "addHandler", "(", "console", ")", "\n", "\n", "logger", ".", "info", "(", "\"---------------------Cfg is set as follow--------------------\"", ")", "\n", "logger", ".", "info", "(", "cfg", ")", "\n", "logger", ".", "info", "(", "\"-------------------------------------------------------------\"", ")", "\n", "return", "logger", ",", "log_file", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.utils.get_optimizer": [[35, 59], ["model.named_parameters", "torch.optim.SGD", "params.append", "torch.optim.Adam"], "function", ["None"], ["", "def", "get_optimizer", "(", "cfg", ",", "model", ")", ":", "\n", "    ", "base_lr", "=", "cfg", ".", "TRAIN", ".", "OPTIMIZER", ".", "BASE_LR", "\n", "params", "=", "[", "]", "\n", "\n", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", ":", "\n", "            ", "params", ".", "append", "(", "{", "\"params\"", ":", "p", "}", ")", "\n", "\n", "", "", "if", "cfg", ".", "TRAIN", ".", "OPTIMIZER", ".", "TYPE", "==", "\"SGD\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", ",", "\n", "lr", "=", "base_lr", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "OPTIMIZER", ".", "MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "OPTIMIZER", ".", "WEIGHT_DECAY", ",", "\n", "nesterov", "=", "True", ",", "\n", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "OPTIMIZER", ".", "TYPE", "==", "\"ADAM\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", ",", "\n", "lr", "=", "base_lr", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "OPTIMIZER", ".", "WEIGHT_DECAY", ",", "\n", ")", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.utils.get_scheduler": [[61, 88], ["torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "utils.lr_scheduler.WarmupMultiStepLR", "NotImplementedError"], "function", ["None"], ["", "def", "get_scheduler", "(", "cfg", ",", "optimizer", ")", ":", "\n", "    ", "if", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "TYPE", "==", "\"multistep\"", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "\n", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "LR_STEP", ",", "\n", "gamma", "=", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "LR_FACTOR", ",", "\n", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "TYPE", "==", "\"cosine\"", ":", "\n", "        ", "if", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "COSINE_DECAY_END", ">", "0", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "T_max", "=", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "COSINE_DECAY_END", ",", "eta_min", "=", "1e-4", "\n", ")", "\n", "", "else", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "T_max", "=", "cfg", ".", "TRAIN", ".", "MAX_EPOCH", ",", "eta_min", "=", "1e-4", "\n", ")", "\n", "", "", "elif", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "TYPE", "==", "\"warmup\"", ":", "\n", "        ", "scheduler", "=", "WarmupMultiStepLR", "(", "\n", "optimizer", ",", "\n", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "LR_STEP", ",", "\n", "gamma", "=", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "LR_FACTOR", ",", "\n", "warmup_epochs", "=", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "WARM_EPOCH", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Unsupported LR Scheduler: {}\"", ".", "format", "(", "cfg", ".", "TRAIN", ".", "LR_SCHEDULER", ".", "TYPE", ")", ")", "\n", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.utils.get_model": [[90, 103], ["net.Network", "torch.nn.DataParallel().cuda.freeze_backbone", "logger.info", "torch.nn.DataParallel().cuda.to", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.freeze_backbone"], ["", "def", "get_model", "(", "cfg", ",", "num_classes", ",", "device", ",", "logger", ")", ":", "\n", "    ", "model", "=", "Network", "(", "cfg", ",", "mode", "=", "\"train\"", ",", "num_classes", "=", "num_classes", ")", "\n", "\n", "if", "cfg", ".", "BACKBONE", ".", "FREEZE", "==", "True", ":", "\n", "        ", "model", ".", "freeze_backbone", "(", ")", "\n", "logger", ".", "info", "(", "\"Backbone has been freezed\"", ")", "\n", "\n", "", "if", "cfg", ".", "CPU_MODE", ":", "\n", "        ", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.utils.get_category_list": [[104, 113], ["print", "cat_list.append"], "function", ["None"], ["", "def", "get_category_list", "(", "annotations", ",", "num_classes", ",", "cfg", ")", ":", "\n", "    ", "num_list", "=", "[", "0", "]", "*", "num_classes", "\n", "cat_list", "=", "[", "]", "\n", "print", "(", "\"Weight List has been produced\"", ")", "\n", "for", "anno", "in", "annotations", ":", "\n", "        ", "category_id", "=", "anno", "[", "\"category_id\"", "]", "\n", "num_list", "[", "category_id", "]", "+=", "1", "\n", "cat_list", ".", "append", "(", "category_id", ")", "\n", "", "return", "num_list", ",", "cat_list", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.iNaturalist.iNaturalist.__init__": [[6, 12], ["dataset.baseset.BaseSet.__init__", "random.seed", "iNaturalist.iNaturalist.get_weight", "iNaturalist.iNaturalist._get_class_dict"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.get_weight", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10._get_class_dict"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "'train'", ",", "cfg", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "mode", ",", "cfg", ",", "transform", ")", "\n", "random", ".", "seed", "(", "0", ")", "\n", "if", "self", ".", "dual_sample", "or", "(", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "TYPE", "==", "\"weighted sampler\"", "and", "mode", "==", "\"train\"", ")", ":", "\n", "            ", "self", ".", "class_weight", ",", "self", ".", "sum_weight", "=", "self", ".", "get_weight", "(", "self", ".", "data", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "class_dict", "=", "self", ".", "_get_class_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.iNaturalist.iNaturalist.__getitem__": [[13, 46], ["iNaturalist.iNaturalist._get_image", "iNaturalist.iNaturalist.transform", "dict", "random.choice", "random.choice", "iNaturalist.iNaturalist.transform", "random.randint", "iNaturalist.iNaturalist.sample_class_index_by_weight", "iNaturalist.iNaturalist._get_image", "iNaturalist.iNaturalist.sample_class_index_by_weight", "random.randint"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet._get_image", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.sample_class_index_by_weight", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet._get_image", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.sample_class_index_by_weight"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "TYPE", "==", "\"weighted sampler\"", "and", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "assert", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "WEIGHTED_SAMPLER", ".", "TYPE", "in", "[", "\"balance\"", ",", "\"reverse\"", "]", "\n", "if", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "WEIGHTED_SAMPLER", ".", "TYPE", "==", "\"balance\"", ":", "\n", "                ", "sample_class", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "num_classes", "-", "1", ")", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "WEIGHTED_SAMPLER", ".", "TYPE", "==", "\"reverse\"", ":", "\n", "                ", "sample_class", "=", "self", ".", "sample_class_index_by_weight", "(", ")", "\n", "", "sample_indexes", "=", "self", ".", "class_dict", "[", "sample_class", "]", "\n", "index", "=", "random", ".", "choice", "(", "sample_indexes", ")", "\n", "\n", "", "now_info", "=", "self", ".", "data", "[", "index", "]", "\n", "img", "=", "self", ".", "_get_image", "(", "now_info", ")", "\n", "image", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "meta", "=", "dict", "(", ")", "\n", "if", "self", ".", "dual_sample", ":", "\n", "            ", "if", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "DUAL_SAMPLER", ".", "TYPE", "==", "\"reverse\"", ":", "\n", "                ", "sample_class", "=", "self", ".", "sample_class_index_by_weight", "(", ")", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "DUAL_SAMPLER", ".", "TYPE", "==", "\"balance\"", ":", "\n", "                ", "sample_class", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "num_classes", "-", "1", ")", "\n", "\n", "", "sample_indexes", "=", "self", ".", "class_dict", "[", "sample_class", "]", "\n", "sample_index", "=", "random", ".", "choice", "(", "sample_indexes", ")", "\n", "sample_info", "=", "self", ".", "data", "[", "sample_index", "]", "\n", "sample_img", ",", "sample_label", "=", "self", ".", "_get_image", "(", "sample_info", ")", ",", "sample_info", "[", "'category_id'", "]", "\n", "sample_img", "=", "self", ".", "transform", "(", "sample_img", ")", "\n", "meta", "[", "'sample_image'", "]", "=", "sample_img", "\n", "meta", "[", "'sample_label'", "]", "=", "sample_label", "\n", "\n", "", "if", "self", ".", "mode", "!=", "'test'", ":", "\n", "            ", "image_label", "=", "now_info", "[", "'category_id'", "]", "# 0-index", "\n", "\n", "", "return", "image", ",", "image_label", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet.__init__": [[10, 41], ["print", "baseset.BaseSet.update_transform", "print", "print", "open", "json.load", "print", "len"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet.update_transform"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "\"train\"", ",", "cfg", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "input_size", "=", "cfg", ".", "INPUT_SIZE", "\n", "self", ".", "data_type", "=", "cfg", ".", "DATASET", ".", "DATA_TYPE", "\n", "self", ".", "color_space", "=", "cfg", ".", "COLOR_SPACE", "\n", "self", ".", "size", "=", "self", ".", "input_size", "\n", "self", ".", "dual_sample", "=", "True", "if", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "DUAL_SAMPLER", ".", "ENABLE", "and", "mode", "==", "\"train\"", "else", "False", "\n", "\n", "print", "(", "\"Use {} Mode to train network\"", ".", "format", "(", "self", ".", "color_space", ")", ")", "\n", "if", "self", ".", "data_type", "!=", "\"nori\"", ":", "\n", "            ", "self", ".", "data_root", "=", "cfg", ".", "DATASET", ".", "ROOT", "\n", "", "else", ":", "\n", "            ", "self", ".", "fetcher", "=", "None", "\n", "\n", "", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "print", "(", "\"Loading train data ...\"", ",", "end", "=", "\" \"", ")", "\n", "self", ".", "json_path", "=", "cfg", ".", "DATASET", ".", "TRAIN_JSON", "\n", "", "elif", "\"valid\"", "in", "self", ".", "mode", ":", "\n", "            ", "print", "(", "\"Loading valid data ...\"", ",", "end", "=", "\" \"", ")", "\n", "self", ".", "json_path", "=", "cfg", ".", "DATASET", ".", "VALID_JSON", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "update_transform", "(", ")", "\n", "\n", "with", "open", "(", "self", ".", "json_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "all_info", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "num_classes", "=", "self", ".", "all_info", "[", "\"num_classes\"", "]", "\n", "self", ".", "data", "=", "self", ".", "all_info", "[", "\"annotations\"", "]", "\n", "print", "(", "\"Contain {} images of {} classes\"", ".", "format", "(", "len", "(", "self", ".", "data", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet.__getitem__": [[42, 55], ["baseset.BaseSet._get_image", "dict", "baseset.BaseSet.transform"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet._get_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "now_info", "=", "self", ".", "data", "[", "index", "]", "\n", "img", "=", "self", ".", "_get_image", "(", "now_info", ")", "\n", "meta", "=", "dict", "(", ")", "\n", "image", "=", "self", ".", "transform", "(", "img", ")", "\n", "image_label", "=", "(", "\n", "now_info", "[", "\"category_id\"", "]", "if", "\"test\"", "not", "in", "self", ".", "mode", "else", "0", "\n", ")", "# 0-index", "\n", "if", "self", ".", "mode", "not", "in", "[", "\"train\"", ",", "\"valid\"", "]", ":", "\n", "            ", "meta", "[", "\"image_id\"", "]", "=", "now_info", "[", "\"image_id\"", "]", "\n", "meta", "[", "\"fpath\"", "]", "=", "now_info", "[", "\"fpath\"", "]", "\n", "\n", "", "return", "image", ",", "image_label", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet.update_transform": [[56, 68], ["transform_list.extend", "torchvision.Compose", "torchvision.ToPILImage", "transform_list.append", "torchvision.ToTensor"], "methods", ["None"], ["", "def", "update_transform", "(", "self", ",", "input_size", "=", "None", ")", ":", "\n", "        ", "normalize", "=", "TRANSFORMS", "[", "\"normalize\"", "]", "(", "cfg", "=", "self", ".", "cfg", ",", "input_size", "=", "input_size", ")", "\n", "transform_list", "=", "[", "transforms", ".", "ToPILImage", "(", ")", "]", "\n", "transform_ops", "=", "(", "\n", "self", ".", "cfg", ".", "TRANSFORMS", ".", "TRAIN_TRANSFORMS", "\n", "if", "self", ".", "mode", "==", "\"train\"", "\n", "else", "self", ".", "cfg", ".", "TRANSFORMS", ".", "TEST_TRANSFORMS", "\n", ")", "\n", "for", "tran", "in", "transform_ops", ":", "\n", "            ", "transform_list", ".", "append", "(", "TRANSFORMS", "[", "tran", "]", "(", "cfg", "=", "self", ".", "cfg", ",", "input_size", "=", "input_size", ")", ")", "\n", "", "transform_list", ".", "extend", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet.get_num_classes": [[69, 71], ["None"], "methods", ["None"], ["", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet.get_annotations": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_annotations", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet.__len__": [[75, 77], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet.imread_with_retry": [[78, 91], ["range", "cv2.imread", "print", "time.sleep"], "methods", ["None"], ["", "def", "imread_with_retry", "(", "self", ",", "fpath", ")", ":", "\n", "        ", "retry_time", "=", "10", "\n", "for", "k", "in", "range", "(", "retry_time", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "img", "=", "cv2", ".", "imread", "(", "fpath", ")", "\n", "if", "img", "is", "None", ":", "\n", "                    ", "print", "(", "\"img is None, try to re-read img\"", ")", "\n", "continue", "\n", "", "return", "img", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "if", "k", "==", "retry_time", "-", "1", ":", "\n", "                    ", "assert", "False", ",", "\"cv2 imread {} failed\"", ".", "format", "(", "fpath", ")", "\n", "", "time", ".", "sleep", "(", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet._get_image": [[92, 99], ["os.path.join", "baseset.BaseSet.imread_with_retry", "cv2.cvtColor"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet.imread_with_retry"], ["", "", "", "def", "_get_image", "(", "self", ",", "now_info", ")", ":", "\n", "        ", "if", "self", ".", "data_type", "==", "\"jpg\"", ":", "\n", "            ", "fpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "now_info", "[", "\"fpath\"", "]", ")", "\n", "img", "=", "self", ".", "imread_with_retry", "(", "fpath", ")", "\n", "", "if", "self", ".", "color_space", "==", "\"RGB\"", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet._get_class_dict": [[100, 110], ["dict", "enumerate", "class_dict[].append"], "methods", ["None"], ["", "def", "_get_class_dict", "(", "self", ")", ":", "\n", "        ", "class_dict", "=", "dict", "(", ")", "\n", "for", "i", ",", "anno", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "            ", "cat_id", "=", "(", "\n", "anno", "[", "\"category_id\"", "]", "if", "\"category_id\"", "in", "anno", "else", "anno", "[", "\"image_label\"", "]", "\n", ")", "\n", "if", "not", "cat_id", "in", "class_dict", ":", "\n", "                ", "class_dict", "[", "cat_id", "]", "=", "[", "]", "\n", "", "class_dict", "[", "cat_id", "]", ".", "append", "(", "i", ")", "\n", "", "return", "class_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet.get_weight": [[111, 122], ["max", "sum", "cat_list.append"], "methods", ["None"], ["", "def", "get_weight", "(", "self", ",", "annotations", ",", "num_classes", ")", ":", "\n", "        ", "num_list", "=", "[", "0", "]", "*", "num_classes", "\n", "cat_list", "=", "[", "]", "\n", "for", "anno", "in", "annotations", ":", "\n", "            ", "category_id", "=", "anno", "[", "\"category_id\"", "]", "\n", "num_list", "[", "category_id", "]", "+=", "1", "\n", "cat_list", ".", "append", "(", "category_id", ")", "\n", "", "max_num", "=", "max", "(", "num_list", ")", "\n", "class_weight", "=", "[", "max_num", "/", "i", "for", "i", "in", "num_list", "]", "\n", "sum_weight", "=", "sum", "(", "class_weight", ")", "\n", "return", "class_weight", ",", "sum_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet.sample_class_index_by_weight": [[123, 129], ["range", "random.random"], "methods", ["None"], ["", "def", "sample_class_index_by_weight", "(", "self", ")", ":", "\n", "        ", "rand_number", ",", "now_sum", "=", "random", ".", "random", "(", ")", "*", "self", ".", "sum_weight", ",", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "now_sum", "+=", "self", ".", "class_weight", "[", "i", "]", "\n", "if", "rand_number", "<=", "now_sum", ":", "\n", "                ", "return", "i", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.__init__": [[13, 42], ["super().__init__", "print", "numpy.random.seed", "random.seed", "imbalance_cifar.IMBALANCECIFAR10.get_img_num_per_cls", "imbalance_cifar.IMBALANCECIFAR10.gen_imbalanced_data", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "imbalance_cifar.IMBALANCECIFAR10.get_weight", "imbalance_cifar.IMBALANCECIFAR10._get_class_dict", "len", "imbalance_cifar.IMBALANCECIFAR10.get_annotations", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.get_img_num_per_cls", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.gen_imbalanced_data", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.get_weight", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10._get_class_dict", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.get_annotations"], ["def", "__init__", "(", "self", ",", "mode", ",", "cfg", ",", "root", "=", "'./datasets/imbalance_cifar10'", ",", "imb_type", "=", "'exp'", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "True", ")", ":", "\n", "        ", "train", "=", "True", "if", "mode", "==", "\"train\"", "else", "False", "\n", "super", "(", "IMBALANCECIFAR10", ",", "self", ")", ".", "__init__", "(", "root", ",", "train", ",", "transform", ",", "target_transform", ",", "download", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "dual_sample", "=", "True", "if", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "DUAL_SAMPLER", ".", "ENABLE", "and", "self", ".", "train", "else", "False", "\n", "rand_number", "=", "cfg", ".", "DATASET", ".", "IMBALANCECIFAR", ".", "RANDOM_SEED", "\n", "if", "self", ".", "train", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "rand_number", ")", "\n", "random", ".", "seed", "(", "rand_number", ")", "\n", "imb_factor", "=", "self", ".", "cfg", ".", "DATASET", ".", "IMBALANCECIFAR", ".", "RATIO", "\n", "img_num_list", "=", "self", ".", "get_img_num_per_cls", "(", "self", ".", "cls_num", ",", "imb_type", ",", "imb_factor", ")", "\n", "self", ".", "gen_imbalanced_data", "(", "img_num_list", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "", "print", "(", "\"{} Mode: Contain {} images\"", ".", "format", "(", "mode", ",", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "if", "self", ".", "dual_sample", "or", "(", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "TYPE", "==", "\"weighted sampler\"", "and", "self", ".", "train", ")", ":", "\n", "            ", "self", ".", "class_weight", ",", "self", ".", "sum_weight", "=", "self", ".", "get_weight", "(", "self", ".", "get_annotations", "(", ")", ",", "self", ".", "cls_num", ")", "\n", "self", ".", "class_dict", "=", "self", ".", "_get_class_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.get_img_num_per_cls": [[43, 58], ["len", "range", "img_num_per_cls.append", "range", "range", "img_num_per_cls.extend", "int", "img_num_per_cls.append", "img_num_per_cls.append", "int", "int", "int"], "methods", ["None"], ["", "", "def", "get_img_num_per_cls", "(", "self", ",", "cls_num", ",", "imb_type", ",", "imb_factor", ")", ":", "\n", "        ", "img_max", "=", "len", "(", "self", ".", "data", ")", "/", "cls_num", "\n", "img_num_per_cls", "=", "[", "]", "\n", "if", "imb_type", "==", "'exp'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", ")", ":", "\n", "                ", "num", "=", "img_max", "*", "(", "imb_factor", "**", "(", "cls_idx", "/", "(", "cls_num", "-", "1.0", ")", ")", ")", "\n", "img_num_per_cls", ".", "append", "(", "int", "(", "num", ")", ")", "\n", "", "", "elif", "imb_type", "==", "'step'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", ")", ")", "\n", "", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", "*", "imb_factor", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "img_num_per_cls", ".", "extend", "(", "[", "int", "(", "img_max", ")", "]", "*", "cls_num", ")", "\n", "", "return", "img_num_per_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.sample_class_index_by_weight": [[59, 65], ["range", "random.random"], "methods", ["None"], ["", "def", "sample_class_index_by_weight", "(", "self", ")", ":", "\n", "        ", "rand_number", ",", "now_sum", "=", "random", ".", "random", "(", ")", "*", "self", ".", "sum_weight", ",", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "now_sum", "+=", "self", ".", "class_weight", "[", "i", "]", "\n", "if", "rand_number", "<=", "now_sum", ":", "\n", "                ", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.reset_epoch": [[144, 146], ["None"], "methods", ["None"], ["", "def", "reset_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10._get_class_dict": [[69, 77], ["dict", "enumerate", "imbalance_cifar.IMBALANCECIFAR10.get_annotations", "class_dict[].append"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.get_annotations"], ["", "def", "_get_class_dict", "(", "self", ")", ":", "\n", "        ", "class_dict", "=", "dict", "(", ")", "\n", "for", "i", ",", "anno", "in", "enumerate", "(", "self", ".", "get_annotations", "(", ")", ")", ":", "\n", "            ", "cat_id", "=", "anno", "[", "\"category_id\"", "]", "\n", "if", "not", "cat_id", "in", "class_dict", ":", "\n", "                ", "class_dict", "[", "cat_id", "]", "=", "[", "]", "\n", "", "class_dict", "[", "cat_id", "]", ".", "append", "(", "i", ")", "\n", "", "return", "class_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.get_weight": [[78, 89], ["max", "sum", "cat_list.append"], "methods", ["None"], ["", "def", "get_weight", "(", "self", ",", "annotations", ",", "num_classes", ")", ":", "\n", "        ", "num_list", "=", "[", "0", "]", "*", "num_classes", "\n", "cat_list", "=", "[", "]", "\n", "for", "anno", "in", "annotations", ":", "\n", "            ", "category_id", "=", "anno", "[", "\"category_id\"", "]", "\n", "num_list", "[", "category_id", "]", "+=", "1", "\n", "cat_list", ".", "append", "(", "category_id", ")", "\n", "", "max_num", "=", "max", "(", "num_list", ")", "\n", "class_weight", "=", "[", "max_num", "/", "i", "for", "i", "in", "num_list", "]", "\n", "sum_weight", "=", "sum", "(", "class_weight", ")", "\n", "return", "class_weight", ",", "sum_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.__getitem__": [[90, 140], ["dict", "PIL.Image.fromarray", "random.choice", "PIL.Image.fromarray", "imbalance_cifar.IMBALANCECIFAR10.transform", "imbalance_cifar.IMBALANCECIFAR10.transform", "imbalance_cifar.IMBALANCECIFAR10.target_transform", "random.randint", "imbalance_cifar.IMBALANCECIFAR10.sample_class_index_by_weight", "random.choice", "imbalance_cifar.IMBALANCECIFAR10.sample_class_index_by_weight", "random.randint", "random.choice", "random.randint", "imbalance_cifar.IMBALANCECIFAR10.__len__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.sample_class_index_by_weight", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.sample_class_index_by_weight", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.baseset.BaseSet.__len__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "if", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "TYPE", "==", "\"weighted sampler\"", "and", "self", ".", "train", ":", "\n", "            ", "assert", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "WEIGHTED_SAMPLER", ".", "TYPE", "in", "[", "\"balance\"", ",", "\"reverse\"", "]", "\n", "if", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "WEIGHTED_SAMPLER", ".", "TYPE", "==", "\"balance\"", ":", "\n", "                ", "sample_class", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "cls_num", "-", "1", ")", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "WEIGHTED_SAMPLER", ".", "TYPE", "==", "\"reverse\"", ":", "\n", "                ", "sample_class", "=", "self", ".", "sample_class_index_by_weight", "(", ")", "\n", "", "sample_indexes", "=", "self", ".", "class_dict", "[", "sample_class", "]", "\n", "index", "=", "random", ".", "choice", "(", "sample_indexes", ")", "\n", "\n", "", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "meta", "=", "dict", "(", ")", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "dual_sample", ":", "\n", "            ", "if", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "DUAL_SAMPLER", ".", "TYPE", "==", "\"reverse\"", ":", "\n", "                ", "sample_class", "=", "self", ".", "sample_class_index_by_weight", "(", ")", "\n", "sample_indexes", "=", "self", ".", "class_dict", "[", "sample_class", "]", "\n", "sample_index", "=", "random", ".", "choice", "(", "sample_indexes", ")", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "DUAL_SAMPLER", ".", "TYPE", "==", "\"balance\"", ":", "\n", "                ", "sample_class", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "cls_num", "-", "1", ")", "\n", "sample_indexes", "=", "self", ".", "class_dict", "[", "sample_class", "]", "\n", "sample_index", "=", "random", ".", "choice", "(", "sample_indexes", ")", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN", ".", "SAMPLER", ".", "DUAL_SAMPLER", ".", "TYPE", "==", "\"uniform\"", ":", "\n", "                ", "sample_index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "__len__", "(", ")", "-", "1", ")", "\n", "\n", "", "sample_img", ",", "sample_label", "=", "self", ".", "data", "[", "sample_index", "]", ",", "self", ".", "targets", "[", "sample_index", "]", "\n", "sample_img", "=", "Image", ".", "fromarray", "(", "sample_img", ")", "\n", "sample_img", "=", "self", ".", "transform", "(", "sample_img", ")", "\n", "\n", "meta", "[", "'sample_image'", "]", "=", "sample_img", "\n", "meta", "[", "'sample_label'", "]", "=", "sample_label", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.get_num_classes": [[141, 143], ["None"], "methods", ["None"], ["", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cls_num", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.get_annotations": [[147, 152], ["annos.append", "int"], "methods", ["None"], ["", "def", "get_annotations", "(", "self", ")", ":", "\n", "        ", "annos", "=", "[", "]", "\n", "for", "target", "in", "self", ".", "targets", ":", "\n", "            ", "annos", ".", "append", "(", "{", "'category_id'", ":", "int", "(", "target", ")", "}", ")", "\n", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.gen_imbalanced_data": [[153, 170], ["numpy.array", "numpy.unique", "dict", "zip", "numpy.vstack", "numpy.random.shuffle", "numpy.vstack.append", "new_targets.extend", "numpy.where"], "methods", ["None"], ["", "def", "gen_imbalanced_data", "(", "self", ",", "img_num_per_cls", ")", ":", "\n", "        ", "new_data", "=", "[", "]", "\n", "new_targets", "=", "[", "]", "\n", "targets_np", "=", "np", ".", "array", "(", "self", ".", "targets", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "classes", "=", "np", ".", "unique", "(", "targets_np", ")", "\n", "# np.random.shuffle(classes)", "\n", "self", ".", "num_per_cls_dict", "=", "dict", "(", ")", "\n", "for", "the_class", ",", "the_img_num", "in", "zip", "(", "classes", ",", "img_num_per_cls", ")", ":", "\n", "            ", "self", ".", "num_per_cls_dict", "[", "the_class", "]", "=", "the_img_num", "\n", "idx", "=", "np", ".", "where", "(", "targets_np", "==", "the_class", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "selec_idx", "=", "idx", "[", ":", "the_img_num", "]", "\n", "new_data", ".", "append", "(", "self", ".", "data", "[", "selec_idx", ",", "...", "]", ")", "\n", "new_targets", ".", "extend", "(", "[", "the_class", ",", "]", "*", "the_img_num", ")", "\n", "", "new_data", "=", "np", ".", "vstack", "(", "new_data", ")", "\n", "self", ".", "data", "=", "new_data", "\n", "self", ".", "targets", "=", "new_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.get_cls_num_list": [[171, 176], ["range", "cls_num_list.append"], "methods", ["None"], ["", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "cls_num_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "cls_num_list", ".", "append", "(", "self", ".", "num_per_cls_dict", "[", "i", "]", ")", "\n", "", "return", "cls_num_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.random_resized_crop": [[8, 15], ["TRANSFORMS.register", "torchvision.RandomResizedCrop"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry.Registry.register"], ["@", "TRANSFORMS", ".", "register", "(", "\"random_resized_crop\"", ")", "\n", "def", "random_resized_crop", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "size", "=", "kwargs", "[", "\"input_size\"", "]", "if", "kwargs", "[", "\"input_size\"", "]", "!=", "None", "else", "cfg", ".", "INPUT_SIZE", "\n", "return", "transforms", ".", "RandomResizedCrop", "(", "\n", "size", "=", "size", ",", "\n", "scale", "=", "cfg", ".", "TRANSFORMS", ".", "PROCESS_DETAIL", ".", "RANDOM_RESIZED_CROP", ".", "SCALE", ",", "\n", "ratio", "=", "cfg", ".", "TRANSFORMS", ".", "PROCESS_DETAIL", ".", "RANDOM_RESIZED_CROP", ".", "RATIO", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.random_crop": [[18, 23], ["TRANSFORMS.register", "torchvision.RandomCrop"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry.Registry.register"], ["", "@", "TRANSFORMS", ".", "register", "(", "\"random_crop\"", ")", "\n", "def", "random_crop", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "size", "=", "kwargs", "[", "\"input_size\"", "]", "if", "kwargs", "[", "\"input_size\"", "]", "!=", "None", "else", "cfg", ".", "INPUT_SIZE", "\n", "return", "transforms", ".", "RandomCrop", "(", "\n", "size", ",", "padding", "=", "cfg", ".", "TRANSFORMS", ".", "PROCESS_DETAIL", ".", "RANDOM_CROP", ".", "PADDING", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.random_horizontal_flip": [[26, 29], ["TRANSFORMS.register", "torchvision.RandomHorizontalFlip"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry.Registry.register"], ["", "@", "TRANSFORMS", ".", "register", "(", "\"random_horizontal_flip\"", ")", "\n", "def", "random_horizontal_flip", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.shorter_resize_for_crop": [[31, 36], ["TRANSFORMS.register", "torchvision.Resize", "int"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry.Registry.register"], ["", "@", "TRANSFORMS", ".", "register", "(", "\"shorter_resize_for_crop\"", ")", "\n", "def", "shorter_resize_for_crop", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "size", "=", "kwargs", "[", "\"input_size\"", "]", "if", "kwargs", "[", "\"input_size\"", "]", "!=", "None", "else", "cfg", ".", "INPUT_SIZE", "\n", "assert", "size", "[", "0", "]", "==", "size", "[", "1", "]", ",", "\"this img-process only process square-image\"", "\n", "return", "transforms", ".", "Resize", "(", "int", "(", "size", "[", "0", "]", "/", "0.875", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.normal_resize": [[38, 42], ["TRANSFORMS.register", "torchvision.Resize"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry.Registry.register"], ["", "@", "TRANSFORMS", ".", "register", "(", "\"normal_resize\"", ")", "\n", "def", "normal_resize", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "size", "=", "kwargs", "[", "\"input_size\"", "]", "if", "kwargs", "[", "\"input_size\"", "]", "!=", "None", "else", "cfg", ".", "INPUT_SIZE", "\n", "return", "transforms", ".", "Resize", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.center_crop": [[44, 48], ["TRANSFORMS.register", "torchvision.CenterCrop"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry.Registry.register"], ["", "@", "TRANSFORMS", ".", "register", "(", "\"center_crop\"", ")", "\n", "def", "center_crop", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "size", "=", "kwargs", "[", "\"input_size\"", "]", "if", "kwargs", "[", "\"input_size\"", "]", "!=", "None", "else", "cfg", ".", "INPUT_SIZE", "\n", "return", "transforms", ".", "CenterCrop", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.ten_crop": [[50, 54], ["TRANSFORMS.register", "torchvision.TenCrop"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry.Registry.register"], ["", "@", "TRANSFORMS", ".", "register", "(", "\"ten_crop\"", ")", "\n", "def", "ten_crop", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "size", "=", "kwargs", "[", "\"input_size\"", "]", "if", "kwargs", "[", "\"input_size\"", "]", "!=", "None", "else", "cfg", ".", "INPUT_SIZE", "\n", "return", "transforms", ".", "TenCrop", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.normalize": [[56, 60], ["TRANSFORMS.register", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.utils.registry.Registry.register"], ["", "@", "TRANSFORMS", ".", "register", "(", "\"normalize\"", ")", "\n", "def", "normalize", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", ")", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.config.default.update_config": [[123, 129], ["cfg.defrost", "cfg.merge_from_file", "cfg.merge_from_list", "cfg.freeze"], "function", ["None"], ["def", "update_config", "(", "cfg", ",", "args", ")", ":", "\n", "    ", "cfg", ".", "defrost", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "\n", "cfg", ".", "freeze", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.modules.classifier_ops.FCNorm.__init__": [[7, 11], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "classifier_ops.FCNorm.weight.data.uniform_().renorm_().mul_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "classifier_ops.FCNorm.weight.data.uniform_().renorm_", "classifier_ops.FCNorm.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "FCNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_classes", ",", "num_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.modules.classifier_ops.FCNorm.forward": [[12, 15], ["torch.linear", "torch.linear", "torch.linear", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.normalize", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.normalize", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.normalize", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.normalize", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.normalize", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.data_transform.transform_wrapper.normalize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "linear", "(", "F", ".", "normalize", "(", "x", ")", ",", "F", ".", "normalize", "(", "self", ".", "weight", ")", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.modules.pooling_ops.GAP.__init__": [[11, 14], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GAP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.modules.pooling_ops.GAP.forward": [[15, 19], ["pooling_ops.GAP.avgpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "#         x = x.view(x.shape[0], -1)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.modules.pooling_ops.Identity.__init__": [[21, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.modules.pooling_ops.Identity.forward": [[24, 26], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.LambdaLayer.__init__": [[49, 52], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.LambdaLayer.forward": [[53, 55], ["resnet_cifar.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.BasicBlock.__init__": [[60, 95], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_cifar.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "\"A\"", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "\"A\"", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "\n", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "\n", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\n", "\"constant\"", ",", "\n", "0", ",", "\n", ")", "\n", ")", "\n", "", "elif", "option", "==", "\"B\"", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.BasicBlock.forward": [[97, 103], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn2", "resnet_cifar.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn1", "resnet_cifar.BasicBlock.conv2", "resnet_cifar.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.ResNet_Cifar.__init__": [[106, 117], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar.ResNet_Cifar._make_layer", "resnet_cifar.ResNet_Cifar._make_layer", "resnet_cifar.ResNet_Cifar._make_layer", "resnet_cifar.ResNet_Cifar.apply"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "ResNet_Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.ResNet_Cifar._make_layer": [[118, 126], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.ResNet_Cifar.load_model": [[127, 145], ["print", "resnet_cifar.ResNet_Cifar.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "OrderedDict", "torch.load.items", "torch.load.items", "torch.load.items", "torch.load.items", "resnet_cifar.ResNet_Cifar.update", "resnet_cifar.ResNet_Cifar.load_state_dict", "print", "k.replace.replace.startswith", "k.replace.replace.replace", "k.replace.replace.replace"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update"], ["", "def", "load_model", "(", "self", ",", "pretrain", ")", ":", "\n", "        ", "print", "(", "\"Loading Backbone pretrain model from {}......\"", ".", "format", "(", "pretrain", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrain_dict", "=", "torch", ".", "load", "(", "pretrain", ")", "\n", "pretrain_dict", "=", "pretrain_dict", "[", "\"state_dict\"", "]", "if", "\"state_dict\"", "in", "pretrain_dict", "else", "pretrain_dict", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n", "new_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "\"module\"", ")", ":", "\n", "                ", "k", "=", "k", "[", "7", ":", "]", "\n", "", "if", "\"last_linear\"", "not", "in", "k", "and", "\"classifier\"", "not", "in", "k", "and", "\"linear\"", "not", "in", "k", "and", "\"fd\"", "not", "in", "k", ":", "\n", "                ", "k", "=", "k", ".", "replace", "(", "\"backbone.\"", ",", "\"\"", ")", "\n", "k", "=", "k", ".", "replace", "(", "\"fr\"", ",", "\"layer3.4\"", ")", "\n", "new_dict", "[", "k", "]", "=", "v", "\n", "", "", "model_dict", ".", "update", "(", "new_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"Backbone model has been loaded......\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.ResNet_Cifar.forward": [[146, 152], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.ResNet_Cifar.layer1", "resnet_cifar.ResNet_Cifar.layer2", "resnet_cifar.ResNet_Cifar.layer3", "resnet_cifar.ResNet_Cifar.bn1", "resnet_cifar.ResNet_Cifar.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.BBN_ResNet_Cifar.__init__": [[154, 167], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar.BBN_ResNet_Cifar._make_layer", "resnet_cifar.BBN_ResNet_Cifar._make_layer", "resnet_cifar.BBN_ResNet_Cifar._make_layer", "block", "block", "resnet_cifar.BBN_ResNet_Cifar.apply"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "BBN_ResNet_Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", "-", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "cb_block", "=", "block", "(", "self", ".", "in_planes", ",", "self", ".", "in_planes", ",", "stride", "=", "1", ")", "\n", "self", ".", "rb_block", "=", "block", "(", "self", ".", "in_planes", ",", "self", ".", "in_planes", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.BBN_ResNet_Cifar.load_model": [[168, 186], ["print", "resnet_cifar.BBN_ResNet_Cifar.state_dict", "OrderedDict", "pretrain_dict.items", "resnet_cifar.BBN_ResNet_Cifar.update", "resnet_cifar.BBN_ResNet_Cifar.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "k.replace.replace.startswith", "k.replace.replace.replace"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update"], ["", "def", "load_model", "(", "self", ",", "pretrain", ")", ":", "\n", "        ", "print", "(", "\"Loading Backbone pretrain model from {}......\"", ".", "format", "(", "pretrain", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrain_dict", "=", "torch", ".", "load", "(", "pretrain", ")", "[", "\"state_dict\"", "]", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n", "new_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "\"module\"", ")", ":", "\n", "                ", "k", "=", "k", "[", "7", ":", "]", "\n", "", "if", "\"fc\"", "not", "in", "k", "and", "\"classifier\"", "not", "in", "k", ":", "\n", "                ", "k", "=", "k", ".", "replace", "(", "\"backbone.\"", ",", "\"\"", ")", "\n", "new_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "model_dict", ".", "update", "(", "new_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"Backbone model has been loaded......\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.BBN_ResNet_Cifar._make_layer": [[187, 195], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ",", "add_flag", "=", "True", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.BBN_ResNet_Cifar.forward": [[196, 213], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BBN_ResNet_Cifar.layer1", "resnet_cifar.BBN_ResNet_Cifar.layer2", "resnet_cifar.BBN_ResNet_Cifar.layer3", "resnet_cifar.BBN_ResNet_Cifar.cb_block", "resnet_cifar.BBN_ResNet_Cifar.rb_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet_cifar.BBN_ResNet_Cifar.bn1", "resnet_cifar.BBN_ResNet_Cifar.cb_block", "resnet_cifar.BBN_ResNet_Cifar.conv1", "resnet_cifar.BBN_ResNet_Cifar.rb_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "if", "\"feature_cb\"", "in", "kwargs", ":", "\n", "            ", "out", "=", "self", ".", "cb_block", "(", "out", ")", "\n", "return", "out", "\n", "", "elif", "\"feature_rb\"", "in", "kwargs", ":", "\n", "            ", "out", "=", "self", ".", "rb_block", "(", "out", ")", "\n", "return", "out", "\n", "\n", "", "out1", "=", "self", ".", "cb_block", "(", "out", ")", "\n", "out2", "=", "self", ".", "rb_block", "(", "out", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar._weights_init": [[42, 46], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.res32_cifar": [[214, 226], ["resnet_cifar.ResNet_Cifar", "resnet_cifar.ResNet_Cifar.load_model", "print"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.load_model"], ["", "", "def", "res32_cifar", "(", "\n", "cfg", ",", "\n", "pretrain", "=", "True", ",", "\n", "pretrained_model", "=", "\"/data/Data/pretrain_models/resnet50-19c8e357.pth\"", ",", "\n", "last_layer_stride", "=", "2", ",", "\n", ")", ":", "\n", "    ", "resnet", "=", "ResNet_Cifar", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ")", "\n", "if", "pretrain", "and", "pretrained_model", "!=", "\"\"", ":", "\n", "        ", "resnet", ".", "load_model", "(", "pretrain", "=", "pretrained_model", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Choose to train from scratch\"", ")", "\n", "", "return", "resnet", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet_cifar.bbn_res32_cifar": [[227, 239], ["resnet_cifar.BBN_ResNet_Cifar", "resnet_cifar.BBN_ResNet_Cifar.load_model", "print"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.load_model"], ["", "def", "bbn_res32_cifar", "(", "\n", "cfg", ",", "\n", "pretrain", "=", "True", ",", "\n", "pretrained_model", "=", "\"/data/Data/pretrain_models/resnet50-19c8e357.pth\"", ",", "\n", "last_layer_stride", "=", "2", ",", "\n", ")", ":", "\n", "    ", "resnet", "=", "BBN_ResNet_Cifar", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ")", "\n", "if", "pretrain", "and", "pretrained_model", "!=", "\"\"", ":", "\n", "        ", "resnet", ".", "load_model", "(", "pretrain", "=", "pretrained_model", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Choose to train from scratch\"", ")", "\n", "", "return", "resnet", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BasicBlock.__init__": [[18, 43], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "stride", "=", "stride", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "stride", "=", "1", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# self.downsample = downsample", "\n", "if", "stride", "!=", "1", "or", "self", ".", "expansion", "*", "planes", "!=", "inplanes", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BasicBlock.forward": [[44, 61], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BottleNeck.__init__": [[67, 95], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BottleNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "if", "stride", "!=", "1", "or", "self", ".", "expansion", "*", "planes", "!=", "inplanes", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BottleNeck.forward": [[96, 110], ["resnet.BottleNeck.relu1", "resnet.BottleNeck.relu2", "resnet.BottleNeck.bn3", "resnet.BottleNeck.relu", "resnet.BottleNeck.bn1", "resnet.BottleNeck.bn2", "resnet.BottleNeck.conv3", "resnet.BottleNeck.downsample", "resnet.BottleNeck.conv1", "resnet.BottleNeck.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "!=", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "x", "\n", "", "out", "=", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.ResNet.__init__": [[112, 138], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "cfg", ",", "\n", "block_type", ",", "\n", "num_blocks", ",", "\n", "last_layer_stride", "=", "2", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "block", "=", "block_type", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "64", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "num_blocks", "[", "1", "]", ",", "128", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "num_blocks", "[", "2", "]", ",", "256", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "num_blocks", "[", "3", "]", ",", "\n", "512", ",", "\n", "stride", "=", "last_layer_stride", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.ResNet.load_model": [[140, 158], ["print", "resnet.ResNet.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "OrderedDict", "torch.load.items", "torch.load.items", "torch.load.items", "resnet.ResNet.update", "resnet.ResNet.load_state_dict", "print", "k.replace.replace.startswith", "k.replace.replace.replace"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update"], ["", "def", "load_model", "(", "self", ",", "pretrain", ")", ":", "\n", "        ", "print", "(", "\"Loading Backbone pretrain model from {}......\"", ".", "format", "(", "pretrain", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrain_dict", "=", "torch", ".", "load", "(", "pretrain", ")", "\n", "pretrain_dict", "=", "pretrain_dict", "[", "\"state_dict\"", "]", "if", "\"state_dict\"", "in", "pretrain_dict", "else", "pretrain_dict", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n", "new_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "\"module\"", ")", ":", "\n", "                ", "k", "=", "k", "[", "7", ":", "]", "\n", "", "if", "\"fc\"", "not", "in", "k", "and", "\"classifier\"", "not", "in", "k", ":", "\n", "                ", "k", "=", "k", ".", "replace", "(", "\"backbone.\"", ",", "\"\"", ")", "\n", "new_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "model_dict", ".", "update", "(", "new_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"Backbone model has been loaded......\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.ResNet._make_layer": [[159, 170], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnet.ResNet.block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_block", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_block", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "now_stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "self", ".", "block", "(", "\n", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "now_stride", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.ResNet.forward": [[171, 183], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.pool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "pool", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet.__init__": [[185, 208], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.BBN_ResNet._make_layer", "resnet.BBN_ResNet._make_layer", "resnet.BBN_ResNet._make_layer", "resnet.BBN_ResNet._make_layer", "resnet.BBN_ResNet.block", "resnet.BBN_ResNet.block"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "cfg", ",", "\n", "block_type", ",", "\n", "num_blocks", ",", "\n", "last_layer_stride", "=", "2", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BBN_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "block", "=", "block_type", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "64", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "128", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "256", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "3", "]", "-", "1", ",", "512", ",", "stride", "=", "last_layer_stride", ")", "\n", "\n", "self", ".", "cb_block", "=", "self", ".", "block", "(", "self", ".", "inplanes", ",", "self", ".", "inplanes", "//", "4", ",", "stride", "=", "1", ")", "\n", "self", ".", "rb_block", "=", "self", ".", "block", "(", "self", ".", "inplanes", ",", "self", ".", "inplanes", "//", "4", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet.load_model": [[209, 227], ["print", "resnet.BBN_ResNet.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "OrderedDict", "torch.load.items", "torch.load.items", "torch.load.items", "resnet.BBN_ResNet.update", "resnet.BBN_ResNet.load_state_dict", "print", "k.replace.replace.startswith", "k.replace.replace.replace"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update"], ["", "def", "load_model", "(", "self", ",", "pretrain", ")", ":", "\n", "        ", "print", "(", "\"Loading Backbone pretrain model from {}......\"", ".", "format", "(", "pretrain", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrain_dict", "=", "torch", ".", "load", "(", "pretrain", ")", "\n", "pretrain_dict", "=", "pretrain_dict", "[", "\"state_dict\"", "]", "if", "\"state_dict\"", "in", "pretrain_dict", "else", "pretrain_dict", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n", "new_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "\"module\"", ")", ":", "\n", "                ", "k", "=", "k", "[", "7", ":", "]", "\n", "", "if", "\"fc\"", "not", "in", "k", "and", "\"classifier\"", "not", "in", "k", ":", "\n", "                ", "k", "=", "k", ".", "replace", "(", "\"backbone.\"", ",", "\"\"", ")", "\n", "new_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "model_dict", ".", "update", "(", "new_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"Backbone model has been loaded......\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet._make_layer": [[228, 235], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnet.BBN_ResNet.block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_block", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_block", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "now_stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "now_stride", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.BBN_ResNet.forward": [[236, 258], ["resnet.BBN_ResNet.conv1", "resnet.BBN_ResNet.bn1", "resnet.BBN_ResNet.relu", "resnet.BBN_ResNet.pool", "resnet.BBN_ResNet.layer1", "resnet.BBN_ResNet.layer2", "resnet.BBN_ResNet.layer3", "resnet.BBN_ResNet.layer4", "resnet.BBN_ResNet.cb_block", "resnet.BBN_ResNet.rb_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "resnet.BBN_ResNet.cb_block", "resnet.BBN_ResNet.rb_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "pool", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "\n", "if", "\"feature_cb\"", "in", "kwargs", ":", "\n", "            ", "out", "=", "self", ".", "cb_block", "(", "out", ")", "\n", "return", "out", "\n", "", "elif", "\"feature_rb\"", "in", "kwargs", ":", "\n", "            ", "out", "=", "self", ".", "rb_block", "(", "out", ")", "\n", "return", "out", "\n", "", "out1", "=", "self", ".", "cb_block", "(", "out", ")", "\n", "out2", "=", "self", ".", "rb_block", "(", "out", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.res50": [[259, 276], ["resnet.ResNet", "resnet.ResNet.load_model", "print"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.load_model"], ["", "", "def", "res50", "(", "\n", "cfg", ",", "\n", "pretrain", "=", "True", ",", "\n", "pretrained_model", "=", "\"/data/Data/pretrain_models/resnet50-19c8e357.pth\"", ",", "\n", "last_layer_stride", "=", "2", ",", "\n", ")", ":", "\n", "    ", "resnet", "=", "ResNet", "(", "\n", "cfg", ",", "\n", "BottleNeck", ",", "\n", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "last_layer_stride", "=", "last_layer_stride", ",", "\n", ")", "\n", "if", "pretrain", "and", "pretrained_model", "!=", "\"\"", ":", "\n", "        ", "resnet", ".", "load_model", "(", "pretrain", "=", "pretrained_model", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Choose to train from scratch\"", ")", "\n", "", "return", "resnet", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.backbone.resnet.bbn_res50": [[277, 294], ["resnet.BBN_ResNet", "resnet.BBN_ResNet.load_model", "print"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.load_model"], ["", "def", "bbn_res50", "(", "\n", "cfg", ",", "\n", "pretrain", "=", "True", ",", "\n", "pretrained_model", "=", "\"/data/Data/pretrain_models/resnet50-19c8e357.pth\"", ",", "\n", "last_layer_stride", "=", "2", ",", "\n", ")", ":", "\n", "    ", "resnet", "=", "BBN_ResNet", "(", "\n", "cfg", ",", "\n", "BottleNeck", ",", "\n", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "last_layer_stride", "=", "last_layer_stride", ",", "\n", ")", "\n", "if", "pretrain", "and", "pretrained_model", "!=", "\"\"", ":", "\n", "        ", "resnet", ".", "load_model", "(", "pretrain", "=", "pretrained_model", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Choose to train from scratch\"", ")", "\n", "", "return", "resnet", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.AverageMeter.__init__": [[9, 11], ["evaluate.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.AverageMeter.reset": [[12, 17], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.AverageMeter.update": [[18, 23], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "if", "self", ".", "count", "!=", "0", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.__init__": [[26, 29], ["evaluate.FusionMatrix.reset"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.reset"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.reset": [[30, 32], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update": [[33, 37], ["range"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "output", ",", "label", ")", ":", "\n", "        ", "length", "=", "output", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "            ", "self", ".", "matrix", "[", "output", "[", "i", "]", ",", "label", "[", "i", "]", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.get_rec_per_class": [[38, 47], ["numpy.array", "numpy.isnan", "evaluate.FusionMatrix.matrix[].sum", "range"], "methods", ["None"], ["", "", "def", "get_rec_per_class", "(", "self", ")", ":", "\n", "        ", "rec", "=", "np", ".", "array", "(", "\n", "[", "\n", "self", ".", "matrix", "[", "i", ",", "i", "]", "/", "self", ".", "matrix", "[", ":", ",", "i", "]", ".", "sum", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "\n", "]", "\n", ")", "\n", "rec", "[", "np", ".", "isnan", "(", "rec", ")", "]", "=", "0", "\n", "return", "rec", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.get_pre_per_class": [[48, 57], ["numpy.array", "numpy.isnan", "evaluate.FusionMatrix.matrix[].sum", "range"], "methods", ["None"], ["", "def", "get_pre_per_class", "(", "self", ")", ":", "\n", "        ", "pre", "=", "np", ".", "array", "(", "\n", "[", "\n", "self", ".", "matrix", "[", "i", ",", "i", "]", "/", "self", ".", "matrix", "[", "i", ",", ":", "]", ".", "sum", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "\n", "]", "\n", ")", "\n", "pre", "[", "np", ".", "isnan", "(", "pre", ")", "]", "=", "0", "\n", "return", "pre", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.get_accuracy": [[58, 64], ["numpy.sum", "evaluate.FusionMatrix.matrix.sum", "range"], "methods", ["None"], ["", "def", "get_accuracy", "(", "self", ")", ":", "\n", "        ", "acc", "=", "(", "\n", "np", ".", "sum", "(", "[", "self", ".", "matrix", "[", "i", ",", "i", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", ")", "\n", "/", "self", ".", "matrix", ".", "sum", "(", ")", "\n", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.plot_confusion_matrix": [[65, 101], ["matplotlib.pyplot.subplots", "ax.imshow", "ax.figure.colorbar", "ax.set", "matplotlib.pyplot.setp", "range", "fig.tight_layout", "ax.get_xticklabels", "cm.max", "range", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "ax.text", "format"], "methods", ["None"], ["", "def", "plot_confusion_matrix", "(", "self", ",", "normalize", "=", "False", ",", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "\n", "        ", "if", "normalize", ":", "\n", "            ", "title", "=", "'Normalized confusion matrix'", "\n", "", "else", ":", "\n", "            ", "title", "=", "'Confusion matrix, without normalization'", "\n", "\n", "# Compute confusion matrix", "\n", "", "cm", "=", "self", ".", "matrix", ".", "T", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "ax", ".", "figure", ".", "colorbar", "(", "im", ",", "ax", "=", "ax", ")", "\n", "# We want to show all ticks...", "\n", "ax", ".", "set", "(", "xticks", "=", "np", ".", "arange", "(", "cm", ".", "shape", "[", "1", "]", ")", ",", "\n", "yticks", "=", "np", ".", "arange", "(", "cm", ".", "shape", "[", "0", "]", ")", ",", "\n", "# ... and label them with the respective list entries", "\n", "xticklabels", "=", "np", ".", "arange", "(", "self", ".", "num_classes", ")", ",", "yticklabels", "=", "np", ".", "arange", "(", "self", ".", "num_classes", ")", ",", "\n", "title", "=", "title", ",", "\n", "ylabel", "=", "'True label'", ",", "\n", "xlabel", "=", "'Predicted label'", ")", "\n", "\n", "# Rotate the tick labels and set their alignment.", "\n", "plt", ".", "setp", "(", "ax", ".", "get_xticklabels", "(", ")", ",", "rotation", "=", "45", ",", "ha", "=", "\"right\"", ",", "\n", "rotation_mode", "=", "\"anchor\"", ")", "\n", "\n", "# Loop over data dimensions and create text annotations.", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "for", "i", "in", "range", "(", "cm", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "cm", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "ax", ".", "text", "(", "j", ",", "i", ",", "format", "(", "cm", "[", "i", ",", "j", "]", ",", "fmt", ")", ",", "\n", "ha", "=", "\"center\"", ",", "va", "=", "\"center\"", ",", "\n", "color", "=", "\"white\"", "if", "cm", "[", "i", ",", "j", "]", ">", "thresh", "else", "\"black\"", ")", "\n", "", "", "fig", ".", "tight_layout", "(", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.accuracy": [[103, 108], ["None"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "label", ")", ":", "\n", "    ", "cnt", "=", "label", ".", "shape", "[", "0", "]", "\n", "true_count", "=", "(", "output", "==", "label", ")", ".", "sum", "(", ")", "\n", "now_accuracy", "=", "true_count", "/", "cnt", "\n", "return", "now_accuracy", ",", "cnt", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.function.train_model": [[9, 58], ["combiner.reset_epoch", "time.time", "len", "core.evaluate.AverageMeter", "core.evaluate.AverageMeter", "enumerate", "time.time", "logger.info", "model.eval", "model.train", "criterion.reset_epoch", "combiner.forward", "optimizer.zero_grad", "loss.backward", "optimizer.step", "core.evaluate.AverageMeter.update", "core.evaluate.AverageMeter.update", "loss.data.item", "logger.info"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.reset_epoch", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.reset_epoch", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.forward", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update"], ["def", "train_model", "(", "\n", "trainLoader", ",", "\n", "model", ",", "\n", "epoch", ",", "\n", "epoch_number", ",", "\n", "optimizer", ",", "\n", "combiner", ",", "\n", "criterion", ",", "\n", "cfg", ",", "\n", "logger", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "if", "cfg", ".", "EVAL_MODE", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "", "combiner", ".", "reset_epoch", "(", "epoch", ")", "\n", "\n", "if", "cfg", ".", "LOSS", ".", "LOSS_TYPE", "in", "[", "'LDAMLoss'", ",", "'CSCE'", "]", ":", "\n", "        ", "criterion", ".", "reset_epoch", "(", "epoch", ")", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "number_batch", "=", "len", "(", "trainLoader", ")", "\n", "\n", "all_loss", "=", "AverageMeter", "(", ")", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "for", "i", ",", "(", "image", ",", "label", ",", "meta", ")", "in", "enumerate", "(", "trainLoader", ")", ":", "\n", "        ", "cnt", "=", "label", ".", "shape", "[", "0", "]", "\n", "loss", ",", "now_acc", "=", "combiner", ".", "forward", "(", "model", ",", "criterion", ",", "image", ",", "label", ",", "meta", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "all_loss", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "cnt", ")", "\n", "acc", ".", "update", "(", "now_acc", ",", "cnt", ")", "\n", "\n", "if", "i", "%", "cfg", ".", "SHOW_STEP", "==", "0", ":", "\n", "            ", "pbar_str", "=", "\"Epoch:{:>3d}  Batch:{:>3d}/{}  Batch_Loss:{:>5.3f}  Batch_Accuracy:{:>5.2f}%     \"", ".", "format", "(", "\n", "epoch", ",", "i", ",", "number_batch", ",", "all_loss", ".", "val", ",", "acc", ".", "val", "*", "100", "\n", ")", "\n", "logger", ".", "info", "(", "pbar_str", ")", "\n", "", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "pbar_str", "=", "\"---Epoch:{:>3d}/{}   Avg_Loss:{:>5.3f}   Epoch_Accuracy:{:>5.2f}%   Epoch_Time:{:>5.2f}min---\"", ".", "format", "(", "\n", "epoch", ",", "epoch_number", ",", "all_loss", ".", "avg", ",", "acc", ".", "avg", "*", "100", ",", "(", "end_time", "-", "start_time", ")", "/", "60", "\n", ")", "\n", "logger", ".", "info", "(", "pbar_str", ")", "\n", "return", "acc", ".", "avg", ",", "all_loss", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.function.valid_model": [[60, 92], ["model.eval", "dataLoader.dataset.get_num_classes", "core.evaluate.FusionMatrix", "torch.no_grad", "core.evaluate.AverageMeter", "core.evaluate.AverageMeter", "torch.nn.Softmax", "enumerate", "logger.info", "model", "model", "criterion", "torch.nn.Softmax.", "torch.argmax", "core.evaluate.AverageMeter.update", "core.evaluate.FusionMatrix.update", "core.evaluate.accuracy", "core.evaluate.AverageMeter.update", "image.to", "label.to", "criterion.data.item", "torch.argmax.cpu().numpy", "label.cpu().numpy", "torch.argmax.cpu().numpy", "label.cpu().numpy", "torch.argmax.cpu", "label.cpu", "torch.argmax.cpu", "label.cpu"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.dataset.imbalance_cifar.IMBALANCECIFAR10.get_num_classes", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.accuracy", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update"], ["", "def", "valid_model", "(", "\n", "dataLoader", ",", "epoch_number", ",", "model", ",", "cfg", ",", "criterion", ",", "logger", ",", "device", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "num_classes", "=", "dataLoader", ".", "dataset", ".", "get_num_classes", "(", ")", "\n", "fusion_matrix", "=", "FusionMatrix", "(", "num_classes", ")", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "all_loss", "=", "AverageMeter", "(", ")", "\n", "acc", "=", "AverageMeter", "(", ")", "\n", "func", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "for", "i", ",", "(", "image", ",", "label", ",", "meta", ")", "in", "enumerate", "(", "dataLoader", ")", ":", "\n", "            ", "image", ",", "label", "=", "image", ".", "to", "(", "device", ")", ",", "label", ".", "to", "(", "device", ")", "\n", "\n", "feature", "=", "model", "(", "image", ",", "feature_flag", "=", "True", ")", "\n", "\n", "output", "=", "model", "(", "feature", ",", "classifier_flag", "=", "True", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "label", ")", "\n", "score_result", "=", "func", "(", "output", ")", "\n", "\n", "now_result", "=", "torch", ".", "argmax", "(", "score_result", ",", "1", ")", "\n", "all_loss", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "label", ".", "shape", "[", "0", "]", ")", "\n", "fusion_matrix", ".", "update", "(", "now_result", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "now_acc", ",", "cnt", "=", "accuracy", "(", "now_result", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "acc", ".", "update", "(", "now_acc", ",", "cnt", ")", "\n", "\n", "", "pbar_str", "=", "\"------- Valid: Epoch:{:>3d}  Valid_Loss:{:>5.3f}   Valid_Acc:{:>5.2f}%-------\"", ".", "format", "(", "\n", "epoch_number", ",", "all_loss", ".", "avg", ",", "acc", ".", "avg", "*", "100", "\n", ")", "\n", "logger", ".", "info", "(", "pbar_str", ")", "\n", "", "return", "acc", ".", "avg", ",", "all_loss", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.combiner.Combiner.__init__": [[6, 13], ["torch.nn.Softmax", "combiner.Combiner.initilize_all_parameters"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.combiner.Combiner.initilize_all_parameters"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "type", "=", "cfg", ".", "TRAIN", ".", "COMBINER", ".", "TYPE", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "epoch_number", "=", "cfg", ".", "TRAIN", ".", "MAX_EPOCH", "\n", "self", ".", "func", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "initilize_all_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.combiner.Combiner.initilize_all_parameters": [[14, 20], ["None"], "methods", ["None"], ["", "def", "initilize_all_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "0.2", "\n", "if", "self", ".", "epoch_number", "in", "[", "90", ",", "180", "]", ":", "\n", "            ", "self", ".", "div_epoch", "=", "100", "*", "(", "self", ".", "epoch_number", "//", "100", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "div_epoch", "=", "self", ".", "epoch_number", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.combiner.Combiner.reset_epoch": [[21, 23], ["None"], "methods", ["None"], ["", "", "def", "reset_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.combiner.Combiner.forward": [[24, 27], ["eval"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "model", ",", "criterion", ",", "image", ",", "label", ",", "meta", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "eval", "(", "\"self.{}\"", ".", "format", "(", "self", ".", "type", ")", ")", "(", "\n", "model", ",", "criterion", ",", "image", ",", "label", ",", "meta", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.combiner.Combiner.default": [[29, 37], ["model", "criterion", "torch.argmax", "image.to", "label.to", "combiner.Combiner.func", "core.evaluate.accuracy", "torch.argmax.cpu().numpy", "label.cpu().numpy", "torch.argmax.cpu", "label.cpu"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.accuracy"], ["", "def", "default", "(", "self", ",", "model", ",", "criterion", ",", "image", ",", "label", ",", "**", "kwargs", ")", ":", "\n", "        ", "image", ",", "label", "=", "image", ".", "to", "(", "self", ".", "device", ")", ",", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "label", ")", "\n", "now_result", "=", "torch", ".", "argmax", "(", "self", ".", "func", "(", "output", ")", ",", "1", ")", "\n", "now_acc", "=", "accuracy", "(", "now_result", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "[", "0", "]", "\n", "\n", "return", "loss", ",", "now_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.combiner.Combiner.bbn_mix": [[38, 67], ["model", "torch.argmax", "image.to", "meta[].to", "label.to", "meta[].to", "model", "model", "torch.cat", "combiner.Combiner.func", "criterion", "criterion", "core.evaluate.accuracy", "core.evaluate.accuracy", "torch.argmax.cpu().numpy", "label_a.cpu().numpy", "torch.argmax.cpu().numpy", "label_b.cpu().numpy", "torch.argmax.cpu", "label_a.cpu", "torch.argmax.cpu", "label_b.cpu"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.accuracy", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.accuracy"], ["", "def", "bbn_mix", "(", "self", ",", "model", ",", "criterion", ",", "image", ",", "label", ",", "meta", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "image_a", ",", "image_b", "=", "image", ".", "to", "(", "self", ".", "device", ")", ",", "meta", "[", "\"sample_image\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "label_a", ",", "label_b", "=", "label", ".", "to", "(", "self", ".", "device", ")", ",", "meta", "[", "\"sample_label\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "feature_a", ",", "feature_b", "=", "(", "\n", "model", "(", "image_a", ",", "feature_cb", "=", "True", ")", ",", "\n", "model", "(", "image_b", ",", "feature_rb", "=", "True", ")", ",", "\n", ")", "\n", "\n", "l", "=", "1", "-", "(", "(", "self", ".", "epoch", "-", "1", ")", "/", "self", ".", "div_epoch", ")", "**", "2", "# parabolic decay", "\n", "#l = 0.5  # fix", "\n", "#l = math.cos((self.epoch-1) / self.div_epoch * math.pi /2)   # cosine decay", "\n", "#l = 1 - (1 - ((self.epoch - 1) / self.div_epoch) ** 2) * 1  # parabolic increment", "\n", "#l = 1 - (self.epoch-1) / self.div_epoch  # linear decay", "\n", "#l = np.random.beta(self.alpha, self.alpha) # beta distribution", "\n", "#l = 1 if self.epoch <= 120 else 0  # seperated stage", "\n", "\n", "mixed_feature", "=", "2", "*", "torch", ".", "cat", "(", "(", "l", "*", "feature_a", ",", "(", "1", "-", "l", ")", "*", "feature_b", ")", ",", "dim", "=", "1", ")", "\n", "output", "=", "model", "(", "mixed_feature", ",", "classifier_flag", "=", "True", ")", "\n", "loss", "=", "l", "*", "criterion", "(", "output", ",", "label_a", ")", "+", "(", "1", "-", "l", ")", "*", "criterion", "(", "output", ",", "label_b", ")", "\n", "\n", "now_result", "=", "torch", ".", "argmax", "(", "self", ".", "func", "(", "output", ")", ",", "1", ")", "\n", "now_acc", "=", "(", "\n", "l", "*", "accuracy", "(", "now_result", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label_a", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "[", "0", "]", "\n", "+", "(", "1", "-", "l", ")", "*", "accuracy", "(", "now_result", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "label_b", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "[", "0", "]", "\n", ")", "\n", "\n", "return", "loss", ",", "now_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.__init__": [[9, 31], ["torch.Module.__init__", "network.Network._get_module", "network.Network._get_classifer", "network.Network.get_feature_length", "eval"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network._get_module", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network._get_classifer", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.get_feature_length"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "mode", "=", "\"train\"", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pretrain", "=", "(", "\n", "True", "\n", "if", "mode", "==", "\"train\"", "\n", "and", "cfg", ".", "RESUME_MODEL", "==", "\"\"", "\n", "and", "cfg", ".", "BACKBONE", ".", "PRETRAINED_MODEL", "!=", "\"\"", "\n", "else", "False", "\n", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n", "self", ".", "backbone", "=", "eval", "(", "self", ".", "cfg", ".", "BACKBONE", ".", "TYPE", ")", "(", "\n", "self", ".", "cfg", ",", "\n", "pretrain", "=", "pretrain", ",", "\n", "pretrained_model", "=", "cfg", ".", "BACKBONE", ".", "PRETRAINED_MODEL", ",", "\n", "last_layer_stride", "=", "2", ",", "\n", ")", "\n", "self", ".", "module", "=", "self", ".", "_get_module", "(", ")", "\n", "self", ".", "classifier", "=", "self", ".", "_get_classifer", "(", ")", "\n", "self", ".", "feature_len", "=", "self", ".", "get_feature_length", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.forward": [[33, 45], ["network.Network.backbone", "network.Network.module", "network.Network.view", "network.Network.classifier", "network.Network.extract_feature", "network.Network.classifier"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.extract_feature"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "\"feature_flag\"", "in", "kwargs", "or", "\"feature_cb\"", "in", "kwargs", "or", "\"feature_rb\"", "in", "kwargs", ":", "\n", "            ", "return", "self", ".", "extract_feature", "(", "x", ",", "**", "kwargs", ")", "\n", "", "elif", "\"classifier_flag\"", "in", "kwargs", ":", "\n", "            ", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "x", "=", "self", ".", "module", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.extract_feature": [[47, 56], ["network.Network.module", "network.Network.view", "network.Network.backbone", "network.Network.backbone"], "methods", ["None"], ["", "def", "extract_feature", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "\"bbn\"", "in", "self", ".", "cfg", ".", "BACKBONE", ".", "TYPE", ":", "\n", "            ", "x", "=", "self", ".", "backbone", "(", "x", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "", "x", "=", "self", ".", "module", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.freeze_backbone": [[58, 62], ["print", "network.Network.backbone.parameters"], "methods", ["None"], ["", "def", "freeze_backbone", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Freezing backbone .......\"", ")", "\n", "for", "p", "in", "self", ".", "backbone", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.load_backbone_model": [[64, 67], ["network.Network.backbone.load_model", "print"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.load_model"], ["", "", "def", "load_backbone_model", "(", "self", ",", "backbone_path", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "backbone", ".", "load_model", "(", "backbone_path", ")", "\n", "print", "(", "\"Backbone has been loaded...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.load_model": [[69, 85], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "network.Network.state_dict", "OrderedDict", "torch.load.items", "torch.load.items", "torch.load.items", "network.Network.update", "network.Network.load_state_dict", "print", "k.startswith"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update"], ["", "def", "load_model", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "pretrain_dict", "=", "torch", ".", "load", "(", "\n", "model_path", ",", "map_location", "=", "\"cpu\"", "if", "self", ".", "cfg", ".", "CPU_MODE", "else", "\"cuda\"", "\n", ")", "\n", "pretrain_dict", "=", "pretrain_dict", "[", "'state_dict'", "]", "if", "'state_dict'", "in", "pretrain_dict", "else", "pretrain_dict", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "from", "collections", "import", "OrderedDict", "\n", "new_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "\"module\"", ")", ":", "\n", "                ", "new_dict", "[", "k", "[", "7", ":", "]", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "new_dict", "[", "k", "]", "=", "v", "\n", "", "", "model_dict", ".", "update", "(", "new_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"Model has been loaded...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.get_feature_length": [[87, 96], ["None"], "methods", ["None"], ["", "def", "get_feature_length", "(", "self", ")", ":", "\n", "        ", "if", "\"cifar\"", "in", "self", ".", "cfg", ".", "BACKBONE", ".", "TYPE", ":", "\n", "            ", "num_features", "=", "64", "\n", "", "else", ":", "\n", "            ", "num_features", "=", "2048", "\n", "\n", "", "if", "\"bbn\"", "in", "self", ".", "cfg", ".", "BACKBONE", ".", "TYPE", ":", "\n", "            ", "num_features", "=", "num_features", "*", "2", "\n", "", "return", "num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network._get_module": [[98, 108], ["modules.GAP", "modules.Identity"], "methods", ["None"], ["", "def", "_get_module", "(", "self", ")", ":", "\n", "        ", "module_type", "=", "self", ".", "cfg", ".", "MODULE", ".", "TYPE", "\n", "if", "module_type", "==", "\"GAP\"", ":", "\n", "            ", "module", "=", "GAP", "(", ")", "\n", "", "elif", "module_type", "==", "\"Identity\"", ":", "\n", "            ", "module", "=", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network._get_classifer": [[110, 122], ["network.Network.get_feature_length", "modules.FCNorm", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.net.network.Network.get_feature_length"], ["", "def", "_get_classifer", "(", "self", ")", ":", "\n", "        ", "bias_flag", "=", "self", ".", "cfg", ".", "CLASSIFIER", ".", "BIAS", "\n", "\n", "num_features", "=", "self", ".", "get_feature_length", "(", ")", "\n", "if", "self", ".", "cfg", ".", "CLASSIFIER", ".", "TYPE", "==", "\"FCNorm\"", ":", "\n", "            ", "classifier", "=", "FCNorm", "(", "num_features", ",", "self", ".", "num_classes", ")", "\n", "", "elif", "self", ".", "cfg", ".", "CLASSIFIER", ".", "TYPE", "==", "\"FC\"", ":", "\n", "            ", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "self", ".", "num_classes", ",", "bias", "=", "bias_flag", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "classifier", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.CrossEntropy.__init__": [[8, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "para_dict", "=", "None", ")", ":", "\n", "        ", "super", "(", "CrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.CrossEntropy.forward": [[11, 15], ["torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "output", "=", "output", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.CSCE.__init__": [[19, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "para_dict", "=", "None", ")", ":", "\n", "        ", "super", "(", "CSCE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_class_list", "=", "para_dict", "[", "\"num_class_list\"", "]", "\n", "self", ".", "device", "=", "para_dict", "[", "\"device\"", "]", "\n", "\n", "cfg", "=", "para_dict", "[", "\"cfg\"", "]", "\n", "scheduler", "=", "cfg", ".", "LOSS", ".", "CSCE", ".", "SCHEDULER", "\n", "self", ".", "step_epoch", "=", "cfg", ".", "LOSS", ".", "CSCE", ".", "DRW_EPOCH", "\n", "\n", "if", "scheduler", "==", "\"drw\"", ":", "\n", "            ", "self", ".", "betas", "=", "[", "0", ",", "0.999999", "]", "\n", "", "elif", "scheduler", "==", "\"default\"", ":", "\n", "            ", "self", ".", "betas", "=", "[", "0.999999", ",", "0.999999", "]", "\n", "", "self", ".", "weight", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.CSCE.update_weight": [[34, 39], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.power", "numpy.array", "len", "numpy.sum", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "update_weight", "(", "self", ",", "beta", ")", ":", "\n", "        ", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "beta", ",", "self", ".", "num_class_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "beta", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "self", ".", "num_class_list", ")", "\n", "self", ".", "weight", "=", "torch", ".", "FloatTensor", "(", "per_cls_weights", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.CSCE.reset_epoch": [[40, 44], ["loss.CSCE.update_weight"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.CSCE.update_weight"], ["", "def", "reset_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "idx", "=", "(", "epoch", "-", "1", ")", "//", "self", ".", "step_epoch", "\n", "beta", "=", "self", ".", "betas", "[", "idx", "]", "\n", "self", ".", "update_weight", "(", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.CSCE.forward": [[45, 47], ["torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "F", ".", "cross_entropy", "(", "x", ",", "target", ",", "weight", "=", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__": [[52, 69], ["torch.Module.__init__", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.sqrt", "numpy.sqrt", "numpy.max", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "para_dict", "=", "None", ")", ":", "\n", "        ", "super", "(", "LDAMLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "s", "=", "30", "\n", "self", ".", "num_class_list", "=", "para_dict", "[", "\"num_class_list\"", "]", "\n", "self", ".", "device", "=", "para_dict", "[", "\"device\"", "]", "\n", "\n", "cfg", "=", "para_dict", "[", "\"cfg\"", "]", "\n", "max_m", "=", "cfg", ".", "LOSS", ".", "LDAM", ".", "MAX_MARGIN", "\n", "m_list", "=", "1.0", "/", "np", ".", "sqrt", "(", "np", ".", "sqrt", "(", "self", ".", "num_class_list", ")", ")", "\n", "m_list", "=", "m_list", "*", "(", "max_m", "/", "np", ".", "max", "(", "m_list", ")", ")", "\n", "m_list", "=", "torch", ".", "FloatTensor", "(", "m_list", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "m_list", "=", "m_list", "\n", "assert", "s", ">", "0", "\n", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "step_epoch", "=", "cfg", ".", "LOSS", ".", "LDAM", ".", "DRW_EPOCH", "\n", "self", ".", "weight", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.reset_epoch": [[70, 77], ["torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "numpy.power", "numpy.array", "len", "numpy.sum", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "reset_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "idx", "=", "(", "epoch", "-", "1", ")", "//", "self", ".", "step_epoch", "\n", "betas", "=", "[", "0", ",", "0.9999", "]", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "betas", "[", "idx", "]", ",", "self", ".", "num_class_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "betas", "[", "idx", "]", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "self", ".", "num_class_list", ")", "\n", "self", ".", "weight", "=", "torch", ".", "FloatTensor", "(", "per_cls_weights", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.loss.loss.LDAMLoss.forward": [[78, 90], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.type", "torch.zeros_like.type", "index_float.to.to.to", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "batch_m.view.view.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "target.data.view", "index_float.to.to.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "index", "=", "torch", ".", "zeros_like", "(", "x", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "index", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "index_float", "=", "index", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "index_float", "=", "index_float", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_m", "=", "torch", ".", "matmul", "(", "self", ".", "m_list", "[", "None", ",", ":", "]", ",", "index_float", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "batch_m", "=", "batch_m", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "x_m", "=", "x", "-", "batch_m", "\n", "\n", "output", "=", "torch", ".", "where", "(", "index", ",", "x_m", ",", "x", ")", "\n", "return", "F", ".", "cross_entropy", "(", "self", ".", "s", "*", "output", ",", "target", ",", "weight", "=", "self", ".", "weight", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.tools.convert_from_iNat.parse_args": [[5, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.main.valid.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train FGVC Network\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--file\"", ",", "\n", "help", "=", "\"json file to be converted\"", ",", "\n", "required", "=", "True", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--root\"", ",", "\n", "help", "=", "\"root path to save image\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sp\"", ",", "\n", "help", "=", "\"save path for converted file \"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "default", "=", "\".\"", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.tools.convert_from_iNat.convert": [[31, 49], ["json.load", "print", "tqdm.tqdm", "len", "open", "zip", "new_annos.append", "os.path.join"], "function", ["None"], ["", "def", "convert", "(", "json_file", ",", "image_root", ")", ":", "\n", "    ", "all_annos", "=", "json", ".", "load", "(", "open", "(", "json_file", ",", "'r'", ")", ")", "\n", "annos", "=", "all_annos", "[", "'annotations'", "]", "\n", "images", "=", "all_annos", "[", "'images'", "]", "\n", "new_annos", "=", "[", "]", "\n", "\n", "print", "(", "\"Converting file {} ...\"", ".", "format", "(", "json_file", ")", ")", "\n", "for", "anno", ",", "image", "in", "tqdm", "(", "zip", "(", "annos", ",", "images", ")", ")", ":", "\n", "        ", "assert", "image", "[", "\"id\"", "]", "==", "anno", "[", "\"id\"", "]", "\n", "\n", "new_annos", ".", "append", "(", "{", "\"image_id\"", ":", "image", "[", "\"id\"", "]", ",", "\n", "\"im_height\"", ":", "image", "[", "\"height\"", "]", ",", "\n", "\"im_width\"", ":", "image", "[", "\"width\"", "]", ",", "\n", "\"category_id\"", ":", "anno", "[", "\"category_id\"", "]", ",", "\n", "\"fpath\"", ":", "os", ".", "path", ".", "join", "(", "image_root", ",", "image", "[", "\"file_name\"", "]", ")", "}", ")", "\n", "", "num_classes", "=", "len", "(", "all_annos", "[", "\"categories\"", "]", ")", "\n", "return", "{", "\"annotations\"", ":", "new_annos", ",", "\n", "\"num_classes\"", ":", "num_classes", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.main.train.parse_args": [[27, 55], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.main.valid.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"codes for BBN\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cfg\"", ",", "\n", "help", "=", "\"decide which cfg to use\"", ",", "\n", "required", "=", "False", ",", "\n", "default", "=", "\"configs/cifar10.yaml\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ar\"", ",", "\n", "help", "=", "\"decide whether to use auto resume\"", ",", "\n", "type", "=", "ast", ".", "literal_eval", ",", "\n", "dest", "=", "'auto_resume'", ",", "\n", "required", "=", "False", ",", "\n", "default", "=", "True", ",", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.main._init_paths.add_path": [[5, 12], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "try", ":", "\n", "            ", "os", ".", "environ", "[", "\"PYTHONPATH\"", "]", "=", "path", "+", "\":\"", "+", "os", ".", "environ", "[", "\"PYTHONPATH\"", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "os", ".", "environ", "[", "\"PYTHONPATH\"", "]", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.main.valid.parse_args": [[14, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.main.valid.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"BBN evaluation\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cfg\"", ",", "\n", "help", "=", "\"decide which cfg to use\"", ",", "\n", "required", "=", "True", ",", "\n", "default", "=", "\"configs/cifar10.yaml\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.main.valid.valid_model": [[34, 84], ["tqdm.tqdm", "model.eval", "torch.nn.Softmax", "float", "float", "float", "print", "tqdm.tqdm.close", "core.evaluate.FusionMatrix", "torch.no_grad", "enumerate", "len", "image.to.to", "model", "torch.nn.Softmax.", "func.topk", "func.cpu().numpy", "fusion_matrix.update", "top_k.cpu().tolist", "enumerate", "tqdm.tqdm.set_description", "tqdm.tqdm.update", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "len", "result.cpu().numpy.argmax", "image_labels.numpy", "result_list.append", "numpy.sum", "func.cpu", "top_k.cpu", "int"], "function", ["home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update", "home.repos.pwc.inspect_result.Megvii-Nanjing_BBN.core.evaluate.FusionMatrix.update"], ["", "def", "valid_model", "(", "dataLoader", ",", "model", ",", "cfg", ",", "device", ",", "num_classes", ")", ":", "\n", "    ", "result_list", "=", "[", "]", "\n", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "dataLoader", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "top1_count", ",", "top2_count", ",", "top3_count", ",", "index", ",", "fusion_matrix", "=", "(", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", "[", "]", ",", "\n", "0", ",", "\n", "FusionMatrix", "(", "num_classes", ")", ",", "\n", ")", "\n", "\n", "func", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "image", ",", "image_labels", ",", "meta", ")", "in", "enumerate", "(", "dataLoader", ")", ":", "\n", "            ", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "image", ")", "\n", "result", "=", "func", "(", "output", ")", "\n", "_", ",", "top_k", "=", "result", ".", "topk", "(", "5", ",", "1", ",", "True", ",", "True", ")", "\n", "score_result", "=", "result", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "fusion_matrix", ".", "update", "(", "score_result", ".", "argmax", "(", "axis", "=", "1", ")", ",", "image_labels", ".", "numpy", "(", ")", ")", "\n", "topk_result", "=", "top_k", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "if", "not", "\"image_id\"", "in", "meta", ":", "\n", "                ", "meta", "[", "\"image_id\"", "]", "=", "[", "0", "]", "*", "image", ".", "shape", "[", "0", "]", "\n", "", "image_ids", "=", "meta", "[", "\"image_id\"", "]", "\n", "for", "i", ",", "image_id", "in", "enumerate", "(", "image_ids", ")", ":", "\n", "                ", "result_list", ".", "append", "(", "\n", "{", "\n", "\"image_id\"", ":", "image_id", ",", "\n", "\"image_label\"", ":", "int", "(", "image_labels", "[", "i", "]", ")", ",", "\n", "\"top_3\"", ":", "topk_result", "[", "i", "]", ",", "\n", "}", "\n", ")", "\n", "top1_count", "+=", "[", "topk_result", "[", "i", "]", "[", "0", "]", "==", "image_labels", "[", "i", "]", "]", "\n", "top2_count", "+=", "[", "image_labels", "[", "i", "]", "in", "topk_result", "[", "i", "]", "[", "0", ":", "2", "]", "]", "\n", "top3_count", "+=", "[", "image_labels", "[", "i", "]", "in", "topk_result", "[", "i", "]", "[", "0", ":", "3", "]", "]", "\n", "index", "+=", "1", "\n", "", "now_acc", "=", "np", ".", "sum", "(", "top1_count", ")", "/", "index", "\n", "pbar", ".", "set_description", "(", "\"Now Top1:{:>5.2f}%\"", ".", "format", "(", "now_acc", "*", "100", ")", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "top1_acc", "=", "float", "(", "np", ".", "sum", "(", "top1_count", ")", "/", "len", "(", "top1_count", ")", ")", "\n", "top2_acc", "=", "float", "(", "np", ".", "sum", "(", "top2_count", ")", "/", "len", "(", "top1_count", ")", ")", "\n", "top3_acc", "=", "float", "(", "np", ".", "sum", "(", "top3_count", ")", "/", "len", "(", "top1_count", ")", ")", "\n", "print", "(", "\n", "\"Top1:{:>5.2f}%  Top2:{:>5.2f}%  Top3:{:>5.2f}%\"", ".", "format", "(", "\n", "top1_acc", "*", "100", ",", "top2_acc", "*", "100", ",", "top3_acc", "*", "100", "\n", ")", "\n", ")", "\n", "pbar", ".", "close", "(", ")", "\n", "\n"]]}