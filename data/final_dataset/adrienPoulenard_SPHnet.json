{"home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_segmentation.load_dataset": [[46, 99], ["data_providers.seg_provider.SegmentationProvider", "data_providers.seg_provider.SegmentationProvider", "data_providers.seg_provider.SegmentationProvider"], "function", ["None"], ["def", "load_dataset", "(", "dataset", ")", ":", "\n", "\n", "    ", "train_files_list", "=", "dataset", "[", "'train_files_list'", "]", "\n", "val_files_list", "=", "dataset", "[", "'val_files_list'", "]", "\n", "test_files_list", "=", "dataset", "[", "'test_files_list'", "]", "\n", "\n", "train_data_folder", "=", "dataset", "[", "'train_data_folder'", "]", "\n", "val_data_folder", "=", "dataset", "[", "'val_data_folder'", "]", "\n", "test_data_folder", "=", "dataset", "[", "'test_data_folder'", "]", "\n", "\n", "train_preprocessing", "=", "dataset", "[", "'train_preprocessing'", "]", "\n", "val_preprocessing", "=", "dataset", "[", "'val_preprocessing'", "]", "\n", "test_preprocessing", "=", "dataset", "[", "'test_preprocessing'", "]", "\n", "\n", "num_parts", "=", "dataset", "[", "'num_parts'", "]", "\n", "num_classes", "=", "dataset", "[", "'num_classes'", "]", "\n", "parts", "=", "dataset", "[", "'parts'", "]", "\n", "\n", "# cat_to_labels = dataset['cat_to_labels']", "\n", "labels_to_cat", "=", "dataset", "[", "'labels_to_cat'", "]", "\n", "\n", "train_provider", "=", "SegmentationProvider", "(", "files_list", "=", "train_files_list", ",", "\n", "data_path", "=", "train_data_folder", ",", "\n", "n_parts", "=", "num_parts", ",", "\n", "n_classes", "=", "num_classes", ",", "\n", "n_points", "=", "num_points", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "preprocess", "=", "train_preprocessing", ",", "\n", "shuffle", "=", "SHUFFLE", ",", "\n", "parts", "=", "parts", ")", "\n", "\n", "val_provider", "=", "SegmentationProvider", "(", "files_list", "=", "val_files_list", ",", "\n", "data_path", "=", "val_data_folder", ",", "\n", "n_parts", "=", "num_parts", ",", "\n", "n_classes", "=", "num_classes", ",", "\n", "n_points", "=", "num_points", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "preprocess", "=", "val_preprocessing", ",", "\n", "shuffle", "=", "SHUFFLE", ",", "\n", "parts", "=", "parts", ")", "\n", "\n", "test_provider", "=", "SegmentationProvider", "(", "files_list", "=", "test_files_list", ",", "\n", "data_path", "=", "test_data_folder", ",", "\n", "n_parts", "=", "num_parts", ",", "\n", "n_classes", "=", "num_classes", ",", "\n", "n_points", "=", "num_points", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "preprocess", "=", "test_preprocessing", ",", "\n", "shuffle", "=", "False", ",", "\n", "parts", "=", "parts", ",", "\n", "labels_to_cat", "=", "labels_to_cat", ")", "\n", "\n", "return", "train_provider", ",", "val_provider", ",", "test_provider", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_segmentation.train": [[101, 142], ["segmenter.get_network_model.get_network_model", "segmenter.get_network_model.compile", "segmenter.get_network_model.summary", "keras.argmax", "keras.cast", "keras.cast", "segmenter.get_network_model.fit_generator", "segmenter.get_network_model.load_weights", "keras.ndim", "keras.ndim", "keras.squeeze", "keras.floatx", "keras.equal", "keras.floatx"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.classification_network.ClassNetwork.get_network_model"], ["", "def", "train", "(", "method", ",", "train_provider", ",", "val_provider", ")", ":", "\n", "    ", "num_parts", "=", "train_provider", ".", "n_parts", "\n", "num_categories", "=", "train_provider", ".", "n_classes", "\n", "# segmenter = SegNetwork(method=method)", "\n", "\n", "segmenter", "=", "method", "[", "'arch'", "]", "(", "method", "=", "method", ")", "\n", "segmenter", "=", "segmenter", ".", "get_network_model", "(", "part_num", "=", "num_parts", ",", "\n", "num_points", "=", "num_points", ",", "\n", "num_categories", "=", "num_categories", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n", "def", "acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# reshape in case it's in shape (num_samples, 1) instead of (num_samples,)", "\n", "        ", "if", "K", ".", "ndim", "(", "y_true", ")", "==", "K", ".", "ndim", "(", "y_pred", ")", ":", "\n", "            ", "y_true", "=", "K", ".", "squeeze", "(", "y_true", ",", "-", "1", ")", "\n", "# convert dense predictions to labels", "\n", "", "y_pred_labels", "=", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "y_pred_labels", "=", "K", ".", "cast", "(", "y_pred_labels", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "cast", "(", "K", ".", "equal", "(", "y_true", ",", "y_pred_labels", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "\n", "\n", "\n", "# loss_weights = train_provider.part_weights", "\n", "", "metric", "=", "acc", "\n", "segmenter", ".", "compile", "(", "loss", "=", "keras", ".", "losses", ".", "sparse_categorical_crossentropy", ",", "\n", "optimizer", "=", "'adam'", ",", "\n", "metrics", "=", "[", "metric", "]", ")", "\n", "\n", "segmenter", ".", "summary", "(", ")", "\n", "\n", "if", "WEIGHTS_PATH", "is", "None", ":", "\n", "        ", "hist", "=", "segmenter", ".", "fit_generator", "(", "generator", "=", "train_provider", ",", "\n", "validation_data", "=", "val_provider", ",", "\n", "epochs", "=", "num_epochs", ",", "\n", "callbacks", "=", "[", "]", ",", "\n", "verbose", "=", "2", ")", "\n", "", "else", ":", "\n", "        ", "segmenter", ".", "load_weights", "(", "WEIGHTS_PATH", ")", "\n", "hist", "=", "0", "\n", "\n", "", "return", "segmenter", ",", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_segmentation.IoU__": [[143, 169], ["numpy.ones", "numpy.zeros", "numpy.sum", "numpy.where", "numpy.sum", "numpy.multiply", "numpy.sum", "numpy.maximum", "numpy.sum", "numpy.where", "numpy.divide", "numpy.sum"], "function", ["None"], ["", "def", "IoU__", "(", "one_hot_pred", ",", "one_hot", ",", "num_parts", ")", ":", "\n", "    ", "ones", "=", "np", ".", "ones", "(", "shape", "=", "(", "num_parts", ",", ")", ")", "\n", "zeros", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_parts", ",", ")", ")", "\n", "true_sum", "=", "np", ".", "sum", "(", "one_hot", ",", "axis", "=", "0", ",", "keepdims", "=", "False", ")", "\n", "parts", "=", "np", ".", "where", "(", "true_sum", ">", "0", ",", "ones", ",", "zeros", ")", "\n", "num_parts", "=", "np", ".", "sum", "(", "parts", ")", "\n", "Inter", "=", "np", ".", "multiply", "(", "one_hot_pred", ",", "one_hot", ")", "\n", "Inter", "=", "np", ".", "sum", "(", "Inter", ",", "axis", "=", "0", ",", "keepdims", "=", "False", ")", "\n", "Union", "=", "np", ".", "maximum", "(", "one_hot_pred", ",", "one_hot", ")", "\n", "Union", "=", "np", ".", "sum", "(", "Union", ",", "axis", "=", "0", ",", "keepdims", "=", "False", ")", "\n", "\n", "Union", "=", "np", ".", "where", "(", "Union", "==", "0", ",", "ones", ",", "Union", ")", "\n", "\n", "IoU", "=", "np", ".", "divide", "(", "Inter", ",", "Union", ")", "\n", "\n", "\"\"\"\n    print('parts ', parts)\n    print('num_parts ', num_parts)\n    print('union ', Union)\n    print('inter ', Inter)\n    print('iou ', IoU)\n    \"\"\"", "\n", "\n", "IoU", "=", "np", ".", "sum", "(", "IoU", ")", "/", "num_parts", "\n", "\n", "return", "IoU", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_segmentation.save_part_labels": [[171, 191], ["os.path.join", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.close"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.close"], ["", "def", "save_part_labels", "(", "path", ",", "name", ",", "pred", ",", "true", ",", "data", ")", ":", "\n", "    ", "h5_filename", "=", "os", ".", "path", ".", "join", "(", "path", ",", "name", "+", "'.hdf5'", ")", "\n", "h5_fout", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'data'", ",", "data", "=", "data", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "4", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'pred'", ",", "data", "=", "pred", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "1", ",", "\n", "dtype", "=", "'uint8'", ")", "\n", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'true'", ",", "data", "=", "true", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "1", ",", "\n", "dtype", "=", "'uint8'", ")", "\n", "\n", "h5_fout", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_segmentation.test": [[193, 323], ["test_provider.get_data", "test_provider.get_batch_size", "seg_parts.keys", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "test_provider.get_num_parts", "test_provider.get_num_classes", "test_provider.get_num_points", "test_provider.get_preprocess", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "shape_ious.keys", "numpy.mean", "numpy.mean", "numpy.divide", "numpy.mean", "numpy.reshape", "numpy.reshape", "sklearn.metrics.confusion_matrix", "range", "keras.utils.to_categorical", "keras.utils.to_categorical", "cur_data.copy", "range", "cur_data.copy.copy", "keras.utils.to_categorical", "keras.utils.to_categorical", "segmenter.predict_on_batch", "numpy.argmax", "numpy.equal", "acc_.astype.astype", "numpy.mean", "numpy.mean", "range", "numpy.mean", "numpy.array", "print", "cat_to_labels.keys", "numpy.random.permutation", "len", "len", "numpy.dot", "shape_ious[].append", "all_shape_ious.append", "list", "numpy.arange", "utils.pointclouds_utils.rotate_point_cloud_batch", "utils.pointclouds_utils.pc_batch_preprocess", "numpy.mean", "shape_ious.values", "range", "len", "numpy.sum", "numpy.sum", "numpy.sum", "float", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.get_data", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.get_batch_size", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.get_num_parts", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.get_num_classes", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.get_num_points", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.get_preprocess", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.rotate_point_cloud_batch", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.pc_batch_preprocess"], ["", "def", "test", "(", "segmenter", ",", "test_provider", ",", "method", "=", "None", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "data", ",", "part_labels", ",", "class_labels", "=", "test_provider", ".", "get_data", "(", ")", "\n", "batch_size_", "=", "test_provider", ".", "get_batch_size", "(", ")", "\n", "# extend data by batch size", "\n", "\n", "cat_to_labels", "=", "test_provider", ".", "cat_to_labels", "\n", "# labels_to_cat = test_provider.labels_to_cat", "\n", "\n", "seg_parts", "=", "test_provider", ".", "seg_parts", "\n", "\n", "shape_ious", "=", "{", "cat", ":", "[", "]", "for", "cat", "in", "cat_to_labels", ".", "keys", "(", ")", "}", "\n", "seg_label_to_cat", "=", "{", "}", "# {0:Airplane, 1:Airplane, ...49:Table}", "\n", "for", "cat", "in", "seg_parts", ".", "keys", "(", ")", ":", "\n", "\n", "        ", "for", "label", "in", "seg_parts", "[", "cat", "]", ":", "\n", "            ", "seg_label_to_cat", "[", "label", "]", "=", "cat", "\n", "\n", "", "", "data", "=", "np", ".", "concatenate", "(", "[", "data", ",", "data", "[", ":", "batch_size_", ",", "...", "]", "]", ",", "axis", "=", "0", ")", "\n", "part_labels", "=", "np", ".", "concatenate", "(", "[", "part_labels", ",", "part_labels", "[", ":", "batch_size_", ",", "...", "]", "]", ",", "axis", "=", "0", ")", "\n", "class_labels", "=", "np", ".", "concatenate", "(", "[", "class_labels", ",", "class_labels", "[", ":", "batch_size_", ",", "...", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "\n", "num_samples", "=", "data", ".", "shape", "[", "0", "]", "\n", "num_batches", "=", "num_samples", "//", "batch_size_", "\n", "num_parts", "=", "test_provider", ".", "get_num_parts", "(", ")", "\n", "num_classes", "=", "test_provider", ".", "get_num_classes", "(", ")", "\n", "num_points", "=", "data", ".", "shape", "[", "1", "]", "\n", "num_points_target", "=", "test_provider", ".", "get_num_points", "(", ")", "\n", "preprocess", "=", "test_provider", ".", "get_preprocess", "(", ")", "\n", "\n", "\n", "pred_part_labels", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_samples", ",", "num_points_target", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "part_labels_", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_samples", ",", "num_points_target", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "data_", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_samples", ",", "num_points_target", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "acc", "=", "0.", "\n", "mIoU", "=", "0.", "\n", "per_class_iou", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ")", "\n", "total_seen_per_cat", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "total_seg_acc_per_cat", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "\n", "\n", "\n", "\n", "        ", "idx", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "num_points", ")", ")", "[", ":", "num_points_target", "]", "\n", "cur_data", "=", "data", "[", "i", "*", "batch_size_", ":", "(", "i", "+", "1", ")", "*", "batch_size_", ",", "...", "]", "\n", "cur_data", "=", "cur_data", "[", ":", ",", "idx", ",", "...", "]", "\n", "cur_part_labels", "=", "part_labels", "[", "i", "*", "batch_size_", ":", "(", "i", "+", "1", ")", "*", "batch_size_", ",", "...", "]", "\n", "cur_part_labels", "=", "cur_part_labels", "[", ":", ",", "idx", ",", "...", "]", "\n", "\n", "# kd tree idx", "\n", "m", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "preprocess", ")", ")", ":", "\n", "            ", "if", "preprocess", "[", "j", "]", "==", "'rotate'", ":", "\n", "                ", "x", ",", "m", "=", "rotate_point_cloud_batch", "(", "cur_data", ")", "\n", "cur_data", "=", "x", "\n", "", "else", ":", "\n", "                ", "cur_data", ",", "cur_part_labels", "=", "pc_batch_preprocess", "(", "cur_data", ",", "y", "=", "cur_part_labels", ",", "proc", "=", "preprocess", "[", "j", "]", ")", "\n", "\n", "\n", "", "", "cur_one_hot_part_labels", "=", "keras", ".", "utils", ".", "to_categorical", "(", "cur_part_labels", ",", "num_classes", "=", "num_parts", ")", "\n", "cur_part_labels", "=", "cur_part_labels", "[", "...", ",", "0", "]", "\n", "\n", "part_labels_", "[", "i", "*", "batch_size_", ":", "(", "i", "+", "1", ")", "*", "batch_size_", ",", "...", "]", "=", "cur_part_labels", "\n", "\n", "d_", "=", "cur_data", ".", "copy", "(", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "m", ")", ")", ":", "\n", "            ", "d_", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "cur_data", "[", "k", ",", "...", "]", ",", "m", "[", "k", "]", ".", "T", ")", "\n", "\n", "", "data_", "[", "i", "*", "batch_size_", ":", "(", "i", "+", "1", ")", "*", "batch_size_", ",", "...", "]", "=", "d_", ".", "copy", "(", ")", "\n", "\n", "cur_class_labels", "=", "class_labels", "[", "i", "*", "batch_size_", ":", "(", "i", "+", "1", ")", "*", "batch_size_", ",", "...", "]", "\n", "cur_one_hot_class_labels", "=", "keras", ".", "utils", ".", "to_categorical", "(", "cur_class_labels", ",", "num_classes", "=", "num_classes", ")", "\n", "cur_pred_part_labels", "=", "segmenter", ".", "predict_on_batch", "(", "x", "=", "[", "cur_data", ",", "cur_one_hot_class_labels", "]", ")", "\n", "cur_pred_part_labels", "=", "np", ".", "argmax", "(", "cur_pred_part_labels", ",", "axis", "=", "-", "1", ")", "\n", "\n", "pred_part_labels", "[", "i", "*", "batch_size_", ":", "(", "i", "+", "1", ")", "*", "batch_size_", ",", "...", "]", "=", "cur_pred_part_labels", "\n", "\n", "acc_", "=", "np", ".", "equal", "(", "cur_part_labels", ",", "cur_pred_part_labels", ")", "\n", "acc_", "=", "acc_", ".", "astype", "(", "np", ".", "float", ")", "\n", "per_instance_part_acc", "=", "np", ".", "mean", "(", "acc_", ",", "axis", "=", "1", ")", "\n", "acc", "+=", "np", ".", "mean", "(", "per_instance_part_acc", ")", "\n", "\n", "for", "j", "in", "range", "(", "batch_size_", ")", ":", "\n", "\n", "            ", "total_seen_per_cat", "[", "cur_class_labels", "[", "j", "]", "]", "+=", "1.", "\n", "total_seg_acc_per_cat", "[", "cur_class_labels", "[", "j", "]", "]", "+=", "per_instance_part_acc", "[", "j", "]", "\n", "\n", "\n", "segp", "=", "cur_pred_part_labels", "[", "j", ",", ":", "]", "\n", "segl", "=", "cur_part_labels", "[", "j", ",", ":", "]", "\n", "cat", "=", "seg_label_to_cat", "[", "segl", "[", "0", "]", "]", "\n", "part_ious", "=", "[", "0.0", "for", "_", "in", "range", "(", "len", "(", "seg_parts", "[", "cat", "]", ")", ")", "]", "\n", "for", "l", "in", "seg_parts", "[", "cat", "]", ":", "\n", "                ", "if", "(", "np", ".", "sum", "(", "segl", "==", "l", ")", "==", "0", ")", "and", "(", "np", ".", "sum", "(", "segp", "==", "l", ")", "==", "0", ")", ":", "# part is not present, no prediction as well", "\n", "                    ", "part_ious", "[", "l", "-", "seg_parts", "[", "cat", "]", "[", "0", "]", "]", "=", "1.0", "\n", "", "else", ":", "\n", "                    ", "part_ious", "[", "l", "-", "seg_parts", "[", "cat", "]", "[", "0", "]", "]", "=", "np", ".", "sum", "(", "(", "segl", "==", "l", ")", "&", "(", "segp", "==", "l", ")", ")", "/", "float", "(", "\n", "np", ".", "sum", "(", "(", "segl", "==", "l", ")", "|", "(", "segp", "==", "l", ")", ")", ")", "\n", "", "", "shape_ious", "[", "cat", "]", ".", "append", "(", "np", ".", "mean", "(", "part_ious", ")", ")", "\n", "\n", "", "", "all_shape_ious", "=", "[", "]", "\n", "k", "=", "0", "\n", "for", "cat", "in", "shape_ious", ".", "keys", "(", ")", ":", "\n", "        ", "for", "iou", "in", "shape_ious", "[", "cat", "]", ":", "\n", "            ", "all_shape_ious", ".", "append", "(", "iou", ")", "\n", "", "shape_ious", "[", "cat", "]", "=", "np", ".", "mean", "(", "shape_ious", "[", "cat", "]", ")", "\n", "per_class_iou", "[", "k", "]", "=", "shape_ious", "[", "cat", "]", "\n", "k", "+=", "1", "\n", "\n", "", "mIoU", "=", "np", ".", "mean", "(", "all_shape_ious", ")", "\n", "mean_class_iou", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "list", "(", "shape_ious", ".", "values", "(", ")", ")", ")", ")", "\n", "\n", "acc", "/=", "num_batches", "\n", "per_class_acc", "=", "np", ".", "divide", "(", "total_seg_acc_per_cat", ",", "total_seen_per_cat", ")", "\n", "mean_class_acc", "=", "np", ".", "mean", "(", "per_class_acc", ")", "\n", "\n", "\n", "if", "method", "is", "not", "None", "and", "dataset", "is", "not", "None", ":", "\n", "        ", "print", "(", "method", "[", "'name'", "]", "+", "' test_acc on '", "+", "dataset", "[", "'name'", "]", "+", "' dataset is '", ",", "acc", ")", "\n", "\n", "", "part_labels_", "=", "np", ".", "reshape", "(", "part_labels_", ",", "newshape", "=", "(", "-", "1", ",", ")", ")", "\n", "pred_part_labels", "=", "np", ".", "reshape", "(", "pred_part_labels", ",", "newshape", "=", "(", "-", "1", ",", ")", ")", "\n", "\n", "conf_mat", "=", "confusion_matrix", "(", "part_labels_", ",", "pred_part_labels", ")", "\n", "\n", "return", "acc", ",", "per_class_acc", ",", "mean_class_acc", ",", "mIoU", ",", "per_class_iou", ",", "mean_class_iou", ",", "conf_mat", ",", "data_", ",", "part_labels_", ",", "pred_part_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_segmentation.save_model_": [[324, 327], ["os.path.join", "utils.save_model.save_model"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_model"], ["", "def", "save_model_", "(", "dir", ",", "method", ",", "model", ",", "timestamp", ")", ":", "\n", "    ", "folder", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "method", "[", "'name'", "]", "+", "'_'", "+", "timestamp", ")", "\n", "save_model", "(", "model", ",", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_segmentation.save_results_": [[328, 334], ["utils.save_model.save_matrix", "utils.save_model.save_training_acc", "utils.save_model.save_matrix", "utils.save_model.save_matrix", "os.path.join", "os.path.join", "numpy.array", "os.path.join", "numpy.array"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_training_acc", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix"], ["", "def", "save_results_", "(", "dir", ",", "hist", ",", "conf_mat", ",", "test_acc", ",", "train_time", ",", "test_time", ")", ":", "\n", "    ", "folder", "=", "dir", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "'confusion_matrix.txt'", ")", ",", "conf_mat", ")", "\n", "save_training_acc", "(", "folder", ",", "hist", ")", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "'test_acc.txt'", ")", ",", "np", ".", "array", "(", "[", "test_acc", "]", ")", ")", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "'train_time.txt'", ")", ",", "np", ".", "array", "(", "[", "train_time", ",", "test_time", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_segmentation.save_train_results": [[335, 339], ["utils.save_model.save_training_acc", "utils.save_model.save_matrix", "os.path.join", "numpy.array"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_training_acc", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix"], ["", "def", "save_train_results", "(", "dir", ",", "hist", ",", "train_time", ")", ":", "\n", "    ", "folder", "=", "dir", "\n", "save_training_acc", "(", "folder", ",", "hist", ")", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "'train_time.txt'", ")", ",", "np", ".", "array", "(", "[", "train_time", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_segmentation.save_test_results": [[340, 354], ["utils.save_model.save_matrix", "utils.save_model.save_matrix", "utils.save_model.save_matrix", "utils.save_model.save_matrix", "utils.save_model.save_matrix", "utils.save_model.save_matrix", "utils.save_model.save_matrix", "utils.save_model.save_matrix", "os.path.join", "numpy.array", "os.path.join", "os.path.join", "numpy.array", "os.path.join", "numpy.array", "os.path.join", "os.path.join", "numpy.array", "os.path.join", "os.path.join", "numpy.array"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix"], ["", "def", "save_test_results", "(", "dir", ",", "acc", ",", "per_class_acc", ",", "mean_class_acc", ",", "\n", "mIoU", ",", "per_class_iou", ",", "mean_class_iou", ",", "\n", "conf_mat", ",", "test_time", ")", ":", "\n", "\n", "    ", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'test_acc.txt'", ")", ",", "np", ".", "array", "(", "[", "acc", "]", ")", ")", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'per_class_acc.txt'", ")", ",", "per_class_acc", ")", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'mean_class_acc.txt'", ")", ",", "np", ".", "array", "(", "[", "mean_class_acc", "]", ")", ")", "\n", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'mIoU.txt'", ")", ",", "np", ".", "array", "(", "[", "mIoU", "]", ")", ")", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'per_class_iou.txt'", ")", ",", "per_class_iou", ")", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'mean_class_iou.txt'", ")", ",", "np", ".", "array", "(", "[", "mean_class_iou", "]", ")", ")", "\n", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'confusion_matrix.txt'", ")", ",", "conf_mat", ")", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'test_time.txt'", ")", ",", "np", ".", "array", "(", "[", "test_time", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_classification.load_dataset": [[32, 77], ["data_providers.classifiaction_provider.ClassificationProvider", "data_providers.classifiaction_provider.ClassificationProvider", "data_providers.classifiaction_provider.ClassificationProvider"], "function", ["None"], ["def", "load_dataset", "(", "dataset", ")", ":", "\n", "\n", "    ", "train_files_list", "=", "dataset", "[", "'train_files_list'", "]", "\n", "val_files_list", "=", "dataset", "[", "'val_files_list'", "]", "\n", "test_files_list", "=", "dataset", "[", "'test_files_list'", "]", "\n", "\n", "train_data_folder", "=", "dataset", "[", "'train_data_folder'", "]", "\n", "val_data_folder", "=", "dataset", "[", "'val_data_folder'", "]", "\n", "test_data_folder", "=", "dataset", "[", "'test_data_folder'", "]", "\n", "\n", "train_preprocessing", "=", "dataset", "[", "'train_preprocessing'", "]", "\n", "val_preprocessing", "=", "dataset", "[", "'val_preprocessing'", "]", "\n", "test_preprocessing", "=", "dataset", "[", "'test_preprocessing'", "]", "\n", "\n", "num_classes", "=", "dataset", "[", "'num_classes'", "]", "\n", "classes", "=", "dataset", "[", "'classes'", "]", "\n", "\n", "train_provider", "=", "ClassificationProvider", "(", "files_list", "=", "train_files_list", ",", "\n", "data_path", "=", "train_data_folder", ",", "\n", "n_classes", "=", "num_classes", ",", "\n", "n_points", "=", "num_points", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "preprocess", "=", "train_preprocessing", ",", "\n", "shuffle", "=", "SHUFFLE", ",", "\n", "classes", "=", "classes", ")", "\n", "\n", "val_provider", "=", "ClassificationProvider", "(", "files_list", "=", "val_files_list", ",", "\n", "data_path", "=", "val_data_folder", ",", "\n", "n_classes", "=", "num_classes", ",", "\n", "n_points", "=", "num_points", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "preprocess", "=", "val_preprocessing", ",", "\n", "shuffle", "=", "SHUFFLE", ",", "\n", "classes", "=", "classes", ")", "\n", "\n", "test_provider", "=", "ClassificationProvider", "(", "files_list", "=", "test_files_list", ",", "\n", "data_path", "=", "test_data_folder", ",", "\n", "n_classes", "=", "num_classes", ",", "\n", "n_points", "=", "num_points", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "preprocess", "=", "test_preprocessing", ",", "\n", "shuffle", "=", "False", ",", "\n", "classes", "=", "classes", ")", "\n", "\n", "return", "train_provider", ",", "val_provider", ",", "test_provider", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_classification.train": [[79, 112], ["classifier.get_network_model.get_network_model", "classifier.get_network_model.compile", "classifier.get_network_model.summary", "classifier.get_network_model.fit_generator", "classifier.get_network_model.load_weights"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.classification_network.ClassNetwork.get_network_model"], ["", "def", "train", "(", "method", ",", "train_provider", ",", "val_provider", ")", ":", "\n", "    ", "num_classes", "=", "train_provider", ".", "n_classes", "\n", "\n", "classifier", "=", "method", "[", "'arch'", "]", "(", "method", "=", "method", ")", "\n", "# loss = classifier.get_loss()", "\n", "bn_momentum", "=", "0.5", "\n", "if", "'bn_decay'", "in", "method", "[", "'config'", "]", ":", "\n", "        ", "bn_momentum", "=", "method", "[", "'config'", "]", "[", "'bn_decay'", "]", "\n", "", "classifier", "=", "classifier", ".", "get_network_model", "(", "num_classes", "=", "num_classes", ",", "\n", "num_points", "=", "num_points", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "bn_decay", "=", "bn_momentum", ")", "\n", "\n", "loss", "=", "keras", ".", "losses", ".", "categorical_crossentropy", "\n", "\n", "classifier", ".", "compile", "(", "loss", "=", "loss", ",", "\n", "optimizer", "=", "'adam'", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "classifier", ".", "summary", "(", ")", "\n", "\n", "if", "WEIGHTS_PATH", "is", "None", ":", "\n", "        ", "hist", "=", "classifier", ".", "fit_generator", "(", "generator", "=", "train_provider", ",", "\n", "validation_data", "=", "val_provider", ",", "\n", "epochs", "=", "num_epochs", ",", "\n", "callbacks", "=", "[", "]", ",", "\n", "verbose", "=", "2", ")", "\n", "", "else", ":", "\n", "        ", "classifier", ".", "load_weights", "(", "WEIGHTS_PATH", ")", "\n", "hist", "=", "0", "\n", "\n", "\n", "", "return", "classifier", ",", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_classification.test": [[113, 127], ["test_provider.get_data", "numpy.reshape", "classifier.predict_generator", "numpy.argmax", "numpy.equal", "np.mean.astype", "numpy.mean", "sklearn.metrics.confusion_matrix", "print"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.get_data"], ["", "def", "test", "(", "classifier", ",", "test_provider", ",", "method", "=", "None", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "x", ",", "y", "=", "test_provider", ".", "get_data", "(", ")", "\n", "y", "=", "np", ".", "reshape", "(", "y", ",", "newshape", "=", "(", "-", "1", ",", ")", ")", "\n", "y_pred", "=", "classifier", ".", "predict_generator", "(", "test_provider", ")", "\n", "# y_pred = classifier.predict(x, batch_size=batch_size)", "\n", "y_pred", "=", "np", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "y", "=", "y", "[", ":", "y_pred", ".", "shape", "[", "0", "]", ",", "...", "]", "\n", "acc", "=", "np", ".", "equal", "(", "y", ",", "y_pred", ")", "\n", "acc", "=", "acc", ".", "astype", "(", "np", ".", "float32", ")", "\n", "acc", "=", "np", ".", "mean", "(", "acc", ")", "\n", "if", "method", "is", "not", "None", "and", "dataset", "is", "not", "None", ":", "\n", "        ", "print", "(", "method", "[", "'name'", "]", "+", "' test_acc on '", "+", "dataset", "[", "'name'", "]", "+", "' dataset is '", ",", "acc", ")", "\n", "", "conf_mat", "=", "confusion_matrix", "(", "y", ",", "y_pred", ")", "\n", "return", "conf_mat", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_classification.save_model_": [[128, 131], ["os.path.join", "utils.save_model.save_model"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_model"], ["", "def", "save_model_", "(", "dir", ",", "method", ",", "model", ",", "timestamp", ")", ":", "\n", "    ", "folder", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "method", "[", "'name'", "]", "+", "'_'", "+", "timestamp", ")", "\n", "save_model", "(", "model", ",", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.SPHnet.train_classification.save_results": [[132, 138], ["utils.save_model.save_matrix", "utils.save_model.save_matrix", "utils.save_model.save_matrix", "os.path.join", "os.path.join", "numpy.array", "os.path.join", "numpy.array"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix"], ["", "def", "save_results", "(", "dir", ",", "hist", ",", "conf_mat", ",", "test_acc", ",", "train_time", ",", "test_time", ")", ":", "\n", "    ", "folder", "=", "dir", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "'confusion_matrix.txt'", ")", ",", "conf_mat", ")", "\n", "# save_training_acc(folder, hist)", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "'test_acc.txt'", ")", ",", "np", ".", "array", "(", "[", "test_acc", "]", ")", ")", "\n", "save_matrix", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "'train_time.txt'", ")", ",", "np", ".", "array", "(", "[", "train_time", ",", "test_time", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.__init__": [[586, 628], ["vispy.scene.SceneCanvas", "vispy.scene.SceneCanvas", "vispy.scene.SceneCanvas", "vispy.scene.SceneCanvas", "pointclouds_utils.PclViewer.canvas.central_widget.add_view", "vispy.scene.visuals.XYZAxis", "vispy.scene.visuals.XYZAxis", "vispy.scene.visuals.XYZAxis", "vispy.scene.visuals.XYZAxis", "vispy.scene.visuals.Markers", "vispy.scene.visuals.Markers", "functools.partial", "pointclouds_utils.PclViewer.draw_fn", "pointclouds_utils.PclViewer.view.add", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "X", "=", "None", ",", "color", "=", "None", ")", ":", "\n", "\n", "        ", "if", "X", "is", "None", ":", "\n", "            ", "self", ".", "X", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "X", "=", "X", "\n", "", "if", "color", "is", "None", ":", "\n", "            ", "self", ".", "color", "=", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", ",", "1.", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "color", "=", "color", "\n", "# Now let us visualize array 'coords'", "\n", "", "self", ".", "canvas", "=", "vispy", ".", "scene", ".", "SceneCanvas", "(", "keys", "=", "'interactive'", ",", "bgcolor", "=", "'white'", ")", "\n", "self", ".", "view", "=", "self", ".", "canvas", ".", "central_widget", ".", "add_view", "(", ")", "\n", "\n", "# 3D axis", "\n", "self", ".", "axis", "=", "vispy", ".", "scene", ".", "visuals", ".", "XYZAxis", "(", "parent", "=", "self", ".", "view", ".", "scene", ")", "\n", "# Scatter plot and line", "\n", "\n", "\n", "# Now, make the markers and the line.", "\n", "# Use the parent argument so they are automatically added to the scene.", "\n", "\"\"\"\n        self.scatter = vispy.scene.visuals.Markers(pos=self.X,\n                                                   edge_color=None,\n                                                   face_color=self.color,\n                                                   size=5,\n                                                   parent=self.view.scene)\n        \"\"\"", "\n", "self", ".", "scatter", "=", "visuals", ".", "Markers", "(", ")", "\n", "\n", "self", ".", "draw_fn", "=", "partial", "(", "self", ".", "scatter", ".", "set_data", ",", "edge_color", "=", "None", ",", "face_color", "=", "self", ".", "color", ",", "size", "=", "7", ")", "\n", "\n", "self", ".", "draw_fn", "(", "self", ".", "X", ")", "\n", "\n", "self", ".", "view", ".", "add", "(", "self", ".", "scatter", ")", "\n", "\"\"\"\n        self.line = vispy.scene.visuals.Line(pos=self.X,\n                                             color=(0., 0., 0., 0.),\n                                             width=3,\n                                             parent=self.view.scene)\n        \"\"\"", "\n", "self", ".", "view", ".", "camera", "=", "'turntable'", "\n", "# self.canvas.show()", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.run": [[630, 633], ["pointclouds_utils.PclViewer.canvas.show", "vispy.app.run", "vispy.app.run", "vispy.app.run", "vispy.app.run"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.run", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.run", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.run", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "canvas", ".", "show", "(", ")", "\n", "vispy", ".", "app", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.close": [[635, 637], ["vispy.app.quit", "vispy.app.quit", "vispy.app.quit", "vispy.app.quit"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "vispy", ".", "app", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.set_pcl": [[638, 650], ["pointclouds_utils.PclViewer.draw_fn"], "methods", ["None"], ["", "def", "set_pcl", "(", "self", ",", "X", ",", "color", "=", "None", ")", ":", "\n", "        ", "if", "color", "is", "not", "None", ":", "\n", "            ", "self", ".", "color", "=", "color", "\n", "", "self", ".", "X", "=", "X", "\n", "\n", "\"\"\"\n        self.scatter.set_data(X,\n                         edge_color=None,\n                         face_color=self.color,\n                         size=5)\n        \"\"\"", "\n", "self", ".", "draw_fn", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.load_pts": [[10, 31], ["rows.index", "numpy.array", "open", "rows.index", "point.split", "rows.strip", "float"], "function", ["None"], ["def", "load_pts", "(", "path", ")", ":", "\n", "    ", "\"\"\"takes as input the path to a .pts and returns a list of\n\ttuples of floats containing the points in in the form:\n\t[(x_0, y_0, z_0),\n\t (x_1, y_1, z_1),\n\t ...\n\t (x_n, y_n, z_n)]\"\"\"", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "rows", "=", "[", "rows", ".", "strip", "(", ")", "for", "rows", "in", "f", "]", "\n", "\n", "", "\"\"\"Use the curly braces to find the start and end of the point data\"\"\"", "\n", "head", "=", "rows", ".", "index", "(", "'{'", ")", "+", "1", "\n", "tail", "=", "rows", ".", "index", "(", "'}'", ")", "\n", "\n", "\"\"\"Select the point data split into coordinates\"\"\"", "\n", "raw_points", "=", "rows", "[", "head", ":", "tail", "]", "\n", "coords_set", "=", "[", "point", ".", "split", "(", ")", "for", "point", "in", "raw_points", "]", "\n", "\n", "\"\"\"Convert entries from lists of strings to tuples of floats\"\"\"", "\n", "points", "=", "[", "[", "float", "(", "point", ")", "for", "point", "in", "coords", "]", "for", "coords", "in", "coords_set", "]", "\n", "return", "np", ".", "array", "(", "points", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.uniformpc_sampling": [[32, 39], ["numpy.arange", "numpy.random.shuffle", "numpy.take"], "function", ["None"], ["", "def", "uniformpc_sampling", "(", "x", ",", "n_samples", ")", ":", "\n", "    ", "nv", "=", "x", ".", "shape", "[", "0", "]", "\n", "assert", "(", "nv", ">=", "n_samples", ")", "\n", "idx", "=", "np", ".", "arange", "(", "nv", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "x", "=", "np", ".", "take", "(", "x", ",", "idx", ",", "axis", "=", "0", ")", "\n", "return", "x", "[", "0", ":", "n_samples", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.normalize_point_cloud": [[40, 46], ["numpy.mean", "numpy.subtract", "numpy.linalg.norm", "numpy.max", "numpy.divide"], "function", ["None"], ["", "def", "normalize_point_cloud", "(", "arr", ")", ":", "\n", "    ", "mean", "=", "np", ".", "mean", "(", "arr", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "c_arr", "=", "np", ".", "subtract", "(", "arr", ",", "mean", ")", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "c_arr", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "max_norm", "=", "np", ".", "max", "(", "norm", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "return", "np", ".", "divide", "(", "c_arr", ",", "max_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.generate_3d": [[47, 62], ["numpy.random.rand", "numpy.matrix", "numpy.matrix", "numpy.eye", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sqrt", "numpy.sin", "numpy.cos", "numpy.sqrt", "numpy.sin", "numpy.sqrt"], "function", ["None"], ["", "def", "generate_3d", "(", ")", ":", "\n", "    ", "\"\"\"Generate a 3D random rotation matrix.\n    Returns:\n        np.matrix: A 3D rotation matrix.\n    \"\"\"", "\n", "x1", ",", "x2", ",", "x3", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "\n", "R", "=", "np", ".", "matrix", "(", "[", "[", "np", ".", "cos", "(", "2", "*", "np", ".", "pi", "*", "x1", ")", ",", "np", ".", "sin", "(", "2", "*", "np", ".", "pi", "*", "x1", ")", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "2", "*", "np", ".", "pi", "*", "x1", ")", ",", "np", ".", "cos", "(", "2", "*", "np", ".", "pi", "*", "x1", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "v", "=", "np", ".", "matrix", "(", "[", "[", "np", ".", "cos", "(", "2", "*", "np", ".", "pi", "*", "x2", ")", "*", "np", ".", "sqrt", "(", "x3", ")", "]", ",", "\n", "[", "np", ".", "sin", "(", "2", "*", "np", ".", "pi", "*", "x2", ")", "*", "np", ".", "sqrt", "(", "x3", ")", "]", ",", "\n", "[", "np", ".", "sqrt", "(", "1", "-", "x3", ")", "]", "]", ")", "\n", "H", "=", "np", ".", "eye", "(", "3", ")", "-", "2", "*", "v", "*", "v", ".", "T", "\n", "M", "=", "-", "H", "*", "R", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.rotate_point_cloud": [[63, 65], ["numpy.einsum", "pointclouds_utils.generate_3d"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.generate_3d"], ["", "def", "rotate_point_cloud", "(", "arr", ")", ":", "\n", "    ", "return", "np", ".", "einsum", "(", "'ij,vj->vi'", ",", "generate_3d", "(", ")", ",", "arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.generate_rot_z": [[66, 72], ["numpy.random.rand", "numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "generate_rot_z", "(", ")", ":", "\n", "    ", "x1", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "2", "*", "np", ".", "pi", "*", "x1", ")", ",", "np", ".", "sin", "(", "2", "*", "np", ".", "pi", "*", "x1", ")", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "2", "*", "np", ".", "pi", "*", "x1", ")", ",", "np", ".", "cos", "(", "2", "*", "np", ".", "pi", "*", "x1", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.rotate_z": [[73, 80], ["numpy.zeros", "range", "pointclouds_utils.generate_rot_z", "numpy.dot", "shape_pc.reshape"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.generate_rot_z"], ["", "def", "rotate_z", "(", "batch_data", ")", ":", "\n", "    ", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rotation_matrix", "=", "generate_rot_z", "(", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.generate_rot_y": [[81, 90], ["numpy.random.rand", "numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "generate_rot_y", "(", ")", ":", "\n", "    ", "x1", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "c", "=", "np", ".", "cos", "(", "2", "*", "np", ".", "pi", "*", "x1", ")", "\n", "s", "=", "np", ".", "sin", "(", "2", "*", "np", ".", "pi", "*", "x1", ")", "\n", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "c", ",", "0", ",", "s", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "s", ",", "0", ",", "c", "]", "]", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.rotate_y": [[91, 98], ["numpy.zeros", "range", "pointclouds_utils.generate_rot_y", "numpy.dot", "shape_pc.reshape"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.generate_rot_y"], ["", "def", "rotate_y", "(", "batch_data", ")", ":", "\n", "    ", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rotation_matrix", "=", "generate_rot_y", "(", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.rotate_point_cloud_batch": [[100, 109], ["numpy.zeros", "range", "pointclouds_utils.generate_3d", "rotations.append", "numpy.dot", "shape_pc.reshape"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.generate_3d"], ["", "def", "rotate_point_cloud_batch", "(", "batch_data", ")", ":", "\n", "    ", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rotations", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rotation_matrix", "=", "generate_3d", "(", ")", "\n", "rotations", ".", "append", "(", "rotation_matrix", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", ",", "rotations", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.random_batch_scaling": [[111, 131], ["numpy.random.uniform", "numpy.random.uniform", "numpy.add", "numpy.multiply"], "function", ["None"], ["", "def", "random_batch_scaling", "(", "batch_data", ")", ":", "\n", "\n", "    ", "\"\"\"\n    translated_data = np.zeros(batch_data.shape, dtype=np.float32)\n    for k in range(batch_data.shape[0]):\n        xyz1 = np.random.uniform(low=2. / 3., high=3. / 2., size=[3])\n        xyz2 = np.random.uniform(low=-0.2, high=0.2, size=[3])\n\n        shape_pc = batch_data[k, ...]\n\n        translated_data[k, ...] = np.add(np.multiply(shape_pc, xyz1), xyz2)\n    \"\"\"", "\n", "\n", "# a = 2. / 3. + (3. / 2. - 2. / 3.) * np.random.rand(batch_data.shape[0], 1, 1)", "\n", "# a = 3. / 4. + (4. / 3. - 3. / 4.) * np.random.rand(batch_data.shape[0], 1, 1)", "\n", "\n", "a", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "2.", "/", "3.", ",", "high", "=", "3.", "/", "2.", ",", "size", "=", "[", "batch_data", ".", "shape", "[", "0", "]", ",", "1", ",", "3", "]", ")", "\n", "b", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "0.2", ",", "high", "=", "0.2", ",", "size", "=", "[", "batch_data", ".", "shape", "[", "0", "]", ",", "1", ",", "3", "]", ")", "\n", "\n", "return", "np", ".", "add", "(", "np", ".", "multiply", "(", "a", ",", "batch_data", ")", ",", "b", ")", "\n", "# return np.multiply(a, np.add(batch_data, b))", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.cov_mat": [[133, 145], ["numpy.mean", "numpy.subtract", "numpy.multiply", "numpy.sum", "numpy.sqrt", "numpy.einsum"], "function", ["None"], ["", "def", "cov_mat", "(", "X", ")", ":", "\n", "    ", "c", "=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "X", "=", "np", ".", "subtract", "(", "X", ",", "c", ")", "\n", "sd", "=", "np", ".", "multiply", "(", "X", ",", "X", ")", "\n", "sd", "=", "np", ".", "sum", "(", "sd", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "sd", "=", "np", ".", "sqrt", "(", "sd", ")", "\n", "X", "/=", "sd", "\n", "\n", "# cov = np.matmul(X.T, X)", "\n", "\n", "cov", "=", "np", ".", "einsum", "(", "'ij,ik->jk'", ",", "X", ",", "X", ")", "\n", "return", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.random_perturb": [[146, 151], ["numpy.random.rand", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "random_perturb", "(", "v", ")", ":", "\n", "    ", "r", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "\n", "r", "=", "0.1", "*", "(", "r", "/", "(", "np", ".", "linalg", ".", "norm", "(", "r", ")", "+", "0.0001", ")", ")", "\n", "v", "=", "v", "+", "r", "\n", "return", "v", "/", "(", "np", ".", "linalg", ".", "norm", "(", "v", ")", "+", "0.0001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.principal_direction": [[152, 156], ["pointclouds_utils.cov_mat", "numpy.linalg.eigh"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.cov_mat"], ["", "def", "principal_direction", "(", "X", ")", ":", "\n", "    ", "cov", "=", "cov_mat", "(", "X", ")", "\n", "w", ",", "v", "=", "np", ".", "linalg", ".", "eigh", "(", "cov", ")", "\n", "return", "v", "[", ":", ",", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.eigen_tree_index_": [[157, 170], ["pointclouds_utils.principal_direction", "numpy.einsum", "numpy.argsort", "numpy.split", "numpy.take", "pointclouds_utils.eigen_tree_index_", "numpy.take", "pointclouds_utils.eigen_tree_index_", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.principal_direction", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.eigen_tree_index_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.eigen_tree_index_"], ["", "def", "eigen_tree_index_", "(", "X", ",", "depth", ",", "redundancy", "=", "0", ")", ":", "\n", "    ", "nv", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "depth", "==", "0", ":", "\n", "        ", "return", "X", "\n", "", "v", "=", "principal_direction", "(", "X", ")", "\n", "Xv", "=", "np", ".", "einsum", "(", "'j,ij->i'", ",", "v", ",", "X", ")", "\n", "idx_v", "=", "np", ".", "argsort", "(", "Xv", ",", "axis", "=", "0", ")", "\n", "split_idx", "=", "np", ".", "split", "(", "idx_v", ",", "2", ")", "\n", "sp1", "=", "np", ".", "take", "(", "X", ",", "split_idx", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "sp1", "=", "eigen_tree_index_", "(", "sp1", ",", "depth", "-", "1", ")", "\n", "sp2", "=", "np", ".", "take", "(", "X", ",", "split_idx", "[", "1", "]", ",", "axis", "=", "0", ")", "\n", "sp2", "=", "eigen_tree_index_", "(", "sp2", ",", "depth", "-", "1", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "sp1", ",", "sp2", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.eigen_tree_index_2": [[171, 185], ["pointclouds_utils.principal_direction", "numpy.einsum", "numpy.argsort", "range", "numpy.concatenate", "numpy.take", "L.append", "pointclouds_utils.eigen_tree_index_2", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.principal_direction", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.eigen_tree_index_2"], ["", "def", "eigen_tree_index_2", "(", "X", ",", "depth", ")", ":", "\n", "    ", "nv", "=", "X", ".", "shape", "[", "0", "]", "\n", "if", "depth", "==", "0", ":", "\n", "        ", "return", "X", "\n", "", "v", "=", "principal_direction", "(", "X", ")", "\n", "Xv", "=", "np", ".", "einsum", "(", "'j,ij->i'", ",", "v", ",", "X", ")", "\n", "idx_v", "=", "np", ".", "argsort", "(", "Xv", ",", "axis", "=", "0", ")", "\n", "step", "=", "1.", "/", "6.", "\n", "L", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "idx_v_i", "=", "idx_v", "[", "int", "(", "step", "*", "i", "*", "nv", ")", ":", "int", "(", "step", "*", "i", "*", "nv", ")", "+", "int", "(", "nv", "/", "2.", ")", "]", "\n", "x_i", "=", "np", ".", "take", "(", "X", ",", "idx_v_i", ",", "axis", "=", "0", ")", "\n", "L", ".", "append", "(", "eigen_tree_index_2", "(", "x_i", ",", "depth", "-", "1", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "L", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.eigen_tree_index": [[186, 192], ["range", "pointclouds_utils.eigen_tree_index_"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.eigen_tree_index_"], ["", "def", "eigen_tree_index", "(", "batch_data", ",", "depth", ")", ":", "\n", "    ", "nb", "=", "batch_data", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "nb", ")", ":", "\n", "        ", "x", "=", "batch_data", "[", "i", ",", "...", "]", "\n", "batch_data", "[", "i", ",", "...", "]", "=", "eigen_tree_index_", "(", "x", ",", "depth", ")", "\n", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.split_tree": [[194, 228], ["int", "range", "int", "int", "min", "split_method", "numpy.take", "max"], "function", ["None"], ["", "def", "split_tree", "(", "pts", ",", "idx", ",", "nv", ",", "num_cells", ",", "num_splits", ",", "split_method", ",", "split_frac", "=", "None", ")", ":", "\n", "\n", "    ", "cell_size", "=", "int", "(", "nv", "/", "num_cells", ")", "\n", "\n", "if", "split_frac", "is", "None", ":", "\n", "        ", "split_size", "=", "int", "(", "cell_size", "/", "num_splits", ")", "\n", "", "else", ":", "\n", "        ", "split_size", "=", "int", "(", "split_frac", "*", "cell_size", ")", "\n", "split_size", "=", "min", "(", "max", "(", "split_size", ",", "1", ")", ",", "cell_size", ")", "\n", "\n", "\n", "", "pts_", "=", "pts", "[", "0", "]", "\n", "pts_tmp_", "=", "pts", "[", "1", "]", "\n", "idx_", "=", "idx", "[", "0", "]", "\n", "idx_tmp_", "=", "idx", "[", "1", "]", "\n", "\n", "n", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "nv", ",", "cell_size", ")", ":", "\n", "        ", "pts_i", ",", "idx_i", "=", "split_method", "(", "pts_", "[", "i", ":", "i", "+", "cell_size", "]", ",", "num_splits", ",", "split_size", ")", "\n", "idx_i", "=", "np", ".", "take", "(", "idx_", "[", "i", ":", "i", "+", "cell_size", "]", ",", "idx_i", ")", "\n", "m", "=", "idx_i", ".", "shape", "[", "0", "]", "\n", "pts_tmp_", "[", "n", ":", "n", "+", "m", ",", ":", "]", "=", "pts_i", "\n", "idx_tmp_", "[", "n", ":", "n", "+", "m", "]", "=", "idx_i", "\n", "n", "+=", "m", "\n", "\n", "", "pts", "[", "0", "]", "=", "pts_tmp_", "\n", "# pts[1] = pts_", "\n", "idx", "[", "0", "]", "=", "idx_tmp_", "\n", "# idx[1] = idx_", "\n", "\n", "new_nv", "=", "split_size", "*", "num_splits", "*", "num_cells", "\n", "new_num_cells", "=", "num_splits", "*", "num_cells", "\n", "\n", "return", "pts", ",", "idx", ",", "new_nv", ",", "new_num_cells", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.eigen_split": [[230, 251], ["pointclouds_utils.principal_direction", "numpy.einsum", "numpy.argsort", "numpy.zeros", "numpy.zeros", "range", "float", "float", "int", "numpy.take"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.principal_direction"], ["", "def", "eigen_split", "(", "x", ",", "num_splits", ",", "split_size", ")", ":", "\n", "\n", "    ", "nv", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "v", "=", "principal_direction", "(", "x", ")", "\n", "# v = np.array([1., 0., 0.])", "\n", "# Xv = np.matmul(x, v)", "\n", "\n", "Xv", "=", "np", ".", "einsum", "(", "'j,ij->i'", ",", "v", ",", "x", ")", "\n", "idx_v", "=", "np", ".", "argsort", "(", "Xv", ",", "axis", "=", "0", ")", "\n", "m", "=", "float", "(", "nv", "-", "split_size", ")", "/", "float", "(", "num_splits", "-", "1", ")", "\n", "# a_init = int(m*num_splits)", "\n", "idx", "=", "np", ".", "zeros", "(", "(", "num_splits", "*", "split_size", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pts", "=", "np", ".", "zeros", "(", "(", "num_splits", "*", "split_size", ",", "3", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_splits", ")", ":", "\n", "        ", "a", "=", "int", "(", "m", "*", "i", ")", "\n", "b", "=", "a", "+", "split_size", "\n", "idx", "[", "i", "*", "split_size", ":", "(", "i", "+", "1", ")", "*", "split_size", "]", "=", "idx_v", "[", "a", ":", "b", "]", "\n", "pts", "[", "i", "*", "split_size", ":", "(", "i", "+", "1", ")", "*", "split_size", "]", "=", "np", ".", "take", "(", "x", ",", "idx_v", "[", "a", ":", "b", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "pts", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.xyz_split": [[255, 257], ["None"], "function", ["None"], ["", "def", "xyz_split", "(", ")", ":", "\n", "    ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.total_nv_": [[258, 270], ["len", "range", "int", "min", "max"], "function", ["None"], ["", "def", "total_nv_", "(", "nv_init", ",", "num_splits", ",", "split_frac", ")", ":", "\n", "    ", "depth", "=", "len", "(", "num_splits", ")", "\n", "num_cells", "=", "1", "\n", "nv", "=", "nv_init", "\n", "cell_size", "=", "nv_init", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "        ", "num_cells", "*=", "num_splits", "[", "i", "]", "\n", "split_size", "=", "int", "(", "split_frac", "[", "i", "]", "*", "cell_size", ")", "\n", "split_size", "=", "min", "(", "max", "(", "split_size", ",", "1", ")", ",", "split_size", ")", "\n", "cell_size", "=", "split_size", "\n", "nv", "=", "split_size", "*", "num_cells", "\n", "", "return", "nv", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.build_tree": [[272, 307], ["len", "pointclouds_utils.total_nv_", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.arange", "numpy.zeros", "range", "range", "pointclouds_utils.split_tree", "nv.append", "num_cells.append", "split_frac.append", "pointclouds_utils.eigen_split"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.total_nv_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.split_tree", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.eigen_split"], ["", "def", "build_tree", "(", "X", ",", "num_splits", ",", "split_method", ",", "split_frac", "=", "None", ")", ":", "\n", "    ", "depth", "=", "len", "(", "num_splits", ")", "\n", "\n", "if", "split_frac", "is", "None", ":", "\n", "        ", "split_frac", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "split_frac", ".", "append", "(", "None", ")", "\n", "\n", "", "", "nv", "=", "[", "X", ".", "shape", "[", "0", "]", "]", "\n", "\n", "total_nv", "=", "total_nv_", "(", "nv", "[", "0", "]", ",", "num_splits", ",", "split_frac", "=", "split_frac", ")", "\n", "\n", "pts0", "=", "np", ".", "zeros", "(", "shape", "=", "(", "total_nv", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pts0", "[", ":", "nv", "[", "0", "]", ",", ":", "]", "=", "X", "\n", "pts1", "=", "np", ".", "zeros", "(", "shape", "=", "(", "total_nv", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pts", "=", "[", "pts0", ",", "pts1", "]", "\n", "\n", "idx0", "=", "np", ".", "zeros", "(", "(", "total_nv", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "idx0", "[", ":", "nv", "[", "0", "]", "]", "=", "np", ".", "arange", "(", "nv", "[", "0", "]", ")", "\n", "idx1", "=", "np", ".", "zeros", "(", "(", "total_nv", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "idx", "=", "[", "idx0", ",", "idx1", "]", "\n", "\n", "\n", "num_cells", "=", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "\n", "        ", "pts_", ",", "idx_", ",", "new_nv", ",", "num_cells_", "=", "split_tree", "(", "pts", ",", "idx", ",", "nv", "[", "-", "1", "]", ",", "num_cells", "[", "-", "1", "]", ",", "num_splits", "[", "i", "]", ",", "\n", "split_method", ",", "split_frac", "=", "split_frac", "[", "i", "]", ")", "\n", "pts", "=", "pts_", "\n", "idx", "=", "idx_", "\n", "nv", ".", "append", "(", "new_nv", ")", "\n", "num_cells", ".", "append", "(", "num_cells", "[", "-", "1", "]", "*", "num_splits", "[", "i", "]", ")", "\n", "\n", "\n", "", "return", "pts", "[", "0", "]", ",", "idx", "[", "0", "]", ",", "nv", ",", "num_cells", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.tree_1": [[314, 318], ["pointclouds_utils.build_tree"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.build_tree"], ["def", "tree_1", "(", "x", ")", ":", "\n", "    ", "pts", ",", "idx", ",", "nv", ",", "num_cells", "=", "build_tree", "(", "x", ",", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "eigen_split", ",", "split_frac", "=", "[", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "\n", "return", "pts", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.is_power2": [[320, 323], ["None"], "function", ["None"], ["", "def", "is_power2", "(", "num", ")", ":", "\n", "    ", "'states if a number is a power of two'", "\n", "return", "num", "!=", "0", "and", "(", "(", "num", "&", "(", "num", "-", "1", ")", ")", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.binary_tree_pooling": [[324, 330], ["skimage.measure.block_reduce", "int", "pointclouds_utils.is_power2", "numpy.rint", "numpy.log", "numpy.log", "float", "float"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.is_power2"], ["", "def", "binary_tree_pooling", "(", "batch_data", ",", "k", "=", "2", ",", "num_points", "=", "None", ")", ":", "\n", "    ", "nv", "=", "batch_data", ".", "shape", "[", "1", "]", "\n", "if", "num_points", "is", "not", "None", ":", "\n", "        ", "assert", "(", "is_power2", "(", "num_points", ")", "and", "num_points", "<=", "nv", ")", "\n", "k", "=", "int", "(", "np", ".", "rint", "(", "np", ".", "log", "(", "float", "(", "nv", ")", "/", "float", "(", "num_points", ")", ")", "/", "np", ".", "log", "(", "2.", ")", ")", ")", "\n", "", "return", "skimage", ".", "measure", ".", "block_reduce", "(", "batch_data", ",", "block_size", "=", "(", "1", ",", "2", "**", "k", ",", "1", ")", ",", "func", "=", "np", ".", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.kdtree_index_pc": [[331, 338], ["range", "scipy.spatial.cKDTree", "numpy.take"], "function", ["None"], ["", "def", "kdtree_index_pc", "(", "batch_data", ")", ":", "\n", "    ", "nb", "=", "batch_data", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "nb", ")", ":", "\n", "        ", "x", "=", "batch_data", "[", "i", ",", "...", "]", "\n", "T", "=", "cKDTree", "(", "x", ")", "\n", "batch_data", "[", "i", ",", "...", "]", "=", "np", ".", "take", "(", "x", ",", "T", ".", "indices", ",", "axis", "=", "0", ")", "\n", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.kd_tree_index_pairs": [[340, 354], ["range", "scipy.spatial.cKDTree", "numpy.take", "scipy.spatial.cKDTree", "numpy.take", "numpy.argsort", "numpy.argsort"], "function", ["None"], ["", "def", "kd_tree_index_pairs", "(", "x0", ",", "x1", ",", "y01", ",", "y10", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "x0", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "x", "=", "x0", "[", "i", ",", "...", "]", "\n", "T0", "=", "cKDTree", "(", "x", ")", "\n", "x0", "[", "i", ",", "...", "]", "=", "np", ".", "take", "(", "x0", ",", "T0", ".", "indices", ",", "axis", "=", "0", ")", "\n", "\n", "x", "=", "x1", "[", "i", ",", "...", "]", "\n", "T1", "=", "cKDTree", "(", "x", ")", "\n", "x1", "[", "i", ",", "...", "]", "=", "np", ".", "take", "(", "x1", ",", "T1", ".", "indices", ",", "axis", "=", "0", ")", "\n", "\n", "y01", "=", "np", ".", "argsort", "(", "T1", ".", "indices", ")", "[", "y01", "[", "T0", ".", "indices", "]", "]", "\n", "y10", "=", "np", ".", "argsort", "(", "T0", ".", "indices", ")", "[", "y10", "[", "T1", ".", "indices", "]", "]", "\n", "\n", "return", "x0", ",", "x1", ",", "y01", ",", "y10", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.kdtree_index": [[355, 364], ["range", "scipy.spatial.cKDTree", "numpy.take", "numpy.take"], "function", ["None"], ["", "", "def", "kdtree_index", "(", "X", ",", "Y", ")", ":", "\n", "    ", "nb", "=", "X", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "nb", ")", ":", "\n", "        ", "x", "=", "X", "[", "i", ",", "...", "]", "\n", "T", "=", "cKDTree", "(", "x", ")", "\n", "X", "[", "i", ",", "...", "]", "=", "np", ".", "take", "(", "x", ",", "T", ".", "indices", ",", "axis", "=", "0", ")", "\n", "y", "=", "Y", "[", "i", ",", "...", "]", "\n", "Y", "[", "i", ",", "...", "]", "=", "np", ".", "take", "(", "y", ",", "T", ".", "indices", ",", "axis", "=", "0", ")", "\n", "", "return", "X", ",", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.jitter_point_cloud": [[365, 375], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_point_cloud", "(", "batch_data", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "\n", "# sigma *= 2", "\n", "# clip *= 2", "\n", "\n", "    ", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "assert", "(", "clip", ">", "0", ")", "\n", "jittered_data", "=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "B", ",", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "jittered_data", "+=", "batch_data", "\n", "return", "jittered_data", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.normalize_point_cloud_batch": [[376, 385], ["numpy.mean", "numpy.linalg.norm", "numpy.max", "numpy.divide"], "function", ["None"], ["", "def", "normalize_point_cloud_batch", "(", "batch_data", ")", ":", "\n", "    ", "mean", "=", "np", ".", "mean", "(", "batch_data", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "batch_data", "=", "batch_data", "-", "mean", "\n", "# norm2 = (batch_data ** 2).sum(axis=2)", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "batch_data", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "# sd = np.sqrt(np.mean(norm2))", "\n", "sd", "=", "np", ".", "max", "(", "norm", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "return", "np", ".", "divide", "(", "batch_data", ",", "sd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.density_noise": [[386, 393], ["numpy.random.rand", "numpy.mean", "numpy.divide"], "function", ["None"], ["", "def", "density_noise", "(", "x", ",", "f", ",", "eps", "=", "0.1", ")", ":", "\n", "    ", "num_points", "=", "f", ".", "shape", "[", "1", "]", "\n", "r", "=", "np", ".", "random", ".", "rand", "(", "f", ".", "shape", "[", "0", "]", ",", "num_points", ",", "1", ")", "\n", "f", "=", "(", "1.", "-", "eps", ")", "*", "f", "+", "eps", "*", "r", "\n", "mean", "=", "np", ".", "mean", "(", "f", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "f", "=", "np", ".", "divide", "(", "f", ",", "mean", ")", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.pc_batch_preprocess": [[396, 431], ["pointclouds_utils.normalize_point_cloud_batch", "pointclouds_utils.random_batch_scaling", "pointclouds_utils.rotate_point_cloud_batch", "pointclouds_utils.rotate_z", "pointclouds_utils.rotate_y", "pointclouds_utils.jitter_point_cloud", "pointclouds_utils.density_noise", "pointclouds_utils.kdtree_index_pc", "pointclouds_utils.kdtree_index", "pointclouds_utils.kdtree_index_pc"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.normalize_point_cloud_batch", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.random_batch_scaling", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.rotate_point_cloud_batch", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.rotate_z", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.rotate_y", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.jitter_point_cloud", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.density_noise", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.kdtree_index_pc", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.kdtree_index", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.kdtree_index_pc"], ["", "def", "pc_batch_preprocess", "(", "x", ",", "f", "=", "None", ",", "y", "=", "None", ",", "proc", "=", "None", ")", ":", "\n", "    ", "if", "proc", "==", "'normalize'", ":", "\n", "        ", "x", "=", "normalize_point_cloud_batch", "(", "x", ")", "\n", "", "if", "proc", "==", "'scale'", ":", "\n", "        ", "x", "=", "random_batch_scaling", "(", "x", ")", "\n", "", "if", "proc", "==", "'rotate'", ":", "\n", "        ", "x", ",", "m", "=", "rotate_point_cloud_batch", "(", "x", ")", "\n", "", "if", "proc", "==", "'rotate_z'", ":", "\n", "        ", "x", "=", "rotate_z", "(", "x", ")", "\n", "", "if", "proc", "==", "'rotate_y'", ":", "\n", "        ", "x", "=", "rotate_y", "(", "x", ")", "\n", "", "if", "proc", "==", "'jitter'", ":", "\n", "        ", "x", "=", "jitter_point_cloud", "(", "x", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", "\n", "", "if", "proc", "==", "'noise'", ":", "\n", "        ", "if", "f", "is", "not", "None", ":", "\n", "            ", "f", "=", "density_noise", "(", "x", ",", "f", ",", "eps", "=", "0.2", ")", "\n", "", "", "if", "proc", "==", "'kd_tree_idx'", ":", "\n", "        ", "if", "y", "is", "not", "None", ":", "\n", "            ", "if", "y", ".", "ndim", ">=", "2", ":", "\n", "                ", "x", ",", "y", "=", "kdtree_index", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "kdtree_index_pc", "(", "x", ")", "\n", "# x = cover_tree_index(x, 4)", "\n", "", "", "else", ":", "\n", "            ", "x", "=", "kdtree_index_pc", "(", "x", ")", "\n", "", "", "if", "y", "is", "None", ":", "\n", "        ", "if", "f", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "[", "x", ",", "f", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "f", "is", "None", ":", "\n", "            ", "return", "x", ",", "y", "\n", "", "else", ":", "\n", "            ", "return", "[", "x", ",", "f", "]", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.pc_pairs_batch_preprocess": [[433, 463], ["pointclouds_utils.normalize_point_cloud_batch", "pointclouds_utils.normalize_point_cloud_batch", "pointclouds_utils.random_batch_scaling", "pointclouds_utils.random_batch_scaling", "pointclouds_utils.rotate_point_cloud_batch", "pointclouds_utils.rotate_point_cloud_batch", "pointclouds_utils.jitter_point_cloud", "pointclouds_utils.jitter_point_cloud", "pointclouds_utils.kd_tree_index_pairs"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.normalize_point_cloud_batch", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.normalize_point_cloud_batch", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.random_batch_scaling", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.random_batch_scaling", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.rotate_point_cloud_batch", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.rotate_point_cloud_batch", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.jitter_point_cloud", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.jitter_point_cloud", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.kd_tree_index_pairs"], ["", "", "", "def", "pc_pairs_batch_preprocess", "(", "X0", ",", "X1", ",", "y01", ",", "y10", ",", "proc", ")", ":", "\n", "    ", "for", "p", "in", "proc", ":", "\n", "        ", "if", "p", "==", "'normalize'", ":", "\n", "            ", "X0", "=", "normalize_point_cloud_batch", "(", "X0", ")", "\n", "X1", "=", "normalize_point_cloud_batch", "(", "X1", ")", "\n", "", "if", "p", "==", "'scale'", ":", "\n", "            ", "X0", "=", "random_batch_scaling", "(", "X0", ")", "\n", "X1", "=", "random_batch_scaling", "(", "X1", ")", "\n", "", "if", "p", "==", "'rotate'", ":", "\n", "            ", "X0", "=", "rotate_point_cloud_batch", "(", "X0", ")", "\n", "X1", "=", "rotate_point_cloud_batch", "(", "X1", ")", "\n", "", "if", "p", "==", "'jitter'", ":", "\n", "\n", "\n", "            ", "sigma", "=", "0.01", "\n", "clip", "=", "0.05", "\n", "\n", "\n", "\"\"\"\n            sigma = 0.02\n            clip = 0.1\n            \"\"\"", "\n", "\n", "X0", "=", "jitter_point_cloud", "(", "X0", ",", "sigma", "=", "sigma", ",", "clip", "=", "clip", ")", "\n", "X1", "=", "jitter_point_cloud", "(", "X1", ",", "sigma", "=", "sigma", ",", "clip", "=", "clip", ")", "\n", "", "if", "p", "==", "'kd_tree_idx'", ":", "\n", "            ", "X0", ",", "X1", ",", "y01", ",", "y10", "=", "kd_tree_index_pairs", "(", "X0", ",", "X1", ",", "y01", ",", "y10", ")", "\n", "# x = np.stack([X0, X1], axis=-1)", "\n", "# y = np.stack([y01, y10], axis=-1)", "\n", "", "", "return", "X0", ",", "X1", ",", "y01", ",", "y10", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.sample_faces": [[481, 534], ["numpy.cross", "numpy.sqrt", "numpy.ceil().astype", "numpy.sum", "numpy.zeros", "enumerate", "numpy.random.rand", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.random.choice", "numpy.ceil", "numpy.where", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["def", "sample_faces", "(", "vertices", ",", "faces", ",", "n_samples", "=", "10", "**", "4", ")", ":", "\n", "  ", "\"\"\"\n  Samples point cloud on the surface of the model defined as vectices and\n  faces. This function uses vectorized operations so fast at the cost of some\n  memory.\n\n  Parameters:\n    vertices  - n x 3 matrix\n    faces     - n x 3 matrix\n    n_samples - positive integer\n\n  Return:\n    vertices - point cloud\n\n  Reference :\n    [1] Barycentric coordinate system\n\n    \\begin{align}\n      P = (1 - \\sqrt{r_1})A + \\sqrt{r_1} (1 - r_2) B + \\sqrt{r_1} r_2 C\n    \\end{align}\n  \"\"\"", "\n", "vec_cross", "=", "np", ".", "cross", "(", "vertices", "[", "faces", "[", ":", ",", "0", "]", ",", ":", "]", "-", "vertices", "[", "faces", "[", ":", ",", "2", "]", ",", ":", "]", ",", "\n", "vertices", "[", "faces", "[", ":", ",", "1", "]", ",", ":", "]", "-", "vertices", "[", "faces", "[", ":", ",", "2", "]", ",", ":", "]", ")", "\n", "face_areas", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "vec_cross", "**", "2", ",", "1", ")", ")", "\n", "face_areas", "=", "face_areas", "/", "np", ".", "sum", "(", "face_areas", ")", "\n", "\n", "# Sample exactly n_samples. First, oversample points and remove redundant", "\n", "# Contributed by Yangyan (yangyan.lee@gmail.com)", "\n", "n_samples_per_face", "=", "np", ".", "ceil", "(", "n_samples", "*", "face_areas", ")", ".", "astype", "(", "int", ")", "\n", "# floor_num = np.sum(sample_num_per_face) - n_samples", "\n", "floor_num", "=", "np", ".", "sum", "(", "n_samples_per_face", ")", "-", "n_samples", "\n", "if", "floor_num", ">", "0", ":", "\n", "    ", "indices", "=", "np", ".", "where", "(", "n_samples_per_face", ">", "0", ")", "[", "0", "]", "\n", "floor_indices", "=", "np", ".", "random", ".", "choice", "(", "indices", ",", "floor_num", ",", "replace", "=", "True", ")", "\n", "n_samples_per_face", "[", "floor_indices", "]", "-=", "1", "\n", "\n", "", "n_samples", "=", "np", ".", "sum", "(", "n_samples_per_face", ")", "\n", "\n", "# Create a vector that contains the face indices", "\n", "sample_face_idx", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", ")", ",", "dtype", "=", "int", ")", "\n", "acc", "=", "0", "\n", "for", "face_idx", ",", "_n_sample", "in", "enumerate", "(", "n_samples_per_face", ")", ":", "\n", "    ", "sample_face_idx", "[", "acc", ":", "acc", "+", "_n_sample", "]", "=", "face_idx", "\n", "acc", "+=", "_n_sample", "\n", "\n", "", "r", "=", "np", ".", "random", ".", "rand", "(", "n_samples", ",", "2", ")", "\n", "A", "=", "vertices", "[", "faces", "[", "sample_face_idx", ",", "0", "]", ",", ":", "]", "\n", "B", "=", "vertices", "[", "faces", "[", "sample_face_idx", ",", "1", "]", ",", ":", "]", "\n", "C", "=", "vertices", "[", "faces", "[", "sample_face_idx", ",", "2", "]", ",", ":", "]", "\n", "P", "=", "(", "1", "-", "np", ".", "sqrt", "(", "r", "[", ":", ",", "0", ":", "1", "]", ")", ")", "*", "A", "+", "np", ".", "sqrt", "(", "r", "[", ":", ",", "0", ":", "1", "]", ")", "*", "(", "1", "-", "r", "[", ":", ",", "1", ":", "]", ")", "*", "B", "+", "np", ".", "sqrt", "(", "r", "[", ":", ",", "0", ":", "1", "]", ")", "*", "r", "[", ":", ",", "1", ":", "]", "*", "C", "\n", "\n", "return", "P", ",", "sample_face_idx", ",", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.normalize_batch": [[536, 546], ["numpy.mean", "numpy.multiply", "numpy.sum", "numpy.sqrt", "numpy.max", "numpy.mean"], "function", ["None"], ["", "def", "normalize_batch", "(", "X", ")", ":", "\n", "    ", "c", "=", "np", ".", "mean", "(", "X", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "X", "=", "X", "-", "c", "\n", "n", "=", "np", ".", "multiply", "(", "X", ",", "X", ")", "\n", "n", "=", "np", ".", "sum", "(", "n", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "n", "=", "np", ".", "sqrt", "(", "n", ")", "\n", "n", "=", "np", ".", "max", "(", "n", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "n", "=", "np", ".", "mean", "(", "n", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "X", "=", "X", "/", "n", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.fps": [[547, 564], ["numpy.zeros", "numpy.zeros", "scipy.spatial.distance_matrix", "range", "numpy.random.randint", "scipy.spatial.distance_matrix", "numpy.minimum", "numpy.argmax"], "function", ["None"], ["", "def", "fps", "(", "x", ",", "num_points", ",", "idx", "=", "None", ")", ":", "\n", "    ", "nv", "=", "x", ".", "shape", "[", "0", "]", "\n", "# d = distance_matrix(x, x)", "\n", "if", "idx", "is", "None", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "nv", "-", "1", ")", "\n", "", "y", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_points", ",", "3", ")", ")", "\n", "indices", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_points", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "p", "=", "x", "[", "np", ".", "newaxis", ",", "idx", ",", "...", "]", "\n", "dist", "=", "distance_matrix", "(", "p", ",", "x", ")", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "y", "[", "i", ",", "...", "]", "=", "p", "\n", "indices", "[", "i", "]", "=", "idx", "\n", "d", "=", "distance_matrix", "(", "p", ",", "x", ")", "\n", "dist", "=", "np", ".", "minimum", "(", "d", ",", "dist", ")", "\n", "idx", "=", "np", ".", "argmax", "(", "dist", ")", "\n", "p", "=", "x", "[", "np", ".", "newaxis", ",", "idx", ",", "...", "]", "\n", "", "return", "y", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.setup_pcl_viewer": [[565, 584], ["vispy.scene.SceneCanvas", "vispy.scene.SceneCanvas", "vispy.scene.SceneCanvas.central_widget.add_view", "vispy.scene.visuals.Markers", "functools.partial", "functools.partial.", "canvas.central_widget.add_view.add", "vispy.scene.visuals.XYZAxis"], "function", ["None"], ["", "def", "setup_pcl_viewer", "(", "X", ",", "color", "=", "(", "1", ",", "1", ",", "1", ",", ".5", ")", ",", "run", "=", "False", ")", ":", "\n", "# setup a point cloud viewer using vispy and return a drawing function", "\n", "\n", "\n", "# make a canvas and add simple view", "\n", "    ", "canvas", "=", "vispy", ".", "scene", ".", "SceneCanvas", "(", "keys", "=", "'interactive'", ",", "show", "=", "True", ")", "\n", "view", "=", "canvas", ".", "central_widget", ".", "add_view", "(", ")", "\n", "# create scatter object and fill in the data", "\n", "# init_pc = np.random.normal(size=(100, 3), scale=0.2)", "\n", "init_pc", "=", "X", "\n", "scatter", "=", "visuals", ".", "Markers", "(", ")", "\n", "draw_fn", "=", "partial", "(", "scatter", ".", "set_data", ",", "edge_color", "=", "None", ",", "face_color", "=", "color", ",", "size", "=", "5", ")", "\n", "draw_fn", "(", "init_pc", ")", "\n", "view", ".", "add", "(", "scatter", ")", "\n", "# set camera", "\n", "view", ".", "camera", "=", "'turntable'", "# ['turntable','arcball']", "\n", "# add a colored 3D axis for orientation", "\n", "axis", "=", "visuals", ".", "XYZAxis", "(", "parent", "=", "view", ".", "scene", ")", "\n", "return", "draw_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.save_h5_data_label_normal": [[67, 83], ["h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.close"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.close"], ["def", "save_h5_data_label_normal", "(", "h5_filename", ",", "data", ",", "label", ",", "normal", ",", "\n", "data_dtype", "=", "'float32'", ",", "label_dtype", "=", "'uint8'", ",", "noral_dtype", "=", "'float32'", ")", ":", "\n", "    ", "h5_fout", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'data'", ",", "data", "=", "data", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "4", ",", "\n", "dtype", "=", "data_dtype", ")", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'normal'", ",", "data", "=", "normal", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "4", ",", "\n", "dtype", "=", "normal_dtype", ")", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'label'", ",", "data", "=", "label", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "1", ",", "\n", "dtype", "=", "label_dtype", ")", "\n", "h5_fout", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.save_h5": [[86, 97], ["h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.close"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.close"], ["", "def", "save_h5", "(", "h5_filename", ",", "data", ",", "label", ",", "data_dtype", "=", "'uint8'", ",", "label_dtype", "=", "'uint8'", ")", ":", "\n", "    ", "h5_fout", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'data'", ",", "data", "=", "data", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "4", ",", "\n", "dtype", "=", "data_dtype", ")", "\n", "h5_fout", ".", "create_dataset", "(", "\n", "'label'", ",", "data", "=", "label", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "1", ",", "\n", "dtype", "=", "label_dtype", ")", "\n", "h5_fout", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.save_h5_datset": [[98, 112], ["h5py.File", "range", "h5py.File.close", "len", "h5py.File.create_dataset"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.close"], ["", "def", "save_h5_datset", "(", "h5_filename", ",", "name", ",", "data", ",", "dtype", ")", ":", "\n", "    ", "h5_fout", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "name", ")", ")", ":", "\n", "        ", "if", "dtype", "[", "i", "]", "==", "'float32'", ":", "\n", "            ", "compression_opts", "=", "4", "\n", "", "elif", "dtype", "[", "i", "]", "==", "'uint8'", ":", "\n", "            ", "compression_opts", "=", "1", "\n", "", "else", ":", "\n", "            ", "compression_opts", "=", "0", "\n", "", "h5_fout", ".", "create_dataset", "(", "\n", "name", "[", "i", "]", ",", "data", "=", "data", "[", "i", "]", ",", "\n", "compression", "=", "'gzip'", ",", "compression_opts", "=", "compression_opts", ",", "\n", "dtype", "=", "dtype", "[", "i", "]", ")", "\n", "", "h5_fout", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.load_h5_data_label_normal": [[114, 120], ["h5py.File"], "function", ["None"], ["", "def", "load_h5_data_label_normal", "(", "h5_filename", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", "\n", "normal", "=", "f", "[", "'normal'", "]", "[", ":", "]", "\n", "return", "(", "data", ",", "label", ",", "normal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.load_h5_data_label_seg": [[122, 128], ["h5py.File"], "function", ["None"], ["", "def", "load_h5_data_label_seg", "(", "h5_filename", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", "\n", "seg", "=", "f", "[", "'pid'", "]", "[", ":", "]", "\n", "return", "(", "data", ",", "label", ",", "seg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.load_h5": [[130, 136], ["h5py.File", "print"], "function", ["None"], ["", "def", "load_h5", "(", "h5_filename", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "print", "(", "h5_filename", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", "\n", "return", "(", "data", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.load_h5_files": [[137, 148], ["range", "numpy.concatenate", "numpy.concatenate", "line.rstrip", "len", "data_prep_utils.load_h5", "np.concatenate.append", "np.concatenate.append", "open", "os.path.join"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.load_h5"], ["", "def", "load_h5_files", "(", "data_path", ",", "files_list_path", ")", ":", "\n", "    ", "files_list", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "files_list_path", ")", "]", "\n", "data", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "files_list", ")", ")", ":", "\n", "        ", "data_", ",", "labels_", "=", "load_h5", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "files_list", "[", "i", "]", ")", ")", "\n", "data", ".", "append", "(", "data_", ")", "\n", "labels", ".", "append", "(", "labels_", ")", "\n", "", "data", "=", "np", ".", "concatenate", "(", "data", ",", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ",", "axis", "=", "0", ")", "\n", "return", "data", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.load_ply_data": [[155, 160], ["PlyData.read", "numpy.array"], "function", ["None"], ["", "def", "load_ply_data", "(", "filename", ",", "point_num", ")", ":", "\n", "    ", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "pc", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", ":", "point_num", "]", "\n", "pc_array", "=", "np", ".", "array", "(", "[", "[", "x", ",", "y", ",", "z", "]", "for", "x", ",", "y", ",", "z", "in", "pc", "]", ")", "\n", "return", "pc_array", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.load_ply_normal": [[162, 167], ["PlyData.read", "numpy.array"], "function", ["None"], ["", "def", "load_ply_normal", "(", "filename", ",", "point_num", ")", ":", "\n", "    ", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "pc", "=", "plydata", "[", "'normal'", "]", ".", "data", "[", ":", "point_num", "]", "\n", "pc_array", "=", "np", ".", "array", "(", "[", "[", "x", ",", "y", ",", "z", "]", "for", "x", ",", "y", ",", "z", "in", "pc", "]", ")", "\n", "return", "pc_array", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.pad_arr_rows": [[170, 181], ["len", "numpy.lib.pad", "numpy.lib.pad"], "function", ["None"], ["", "def", "pad_arr_rows", "(", "arr", ",", "row", ",", "pad", "=", "'edge'", ")", ":", "\n", "    ", "assert", "(", "len", "(", "arr", ".", "shape", ")", "==", "2", ")", "\n", "assert", "(", "arr", ".", "shape", "[", "0", "]", "<=", "row", ")", "\n", "assert", "(", "pad", "==", "'edge'", "or", "pad", "==", "'constant'", ")", "\n", "# arr = np.random.shuffle(arr)", "\n", "if", "arr", ".", "shape", "[", "0", "]", "==", "row", ":", "\n", "        ", "return", "arr", "\n", "", "if", "pad", "==", "'edge'", ":", "\n", "        ", "return", "np", ".", "lib", ".", "pad", "(", "arr", ",", "(", "(", "0", ",", "row", "-", "arr", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "", "if", "pad", "==", "'constant'", ":", "\n", "        ", "return", "np", ".", "lib", ".", "pad", "(", "arr", ",", "(", "(", "0", ",", "row", "-", "arr", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ",", "(", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.hdf5_seg_dataset": [[183, 214], ["len", "numpy.zeros", "numpy.zeros", "range", "data_prep_utils.save_h5", "len", "print", "numpy.loadtxt", "numpy.arange", "numpy.random.shuffle", "numpy.take", "utils.pointclouds_utils.normalize_point_cloud", "os.path.join", "int", "numpy.repeat", "utils.pointclouds_utils.rotate_point_cloud"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.save_h5", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.normalize_point_cloud", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.rotate_point_cloud"], ["", "", "def", "hdf5_seg_dataset", "(", "source_dir", ",", "h5_filename", ",", "files", ",", "NV", ",", "rotate", ")", ":", "\n", "    ", "n_files", "=", "len", "(", "files", ")", "\n", "data", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_files", ",", "NV", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_files", ",", "NV", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "files", ")", ")", ":", "\n", "        ", "print", "(", "i", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "source_dir", ",", "files", "[", "i", "]", "[", "11", ":", "]", ")", "+", "'.txt'", "\n", "x", "=", "np", ".", "loadtxt", "(", "path", ")", "\n", "\n", "nv_x", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "if", "nv_x", "<", "NV", ":", "\n", "            ", "n", "=", "int", "(", "2", "*", "NV", "/", "nv_x", ")", "\n", "x", "=", "np", ".", "repeat", "(", "x", ",", "repeats", "=", "n", ",", "axis", "=", "0", ")", "\n", "\n", "", "idx", "=", "np", ".", "arange", "(", "NV", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "\n", "x", "=", "np", ".", "take", "(", "x", ",", "indices", "=", "idx", ",", "axis", "=", "0", ")", "\n", "\n", "x", "=", "x", "[", "0", ":", "NV", ",", "...", "]", "\n", "\n", "xyz", "=", "normalize_point_cloud", "(", "x", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "x_labels", "=", "x", "[", ":", ",", "-", "1", "]", "\n", "if", "rotate", ":", "\n", "            ", "xyz", "=", "rotate_point_cloud", "(", "xyz", ")", "\n", "\n", "", "data", "[", "i", ",", "...", "]", "=", "xyz", "\n", "labels", "[", "i", ",", "...", "]", "=", "x_labels", "\n", "", "save_h5", "(", "h5_filename", ",", "data", ",", "labels", ",", "'float32'", ",", "'uint8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.sample_points": [[215, 227], ["numpy.random.shuffle", "numpy.repeat", "int", "float", "float"], "function", ["None"], ["", "def", "sample_points", "(", "arr", ",", "num_points", ")", ":", "\n", "\n", "    ", "\"\"\"\n    if num_points > arr.shape[0]:\n        return pad_arr_rows(arr, row=num_points)\n    else:\n        return arr[0:num_points, ...]\n    \"\"\"", "\n", "if", "num_points", ">", "arr", ".", "shape", "[", "0", "]", ":", "\n", "        ", "arr", "=", "np", ".", "repeat", "(", "arr", ",", "int", "(", "float", "(", "num_points", ")", "/", "float", "(", "arr", ".", "shape", "[", "0", "]", ")", ")", "+", "1", ",", "axis", "=", "0", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "arr", ")", "\n", "return", "arr", "[", "0", ":", "num_points", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.load_dense_matrix": [[228, 237], ["numpy.genfromtxt", "numpy.ndim", "numpy.expand_dims"], "function", ["None"], ["", "def", "load_dense_matrix", "(", "path_file", ",", "d_type", "=", "np", ".", "float32", ")", ":", "\n", "    ", "out", "=", "np", ".", "genfromtxt", "(", "fname", "=", "path_file", ",", "dtype", "=", "d_type", ",", "delimiter", "=", "' '", ")", "\n", "if", "np", ".", "ndim", "(", "out", ")", "==", "1", ":", "\n", "        ", "out", "=", "np", ".", "expand_dims", "(", "out", ",", "axis", "=", "-", "1", ")", "\n", "# out = np.loadtxt(path_file, delimiter=' ', dtype=d_type)", "\n", "# out = np.fromfile(path_file, dtype=d_type, sep=' ')", "\n", "# t = pd.read_csv(path_file, dtype=d_type, header=None)", "\n", "# out = t.values", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.read_off": [[239, 262], ["open", "open.readline().strip", "tuple", "range", "numpy.stack", "range", "numpy.stack().astype", "open.readline().strip", "np.stack.append", "np.stack().astype.append", "open.readline", "int", "numpy.array", "numpy.stack", "open.readline", "file.readline().strip.split", "float", "int", "open.readline().strip().split", "open.readline().strip().split", "open.readline().strip", "open.readline().strip", "open.readline", "open.readline"], "function", ["None"], ["", "def", "read_off", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'r'", ")", "\n", "line", "=", "file", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "if", "'OFF'", "!=", "line", ":", "\n", "        ", "line", "=", "line", "[", "3", ":", "]", "\n", "# raise ('Not a valid OFF header')", "\n", "", "else", ":", "\n", "        ", "line", "=", "file", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "\n", "", "n_verts", ",", "n_faces", ",", "n_dontknow", "=", "tuple", "(", "[", "int", "(", "s", ")", "for", "s", "in", "line", ".", "split", "(", "' '", ")", "]", ")", "\n", "verts", "=", "[", "]", "\n", "\n", "for", "i_vert", "in", "range", "(", "n_verts", ")", ":", "\n", "        ", "verts", ".", "append", "(", "np", ".", "array", "(", "[", "float", "(", "s", ")", "for", "s", "in", "file", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "]", ")", ")", "\n", "", "verts", "=", "np", ".", "stack", "(", "verts", ")", "\n", "\n", "\n", "faces", "=", "[", "]", "\n", "for", "i_face", "in", "range", "(", "n_faces", ")", ":", "\n", "        ", "faces", ".", "append", "(", "[", "int", "(", "s", ")", "for", "s", "in", "file", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "]", "[", "1", ":", "]", ")", "\n", "", "faces", "=", "np", ".", "stack", "(", "faces", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "return", "verts", ",", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.sample_faces": [[264, 315], ["numpy.cross", "numpy.sqrt", "numpy.ceil().astype", "numpy.sum", "numpy.zeros", "enumerate", "numpy.random.rand", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.random.choice", "numpy.ceil", "numpy.where", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "sample_faces", "(", "vertices", ",", "faces", ",", "n_samples", "=", "10", "**", "4", ")", ":", "\n", "    ", "\"\"\"\n    Samples point cloud on the surface of the model defined as vectices and\n    faces. This function uses vectorized operations so fast at the cost of some\n    memory.\n\n    Parameters:\n    vertices  - n x 3 matrix\n    faces     - n x 3 matrix\n    n_samples - positive integer\n\n    Return:\n        vertices - point cloud\n\n    Reference :\n        [1] Barycentric coordinate system\n\n        \\begin{align}\n        P = (1 - \\sqrt{r_1})A + \\sqrt{r_1} (1 - r_2) B + \\sqrt{r_1} r_2 C\n        \\end{align}\n    \"\"\"", "\n", "vec_cross", "=", "np", ".", "cross", "(", "vertices", "[", "faces", "[", ":", ",", "0", "]", ",", ":", "]", "-", "vertices", "[", "faces", "[", ":", ",", "2", "]", ",", ":", "]", ",", "\n", "vertices", "[", "faces", "[", ":", ",", "1", "]", ",", ":", "]", "-", "vertices", "[", "faces", "[", ":", ",", "2", "]", ",", ":", "]", ")", "\n", "face_areas", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "vec_cross", "**", "2", ",", "1", ")", ")", "\n", "face_areas", "=", "face_areas", "/", "np", ".", "sum", "(", "face_areas", ")", "\n", "\n", "# Sample exactly n_samples. First, oversample points and remove redundant", "\n", "# Contributed by Yangyan (yangyan.lee@gmail.com)", "\n", "n_samples_per_face", "=", "np", ".", "ceil", "(", "n_samples", "*", "face_areas", ")", ".", "astype", "(", "int", ")", "\n", "# floor_num = np.sum(sample_num_per_face) - n_samples", "\n", "floor_num", "=", "np", ".", "sum", "(", "n_samples_per_face", ")", "-", "n_samples", "\n", "if", "floor_num", ">", "0", ":", "\n", "        ", "indices", "=", "np", ".", "where", "(", "n_samples_per_face", ">", "0", ")", "[", "0", "]", "\n", "floor_indices", "=", "np", ".", "random", ".", "choice", "(", "indices", ",", "floor_num", ",", "replace", "=", "True", ")", "\n", "n_samples_per_face", "[", "floor_indices", "]", "-=", "1", "\n", "\n", "", "n_samples", "=", "np", ".", "sum", "(", "n_samples_per_face", ")", "\n", "\n", "# Create a vector that contains the face indices", "\n", "sample_face_idx", "=", "np", ".", "zeros", "(", "(", "n_samples", ",", ")", ",", "dtype", "=", "int", ")", "\n", "acc", "=", "0", "\n", "for", "face_idx", ",", "_n_sample", "in", "enumerate", "(", "n_samples_per_face", ")", ":", "\n", "        ", "sample_face_idx", "[", "acc", ":", "acc", "+", "_n_sample", "]", "=", "face_idx", "\n", "acc", "+=", "_n_sample", "\n", "\n", "", "r", "=", "np", ".", "random", ".", "rand", "(", "n_samples", ",", "2", ")", "\n", "A", "=", "vertices", "[", "faces", "[", "sample_face_idx", ",", "0", "]", ",", ":", "]", "\n", "B", "=", "vertices", "[", "faces", "[", "sample_face_idx", ",", "1", "]", ",", ":", "]", "\n", "C", "=", "vertices", "[", "faces", "[", "sample_face_idx", ",", "2", "]", ",", ":", "]", "\n", "P", "=", "(", "1", "-", "np", ".", "sqrt", "(", "r", "[", ":", ",", "0", ":", "1", "]", ")", ")", "*", "A", "+", "np", ".", "sqrt", "(", "r", "[", ":", ",", "0", ":", "1", "]", ")", "*", "(", "1", "-", "r", "[", ":", ",", "1", ":", "]", ")", "*", "B", "+", "np", ".", "sqrt", "(", "r", "[", ":", ",", "0", ":", "1", "]", ")", "*", "r", "[", ":", ",", "1", ":", "]", "*", "C", "\n", "return", "P", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.np_mat_to_pandas": [[317, 319], ["pandas.DataFrame"], "function", ["None"], ["", "def", "np_mat_to_pandas", "(", "mat", ")", ":", "\n", "    ", "return", "pd", ".", "DataFrame", "(", "{", "'x'", ":", "mat", "[", ":", ",", "0", "]", ",", "'y'", ":", "mat", "[", ":", ",", "1", "]", ",", "'z'", ":", "mat", "[", ":", ",", "2", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.uniform_mesh_sampling": [[321, 331], ["data_prep_utils.sample_faces", "data_prep_utils.np_mat_to_pandas", "pyntcloud.PyntCloud", "pyntcloud.PyntCloud.add_structure", "pyntcloud.PyntCloud.get_sample", "cloud.get_sample.points.as_matrix", "data_prep_utils.sample_points"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.sample_faces", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.np_mat_to_pandas", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.sample_points"], ["", "def", "uniform_mesh_sampling", "(", "V", ",", "F", ",", "num_samples", "=", "2048", ",", "grid_res", "=", "64", ",", "mesh_samples", "=", "10", "**", "4", ")", ":", "\n", "    ", "X_", "=", "sample_faces", "(", "V", ",", "F", ",", "n_samples", "=", "mesh_samples", ")", "\n", "cloud", "=", "np_mat_to_pandas", "(", "X_", ")", "\n", "cloud", "=", "PyntCloud", "(", "cloud", ")", "\n", "voxelgrid_id", "=", "cloud", ".", "add_structure", "(", "\"voxelgrid\"", ",", "n_x", "=", "grid_res", ",", "n_y", "=", "grid_res", ",", "n_z", "=", "grid_res", ")", "\n", "# new_cloud = cloud.get_sample(\"voxelgrid_nearest\", voxelgrid_id=voxelgrid_id, as_PyntCloud=True)", "\n", "new_cloud", "=", "cloud", ".", "get_sample", "(", "\"voxelgrid_centroids\"", ",", "voxelgrid_id", "=", "voxelgrid_id", ",", "as_PyntCloud", "=", "True", ")", "\n", "X", "=", "new_cloud", ".", "points", ".", "as_matrix", "(", ")", "\n", "X", "=", "sample_points", "(", "X", ",", "num_samples", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.read_and_sample_off": [[333, 336], ["data_prep_utils.read_off", "data_prep_utils.uniform_mesh_sampling"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.read_off", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.uniform_mesh_sampling"], ["", "def", "read_and_sample_off", "(", "file_path", ",", "num_samples", "=", "2048", ")", ":", "\n", "    ", "V", ",", "F", "=", "read_off", "(", "file_path", ")", "\n", "return", "uniform_mesh_sampling", "(", "V", ",", "F", ",", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.nn_correspondance": [[338, 342], ["scipy.spatial.cKDTree", "scipy.spatial.cKDTree.query"], "function", ["None"], ["", "def", "nn_correspondance", "(", "X", ",", "Y", ")", ":", "\n", "    ", "Ty", "=", "cKDTree", "(", "Y", ")", "\n", "_", ",", "idx", "=", "Ty", ".", "query", "(", "X", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.confusion_matrix.get_confusion_matrix_one_hot": [[8, 31], ["numpy.zeros", "numpy.argmax", "numpy.argmax", "sklearn.metrics.confusion_matrix", "len"], "function", ["None"], ["def", "get_confusion_matrix_one_hot", "(", "truth", ",", "model_results", ")", ":", "\n", "    ", "'''model_results and truth should be for one-hot format, i.e, have >= 2 columns,\n    where truth is 0/1, and max along each row of model_results is model result\n    '''", "\n", "assert", "model_results", ".", "shape", "==", "truth", ".", "shape", "\n", "num_outputs", "=", "truth", ".", "shape", "[", "1", "]", "\n", "confusion_matrix_", "=", "np", ".", "zeros", "(", "(", "num_outputs", ",", "num_outputs", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pred", "=", "np", ".", "argmax", "(", "model_results", ",", "axis", "=", "1", ")", "\n", "assert", "len", "(", "pred", ")", "==", "truth", ".", "shape", "[", "0", "]", "\n", "truth", "=", "np", ".", "argmax", "(", "truth", ",", "axis", "=", "1", ")", "\n", "\n", "\"\"\"\n    for actual_class in range(num_outputs):\n        idx_examples_this_class = truth[:, actual_class] == 1\n        prediction_for_this_class = predictions_[idx_examples_this_class]\n        for predicted_class in range(num_outputs):\n            count = np.sum(prediction_for_this_class == predicted_class)\n            confusion_matrix_[actual_class, predicted_class] = count\n    assert np.sum(confusion_matrix_) == len(truth)\n    assert np.sum(confusion_matrix_) == np.sum(truth)\n    \"\"\"", "\n", "confusion_matrix_", "=", "confusion_matrix", "(", "truth", ",", "pred", ")", "\n", "return", "confusion_matrix_", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.confusion_matrix.plot_confusion_matrix": [[33, 67], ["matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "matplotlib.tight_layout", "matplotlib.ylabel", "matplotlib.xlabel", "print", "print", "cm.max", "cm.astype", "cm.sum"], "function", ["None"], ["", "def", "plot_confusion_matrix", "(", "cm", ",", "\n", "normalize", "=", "False", ",", "\n", "title", "=", "'Confusion matrix'", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "\"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"", "\n", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "print", "(", "\"Normalized confusion matrix\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Confusion matrix, without normalization'", ")", "\n", "\n", "# print(cm)", "\n", "\n", "", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "# tick_marks = np.arange(len(classes))", "\n", "# plt.xticks(tick_marks, classes, rotation=45)", "\n", "# plt.yticks(tick_marks, classes)", "\n", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "\"\"\"\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    \"\"\"", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "ylabel", "(", "'True label'", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.confusion_matrix.plot_confusion_matrix_": [[69, 103], ["matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "numpy.arange", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.tight_layout", "matplotlib.ylabel", "matplotlib.xlabel", "print", "print", "len", "cm.max", "cm.astype", "cm.sum"], "function", ["None"], ["", "def", "plot_confusion_matrix_", "(", "cm", ",", "classes", ",", "\n", "normalize", "=", "False", ",", "\n", "title", "=", "'Confusion matrix'", ",", "\n", "cmap", "=", "plt", ".", "cm", ".", "Blues", ")", ":", "\n", "    ", "\"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"", "\n", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", ".", "astype", "(", "'float'", ")", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "print", "(", "\"Normalized confusion matrix\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Confusion matrix, without normalization'", ")", "\n", "\n", "# print(cm)", "\n", "\n", "", "plt", ".", "imshow", "(", "cm", ",", "interpolation", "=", "'nearest'", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "tick_marks", "=", "np", ".", "arange", "(", "len", "(", "classes", ")", ")", "\n", "plt", ".", "xticks", "(", "tick_marks", ",", "classes", ",", "rotation", "=", "45", ")", "\n", "plt", ".", "yticks", "(", "tick_marks", ",", "classes", ")", "\n", "\n", "fmt", "=", "'.2f'", "if", "normalize", "else", "'d'", "\n", "thresh", "=", "cm", ".", "max", "(", ")", "/", "2.", "\n", "\"\"\"\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    \"\"\"", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "ylabel", "(", "'True label'", ")", "\n", "plt", ".", "xlabel", "(", "'Predicted label'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.confusion_matrix.plot_confusion_mat": [[107, 116], ["confusion_matrix.get_confusion_matrix_one_hot", "numpy.set_printoptions", "matplotlib.figure", "confusion_matrix.plot_confusion_matrix", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.confusion_matrix.get_confusion_matrix_one_hot", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.confusion_matrix.plot_confusion_matrix"], ["", "def", "plot_confusion_mat", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "cnf_matrix", "=", "get_confusion_matrix_one_hot", "(", "y_true", ",", "y_pred", ")", "\n", "np", ".", "set_printoptions", "(", "precision", "=", "2", ")", "\n", "\n", "# Plot non-normalized confusion matrix", "\n", "plt", ".", "figure", "(", ")", "\n", "plot_confusion_matrix", "(", "cnf_matrix", ",", "normalize", "=", "False", ",", "\n", "title", "=", "'Confusion matrix, without normalization'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.confusion_matrix.plot_confusion_mat_": [[118, 129], ["confusion_matrix.get_confusion_matrix_one_hot", "numpy.set_printoptions", "matplotlib.figure", "confusion_matrix.plot_confusion_matrix_", "matplotlib.show", "numpy.save"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.confusion_matrix.get_confusion_matrix_one_hot", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.confusion_matrix.plot_confusion_matrix_"], ["", "def", "plot_confusion_mat_", "(", "y_true", ",", "y_pred", ",", "classes", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "cnf_matrix", "=", "get_confusion_matrix_one_hot", "(", "y_true", ",", "y_pred", ")", "\n", "np", ".", "set_printoptions", "(", "precision", "=", "2", ")", "\n", "\n", "# Plot non-normalized confusion matrix", "\n", "plt", ".", "figure", "(", ")", "\n", "plot_confusion_matrix_", "(", "cnf_matrix", ",", "classes", "=", "classes", ",", "normalize", "=", "False", ",", "\n", "title", "=", "'Confusion matrix, without normalization'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "save_path", ",", "cnf_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.confusion_matrix.confusion_mat": [[131, 144], ["generator.get_shapes_names", "range", "numpy.stack", "numpy.stack", "confusion_matrix.plot_confusion_mat_", "len", "generator.get_input", "np.stack.append", "np.stack.append", "numpy.squeeze", "numpy.squeeze", "model.predict", "generator.get_pred"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.confusion_matrix.plot_confusion_mat_"], ["", "", "def", "confusion_mat", "(", "generator", ",", "model", ",", "classes", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "names", "=", "generator", ".", "get_shapes_names", "(", ")", "\n", "y", "=", "[", "]", "\n", "y_true", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "        ", "x", "=", "generator", ".", "get_input", "(", "i", ")", "\n", "y", ".", "append", "(", "np", ".", "squeeze", "(", "model", ".", "predict", "(", "x", ",", "batch_size", "=", "1", ",", "verbose", "=", "0", ",", "steps", "=", "None", ")", ",", "axis", "=", "0", ")", ")", "\n", "y_true", ".", "append", "(", "np", ".", "squeeze", "(", "generator", ".", "get_pred", "(", "i", ")", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "y", "=", "np", ".", "stack", "(", "y", ",", "axis", "=", "0", ")", "\n", "y_true", "=", "np", ".", "stack", "(", "y_true", ",", "axis", "=", "0", ")", "\n", "\n", "plot_confusion_mat_", "(", "y_true", "=", "y_true", ",", "y_pred", "=", "y", ",", "classes", "=", "classes", ",", "save_path", "=", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_model": [[7, 19], ["model.to_json", "os.path.join", "os.path.join", "model.save_weights", "print", "open", "json_file.write"], "function", ["None"], ["def", "save_model", "(", "path", ",", "model", ")", ":", "\n", "# serialize model to JSON", "\n", "    ", "model_json", "=", "model", ".", "to_json", "(", ")", "\n", "model_path", "=", "'model.json'", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "model_path", ")", "\n", "with", "open", "(", "model_path", ",", "\"w\"", ")", "as", "json_file", ":", "\n", "        ", "json_file", ".", "write", "(", "model_json", ")", "\n", "# serialize weights to HDF5", "\n", "", "weights_path", "=", "'weights.h5'", "\n", "weights_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "weights_path", ")", "\n", "model", ".", "save_weights", "(", "weights_path", ")", "\n", "print", "(", "\"Saved model to disk\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_training_acc": [[21, 30], ["open", "open", "os.path.join", "f.write", "os.path.join", "f.write"], "function", ["None"], ["", "def", "save_training_acc", "(", "path", ",", "hist", ")", ":", "\n", "    ", "train_acc", "=", "hist", ".", "history", "[", "'acc'", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train_acc.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "item", "in", "train_acc", ":", "\n", "            ", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "", "", "val_acc", "=", "hist", ".", "history", "[", "'val_acc'", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'val_acc.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "item", "in", "val_acc", ":", "\n", "            ", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_list": [[32, 37], ["open", "f.close", "f.write"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.PclViewer.close"], ["", "", "", "def", "save_list", "(", "path", ",", "list", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "item", "in", "list", ":", "\n", "            ", "f", ".", "write", "(", "\"%s\\n\"", "%", "item", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_tensor": [[39, 41], ["numpy.savetxt", "x.flatten"], "function", ["None"], ["", "", "def", "save_tensor", "(", "path", ",", "x", ")", ":", "\n", "    ", "np", ".", "savetxt", "(", "path", ",", "x", ".", "flatten", "(", ")", ",", "delimiter", "=", "' '", ",", "fmt", "=", "'%f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.save_matrix": [[43, 48], ["numpy.savetxt", "numpy.savetxt", "x.astype"], "function", ["None"], ["", "def", "save_matrix", "(", "path", ",", "x", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "if", "dtype", "is", "np", ".", "float32", ":", "\n", "        ", "np", ".", "savetxt", "(", "path", ",", "x", ",", "delimiter", "=", "' '", ",", "fmt", "=", "'%f'", ")", "\n", "", "if", "dtype", "is", "np", ".", "int32", ":", "\n", "        ", "np", ".", "savetxt", "(", "path", ",", "x", ".", "astype", "(", "np", ".", "int32", ")", ",", "delimiter", "=", "' '", ",", "fmt", "=", "'%i'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.save_model.create_dir": [[50, 58], ["os.path.isdir", "os.mkdir", "print", "print"], "function", ["None"], ["", "", "def", "create_dir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "print", "(", "\"Creation of the directory %s failed\"", "%", "path", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Successfully created the directory %s \"", "%", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.__init__": [[129, 138], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nr", ",", "l_max", ",", "sigma", ",", "radial_fn", ",", "normalize_patch", "=", "False", ",", "radial_first", "=", "False", ",", "return_sh", "=", "False", ")", ":", "\n", "        ", "self", ".", "nr", "=", "nr", "\n", "self", ".", "l_max", "=", "l_max", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "radial_fn", "=", "radial_fn", "\n", "# self.radial_fn = tf_zero", "\n", "self", ".", "normalize_patch", "=", "normalize_patch", "\n", "self", ".", "radial_first", "=", "radial_first", "\n", "self", ".", "return_sh", "=", "return_sh", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.compute": [[139, 153], ["sh_conv.tf_sh_kernel_"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_sh_kernel_"], ["", "def", "compute", "(", "self", ",", "X", ",", "sq_dist", ")", ":", "\n", "        ", "y", ",", "sh", "=", "tf_sh_kernel_", "(", "X", ",", "sq_dist", ",", "\n", "self", ".", "nr", ",", "\n", "self", ".", "l_max", ",", "\n", "self", ".", "sigma", ",", "\n", "self", ".", "radial_fn", ",", "\n", "normalize_patch", "=", "self", ".", "normalize_patch", ",", "\n", "radial_first", "=", "self", ".", "radial_first", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "if", "self", ".", "return_sh", ":", "\n", "            ", "return", "[", "y", ",", "sh", "]", "\n", "", "else", ":", "\n", "            ", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape": [[154, 165], ["None"], "methods", ["None"], ["", "", "def", "get_shape", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "radial_first", ":", "\n", "            ", "if", "self", ".", "return_sh", ":", "\n", "                ", "return", "[", "(", "self", ".", "nr", ",", "(", "self", ".", "l_max", "+", "1", ")", "**", "2", ")", ",", "(", "(", "self", ".", "l_max", "+", "1", ")", "**", "2", ",", ")", "]", "\n", "", "else", ":", "\n", "                ", "return", "(", "self", ".", "nr", ",", "(", "self", ".", "l_max", "+", "1", ")", "**", "2", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "return_sh", ":", "\n", "                ", "return", "[", "(", "(", "self", ".", "l_max", "+", "1", ")", "**", "2", ",", "self", ".", "nr", ")", ",", "(", "(", "self", ".", "l_max", "+", "1", ")", "**", "2", ",", ")", "]", "\n", "", "else", ":", "\n", "                ", "return", "(", "(", "self", ".", "l_max", "+", "1", ")", "**", "2", ",", "self", ".", "nr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_heaviside": [[5, 7], ["tensorflow.maximum", "tensorflow.sign"], "function", ["None"], ["def", "tf_heaviside", "(", "X", ")", ":", "\n", "    ", "return", "tf", ".", "maximum", "(", "0.0", ",", "tf", ".", "sign", "(", "X", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_segment_indicator_": [[9, 11], ["sh_conv.tf_heaviside", "sh_conv.tf_heaviside"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_heaviside", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_heaviside"], ["", "def", "tf_segment_indicator_", "(", "X", ",", "a", ",", "b", ")", ":", "\n", "    ", "return", "tf_heaviside", "(", "X", "-", "a", ")", "-", "tf_heaviside", "(", "X", "-", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_segment_indictor": [[13, 15], ["sh_conv.tf_segment_indicator_"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_segment_indicator_"], ["", "def", "tf_segment_indictor", "(", "X", ",", "r", ",", "sigma", ")", ":", "\n", "    ", "return", "tf_segment_indicator_", "(", "X", ",", "r", "-", "sigma", ",", "r", "+", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_hat": [[17, 20], ["tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu"], "function", ["None"], ["", "def", "tf_hat", "(", "x", ",", "sigma", ")", ":", "\n", "    ", "x", "=", "x", "/", "sigma", "\n", "return", "0.5", "*", "(", "tf", ".", "nn", ".", "relu", "(", "x", "+", "1.", ")", "-", "2.", "*", "tf", ".", "nn", ".", "relu", "(", "x", ")", "+", "tf", ".", "nn", ".", "relu", "(", "x", "-", "1.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_gaussian": [[22, 27], ["tensorflow.multiply", "tensorflow.exp"], "function", ["None"], ["", "def", "tf_gaussian", "(", "x", ",", "sigma", ")", ":", "\n", "\n", "# sigma = 3*sigma", "\n", "    ", "x2", "=", "tf", ".", "multiply", "(", "x", ",", "x", ")", "\n", "return", "tf", ".", "exp", "(", "-", "x2", "/", "(", "2.", "*", "(", "sigma", "**", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_zero": [[29, 31], ["None"], "function", ["None"], ["", "def", "tf_zero", "(", "x", ",", "sigma", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_sh_kernel": [[33, 54], ["spherical_harmonics.tf_spherical_harmonics.normalized_sh", "tensorflow.sqrt", "tensorflow.expand_dims", "tensorflow.subtract", "radial_weights_fn", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.maximum", "tensorflow.reduce_max", "tensorflow.divide", "tensorflow.reshape", "tensorflow.lin_space", "float"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.tf_spherical_harmonics.normalized_sh"], ["", "def", "tf_sh_kernel", "(", "X", ",", "sq_dist", ",", "nr", ",", "l_max", ",", "sigma", ",", "radial_weights_fn", ",", "normalize_patch", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "# Y = unnormalized_sh(X, l_max, dtype=dtype)", "\n", "    ", "Y", "=", "normalized_sh", "(", "X", ",", "l_max", ",", "dtype", "=", "dtype", ",", "eps", "=", "0.0001", ")", "\n", "\n", "dist", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "sq_dist", ",", "0.0001", ")", ")", "\n", "\n", "if", "normalize_patch", ":", "\n", "        ", "radius", "=", "tf", ".", "reduce_max", "(", "dist", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "dist", "=", "tf", ".", "divide", "(", "dist", ",", "radius", "+", "0.0001", ")", "\n", "\n", "", "dist", "=", "tf", ".", "expand_dims", "(", "dist", ",", "axis", "=", "-", "1", ")", "\n", "r", "=", "(", "2.", "*", "nr", "*", "sigma", ")", "*", "tf", ".", "reshape", "(", "tf", ".", "lin_space", "(", "start", "=", "0.", ",", "stop", "=", "1.", "-", "1.", "/", "float", "(", "nr", ")", ",", "num", "=", "nr", ")", ",", "shape", "=", "(", "1", ",", "1", ",", "1", ",", "nr", ")", ")", "\n", "r", "=", "tf", ".", "subtract", "(", "dist", ",", "r", ")", "\n", "radial_weights", "=", "radial_weights_fn", "(", "r", ",", "sigma", ")", "\n", "Y", "=", "tf", ".", "expand_dims", "(", "Y", ",", "axis", "=", "-", "1", ")", "\n", "radial_weights", "=", "tf", ".", "expand_dims", "(", "radial_weights", ",", "axis", "=", "-", "2", ")", "\n", "y", "=", "tf", ".", "multiply", "(", "Y", ",", "radial_weights", ")", "\n", "\n", "# y = tf.expand_dims(Y, axis=-1)", "\n", "# y = tf.tile(y, multiples=(1, 1, 1, 1, 3))", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_sh_kernel_": [[56, 94], ["spherical_harmonics.tf_spherical_harmonics.normalized_sh", "tensorflow.sqrt", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.subtract", "radial_weights_fn", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.divide", "tensorflow.maximum", "tensorflow.reduce_max", "tensorflow.reduce_mean", "tensorflow.divide", "tensorflow.lin_space", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.tf_spherical_harmonics.normalized_sh"], ["", "def", "tf_sh_kernel_", "(", "X", ",", "sq_dist", ",", "nr", ",", "l_max", ",", "rad", ",", "radial_weights_fn", ",", "normalize_patch", "=", "False", ",", "\n", "radial_first", "=", "False", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "# Y = unnormalized_sh(X, l_max, dtype=dtype)", "\n", "    ", "Y", "=", "normalized_sh", "(", "X", ",", "l_max", ",", "dtype", "=", "dtype", ",", "eps", "=", "0.0001", ")", "\n", "sh", "=", "Y", "\n", "\n", "dist", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "sq_dist", ",", "0.0001", ")", ")", "\n", "\n", "if", "normalize_patch", ":", "\n", "        ", "radius", "=", "tf", ".", "reduce_max", "(", "dist", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "radius", "=", "tf", ".", "reduce_mean", "(", "radius", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "dist", "=", "tf", ".", "divide", "(", "dist", ",", "radius", "+", "0.0001", ")", "\n", "rad", "=", "0.75", "\n", "\n", "\n", "", "dist", "=", "tf", ".", "expand_dims", "(", "dist", ",", "axis", "=", "-", "1", ")", "\n", "r", "=", "tf", ".", "reshape", "(", "tf", ".", "lin_space", "(", "start", "=", "0.", ",", "stop", "=", "rad", ",", "num", "=", "nr", ")", ",", "shape", "=", "(", "1", ",", "1", ",", "1", ",", "nr", ")", ")", "\n", "r", "=", "tf", ".", "subtract", "(", "dist", ",", "r", ")", "\n", "sigma", "=", "(", "rad", "/", "(", "nr", "-", "1", ")", ")", "\n", "radial_weights", "=", "radial_weights_fn", "(", "r", ",", "sigma", ")", "\n", "if", "radial_first", ":", "\n", "        ", "Y", "=", "tf", ".", "expand_dims", "(", "Y", ",", "axis", "=", "-", "2", ")", "\n", "radial_weights", "=", "tf", ".", "expand_dims", "(", "radial_weights", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "Y", "=", "tf", ".", "expand_dims", "(", "Y", ",", "axis", "=", "-", "1", ")", "\n", "radial_weights", "=", "tf", ".", "expand_dims", "(", "radial_weights", ",", "axis", "=", "-", "2", ")", "\n", "\n", "", "y", "=", "tf", ".", "multiply", "(", "Y", ",", "radial_weights", ")", "\n", "\n", "# y = tf.expand_dims(Y, axis=-1)", "\n", "# y = tf.tile(y, multiples=(1, 1, 1, 1, 3))", "\n", "\n", "\n", "y_w", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "y", "[", ":", ",", ":", ",", ":", ",", "0", ",", "0", "]", ",", "axis", "=", "-", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "y_w", "=", "tf", ".", "reduce_sum", "(", "y_w", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "y", "=", "tf", ".", "divide", "(", "y", ",", "y_w", "+", "0.000001", ")", "\n", "return", "y", ",", "sh", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.tf_sh_sinusoid_kernel": [[96, 127], ["spherical_harmonics.tf_spherical_harmonics.normalized_sh", "tensorflow.sqrt", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.sin", "tensorflow.cos", "tensorflow.ones", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.multiply", "tensorflow.maximum", "tensorflow.reduce_max", "tensorflow.divide", "tensorflow.reshape", "sq_dist.get_shape", "sq_dist.get_shape", "sq_dist.get_shape", "tensorflow.exp", "tensorflow.lin_space"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.tf_spherical_harmonics.normalized_sh", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape"], ["", "def", "tf_sh_sinusoid_kernel", "(", "X", ",", "sq_dist", ",", "n", ",", "l_max", ",", "t", ",", "sigma", ",", "normalize_patch", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "Y", "=", "normalized_sh", "(", "X", ",", "l_max", ",", "dtype", "=", "dtype", ",", "eps", "=", "0.0001", ")", "\n", "\n", "dist", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "sq_dist", ",", "0.0001", ")", ")", "\n", "\n", "if", "normalize_patch", ":", "\n", "        ", "radius", "=", "tf", ".", "reduce_max", "(", "dist", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "dist", "=", "tf", ".", "divide", "(", "dist", ",", "radius", "+", "0.0001", ")", "\n", "\n", "", "t", "=", "t", "/", "(", "2", "*", "np", ".", "pi", ")", "\n", "\n", "dist", "=", "tf", ".", "expand_dims", "(", "dist", ",", "axis", "=", "-", "1", ")", "\n", "d", "=", "t", "*", "tf", ".", "reshape", "(", "tf", ".", "lin_space", "(", "start", "=", "1.", ",", "stop", "=", "n", ",", "num", "=", "n", ")", ",", "shape", "=", "(", "1", ",", "1", ",", "1", ",", "n", ")", ")", "\n", "d", "=", "tf", ".", "multiply", "(", "dist", ",", "d", ")", "\n", "s", "=", "tf", ".", "sin", "(", "d", ")", "\n", "c", "=", "tf", ".", "cos", "(", "d", ")", "\n", "\n", "nb", "=", "sq_dist", ".", "get_shape", "(", ")", "[", "0", "]", "\n", "nv", "=", "sq_dist", ".", "get_shape", "(", ")", "[", "1", "]", "\n", "ns", "=", "sq_dist", ".", "get_shape", "(", ")", "[", "2", "]", "\n", "one", "=", "tf", ".", "ones", "(", "shape", "=", "(", "nb", ",", "nv", ",", "ns", ",", "1", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "rw", "=", "tf", ".", "concat", "(", "[", "s", ",", "one", ",", "c", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "e", "=", "tf", ".", "expand_dims", "(", "tf", ".", "exp", "(", "-", "sq_dist", "/", "(", "2", "*", "sigma", "*", "sigma", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "rw", "=", "tf", ".", "multiply", "(", "e", ",", "rw", ")", "\n", "Y", "=", "tf", ".", "expand_dims", "(", "Y", ",", "axis", "=", "-", "1", ")", "\n", "rw", "=", "tf", ".", "expand_dims", "(", "rw", ",", "axis", "=", "-", "2", ")", "\n", "\n", "y", "=", "tf", ".", "multiply", "(", "Y", ",", "rw", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.sh_eqvar_conv_1": [[166, 192], ["tensorflow.gather_nd", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.stack", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply"], "function", ["None"], ["", "", "", "", "def", "sh_eqvar_conv_1", "(", "signal", ",", "patches_idx", ",", "conv_tensor", ")", ":", "\n", "    ", "sampled_signal", "=", "tf", ".", "gather_nd", "(", "signal", ",", "patches_idx", ")", "\n", "v", "=", "tf", ".", "expand_dims", "(", "sampled_signal", ",", "axis", "=", "-", "2", ")", "\n", "v0", "=", "v", "[", ":", ",", ":", ",", ":", ",", "0", ",", "...", "]", "\n", "v1", "=", "v", "[", ":", ",", ":", ",", ":", ",", "1", ",", "...", "]", "\n", "v2", "=", "v", "[", ":", ",", ":", ",", ":", ",", "2", ",", "...", "]", "\n", "\n", "u0", "=", "conv_tensor", "[", ":", ",", ":", ",", ":", ",", "1", ",", "...", "]", "\n", "u1", "=", "conv_tensor", "[", ":", ",", ":", ",", ":", ",", "2", ",", "...", "]", "\n", "u2", "=", "conv_tensor", "[", ":", ",", ":", ",", ":", ",", "3", ",", "...", "]", "\n", "\n", "cross_uv0", "=", "tf", ".", "multiply", "(", "u1", ",", "v0", ")", "-", "tf", ".", "multiply", "(", "u0", ",", "v1", ")", "\n", "cross_uv0", "=", "tf", ".", "reduce_sum", "(", "cross_uv0", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "\n", "\n", "cross_uv1", "=", "tf", ".", "multiply", "(", "u2", ",", "v0", ")", "-", "tf", ".", "multiply", "(", "u0", ",", "v2", ")", "\n", "cross_uv1", "=", "tf", ".", "reduce_sum", "(", "cross_uv1", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "\n", "\n", "cross_uv2", "=", "tf", ".", "multiply", "(", "u2", ",", "v1", ")", "-", "tf", ".", "multiply", "(", "u1", ",", "v2", ")", "\n", "cross_uv2", "=", "tf", ".", "reduce_sum", "(", "cross_uv2", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "\n", "\n", "cross_uv", "=", "tf", ".", "stack", "(", "[", "cross_uv0", ",", "cross_uv1", ",", "cross_uv2", "]", ",", "axis", "=", "2", ")", "\n", "\n", "dot_uv", "=", "tf", ".", "multiply", "(", "u0", ",", "v0", ")", "+", "tf", ".", "multiply", "(", "u1", ",", "v1", ")", "+", "tf", ".", "multiply", "(", "u2", ",", "v2", ")", "\n", "dot_uv", "=", "tf", ".", "reduce_sum", "(", "dot_uv", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "\n", "return", "dot_uv", ",", "cross_uv", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.sh_norm": [[194, 209], ["range", "tensorflow.stack", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.sqrt", "L.append"], "function", ["None"], ["", "def", "sh_norm", "(", "sh_features", ",", "l_max", ")", ":", "\n", "    ", "y", "=", "sh_features", "\n", "L", "=", "[", "y", "[", ":", ",", ":", ",", "0", ",", "...", "]", "]", "\n", "p", "=", "1", "\n", "for", "l", "in", "range", "(", "1", ",", "l_max", "+", "1", ")", ":", "\n", "        ", "x", "=", "y", "[", ":", ",", ":", ",", "p", ":", "(", "p", "+", "2", "*", "l", "+", "1", ")", ",", "...", "]", "\n", "p", "+=", "2", "*", "l", "+", "1", "\n", "# x = tf.norm(x, axis=2, keepdims=False)", "\n", "x", "=", "tf", ".", "multiply", "(", "x", ",", "x", ")", "\n", "x", "=", "tf", ".", "reduce_sum", "(", "x", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "\n", "x", "=", "tf", ".", "maximum", "(", "x", ",", "0.0001", ")", "\n", "x", "=", "tf", ".", "sqrt", "(", "x", ")", "\n", "L", ".", "append", "(", "x", ")", "\n", "", "y", "=", "tf", ".", "stack", "(", "L", ",", "axis", "=", "2", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.sh_invar_conv_": [[210, 239], ["tensorflow.gather_nd", "tensorflow.einsum", "range", "tensorflow.stack", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.sqrt", "L.append"], "function", ["None"], ["", "def", "sh_invar_conv_", "(", "signal", ",", "patches_idx", ",", "conv_tensor", ",", "l_max", ")", ":", "\n", "    ", "\"\"\"\n    sh_idx = np.array([0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3], dtype=np.int32)\n    sh_idx = sh_idx[:l_max ** 2]\n\n    # sh_idx = np.array([0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], dtype=np.int32)\n    # sh_idx = sh_idx[:l_max**2-1]\n    sh_idx = tf.convert_to_tensor(sh_idx, dtype=tf.int32)\n    \"\"\"", "\n", "\n", "\n", "sampled_signal", "=", "tf", ".", "gather_nd", "(", "signal", ",", "patches_idx", ")", "\n", "y", "=", "tf", ".", "einsum", "(", "'bvpnr,bvpc->bvnrc'", ",", "conv_tensor", ",", "sampled_signal", ")", "\n", "# y = (1./(float(sampled_signal.get_shape()[2].value)))*y", "\n", "\n", "L", "=", "[", "y", "[", ":", ",", ":", ",", "0", ",", "...", "]", "]", "\n", "p", "=", "1", "\n", "for", "l", "in", "range", "(", "1", ",", "l_max", "+", "1", ")", ":", "\n", "        ", "x", "=", "y", "[", ":", ",", ":", ",", "p", ":", "(", "p", "+", "2", "*", "l", "+", "1", ")", ",", "...", "]", "\n", "p", "+=", "2", "*", "l", "+", "1", "\n", "# x = tf.norm(x, axis=2, keepdims=False)", "\n", "x", "=", "tf", ".", "multiply", "(", "x", ",", "x", ")", "\n", "x", "=", "tf", ".", "reduce_sum", "(", "x", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "\n", "x", "=", "tf", ".", "maximum", "(", "x", ",", "0.0001", ")", "\n", "x", "=", "tf", ".", "sqrt", "(", "x", ")", "\n", "L", ".", "append", "(", "x", ")", "\n", "", "y", "=", "tf", ".", "stack", "(", "L", ",", "axis", "=", "2", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.sh_invar_conv": [[241, 244], ["sh_conv.sh_invar_conv_", "tensorflow.einsum"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.sh_invar_conv_"], ["", "def", "sh_invar_conv", "(", "signal", ",", "patches_idx", ",", "conv_tensor", ",", "kernel", ",", "l_max", ")", ":", "\n", "    ", "y", "=", "sh_invar_conv_", "(", "signal", ",", "patches_idx", ",", "conv_tensor", ",", "l_max", ")", "\n", "return", "tf", ".", "einsum", "(", "'inrj,bvnrj->bvi'", ",", "kernel", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.batch_norm.MyLayer.__init__": [[6, 9], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "output_dim", "=", "output_dim", "\n", "super", "(", "MyLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.batch_norm.MyLayer.build": [[10, 17], ["batch_norm.MyLayer.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.KdTreePooling.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "# Create a trainable weight variable for this layer.", "\n", "        ", "self", ".", "kernel", "=", "self", ".", "add_weight", "(", "name", "=", "'kernel'", ",", "\n", "shape", "=", "(", "input_shape", "[", "1", "]", ",", "self", ".", "output_dim", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "super", "(", "MyLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this at the end", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.batch_norm.MyLayer.call": [[18, 20], ["keras.backend.dot"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "K", ".", "dot", "(", "x", ",", "self", ".", "kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.batch_norm.MyLayer.compute_output_shape": [[21, 23], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", ",", "self", ".", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.batch_norm.batch_norm_template": [[27, 65], ["tf.variable_scope", "tf.Variable", "tf.Variable", "tf.nn.moments", "tf.train.ExponentialMovingAverage", "tf.cond", "tf.cond", "tf.nn.batch_normalization", "tf.constant", "tf.constant", "inputs.get_shape", "tf.train.ExponentialMovingAverage.apply", "tf.no_op", "tf.control_dependencies", "tf.identity", "tf.identity", "tf.train.ExponentialMovingAverage.average", "tf.train.ExponentialMovingAverage.average"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape"], ["", "", "def", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "moments_dims", ",", "bn_decay", ")", ":", "\n", "    ", "\"\"\" Batch normalization on convolutional maps and beyond...\n    Ref.: http://stackoverflow.com/questions/33949786/how-could-i-use-batch-normalization-in-tensorflow\n\n    Args:\n        inputs:        Tensor, k-D input ... x C could be BC or BHWC or BDHWC\n        is_training:   boolean tf.Varialbe, true indicates training phase\n        scope:         string, variable scope\n        moments_dims:  a list of ints, indicating dimensions for moments calculation\n        bn_decay:      float or float tensor variable, controling moving average weight\n    Return:\n        normed:        batch-normalized maps\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "        ", "num_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "beta", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "num_channels", "]", ")", ",", "\n", "name", "=", "'beta'", ",", "trainable", "=", "True", ")", "\n", "gamma", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "1.0", ",", "shape", "=", "[", "num_channels", "]", ")", ",", "\n", "name", "=", "'gamma'", ",", "trainable", "=", "True", ")", "\n", "batch_mean", ",", "batch_var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "moments_dims", ",", "name", "=", "'moments'", ")", "\n", "decay", "=", "bn_decay", "if", "bn_decay", "is", "not", "None", "else", "0.9", "\n", "ema", "=", "tf", ".", "train", ".", "ExponentialMovingAverage", "(", "decay", "=", "decay", ")", "\n", "# Operator that maintains moving averages of variables.", "\n", "ema_apply_op", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "lambda", ":", "ema", ".", "apply", "(", "[", "batch_mean", ",", "batch_var", "]", ")", ",", "\n", "lambda", ":", "tf", ".", "no_op", "(", ")", ")", "\n", "\n", "# Update moving average and return current batch's avg and var.", "\n", "def", "mean_var_with_update", "(", ")", ":", "\n", "            ", "with", "tf", ".", "control_dependencies", "(", "[", "ema_apply_op", "]", ")", ":", "\n", "                ", "return", "tf", ".", "identity", "(", "batch_mean", ")", ",", "tf", ".", "identity", "(", "batch_var", ")", "\n", "\n", "# ema.average returns the Variable holding the average of var.", "\n", "", "", "mean", ",", "var", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "mean_var_with_update", ",", "\n", "lambda", ":", "(", "ema", ".", "average", "(", "batch_mean", ")", ",", "ema", ".", "average", "(", "batch_var", ")", ")", ")", "\n", "normed", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "mean", ",", "var", ",", "beta", ",", "gamma", ",", "1e-3", ")", "\n", "", "return", "normed", "", "", ""]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.patches_builder.BuildPatches.__init__": [[8, 13], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.__init__"], ["    ", "def", "__init__", "(", "self", ",", "patch_size", ",", "centering", "=", "'root'", ",", "spacing", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "spacing", "=", "spacing", "\n", "self", ".", "centering", "=", "centering", "\n", "super", "(", "BuildPatches", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.patches_builder.BuildPatches.build": [[14, 16], ["super().build"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.KdTreePooling.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "super", "(", "BuildPatches", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.patches_builder.BuildPatches.call": [[17, 74], ["isinstance", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.transpose", "tensorflow.nn.top_k", "tensorflow.range", "tensorflow.reshape", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.subtract", "tensorflow.reduce_mean", "tensorflow.subtract", "points_pl.get_shape", "points_pl.get_shape", "roots.get_shape", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.tile", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "x", ",", "list", ")", "\n", "points_pl", "=", "x", "[", "0", "]", "\n", "roots", "=", "x", "[", "1", "]", "\n", "\n", "batch_size", "=", "points_pl", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "num_of_points", "=", "points_pl", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "num_of_roots", "=", "roots", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "assert", "(", "num_of_points", ">=", "self", ".", "patch_size", ")", "\n", "num_samples", "=", "self", ".", "patch_size", "\n", "\n", "# compute distance mat", "\n", "\n", "r0", "=", "tf", ".", "multiply", "(", "roots", ",", "roots", ")", "\n", "r0", "=", "tf", ".", "reduce_sum", "(", "r0", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "\n", "r1", "=", "tf", ".", "multiply", "(", "points_pl", ",", "points_pl", ")", "\n", "r1", "=", "tf", ".", "reduce_sum", "(", "r1", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "r1", "=", "tf", ".", "transpose", "(", "r1", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "sq_distance_mat", "=", "r0", "-", "2.", "*", "tf", ".", "matmul", "(", "roots", ",", "tf", ".", "transpose", "(", "points_pl", ",", "[", "0", ",", "2", ",", "1", "]", ")", ")", "+", "r1", "\n", "\n", "\n", "\"\"\"\n        r = tf.multiply(points_pl, points_pl)\n        r = tf.reduce_sum(r, 2)\n        r = tf.expand_dims(r, dim=2)\n        sq_distance_mat = r - 2. * tf.matmul(points_pl, tf.transpose(points_pl, [0, 2, 1])) + tf.transpose(\n            r, [0, 2, 1])\n        \"\"\"", "\n", "# compute patches", "\n", "assert", "(", "num_samples", "*", "(", "self", ".", "spacing", "+", "1", ")", "<=", "num_of_points", ")", "\n", "\n", "sq_patches_dist", ",", "patches_idx", "=", "tf", ".", "nn", ".", "top_k", "(", "-", "sq_distance_mat", ",", "k", "=", "num_samples", "*", "(", "self", ".", "spacing", "+", "1", ")", ")", "\n", "sq_patches_dist", "=", "-", "sq_patches_dist", "\n", "\n", "if", "self", ".", "spacing", ">", "0", ":", "\n", "            ", "sq_patches_dist", "=", "sq_patches_dist", "[", ":", ",", ":", ",", "0", ":", "(", "self", ".", "spacing", "+", "1", ")", ":", "-", "1", ",", "...", "]", "\n", "patches_idx", "=", "patches_idx", "[", ":", ",", ":", ",", "0", ":", "(", "self", ".", "spacing", "+", "1", ")", ":", "-", "1", ",", "...", "]", "\n", "\n", "", "batch_idx", "=", "tf", ".", "range", "(", "0", ",", "batch_size", ")", "\n", "batch_idx", "=", "tf", ".", "reshape", "(", "batch_idx", ",", "(", "batch_size", ",", "1", ",", "1", ")", ")", "\n", "batch_idx", "=", "tf", ".", "tile", "(", "batch_idx", ",", "(", "1", ",", "num_of_roots", ",", "num_samples", ")", ")", "\n", "patches_idx", "=", "tf", ".", "stack", "(", "[", "batch_idx", ",", "patches_idx", "]", ",", "-", "1", ")", "\n", "\n", "patches", "=", "tf", ".", "gather_nd", "(", "points_pl", ",", "patches_idx", ")", "\n", "\n", "if", "self", ".", "centering", "==", "'root'", ":", "\n", "            ", "patches", "=", "tf", ".", "subtract", "(", "patches", ",", "tf", ".", "expand_dims", "(", "roots", ",", "axis", "=", "2", ")", ")", "\n", "\n", "", "if", "self", ".", "centering", "==", "'barycenter'", ":", "\n", "# subtract the barycenter instead of patch center", "\n", "            ", "patch_mean", "=", "tf", ".", "reduce_mean", "(", "patches", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "patches", "=", "tf", ".", "subtract", "(", "patches", ",", "patch_mean", ")", "\n", "\n", "", "return", "[", "patches", ",", "patches_idx", ",", "sq_patches_dist", ",", "sq_distance_mat", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.patches_builder.BuildPatches.compute_output_shape": [[75, 85], ["output_shapes.append", "output_shapes.append", "output_shapes.append", "output_shapes.append"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "nb", "=", "input_shape", "[", "0", "]", "[", "0", "]", "\n", "nv", "=", "input_shape", "[", "1", "]", "[", "1", "]", "\n", "output_shapes", "=", "[", "]", "\n", "output_shapes", ".", "append", "(", "(", "nb", ",", "nv", ",", "self", ".", "patch_size", ",", "3", ")", ")", "\n", "output_shapes", ".", "append", "(", "(", "nb", ",", "nv", ",", "self", ".", "patch_size", ",", "2", ")", ")", "\n", "output_shapes", ".", "append", "(", "(", "nb", ",", "nv", ",", "self", ".", "patch_size", ")", ")", "\n", "output_shapes", ".", "append", "(", "(", "nb", ",", "nv", ",", "nv", ")", ")", "\n", "\n", "return", "output_shapes", "", "", "", ""]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.conv_kernel.ConvKernel.__init__": [[7, 11], ["kernel_fn.get_shape", "keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_fn", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "kernel_fn", "=", "kernel_fn", "\n", "self", ".", "kernel_shape", "=", "kernel_fn", ".", "get_shape", "(", ")", "\n", "super", "(", "ConvKernel", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.conv_kernel.ConvKernel.build": [[12, 15], ["isinstance", "super().build"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.KdTreePooling.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input_shape", ",", "list", ")", "\n", "super", "(", "ConvKernel", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.conv_kernel.ConvKernel.call": [[16, 22], ["isinstance", "conv_kernel.ConvKernel.ConvKernel.kernel_fn.compute"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.compute"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "list", ")", "\n", "# conv_kernel = self.kernel_fn.compute(x[0], x[1])", "\n", "conv_kernel", "=", "self", ".", "kernel_fn", ".", "compute", "(", "*", "x", ")", "\n", "# conv_kernel /= float(x[0].get_shape()[2].value)", "\n", "return", "conv_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.conv_kernel.ConvKernel.compute_output_shape": [[24, 34], ["isinstance", "isinstance", "range", "len"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input_shape", ",", "list", ")", "\n", "nb", "=", "input_shape", "[", "0", "]", "[", "0", "]", "\n", "nv", "=", "input_shape", "[", "0", "]", "[", "1", "]", "\n", "np", "=", "input_shape", "[", "0", "]", "[", "2", "]", "\n", "\n", "if", "isinstance", "(", "self", ".", "kernel_shape", ",", "list", ")", ":", "\n", "            ", "return", "[", "(", "nb", ",", "nv", ",", "np", ",", ")", "+", "self", ".", "kernel_shape", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "kernel_shape", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "(", "nb", ",", "nv", ",", "np", ",", ")", "+", "self", ".", "kernel_shape", "", "", "", "", ""]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeConvElements.__init__": [[34, 114], ["min", "utils.sh_conv.ShKernel", "keras.int_shape", "keras.int_shape", "utils.patches_builder.BuildPatches", "utils.conv_kernel.ConvKernel", "keras.layers.AveragePooling1D", "keras.layers.AveragePooling1D"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "points_pl", ",", "params", ",", "roots", "=", "None", ")", ":", "\n", "        ", "if", "'conv_max_pool'", "in", "params", ":", "\n", "            ", "self", ".", "conv_max_pool", "=", "params", "[", "'conv_max_pool'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_max_pool", "=", "0", "\n", "\n", "", "if", "'normalize_patches'", "in", "params", ":", "\n", "            ", "self", ".", "normalize_patches", "=", "params", "[", "'normalize_patches'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "normalize_patches", "=", "False", "\n", "\n", "", "if", "'kernel_radius'", "in", "params", ":", "\n", "            ", "self", ".", "radius", "=", "params", "[", "'kernel_radius'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "radius", "=", "1.", "\n", "self", ".", "normalize_patches", "=", "True", "\n", "\n", "\n", "", "self", ".", "patch_size", "=", "params", "[", "'patch_size'", "]", "\n", "self", ".", "l_max", "=", "params", "[", "'l_max'", "]", "\n", "self", ".", "nr", "=", "params", "[", "'nr'", "]", "\n", "\n", "if", "'radial_fn'", "in", "params", ":", "\n", "            ", "self", ".", "radial_fn", "=", "params", "[", "'radial_fn'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "radial_fn", "=", "tf_gaussian", "\n", "\n", "", "\"\"\"  \n        self.radial_fn = params['radial_fn']\n        if params['radial_fn'] == 'hat':\n            self.radial_fn = tf_hat\n        else:\n            self.radial_fn = tf_gaussian\n        \"\"\"", "\n", "\n", "self", ".", "points_pl", "=", "points_pl", "\n", "self", ".", "batch_size", "=", "K", ".", "int_shape", "(", "self", ".", "points_pl", ")", "[", "0", "]", "\n", "self", ".", "num_of_points", "=", "K", ".", "int_shape", "(", "self", ".", "points_pl", ")", "[", "1", "]", "\n", "\n", "if", "'radial_spacing'", "in", "params", ":", "\n", "            ", "self", ".", "radial_spacing", "=", "params", "[", "'radial_spacing'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "radial_spacing", "=", "0", "\n", "", "if", "'tree_spacing'", "in", "params", ":", "\n", "            ", "self", ".", "tree_spacing", "=", "params", "[", "'tree_spacing'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "tree_spacing", "=", "0", "\n", "", "if", "'strides'", "in", "params", ":", "\n", "            ", "self", ".", "strides", "=", "params", "[", "'strides'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "strides", "=", "0", "\n", "", "if", "'keep_num_points'", "in", "params", ":", "\n", "            ", "self", ".", "keep_num_points", "=", "params", "[", "'keep_num_points'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "keep_num_points", "=", "True", "\n", "\n", "", "if", "roots", "is", "not", "None", ":", "\n", "            ", "self", ".", "roots", "=", "roots", "\n", "", "else", ":", "\n", "            ", "self", ".", "roots", "=", "points_pl", "\n", "\n", "", "if", "self", ".", "strides", ">", "0", ":", "\n", "            ", "self", ".", "roots", "=", "AveragePooling1D", "(", "pool_size", "=", "2", "**", "self", ".", "strides", ")", "(", "self", ".", "roots", ")", "\n", "", "self", ".", "points", "=", "points_pl", "\n", "if", "self", ".", "tree_spacing", ">", "0", ":", "\n", "            ", "self", ".", "points", "=", "AveragePooling1D", "(", "pool_size", "=", "2", "**", "self", ".", "tree_spacing", ")", "(", "self", ".", "points", ")", "\n", "\n", "# assert (self.num_of_points >= self.patch_size)", "\n", "\n", "", "self", ".", "patch_size", "=", "min", "(", "self", ".", "num_of_points", ",", "self", ".", "patch_size", ")", "\n", "P", "=", "BuildPatches", "(", "self", ".", "patch_size", ")", "(", "[", "self", ".", "points", ",", "self", ".", "roots", "]", ")", "\n", "self", ".", "patches", "=", "P", "[", "0", "]", "\n", "self", ".", "patches_idx", "=", "P", "[", "1", "]", "\n", "self", ".", "patches_sq_dist", "=", "P", "[", "2", "]", "\n", "self", ".", "sq_dist_mat", "=", "P", "[", "3", "]", "\n", "\n", "self", ".", "kernel_fn", "=", "ShKernel", "(", "self", ".", "nr", ",", "self", ".", "l_max", ",", "self", ".", "radius", ",", "self", ".", "radial_fn", ",", "radial_first", "=", "True", ",", "\n", "normalize_patch", "=", "self", ".", "normalize_patches", ",", "return_sh", "=", "True", ")", "\n", "\n", "self", ".", "conv_kernel", ",", "self", ".", "sh", "=", "ConvKernel", "(", "kernel_fn", "=", "self", ".", "kernel_fn", ")", "(", "[", "self", ".", "patches", ",", "self", ".", "patches_sq_dist", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShInvariantConv.__init__": [[119, 139], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ",", "l_max", ",", "nr", ",", "\n", "strides", "=", "0", ",", "\n", "tree_spacing", "=", "0", ",", "\n", "keep_num_points", "=", "True", ",", "\n", "max_pool", "=", "0", ",", "\n", "initializer", "=", "'glorot_uniform'", ",", "\n", "l2_regularizer", "=", "1.0e-3", ",", "\n", "with_relu", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "l_max", "=", "l_max", "\n", "self", ".", "nr", "=", "nr", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "tree_spacing", "=", "tree_spacing", "\n", "self", ".", "keep_num_points", "=", "keep_num_points", "\n", "self", ".", "initializer", "=", "initializer", "\n", "self", ".", "l2_regularizer", "=", "l2_regularizer", "\n", "self", ".", "with_relu", "=", "with_relu", "\n", "self", ".", "max_pool", "=", "max_pool", "\n", "\n", "super", "(", "BinaryTreeShInvariantConv", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShInvariantConv.build": [[140, 159], ["isinstance", "kd_tree_conv_layer.BinaryTreeShInvariantConv.add_weight", "kd_tree_conv_layer.BinaryTreeShInvariantConv.add_weight", "super().build", "keras.regularizers.l2", "keras.initializers.get", "keras.regularizers.get"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.KdTreePooling.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input_shape", ",", "list", ")", "\n", "# Create a trainable weight variable for this layer.", "\n", "# shape = (self.out_channels, self.l_max+1, self.nr, input_shape[0][-1])", "\n", "shape", "=", "(", "self", ".", "out_channels", ",", "input_shape", "[", "0", "]", "[", "-", "1", "]", ",", "self", ".", "nr", ",", "self", ".", "l_max", "+", "1", ")", "\n", "\n", "self", ".", "kernel_weights", "=", "self", ".", "add_weight", "(", "name", "=", "'kernel'", ",", "\n", "shape", "=", "shape", ",", "\n", "initializer", "=", "self", ".", "initializer", ",", "\n", "regularizer", "=", "regularizers", ".", "l2", "(", "self", ".", "l2_regularizer", ")", ",", "\n", "trainable", "=", "self", ".", "trainable", ")", "\n", "\n", "self", ".", "biases", "=", "self", ".", "add_weight", "(", "name", "=", "'bias'", ",", "\n", "shape", "=", "(", "self", ".", "out_channels", ",", ")", ",", "\n", "initializer", "=", "initializers", ".", "get", "(", "'zeros'", ")", ",", "\n", "regularizer", "=", "regularizers", ".", "get", "(", "None", ")", ",", "\n", "trainable", "=", "self", ".", "trainable", ")", "\n", "\n", "super", "(", "BinaryTreeShInvariantConv", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this at the end", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShInvariantConv.call": [[160, 202], ["isinstance", "tensorflow.gather_nd", "tensorflow.einsum", "tensorflow.multiply", "range", "tensorflow.stack", "tensorflow.sqrt", "tensorflow.einsum", "tensorflow.nn.bias_add", "layers.kd_tree_pooling.pool_input_kd", "tensorflow.reduce_sum", "L.append", "tensorflow.maximum", "keras.activations.relu", "layers.kd_tree_pooling.pool_input_kd", "layers.kd_tree_deconv.kd_tree_upsample"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.pool_input_kd", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.pool_input_kd", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_deconv.kd_tree_upsample"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "list", ")", "\n", "\n", "signal", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "tree_spacing", ">", "0", ":", "\n", "            ", "signal", "=", "pool_input_kd", "(", "x", "[", "0", "]", ",", "self", ".", "tree_spacing", ",", "pool_mode", "=", "'max'", ")", "\n", "\n", "", "patches_idx", "=", "x", "[", "1", "]", "\n", "conv_kernel", "=", "x", "[", "2", "]", "\n", "\n", "# y = sh_invar_conv(signal, x[1], x[2], self.kernel_weights, self.l_max)", "\n", "\n", "patches", "=", "tf", ".", "gather_nd", "(", "signal", ",", "patches_idx", ")", "\n", "\n", "y", "=", "tf", ".", "einsum", "(", "'bvprn,bvpc->bvcrn'", ",", "conv_kernel", ",", "patches", ")", "\n", "\n", "y", "=", "tf", ".", "multiply", "(", "y", ",", "y", ")", "\n", "L", "=", "[", "]", "\n", "p", "=", "0", "\n", "for", "l", "in", "range", "(", "0", ",", "self", ".", "l_max", "+", "1", ")", ":", "\n", "            ", "x", "=", "y", "[", ":", ",", ":", ",", ":", ",", ":", ",", "p", ":", "(", "p", "+", "2", "*", "l", "+", "1", ")", "]", "\n", "x", "=", "tf", ".", "reduce_sum", "(", "x", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "False", ")", "\n", "L", ".", "append", "(", "x", ")", "\n", "p", "+=", "2", "*", "l", "+", "1", "\n", "\n", "", "y", "=", "tf", ".", "stack", "(", "L", ",", "axis", "=", "-", "1", ")", "\n", "y", "=", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "y", ",", "0.0001", ")", ")", "\n", "y", "=", "tf", ".", "einsum", "(", "'ijrn,bvjrn->bvi'", ",", "self", ".", "kernel_weights", ",", "y", ")", "\n", "\n", "# K.bias_add(y, self.biases)", "\n", "y", "=", "tf", ".", "nn", ".", "bias_add", "(", "y", ",", "self", ".", "biases", ")", "\n", "\n", "if", "self", ".", "with_relu", ":", "\n", "            ", "y", "=", "activations", ".", "relu", "(", "y", ")", "\n", "\n", "", "if", "self", ".", "max_pool", ">", "0", ":", "\n", "            ", "y", "=", "pool_input_kd", "(", "y", ",", "self", ".", "max_pool", ",", "pool_mode", "=", "'max'", ")", "\n", "\n", "", "if", "self", ".", "keep_num_points", "and", "self", ".", "strides", ">", "0", ":", "\n", "            ", "y", "=", "kd_tree_upsample", "(", "y", ",", "self", ".", "strides", "+", "self", ".", "max_pool", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShInvariantConv.compute_output_shape": [[203, 210], ["isinstance", "int"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input_shape", ",", "list", ")", "\n", "if", "self", ".", "keep_num_points", ":", "\n", "            ", "return", "(", "input_shape", "[", "0", "]", "[", "0", "]", ",", "input_shape", "[", "0", "]", "[", "1", "]", ",", "self", ".", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "new_nv", "=", "int", "(", "input_shape", "[", "0", "]", "[", "1", "]", "/", "2", "**", "(", "self", ".", "strides", "+", "self", ".", "max_pool", ")", ")", "\n", "return", "(", "input_shape", "[", "0", "]", "[", "0", "]", ",", "new_nv", ",", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShInvariantConvLayer.__init__": [[229, 266], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "conv_elms", ",", "out_channels", "=", "None", ")", ":", "\n", "\n", "        ", "if", "out_channels", "is", "not", "None", ":", "\n", "            ", "self", ".", "out_channels", "=", "out_channels", "\n", "", "else", ":", "\n", "            ", "self", ".", "out_channels", "=", "params", "[", "'out_channels'", "]", "\n", "\n", "", "if", "'initializer'", "in", "params", ":", "\n", "            ", "self", ".", "initializer", "=", "params", "[", "'initializer'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "initializer", "=", "'glorot_uniform'", "\n", "\n", "", "if", "'l2_regularizer'", "in", "params", ":", "\n", "            ", "self", ".", "l2_regularizer", "=", "params", "[", "'l2_regularizer'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "l2_regularizer", "=", "0.0", "\n", "\n", "\n", "\n", "", "\"\"\"\n        self.l_max = params['l_max']\n        self.nr = params['nr']\n        self.strides = params['strides']\n        self.tree_spacing = params['tree_spacing']\n        self.keep_num_points = params['keep_num_points']\n        self.conv_max_pool = params['conv_max_pool']\n        \"\"\"", "\n", "\n", "self", ".", "l_max", "=", "conv_elms", ".", "l_max", "\n", "self", ".", "nr", "=", "conv_elms", ".", "nr", "\n", "self", ".", "strides", "=", "conv_elms", ".", "strides", "\n", "self", ".", "tree_spacing", "=", "conv_elms", ".", "tree_spacing", "\n", "self", ".", "keep_num_points", "=", "conv_elms", ".", "keep_num_points", "\n", "self", ".", "conv_max_pool", "=", "conv_elms", ".", "conv_max_pool", "\n", "\n", "self", ".", "patches_idx", "=", "conv_elms", ".", "patches_idx", "\n", "self", ".", "conv_kernel", "=", "conv_elms", ".", "conv_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShInvariantConvLayer.get_layer": [[267, 291], ["isinstance", "kd_tree_conv_layer.BinaryTreeShInvariantConv", "len", "keras.layers.BatchNormalization", "keras.layers.Activation"], "methods", ["None"], ["", "def", "get_layer", "(", "self", ",", "x", ",", "with_relu", "=", "True", ",", "with_bn", "=", "True", ",", "bn_decay", "=", "0.9", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "assert", "(", "len", "(", "x", ")", "==", "1", ")", "\n", "x", "=", "x", "[", "0", "]", "\n", "\n", "", "y", "=", "BinaryTreeShInvariantConv", "(", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "l_max", "=", "self", ".", "l_max", ",", "\n", "nr", "=", "self", ".", "nr", ",", "\n", "strides", "=", "self", ".", "strides", ",", "\n", "tree_spacing", "=", "self", ".", "tree_spacing", ",", "\n", "keep_num_points", "=", "self", ".", "keep_num_points", ",", "\n", "max_pool", "=", "self", ".", "conv_max_pool", ",", "\n", "initializer", "=", "self", ".", "initializer", ",", "\n", "l2_regularizer", "=", "self", ".", "l2_regularizer", ",", "\n", "with_relu", "=", "False", ")", "(", "[", "x", ",", "self", ".", "patches_idx", ",", "self", ".", "conv_kernel", "]", ")", "\n", "\n", "if", "with_bn", ":", "\n", "            ", "y", "=", "BatchNormalization", "(", "momentum", "=", "bn_decay", ")", "(", "y", ")", "\n", "\n", "", "if", "with_relu", ":", "\n", "            ", "y", "=", "Activation", "(", "'relu'", ")", "(", "y", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShConv.__init__": [[295, 315], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ",", "l_max", ",", "nr", ",", "\n", "strides", "=", "0", ",", "\n", "tree_spacing", "=", "0", ",", "\n", "keep_num_points", "=", "True", ",", "\n", "max_pool", "=", "0", ",", "\n", "initializer", "=", "'glorot_uniform'", ",", "\n", "l2_regularizer", "=", "1.0e-3", ",", "\n", "with_relu", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "l_max", "=", "l_max", "\n", "self", ".", "nr", "=", "nr", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "tree_spacing", "=", "tree_spacing", "\n", "self", ".", "keep_num_points", "=", "keep_num_points", "\n", "self", ".", "initializer", "=", "initializer", "\n", "self", ".", "l2_regularizer", "=", "l2_regularizer", "\n", "self", ".", "with_relu", "=", "with_relu", "\n", "self", ".", "max_pool", "=", "max_pool", "\n", "\n", "super", "(", "BinaryTreeShConv", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShConv.build": [[316, 335], ["isinstance", "kd_tree_conv_layer.BinaryTreeShConv.add_weight", "kd_tree_conv_layer.BinaryTreeShConv.add_weight", "super().build", "keras.regularizers.l2", "keras.initializers.get", "keras.regularizers.get"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.KdTreePooling.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input_shape", ",", "list", ")", "\n", "# Create a trainable weight variable for this layer.", "\n", "# shape = (self.out_channels, self.l_max+1, self.nr, input_shape[0][-1])", "\n", "shape", "=", "(", "self", ".", "out_channels", ",", "input_shape", "[", "0", "]", "[", "-", "1", "]", ",", "self", ".", "nr", ",", "(", "self", ".", "l_max", "+", "1", ")", "**", "2", ")", "\n", "\n", "self", ".", "kernel_weights", "=", "self", ".", "add_weight", "(", "name", "=", "'kernel'", ",", "\n", "shape", "=", "shape", ",", "\n", "initializer", "=", "self", ".", "initializer", ",", "\n", "regularizer", "=", "regularizers", ".", "l2", "(", "self", ".", "l2_regularizer", ")", ",", "\n", "trainable", "=", "self", ".", "trainable", ")", "\n", "\n", "self", ".", "biases", "=", "self", ".", "add_weight", "(", "name", "=", "'bias'", ",", "\n", "shape", "=", "(", "self", ".", "out_channels", ",", ")", ",", "\n", "initializer", "=", "initializers", ".", "get", "(", "'zeros'", ")", ",", "\n", "regularizer", "=", "regularizers", ".", "get", "(", "None", ")", ",", "\n", "trainable", "=", "self", ".", "trainable", ")", "\n", "\n", "super", "(", "BinaryTreeShConv", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this at the end", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShConv.call": [[336, 369], ["isinstance", "tensorflow.gather_nd", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.nn.bias_add", "layers.kd_tree_pooling.pool_input_kd", "keras.activations.relu", "layers.kd_tree_pooling.pool_input_kd", "layers.kd_tree_deconv.kd_tree_upsample"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.pool_input_kd", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.pool_input_kd", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_deconv.kd_tree_upsample"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "list", ")", "\n", "\n", "signal", "=", "x", "[", "0", "]", "\n", "if", "self", ".", "tree_spacing", ">", "0", ":", "\n", "            ", "signal", "=", "pool_input_kd", "(", "x", "[", "0", "]", ",", "self", ".", "tree_spacing", ",", "pool_mode", "=", "'max'", ")", "\n", "\n", "", "patches_idx", "=", "x", "[", "1", "]", "\n", "conv_kernel", "=", "x", "[", "2", "]", "\n", "\n", "# y = sh_invar_conv(signal, x[1], x[2], self.kernel_weights, self.l_max)", "\n", "\n", "patches", "=", "tf", ".", "gather_nd", "(", "signal", ",", "patches_idx", ")", "\n", "\n", "y", "=", "tf", ".", "einsum", "(", "'bvprn,bvpc->bvcrn'", ",", "conv_kernel", ",", "patches", ")", "\n", "\n", "\n", "\n", "y", "=", "tf", ".", "einsum", "(", "'ijrn,bvjrn->bvi'", ",", "self", ".", "kernel_weights", ",", "y", ")", "\n", "\n", "# K.bias_add(y, self.biases)", "\n", "y", "=", "tf", ".", "nn", ".", "bias_add", "(", "y", ",", "self", ".", "biases", ")", "\n", "\n", "if", "self", ".", "with_relu", ":", "\n", "            ", "y", "=", "activations", ".", "relu", "(", "y", ")", "\n", "\n", "", "if", "self", ".", "max_pool", ">", "0", ":", "\n", "            ", "y", "=", "pool_input_kd", "(", "y", ",", "self", ".", "max_pool", ",", "pool_mode", "=", "'max'", ")", "\n", "\n", "", "if", "self", ".", "keep_num_points", "and", "self", ".", "strides", ">", "0", ":", "\n", "            ", "y", "=", "kd_tree_upsample", "(", "y", ",", "self", ".", "strides", "+", "self", ".", "max_pool", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShConv.compute_output_shape": [[370, 377], ["isinstance", "int"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input_shape", ",", "list", ")", "\n", "if", "self", ".", "keep_num_points", ":", "\n", "            ", "return", "(", "input_shape", "[", "0", "]", "[", "0", "]", ",", "input_shape", "[", "0", "]", "[", "1", "]", ",", "self", ".", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "new_nv", "=", "int", "(", "input_shape", "[", "0", "]", "[", "1", "]", "/", "2", "**", "self", ".", "strides", ")", "\n", "return", "(", "input_shape", "[", "0", "]", "[", "0", "]", ",", "new_nv", ",", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShConvLayer.__init__": [[380, 416], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "conv_elms", ",", "out_channels", "=", "None", ")", ":", "\n", "        ", "if", "out_channels", "is", "not", "None", ":", "\n", "            ", "self", ".", "out_channels", "=", "out_channels", "\n", "", "else", ":", "\n", "            ", "self", ".", "out_channels", "=", "params", "[", "'out_channels'", "]", "\n", "\n", "", "if", "'initializer'", "in", "params", ":", "\n", "            ", "self", ".", "initializer", "=", "params", "[", "'initializer'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "initializer", "=", "'glorot_uniform'", "\n", "\n", "", "if", "'l2_regularizer'", "in", "params", ":", "\n", "            ", "self", ".", "l2_regularizer", "=", "params", "[", "'l2_regularizer'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "l2_regularizer", "=", "0.0", "\n", "\n", "\n", "\n", "", "\"\"\"\n        self.l_max = params['l_max']\n        self.nr = params['nr']\n        self.strides = params['strides']\n        self.tree_spacing = params['tree_spacing']\n        self.keep_num_points = params['keep_num_points']\n        self.conv_max_pool = params['conv_max_pool']\n        \"\"\"", "\n", "\n", "self", ".", "l_max", "=", "conv_elms", ".", "l_max", "\n", "self", ".", "nr", "=", "conv_elms", ".", "nr", "\n", "self", ".", "strides", "=", "conv_elms", ".", "strides", "\n", "self", ".", "tree_spacing", "=", "conv_elms", ".", "tree_spacing", "\n", "self", ".", "keep_num_points", "=", "conv_elms", ".", "keep_num_points", "\n", "self", ".", "conv_max_pool", "=", "conv_elms", ".", "conv_max_pool", "\n", "\n", "self", ".", "patches_idx", "=", "conv_elms", ".", "patches_idx", "\n", "self", ".", "conv_kernel", "=", "conv_elms", ".", "conv_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShConvLayer.get_layer": [[417, 441], ["isinstance", "kd_tree_conv_layer.BinaryTreeShConv", "len", "keras.layers.BatchNormalization", "keras.layers.Activation"], "methods", ["None"], ["", "def", "get_layer", "(", "self", ",", "x", ",", "with_relu", "=", "True", ",", "with_bn", "=", "True", ",", "bn_decay", "=", "0.9", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "assert", "(", "len", "(", "x", ")", "==", "1", ")", "\n", "x", "=", "x", "[", "0", "]", "\n", "\n", "", "y", "=", "BinaryTreeShConv", "(", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "l_max", "=", "self", ".", "l_max", ",", "\n", "nr", "=", "self", ".", "nr", ",", "\n", "strides", "=", "self", ".", "strides", ",", "\n", "tree_spacing", "=", "self", ".", "tree_spacing", ",", "\n", "keep_num_points", "=", "self", ".", "keep_num_points", ",", "\n", "max_pool", "=", "self", ".", "conv_max_pool", ",", "\n", "initializer", "=", "self", ".", "initializer", ",", "\n", "l2_regularizer", "=", "self", ".", "l2_regularizer", ",", "\n", "with_relu", "=", "False", ")", "(", "[", "x", ",", "self", ".", "patches_idx", ",", "self", ".", "conv_kernel", "]", ")", "\n", "\n", "if", "with_bn", ":", "\n", "            ", "y", "=", "BatchNormalization", "(", "momentum", "=", "bn_decay", ")", "(", "y", ")", "\n", "\n", "", "if", "with_relu", ":", "\n", "            ", "y", "=", "Activation", "(", "'relu'", ")", "(", "y", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.get_b_tree_conv_elems_params": [[12, 32], ["dict"], "function", ["None"], ["def", "get_b_tree_conv_elems_params", "(", "conf", ",", "stack_idx", ")", ":", "\n", "    ", "params", "=", "dict", "(", ")", "\n", "i", "=", "stack_idx", "\n", "params", "[", "'conv_max_pool'", "]", "=", "conf", "[", "'conv_max_pool'", "]", "[", "i", "]", "\n", "params", "[", "'kernel_radius'", "]", "=", "conf", "[", "'kernel_radius'", "]", "[", "i", "]", "\n", "params", "[", "'patch_size'", "]", "=", "conf", "[", "'patch_size'", "]", "[", "i", "]", "\n", "params", "[", "'l_max'", "]", "=", "conf", "[", "'l_max'", "]", "[", "i", "]", "\n", "params", "[", "'nr'", "]", "=", "conf", "[", "'nr'", "]", "[", "i", "]", "\n", "params", "[", "'radial_fn'", "]", "=", "conf", "[", "'radial_fn'", "]", "\n", "if", "conf", "[", "'radial_fn'", "]", "==", "'hat'", ":", "\n", "        ", "params", "[", "'radial_fn'", "]", "=", "tf_hat", "\n", "", "else", ":", "\n", "        ", "params", "[", "'radial_fn'", "]", "=", "tf_gaussian", "\n", "", "params", "[", "'normalize_patches'", "]", "=", "conf", "[", "'normalize_patches'", "]", "\n", "params", "[", "'radial_spacing'", "]", "=", "conf", "[", "'radial_spacing'", "]", "[", "i", "]", "\n", "params", "[", "'tree_spacing'", "]", "=", "conf", "[", "'tree_spacing'", "]", "[", "i", "]", "\n", "params", "[", "'strides'", "]", "=", "conf", "[", "'strides'", "]", "[", "i", "]", "\n", "params", "[", "'keep_num_points'", "]", "=", "conf", "[", "'keep_num_points'", "]", "[", "i", "]", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.b_tree_sh_inv_conv_params": [[211, 226], ["dict"], "function", ["None"], ["", "", "", "def", "b_tree_sh_inv_conv_params", "(", "config", ",", "stack_idx", ",", "layer_idx", ")", ":", "\n", "    ", "params", "=", "dict", "(", ")", "\n", "\n", "i", "=", "stack_idx", "\n", "params", "[", "'out_channels'", "]", "=", "config", "[", "'out_channels'", "]", "[", "i", "]", "[", "layer_idx", "]", "\n", "params", "[", "'initializer'", "]", "=", "config", "[", "'initializer'", "]", "\n", "params", "[", "'l2_regularizer'", "]", "=", "config", "[", "'l2_regularizer'", "]", "\n", "params", "[", "'l_max'", "]", "=", "config", "[", "'l_max'", "]", "[", "i", "]", "\n", "params", "[", "'nr'", "]", "=", "config", "[", "'nr'", "]", "[", "i", "]", "\n", "params", "[", "'strides'", "]", "=", "config", "[", "'strides'", "]", "[", "i", "]", "\n", "params", "[", "'tree_spacing'", "]", "=", "config", "[", "'tree_spacing'", "]", "[", "i", "]", "\n", "params", "[", "'keep_num_points'", "]", "=", "config", "[", "'keep_num_points'", "]", "[", "i", "]", "\n", "params", "[", "'conv_max_pool'", "]", "=", "config", "[", "'conv_max_pool'", "]", "[", "i", "]", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_deconv.KdTreeDeconv.__init__": [[32, 47], ["keras.layers.Layer.__init__", "utils.pointclouds_utils.is_power2", "utils.pointclouds_utils.is_power2", "int", "numpy.ceil", "utils.pointclouds_utils.is_power2", "utils.pointclouds_utils.is_power2", "int", "numpy.ceil", "numpy.log", "numpy.log", "pc1.get_shape", "pc2.get_shape", "numpy.log", "numpy.log", "float", "float"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.__init__", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.is_power2", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.is_power2", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.is_power2", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.is_power2", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape"], ["    ", "def", "__init__", "(", "self", ",", "nv1", "=", "None", ",", "nv2", "=", "None", ",", "pc1", "=", "None", ",", "pc2", "=", "None", ",", "k", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "(", "nv1", "is", "not", "None", ")", "and", "(", "nv2", "is", "not", "None", ")", ":", "\n", "            ", "assert", "(", "is_power2", "(", "nv1", ")", ")", "\n", "assert", "(", "is_power2", "(", "nv2", ")", ")", "\n", "self", ".", "k", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "log", "(", "nv2", "/", "nv1", ")", "/", "np", ".", "log", "(", "2.", ")", ")", ")", "\n", "", "elif", "(", "pc1", "is", "not", "None", ")", "and", "(", "pc2", "is", "not", "None", ")", ":", "\n", "            ", "nv1", "=", "pc1", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "nv2", "=", "pc2", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "assert", "(", "is_power2", "(", "nv1", ")", ")", "\n", "assert", "(", "is_power2", "(", "nv2", ")", ")", "\n", "self", ".", "k", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "log", "(", "float", "(", "nv2", ")", "/", "float", "(", "nv1", ")", ")", "/", "np", ".", "log", "(", "2.", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "k", "=", "k", "\n", "\n", "", "super", "(", "KdTreeDeconv", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_deconv.KdTreeDeconv.build": [[48, 51], ["super().build"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.KdTreePooling.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "# assert isinstance(input_shape, list)", "\n", "        ", "super", "(", "KdTreeDeconv", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this at the end", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_deconv.KdTreeDeconv.call": [[52, 63], ["isinstance", "range", "kd_tree_deconv.kd_tree_upsample", "len", "kd_tree_deconv.kd_tree_upsample", "kd_tree_upsample.append"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_deconv.kd_tree_upsample", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_deconv.kd_tree_upsample"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "# assert isinstance(x, list)", "\n", "        ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "                ", "yi", "=", "kd_tree_upsample", "(", "x", "[", "i", "]", ",", "self", ".", "k", ")", "\n", "\n", "y", ".", "append", "(", "yi", ")", "\n", "", "", "else", ":", "\n", "            ", "y", "=", "kd_tree_upsample", "(", "x", ",", "self", ".", "k", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_deconv.KdTreeDeconv.compute_output_shape": [[64, 79], ["isinstance", "tuple", "range", "list", "len", "list", "output_shapes.append", "tuple"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "# assert isinstance(input_shape, list)", "\n", "\n", "        ", "if", "isinstance", "(", "input_shape", ",", "list", ")", ":", "\n", "            ", "output_shapes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "input_shape", ")", ")", ":", "\n", "                ", "shape", "=", "list", "(", "input_shape", "[", "i", "]", ")", "\n", "new_shape", "=", "[", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "*", "(", "2", "**", "self", ".", "k", ")", "]", "+", "shape", "[", "2", ":", "]", "\n", "\n", "output_shapes", ".", "append", "(", "tuple", "(", "new_shape", ")", ")", "\n", "", "return", "output_shapes", "\n", "", "else", ":", "\n", "            ", "shape", "=", "list", "(", "input_shape", ")", "\n", "new_shape", "=", "[", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "*", "(", "2", "**", "self", ".", "k", ")", "]", "+", "shape", "[", "2", ":", "]", "\n", "", "return", "tuple", "(", "new_shape", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_deconv.kd_tree_upsample": [[7, 28], ["keras.backend.ndim", "list", "tensorflow.expand_dims", "tensorflow.tile", "tuple", "tensorflow.reshape", "keras.backend.int_shape", "keras.backend.int_shape", "keras.backend.int_shape", "keras.backend.int_shape", "tuple"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.tile"], ["def", "kd_tree_upsample", "(", "x", ",", "k", ")", ":", "\n", "    ", "nb", "=", "K", ".", "int_shape", "(", "x", ")", "[", "0", "]", "\n", "nv", "=", "K", ".", "int_shape", "(", "x", ")", "[", "1", "]", "\n", "nc", "=", "K", ".", "int_shape", "(", "x", ")", "[", "-", "1", "]", "\n", "\n", "n", "=", "K", ".", "ndim", "(", "x", ")", "\n", "shape", "=", "list", "(", "K", ".", "int_shape", "(", "x", ")", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "axis", "=", "2", ")", "\n", "tile", "=", "(", "1", ",", "1", ",", "2", "**", "k", ")", "+", "tuple", "(", "[", "1", "]", "*", "(", "n", "-", "2", ")", ")", "\n", "x", "=", "tf", ".", "tile", "(", "x", ",", "tile", ")", "\n", "\n", "new_shape", "=", "tuple", "(", "[", "shape", "[", "0", "]", ",", "(", "2", "**", "k", ")", "*", "shape", "[", "1", "]", "]", "+", "shape", "[", "2", ":", "]", ")", "\n", "\n", "\"\"\"\n    x = K.expand_dims(x, axis=2)\n    x = K.repeat_elements(x, rep=2**k, axis=2)\n    x = K.permute_dimensions(x, pattern=(0, 2, 1, 3))\n    \"\"\"", "\n", "\n", "# x = tf.transpose(x, perm=(0, 2, 1, 3))", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "shape", "=", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.KdTreePooling.__init__": [[51, 69], ["keras.layers.Layer.__init__", "numpy.rint", "isinstance", "numpy.log", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "None", ",", "ratio", "=", "None", ",", "pool_mode", "=", "None", ",", "same", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "same", "=", "same", "\n", "\n", "self", ".", "k", "=", "1", "\n", "\n", "\n", "if", "k", "is", "not", "None", ":", "\n", "            ", "self", ".", "k", "=", "k", "\n", "\n", "", "if", "ratio", "is", "not", "None", ":", "\n", "            ", "self", ".", "k", "=", "np", ".", "rint", "(", "np", ".", "log", "(", "ratio", ")", "/", "np", ".", "log", "(", "2.", ")", ")", "\n", "\n", "", "if", "pool_mode", "is", "None", ":", "\n", "            ", "self", ".", "pool_mode", "=", "[", "'max'", "]", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "pool_mode", ",", "list", ")", "\n", "self", ".", "pool_mode", "=", "pool_mode", "\n", "", "super", "(", "KdTreePooling", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.KdTreePooling.build": [[70, 73], ["isinstance", "super().build"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.KdTreePooling.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input_shape", ",", "list", ")", "\n", "super", "(", "KdTreePooling", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.KdTreePooling.call": [[74, 97], ["isinstance", "range", "len", "len", "kd_tree_pooling.pool_input_kd", "y.append", "len", "len", "y.append", "len", "layers.kd_tree_deconv.kd_tree_upsample", "kd_tree_pooling.pool1d"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.pool_input_kd", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_deconv.kd_tree_upsample", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.pool1d"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "list", ")", "\n", "assert", "(", "len", "(", "x", ")", "<=", "len", "(", "self", ".", "pool_mode", ")", "+", "1", ")", "\n", "y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pool_mode", ")", ")", ":", "\n", "            ", "pooled", "=", "pool_input_kd", "(", "x", "[", "i", "]", ",", "self", ".", "k", ",", "self", ".", "pool_mode", "[", "i", "]", ")", "\n", "if", "self", ".", "same", ":", "\n", "                ", "pooled", "=", "kd_tree_upsample", "(", "pooled", ",", "self", ".", "k", ")", "\n", "", "y", ".", "append", "(", "pooled", ")", "\n", "\n", "", "if", "len", "(", "x", ")", ">", "len", "(", "self", ".", "pool_mode", ")", ":", "\n", "            ", "if", "self", ".", "same", ":", "\n", "                ", "pooled_points_pl", "=", "x", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "pooled_points_pl", "=", "pool1d", "(", "x", "=", "x", "[", "-", "1", "]", ",", "\n", "pool_size", "=", "(", "2", "**", "self", ".", "k", ",", ")", ",", "\n", "strides", "=", "(", "2", "**", "self", ".", "k", ",", ")", ",", "\n", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "pool_mode", "=", "'avg'", ")", "\n", "\n", "", "y", ".", "append", "(", "pooled_points_pl", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.KdTreePooling.compute_output_shape": [[98, 107], ["isinstance", "range", "len", "list", "int", "output_shape.append", "tuple"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "input_shape", ",", "list", ")", "\n", "output_shape", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "input_shape", ")", ")", ":", "\n", "            ", "shape", "=", "list", "(", "input_shape", "[", "i", "]", ")", "\n", "new_nv", "=", "int", "(", "input_shape", "[", "i", "]", "[", "1", "]", "/", "(", "2", "**", "self", ".", "k", ")", ")", "\n", "new_shape", "=", "[", "input_shape", "[", "i", "]", "[", "0", "]", ",", "new_nv", "]", "+", "shape", "[", "2", ":", "]", "\n", "output_shape", ".", "append", "(", "tuple", "(", "new_shape", ")", ")", "\n", "", "return", "output_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.pool1d": [[7, 17], ["keras.backend.expand_dims", "keras.backend.pool2d", "keras.backend.squeeze"], "function", ["None"], ["def", "pool1d", "(", "x", ",", "pool_size", ",", "strides", "=", "(", "1", ",", ")", ",", "padding", "=", "'valid'", ",", "data_format", "=", "'channels_last'", ",", "pool_mode", "=", "'max'", ")", ":", "\n", "\n", "    ", "x", "=", "K", ".", "expand_dims", "(", "x", ",", "axis", "=", "2", ")", "# add dummy last dimension", "\n", "x", "=", "K", ".", "pool2d", "(", "x", "=", "x", ",", "\n", "pool_size", "=", "pool_size", "+", "(", "1", ",", ")", ",", "\n", "strides", "=", "strides", "+", "(", "1", ",", ")", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "data_format", ",", "\n", "pool_mode", "=", "pool_mode", ")", "\n", "return", "K", ".", "squeeze", "(", "x", ",", "2", ")", "# remove dummy last dimension", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_pooling.pool_input_kd": [[22, 47], ["len", "pool_func", "list", "keras.backend.int_shape"], "function", ["None"], ["", "def", "pool_input_kd", "(", "inputs", ",", "k", ",", "pool_mode", "=", "'max'", ")", ":", "\n", "\n", "    ", "rank", "=", "len", "(", "list", "(", "K", ".", "int_shape", "(", "inputs", ")", ")", ")", "\n", "\n", "k", "=", "2", "**", "k", "\n", "\n", "assert", "3", "<=", "rank", "<=", "5", "\n", "\n", "if", "rank", "==", "3", ":", "\n", "        ", "pool_func", "=", "pool1d", "\n", "pool_size", "=", "(", "k", ",", ")", "\n", "", "if", "rank", "==", "4", ":", "\n", "        ", "pool_func", "=", "K", ".", "pool2d", "\n", "pool_size", "=", "(", "k", ",", "1", ")", "\n", "", "if", "rank", "==", "5", ":", "\n", "        ", "pool_func", "=", "K", ".", "pool3d", "\n", "pool_size", "=", "(", "k", ",", "1", ",", "1", ")", "\n", "\n", "", "pooled_input", "=", "pool_func", "(", "x", "=", "inputs", ",", "\n", "pool_size", "=", "pool_size", ",", "\n", "strides", "=", "pool_size", ",", "\n", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "'channels_last'", ",", "\n", "pool_mode", "=", "pool_mode", ")", "\n", "return", "pooled_input", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.seg_network.SegmentationNetwork.__init__": [[10, 54], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "method", ")", ":", "\n", "        ", "self", ".", "config", "=", "method", "[", "'config'", "]", "\n", "\n", "if", "'with_bn'", "in", "self", ".", "config", ":", "\n", "            ", "self", ".", "with_bn", "=", "self", ".", "config", "[", "'with_bn'", "]", "\n", "if", "self", ".", "with_bn", ":", "\n", "                ", "self", ".", "bn_momentum", "=", "self", ".", "config", "[", "'bn_momentum'", "]", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "with_bn", "=", "False", "\n", "\n", "", "self", ".", "InputLayer", "=", "None", "\n", "if", "'input_layer'", "in", "method", ":", "\n", "            ", "self", ".", "InputLayer", "=", "method", "[", "'input_layer'", "]", "\n", "\n", "# self.ConvLayer = method['conv_layer']", "\n", "# self.ConvElements = method['conv_elems']", "\n", "# self.PoolingLayer = method['pooling_layer']", "\n", "", "self", ".", "DeconvLayer", "=", "method", "[", "'deconv_layer'", "]", "\n", "self", ".", "PostProcessLayer", "=", "None", "\n", "if", "'postprocess_layer'", "in", "method", ":", "\n", "            ", "self", ".", "PostProcessLayer", "=", "method", "[", "'postprocess_layer'", "]", "\n", "\n", "", "self", ".", "ConvLayer", "=", "self", ".", "config", "[", "'conv_layer'", "]", "\n", "self", ".", "ConvElements", "=", "self", ".", "config", "[", "'conv_elms'", "]", "\n", "self", ".", "conv_elms_params", "=", "self", ".", "config", "[", "'conv_elms_params'", "]", "\n", "self", ".", "PoolingLayer", "=", "self", ".", "config", "[", "'pool_layer'", "]", "\n", "self", ".", "with_bn", "=", "self", ".", "config", "[", "'with_bn'", "]", "\n", "self", ".", "bn_momentum", "=", "self", ".", "config", "[", "'bn_momentum'", "]", "\n", "self", ".", "conv_params", "=", "self", ".", "config", "[", "'conv_params'", "]", "\n", "\n", "if", "'pool_ratio'", "in", "self", ".", "config", ":", "\n", "            ", "self", ".", "pool_size", "=", "self", ".", "config", "[", "'pool_ratio'", "]", "\n", "", "elif", "'pool_output_size'", "in", "self", ".", "config", ":", "\n", "            ", "self", ".", "pool_size", "=", "self", ".", "config", "[", "'pool_output_size'", "]", "\n", "\n", "", "self", ".", "num_stacks", "=", "self", ".", "config", "[", "'num_conv_stacks'", "]", "\n", "self", ".", "num_blocks_per_stack", "=", "self", ".", "config", "[", "'num_blocks_per_conv_stack'", "]", "\n", "self", ".", "pool_mode", "=", "self", ".", "config", "[", "'pool_mode'", "]", "\n", "\n", "# def __call__(self, x, pointcloud, *args, **kwargs):", "\n", "\n", "self", ".", "conv_elms", "=", "[", "]", "\n", "self", ".", "conv_stacks", "=", "[", "]", "\n", "self", ".", "pc_hierarchy", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.seg_network.SegmentationNetwork.get_network_model": [[55, 152], ["keras.layers.Input", "keras.layers.Input", "seg_network.SegmentationNetwork.pc_hierarchy.append", "range", "range", "seg_network.SegmentationNetwork.ConvElements", "seg_network.SegmentationNetwork.ConvLayer", "seg_network.SegmentationNetwork.get_layer", "keras.engine.Model", "keras.layers.Input", "seg_network.SegmentationNetwork.ConvElements", "seg_network.SegmentationNetwork.conv_elms.append", "seg_network.SegmentationNetwork.ConvLayer", "seg_network.SegmentationNetwork.get_layer", "seg_network.SegmentationNetwork.conv_stacks.append", "isinstance", "isinstance", "seg_network.SegmentationNetwork.pc_hierarchy.append", "seg_network.SegmentationNetwork.ConvLayer", "seg_network.SegmentationNetwork.get_layer", "isinstance", "keras.layers.Activation", "keras.layers.Concatenate", "keras.layers.Input", "seg_network.SegmentationNetwork.PoolingLayer", "len", "seg_network.SegmentationNetwork.DeconvLayer", "range", "isinstance", "keras.constant", "seg_network.SegmentationNetwork.InputLayer", "len", "len", "seg_network.SegmentationNetwork.get_layer.append", "keras.layers.Concatenate", "network_tmp.append", "keras.constant", "keras.layers.Dropout", "keras.layers.Concatenate", "keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShConvLayer.get_layer", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShConvLayer.get_layer", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShConvLayer.get_layer"], ["", "def", "get_network_model", "(", "self", ",", "part_num", ",", "batch_size", ",", "num_points", ",", "num_categories", "=", "1", ")", ":", "\n", "\n", "# self.batch_size = batch_size", "\n", "# self.num_points = num_points", "\n", "# self.num_points = self.reference_shape.shape[0]", "\n", "\n", "# pointclouds", "\n", "\n", "        ", "pointcloud", "=", "Input", "(", "shape", "=", "(", "num_points", ",", "3", ")", ",", "batch_shape", "=", "(", "batch_size", ",", "num_points", ",", "3", ")", ")", "\n", "\n", "self", ".", "pointcloud", "=", "pointcloud", "\n", "\n", "if", "self", ".", "InputLayer", "is", "'3d'", ":", "\n", "            ", "input_signal", "=", "Input", "(", "tensor", "=", "K", ".", "constant", "(", "1.", ",", "'float32'", ",", "(", "batch_size", ",", "num_points", ",", "1", ")", ")", ")", "\n", "input_signal_", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "input_signal", ",", "pointcloud", "]", ")", "\n", "", "elif", "self", ".", "InputLayer", "is", "not", "None", ":", "\n", "            ", "input_signal", "=", "self", ".", "InputLayer", "(", ")", "(", "pointcloud", ")", "\n", "input_signal_", "=", "input_signal", "\n", "", "else", ":", "\n", "# input_signal = Input(shape=(num_points, 2), batch_shape=(batch_size, num_points, 2))", "\n", "            ", "input_signal", "=", "Input", "(", "tensor", "=", "K", ".", "constant", "(", "1.", ",", "'float32'", ",", "(", "batch_size", ",", "num_points", ",", "1", ")", ")", ")", "\n", "input_signal_", "=", "input_signal", "\n", "\n", "", "one_hot_label", "=", "Input", "(", "shape", "=", "(", "num_categories", ",", ")", ",", "batch_shape", "=", "(", "batch_size", ",", "num_categories", ")", ")", "\n", "\n", "network", "=", "input_signal_", "\n", "\n", "self", ".", "pc_hierarchy", ".", "append", "(", "pointcloud", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stacks", ")", ":", "\n", "            ", "conv_elm", "=", "self", ".", "ConvElements", "(", "pointcloud", ",", "self", ".", "conv_elms_params", "[", "i", "]", ")", "\n", "self", ".", "conv_elms", ".", "append", "(", "conv_elm", ")", "\n", "conv_layer", "=", "self", ".", "ConvLayer", "(", "self", ".", "conv_params", "[", "i", "]", ",", "conv_elm", ")", "\n", "conv_layer", "=", "conv_layer", ".", "get_layer", "(", "network", ",", "\n", "with_bn", "=", "self", ".", "with_bn", ",", "\n", "bn_decay", "=", "self", ".", "bn_momentum", ")", "\n", "self", ".", "conv_stacks", ".", "append", "(", "conv_layer", ")", "\n", "if", "isinstance", "(", "conv_layer", ",", "list", ")", ":", "\n", "                ", "to_pool", "=", "conv_layer", "+", "[", "pointcloud", "]", "\n", "", "else", ":", "\n", "                ", "to_pool", "=", "[", "conv_layer", ",", "pointcloud", "]", "\n", "", "pooled", "=", "self", ".", "PoolingLayer", "(", "ratio", "=", "self", ".", "pool_size", "[", "i", "]", ",", "\n", "pool_mode", "=", "self", ".", "pool_mode", "[", "i", "]", ")", "(", "to_pool", ")", "\n", "\n", "if", "isinstance", "(", "conv_layer", ",", "list", ")", ":", "\n", "                ", "network", "=", "pooled", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "network", "=", "pooled", "[", "0", "]", "\n", "", "pointcloud", "=", "pooled", "[", "-", "1", "]", "\n", "self", ".", "pc_hierarchy", ".", "append", "(", "pointcloud", ")", "\n", "\n", "", "\"\"\"\n        one_hot_label_expand = RepeatVector(n=K.int_shape(network)[1])(one_hot_label)\n        network = Concatenate(axis=-1)([network, one_hot_label_expand])\n        \"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pc_hierarchy", ")", "-", "1", ")", ":", "\n", "            ", "j", "=", "len", "(", "self", ".", "pc_hierarchy", ")", "-", "2", "-", "i", "\n", "deconvnet", "=", "self", ".", "DeconvLayer", "(", "pc1", "=", "self", ".", "pc_hierarchy", "[", "j", "+", "1", "]", ",", "pc2", "=", "self", ".", "pc_hierarchy", "[", "j", "]", ")", "(", "network", ")", "\n", "conv_elm", "=", "self", ".", "conv_elms", "[", "j", "]", "\n", "conv_layer", "=", "self", ".", "ConvLayer", "(", "self", ".", "conv_params", "[", "j", "]", ",", "conv_elm", ")", "\n", "convnet", "=", "conv_layer", ".", "get_layer", "(", "deconvnet", ",", "\n", "with_bn", "=", "self", ".", "with_bn", ",", "\n", "bn_decay", "=", "self", ".", "bn_momentum", ")", "\n", "if", "isinstance", "(", "convnet", ",", "list", ")", ":", "\n", "                ", "network", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "convnet", ")", ")", ":", "\n", "                    ", "network", ".", "append", "(", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "self", ".", "conv_stacks", "[", "j", "]", "[", "i", "]", ",", "convnet", "[", "i", "]", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "network", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "self", ".", "conv_stacks", "[", "j", "]", ",", "convnet", "]", ")", "\n", "\n", "", "if", "j", "+", "1", "<=", "2", ":", "\n", "                ", "if", "isinstance", "(", "network", ",", "list", ")", ":", "\n", "                    ", "network_tmp", "=", "[", "]", "\n", "network_tmp", ".", "append", "(", "Dropout", "(", "rate", "=", "0.5", ")", "(", "network", "[", "0", "]", ")", ")", "\n", "network_tmp", "+=", "network", "[", "1", ":", "]", "\n", "network", "=", "network_tmp", "\n", "", "else", ":", "\n", "                    ", "network", "=", "Dropout", "(", "rate", "=", "0.5", ")", "(", "network", ")", "\n", "\n", "", "", "", "conv_elm", "=", "self", ".", "ConvElements", "(", "self", ".", "pointcloud", ",", "self", ".", "config", "[", "'classif_layer_elms_params'", "]", ")", "\n", "# conv_elm = self.conv_elms[0]", "\n", "conv_layer", "=", "self", ".", "ConvLayer", "(", "{", "'out_channels'", ":", "part_num", "}", ",", "conv_elm", ")", "\n", "network", "=", "conv_layer", ".", "get_layer", "(", "network", ",", "with_bn", "=", "False", ",", "with_relu", "=", "False", ",", "bn_decay", "=", "self", ".", "bn_momentum", ")", "\n", "\n", "output", "=", "Activation", "(", "'softmax'", ")", "(", "network", ")", "\n", "\n", "\n", "# output = Dense(units=part_num, activation='softmax')(network)", "\n", "\n", "if", "self", ".", "InputLayer", "==", "'3d'", ":", "\n", "            ", "inputs", "=", "[", "self", ".", "pointcloud", ",", "one_hot_label", ",", "input_signal", "]", "\n", "", "elif", "self", ".", "InputLayer", "is", "not", "None", ":", "\n", "            ", "inputs", "=", "[", "self", ".", "pointcloud", ",", "one_hot_label", "]", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "[", "self", ".", "pointcloud", ",", "one_hot_label", ",", "input_signal", "]", "\n", "\n", "", "return", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.ConvNet.__init__": [[10, 72], ["keras.int_shape", "keras.int_shape", "range", "conv_net.ConvNet.ConvElements", "conv_net.ConvNet.conv_elms.append", "range", "conv_net.ConvNet.conv_stacks.append", "conv_net.ConvNet.pc_hierarchy.append", "conv_net.ConvNet.ConvLayer", "conv_net.ConvNet.get_layer", "len", "isinstance", "conv_net.ConvNet.PoolingLayer", "conv_net.ConvNet.PoolingLayer"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShConvLayer.get_layer"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "pointclouds", ",", "config", ")", ":", "\n", "        ", "self", ".", "ConvLayer", "=", "config", "[", "'conv_layer'", "]", "\n", "self", ".", "ConvElements", "=", "config", "[", "'conv_elms'", "]", "\n", "self", ".", "conv_elms_params", "=", "config", "[", "'conv_elms_params'", "]", "\n", "self", ".", "PoolingLayer", "=", "config", "[", "'pool_layer'", "]", "\n", "self", ".", "with_bn", "=", "config", "[", "'with_bn'", "]", "\n", "self", ".", "bn_momentum", "=", "config", "[", "'bn_momentum'", "]", "\n", "self", ".", "conv_params", "=", "config", "[", "'conv_params'", "]", "\n", "\n", "if", "'pool_ratio'", "in", "config", ":", "\n", "            ", "self", ".", "pool_size", "=", "config", "[", "'pool_ratio'", "]", "\n", "", "elif", "'pool_output_size'", "in", "config", ":", "\n", "            ", "self", ".", "pool_size", "=", "config", "[", "'pool_size'", "]", "\n", "\n", "", "self", ".", "num_stacks", "=", "config", "[", "'num_conv_stacks'", "]", "\n", "self", ".", "num_blocks_per_stack", "=", "config", "[", "'num_blocks_per_conv_stack'", "]", "\n", "self", ".", "pool_mode", "=", "config", "[", "'pool_mode'", "]", "\n", "\n", "# def __call__(self, x, pointcloud, *args, **kwargs):", "\n", "\n", "input_shape", "=", "K", ".", "int_shape", "(", "x", ")", "\n", "pc_shape", "=", "K", ".", "int_shape", "(", "pointclouds", ")", "\n", "num_batches", "=", "input_shape", "[", "0", "]", "\n", "num_points", "=", "input_shape", "[", "1", "]", "\n", "\n", "network", "=", "x", "\n", "\n", "self", ".", "conv_elms", "=", "[", "]", "\n", "self", ".", "conv_stacks", "=", "[", "]", "\n", "self", ".", "pc_hierarchy", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "stack_index", "in", "range", "(", "self", ".", "num_stacks", ")", ":", "\n", "            ", "conv_elms", "=", "self", ".", "ConvElements", "(", "pointclouds", ",", "self", ".", "conv_elms_params", "[", "stack_index", "]", ")", "\n", "self", ".", "conv_elms", ".", "append", "(", "conv_elms", ")", "\n", "l", "=", "[", "]", "\n", "conv_params", "=", "self", ".", "conv_params", "[", "stack_index", "]", "\n", "for", "layer_index", "in", "range", "(", "self", ".", "num_blocks_per_stack", "[", "stack_index", "]", ")", ":", "\n", "                ", "conv_layer", "=", "self", ".", "ConvLayer", "(", "conv_params", ",", "conv_elms", ")", "\n", "network", "=", "conv_layer", ".", "get_layer", "(", "network", ",", "with_bn", "=", "self", ".", "with_bn", ",", "bn_decay", "=", "self", ".", "bn_momentum", ")", "\n", "\n", "", "self", ".", "conv_stacks", ".", "append", "(", "network", ")", "\n", "self", ".", "pc_hierarchy", ".", "append", "(", "pointclouds", ")", "\n", "if", "stack_index", "<", "len", "(", "self", ".", "pool_size", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "network", ",", "list", ")", ":", "\n", "                    ", "network", "=", "[", "network", "]", "\n", "", "to_pool", "=", "network", "+", "[", "pointclouds", "]", "\n", "\n", "if", "'pool_ratio'", "in", "config", ":", "\n", "                    ", "pooled", "=", "self", ".", "PoolingLayer", "(", "ratio", "=", "self", ".", "pool_size", "[", "stack_index", "]", ",", "\n", "pool_mode", "=", "self", ".", "pool_mode", "[", "stack_index", "]", ")", "(", "to_pool", ")", "\n", "", "else", ":", "\n", "                    ", "pooled", "=", "self", ".", "PoolingLayer", "(", "output_size", "=", "self", ".", "pool_size", "[", "stack_index", "]", ",", "\n", "pool_mode", "=", "self", ".", "pool_mode", "[", "stack_index", "]", ")", "(", "to_pool", ")", "\n", "\n", "", "network", "=", "pooled", "[", ":", "-", "1", "]", "\n", "pointclouds", "=", "pooled", "[", "-", "1", "]", "\n", "\n", "# self.pc_hierarchy.append(pointclouds)", "\n", "\n", "", "", "self", ".", "output", "=", "[", "network", ",", "pointclouds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.ConvNet.get_output": [[73, 75], ["None"], "methods", ["None"], ["", "def", "get_output", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.ConvNet.get_conv_stacks": [[76, 78], ["None"], "methods", ["None"], ["", "def", "get_conv_stacks", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conv_stacks", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.ConvNet.get_pc_hierarchy": [[79, 81], ["None"], "methods", ["None"], ["", "def", "get_pc_hierarchy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pc_hierarchy", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.ConvNet.get_conv_elms": [[82, 84], ["None"], "methods", ["None"], ["", "def", "get_conv_elms", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conv_elms", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNet.__init__": [[87, 160], ["len", "range", "conv_net.DeconvNet.deconv_stacks.append", "conv_net.get_output", "conv_net.DeconvNet.deconv_stacks.append", "conv_net.DeconvNet.ConvLayer", "conv_net.DeconvNet.get_layer", "isinstance", "isinstance", "conv_net.DeconvNet.DeconvLayer", "isinstance", "range", "len", "len", "len", "network.append", "keras.layers.Concatenate", "keras.layers.Concatenate"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNetBis.get_output", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShConvLayer.get_layer"], ["    ", "def", "__init__", "(", "self", ",", "conv_net", ",", "deconv_layer", ",", "\n", "num_deconv_stacks", "=", "None", ",", "\n", "num_blocks_per_stack", "=", "None", ",", "\n", "out_channels", "=", "None", ")", ":", "\n", "        ", "self", ".", "DeconvLayer", "=", "deconv_layer", "\n", "self", ".", "ConvLayer", "=", "conv_net", ".", "ConvLayer", "\n", "self", ".", "pointclouds_down", "=", "conv_net", ".", "pc_hierarchy", "\n", "self", ".", "conv_stacks", "=", "conv_net", ".", "conv_stacks", "\n", "self", ".", "conv_elms", "=", "conv_net", ".", "conv_elms", "\n", "self", ".", "conv_params", "=", "conv_net", ".", "conv_params", "\n", "self", ".", "with_bn", "=", "conv_net", ".", "with_bn", "\n", "self", ".", "bn_momentum", "=", "conv_net", ".", "bn_momentum", "\n", "\n", "\n", "self", ".", "num_conv_stacks", "=", "len", "(", "self", ".", "conv_stacks", ")", "\n", "if", "num_deconv_stacks", "is", "None", ":", "\n", "            ", "self", ".", "num_deconv_stacks", "=", "self", ".", "num_conv_stacks", "-", "1", "\n", "", "else", ":", "\n", "            ", "assert", "(", "num_deconv_stacks", "<=", "self", ".", "num_conv_stacks", "-", "1", ")", "\n", "self", ".", "num_deconv_stacks", "=", "num_deconv_stacks", "\n", "\n", "\n", "", "if", "num_blocks_per_stack", "is", "None", ":", "\n", "            ", "self", ".", "num_blocks_per_stack", "=", "conv_net", ".", "num_blocks_per_stack", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_blocks_per_stack", "=", "num_blocks_per_stack", "\n", "\n", "\n", "", "self", ".", "deconv_stacks", "=", "[", "]", "\n", "\n", "network", "=", "conv_net", ".", "get_output", "(", ")", "[", "0", "]", "\n", "\n", "\n", "self", ".", "j", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "self", ".", "num_deconv_stacks", ")", ":", "\n", "            ", "j", "=", "self", ".", "num_conv_stacks", "-", "i", "-", "2", "\n", "self", ".", "j", "=", "j", "\n", "self", ".", "deconv_stacks", ".", "append", "(", "network", ")", "\n", "\n", "if", "not", "isinstance", "(", "network", ",", "list", ")", ":", "\n", "                ", "network", "=", "[", "network", "]", "\n", "", "deconvnet", "=", "self", ".", "DeconvLayer", "(", "pc1", "=", "self", ".", "pointclouds_down", "[", "j", "+", "1", "]", ",", "pc2", "=", "self", ".", "pointclouds_down", "[", "j", "]", ")", "(", "network", ")", "\n", "\n", "conv_elms", "=", "self", ".", "conv_elms", "[", "j", "]", "\n", "\n", "conv_layer", "=", "self", ".", "ConvLayer", "(", "self", ".", "conv_params", "[", "j", "]", ",", "conv_elms", ")", "\n", "convnet", "=", "conv_layer", ".", "get_layer", "(", "deconvnet", ",", "with_bn", "=", "self", ".", "with_bn", ",", "bn_decay", "=", "self", ".", "bn_momentum", ")", "\n", "\n", "if", "isinstance", "(", "convnet", ",", "list", ")", ":", "\n", "                ", "assert", "(", "isinstance", "(", "self", ".", "conv_stacks", "[", "j", "]", ",", "list", ")", ")", "\n", "assert", "(", "len", "(", "self", ".", "conv_stacks", "[", "j", "]", ")", "==", "len", "(", "convnet", ")", ")", "\n", "network", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "convnet", ")", ")", ":", "\n", "                    ", "network", ".", "append", "(", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "self", ".", "conv_stacks", "[", "j", "]", "[", "i", "]", ",", "convnet", "[", "i", "]", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "network", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "self", ".", "conv_stacks", "[", "j", "]", ",", "convnet", "]", ")", "\n", "\n", "", "", "self", ".", "deconv_stacks", ".", "append", "(", "network", ")", "\n", "\n", "self", ".", "output", "=", "network", "\n", "\n", "\n", "\n", "\"\"\"\n            if (drop_out > 0. and i <= 2):\n                network = Dropout(rate=drop_out)(network)\n\n        block_elm = self.ConvElements(pointclouds_pl_down[0][0], self.conf)\n\n        network = self.ConvLayer(part_num, block_elm).get_layer(network, with_bn=False, with_relu=False)\n\n        network = Activation('softmax')(network)\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNet.get_output": [[161, 163], ["None"], "methods", ["None"], ["", "def", "get_output", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNet.get_deconv_stacks": [[164, 166], ["None"], "methods", ["None"], ["", "def", "get_deconv_stacks", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deconv_stacks", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNet.get_conv_elms": [[167, 169], ["None"], "methods", ["None"], ["", "def", "get_conv_elms", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conv_elms", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNet.get_conv_params": [[170, 172], ["None"], "methods", ["None"], ["", "def", "get_conv_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conv_params", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNet.get_last_idx": [[173, 175], ["None"], "methods", ["None"], ["", "def", "get_last_idx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNetBis.__init__": [[178, 274], ["len", "isinstance", "conv_net.DeconvNetBis.deconv_stacks.append", "conv_net.DeconvNetBis.PoolingLayer", "range", "conv_net.get_output", "keras.layers.GlobalMaxPooling1D", "keras.layers.RepeatVector", "keras.layers.Concatenate", "keras.layers.Dense", "keras.layers.Activation", "conv_net.DeconvNetBis.ConvLayer", "conv_net.DeconvNetBis.get_layer", "isinstance", "conv_net.DeconvNetBis.deconv_stacks.append", "keras.layers.BatchNormalization", "isinstance", "conv_net.DeconvNetBis.DeconvLayer", "isinstance", "range", "len", "len", "len", "L.append", "keras.int_shape", "keras.layers.Concatenate", "keras.layers.Dense", "keras.layers.Activation", "keras.int_shape", "keras.layers.Concatenate", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.BatchNormalization", "keras.int_shape", "keras.layers.BatchNormalization", "keras.int_shape"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNetBis.get_output", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.layers.kd_tree_conv_layer.BinaryTreeShConvLayer.get_layer"], ["    ", "def", "__init__", "(", "self", ",", "conv_net", ",", "deconv_layer", ",", "\n", "num_deconv_stacks", "=", "None", ",", "\n", "num_blocks_per_stack", "=", "None", ",", "\n", "out_channels", "=", "None", ")", ":", "\n", "        ", "self", ".", "DeconvLayer", "=", "deconv_layer", "\n", "self", ".", "PoolingLayer", "=", "conv_net", ".", "PoolingLayer", "\n", "self", ".", "ConvLayer", "=", "conv_net", ".", "ConvLayer", "\n", "self", ".", "pointclouds_down", "=", "conv_net", ".", "pc_hierarchy", "\n", "self", ".", "conv_stacks", "=", "conv_net", ".", "conv_stacks", "\n", "self", ".", "conv_elms", "=", "conv_net", ".", "conv_elms", "\n", "self", ".", "conv_params", "=", "conv_net", ".", "conv_params", "\n", "self", ".", "with_bn", "=", "conv_net", ".", "with_bn", "\n", "self", ".", "bn_momentum", "=", "conv_net", ".", "bn_momentum", "\n", "\n", "\n", "self", ".", "num_conv_stacks", "=", "len", "(", "self", ".", "conv_stacks", ")", "\n", "if", "num_deconv_stacks", "is", "None", ":", "\n", "            ", "self", ".", "num_deconv_stacks", "=", "self", ".", "num_conv_stacks", "-", "1", "\n", "", "else", ":", "\n", "            ", "assert", "(", "num_deconv_stacks", "<=", "self", ".", "num_conv_stacks", "-", "1", ")", "\n", "self", ".", "num_deconv_stacks", "=", "num_deconv_stacks", "\n", "\n", "\n", "", "if", "num_blocks_per_stack", "is", "None", ":", "\n", "            ", "self", ".", "num_blocks_per_stack", "=", "conv_net", ".", "num_blocks_per_stack", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_blocks_per_stack", "=", "num_blocks_per_stack", "\n", "\n", "\n", "", "self", ".", "deconv_stacks", "=", "[", "]", "\n", "\n", "network", "=", "conv_net", ".", "get_output", "(", ")", "[", "0", "]", "\n", "\n", "\n", "if", "isinstance", "(", "network", ",", "list", ")", ":", "\n", "            ", "network", "=", "network", "[", "0", "]", "\n", "", "pooled_network", "=", "GlobalMaxPooling1D", "(", ")", "(", "network", ")", "\n", "pooled_network", "=", "RepeatVector", "(", "n", "=", "K", ".", "int_shape", "(", "network", ")", "[", "1", "]", ")", "(", "pooled_network", ")", "\n", "network", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "pooled_network", ",", "network", "]", ")", "\n", "\n", "network", "=", "Dense", "(", "units", "=", "K", ".", "int_shape", "(", "network", ")", "[", "-", "1", "]", "//", "2", ",", "activation", "=", "None", ")", "(", "network", ")", "\n", "if", "self", ".", "with_bn", ":", "\n", "            ", "network", "=", "BatchNormalization", "(", "momentum", "=", "self", ".", "bn_momentum", ")", "(", "network", ")", "\n", "", "network", "=", "Activation", "(", "'relu'", ")", "(", "network", ")", "\n", "\n", "self", ".", "deconv_stacks", ".", "append", "(", "network", ")", "\n", "\n", "\n", "\n", "\n", "self", ".", "PoolingLayer", "(", ")", "\n", "self", ".", "j", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "self", ".", "num_deconv_stacks", ")", ":", "\n", "            ", "j", "=", "self", ".", "num_conv_stacks", "-", "i", "-", "1", "\n", "\n", "# self.deconv_stacks.append(network)", "\n", "\n", "conv_elms", "=", "self", ".", "conv_elms", "[", "j", "]", "\n", "\n", "out_channels", "=", "self", ".", "conv_params", "[", "j", "-", "1", "]", "[", "'out_channels'", "]", "\n", "conv_layer", "=", "self", ".", "ConvLayer", "(", "self", ".", "conv_params", "[", "j", "]", ",", "conv_elms", ",", "out_channels", "=", "out_channels", ")", "\n", "\n", "network", "=", "conv_layer", ".", "get_layer", "(", "network", ",", "with_bn", "=", "self", ".", "with_bn", ",", "bn_decay", "=", "self", ".", "bn_momentum", ")", "\n", "\n", "if", "not", "isinstance", "(", "network", ",", "list", ")", ":", "\n", "                ", "network", "=", "[", "network", "]", "\n", "", "network", "=", "self", ".", "DeconvLayer", "(", "pc1", "=", "self", ".", "pointclouds_down", "[", "j", "]", ",", "pc2", "=", "self", ".", "pointclouds_down", "[", "j", "-", "1", "]", ")", "(", "network", ")", "\n", "\n", "j", "-=", "1", "\n", "self", ".", "j", "=", "j", "\n", "\n", "if", "isinstance", "(", "network", ",", "list", ")", ":", "\n", "                ", "assert", "(", "isinstance", "(", "self", ".", "conv_stacks", "[", "j", "]", ",", "list", ")", ")", "\n", "assert", "(", "len", "(", "self", ".", "conv_stacks", "[", "j", "]", ")", "==", "len", "(", "network", ")", ")", "\n", "L", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "network", ")", ")", ":", "\n", "                    ", "c", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "self", ".", "conv_stacks", "[", "j", "]", "[", "i", "]", ",", "network", "[", "i", "]", "]", ")", "\n", "c", "=", "Dense", "(", "units", "=", "K", ".", "int_shape", "(", "network", "[", "i", "]", ")", "[", "-", "1", "]", ",", "activation", "=", "None", ")", "(", "c", ")", "\n", "if", "self", ".", "with_bn", ":", "\n", "                        ", "c", "=", "BatchNormalization", "(", "momentum", "=", "self", ".", "bn_momentum", ")", "(", "c", ")", "\n", "", "c", "=", "Activation", "(", "'relu'", ")", "(", "c", ")", "\n", "L", ".", "append", "(", "c", ")", "\n", "", "network", "=", "L", "\n", "", "else", ":", "\n", "                ", "nc", "=", "K", ".", "int_shape", "(", "network", ")", "[", "-", "1", "]", "\n", "\n", "network", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "self", ".", "conv_stacks", "[", "j", "]", ",", "network", "]", ")", "\n", "network", "=", "Dense", "(", "units", "=", "nc", ",", "activation", "=", "None", ")", "(", "network", ")", "\n", "if", "self", ".", "with_bn", ":", "\n", "                    ", "network", "=", "BatchNormalization", "(", "momentum", "=", "self", ".", "bn_momentum", ")", "(", "network", ")", "\n", "", "network", "=", "Activation", "(", "'relu'", ")", "(", "network", ")", "\n", "", "self", ".", "deconv_stacks", ".", "append", "(", "network", ")", "\n", "\n", "\n", "\n", "", "self", ".", "output", "=", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNetBis.get_output": [[276, 278], ["None"], "methods", ["None"], ["", "def", "get_output", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNetBis.get_deconv_stacks": [[279, 281], ["None"], "methods", ["None"], ["", "def", "get_deconv_stacks", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deconv_stacks", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNetBis.get_conv_elms": [[282, 284], ["None"], "methods", ["None"], ["", "def", "get_conv_elms", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conv_elms", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNetBis.get_conv_params": [[285, 287], ["None"], "methods", ["None"], ["", "def", "get_conv_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conv_params", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNetBis.get_last_idx": [[288, 290], ["None"], "methods", ["None"], ["", "def", "get_last_idx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "j", "", "", "", ""]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.classification_network.ClassNetwork.__init__": [[12, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "method", ")", ":", "\n", "        ", "self", ".", "config", "=", "method", "[", "'config'", "]", "\n", "\n", "self", ".", "InputLayer", "=", "None", "\n", "if", "'input_layer'", "in", "method", ":", "\n", "            ", "self", ".", "InputLayer", "=", "method", "[", "'input_layer'", "]", "\n", "\n", "", "self", ".", "PoolingLayer", "=", "method", "[", "'pooling_layer'", "]", "\n", "\n", "self", ".", "PostProcessLayer", "=", "None", "\n", "if", "'postprocess_layer'", "in", "method", ":", "\n", "            ", "self", ".", "PostProcessLayer", "=", "method", "[", "'postprocess_layer'", "]", "\n", "\n", "", "self", ".", "with_bn", "=", "self", ".", "config", "[", "'with_bn'", "]", "\n", "self", ".", "bn_momentum", "=", "self", ".", "config", "[", "'bn_momentum'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.classification_network.ClassNetwork.get_network_model": [[28, 93], ["keras.layers.Input", "networks.conv_net.ConvNet().get_output", "isinstance", "keras.layers.Input", "keras.ndim", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Activation", "keras.layers.Dropout", "keras.layers.Dense", "keras.engine.Model", "keras.engine.Model", "keras.layers.Concatenate", "keras.layers.Input", "networks.conv_net.ConvNet", "classification_network.ClassNetwork.PostProcessLayer", "keras.layers.GlobalMaxPooling1D", "keras.ndim", "ValueError", "keras.constant", "classification_network.ClassNetwork.InputLayer", "keras.layers.GlobalMaxPooling2D", "keras.constant"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.networks.conv_net.DeconvNetBis.get_output"], ["", "def", "get_network_model", "(", "self", ",", "num_classes", ",", "batch_size", ",", "num_points", ",", "bn_decay", "=", "0.5", ")", ":", "\n", "        ", "pc_input", "=", "Input", "(", "shape", "=", "(", "num_points", ",", "3", ")", ",", "batch_shape", "=", "(", "batch_size", ",", "num_points", ",", "3", ")", ")", "\n", "pointclouds_pl", "=", "pc_input", "\n", "\n", "additional_input", "=", "None", "\n", "if", "self", ".", "InputLayer", "is", "'3d'", ":", "\n", "            ", "additional_input", "=", "Input", "(", "tensor", "=", "K", ".", "constant", "(", "1.", ",", "'float32'", ",", "(", "batch_size", ",", "num_points", ",", "1", ")", ")", ")", "\n", "ps_function_pl", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "additional_input", ",", "pointclouds_pl", "]", ")", "\n", "\n", "", "elif", "self", ".", "InputLayer", "is", "not", "None", ":", "\n", "# ps_function_pl = self.InputLayer(self.config)(pointclouds_pl)", "\n", "            ", "ps_function_pl", "=", "self", ".", "InputLayer", "(", ")", "(", "pointclouds_pl", ")", "\n", "", "else", ":", "\n", "            ", "additional_input", "=", "Input", "(", "tensor", "=", "K", ".", "constant", "(", "1.", ",", "'float32'", ",", "(", "batch_size", ",", "num_points", ",", "1", ")", ")", ")", "\n", "ps_function_pl", "=", "additional_input", "\n", "\n", "\n", "\n", "# ps_function_pl = pc_input", "\n", "\n", "", "network", "=", "ps_function_pl", "\n", "\n", "network", "=", "ConvNet", "(", "network", ",", "pointclouds_pl", ",", "self", ".", "config", ")", ".", "get_output", "(", ")", "\n", "\n", "if", "self", ".", "PostProcessLayer", "is", "not", "None", ":", "\n", "            ", "network", "=", "self", ".", "PostProcessLayer", "(", "self", ".", "config", ")", "(", "network", ")", "\n", "network", "=", "[", "network", "]", "\n", "\n", "\n", "\n", "", "if", "isinstance", "(", "network", ",", "list", ")", ":", "\n", "            ", "network", "=", "network", "[", "0", "]", "\n", "\n", "\n", "", "if", "K", ".", "ndim", "(", "network", ")", "==", "3", ":", "\n", "            ", "network", "=", "GlobalMaxPooling1D", "(", ")", "(", "network", ")", "\n", "", "elif", "K", ".", "ndim", "(", "network", ")", "==", "4", ":", "\n", "            ", "network", "=", "GlobalMaxPooling2D", "(", ")", "(", "network", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'output dim must be 3 or 4'", ")", "\n", "# network = Reshape((-1,))(network)", "\n", "# network = Flatten()(network)", "\n", "\n", "\n", "", "network", "=", "Dense", "(", "units", "=", "self", ".", "config", "[", "'fc1_size'", "]", ",", "activation", "=", "None", ")", "(", "network", ")", "\n", "# if with_bn:", "\n", "network", "=", "BatchNormalization", "(", "momentum", "=", "self", ".", "bn_momentum", ")", "(", "network", ")", "\n", "network", "=", "Activation", "(", "'relu'", ")", "(", "network", ")", "\n", "\n", "network", "=", "Dropout", "(", "rate", "=", "self", ".", "config", "[", "'dropout_keep_prob'", "]", ")", "(", "network", ")", "\n", "\n", "network", "=", "Dense", "(", "units", "=", "self", ".", "config", "[", "'fc2_size'", "]", ",", "activation", "=", "None", ")", "(", "network", ")", "\n", "# if with_bn:", "\n", "network", "=", "BatchNormalization", "(", "momentum", "=", "self", ".", "bn_momentum", ")", "(", "network", ")", "\n", "network", "=", "Activation", "(", "'relu'", ")", "(", "network", ")", "\n", "network", "=", "Dropout", "(", "rate", "=", "self", ".", "config", "[", "'dropout_keep_prob'", "]", ")", "(", "network", ")", "\n", "\n", "network", "=", "Dense", "(", "units", "=", "num_classes", ",", "activation", "=", "'softmax'", ")", "(", "network", ")", "\n", "\n", "\n", "\n", "if", "additional_input", "is", "not", "None", ":", "\n", "            ", "return", "Model", "(", "inputs", "=", "[", "pc_input", ",", "additional_input", "]", ",", "outputs", "=", "network", ")", "\n", "", "else", ":", "\n", "            ", "return", "Model", "(", "inputs", "=", "[", "pc_input", "]", ",", "outputs", "=", "network", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.__init__": [[11, 89], ["list", "list", "numpy.concatenate", "numpy.concatenate", "numpy.expand_dims", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "range", "numpy.divide", "numpy.tile", "seg_provider.SegmentationProvider.on_epoch_end", "dict", "range", "line.rstrip", "h5py.File", "data.append", "part_labels.append", "class_labels.append", "numpy.expand_dims", "keras.utils.to_categorical", "numpy.sum", "numpy.sum", "float", "numpy.expand_dims", "numpy.shape", "open", "json.load", "len", "len", "seg_provider.SegmentationProvider.labels_to_cat.append", "range", "open", "os.path.join", "[].astype", "[].astype", "seg_provider.SegmentationProvider.cat_to_labels[].append"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.tile", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.on_epoch_end"], ["def", "__init__", "(", "self", ",", "files_list", ",", "data_path", ",", "n_parts", ",", "n_classes", ",", "n_points", ",", "\n", "batch_size", "=", "32", ",", "preprocess", "=", "list", "(", ")", ",", "shuffle", "=", "True", ",", "parts", "=", "list", "(", ")", ",", "labels_to_cat", "=", "None", ")", ":", "\n", "        ", "'Initialization'", "\n", "# self.data, self.labels = load_h5_files(data_path, files_list)", "\n", "\n", "self", ".", "labels_to_cat", "=", "None", "\n", "self", ".", "cat_to_labels", "=", "None", "\n", "self", ".", "seg_parts", "=", "None", "\n", "\n", "if", "labels_to_cat", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "labels_to_cat", ")", "as", "f", ":", "\n", "                ", "cat_labels", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "labels_to_cat", "=", "[", "''", "]", "*", "len", "(", "cat_labels", ")", "\n", "self", ".", "cat_to_labels", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "cat_labels", ")", ")", ":", "\n", "                ", "self", ".", "labels_to_cat", ".", "append", "(", "cat_labels", "[", "i", "]", "[", "0", "]", ")", "\n", "if", "cat_labels", "[", "i", "]", "[", "0", "]", "in", "self", ".", "cat_to_labels", ":", "\n", "                    ", "self", ".", "cat_to_labels", "[", "cat_labels", "[", "i", "]", "[", "0", "]", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "cat_to_labels", "[", "cat_labels", "[", "i", "]", "[", "0", "]", "]", "=", "[", "i", "]", "\n", "\n", "", "", "self", ".", "seg_parts", "=", "self", ".", "cat_to_labels", "\n", "", "else", ":", "\n", "            ", "self", ".", "cat_to_labels", "=", "{", "'0'", ":", "range", "(", "n_parts", ")", "}", "\n", "self", ".", "seg_parts", "=", "self", ".", "cat_to_labels", "\n", "\"\"\"\n            for cat in self.cat_to_labels.keys():\n                if cat in self.seg_parts:\n                    self.seg_parts[cat].append(self.cat_to_labels[cat])\n                else:\n                    self.seg_parts[cat] = [self.cat_to_labels[cat]]\n            \"\"\"", "\n", "\n", "\n", "", "data", "=", "[", "]", "\n", "part_labels", "=", "[", "]", "\n", "class_labels", "=", "[", "]", "\n", "files_list", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "files_list", ")", "]", "\n", "for", "file", "in", "files_list", ":", "\n", "            ", "f", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "file", ")", ")", "\n", "data", ".", "append", "(", "f", "[", "'data'", "]", "[", ":", "]", ")", "\n", "part_labels", ".", "append", "(", "f", "[", "'pid'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "class_labels", ".", "append", "(", "f", "[", "'label'", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "data", ",", "axis", "=", "0", ")", "\n", "self", ".", "part_labels", "=", "np", ".", "concatenate", "(", "part_labels", ",", "axis", "=", "0", ")", "\n", "self", ".", "part_labels", "=", "np", ".", "expand_dims", "(", "self", ".", "part_labels", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "class_labels", "=", "np", ".", "concatenate", "(", "class_labels", ",", "axis", "=", "0", ")", "\n", "\n", "self", ".", "part_weights", "=", "np", ".", "zeros", "(", "(", "n_classes", ",", "n_parts", ",", ")", ")", "\n", "self", ".", "nb_seen_per_class", "=", "np", ".", "zeros", "(", "(", "n_classes", ",", "1", ")", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "one_hot_labels", "=", "self", ".", "part_labels", "[", "i", ",", "...", "]", "\n", "one_hot_labels", "=", "np", ".", "expand_dims", "(", "one_hot_labels", ",", "axis", "=", "0", ")", "\n", "one_hot_labels", "=", "keras", ".", "utils", ".", "to_categorical", "(", "one_hot_labels", ",", "n_parts", ")", "\n", "self", ".", "nb_seen_per_class", "[", "self", ".", "class_labels", "[", "i", "]", ",", "0", "]", "+=", "1.", "\n", "self", ".", "part_weights", "[", "self", ".", "class_labels", "[", "i", "]", ",", ":", "]", "+=", "np", ".", "sum", "(", "one_hot_labels", "[", "0", ",", ":", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "self", ".", "part_weights", "=", "np", ".", "divide", "(", "self", ".", "part_weights", ",", "self", ".", "nb_seen_per_class", ")", "\n", "self", ".", "part_weights", "=", "np", ".", "sum", "(", "self", ".", "part_weights", ",", "axis", "=", "0", ",", "keepdims", "=", "False", ")", "/", "float", "(", "self", ".", "data", ".", "shape", "[", "1", "]", ")", "\n", "\n", "self", ".", "part_weights", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "self", ".", "part_weights", ",", "axis", "=", "0", ")", ",", "reps", "=", "(", "n_points", ",", "1", ")", ")", "\n", "\n", "\n", "\n", "self", ".", "n_points_data", "=", "np", ".", "shape", "(", "self", ".", "data", ")", "[", "1", "]", "\n", "self", ".", "n_samples", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "self", ".", "nv", "=", "self", ".", "data", ".", "shape", "[", "1", "]", "\n", "self", ".", "parts", "=", "parts", "\n", "self", ".", "n_points", "=", "n_points", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_parts", "=", "n_parts", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "self", ".", "on_epoch_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.__len__": [[90, 93], ["int", "numpy.floor"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the number of batches per epoch'", "\n", "return", "int", "(", "np", ".", "floor", "(", "self", ".", "n_samples", "/", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.__getitem__": [[94, 102], ["seg_provider.SegmentationProvider.__data_generation"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.__data_generation"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'Generate one batch of data'", "\n", "# Generate indexes of the batch", "\n", "indexes", "=", "self", ".", "indexes", "[", "index", "*", "self", ".", "batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "\n", "# Generate data", "\n", "X", ",", "y", "=", "self", ".", "__data_generation", "(", "indexes", ")", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.on_epoch_end": [[103, 108], ["numpy.arange", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "'Updates indexes after each epoch'", "\n", "self", ".", "indexes", "=", "np", ".", "arange", "(", "self", ".", "n_samples", ")", "\n", "if", "self", ".", "shuffle", "==", "True", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.__data_generation": [[109, 123], ["keras.utils.to_categorical", "range", "numpy.random.permutation", "len", "utils.pointclouds_utils.pc_batch_preprocess", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.pc_batch_preprocess"], ["", "", "def", "__data_generation", "(", "self", ",", "indexes", ")", ":", "\n", "\n", "        ", "idx", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "self", ".", "n_points_data", ")", ")", "[", ":", "self", ".", "n_points", "]", "\n", "x", "=", "self", ".", "class_labels", "[", "indexes", ",", "...", "]", "\n", "x", "=", "keras", ".", "utils", ".", "to_categorical", "(", "x", ",", "num_classes", "=", "self", ".", "n_classes", ")", "\n", "X", "=", "self", ".", "data", "[", "indexes", ",", "...", "]", "\n", "X", "=", "X", "[", ":", ",", "idx", ",", "...", "]", "\n", "y", "=", "self", ".", "part_labels", "[", "indexes", ",", "...", "]", "\n", "y", "=", "y", "[", ":", ",", "idx", ",", "...", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "preprocess", ")", ")", ":", "\n", "            ", "X", ",", "y", "=", "pc_batch_preprocess", "(", "X", ",", "y", "=", "y", ",", "proc", "=", "self", ".", "preprocess", "[", "i", "]", ")", "\n", "\n", "# y = keras.utils.to_categorical(y, num_classes=self.n_parts)", "\n", "", "return", "[", "X", ",", "x", "]", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.set_preprocessing": [[124, 126], ["None"], "methods", ["None"], ["", "def", "set_preprocessing", "(", "self", ",", "preprocessing", ")", ":", "\n", "        ", "self", ".", "preprocess", "=", "preprocessing", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.get_data": [[127, 129], ["None"], "methods", ["None"], ["", "def", "get_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ",", "self", ".", "part_labels", ",", "self", ".", "class_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.get_batch_size": [[130, 132], ["None"], "methods", ["None"], ["", "def", "get_batch_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.get_num_parts": [[133, 135], ["None"], "methods", ["None"], ["", "def", "get_num_parts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_parts", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.get_num_classes": [[136, 138], ["None"], "methods", ["None"], ["", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.get_num_points": [[139, 141], ["None"], "methods", ["None"], ["", "def", "get_num_points", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_points", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.seg_provider.SegmentationProvider.get_preprocess": [[142, 144], ["None"], "methods", ["None"], ["", "def", "get_preprocess", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "preprocess", "", "", "", ""]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider.__init__": [[47, 64], ["list", "list", "utils.data_prep_utils.load_h5_files", "numpy.reshape", "classifiaction_provider.ClassificationProvider.on_epoch_end", "numpy.shape"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.data_prep_utils.load_h5_files", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.on_epoch_end"], ["def", "__init__", "(", "self", ",", "files_list", ",", "data_path", ",", "n_classes", ",", "n_points", ",", "\n", "batch_size", "=", "32", ",", "preprocess", "=", "list", "(", ")", ",", "shuffle", "=", "True", ",", "classes", "=", "list", "(", ")", ")", ":", "\n", "        ", "'Initialization'", "\n", "self", ".", "data", ",", "self", ".", "labels", "=", "load_h5_files", "(", "data_path", ",", "files_list", ")", "\n", "self", ".", "labels", "=", "np", ".", "reshape", "(", "self", ".", "labels", ",", "(", "-", "1", ",", ")", ")", "\n", "self", ".", "n_points_data", "=", "np", ".", "shape", "(", "self", ".", "data", ")", "[", "1", "]", "\n", "self", ".", "n_samples", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "self", ".", "nv", "=", "self", ".", "data", ".", "shape", "[", "1", "]", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "n_points", "=", "n_points", "\n", "# self.data = index_points(self.data, self.n_points)", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "# self.pool = Pool(4)", "\n", "self", ".", "on_epoch_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider.__len__": [[66, 69], ["int", "numpy.floor"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the number of batches per epoch'", "\n", "return", "int", "(", "np", ".", "floor", "(", "self", ".", "n_samples", "/", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider.__getitem__": [[70, 78], ["classifiaction_provider.ClassificationProvider.__data_generation"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.__data_generation"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'Generate one batch of data'", "\n", "# Generate indexes of the batch", "\n", "indexes", "=", "self", ".", "indexes", "[", "index", "*", "self", ".", "batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "\n", "# Generate data", "\n", "X", ",", "y", "=", "self", ".", "__data_generation", "(", "indexes", ")", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider.on_epoch_end": [[79, 84], ["numpy.arange", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "'Updates indexes after each epoch'", "\n", "self", ".", "indexes", "=", "np", ".", "arange", "(", "self", ".", "n_samples", ")", "\n", "if", "self", ".", "shuffle", "==", "True", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider.__data_generation": [[85, 100], ["range", "keras.utils.to_categorical", "numpy.random.permutation", "len", "utils.pointclouds_utils.pc_batch_preprocess", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.pc_batch_preprocess"], ["", "", "def", "__data_generation", "(", "self", ",", "indexes", ")", ":", "\n", "\n", "        ", "idx", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "self", ".", "n_points_data", ")", ")", "[", ":", "self", ".", "n_points", "]", "\n", "X", "=", "self", ".", "data", "[", "indexes", ",", "...", "]", "\n", "X", "=", "X", "[", ":", ",", "idx", ",", "...", "]", "\n", "y", "=", "self", ".", "labels", "[", "indexes", ",", "...", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "preprocess", ")", ")", ":", "\n", "            ", "X", ",", "y", "=", "pc_batch_preprocess", "(", "x", "=", "X", ",", "y", "=", "y", ",", "proc", "=", "self", ".", "preprocess", "[", "i", "]", ")", "\n", "\n", "", "y", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y", ",", "num_classes", "=", "self", ".", "n_classes", ")", "\n", "# y = np.expand_dims(y, axis=1)", "\n", "# y = np.repeat(y, axis=1, repeats=12)", "\n", "# print('y shape !! ', y.shape)", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider.set_preprocessing": [[101, 103], ["None"], "methods", ["None"], ["", "def", "set_preprocessing", "(", "self", ",", "preprocessing", ")", ":", "\n", "        ", "self", ".", "preprocess", "=", "preprocessing", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider.get_data": [[104, 106], ["None"], "methods", ["None"], ["", "def", "get_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ",", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.__init__": [[144, 168], ["list", "list", "classifiaction_provider.load_h5_data_multires", "numpy.reshape", "range", "classifiaction_provider.ClassificationProvider2.on_epoch_end", "numpy.shape", "len", "classifiaction_provider.ClassificationProvider2.X.append", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.load_h5_data_multires", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.on_epoch_end"], ["def", "__init__", "(", "self", ",", "files_list", ",", "data_path", ",", "n_classes", ",", "n_points", ",", "\n", "batch_size", "=", "32", ",", "preprocess", "=", "list", "(", ")", ",", "shuffle", "=", "True", ",", "classes", "=", "list", "(", ")", ")", ":", "\n", "        ", "'Initialization'", "\n", "# self.data, self.labels = load_h5_files(data_path, files_list)", "\n", "self", ".", "data", ",", "self", ".", "sub_idx", ",", "self", ".", "labels", "=", "load_h5_data_multires", "(", "data_path", ",", "files_list", ",", "n_points", ")", "\n", "\n", "# for j in range()", "\n", "\n", "self", ".", "labels", "=", "np", ".", "reshape", "(", "self", ".", "labels", ",", "(", "-", "1", ",", ")", ")", "\n", "self", ".", "n_points_data", "=", "np", ".", "shape", "(", "self", ".", "data", ")", "[", "1", "]", "\n", "self", ".", "n_samples", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "self", ".", "nv", "=", "self", ".", "data", ".", "shape", "[", "1", "]", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "n_points", "=", "n_points", "\n", "# self.data = index_points(self.data, self.n_points)", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "# self.pool = Pool(4)", "\n", "self", ".", "X", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "n_points", ")", ")", ":", "\n", "            ", "self", ".", "X", ".", "append", "(", "np", ".", "zeros", "(", "(", "batch_size", ",", "n_points", "[", "j", "]", ",", "3", ")", ")", ")", "\n", "", "self", ".", "on_epoch_end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.__len__": [[170, 173], ["int", "numpy.floor"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "'Denotes the number of batches per epoch'", "\n", "return", "int", "(", "np", ".", "floor", "(", "self", ".", "n_samples", "/", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.__getitem__": [[174, 182], ["classifiaction_provider.ClassificationProvider2.__data_generation"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.__data_generation"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "'Generate one batch of data'", "\n", "# Generate indexes of the batch", "\n", "indexes", "=", "self", ".", "indexes", "[", "index", "*", "self", ".", "batch_size", ":", "(", "index", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "\n", "# Generate data", "\n", "X", ",", "y", "=", "self", ".", "__data_generation", "(", "indexes", ")", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.on_epoch_end": [[183, 188], ["numpy.arange", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "'Updates indexes after each epoch'", "\n", "self", ".", "indexes", "=", "np", ".", "arange", "(", "self", ".", "n_samples", ")", "\n", "if", "self", ".", "shuffle", "==", "True", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.__data_generation": [[189, 216], ["range", "keras.utils.to_categorical", "len", "range"], "methods", ["None"], ["", "", "def", "__data_generation", "(", "self", ",", "indexes", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "data", "[", "indexes", ",", "...", "]", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "n_points", ")", ")", ":", "\n", "            ", "sub_idx", "=", "self", ".", "sub_idx", "[", "j", "]", "[", "indexes", ",", "...", "]", "\n", "for", "k", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "idx", "=", "sub_idx", "[", "k", ",", "...", "]", "\n", "self", ".", "X", "[", "j", "]", "[", "k", ",", "...", "]", "=", "x", "[", "k", ",", "idx", ",", "...", "]", "\n", "\n", "\n", "\n", "# idx = np.random.permutation(np.arange(self.n_points_data))[:self.n_points]", "\n", "# X = self.data[indexes, ...]", "\n", "# X = X[:, idx, ...]", "\n", "", "", "y", "=", "self", ".", "labels", "[", "indexes", ",", "...", "]", "\n", "\n", "\"\"\"\n        for i in range(len(self.preprocess)):\n            X, y = pc_batch_preprocess(x=X, y=y, proc=self.preprocess[i])\n        \"\"\"", "\n", "\n", "y", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y", ",", "num_classes", "=", "self", ".", "n_classes", ")", "\n", "# y = np.expand_dims(y, axis=1)", "\n", "# y = np.repeat(y, axis=1, repeats=12)", "\n", "# print('y shape !! ', y.shape)", "\n", "return", "self", ".", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.set_preprocessing": [[217, 219], ["None"], "methods", ["None"], ["", "def", "set_preprocessing", "(", "self", ",", "preprocessing", ")", ":", "\n", "        ", "self", ".", "preprocess", "=", "preprocessing", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.ClassificationProvider2.get_data": [[220, 222], ["None"], "methods", ["None"], ["", "def", "get_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ",", "self", ".", "labels", "", "", "", ""]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.kdtree_index": [[11, 18], ["range", "scipy.spatial.cKDTree", "numpy.take"], "function", ["None"], ["def", "kdtree_index", "(", "X", ")", ":", "\n", "    ", "nb", "=", "X", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "nb", ")", ":", "\n", "        ", "x", "=", "X", "[", "i", ",", "...", "]", "\n", "T", "=", "cKDTree", "(", "x", ")", "\n", "X", "[", "i", ",", "...", "]", "=", "np", ".", "take", "(", "x", ",", "T", ".", "indices", ",", "axis", "=", "0", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.eigen_tree_index_2_": [[19, 25], ["range", "utils.pointclouds_utils.eigen_tree_index_2"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.eigen_tree_index_2"], ["", "def", "eigen_tree_index_2_", "(", "X", ")", ":", "\n", "    ", "nb", "=", "X", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "nb", ")", ":", "\n", "        ", "x", "=", "X", "[", "i", ",", "...", "]", "\n", "X", "[", "i", ",", "...", "]", "=", "eigen_tree_index_2", "(", "x", ",", "depth", "=", "4", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.tile": [[26, 28], ["numpy.tile"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.tile"], ["", "def", "tile", "(", "x", ",", "rep", "=", "16", ")", ":", "\n", "    ", "return", "np", ".", "tile", "(", "x", ",", "(", "16", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.index_points": [[29, 43], ["numpy.zeros", "range", "utils.pointclouds_utils.eigen_tree_index_2", "numpy.random.permutation", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.pointclouds_utils.eigen_tree_index_2"], ["", "def", "index_points", "(", "X", ",", "nv", ")", ":", "\n", "    ", "ns", "=", "X", ".", "shape", "[", "0", "]", "\n", "X_nv", "=", "X", ".", "shape", "[", "1", "]", "\n", "X_new", "=", "np", ".", "zeros", "(", "shape", "=", "(", "ns", ",", "16", "*", "nv", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "ns", ")", ":", "\n", "        ", "x", "=", "X", "[", "i", ",", "...", "]", "\n", "# x = np.expand_dims(x, axis=0)", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "X_nv", ")", ")", "[", ":", "nv", "]", "\n", "x", "=", "x", "[", "idx", ",", ":", "]", "\n", "# x = kdtree_index(x)", "\n", "x", "=", "eigen_tree_index_2", "(", "x", ",", "4", ")", "\n", "# x = np.tile(x, (16, 1))", "\n", "X_new", "[", "i", ",", "...", "]", "=", "x", "\n", "", "return", "X_new", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.load_h5_data_multires_": [[107, 121], ["h5py.File", "range", "len", "sub_idx.append", "str"], "function", ["None"], ["", "", "def", "load_h5_data_multires_", "(", "h5_filename", ",", "num_points", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", "\n", "sub_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "num_points", ")", ")", ":", "\n", "        ", "sub_idx", ".", "append", "(", "f", "[", "'sub_idx_'", "+", "str", "(", "num_points", "[", "i", "]", ")", "]", ")", "\n", "\n", "", "class_label", "=", "f", "[", "'class_label'", "]", "[", ":", "]", "\n", "\n", "if", "'part_label'", "in", "f", ":", "\n", "        ", "part_label", "=", "f", "[", "'part_label'", "]", "[", ":", "]", "\n", "return", "(", "data", ",", "sub_idx", ",", "part_label", ",", "class_label", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "data", ",", "sub_idx", ",", "class_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.load_h5_data_multires": [[122, 140], ["range", "range", "numpy.concatenate", "range", "numpy.concatenate", "line.rstrip", "len", "sub_idx.append", "len", "classifiaction_provider.load_h5_data_multires_", "np.concatenate.append", "range", "np.concatenate.append", "len", "numpy.concatenate", "open", "os.path.join", "len", "sub_idx[].append"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.load_h5_data_multires_"], ["", "", "def", "load_h5_data_multires", "(", "data_path", ",", "files_list_path", ",", "num_points", ")", ":", "\n", "    ", "files_list", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "files_list_path", ")", "]", "\n", "data", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "sub_idx", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "num_points", ")", ")", ":", "\n", "        ", "sub_idx", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "files_list", ")", ")", ":", "\n", "        ", "data_", ",", "sub_idx_", ",", "labels_", "=", "load_h5_data_multires_", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "files_list", "[", "i", "]", ")", ",", "num_points", ")", "\n", "data", ".", "append", "(", "data_", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "sub_idx_", ")", ")", ":", "\n", "            ", "sub_idx", "[", "j", "]", ".", "append", "(", "sub_idx_", "[", "j", "]", ")", "\n", "", "labels", ".", "append", "(", "labels_", ")", "\n", "", "data", "=", "np", ".", "concatenate", "(", "data", ",", "axis", "=", "0", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "num_points", ")", ")", ":", "\n", "        ", "sub_idx", "[", "j", "]", "=", "np", ".", "concatenate", "(", "sub_idx", "[", "j", "]", ",", "axis", "=", "0", ")", "\n", "", "labels", "=", "np", ".", "concatenate", "(", "labels", ",", "axis", "=", "0", ")", "\n", "return", "data", ",", "sub_idx", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.npHigherClebshGordan.__init__": [[9, 15], ["spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_degree", "=", "3", ",", "real_wingner", "=", "False", ",", "dtype", "=", "np", ".", "complex64", ")", ":", "\n", "        ", "self", ".", "max_degree", "=", "max_degree", "\n", "# self.is_matrix = is_matrix", "\n", "self", ".", "real_wigner", "=", "real_wingner", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "Q", "=", "npClebshGordanMatrices", "(", "max_degree", ",", "False", ",", "real_wingner", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.npHigherClebshGordan.getMatrix": [[16, 38], ["higher_clebsh_gordan.npHigherClebshGordan.Q.getMatrix", "range", "numpy.einsum", "numpy.reshape", "len", "higher_clebsh_gordan.npHigherClebshGordan.Q.getMatrix", "abs"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.getMatrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.getMatrix"], ["", "def", "getMatrix", "(", "self", ",", "p", ",", "q", ",", "as_matrix", "=", "True", ")", ":", "\n", "        ", "Q", "=", "self", ".", "Q", ".", "getMatrix", "(", "q", "[", "0", "]", ",", "p", "[", "1", "]", ",", "q", "[", "1", "]", ")", "\n", "# Q = np.transpose(Q, axes=(0, 2, 1))", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "p", ")", "-", "2", ")", ":", "\n", "# Q = np.einsum('...i, ijk->...jk', Q, self.Q.getMatrix(q[i+1], p[i+1], q[i+2]))", "\n", "            ", "\"\"\"\n            print('trdhtrd')\n            print(np.shape(Q))\n            print(q[i + 1], p[i + 1], q[i + 2])\n            print(np.shape(self.Q.getMatrix(q[i + 1], p[i + 2], q[i + 2])))\n            \"\"\"", "\n", "# Q = np.einsum('kij,i...->kj...', self.Q.getMatrix(q[i + 1], p[i + 2], q[i + 2]), Q)", "\n", "\n", "Q", "=", "np", ".", "einsum", "(", "'jik,i...->j...k'", ",", "self", ".", "Q", ".", "getMatrix", "(", "q", "[", "i", "+", "1", "]", ",", "p", "[", "i", "+", "2", "]", ",", "q", "[", "i", "+", "2", "]", ")", ",", "Q", ")", "\n", "\n", "", "if", "as_matrix", ":", "\n", "# Q = np.reshape(Q, newshape=(-1, q[-1]))", "\n", "# Q = np.transpose(Q, axes=(1, 0))", "\n", "\n", "            ", "Q", "=", "np", ".", "reshape", "(", "Q", ",", "newshape", "=", "(", "2", "*", "abs", "(", "q", "[", "-", "1", "]", ")", "+", "1", ",", "-", "1", ")", ")", "\n", "", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.npClebshGordanPolynomial.__init__": [[76, 82], ["higher_clebsh_gordan.npHigherClebshGordan"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nb_irreducible", "=", "3", ",", "real_wingner", "=", "False", ",", "dtype", "=", "np", ".", "complex64", ")", ":", "\n", "\n", "        ", "self", ".", "nb_irreducible", "=", "nb_irreducible", "\n", "self", ".", "real_wigner", "=", "real_wingner", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "Q", "=", "npHigherClebshGordan", "(", "nb_irreducible", ",", "real_wingner", ",", "dtype", ")", "\n", "", "def", "getPolynomial", "(", "self", ",", "p", ",", "q", ",", "eps", "=", "0.00001", ")", ":", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.npClebshGordanPolynomial.getPolynomial": [[82, 113], ["len", "higher_clebsh_gordan.npClebshGordanPolynomial.Q.getMatrix", "int", "numpy.nonzero", "len", "range", "numpy.prod", "dict", "range", "coeffs_.append", "abs", "higher_clebsh_gordan.monomial_index_", "dict.pop", "dict.copy", "abs", "to_remove.append", "numpy.absolute", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.getMatrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.monomial_index_"], ["", "def", "getPolynomial", "(", "self", ",", "p", ",", "q", ",", "eps", "=", "0.00001", ")", ":", "\n", "        ", "d", "=", "len", "(", "p", ")", "\n", "Q", "=", "self", ".", "Q", ".", "getMatrix", "(", "p", ",", "q", ",", "as_matrix", "=", "True", ")", "\n", "\n", "\n", "m", "=", "2", "*", "abs", "(", "q", "[", "d", "-", "1", "]", ")", "+", "1", "\n", "n", "=", "int", "(", "np", ".", "prod", "(", "2", "*", "np", ".", "absolute", "(", "p", ")", "+", "1", ")", ")", "\n", "idx", "=", "np", ".", "nonzero", "(", "Q", ")", "\n", "# idx[0] : 'row indices'", "\n", "# idx[1] : 'col indices'", "\n", "nb_coeffs", "=", "len", "(", "idx", "[", "0", "]", ")", "\n", "values", "=", "[", "]", "\n", "coeffs_", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "coeffs_i", "=", "dict", "(", ")", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "idx_ij", "=", "monomial_index_", "(", "j", ",", "p", ",", "n", ")", "\n", "\n", "if", "idx_ij", "in", "coeffs_i", "and", "abs", "(", "Q", "[", "i", ",", "j", "]", ")", ">", "eps", ":", "\n", "                    ", "coeffs_i", "[", "idx_ij", "]", "+=", "Q", "[", "i", ",", "j", "]", "\n", "", "elif", "abs", "(", "Q", "[", "i", ",", "j", "]", ")", ">", "eps", ":", "\n", "                    ", "coeffs_i", "[", "idx_ij", "]", "=", "Q", "[", "i", ",", "j", "]", "\n", "", "", "to_remove", "=", "[", "]", "\n", "for", "key", "in", "coeffs_i", ":", "\n", "                ", "if", "abs", "(", "coeffs_i", "[", "key", "]", ")", "<", "eps", ":", "\n", "                    ", "to_remove", ".", "append", "(", "key", ")", "\n", "", "", "for", "key", "in", "to_remove", ":", "\n", "                ", "coeffs_i", ".", "pop", "(", "key", ")", "\n", "# if len(coeffs_i) > 0:", "\n", "", "coeffs_", ".", "append", "(", "coeffs_i", ".", "copy", "(", ")", ")", "\n", "", "return", "coeffs_", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.npInvariantPolynomials.__init__": [[260, 367], ["higher_clebsh_gordan.npClebshGordanPolynomial", "higher_clebsh_gordan.list_irreducible_invariants_recursive", "range", "range", "higher_clebsh_gordan.npInvariantPolynomials.monomials.copy", "range", "print", "print", "print", "print", "print", "print", "len", "set", "range", "higher_clebsh_gordan.orthonormalize_polynomials", "higher_clebsh_gordan.npInvariantPolynomials.monomials.append", "higher_clebsh_gordan.npInvariantPolynomials.polynomials.append", "len", "range", "higher_clebsh_gordan.npInvariantPolynomials.monomial_idx.append", "higher_clebsh_gordan.npInvariantPolynomials.monomial_coeff.append", "len", "print", "print", "print", "print", "print", "print", "print", "print", "range", "print", "print", "print", "print", "range", "print", "print", "print", "print", "range", "print", "len", "numpy.zeros", "range", "higher_clebsh_gordan.npInvariantPolynomials.monomials.append", "len", "range", "list", "monomials_tmp.copy", "polynomials_tmp.copy", "len", "deg_d_monomial_idx.append", "deg_d_monomial_coeff.append", "deg_d_monomial_idx.copy", "deg_d_monomial_coeff.copy", "len", "len", "len", "print", "len", "len", "print", "len", "len", "print", "len", "higher_clebsh_gordan.string_to_list_", "range", "numpy.copy", "len", "higher_clebsh_gordan.npInvariantPolynomials.P.getPolynomial", "deg_d_monomial_idx_pq.append", "deg_d_monomial_coeff_pq.append", "numpy.array", "numpy.array", "len", "numpy.zeros.copy", "len", "deg_d_polynomials.append", "higher_clebsh_gordan.npInvariantPolynomials.monomials[].index", "len", "Ppq[].copy", "numpy.zeros.add"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_irreducible_invariants_recursive", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.orthonormalize_polynomials", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.string_to_list_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.npClebshGordanPolynomial.getPolynomial"], ["    ", "def", "__init__", "(", "self", ",", "real_wigner", ",", "max_degree", ",", "nb_irreducible", ",", "dtype", "=", "None", ",", "max_order", "=", "100", ")", ":", "\n", "# nb_irreducible -= 1", "\n", "        ", "self", ".", "real_wigner", "=", "real_wigner", "\n", "if", "dtype", "is", "None", ":", "\n", "            ", "self", ".", "dtype", "=", "np", ".", "float32", "\n", "", "if", "real_wigner", ":", "\n", "            ", "self", ".", "dtype", "=", "np", ".", "complex64", "\n", "", "self", ".", "max_degree", "=", "max_degree", "\n", "self", ".", "nb_irreducible", "=", "nb_irreducible", "\n", "self", ".", "max_order", "=", "max_order", "\n", "self", ".", "P", "=", "npClebshGordanPolynomial", "(", "nb_irreducible", "=", "nb_irreducible", ",", "real_wingner", "=", "real_wigner", ",", "dtype", "=", "dtype", ")", "\n", "self", ".", "idx", "=", "list_irreducible_invariants_recursive", "(", "nb_irreducible", ",", "max_degree", ",", "order_bound", "=", "100", ")", "\n", "self", ".", "monomials", "=", "[", "]", "\n", "self", ".", "polynomials", "=", "[", "]", "\n", "\n", "# monomials_tmp = []", "\n", "# polynomials_tmp = []", "\n", "\n", "\n", "self", ".", "monomial_idx", "=", "[", "]", "\n", "self", ".", "monomial_coeff", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "1", ",", "len", "(", "self", ".", "idx", ")", ")", ":", "\n", "            ", "deg_d_monomials", "=", "set", "(", ")", "\n", "deg_d_polynomials", "=", "[", "]", "\n", "# print('d = ', d)", "\n", "for", "p_idx", "in", "range", "(", "len", "(", "self", ".", "idx", "[", "d", "]", ")", ")", ":", "\n", "                ", "p", "=", "self", ".", "idx", "[", "d", "]", "[", "p_idx", "]", "[", "0", "]", "\n", "for", "q_idx", "in", "range", "(", "len", "(", "self", ".", "idx", "[", "d", "]", "[", "p_idx", "]", "[", "1", "]", ")", ")", ":", "\n", "                    ", "q", "=", "self", ".", "idx", "[", "d", "]", "[", "p_idx", "]", "[", "1", "]", "[", "q_idx", "]", "\n", "Ppq", "=", "self", ".", "P", ".", "getPolynomial", "(", "p", ",", "q", ")", "\n", "if", "len", "(", "Ppq", "[", "0", "]", ")", ">", "0", ":", "\n", "                        ", "deg_d_polynomials", ".", "append", "(", "Ppq", "[", "0", "]", ".", "copy", "(", ")", ")", "\n", "for", "key", "in", "Ppq", "[", "0", "]", ":", "\n", "# deg_d_monomials.add(Ppq[0][key])", "\n", "                            ", "deg_d_monomials", ".", "add", "(", "key", ")", "\n", "# self.monomials.append(list(deg_d_monomials.copy()))", "\n", "# self.polynomials.append(deg_d_polynomials.copy())", "\n", "\n", "", "", "", "", "monomials_tmp", ",", "polynomials_tmp", "=", "orthonormalize_polynomials", "(", "list", "(", "deg_d_monomials", ")", ",", "\n", "deg_d_polynomials", ",", "\n", "eps", "=", "0.00001", ",", "dtype", "=", "dtype", ")", "\n", "self", ".", "monomials", ".", "append", "(", "monomials_tmp", ".", "copy", "(", ")", ")", "\n", "self", ".", "polynomials", ".", "append", "(", "polynomials_tmp", ".", "copy", "(", ")", ")", "\n", "\n", "\n", "", "for", "d", "in", "range", "(", "len", "(", "self", ".", "polynomials", ")", ")", ":", "\n", "            ", "deg_d_monomial_idx", "=", "[", "]", "\n", "deg_d_monomial_coeff", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "polynomials", "[", "d", "]", ")", ")", ":", "\n", "                ", "deg_d_monomial_idx_pq", "=", "[", "]", "\n", "deg_d_monomial_coeff_pq", "=", "[", "]", "\n", "for", "key", "in", "self", ".", "polynomials", "[", "d", "]", "[", "i", "]", ":", "\n", "                    ", "deg_d_monomial_idx_pq", ".", "append", "(", "self", ".", "monomials", "[", "d", "]", ".", "index", "(", "key", ")", ")", "\n", "deg_d_monomial_coeff_pq", ".", "append", "(", "self", ".", "polynomials", "[", "d", "]", "[", "i", "]", "[", "key", "]", ")", "\n", "", "deg_d_monomial_idx", ".", "append", "(", "np", ".", "array", "(", "deg_d_monomial_idx_pq", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "deg_d_monomial_coeff", ".", "append", "(", "np", ".", "array", "(", "deg_d_monomial_coeff_pq", ",", "dtype", "=", "self", ".", "dtype", ")", ")", "\n", "", "self", ".", "monomial_idx", ".", "append", "(", "deg_d_monomial_idx", ".", "copy", "(", ")", ")", "\n", "self", ".", "monomial_coeff", ".", "append", "(", "deg_d_monomial_coeff", ".", "copy", "(", ")", ")", "\n", "\n", "", "monomials", "=", "self", ".", "monomials", ".", "copy", "(", ")", "\n", "self", ".", "monomials", "=", "[", "]", "\n", "nb_polynomials", "=", "1", "\n", "for", "d", "in", "range", "(", "len", "(", "self", ".", "polynomials", ")", ")", ":", "\n", "            ", "print", "(", "'-------------------------'", ")", "\n", "print", "(", "'degree '", ",", "d", "+", "2", ",", "' monomials'", ")", "\n", "print", "(", "'nb deg '", ",", "d", "+", "2", ",", "' monomials= '", ",", "len", "(", "monomials", "[", "d", "]", ")", ")", "\n", "print", "(", "monomials", "[", "d", "]", ")", "\n", "print", "(", "'-------------------------'", ")", "\n", "\n", "print", "(", "'-------------------------'", ")", "\n", "print", "(", "'degree '", ",", "d", "+", "2", ",", "' polynomials'", ")", "\n", "print", "(", "'nb deg '", ",", "d", "+", "2", ",", "' polynomials= '", ",", "len", "(", "self", ".", "polynomials", "[", "d", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "polynomials", "[", "d", "]", ")", ")", ":", "\n", "                ", "print", "(", "self", ".", "polynomials", "[", "d", "]", "[", "i", "]", ")", "\n", "", "print", "(", "'-------------------------'", ")", "\n", "\n", "print", "(", "'-------------------------'", ")", "\n", "print", "(", "'degree '", ",", "d", "+", "2", ",", "' monomials idx'", ")", "\n", "print", "(", "'nb deg '", ",", "d", "+", "2", ",", "' monomials idx= '", ",", "len", "(", "self", ".", "monomial_idx", "[", "d", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "monomial_idx", "[", "d", "]", ")", ")", ":", "\n", "                ", "print", "(", "self", ".", "monomial_idx", "[", "d", "]", "[", "i", "]", ")", "\n", "", "print", "(", "'-------------------------'", ")", "\n", "\n", "print", "(", "'-------------------------'", ")", "\n", "print", "(", "'degree '", ",", "d", "+", "2", ",", "' monomials coeffs'", ")", "\n", "print", "(", "'nb deg '", ",", "d", "+", "2", ",", "' monomials coeffs= '", ",", "len", "(", "self", ".", "monomial_coeff", "[", "d", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "monomial_coeff", "[", "d", "]", ")", ")", ":", "\n", "                ", "print", "(", "self", ".", "monomial_coeff", "[", "d", "]", "[", "i", "]", ")", "\n", "", "print", "(", "'-------------------------'", ")", "\n", "\n", "nb_polynomials", "+=", "len", "(", "self", ".", "polynomials", "[", "d", "]", ")", "\n", "\n", "deg_d_monomials", "=", "np", ".", "zeros", "(", "shape", "=", "(", "d", "+", "2", ",", "len", "(", "monomials", "[", "d", "]", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "monomials", "[", "d", "]", ")", ")", ":", "\n", "                ", "idx", "=", "string_to_list_", "(", "monomials", "[", "d", "]", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "idx", ")", ")", ":", "\n", "                    ", "deg_d_monomials", "[", "j", ",", "i", "]", "=", "idx", "[", "j", "]", "\n", "", "", "self", ".", "monomials", ".", "append", "(", "np", ".", "copy", "(", "deg_d_monomials", ".", "copy", "(", ")", ")", ")", "\n", "\n", "", "N", "=", "nb_irreducible", "\n", "dim_quotient", "=", "(", "N", "+", "1", ")", "*", "(", "N", "+", "1", ")", "-", "3", "\n", "print", "(", "'N= '", ",", "N", ")", "\n", "print", "(", "'max deg= '", ",", "max_degree", ")", "\n", "print", "(", "'order bound= '", ",", "max_order", ")", "\n", "print", "(", "'nb invariants= '", ",", "nb_polynomials", ")", "\n", "print", "(", "'dim quotient= '", ",", "dim_quotient", ")", "\n", "print", "(", "'nb missing invars= '", ",", "dim_quotient", "-", "nb_polynomials", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.npInvariantPolynomials.get_monomials": [[368, 370], ["None"], "methods", ["None"], ["", "def", "get_monomials", "(", "self", ",", "deg", ")", ":", "\n", "        ", "return", "self", ".", "monomials", "[", "deg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.npInvariantPolynomials.get_nb_invariant_polynomials": [[371, 373], ["len"], "methods", ["None"], ["", "def", "get_nb_invariant_polynomials", "(", "self", ",", "deg", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "monomial_idx", "[", "deg", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.npInvariantPolynomials.get_invariant_polynomial": [[374, 376], ["None"], "methods", ["None"], ["", "def", "get_invariant_polynomial", "(", "self", ",", "deg", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "monomial_idx", "[", "deg", "]", "[", "idx", "]", ",", "self", ".", "monomial_coeff", "[", "deg", "]", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.sh_to_global_index_conversion_": [[41, 43], ["numpy.multiply"], "function", ["None"], ["", "", "def", "sh_to_global_index_conversion_", "(", "l", ",", "m", ")", ":", "\n", "    ", "return", "np", ".", "multiply", "(", "l", ",", "l", ")", "+", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.global_to_sh_index_conversion_": [[44, 48], ["numpy.floor", "numpy.sqrt", "numpy.multiply"], "function", ["None"], ["", "def", "global_to_sh_index_conversion_", "(", "i", ")", ":", "\n", "    ", "l", "=", "np", ".", "floor", "(", "np", ".", "sqrt", "(", "i", ")", ")", "\n", "m", "=", "i", "-", "np", ".", "multiply", "(", "l", ",", "l", ")", "\n", "return", "[", "l", ",", "m", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_to_string_": [[49, 51], ["str"], "function", ["None"], ["", "def", "list_to_string_", "(", "L", ")", ":", "\n", "    ", "return", "'['", "+", "', '", ".", "join", "(", "str", "(", "e", ")", "for", "e", "in", "L", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.string_to_list_": [[52, 54], ["ast.literal_eval"], "function", ["None"], ["", "def", "string_to_list_", "(", "s", ")", ":", "\n", "    ", "return", "ast", ".", "literal_eval", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.multi_index_": [[55, 66], ["len", "range", "abs"], "function", ["None"], ["", "def", "multi_index_", "(", "I", ",", "p", ",", "prod", ")", ":", "\n", "    ", "idx", "=", "[", "]", "\n", "d", "=", "len", "(", "p", ")", "\n", "# k = idx.size();", "\n", "for", "i", "in", "range", "(", "d", ")", ":", "\n", "        ", "dimp", "=", "2", "*", "abs", "(", "p", "[", "d", "-", "1", "-", "i", "]", ")", "+", "1", "\n", "idx_", "=", "I", "%", "dimp", "\n", "idx", "=", "[", "idx_", "]", "+", "idx", "\n", "I", "-=", "idx_", "\n", "I", "/=", "dimp", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.monomial_index_": [[67, 73], ["higher_clebsh_gordan.multi_index_", "range", "multi_index_.sort", "higher_clebsh_gordan.list_to_string_", "len", "higher_clebsh_gordan.sh_to_global_index_conversion_", "int", "int", "abs"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.multi_index_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_to_string_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.sh_to_global_index_conversion_"], ["", "def", "monomial_index_", "(", "I", ",", "p", ",", "prod", ")", ":", "\n", "    ", "idx", "=", "multi_index_", "(", "I", ",", "p", ",", "prod", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "p", ")", ")", ":", "\n", "        ", "idx", "[", "i", "]", "=", "sh_to_global_index_conversion_", "(", "int", "(", "abs", "(", "p", "[", "i", "]", ")", ")", ",", "int", "(", "idx", "[", "i", "]", ")", ")", "\n", "", "idx", ".", "sort", "(", ")", "\n", "return", "list_to_string_", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_increasing_indices_recursive__": [[117, 126], ["len", "max", "range", "idx.append", "higher_clebsh_gordan.list_increasing_indices_recursive__", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_increasing_indices_recursive__"], ["", "", "def", "list_increasing_indices_recursive__", "(", "N", ",", "p", ",", "j", ",", "idx", ")", ":", "\n", "    ", "d", "=", "len", "(", "p", ")", "\n", "if", "j", ">=", "d", "-", "1", ":", "\n", "        ", "idx", ".", "append", "(", "np", ".", "copy", "(", "p", ")", ")", "\n", "return", "\n", "", "k1", "=", "max", "(", "p", "[", "j", "]", ",", "1", ")", "\n", "for", "p_next", "in", "range", "(", "k1", ",", "N", "+", "1", ")", ":", "\n", "        ", "p", "[", "j", "+", "1", "]", "=", "p_next", "\n", "list_increasing_indices_recursive__", "(", "N", ",", "p", ",", "j", "+", "1", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_increasing_indices_recursive_": [[130, 138], ["numpy.zeros", "range", "higher_clebsh_gordan.list_increasing_indices_recursive__"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_increasing_indices_recursive__"], ["", "", "def", "list_increasing_indices_recursive_", "(", "N", ",", "d", ",", "idx", ",", "start_at_1", "=", "True", ")", ":", "\n", "    ", "p", "=", "np", ".", "zeros", "(", "shape", "=", "(", "d", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "p0_", "=", "0", "\n", "if", "start_at_1", ":", "\n", "        ", "p0_", "=", "1", "\n", "", "for", "p0", "in", "range", "(", "p0_", ",", "N", "+", "1", ")", ":", "\n", "        ", "p", "[", "0", "]", "=", "p0", "\n", "list_increasing_indices_recursive__", "(", "N", ",", "p", ",", "0", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_increasing_indices_recursive": [[140, 151], ["range", "higher_clebsh_gordan.list_increasing_indices_recursive_"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_increasing_indices_recursive_"], ["", "", "def", "list_increasing_indices_recursive", "(", "N", ",", "d_max", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "2", ",", "d_max", "+", "1", ")", ":", "\n", "        ", "idx", "=", "[", "]", "\n", "list_increasing_indices_recursive_", "(", "N", ",", "d", ",", "idx", ")", "\n", "# res += list_increasing_indices_recursive_(N, d, idx)", "\n", "# res.append(idx)", "\n", "res", "+=", "idx", "\n", "# res.append(list_increasing_indices_recursive_(N, d, idx))", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_irreducible_invariants_recursive_q_": [[154, 168], ["len", "abs", "min", "max", "range", "higher_clebsh_gordan.list_irreducible_invariants_recursive_q_", "abs", "abs", "abs", "abs", "idx.append", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_irreducible_invariants_recursive_q_"], ["", "def", "list_irreducible_invariants_recursive_q_", "(", "p", ",", "q", ",", "i", ",", "idx", ",", "order_bound", "=", "100", ")", ":", "\n", "    ", "d", "=", "len", "(", "p", ")", "\n", "k1", "=", "abs", "(", "abs", "(", "p", "[", "i", "+", "1", "]", ")", "-", "abs", "(", "q", "[", "i", "]", ")", ")", "\n", "k2", "=", "min", "(", "abs", "(", "p", "[", "i", "+", "1", "]", ")", "+", "abs", "(", "q", "[", "i", "]", ")", ",", "order_bound", ")", "\n", "if", "i", "==", "d", "-", "2", ":", "\n", "        ", "if", "k1", "==", "0", ":", "\n", "            ", "q", "[", "d", "-", "1", "]", "=", "0", "\n", "idx", ".", "append", "(", "np", ".", "copy", "(", "q", ")", ")", "\n", "", "return", "\n", "\n", "", "k1", "=", "max", "(", "k1", ",", "1", ")", "\n", "for", "q_next", "in", "range", "(", "k1", ",", "k2", "+", "1", ")", ":", "\n", "        ", "q", "[", "i", "+", "1", "]", "=", "q_next", "\n", "list_irreducible_invariants_recursive_q_", "(", "p", ",", "q", ",", "i", "+", "1", ",", "idx", ",", "order_bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_irreductible_invariants_recursive_q": [[169, 176], ["len", "numpy.zeros", "higher_clebsh_gordan.list_irreducible_invariants_recursive_q_"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_irreducible_invariants_recursive_q_"], ["", "", "def", "list_irreductible_invariants_recursive_q", "(", "p", ",", "order_bound", "=", "100", ")", ":", "\n", "    ", "d", "=", "len", "(", "p", ")", "\n", "q", "=", "np", ".", "zeros", "(", "shape", "=", "(", "d", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "q", "[", "0", "]", "=", "p", "[", "0", "]", "\n", "idx", "=", "[", "]", "\n", "list_irreducible_invariants_recursive_q_", "(", "p", ",", "q", ",", "0", ",", "idx", ",", "order_bound", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_irreducible_invariants_recursive": [[178, 212], ["higher_clebsh_gordan.list_increasing_indices_recursive", "range", "numpy.array", "range", "print", "print", "print", "print", "print", "print", "len", "higher_clebsh_gordan.list_irreductible_invariants_recursive_q", "range", "print", "idx[].append", "len", "len", "numpy.copy", "list_irreductible_invariants_recursive_q.copy", "numpy.copy", "list_irreductible_invariants_recursive_q.copy", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_increasing_indices_recursive", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.list_irreductible_invariants_recursive_q"], ["", "def", "list_irreducible_invariants_recursive", "(", "N", ",", "max_deg", ",", "order_bound", "=", "100", ")", ":", "\n", "    ", "idx", "=", "[", "None", "]", "*", "(", "max_deg", ")", "\n", "p", "=", "list_increasing_indices_recursive", "(", "N", ",", "max_deg", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "p", ")", ")", ":", "\n", "        ", "q", "=", "list_irreductible_invariants_recursive_q", "(", "p", "[", "i", "]", ",", "order_bound", "=", "order_bound", ")", "\n", "if", "idx", "[", "len", "(", "p", "[", "i", "]", ")", "-", "1", "]", "is", "None", ":", "\n", "            ", "idx", "[", "len", "(", "p", "[", "i", "]", ")", "-", "1", "]", "=", "[", "[", "np", ".", "copy", "(", "p", "[", "i", "]", ")", ",", "q", ".", "copy", "(", ")", "]", "]", "\n", "", "else", ":", "\n", "            ", "idx", "[", "len", "(", "p", "[", "i", "]", ")", "-", "1", "]", ".", "append", "(", "[", "np", ".", "copy", "(", "p", "[", "i", "]", ")", ",", "q", ".", "copy", "(", ")", "]", ")", "\n", "\n", "\n", "", "", "p0", "=", "np", ".", "array", "(", "[", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "l0", "=", "[", "p0", "]", "\n", "\n", "idx", "[", "0", "]", "=", "[", "[", "p0", ",", "l0", "]", "]", "\n", "\n", "n_deg_d_invar", "=", "0", "\n", "n_invar", "=", "0", "\n", "for", "d", "in", "range", "(", "1", ",", "max_deg", "+", "1", ")", ":", "\n", "        ", "n_deg_d_invar", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "idx", "[", "d", "-", "1", "]", ")", ")", ":", "\n", "            ", "n_deg_d_invar", "+=", "len", "(", "idx", "[", "d", "-", "1", "]", "[", "i", "]", "[", "1", "]", ")", "\n", "", "print", "(", "'nb deg '", ",", "d", ",", "' invariants: '", ",", "n_deg_d_invar", ")", "\n", "n_invar", "+=", "n_deg_d_invar", "\n", "\n", "", "dim_quotient", "=", "(", "N", "+", "1", ")", "*", "(", "N", "+", "1", ")", "-", "3", "\n", "print", "(", "'N= '", ",", "N", ")", "\n", "print", "(", "'max deg= '", ",", "max_deg", ")", "\n", "print", "(", "'order bound= '", ",", "order_bound", ")", "\n", "print", "(", "'nb invariants= '", ",", "n_invar", ")", "\n", "print", "(", "'dim quotient= '", ",", "dim_quotient", ")", "\n", "print", "(", "'nb missing invars= '", ",", "dim_quotient", "-", "n_invar", ")", "\n", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.higher_clebsh_gordan.orthonormalize_polynomials": [[213, 257], ["len", "len", "numpy.zeros", "range", "scipy.linalg.orth", "set", "range", "dict", "range", "list", "monomial_basis.index", "dict.pop", "len", "new_polynomials.append", "abs", "set.add", "abs", "to_remove.append", "dict.copy"], "function", ["None"], ["", "def", "orthonormalize_polynomials", "(", "monomial_basis", ",", "polynomials", ",", "eps", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "# build matrix", "\n", "    ", "nb_monomials", "=", "len", "(", "monomial_basis", ")", "\n", "nb_polynomials", "=", "len", "(", "polynomials", ")", "\n", "A", "=", "np", ".", "zeros", "(", "shape", "=", "(", "nb_monomials", ",", "nb_polynomials", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", "in", "range", "(", "nb_polynomials", ")", ":", "\n", "        ", "for", "key", "in", "polynomials", "[", "i", "]", ":", "\n", "            ", "j", "=", "monomial_basis", ".", "index", "(", "key", ")", "\n", "A", "[", "j", ",", "i", "]", "=", "polynomials", "[", "i", "]", "[", "key", "]", "\n", "# orthonormalize", "\n", "", "", "\"\"\"\n    print('+++++++++++++++++++++++++')\n    print(A)\n    print('+++++++++++++++++++++++++')\n    \"\"\"", "\n", "Q", "=", "orth", "(", "A", ")", "\n", "\"\"\"\n    print('*************************')\n    print(Q)\n    print('*************************')\n    \"\"\"", "\n", "\n", "nb_polynomials", "=", "Q", ".", "shape", "[", "-", "1", "]", "\n", "new_monomial_basis", "=", "set", "(", ")", "\n", "new_polynomials", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "nb_polynomials", ")", ":", "\n", "        ", "coeffs_j", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "nb_monomials", ")", ":", "\n", "            ", "if", "abs", "(", "Q", "[", "i", ",", "j", "]", ")", ">", "eps", ":", "\n", "                ", "key", "=", "monomial_basis", "[", "i", "]", "\n", "new_monomial_basis", ".", "add", "(", "key", ")", "\n", "if", "key", "in", "coeffs_j", ":", "\n", "                    ", "coeffs_j", "[", "key", "]", "+=", "Q", "[", "i", ",", "j", "]", "\n", "", "else", ":", "\n", "                    ", "coeffs_j", "[", "key", "]", "=", "Q", "[", "i", ",", "j", "]", "\n", "", "", "", "to_remove", "=", "[", "]", "\n", "for", "key", "in", "coeffs_j", ":", "\n", "            ", "if", "abs", "(", "coeffs_j", "[", "key", "]", ")", "<", "eps", ":", "\n", "                ", "to_remove", ".", "append", "(", "key", ")", "\n", "", "", "for", "key", "in", "to_remove", ":", "\n", "            ", "coeffs_j", ".", "pop", "(", "key", ")", "\n", "", "if", "len", "(", "coeffs_j", ")", ">", "0", ":", "\n", "            ", "new_polynomials", ".", "append", "(", "coeffs_j", ".", "copy", "(", ")", ")", "\n", "", "", "return", "list", "(", "new_monomial_basis", ")", ",", "new_polynomials", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.real_to_complex_sh": [[9, 25], ["numpy.zeros", "range", "range", "numpy.flip", "numpy.flip", "numpy.asmatrix", "numpy.sqrt"], "function", ["None"], ["def", "real_to_complex_sh", "(", "l", ")", ":", "\n", "    ", "C", "=", "np", ".", "zeros", "(", "shape", "=", "(", "2", "*", "l", "+", "1", ",", "2", "*", "l", "+", "1", ")", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "c", "=", "1.", "/", "np", ".", "sqrt", "(", "2.", ")", "\n", "for", "m", "in", "range", "(", "1", ",", "l", "+", "1", ")", ":", "\n", "        ", "C", "[", "l", "+", "m", ",", "l", "+", "m", "]", "=", "-", "1j", "*", "c", "\n", "C", "[", "l", "+", "m", ",", "l", "-", "m", "]", "=", "c", "\n", "", "for", "m", "in", "range", "(", "-", "l", ",", "0", ")", ":", "\n", "        ", "C", "[", "l", "+", "m", ",", "l", "+", "m", "]", "=", "(", "(", "-", "1", ")", "**", "m", ")", "*", "c", "\n", "C", "[", "l", "+", "m", ",", "l", "-", "m", "]", "=", "1j", "*", "(", "(", "-", "1", ")", "**", "m", ")", "*", "c", "\n", "\n", "", "C", "[", "l", ",", "l", "]", "=", "1.", "\n", "C", "=", "np", ".", "flip", "(", "C", ",", "0", ")", "\n", "C", "=", "np", ".", "flip", "(", "C", ",", "1", ")", "\n", "\n", "\n", "return", "np", ".", "asmatrix", "(", "C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_to_real_sh": [[26, 28], ["real_to_complex_sh().conjugate", "wigner_matrix.real_to_complex_sh"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.real_to_complex_sh"], ["", "def", "complex_to_real_sh", "(", "l", ")", ":", "\n", "    ", "return", "(", "real_to_complex_sh", "(", "l", ")", ".", "conjugate", "(", ")", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.z_rot": [[29, 33], ["numpy.cos", "numpy.sin", "numpy.matrix"], "function", ["None"], ["", "def", "z_rot", "(", "a", ")", ":", "\n", "    ", "c", "=", "np", ".", "cos", "(", "a", ")", "\n", "s", "=", "np", ".", "sin", "(", "a", ")", "\n", "return", "np", ".", "matrix", "(", "[", "[", "c", ",", "-", "s", ",", "0.", "]", ",", "[", "s", ",", "c", ",", "0.", "]", ",", "[", "0.", ",", "0.", ",", "1.", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.y_rot": [[34, 38], ["numpy.cos", "numpy.sin", "numpy.matrix"], "function", ["None"], ["", "def", "y_rot", "(", "a", ")", ":", "\n", "    ", "c", "=", "np", ".", "cos", "(", "a", ")", "\n", "s", "=", "np", ".", "sin", "(", "a", ")", "\n", "return", "np", ".", "matrix", "(", "[", "[", "c", ",", "0.", ",", "-", "s", "]", ",", "[", "0.", ",", "1.", ",", "0.", "]", ",", "[", "s", ",", "0.", ",", "c", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.euler_rot_zyz": [[39, 41], ["numpy.matmul", "numpy.matmul", "wigner_matrix.z_rot", "wigner_matrix.z_rot", "wigner_matrix.y_rot"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.z_rot", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.z_rot", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.y_rot"], ["", "def", "euler_rot_zyz", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "z_rot", "(", "a", ")", ",", "y_rot", "(", "b", ")", ")", ",", "z_rot", "(", "c", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_wigner_2_": [[43, 125], ["numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.imag", "numpy.real", "numpy.sin", "numpy.cos", "numpy.imag", "numpy.real", "numpy.cos", "numpy.sin", "numpy.asmatrix", "numpy.asmatrix", "numpy.asmatrix", "numpy.matmul", "numpy.matmul", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "complex_wigner_2_", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "ea", "=", "np", ".", "exp", "(", "1j", "*", "a", ")", "\n", "eb", "=", "np", ".", "exp", "(", "1j", "*", "b", ")", "\n", "ec", "=", "np", ".", "exp", "(", "1j", "*", "c", ")", "\n", "\n", "e_a", "=", "np", ".", "exp", "(", "-", "1j", "*", "a", ")", "\n", "e_b", "=", "np", ".", "exp", "(", "-", "1j", "*", "b", ")", "\n", "e_c", "=", "np", ".", "exp", "(", "-", "1j", "*", "c", ")", "\n", "\n", "e2a", "=", "np", ".", "exp", "(", "1j", "*", "2.", "*", "a", ")", "\n", "e2b", "=", "np", ".", "exp", "(", "1j", "*", "2.", "*", "b", ")", "\n", "e2c", "=", "np", ".", "exp", "(", "1j", "*", "2.", "*", "c", ")", "\n", "\n", "e_2a", "=", "np", ".", "exp", "(", "-", "1j", "*", "2.", "*", "a", ")", "\n", "e_2b", "=", "np", ".", "exp", "(", "-", "1j", "*", "2.", "*", "b", ")", "\n", "e_2c", "=", "np", ".", "exp", "(", "-", "1j", "*", "2.", "*", "c", ")", "\n", "\n", "sa", "=", "np", ".", "imag", "(", "ea", ")", "\n", "ca", "=", "np", ".", "real", "(", "ea", ")", "\n", "\n", "# sb = np.imag(eb)", "\n", "# cb = np.real(eb)", "\n", "sb", "=", "np", ".", "sin", "(", "b", ")", "\n", "cb", "=", "np", ".", "cos", "(", "b", ")", "\n", "\n", "sc", "=", "np", ".", "imag", "(", "ec", ")", "\n", "cc", "=", "np", ".", "real", "(", "ec", ")", "\n", "\n", "# c2b = np.real(e2b)", "\n", "# s2b = np.imag(e2b)", "\n", "c2b", "=", "np", ".", "cos", "(", "2.", "*", "b", ")", "\n", "s2b", "=", "np", ".", "sin", "(", "2.", "*", "b", ")", "\n", "\n", "d22", "=", "(", "(", "1", "+", "cb", ")", "*", "(", "1.", "+", "cb", ")", ")", "/", "4.", "\n", "d21", "=", "-", "sb", "*", "(", "1.", "+", "cb", ")", "/", "2.", "\n", "d20", "=", "np", ".", "sqrt", "(", "3.", "/", "8.", ")", "*", "sb", "*", "sb", "\n", "d2_1", "=", "-", "sb", "*", "(", "1.", "-", "cb", ")", "/", "2.", "\n", "d2_2", "=", "(", "1.", "-", "cb", ")", "*", "(", "1.", "-", "cb", ")", "/", "4.", "\n", "d11", "=", "(", "2.", "*", "cb", "*", "cb", "+", "cb", "-", "1.", ")", "/", "2.", "\n", "d10", "=", "-", "np", ".", "sqrt", "(", "3.", "/", "8.", ")", "*", "s2b", "\n", "d1_1", "=", "(", "-", "2.", "*", "cb", "*", "cb", "+", "cb", "+", "1.", ")", "/", "2.", "\n", "d00", "=", "(", "3.", "*", "cb", "*", "cb", "-", "1.", ")", "/", "2.", "\n", "\n", "d", "=", "np", ".", "asmatrix", "(", "[", "[", "d22", ",", "-", "d21", ",", "d20", ",", "-", "d2_1", ",", "d2_2", "]", ",", "\n", "[", "d21", ",", "d11", ",", "-", "d10", ",", "d1_1", ",", "-", "d2_1", "]", ",", "\n", "[", "d20", ",", "d10", ",", "d00", ",", "-", "d10", ",", "d20", "]", ",", "\n", "[", "d2_1", ",", "d1_1", ",", "d10", ",", "d11", ",", "-", "d21", "]", ",", "\n", "[", "d2_2", ",", "d2_1", ",", "d20", ",", "d21", ",", "d22", "]", "]", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "\n", "d", "=", "d", ".", "T", "\n", "\n", "\n", "\n", "\n", "Ea", "=", "np", ".", "asmatrix", "(", "[", "[", "e_2a", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "e_a", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "1.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "ea", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "e2a", "]", "]", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "\n", "Ec", "=", "np", ".", "asmatrix", "(", "[", "[", "e_2c", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "e_c", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "1.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "ec", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "e2c", "]", "]", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "\n", "\n", "\"\"\"\n    Ea = np.asmatrix([[e2a, 0., 0., 0., 0.],\n                      [0., ea, 0., 0., 0.],\n                      [0., 0., 1., 0., 0.],\n                      [0., 0., 0., e_a, 0.],\n                      [0., 0., 0., 0., e_2a]], dtype=np.complex64)\n\n    Ec = np.asmatrix([[e2c, 0., 0., 0., 0.],\n                      [0., ec, 0., 0., 0.],\n                      [0., 0., 1., 0., 0.],\n                      [0., 0., 0., e_c, 0.],\n                      [0., 0., 0., 0., e_2c]], dtype=np.complex64)\n    \"\"\"", "\n", "\n", "return", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "Ea", ",", "d", ")", ",", "Ec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_wigner_1_": [[126, 156], ["numpy.cos", "numpy.sin", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.asmatrix", "numpy.asmatrix", "numpy.asmatrix", "numpy.matmul", "numpy.sqrt", "numpy.matmul"], "function", ["None"], ["", "def", "complex_wigner_1_", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "cb", "=", "np", ".", "cos", "(", "b", ")", "\n", "sb", "=", "np", ".", "sin", "(", "b", ")", "\n", "\n", "ea", "=", "np", ".", "exp", "(", "1j", "*", "a", ")", "\n", "ec", "=", "np", ".", "exp", "(", "1j", "*", "c", ")", "\n", "\n", "e_a", "=", "np", ".", "exp", "(", "-", "1j", "*", "a", ")", "\n", "e_c", "=", "np", ".", "exp", "(", "-", "1j", "*", "c", ")", "\n", "\n", "d11", "=", "(", "1.", "+", "cb", ")", "/", "2.", "\n", "d10", "=", "-", "sb", "/", "(", "np", ".", "sqrt", "(", "2.", ")", ")", "\n", "d1_1", "=", "(", "1.", "-", "cb", ")", "/", "2.", "\n", "d00", "=", "cb", "\n", "\n", "d", "=", "np", ".", "asmatrix", "(", "[", "[", "d11", ",", "-", "d10", ",", "d1_1", "]", ",", "\n", "[", "d10", ",", "d00", ",", "-", "d10", "]", ",", "\n", "[", "d1_1", ",", "d10", ",", "d11", "]", "]", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "\n", "d", "=", "d", ".", "T", "\n", "\n", "Ea", "=", "np", ".", "asmatrix", "(", "[", "[", "e_a", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "1.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "ea", "]", "]", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "\n", "Ec", "=", "np", ".", "asmatrix", "(", "[", "[", "e_c", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "1.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "ec", "]", "]", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "\n", "return", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "Ea", ",", "d", ")", ",", "Ec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_wigner_": [[161, 169], ["numpy.asmatrix", "wigner_matrix.complex_wigner_1_", "wigner_matrix.complex_wigner_2_"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_wigner_1_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_wigner_2_"], ["", "def", "complex_wigner_", "(", "l", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "assert", "(", "l", "==", "0", "or", "l", "==", "1", "or", "l", "==", "2", ")", "\n", "if", "l", "==", "0", ":", "\n", "        ", "return", "np", ".", "asmatrix", "(", "[", "[", "1.", "]", "]", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "", "if", "l", "==", "1", ":", "\n", "        ", "return", "complex_wigner_1_", "(", "a", ",", "b", ",", "c", ")", "\n", "", "if", "l", "==", "2", ":", "\n", "        ", "return", "complex_wigner_2_", "(", "a", ",", "b", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.wigner_d_matrix_coeffs": [[170, 196], ["numpy.sqrt", "numpy.max", "numpy.min", "numpy.sin", "numpy.cos", "range", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial"], "function", ["None"], ["", "", "def", "wigner_d_matrix_coeffs", "(", "l", ",", "j", ",", "k", ",", "b", ")", ":", "\n", "    ", "p", "=", "np", ".", "math", ".", "factorial", "(", "l", "+", "j", ")", "*", "np", ".", "math", ".", "factorial", "(", "l", "-", "j", ")", "*", "np", ".", "math", ".", "factorial", "(", "l", "+", "k", ")", "*", "np", ".", "math", ".", "factorial", "(", "l", "-", "k", ")", "\n", "p", "=", "np", ".", "sqrt", "(", "p", ")", "\n", "\n", "# l + k - s >= 0", "\n", "# s >= 0", "\n", "# j - k + s >= 0", "\n", "# l - j - s >= 0", "\n", "\n", "# l + k >= s", "\n", "# s >= 0", "\n", "# s >= k - j", "\n", "# l - j >= s", "\n", "\n", "s1", "=", "np", ".", "max", "(", "[", "0", ",", "k", "-", "j", "]", ")", "\n", "s2", "=", "np", ".", "min", "(", "[", "l", "+", "k", ",", "l", "-", "j", "]", ")", "\n", "s_", "=", "np", ".", "sin", "(", "b", "/", "2.", ")", "\n", "c_", "=", "np", ".", "cos", "(", "b", "/", "2.", ")", "\n", "d", "=", "0.", "\n", "for", "s", "in", "range", "(", "s1", ",", "s2", "+", "1", ")", ":", "\n", "        ", "q", "=", "np", ".", "math", ".", "factorial", "(", "l", "+", "k", "-", "s", ")", "*", "np", ".", "math", ".", "factorial", "(", "s", ")", "*", "np", ".", "math", ".", "factorial", "(", "j", "-", "k", "+", "s", ")", "*", "np", ".", "math", ".", "factorial", "(", "l", "-", "j", "-", "s", ")", "\n", "x", "=", "(", "1.", "*", "p", ")", "/", "(", "1.", "*", "q", ")", "\n", "x", "*=", "(", "-", "1", ")", "**", "(", "j", "-", "k", "+", "s", ")", "\n", "x", "*=", "(", "c_", "**", "(", "2", "*", "l", "+", "k", "-", "j", "-", "2", "*", "s", ")", ")", "*", "(", "s_", "**", "(", "j", "-", "k", "+", "2", "*", "s", ")", ")", "\n", "d", "+=", "x", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.wigner_d_matrix": [[197, 209], ["numpy.zeros", "range", "numpy.asmatrix", "range", "wigner_matrix.wigner_d_matrix_coeffs"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.wigner_d_matrix_coeffs"], ["", "def", "wigner_d_matrix", "(", "l", ",", "b", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "d", "=", "np", ".", "zeros", "(", "shape", "=", "(", "2", "*", "l", "+", "1", ",", "2", "*", "l", "+", "1", ")", ",", "dtype", "=", "dtype", ")", "\n", "\"\"\"\n    for m in range((2*l+1)*(2*l+1)):\n        k = m % (2*l+1)\n        j = np.int((m - k) / (2*l+1))\n        d[j, k] = wigner_d_matrix_coeffs(l, j-l, k-l, b)\n    \"\"\"", "\n", "for", "j", "in", "range", "(", "2", "*", "l", "+", "1", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "2", "*", "l", "+", "1", ")", ":", "\n", "            ", "d", "[", "j", ",", "k", "]", "=", "wigner_d_matrix_coeffs", "(", "l", ",", "j", "-", "l", ",", "k", "-", "l", ",", "b", ")", "\n", "", "", "return", "np", ".", "asmatrix", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.diag_exp": [[210, 219], ["numpy.zeros", "range", "numpy.asmatrix", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "def", "diag_exp", "(", "l", ",", "a", ")", ":", "\n", "    ", "e", "=", "np", ".", "zeros", "(", "shape", "=", "(", "2", "*", "l", "+", "1", ",", "2", "*", "l", "+", "1", ")", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "\n", "for", "m", "in", "range", "(", "l", "+", "1", ")", ":", "\n", "        ", "e", "[", "m", "+", "l", ",", "m", "+", "l", "]", "=", "np", ".", "exp", "(", "m", "*", "1j", "*", "a", ")", "\n", "e", "[", "m", ",", "m", "]", "=", "np", ".", "exp", "(", "(", "m", "-", "l", ")", "*", "1j", "*", "a", ")", "\n", "\n", "\n", "", "return", "np", ".", "asmatrix", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_D_wigner": [[227, 244], ["wigner_matrix.wigner_d_matrix", "wigner_matrix.diag_exp", "wigner_matrix.diag_exp", "range", "range", "numpy.exp", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.wigner_d_matrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.diag_exp", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.diag_exp"], ["def", "complex_D_wigner", "(", "l", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "\n", "    ", "d", "=", "wigner_d_matrix", "(", "l", ",", "b", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "ea", "=", "diag_exp", "(", "l", ",", "a", ")", "\n", "ec", "=", "diag_exp", "(", "l", ",", "c", ")", "\n", "# D = np.matmul(np.matmul(ea, d), ec)", "\n", "D", "=", "d", "\n", "\n", "for", "p", "in", "range", "(", "2", "*", "l", "+", "1", ")", ":", "\n", "        ", "for", "q", "in", "range", "(", "2", "*", "l", "+", "1", ")", ":", "\n", "            ", "D", "[", "q", ",", "p", "]", "*=", "np", ".", "exp", "(", "-", "(", "p", "-", "l", ")", "*", "1j", "*", "a", ")", "*", "np", ".", "exp", "(", "-", "(", "q", "-", "l", ")", "*", "1j", "*", "c", ")", "\n", "# np.conjugate(D)", "\n", "# print(D)", "\n", "# D = np.flip(D, axis=0)", "\n", "# D = np.flip(D, axis=1)", "\n", "# D = np.conjugate(D)", "\n", "", "", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.real_D_wigner_": [[245, 250], ["wigner_matrix.complex_to_real_sh", "wigner_matrix.complex_D_wigner", "numpy.real", "numpy.conjugate"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_to_real_sh", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_D_wigner"], ["", "def", "real_D_wigner_", "(", "l", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "C", "=", "complex_to_real_sh", "(", "l", ")", "\n", "D", "=", "complex_D_wigner", "(", "l", ",", "a", ",", "b", ",", "c", ")", "\n", "# return np.conjugate(C.T)*D*C", "\n", "return", "np", ".", "real", "(", "C", "*", "D", "*", "np", ".", "conjugate", "(", "C", ".", "T", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.real_D_wigner_from_euler": [[251, 258], ["numpy.zeros", "range", "wigner_matrix.real_D_wigner_"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.real_D_wigner_"], ["", "def", "real_D_wigner_from_euler", "(", "l_max", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "D", "=", "np", ".", "zeros", "(", "(", "(", "l_max", "+", "1", ")", "**", "2", ",", "(", "l_max", "+", "1", ")", "**", "2", ")", ")", "\n", "k", "=", "0", "\n", "for", "l", "in", "range", "(", "l_max", "+", "1", ")", ":", "\n", "        ", "D", "[", "k", ":", "k", "+", "(", "2", "*", "l", "+", "1", ")", ",", "k", ":", "k", "+", "(", "2", "*", "l", "+", "1", ")", "]", "=", "real_D_wigner_", "(", "l", ",", "a", ",", "b", ",", "c", ")", "\n", "k", "+=", "2", "*", "l", "+", "1", "\n", "", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.real_D_wigner_from_quaternion": [[259, 263], ["scipy.spatial.transform.rotation.Rotation", "scipy.spatial.transform.rotation.Rotation.as_euler", "wigner_matrix.real_D_wigner_from_euler"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.real_D_wigner_from_euler"], ["", "def", "real_D_wigner_from_quaternion", "(", "l_max", ",", "q", ")", ":", "\n", "    ", "r", "=", "Rotation", "(", "q", ")", "\n", "euler", "=", "r", ".", "as_euler", "(", "'zyz'", ")", "\n", "return", "real_D_wigner_from_euler", "(", "l_max", ",", "euler", "[", "0", "]", ",", "euler", "[", "1", "]", ",", "euler", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.tfClebshGordanMatrices.__init__": [[171, 174], ["clebsh_gordan_decomposition.tf_clebsh_gordan_matrices__"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.tf_clebsh_gordan_matrices__"], ["    ", "def", "__init__", "(", "self", ",", "max_degree", ",", "dtype", "=", "tf", ".", "complex64", ")", ":", "\n", "        ", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "Q", "=", "tf_clebsh_gordan_matrices__", "(", "max_degree", ",", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.tfClebshGordanMatrices.getMatrix": [[175, 183], ["str", "clebsh_gordan_decomposition.Q_from_cb_", "tensorflow.convert_to_tensor", "str", "str"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb_"], ["", "def", "getMatrix", "(", "self", ",", "j", ",", "k", ",", "J", ")", ":", "\n", "        ", "key", "=", "str", "(", "j", ")", "+", "'_'", "+", "str", "(", "k", ")", "+", "'_'", "+", "str", "(", "J", ")", "\n", "if", "key", "in", "self", ".", "Q", ":", "\n", "            ", "return", "self", ".", "Q", "[", "key", "]", "\n", "", "else", ":", "\n", "            ", "Q_jkJ", "=", "Q_from_cb_", "(", "j", ",", "k", ",", "J", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "Q", "[", "key", "]", "=", "tf", ".", "convert_to_tensor", "(", "Q_jkJ", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "return", "self", ".", "Q", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.__init__": [[220, 228], ["clebsh_gordan_decomposition.np_clebsh_gordan_matrices__"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.np_clebsh_gordan_matrices__"], ["    ", "def", "__init__", "(", "self", ",", "max_degree", ",", "matrix_representation", "=", "True", ",", "real", "=", "False", ",", "dtype", "=", "np", ".", "complex64", ")", ":", "\n", "        ", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "real", "=", "real", "\n", "self", ".", "matrix_representation", "=", "matrix_representation", "\n", "self", ".", "Q", "=", "np_clebsh_gordan_matrices__", "(", "max_degree", ",", "\n", "matrix_representation", "=", "matrix_representation", ",", "\n", "is_real", "=", "real", ",", "\n", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.getMatrix": [[229, 240], ["str", "clebsh_gordan_decomposition.np_clebsh_gordan_matrix", "str", "str"], "methods", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.np_clebsh_gordan_matrix"], ["", "def", "getMatrix", "(", "self", ",", "j", ",", "k", ",", "J", ")", ":", "\n", "        ", "key", "=", "str", "(", "j", ")", "+", "'_'", "+", "str", "(", "k", ")", "+", "'_'", "+", "str", "(", "J", ")", "\n", "if", "key", "in", "self", ".", "Q", ":", "\n", "            ", "return", "self", ".", "Q", "[", "key", "]", "\n", "", "else", ":", "\n", "            ", "Q_jkJ", "=", "np_clebsh_gordan_matrix", "(", "j", ",", "k", ",", "J", ",", "\n", "matrix_representation", "=", "self", ".", "matrix_representation", ",", "\n", "is_real", "=", "self", ".", "real", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "\n", "self", ".", "Q", "[", "key", "]", "=", "Q_jkJ", "\n", "return", "self", ".", "Q", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.clebsch_gordan_": [[23, 58], ["float", "numpy.math.factorial", "float", "numpy.min", "numpy.max", "range", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.sqrt", "numpy.math.factorial", "numpy.math.factorial", "float", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial", "numpy.math.factorial"], "function", ["None"], ["def", "clebsch_gordan_", "(", "j1", ",", "j2", ",", "J", ",", "m1", ",", "m2", ",", "M", ")", ":", "\n", "# d = float((M == m1 + m2))", "\n", "    ", "if", "M", "!=", "m1", "+", "m2", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "A", "=", "float", "(", "(", "2", "*", "J", "+", "1", ")", "*", "np", ".", "math", ".", "factorial", "(", "J", "+", "j1", "-", "j2", ")", "*", "np", ".", "math", ".", "factorial", "(", "J", "-", "j1", "+", "j2", ")", "*", "np", ".", "math", ".", "factorial", "(", "j1", "+", "j2", "-", "J", ")", ")", "\n", "A", "/=", "np", ".", "math", ".", "factorial", "(", "J", "+", "j1", "+", "j2", "+", "1", ")", "\n", "\n", "B", "=", "float", "(", "np", ".", "math", ".", "factorial", "(", "J", "+", "M", ")", "*", "np", ".", "math", ".", "factorial", "(", "J", "-", "M", ")", "*", "np", ".", "math", ".", "factorial", "(", "j1", "-", "m1", ")", "*", "\n", "np", ".", "math", ".", "factorial", "(", "j1", "+", "m1", ")", "*", "np", ".", "math", ".", "factorial", "(", "j2", "-", "m2", ")", "*", "np", ".", "math", ".", "factorial", "(", "j2", "+", "m2", ")", ")", "\n", "C", "=", "0.", "\n", "\n", "b0", "=", "(", "j1", "+", "j2", "-", "J", ")", "\n", "b1", "=", "(", "j1", "-", "m1", ")", "\n", "b2", "=", "(", "j2", "+", "m2", ")", "\n", "\n", "a0", "=", "0", "\n", "a1", "=", "(", "J", "-", "j2", "+", "m1", ")", "\n", "a2", "=", "(", "J", "-", "j1", "-", "m2", ")", "\n", "\n", "k2", "=", "np", ".", "min", "(", "[", "b0", ",", "b1", ",", "b2", "]", ")", "\n", "k1", "=", "np", ".", "max", "(", "[", "-", "a0", ",", "-", "a1", ",", "-", "a2", "]", ")", "\n", "\n", "for", "k", "in", "range", "(", "k1", ",", "k2", "+", "1", ")", ":", "\n", "        ", "a0_", "=", "np", ".", "math", ".", "factorial", "(", "k", "+", "a0", ")", "\n", "a1_", "=", "np", ".", "math", ".", "factorial", "(", "k", "+", "a1", ")", "\n", "a2_", "=", "np", ".", "math", ".", "factorial", "(", "k", "+", "a2", ")", "\n", "\n", "b0_", "=", "np", ".", "math", ".", "factorial", "(", "b0", "-", "k", ")", "\n", "b1_", "=", "np", ".", "math", ".", "factorial", "(", "b1", "-", "k", ")", "\n", "b2_", "=", "np", ".", "math", ".", "factorial", "(", "b2", "-", "k", ")", "\n", "\n", "C", "+=", "(", "(", "-", "1", ")", "**", "k", ")", "/", "(", "float", "(", "a0_", "*", "a1_", "*", "a2_", "*", "b0_", "*", "b1_", "*", "b2_", ")", ")", "\n", "\n", "", "return", "np", ".", "sqrt", "(", "A", "*", "B", ")", "*", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.clebsch_gordan": [[60, 71], ["clebsh_gordan_decomposition.clebsch_gordan_", "clebsh_gordan_decomposition.clebsch_gordan_", "clebsh_gordan_decomposition.clebsch_gordan_", "clebsh_gordan_decomposition.clebsch_gordan_"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.clebsch_gordan_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.clebsch_gordan_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.clebsch_gordan_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.clebsch_gordan_"], ["", "def", "clebsch_gordan", "(", "j1", ",", "j2", ",", "J", ",", "m1", ",", "m2", ",", "M", ")", ":", "\n", "    ", "if", "M", "<", "0", ":", "\n", "        ", "if", "j1", ">=", "j2", ":", "\n", "            ", "return", "(", "-", "1.", ")", "**", "(", "J", "-", "j1", "-", "j2", ")", "*", "clebsch_gordan_", "(", "j1", ",", "j2", ",", "J", ",", "-", "m1", ",", "-", "m2", ",", "-", "M", ")", "\n", "", "else", ":", "\n", "            ", "return", "clebsch_gordan_", "(", "j2", ",", "j1", ",", "J", ",", "-", "m2", ",", "-", "m1", ",", "-", "M", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "j1", ">=", "j2", ":", "\n", "            ", "return", "clebsch_gordan_", "(", "j1", ",", "j2", ",", "J", ",", "m1", ",", "m2", ",", "M", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "-", "1.", ")", "**", "(", "J", "-", "j1", "-", "j2", ")", "*", "clebsch_gordan_", "(", "j2", ",", "j1", ",", "J", ",", "m2", ",", "m1", ",", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb": [[74, 82], ["numpy.zeros", "range", "range", "clebsh_gordan_decomposition.clebsch_gordan"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.clebsch_gordan"], ["", "", "", "def", "Q_from_cb", "(", "j1", ",", "j2", ",", "J", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "Q", "=", "np", ".", "zeros", "(", "shape", "=", "(", "2", "*", "J", "+", "1", ",", "(", "2", "*", "j1", "+", "1", ")", "*", "(", "2", "*", "j2", "+", "1", ")", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "m1", "in", "range", "(", "-", "j1", ",", "j1", "+", "1", ")", ":", "\n", "        ", "for", "m2", "in", "range", "(", "-", "j2", ",", "j2", "+", "1", ")", ":", "\n", "            ", "m3", "=", "m1", "+", "m2", "\n", "if", "-", "J", "<=", "m3", "<=", "J", ":", "\n", "                ", "Q", "[", "m3", "+", "J", ",", "(", "2", "*", "j2", "+", "1", ")", "*", "(", "m1", "+", "j1", ")", "+", "(", "m2", "+", "j2", ")", "]", "=", "clebsch_gordan", "(", "j1", ",", "j2", ",", "J", ",", "m1", ",", "m2", ",", "m3", ")", "\n", "", "", "", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb_": [[84, 93], ["numpy.zeros", "range", "range", "clebsh_gordan_decomposition.clebsch_gordan"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.clebsch_gordan"], ["", "def", "Q_from_cb_", "(", "j1", ",", "j2", ",", "J", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "# Q = np.zeros(shape=(2 * J + 1, (2 * j1 + 1), (2 * j2 + 1)), dtype=dtype)", "\n", "    ", "Q", "=", "np", ".", "zeros", "(", "shape", "=", "(", "2", "*", "J", "+", "1", ",", "(", "2", "*", "j1", "+", "1", ")", ",", "(", "2", "*", "j2", "+", "1", ")", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "m1", "in", "range", "(", "-", "j1", ",", "j1", "+", "1", ")", ":", "\n", "        ", "for", "m2", "in", "range", "(", "-", "j2", ",", "j2", "+", "1", ")", ":", "\n", "            ", "m3", "=", "m1", "+", "m2", "\n", "if", "-", "J", "<=", "m3", "<=", "J", ":", "\n", "                ", "Q", "[", "m3", "+", "J", ",", "m1", "+", "j1", ",", "m2", "+", "j2", "]", "=", "clebsch_gordan", "(", "j1", ",", "j2", ",", "J", ",", "m1", ",", "m2", ",", "m3", ")", "\n", "", "", "", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_Q_from_cb": [[96, 116], ["numpy.zeros", "range", "sphericalHarmonicsFlow.spherical_harmonics.complex_to_real_sh", "numpy.conjugate", "sphericalHarmonicsFlow.spherical_harmonics.complex_to_real_sh", "numpy.conjugate", "sphericalHarmonicsFlow.spherical_harmonics.complex_to_real_sh", "numpy.matmul", "range", "numpy.matmul", "numpy.kron", "clebsh_gordan_decomposition.clebsch_gordan"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_to_real_sh", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_to_real_sh", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_to_real_sh", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.clebsch_gordan"], ["", "def", "real_Q_from_cb", "(", "j1", ",", "j2", ",", "J", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "Q", "=", "np", ".", "zeros", "(", "shape", "=", "(", "2", "*", "J", "+", "1", ",", "(", "2", "*", "j1", "+", "1", ")", "*", "(", "2", "*", "j2", "+", "1", ")", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "m1", "in", "range", "(", "-", "j1", ",", "j1", "+", "1", ")", ":", "\n", "        ", "for", "m2", "in", "range", "(", "-", "j2", ",", "j2", "+", "1", ")", ":", "\n", "            ", "m3", "=", "m1", "+", "m2", "\n", "if", "-", "J", "<=", "m3", "<=", "J", ":", "\n", "                ", "Q", "[", "m3", "+", "J", ",", "(", "2", "*", "j2", "+", "1", ")", "*", "(", "m1", "+", "j1", ")", "+", "(", "m2", "+", "j2", ")", "]", "=", "clebsch_gordan", "(", "j1", ",", "j2", ",", "J", ",", "m1", ",", "m2", ",", "m3", ")", "\n", "\n", "", "", "", "CRj1", "=", "complex_to_real_sh", "(", "j1", ")", "\n", "RCj1", "=", "np", ".", "conjugate", "(", "CRj1", ".", "T", ")", "\n", "\n", "CRj2", "=", "complex_to_real_sh", "(", "j2", ")", "\n", "RCj2", "=", "np", ".", "conjugate", "(", "CRj2", ".", "T", ")", "\n", "\n", "CRJ", "=", "complex_to_real_sh", "(", "J", ")", "\n", "# RCJ = np.conjugate(CRJ.T)", "\n", "Q", "=", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "CRJ", ",", "Q", ")", ",", "np", ".", "kron", "(", "RCj1", ",", "RCj2", ")", ")", "\n", "# print('uu')", "\n", "# print(np.linalg.norm(Q-np.real(Q)))", "\n", "return", "Q", "\n", "# return np.matmul(np.matmul(RCJ, Q), np.kron(CRj1, CRj2))", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_Q_from_cb_": [[120, 137], ["clebsh_gordan_decomposition.Q_from_cb_", "sphericalHarmonicsFlow.spherical_harmonics.complex_to_real_sh", "numpy.conjugate", "sphericalHarmonicsFlow.spherical_harmonics.complex_to_real_sh", "numpy.conjugate", "sphericalHarmonicsFlow.spherical_harmonics.complex_to_real_sh", "numpy.reshape", "numpy.matmul", "numpy.reshape", "numpy.matmul", "numpy.kron", "numpy.asarray", "abs", "abs", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_to_real_sh", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_to_real_sh", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_to_real_sh"], ["", "def", "real_Q_from_cb_", "(", "j1", ",", "j2", ",", "J", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "Q", "=", "Q_from_cb_", "(", "j1", ",", "j2", ",", "J", ",", "dtype", "=", "dtype", ")", "\n", "\n", "CRj1", "=", "complex_to_real_sh", "(", "j1", ")", "\n", "RCj1", "=", "np", ".", "conjugate", "(", "CRj1", ".", "T", ")", "\n", "\n", "CRj2", "=", "complex_to_real_sh", "(", "j2", ")", "\n", "RCj2", "=", "np", ".", "conjugate", "(", "CRj2", ".", "T", ")", "\n", "\n", "CRJ", "=", "complex_to_real_sh", "(", "J", ")", "\n", "# RCJ = np.conjugate(CRJ.T)", "\n", "Q", "=", "np", ".", "reshape", "(", "Q", ",", "newshape", "=", "(", "2", "*", "abs", "(", "J", ")", "+", "1", ",", "-", "1", ")", ")", "\n", "Q", "=", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "CRJ", ",", "Q", ")", ",", "np", ".", "kron", "(", "RCj1", ",", "RCj2", ")", ")", "\n", "Q", "=", "np", ".", "reshape", "(", "np", ".", "asarray", "(", "Q", ")", ",", "newshape", "=", "(", "2", "*", "abs", "(", "J", ")", "+", "1", ",", "2", "*", "abs", "(", "j1", ")", "+", "1", ",", "2", "*", "abs", "(", "j2", ")", "+", "1", ")", ")", "\n", "# print('uu')", "\n", "# print(np.linalg.norm(Q-np.real(Q)))", "\n", "return", "Q", "\n", "# return np.matmul(np.matmul(RCJ, Q), np.kron(CRj1, CRj2))", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.tf_clebsh_gordan_matrices_": [[141, 154], ["range", "dict", "range", "zip", "range", "abs", "keys.append", "clebsh_gordan_decomposition.Q_from_cb", "values.append", "tensorflow.convert_to_tensor", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb"], ["", "def", "tf_clebsh_gordan_matrices_", "(", "max_degree", ",", "dtype", "=", "tf", ".", "complex64", ")", ":", "\n", "    ", "assert", "(", "max_degree", ">=", "0", ")", "\n", "keys", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_degree", "+", "1", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "max_degree", "+", "1", ")", ":", "\n", "            ", "for", "J", "in", "range", "(", "abs", "(", "k", "-", "j", ")", ",", "k", "+", "j", "+", "1", ")", ":", "\n", "# keys.append('('+str(j)+','+str(k)+','+str(J)+')')", "\n", "                ", "keys", ".", "append", "(", "str", "(", "j", ")", "+", "'_'", "+", "str", "(", "k", ")", "+", "'_'", "+", "str", "(", "J", ")", ")", "\n", "QJ", "=", "Q_from_cb", "(", "j", ",", "k", ",", "J", ")", "\n", "values", ".", "append", "(", "tf", ".", "convert_to_tensor", "(", "QJ", ",", "dtype", "=", "dtype", ")", ")", "\n", "\n", "", "", "", "return", "dict", "(", "zip", "(", "keys", ",", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.tf_clebsh_gordan_matrices__": [[155, 168], ["range", "dict", "range", "zip", "range", "abs", "keys.append", "clebsh_gordan_decomposition.Q_from_cb_", "values.append", "tensorflow.convert_to_tensor", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb_"], ["", "def", "tf_clebsh_gordan_matrices__", "(", "max_degree", ",", "dtype", "=", "tf", ".", "complex64", ")", ":", "\n", "    ", "assert", "(", "max_degree", ">=", "0", ")", "\n", "keys", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_degree", "+", "1", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "max_degree", "+", "1", ")", ":", "\n", "            ", "for", "J", "in", "range", "(", "abs", "(", "k", "-", "j", ")", ",", "k", "+", "j", "+", "1", ")", ":", "\n", "# keys.append('('+str(j)+','+str(k)+','+str(J)+')')", "\n", "                ", "keys", ".", "append", "(", "str", "(", "j", ")", "+", "'_'", "+", "str", "(", "k", ")", "+", "'_'", "+", "str", "(", "J", ")", ")", "\n", "QJ", "=", "Q_from_cb_", "(", "j", ",", "k", ",", "J", ")", "\n", "values", ".", "append", "(", "tf", ".", "convert_to_tensor", "(", "QJ", ",", "dtype", "=", "dtype", ")", ")", "\n", "\n", "", "", "", "return", "dict", "(", "zip", "(", "keys", ",", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.np_clebsh_gordan_matrix": [[185, 197], ["clebsh_gordan_decomposition.real_Q_from_cb", "clebsh_gordan_decomposition.Q_from_cb", "clebsh_gordan_decomposition.real_Q_from_cb_", "clebsh_gordan_decomposition.Q_from_cb_"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_Q_from_cb", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_Q_from_cb_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb_"], ["", "", "", "def", "np_clebsh_gordan_matrix", "(", "j", ",", "k", ",", "J", ",", "matrix_representation", "=", "True", ",", "is_real", "=", "False", ",", "dtype", "=", "np", ".", "complex64", ")", ":", "\n", "    ", "if", "matrix_representation", ":", "\n", "        ", "if", "is_real", ":", "\n", "            ", "QJ", "=", "real_Q_from_cb", "(", "j", ",", "k", ",", "J", ",", "dtype", "=", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "QJ", "=", "Q_from_cb", "(", "j", ",", "k", ",", "J", ",", "dtype", "=", "dtype", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "is_real", ":", "\n", "            ", "QJ", "=", "real_Q_from_cb_", "(", "j", ",", "k", ",", "J", ",", "dtype", "=", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "QJ", "=", "Q_from_cb_", "(", "j", ",", "k", ",", "J", ",", "dtype", "=", "dtype", ")", "\n", "", "", "return", "QJ", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.np_clebsh_gordan_matrices__": [[198, 217], ["range", "dict", "range", "zip", "range", "abs", "keys.append", "clebsh_gordan_decomposition.np_clebsh_gordan_matrix", "values.append", "print", "print", "str", "numpy.real", "numpy.imag", "str", "str"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.np_clebsh_gordan_matrix"], ["", "def", "np_clebsh_gordan_matrices__", "(", "max_degree", ",", "matrix_representation", "=", "True", ",", "is_real", "=", "False", ",", "dtype", "=", "np", ".", "complex64", ")", ":", "\n", "    ", "assert", "(", "max_degree", ">=", "0", ")", "\n", "keys", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_degree", "+", "1", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "max_degree", "+", "1", ")", ":", "\n", "            ", "for", "J", "in", "range", "(", "abs", "(", "k", "-", "j", ")", ",", "k", "+", "j", "+", "1", ")", ":", "\n", "# keys.append('('+str(j)+','+str(k)+','+str(J)+')')", "\n", "                ", "keys", ".", "append", "(", "str", "(", "j", ")", "+", "'_'", "+", "str", "(", "k", ")", "+", "'_'", "+", "str", "(", "J", ")", ")", "\n", "QJ", "=", "np_clebsh_gordan_matrix", "(", "j", ",", "k", ",", "J", ",", "\n", "matrix_representation", "=", "matrix_representation", ",", "\n", "is_real", "=", "is_real", ",", "\n", "dtype", "=", "dtype", ")", "\n", "values", ".", "append", "(", "QJ", ")", "\n", "print", "(", "'j: '", ",", "j", ",", "' k: '", ",", "k", ",", "' J: '", ",", "J", ")", "\n", "# print(QJ)", "\n", "print", "(", "np", ".", "real", "(", "QJ", ")", "+", "np", ".", "imag", "(", "QJ", ")", ")", "\n", "\n", "", "", "", "return", "dict", "(", "zip", "(", "keys", ",", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.tf_clebsh_gordan_matrices": [[242, 262], ["range", "range", "int", "range", "numpy.concatenate", "Q.append", "numpy.min", "abs", "clebsh_gordan_decomposition.Q_from_cb", "np.concatenate.append", "tensorflow.convert_to_tensor"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb"], ["", "", "", "def", "tf_clebsh_gordan_matrices", "(", "max_degree", ",", "dtype", "=", "tf", ".", "complex64", ")", ":", "\n", "    ", "assert", "(", "max_degree", ">=", "0", ")", "\n", "Q", "=", "[", "]", "\n", "idx_min", "=", "[", "]", "\n", "idx_max", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_degree", "+", "1", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "max_degree", "+", "1", ")", ":", "\n", "            ", "J_max", "=", "int", "(", "np", ".", "min", "(", "[", "max_degree", "+", "1", ",", "j", "+", "k", "+", "1", "]", ")", ")", "\n", "Qjk", "=", "[", "]", "\n", "a", "=", "0", "\n", "b", "=", "0", "\n", "for", "J", "in", "range", "(", "abs", "(", "k", "-", "j", ")", ",", "J_max", ")", ":", "\n", "                ", "a", "=", "b", "\n", "b", "+=", "J", "\n", "QJ", "=", "Q_from_cb", "(", "j", ",", "k", ",", "J", ")", "\n", "Qjk", ".", "append", "(", "QJ", ")", "\n", "\n", "", "Qjk", "=", "np", ".", "concatenate", "(", "Qjk", ",", "axis", "=", "0", ")", "\n", "Q", ".", "append", "(", "tf", ".", "convert_to_tensor", "(", "Qjk", ",", "dtype", "=", "dtype", ")", ")", "\n", "", "", "return", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_conj": [[283, 285], ["numpy.matmul", "numpy.matmul"], "function", ["None"], ["def", "real_conj", "(", "A", ",", "Q", ")", ":", "\n", "    ", "return", "np", ".", "matmul", "(", "Q", ".", "T", ",", "np", ".", "matmul", "(", "A", ",", "Q", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.complex_conj": [[286, 288], ["numpy.matmul", "numpy.conjugate", "numpy.matmul"], "function", ["None"], ["", "def", "complex_conj", "(", "A", ",", "Q", ")", ":", "\n", "    ", "return", "np", ".", "matmul", "(", "np", ".", "conjugate", "(", "Q", ".", "T", ")", ",", "np", ".", "matmul", "(", "A", ",", "Q", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.unit_test4": [[289, 333], ["numpy.asmatrix", "numpy.random.rand", "sphericalHarmonicsFlow.wigner_matrix.complex_wigner_", "sphericalHarmonicsFlow.wigner_matrix.complex_wigner_", "sphericalHarmonicsFlow.wigner_matrix.complex_wigner_", "print", "numpy.kron", "print", "print", "clebsh_gordan_decomposition.Q_from_cb", "numpy.matmul", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_wigner_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_wigner_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_wigner_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb"], ["", "def", "unit_test4", "(", ")", ":", "\n", "\n", "    ", "j1", "=", "2", "\n", "j2", "=", "2", "\n", "J", "=", "2", "\n", "# cb_dict = clebsch_gordan_dict()", "\n", "\n", "Q", "=", "np", ".", "asmatrix", "(", "Q_from_cb", "(", "j1", ",", "j2", ",", "J", ",", "dtype", "=", "np", ".", "complex64", ")", ")", "\n", "# Q = np.sqrt(2.) * Q", "\n", "\n", "# Q_ = np.asmatrix(Q_from_cb_dict(j1, j2, J, cb_dict, dtype=np.complex64))", "\n", "# Q_ = np.sqrt(2.)*Q_", "\n", "\n", "# Q__ = tensorProductDecompose_(j1, j2, J)", "\n", "# Q__ = np.sqrt(1./2.49634557e-02)*Q__", "\n", "\n", "angles", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "\n", "# angles = [1., 0., 0.]", "\n", "\n", "\n", "Dj1", "=", "complex_wigner_", "(", "j1", ",", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ")", "\n", "Dj2", "=", "complex_wigner_", "(", "j2", ",", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ")", "\n", "DJ", "=", "complex_wigner_", "(", "J", ",", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ")", "\n", "\n", "\n", "\n", "print", "(", "'eee'", ")", "\n", "\n", "prod", "=", "np", ".", "kron", "(", "Dj1", ",", "Dj2", ")", "\n", "\n", "y", "=", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "Q", ",", "prod", ")", ",", "Q", ".", "T", ")", "-", "DJ", "\n", "\n", "# print(y)", "\n", "# print(np.matmul(Q.T, Q))", "\n", "# print(np.matmul(Q, Q.T))", "\n", "\n", "# print(np.real(prod))", "\n", "# print(np.real(Q))", "\n", "# print(np.real(Q__))", "\n", "# y = np.matmul(Q, prod) - np.matmul(DJ, Q)", "\n", "# y = np.matmul(y, Q.T)", "\n", "# print(np.linalg.norm(Q - Q_, 'fro'))", "\n", "print", "(", "np", ".", "linalg", ".", "norm", "(", "y", ")", ")", "\n", "print", "(", "np", ".", "linalg", ".", "norm", "(", "DJ", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.unit_test5": [[337, 375], ["numpy.random.rand", "numpy.asmatrix", "sphericalHarmonicsFlow.wigner_matrix.complex_wigner_", "sphericalHarmonicsFlow.wigner_matrix.complex_wigner_", "numpy.kron", "range", "print", "print", "range", "numpy.sqrt", "range", "range", "range", "print", "print", "print", "print", "abs", "abs", "abs", "abs", "abs", "clebsh_gordan_decomposition.clebsch_gordan", "numpy.real", "numpy.real", "numpy.imag", "numpy.imag", "clebsh_gordan_decomposition.clebsch_gordan"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_wigner_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_wigner_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.clebsch_gordan", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.clebsch_gordan"], ["", "def", "unit_test5", "(", ")", ":", "\n", "    ", "j1", "=", "1", "\n", "j2", "=", "1", "\n", "\n", "angles", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "\n", "# angles = [1.0, 0.0, 0.]", "\n", "\n", "D0", "=", "np", ".", "asmatrix", "(", "[", "[", "1.", "]", "]", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "D1", "=", "complex_wigner_", "(", "1", ",", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ")", "\n", "D2", "=", "complex_wigner_", "(", "2", ",", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ")", "\n", "\n", "D", "=", "[", "D0", ",", "D1", ",", "D2", "]", "\n", "\n", "prod", "=", "np", ".", "kron", "(", "D", "[", "j1", "]", ",", "D", "[", "j2", "]", ")", "\n", "# prod = np.kron(D[j2], D[j1])", "\n", "\n", "c", "=", "0.0", "\n", "for", "m1", "in", "range", "(", "-", "j1", ",", "j1", "+", "1", ")", ":", "\n", "        ", "for", "k1", "in", "range", "(", "-", "j1", ",", "j1", "+", "1", ")", ":", "\n", "            ", "for", "m2", "in", "range", "(", "-", "j2", ",", "j2", "+", "1", ")", ":", "\n", "                ", "for", "k2", "in", "range", "(", "-", "j2", ",", "j2", "+", "1", ")", ":", "\n", "                    ", "a", "=", "D", "[", "j1", "]", "[", "j1", "+", "m1", ",", "j1", "+", "k1", "]", "*", "D", "[", "j2", "]", "[", "j2", "+", "m2", ",", "j2", "+", "k2", "]", "\n", "b", "=", "0.", "\n", "# b = prod[(2*j2+1)*(m1+j1) + (m2+j2), (2*j2+1)*(k1+j1) + (k2+j2)]", "\n", "\n", "for", "J", "in", "range", "(", "abs", "(", "j1", "-", "j2", ")", ",", "j1", "+", "j2", "+", "1", ")", ":", "\n", "                        ", "if", "(", "2", "*", "J", ">=", "m1", "+", "m2", "+", "J", ">=", "0", "and", "2", "*", "J", ">=", "k1", "+", "k2", "+", "J", ">=", "0", ")", ":", "\n", "                            ", "b", "+=", "D", "[", "J", "]", "[", "m1", "+", "m2", "+", "J", ",", "k1", "+", "k2", "+", "J", "]", "*", "clebsch_gordan", "(", "j1", ",", "j2", ",", "J", ",", "m1", ",", "m2", ",", "m1", "+", "m2", ")", "*", "clebsch_gordan", "(", "j1", ",", "j2", ",", "J", ",", "k1", ",", "k2", ",", "k1", "+", "k2", ")", "\n", "\n", "", "", "print", "(", "'zz'", ")", "\n", "print", "(", "a", ")", "\n", "print", "(", "b", ")", "\n", "print", "(", "a", "-", "b", ")", "\n", "\n", "c", "+=", "abs", "(", "np", ".", "real", "(", "a", "-", "b", ")", ")", "*", "abs", "(", "np", ".", "real", "(", "a", "-", "b", ")", ")", "+", "abs", "(", "np", ".", "imag", "(", "a", "-", "b", ")", ")", "*", "abs", "(", "np", ".", "imag", "(", "a", "-", "b", ")", ")", "\n", "\n", "", "", "", "", "print", "(", "'rr'", ")", "\n", "print", "(", "np", ".", "sqrt", "(", "c", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.unit_test6": [[378, 393], ["numpy.random.rand", "numpy.asmatrix", "numpy.asmatrix", "numpy.asmatrix", "numpy.asmatrix", "sphericalHarmonicsFlow.wigner_matrix.complex_wigner_", "sphericalHarmonicsFlow.wigner_matrix.complex_wigner_", "print", "clebsh_gordan_decomposition.Q_from_cb", "clebsh_gordan_decomposition.Q_from_cb", "clebsh_gordan_decomposition.Q_from_cb", "clebsh_gordan_decomposition.real_conj", "numpy.linalg.norm", "clebsh_gordan_decomposition.real_conj", "numpy.kron", "clebsh_gordan_decomposition.real_conj"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_wigner_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_wigner_", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_conj", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_conj", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_conj"], ["", "def", "unit_test6", "(", ")", ":", "\n", "    ", "angles", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "\n", "# angles = [0., 1., 0.]", "\n", "\n", "Q0", "=", "np", ".", "asmatrix", "(", "Q_from_cb", "(", "1", ",", "1", ",", "0", ",", "dtype", "=", "np", ".", "complex64", ")", ")", "\n", "Q1", "=", "np", ".", "asmatrix", "(", "Q_from_cb", "(", "1", ",", "1", ",", "1", ",", "dtype", "=", "np", ".", "complex64", ")", ")", "\n", "Q2", "=", "np", ".", "asmatrix", "(", "Q_from_cb", "(", "1", ",", "1", ",", "2", ",", "dtype", "=", "np", ".", "complex64", ")", ")", "\n", "\n", "D0", "=", "np", ".", "asmatrix", "(", "[", "[", "1.", "]", "]", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "D1", "=", "complex_wigner_", "(", "1", ",", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ")", "\n", "D2", "=", "complex_wigner_", "(", "2", ",", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ")", "\n", "\n", "y", "=", "np", ".", "kron", "(", "D1", ",", "D1", ")", "-", "real_conj", "(", "D2", ",", "Q2", ")", "-", "real_conj", "(", "D1", ",", "Q1", ")", "-", "real_conj", "(", "D0", ",", "Q0", ")", "\n", "\n", "print", "(", "np", ".", "linalg", ".", "norm", "(", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.tensor_decomposition_unit_test___": [[394, 403], ["sphericalHarmonicsFlow.wigner_matrix.complex_D_wigner", "sphericalHarmonicsFlow.wigner_matrix.complex_D_wigner", "sphericalHarmonicsFlow.wigner_matrix.complex_D_wigner", "clebsh_gordan_decomposition.Q_from_cb", "print", "abs", "clebsh_gordan_decomposition.real_conj", "numpy.linalg.norm", "numpy.kron"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_D_wigner", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_D_wigner", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_D_wigner", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_conj"], ["", "def", "tensor_decomposition_unit_test___", "(", "j", ",", "k", ",", "J", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "Dj", "=", "complex_D_wigner", "(", "j", ",", "a", ",", "b", ",", "c", ")", "\n", "Dk", "=", "complex_D_wigner", "(", "k", ",", "a", ",", "b", ",", "c", ")", "\n", "DJ", "=", "complex_D_wigner", "(", "k", ",", "a", ",", "b", ",", "c", ")", "\n", "assert", "(", "j", "+", "k", ">=", "J", ">=", "abs", "(", "k", "-", "j", ")", ")", "\n", "QJ", "=", "Q_from_cb", "(", "j", ",", "k", ",", "J", ")", "\n", "\n", "y", "=", "real_conj", "(", "np", ".", "kron", "(", "Dj", ",", "Dk", ")", ",", "QJ", ".", "T", ")", "-", "DJ", "\n", "print", "(", "np", ".", "linalg", ".", "norm", "(", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.tensor_decomposition_unit_test__": [[405, 422], ["sphericalHarmonicsFlow.wigner_matrix.complex_D_wigner", "sphericalHarmonicsFlow.wigner_matrix.complex_D_wigner", "numpy.zeros", "numpy.kron", "range", "print", "print", "abs", "print", "sphericalHarmonicsFlow.wigner_matrix.complex_D_wigner", "clebsh_gordan_decomposition.Q_from_cb", "print", "clebsh_gordan_decomposition.real_conj", "numpy.linalg.norm", "clebsh_gordan_decomposition.real_conj", "numpy.linalg.norm", "numpy.kron"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_D_wigner", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_D_wigner", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.complex_D_wigner", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.Q_from_cb", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_conj", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_conj"], ["", "def", "tensor_decomposition_unit_test__", "(", "j", ",", "k", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "Dj", "=", "complex_D_wigner", "(", "j", ",", "a", ",", "b", ",", "c", ")", "\n", "Dk", "=", "complex_D_wigner", "(", "k", ",", "a", ",", "b", ",", "c", ")", "\n", "\n", "D_", "=", "np", ".", "zeros", "(", "shape", "=", "(", "(", "2", "*", "j", "+", "1", ")", "*", "(", "2", "*", "k", "+", "1", ")", ",", "(", "2", "*", "j", "+", "1", ")", "*", "(", "2", "*", "k", "+", "1", ")", ")", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "D", "=", "np", ".", "kron", "(", "Dj", ",", "Dk", ")", "\n", "\n", "for", "J", "in", "range", "(", "abs", "(", "k", "-", "j", ")", ",", "k", "+", "j", "+", "1", ")", ":", "\n", "        ", "print", "(", "'j = '", ",", "j", ",", "'k = '", ",", "k", ",", "'J = '", ",", "J", ")", "\n", "DJ", "=", "complex_D_wigner", "(", "J", ",", "a", ",", "b", ",", "c", ")", "\n", "QJ", "=", "Q_from_cb", "(", "j", ",", "k", ",", "J", ")", "\n", "y", "=", "real_conj", "(", "np", ".", "kron", "(", "Dj", ",", "Dk", ")", ",", "QJ", ".", "T", ")", "-", "DJ", "\n", "# print(np.linalg.norm(DJ))", "\n", "print", "(", "np", ".", "linalg", ".", "norm", "(", "y", ")", ")", "\n", "D_", "+=", "real_conj", "(", "DJ", ",", "QJ", ")", "\n", "", "print", "(", "'decompose j = '", ",", "j", ",", "'k = '", ",", "k", ")", "\n", "print", "(", "np", ".", "linalg", ".", "norm", "(", "D", "-", "D_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.tensor_decomposition_unit_test": [[424, 433], ["range", "numpy.random.rand", "range", "range", "clebsh_gordan_decomposition.tensor_decomposition_unit_test__"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.tensor_decomposition_unit_test__"], ["", "def", "tensor_decomposition_unit_test", "(", "l", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "angles", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "\n", "a", "=", "angles", "[", "0", "]", "\n", "b", "=", "angles", "[", "1", "]", "\n", "c", "=", "angles", "[", "2", "]", "\n", "for", "j", "in", "range", "(", "l", "+", "1", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "l", "+", "1", ")", ":", "\n", "                ", "tensor_decomposition_unit_test__", "(", "j", ",", "k", ",", "a", ",", "b", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.invariant_feature": [[434, 447], ["None"], "function", ["None"], ["", "", "", "", "def", "invariant_feature", "(", "equivariant_features", ",", "p", ",", "q", ",", "Q", ")", ":", "\n", "# y = tf.einsum('bvqmrc,bvqnrc->bvqmnrc', equivariant_features[p[0]], equivariant_features[p[1]])", "\n", "# the equivariant channels must in the last dimesion", "\n", "\n", "#y = tf.einsum('bvqrcm,bvqrcn->bvqrcmn', equivariant_features[p[0]], equivariant_features[p[1]])", "\n", "    ", "\"\"\"\n    nb = y.get_shape()[0].value\n    nv = y.get_shape()[1].value\n    nq = y.get_shape()[2].value\n    nr = y.get_shape()[3].value\n    nc = y.get_shape()[4].value\n    y = tf.reshape(y, shape=(nb, nv, nq, nr, nc, -1))\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.higher_product_matrix": [[448, 475], ["clebsh_gordan_decomposition.npClebshGordanMatrices", "numpy.reshape", "numpy.reshape", "numpy.real", "numpy.kron", "numpy.matmul", "print", "print", "clebsh_gordan_decomposition.npClebshGordanMatrices.getMatrix", "clebsh_gordan_decomposition.npClebshGordanMatrices.getMatrix", "numpy.eye", "numpy.real", "numpy.matmul", "np.matmul.transpose", "abs", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.getMatrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.getMatrix"], ["", "def", "higher_product_matrix", "(", "p", ",", "q", ")", ":", "\n", "\n", "\n", "    ", "Q", "=", "npClebshGordanMatrices", "(", "3", ")", "\n", "\n", "\"\"\"\n    res = np.eye((2*abs(q[0])+1)*(2*abs(p[1])+1))\n    I = np.eye(1)\n    res = np.real(np.reshape(Q.getMatrix(q[0], p[1], q[1]), newshape=(2*abs(q[1])+1, -1)))\n    for i in range(len(p)-1):\n\n\n        Qi_ = np.real(np.reshape(Q.getMatrix(q[i+1], p[i+2], q[i+2]), newshape=(2*abs(q[i+1])+1, -1)))\n        Qi = np.kron(Qi_, I)\n        res = np.matmul(Qi_, np.kron(res, I))\n        I = np.kron(I, np.eye(2 * abs(p[i + 1]) + 1))\n    \"\"\"", "\n", "\n", "\n", "Q1", "=", "np", ".", "reshape", "(", "Q", ".", "getMatrix", "(", "q", "[", "0", "]", ",", "p", "[", "1", "]", ",", "q", "[", "1", "]", ")", ",", "newshape", "=", "(", "2", "*", "abs", "(", "q", "[", "1", "]", ")", "+", "1", ",", "-", "1", ")", ")", "\n", "Q2", "=", "np", ".", "reshape", "(", "Q", ".", "getMatrix", "(", "q", "[", "1", "]", ",", "p", "[", "2", "]", ",", "q", "[", "2", "]", ")", ",", "newshape", "=", "(", "2", "*", "abs", "(", "q", "[", "2", "]", ")", "+", "1", ",", "-", "1", ")", ")", "\n", "M", "=", "np", ".", "real", "(", "Q1", ")", "\n", "M", "=", "np", ".", "kron", "(", "M", ",", "np", ".", "eye", "(", "2", "*", "abs", "(", "p", "[", "2", "]", ")", "+", "1", ")", ")", "\n", "M", "=", "np", ".", "matmul", "(", "np", ".", "real", "(", "Q2", ")", ",", "M", ")", "\n", "print", "(", "M", ")", "\n", "print", "(", "np", ".", "matmul", "(", "M", ",", "M", ".", "transpose", "(", ")", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.higher_product": [[477, 521], ["numpy.asmatrix", "numpy.linalg.norm", "sphericalHarmonicsFlow.spherical_harmonics.complex_sh_", "sphericalHarmonicsFlow.spherical_harmonics.complex_sh_", "range", "numpy.random.rand", "numpy.matmul", "abs", "abs", "numpy.asmatrix", "numpy.linalg.norm", "numpy.einsum", "print", "print", "numpy.einsum", "numpy.einsum", "numpy.einsum", "numpy.einsum", "len", "numpy.random.rand", "numpy.matmul", "Q.getMatrix", "Q.getMatrix", "numpy.linalg.norm", "sphericalHarmonicsFlow.spherical_harmonics.complex_sh_", "sphericalHarmonicsFlow.spherical_harmonics.complex_sh_", "Q.getMatrix", "Q.getMatrix", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.getMatrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.getMatrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.getMatrix", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.npClebshGordanMatrices.getMatrix"], ["", "def", "higher_product", "(", "R", ",", "X", ",", "p", ",", "q", ",", "Q", ")", ":", "\n", "\n", "# print(np.linalg.norm(y))", "\n", "# print(y)", "\n", "    ", "X", "=", "np", ".", "asmatrix", "(", "np", ".", "random", ".", "rand", "(", "1", ",", "3", ")", ")", "\n", "X", "/=", "(", "np", ".", "linalg", ".", "norm", "(", "X", ")", ")", "\n", "X", "*=", "10.0", "\n", "X_rot", "=", "(", "np", ".", "matmul", "(", "R", ".", "T", ",", "X", ".", "T", ")", ")", ".", "T", "\n", "\n", "y", "=", "complex_sh_", "(", "abs", "(", "p", "[", "0", "]", ")", ",", "X", ")", "\n", "y_rot", "=", "complex_sh_", "(", "abs", "(", "p", "[", "0", "]", ")", ",", "X_rot", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "p", ")", "-", "1", ")", ":", "\n", "        ", "\"\"\"\n        print('uuu')\n        print(X.shape)\n        print(y.shape)\n        print(p)\n        print(complex_sh_(abs(p[i+1]), X).shape)\n        print(Q.getMatrix(q[i], p[i+1], q[i+1]).shape)\n        print('aaa')\n        \"\"\"", "\n", "\"\"\"\n        print('aaaaaa')\n        print(q[i], p[i+1], q[i+1])\n        print(Q.getMatrix(q[i], p[i+1], q[i+1]))\n        print('bbbbbb')\n        \"\"\"", "\n", "X", "=", "np", ".", "asmatrix", "(", "np", ".", "random", ".", "rand", "(", "1", ",", "3", ")", ")", "\n", "X", "/=", "(", "np", ".", "linalg", ".", "norm", "(", "X", ")", ")", "\n", "X", "*=", "10.0", "\n", "X_rot", "=", "(", "np", ".", "matmul", "(", "R", ".", "T", ",", "X", ".", "T", ")", ")", ".", "T", "\n", "\n", "\n", "z", "=", "np", ".", "einsum", "(", "'jmn,jmn->j'", ",", "Q", ".", "getMatrix", "(", "q", "[", "i", "]", ",", "p", "[", "i", "+", "1", "]", ",", "q", "[", "i", "+", "1", "]", ")", ",", "Q", ".", "getMatrix", "(", "q", "[", "i", "]", ",", "p", "[", "i", "+", "1", "]", ",", "q", "[", "i", "+", "1", "]", ")", ")", "\n", "print", "(", "'qi, pi+1, qi+1 = '", ",", "q", "[", "i", "]", ",", "p", "[", "i", "+", "1", "]", ",", "q", "[", "i", "+", "1", "]", ")", "\n", "print", "(", "'norm z= '", ",", "np", ".", "linalg", ".", "norm", "(", "z", ")", ")", "\n", "y", "=", "np", ".", "einsum", "(", "'vm,vn->vmn'", ",", "y", ",", "complex_sh_", "(", "abs", "(", "p", "[", "i", "+", "1", "]", ")", ",", "X", ")", ")", "\n", "y_rot", "=", "np", ".", "einsum", "(", "'vm,vn->vmn'", ",", "y_rot", ",", "complex_sh_", "(", "abs", "(", "p", "[", "i", "+", "1", "]", ")", ",", "X_rot", ")", ")", "\n", "y", "=", "np", ".", "einsum", "(", "'jmn,vmn->vj'", ",", "Q", ".", "getMatrix", "(", "q", "[", "i", "]", ",", "p", "[", "i", "+", "1", "]", ",", "q", "[", "i", "+", "1", "]", ")", ",", "y", ")", "\n", "y_rot", "=", "np", ".", "einsum", "(", "'jmn,vmn->vj'", ",", "Q", ".", "getMatrix", "(", "q", "[", "i", "]", ",", "p", "[", "i", "+", "1", "]", ",", "q", "[", "i", "+", "1", "]", ")", ",", "y_rot", ")", "\n", "# print(y)", "\n", "# print(np.linalg.norm(y))", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.higher_tensor_decomposition_unit_test": [[522, 556], ["clebsh_gordan_decomposition.npClebshGordanMatrices", "p.append", "q.append", "p.append", "q.append", "p.append", "q.append", "range", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.random.rand", "numpy.asmatrix", "numpy.linalg.norm", "sphericalHarmonicsFlow.wigner_matrix.euler_rot_zyz", "range", "numpy.random.rand", "len", "range", "numpy.size", "print", "print", "clebsh_gordan_decomposition.higher_product", "print", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.wigner_matrix.euler_rot_zyz", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.higher_product"], ["", "def", "higher_tensor_decomposition_unit_test", "(", ")", ":", "\n", "    ", "Q", "=", "npClebshGordanMatrices", "(", "3", ")", "\n", "p", "=", "[", "]", "\n", "q", "=", "[", "]", "\n", "\n", "# degree 1 invariants", "\n", "p", ".", "append", "(", "np", ".", "zeros", "(", "shape", "=", "(", "1", ",", "1", ")", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "q", ".", "append", "(", "np", ".", "zeros", "(", "shape", "=", "(", "1", ",", "1", ")", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "\n", "p", ".", "append", "(", "np", ".", "array", "(", "[", "[", "1", ",", "1", "]", ",", "[", "2", ",", "2", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "q", ".", "append", "(", "np", ".", "array", "(", "[", "[", "1", ",", "0", "]", ",", "[", "2", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "\n", "p", ".", "append", "(", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "2", "]", ",", "\n", "[", "1", ",", "2", ",", "2", "]", ",", "\n", "[", "2", ",", "2", ",", "2", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "q", ".", "append", "(", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "2", ",", "0", "]", ",", "\n", "[", "1", ",", "2", ",", "0", "]", ",", "\n", "[", "2", ",", "2", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "angles", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "\n", "X", "=", "np", ".", "asmatrix", "(", "np", ".", "random", ".", "rand", "(", "1", ",", "3", ")", ")", "\n", "X", "/=", "(", "np", ".", "linalg", ".", "norm", "(", "X", ")", ")", "\n", "a", "=", "angles", "[", "0", "]", "\n", "b", "=", "angles", "[", "1", "]", "\n", "c", "=", "angles", "[", "2", "]", "\n", "R", "=", "euler_rot_zyz", "(", "a", ",", "b", ",", "c", ")", "\n", "for", "d", "in", "range", "(", "len", "(", "p", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "np", ".", "size", "(", "p", "[", "d", "]", ",", "0", ")", ")", ":", "\n", "                ", "print", "(", "p", "[", "d", "]", "[", "j", ",", ":", "]", ")", "\n", "print", "(", "q", "[", "d", "]", "[", "j", ",", ":", "]", ")", "\n", "z", "=", "higher_product", "(", "R", ",", "X", ",", "p", "[", "d", "]", "[", "j", ",", ":", "]", ",", "q", "[", "d", "]", "[", "j", ",", ":", "]", ",", "Q", ")", "\n", "print", "(", "'norm output = '", ",", "np", ".", "linalg", ".", "norm", "(", "z", ")", ")", "\n", "# print(np.linalg.norm(X))", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_tensor_decomposition_unit_test__": [[558, 585], ["sphericalHarmonicsFlow.wigner_matrix.real_D_wigner", "sphericalHarmonicsFlow.wigner_matrix.real_D_wigner", "numpy.zeros", "numpy.kron", "range", "print", "print", "abs", "print", "sphericalHarmonicsFlow.wigner_matrix.real_D_wigner", "clebsh_gordan_decomposition.real_Q_from_cb", "print", "clebsh_gordan_decomposition.real_conj", "numpy.linalg.norm", "clebsh_gordan_decomposition.complex_conj", "numpy.linalg.norm", "numpy.kron", "numpy.conjugate"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_Q_from_cb", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_conj", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.complex_conj"], ["", "", "", "", "def", "real_tensor_decomposition_unit_test__", "(", "j", ",", "k", ",", "a", ",", "b", ",", "c", ")", ":", "\n", "\n", "# CRj = complex_to_real_sh(j)", "\n", "# CRk = complex_to_real_sh(k)", "\n", "\n", "# K = np.kron(CRj, CRk)", "\n", "# K_T = np.conjugate(K.T)", "\n", "\n", "    ", "Dj", "=", "real_D_wigner", "(", "j", ",", "a", ",", "b", ",", "c", ")", "\n", "Dk", "=", "real_D_wigner", "(", "k", ",", "a", ",", "b", ",", "c", ")", "\n", "\n", "D_", "=", "np", ".", "zeros", "(", "shape", "=", "(", "(", "2", "*", "j", "+", "1", ")", "*", "(", "2", "*", "k", "+", "1", ")", ",", "(", "2", "*", "j", "+", "1", ")", "*", "(", "2", "*", "k", "+", "1", ")", ")", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "D", "=", "np", ".", "kron", "(", "Dj", ",", "Dk", ")", "\n", "\n", "for", "J", "in", "range", "(", "abs", "(", "k", "-", "j", ")", ",", "k", "+", "j", "+", "1", ")", ":", "\n", "        ", "print", "(", "'j = '", ",", "j", ",", "'k = '", ",", "k", ",", "'J = '", ",", "J", ")", "\n", "# CRJ = complex_to_real_sh(J)", "\n", "# RCJ = np.conjugate(CRJ.T)", "\n", "DJ", "=", "real_D_wigner", "(", "J", ",", "a", ",", "b", ",", "c", ")", "\n", "QJ", "=", "real_Q_from_cb", "(", "j", ",", "k", ",", "J", ",", "dtype", "=", "np", ".", "complex64", ")", "\n", "\n", "y", "=", "complex_conj", "(", "np", ".", "kron", "(", "Dj", ",", "Dk", ")", ",", "np", ".", "conjugate", "(", "QJ", ".", "T", ")", ")", "-", "DJ", "\n", "# print(np.linalg.norm(DJ))", "\n", "print", "(", "np", ".", "linalg", ".", "norm", "(", "y", ")", ")", "\n", "D_", "+=", "real_conj", "(", "DJ", ",", "QJ", ")", "\n", "", "print", "(", "'decompose j = '", ",", "j", ",", "'k = '", ",", "k", ")", "\n", "print", "(", "np", ".", "linalg", ".", "norm", "(", "D", "-", "D_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_tensor_decomposition_unit_test": [[587, 596], ["range", "numpy.random.rand", "range", "range", "clebsh_gordan_decomposition.real_tensor_decomposition_unit_test__"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.clebsh_gordan_decomposition.real_tensor_decomposition_unit_test__"], ["", "def", "real_tensor_decomposition_unit_test", "(", "l", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "angles", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "\n", "a", "=", "angles", "[", "0", "]", "\n", "b", "=", "angles", "[", "1", "]", "\n", "c", "=", "angles", "[", "2", "]", "\n", "for", "j", "in", "range", "(", "l", "+", "1", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "l", "+", "1", ")", ":", "\n", "                ", "real_tensor_decomposition_unit_test__", "(", "j", ",", "k", ",", "a", ",", "b", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.np_spherical_harmonics.np_unnormalized_real_sh": [[4, 111], ["list", "numpy.full", "Y0.append", "Y1.append", "Y1.append", "Y1.append", "numpy.stack", "numpy.multiply", "Y2.append", "Y2.append", "Y2.append", "Y2.append", "Y2.append", "numpy.multiply", "Y3.append", "Y3.append", "Y3.append", "Y3.append", "Y3.append", "Y3.append", "Y3.append", "numpy.multiply", "numpy.multiply", "Y4.append", "Y4.append", "Y4.append", "Y4.append", "Y4.append", "Y4.append", "Y4.append", "Y4.append", "Y4.append", "numpy.sqrt", "numpy.sqrt", "numpy.tile", "numpy.take", "numpy.tile", "numpy.take", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.multiply", "numpy.multiply", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "tf.multiply"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.tile", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.tile"], ["def", "np_unnormalized_real_sh", "(", "l_max", ",", "X", ")", ":", "\n", "    ", "assert", "(", "4", ">=", "l_max", ">=", "1", ")", "\n", "Y", "=", "list", "(", ")", "\n", "x", "=", "X", "[", "...", ",", "0", "]", "\n", "y", "=", "X", "[", "...", ",", "1", "]", "\n", "z", "=", "X", "[", "...", ",", "2", "]", "\n", "\n", "Y0", "=", "[", "]", "\n", "\n", "Y00", "=", "np", ".", "full", "(", "shape", "=", "x", ".", "shape", ",", "fill_value", "=", "np", ".", "sqrt", "(", "1.", "/", "np", ".", "pi", ")", "/", "2.", ")", "\n", "\n", "Y0", ".", "append", "(", "Y00", ")", "\n", "\n", "# Y0 = tf.stack(Y0, axis=-1)", "\n", "\n", "Y", "+=", "Y0", "\n", "\n", "Y1", "=", "[", "]", "\n", "Y1_1", "=", "(", "np", ".", "sqrt", "(", "3.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "y", "\n", "Y10", "=", "(", "np", ".", "sqrt", "(", "3.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "z", "\n", "Y11", "=", "(", "-", "np", ".", "sqrt", "(", "3.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "x", "\n", "\n", "Y1", ".", "append", "(", "Y1_1", ")", "\n", "Y1", ".", "append", "(", "Y10", ")", "\n", "Y1", ".", "append", "(", "Y11", ")", "\n", "\n", "Y", "+=", "Y1", "\n", "\n", "if", "l_max", ">=", "2", ":", "\n", "        ", "Y2", "=", "[", "]", "\n", "# [x**2, y**2, z**2, x*y, y*z, z*x]", "\n", "X2", "=", "np", ".", "multiply", "(", "np", ".", "tile", "(", "X", ",", "reps", "=", "(", "1", ",", "1", ",", "1", ",", "2", ")", ")", ",", "np", ".", "take", "(", "X", ",", "[", "0", ",", "1", ",", "2", ",", "1", ",", "2", ",", "0", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "x2", "=", "X2", "[", "...", ",", "0", "]", "\n", "y2", "=", "X2", "[", "...", ",", "1", "]", "\n", "z2", "=", "X2", "[", "...", ",", "2", "]", "\n", "\n", "Y2_2", "=", "(", "np", ".", "sqrt", "(", "15.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "X2", "[", "...", ",", "3", "]", "\n", "Y2_1", "=", "(", "np", ".", "sqrt", "(", "15.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "X2", "[", "...", ",", "4", "]", "\n", "Y20", "=", "(", "np", ".", "sqrt", "(", "5.", "/", "np", ".", "pi", ")", "/", "4.", ")", "*", "(", "2.", "*", "z2", "-", "x2", "-", "y2", ")", "\n", "Y21", "=", "(", "-", "np", ".", "sqrt", "(", "15.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "X2", "[", "...", ",", "5", "]", "\n", "Y22", "=", "(", "np", ".", "sqrt", "(", "15.", "/", "np", ".", "pi", ")", "/", "4.", ")", "*", "(", "x2", "-", "y2", ")", "\n", "\n", "Y2", ".", "append", "(", "Y2_2", ")", "\n", "Y2", ".", "append", "(", "Y2_1", ")", "\n", "Y2", ".", "append", "(", "Y20", ")", "\n", "Y2", ".", "append", "(", "Y21", ")", "\n", "Y2", ".", "append", "(", "Y22", ")", "\n", "\n", "Y", "+=", "Y2", "\n", "\n", "", "if", "l_max", ">=", "3", ":", "\n", "# [x**3, y**3, z**3, x**2*y, y**2*z, z**2*x, x**2*z, y**2*x, z**2*y]", "\n", "        ", "X3", "=", "np", ".", "multiply", "(", "np", ".", "tile", "(", "X2", "[", "...", ",", "0", ":", "3", "]", ",", "reps", "=", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", ",", "np", ".", "take", "(", "X", ",", "[", "0", ",", "1", ",", "2", ",", "1", ",", "2", ",", "0", ",", "2", ",", "0", ",", "1", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "xyz", "=", "x", "*", "y", "*", "z", "\n", "\n", "Y3", "=", "[", "]", "\n", "Y3_3", "=", "(", "np", ".", "sqrt", "(", "35.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "4.", ")", "*", "(", "3.", "*", "X3", "[", "...", ",", "3", "]", "-", "X3", "[", "...", ",", "1", "]", ")", "\n", "Y3_2", "=", "(", "np", ".", "sqrt", "(", "105.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "xyz", "\n", "Y3_1", "=", "(", "np", ".", "sqrt", "(", "21.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "4.", ")", "*", "(", "4.", "*", "X3", "[", "...", ",", "-", "1", "]", "-", "X3", "[", "...", ",", "3", "]", "-", "X3", "[", "...", ",", "1", "]", ")", "\n", "Y30", "=", "(", "np", ".", "sqrt", "(", "7.", "/", "np", ".", "pi", ")", "/", "4.", ")", "*", "(", "2.", "*", "X3", "[", "...", ",", "2", "]", "-", "3.", "*", "X3", "[", "...", ",", "6", "]", "-", "3.", "*", "X3", "[", "...", ",", "4", "]", ")", "\n", "Y31", "=", "(", "-", "np", ".", "sqrt", "(", "21.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "4.", ")", "*", "(", "4.", "*", "X3", "[", "...", ",", "5", "]", "-", "X3", "[", "...", ",", "0", "]", "-", "X3", "[", "...", ",", "-", "2", "]", ")", "\n", "Y32", "=", "(", "np", ".", "sqrt", "(", "105.", "/", "np", ".", "pi", ")", "/", "4.", ")", "*", "(", "X3", "[", "...", ",", "-", "3", "]", "-", "X3", "[", "...", ",", "4", "]", ")", "\n", "Y33", "=", "(", "-", "np", ".", "sqrt", "(", "35.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "4.", ")", "*", "(", "X3", "[", "...", ",", "0", "]", "-", "3.", "*", "X3", "[", "...", ",", "-", "2", "]", ")", "\n", "\n", "Y3", ".", "append", "(", "Y3_3", ")", "\n", "Y3", ".", "append", "(", "Y3_2", ")", "\n", "Y3", ".", "append", "(", "Y3_1", ")", "\n", "Y3", ".", "append", "(", "Y30", ")", "\n", "Y3", ".", "append", "(", "Y31", ")", "\n", "Y3", ".", "append", "(", "Y32", ")", "\n", "Y3", ".", "append", "(", "Y33", ")", "\n", "\n", "Y", "+=", "Y3", "\n", "\n", "", "if", "l_max", ">=", "4", ":", "\n", "        ", "Y4", "=", "[", "]", "\n", "r2", "=", "X2", "[", "...", ",", "0", "]", "+", "X2", "[", "...", ",", "1", "]", "+", "X2", "[", "...", ",", "2", "]", "\n", "r4", "=", "np", ".", "multiply", "(", "r2", ",", "r2", ")", "\n", "z4", "=", "np", ".", "multiply", "(", "X2", "[", "...", ",", "2", "]", ",", "X2", "[", "...", ",", "2", "]", ")", "\n", "x2_y2", "=", "X2", "[", "...", ",", "0", "]", "-", "X2", "[", "...", ",", "1", "]", "\n", "Y4_4", "=", "(", "3.", "/", "4.", ")", "*", "np", ".", "sqrt", "(", "35.", "/", "np", ".", "pi", ")", "*", "(", "np", ".", "multiply", "(", "X2", "[", "...", ",", "3", "]", ",", "x2_y2", ")", ")", "\n", "p3x2_y2", "=", "3.", "*", "X2", "[", "...", ",", "0", "]", "-", "X2", "[", "...", ",", "1", "]", "\n", "Y4_3", "=", "(", "3.", "/", "4.", ")", "*", "np", ".", "sqrt", "(", "35.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "*", "(", "np", ".", "multiply", "(", "p3x2_y2", ",", "X2", "[", "...", ",", "-", "2", "]", ")", ")", "\n", "p7z2_r2", "=", "7.", "*", "X2", "[", "...", ",", "2", "]", "-", "r2", "\n", "Y4_2", "=", "(", "3.", "/", "4.", ")", "*", "np", ".", "sqrt", "(", "5.", "/", "np", ".", "pi", ")", "*", "np", ".", "multiply", "(", "X2", "[", "...", ",", "3", "]", ",", "p7z2_r2", ")", "\n", "p7z2_3r2", "=", "7.", "*", "X2", "[", "...", ",", "2", "]", "-", "3.", "*", "r2", "\n", "Y4_1", "=", "(", "3.", "/", "4.", ")", "*", "np", ".", "sqrt", "(", "5.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "*", "np", ".", "multiply", "(", "X2", "[", "...", ",", "-", "2", "]", ",", "p7z2_3r2", ")", "\n", "Y40", "=", "(", "3.", "/", "16.", ")", "*", "np", ".", "sqrt", "(", "1.", "/", "np", ".", "pi", ")", "*", "(", "35.", "*", "z4", "-", "tf", ".", "multiply", "(", "X2", "[", "...", ",", "2", "]", ",", "r2", ")", "+", "3.", "*", "r4", ")", "\n", "Y41", "=", "(", "3.", "/", "4.", ")", "*", "np", ".", "sqrt", "(", "5.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "*", "(", "np", ".", "multiply", "(", "X2", "[", "...", ",", "-", "1", "]", ",", "p7z2_3r2", ")", ")", "\n", "Y42", "=", "(", "3.", "/", "8.", ")", "*", "np", ".", "sqrt", "(", "5.", "/", "np", ".", "pi", ")", "*", "np", ".", "multiply", "(", "X2", "[", "...", ",", "0", "]", "-", "X2", "[", "...", ",", "1", "]", ",", "p7z2_r2", ")", "\n", "x2_3y2", "=", "X2", "[", "...", ",", "0", "]", "-", "3.", "*", "X2", "[", "...", ",", "1", "]", "\n", "Y43", "=", "(", "3.", "/", "4.", ")", "*", "np", ".", "sqrt", "(", "35.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "*", "np", ".", "multiply", "(", "x2_3y2", ",", "X2", "[", "...", ",", "-", "1", "]", ")", "\n", "Y44", "=", "(", "3.", "/", "16.", ")", "*", "np", ".", "sqrt", "(", "35.", "/", "np", ".", "pi", ")", "*", "(", "np", ".", "multiply", "(", "X2", "[", "...", ",", "0", "]", ",", "x2_3y2", ")", "-", "np", ".", "multiply", "(", "X2", "[", "...", ",", "1", "]", ",", "p3x2_y2", ")", ")", "\n", "\n", "Y4", ".", "append", "(", "Y4_4", ")", "\n", "Y4", ".", "append", "(", "Y4_3", ")", "\n", "Y4", ".", "append", "(", "Y4_2", ")", "\n", "Y4", ".", "append", "(", "Y4_1", ")", "\n", "Y4", ".", "append", "(", "Y40", ")", "\n", "Y4", ".", "append", "(", "Y41", ")", "\n", "Y4", ".", "append", "(", "Y42", ")", "\n", "Y4", ".", "append", "(", "Y43", ")", "\n", "Y4", ".", "append", "(", "Y44", ")", "\n", "\n", "Y", "+=", "Y4", "\n", "\n", "", "return", "np", ".", "stack", "(", "Y", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.np_spherical_harmonics.np_normalized_real_sh": [[113, 116], ["numpy.divide", "np_spherical_harmonics.np_unnormalized_real_sh", "numpy.maximum", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.np_spherical_harmonics.np_unnormalized_real_sh"], ["", "def", "np_normalized_real_sh", "(", "X", ",", "l_max", ",", "eps", ")", ":", "\n", "    ", "X_", "=", "np", ".", "divide", "(", "X", ",", "np", ".", "maximum", "(", "np", ".", "linalg", ".", "norm", "(", "X", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ",", "eps", ")", ")", "\n", "return", "np_unnormalized_real_sh", "(", "l_max", ",", "X_", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.tf_spherical_harmonics.unnormalized_complex_sh": [[5, 80], ["list", "tensorflow.constant", "Y0.append", "Y1.append", "Y1.append", "Y1.append", "tensorflow.stack", "tensorflow.complex", "tensorflow.complex", "tensorflow.complex", "tensorflow.multiply", "tensorflow.conj", "Y2.append", "Y2.append", "Y2.append", "Y2.append", "Y2.append", "tensorflow.multiply", "tensorflow.conj", "Y3.append", "Y3.append", "Y3.append", "Y3.append", "Y3.append", "Y3.append", "Y3.append", "x.get_shape", "numpy.sqrt", "numpy.sqrt", "tensorflow.tile", "tensorflow.gather", "tensorflow.complex", "tensorflow.complex", "tensorflow.complex", "tensorflow.conj", "tensorflow.tile", "tensorflow.gather", "tensorflow.complex", "tensorflow.complex", "tensorflow.complex", "tensorflow.complex", "tensorflow.conj", "tensorflow.conj", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.tile", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.tile"], ["def", "unnormalized_complex_sh", "(", "l_max", ",", "X", ")", ":", "\n", "    ", "assert", "(", "3", ">=", "l_max", ">", "1", ")", "\n", "Y", "=", "list", "(", ")", "\n", "\n", "x", "=", "X", "[", "...", ",", "0", "]", "\n", "y", "=", "X", "[", "...", ",", "1", "]", "\n", "z", "=", "X", "[", "...", ",", "2", "]", "\n", "\n", "Y0", "=", "[", "]", "\n", "\n", "Y00", "=", "tf", ".", "constant", "(", "value", "=", "np", ".", "sqrt", "(", "1.", "/", "np", ".", "pi", ")", "/", "2.", ",", "shape", "=", "x", ".", "get_shape", "(", ")", ",", "dtype", "=", "tf", ".", "complex64", ")", "\n", "\n", "Y0", ".", "append", "(", "Y00", ")", "\n", "\n", "Y", "+=", "Y0", "\n", "\n", "Y1", "=", "[", "]", "\n", "Y1_1", "=", "(", "np", ".", "sqrt", "(", "3.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "2.", ")", "*", "tf", ".", "complex", "(", "x", ",", "-", "y", ")", "\n", "Y10", "=", "(", "np", ".", "sqrt", "(", "3.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "tf", ".", "complex", "(", "z", ",", "0.", ")", "\n", "Y11", "=", "(", "-", "np", ".", "sqrt", "(", "3.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "2.", ")", "*", "tf", ".", "complex", "(", "x", ",", "y", ")", "\n", "\n", "Y1", ".", "append", "(", "Y1_1", ")", "\n", "Y1", ".", "append", "(", "Y10", ")", "\n", "Y1", ".", "append", "(", "Y11", ")", "\n", "\n", "Y", "+=", "Y1", "\n", "\n", "if", "l_max", ">=", "2", ":", "\n", "        ", "Y2", "=", "[", "]", "\n", "# [x**2, y**2, z**2, x*y, y*z, z*x]", "\n", "X2", "=", "tf", ".", "multiply", "(", "tf", ".", "tile", "(", "X", ",", "(", "1", ",", "1", ",", "1", ",", "1", ",", "2", ")", ")", ",", "tf", ".", "gather", "(", "X", ",", "[", "0", ",", "1", ",", "2", ",", "1", ",", "2", ",", "0", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "Y2_2", "=", "(", "np", ".", "sqrt", "(", "15.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "4.", ")", "*", "tf", ".", "complex", "(", "X2", "[", "...", ",", "0", "]", "-", "X2", "[", "...", ",", "1", "]", ",", "-", "2.", "*", "X2", "[", "...", ",", "3", "]", ")", "\n", "Y2_1", "=", "(", "np", ".", "sqrt", "(", "15.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "2.", ")", "*", "tf", ".", "complex", "(", "X2", "[", "...", ",", "-", "1", "]", ",", "-", "X2", "[", "...", ",", "-", "2", "]", ")", "\n", "Y20", "=", "(", "np", ".", "sqrt", "(", "5.", "/", "np", ".", "pi", ")", "/", "4.", ")", "*", "tf", ".", "complex", "(", "2.", "*", "X2", "[", "...", ",", "2", "]", "-", "X2", "[", "...", ",", "0", "]", "-", "X2", "[", "...", ",", "1", "]", ",", "0.", ")", "\n", "# Y21 = (-np.sqrt(15./(2.*np.pi))/2.)*tf.complex(X2[..., -1], X2[..., -2])", "\n", "# Y22 = (np.sqrt(15./(2.*np.pi))/4.)*tf.complex(X2[..., 0]-X2[..., 1], 2.*X2[..., 3])", "\n", "Y21", "=", "-", "tf", ".", "conj", "(", "Y2_1", ")", "\n", "Y22", "=", "tf", ".", "conj", "(", "Y2_2", ")", "\n", "\n", "Y2", ".", "append", "(", "Y2_2", ")", "\n", "Y2", ".", "append", "(", "Y2_1", ")", "\n", "Y2", ".", "append", "(", "Y20", ")", "\n", "Y2", ".", "append", "(", "Y21", ")", "\n", "Y2", ".", "append", "(", "Y22", ")", "\n", "\n", "Y", "+=", "Y2", "\n", "\n", "", "if", "l_max", ">=", "3", ":", "\n", "# [x**3, y**3, z**3, x**2*y, y**2*z, z**2*x, x**2*z, y**2*x, z**2*y]", "\n", "        ", "X3", "=", "tf", ".", "multiply", "(", "tf", ".", "tile", "(", "X2", "[", "...", ",", "0", ":", "3", "]", ",", "(", "1", ",", "1", ",", "1", ",", "1", ",", "3", ")", ")", ",", "tf", ".", "gather", "(", "X", ",", "[", "0", ",", "1", ",", "2", ",", "1", ",", "2", ",", "0", ",", "2", ",", "0", ",", "1", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "xyz", "=", "x", "*", "y", "*", "z", "\n", "\n", "Y3", "=", "[", "]", "\n", "Y3_3", "=", "(", "np", ".", "sqrt", "(", "35.", "/", "np", ".", "pi", ")", "/", "8.", ")", "*", "tf", ".", "complex", "(", "X3", "[", "...", ",", "0", "]", "-", "3.", "*", "X3", "[", "...", ",", "-", "2", "]", ",", "X3", "[", "...", ",", "1", "]", "-", "3.", "*", "X3", "[", "...", ",", "3", "]", ")", "\n", "Y3_2", "=", "(", "np", ".", "sqrt", "(", "105.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "4.", ")", "*", "tf", ".", "complex", "(", "X3", "[", "...", ",", "-", "3", "]", "-", "X3", "[", "...", ",", "4", "]", ",", "-", "2.", "*", "xyz", ")", "\n", "Y3_1", "=", "(", "np", ".", "sqrt", "(", "21.", "/", "np", ".", "pi", ")", "/", "8.", ")", "*", "tf", ".", "complex", "(", "-", "X3", "[", "...", ",", "0", "]", "-", "X3", "[", "...", ",", "-", "2", "]", "+", "4.", "*", "X3", "[", "...", ",", "-", "4", "]", ",", "\n", "X3", "[", "...", ",", "3", "]", "+", "X3", "[", "...", ",", "1", "]", "-", "4.", "*", "X3", "[", "...", ",", "-", "1", "]", ")", "\n", "Y30", "=", "(", "np", ".", "sqrt", "(", "7.", "/", "np", ".", "pi", ")", "/", "4.", ")", "*", "tf", ".", "complex", "(", "2.", "*", "X3", "[", "...", ",", "2", "]", "-", "3.", "*", "X3", "[", "...", ",", "-", "3", "]", "-", "3.", "*", "X3", "[", "...", ",", "4", "]", ",", "0.", ")", "\n", "Y31", "=", "-", "tf", ".", "conj", "(", "Y3_1", ")", "\n", "Y32", "=", "tf", ".", "conj", "(", "Y3_2", ")", "\n", "Y33", "=", "-", "tf", ".", "conj", "(", "Y3_3", ")", "\n", "\n", "Y3", ".", "append", "(", "Y3_3", ")", "\n", "Y3", ".", "append", "(", "Y3_2", ")", "\n", "Y3", ".", "append", "(", "Y3_1", ")", "\n", "Y3", ".", "append", "(", "Y30", ")", "\n", "Y3", ".", "append", "(", "Y31", ")", "\n", "Y3", ".", "append", "(", "Y32", ")", "\n", "Y3", ".", "append", "(", "Y33", ")", "\n", "\n", "Y", "+=", "Y3", "\n", "\n", "# return Y", "\n", "", "return", "tf", ".", "stack", "(", "Y", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.tf_spherical_harmonics.unnormalized_real_sh": [[83, 190], ["list", "tensorflow.constant", "Y0.append", "Y1.append", "Y1.append", "Y1.append", "tensorflow.stack", "tensorflow.multiply", "Y2.append", "Y2.append", "Y2.append", "Y2.append", "Y2.append", "tensorflow.multiply", "Y3.append", "Y3.append", "Y3.append", "Y3.append", "Y3.append", "Y3.append", "Y3.append", "tensorflow.multiply", "tensorflow.multiply", "Y4.append", "Y4.append", "Y4.append", "Y4.append", "Y4.append", "Y4.append", "Y4.append", "Y4.append", "Y4.append", "x.get_shape", "numpy.sqrt", "numpy.sqrt", "tensorflow.tile", "tensorflow.gather", "tensorflow.tile", "tensorflow.gather", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "tensorflow.multiply", "tensorflow.multiply", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "tensorflow.multiply"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.utils.sh_conv.ShKernel.get_shape", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.tile", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.data_providers.classifiaction_provider.tile"], ["", "def", "unnormalized_real_sh", "(", "l_max", ",", "X", ")", ":", "\n", "    ", "assert", "(", "4", ">=", "l_max", ">=", "1", ")", "\n", "Y", "=", "list", "(", ")", "\n", "x", "=", "X", "[", "...", ",", "0", "]", "\n", "y", "=", "X", "[", "...", ",", "1", "]", "\n", "z", "=", "X", "[", "...", ",", "2", "]", "\n", "\n", "Y0", "=", "[", "]", "\n", "\n", "Y00", "=", "tf", ".", "constant", "(", "value", "=", "np", ".", "sqrt", "(", "1.", "/", "np", ".", "pi", ")", "/", "2.", ",", "shape", "=", "x", ".", "get_shape", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "Y0", ".", "append", "(", "Y00", ")", "\n", "\n", "# Y0 = tf.stack(Y0, axis=-1)", "\n", "\n", "Y", "+=", "Y0", "\n", "\n", "Y1", "=", "[", "]", "\n", "Y1_1", "=", "(", "np", ".", "sqrt", "(", "3.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "y", "\n", "Y10", "=", "(", "np", ".", "sqrt", "(", "3.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "z", "\n", "Y11", "=", "(", "-", "np", ".", "sqrt", "(", "3.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "x", "\n", "\n", "Y1", ".", "append", "(", "Y1_1", ")", "\n", "Y1", ".", "append", "(", "Y10", ")", "\n", "Y1", ".", "append", "(", "Y11", ")", "\n", "\n", "Y", "+=", "Y1", "\n", "\n", "if", "l_max", ">=", "2", ":", "\n", "        ", "Y2", "=", "[", "]", "\n", "# [x**2, y**2, z**2, x*y, y*z, z*x]", "\n", "X2", "=", "tf", ".", "multiply", "(", "tf", ".", "tile", "(", "X", ",", "(", "1", ",", "1", ",", "1", ",", "2", ")", ")", ",", "tf", ".", "gather", "(", "X", ",", "[", "0", ",", "1", ",", "2", ",", "1", ",", "2", ",", "0", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "x2", "=", "X2", "[", "...", ",", "0", "]", "\n", "y2", "=", "X2", "[", "...", ",", "1", "]", "\n", "z2", "=", "X2", "[", "...", ",", "2", "]", "\n", "\n", "Y2_2", "=", "(", "np", ".", "sqrt", "(", "15.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "X2", "[", "...", ",", "3", "]", "\n", "Y2_1", "=", "(", "np", ".", "sqrt", "(", "15.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "X2", "[", "...", ",", "4", "]", "\n", "Y20", "=", "(", "np", ".", "sqrt", "(", "5.", "/", "np", ".", "pi", ")", "/", "4.", ")", "*", "(", "2.", "*", "z2", "-", "x2", "-", "y2", ")", "\n", "Y21", "=", "(", "-", "np", ".", "sqrt", "(", "15.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "X2", "[", "...", ",", "5", "]", "\n", "Y22", "=", "(", "np", ".", "sqrt", "(", "15.", "/", "np", ".", "pi", ")", "/", "4.", ")", "*", "(", "x2", "-", "y2", ")", "\n", "\n", "Y2", ".", "append", "(", "Y2_2", ")", "\n", "Y2", ".", "append", "(", "Y2_1", ")", "\n", "Y2", ".", "append", "(", "Y20", ")", "\n", "Y2", ".", "append", "(", "Y21", ")", "\n", "Y2", ".", "append", "(", "Y22", ")", "\n", "\n", "Y", "+=", "Y2", "\n", "\n", "", "if", "l_max", ">=", "3", ":", "\n", "# [x**3, y**3, z**3, x**2*y, y**2*z, z**2*x, x**2*z, y**2*x, z**2*y]", "\n", "        ", "X3", "=", "tf", ".", "multiply", "(", "tf", ".", "tile", "(", "X2", "[", "...", ",", "0", ":", "3", "]", ",", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", ",", "tf", ".", "gather", "(", "X", ",", "[", "0", ",", "1", ",", "2", ",", "1", ",", "2", ",", "0", ",", "2", ",", "0", ",", "1", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "xyz", "=", "x", "*", "y", "*", "z", "\n", "\n", "Y3", "=", "[", "]", "\n", "Y3_3", "=", "(", "np", ".", "sqrt", "(", "35.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "4.", ")", "*", "(", "3.", "*", "X3", "[", "...", ",", "3", "]", "-", "X3", "[", "...", ",", "1", "]", ")", "\n", "Y3_2", "=", "(", "np", ".", "sqrt", "(", "105.", "/", "np", ".", "pi", ")", "/", "2.", ")", "*", "xyz", "\n", "Y3_1", "=", "(", "np", ".", "sqrt", "(", "21.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "4.", ")", "*", "(", "4.", "*", "X3", "[", "...", ",", "-", "1", "]", "-", "X3", "[", "...", ",", "3", "]", "-", "X3", "[", "...", ",", "1", "]", ")", "\n", "Y30", "=", "(", "np", ".", "sqrt", "(", "7.", "/", "np", ".", "pi", ")", "/", "4.", ")", "*", "(", "2.", "*", "X3", "[", "...", ",", "2", "]", "-", "3.", "*", "X3", "[", "...", ",", "6", "]", "-", "3.", "*", "X3", "[", "...", ",", "4", "]", ")", "\n", "Y31", "=", "(", "-", "np", ".", "sqrt", "(", "21.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "4.", ")", "*", "(", "4.", "*", "X3", "[", "...", ",", "5", "]", "-", "X3", "[", "...", ",", "0", "]", "-", "X3", "[", "...", ",", "-", "2", "]", ")", "\n", "Y32", "=", "(", "np", ".", "sqrt", "(", "105.", "/", "np", ".", "pi", ")", "/", "4.", ")", "*", "(", "X3", "[", "...", ",", "-", "3", "]", "-", "X3", "[", "...", ",", "4", "]", ")", "\n", "Y33", "=", "(", "-", "np", ".", "sqrt", "(", "35.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "/", "4.", ")", "*", "(", "X3", "[", "...", ",", "0", "]", "-", "3.", "*", "X3", "[", "...", ",", "-", "2", "]", ")", "\n", "\n", "Y3", ".", "append", "(", "Y3_3", ")", "\n", "Y3", ".", "append", "(", "Y3_2", ")", "\n", "Y3", ".", "append", "(", "Y3_1", ")", "\n", "Y3", ".", "append", "(", "Y30", ")", "\n", "Y3", ".", "append", "(", "Y31", ")", "\n", "Y3", ".", "append", "(", "Y32", ")", "\n", "Y3", ".", "append", "(", "Y33", ")", "\n", "\n", "Y", "+=", "Y3", "\n", "\n", "", "if", "l_max", ">=", "4", ":", "\n", "        ", "Y4", "=", "[", "]", "\n", "r2", "=", "X2", "[", "...", ",", "0", "]", "+", "X2", "[", "...", ",", "1", "]", "+", "X2", "[", "...", ",", "2", "]", "\n", "r4", "=", "tf", ".", "multiply", "(", "r2", ",", "r2", ")", "\n", "z4", "=", "tf", ".", "multiply", "(", "X2", "[", "...", ",", "2", "]", ",", "X2", "[", "...", ",", "2", "]", ")", "\n", "x2_y2", "=", "X2", "[", "...", ",", "0", "]", "-", "X2", "[", "...", ",", "1", "]", "\n", "Y4_4", "=", "(", "3.", "/", "4.", ")", "*", "np", ".", "sqrt", "(", "35.", "/", "np", ".", "pi", ")", "*", "(", "tf", ".", "multiply", "(", "X2", "[", "...", ",", "3", "]", ",", "x2_y2", ")", ")", "\n", "p3x2_y2", "=", "3.", "*", "X2", "[", "...", ",", "0", "]", "-", "X2", "[", "...", ",", "1", "]", "\n", "Y4_3", "=", "(", "3.", "/", "4.", ")", "*", "np", ".", "sqrt", "(", "35.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "*", "(", "tf", ".", "multiply", "(", "p3x2_y2", ",", "X2", "[", "...", ",", "-", "2", "]", ")", ")", "\n", "p7z2_r2", "=", "7.", "*", "X2", "[", "...", ",", "2", "]", "-", "r2", "\n", "Y4_2", "=", "(", "3.", "/", "4.", ")", "*", "np", ".", "sqrt", "(", "5.", "/", "np", ".", "pi", ")", "*", "tf", ".", "multiply", "(", "X2", "[", "...", ",", "3", "]", ",", "p7z2_r2", ")", "\n", "p7z2_3r2", "=", "7.", "*", "X2", "[", "...", ",", "2", "]", "-", "3.", "*", "r2", "\n", "Y4_1", "=", "(", "3.", "/", "4.", ")", "*", "np", ".", "sqrt", "(", "5.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "*", "tf", ".", "multiply", "(", "X2", "[", "...", ",", "-", "2", "]", ",", "p7z2_3r2", ")", "\n", "Y40", "=", "(", "3.", "/", "16.", ")", "*", "np", ".", "sqrt", "(", "1.", "/", "np", ".", "pi", ")", "*", "(", "35.", "*", "z4", "-", "tf", ".", "multiply", "(", "X2", "[", "...", ",", "2", "]", ",", "r2", ")", "+", "3.", "*", "r4", ")", "\n", "Y41", "=", "(", "3.", "/", "4.", ")", "*", "np", ".", "sqrt", "(", "5.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "*", "(", "tf", ".", "multiply", "(", "X2", "[", "...", ",", "-", "1", "]", ",", "p7z2_3r2", ")", ")", "\n", "Y42", "=", "(", "3.", "/", "8.", ")", "*", "np", ".", "sqrt", "(", "5.", "/", "np", ".", "pi", ")", "*", "tf", ".", "multiply", "(", "X2", "[", "...", ",", "0", "]", "-", "X2", "[", "...", ",", "1", "]", ",", "p7z2_r2", ")", "\n", "x2_3y2", "=", "X2", "[", "...", ",", "0", "]", "-", "3.", "*", "X2", "[", "...", ",", "1", "]", "\n", "Y43", "=", "(", "3.", "/", "4.", ")", "*", "np", ".", "sqrt", "(", "35.", "/", "(", "2.", "*", "np", ".", "pi", ")", ")", "*", "tf", ".", "multiply", "(", "x2_3y2", ",", "X2", "[", "...", ",", "-", "1", "]", ")", "\n", "Y44", "=", "(", "3.", "/", "16.", ")", "*", "np", ".", "sqrt", "(", "35.", "/", "np", ".", "pi", ")", "*", "(", "tf", ".", "multiply", "(", "X2", "[", "...", ",", "0", "]", ",", "x2_3y2", ")", "-", "tf", ".", "multiply", "(", "X2", "[", "...", ",", "1", "]", ",", "p3x2_y2", ")", ")", "\n", "\n", "Y4", ".", "append", "(", "Y4_4", ")", "\n", "Y4", ".", "append", "(", "Y4_3", ")", "\n", "Y4", ".", "append", "(", "Y4_2", ")", "\n", "Y4", ".", "append", "(", "Y4_1", ")", "\n", "Y4", ".", "append", "(", "Y40", ")", "\n", "Y4", ".", "append", "(", "Y41", ")", "\n", "Y4", ".", "append", "(", "Y42", ")", "\n", "Y4", ".", "append", "(", "Y43", ")", "\n", "Y4", ".", "append", "(", "Y44", ")", "\n", "\n", "Y", "+=", "Y4", "\n", "\n", "", "return", "tf", ".", "stack", "(", "Y", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.tf_spherical_harmonics.unnormalized_sh": [[192, 197], ["tf_spherical_harmonics.unnormalized_real_sh", "tf_spherical_harmonics.unnormalized_complex_sh"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.tf_spherical_harmonics.unnormalized_real_sh", "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.tf_spherical_harmonics.unnormalized_complex_sh"], ["", "def", "unnormalized_sh", "(", "X", ",", "l_max", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "if", "dtype", "is", "tf", ".", "float32", ":", "\n", "        ", "return", "unnormalized_real_sh", "(", "l_max", ",", "X", ")", "\n", "", "else", ":", "\n", "        ", "return", "unnormalized_complex_sh", "(", "l_max", ",", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.tf_spherical_harmonics.normalized_sh": [[199, 202], ["tensorflow.nn.l2_normalize", "tf_spherical_harmonics.unnormalized_sh"], "function", ["home.repos.pwc.inspect_result.adrienPoulenard_SPHnet.spherical_harmonics.tf_spherical_harmonics.unnormalized_sh"], ["", "", "def", "normalized_sh", "(", "X", ",", "l_max", ",", "eps", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "X_", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "X", ",", "axis", "=", "-", "1", ",", "epsilon", "=", "eps", ")", "\n", "return", "unnormalized_sh", "(", "X_", ",", "l_max", ",", "dtype", "=", "dtype", ")", "", "", ""]]}