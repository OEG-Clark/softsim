{"home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations_geodesc.extract_loc_feat": [[24, 48], ["progressbar.ProgressBar", "dataset.get_test_set", "model.close", "datasets.get_dataset", "models.get_model", "next", "model.run_test_data", "data[].append", "data[].append", "dataset.format_data", "progressbar.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.get_test_set", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.close", "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__.get_model", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.run_test_data", "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.format_data"], ["def", "extract_loc_feat", "(", "config", ")", ":", "\n", "    ", "\"\"\"Extract local features.\"\"\"", "\n", "prog_bar", "=", "progressbar", ".", "ProgressBar", "(", ")", "\n", "config", "[", "'stage'", "]", "=", "'loc'", "\n", "dataset", "=", "get_dataset", "(", "config", "[", "'data_name'", "]", ")", "(", "**", "config", ")", "\n", "prog_bar", ".", "max_value", "=", "dataset", ".", "data_length", "\n", "test_set", "=", "dataset", ".", "get_test_set", "(", ")", "\n", "\n", "model", "=", "get_model", "(", "'geodesc_model'", ")", "(", "config", "[", "'pretrained'", "]", "[", "'loc_model'", "]", ",", "**", "(", "config", "[", "'loc_feat'", "]", ")", ")", "\n", "idx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "next", "(", "test_set", ")", "\n", "# detect SIFT keypoints and crop image patches.", "\n", "kpts", ",", "descs", "=", "model", ".", "run_test_data", "(", "data", "[", "'image'", "]", ")", "\n", "data", "[", "'dump_data'", "]", "=", "[", "]", "\n", "data", "[", "'dump_data'", "]", ".", "append", "(", "descs", ")", "\n", "data", "[", "'dump_data'", "]", ".", "append", "(", "kpts", "[", ":", ",", "0", ":", "2", "]", ")", "\n", "dataset", ".", "format_data", "(", "data", ")", "\n", "prog_bar", ".", "update", "(", "idx", ")", "\n", "idx", "+=", "1", "\n", "", "except", "dataset", ".", "end_set", ":", "\n", "            ", "break", "\n", "", "", "model", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations_geodesc.main": [[50, 59], ["open", "yaml.load", "os.path.exists", "os.mkdir", "evaluations_geodesc.extract_loc_feat"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.load", "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations_rootsift.extract_loc_feat"], ["", "def", "main", "(", "argv", "=", "None", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"Program entrance.\"\"\"", "\n", "with", "open", "(", "FLAGS", ".", "config", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config", "[", "'dump_root'", "]", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "config", "[", "'dump_root'", "]", ")", "\n", "# extract local features and keypoint matchability.", "\n", "", "if", "config", "[", "'loc_feat'", "]", "[", "'infer'", "]", ":", "\n", "        ", "extract_loc_feat", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations.extract_reg_feat": [[24, 49], ["progressbar.ProgressBar", "dataset.get_test_set", "model.close", "datasets.get_dataset", "models.get_model", "next", "data[].decode", "h5py.File", "progressbar.ProgressBar.update", "model.run_test_data", "h5py.File.create_dataset"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.get_test_set", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.close", "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__.get_model", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.run_test_data"], ["def", "extract_reg_feat", "(", "config", ")", ":", "\n", "    ", "\"\"\"Extract regional features.\"\"\"", "\n", "prog_bar", "=", "progressbar", ".", "ProgressBar", "(", ")", "\n", "config", "[", "'stage'", "]", "=", "'reg'", "\n", "dataset", "=", "get_dataset", "(", "config", "[", "'data_name'", "]", ")", "(", "**", "config", ")", "\n", "prog_bar", ".", "max_value", "=", "dataset", ".", "data_length", "\n", "test_set", "=", "dataset", ".", "get_test_set", "(", ")", "\n", "\n", "model", "=", "get_model", "(", "'reg_model'", ")", "(", "config", "[", "'pretrained'", "]", "[", "'reg_model'", "]", ",", "**", "(", "config", "[", "'reg_feat'", "]", ")", ")", "\n", "idx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "next", "(", "test_set", ")", "\n", "dump_path", "=", "data", "[", "'dump_path'", "]", ".", "decode", "(", "'utf-8'", ")", "\n", "reg_f", "=", "h5py", ".", "File", "(", "dump_path", ",", "'a'", ")", "\n", "if", "'reg_feat'", "not", "in", "reg_f", "or", "config", "[", "'reg_feat'", "]", "[", "'overwrite'", "]", ":", "\n", "                ", "reg_feat", "=", "model", ".", "run_test_data", "(", "data", "[", "'image'", "]", ")", "\n", "if", "'reg_feat'", "in", "reg_f", ":", "\n", "                    ", "del", "reg_f", "[", "'reg_feat'", "]", "\n", "", "_", "=", "reg_f", ".", "create_dataset", "(", "'reg_feat'", ",", "data", "=", "reg_feat", ")", "\n", "", "prog_bar", ".", "update", "(", "idx", ")", "\n", "idx", "+=", "1", "\n", "", "except", "dataset", ".", "end_set", ":", "\n", "            ", "break", "\n", "", "", "model", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations.extract_loc_feat": [[51, 82], ["progressbar.ProgressBar", "dataset.get_test_set", "model.close", "datasets.get_dataset", "models.get_model", "next", "data[].decode", "h5py.File", "progressbar.ProgressBar.update", "model.run_test_data", "numpy.concatenate", "numpy.stack", "numpy.concatenate", "h5py.File.create_dataset", "numpy.array"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.get_test_set", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.close", "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__.get_model", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.run_test_data"], ["", "def", "extract_loc_feat", "(", "config", ")", ":", "\n", "    ", "\"\"\"Extract local features.\"\"\"", "\n", "prog_bar", "=", "progressbar", ".", "ProgressBar", "(", ")", "\n", "config", "[", "'stage'", "]", "=", "'loc'", "\n", "dataset", "=", "get_dataset", "(", "config", "[", "'data_name'", "]", ")", "(", "**", "config", ")", "\n", "prog_bar", ".", "max_value", "=", "dataset", ".", "data_length", "\n", "test_set", "=", "dataset", ".", "get_test_set", "(", ")", "\n", "\n", "model", "=", "get_model", "(", "'loc_model'", ")", "(", "config", "[", "'pretrained'", "]", "[", "'loc_model'", "]", ",", "**", "(", "config", "[", "'loc_feat'", "]", ")", ")", "\n", "idx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "next", "(", "test_set", ")", "\n", "dump_path", "=", "data", "[", "'dump_path'", "]", ".", "decode", "(", "'utf-8'", ")", "\n", "loc_f", "=", "h5py", ".", "File", "(", "dump_path", ",", "'a'", ")", "\n", "if", "'loc_info'", "not", "in", "loc_f", "and", "'kpt'", "not", "in", "loc_f", "or", "config", "[", "'loc_feat'", "]", "[", "'overwrite'", "]", ":", "\n", "# detect SIFT keypoints and crop image patches.", "\n", "                ", "loc_feat", ",", "kpt_mb", ",", "npy_kpts", ",", "cv_kpts", ",", "_", "=", "model", ".", "run_test_data", "(", "data", "[", "'image'", "]", ")", "\n", "loc_info", "=", "np", ".", "concatenate", "(", "(", "npy_kpts", ",", "loc_feat", ",", "kpt_mb", ")", ",", "axis", "=", "-", "1", ")", "\n", "raw_kpts", "=", "[", "np", ".", "array", "(", "(", "i", ".", "pt", "[", "0", "]", ",", "i", ".", "pt", "[", "1", "]", ",", "i", ".", "size", ",", "i", ".", "angle", ",", "i", ".", "response", ")", ")", "\n", "for", "i", "in", "cv_kpts", "]", "\n", "raw_kpts", "=", "np", ".", "stack", "(", "raw_kpts", ",", "axis", "=", "0", ")", "\n", "loc_info", "=", "np", ".", "concatenate", "(", "(", "raw_kpts", ",", "loc_info", ")", ",", "axis", "=", "-", "1", ")", "\n", "if", "'loc_info'", "in", "loc_f", "or", "'kpt'", "in", "loc_f", ":", "\n", "                    ", "del", "loc_f", "[", "'loc_info'", "]", "\n", "", "_", "=", "loc_f", ".", "create_dataset", "(", "'loc_info'", ",", "data", "=", "loc_info", ")", "\n", "", "prog_bar", ".", "update", "(", "idx", ")", "\n", "idx", "+=", "1", "\n", "", "except", "dataset", ".", "end_set", ":", "\n", "            ", "break", "\n", "", "", "model", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations.extract_aug_feat": [[84, 112], ["progressbar.ProgressBar", "dataset.get_test_set", "model.close", "datasets.get_dataset", "models.get_model", "next", "data[].decode", "h5py.File", "progressbar.ProgressBar.update", "model.run_test_data", "h5py.File.create_dataset", "h5py.File.create_dataset"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.get_test_set", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.close", "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__.get_model", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.run_test_data"], ["", "def", "extract_aug_feat", "(", "config", ")", ":", "\n", "    ", "\"\"\"Extract augmented features.\"\"\"", "\n", "prog_bar", "=", "progressbar", ".", "ProgressBar", "(", ")", "\n", "config", "[", "'stage'", "]", "=", "'aug'", "\n", "dataset", "=", "get_dataset", "(", "config", "[", "'data_name'", "]", ")", "(", "**", "config", ")", "\n", "prog_bar", ".", "max_value", "=", "dataset", ".", "data_length", "\n", "test_set", "=", "dataset", ".", "get_test_set", "(", ")", "\n", "\n", "model", "=", "get_model", "(", "'aug_model'", ")", "(", "config", "[", "'pretrained'", "]", "[", "'loc_model'", "]", ",", "**", "(", "config", "[", "'aug_feat'", "]", ")", ")", "\n", "idx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "next", "(", "test_set", ")", "\n", "dump_path", "=", "data", "[", "'dump_path'", "]", ".", "decode", "(", "'utf-8'", ")", "\n", "aug_f", "=", "h5py", ".", "File", "(", "dump_path", ",", "'a'", ")", "\n", "if", "'aug_feat'", "not", "in", "aug_f", "or", "config", "[", "'aug_feat'", "]", "[", "'overwrite'", "]", ":", "\n", "                ", "aug_feat", ",", "_", "=", "model", ".", "run_test_data", "(", "data", "[", "'dump_data'", "]", ")", "\n", "if", "'aug_feat'", "in", "aug_f", ":", "\n", "                    ", "del", "aug_f", "[", "'aug_feat'", "]", "\n", "", "if", "aug_feat", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "                    ", "_", "=", "aug_f", ".", "create_dataset", "(", "'aug_feat'", ",", "data", "=", "aug_feat", ",", "dtype", "=", "'uint8'", ")", "\n", "", "else", ":", "\n", "                    ", "_", "=", "aug_f", ".", "create_dataset", "(", "'aug_feat'", ",", "data", "=", "aug_feat", ")", "\n", "", "", "prog_bar", ".", "update", "(", "idx", ")", "\n", "idx", "+=", "1", "\n", "", "except", "dataset", ".", "end_set", ":", "\n", "            ", "break", "\n", "", "", "model", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations.format_data": [[114, 131], ["progressbar.ProgressBar", "dataset.get_test_set", "datasets.get_dataset", "next", "dataset.format_data", "progressbar.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.get_test_set", "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.format_data"], ["", "def", "format_data", "(", "config", ")", ":", "\n", "    ", "\"\"\"Post-processing and generate custom files.\"\"\"", "\n", "prog_bar", "=", "progressbar", ".", "ProgressBar", "(", ")", "\n", "config", "[", "'stage'", "]", "=", "'post_format'", "\n", "dataset", "=", "get_dataset", "(", "config", "[", "'data_name'", "]", ")", "(", "**", "config", ")", "\n", "prog_bar", ".", "max_value", "=", "dataset", ".", "data_length", "\n", "test_set", "=", "dataset", ".", "get_test_set", "(", ")", "\n", "\n", "idx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "next", "(", "test_set", ")", "\n", "dataset", ".", "format_data", "(", "data", ")", "\n", "prog_bar", ".", "update", "(", "idx", ")", "\n", "idx", "+=", "1", "\n", "", "except", "dataset", ".", "end_set", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations.main": [[133, 150], ["open", "yaml.load", "os.mkdir", "evaluations.extract_reg_feat", "evaluations.extract_loc_feat", "evaluations.extract_aug_feat", "evaluations.format_data", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.load", "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations.extract_reg_feat", "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations_rootsift.extract_loc_feat", "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations.extract_aug_feat", "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.format_data"], ["", "", "", "def", "main", "(", "argv", "=", "None", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"Program entrance.\"\"\"", "\n", "with", "open", "(", "FLAGS", ".", "config", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "if", "config", "[", "'dump_root'", "]", "is", "not", "None", "and", "not", "os", ".", "path", ".", "exists", "(", "config", "[", "'dump_root'", "]", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "config", "[", "'dump_root'", "]", ")", "\n", "# extract regional features.", "\n", "", "if", "config", "[", "'reg_feat'", "]", "[", "'infer'", "]", ":", "\n", "        ", "extract_reg_feat", "(", "config", ")", "\n", "# extract local features and keypoint matchability.", "\n", "", "if", "config", "[", "'loc_feat'", "]", "[", "'infer'", "]", ":", "\n", "        ", "extract_loc_feat", "(", "config", ")", "\n", "# extract augmented features.", "\n", "", "if", "config", "[", "'aug_feat'", "]", "[", "'infer'", "]", ":", "\n", "        ", "extract_aug_feat", "(", "config", ")", "\n", "", "if", "config", "[", "'post_format'", "]", "[", "'enable'", "]", ":", "\n", "        ", "format_data", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.hseq_eval.loader": [[31, 44], ["range", "producer_queue.put", "hseq_utils.get_data", "range", "producer_queue.put"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.hseq_utils.HSeqUtils.get_data"], ["def", "loader", "(", "hseq_utils", ",", "dense_desc", ",", "producer_queue", ")", ":", "\n", "    ", "for", "seq_idx", "in", "range", "(", "hseq_utils", ".", "seq_num", ")", ":", "\n", "        ", "seq_name", ",", "hseq_data", "=", "hseq_utils", ".", "get_data", "(", "seq_idx", ",", "dense_desc", ")", "\n", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "gt_homo", "=", "[", "seq_idx", ",", "seq_name", "]", "if", "i", "==", "0", "else", "hseq_data", ".", "homo", "[", "i", "]", "\n", "producer_queue", ".", "put", "(", "[", "hseq_data", ".", "img", "[", "i", "]", ",", "\n", "hseq_data", ".", "kpt_param", "[", "i", "]", ",", "\n", "hseq_data", ".", "patch", "[", "i", "]", ",", "\n", "hseq_data", ".", "img_feat", "[", "i", "]", ",", "\n", "hseq_data", ".", "coord", "[", "i", "]", ",", "\n", "gt_homo", "]", ")", "\n", "", "", "producer_queue", ".", "put", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.hseq_eval.extractor": [[46, 66], ["patch_queue.get", "sess.run", "consumer_queue.put", "patch_queue.task_done", "consumer_queue.put", "cv2.cvtColor", "numpy.expand_dims", "numpy.expand_dims", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape"], ["", "def", "extractor", "(", "patch_queue", ",", "sess", ",", "output_tensors", ",", "config", ",", "consumer_queue", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "queue_data", "=", "patch_queue", ".", "get", "(", ")", "\n", "if", "queue_data", "is", "None", ":", "\n", "            ", "consumer_queue", ".", "put", "(", "None", ")", "\n", "return", "\n", "", "img", ",", "kpt_param", ",", "patch", ",", "img_feat", ",", "coord", ",", "gt_homo", "=", "queue_data", "\n", "if", "config", "[", "'dense_desc'", "]", ":", "\n", "            ", "gray", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "input_dict", "=", "{", "'ph_img:0'", ":", "np", ".", "reshape", "(", "gray", ",", "(", "1", ",", "gray", ".", "shape", "[", "0", "]", ",", "gray", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "}", "\n", "", "else", ":", "\n", "            ", "input_dict", "=", "{", "'ph_patch:0'", ":", "patch", "}", "\n", "", "if", "config", "[", "'aug'", "]", "or", "config", "[", "'dense_desc'", "]", ":", "\n", "            ", "input_dict", "[", "'ph_kpt_param:0'", "]", "=", "np", ".", "expand_dims", "(", "kpt_param", ",", "axis", "=", "0", ")", "\n", "input_dict", "[", "'ph_img_feat:0'", "]", "=", "np", ".", "expand_dims", "(", "img_feat", ",", "axis", "=", "0", ")", "\n", "\n", "", "output_arrays", "=", "sess", ".", "run", "(", "output_tensors", ",", "input_dict", ")", "\n", "local_feat", "=", "output_arrays", "[", "'local_feat'", "]", "\n", "consumer_queue", ".", "put", "(", "[", "local_feat", ",", "coord", ",", "gt_homo", "]", ")", "\n", "patch_queue", ".", "task_done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.hseq_eval.matcher": [[68, 100], ["consumer_queue.get", "record.append", "range", "os.path.basename", "print", "len", "evaluator.feature_matcher", "evaluator.get_inlier_matches", "len", "evaluator.get_gt_matches", "max"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.feature_matcher", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.get_inlier_matches", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.get_gt_matches"], ["", "", "def", "matcher", "(", "consumer_queue", ",", "sess", ",", "evaluator", ")", ":", "\n", "    ", "record", "=", "[", "]", "\n", "while", "True", ":", "\n", "        ", "queue_data", "=", "consumer_queue", ".", "get", "(", ")", "\n", "if", "queue_data", "is", "None", ":", "\n", "            ", "return", "\n", "", "record", ".", "append", "(", "queue_data", ")", "\n", "if", "len", "(", "record", ")", "<", "6", ":", "\n", "            ", "continue", "\n", "", "ref_feat", ",", "ref_coord", ",", "seq_info", "=", "record", "[", "0", "]", "\n", "\n", "recall", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "test_feat", ",", "test_coord", ",", "gt_homo", "=", "record", "[", "i", "]", "\n", "putative_matches", "=", "evaluator", ".", "feature_matcher", "(", "sess", ",", "ref_feat", ",", "test_feat", ")", "\n", "inlier_matches", "=", "evaluator", ".", "get_inlier_matches", "(", "\n", "ref_coord", ",", "test_coord", ",", "putative_matches", ",", "gt_homo", ")", "\n", "# Calculate recall", "\n", "num_inlier", "=", "len", "(", "inlier_matches", ")", "\n", "gt_num", "=", "evaluator", ".", "get_gt_matches", "(", "ref_coord", ",", "test_coord", ",", "gt_homo", ")", "\n", "recall", "+=", "(", "num_inlier", "/", "max", "(", "gt_num", ",", "1", ")", ")", "/", "5", "\n", "\n", "", "seq_idx", "=", "seq_info", "[", "0", "]", "\n", "seq_name", "=", "os", ".", "path", ".", "basename", "(", "seq_info", "[", "1", "]", ")", "\n", "print", "(", "seq_idx", ",", "seq_name", ",", "recall", ")", "\n", "evaluator", ".", "stats", "[", "'all_avg_recall'", "]", "+=", "recall", "\n", "if", "seq_name", "[", "0", "]", "==", "'i'", ":", "\n", "            ", "evaluator", ".", "stats", "[", "'i_avg_recall'", "]", "+=", "recall", "\n", "", "if", "seq_name", "[", "0", "]", "==", "'v'", ":", "\n", "            ", "evaluator", ".", "stats", "[", "'v_avg_recall'", "]", "+=", "recall", "\n", "", "record", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.hseq_eval.prepare_reg_feat": [[102, 123], ["range", "len", "progressbar.ProgressBar", "len", "enumerate", "model.close", "os.path.join", "models.get_model", "cv2.imread", "model.run_test_data", "numpy.save", "progressbar.ProgressBar.update", "in_img_path.append", "out_img_feat_list.append", "os.path.exists", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.close", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__.get_model", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.run_test_data"], ["", "", "def", "prepare_reg_feat", "(", "hseq_utils", ",", "reg_model", ",", "overwrite", ")", ":", "\n", "    ", "in_img_path", "=", "[", "]", "\n", "out_img_feat_list", "=", "[", "]", "\n", "for", "seq_name", "in", "hseq_utils", ".", "seqs", ":", "\n", "        ", "for", "img_idx", "in", "range", "(", "1", ",", "7", ")", ":", "\n", "            ", "img_feat_path", "=", "os", ".", "path", ".", "join", "(", "seq_name", ",", "'%d_img_feat.npy'", "%", "img_idx", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img_feat_path", ")", "or", "overwrite", ":", "\n", "                ", "in_img_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "seq_name", ",", "'%d.ppm'", "%", "img_idx", ")", ")", "\n", "out_img_feat_list", ".", "append", "(", "img_feat_path", ")", "\n", "\n", "", "", "", "if", "len", "(", "in_img_path", ")", ">", "0", ":", "\n", "        ", "model", "=", "get_model", "(", "'reg_model'", ")", "(", "reg_model", ")", "\n", "prog_bar", "=", "progressbar", ".", "ProgressBar", "(", ")", "\n", "prog_bar", ".", "max_value", "=", "len", "(", "in_img_path", ")", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "in_img_path", ")", ":", "\n", "            ", "img", "=", "cv2", ".", "imread", "(", "val", ")", "\n", "img", "=", "img", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "reg_feat", "=", "model", ".", "run_test_data", "(", "img", ")", "\n", "np", ".", "save", "(", "out_img_feat_list", "[", "idx", "]", ",", "reg_feat", ")", "\n", "prog_bar", ".", "update", "(", "idx", ")", "\n", "", "model", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.hseq_eval.hseq_eval": [[125, 169], ["utils.hseq_utils.HSeqUtils", "hseq_eval.prepare_reg_feat", "utils.evaluator.Evaluator", "models.inference_model.inference", "tensorflow.compat.v1.ConfigProto", "max", "max", "max", "print", "open", "yaml.load", "tensorflow.compat.v1.Session", "utils.tf.recoverer", "queue.Queue", "queue.Queue", "threading.Thread", "threading.Thread.start", "threading.Thread", "threading.Thread.start", "threading.Thread", "threading.Thread.start", "threading.Thread.join", "threading.Thread.join", "threading.Thread.join"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.None.hseq_eval.prepare_reg_feat", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.inference_model.inference", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.load", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.tf.recoverer"], ["", "", "def", "hseq_eval", "(", ")", ":", "\n", "    ", "with", "open", "(", "FLAGS", ".", "config", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "test_config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "# Configure dataset", "\n", "", "hseq_utils", "=", "HSeqUtils", "(", "test_config", "[", "'hseq'", "]", ")", "\n", "prepare_reg_feat", "(", "hseq_utils", ",", "test_config", "[", "'eval'", "]", "[", "'reg_model'", "]", ",", "test_config", "[", "'hseq'", "]", "[", "'overwrite'", "]", ")", "\n", "# Configure evaluation", "\n", "evaluator", "=", "Evaluator", "(", "test_config", "[", "'eval'", "]", ")", "\n", "# Construct inference networks.", "\n", "output_tensors", "=", "inference", "(", "test_config", "[", "'network'", "]", ")", "\n", "# Create the initializier.", "\n", "config", "=", "tf", ".", "compat", ".", "v1", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "# Restore pre-trained model.", "\n", "        ", "recoverer", "(", "sess", ",", "test_config", "[", "'eval'", "]", "[", "'loc_model'", "]", ")", "\n", "\n", "producer_queue", "=", "Queue", "(", "maxsize", "=", "18", ")", "\n", "consumer_queue", "=", "Queue", "(", ")", "\n", "\n", "producer0", "=", "Thread", "(", "target", "=", "loader", ",", "args", "=", "(", "\n", "hseq_utils", ",", "test_config", "[", "'network'", "]", "[", "'dense_desc'", "]", ",", "producer_queue", ")", ")", "\n", "producer0", ".", "daemon", "=", "True", "\n", "producer0", ".", "start", "(", ")", "\n", "\n", "producer1", "=", "Thread", "(", "target", "=", "extractor", ",", "args", "=", "(", "\n", "producer_queue", ",", "sess", ",", "output_tensors", ",", "test_config", "[", "'network'", "]", ",", "consumer_queue", ")", ")", "\n", "producer1", ".", "daemon", "=", "True", "\n", "producer1", ".", "start", "(", ")", "\n", "\n", "consumer", "=", "Thread", "(", "target", "=", "matcher", ",", "args", "=", "(", "consumer_queue", ",", "sess", ",", "evaluator", ")", ")", "\n", "consumer", ".", "daemon", "=", "True", "\n", "consumer", ".", "start", "(", ")", "\n", "\n", "producer0", ".", "join", "(", ")", "\n", "producer1", ".", "join", "(", ")", "\n", "consumer", ".", "join", "(", ")", "\n", "\n", "", "evaluator", ".", "stats", "[", "'all_avg_recall'", "]", "/=", "max", "(", "hseq_utils", ".", "seq_num", ",", "1", ")", "\n", "evaluator", ".", "stats", "[", "'i_avg_recall'", "]", "/=", "max", "(", "hseq_utils", ".", "seq_i_num", ",", "1", ")", "\n", "evaluator", ".", "stats", "[", "'v_avg_recall'", "]", "/=", "max", "(", "hseq_utils", ".", "seq_v_num", ",", "1", ")", "\n", "\n", "print", "(", "evaluator", ".", "stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.hseq_eval.main": [[171, 175], ["tensorflow.flags.mark_flags_as_required", "hseq_eval.hseq_eval"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.None.hseq_eval.hseq_eval"], ["", "def", "main", "(", "argv", "=", "None", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"Program entrance.\"\"\"", "\n", "tf", ".", "flags", ".", "mark_flags_as_required", "(", "[", "'config'", "]", ")", "\n", "hseq_eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations_rootsift.extract_loc_feat": [[24, 48], ["progressbar.ProgressBar", "dataset.get_test_set", "model.close", "datasets.get_dataset", "models.get_model", "next", "model.run_test_data", "data[].append", "data[].append", "dataset.format_data", "progressbar.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.get_test_set", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.close", "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.__init__.get_dataset", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__.get_model", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.run_test_data", "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.format_data"], ["def", "extract_loc_feat", "(", "config", ")", ":", "\n", "    ", "\"\"\"Extract local features.\"\"\"", "\n", "prog_bar", "=", "progressbar", ".", "ProgressBar", "(", ")", "\n", "config", "[", "'stage'", "]", "=", "'loc'", "\n", "dataset", "=", "get_dataset", "(", "config", "[", "'data_name'", "]", ")", "(", "**", "config", ")", "\n", "prog_bar", ".", "max_value", "=", "dataset", ".", "data_length", "\n", "test_set", "=", "dataset", ".", "get_test_set", "(", ")", "\n", "\n", "model", "=", "get_model", "(", "'rootsift_model'", ")", "(", "None", ",", "**", "(", "config", "[", "'loc_feat'", "]", ")", ")", "\n", "idx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "next", "(", "test_set", ")", "\n", "# detect SIFT keypoints and crop image patches.", "\n", "kpts", ",", "descs", "=", "model", ".", "run_test_data", "(", "data", "[", "'image'", "]", ")", "\n", "data", "[", "'dump_data'", "]", "=", "[", "]", "\n", "data", "[", "'dump_data'", "]", ".", "append", "(", "descs", ")", "\n", "data", "[", "'dump_data'", "]", ".", "append", "(", "kpts", "[", ":", ",", "0", ":", "2", "]", ")", "\n", "dataset", ".", "format_data", "(", "data", ")", "\n", "prog_bar", ".", "update", "(", "idx", ")", "\n", "idx", "+=", "1", "\n", "", "except", "dataset", ".", "end_set", ":", "\n", "            ", "break", "\n", "", "", "model", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations_rootsift.main": [[50, 59], ["open", "yaml.load", "os.path.exists", "os.mkdir", "evaluations_rootsift.extract_loc_feat"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.load", "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.evaluations_rootsift.extract_loc_feat"], ["", "def", "main", "(", "argv", "=", "None", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"Program entrance.\"\"\"", "\n", "with", "open", "(", "FLAGS", ".", "config", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config", "[", "'dump_root'", "]", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "config", "[", "'dump_root'", "]", ")", "\n", "# extract local features and keypoint matchability.", "\n", "", "if", "config", "[", "'loc_feat'", "]", "[", "'infer'", "]", ":", "\n", "        ", "extract_loc_feat", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.image_matching.load_imgs": [[41, 51], ["cv2.imread", "rgb_list.append", "gray_list.append", "cv2.cvtColor"], "function", ["None"], ["def", "load_imgs", "(", "img_paths", ")", ":", "\n", "    ", "rgb_list", "=", "[", "]", "\n", "gray_list", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "        ", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "gray", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "img", "=", "img", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "rgb_list", ".", "append", "(", "img", ")", "\n", "gray_list", ".", "append", "(", "gray", ")", "\n", "", "return", "rgb_list", ",", "gray_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.image_matching.extract_regional_features": [[53, 61], ["enumerate", "model.close", "models.get_model", "model.run_test_data", "reg_feat_list.append"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.close", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__.get_model", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.run_test_data"], ["", "def", "extract_regional_features", "(", "rgb_list", ",", "model_path", ")", ":", "\n", "    ", "reg_feat_list", "=", "[", "]", "\n", "model", "=", "get_model", "(", "'reg_model'", ")", "(", "model_path", ")", "\n", "for", "_", ",", "val", "in", "enumerate", "(", "rgb_list", ")", ":", "\n", "        ", "reg_feat", "=", "model", ".", "run_test_data", "(", "val", ")", "\n", "reg_feat_list", ".", "append", "(", "reg_feat", ")", "\n", "", "model", ".", "close", "(", ")", "\n", "return", "reg_feat_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.image_matching.extract_local_features": [[63, 84], ["enumerate", "model.close", "models.get_model", "model.run_test_data", "numpy.stack", "numpy.concatenate", "cv_kpts_list.append", "loc_info_list.append", "sift_feat_list.append", "loc_feat_list.append", "numpy.array", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.close", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__.get_model", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.run_test_data"], ["", "def", "extract_local_features", "(", "gray_list", ",", "model_path", ")", ":", "\n", "    ", "cv_kpts_list", "=", "[", "]", "\n", "loc_info_list", "=", "[", "]", "\n", "loc_feat_list", "=", "[", "]", "\n", "sift_feat_list", "=", "[", "]", "\n", "model", "=", "get_model", "(", "'loc_model'", ")", "(", "model_path", ",", "**", "{", "'sift_desc'", ":", "True", ",", "\n", "'n_sample'", ":", "FLAGS", ".", "n_sample", ",", "\n", "'peak_thld'", ":", "0.04", ",", "\n", "'dense_desc'", ":", "FLAGS", ".", "dense_desc", ",", "\n", "'upright'", ":", "False", "}", ")", "\n", "for", "_", ",", "val", "in", "enumerate", "(", "gray_list", ")", ":", "\n", "        ", "loc_feat", ",", "kpt_mb", ",", "normalized_xy", ",", "cv_kpts", ",", "sift_desc", "=", "model", ".", "run_test_data", "(", "val", ")", "\n", "raw_kpts", "=", "[", "np", ".", "array", "(", "(", "i", ".", "pt", "[", "0", "]", ",", "i", ".", "pt", "[", "1", "]", ",", "i", ".", "size", ",", "i", ".", "angle", ",", "i", ".", "response", ")", ")", "for", "i", "in", "cv_kpts", "]", "\n", "raw_kpts", "=", "np", ".", "stack", "(", "raw_kpts", ",", "axis", "=", "0", ")", "\n", "loc_info", "=", "np", ".", "concatenate", "(", "(", "raw_kpts", ",", "normalized_xy", ",", "loc_feat", ",", "kpt_mb", ")", ",", "axis", "=", "-", "1", ")", "\n", "cv_kpts_list", ".", "append", "(", "cv_kpts", ")", "\n", "loc_info_list", ".", "append", "(", "loc_info", ")", "\n", "sift_feat_list", ".", "append", "(", "sift_desc", ")", "\n", "loc_feat_list", ".", "append", "(", "loc_feat", "/", "np", ".", "linalg", ".", "norm", "(", "loc_feat", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "", "model", ".", "close", "(", ")", "\n", "return", "cv_kpts_list", ",", "loc_info_list", ",", "loc_feat_list", ",", "sift_feat_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.image_matching.extract_augmented_features": [[86, 95], ["enumerate", "model.close", "models.get_model", "len", "len", "model.run_test_data", "aug_feat_list.append"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.close", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__.get_model", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.run_test_data"], ["", "def", "extract_augmented_features", "(", "reg_feat_list", ",", "loc_info_list", ",", "model_path", ")", ":", "\n", "    ", "aug_feat_list", "=", "[", "]", "\n", "model", "=", "get_model", "(", "'aug_model'", ")", "(", "model_path", ",", "**", "{", "'quantz'", ":", "False", "}", ")", "\n", "assert", "len", "(", "reg_feat_list", ")", "==", "len", "(", "loc_info_list", ")", "\n", "for", "idx", ",", "_", "in", "enumerate", "(", "reg_feat_list", ")", ":", "\n", "        ", "aug_feat", ",", "_", "=", "model", ".", "run_test_data", "(", "[", "reg_feat_list", "[", "idx", "]", ",", "loc_info_list", "[", "idx", "]", "]", ")", "\n", "aug_feat_list", ".", "append", "(", "aug_feat", ")", "\n", "", "model", ".", "close", "(", ")", "\n", "return", "aug_feat_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.image_matching.main": [[97, 151], ["image_matching.load_imgs", "image_matching.extract_regional_features", "image_matching.extract_local_features", "image_matching.extract_augmented_features", "utils.opencvhelper.MatcherWrapper", "utils.opencvhelper.MatcherWrapper.get_matches", "utils.opencvhelper.MatcherWrapper.get_matches", "utils.opencvhelper.MatcherWrapper.get_matches", "utils.opencvhelper.MatcherWrapper.draw_matches", "utils.opencvhelper.MatcherWrapper.draw_matches", "utils.opencvhelper.MatcherWrapper.draw_matches", "numpy.concatenate", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.imshow", "matplotlib.show", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.ones", "int"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.None.image_matching.load_imgs", "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.image_matching.extract_regional_features", "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.image_matching.extract_local_features", "home.repos.pwc.inspect_result.lzx551402_contextdesc.None.image_matching.extract_augmented_features", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.MatcherWrapper.get_matches", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.MatcherWrapper.get_matches", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.MatcherWrapper.get_matches", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.MatcherWrapper.draw_matches", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.MatcherWrapper.draw_matches", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.MatcherWrapper.draw_matches"], ["", "def", "main", "(", "argv", "=", "None", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"Program entrance.\"\"\"", "\n", "if", "FLAGS", ".", "model_type", "==", "'pb'", ":", "\n", "        ", "reg_model_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "reg_model", ",", "'reg.pb'", ")", "\n", "loc_model_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "loc_model", ",", "'loc.pb'", ")", "\n", "aug_model_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "loc_model", ",", "'aug.pb'", ")", "\n", "", "elif", "FLAGS", ".", "model_type", "==", "'ckpt'", ":", "\n", "        ", "reg_model_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "reg_model", ",", "'model.ckpt-550000'", ")", "\n", "loc_model_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "loc_model", ",", "'model.ckpt-400000'", ")", "\n", "aug_model_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "loc_model", ",", "'model.ckpt-400000'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "img_paths", "=", "[", "FLAGS", ".", "img1_path", ",", "FLAGS", ".", "img2_path", "]", "\n", "# load testing images.", "\n", "rgb_list", ",", "gray_list", "=", "load_imgs", "(", "img_paths", ")", "\n", "# extract regional features.", "\n", "reg_feat_list", "=", "extract_regional_features", "(", "rgb_list", ",", "reg_model_path", ")", "\n", "# extract local features and keypoint matchability.", "\n", "cv_kpts_list", ",", "loc_info_list", ",", "loc_feat_list", ",", "sift_feat_list", "=", "extract_local_features", "(", "\n", "gray_list", ",", "loc_model_path", ")", "\n", "# extract augmented features.", "\n", "aug_feat_list", "=", "extract_augmented_features", "(", "reg_feat_list", ",", "loc_info_list", ",", "aug_model_path", ")", "\n", "# feature matching and draw matches.", "\n", "matcher", "=", "MatcherWrapper", "(", ")", "\n", "sift_match", ",", "sift_mask", "=", "matcher", ".", "get_matches", "(", "\n", "sift_feat_list", "[", "0", "]", ",", "sift_feat_list", "[", "1", "]", ",", "cv_kpts_list", "[", "0", "]", ",", "cv_kpts_list", "[", "1", "]", ",", "\n", "ratio", "=", "0.8", "if", "FLAGS", ".", "ratio_test", "else", "None", ",", "cross_check", "=", "FLAGS", ".", "cross_check", ",", "\n", "err_thld", "=", "3", ",", "ransac", "=", "True", ",", "info", "=", "'SIFT feautre'", ")", "\n", "\n", "base_match", ",", "base_mask", "=", "matcher", ".", "get_matches", "(", "\n", "loc_feat_list", "[", "0", "]", ",", "loc_feat_list", "[", "1", "]", ",", "cv_kpts_list", "[", "0", "]", ",", "cv_kpts_list", "[", "1", "]", ",", "\n", "ratio", "=", "0.89", "if", "FLAGS", ".", "ratio_test", "else", "None", ",", "cross_check", "=", "FLAGS", ".", "cross_check", ",", "\n", "err_thld", "=", "3", ",", "ransac", "=", "True", ",", "info", "=", "'Raw local feature'", ")", "\n", "\n", "aug_match", ",", "aug_mask", "=", "matcher", ".", "get_matches", "(", "\n", "aug_feat_list", "[", "0", "]", ",", "aug_feat_list", "[", "1", "]", ",", "cv_kpts_list", "[", "0", "]", ",", "cv_kpts_list", "[", "1", "]", ",", "\n", "ratio", "=", "0.89", "if", "FLAGS", ".", "ratio_test", "else", "None", ",", "cross_check", "=", "FLAGS", ".", "cross_check", ",", "\n", "err_thld", "=", "3", ",", "ransac", "=", "True", ",", "info", "=", "'Augmented local feature'", ")", "\n", "\n", "sift_disp", "=", "matcher", ".", "draw_matches", "(", "\n", "rgb_list", "[", "0", "]", ",", "cv_kpts_list", "[", "0", "]", ",", "rgb_list", "[", "1", "]", ",", "cv_kpts_list", "[", "1", "]", ",", "sift_match", ",", "sift_mask", ")", "\n", "base_disp", "=", "matcher", ".", "draw_matches", "(", "\n", "rgb_list", "[", "0", "]", ",", "cv_kpts_list", "[", "0", "]", ",", "rgb_list", "[", "1", "]", ",", "cv_kpts_list", "[", "1", "]", ",", "base_match", ",", "base_mask", ")", "\n", "aug_disp", "=", "matcher", ".", "draw_matches", "(", "\n", "rgb_list", "[", "0", "]", ",", "cv_kpts_list", "[", "0", "]", ",", "rgb_list", "[", "1", "]", ",", "cv_kpts_list", "[", "1", "]", ",", "aug_match", ",", "aug_mask", ")", "\n", "\n", "rows", ",", "cols", "=", "sift_disp", ".", "shape", "[", "0", ":", "2", "]", "\n", "white", "=", "(", "np", ".", "ones", "(", "(", "int", "(", "rows", "/", "50", ")", ",", "cols", ",", "3", ")", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "disp", "=", "np", ".", "concatenate", "(", "[", "sift_disp", ",", "white", ",", "base_disp", ",", "white", ",", "aug_disp", "]", ",", "axis", "=", "0", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "imshow", "(", "disp", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.__init__": [[16, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "rootsift", "=", "True", ",", "n_feature", "=", "0", ",", "n_octave_layers", "=", "3", ",", "\n", "peak_thld", "=", "0.0067", ",", "edge_thld", "=", "10", ",", "sigma", "=", "1.6", ",", "\n", "n_sample", "=", "8192", ",", "patch_size", "=", "32", ")", ":", "\n", "        ", "self", ".", "sift", "=", "None", "\n", "self", ".", "rootsift", "=", "rootsift", "\n", "\n", "self", ".", "n_feature", "=", "n_feature", "\n", "self", ".", "n_octave_layers", "=", "n_octave_layers", "\n", "self", ".", "peak_thld", "=", "peak_thld", "\n", "self", ".", "edge_thld", "=", "edge_thld", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "n_sample", "=", "n_sample", "\n", "self", ".", "down_octave", "=", "True", "\n", "\n", "self", ".", "init_sigma", "=", "0.5", "\n", "self", ".", "sift_descr_scl_fctr", "=", "3.", "\n", "self", ".", "sift_descr_width", "=", "4", "\n", "\n", "self", ".", "first_octave", "=", "None", "\n", "self", ".", "max_octave", "=", "None", "\n", "self", ".", "pyr", "=", "None", "\n", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "output_gird", "=", "None", "\n", "\n", "self", ".", "pyr_off", "=", "False", "\n", "self", ".", "ori_off", "=", "False", "\n", "self", ".", "half_sigma", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.create": [[45, 53], ["cv2.xfeatures2d.SIFT_create"], "methods", ["None"], ["", "def", "create", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create OpenCV SIFT detector.\"\"\"", "\n", "self", ".", "sift", "=", "cv2", ".", "xfeatures2d", ".", "SIFT_create", "(", "\n", "0", ",", "\n", "self", ".", "n_octave_layers", ",", "\n", "self", ".", "peak_thld", ",", "\n", "self", ".", "edge_thld", ",", "\n", "self", ".", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.detect": [[54, 87], ["opencvhelper.SiftWrapper.sift.detect", "numpy.stack", "numpy.unique", "numpy.array", "[].tolist", "len", "int", "int", "opencvhelper.SiftWrapper.sample_by_octave", "numpy.zeros", "numpy.array", "len", "numpy.int8", "numpy.min", "numpy.max", "enumerate", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.detect", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.sample_by_octave"], ["", "def", "detect", "(", "self", ",", "gray_img", ")", ":", "\n", "        ", "\"\"\"Detect keypoints in the gray-scale image.\n        Args:\n            gray_img: The input gray-scale image.\n        Returns:\n            npy_kpts: (n_kpts, 6) Keypoints represented as NumPy array.\n            cv_kpts: A list of keypoints represented as cv2.KeyPoint.\n        \"\"\"", "\n", "\n", "cv_kpts", "=", "self", ".", "sift", ".", "detect", "(", "gray_img", ",", "None", ")", "\n", "\n", "if", "self", ".", "ori_off", ":", "\n", "            ", "tmp_npy_kpts", "=", "[", "np", ".", "array", "(", "[", "tmp_cv_kpt", ".", "pt", "[", "0", "]", ",", "tmp_cv_kpt", ".", "pt", "[", "1", "]", ",", "tmp_cv_kpt", ".", "size", "]", ")", "\n", "for", "i", ",", "tmp_cv_kpt", "in", "enumerate", "(", "cv_kpts", ")", "]", "\n", "tmp_npy_kpts", "=", "np", ".", "stack", "(", "tmp_npy_kpts", ",", "axis", "=", "0", ")", "\n", "_", ",", "unique", "=", "np", ".", "unique", "(", "tmp_npy_kpts", ",", "axis", "=", "0", ",", "return_index", "=", "True", ")", "\n", "cv_kpts", "=", "[", "cv_kpts", "[", "i", "]", "for", "i", "in", "unique", "]", "\n", "\n", "", "if", "self", ".", "n_feature", ">", "0", "and", "len", "(", "cv_kpts", ")", ">", "self", ".", "n_feature", ":", "\n", "            ", "response", "=", "np", ".", "array", "(", "[", "kp", ".", "response", "for", "kp", "in", "cv_kpts", "]", ")", "\n", "resp_sort", "=", "np", ".", "argsort", "(", "response", ")", "[", ":", ":", "-", "1", "]", "[", "0", ":", "self", ".", "n_feature", "]", ".", "tolist", "(", ")", "\n", "cv_kpts", "=", "[", "cv_kpts", "[", "i", "]", "for", "i", "in", "resp_sort", "]", "\n", "cv_kpts", "=", "cv_kpts", "[", "0", ":", "self", ".", "n_feature", "]", "\n", "\n", "", "if", "len", "(", "cv_kpts", ")", ">", "0", ":", "\n", "            ", "all_octaves", "=", "[", "np", ".", "int8", "(", "i", ".", "octave", "&", "0xFF", ")", "for", "i", "in", "cv_kpts", "]", "\n", "self", ".", "first_octave", "=", "int", "(", "np", ".", "min", "(", "all_octaves", ")", ")", "\n", "self", ".", "max_octave", "=", "int", "(", "np", ".", "max", "(", "all_octaves", ")", ")", "\n", "\n", "npy_kpts", ",", "cv_kpts", "=", "self", ".", "sample_by_octave", "(", "cv_kpts", ",", "self", ".", "n_sample", ",", "self", ".", "down_octave", ")", "\n", "", "else", ":", "\n", "            ", "npy_kpts", "=", "np", ".", "zeros", "(", "(", "0", ",", "0", ")", ")", "\n", "", "return", "npy_kpts", ",", "cv_kpts", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.compute": [[88, 102], ["opencvhelper.SiftWrapper.sift.compute", "numpy.sqrt", "numpy.sqrt.sum"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.compute"], ["", "def", "compute", "(", "self", ",", "img", ",", "cv_kpts", ")", ":", "\n", "        ", "\"\"\"Compute SIFT descriptions on given keypoints.\n        Args:\n            img: The input image, can be either color or gray-scale.\n            cv_kpts: A list of cv2.KeyPoint.\n        Returns:\n            sift_desc: (n_kpts, 128) SIFT descriptions.\n        \"\"\"", "\n", "\n", "_", ",", "sift_desc", "=", "self", ".", "sift", ".", "compute", "(", "img", ",", "cv_kpts", ")", "\n", "if", "self", ".", "rootsift", ":", "\n", "            ", "sift_desc", "/=", "(", "sift_desc", ".", "sum", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "1e-7", ")", "\n", "sift_desc", "=", "np", ".", "sqrt", "(", "sift_desc", ")", "\n", "", "return", "sift_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.build_pyramid": [[103, 154], ["gray_img.astype.astype.astype", "numpy.zeros", "numpy.power", "range", "range", "numpy.sqrt", "cv2.resize", "cv2.GaussianBlur", "numpy.sqrt", "cv2.GaussianBlur", "numpy.sqrt", "range", "numpy.maximum", "numpy.maximum", "numpy.power", "numpy.square", "numpy.square", "numpy.square", "cv2.resize", "cv2.GaussianBlur", "numpy.square"], "methods", ["None"], ["", "def", "build_pyramid", "(", "self", ",", "gray_img", ")", ":", "\n", "        ", "\"\"\"Build pyramid.\n        Args:\n            gray_img: Input gray-scale image.\n        Returns:\n            pyr: A list of gaussian blurred images (gaussian scale space).\n        \"\"\"", "\n", "if", "self", ".", "pyr_off", ":", "\n", "            ", "self", ".", "pyr", "=", "gray_img", "\n", "", "else", ":", "\n", "            ", "sigma", "=", "self", ".", "sigma", "\n", "init_sigma", "=", "self", ".", "init_sigma", "\n", "if", "self", ".", "half_sigma", ":", "\n", "                ", "sigma", "/=", "2", "\n", "init_sigma", "/=", "2", "\n", "\n", "", "gray_img", "=", "gray_img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "n_octaves", "=", "self", ".", "max_octave", "-", "self", ".", "first_octave", "+", "1", "\n", "# create initial image.", "\n", "if", "self", ".", "first_octave", "<", "0", ":", "\n", "                ", "sig_diff", "=", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "\n", "np", ".", "square", "(", "sigma", ")", "-", "np", ".", "square", "(", "init_sigma", ")", "*", "4", ",", "0.01", ")", ")", "\n", "base", "=", "cv2", ".", "resize", "(", "gray_img", ",", "(", "gray_img", ".", "shape", "[", "1", "]", "*", "2", ",", "gray_img", ".", "shape", "[", "0", "]", "*", "2", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "base", "=", "cv2", ".", "GaussianBlur", "(", "base", ",", "None", ",", "sig_diff", ")", "\n", "", "else", ":", "\n", "                ", "sig_diff", "=", "np", ".", "sqrt", "(", "np", ".", "maximum", "(", "np", ".", "square", "(", "sigma", ")", "-", "\n", "np", ".", "square", "(", "init_sigma", ")", ",", "0.01", ")", ")", "\n", "base", "=", "cv2", ".", "GaussianBlur", "(", "gray_img", ",", "None", ",", "sig_diff", ")", "\n", "# compute gaussian kernels.", "\n", "", "sig", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_octave_layers", "+", "3", ",", ")", ")", "\n", "self", ".", "pyr", "=", "[", "None", "]", "*", "(", "n_octaves", "*", "(", "self", ".", "n_octave_layers", "+", "3", ")", ")", "\n", "sig", "[", "0", "]", "=", "sigma", "\n", "k", "=", "np", ".", "power", "(", "2", ",", "1.", "/", "self", ".", "n_octave_layers", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "n_octave_layers", "+", "3", ")", ":", "\n", "                ", "sig_prev", "=", "np", ".", "power", "(", "k", ",", "i", "-", "1", ")", "*", "sigma", "\n", "sig_total", "=", "sig_prev", "*", "k", "\n", "sig", "[", "i", "]", "=", "np", ".", "sqrt", "(", "sig_total", "*", "sig_total", "-", "sig_prev", "*", "sig_prev", ")", "\n", "# construct gaussian scale space.", "\n", "", "for", "o", "in", "range", "(", "0", ",", "n_octaves", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "n_octave_layers", "+", "1", ")", ":", "\n", "                    ", "if", "o", "==", "0", "and", "i", "==", "0", ":", "\n", "                        ", "dst", "=", "base", "\n", "", "elif", "i", "==", "0", ":", "\n", "                        ", "src", "=", "self", ".", "pyr", "[", "(", "o", "-", "1", ")", "*", "(", "self", ".", "n_octave_layers", "+", "3", ")", "+", "self", ".", "n_octave_layers", "]", "\n", "dst", "=", "cv2", ".", "resize", "(", "\n", "src", ",", "(", "src", ".", "shape", "[", "1", "]", "//", "2", ",", "src", ".", "shape", "[", "0", "]", "//", "2", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "else", ":", "\n", "                        ", "src", "=", "self", ".", "pyr", "[", "o", "*", "(", "self", ".", "n_octave_layers", "+", "3", ")", "+", "i", "-", "1", "]", "\n", "dst", "=", "cv2", ".", "GaussianBlur", "(", "src", ",", "None", ",", "sig", "[", "i", "]", ")", "\n", "", "self", ".", "pyr", "[", "o", "*", "(", "self", ".", "n_octave_layers", "+", "3", ")", "+", "i", "]", "=", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.unpack_octave": [[155, 170], ["float"], "methods", ["None"], ["", "", "", "", "def", "unpack_octave", "(", "self", ",", "kpt", ")", ":", "\n", "        ", "\"\"\"Get scale coefficients of a keypoints.\n        Args:\n            kpt: A keypoint object represented as cv2.KeyPoint.\n        Returns:\n            octave: The octave index.\n            layer: The level index.\n            scale: The sampling step.\n        \"\"\"", "\n", "\n", "octave", "=", "kpt", ".", "octave", "&", "255", "\n", "layer", "=", "(", "kpt", ".", "octave", ">>", "8", ")", "&", "255", "\n", "octave", "=", "octave", "if", "octave", "<", "128", "else", "(", "-", "128", "|", "octave", ")", "\n", "scale", "=", "1.", "/", "(", "1", "<<", "octave", ")", "if", "octave", ">=", "0", "else", "float", "(", "1", "<<", "-", "octave", ")", "\n", "return", "octave", ",", "layer", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.get_interest_region": [[171, 228], ["enumerate", "numpy.round", "numpy.minimum", "numpy.zeros", "numpy.matmul", "numpy.reshape", "batch_input_grid.append", "len", "numpy.concatenate", "opencvhelper.SiftWrapper.unpack_octave", "numpy.sqrt", "numpy.cos", "numpy.sin", "numpy.concatenate", "cv2.remap", "numpy.reshape", "numpy.concatenate.append", "numpy.sum", "scale_img.astype", "numpy.square", "len", "len", "len", "numpy.sqrt", "len", "numpy.mean", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.unpack_octave", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape"], ["", "def", "get_interest_region", "(", "self", ",", "scale_img", ",", "cv_kpts", ",", "standardize", "=", "True", ")", ":", "\n", "        ", "\"\"\"Get the interest region around a keypoint.\n        Args:\n            scale_img: DoG image in the scale space.\n            cv_kpts: A list of OpenCV keypoints.\n            standardize: (True by default) Whether to standardize patches as network inputs.\n        Returns:\n            Nothing.\n        \"\"\"", "\n", "batch_input_grid", "=", "[", "]", "\n", "all_patches", "=", "[", "]", "\n", "bs", "=", "30", "# limited by OpenCV remap implementation", "\n", "for", "idx", ",", "cv_kpt", "in", "enumerate", "(", "cv_kpts", ")", ":", "\n", "# preprocess", "\n", "            ", "if", "self", ".", "pyr_off", ":", "\n", "                ", "scale", "=", "1", "\n", "", "else", ":", "\n", "                ", "_", ",", "_", ",", "scale", "=", "self", ".", "unpack_octave", "(", "cv_kpt", ")", "\n", "", "size", "=", "cv_kpt", ".", "size", "*", "scale", "*", "0.5", "\n", "ptf", "=", "(", "cv_kpt", ".", "pt", "[", "0", "]", "*", "scale", ",", "cv_kpt", ".", "pt", "[", "1", "]", "*", "scale", ")", "\n", "ori", "=", "0", "if", "self", ".", "ori_off", "else", "(", "360.", "-", "cv_kpt", ".", "angle", ")", "*", "(", "np", ".", "pi", "/", "180.", ")", "\n", "radius", "=", "np", ".", "round", "(", "self", ".", "sift_descr_scl_fctr", "*", "size", "*", "np", ".", "sqrt", "(", "2", ")", "\n", "*", "(", "self", ".", "sift_descr_width", "+", "1", ")", "*", "0.5", ")", "\n", "radius", "=", "np", ".", "minimum", "(", "radius", ",", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "scale_img", ".", "shape", ")", ")", ")", ")", "\n", "# construct affine transformation matrix.", "\n", "affine_mat", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "m_cos", "=", "np", ".", "cos", "(", "ori", ")", "*", "radius", "\n", "m_sin", "=", "np", ".", "sin", "(", "ori", ")", "*", "radius", "\n", "affine_mat", "[", "0", ",", "0", "]", "=", "m_cos", "\n", "affine_mat", "[", "1", ",", "0", "]", "=", "m_sin", "\n", "affine_mat", "[", "2", ",", "0", "]", "=", "ptf", "[", "0", "]", "\n", "affine_mat", "[", "0", ",", "1", "]", "=", "-", "m_sin", "\n", "affine_mat", "[", "1", ",", "1", "]", "=", "m_cos", "\n", "affine_mat", "[", "2", ",", "1", "]", "=", "ptf", "[", "1", "]", "\n", "# get input grid.", "\n", "input_grid", "=", "np", ".", "matmul", "(", "self", ".", "output_grid", ",", "affine_mat", ")", "\n", "input_grid", "=", "np", ".", "reshape", "(", "input_grid", ",", "(", "-", "1", ",", "1", ",", "2", ")", ")", "\n", "batch_input_grid", ".", "append", "(", "input_grid", ")", "\n", "\n", "if", "len", "(", "batch_input_grid", ")", "!=", "0", "and", "len", "(", "batch_input_grid", ")", "%", "bs", "==", "0", "or", "idx", "==", "len", "(", "cv_kpts", ")", "-", "1", ":", "\n", "# sample image pixels.", "\n", "                ", "batch_input_grid_", "=", "np", ".", "concatenate", "(", "batch_input_grid", ",", "axis", "=", "0", ")", "\n", "patches", "=", "cv2", ".", "remap", "(", "scale_img", ".", "astype", "(", "np", ".", "float32", ")", ",", "batch_input_grid_", ",", "\n", "None", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ",", "borderMode", "=", "cv2", ".", "BORDER_REPLICATE", ")", "\n", "patches", "=", "np", ".", "reshape", "(", "patches", ",", "(", "len", "(", "batch_input_grid", ")", ",", "\n", "self", ".", "patch_size", ",", "self", ".", "patch_size", ")", ")", "\n", "# standardize patches.", "\n", "if", "standardize", ":", "\n", "                    ", "patches", "=", "(", "patches", "-", "np", ".", "mean", "(", "patches", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", ")", "/", "(", "np", ".", "std", "(", "patches", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "keepdims", "=", "True", ")", "+", "1e-8", ")", "\n", "", "all_patches", ".", "append", "(", "patches", ")", "\n", "batch_input_grid", "=", "[", "]", "\n", "", "", "if", "len", "(", "all_patches", ")", "!=", "0", ":", "\n", "            ", "all_patches", "=", "np", ".", "concatenate", "(", "all_patches", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "all_patches", "=", "None", "\n", "", "return", "all_patches", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.get_patches": [[229, 271], ["numpy.square", "numpy.zeros", "range", "opencvhelper.SiftWrapper.get_interest_region", "enumerate", "enumerate", "len", "opencvhelper.SiftWrapper.unpack_octave", "scale_index[].append", "opencvhelper.SiftWrapper.get_interest_region", "numpy.concatenate", "numpy.concatenate", "range", "int", "numpy.concatenate.append", "len", "int"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.get_interest_region", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.unpack_octave", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.get_interest_region"], ["", "def", "get_patches", "(", "self", ",", "cv_kpts", ")", ":", "\n", "        ", "\"\"\"Get all patches around given keypoints.\n        Args:\n            cv_kpts: A list of keypoints represented as cv2.KeyPoint.\n        Return:\n            all_patches: (n_kpts, 32, 32) Cropped patches.\n        \"\"\"", "\n", "\n", "# generate sampling grids.", "\n", "n_pixel", "=", "np", ".", "square", "(", "self", ".", "patch_size", ")", "\n", "self", ".", "output_grid", "=", "np", ".", "zeros", "(", "(", "n_pixel", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "n_pixel", ")", ":", "\n", "            ", "self", ".", "output_grid", "[", "i", ",", "0", "]", "=", "(", "i", "%", "self", ".", "patch_size", ")", "*", "1.", "/", "self", ".", "patch_size", "*", "2", "-", "1", "\n", "self", ".", "output_grid", "[", "i", ",", "1", "]", "=", "(", "i", "//", "self", ".", "patch_size", ")", "*", "1.", "/", "self", ".", "patch_size", "*", "2", "-", "1", "\n", "self", ".", "output_grid", "[", "i", ",", "2", "]", "=", "1", "\n", "\n", "", "if", "self", ".", "pyr_off", ":", "\n", "            ", "if", "not", "self", ".", "down_octave", ":", "\n", "                ", "cv_kpts", "=", "cv_kpts", "[", ":", ":", "-", "1", "]", "\n", "", "all_patches", "=", "self", ".", "get_interest_region", "(", "self", ".", "pyr", ",", "cv_kpts", ")", "\n", "", "else", ":", "\n", "            ", "scale_index", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "pyr", ")", ")", "]", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "cv_kpts", ")", ":", "\n", "                ", "octave", ",", "layer", ",", "_", "=", "self", ".", "unpack_octave", "(", "val", ")", "\n", "scale_val", "=", "(", "int", "(", "octave", ")", "-", "self", ".", "first_octave", ")", "*", "(", "self", ".", "n_octave_layers", "+", "3", ")", "+", "int", "(", "layer", ")", "\n", "scale_index", "[", "scale_val", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "all_patches", "=", "[", "]", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "scale_index", ")", ":", "\n", "                ", "tmp_cv_kpts", "=", "[", "cv_kpts", "[", "i", "]", "for", "i", "in", "val", "]", "\n", "scale_img", "=", "self", ".", "pyr", "[", "idx", "]", "\n", "patches", "=", "self", ".", "get_interest_region", "(", "scale_img", ",", "tmp_cv_kpts", ")", "\n", "if", "patches", "is", "not", "None", ":", "\n", "                    ", "all_patches", ".", "append", "(", "patches", ")", "\n", "", "", "if", "self", ".", "down_octave", ":", "\n", "                ", "all_patches", "=", "np", ".", "concatenate", "(", "all_patches", "[", ":", ":", "-", "1", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "all_patches", "=", "np", ".", "concatenate", "(", "all_patches", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "assert", "len", "(", "cv_kpts", ")", "==", "all_patches", ".", "shape", "[", "0", "]", "\n", "return", "all_patches", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.sample_by_octave": [[272, 319], ["len", "numpy.zeros", "enumerate", "numpy.int8", "npy_kpts[].argsort", "numpy.unique", "print", "list", "reversed"], "methods", ["None"], ["", "def", "sample_by_octave", "(", "self", ",", "cv_kpts", ",", "n_sample", ",", "down_octave", "=", "True", ")", ":", "\n", "        ", "\"\"\"Sample keypoints by octave.\n        Args:\n            cv_kpts: The list of keypoints representd as cv2.KeyPoint.\n            n_sample: The sampling number of keypoint. Leave to -1 if no sampling needed\n            down_octave: (True by default) Perform sampling downside of octave.\n        Returns:\n            npy_kpts: (n_kpts, 5) Keypoints in NumPy format, represenetd as\n                      (x, y, size, orientation, octave).\n            cv_kpts: A list of sampled cv2.KeyPoint.\n        \"\"\"", "\n", "\n", "n_kpts", "=", "len", "(", "cv_kpts", ")", "\n", "npy_kpts", "=", "np", ".", "zeros", "(", "(", "n_kpts", ",", "5", ")", ")", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "cv_kpts", ")", ":", "\n", "            ", "npy_kpts", "[", "idx", ",", "0", "]", "=", "val", ".", "pt", "[", "0", "]", "\n", "npy_kpts", "[", "idx", ",", "1", "]", "=", "val", ".", "pt", "[", "1", "]", "\n", "npy_kpts", "[", "idx", ",", "2", "]", "=", "val", ".", "size", "\n", "npy_kpts", "[", "idx", ",", "3", "]", "=", "0", "if", "self", ".", "ori_off", "else", "(", "360.", "-", "val", ".", "angle", ")", "*", "(", "np", ".", "pi", "/", "180.", ")", "\n", "npy_kpts", "[", "idx", ",", "4", "]", "=", "np", ".", "int8", "(", "val", ".", "octave", "&", "0xFF", ")", "\n", "\n", "", "if", "down_octave", ":", "\n", "            ", "sort_idx", "=", "(", "-", "npy_kpts", "[", ":", ",", "2", "]", ")", ".", "argsort", "(", ")", "\n", "", "else", ":", "\n", "            ", "sort_idx", "=", "(", "npy_kpts", "[", ":", ",", "2", "]", ")", ".", "argsort", "(", ")", "\n", "\n", "", "npy_kpts", "=", "npy_kpts", "[", "sort_idx", "]", "\n", "cv_kpts", "=", "[", "cv_kpts", "[", "i", "]", "for", "i", "in", "sort_idx", "]", "\n", "\n", "if", "n_sample", ">", "0", "and", "n_kpts", ">", "n_sample", ":", "\n", "# get the keypoint number in each octave.", "\n", "            ", "_", ",", "unique_counts", "=", "np", ".", "unique", "(", "npy_kpts", "[", ":", ",", "4", "]", ",", "return_counts", "=", "True", ")", "\n", "\n", "if", "down_octave", ":", "\n", "                ", "unique_counts", "=", "list", "(", "reversed", "(", "unique_counts", ")", ")", "\n", "\n", "", "n_keep", "=", "0", "\n", "for", "i", "in", "unique_counts", ":", "\n", "                ", "if", "n_keep", "<", "n_sample", ":", "\n", "                    ", "n_keep", "+=", "i", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "", "", "print", "(", "'Sampled'", ",", "n_keep", ",", "'from'", ",", "n_kpts", ")", "\n", "npy_kpts", "=", "npy_kpts", "[", ":", "n_keep", "]", "\n", "cv_kpts", "=", "cv_kpts", "[", ":", "n_keep", "]", "\n", "\n", "", "return", "npy_kpts", ",", "cv_kpts", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.MatcherWrapper.__init__": [[324, 326], ["cv2.BFMatcher"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "matcher", "=", "cv2", ".", "BFMatcher", "(", "cv2", ".", "NORM_L2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.MatcherWrapper.get_matches": [[327, 376], ["opencvhelper.MatcherWrapper.matcher.knnMatch", "opencvhelper.MatcherWrapper.matcher.knnMatch", "range", "len", "numpy.array", "numpy.array", "cv2.findFundamentalMat", "numpy.count_nonzero", "print", "numpy.ones", "print", "good_matches.append", "type", "type", "numpy.array", "numpy.array", "Exception", "exit", "len", "len", "type", "type", "len"], "methods", ["None"], ["", "def", "get_matches", "(", "self", ",", "feat1", ",", "feat2", ",", "cv_kpts1", ",", "cv_kpts2", ",", "ratio", "=", "None", ",", "cross_check", "=", "True", ",", "err_thld", "=", "4", ",", "ransac", "=", "True", ",", "info", "=", "''", ")", ":", "\n", "        ", "\"\"\"Compute putative and inlier matches.\n        Args:\n            feat: (n_kpts, 128) Local features.\n            cv_kpts: A list of keypoints represented as cv2.KeyPoint.\n            ratio: The threshold to apply ratio test.\n            cross_check: (True by default) Whether to apply cross check.\n            err_thld: Epipolar error threshold.\n            info: Info to print out.\n        Returns:\n            good_matches: Putative matches.\n            mask: The mask to distinguish inliers/outliers on putative matches.\n        \"\"\"", "\n", "\n", "init_matches1", "=", "self", ".", "matcher", ".", "knnMatch", "(", "feat1", ",", "feat2", ",", "k", "=", "2", ")", "\n", "init_matches2", "=", "self", ".", "matcher", ".", "knnMatch", "(", "feat2", ",", "feat1", ",", "k", "=", "2", ")", "\n", "\n", "good_matches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "init_matches1", ")", ")", ":", "\n", "            ", "cond", "=", "True", "\n", "if", "cross_check", ":", "\n", "                ", "cond1", "=", "cross_check", "and", "init_matches2", "[", "init_matches1", "[", "i", "]", "[", "0", "]", ".", "trainIdx", "]", "[", "0", "]", ".", "trainIdx", "==", "i", "\n", "cond", "*=", "cond1", "\n", "", "if", "ratio", "is", "not", "None", ":", "\n", "                ", "cond2", "=", "init_matches1", "[", "i", "]", "[", "0", "]", ".", "distance", "<=", "ratio", "*", "init_matches1", "[", "i", "]", "[", "1", "]", ".", "distance", "\n", "cond", "*=", "cond2", "\n", "", "if", "cond", ":", "\n", "                ", "good_matches", ".", "append", "(", "init_matches1", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "", "", "if", "type", "(", "cv_kpts1", ")", "is", "list", "and", "type", "(", "cv_kpts2", ")", "is", "list", ":", "\n", "            ", "good_kpts1", "=", "np", ".", "array", "(", "[", "cv_kpts1", "[", "m", ".", "queryIdx", "]", ".", "pt", "for", "m", "in", "good_matches", "]", ")", "\n", "good_kpts2", "=", "np", ".", "array", "(", "[", "cv_kpts2", "[", "m", ".", "trainIdx", "]", ".", "pt", "for", "m", "in", "good_matches", "]", ")", "\n", "", "elif", "type", "(", "cv_kpts1", ")", "is", "np", ".", "ndarray", "and", "type", "(", "cv_kpts2", ")", "is", "np", ".", "ndarray", ":", "\n", "            ", "good_kpts1", "=", "np", ".", "array", "(", "[", "cv_kpts1", "[", "m", ".", "queryIdx", "]", "for", "m", "in", "good_matches", "]", ")", "\n", "good_kpts2", "=", "np", ".", "array", "(", "[", "cv_kpts2", "[", "m", ".", "trainIdx", "]", "for", "m", "in", "good_matches", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Keypoint type error!\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "if", "ransac", ":", "\n", "            ", "_", ",", "mask", "=", "cv2", ".", "findFundamentalMat", "(", "\n", "good_kpts1", ",", "good_kpts2", ",", "cv2", ".", "RANSAC", ",", "err_thld", ",", "confidence", "=", "0.999", ")", "\n", "n_inlier", "=", "np", ".", "count_nonzero", "(", "mask", ")", "\n", "print", "(", "info", ",", "'n_putative'", ",", "len", "(", "good_matches", ")", ",", "'n_inlier'", ",", "n_inlier", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "ones", "(", "(", "len", "(", "good_matches", ")", ",", ")", ")", "\n", "print", "(", "info", ",", "'n_putative'", ",", "len", "(", "good_matches", ")", ")", "\n", "", "return", "good_matches", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.MatcherWrapper.draw_matches": [[377, 391], ["cv2.drawMatches", "type", "type", "cv2.KeyPoint", "cv2.KeyPoint", "mask.ravel().tolist", "range", "range", "mask.ravel"], "methods", ["None"], ["", "def", "draw_matches", "(", "self", ",", "img1", ",", "cv_kpts1", ",", "img2", ",", "cv_kpts2", ",", "good_matches", ",", "mask", ",", "\n", "match_color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "pt_color", "=", "(", "0", ",", "0", ",", "255", ")", ")", ":", "\n", "        ", "\"\"\"Draw matches.\"\"\"", "\n", "if", "type", "(", "cv_kpts1", ")", "is", "np", ".", "ndarray", "and", "type", "(", "cv_kpts2", ")", "is", "np", ".", "ndarray", ":", "\n", "            ", "cv_kpts1", "=", "[", "cv2", ".", "KeyPoint", "(", "cv_kpts1", "[", "i", "]", "[", "0", "]", ",", "cv_kpts1", "[", "i", "]", "[", "1", "]", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "cv_kpts1", ".", "shape", "[", "0", "]", ")", "]", "\n", "cv_kpts2", "=", "[", "cv2", ".", "KeyPoint", "(", "cv_kpts2", "[", "i", "]", "[", "0", "]", ",", "cv_kpts2", "[", "i", "]", "[", "1", "]", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "cv_kpts2", ".", "shape", "[", "0", "]", ")", "]", "\n", "", "display", "=", "cv2", ".", "drawMatches", "(", "img1", ",", "cv_kpts1", ",", "img2", ",", "cv_kpts2", ",", "good_matches", ",", "\n", "None", ",", "\n", "matchColor", "=", "match_color", ",", "\n", "singlePointColor", "=", "pt_color", ",", "\n", "matchesMask", "=", "mask", ".", "ravel", "(", ")", ".", "tolist", "(", ")", ",", "flags", "=", "4", ")", "\n", "return", "display", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.common.ClassProperty.__get__": [[13, 15], ["classmethod().__get__", "classmethod"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.common.ClassProperty.__get__"], ["def", "__get__", "(", "self", ",", "cls", ",", "owner", ")", ":", "\n", "        ", "return", "classmethod", "(", "self", ".", "fget", ")", ".", "__get__", "(", "None", ",", "owner", ")", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.common.Notify.__init__": [[23, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.common.Notify.HEADER": [[26, 29], ["str", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "@", "ClassProperty", "\n", "def", "HEADER", "(", "cls", ")", ":", "\n", "        ", "return", "str", "(", "datetime", ".", "now", "(", ")", ")", "+", "': \\033[95m'", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.common.Notify.INFO": [[30, 33], ["str", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "@", "ClassProperty", "\n", "def", "INFO", "(", "cls", ")", ":", "\n", "        ", "return", "str", "(", "datetime", ".", "now", "(", ")", ")", "+", "': \\033[92mI'", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.common.Notify.OKBLUE": [[34, 37], ["str", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "@", "ClassProperty", "\n", "def", "OKBLUE", "(", "cls", ")", ":", "\n", "        ", "return", "str", "(", "datetime", ".", "now", "(", ")", ")", "+", "': \\033[94m'", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.common.Notify.WARNING": [[38, 41], ["str", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "@", "ClassProperty", "\n", "def", "WARNING", "(", "cls", ")", ":", "\n", "        ", "return", "str", "(", "datetime", ".", "now", "(", ")", ")", "+", "': \\033[93mW'", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.common.Notify.FAIL": [[42, 45], ["str", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "@", "ClassProperty", "\n", "def", "FAIL", "(", "cls", ")", ":", "\n", "        ", "return", "str", "(", "datetime", ".", "now", "(", ")", ")", "+", "': \\033[91mF'", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.common.Notify.BOLD": [[46, 49], ["str", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "@", "ClassProperty", "\n", "def", "BOLD", "(", "cls", ")", ":", "\n", "        ", "return", "str", "(", "datetime", ".", "now", "(", ")", ")", "+", "': \\033[1mB'", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.common.Notify.UNDERLINE": [[50, 53], ["str", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "@", "ClassProperty", "\n", "def", "UNDERLINE", "(", "cls", ")", ":", "\n", "        ", "return", "str", "(", "datetime", ".", "now", "(", ")", ")", "+", "': \\033[4mU'", "\n", "", "ENDC", "=", "'\\033[0m'", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.hseq_utils.HSeqData.__init__": [[18, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "img", "=", "[", "]", "\n", "self", ".", "patch", "=", "[", "]", "\n", "self", ".", "kpt_param", "=", "[", "]", "\n", "self", ".", "coord", "=", "[", "]", "\n", "self", ".", "homo", "=", "[", "]", "\n", "self", ".", "img_feat", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.hseq_utils.HSeqUtils.__init__": [[28, 50], ["len", "glob.glob", "glob.glob.sort", "hseq_utils.HSeqUtils.seqs.extend", "os.path.join", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "seqs", "=", "[", "]", "\n", "self", ".", "seq_i_num", "=", "0", "\n", "self", ".", "seq_v_num", "=", "0", "\n", "\n", "seq_types", "=", "[", "'%s_*'", "%", "i", "for", "i", "in", "config", "[", "'seq'", "]", "]", "\n", "for", "files", "in", "seq_types", ":", "\n", "            ", "tmp_seqs", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "config", "[", "'root'", "]", ",", "files", ")", ")", "\n", "tmp_seqs", ".", "sort", "(", ")", "\n", "if", "files", "[", "0", "]", "==", "'i'", ":", "\n", "                ", "self", ".", "seq_i_num", "=", "len", "(", "tmp_seqs", ")", "\n", "", "if", "files", "[", "0", "]", "==", "'v'", ":", "\n", "                ", "self", ".", "seq_v_num", "=", "len", "(", "tmp_seqs", ")", "\n", "", "self", ".", "seqs", ".", "extend", "(", "tmp_seqs", ")", "\n", "", "self", ".", "seqs", "=", "self", ".", "seqs", "[", "config", "[", "'start_idx'", "]", ":", "]", "\n", "self", ".", "seq_num", "=", "len", "(", "self", ".", "seqs", ")", "\n", "self", ".", "suffix", "=", "config", "[", "'suffix'", "]", "\n", "# for detector config", "\n", "self", ".", "upright", "=", "config", "[", "'upright'", "]", "\n", "# for data parsing", "\n", "self", ".", "sample_num", "=", "config", "[", "'kpt_n'", "]", "\n", "self", ".", "patch_scale", "=", "6", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.hseq_utils.HSeqUtils.get_data": [[51, 115], ["random.seed", "hseq_utils.HSeqData", "range", "utils.opencvhelper.SiftWrapper", "utils.opencvhelper.SiftWrapper.create", "numpy.load", "cv2.imread", "cv2.cvtColor", "numpy.zeros", "HSeqData.img.append", "HSeqData.kpt_param.append", "HSeqData.patch.append", "HSeqData.coord.append", "HSeqData.homo.append", "HSeqData.img_feat.append", "os.path.join", "os.path.join", "utils.opencvhelper.SiftWrapper.detect", "float", "float", "float", "float", "open().read().splitlines", "numpy.array", "numpy.reshape", "utils.opencvhelper.SiftWrapper.build_pyramid", "utils.opencvhelper.SiftWrapper.get_patches", "open", "pickle.load", "numpy.cos", "numpy.sin", "os.path.join", "open().read", "float", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.create", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.load", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.detect", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.build_pyramid", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.get_patches", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.load"], ["", "def", "get_data", "(", "self", ",", "seq_idx", ",", "dense_desc", ")", ":", "\n", "        ", "random", ".", "seed", "(", "0", ")", "\n", "if", "self", ".", "suffix", "is", "None", ":", "\n", "            ", "sift_wrapper", "=", "SiftWrapper", "(", "n_feature", "=", "self", ".", "sample_num", ",", "peak_thld", "=", "0.04", ")", "\n", "sift_wrapper", ".", "ori_off", "=", "self", ".", "upright", "\n", "sift_wrapper", ".", "create", "(", ")", "\n", "\n", "", "hseq_data", "=", "HSeqData", "(", ")", "\n", "seq_name", "=", "self", ".", "seqs", "[", "seq_idx", "]", "\n", "\n", "for", "img_idx", "in", "range", "(", "1", ",", "7", ")", ":", "\n", "# read image features.", "\n", "            ", "img_feat", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "seq_name", ",", "'%d_img_feat.npy'", "%", "img_idx", ")", ")", "\n", "# read images.", "\n", "img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "seq_name", ",", "'%d.ppm'", "%", "img_idx", ")", ")", "\n", "gray", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "img_size", "=", "img", ".", "shape", "\n", "\n", "if", "self", ".", "suffix", "is", "None", ":", "\n", "                ", "npy_kpts", ",", "cv_kpts", "=", "sift_wrapper", ".", "detect", "(", "gray", ")", "\n", "if", "not", "dense_desc", ":", "\n", "                    ", "sift_wrapper", ".", "build_pyramid", "(", "gray", ")", "\n", "patches", "=", "sift_wrapper", ".", "get_patches", "(", "cv_kpts", ")", "\n", "", "else", ":", "\n", "                    ", "patches", "=", "None", "\n", "", "", "else", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "seq_name", ",", "(", "'%d'", "+", "self", ".", "suffix", "+", "'.pkl'", ")", "%", "img_idx", ")", ",", "'rb'", ")", "as", "handle", ":", "\n", "                    ", "data_dict", "=", "pickle", ".", "load", "(", "handle", ",", "encoding", "=", "'latin1'", ")", "\n", "", "npy_kpts", "=", "data_dict", "[", "'npy_kpts'", "]", "\n", "if", "not", "dense_desc", ":", "\n", "                    ", "patches", "=", "data_dict", "[", "'patches'", "]", "\n", "", "else", ":", "\n", "                    ", "patches", "=", "None", "\n", "\n", "", "", "kpt_num", "=", "npy_kpts", ".", "shape", "[", "0", "]", "\n", "# compose affine crop matrix.", "\n", "crop_mat", "=", "np", ".", "zeros", "(", "(", "kpt_num", ",", "6", ")", ")", "\n", "# rely on the SIFT orientation estimation.", "\n", "m_cos", "=", "np", ".", "cos", "(", "-", "npy_kpts", "[", ":", ",", "3", "]", ")", "*", "self", ".", "patch_scale", "*", "npy_kpts", "[", ":", ",", "2", "]", "\n", "m_sin", "=", "np", ".", "sin", "(", "-", "npy_kpts", "[", ":", ",", "3", "]", ")", "*", "self", ".", "patch_scale", "*", "npy_kpts", "[", ":", ",", "2", "]", "\n", "crop_mat", "[", ":", ",", "0", "]", "=", "m_cos", "/", "float", "(", "img_size", "[", "1", "]", ")", "\n", "crop_mat", "[", ":", ",", "1", "]", "=", "m_sin", "/", "float", "(", "img_size", "[", "1", "]", ")", "\n", "crop_mat", "[", ":", ",", "2", "]", "=", "(", "npy_kpts", "[", ":", ",", "0", "]", "-", "img_size", "[", "1", "]", "/", "2.", ")", "/", "(", "img_size", "[", "1", "]", "/", "2.", ")", "\n", "crop_mat", "[", ":", ",", "3", "]", "=", "-", "m_sin", "/", "float", "(", "img_size", "[", "0", "]", ")", "\n", "crop_mat", "[", ":", ",", "4", "]", "=", "m_cos", "/", "float", "(", "img_size", "[", "0", "]", ")", "\n", "crop_mat", "[", ":", ",", "5", "]", "=", "(", "npy_kpts", "[", ":", ",", "1", "]", "-", "img_size", "[", "0", "]", "/", "2.", ")", "/", "(", "img_size", "[", "0", "]", "/", "2.", ")", "\n", "npy_kpts", "=", "npy_kpts", "[", ":", ",", "0", ":", "2", "]", "\n", "\n", "# read homography matrix.", "\n", "if", "img_idx", ">", "1", ":", "\n", "                ", "homo_mat", "=", "open", "(", "os", ".", "path", ".", "join", "(", "seq_name", ",", "'H_1_%d'", "%", "img_idx", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "homo_mat", "=", "np", ".", "array", "(", "[", "float", "(", "i", ")", "for", "i", "in", "' '", ".", "join", "(", "homo_mat", ")", ".", "split", "(", ")", "]", ")", "\n", "homo_mat", "=", "np", ".", "reshape", "(", "homo_mat", ",", "(", "3", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "homo_mat", "=", "None", "\n", "\n", "", "hseq_data", ".", "img", ".", "append", "(", "img", ")", "\n", "hseq_data", ".", "kpt_param", ".", "append", "(", "crop_mat", ")", "\n", "hseq_data", ".", "patch", ".", "append", "(", "patches", ")", "\n", "hseq_data", ".", "coord", ".", "append", "(", "npy_kpts", ")", "\n", "hseq_data", ".", "homo", ".", "append", "(", "homo_mat", ")", "\n", "hseq_data", ".", "img_feat", ".", "append", "(", "img_feat", ")", "\n", "\n", "", "return", "seq_name", ",", "hseq_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.tf.load_frozen_model": [[12, 39], ["os.path.exists", "print", "exit", "tensorflow.io.gfile.GFile", "tensorflow.compat.v1.GraphDef", "tf.compat.v1.GraphDef.ParseFromString", "tensorflow.Graph().as_default", "tensorflow.import_graph_def", "f.read", "graph.get_operations", "tensorflow.Graph", "print"], "function", ["None"], ["def", "load_frozen_model", "(", "pb_path", ",", "prefix", "=", "''", ",", "print_nodes", "=", "False", ")", ":", "\n", "    ", "\"\"\"Load frozen model (.pb file) for testing.\n    After restoring the model, operators can be accessed by\n    graph.get_tensor_by_name('<prefix>/<op_name>')\n    Args:\n        pb_path: the path of frozen model.\n        prefix: prefix added to the operator name.\n        print_nodes: whether to print node names.\n    Returns:\n        graph: tensorflow graph definition.\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "pb_path", ")", ":", "\n", "        ", "with", "tf", ".", "io", ".", "gfile", ".", "GFile", "(", "pb_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "graph_def", "=", "tf", ".", "compat", ".", "v1", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "graph", ":", "\n", "            ", "tf", ".", "import_graph_def", "(", "\n", "graph_def", ",", "\n", "name", "=", "prefix", "\n", ")", "\n", "if", "print_nodes", ":", "\n", "                ", "for", "op", "in", "graph", ".", "get_operations", "(", ")", ":", "\n", "                    ", "print", "(", "op", ".", "name", ")", "\n", "", "", "return", "graph", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'Model file does not exist'", ",", "pb_path", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.tf.recoverer": [[41, 56], ["tf.train.import_meta_graph.restore", "tensorflow.compat.v1.global_variables", "tensorflow.compat.v1.train.Saver", "tensorflow.train.import_meta_graph"], "function", ["None"], ["", "", "def", "recoverer", "(", "sess", ",", "model_path", ",", "meta_graph_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Recovery parameters from a pretrained model.\n    Args:\n        sess: The tensorflow session instance.\n        model_path: Checkpoint file path.\n    Returns:\n        Nothing\n    \"\"\"", "\n", "if", "meta_graph_path", "is", "None", ":", "\n", "        ", "restore_var", "=", "tf", ".", "compat", ".", "v1", ".", "global_variables", "(", ")", "\n", "restorer", "=", "tf", ".", "compat", ".", "v1", ".", "train", ".", "Saver", "(", "restore_var", ")", "\n", "", "else", ":", "\n", "        ", "restorer", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "meta_graph_path", ")", "\n", "", "restorer", ".", "restore", "(", "sess", ",", "model_path", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.spatial_transformer._meshgrid": [[20, 38], ["tensorflow.variable_scope", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.ones_like", "tensorflow.concat", "tensorflow.ones", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.ones", "tensorflow.expand_dims", "tensorflow.linspace", "tensorflow.stack", "tensorflow.linspace", "tensorflow.stack"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.concat"], ["def", "_meshgrid", "(", "height", ",", "width", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'_meshgrid'", ")", ":", "\n", "# This should be equivalent to:", "\n", "#  x_t, y_t = np.meshgrid(np.linspace(-1, 1, width),", "\n", "#                         np.linspace(-1, 1, height))", "\n", "#  ones = np.ones(np.prod(x_t.shape))", "\n", "#  grid = np.vstack([x_t.flatten(), y_t.flatten(), ones])", "\n", "        ", "x_t", "=", "tf", ".", "matmul", "(", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "height", ",", "1", "]", ")", ")", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "expand_dims", "(", "tf", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "width", ")", ",", "1", ")", ",", "[", "1", ",", "0", "]", ")", ")", "\n", "y_t", "=", "tf", ".", "matmul", "(", "tf", ".", "expand_dims", "(", "tf", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "height", ")", ",", "1", ")", ",", "\n", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "1", ",", "width", "]", ")", ")", ")", "\n", "\n", "x_t_flat", "=", "tf", ".", "reshape", "(", "x_t", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "y_t_flat", "=", "tf", ".", "reshape", "(", "y_t", ",", "(", "1", ",", "-", "1", ")", ")", "\n", "\n", "ones", "=", "tf", ".", "ones_like", "(", "x_t_flat", ")", "\n", "grid", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "x_t_flat", ",", "y_t_flat", ",", "ones", "]", ")", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.spatial_transformer.locate_pts": [[40, 130], ["tensorflow.variable_scope", "spatial_transformer.locate_pts._transform"], "function", ["None"], ["", "", "def", "locate_pts", "(", "U", ",", "xy", ",", "stack_batch", ",", "name", "=", "'LocateXY'", ")", ":", "\n", "    ", "\"\"\"\n    Sample points by bilinear interpolation given 2d-coordinates.\n    Args:\n        U: BxHxWxC\n        theta: BxNx2\n    Returns:\n        output: (BxN)xC\n    \"\"\"", "\n", "def", "_interpolate", "(", "im", ",", "x", ",", "y", ",", "num_kpt", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'_interpolate'", ")", ":", "\n", "# constants", "\n", "            ", "num_batch", "=", "tf", ".", "shape", "(", "im", ")", "[", "0", "]", "\n", "height", "=", "tf", ".", "shape", "(", "im", ")", "[", "1", "]", "\n", "width", "=", "tf", ".", "shape", "(", "im", ")", "[", "2", "]", "\n", "channels", "=", "im", ".", "get_shape", "(", ")", "[", "3", "]", "\n", "\n", "x", "=", "tf", ".", "cast", "(", "x", ",", "'float32'", ")", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "'float32'", ")", "\n", "height_f", "=", "tf", ".", "cast", "(", "height", ",", "'float32'", ")", "\n", "width_f", "=", "tf", ".", "cast", "(", "width", ",", "'float32'", ")", "\n", "zero", "=", "tf", ".", "zeros", "(", "[", "]", ",", "dtype", "=", "'int32'", ")", "\n", "max_y", "=", "tf", ".", "cast", "(", "height", "-", "1", ",", "'int32'", ")", "\n", "max_x", "=", "tf", ".", "cast", "(", "width", "-", "1", ",", "'int32'", ")", "\n", "\n", "# scale indices from [-1, 1] to [0, width/height]", "\n", "x", "=", "(", "x", "+", "1.0", ")", "*", "(", "width_f", ")", "/", "2.0", "\n", "y", "=", "(", "y", "+", "1.0", ")", "*", "(", "height_f", ")", "/", "2.0", "\n", "\n", "# do sampling", "\n", "x_0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "x", ")", ",", "'int32'", ")", "\n", "x_1", "=", "x_0", "+", "1", "\n", "y_0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "y", ")", ",", "'int32'", ")", "\n", "y_1", "=", "y_0", "+", "1", "\n", "\n", "x_0", "=", "tf", ".", "clip_by_value", "(", "x_0", ",", "zero", ",", "max_x", ")", "\n", "x_1", "=", "tf", ".", "clip_by_value", "(", "x_1", ",", "zero", ",", "max_x", ")", "\n", "y_0", "=", "tf", ".", "clip_by_value", "(", "y_0", ",", "zero", ",", "max_y", ")", "\n", "y_1", "=", "tf", ".", "clip_by_value", "(", "y_1", ",", "zero", ",", "max_y", ")", "\n", "dim2", "=", "width", "\n", "dim1", "=", "width", "*", "height", "\n", "base", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "num_batch", ")", "*", "dim1", ",", "1", ")", ",", "[", "1", ",", "num_kpt", "]", ")", "\n", "base", "=", "tf", ".", "reshape", "(", "base", ",", "[", "-", "1", "]", ")", "\n", "base_y0", "=", "base", "+", "y_0", "*", "dim2", "\n", "base_y1", "=", "base", "+", "y_1", "*", "dim2", "\n", "idx_a", "=", "base_y0", "+", "x_0", "\n", "idx_b", "=", "base_y1", "+", "x_0", "\n", "idx_c", "=", "base_y0", "+", "x_1", "\n", "idx_d", "=", "base_y1", "+", "x_1", "\n", "\n", "# use indices to lookup pixels in the flat image and restore", "\n", "# channels dim", "\n", "im_flat", "=", "tf", ".", "reshape", "(", "im", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "channels", "]", ")", ")", "\n", "im_flat", "=", "tf", ".", "cast", "(", "im_flat", ",", "'float32'", ")", "\n", "Ia", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_a", ")", "\n", "Ib", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_b", ")", "\n", "Ic", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_c", ")", "\n", "Id", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_d", ")", "\n", "\n", "# and finally calculate interpolated values", "\n", "x0_f", "=", "tf", ".", "cast", "(", "x_0", ",", "'float32'", ")", "\n", "x1_f", "=", "tf", ".", "cast", "(", "x_1", ",", "'float32'", ")", "\n", "y0_f", "=", "tf", ".", "cast", "(", "y_0", ",", "'float32'", ")", "\n", "y1_f", "=", "tf", ".", "cast", "(", "y_1", ",", "'float32'", ")", "\n", "wa", "=", "tf", ".", "expand_dims", "(", "(", "(", "x1_f", "-", "x", ")", "*", "(", "y1_f", "-", "y", ")", ")", ",", "1", ")", "\n", "wb", "=", "tf", ".", "expand_dims", "(", "(", "(", "x1_f", "-", "x", ")", "*", "(", "y", "-", "y0_f", ")", ")", ",", "1", ")", "\n", "wc", "=", "tf", ".", "expand_dims", "(", "(", "(", "x", "-", "x0_f", ")", "*", "(", "y1_f", "-", "y", ")", ")", ",", "1", ")", "\n", "wd", "=", "tf", ".", "expand_dims", "(", "(", "(", "x", "-", "x0_f", ")", "*", "(", "y", "-", "y0_f", ")", ")", ",", "1", ")", "\n", "output", "=", "tf", ".", "add_n", "(", "[", "wa", "*", "Ia", ",", "wb", "*", "Ib", ",", "wc", "*", "Ic", ",", "wd", "*", "Id", "]", ")", "\n", "return", "output", "\n", "\n", "", "", "def", "_transform", "(", "xy", ",", "input_dim", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'_transform'", ")", ":", "\n", "            ", "num_batch", "=", "tf", ".", "shape", "(", "xy", ")", "[", "0", "]", "\n", "num_kpt", "=", "tf", ".", "shape", "(", "xy", ")", "[", "1", "]", "\n", "num_channels", "=", "input_dim", ".", "get_shape", "(", ")", "[", "3", "]", "\n", "xy", "=", "tf", ".", "reshape", "(", "xy", ",", "(", "-", "1", ",", "2", ")", ")", "\n", "xy", "=", "tf", ".", "cast", "(", "xy", ",", "'float32'", ")", "\n", "x_s_flat", "=", "xy", "[", ":", ",", "0", "]", "\n", "y_s_flat", "=", "xy", "[", ":", ",", "1", "]", "\n", "input_transformed", "=", "_interpolate", "(", "input_dim", ",", "x_s_flat", ",", "y_s_flat", ",", "num_kpt", ")", "\n", "if", "stack_batch", ":", "\n", "                ", "output", "=", "tf", ".", "reshape", "(", "input_transformed", ",", "tf", ".", "stack", "(", "\n", "[", "num_batch", "*", "num_kpt", ",", "num_channels", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "tf", ".", "reshape", "(", "input_transformed", ",", "tf", ".", "stack", "(", "[", "num_batch", ",", "num_kpt", ",", "num_channels", "]", ")", ")", "\n", "", "return", "output", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "output", "=", "_transform", "(", "xy", ",", "U", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.spatial_transformer.transformer_crop": [[132, 239], ["tensorflow.variable_scope", "spatial_transformer.locate_pts._transform"], "function", ["None"], ["", "", "def", "transformer_crop", "(", "U", ",", "theta", ",", "out_size", ",", "stack_batch", ",", "name", "=", "'SpatialTransformer'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        U: BxHxWxC\n        theta: BxNx2x3\n    Returns:\n        output: (BxN)x(out_size)xC\n    \"\"\"", "\n", "def", "_interpolate", "(", "im", ",", "x", ",", "y", ",", "num_kpt", ",", "out_size", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'_interpolate'", ")", ":", "\n", "# constants", "\n", "            ", "num_batch", "=", "tf", ".", "shape", "(", "im", ")", "[", "0", "]", "\n", "height", "=", "tf", ".", "shape", "(", "im", ")", "[", "1", "]", "\n", "width", "=", "tf", ".", "shape", "(", "im", ")", "[", "2", "]", "\n", "channels", "=", "im", ".", "get_shape", "(", ")", "[", "3", "]", "\n", "\n", "x", "=", "tf", ".", "cast", "(", "x", ",", "'float32'", ")", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "'float32'", ")", "\n", "height_f", "=", "tf", ".", "cast", "(", "height", ",", "'float32'", ")", "\n", "width_f", "=", "tf", ".", "cast", "(", "width", ",", "'float32'", ")", "\n", "out_height", "=", "out_size", "[", "0", "]", "\n", "out_width", "=", "out_size", "[", "1", "]", "\n", "zero", "=", "tf", ".", "zeros", "(", "[", "]", ",", "dtype", "=", "'int32'", ")", "\n", "max_y", "=", "tf", ".", "cast", "(", "height", "-", "1", ",", "'int32'", ")", "\n", "max_x", "=", "tf", ".", "cast", "(", "width", "-", "1", ",", "'int32'", ")", "\n", "\n", "# scale indices from [-1, 1] to [0, width/height]", "\n", "x", "=", "(", "x", "+", "1.0", ")", "*", "(", "width_f", ")", "/", "2.0", "\n", "y", "=", "(", "y", "+", "1.0", ")", "*", "(", "height_f", ")", "/", "2.0", "\n", "\n", "# do sampling", "\n", "x_0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "x", ")", ",", "'int32'", ")", "\n", "x_1", "=", "x_0", "+", "1", "\n", "y_0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "y", ")", ",", "'int32'", ")", "\n", "y_1", "=", "y_0", "+", "1", "\n", "\n", "x_0", "=", "tf", ".", "clip_by_value", "(", "x_0", ",", "zero", ",", "max_x", ")", "\n", "x_1", "=", "tf", ".", "clip_by_value", "(", "x_1", ",", "zero", ",", "max_x", ")", "\n", "y_0", "=", "tf", ".", "clip_by_value", "(", "y_0", ",", "zero", ",", "max_y", ")", "\n", "y_1", "=", "tf", ".", "clip_by_value", "(", "y_1", ",", "zero", ",", "max_y", ")", "\n", "dim2", "=", "width", "\n", "dim1", "=", "width", "*", "height", "\n", "base", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "num_batch", ")", "*", "dim1", ",", "1", ")", ",", "\n", "[", "1", ",", "num_kpt", "*", "out_height", "*", "out_width", "]", ")", "\n", "base", "=", "tf", ".", "reshape", "(", "base", ",", "[", "-", "1", "]", ")", "\n", "base_y0", "=", "base", "+", "y_0", "*", "dim2", "\n", "base_y1", "=", "base", "+", "y_1", "*", "dim2", "\n", "idx_a", "=", "base_y0", "+", "x_0", "\n", "idx_b", "=", "base_y1", "+", "x_0", "\n", "idx_c", "=", "base_y0", "+", "x_1", "\n", "idx_d", "=", "base_y1", "+", "x_1", "\n", "\n", "# use indices to lookup pixels in the flat image and restore", "\n", "# channels dim", "\n", "im_flat", "=", "tf", ".", "reshape", "(", "im", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "channels", "]", ")", ")", "\n", "im_flat", "=", "tf", ".", "cast", "(", "im_flat", ",", "'float32'", ")", "\n", "Ia", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_a", ")", "\n", "Ib", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_b", ")", "\n", "Ic", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_c", ")", "\n", "Id", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_d", ")", "\n", "\n", "# and finally calculate interpolated values", "\n", "x0_f", "=", "tf", ".", "cast", "(", "x_0", ",", "'float32'", ")", "\n", "x1_f", "=", "tf", ".", "cast", "(", "x_1", ",", "'float32'", ")", "\n", "y0_f", "=", "tf", ".", "cast", "(", "y_0", ",", "'float32'", ")", "\n", "y1_f", "=", "tf", ".", "cast", "(", "y_1", ",", "'float32'", ")", "\n", "wa", "=", "tf", ".", "expand_dims", "(", "(", "(", "x1_f", "-", "x", ")", "*", "(", "y1_f", "-", "y", ")", ")", ",", "1", ")", "\n", "wb", "=", "tf", ".", "expand_dims", "(", "(", "(", "x1_f", "-", "x", ")", "*", "(", "y", "-", "y0_f", ")", ")", ",", "1", ")", "\n", "wc", "=", "tf", ".", "expand_dims", "(", "(", "(", "x", "-", "x0_f", ")", "*", "(", "y1_f", "-", "y", ")", ")", ",", "1", ")", "\n", "wd", "=", "tf", ".", "expand_dims", "(", "(", "(", "x", "-", "x0_f", ")", "*", "(", "y", "-", "y0_f", ")", ")", ",", "1", ")", "\n", "output", "=", "tf", ".", "add_n", "(", "[", "wa", "*", "Ia", ",", "wb", "*", "Ib", ",", "wc", "*", "Ic", ",", "wd", "*", "Id", "]", ")", "\n", "return", "output", "\n", "\n", "", "", "def", "_transform", "(", "theta", ",", "input_dim", ",", "out_size", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'_transform'", ")", ":", "\n", "            ", "num_batch", "=", "tf", ".", "shape", "(", "theta", ")", "[", "0", "]", "\n", "num_kpt", "=", "tf", ".", "shape", "(", "theta", ")", "[", "1", "]", "\n", "num_channels", "=", "input_dim", ".", "get_shape", "(", ")", "[", "3", "]", "\n", "theta", "=", "tf", ".", "reshape", "(", "theta", ",", "(", "-", "1", ",", "2", ",", "3", ")", ")", "\n", "theta", "=", "tf", ".", "cast", "(", "theta", ",", "'float32'", ")", "\n", "\n", "# grid of (x_t, y_t, 1), eq (1) in ref [1]", "\n", "out_height", "=", "out_size", "[", "0", "]", "\n", "out_width", "=", "out_size", "[", "1", "]", "\n", "grid", "=", "_meshgrid", "(", "out_height", ",", "out_width", ")", "\n", "grid", "=", "tf", ".", "reshape", "(", "grid", ",", "[", "-", "1", "]", ")", "\n", "grid", "=", "tf", ".", "tile", "(", "grid", ",", "tf", ".", "stack", "(", "[", "num_batch", "*", "num_kpt", "]", ")", ")", "\n", "grid", "=", "tf", ".", "reshape", "(", "grid", ",", "tf", ".", "stack", "(", "[", "num_batch", "*", "num_kpt", ",", "3", ",", "-", "1", "]", ")", ")", "\n", "# Transform A x (x_t, y_t, 1)^T -> (x_s, y_s)", "\n", "t_g", "=", "tf", ".", "matmul", "(", "theta", ",", "grid", ")", "# [BxN, 3, 3] * [BxN, 3, H*W]", "\n", "x_s", "=", "tf", ".", "slice", "(", "t_g", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "y_s", "=", "tf", ".", "slice", "(", "t_g", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "x_s_flat", "=", "tf", ".", "reshape", "(", "x_s", ",", "[", "-", "1", "]", ")", "\n", "y_s_flat", "=", "tf", ".", "reshape", "(", "y_s", ",", "[", "-", "1", "]", ")", "\n", "\n", "input_transformed", "=", "_interpolate", "(", "input_dim", ",", "x_s_flat", ",", "y_s_flat", ",", "num_kpt", ",", "out_size", ")", "\n", "\n", "if", "stack_batch", ":", "\n", "                ", "output", "=", "tf", ".", "reshape", "(", "\n", "input_transformed", ",", "tf", ".", "stack", "(", "[", "num_batch", "*", "num_kpt", ",", "out_height", ",", "out_width", ",", "num_channels", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "tf", ".", "reshape", "(", "\n", "input_transformed", ",", "tf", ".", "stack", "(", "[", "num_batch", ",", "num_kpt", ",", "out_height", ",", "out_width", ",", "num_channels", "]", ")", ")", "\n", "", "return", "output", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "output", "=", "_transform", "(", "theta", ",", "U", ",", "out_size", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.spatial_transformer.transformer": [[241, 380], ["tensorflow.variable_scope", "spatial_transformer.locate_pts._transform"], "function", ["None"], ["", "", "def", "transformer", "(", "U", ",", "theta", ",", "out_size", ",", "name", "=", "'SpatialTransformer'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Spatial Transformer Layer\n\n    Implements a spatial transformer layer as described in [1]_.\n    Based on [2]_ and edited by David Dao for Tensorflow.\n\n    Parameters\n    ----------\n    U : float\n        The output of a convolutional net should have the\n        shape [num_batch, height, width, num_channels].\n    theta: float\n        The output of the\n        localisation network should be [num_batch, 6].\n    out_size: tuple of two ints\n        The size of the output of the network (height, width)\n\n    References\n    ----------\n    .. [1]  Spatial Transformer Networks\n            Max Jaderberg, Karen Simonyan, Andrew Zisserman, Koray Kavukcuoglu\n            Submitted on 5 Jun 2015\n    .. [2]  https://github.coT_gm/skaae/transformer_network/blob/master/transformerlayer.py\n\n    Notes\n    -----\n    To initialize the network to the identity transform init\n    ``theta`` to :\n        identity = np.array([[1., 0., 0.],\n                             [0., 1., 0.]])\n        identity = identity.flatten()\n        theta = tf.Variable(initial_value=identity)\n\n    \"\"\"", "\n", "\n", "def", "_repeat", "(", "x", ",", "n_repeats", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'_repeat'", ")", ":", "\n", "            ", "rep", "=", "tf", ".", "transpose", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "n_repeats", ",", "]", ")", ")", ",", "1", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "rep", "=", "tf", ".", "cast", "(", "rep", ",", "'int32'", ")", "\n", "x", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "1", ")", ")", ",", "rep", ")", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "\n", "\n", "", "", "def", "_interpolate", "(", "im", ",", "x", ",", "y", ",", "out_size", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'_interpolate'", ")", ":", "\n", "# constants", "\n", "            ", "num_batch", "=", "tf", ".", "shape", "(", "im", ")", "[", "0", "]", "\n", "height", "=", "im", ".", "get_shape", "(", ")", "[", "1", "]", "\n", "width", "=", "im", ".", "get_shape", "(", ")", "[", "2", "]", "\n", "channels", "=", "im", ".", "get_shape", "(", ")", "[", "3", "]", "\n", "\n", "x", "=", "tf", ".", "cast", "(", "x", ",", "'float32'", ")", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "'float32'", ")", "\n", "height_f", "=", "tf", ".", "cast", "(", "height", ",", "'float32'", ")", "\n", "width_f", "=", "tf", ".", "cast", "(", "width", ",", "'float32'", ")", "\n", "out_height", "=", "out_size", "[", "0", "]", "\n", "out_width", "=", "out_size", "[", "1", "]", "\n", "zero", "=", "tf", ".", "zeros", "(", "[", "]", ",", "dtype", "=", "'int32'", ")", "\n", "max_y", "=", "tf", ".", "cast", "(", "im", ".", "get_shape", "(", ")", "[", "1", "]", "-", "1", ",", "'int32'", ")", "\n", "max_x", "=", "tf", ".", "cast", "(", "im", ".", "get_shape", "(", ")", "[", "2", "]", "-", "1", ",", "'int32'", ")", "\n", "\n", "# scale indices from [-1, 1] to [0, width/height]", "\n", "x", "=", "(", "x", "+", "1.0", ")", "*", "(", "width_f", ")", "/", "2.0", "\n", "y", "=", "(", "y", "+", "1.0", ")", "*", "(", "height_f", ")", "/", "2.0", "\n", "\n", "# do sampling", "\n", "x_0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "x", ")", ",", "'int32'", ")", "\n", "x_1", "=", "x_0", "+", "1", "\n", "y_0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "y", ")", ",", "'int32'", ")", "\n", "y_1", "=", "y_0", "+", "1", "\n", "\n", "x_0", "=", "tf", ".", "clip_by_value", "(", "x_0", ",", "zero", ",", "max_x", ")", "\n", "x_1", "=", "tf", ".", "clip_by_value", "(", "x_1", ",", "zero", ",", "max_x", ")", "\n", "y_0", "=", "tf", ".", "clip_by_value", "(", "y_0", ",", "zero", ",", "max_y", ")", "\n", "y_1", "=", "tf", ".", "clip_by_value", "(", "y_1", ",", "zero", ",", "max_y", ")", "\n", "dim2", "=", "width", "\n", "dim1", "=", "width", "*", "height", "\n", "base", "=", "_repeat", "(", "tf", ".", "range", "(", "num_batch", ")", "*", "dim1", ",", "out_height", "*", "out_width", ")", "\n", "base_y0", "=", "base", "+", "y_0", "*", "dim2", "\n", "base_y1", "=", "base", "+", "y_1", "*", "dim2", "\n", "idx_a", "=", "base_y0", "+", "x_0", "\n", "idx_b", "=", "base_y1", "+", "x_0", "\n", "idx_c", "=", "base_y0", "+", "x_1", "\n", "idx_d", "=", "base_y1", "+", "x_1", "\n", "\n", "# use indices to lookup pixels in the flat image and restore", "\n", "# channels dim", "\n", "im_flat", "=", "tf", ".", "reshape", "(", "im", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "channels", "]", ")", ")", "\n", "im_flat", "=", "tf", ".", "cast", "(", "im_flat", ",", "'float32'", ")", "\n", "Ia", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_a", ")", "\n", "Ib", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_b", ")", "\n", "Ic", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_c", ")", "\n", "Id", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_d", ")", "\n", "\n", "# and finally calculate interpolated values", "\n", "x0_f", "=", "tf", ".", "cast", "(", "x_0", ",", "'float32'", ")", "\n", "x1_f", "=", "tf", ".", "cast", "(", "x_1", ",", "'float32'", ")", "\n", "y0_f", "=", "tf", ".", "cast", "(", "y_0", ",", "'float32'", ")", "\n", "y1_f", "=", "tf", ".", "cast", "(", "y_1", ",", "'float32'", ")", "\n", "wa", "=", "tf", ".", "expand_dims", "(", "(", "(", "x1_f", "-", "x", ")", "*", "(", "y1_f", "-", "y", ")", ")", ",", "1", ")", "\n", "wb", "=", "tf", ".", "expand_dims", "(", "(", "(", "x1_f", "-", "x", ")", "*", "(", "y", "-", "y0_f", ")", ")", ",", "1", ")", "\n", "wc", "=", "tf", ".", "expand_dims", "(", "(", "(", "x", "-", "x0_f", ")", "*", "(", "y1_f", "-", "y", ")", ")", ",", "1", ")", "\n", "wd", "=", "tf", ".", "expand_dims", "(", "(", "(", "x", "-", "x0_f", ")", "*", "(", "y", "-", "y0_f", ")", ")", ",", "1", ")", "\n", "output", "=", "tf", ".", "add_n", "(", "[", "wa", "*", "Ia", ",", "wb", "*", "Ib", ",", "wc", "*", "Ic", ",", "wd", "*", "Id", "]", ")", "\n", "return", "output", "\n", "\n", "", "", "def", "_transform", "(", "theta", ",", "input_dim", ",", "out_size", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'_transform'", ")", ":", "\n", "            ", "num_batch", "=", "tf", ".", "shape", "(", "input_dim", ")", "[", "0", "]", "\n", "num_channels", "=", "input_dim", ".", "get_shape", "(", ")", "[", "3", "]", "\n", "theta", "=", "tf", ".", "reshape", "(", "theta", ",", "(", "-", "1", ",", "2", ",", "3", ")", ")", "\n", "theta", "=", "tf", ".", "cast", "(", "theta", ",", "'float32'", ")", "\n", "\n", "# grid of (x_t, y_t, 1), eq (1) in ref [1]", "\n", "out_height", "=", "out_size", "[", "0", "]", "\n", "out_width", "=", "out_size", "[", "1", "]", "\n", "grid", "=", "_meshgrid", "(", "out_height", ",", "out_width", ")", "\n", "grid", "=", "tf", ".", "expand_dims", "(", "grid", ",", "0", ")", "\n", "grid", "=", "tf", ".", "reshape", "(", "grid", ",", "[", "-", "1", "]", ")", "\n", "grid", "=", "tf", ".", "tile", "(", "grid", ",", "tf", ".", "stack", "(", "[", "num_batch", "]", ")", ")", "\n", "grid", "=", "tf", ".", "reshape", "(", "grid", ",", "tf", ".", "stack", "(", "[", "num_batch", ",", "3", ",", "-", "1", "]", ")", ")", "\n", "\n", "# Transform A x (x_t, y_t, 1)^T -> (x_s, y_s)", "\n", "t_g", "=", "tf", ".", "matmul", "(", "theta", ",", "grid", ")", "\n", "x_s", "=", "tf", ".", "slice", "(", "t_g", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "y_s", "=", "tf", ".", "slice", "(", "t_g", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "x_s_flat", "=", "tf", ".", "reshape", "(", "x_s", ",", "[", "-", "1", "]", ")", "\n", "y_s_flat", "=", "tf", ".", "reshape", "(", "y_s", ",", "[", "-", "1", "]", ")", "\n", "\n", "input_transformed", "=", "_interpolate", "(", "\n", "input_dim", ",", "x_s_flat", ",", "y_s_flat", ",", "\n", "out_size", ")", "\n", "\n", "output", "=", "tf", ".", "reshape", "(", "\n", "input_transformed", ",", "tf", ".", "stack", "(", "[", "num_batch", ",", "out_height", ",", "out_width", ",", "num_channels", "]", ")", ")", "\n", "return", "output", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "output", "=", "_transform", "(", "theta", ",", "U", ",", "out_size", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.spatial_transformer.batch_transformer": [[382, 406], ["tensorflow.variable_scope", "map", "tensorflow.gather", "spatial_transformer.transformer", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "len", "len", "tf.expand_dims.get_shape().as_list", "xrange", "tf.expand_dims.get_shape", "tf.expand_dims.get_shape", "tf.expand_dims.get_shape"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.spatial_transformer.transformer", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape"], ["", "", "def", "batch_transformer", "(", "U", ",", "thetas", ",", "out_size", ",", "name", "=", "'BatchSpatialTransformer'", ")", ":", "\n", "    ", "\"\"\"Batch Spatial Transformer Layer\n\n    Parameters\n    ----------\n\n    U : float\n        tensor of inputs [num_batch,height,width,num_channels]\n    thetas : float\n        a set of transformations for each input [num_batch,num_transforms,6]\n    out_size : int\n        the size of the output [out_height,out_width]\n\n    Returns: float\n        Tensor of size [num_batch*num_transforms,out_height,out_width,num_channels]\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "if", "len", "(", "U", ".", "get_shape", "(", ")", ")", "==", "3", "and", "len", "(", "thetas", ".", "get_shape", "(", ")", ")", "==", "3", ":", "\n", "            ", "U", "=", "tf", ".", "expand_dims", "(", "U", ",", "axis", "=", "0", ")", "\n", "thetas", "=", "tf", ".", "expand_dims", "(", "thetas", ",", "axis", "=", "0", ")", "\n", "", "num_batch", ",", "num_transforms", "=", "map", "(", "int", ",", "thetas", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", ":", "2", "]", ")", "\n", "indices", "=", "[", "[", "i", "]", "*", "num_transforms", "for", "i", "in", "xrange", "(", "num_batch", ")", "]", "\n", "input_U", "=", "tf", ".", "gather", "(", "U", ",", "tf", ".", "reshape", "(", "indices", ",", "[", "-", "1", "]", ")", ")", "\n", "return", "transformer", "(", "input_U", ",", "thetas", ",", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.__init__": [[7, 15], ["evaluator.Evaluator.bf_matcher_graph"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.bf_matcher_graph"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "mutual_check", "=", "False", "\n", "self", ".", "err_thld", "=", "config", "[", "'err_thld'", "]", "\n", "self", ".", "matches", "=", "self", ".", "bf_matcher_graph", "(", ")", "\n", "self", ".", "stats", "=", "{", "\n", "'i_avg_recall'", ":", "0", ",", "\n", "'v_avg_recall'", ":", "0", ",", "\n", "'all_avg_recall'", ":", "0", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.homo_trans": [[17, 24], ["numpy.concatenate", "numpy.matmul", "numpy.ones"], "methods", ["None"], ["", "def", "homo_trans", "(", "self", ",", "coord", ",", "H", ")", ":", "\n", "        ", "kpt_num", "=", "coord", ".", "shape", "[", "0", "]", "\n", "homo_coord", "=", "np", ".", "concatenate", "(", "(", "coord", ",", "np", ".", "ones", "(", "(", "kpt_num", ",", "1", ")", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "proj_coord", "=", "np", ".", "matmul", "(", "H", ",", "homo_coord", ".", "T", ")", ".", "T", "\n", "proj_coord", "=", "proj_coord", "/", "proj_coord", "[", ":", ",", "2", "]", "[", "...", ",", "None", "]", "\n", "proj_coord", "=", "proj_coord", "[", ":", ",", "0", ":", "2", "]", "\n", "return", "proj_coord", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.bf_matcher_graph": [[25, 38], ["tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.linalg.matmul", "tensorflow.range", "tensorflow.math.argmax", "tensorflow.math.argmax", "tensorflow.equal", "tensorflow.stack", "tensorflow.stack", "tensorflow.shape", "tensorflow.gather", "tensorflow.boolean_mask", "tensorflow.boolean_mask"], "methods", ["None"], ["", "def", "bf_matcher_graph", "(", "self", ")", ":", "\n", "        ", "descriptors_a", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "None", ")", ",", "'descriptor_a'", ")", "\n", "descriptors_b", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "None", ")", ",", "'descriptor_b'", ")", "\n", "sim", "=", "tf", ".", "linalg", ".", "matmul", "(", "descriptors_a", ",", "descriptors_b", ",", "transpose_b", "=", "True", ")", "\n", "ids1", "=", "tf", ".", "range", "(", "0", ",", "tf", ".", "shape", "(", "sim", ")", "[", "0", "]", ")", "\n", "nn12", "=", "tf", ".", "math", ".", "argmax", "(", "sim", ",", "axis", "=", "1", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "if", "self", ".", "mutual_check", ":", "\n", "            ", "nn21", "=", "tf", ".", "math", ".", "argmax", "(", "sim", ",", "axis", "=", "0", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "mask", "=", "tf", ".", "equal", "(", "ids1", ",", "tf", ".", "gather", "(", "nn21", ",", "nn12", ")", ")", "\n", "matches", "=", "tf", ".", "stack", "(", "[", "tf", ".", "boolean_mask", "(", "ids1", ",", "mask", ")", ",", "tf", ".", "boolean_mask", "(", "nn12", ",", "mask", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "matches", "=", "tf", ".", "stack", "(", "[", "ids1", ",", "nn12", "]", ")", "\n", "", "return", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.mnn_matcher": [[39, 46], ["sess.run"], "methods", ["None"], ["", "def", "mnn_matcher", "(", "self", ",", "sess", ",", "descriptors_a", ",", "descriptors_b", ")", ":", "\n", "        ", "input_dict", "=", "{", "\n", "\"descriptor_a:0\"", ":", "descriptors_a", ",", "\n", "\"descriptor_b:0\"", ":", "descriptors_b", "\n", "}", "\n", "matches", "=", "sess", ".", "run", "(", "self", ".", "matches", ",", "input_dict", ")", "\n", "return", "matches", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.feature_matcher": [[47, 51], ["evaluator.Evaluator.mnn_matcher", "cv2.DMatch", "range"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.mnn_matcher"], ["", "def", "feature_matcher", "(", "self", ",", "sess", ",", "ref_feat", ",", "test_feat", ")", ":", "\n", "        ", "matches", "=", "self", ".", "mnn_matcher", "(", "sess", ",", "ref_feat", ",", "test_feat", ")", "\n", "matches", "=", "[", "cv2", ".", "DMatch", "(", "matches", "[", "i", "]", "[", "0", "]", ",", "matches", "[", "i", "]", "[", "1", "]", ",", "0", ")", "for", "i", "in", "range", "(", "matches", ".", "shape", "[", "0", "]", ")", "]", "\n", "return", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.get_inlier_matches": [[52, 61], ["evaluator.Evaluator.homo_trans", "numpy.sqrt", "numpy.float32", "numpy.float32", "numpy.sum", "numpy.square", "numpy.nonzero"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.homo_trans"], ["", "def", "get_inlier_matches", "(", "self", ",", "ref_coord", ",", "test_coord", ",", "putative_matches", ",", "gt_homo", ",", "scaling", "=", "1.", ")", ":", "\n", "        ", "p_ref_coord", "=", "np", ".", "float32", "(", "[", "ref_coord", "[", "m", ".", "queryIdx", "]", "for", "m", "in", "putative_matches", "]", ")", "/", "scaling", "\n", "p_test_coord", "=", "np", ".", "float32", "(", "[", "test_coord", "[", "m", ".", "trainIdx", "]", "for", "m", "in", "putative_matches", "]", ")", "/", "scaling", "\n", "\n", "proj_p_ref_coord", "=", "self", ".", "homo_trans", "(", "p_ref_coord", ",", "gt_homo", ")", "\n", "dist", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "proj_p_ref_coord", "-", "p_test_coord", "[", ":", ",", "0", ":", "2", "]", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "inlier_mask", "=", "dist", "<=", "self", ".", "err_thld", "\n", "inlier_matches", "=", "[", "putative_matches", "[", "z", "]", "for", "z", "in", "np", ".", "nonzero", "(", "inlier_mask", ")", "[", "0", "]", "]", "\n", "return", "inlier_matches", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.get_gt_matches": [[62, 73], ["evaluator.Evaluator.homo_trans", "numpy.expand_dims", "numpy.expand_dims", "numpy.linalg.norm", "numpy.min", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.evaluator.Evaluator.homo_trans"], ["", "def", "get_gt_matches", "(", "self", ",", "ref_coord", ",", "test_coord", ",", "gt_homo", ",", "scaling", "=", "1.", ")", ":", "\n", "        ", "ref_coord", "=", "ref_coord", "/", "scaling", "\n", "test_coord", "=", "test_coord", "/", "scaling", "\n", "proj_ref_coord", "=", "self", ".", "homo_trans", "(", "ref_coord", ",", "gt_homo", ")", "\n", "\n", "pt0", "=", "np", ".", "expand_dims", "(", "proj_ref_coord", ",", "axis", "=", "1", ")", "\n", "pt1", "=", "np", ".", "expand_dims", "(", "test_coord", ",", "axis", "=", "0", ")", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "pt0", "-", "pt1", ",", "ord", "=", "None", ",", "axis", "=", "2", ")", "\n", "min_dist", "=", "np", ".", "min", "(", "norm", ",", "axis", "=", "1", ")", "\n", "gt_num", "=", "np", ".", "sum", "(", "min_dist", "<=", "self", ".", "err_thld", ")", "\n", "return", "gt_num", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.eth.Eth._init_dataset": [[16, 54], ["print", "len", "os.path.join", "os.path.join", "os.path.join", "print", "eth.Eth.map", "os.path.join", "os.path.exists", "os.makedirs", "glob.glob", "img_paths.extend", "i.split", "os.path.splitext", "range", "os.path.join", "os.path.basename", "len"], "methods", ["None"], ["def", "_init_dataset", "(", "self", ",", "**", "config", ")", ":", "\n", "        ", "print", "(", "Notify", ".", "INFO", ",", "\"Initializing dataset:\"", ",", "config", "[", "'data_name'", "]", ",", "Notify", ".", "ENDC", ")", "\n", "base_path", "=", "config", "[", "'data_root'", "]", "\n", "suffix", "=", "self", ".", "config", "[", "'post_format'", "]", "[", "'suffix'", "]", "\n", "\n", "img_paths", "=", "[", "]", "\n", "dump_paths", "=", "[", "]", "\n", "\n", "data_split", "=", "config", "[", "'data_split'", "]", "\n", "\n", "types", "=", "(", "'*.jpg'", ",", "'*.png'", ",", "'*.JPG'", ",", "'*.PNG'", ")", "\n", "for", "seq", "in", "data_split", ":", "\n", "            ", "dump_folder", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'dump_root'", "]", ",", "seq", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_folder", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dump_folder", ")", "\n", "\n", "", "dataset_folder", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "seq", ")", "\n", "image_folder", "=", "os", ".", "path", ".", "join", "(", "dataset_folder", ",", "'images'", ")", "\n", "for", "filetype", "in", "types", ":", "\n", "                ", "image_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "image_folder", ",", "filetype", ")", ")", "\n", "img_paths", ".", "extend", "(", "image_list", ")", "\n", "\n", "", "", "if", "config", "[", "'truncate'", "]", "is", "not", "None", ":", "\n", "            ", "print", "(", "Notify", ".", "WARNING", ",", "\"Truncate from\"", ",", "\n", "config", "[", "'truncate'", "]", "[", "0", "]", ",", "\"to\"", ",", "config", "[", "'truncate'", "]", "[", "1", "]", ",", "Notify", ".", "ENDC", ")", "\n", "img_paths", "=", "img_paths", "[", "config", "[", "'truncate'", "]", "[", "0", "]", ":", "config", "[", "'truncate'", "]", "[", "1", "]", "]", "\n", "\n", "", "self", ".", "data_length", "=", "len", "(", "img_paths", ")", "\n", "tf", ".", "data", ".", "Dataset", ".", "map_parallel", "=", "lambda", "self", ",", "fn", ":", "self", ".", "map", "(", "\n", "fn", ",", "num_parallel_calls", "=", "config", "[", "'num_parallel_calls'", "]", ")", "\n", "\n", "seq_names", "=", "[", "i", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "for", "i", "in", "img_paths", "]", "\n", "img_names", "=", "[", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "i", ")", ")", "[", "0", "]", "for", "i", "in", "img_paths", "]", "\n", "dump_paths", "=", "[", "os", ".", "path", ".", "join", "(", "config", "[", "'dump_root'", "]", ",", "seq_names", "[", "i", "]", ",", "\n", "img_names", "[", "i", "]", "+", "'.h5'", ")", "for", "i", "in", "range", "(", "len", "(", "img_names", ")", ")", "]", "\n", "\n", "files", "=", "{", "'image_paths'", ":", "img_paths", ",", "'dump_paths'", ":", "dump_paths", "}", "\n", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.eth.Eth._format_data": [[55, 98], ["data[].decode", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "[].astype", "[].astype", "numpy.zeros_like", "numpy.concatenate", "numpy.stack().astype", "struct.pack", "numpy.stack().astype", "struct.pack", "struct.pack", "struct.pack", "data[].decode.split", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.basename", "os.path.basename", "open", "fout.write", "open", "fout.write", "numpy.stack", "numpy.stack", "struct.pack.flatten", "struct.pack.flatten", "fout.write", "fout.write", "data[].decode", "data[].decode"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.flatten", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.flatten"], ["", "def", "_format_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "dump_path", "=", "data", "[", "'dump_path'", "]", ".", "decode", "(", "'utf-8'", ")", "\n", "seq_name", "=", "dump_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "dataset_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "'submission_root'", "]", ",", "seq_name", ")", "\n", "dump_folder", "=", "os", ".", "path", ".", "join", "(", "dataset_folder", ",", "'reconstruction'", "+", "self", ".", "config", "[", "'post_format'", "]", "[", "'suffix'", "]", ")", "\n", "kpt_dump_folder", "=", "os", ".", "path", ".", "join", "(", "dump_folder", ",", "'keypoints'", ")", "\n", "desc_dump_folder", "=", "os", ".", "path", ".", "join", "(", "dump_folder", ",", "'descriptors'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "kpt_dump_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "kpt_dump_folder", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "desc_dump_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "desc_dump_folder", ")", "\n", "\n", "", "kpt_dump_path", "=", "os", ".", "path", ".", "join", "(", "kpt_dump_folder", ",", "os", ".", "path", ".", "basename", "(", "data", "[", "'image_path'", "]", ".", "decode", "(", "'utf-8'", ")", "+", "'.bin'", ")", ")", "\n", "desc_dump_path", "=", "os", ".", "path", ".", "join", "(", "desc_dump_folder", ",", "os", ".", "path", ".", "basename", "(", "data", "[", "'image_path'", "]", ".", "decode", "(", "'utf-8'", ")", "+", "'.bin'", ")", ")", "\n", "\n", "desc", "=", "data", "[", "'dump_data'", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "kpt", "=", "data", "[", "'dump_data'", "]", "[", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "zeros", "=", "np", ".", "zeros_like", "(", "kpt", ")", "\n", "kpt", "=", "np", ".", "concatenate", "(", "[", "kpt", ",", "zeros", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "num_features", "=", "desc", ".", "shape", "[", "0", "]", "\n", "loc_dim", "=", "kpt", ".", "shape", "[", "1", "]", "\n", "feat_dim", "=", "desc", ".", "shape", "[", "1", "]", "\n", "\n", "det_head", "=", "np", ".", "stack", "(", "(", "num_features", ",", "loc_dim", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "det_head", "=", "pack", "(", "'2i'", ",", "*", "det_head", ")", "\n", "\n", "desc_head", "=", "np", ".", "stack", "(", "(", "num_features", ",", "feat_dim", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "desc_head", "=", "pack", "(", "'2i'", ",", "*", "desc_head", ")", "\n", "\n", "kpt", "=", "pack", "(", "'f'", "*", "loc_dim", "*", "num_features", ",", "*", "(", "kpt", ".", "flatten", "(", ")", ")", ")", "\n", "desc", "=", "pack", "(", "'f'", "*", "feat_dim", "*", "num_features", ",", "*", "(", "desc", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "with", "open", "(", "kpt_dump_path", ",", "'wb'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "det_head", ")", "\n", "if", "num_features", ">", "0", ":", "\n", "                ", "fout", ".", "write", "(", "kpt", ")", "\n", "\n", "", "", "with", "open", "(", "desc_dump_path", ",", "'wb'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "desc_head", ")", "\n", "if", "num_features", ">", "0", ":", "\n", "                ", "fout", ".", "write", "(", "desc", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.oxford.Oxford._init_dataset": [[51, 83], ["print", "os.path.join", "len", "glob.glob", "img_paths.extend", "os.path.join", "oxford.Oxford.map", "print", "os.path.join", "os.path.exists", "os.makedirs", "dump_paths.append", "os.path.join", "os.path.splitext", "os.path.basename"], "methods", ["None"], ["def", "_init_dataset", "(", "self", ",", "**", "config", ")", ":", "\n", "        ", "print", "(", "Notify", ".", "INFO", ",", "\"Initializing dataset:\"", ",", "config", "[", "'data_name'", "]", ",", "Notify", ".", "ENDC", ")", "\n", "base_path", "=", "config", "[", "'data_root'", "]", "\n", "output_root", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'dump_root'", "]", ",", "'dump'", ")", "\n", "\n", "img_paths", "=", "[", "]", "\n", "dump_paths", "=", "[", "]", "\n", "\n", "for", "seq", "in", "config", "[", "'data_split'", "]", ":", "\n", "            ", "tmp_img_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "seq", ",", "'*.jpg'", ")", ")", "\n", "img_paths", ".", "extend", "(", "tmp_img_paths", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "output_root", ",", "seq", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "\n", "", "for", "i", "in", "tmp_img_paths", ":", "\n", "                ", "basename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "i", ")", ")", "[", "0", "]", "+", "'.h5'", "\n", "dump_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "basename", ")", ")", "\n", "\n", "", "", "tf", ".", "data", ".", "Dataset", ".", "map_parallel", "=", "lambda", "self", ",", "fn", ":", "self", ".", "map", "(", "\n", "fn", ",", "num_parallel_calls", "=", "config", "[", "'num_parallel_calls'", "]", ")", "\n", "\n", "if", "config", "[", "'truncate'", "]", "is", "not", "None", ":", "\n", "            ", "print", "(", "Notify", ".", "WARNING", ",", "\"Truncate from\"", ",", "\n", "config", "[", "'truncate'", "]", "[", "0", "]", ",", "\"to\"", ",", "config", "[", "'truncate'", "]", "[", "1", "]", ",", "Notify", ".", "ENDC", ")", "\n", "img_paths", "=", "img_paths", "[", "config", "[", "'truncate'", "]", "[", "0", "]", ":", "config", "[", "'truncate'", "]", "[", "1", "]", "]", "\n", "dump_paths", "=", "dump_paths", "[", "config", "[", "'truncate'", "]", "[", "0", "]", ":", "config", "[", "'truncate'", "]", "[", "1", "]", "]", "\n", "\n", "", "self", ".", "data_length", "=", "len", "(", "img_paths", ")", "\n", "\n", "files", "=", "{", "'image_paths'", ":", "img_paths", ",", "'dump_paths'", ":", "dump_paths", "}", "\n", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.oxford.Oxford._format_data": [[84, 94], ["data[].decode", "dump_path.replace.replace.replace", "dump_path.replace.replace.replace", "os.path.dirname", "[].astype", "oxford.write_feature_repo", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.oxford.write_feature_repo"], ["", "def", "_format_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "dump_path", "=", "data", "[", "'dump_path'", "]", ".", "decode", "(", "'utf-8'", ")", "\n", "dump_path", "=", "dump_path", ".", "replace", "(", "'/dump/'", ",", "'/'", ")", "\n", "dump_path", "=", "dump_path", ".", "replace", "(", "'.h5'", ",", "'.sift'", ")", "\n", "dump_folder", "=", "os", ".", "path", ".", "dirname", "(", "dump_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dump_folder", ")", "\n", "", "desc", "=", "data", "[", "'dump_data'", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "kpt", "=", "data", "[", "'dump_data'", "]", "[", "1", "]", "\n", "write_feature_repo", "(", "kpt", ",", "desc", ",", "dump_path", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.oxford.write_feature_repo": [[11, 44], ["numpy.stack", "struct.pack", "numpy.stack", "struct.pack", "numpy.concatenate().astype", "struct.pack", "struct.pack", "open", "fout.write", "fout.write", "numpy.ones", "fout.write", "fout.write", "numpy.concatenate", "struct.pack.flatten", "struct.pack.flatten"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.flatten", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.flatten"], ["def", "write_feature_repo", "(", "kpt_coord", ",", "desc", ",", "output_path", ")", ":", "\n", "    ", "assert", "desc", ".", "dtype", "==", "np", ".", "uint8", "\n", "if", "kpt_coord", ".", "size", ">", "1", ":", "\n", "        ", "num_features", "=", "kpt_coord", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "num_features", "=", "0", "\n", "\n", "", "feature_name", "=", "1413892435", "\n", "loc_dim", "=", "5", "\n", "des_dim", "=", "128", "\n", "\n", "head", "=", "np", ".", "stack", "(", "(", "feature_name", ",", "0", ",", "num_features", ",", "loc_dim", ",", "des_dim", ")", ")", "\n", "head", "=", "pack", "(", "'5i'", ",", "*", "head", ")", "\n", "\n", "if", "num_features", ">", "0", ":", "\n", "        ", "zero_pad", "=", "np", ".", "ones", "(", "(", "num_features", ",", "3", ")", ")", "*", "2", "\n", "kpt_coord", "=", "np", ".", "concatenate", "(", "(", "kpt_coord", ",", "zero_pad", ")", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "kpt_coord", "=", "pack", "(", "'f'", "*", "loc_dim", "*", "num_features", ",", "*", "(", "kpt_coord", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "desc", "=", "pack", "(", "'B'", "*", "des_dim", "*", "num_features", ",", "*", "(", "desc", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "", "level_num", "=", "1", "\n", "per_level_num", "=", "num_features", "\n", "\n", "level_pack", "=", "np", ".", "stack", "(", "(", "level_num", ",", "per_level_num", ")", ")", "\n", "level_num", "=", "pack", "(", "'2i'", ",", "*", "level_pack", ")", "\n", "\n", "with", "open", "(", "output_path", ",", "'wb'", ")", "as", "fout", ":", "\n", "        ", "fout", ".", "write", "(", "head", ")", "\n", "if", "num_features", ">", "0", ":", "\n", "            ", "fout", ".", "write", "(", "kpt_coord", ")", "\n", "fout", ".", "write", "(", "desc", ")", "\n", "", "fout", ".", "write", "(", "level_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.aachen.Aachen._init_dataset": [[15, 43], ["print", "os.path.join", "print", "len", "os.path.join", "os.path.join", "image_paths.extend", "print", "os.path.join", "len", "aachen.Aachen.map", "os.path.exists", "os.makedirs", "glob.glob", "i.split", "os.path.splitext", "range", "tmp_seq.split", "os.path.join", "os.path.basename", "len"], "methods", ["None"], ["def", "_init_dataset", "(", "self", ",", "**", "config", ")", ":", "\n", "        ", "print", "(", "Notify", ".", "INFO", ",", "\"Initializing dataset:\"", ",", "config", "[", "'data_name'", "]", ",", "Notify", ".", "ENDC", ")", "\n", "base_path", "=", "config", "[", "'data_root'", "]", "\n", "base_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'images'", ",", "'images_upright'", ")", "\n", "seq_paths", "=", "[", "'db'", ",", "'query/night/nexus5x'", ",", "'query/day/nexus4'", ",", "'query/day/nexus5x'", ",", "'query/day/milestone'", "]", "\n", "image_paths", "=", "[", "]", "\n", "for", "tmp_seq", "in", "seq_paths", ":", "\n", "            ", "dump_folder", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'dump_root'", "]", ",", "tmp_seq", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_folder", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dump_folder", ")", "\n", "", "seq_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "tmp_seq", ")", "\n", "image_paths", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'*.jpg'", ")", ")", ")", "\n", "", "if", "config", "[", "'truncate'", "]", "is", "not", "None", ":", "\n", "            ", "print", "(", "Notify", ".", "WARNING", ",", "\"Truncate from\"", ",", "\n", "config", "[", "'truncate'", "]", "[", "0", "]", ",", "\"to\"", ",", "config", "[", "'truncate'", "]", "[", "1", "]", ",", "Notify", ".", "ENDC", ")", "\n", "image_paths", "=", "image_paths", "[", "config", "[", "'truncate'", "]", "[", "0", "]", ":", "config", "[", "'truncate'", "]", "[", "1", "]", "]", "\n", "", "seq_names", "=", "[", "i", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "for", "i", "in", "image_paths", "]", "\n", "image_names", "=", "[", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "i", ")", ")", "[", "0", "]", "for", "i", "in", "image_paths", "]", "\n", "dump_paths", "=", "[", "os", ".", "path", ".", "join", "(", "config", "[", "'dump_root'", "]", ",", "seq_names", "[", "i", "]", ",", "\n", "image_names", "[", "i", "]", "+", "'.h5'", ")", "for", "i", "in", "range", "(", "len", "(", "image_paths", ")", ")", "]", "\n", "print", "(", "Notify", ".", "INFO", ",", "\"Found images:\"", ",", "len", "(", "image_paths", ")", ",", "Notify", ".", "ENDC", ")", "\n", "\n", "self", ".", "data_length", "=", "len", "(", "image_paths", ")", "\n", "tf", ".", "data", ".", "Dataset", ".", "map_parallel", "=", "lambda", "self", ",", "fn", ":", "self", ".", "map", "(", "\n", "fn", ",", "num_parallel_calls", "=", "config", "[", "'num_parallel_calls'", "]", ")", "\n", "\n", "files", "=", "{", "'image_paths'", ":", "image_paths", ",", "'dump_paths'", ":", "dump_paths", "}", "\n", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.aachen.Aachen._format_data": [[44, 54], ["data[].decode", "os.path.dirname", "os.path.join", "os.path.basename", "open", "numpy.savez"], "methods", ["None"], ["", "def", "_format_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "image_path", "=", "data", "[", "'image_path'", "]", ".", "decode", "(", "'utf-8'", ")", "\n", "basename", "=", "os", ".", "path", ".", "basename", "(", "image_path", ")", "+", "self", ".", "config", "[", "'post_format'", "]", "[", "'suffix'", "]", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "image_path", ")", "\n", "format_path", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "basename", ")", "\n", "aug_feat", "=", "data", "[", "'dump_data'", "]", "[", "0", "]", "\n", "kpt_xy", "=", "data", "[", "'dump_data'", "]", "[", "1", "]", "\n", "\n", "with", "open", "(", "format_path", ",", "'wb'", ")", "as", "fout", ":", "\n", "            ", "np", ".", "savez", "(", "fout", ",", "keypoints", "=", "kpt_xy", ",", "descriptors", "=", "aug_feat", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.imw2020.Imw2020._init_dataset": [[15, 59], ["print", "enumerate", "print", "len", "os.path.join", "os.path.join", "image_paths.extend", "print", "os.path.join", "len", "imw2020.Imw2020.map", "os.path.join", "os.path.exists", "os.makedirs", "glob.glob", "os.path.splitext", "range", "os.path.join", "i.split", "os.path.basename", "len", "i.split"], "methods", ["None"], ["def", "_init_dataset", "(", "self", ",", "**", "config", ")", ":", "\n", "        ", "print", "(", "Notify", ".", "INFO", ",", "\"Initializing dataset:\"", ",", "config", "[", "'data_name'", "]", ",", "Notify", ".", "ENDC", ")", "\n", "if", "config", "[", "'data_split'", "]", "==", "'val'", ":", "\n", "            ", "proj_paths", "=", "[", "'reichstag'", ",", "'sacre_coeur'", ",", "'st_peters_square'", "]", "\n", "seq_paths", "=", "[", "os", ".", "path", ".", "join", "(", "i", ",", "'set_100'", ",", "'images'", ")", "for", "i", "in", "proj_paths", "]", "\n", "", "elif", "config", "[", "'data_split'", "]", "==", "'test'", ":", "\n", "            ", "proj_paths", "=", "[", "'british_museum'", ",", "'lincoln_memorial_statue'", ",", "'milan_cathedral'", ",", "\n", "'piazza_san_marco'", ",", "'st_pauls_cathedral'", ",", "'florence_cathedral_side'", ",", "\n", "'london_bridge'", ",", "'mount_rushmore'", ",", "'sagrada_familia'", ",", "'united_states_capitol'", "]", "\n", "seq_paths", "=", "proj_paths", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "base_path", "=", "config", "[", "'data_root'", "]", "\n", "image_paths", "=", "[", "]", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "seq_paths", ")", ":", "\n", "            ", "dump_folder", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'dump_root'", "]", ",", "proj_paths", "[", "idx", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_folder", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dump_folder", ")", "\n", "", "seq_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "val", ")", "\n", "image_paths", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'*.jpg'", ")", ")", ")", "\n", "\n", "", "if", "config", "[", "'truncate'", "]", "is", "not", "None", ":", "\n", "            ", "print", "(", "Notify", ".", "WARNING", ",", "\"Truncate from\"", ",", "\n", "config", "[", "'truncate'", "]", "[", "0", "]", ",", "\"to\"", ",", "config", "[", "'truncate'", "]", "[", "1", "]", ",", "Notify", ".", "ENDC", ")", "\n", "image_paths", "=", "image_paths", "[", "config", "[", "'truncate'", "]", "[", "0", "]", ":", "config", "[", "'truncate'", "]", "[", "1", "]", "]", "\n", "\n", "", "if", "config", "[", "'data_split'", "]", "==", "'val'", ":", "\n", "            ", "seq_names", "=", "[", "i", ".", "split", "(", "'/'", ")", "[", "-", "4", "]", "for", "i", "in", "image_paths", "]", "\n", "", "elif", "config", "[", "'data_split'", "]", "==", "'test'", ":", "\n", "            ", "seq_names", "=", "[", "i", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "for", "i", "in", "image_paths", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "image_names", "=", "[", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "i", ")", ")", "[", "0", "]", "for", "i", "in", "image_paths", "]", "\n", "dump_paths", "=", "[", "os", ".", "path", ".", "join", "(", "config", "[", "'dump_root'", "]", ",", "seq_names", "[", "i", "]", ",", "\n", "image_names", "[", "i", "]", "+", "'.h5'", ")", "for", "i", "in", "range", "(", "len", "(", "image_paths", ")", ")", "]", "\n", "print", "(", "Notify", ".", "INFO", ",", "\"Found images:\"", ",", "len", "(", "image_paths", ")", ",", "Notify", ".", "ENDC", ")", "\n", "\n", "self", ".", "data_length", "=", "len", "(", "image_paths", ")", "\n", "tf", ".", "data", ".", "Dataset", ".", "map_parallel", "=", "lambda", "self", ",", "fn", ":", "self", ".", "map", "(", "\n", "fn", ",", "num_parallel_calls", "=", "config", "[", "'num_parallel_calls'", "]", ")", "\n", "\n", "files", "=", "{", "'image_paths'", ":", "image_paths", ",", "'dump_paths'", ":", "dump_paths", "}", "\n", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.imw2020.Imw2020._format_data": [[60, 89], ["data[].decode", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "data[].decode.split", "os.path.splitext", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "os.path.basename", "os.path.exists", "os.path.exists", "os.path.exists"], "methods", ["None"], ["", "def", "_format_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "dump_path", "=", "data", "[", "'dump_path'", "]", ".", "decode", "(", "'utf-8'", ")", "\n", "seq_name", "=", "dump_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "basename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "dump_path", ")", ")", "[", "0", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", "[", "'submission_root'", "]", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "config", "[", "'submission_root'", "]", ")", "\n", "", "seq_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "'submission_root'", "]", ",", "seq_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "seq_folder", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "seq_folder", ")", "\n", "", "h5_kpt", "=", "os", ".", "path", ".", "join", "(", "seq_folder", ",", "'keypoints.h5'", ")", "\n", "h5_desc", "=", "os", ".", "path", ".", "join", "(", "seq_folder", ",", "'descriptors.h5'", ")", "\n", "h5_score", "=", "os", ".", "path", ".", "join", "(", "seq_folder", ",", "'scores.h5'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "h5_desc", ")", "and", "not", "os", ".", "path", ".", "exists", "(", "h5_kpt", ")", "and", "not", "os", ".", "path", ".", "exists", "(", "h5_score", ")", ":", "\n", "            ", "gen_kpt_f", "=", "h5py", ".", "File", "(", "h5_kpt", ",", "'w'", ")", "\n", "gen_desc_f", "=", "h5py", ".", "File", "(", "h5_desc", ",", "'w'", ")", "\n", "gen_score_f", "=", "h5py", ".", "File", "(", "h5_score", ",", "'w'", ")", "\n", "", "else", ":", "\n", "            ", "gen_kpt_f", "=", "h5py", ".", "File", "(", "h5_kpt", ",", "'a'", ")", "\n", "gen_desc_f", "=", "h5py", ".", "File", "(", "h5_desc", ",", "'a'", ")", "\n", "gen_score_f", "=", "h5py", ".", "File", "(", "h5_score", ",", "'a'", ")", "\n", "\n", "", "if", "basename", "not", "in", "gen_kpt_f", "and", "basename", "not", "in", "gen_desc_f", ":", "\n", "            ", "feat", "=", "data", "[", "'dump_data'", "]", "[", "0", "]", "\n", "kpt", "=", "data", "[", "'dump_data'", "]", "[", "1", "]", "\n", "score", "=", "data", "[", "'dump_data'", "]", "[", "2", "]", "\n", "_", "=", "gen_kpt_f", ".", "create_dataset", "(", "basename", ",", "data", "=", "kpt", ")", "\n", "_", "=", "gen_desc_f", ".", "create_dataset", "(", "basename", ",", "data", "=", "feat", ")", "\n", "_", "=", "gen_score_f", ".", "create_dataset", "(", "basename", ",", "data", "=", "score", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.yfcc.Yfcc._init_dataset": [[15, 43], ["print", "os.listdir", "print", "len", "os.path.join", "print", "os.path.join", "len", "yfcc.Yfcc.map", "os.path.exists", "os.makedirs", "os.path.join", "image_paths.extend", "i.split", "os.path.splitext", "range", "glob.glob", "os.path.basename", "len", "os.path.join"], "methods", ["None"], ["def", "_init_dataset", "(", "self", ",", "**", "config", ")", ":", "\n", "        ", "print", "(", "Notify", ".", "INFO", ",", "\"Initializing dataset:\"", ",", "config", "[", "'data_name'", "]", ",", "Notify", ".", "ENDC", ")", "\n", "base_path", "=", "config", "[", "'data_root'", "]", "\n", "seq_paths", "=", "os", ".", "listdir", "(", "base_path", ")", "\n", "image_paths", "=", "[", "]", "\n", "for", "tmp_seq", "in", "seq_paths", ":", "\n", "            ", "dump_folder", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'dump_root'", "]", ",", "tmp_seq", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_folder", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dump_folder", ")", "\n", "", "for", "data_split", "in", "config", "[", "'data_split'", "]", ":", "\n", "                ", "seq_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "tmp_seq", ",", "data_split", ",", "'images'", ")", "\n", "image_paths", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'*.jpg'", ")", ")", ")", "\n", "", "", "if", "config", "[", "'truncate'", "]", "is", "not", "None", ":", "\n", "            ", "print", "(", "Notify", ".", "WARNING", ",", "\"Truncate from\"", ",", "\n", "config", "[", "'truncate'", "]", "[", "0", "]", ",", "\"to\"", ",", "config", "[", "'truncate'", "]", "[", "1", "]", ",", "Notify", ".", "ENDC", ")", "\n", "image_paths", "=", "image_paths", "[", "config", "[", "'truncate'", "]", "[", "0", "]", ":", "config", "[", "'truncate'", "]", "[", "1", "]", "]", "\n", "", "seq_names", "=", "[", "i", ".", "split", "(", "'/'", ")", "[", "-", "4", "]", "for", "i", "in", "image_paths", "]", "\n", "image_names", "=", "[", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "i", ")", ")", "[", "0", "]", "for", "i", "in", "image_paths", "]", "\n", "dump_paths", "=", "[", "os", ".", "path", ".", "join", "(", "config", "[", "'dump_root'", "]", ",", "seq_names", "[", "i", "]", ",", "\n", "image_names", "[", "i", "]", "+", "'.h5'", ")", "for", "i", "in", "range", "(", "len", "(", "image_paths", ")", ")", "]", "\n", "print", "(", "Notify", ".", "INFO", ",", "\"Found images:\"", ",", "len", "(", "image_paths", ")", ",", "Notify", ".", "ENDC", ")", "\n", "\n", "self", ".", "data_length", "=", "len", "(", "image_paths", ")", "\n", "tf", ".", "data", ".", "Dataset", ".", "map_parallel", "=", "lambda", "self", ",", "fn", ":", "self", ".", "map", "(", "\n", "fn", ",", "num_parallel_calls", "=", "config", "[", "'num_parallel_calls'", "]", ")", "\n", "\n", "files", "=", "{", "'image_paths'", ":", "image_paths", ",", "'dump_paths'", ":", "dump_paths", "}", "\n", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.yfcc.Yfcc._format_data": [[44, 53], ["data[].decode", "os.path.exists", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset"], "methods", ["None"], ["", "def", "_format_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "image_path", "=", "data", "[", "'image_path'", "]", ".", "decode", "(", "'utf-8'", ")", "\n", "gen_path", "=", "image_path", "+", "self", ".", "config", "[", "'post_format'", "]", "[", "'suffix'", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "gen_path", ")", ":", "\n", "            ", "gen_f", "=", "h5py", ".", "File", "(", "gen_path", ",", "'w'", ")", "\n", "aug_feat", "=", "data", "[", "'dump_data'", "]", "[", "0", "]", "\n", "kpt_xy", "=", "data", "[", "'dump_data'", "]", "[", "1", "]", "\n", "_", "=", "gen_f", ".", "create_dataset", "(", "'descriptors'", ",", "data", "=", "aug_feat", ")", "\n", "_", "=", "gen_f", ".", "create_dataset", "(", "'keypoints'", ",", "data", "=", "kpt_xy", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset._init_dataset": [[29, 33], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "_init_dataset", "(", "self", ",", "**", "config", ")", ":", "\n", "        ", "\"\"\"Initialize the dataset and prepare data paths.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset._format_data": [[34, 38], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_format_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Format the dumped data for later processing.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.get_test_set": [[39, 42], ["base_dataset.BaseDataset._get_set_generator"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset._get_set_generator"], ["", "def", "get_test_set", "(", "self", ")", ":", "\n", "        ", "\"\"\"Processed test set.\"\"\"", "\n", "return", "self", ".", "_get_set_generator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.format_data": [[43, 45], ["base_dataset.BaseDataset._format_data"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.imw2019.Imw2019._format_data"], ["", "def", "format_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "_format_data", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset.__init__": [[46, 67], ["base_dataset.dict_update", "base_dataset.BaseDataset._init_dataset", "tensorflow.compat.v1.ConfigProto", "tensorflow.compat.v1.Session", "getattr", "tensorflow.device", "base_dataset.BaseDataset._get_data", "tensorflow.compat.v1.data.make_one_shot_iterator().get_next", "tensorflow.compat.v1.data.make_one_shot_iterator"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.dict_update", "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.imw2019.Imw2019._init_dataset", "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset._get_data"], ["", "def", "__init__", "(", "self", ",", "**", "config", ")", ":", "\n", "# Update config", "\n", "        ", "self", ".", "data_length", "=", "0", "\n", "self", ".", "config", "=", "dict_update", "(", "getattr", "(", "self", ",", "'default_config'", ",", "{", "}", ")", ",", "config", ")", "\n", "\n", "assert", "self", ".", "config", "[", "'stage'", "]", "is", "not", "None", "\n", "\n", "if", "self", ".", "config", "[", "'stage'", "]", "==", "'reg'", ":", "\n", "            ", "self", ".", "read_gray", "=", "False", "\n", "", "elif", "self", ".", "config", "[", "'stage'", "]", "==", "'loc'", ":", "\n", "            ", "self", ".", "read_gray", "=", "True", "\n", "\n", "", "self", ".", "dataset", "=", "self", ".", "_init_dataset", "(", "**", "self", ".", "config", ")", "\n", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "self", ".", "tf_splits", "=", "self", ".", "_get_data", "(", "self", ".", "dataset", ")", "\n", "self", ".", "tf_next", "=", "tf", ".", "compat", ".", "v1", ".", "data", ".", "make_one_shot_iterator", "(", "self", ".", "tf_splits", ")", ".", "get_next", "(", ")", "\n", "", "self", ".", "end_set", "=", "tf", ".", "errors", ".", "OutOfRangeError", "\n", "config", "=", "tf", ".", "compat", ".", "v1", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "self", ".", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset._get_set_generator": [[68, 71], ["base_dataset.BaseDataset.sess.run"], "methods", ["None"], ["", "def", "_get_set_generator", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "self", ".", "sess", ".", "run", "(", "self", ".", "tf_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.BaseDataset._get_data": [[72, 111], ["tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.image.decode_image.set_shape", "tensorflow.cast", "h5py.File", "h5py.File", "tensorflow.data.Dataset.from_tensor_slices.map", "tensorflow.data.Dataset.zip", "tensorflow.image.decode_jpeg", "tensorflow.image.decode_image", "[].astype", "[].astype", "[].astype", "[].astype", "[].astype", "tensorflow.data.Dataset.from_tensor_slices.map", "tensorflow.data.Dataset.zip", "tensorflow.io.read_file", "tensorflow.io.read_file", "tensorflow.data.Dataset.from_tensor_slices.map", "tensorflow.data.Dataset.zip", "tensorflow.numpy_function", "tensorflow.numpy_function"], "methods", ["None"], ["", "", "def", "_get_data", "(", "self", ",", "files", ")", ":", "\n", "        ", "def", "_read_image", "(", "img_path", ")", ":", "\n", "            ", "channels", "=", "1", "if", "self", ".", "read_gray", "else", "3", "\n", "if", "'all_jpeg'", "in", "self", ".", "config", "and", "self", ".", "config", "[", "'all_jpeg'", "]", ":", "\n", "                ", "img", "=", "tf", ".", "image", ".", "decode_jpeg", "(", "tf", ".", "io", ".", "read_file", "(", "img_path", ")", ",", "channels", "=", "channels", ",", "dct_method", "=", "'INTEGER_ACCURATE'", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "tf", ".", "image", ".", "decode_image", "(", "tf", ".", "io", ".", "read_file", "(", "img_path", ")", ",", "channels", "=", "channels", ")", "\n", "", "img", ".", "set_shape", "(", "(", "None", ",", "None", ",", "channels", ")", ")", "\n", "return", "tf", ".", "cast", "(", "img", ",", "tf", ".", "float32", ")", "\n", "\n", "", "def", "_read_dump", "(", "path", ")", ":", "\n", "            ", "f", "=", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "\n", "return", "(", "f", "[", "'reg_feat'", "]", "[", "(", ")", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "f", "[", "'loc_info'", "]", "[", "(", ")", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "def", "_read_gen_train", "(", "path", ")", ":", "\n", "            ", "f", "=", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "\n", "return", "(", "f", "[", "'aug_feat'", "]", "[", "(", ")", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "f", "[", "'loc_info'", "]", "[", "(", ")", "]", "[", ":", ",", "0", ":", "2", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "f", "[", "'loc_info'", "]", "[", "(", ")", "]", "[", ":", ",", "4", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "image_paths", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "files", "[", "'image_paths'", "]", ")", "\n", "dump_paths", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "files", "[", "'dump_paths'", "]", ")", "\n", "\n", "if", "self", ".", "config", "[", "'stage'", "]", "==", "'loc'", "or", "self", ".", "config", "[", "'stage'", "]", "==", "'reg'", ":", "\n", "            ", "images", "=", "image_paths", ".", "map", "(", "_read_image", ")", "\n", "data", "=", "tf", ".", "data", ".", "Dataset", ".", "zip", "(", "\n", "{", "'image'", ":", "images", ",", "'dump_path'", ":", "dump_paths", ",", "'image_path'", ":", "image_paths", "}", ")", "\n", "", "elif", "self", ".", "config", "[", "'stage'", "]", "==", "'aug'", ":", "\n", "            ", "dump_data", "=", "dump_paths", ".", "map", "(", "lambda", "path", ":", "tf", ".", "numpy_function", "(", "\n", "_read_dump", ",", "[", "path", "]", ",", "[", "tf", ".", "float32", ",", "tf", ".", "float32", "]", ")", ")", "\n", "data", "=", "tf", ".", "data", ".", "Dataset", ".", "zip", "(", "{", "'dump_data'", ":", "dump_data", ",", "'dump_path'", ":", "dump_paths", "}", ")", "\n", "", "elif", "self", ".", "config", "[", "'stage'", "]", "==", "'post_format'", ":", "\n", "            ", "dump_data", "=", "dump_paths", ".", "map", "(", "lambda", "path", ":", "tf", ".", "numpy_function", "(", "\n", "_read_gen_train", ",", "[", "path", "]", ",", "[", "tf", ".", "float32", ",", "tf", ".", "float32", ",", "tf", ".", "float32", "]", ")", ")", "\n", "data", "=", "tf", ".", "data", ".", "Dataset", ".", "zip", "(", "\n", "{", "'dump_data'", ":", "dump_data", ",", "'dump_path'", ":", "dump_paths", ",", "'image_path'", ":", "image_paths", "}", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.base_dataset.dict_update": [[8, 24], ["u.items", "isinstance", "base_dataset.dict_update", "d.get"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.dict_update"], ["def", "dict_update", "(", "d", ",", "u", ")", ":", "\n", "    ", "\"\"\"Improved update for nested dictionaries.\n\n    Arguments:\n        d: The dictionary to be updated.\n        u: The update dictionary.\n\n    Returns:\n        The updated dictionary.\n    \"\"\"", "\n", "for", "k", ",", "v", "in", "u", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "collections", ".", "Mapping", ")", ":", "\n", "            ", "d", "[", "k", "]", "=", "dict_update", "(", "d", ".", "get", "(", "k", ",", "{", "}", ")", ",", "v", ")", "\n", "", "else", ":", "\n", "            ", "d", "[", "k", "]", "=", "v", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.imw2019.Imw2019._init_dataset": [[15, 42], ["print", "os.listdir", "print", "len", "os.path.join", "os.path.join", "image_paths.extend", "print", "os.path.join", "len", "imw2019.Imw2019.map", "os.path.exists", "os.makedirs", "glob.glob", "i.split", "os.path.splitext", "range", "os.path.join", "os.path.basename", "len"], "methods", ["None"], ["def", "_init_dataset", "(", "self", ",", "**", "config", ")", ":", "\n", "        ", "print", "(", "Notify", ".", "INFO", ",", "\"Initializing dataset:\"", ",", "config", "[", "'data_name'", "]", ",", "Notify", ".", "ENDC", ")", "\n", "base_path", "=", "config", "[", "'data_root'", "]", "\n", "seq_paths", "=", "os", ".", "listdir", "(", "base_path", ")", "\n", "image_paths", "=", "[", "]", "\n", "for", "tmp_seq", "in", "seq_paths", ":", "\n", "            ", "dump_folder", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'dump_root'", "]", ",", "tmp_seq", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_folder", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dump_folder", ")", "\n", "", "seq_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "tmp_seq", ")", "\n", "image_paths", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "seq_path", ",", "'*.jpg'", ")", ")", ")", "\n", "", "if", "config", "[", "'truncate'", "]", "is", "not", "None", ":", "\n", "            ", "print", "(", "Notify", ".", "WARNING", ",", "\"Truncate from\"", ",", "\n", "config", "[", "'truncate'", "]", "[", "0", "]", ",", "\"to\"", ",", "config", "[", "'truncate'", "]", "[", "1", "]", ",", "Notify", ".", "ENDC", ")", "\n", "image_paths", "=", "image_paths", "[", "config", "[", "'truncate'", "]", "[", "0", "]", ":", "config", "[", "'truncate'", "]", "[", "1", "]", "]", "\n", "", "seq_names", "=", "[", "i", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "for", "i", "in", "image_paths", "]", "\n", "image_names", "=", "[", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "i", ")", ")", "[", "0", "]", "for", "i", "in", "image_paths", "]", "\n", "dump_paths", "=", "[", "os", ".", "path", ".", "join", "(", "config", "[", "'dump_root'", "]", ",", "seq_names", "[", "i", "]", ",", "\n", "image_names", "[", "i", "]", "+", "'.h5'", ")", "for", "i", "in", "range", "(", "len", "(", "image_paths", ")", ")", "]", "\n", "print", "(", "Notify", ".", "INFO", ",", "\"Found images:\"", ",", "len", "(", "image_paths", ")", ",", "Notify", ".", "ENDC", ")", "\n", "\n", "self", ".", "data_length", "=", "len", "(", "image_paths", ")", "\n", "tf", ".", "data", ".", "Dataset", ".", "map_parallel", "=", "lambda", "self", ",", "fn", ":", "self", ".", "map", "(", "\n", "fn", ",", "num_parallel_calls", "=", "config", "[", "'num_parallel_calls'", "]", ")", "\n", "\n", "files", "=", "{", "'image_paths'", ":", "image_paths", ",", "'dump_paths'", ":", "dump_paths", "}", "\n", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.imw2019.Imw2019._format_data": [[43, 67], ["data[].decode", "os.path.join", "os.path.join", "os.path.join", "data[].decode.split", "os.path.splitext", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "os.path.basename", "os.path.exists", "os.path.exists"], "methods", ["None"], ["", "def", "_format_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "image_path", "=", "data", "[", "'image_path'", "]", ".", "decode", "(", "'utf-8'", ")", "\n", "seq_name", "=", "image_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "basename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "image_path", ")", ")", "[", "0", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", "[", "'submission_root'", "]", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "config", "[", "'submission_root'", "]", ")", "\n", "", "seq_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "'submission_root'", "]", ",", "seq_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "seq_folder", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "seq_folder", ")", "\n", "", "h5_kpt", "=", "os", ".", "path", ".", "join", "(", "seq_folder", ",", "'keypoints.h5'", ")", "\n", "h5_desc", "=", "os", ".", "path", ".", "join", "(", "seq_folder", ",", "'descriptors.h5'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "h5_desc", ")", "and", "not", "os", ".", "path", ".", "exists", "(", "h5_kpt", ")", ":", "\n", "            ", "gen_kpt_f", "=", "h5py", ".", "File", "(", "h5_kpt", ",", "'w'", ")", "\n", "gen_desc_f", "=", "h5py", ".", "File", "(", "h5_desc", ",", "'w'", ")", "\n", "", "else", ":", "\n", "            ", "gen_kpt_f", "=", "h5py", ".", "File", "(", "h5_kpt", ",", "'a'", ")", "\n", "gen_desc_f", "=", "h5py", ".", "File", "(", "h5_desc", ",", "'a'", ")", "\n", "\n", "", "if", "basename", "not", "in", "gen_kpt_f", "and", "basename", "not", "in", "gen_desc_f", ":", "\n", "            ", "aug_feat", "=", "data", "[", "'dump_data'", "]", "[", "0", "]", "\n", "kpt_xy", "=", "data", "[", "'dump_data'", "]", "[", "1", "]", "\n", "_", "=", "gen_kpt_f", ".", "create_dataset", "(", "basename", ",", "data", "=", "kpt_xy", ")", "\n", "_", "=", "gen_desc_f", ".", "create_dataset", "(", "basename", ",", "data", "=", "aug_feat", ",", "dtype", "=", "'uint8'", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.__init__.get_dataset": [[1, 4], ["__import__", "getattr", "__init__._module_to_class"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__._module_to_class"], [""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.datasets.__init__._module_to_class": [[6, 8], ["n.capitalize", "name.split"], "function", ["None"], []], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.inference_model.inference": [[9, 78], ["tensorflow.nn.moments", "tensorflow.nn.batch_normalization", "cnn_wrapper.descnet.GeoDesc.get_output_by_name", "tensorflow.reshape", "tensorflow.add_n", "tensorflow.nn.l2_normalize", "tensorflow.squeeze", "tensorflow.compat.v1.placeholder", "tensorflow.compat.v1.placeholder", "tensorflow.reshape", "tensorflow.cast", "tensorflow.compat.v1.placeholder", "tensorflow.concat", "tensorflow.reshape", "cnn_wrapper.descnet.DenseGeoDesc", "cnn_wrapper.descnet.GeoDesc", "tensorflow.compat.v1.placeholder", "cnn_wrapper.augdesc.VisualContext.get_output", "tf.squeeze.append", "tensorflow.reshape", "tensorflow.squeeze", "tensorflow.compat.v1.variable_scope", "cnn_wrapper.descnet.GeoDesc.get_output_by_name", "cnn_wrapper.augdesc.MatchabilityPrediction", "cnn_wrapper.augdesc.MatchabilityPrediction.get_output", "tensorflow.reshape", "tensorflow.compat.v1.variable_scope", "cnn_wrapper.augdesc.VisualContext", "cnn_wrapper.augdesc.MatchabilityPrediction.get_output_by_name", "tensorflow.compat.v1.variable_scope", "tensorflow.concat", "cnn_wrapper.augdesc.LightContextNormalization", "cnn_wrapper.augdesc.LightContextNormalization.get_output", "tf.squeeze.append", "tower.get_output_by_name.get_shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output_by_name", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.concat", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output_by_name", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output_by_name", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.concat", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output"], ["def", "inference", "(", "config", ")", ":", "\n", "    ", "\"\"\"Model for patch description.\"\"\"", "\n", "output_tensors", "=", "{", "}", "\n", "if", "config", "[", "'dense_desc'", "]", ":", "\n", "        ", "input_tensor", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "\n", "None", ",", "None", ",", "None", ",", "1", ")", ",", "name", "=", "'ph_img'", ")", "\n", "", "else", ":", "\n", "        ", "input_tensor", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "\n", "None", ",", "32", ",", "32", ")", ",", "name", "=", "'ph_patch'", ")", "\n", "input_tensor", "=", "tf", ".", "reshape", "(", "input_tensor", ",", "(", "-", "1", ",", "32", ",", "32", ",", "1", ")", ")", "\n", "# patch standardization", "\n", "", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "tf", ".", "cast", "(", "input_tensor", ",", "tf", ".", "float32", ")", ",", "axes", "=", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "input_tensor", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "input_tensor", ",", "mean", ",", "variance", ",", "None", ",", "None", ",", "1e-5", ")", "\n", "\n", "if", "config", "[", "'aug'", "]", "or", "config", "[", "'dense_desc'", "]", ":", "\n", "        ", "kpt_param", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ",", "6", ")", ",", "name", "=", "'ph_kpt_param'", ")", "\n", "kpt_xy", "=", "tf", ".", "concat", "(", "(", "kpt_param", "[", ":", ",", ":", ",", "2", ",", "None", "]", ",", "kpt_param", "[", ":", ",", ":", ",", "5", ",", "None", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "if", "config", "[", "'dense_desc'", "]", ":", "\n", "        ", "kpt_theta", "=", "tf", ".", "reshape", "(", "kpt_param", ",", "(", "tf", ".", "shape", "(", "kpt_param", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "kpt_param", ")", "[", "1", "]", ",", "2", ",", "3", ")", ")", "\n", "config_dict", "=", "{", "}", "\n", "config_dict", "[", "'pert_theta'", "]", "=", "kpt_theta", "\n", "config_dict", "[", "'patch_sampler'", "]", "=", "transformer_crop", "\n", "tower", "=", "DenseGeoDesc", "(", "{", "'data'", ":", "input_tensor", ",", "'kpt_coord'", ":", "kpt_xy", "}", ",", "\n", "is_training", "=", "False", ",", "reuse", "=", "False", ",", "**", "config_dict", ")", "\n", "", "else", ":", "\n", "        ", "tower", "=", "GeoDesc", "(", "{", "'data'", ":", "input_tensor", "}", ",", "is_training", "=", "False", ",", "reuse", "=", "False", ")", "\n", "\n", "", "if", "config", "[", "'aug'", "]", ":", "\n", "        ", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "'kpt_m'", ")", ":", "\n", "            ", "inter_feat", "=", "tower", ".", "get_output_by_name", "(", "'conv5'", ")", "\n", "kpt_m_tower", "=", "MatchabilityPrediction", "(", "\n", "{", "'data'", ":", "inter_feat", "}", ",", "is_training", "=", "False", ",", "reuse", "=", "False", ")", "\n", "kpt_m", "=", "kpt_m_tower", ".", "get_output", "(", ")", "\n", "kpt_m", "=", "tf", ".", "reshape", "(", "kpt_m", ",", "(", "1", ",", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "", "tower_output", "=", "tower", ".", "get_output_by_name", "(", "'conv6'", ")", "\n", "feat", "=", "tf", ".", "reshape", "(", "tower_output", ",", "(", "1", ",", "-", "1", ",", "tower_output", ".", "get_shape", "(", ")", "[", "-", "1", "]", ")", ")", "\n", "aug_feat", "=", "[", "feat", "]", "\n", "\n", "if", "config", "[", "'aug'", "]", ":", "\n", "        ", "img_feat", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "\n", "tf", ".", "float32", ",", "shape", "=", "(", "1", ",", "None", ",", "None", ",", "config", "[", "'reg_feat_dim'", "]", ")", ",", "name", "=", "'ph_img_feat'", ")", "\n", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "'vis_context'", ")", ":", "\n", "            ", "pt_tower", "=", "VisualContext", "(", "\n", "{", "'img_feat'", ":", "img_feat", ",", "'local_feat'", ":", "feat", ",", "'kpt_param'", ":", "kpt_xy", "}", ",", "\n", "is_training", "=", "False", ",", "reuse", "=", "False", ")", "\n", "", "photo_feat", "=", "pt_tower", ".", "get_output", "(", ")", "\n", "aug_feat", ".", "append", "(", "photo_feat", ")", "\n", "\n", "", "if", "config", "[", "'aug'", "]", ":", "\n", "        ", "kpt_m", "=", "tf", ".", "reshape", "(", "kpt_m_tower", ".", "get_output_by_name", "(", "'kpt_m_rescale'", ")", ",", "[", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "'geo_context'", ")", ":", "\n", "            ", "points", "=", "tf", ".", "concat", "(", "[", "kpt_m", ",", "kpt_xy", "]", ",", "axis", "=", "2", ")", "\n", "feat_trans", "=", "LightContextNormalization", "(", "{", "'points'", ":", "tf", ".", "expand_dims", "(", "points", ",", "axis", "=", "2", ")", ",", "\n", "'local_feat'", ":", "feat", "}", ",", "\n", "is_training", "=", "False", ",", "reuse", "=", "False", ")", "\n", "geo_feat", "=", "feat_trans", ".", "get_output", "(", ")", "\n", "aug_feat", ".", "append", "(", "geo_feat", ")", "\n", "", "kpt_m", "=", "tf", ".", "squeeze", "(", "kpt_m", ",", "axis", "=", "0", ")", "\n", "output_tensors", "[", "'kpt_m'", "]", "=", "kpt_m", "\n", "\n", "", "aug_feat", "=", "tf", ".", "add_n", "(", "aug_feat", ")", "\n", "aug_feat", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "aug_feat", ",", "axis", "=", "-", "1", ",", "name", "=", "'l2norm'", ")", "\n", "aug_feat", "=", "tf", ".", "squeeze", "(", "aug_feat", ",", "axis", "=", "0", ")", "\n", "\n", "output_tensors", "[", "'local_feat'", "]", "=", "aug_feat", "\n", "return", "output_tensors", "\n", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.loc_model.LocModel._init_model": [[27, 38], ["utils.opencvhelper.SiftWrapper", "loc_model.LocModel.sift_wrapper.create"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.create"], ["def", "_init_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "sift_wrapper", "=", "SiftWrapper", "(", "\n", "n_feature", "=", "self", ".", "config", "[", "'n_feature'", "]", ",", "\n", "n_sample", "=", "self", ".", "config", "[", "'n_sample'", "]", ",", "\n", "peak_thld", "=", "self", ".", "config", "[", "'peak_thld'", "]", ",", "\n", "edge_thld", "=", "self", ".", "config", "[", "'edge_thld'", "]", "\n", ")", "\n", "self", ".", "sift_wrapper", ".", "standardize", "=", "False", "# the network has handled this step.", "\n", "self", ".", "sift_wrapper", ".", "ori_off", "=", "self", ".", "config", "[", "'upright'", "]", "\n", "self", ".", "sift_wrapper", ".", "pyr_off", "=", "not", "self", ".", "config", "[", "'scale_diff'", "]", "\n", "self", ".", "sift_wrapper", ".", "create", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.loc_model.LocModel._run": [[39, 125], ["numpy.squeeze().astype", "loc_model.LocModel.sift_wrapper.detect", "numpy.stack", "len", "loc_model.LocModel.sift_wrapper.compute", "loc_model.LocModel.sift_wrapper.build_pyramid", "loc_model.LocModel.sift_wrapper.get_patches", "queue.Queue", "threading.Thread", "threading.Thread.start", "range", "queue.Queue.put", "threading.Thread.join", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "float", "max", "loc_model.LocModel.sess.run", "queue.Queue.get", "sess.run", "numpy.concatenate.append", "numpy.concatenate.append", "queue.Queue.task_done", "numpy.squeeze", "int", "int", "min", "cv2.resize", "numpy.expand_dims", "numpy.expand_dims", "numpy.floor", "queue.Queue.put", "queue.Queue.put", "numpy.cos", "numpy.sin", "float", "numpy.expand_dims", "float", "float"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.detect", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.compute", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.build_pyramid", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.get_patches", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze"], ["", "def", "_run", "(", "self", ",", "data", ",", "**", "kwargs", ")", ":", "\n", "        ", "def", "_worker", "(", "patch_queue", ",", "sess", ",", "loc_feat", ",", "kpt_mb", ")", ":", "\n", "            ", "\"\"\"The worker thread.\"\"\"", "\n", "while", "True", ":", "\n", "                ", "patch_data", "=", "patch_queue", ".", "get", "(", ")", "\n", "if", "patch_data", "is", "None", ":", "\n", "                    ", "return", "\n", "", "loc_returns", "=", "sess", ".", "run", "(", "self", ".", "output_tensors", ",", "\n", "feed_dict", "=", "{", "\"input:0\"", ":", "np", ".", "expand_dims", "(", "patch_data", ",", "-", "1", ")", "}", ")", "\n", "loc_feat", ".", "append", "(", "loc_returns", "[", "0", "]", ")", "\n", "kpt_mb", ".", "append", "(", "loc_returns", "[", "1", "]", ")", "\n", "patch_queue", ".", "task_done", "(", ")", "\n", "", "", "gray_img", "=", "np", ".", "squeeze", "(", "data", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# detect SIFT keypoints.", "\n", "npy_kpts", ",", "cv_kpts", "=", "self", ".", "sift_wrapper", ".", "detect", "(", "gray_img", ")", "\n", "if", "self", ".", "config", "[", "'sift_desc'", "]", ":", "\n", "            ", "sift_desc", "=", "self", ".", "sift_wrapper", ".", "compute", "(", "gray_img", ",", "cv_kpts", ")", "\n", "", "else", ":", "\n", "            ", "sift_desc", "=", "None", "\n", "\n", "", "kpt_xy", "=", "np", ".", "stack", "(", "(", "(", "npy_kpts", "[", ":", ",", "0", "]", "-", "gray_img", ".", "shape", "[", "1", "]", "/", "2.", ")", "/", "(", "gray_img", ".", "shape", "[", "1", "]", "/", "2.", ")", ",", "\n", "(", "npy_kpts", "[", ":", ",", "1", "]", "-", "gray_img", ".", "shape", "[", "0", "]", "/", "2.", ")", "/", "(", "gray_img", ".", "shape", "[", "0", "]", "/", "2.", ")", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "\n", "num_patch", "=", "len", "(", "cv_kpts", ")", "\n", "\n", "if", "not", "self", ".", "config", "[", "'dense_desc'", "]", ":", "\n", "            ", "self", ".", "sift_wrapper", ".", "build_pyramid", "(", "gray_img", ")", "\n", "all_patches", "=", "self", ".", "sift_wrapper", ".", "get_patches", "(", "cv_kpts", ")", "\n", "# get iteration number", "\n", "batch_size", "=", "self", ".", "config", "[", "'batch_size'", "]", "\n", "if", "num_patch", "%", "batch_size", ">", "0", ":", "\n", "                ", "loop_num", "=", "int", "(", "np", ".", "floor", "(", "float", "(", "num_patch", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "loop_num", "=", "int", "(", "num_patch", "/", "batch_size", "-", "1", ")", "\n", "# create input thread", "\n", "", "loc_feat", "=", "[", "]", "\n", "kpt_mb", "=", "[", "]", "\n", "patch_queue", "=", "Queue", "(", ")", "\n", "worker_thread", "=", "Thread", "(", "target", "=", "_worker", ",", "args", "=", "(", "patch_queue", ",", "self", ".", "sess", ",", "loc_feat", ",", "kpt_mb", ")", ")", "\n", "worker_thread", ".", "daemon", "=", "True", "\n", "worker_thread", ".", "start", "(", ")", "\n", "# enqueue", "\n", "for", "i", "in", "range", "(", "loop_num", "+", "1", ")", ":", "\n", "                ", "if", "i", "<", "loop_num", ":", "\n", "                    ", "patch_queue", ".", "put", "(", "all_patches", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "", "else", ":", "\n", "                    ", "patch_queue", ".", "put", "(", "all_patches", "[", "i", "*", "batch_size", ":", "]", ")", "\n", "# poison pill", "\n", "", "", "patch_queue", ".", "put", "(", "None", ")", "\n", "# wait for extraction.", "\n", "worker_thread", ".", "join", "(", ")", "\n", "loc_feat", "=", "np", ".", "concatenate", "(", "loc_feat", ",", "axis", "=", "0", ")", "\n", "kpt_mb", "=", "np", ".", "concatenate", "(", "kpt_mb", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "import", "cv2", "\n", "# compose affine crop matrix.", "\n", "patch_scale", "=", "6", "\n", "patch_param", "=", "np", ".", "zeros", "(", "(", "num_patch", ",", "6", ")", ")", "\n", "\n", "m_cos", "=", "np", ".", "cos", "(", "npy_kpts", "[", ":", ",", "3", "]", ")", "*", "patch_scale", "*", "npy_kpts", "[", ":", ",", "2", "]", "\n", "m_sin", "=", "np", ".", "sin", "(", "npy_kpts", "[", ":", ",", "3", "]", ")", "*", "patch_scale", "*", "npy_kpts", "[", ":", ",", "2", "]", "\n", "\n", "short_side", "=", "float", "(", "min", "(", "gray_img", ".", "shape", "[", "0", "]", ",", "gray_img", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "patch_param", "[", ":", ",", "0", "]", "=", "m_cos", "/", "short_side", "\n", "patch_param", "[", ":", ",", "1", "]", "=", "m_sin", "/", "short_side", "\n", "patch_param", "[", ":", ",", "2", "]", "=", "kpt_xy", "[", ":", ",", "0", "]", "\n", "patch_param", "[", ":", ",", "3", "]", "=", "-", "m_sin", "/", "short_side", "\n", "patch_param", "[", ":", ",", "4", "]", "=", "m_cos", "/", "short_side", "\n", "patch_param", "[", ":", ",", "5", "]", "=", "kpt_xy", "[", ":", ",", "1", "]", "\n", "\n", "max_dim", "=", "max", "(", "gray_img", ".", "shape", "[", "0", "]", ",", "gray_img", ".", "shape", "[", "1", "]", ")", "\n", "if", "max_dim", ">", "self", ".", "config", "[", "'max_dim'", "]", ":", "\n", "                ", "downsample_ratio", "=", "self", ".", "config", "[", "'max_dim'", "]", "/", "float", "(", "max_dim", ")", "\n", "gray_img", "=", "cv2", ".", "resize", "(", "gray_img", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "downsample_ratio", ",", "fy", "=", "downsample_ratio", ")", "\n", "\n", "", "gray_img", "=", "gray_img", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "input_dict", "=", "{", "\"input/img:0\"", ":", "np", ".", "expand_dims", "(", "gray_img", ",", "0", ")", ",", "\n", "\"input/kpt_param:0\"", ":", "np", ".", "expand_dims", "(", "patch_param", ",", "0", ")", "}", "\n", "local_returns", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output_tensors", ",", "feed_dict", "=", "input_dict", ")", "\n", "loc_feat", "=", "local_returns", "[", "0", "]", "\n", "kpt_mb", "=", "local_returns", "[", "1", "]", "\n", "\n", "", "return", "loc_feat", ",", "kpt_mb", ",", "kpt_xy", ",", "cv_kpts", ",", "sift_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.loc_model.LocModel._construct_network": [[126, 163], ["cnn_wrapper.descnet.GeoDesc.get_output_by_name", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.concat", "tensorflow.reshape", "tensorflow.nn.moments", "tensorflow.nn.batch_normalization", "cnn_wrapper.descnet.DenseGeoDesc", "tensorflow.placeholder", "tensorflow.nn.moments", "tensorflow.nn.batch_normalization", "cnn_wrapper.descnet.GeoDesc", "tensorflow.compat.v1.variable_scope", "cnn_wrapper.descnet.GeoDesc.get_output_by_name", "cnn_wrapper.augdesc.MatchabilityPrediction", "cnn_wrapper.augdesc.MatchabilityPrediction.get_output", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.cast", "tensorflow.cast", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output_by_name", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.concat", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output_by_name", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output"], ["", "def", "_construct_network", "(", "self", ")", ":", "\n", "        ", "\"\"\"Model for patch description.\"\"\"", "\n", "\n", "if", "self", ".", "config", "[", "'dense_desc'", "]", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'input'", ")", ":", "\n", "                ", "ph_imgs", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "\n", "None", ",", "None", ",", "None", ",", "1", ")", ",", "name", "=", "'img'", ")", "\n", "ph_kpt_params", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ",", "6", ")", ",", "name", "=", "'kpt_param'", ")", "\n", "", "kpt_xy", "=", "tf", ".", "concat", "(", "(", "ph_kpt_params", "[", ":", ",", ":", ",", "2", ",", "None", "]", ",", "ph_kpt_params", "[", ":", ",", ":", ",", "5", ",", "None", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "kpt_theta", "=", "tf", ".", "reshape", "(", "ph_kpt_params", ",", "(", "tf", ".", "shape", "(", "ph_kpt_params", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "ph_kpt_params", ")", "[", "1", "]", ",", "2", ",", "3", ")", ")", "\n", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "\n", "tf", ".", "cast", "(", "ph_imgs", ",", "tf", ".", "float32", ")", ",", "axes", "=", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "norm_input", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "ph_imgs", ",", "mean", ",", "variance", ",", "None", ",", "None", ",", "1e-5", ")", "\n", "config_dict", "=", "{", "}", "\n", "config_dict", "[", "'pert_theta'", "]", "=", "kpt_theta", "\n", "config_dict", "[", "'patch_sampler'", "]", "=", "transformer_crop", "\n", "tower", "=", "DenseGeoDesc", "(", "{", "'data'", ":", "norm_input", ",", "'kpt_coord'", ":", "kpt_xy", "}", ",", "\n", "is_training", "=", "False", ",", "resue", "=", "False", ",", "**", "config_dict", ")", "\n", "", "else", ":", "\n", "            ", "input_size", "=", "(", "32", ",", "32", ")", "\n", "patches", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "input_size", "[", "0", "]", ",", "input_size", "[", "1", "]", ",", "1", ")", ",", "name", "=", "'input'", ")", "\n", "# patch standardization", "\n", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "\n", "tf", ".", "cast", "(", "patches", ",", "tf", ".", "float32", ")", ",", "axes", "=", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "patches", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "patches", ",", "mean", ",", "variance", ",", "None", ",", "None", ",", "1e-5", ")", "\n", "tower", "=", "GeoDesc", "(", "{", "'data'", ":", "patches", "}", ",", "is_training", "=", "False", ",", "reuse", "=", "False", ")", "\n", "\n", "", "conv6_feat", "=", "tower", ".", "get_output_by_name", "(", "'conv6'", ")", "\n", "conv6_feat", "=", "tf", ".", "squeeze", "(", "conv6_feat", ",", "axis", "=", "[", "1", ",", "2", "]", ",", "name", "=", "'conv6_feat'", ")", "\n", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "'kpt_m'", ")", ":", "\n", "            ", "inter_feat", "=", "tower", ".", "get_output_by_name", "(", "'conv5'", ")", "\n", "matchability_tower", "=", "MatchabilityPrediction", "(", "\n", "{", "'data'", ":", "inter_feat", "}", ",", "is_training", "=", "False", ",", "reuse", "=", "False", ")", "\n", "mb", "=", "matchability_tower", ".", "get_output", "(", ")", "\n", "", "mb", "=", "tf", ".", "squeeze", "(", "mb", ",", "axis", "=", "[", "1", ",", "2", "]", ",", "name", "=", "'kpt_mb'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.rootsift_model.RootsiftModel._init_model": [[18, 27], ["utils.opencvhelper.SiftWrapper", "rootsift_model.RootsiftModel.sift_wrapper.create"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.create"], ["def", "_init_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "sift_wrapper", "=", "SiftWrapper", "(", "\n", "n_feature", "=", "self", ".", "config", "[", "'n_feature'", "]", ",", "\n", "n_sample", "=", "self", ".", "config", "[", "'n_sample'", "]", ",", "\n", "peak_thld", "=", "self", ".", "config", "[", "'peak_thld'", "]", ")", "\n", "self", ".", "sift_wrapper", ".", "standardize", "=", "False", "# the network has handled this step.", "\n", "self", ".", "sift_wrapper", ".", "ori_off", "=", "self", ".", "config", "[", "'upright'", "]", "\n", "self", ".", "sift_wrapper", ".", "pyr_off", "=", "not", "self", ".", "config", "[", "'scale_diff'", "]", "\n", "self", ".", "sift_wrapper", ".", "create", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.rootsift_model.RootsiftModel._run": [[28, 35], ["numpy.squeeze().astype", "rootsift_model.RootsiftModel.sift_wrapper.detect", "rootsift_model.RootsiftModel.sift_wrapper.compute", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.detect", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.compute", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze"], ["", "def", "_run", "(", "self", ",", "data", ")", ":", "\n", "        ", "assert", "data", ".", "shape", "[", "-", "1", "]", "==", "1", "\n", "gray_img", "=", "np", ".", "squeeze", "(", "data", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# detect SIFT keypoints.", "\n", "npy_kpts", ",", "cv_kpts", "=", "self", ".", "sift_wrapper", ".", "detect", "(", "gray_img", ")", "\n", "sift_desc", "=", "self", ".", "sift_wrapper", ".", "compute", "(", "gray_img", ",", "cv_kpts", ")", "\n", "return", "npy_kpts", ",", "sift_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.rootsift_model.RootsiftModel._construct_network": [[36, 39], ["None"], "methods", ["None"], ["", "def", "_construct_network", "(", "self", ")", ":", "\n", "        ", "\"\"\"Model for patch description.\"\"\"", "\n", "return", "", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.reg_model.RegModel._init_model": [[13, 15], ["None"], "methods", ["None"], ["def", "_init_model", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.reg_model.RegModel._run": [[16, 26], ["max", "reg_model.RegModel.sess.run", "numpy.squeeze", "len", "cv2.resize", "numpy.expand_dims", "float"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze"], ["", "def", "_run", "(", "self", ",", "data", ")", ":", "\n", "# TODO: allow for larger batch size", "\n", "        ", "assert", "len", "(", "data", ".", "shape", ")", "==", "3", "\n", "max_dim", "=", "max", "(", "data", ".", "shape", "[", "0", "]", ",", "data", ".", "shape", "[", "1", "]", ")", "\n", "if", "max_dim", ">", "self", ".", "config", "[", "'max_dim'", "]", ":", "\n", "            ", "downsample_ratio", "=", "self", ".", "config", "[", "'max_dim'", "]", "/", "float", "(", "max_dim", ")", "\n", "data", "=", "cv2", ".", "resize", "(", "data", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "downsample_ratio", ",", "fy", "=", "downsample_ratio", ")", "\n", "", "feed_dict", "=", "{", "\"input:0\"", ":", "np", ".", "expand_dims", "(", "data", ",", "0", ")", "}", "\n", "returns", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output_tensors", ",", "feed_dict", "=", "feed_dict", ")", "\n", "return", "np", ".", "squeeze", "(", "returns", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.reg_model.RegModel._construct_network": [[27, 32], ["tensorflow.compat.v1.placeholder", "tensorflow.subtract", "cnn_wrapper.resnet.ResNet50"], "methods", ["None"], ["", "def", "_construct_network", "(", "self", ")", ":", "\n", "        ", "mean", "=", "[", "124.", ",", "117.", ",", "104.", "]", "\n", "ph_img", "=", "tf", ".", "compat", ".", "v1", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ",", "None", ",", "3", ")", ",", "name", "=", "'input'", ")", "\n", "ph_img", "=", "tf", ".", "subtract", "(", "ph_img", ",", "mean", ")", "\n", "net", "=", "ResNet50", "(", "{", "'data'", ":", "ph_img", "}", ",", "is_training", "=", "False", ",", "reuse", "=", "False", ",", "fcn", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.geodesc_model.GeodescModel._init_model": [[25, 36], ["utils.opencvhelper.SiftWrapper", "geodesc_model.GeodescModel.sift_wrapper.create"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.create"], ["def", "_init_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "sift_wrapper", "=", "SiftWrapper", "(", "\n", "n_feature", "=", "self", ".", "config", "[", "'n_feature'", "]", ",", "\n", "n_sample", "=", "self", ".", "config", "[", "'n_sample'", "]", ",", "\n", "peak_thld", "=", "self", ".", "config", "[", "'peak_thld'", "]", ",", "\n", "edge_thld", "=", "self", ".", "config", "[", "'edge_thld'", "]", "\n", ")", "\n", "self", ".", "sift_wrapper", ".", "standardize", "=", "True", "\n", "self", ".", "sift_wrapper", ".", "ori_off", "=", "self", ".", "config", "[", "'upright'", "]", "\n", "self", ".", "sift_wrapper", ".", "pyr_off", "=", "not", "self", ".", "config", "[", "'scale_diff'", "]", "\n", "self", ".", "sift_wrapper", ".", "create", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.geodesc_model.GeodescModel._run": [[37, 83], ["numpy.squeeze().astype", "geodesc_model.GeodescModel.sift_wrapper.detect", "len", "geodesc_model.GeodescModel.sift_wrapper.build_pyramid", "geodesc_model.GeodescModel.sift_wrapper.get_patches", "queue.Queue", "threading.Thread", "threading.Thread.start", "range", "queue.Queue.put", "threading.Thread.join", "numpy.concatenate", "int", "int", "queue.Queue.get", "sess.run", "numpy.concatenate.append", "queue.Queue.task_done", "numpy.squeeze", "numpy.floor", "queue.Queue.put", "queue.Queue.put", "len", "numpy.expand_dims", "float", "float", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.detect", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.build_pyramid", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.opencvhelper.SiftWrapper.get_patches", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze"], ["", "def", "_run", "(", "self", ",", "data", ",", "**", "kwargs", ")", ":", "\n", "        ", "def", "_worker", "(", "patch_queue", ",", "sess", ",", "loc_feat", ")", ":", "\n", "            ", "\"\"\"The worker thread.\"\"\"", "\n", "while", "True", ":", "\n", "                ", "patch_data", "=", "patch_queue", ".", "get", "(", ")", "\n", "if", "patch_data", "is", "None", ":", "\n", "                    ", "return", "\n", "", "loc_returns", "=", "sess", ".", "run", "(", "self", ".", "output_tensors", ",", "\n", "feed_dict", "=", "{", "\"input:0\"", ":", "np", ".", "expand_dims", "(", "patch_data", ",", "-", "1", ")", "}", ")", "\n", "loc_returns", "=", "loc_returns", "[", "0", "]", "\n", "if", "len", "(", "loc_returns", ".", "shape", ")", "==", "1", ":", "\n", "                    ", "loc_returns", "=", "np", ".", "expand_dims", "(", "loc_returns", ",", "axis", "=", "0", ")", "\n", "", "loc_feat", ".", "append", "(", "loc_returns", ")", "\n", "patch_queue", ".", "task_done", "(", ")", "\n", "", "", "gray_img", "=", "np", ".", "squeeze", "(", "data", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# detect SIFT keypoints.", "\n", "npy_kpts", ",", "cv_kpts", "=", "self", ".", "sift_wrapper", ".", "detect", "(", "gray_img", ")", "\n", "num_patch", "=", "len", "(", "cv_kpts", ")", "\n", "\n", "self", ".", "sift_wrapper", ".", "build_pyramid", "(", "gray_img", ")", "\n", "all_patches", "=", "self", ".", "sift_wrapper", ".", "get_patches", "(", "cv_kpts", ")", "\n", "# get iteration number", "\n", "batch_size", "=", "self", ".", "config", "[", "'batch_size'", "]", "\n", "if", "num_patch", "%", "batch_size", ">", "0", ":", "\n", "            ", "loop_num", "=", "int", "(", "np", ".", "floor", "(", "float", "(", "num_patch", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "loop_num", "=", "int", "(", "num_patch", "/", "batch_size", "-", "1", ")", "\n", "# create input thread", "\n", "", "loc_feat", "=", "[", "]", "\n", "patch_queue", "=", "Queue", "(", ")", "\n", "worker_thread", "=", "Thread", "(", "target", "=", "_worker", ",", "args", "=", "(", "patch_queue", ",", "self", ".", "sess", ",", "loc_feat", ")", ")", "\n", "worker_thread", ".", "daemon", "=", "True", "\n", "worker_thread", ".", "start", "(", ")", "\n", "# enqueue", "\n", "for", "i", "in", "range", "(", "loop_num", "+", "1", ")", ":", "\n", "            ", "if", "i", "<", "loop_num", ":", "\n", "                ", "patch_queue", ".", "put", "(", "all_patches", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "", "else", ":", "\n", "                ", "patch_queue", ".", "put", "(", "all_patches", "[", "i", "*", "batch_size", ":", "]", ")", "\n", "# poison pill", "\n", "", "", "patch_queue", ".", "put", "(", "None", ")", "\n", "# wait for extraction.", "\n", "worker_thread", ".", "join", "(", ")", "\n", "loc_feat", "=", "np", ".", "concatenate", "(", "loc_feat", ",", "axis", "=", "0", ")", "\n", "loc_feat", "=", "(", "loc_feat", "*", "128", "+", "128", ")", "\n", "return", "npy_kpts", ",", "loc_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.geodesc_model.GeodescModel._construct_network": [[84, 87], ["None"], "methods", ["None"], ["", "def", "_construct_network", "(", "self", ")", ":", "\n", "        ", "\"\"\"Model for patch description.\"\"\"", "\n", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.aug_model.AugModel._init_model": [[12, 14], ["None"], "methods", ["None"], ["def", "_init_model", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.aug_model.AugModel._run": [[15, 33], ["aug_model.AugModel.sess.run", "numpy.squeeze", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze"], ["", "def", "_run", "(", "self", ",", "data", ")", ":", "\n", "        ", "reg_feat", "=", "data", "[", "0", "]", "\n", "loc_info", "=", "data", "[", "1", "]", "\n", "raw_kpts", "=", "loc_info", "[", ":", ",", "0", ":", "5", "]", "\n", "npy_kpts", "=", "loc_info", "[", ":", ",", "5", ":", "7", "]", "\n", "loc_feat", "=", "loc_info", "[", ":", ",", "7", ":", "-", "1", "]", "\n", "kpt_mb", "=", "loc_info", "[", ":", ",", "-", "1", "]", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "returns", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "output_tensors", ",", "feed_dict", "=", "{", "\n", "\"input/local_feat:0\"", ":", "np", ".", "expand_dims", "(", "loc_feat", ",", "0", ")", ",", "\n", "\"input/regional_feat:0\"", ":", "np", ".", "expand_dims", "(", "reg_feat", ",", "0", ")", ",", "\n", "\"input/kpt_m:0\"", ":", "np", ".", "expand_dims", "(", "kpt_mb", ",", "0", ")", ",", "\n", "\"input/kpt_xy:0\"", ":", "np", ".", "expand_dims", "(", "npy_kpts", ",", "0", ")", ",", "\n", "}", ")", "\n", "aug_feat", "=", "np", ".", "squeeze", "(", "returns", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "config", "[", "'quantz'", "]", ":", "\n", "            ", "aug_feat", "=", "(", "aug_feat", "*", "128", "+", "128", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "return", "aug_feat", ",", "raw_kpts", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.aug_model.AugModel._construct_network": [[34, 63], ["tensorflow.add_n", "tensorflow.nn.l2_normalize", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.variable_scope", "cnn_wrapper.augdesc.VisualContext", "cnn_wrapper.augdesc.VisualContext.get_output", "tensorflow.nn.l2_normalize.append", "tensorflow.variable_scope", "tensorflow.concat", "cnn_wrapper.augdesc.LightContextNormalization", "cnn_wrapper.augdesc.LightContextNormalization.get_output", "tensorflow.nn.l2_normalize.append", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.concat", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output"], ["", "def", "_construct_network", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'input'", ")", ":", "\n", "            ", "ph_local_feat", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ",", "128", ")", ",", "name", "=", "'local_feat'", ")", "\n", "ph_regional_feat", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "\n", "None", ",", "None", ",", "None", ",", "self", ".", "config", "[", "'reg_feat_dim'", "]", ")", ",", "name", "=", "'regional_feat'", ")", "\n", "ph_kpt_m", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ",", "1", ")", ",", "name", "=", "'kpt_m'", ")", "\n", "ph_kpt_xy", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", "\n", "None", ",", "None", ",", "2", ")", ",", "name", "=", "'kpt_xy'", ")", "\n", "\n", "", "aug_feat", "=", "[", "ph_local_feat", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'vis_context'", ")", ":", "\n", "            ", "pt_tower", "=", "VisualContext", "(", "\n", "{", "'img_feat'", ":", "ph_regional_feat", ",", "'local_feat'", ":", "ph_local_feat", ",", "'kpt_param'", ":", "ph_kpt_xy", "}", ",", "\n", "is_training", "=", "False", ",", "reuse", "=", "False", ")", "\n", "vis_feat", "=", "pt_tower", ".", "get_output", "(", ")", "\n", "aug_feat", ".", "append", "(", "vis_feat", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'geo_context'", ")", ":", "\n", "            ", "points", "=", "tf", ".", "concat", "(", "[", "ph_kpt_m", ",", "ph_kpt_xy", "]", ",", "axis", "=", "2", ")", "\n", "feat_trans", "=", "LightContextNormalization", "(", "{", "'points'", ":", "tf", ".", "expand_dims", "(", "points", ",", "axis", "=", "2", ")", ",", "\n", "'local_feat'", ":", "ph_local_feat", "}", ",", "\n", "is_training", "=", "False", ",", "reuse", "=", "False", ")", "\n", "geo_feat", "=", "feat_trans", ".", "get_output", "(", ")", "\n", "aug_feat", ".", "append", "(", "geo_feat", ")", "\n", "\n", "", "aug_feat", "=", "tf", ".", "add_n", "(", "aug_feat", ")", "\n", "aug_feat", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "aug_feat", ",", "axis", "=", "-", "1", ",", "name", "=", "'l2norm'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__.get_model": [[1, 4], ["__import__", "getattr", "__init__._module_to_class"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__._module_to_class"], [""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.__init__._module_to_class": [[6, 8], ["n.capitalize", "name.split"], "function", ["None"], []], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel._run": [[40, 43], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "_run", "(", "self", ",", "data", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel._init_model": [[44, 47], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_init_model", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel._construct_network": [[48, 51], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_construct_network", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.run_test_data": [[52, 56], ["base_model.BaseModel._run"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel._run"], ["", "def", "run_test_data", "(", "self", ",", "data", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "out_data", "=", "self", ".", "_run", "(", "data", ",", "**", "kwargs", ")", "\n", "return", "out_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.__init__": [[57, 82], ["base_model.dict_update", "base_model.BaseModel._init_model", "getattr", "print", "tensorflow.compat.v1.ConfigProto", "os.path.splitext", "ext.find", "utils.tf.load_frozen_model", "tensorflow.compat.v1.Session", "ext.find", "tensorflow.compat.v1.Session", "os.path.join", "os.path.exists", "base_model.BaseModel._construct_network", "utils.tf.recoverer", "utils.tf.recoverer"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.dict_update", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel._init_model", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.tf.load_frozen_model", "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel._construct_network", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.tf.recoverer", "home.repos.pwc.inspect_result.lzx551402_contextdesc.utils.tf.recoverer"], ["", "def", "__init__", "(", "self", ",", "model_path", ",", "**", "config", ")", ":", "\n", "        ", "self", ".", "model_path", "=", "model_path", "\n", "# Update config", "\n", "self", ".", "config", "=", "dict_update", "(", "getattr", "(", "self", ",", "'default_config'", ",", "{", "}", ")", ",", "config", ")", "\n", "self", ".", "_init_model", "(", ")", "\n", "if", "model_path", "is", "None", ":", "\n", "            ", "print", "(", "\"No pretrained model specified!\"", ")", "\n", "self", ".", "sess", "=", "None", "\n", "", "else", ":", "\n", "            ", "ext", "=", "os", ".", "path", ".", "splitext", "(", "model_path", ")", "[", "1", "]", "\n", "\n", "sess_config", "=", "tf", ".", "compat", ".", "v1", ".", "ConfigProto", "(", ")", "\n", "sess_config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "if", "ext", ".", "find", "(", "'.pb'", ")", "==", "0", ":", "\n", "                ", "graph", "=", "load_frozen_model", "(", "self", ".", "model_path", ",", "print_nodes", "=", "False", ")", "\n", "self", ".", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "graph", "=", "graph", ",", "config", "=", "sess_config", ")", "\n", "", "elif", "ext", ".", "find", "(", "'.ckpt'", ")", "==", "0", ":", "\n", "                ", "self", ".", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "config", "=", "sess_config", ")", "\n", "meta_graph_path", "=", "os", ".", "path", ".", "join", "(", "model_path", "+", "'.meta'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "meta_graph_path", ")", ":", "\n", "                    ", "self", ".", "_construct_network", "(", ")", "\n", "recoverer", "(", "self", ".", "sess", ",", "model_path", ")", "\n", "", "else", ":", "\n", "                    ", "recoverer", "(", "self", ".", "sess", ",", "model_path", ",", "meta_graph_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.close": [[83, 87], ["base_model.BaseModel.sess.close", "tensorflow.compat.v1.reset_default_graph"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.BaseModel.close"], ["", "", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "sess", "is", "not", "None", ":", "\n", "            ", "self", ".", "sess", ".", "close", "(", ")", "\n", "tf", ".", "compat", ".", "v1", ".", "reset_default_graph", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.dict_update": [[19, 35], ["u.items", "isinstance", "base_model.dict_update", "d.get"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.models.base_model.dict_update"], ["def", "dict_update", "(", "d", ",", "u", ")", ":", "\n", "    ", "\"\"\"Improved update for nested dictionaries.\n\n    Arguments:\n        d: The dictionary to be updated.\n        u: The update dictionary.\n\n    Returns:\n        The updated dictionary.\n    \"\"\"", "\n", "for", "k", ",", "v", "in", "u", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "collections", ".", "Mapping", ")", ":", "\n", "            ", "d", "[", "k", "]", "=", "dict_update", "(", "d", ".", "get", "(", "k", ",", "{", "}", ")", ",", "v", ")", "\n", "", "else", ":", "\n", "            ", "d", "[", "k", "]", "=", "v", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.descnet.GeoDesc.setup": [[7, 17], ["descnet.GeoDesc.feed().conv_bn().conv_bn().conv_bn().conv_bn().conv_bn().conv_bn().conv().l2norm().squeeze", "descnet.GeoDesc.feed().conv_bn().conv_bn().conv_bn().conv_bn().conv_bn().conv_bn().conv().l2norm", "descnet.GeoDesc.feed().conv_bn().conv_bn().conv_bn().conv_bn().conv_bn().conv_bn().conv", "descnet.GeoDesc.feed().conv_bn().conv_bn().conv_bn().conv_bn().conv_bn().conv_bn", "descnet.GeoDesc.feed().conv_bn().conv_bn().conv_bn().conv_bn().conv_bn", "descnet.GeoDesc.feed().conv_bn().conv_bn().conv_bn().conv_bn", "descnet.GeoDesc.feed().conv_bn().conv_bn().conv_bn", "descnet.GeoDesc.feed().conv_bn().conv_bn", "descnet.GeoDesc.feed().conv_bn", "descnet.GeoDesc.feed"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.l2norm", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed"], ["def", "setup", "(", "self", ")", ":", "\n", "        ", "(", "self", ".", "feed", "(", "'data'", ")", "\n", ".", "conv_bn", "(", "3", ",", "32", ",", "1", ",", "name", "=", "'conv0'", ")", "\n", ".", "conv_bn", "(", "3", ",", "32", ",", "1", ",", "name", "=", "'conv1'", ")", "\n", ".", "conv_bn", "(", "3", ",", "64", ",", "2", ",", "name", "=", "'conv2'", ")", "\n", ".", "conv_bn", "(", "3", ",", "64", ",", "1", ",", "name", "=", "'conv3'", ")", "\n", ".", "conv_bn", "(", "3", ",", "128", ",", "2", ",", "name", "=", "'conv4'", ")", "\n", ".", "conv_bn", "(", "3", ",", "128", ",", "1", ",", "name", "=", "'conv5'", ")", "\n", ".", "conv", "(", "8", ",", "128", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "padding", "=", "'VALID'", ",", "name", "=", "'conv6'", ")", "\n", ".", "l2norm", "(", "name", "=", "'l2norm'", ")", ".", "squeeze", "(", "axis", "=", "[", "1", ",", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.descnet.DenseGeoDesc.setup": [[22, 41], ["descnet.DenseGeoDesc.feed().conv_bn().conv_bn().conv_bn().conv_bn().conv_bn().conv_bn", "patch_sampler", "descnet.DenseGeoDesc.feed().conv().l2norm().squeeze", "descnet.DenseGeoDesc.feed().conv_bn().conv_bn().conv_bn().conv_bn().conv_bn", "descnet.DenseGeoDesc.feed().conv().l2norm", "descnet.DenseGeoDesc.feed().conv_bn().conv_bn().conv_bn().conv_bn", "descnet.DenseGeoDesc.feed().conv", "descnet.DenseGeoDesc.feed().conv_bn().conv_bn().conv_bn", "descnet.DenseGeoDesc.feed", "descnet.DenseGeoDesc.feed().conv_bn().conv_bn", "descnet.DenseGeoDesc.feed().conv_bn", "descnet.DenseGeoDesc.feed"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.l2norm", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed"], ["def", "setup", "(", "self", ")", ":", "\n", "# detection parameter", "\n", "        ", "(", "self", ".", "feed", "(", "'data'", ")", "\n", ".", "conv_bn", "(", "3", ",", "32", ",", "1", ",", "name", "=", "'conv0'", ")", "\n", ".", "conv_bn", "(", "3", ",", "32", ",", "1", ",", "name", "=", "'conv1'", ")", "\n", ".", "conv_bn", "(", "3", ",", "64", ",", "2", ",", "name", "=", "'conv2'", ")", "\n", ".", "conv_bn", "(", "3", ",", "64", ",", "1", ",", "name", "=", "'conv3'", ")", "\n", ".", "conv_bn", "(", "3", ",", "128", ",", "2", ",", "name", "=", "'conv4'", ")", "\n", ".", "conv_bn", "(", "3", ",", "128", ",", "1", ",", "name", "=", "'conv5'", ")", ")", "\n", "\n", "patch_sampler", "=", "self", ".", "extra_args", "[", "'patch_sampler'", "]", "\n", "pert_theta", "=", "self", ".", "extra_args", "[", "'pert_theta'", "]", "\n", "\n", "patches", "=", "patch_sampler", "(", "self", ".", "layers", "[", "'conv5'", "]", ",", "pert_theta", ",", "(", "8", ",", "8", ")", ",", "True", ")", "\n", "self", ".", "layers", "[", "'conv5'", "]", "=", "patches", "\n", "\n", "(", "self", ".", "feed", "(", "'conv5'", ")", "\n", ".", "conv", "(", "8", ",", "128", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "padding", "=", "'VALID'", ",", "name", "=", "'conv6'", ")", "\n", ".", "l2norm", "(", "name", "=", "'l2norm'", ")", ".", "squeeze", "(", "axis", "=", "[", "1", ",", "2", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.__init__": [[74, 104], ["isinstance", "tensorflow.contrib.layers.l2_regularizer", "dict", "network.Network.setup"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.augdesc.DiffPoolContextNormalization.setup"], ["def", "__init__", "(", "self", ",", "inputs", ",", "is_training", ",", "\n", "dropout_rate", "=", "0.5", ",", "seed", "=", "None", ",", "epsilon", "=", "1e-5", ",", "reuse", "=", "False", ",", "fcn", "=", "True", ",", "regularize", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "# The input nodes for this network", "\n", "        ", "self", ".", "inputs", "=", "inputs", "\n", "# If true, the resulting variables are set as trainable", "\n", "self", ".", "trainable", "=", "is_training", "if", "isinstance", "(", "is_training", ",", "bool", ")", "else", "True", "\n", "# If true, variables are shared between feature towers", "\n", "self", ".", "reuse", "=", "reuse", "\n", "# If true, layers like batch normalization or dropout are working in training mode", "\n", "self", ".", "training", "=", "is_training", "\n", "# Dropout rate", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "# Seed for randomness", "\n", "self", ".", "seed", "=", "seed", "\n", "# Add regularizer for parameters.", "\n", "self", ".", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "1.0", ")", "if", "regularize", "else", "None", "\n", "# The epsilon paramater in BN layer.", "\n", "self", ".", "bn_epsilon", "=", "epsilon", "\n", "self", ".", "extra_args", "=", "kwargs", "\n", "# Endpoints.", "\n", "self", ".", "endpoints", "=", "[", "]", "\n", "if", "inputs", "is", "not", "None", ":", "\n", "# The current list of terminal nodes", "\n", "            ", "self", ".", "terminals", "=", "[", "]", "\n", "# Mapping from layer names to layers", "\n", "self", ".", "layers", "=", "dict", "(", "inputs", ")", "\n", "# If true, dense layers will be omitted in network construction", "\n", "self", ".", "fcn", "=", "fcn", "\n", "self", ".", "setup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.setup": [[105, 108], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "setup", "(", "self", ")", ":", "\n", "        ", "'''Construct the network. '''", "\n", "raise", "NotImplementedError", "(", "'Must be implemented by the subclass.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.load": [[109, 141], ["numpy.load().item", "session.run", "exclude_var.split", "numpy.load", "tensorflow.variable_scope", "data_dict[].items", "op_name.find", "tensorflow.get_variable", "assign_op.append", "tensorflow.get_variable.assign", "print"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.load"], ["", "def", "load", "(", "self", ",", "data_path", ",", "session", ",", "ignore_missing", "=", "False", ",", "exclude_var", "=", "None", ")", ":", "\n", "        ", "'''Load network weights.\n        data_path: The path to the numpy-serialized network weights\n        session: The current TensorFlow session\n        ignore_missing: If true, serialized weights for missing layers are ignored.\n        '''", "\n", "data_dict", "=", "np", ".", "load", "(", "data_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "if", "exclude_var", "is", "not", "None", ":", "\n", "            ", "keyword", "=", "exclude_var", ".", "split", "(", "','", ")", "\n", "", "assign_op", "=", "[", "]", "\n", "for", "op_name", "in", "data_dict", ":", "\n", "            ", "if", "exclude_var", "is", "not", "None", ":", "\n", "                ", "find_keyword", "=", "False", "\n", "for", "tmp_keyword", "in", "keyword", ":", "\n", "                    ", "if", "op_name", ".", "find", "(", "tmp_keyword", ")", ">=", "0", ":", "\n", "                        ", "find_keyword", "=", "True", "\n", "", "", "if", "find_keyword", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "op_name", ",", "reuse", "=", "True", ")", ":", "\n", "                ", "for", "param_name", ",", "data", "in", "data_dict", "[", "op_name", "]", ".", "items", "(", ")", ":", "\n", "\n", "                    ", "try", ":", "\n", "                        ", "var", "=", "tf", ".", "get_variable", "(", "param_name", ")", "\n", "assign_op", ".", "append", "(", "var", ".", "assign", "(", "data", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "if", "not", "ignore_missing", ":", "\n", "                            ", "raise", "\n", "", "else", ":", "\n", "                            ", "print", "(", "Notify", ".", "WARNING", ",", "':'", ".", "join", "(", "\n", "[", "op_name", ",", "param_name", "]", ")", ",", "\"is omitted.\"", ",", "Notify", ".", "ENDC", ")", "\n", "", "", "", "", "", "session", ".", "run", "(", "assign_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed": [[142, 156], ["isinstance", "network.Network.terminals.append", "KeyError"], "methods", ["None"], ["", "def", "feed", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "'''Set the input(s) for the next operation by replacing the terminal nodes.\n        The arguments can be either layer names or the actual layers.\n        '''", "\n", "assert", "args", "\n", "self", ".", "terminals", "=", "[", "]", "\n", "for", "fed_layer", "in", "args", ":", "\n", "            ", "if", "isinstance", "(", "fed_layer", ",", "str", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "fed_layer", "=", "self", ".", "layers", "[", "fed_layer", "]", "\n", "", "except", "KeyError", ":", "\n", "                    ", "raise", "KeyError", "(", "'Unknown layer name fed: %s'", "%", "fed_layer", ")", "\n", "", "", "self", ".", "terminals", ".", "append", "(", "fed_layer", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output": [[157, 160], ["None"], "methods", ["None"], ["", "def", "get_output", "(", "self", ")", ":", "\n", "        ", "'''Returns the current network output.'''", "\n", "return", "self", ".", "terminals", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_output_by_name": [[161, 168], ["None"], "methods", ["None"], ["", "def", "get_output_by_name", "(", "self", ",", "layer_name", ")", ":", "\n", "        ", "'''\n        Get graph node by layer name\n        :param layer_name: layer name string\n        :return: tf node\n        '''", "\n", "return", "self", ".", "layers", "[", "layer_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_unique_name": [[169, 175], ["sum", "t.startswith", "network.Network.layers.items"], "methods", ["None"], ["", "def", "get_unique_name", "(", "self", ",", "prefix", ")", ":", "\n", "        ", "'''Returns an index-suffixed unique name for the given prefix.\n        This is used for auto-generating layer names based on the type-prefix.\n        '''", "\n", "ident", "=", "sum", "(", "t", ".", "startswith", "(", "prefix", ")", "for", "t", ",", "_", "in", "self", ".", "layers", ".", "items", "(", ")", ")", "+", "1", "\n", "return", "'%s_%d'", "%", "(", "prefix", ",", "ident", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.change_inputs": [[176, 180], ["len"], "methods", ["None"], ["", "def", "change_inputs", "(", "self", ",", "input_tensors", ")", ":", "\n", "        ", "assert", "len", "(", "input_tensors", ")", "==", "1", "\n", "for", "key", "in", "input_tensors", ":", "\n", "            ", "self", ".", "layers", "[", "key", "]", "=", "input_tensors", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv": [[181, 235], ["isinstance", "network.caffe_like_padding", "len", "input_tensor.get_shape", "tensorflow.compat.v1.layers.conv2d", "tensorflow.layers.separable_conv2d", "len", "ValueError", "input_tensor.get_shape", "tensorflow.layers.conv3d", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.caffe_like_padding"], ["", "", "@", "layer", "\n", "def", "conv", "(", "self", ",", "\n", "input_tensor", ",", "\n", "kernel_size", ",", "\n", "filters", ",", "\n", "strides", ",", "\n", "name", ",", "\n", "relu", "=", "True", ",", "\n", "dilation_rate", "=", "1", ",", "\n", "padding", "=", "DEFAULT_PADDING", ",", "\n", "biased", "=", "True", ",", "\n", "reuse", "=", "False", ",", "\n", "kernel_init", "=", "None", ",", "\n", "bias_init", "=", "tf", ".", "zeros_initializer", ",", "\n", "separable", "=", "False", ")", ":", "\n", "        ", "\"\"\"2D/3D convolution.\"\"\"", "\n", "kwargs", "=", "{", "'filters'", ":", "filters", ",", "\n", "'kernel_size'", ":", "kernel_size", ",", "\n", "'strides'", ":", "strides", ",", "\n", "'activation'", ":", "tf", ".", "nn", ".", "relu", "if", "relu", "else", "None", ",", "\n", "'use_bias'", ":", "biased", ",", "\n", "'dilation_rate'", ":", "dilation_rate", ",", "\n", "'trainable'", ":", "self", ".", "trainable", ",", "\n", "'reuse'", ":", "self", ".", "reuse", "or", "reuse", ",", "\n", "'bias_regularizer'", ":", "self", ".", "regularizer", "if", "biased", "else", "None", ",", "\n", "'kernel_initializer'", ":", "kernel_init", ",", "\n", "'bias_initializer'", ":", "bias_init", ",", "\n", "'name'", ":", "name", "}", "\n", "\n", "if", "separable", ":", "\n", "            ", "kwargs", "[", "'depthwise_regularizer'", "]", "=", "self", ".", "regularizer", "\n", "kwargs", "[", "'pointwise_regularizer'", "]", "=", "self", ".", "regularizer", "\n", "", "else", ":", "\n", "            ", "kwargs", "[", "'kernel_regularizer'", "]", "=", "self", ".", "regularizer", "\n", "\n", "", "if", "isinstance", "(", "padding", ",", "str", ")", ":", "\n", "            ", "padded_input", "=", "input_tensor", "\n", "kwargs", "[", "'padding'", "]", "=", "padding", "\n", "", "else", ":", "\n", "            ", "padded_input", "=", "caffe_like_padding", "(", "input_tensor", ",", "padding", ")", "\n", "kwargs", "[", "'padding'", "]", "=", "'VALID'", "\n", "\n", "", "if", "len", "(", "input_tensor", ".", "get_shape", "(", ")", ")", "==", "4", ":", "\n", "            ", "if", "not", "separable", ":", "\n", "                ", "return", "tf", ".", "compat", ".", "v1", ".", "layers", ".", "conv2d", "(", "padded_input", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                ", "return", "tf", ".", "layers", ".", "separable_conv2d", "(", "padded_input", ",", "**", "kwargs", ")", "\n", "", "", "elif", "len", "(", "input_tensor", ".", "get_shape", "(", ")", ")", "==", "5", ":", "\n", "            ", "if", "not", "separable", ":", "\n", "                ", "return", "tf", ".", "layers", ".", "conv3d", "(", "padded_input", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'No official implementation for separable_conv3d'", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Improper input rank for layer: '", "+", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn": [[236, 257], ["network.Network.conv", "network.Network.batch_normalization"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization"], ["", "", "@", "layer", "\n", "def", "conv_bn", "(", "self", ",", "\n", "input_tensor", ",", "\n", "kernel_size", ",", "\n", "filters", ",", "\n", "strides", ",", "\n", "name", ",", "\n", "relu", "=", "True", ",", "\n", "center", "=", "False", ",", "\n", "scale", "=", "False", ",", "\n", "dilation_rate", "=", "1", ",", "\n", "padding", "=", "DEFAULT_PADDING", ",", "\n", "biased", "=", "False", ",", "\n", "separable", "=", "False", ",", "\n", "reuse", "=", "False", ")", ":", "\n", "        ", "conv", "=", "self", ".", "conv", "(", "input_tensor", ",", "kernel_size", ",", "filters", ",", "strides", ",", "name", ",", "relu", "=", "False", ",", "\n", "dilation_rate", "=", "dilation_rate", ",", "padding", "=", "padding", ",", "\n", "biased", "=", "biased", ",", "reuse", "=", "reuse", ",", "separable", "=", "separable", ")", "\n", "conv_bn", "=", "self", ".", "batch_normalization", "(", "conv", ",", "name", "+", "'/bn'", ",", "\n", "center", "=", "center", ",", "scale", "=", "scale", ",", "relu", "=", "relu", ",", "reuse", "=", "reuse", ")", "\n", "return", "conv_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.deconv": [[258, 294], ["isinstance", "network.caffe_like_padding", "len", "tensorflow.layers.conv2d_transpose", "input_tensor.get_shape", "len", "tensorflow.layers.conv3d_transpose", "ValueError", "input_tensor.get_shape"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.caffe_like_padding"], ["", "@", "layer", "\n", "def", "deconv", "(", "self", ",", "\n", "input_tensor", ",", "\n", "kernel_size", ",", "\n", "filters", ",", "\n", "strides", ",", "\n", "name", ",", "\n", "relu", "=", "True", ",", "\n", "padding", "=", "DEFAULT_PADDING", ",", "\n", "biased", "=", "True", ",", "\n", "reuse", "=", "False", ")", ":", "\n", "        ", "\"\"\"2D/3D deconvolution.\"\"\"", "\n", "kwargs", "=", "{", "'filters'", ":", "filters", ",", "\n", "'kernel_size'", ":", "kernel_size", ",", "\n", "'strides'", ":", "strides", ",", "\n", "'activation'", ":", "tf", ".", "nn", ".", "relu", "if", "relu", "else", "None", ",", "\n", "'use_bias'", ":", "biased", ",", "\n", "'trainable'", ":", "self", ".", "trainable", ",", "\n", "'reuse'", ":", "self", ".", "reuse", "or", "reuse", ",", "\n", "'kernel_regularizer'", ":", "self", ".", "regularizer", ",", "\n", "'bias_regularizer'", ":", "self", ".", "regularizer", "if", "biased", "else", "None", ",", "\n", "'name'", ":", "name", "}", "\n", "\n", "if", "isinstance", "(", "padding", ",", "str", ")", ":", "\n", "            ", "padded_input", "=", "input_tensor", "\n", "kwargs", "[", "'padding'", "]", "=", "padding", "\n", "", "else", ":", "\n", "            ", "padded_input", "=", "caffe_like_padding", "(", "input_tensor", ",", "padding", ")", "\n", "kwargs", "[", "'padding'", "]", "=", "'VALID'", "\n", "\n", "", "if", "len", "(", "input_tensor", ".", "get_shape", "(", ")", ")", "==", "4", ":", "\n", "            ", "return", "tf", ".", "layers", ".", "conv2d_transpose", "(", "padded_input", ",", "**", "kwargs", ")", "\n", "", "elif", "len", "(", "input_tensor", ".", "get_shape", "(", ")", ")", "==", "5", ":", "\n", "            ", "return", "tf", ".", "layers", ".", "conv3d_transpose", "(", "padded_input", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Improper input rank for layer: '", "+", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.deconv_bn": [[295, 313], ["network.Network.deconv", "network.Network.batch_normalization"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.deconv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization"], ["", "", "@", "layer", "\n", "def", "deconv_bn", "(", "self", ",", "\n", "input_tensor", ",", "\n", "kernel_size", ",", "\n", "filters", ",", "\n", "strides", ",", "\n", "name", ",", "\n", "relu", "=", "True", ",", "\n", "center", "=", "False", ",", "\n", "scale", "=", "False", ",", "\n", "padding", "=", "DEFAULT_PADDING", ",", "\n", "biased", "=", "False", ",", "\n", "reuse", "=", "False", ")", ":", "\n", "        ", "deconv", "=", "self", ".", "deconv", "(", "input_tensor", ",", "kernel_size", ",", "filters", ",", "strides", ",", "name", ",", "\n", "relu", "=", "False", ",", "padding", "=", "padding", ",", "biased", "=", "biased", ",", "reuse", "=", "reuse", ")", "\n", "deconv_bn", "=", "self", ".", "batch_normalization", "(", "deconv", ",", "name", "+", "'/bn'", ",", "\n", "center", "=", "center", ",", "scale", "=", "scale", ",", "relu", "=", "relu", ",", "reuse", "=", "reuse", ")", "\n", "return", "deconv_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu": [[314, 318], ["tensorflow.nn.relu"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu"], ["", "@", "layer", "\n", "def", "relu", "(", "self", ",", "input_tensor", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"ReLu activation.\"\"\"", "\n", "return", "tf", ".", "nn", ".", "relu", "(", "input_tensor", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.max_pool": [[319, 334], ["isinstance", "tensorflow.layers.max_pooling2d", "network.caffe_like_padding"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.caffe_like_padding"], ["", "@", "layer", "\n", "def", "max_pool", "(", "self", ",", "input_tensor", ",", "pool_size", ",", "strides", ",", "name", ",", "padding", "=", "DEFAULT_PADDING", ")", ":", "\n", "        ", "\"\"\"Max pooling.\"\"\"", "\n", "if", "isinstance", "(", "padding", ",", "str", ")", ":", "\n", "            ", "padded_input", "=", "input_tensor", "\n", "padding_type", "=", "padding", "\n", "", "else", ":", "\n", "            ", "padded_input", "=", "caffe_like_padding", "(", "input_tensor", ",", "padding", ")", "\n", "padding_type", "=", "'VALID'", "\n", "\n", "", "return", "tf", ".", "layers", ".", "max_pooling2d", "(", "padded_input", ",", "\n", "pool_size", "=", "pool_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding_type", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.avg_pool": [[335, 349], ["isinstance", "tensorflow.layers.average_pooling2d", "network.caffe_like_padding"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.caffe_like_padding"], ["", "@", "layer", "\n", "def", "avg_pool", "(", "self", ",", "input_tensor", ",", "pool_size", ",", "strides", ",", "name", ",", "padding", "=", "DEFAULT_PADDING", ")", ":", "\n", "        ", "\"\"\"\"Average pooling.\"\"\"", "\n", "if", "isinstance", "(", "padding", ",", "str", ")", ":", "\n", "            ", "padded_input", "=", "input_tensor", "\n", "padding_type", "=", "padding", "\n", "", "else", ":", "\n", "            ", "padded_input", "=", "caffe_like_padding", "(", "input_tensor", ",", "padding", ")", "\n", "padding_type", "=", "'VALID'", "\n", "", "return", "tf", ".", "layers", ".", "average_pooling2d", "(", "padded_input", ",", "\n", "pool_size", "=", "pool_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding_type", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.concat": [[350, 353], ["tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.concat"], ["", "@", "layer", "\n", "def", "concat", "(", "self", ",", "input_tensors", ",", "axis", ",", "name", ")", ":", "\n", "        ", "return", "tf", ".", "concat", "(", "values", "=", "input_tensors", ",", "axis", "=", "axis", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add": [[354, 357], ["tensorflow.add_n"], "methods", ["None"], ["", "@", "layer", "\n", "def", "add", "(", "self", ",", "input_tensors", ",", "name", ")", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "input_tensors", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.fc": [[358, 374], ["tensorflow.layers.dense", "tensorflow.layers.flatten"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.flatten"], ["", "@", "layer", "\n", "def", "fc", "(", "self", ",", "input_tensor", ",", "num_out", ",", "name", ",", "biased", "=", "True", ",", "relu", "=", "True", ",", "flatten", "=", "True", ",", "reuse", "=", "False", ")", ":", "\n", "# To behave same to Caffe.", "\n", "        ", "if", "flatten", ":", "\n", "            ", "flatten_tensor", "=", "tf", ".", "layers", ".", "flatten", "(", "input_tensor", ")", "\n", "", "else", ":", "\n", "            ", "flatten_tensor", "=", "input_tensor", "\n", "", "return", "tf", ".", "layers", ".", "dense", "(", "flatten_tensor", ",", "\n", "units", "=", "num_out", ",", "\n", "use_bias", "=", "biased", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", "if", "relu", "else", "None", ",", "\n", "trainable", "=", "self", ".", "trainable", ",", "\n", "reuse", "=", "self", ".", "reuse", "or", "reuse", ",", "\n", "kernel_regularizer", "=", "self", ".", "regularizer", ",", "\n", "bias_regularizer", "=", "self", ".", "regularizer", "if", "biased", "else", "None", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.fc_bn": [[375, 384], ["network.Network.fc", "network.Network.batch_normalization"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.fc", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization"], ["", "@", "layer", "\n", "def", "fc_bn", "(", "self", ",", "input_tensor", ",", "num_out", ",", "name", ",", "\n", "biased", "=", "False", ",", "relu", "=", "True", ",", "center", "=", "False", ",", "scale", "=", "False", ",", "flatten", "=", "True", ",", "reuse", "=", "False", ")", ":", "\n", "# To behave same to Caffe.", "\n", "        ", "fc", "=", "self", ".", "fc", "(", "input_tensor", ",", "num_out", ",", "name", ",", "relu", "=", "False", ",", "\n", "biased", "=", "biased", ",", "flatten", "=", "flatten", ",", "reuse", "=", "reuse", ")", "\n", "fc_bn", "=", "self", ".", "batch_normalization", "(", "fc", ",", "name", "+", "'/bn'", ",", "\n", "center", "=", "center", ",", "scale", "=", "scale", ",", "relu", "=", "relu", ",", "reuse", "=", "reuse", ")", "\n", "return", "fc_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.softmax": [[385, 388], ["tensorflow.nn.softmax"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.softmax"], ["", "@", "layer", "\n", "def", "softmax", "(", "self", ",", "input_tensor", ",", "name", ",", "dim", "=", "-", "1", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "softmax", "(", "input_tensor", ",", "dim", "=", "dim", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization": [[389, 407], ["tensorflow.layers.batch_normalization", "network.Network.relu"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu"], ["", "@", "layer", "\n", "def", "batch_normalization", "(", "self", ",", "input_tensor", ",", "name", ",", "\n", "center", "=", "False", ",", "scale", "=", "False", ",", "relu", "=", "False", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "\"\"\"Batch normalization.\"\"\"", "\n", "output", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "input_tensor", ",", "\n", "center", "=", "center", ",", "\n", "scale", "=", "scale", ",", "\n", "fused", "=", "True", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "trainable", "=", "self", ".", "trainable", ",", "\n", "reuse", "=", "self", ".", "reuse", "or", "reuse", ",", "\n", "epsilon", "=", "self", ".", "bn_epsilon", ",", "\n", "gamma_regularizer", "=", "None", ",", "# self.regularizer if scale else None,", "\n", "beta_regularizer", "=", "None", ",", "# self.regularizer if center else None,", "\n", "name", "=", "name", ")", "\n", "if", "relu", ":", "\n", "            ", "output", "=", "self", ".", "relu", "(", "output", ",", "name", "+", "'/relu'", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.context_normalization": [[408, 415], ["tensorflow.nn.moments", "tensorflow.nn.batch_normalization"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization"], ["", "@", "layer", "\n", "def", "context_normalization", "(", "self", ",", "input_tensor", ",", "name", ")", ":", "\n", "        ", "\"\"\"The input is a feature matrix with a shape of BxNx1xD\"\"\"", "\n", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "input_tensor", ",", "axes", "=", "[", "1", "]", ",", "keep_dims", "=", "True", ")", "\n", "output", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "\n", "input_tensor", ",", "mean", ",", "variance", ",", "None", ",", "None", ",", "self", ".", "bn_epsilon", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.l2norm": [[416, 419], ["tensorflow.nn.l2_normalize"], "methods", ["None"], ["", "@", "layer", "\n", "def", "l2norm", "(", "self", ",", "input_tensor", ",", "name", ",", "axis", "=", "-", "1", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "l2_normalize", "(", "input_tensor", ",", "axis", "=", "axis", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze": [[420, 423], ["tensorflow.squeeze"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze"], ["", "@", "layer", "\n", "def", "squeeze", "(", "self", ",", "input_tensor", ",", "axis", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "tf", ".", "squeeze", "(", "input_tensor", ",", "axis", "=", "axis", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape": [[424, 427], ["tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape"], ["", "@", "layer", "\n", "def", "reshape", "(", "self", ",", "input_tensor", ",", "shape", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "tf", ".", "reshape", "(", "input_tensor", ",", "shape", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.flatten": [[428, 431], ["tensorflow.layers.flatten"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.flatten"], ["", "@", "layer", "\n", "def", "flatten", "(", "self", ",", "input_tensor", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "tf", ".", "layers", ".", "flatten", "(", "input_tensor", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.tanh": [[432, 435], ["tensorflow.tanh"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.tanh"], ["", "@", "layer", "\n", "def", "tanh", "(", "self", ",", "input_tensor", ",", "name", "=", "None", ")", ":", "\n", "        ", "return", "tf", ".", "tanh", "(", "input_tensor", ",", "name", "=", "name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.caffe_like_padding": [[28, 39], ["len", "tensorflow.pad", "input_tensor.get_shape", "len", "tensorflow.pad", "network.caffe_like_padding.PAD"], "function", ["None"], ["def", "caffe_like_padding", "(", "input_tensor", ",", "padding", ")", ":", "\n", "    ", "\"\"\"A padding method that has same behavior as Caffe's.\"\"\"", "\n", "def", "PAD", "(", "x", ")", ":", "return", "[", "x", ",", "x", "]", "\n", "if", "len", "(", "input_tensor", ".", "get_shape", "(", ")", ")", "==", "4", ":", "\n", "        ", "padded_input", "=", "tf", ".", "pad", "(", "input_tensor", ",", "\n", "[", "PAD", "(", "0", ")", ",", "PAD", "(", "padding", ")", ",", "PAD", "(", "padding", ")", ",", "PAD", "(", "0", ")", "]", ",", "\"CONSTANT\"", ")", "\n", "", "elif", "len", "(", "input_tensor", ".", "get_shape", "(", ")", ")", "==", "5", ":", "\n", "        ", "padded_input", "=", "tf", ".", "pad", "(", "input_tensor", ",", "\n", "[", "PAD", "(", "0", ")", ",", "PAD", "(", "padding", ")", ",", "PAD", "(", "padding", ")", ",", "PAD", "(", "padding", ")", ",", "PAD", "(", "0", ")", "]", ",", "\n", "\"CONSTANT\"", ")", "\n", "", "return", "padded_input", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.layer": [[41, 69], ["kwargs.setdefault", "op", "network..feed", "op", "network..get_unique_name", "RuntimeError", "isinstance", "len", "list", "len"], "function", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.get_unique_name"], ["", "def", "layer", "(", "op", ")", ":", "\n", "    ", "\"\"\"Decorator for composable network layers.\"\"\"", "\n", "\n", "def", "layer_decorated", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Layer decoration.\"\"\"", "\n", "# We allow to construct low-level layers instead of high-level networks.", "\n", "if", "self", ".", "inputs", "is", "None", "or", "(", "len", "(", "args", ")", ">", "0", "and", "isinstance", "(", "args", "[", "0", "]", ",", "tf", ".", "Tensor", ")", ")", ":", "\n", "            ", "layer_output", "=", "op", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "layer_output", "\n", "# Automatically set a name if not provided.", "\n", "", "name", "=", "kwargs", ".", "setdefault", "(", "'name'", ",", "self", ".", "get_unique_name", "(", "op", ".", "__name__", ")", ")", "\n", "# Figure out the layer inputs.", "\n", "if", "not", "self", ".", "terminals", ":", "\n", "            ", "raise", "RuntimeError", "(", "'No input variables found for layer %s.'", "%", "name", ")", "\n", "", "elif", "len", "(", "self", ".", "terminals", ")", "==", "1", ":", "\n", "            ", "layer_input", "=", "self", ".", "terminals", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "layer_input", "=", "list", "(", "self", ".", "terminals", ")", "\n", "# Perform the operation and get the output.", "\n", "", "layer_output", "=", "op", "(", "self", ",", "layer_input", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "# Add to layer LUT.", "\n", "self", ".", "layers", "[", "name", "]", "=", "layer_output", "\n", "# This output is now the input for the next layer.", "\n", "self", ".", "feed", "(", "layer_output", ")", "\n", "# Return self for chained calls.", "\n", "return", "self", "\n", "\n", "", "return", "layer_decorated", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.resnet.ResNet50.setup": [[5, 208], ["resnet.ResNet50.feed().conv().batch_normalization().max_pool().conv().batch_normalization", "resnet.ResNet50.feed().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().avg_pool", "resnet.ResNet50.feed().fc().softmax", "resnet.ResNet50.feed().conv().batch_normalization().max_pool().conv", "resnet.ResNet50.feed().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().fc", "resnet.ResNet50.feed().conv().batch_normalization().max_pool", "resnet.ResNet50.feed().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv().batch_normalization", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed", "resnet.ResNet50.feed().conv().batch_normalization", "resnet.ResNet50.feed().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv", "resnet.ResNet50.feed().add().relu().conv().batch_normalization().conv", "resnet.ResNet50.feed", "resnet.ResNet50.feed().conv", "resnet.ResNet50.feed().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed", "resnet.ResNet50.feed().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed", "resnet.ResNet50.feed().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed", "resnet.ResNet50.feed().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed().add().relu().conv().batch_normalization", "resnet.ResNet50.feed", "resnet.ResNet50.feed().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed().add().relu().conv", "resnet.ResNet50.feed", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().add().relu", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed().add", "resnet.ResNet50.feed", "resnet.ResNet50.feed", "resnet.ResNet50.feed", "resnet.ResNet50.feed", "resnet.ResNet50.feed", "resnet.ResNet50.feed", "resnet.ResNet50.feed", "resnet.ResNet50.feed", "resnet.ResNet50.feed", "resnet.ResNet50.feed", "resnet.ResNet50.feed", "resnet.ResNet50.feed"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.avg_pool", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.softmax", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.fc", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.max_pool", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.relu", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed"], ["    ", "def", "setup", "(", "self", ")", ":", "\n", "        ", "(", "self", ".", "feed", "(", "'data'", ")", "\n", ".", "conv", "(", "7", ",", "64", ",", "2", ",", "padding", "=", "3", ",", "relu", "=", "False", ",", "name", "=", "'conv1'", ")", "\n", ".", "batch_normalization", "(", "relu", "=", "True", ",", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn_conv1'", ")", "\n", ".", "max_pool", "(", "3", ",", "2", ",", "name", "=", "'pool1'", ")", "\n", ".", "conv", "(", "1", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res2a_branch1'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn2a_branch1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'pool1'", ")", "\n", ".", "conv", "(", "1", ",", "64", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res2a_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn2a_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "64", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res2a_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn2a_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res2a_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn2a_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'bn2a_branch1'", ",", "\n", "'bn2a_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res2a'", ")", "\n", ".", "relu", "(", "name", "=", "'res2a_relu'", ")", "\n", ".", "conv", "(", "1", ",", "64", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res2b_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn2b_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "64", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res2b_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn2b_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res2b_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn2b_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res2a_relu'", ",", "\n", "'bn2b_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res2b'", ")", "\n", ".", "relu", "(", "name", "=", "'res2b_relu'", ")", "\n", ".", "conv", "(", "1", ",", "64", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res2c_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn2c_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "64", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res2c_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn2c_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res2c_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn2c_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res2b_relu'", ",", "\n", "'bn2c_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res2c'", ")", "\n", ".", "relu", "(", "name", "=", "'res2c_relu'", ")", "\n", ".", "conv", "(", "1", ",", "512", ",", "2", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3a_branch1'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn3a_branch1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res2c_relu'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "2", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3a_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn3a_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "128", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3a_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn3a_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "512", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3a_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn3a_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'bn3a_branch1'", ",", "\n", "'bn3a_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res3a'", ")", "\n", ".", "relu", "(", "name", "=", "'res3a_relu'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3b_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn3b_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "128", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3b_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn3b_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "512", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3b_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn3b_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res3a_relu'", ",", "\n", "'bn3b_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res3b'", ")", "\n", ".", "relu", "(", "name", "=", "'res3b_relu'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3c_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn3c_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "128", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3c_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn3c_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "512", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3c_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn3c_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res3b_relu'", ",", "\n", "'bn3c_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res3c'", ")", "\n", ".", "relu", "(", "name", "=", "'res3c_relu'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3d_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn3d_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "128", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3d_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn3d_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "512", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res3d_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn3d_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res3c_relu'", ",", "\n", "'bn3d_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res3d'", ")", "\n", ".", "relu", "(", "name", "=", "'res3d_relu'", ")", "\n", ".", "conv", "(", "1", ",", "1024", ",", "2", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4a_branch1'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn4a_branch1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res3d_relu'", ")", "\n", ".", "conv", "(", "1", ",", "256", ",", "2", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4a_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn4a_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4a_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn4a_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "1024", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4a_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn4a_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'bn4a_branch1'", ",", "\n", "'bn4a_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res4a'", ")", "\n", ".", "relu", "(", "name", "=", "'res4a_relu'", ")", "\n", ".", "conv", "(", "1", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4b_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn4b_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4b_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn4b_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "1024", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4b_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn4b_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res4a_relu'", ",", "\n", "'bn4b_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res4b'", ")", "\n", ".", "relu", "(", "name", "=", "'res4b_relu'", ")", "\n", ".", "conv", "(", "1", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4c_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn4c_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4c_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn4c_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "1024", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4c_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn4c_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res4b_relu'", ",", "\n", "'bn4c_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res4c'", ")", "\n", ".", "relu", "(", "name", "=", "'res4c_relu'", ")", "\n", ".", "conv", "(", "1", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4d_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn4d_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4d_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn4d_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "1024", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4d_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn4d_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res4c_relu'", ",", "\n", "'bn4d_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res4d'", ")", "\n", ".", "relu", "(", "name", "=", "'res4d_relu'", ")", "\n", ".", "conv", "(", "1", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4e_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn4e_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4e_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn4e_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "1024", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4e_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn4e_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res4d_relu'", ",", "\n", "'bn4e_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res4e'", ")", "\n", ".", "relu", "(", "name", "=", "'res4e_relu'", ")", "\n", ".", "conv", "(", "1", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4f_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn4f_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "256", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4f_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn4f_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "1024", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res4f_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn4f_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res4e_relu'", ",", "\n", "'bn4f_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res4f'", ")", "\n", ".", "relu", "(", "name", "=", "'res4f_relu'", ")", "\n", ".", "conv", "(", "1", ",", "2048", ",", "2", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res5a_branch1'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn5a_branch1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res4f_relu'", ")", "\n", ".", "conv", "(", "1", ",", "512", ",", "2", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res5a_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn5a_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "512", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res5a_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn5a_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "2048", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res5a_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn5a_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'bn5a_branch1'", ",", "\n", "'bn5a_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res5a'", ")", "\n", ".", "relu", "(", "name", "=", "'res5a_relu'", ")", "\n", ".", "conv", "(", "1", ",", "512", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res5b_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn5b_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "512", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res5b_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn5b_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "2048", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res5b_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn5b_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res5a_relu'", ",", "\n", "'bn5b_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res5b'", ")", "\n", ".", "relu", "(", "name", "=", "'res5b_relu'", ")", "\n", ".", "conv", "(", "1", ",", "512", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res5c_branch2a'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn5c_branch2a'", ")", "\n", ".", "conv", "(", "3", ",", "512", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res5c_branch2b'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "relu", "=", "True", ",", "name", "=", "'bn5c_branch2b'", ")", "\n", ".", "conv", "(", "1", ",", "2048", ",", "1", ",", "biased", "=", "False", ",", "relu", "=", "False", ",", "name", "=", "'res5c_branch2c'", ")", "\n", ".", "batch_normalization", "(", "scale", "=", "True", ",", "center", "=", "True", ",", "name", "=", "'bn5c_branch2c'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res5b_relu'", ",", "\n", "'bn5c_branch2c'", ")", "\n", ".", "add", "(", "name", "=", "'res5c'", ")", "\n", ".", "relu", "(", "name", "=", "'res5c_relu'", ")", "\n", ".", "avg_pool", "(", "7", ",", "1", ",", "padding", "=", "'VALID'", ",", "name", "=", "'pool5'", ")", ")", "\n", "\n", "if", "not", "self", ".", "fcn", ":", "\n", "            ", "(", "self", ".", "feed", "(", "'pool5'", ")", "\n", ".", "fc", "(", "1000", ",", "relu", "=", "False", ",", "name", "=", "'fc1000'", ")", "\n", ".", "softmax", "(", "name", "=", "'prob'", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.augdesc.VisualContext._interpolate": [[9, 30], ["tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.math.top_k", "tensorflow.maximum", "tensorflow.reduce_sum", "tensorflow.tile", "tensorflow.reshape", "tensorflow.batch_gather", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.shape", "tensorflow.shape", "tensorflow.negative", "tensorflow.linalg.matrix_transpose", "points2.get_shape"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape"], ["def", "_interpolate", "(", "self", ",", "xy1", ",", "xy2", ",", "points2", ")", ":", "\n", "        ", "batch_size", "=", "tf", ".", "shape", "(", "xy1", ")", "[", "0", "]", "\n", "ndataset1", "=", "tf", ".", "shape", "(", "xy1", ")", "[", "1", "]", "\n", "\n", "eps", "=", "1e-6", "\n", "dist_mat", "=", "tf", ".", "matmul", "(", "xy1", ",", "xy2", ",", "transpose_b", "=", "True", ")", "\n", "norm1", "=", "tf", ".", "reduce_sum", "(", "xy1", "*", "xy1", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "norm2", "=", "tf", ".", "reduce_sum", "(", "xy2", "*", "xy2", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "dist_mat", "=", "tf", ".", "sqrt", "(", "norm1", "-", "2", "*", "dist_mat", "+", "tf", ".", "linalg", ".", "matrix_transpose", "(", "norm2", ")", "+", "eps", ")", "\n", "dist", ",", "idx", "=", "tf", ".", "math", ".", "top_k", "(", "tf", ".", "negative", "(", "dist_mat", ")", ",", "k", "=", "3", ")", "\n", "\n", "dist", "=", "tf", ".", "maximum", "(", "dist", ",", "1e-10", ")", "\n", "norm", "=", "tf", ".", "reduce_sum", "(", "(", "1.0", "/", "dist", ")", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "norm", "=", "tf", ".", "tile", "(", "norm", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "weight", "=", "(", "1.0", "/", "dist", ")", "/", "norm", "\n", "idx", "=", "tf", ".", "reshape", "(", "idx", ",", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "nn_points", "=", "tf", ".", "batch_gather", "(", "points2", ",", "idx", ")", "\n", "nn_points", "=", "tf", ".", "reshape", "(", "nn_points", ",", "(", "batch_size", ",", "ndataset1", ",", "3", ",", "points2", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", ")", ")", "\n", "interpolated_points", "=", "tf", ".", "reduce_sum", "(", "weight", "[", "...", ",", "tf", ".", "newaxis", "]", "*", "nn_points", ",", "axis", "=", "-", "2", ")", "\n", "\n", "return", "interpolated_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.augdesc.VisualContext._mlp": [[31, 42], ["tensorflow.expand_dims", "enumerate", "tensorflow.squeeze", "module.conv_bn", "module.conv_bn", "len"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn"], ["", "def", "_mlp", "(", "module", ",", "inputs", ",", "mlp", ",", "last_relu", "=", "True", ",", "reuse", "=", "False", ",", "name", "=", "'conv_%d'", ")", ":", "\n", "        ", "new_points", "=", "tf", ".", "expand_dims", "(", "inputs", ",", "axis", "=", "2", ")", "\n", "for", "i", ",", "num_out_channel", "in", "enumerate", "(", "mlp", ")", ":", "\n", "            ", "if", "(", "i", "==", "len", "(", "mlp", ")", "-", "1", ")", "and", "not", "last_relu", ":", "\n", "                ", "new_points", "=", "module", ".", "conv_bn", "(", "new_points", ",", "1", ",", "num_out_channel", ",", "\n", "1", ",", "padding", "=", "'VALID'", ",", "relu", "=", "False", ",", "reuse", "=", "reuse", ",", "name", "=", "name", "%", "(", "i", ")", ")", "\n", "", "else", ":", "\n", "                ", "new_points", "=", "module", ".", "conv_bn", "(", "new_points", ",", "1", ",", "num_out_channel", ",", "\n", "1", ",", "padding", "=", "'VALID'", ",", "reuse", "=", "reuse", ",", "name", "=", "name", "%", "(", "i", ")", ")", "\n", "", "", "new_points", "=", "tf", ".", "squeeze", "(", "new_points", ",", "axis", "=", "2", ")", "\n", "return", "new_points", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.augdesc.VisualContext.setup": [[43, 76], ["tensorflow.linspace", "tensorflow.linspace", "tensorflow.meshgrid", "tensorflow.tile", "tensorflow.reshape", "augdesc.VisualContext.feed().reshape().conv().context_normalization().batch_normalization().conv().context_normalization().batch_normalization().squeeze", "augdesc.VisualContext._interpolate", "tensorflow.concat", "augdesc.VisualContext._mlp", "augdesc.VisualContext.terminals.append", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.reshape", "vis_context_feat.get_shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.stack", "augdesc.VisualContext.feed().reshape().conv().context_normalization().batch_normalization().conv().context_normalization().batch_normalization", "augdesc.VisualContext.feed().reshape().conv().context_normalization().batch_normalization().conv().context_normalization", "augdesc.VisualContext.feed().reshape().conv().context_normalization().batch_normalization().conv", "augdesc.VisualContext.feed().reshape().conv().context_normalization().batch_normalization", "augdesc.VisualContext.feed().reshape().conv().context_normalization", "augdesc.VisualContext.feed().reshape().conv", "augdesc.VisualContext.feed().reshape", "augdesc.VisualContext.feed"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.augdesc.VisualContext._interpolate", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.concat", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.augdesc.VisualContext._mlp", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.context_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.context_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.reshape", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed"], ["", "def", "setup", "(", "self", ")", ":", "\n", "        ", "local_feat", "=", "self", ".", "inputs", "[", "'local_feat'", "]", "\n", "vis_context_feat", "=", "self", ".", "inputs", "[", "'img_feat'", "]", "\n", "kpt_param", "=", "self", ".", "inputs", "[", "'kpt_param'", "]", "\n", "# config.", "\n", "batch_size", "=", "tf", ".", "shape", "(", "vis_context_feat", ")", "[", "0", "]", "\n", "img_feat_dim", "=", "vis_context_feat", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "# generate grid pts.", "\n", "x_rng", "=", "tf", ".", "linspace", "(", "-", "1.", ",", "1.", ",", "tf", ".", "shape", "(", "vis_context_feat", ")", "[", "2", "]", ")", "\n", "y_rng", "=", "tf", ".", "linspace", "(", "-", "1.", ",", "1.", ",", "tf", ".", "shape", "(", "vis_context_feat", ")", "[", "1", "]", ")", "\n", "xv", ",", "yv", "=", "tf", ".", "meshgrid", "(", "x_rng", ",", "y_rng", ")", "\n", "grid_pts", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "stack", "(", "(", "xv", ",", "yv", ")", ",", "-", "1", ")", ",", "0", ")", ",", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "grid_pts", "=", "tf", ".", "reshape", "(", "grid_pts", ",", "(", "batch_size", ",", "-", "1", ",", "2", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'img_feat'", ")", "\n", ".", "reshape", "(", "(", "batch_size", ",", "-", "1", ",", "1", ",", "img_feat_dim", ")", ")", "\n", ".", "conv", "(", "1", ",", "1024", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'conv1'", ")", "\n", ".", "context_normalization", "(", "name", "=", "'conv1_cn'", ")", "\n", ".", "batch_normalization", "(", "relu", "=", "True", ",", "name", "=", "'conv1_bn'", ")", "\n", ".", "conv", "(", "1", ",", "512", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'conv2'", ")", "\n", ".", "context_normalization", "(", "name", "=", "'conv2_cn'", ")", "\n", ".", "batch_normalization", "(", "relu", "=", "True", ",", "name", "=", "'conv2_bn'", ")", "\n", ".", "squeeze", "(", "axis", "=", "2", ",", "name", "=", "'squeeze'", ")", ")", "\n", "\n", "trans_vis_context_feat", "=", "self", ".", "layers", "[", "'squeeze'", "]", "\n", "inter_vis_context_feat", "=", "self", ".", "_interpolate", "(", "\n", "kpt_param", ",", "\n", "tf", ".", "reshape", "(", "grid_pts", ",", "(", "batch_size", ",", "-", "1", ",", "2", ")", ")", ",", "\n", "trans_vis_context_feat", ")", "\n", "\n", "fused_feat", "=", "tf", ".", "concat", "(", "(", "inter_vis_context_feat", ",", "local_feat", ")", ",", "axis", "=", "-", "1", ")", "\n", "out_vis_context", "=", "self", ".", "_mlp", "(", "fused_feat", ",", "[", "512", ",", "256", ",", "128", "]", ",", "name", "=", "'fuse_photo_context_%d'", ")", "\n", "self", ".", "terminals", ".", "append", "(", "out_vis_context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.augdesc.MatchabilityPrediction.setup": [[81, 89], ["augdesc.MatchabilityPrediction.feed().conv_bn().conv_bn().conv_bn().conv().fc().tanh", "augdesc.MatchabilityPrediction.feed().conv_bn().conv_bn().conv_bn().conv().fc", "augdesc.MatchabilityPrediction.feed().conv_bn().conv_bn().conv_bn().conv", "augdesc.MatchabilityPrediction.feed().conv_bn().conv_bn().conv_bn", "augdesc.MatchabilityPrediction.feed().conv_bn().conv_bn", "augdesc.MatchabilityPrediction.feed().conv_bn", "augdesc.MatchabilityPrediction.feed"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.tanh", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.fc", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed"], ["def", "setup", "(", "self", ")", ":", "\n", "        ", "(", "self", ".", "feed", "(", "'data'", ")", "\n", ".", "conv_bn", "(", "8", ",", "128", ",", "1", ",", "padding", "=", "'VALID'", ",", "name", "=", "'kpt_m_conv0'", ")", "\n", ".", "conv_bn", "(", "1", ",", "32", ",", "1", ",", "padding", "=", "'VALID'", ",", "name", "=", "'kpt_m_conv1'", ")", "\n", ".", "conv_bn", "(", "1", ",", "32", ",", "1", ",", "padding", "=", "'VALID'", ",", "name", "=", "'kpt_m_conv2'", ")", "\n", ".", "conv", "(", "1", ",", "1", ",", "1", ",", "biased", "=", "True", ",", "relu", "=", "False", ",", "padding", "=", "'VALID'", ",", "name", "=", "'kpt_m'", ")", "\n", ".", "fc", "(", "1", ",", "biased", "=", "True", ",", "relu", "=", "False", ",", "flatten", "=", "False", ")", "\n", ".", "tanh", "(", "name", "=", "'kpt_m_rescale'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.augdesc.LightContextNormalization.setup": [[94, 129], ["augdesc.LightContextNormalization.feed().conv().context_normalization().batch_normalization().conv", "augdesc.LightContextNormalization.feed().add", "augdesc.LightContextNormalization.feed().context_normalization().batch_normalization().conv", "augdesc.LightContextNormalization.feed().add", "augdesc.LightContextNormalization.feed().context_normalization().batch_normalization().conv", "augdesc.LightContextNormalization.feed().add", "augdesc.LightContextNormalization.feed().context_normalization().batch_normalization().conv", "augdesc.LightContextNormalization.feed().add().conv().squeeze", "augdesc.LightContextNormalization.feed().conv().context_normalization().batch_normalization", "augdesc.LightContextNormalization.feed", "augdesc.LightContextNormalization.feed().context_normalization().batch_normalization", "augdesc.LightContextNormalization.feed", "augdesc.LightContextNormalization.feed().context_normalization().batch_normalization", "augdesc.LightContextNormalization.feed", "augdesc.LightContextNormalization.feed().context_normalization().batch_normalization", "augdesc.LightContextNormalization.feed().add().conv", "augdesc.LightContextNormalization.feed().conv().context_normalization", "augdesc.LightContextNormalization.feed().context_normalization", "augdesc.LightContextNormalization.feed().context_normalization", "augdesc.LightContextNormalization.feed().context_normalization", "augdesc.LightContextNormalization.feed().add", "augdesc.LightContextNormalization.feed().conv", "augdesc.LightContextNormalization.feed", "augdesc.LightContextNormalization.feed", "augdesc.LightContextNormalization.feed", "augdesc.LightContextNormalization.feed", "augdesc.LightContextNormalization.feed"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.context_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.context_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.context_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.context_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed"], ["def", "setup", "(", "self", ")", ":", "\n", "        ", "(", "self", ".", "feed", "(", "'points'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'dim_control'", ")", "\n", ".", "context_normalization", "(", "name", "=", "'cn1_cn1'", ")", "\n", ".", "batch_normalization", "(", "relu", "=", "True", ",", "name", "=", "'cn1_bn1'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'cn1_conv1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'dim_control'", ",", "'cn1_conv1'", ")", "\n", ".", "add", "(", "name", "=", "'res1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res1'", ")", "\n", ".", "context_normalization", "(", "name", "=", "'cn2_cn1'", ")", "\n", ".", "batch_normalization", "(", "relu", "=", "True", ",", "name", "=", "'cn2_bn1'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'cn2_conv1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res1'", ",", "'cn2_conv1'", ")", "\n", ".", "add", "(", "name", "=", "'res2'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res2'", ")", "\n", ".", "context_normalization", "(", "name", "=", "'cn3_cn1'", ")", "\n", ".", "batch_normalization", "(", "relu", "=", "True", ",", "name", "=", "'cn3_bn1'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'cn3_conv1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res2'", ",", "'cn3_conv1'", ")", "\n", ".", "add", "(", "name", "=", "'res3'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res3'", ")", "\n", ".", "context_normalization", "(", "name", "=", "'cn4_cn1'", ")", "\n", ".", "batch_normalization", "(", "relu", "=", "True", ",", "name", "=", "'cn4_bn1'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'cn4_conv1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res3'", ",", "'cn4_conv1'", ")", "\n", ".", "add", "(", "name", "=", "'res4'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'context_trans'", ")", "\n", ".", "squeeze", "(", "axis", "=", "2", ",", "name", "=", "'context_feat'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.augdesc.DiffPoolContextNormalization.setup": [[134, 209], ["augdesc.DiffPoolContextNormalization.feed().conv().context_normalization().batch_normalization().conv", "augdesc.DiffPoolContextNormalization.feed().add", "augdesc.DiffPoolContextNormalization.diffpool_cn", "augdesc.DiffPoolContextNormalization.feed().context_normalization().batch_normalization().conv", "augdesc.DiffPoolContextNormalization.feed().add", "augdesc.DiffPoolContextNormalization.diffpool_cn", "augdesc.DiffPoolContextNormalization.feed().context_normalization().batch_normalization().conv", "augdesc.DiffPoolContextNormalization.feed().context_normalization().batch_normalization().conv", "augdesc.DiffPoolContextNormalization.feed().add", "augdesc.DiffPoolContextNormalization.feed().diffunpool_cn", "augdesc.DiffPoolContextNormalization.feed().concat().conv_bn", "augdesc.DiffPoolContextNormalization.feed().context_normalization().batch_normalization().conv", "augdesc.DiffPoolContextNormalization.feed().add", "augdesc.DiffPoolContextNormalization.feed().diffunpool_cn", "augdesc.DiffPoolContextNormalization.feed().concat().conv_bn", "augdesc.DiffPoolContextNormalization.feed().conv().squeeze", "tensorflow.transpose", "augdesc.DiffPoolContextNormalization.batch_normalization", "augdesc.DiffPoolContextNormalization.conv", "tensorflow.transpose", "augdesc.DiffPoolContextNormalization.feed().conv().context_normalization().batch_normalization", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed().context_normalization().batch_normalization", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed().context_normalization().batch_normalization", "augdesc.DiffPoolContextNormalization.feed().context_normalization().batch_normalization", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed().concat", "augdesc.DiffPoolContextNormalization.feed().context_normalization().batch_normalization", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed().concat", "augdesc.DiffPoolContextNormalization.feed().conv", "augdesc.DiffPoolContextNormalization.feed().conv().context_normalization", "augdesc.DiffPoolContextNormalization.feed().context_normalization", "augdesc.DiffPoolContextNormalization.feed().context_normalization", "augdesc.DiffPoolContextNormalization.feed().context_normalization", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed().context_normalization", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed().conv", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed", "augdesc.DiffPoolContextNormalization.feed"], "methods", ["home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.add", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv_bn", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.squeeze", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.concat", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.batch_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.concat", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.context_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.context_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.context_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.context_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.context_normalization", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.conv", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed", "home.repos.pwc.inspect_result.lzx551402_contextdesc.cnn_wrapper.network.Network.feed"], ["def", "setup", "(", "self", ")", ":", "\n", "        ", "share", "=", "False", "\n", "spatial", "=", "False", "\n", "\n", "(", "self", ".", "feed", "(", "'points'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'dim_control'", ")", "\n", ".", "context_normalization", "(", "name", "=", "'cn1_cn1'", ")", "\n", ".", "batch_normalization", "(", "relu", "=", "True", ",", "name", "=", "'cn1_bn1'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'cn1_conv1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'dim_control'", ",", "'cn1_conv1'", ")", "\n", ".", "add", "(", "name", "=", "'res1'", ")", ")", "\n", "\n", "diffpool1", ",", "weight_mat1", "=", "self", ".", "diffpool_cn", "(", "self", ".", "layers", "[", "'res1'", "]", ",", "512", ",", "name", "=", "'diffpool1'", ")", "\n", "self", ".", "layers", "[", "'diffpool1'", "]", "=", "diffpool1", "\n", "self", ".", "layers", "[", "'weight_mat1'", "]", "=", "weight_mat1", "\n", "\n", "(", "self", ".", "feed", "(", "'diffpool1'", ")", "\n", ".", "context_normalization", "(", "name", "=", "'cn2_cn1'", ")", "\n", ".", "batch_normalization", "(", "relu", "=", "True", ",", "name", "=", "'cn2_bn1'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'cn2_conv1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'diffpool1'", ",", "'cn2_conv1'", ")", "\n", ".", "add", "(", "name", "=", "'res2'", ")", ")", "\n", "\n", "diffpool2", ",", "weight_mat2", "=", "self", ".", "diffpool_cn", "(", "self", ".", "layers", "[", "'res2'", "]", ",", "256", ",", "name", "=", "'diffpool2'", ")", "\n", "self", ".", "layers", "[", "'diffpool2'", "]", "=", "diffpool2", "\n", "self", ".", "layers", "[", "'weight_mat2'", "]", "=", "weight_mat2", "\n", "\n", "(", "self", ".", "feed", "(", "'diffpool2'", ")", "\n", ".", "context_normalization", "(", "name", "=", "'cn3_cn1'", ")", "\n", ".", "batch_normalization", "(", "relu", "=", "True", ",", "name", "=", "'cn3_bn1'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'cn3_conv1'", ")", ")", "\n", "\n", "if", "spatial", ":", "\n", "            ", "cn3_conv", "=", "self", ".", "layers", "[", "'cn3_conv1'", "]", "\n", "cn3_conv", "=", "tf", ".", "transpose", "(", "cn3_conv", ",", "[", "0", ",", "3", ",", "2", ",", "1", "]", ")", "\n", "cn_spatial", "=", "self", ".", "batch_normalization", "(", "cn3_conv", ",", "relu", "=", "True", ",", "name", "=", "'cn3_spatial_bn'", ")", "\n", "cn_spatial", "=", "self", ".", "conv", "(", "cn_spatial", ",", "1", ",", "256", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'cn_spatial'", ")", "\n", "cn_spatial", "=", "tf", ".", "transpose", "(", "cn_spatial", ",", "[", "0", ",", "3", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "layers", "[", "'cn3_conv1'", "]", "=", "cn_spatial", "+", "self", ".", "layers", "[", "'cn3_conv1'", "]", "\n", "\n", "", "(", "self", ".", "feed", "(", "'cn3_conv1'", ")", "\n", ".", "context_normalization", "(", "name", "=", "'cn3_cn2'", ")", "\n", ".", "batch_normalization", "(", "relu", "=", "True", ",", "name", "=", "'cn3_bn2'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'cn3_conv2'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'diffpool2'", ",", "'cn3_conv2'", ")", "\n", ".", "add", "(", "name", "=", "'res3'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res3'", ",", "'res2'", ",", "'weight_mat2'", ")", "\n", ".", "diffunpool_cn", "(", "share", "=", "share", ",", "name", "=", "'diffunpool1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'diffunpool1'", ",", "'res2'", ")", "\n", ".", "concat", "(", "-", "1", ",", "name", "=", "'diffunpool1'", ")", "\n", ".", "conv_bn", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'diffunpool1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'diffunpool1'", ")", "\n", ".", "context_normalization", "(", "name", "=", "'cn4_cn1'", ")", "\n", ".", "batch_normalization", "(", "relu", "=", "True", ",", "name", "=", "'cn4_bn1'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'cn4_conv1'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'diffunpool1'", ",", "'cn4_conv1'", ")", "\n", ".", "add", "(", "name", "=", "'res4'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'res4'", ",", "'res1'", ",", "'weight_mat1'", ")", "\n", ".", "diffunpool_cn", "(", "share", "=", "share", ",", "name", "=", "'diffunpool2'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'diffunpool2'", ",", "'res1'", ")", "\n", ".", "concat", "(", "-", "1", ",", "name", "=", "'diffunpool2'", ")", "\n", ".", "conv_bn", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'diffunpool2'", ")", ")", "\n", "\n", "(", "self", ".", "feed", "(", "'diffunpool2'", ")", "\n", ".", "conv", "(", "1", ",", "128", ",", "1", ",", "relu", "=", "False", ",", "name", "=", "'context_trans'", ")", "\n", ".", "squeeze", "(", "axis", "=", "2", ",", "name", "=", "'context_feat'", ")", ")", "\n", "", "", ""]]}